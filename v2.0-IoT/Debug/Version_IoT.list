
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c848  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001088  0800ca2c  0800ca2c  0001ca2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dab4  0800dab4  00020110  2**0
                  CONTENTS
  4 .ARM          00000000  0800dab4  0800dab4  00020110  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dab4  0800dab4  00020110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dab4  0800dab4  0001dab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dab8  0800dab8  0001dab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0800dabc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000110  0800dbcc  00020110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004c4  0800dbcc  000204c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020110  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020139  2**0
                  CONTENTS, READONLY
 13 .debug_info   000166b3  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034c3  00000000  00000000  0003682f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00039cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e68  00000000  00000000  0003af90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003bdf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bf40  00000000  00000000  0005849d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ee69  00000000  00000000  000743dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005304  00000000  00000000  00113248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0011854c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000110 	.word	0x20000110
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ca14 	.word	0x0800ca14

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000114 	.word	0x20000114
 8000220:	0800ca14 	.word	0x0800ca14

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 f9ac 	bl	80095ac <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 f824 	bl	80082a4 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[102];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	2000012c 	.word	0x2000012c
 80004bc:	20000290 	.word	0x20000290
 80004c0:	200001d9 	.word	0x200001d9
 80004c4:	20000201 	.word	0x20000201
 80004c8:	20000204 	.word	0x20000204
 80004cc:	20000205 	.word	0x20000205
 80004d0:	20000206 	.word	0x20000206
 80004d4:	20000207 	.word	0x20000207
 80004d8:	20000208 	.word	0x20000208
 80004dc:	20000209 	.word	0x20000209
 80004e0:	20000219 	.word	0x20000219
 80004e4:	2000020a 	.word	0x2000020a
 80004e8:	2000021a 	.word	0x2000021a
 80004ec:	2000020b 	.word	0x2000020b
 80004f0:	2000021b 	.word	0x2000021b
 80004f4:	2000020e 	.word	0x2000020e
 80004f8:	2000020f 	.word	0x2000020f
 80004fc:	20000210 	.word	0x20000210
 8000500:	20000211 	.word	0x20000211
 8000504:	20000212 	.word	0x20000212
 8000508:	20000213 	.word	0x20000213
 800050c:	20000214 	.word	0x20000214
 8000510:	20000215 	.word	0x20000215
 8000514:	20000216 	.word	0x20000216
 8000518:	20000217 	.word	0x20000217
 800051c:	20000218 	.word	0x20000218
 8000520:	2000021c 	.word	0x2000021c
 8000524:	2000021e 	.word	0x2000021e
 8000528:	200001fc 	.word	0x200001fc
 800052c:	200001fd 	.word	0x200001fd
 8000530:	200001fe 	.word	0x200001fe
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	200001ff 	.word	0x200001ff
 8000540:	20000221 	.word	0x20000221
 8000544:	2000021f 	.word	0x2000021f
 8000548:	2000020d 	.word	0x2000020d
 800054c:	20000220 	.word	0x20000220
 8000550:	2000020c 	.word	0x2000020c
 8000554:	20000222 	.word	0x20000222
 8000558:	20000223 	.word	0x20000223
 800055c:	20000224 	.word	0x20000224
 8000560:	20000225 	.word	0x20000225
 8000564:	20000226 	.word	0x20000226
 8000568:	20000227 	.word	0x20000227
 800056c:	20000228 	.word	0x20000228
 8000570:	20000229 	.word	0x20000229
 8000574:	2000022a 	.word	0x2000022a
 8000578:	2000022b 	.word	0x2000022b
 800057c:	200001d8 	.word	0x200001d8
	}

	if(kapi1AcSure>5) {
 8000580:	4b58      	ldr	r3, [pc, #352]	; (80006e4 <eepromKontrol+0x4b0>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b56      	ldr	r3, [pc, #344]	; (80006e4 <eepromKontrol+0x4b0>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b56      	ldr	r3, [pc, #344]	; (80006e8 <eepromKontrol+0x4b4>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b54      	ldr	r3, [pc, #336]	; (80006e8 <eepromKontrol+0x4b4>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b53      	ldr	r3, [pc, #332]	; (80006ec <eepromKontrol+0x4b8>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b51      	ldr	r3, [pc, #324]	; (80006ec <eepromKontrol+0x4b8>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b51      	ldr	r3, [pc, #324]	; (80006f0 <eepromKontrol+0x4bc>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b4f      	ldr	r3, [pc, #316]	; (80006f0 <eepromKontrol+0x4bc>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4e      	ldr	r3, [pc, #312]	; (80006f4 <eepromKontrol+0x4c0>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4c      	ldr	r3, [pc, #304]	; (80006f4 <eepromKontrol+0x4c0>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4c      	ldr	r3, [pc, #304]	; (80006f8 <eepromKontrol+0x4c4>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b4a      	ldr	r3, [pc, #296]	; (80006f8 <eepromKontrol+0x4c4>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b49      	ldr	r3, [pc, #292]	; (80006fc <eepromKontrol+0x4c8>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b47      	ldr	r3, [pc, #284]	; (80006fc <eepromKontrol+0x4c8>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b47      	ldr	r3, [pc, #284]	; (8000700 <eepromKontrol+0x4cc>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b45      	ldr	r3, [pc, #276]	; (8000700 <eepromKontrol+0x4cc>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b44      	ldr	r3, [pc, #272]	; (8000704 <eepromKontrol+0x4d0>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b42      	ldr	r3, [pc, #264]	; (8000704 <eepromKontrol+0x4d0>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b42      	ldr	r3, [pc, #264]	; (8000708 <eepromKontrol+0x4d4>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b40      	ldr	r3, [pc, #256]	; (8000708 <eepromKontrol+0x4d4>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b3f      	ldr	r3, [pc, #252]	; (800070c <eepromKontrol+0x4d8>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3d      	ldr	r3, [pc, #244]	; (800070c <eepromKontrol+0x4d8>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3d      	ldr	r3, [pc, #244]	; (8000710 <eepromKontrol+0x4dc>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3b      	ldr	r3, [pc, #236]	; (8000710 <eepromKontrol+0x4dc>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b3a      	ldr	r3, [pc, #232]	; (8000714 <eepromKontrol+0x4e0>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b38      	ldr	r3, [pc, #224]	; (8000714 <eepromKontrol+0x4e0>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b38      	ldr	r3, [pc, #224]	; (8000718 <eepromKontrol+0x4e4>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b36      	ldr	r3, [pc, #216]	; (8000718 <eepromKontrol+0x4e4>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b35      	ldr	r3, [pc, #212]	; (800071c <eepromKontrol+0x4e8>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b33      	ldr	r3, [pc, #204]	; (800071c <eepromKontrol+0x4e8>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b33      	ldr	r3, [pc, #204]	; (8000720 <eepromKontrol+0x4ec>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b31      	ldr	r3, [pc, #196]	; (8000720 <eepromKontrol+0x4ec>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b30      	ldr	r3, [pc, #192]	; (8000724 <eepromKontrol+0x4f0>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <eepromKontrol+0x4f0>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2e      	ldr	r3, [pc, #184]	; (8000728 <eepromKontrol+0x4f4>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2c      	ldr	r3, [pc, #176]	; (8000728 <eepromKontrol+0x4f4>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2b      	ldr	r3, [pc, #172]	; (800072c <eepromKontrol+0x4f8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b29      	ldr	r3, [pc, #164]	; (800072c <eepromKontrol+0x4f8>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b29      	ldr	r3, [pc, #164]	; (8000730 <eepromKontrol+0x4fc>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b27      	ldr	r3, [pc, #156]	; (8000730 <eepromKontrol+0x4fc>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <eepromKontrol+0x500>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <eepromKontrol+0x500>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b24      	ldr	r3, [pc, #144]	; (8000738 <eepromKontrol+0x504>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b22      	ldr	r3, [pc, #136]	; (8000738 <eepromKontrol+0x504>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	readFromEEPROM(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f851 	bl	800075c <readFromEEPROM>
	HAL_Delay(500);
 80006ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006be:	f007 fdf1 	bl	80082a4 <HAL_Delay>
	readFromEEPROM(2);
 80006c2:	2002      	movs	r0, #2
 80006c4:	f000 f84a 	bl	800075c <readFromEEPROM>
	HAL_Delay(1000);
 80006c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006cc:	f007 fdea 	bl	80082a4 <HAL_Delay>
	readFromEEPROM(3);
 80006d0:	2003      	movs	r0, #3
 80006d2:	f000 f843 	bl	800075c <readFromEEPROM>
	HAL_Delay(1000);
 80006d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006da:	f007 fde3 	bl	80082a4 <HAL_Delay>
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	20000219 	.word	0x20000219
 80006e8:	2000020a 	.word	0x2000020a
 80006ec:	2000021a 	.word	0x2000021a
 80006f0:	2000020b 	.word	0x2000020b
 80006f4:	2000020d 	.word	0x2000020d
 80006f8:	2000021b 	.word	0x2000021b
 80006fc:	2000020e 	.word	0x2000020e
 8000700:	2000020f 	.word	0x2000020f
 8000704:	20000210 	.word	0x20000210
 8000708:	20000211 	.word	0x20000211
 800070c:	20000212 	.word	0x20000212
 8000710:	20000213 	.word	0x20000213
 8000714:	20000214 	.word	0x20000214
 8000718:	20000215 	.word	0x20000215
 800071c:	20000216 	.word	0x20000216
 8000720:	20000217 	.word	0x20000217
 8000724:	20000218 	.word	0x20000218
 8000728:	2000021c 	.word	0x2000021c
 800072c:	2000021e 	.word	0x2000021e
 8000730:	20000220 	.word	0x20000220
 8000734:	20000221 	.word	0x20000221
 8000738:	2000021f 	.word	0x2000021f

0800073c <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <getCharFromCursorPosition+0x1c>)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	4413      	add	r3, r2
 800074a:	781b      	ldrb	r3, [r3, #0]
}
 800074c:	4618      	mov	r0, r3
 800074e:	370c      	adds	r7, #12
 8000750:	46bd      	mov	sp, r7
 8000752:	bc80      	pop	{r7}
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	20000030 	.word	0x20000030

0800075c <readFromEEPROM>:
		memset(&eepromData[passStartPos], 0, wifiCharacterLimit);
		strncpy((char *)&eepromData[passStartPos], wifiPass, wifiCharacterLimit);
	}
}

void readFromEEPROM(int state) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d117      	bne.n	800079a <readFromEEPROM+0x3e>
		//MachineID Okuma
		uint8_t tempMachineIDStartPos = idStartPos;
 800076a:	4b2d      	ldr	r3, [pc, #180]	; (8000820 <readFromEEPROM+0xc4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	e00d      	b.n	8000792 <readFromEEPROM+0x36>
			machineID[i] = eepromData[tempMachineIDStartPos];
 8000776:	7ffb      	ldrb	r3, [r7, #31]
 8000778:	4a2a      	ldr	r2, [pc, #168]	; (8000824 <readFromEEPROM+0xc8>)
 800077a:	5cd1      	ldrb	r1, [r2, r3]
 800077c:	4a2a      	ldr	r2, [pc, #168]	; (8000828 <readFromEEPROM+0xcc>)
 800077e:	69bb      	ldr	r3, [r7, #24]
 8000780:	4413      	add	r3, r2
 8000782:	460a      	mov	r2, r1
 8000784:	701a      	strb	r2, [r3, #0]

			tempMachineIDStartPos++;
 8000786:	7ffb      	ldrb	r3, [r7, #31]
 8000788:	3301      	adds	r3, #1
 800078a:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<machineIDCharacterLimit; i++) {
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	3301      	adds	r3, #1
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	69bb      	ldr	r3, [r7, #24]
 8000794:	2b0b      	cmp	r3, #11
 8000796:	ddee      	ble.n	8000776 <readFromEEPROM+0x1a>
			wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);

			tempPassStartPos++;
		}
	}
}
 8000798:	e03e      	b.n	8000818 <readFromEEPROM+0xbc>
	} else if(state == 2) {
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b02      	cmp	r3, #2
 800079e:	d11c      	bne.n	80007da <readFromEEPROM+0x7e>
		uint8_t tempSSIDStartPos = ssidStartPos;
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <readFromEEPROM+0xd0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
 80007aa:	e012      	b.n	80007d2 <readFromEEPROM+0x76>
			wifiSSID[i] = getCharFromCursorPosition(eepromData[tempSSIDStartPos]);
 80007ac:	7dfb      	ldrb	r3, [r7, #23]
 80007ae:	4a1d      	ldr	r2, [pc, #116]	; (8000824 <readFromEEPROM+0xc8>)
 80007b0:	5cd3      	ldrb	r3, [r2, r3]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff ffc2 	bl	800073c <getCharFromCursorPosition>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4619      	mov	r1, r3
 80007bc:	4a1c      	ldr	r2, [pc, #112]	; (8000830 <readFromEEPROM+0xd4>)
 80007be:	693b      	ldr	r3, [r7, #16]
 80007c0:	4413      	add	r3, r2
 80007c2:	460a      	mov	r2, r1
 80007c4:	701a      	strb	r2, [r3, #0]
			tempSSIDStartPos++;
 80007c6:	7dfb      	ldrb	r3, [r7, #23]
 80007c8:	3301      	adds	r3, #1
 80007ca:	75fb      	strb	r3, [r7, #23]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007cc:	693b      	ldr	r3, [r7, #16]
 80007ce:	3301      	adds	r3, #1
 80007d0:	613b      	str	r3, [r7, #16]
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	2b13      	cmp	r3, #19
 80007d6:	dde9      	ble.n	80007ac <readFromEEPROM+0x50>
}
 80007d8:	e01e      	b.n	8000818 <readFromEEPROM+0xbc>
	} else if(state == 3) {
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b03      	cmp	r3, #3
 80007de:	d11b      	bne.n	8000818 <readFromEEPROM+0xbc>
		uint8_t tempPassStartPos = passStartPos;
 80007e0:	4b14      	ldr	r3, [pc, #80]	; (8000834 <readFromEEPROM+0xd8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	e012      	b.n	8000812 <readFromEEPROM+0xb6>
			wifiPass[i] = getCharFromCursorPosition(eepromData[tempPassStartPos]);
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <readFromEEPROM+0xc8>)
 80007f0:	5cd3      	ldrb	r3, [r2, r3]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ffa2 	bl	800073c <getCharFromCursorPosition>
 80007f8:	4603      	mov	r3, r0
 80007fa:	4619      	mov	r1, r3
 80007fc:	4a0e      	ldr	r2, [pc, #56]	; (8000838 <readFromEEPROM+0xdc>)
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	4413      	add	r3, r2
 8000802:	460a      	mov	r2, r1
 8000804:	701a      	strb	r2, [r3, #0]
			tempPassStartPos++;
 8000806:	7bfb      	ldrb	r3, [r7, #15]
 8000808:	3301      	adds	r3, #1
 800080a:	73fb      	strb	r3, [r7, #15]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	3301      	adds	r3, #1
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	2b13      	cmp	r3, #19
 8000816:	dde9      	ble.n	80007ec <readFromEEPROM+0x90>
}
 8000818:	bf00      	nop
 800081a:	3720      	adds	r7, #32
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000004 	.word	0x20000004
 8000824:	2000012c 	.word	0x2000012c
 8000828:	200001a4 	.word	0x200001a4
 800082c:	20000008 	.word	0x20000008
 8000830:	200001b0 	.word	0x200001b0
 8000834:	2000000c 	.word	0x2000000c
 8000838:	200001c4 	.word	0x200001c4

0800083c <sendATCommand>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void sendATCommand(UART_HandleTypeDef *huart1, const char *cmd, uint16_t delayAfter) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	4613      	mov	r3, r2
 8000848:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(huart1, (uint8_t*)cmd, strlen(cmd));
 800084a:	68b8      	ldr	r0, [r7, #8]
 800084c:	f7ff fcea 	bl	8000224 <strlen>
 8000850:	4603      	mov	r3, r0
 8000852:	b29b      	uxth	r3, r3
 8000854:	461a      	mov	r2, r3
 8000856:	68b9      	ldr	r1, [r7, #8]
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f00a fdef 	bl	800b43c <HAL_UART_Transmit_IT>
    HAL_Delay(delayAfter);
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	4618      	mov	r0, r3
 8000862:	f007 fd1f 	bl	80082a4 <HAL_Delay>
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <ESP8266_Init>:

void ESP8266_Init(UART_HandleTypeDef *huart, const char *wifiSS, const char *wifiPA) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b0a0      	sub	sp, #128	; 0x80
 8000874:	af02      	add	r7, sp, #8
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
    sendATCommand(huart, "AT+RESTORE\r\n", 1000);
 800087c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000880:	4915      	ldr	r1, [pc, #84]	; (80008d8 <ESP8266_Init+0x68>)
 8000882:	68f8      	ldr	r0, [r7, #12]
 8000884:	f7ff ffda 	bl	800083c <sendATCommand>
    sendATCommand(huart, "AT+RST\r\n", 1000);
 8000888:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800088c:	4913      	ldr	r1, [pc, #76]	; (80008dc <ESP8266_Init+0x6c>)
 800088e:	68f8      	ldr	r0, [r7, #12]
 8000890:	f7ff ffd4 	bl	800083c <sendATCommand>
    sendATCommand(huart, "AT\r\n", 2000);
 8000894:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000898:	4911      	ldr	r1, [pc, #68]	; (80008e0 <ESP8266_Init+0x70>)
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f7ff ffce 	bl	800083c <sendATCommand>
    sendATCommand(huart, "AT+CWMODE=1\r\n", 2000);
 80008a0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008a4:	490f      	ldr	r1, [pc, #60]	; (80008e4 <ESP8266_Init+0x74>)
 80008a6:	68f8      	ldr	r0, [r7, #12]
 80008a8:	f7ff ffc8 	bl	800083c <sendATCommand>

    char cmd[100];
    snprintf(cmd, sizeof(cmd), "AT+CWJAP_DEF=\"%s\",\"%s\"\r\n", wifiSS, wifiPA);
 80008ac:	f107 0014 	add.w	r0, r7, #20
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	9300      	str	r3, [sp, #0]
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	4a0c      	ldr	r2, [pc, #48]	; (80008e8 <ESP8266_Init+0x78>)
 80008b8:	2164      	movs	r1, #100	; 0x64
 80008ba:	f00b fbf5 	bl	800c0a8 <sniprintf>
    sendATCommand(huart, cmd, 2000);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008c6:	4619      	mov	r1, r3
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f7ff ffb7 	bl	800083c <sendATCommand>
}
 80008ce:	bf00      	nop
 80008d0:	3778      	adds	r7, #120	; 0x78
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	0800ca2c 	.word	0x0800ca2c
 80008dc:	0800ca3c 	.word	0x0800ca3c
 80008e0:	0800ca48 	.word	0x0800ca48
 80008e4:	0800ca50 	.word	0x0800ca50
 80008e8:	0800ca60 	.word	0x0800ca60

080008ec <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart, const char *machineID, const char *machineData) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0c6      	sub	sp, #280	; 0x118
 80008f0:	af02      	add	r7, sp, #8
 80008f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80008fa:	6018      	str	r0, [r3, #0]
 80008fc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000904:	6019      	str	r1, [r3, #0]
 8000906:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800090a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800090e:	601a      	str	r2, [r3, #0]
    char cmd[200];
    snprintf(cmd, sizeof(cmd), "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000910:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000914:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <sendMachineData+0xb8>)
 8000916:	4a24      	ldr	r2, [pc, #144]	; (80009a8 <sendMachineData+0xbc>)
 8000918:	21c8      	movs	r1, #200	; 0xc8
 800091a:	f00b fbc5 	bl	800c0a8 <sniprintf>
    sendATCommand(huart, cmd, 4000);
 800091e:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000922:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000926:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800092a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800092e:	6818      	ldr	r0, [r3, #0]
 8000930:	f7ff ff84 	bl	800083c <sendATCommand>

    int len = snprintf(cmd, sizeof(cmd),
 8000934:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800093c:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000940:	4a1a      	ldr	r2, [pc, #104]	; (80009ac <sendMachineData+0xc0>)
 8000942:	9201      	str	r2, [sp, #4]
 8000944:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000948:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800094c:	6812      	ldr	r2, [r2, #0]
 800094e:	9200      	str	r2, [sp, #0]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <sendMachineData+0xc4>)
 8000954:	21c8      	movs	r1, #200	; 0xc8
 8000956:	f00b fba7 	bl	800c0a8 <sniprintf>
 800095a:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
        "GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n",
        machineID, machineData, mainServerWithPort);

    char lenCmd[50];
    snprintf(lenCmd, sizeof(lenCmd), "AT+CIPSEND=%d\r\n", len);
 800095e:	f107 0010 	add.w	r0, r7, #16
 8000962:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000966:	4a13      	ldr	r2, [pc, #76]	; (80009b4 <sendMachineData+0xc8>)
 8000968:	2132      	movs	r1, #50	; 0x32
 800096a:	f00b fb9d 	bl	800c0a8 <sniprintf>
    sendATCommand(huart, lenCmd, 4000);
 800096e:	f107 0110 	add.w	r1, r7, #16
 8000972:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800097a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800097e:	6818      	ldr	r0, [r3, #0]
 8000980:	f7ff ff5c 	bl	800083c <sendATCommand>
    sendATCommand(huart, cmd, 4000);
 8000984:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000988:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800098c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000990:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000994:	6818      	ldr	r0, [r3, #0]
 8000996:	f7ff ff51 	bl	800083c <sendATCommand>
}
 800099a:	bf00      	nop
 800099c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	0800ca7c 	.word	0x0800ca7c
 80009a8:	0800ca8c 	.word	0x0800ca8c
 80009ac:	0800cb08 	.word	0x0800cb08
 80009b0:	0800caac 	.word	0x0800caac
 80009b4:	0800cb1c 	.word	0x0800cb1c

080009b8 <checkMachineID>:

int checkMachineID(UART_HandleTypeDef *huart, const char *machineID) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b0f6      	sub	sp, #472	; 0x1d8
 80009bc:	af02      	add	r7, sp, #8
 80009be:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80009c2:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80009c6:	6018      	str	r0, [r3, #0]
 80009c8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80009cc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80009d0:	6019      	str	r1, [r3, #0]
    char cmd[200], lenCmd[50];
    int len;

    // TCP bağlantısı
    snprintf(cmd, sizeof(cmd), "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80009d2:	f507 7082 	add.w	r0, r7, #260	; 0x104
 80009d6:	4b37      	ldr	r3, [pc, #220]	; (8000ab4 <checkMachineID+0xfc>)
 80009d8:	4a37      	ldr	r2, [pc, #220]	; (8000ab8 <checkMachineID+0x100>)
 80009da:	21c8      	movs	r1, #200	; 0xc8
 80009dc:	f00b fb64 	bl	800c0a8 <sniprintf>
    sendATCommand(huart, cmd, 2000);
 80009e0:	f507 7182 	add.w	r1, r7, #260	; 0x104
 80009e4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80009e8:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80009ec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80009f0:	6818      	ldr	r0, [r3, #0]
 80009f2:	f7ff ff23 	bl	800083c <sendATCommand>

    // HTTP GET isteği
    len = snprintf(cmd, sizeof(cmd),
 80009f6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80009fa:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80009fe:	f507 7082 	add.w	r0, r7, #260	; 0x104
 8000a02:	4a2e      	ldr	r2, [pc, #184]	; (8000abc <checkMachineID+0x104>)
 8000a04:	9200      	str	r2, [sp, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a2d      	ldr	r2, [pc, #180]	; (8000ac0 <checkMachineID+0x108>)
 8000a0a:	21c8      	movs	r1, #200	; 0xc8
 8000a0c:	f00b fb4c 	bl	800c0a8 <sniprintf>
 8000a10:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
                   "GET /api/machine/checkMachineID?machineID=%s HTTP/1.0\r\nHost: %s\r\n\r\n",
                   machineID, mainServerWithPort);
    if(len > sizeof(cmd) || len < 0) {
 8000a14:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000a18:	2bc8      	cmp	r3, #200	; 0xc8
 8000a1a:	d803      	bhi.n	8000a24 <checkMachineID+0x6c>
 8000a1c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	da01      	bge.n	8000a28 <checkMachineID+0x70>
        return 0; // Hata durumu
 8000a24:	2300      	movs	r3, #0
 8000a26:	e040      	b.n	8000aaa <checkMachineID+0xf2>
    }

    // AT+CIPSEND komutu
    snprintf(lenCmd, sizeof(lenCmd), "AT+CIPSEND=%d\r\n", len);
 8000a28:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8000a2c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000a30:	4a24      	ldr	r2, [pc, #144]	; (8000ac4 <checkMachineID+0x10c>)
 8000a32:	2132      	movs	r1, #50	; 0x32
 8000a34:	f00b fb38 	bl	800c0a8 <sniprintf>
    sendATCommand(huart, lenCmd, 4000);
 8000a38:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8000a3c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000a40:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000a44:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000a48:	6818      	ldr	r0, [r3, #0]
 8000a4a:	f7ff fef7 	bl	800083c <sendATCommand>

    // GET isteğini gönder
    sendATCommand(huart, cmd, 4000);
 8000a4e:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8000a52:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000a56:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000a5a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000a5e:	6818      	ldr	r0, [r3, #0]
 8000a60:	f7ff feec 	bl	800083c <sendATCommand>

    // Gelen yanıtı kontrol et
    char bufferRX[200];
    HAL_UART_Receive_IT(huart, (uint8_t*)bufferRX, sizeof(bufferRX));
 8000a64:	f107 0108 	add.w	r1, r7, #8
 8000a68:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000a6c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000a70:	22c8      	movs	r2, #200	; 0xc8
 8000a72:	6818      	ldr	r0, [r3, #0]
 8000a74:	f00a fd17 	bl	800b4a6 <HAL_UART_Receive_IT>
    HAL_Delay(5000); // Yanıt için bekle
 8000a78:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a7c:	f007 fc12 	bl	80082a4 <HAL_Delay>

    if (strstr(bufferRX, "HTTP/1.1 200 OK") != NULL && strstr(bufferRX, "\"message\": \"Machine ID is available.\"") != NULL) {
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	4910      	ldr	r1, [pc, #64]	; (8000ac8 <checkMachineID+0x110>)
 8000a86:	4618      	mov	r0, r3
 8000a88:	f00b fbbf 	bl	800c20a <strstr>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d00a      	beq.n	8000aa8 <checkMachineID+0xf0>
 8000a92:	f107 0308 	add.w	r3, r7, #8
 8000a96:	490d      	ldr	r1, [pc, #52]	; (8000acc <checkMachineID+0x114>)
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f00b fbb6 	bl	800c20a <strstr>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <checkMachineID+0xf0>
        return 1; // Başarılı
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e000      	b.n	8000aaa <checkMachineID+0xf2>
    }

    return 0; // Yanıt başarısız
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f507 77e8 	add.w	r7, r7, #464	; 0x1d0
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	0800ca7c 	.word	0x0800ca7c
 8000ab8:	0800ca8c 	.word	0x0800ca8c
 8000abc:	0800cb08 	.word	0x0800cb08
 8000ac0:	0800cb2c 	.word	0x0800cb2c
 8000ac4:	0800cb1c 	.word	0x0800cb1c
 8000ac8:	0800cb70 	.word	0x0800cb70
 8000acc:	0800cb80 	.word	0x0800cb80

08000ad0 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000ad0:	b590      	push	{r4, r7, lr}
 8000ad2:	b089      	sub	sp, #36	; 0x24
 8000ad4:	af04      	add	r7, sp, #16
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000ada:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <hata2EEPROM+0xa4>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	1e5a      	subs	r2, r3, #1
 8000ae0:	4b25      	ldr	r3, [pc, #148]	; (8000b78 <hata2EEPROM+0xa8>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	4a25      	ldr	r2, [pc, #148]	; (8000b7c <hata2EEPROM+0xac>)
 8000ae8:	5cd3      	ldrb	r3, [r2, r3]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d002      	beq.n	8000af4 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000aee:	f000 f92b 	bl	8000d48 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000af2:	e000      	b.n	8000af6 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000af4:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000af6:	2300      	movs	r3, #0
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	e012      	b.n	8000b22 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <hata2EEPROM+0xa8>)
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4413      	add	r3, r2
 8000b04:	4a1d      	ldr	r2, [pc, #116]	; (8000b7c <hata2EEPROM+0xac>)
 8000b06:	5cd3      	ldrb	r3, [r2, r3]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d107      	bne.n	8000b1c <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <hata2EEPROM+0xa8>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	4413      	add	r3, r2
 8000b14:	4919      	ldr	r1, [pc, #100]	; (8000b7c <hata2EEPROM+0xac>)
 8000b16:	79fa      	ldrb	r2, [r7, #7]
 8000b18:	54ca      	strb	r2, [r1, r3]
					break;
 8000b1a:	e007      	b.n	8000b2c <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <hata2EEPROM+0xa4>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbe7      	blt.n	8000afc <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <hata2EEPROM+0xa8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	b299      	uxth	r1, r3
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <hata2EEPROM+0xa4>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	b298      	uxth	r0, r3
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <hata2EEPROM+0xa8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a0f      	ldr	r2, [pc, #60]	; (8000b7c <hata2EEPROM+0xac>)
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a0c      	ldr	r2, [pc, #48]	; (8000b74 <hata2EEPROM+0xa4>)
 8000b42:	6812      	ldr	r2, [r2, #0]
 8000b44:	b292      	uxth	r2, r2
 8000b46:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000b4a:	9402      	str	r4, [sp, #8]
 8000b4c:	9201      	str	r2, [sp, #4]
 8000b4e:	9300      	str	r3, [sp, #0]
 8000b50:	4603      	mov	r3, r0
 8000b52:	460a      	mov	r2, r1
 8000b54:	21a0      	movs	r1, #160	; 0xa0
 8000b56:	480a      	ldr	r0, [pc, #40]	; (8000b80 <hata2EEPROM+0xb0>)
 8000b58:	f008 fc2e 	bl	80093b8 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000b5c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b60:	f007 fba0 	bl	80082a4 <HAL_Delay>
	eepromKontrol(1);
 8000b64:	2001      	movs	r0, #1
 8000b66:	f7ff fb65 	bl	8000234 <eepromKontrol>
}
 8000b6a:	bf00      	nop
 8000b6c:	3714      	adds	r7, #20
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd90      	pop	{r4, r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000ac 	.word	0x200000ac
 8000b78:	200000b0 	.word	0x200000b0
 8000b7c:	2000012c 	.word	0x2000012c
 8000b80:	20000290 	.word	0x20000290

08000b84 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d11d      	bne.n	8000bd0 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000b94:	4b62      	ldr	r3, [pc, #392]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d105      	bne.n	8000ba8 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000b9c:	4a61      	ldr	r2, [pc, #388]	; (8000d24 <hataKoduLcdGoster+0x1a0>)
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	2001      	movs	r0, #1
 8000ba2:	f006 fe29 	bl	80077f8 <lcd_print>
 8000ba6:	e008      	b.n	8000bba <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8000ba8:	4b5d      	ldr	r3, [pc, #372]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d104      	bne.n	8000bba <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000bb0:	4a5d      	ldr	r2, [pc, #372]	; (8000d28 <hataKoduLcdGoster+0x1a4>)
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f006 fe1f 	bl	80077f8 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000bba:	4a5c      	ldr	r2, [pc, #368]	; (8000d2c <hataKoduLcdGoster+0x1a8>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	f006 fe1a 	bl	80077f8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000bc4:	4a5a      	ldr	r2, [pc, #360]	; (8000d30 <hataKoduLcdGoster+0x1ac>)
 8000bc6:	2107      	movs	r1, #7
 8000bc8:	2002      	movs	r0, #2
 8000bca:	f006 fe15 	bl	80077f8 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000bce:	e0a3      	b.n	8000d18 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d11d      	bne.n	8000c12 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000bd6:	4b52      	ldr	r3, [pc, #328]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d105      	bne.n	8000bea <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000bde:	4a51      	ldr	r2, [pc, #324]	; (8000d24 <hataKoduLcdGoster+0x1a0>)
 8000be0:	2101      	movs	r1, #1
 8000be2:	2001      	movs	r0, #1
 8000be4:	f006 fe08 	bl	80077f8 <lcd_print>
 8000be8:	e008      	b.n	8000bfc <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000bea:	4b4d      	ldr	r3, [pc, #308]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d104      	bne.n	8000bfc <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000bf2:	4a4d      	ldr	r2, [pc, #308]	; (8000d28 <hataKoduLcdGoster+0x1a4>)
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	f006 fdfe 	bl	80077f8 <lcd_print>
		lcd_print(2, 2, "2");
 8000bfc:	4a4d      	ldr	r2, [pc, #308]	; (8000d34 <hataKoduLcdGoster+0x1b0>)
 8000bfe:	2102      	movs	r1, #2
 8000c00:	2002      	movs	r0, #2
 8000c02:	f006 fdf9 	bl	80077f8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c06:	4a4a      	ldr	r2, [pc, #296]	; (8000d30 <hataKoduLcdGoster+0x1ac>)
 8000c08:	2107      	movs	r1, #7
 8000c0a:	2002      	movs	r0, #2
 8000c0c:	f006 fdf4 	bl	80077f8 <lcd_print>
}
 8000c10:	e082      	b.n	8000d18 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	d11d      	bne.n	8000c54 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000c18:	4b41      	ldr	r3, [pc, #260]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d105      	bne.n	8000c2c <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000c20:	4a40      	ldr	r2, [pc, #256]	; (8000d24 <hataKoduLcdGoster+0x1a0>)
 8000c22:	2101      	movs	r1, #1
 8000c24:	2001      	movs	r0, #1
 8000c26:	f006 fde7 	bl	80077f8 <lcd_print>
 8000c2a:	e008      	b.n	8000c3e <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000c2c:	4b3c      	ldr	r3, [pc, #240]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d104      	bne.n	8000c3e <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000c34:	4a3c      	ldr	r2, [pc, #240]	; (8000d28 <hataKoduLcdGoster+0x1a4>)
 8000c36:	2101      	movs	r1, #1
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f006 fddd 	bl	80077f8 <lcd_print>
		lcd_print(2, 3, "3");
 8000c3e:	4a3e      	ldr	r2, [pc, #248]	; (8000d38 <hataKoduLcdGoster+0x1b4>)
 8000c40:	2103      	movs	r1, #3
 8000c42:	2002      	movs	r0, #2
 8000c44:	f006 fdd8 	bl	80077f8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c48:	4a39      	ldr	r2, [pc, #228]	; (8000d30 <hataKoduLcdGoster+0x1ac>)
 8000c4a:	2107      	movs	r1, #7
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f006 fdd3 	bl	80077f8 <lcd_print>
}
 8000c52:	e061      	b.n	8000d18 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d11d      	bne.n	8000c96 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000c5a:	4b31      	ldr	r3, [pc, #196]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d105      	bne.n	8000c6e <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000c62:	4a30      	ldr	r2, [pc, #192]	; (8000d24 <hataKoduLcdGoster+0x1a0>)
 8000c64:	2101      	movs	r1, #1
 8000c66:	2001      	movs	r0, #1
 8000c68:	f006 fdc6 	bl	80077f8 <lcd_print>
 8000c6c:	e008      	b.n	8000c80 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000c6e:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d104      	bne.n	8000c80 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000c76:	4a2c      	ldr	r2, [pc, #176]	; (8000d28 <hataKoduLcdGoster+0x1a4>)
 8000c78:	2101      	movs	r1, #1
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f006 fdbc 	bl	80077f8 <lcd_print>
		lcd_print(2, 4, "4");
 8000c80:	4a2e      	ldr	r2, [pc, #184]	; (8000d3c <hataKoduLcdGoster+0x1b8>)
 8000c82:	2104      	movs	r1, #4
 8000c84:	2002      	movs	r0, #2
 8000c86:	f006 fdb7 	bl	80077f8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000c8a:	4a29      	ldr	r2, [pc, #164]	; (8000d30 <hataKoduLcdGoster+0x1ac>)
 8000c8c:	2107      	movs	r1, #7
 8000c8e:	2002      	movs	r0, #2
 8000c90:	f006 fdb2 	bl	80077f8 <lcd_print>
}
 8000c94:	e040      	b.n	8000d18 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000c96:	79fb      	ldrb	r3, [r7, #7]
 8000c98:	2b05      	cmp	r3, #5
 8000c9a:	d11d      	bne.n	8000cd8 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000c9c:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d105      	bne.n	8000cb0 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000ca4:	4a1f      	ldr	r2, [pc, #124]	; (8000d24 <hataKoduLcdGoster+0x1a0>)
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f006 fda5 	bl	80077f8 <lcd_print>
 8000cae:	e008      	b.n	8000cc2 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d104      	bne.n	8000cc2 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000cb8:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <hataKoduLcdGoster+0x1a4>)
 8000cba:	2101      	movs	r1, #1
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f006 fd9b 	bl	80077f8 <lcd_print>
		lcd_print(2, 5, "5");
 8000cc2:	4a1f      	ldr	r2, [pc, #124]	; (8000d40 <hataKoduLcdGoster+0x1bc>)
 8000cc4:	2105      	movs	r1, #5
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	f006 fd96 	bl	80077f8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000ccc:	4a18      	ldr	r2, [pc, #96]	; (8000d30 <hataKoduLcdGoster+0x1ac>)
 8000cce:	2107      	movs	r1, #7
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f006 fd91 	bl	80077f8 <lcd_print>
}
 8000cd6:	e01f      	b.n	8000d18 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2b06      	cmp	r3, #6
 8000cdc:	d11c      	bne.n	8000d18 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d105      	bne.n	8000cf2 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	; (8000d24 <hataKoduLcdGoster+0x1a0>)
 8000ce8:	2101      	movs	r1, #1
 8000cea:	2001      	movs	r0, #1
 8000cec:	f006 fd84 	bl	80077f8 <lcd_print>
 8000cf0:	e008      	b.n	8000d04 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <hataKoduLcdGoster+0x19c>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d104      	bne.n	8000d04 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000cfa:	4a0b      	ldr	r2, [pc, #44]	; (8000d28 <hataKoduLcdGoster+0x1a4>)
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f006 fd7a 	bl	80077f8 <lcd_print>
		lcd_print(2, 6, "6");
 8000d04:	4a0f      	ldr	r2, [pc, #60]	; (8000d44 <hataKoduLcdGoster+0x1c0>)
 8000d06:	2106      	movs	r1, #6
 8000d08:	2002      	movs	r0, #2
 8000d0a:	f006 fd75 	bl	80077f8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000d0e:	4a08      	ldr	r2, [pc, #32]	; (8000d30 <hataKoduLcdGoster+0x1ac>)
 8000d10:	2107      	movs	r1, #7
 8000d12:	2002      	movs	r0, #2
 8000d14:	f006 fd70 	bl	80077f8 <lcd_print>
}
 8000d18:	bf00      	nop
 8000d1a:	3708      	adds	r7, #8
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000221 	.word	0x20000221
 8000d24:	0800cba8 	.word	0x0800cba8
 8000d28:	0800cbb8 	.word	0x0800cbb8
 8000d2c:	0800cbc8 	.word	0x0800cbc8
 8000d30:	0800cbcc 	.word	0x0800cbcc
 8000d34:	0800cbd8 	.word	0x0800cbd8
 8000d38:	0800cbdc 	.word	0x0800cbdc
 8000d3c:	0800cbe0 	.word	0x0800cbe0
 8000d40:	0800cbe4 	.word	0x0800cbe4
 8000d44:	0800cbe8 	.word	0x0800cbe8

08000d48 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	e009      	b.n	8000d68 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000d54:	4a0a      	ldr	r2, [pc, #40]	; (8000d80 <eepromDataFillWithEmpty+0x38>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5c:	4a09      	ldr	r2, [pc, #36]	; (8000d84 <eepromDataFillWithEmpty+0x3c>)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3301      	adds	r3, #1
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <eepromDataFillWithEmpty+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	dbf0      	blt.n	8000d54 <eepromDataFillWithEmpty+0xc>
	}
}
 8000d72:	bf00      	nop
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000084 	.word	0x20000084
 8000d84:	2000012c 	.word	0x2000012c
 8000d88:	200000ac 	.word	0x200000ac

08000d8c <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000d92:	463b      	mov	r3, r7
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000d9e:	4b50      	ldr	r3, [pc, #320]	; (8000ee0 <i2cTest+0x154>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	4b4e      	ldr	r3, [pc, #312]	; (8000ee0 <i2cTest+0x154>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 0201 	bic.w	r2, r2, #1
 8000dac:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000dae:	484c      	ldr	r0, [pc, #304]	; (8000ee0 <i2cTest+0x154>)
 8000db0:	f008 f9d4 	bl	800915c <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000db4:	23c0      	movs	r3, #192	; 0xc0
 8000db6:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000db8:	2311      	movs	r3, #17
 8000dba:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4846      	ldr	r0, [pc, #280]	; (8000ee4 <i2cTest+0x158>)
 8000dca:	f007 fddb 	bl	8008984 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2140      	movs	r1, #64	; 0x40
 8000dd2:	4844      	ldr	r0, [pc, #272]	; (8000ee4 <i2cTest+0x158>)
 8000dd4:	f008 f84d 	bl	8008e72 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000dd8:	2201      	movs	r2, #1
 8000dda:	2180      	movs	r1, #128	; 0x80
 8000ddc:	4841      	ldr	r0, [pc, #260]	; (8000ee4 <i2cTest+0x158>)
 8000dde:	f008 f848 	bl	8008e72 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000de2:	200a      	movs	r0, #10
 8000de4:	f007 fa5e 	bl	80082a4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000de8:	bf00      	nop
 8000dea:	2140      	movs	r1, #64	; 0x40
 8000dec:	483d      	ldr	r0, [pc, #244]	; (8000ee4 <i2cTest+0x158>)
 8000dee:	f008 f829 	bl	8008e44 <HAL_GPIO_ReadPin>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b01      	cmp	r3, #1
 8000df6:	d006      	beq.n	8000e06 <i2cTest+0x7a>
 8000df8:	2180      	movs	r1, #128	; 0x80
 8000dfa:	483a      	ldr	r0, [pc, #232]	; (8000ee4 <i2cTest+0x158>)
 8000dfc:	f008 f822 	bl	8008e44 <HAL_GPIO_ReadPin>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d1f1      	bne.n	8000dea <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2180      	movs	r1, #128	; 0x80
 8000e0a:	4836      	ldr	r0, [pc, #216]	; (8000ee4 <i2cTest+0x158>)
 8000e0c:	f008 f831 	bl	8008e72 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000e10:	200a      	movs	r0, #10
 8000e12:	f007 fa47 	bl	80082a4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000e16:	bf00      	nop
 8000e18:	2180      	movs	r1, #128	; 0x80
 8000e1a:	4832      	ldr	r0, [pc, #200]	; (8000ee4 <i2cTest+0x158>)
 8000e1c:	f008 f812 	bl	8008e44 <HAL_GPIO_ReadPin>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d0f8      	beq.n	8000e18 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2140      	movs	r1, #64	; 0x40
 8000e2a:	482e      	ldr	r0, [pc, #184]	; (8000ee4 <i2cTest+0x158>)
 8000e2c:	f008 f821 	bl	8008e72 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e30:	200a      	movs	r0, #10
 8000e32:	f007 fa37 	bl	80082a4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000e36:	bf00      	nop
 8000e38:	2140      	movs	r1, #64	; 0x40
 8000e3a:	482a      	ldr	r0, [pc, #168]	; (8000ee4 <i2cTest+0x158>)
 8000e3c:	f008 f802 	bl	8008e44 <HAL_GPIO_ReadPin>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d0f8      	beq.n	8000e38 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	2140      	movs	r1, #64	; 0x40
 8000e4a:	4826      	ldr	r0, [pc, #152]	; (8000ee4 <i2cTest+0x158>)
 8000e4c:	f008 f811 	bl	8008e72 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e50:	200a      	movs	r0, #10
 8000e52:	f007 fa27 	bl	80082a4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000e56:	bf00      	nop
 8000e58:	2140      	movs	r1, #64	; 0x40
 8000e5a:	4822      	ldr	r0, [pc, #136]	; (8000ee4 <i2cTest+0x158>)
 8000e5c:	f007 fff2 	bl	8008e44 <HAL_GPIO_ReadPin>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d1f8      	bne.n	8000e58 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	2180      	movs	r1, #128	; 0x80
 8000e6a:	481e      	ldr	r0, [pc, #120]	; (8000ee4 <i2cTest+0x158>)
 8000e6c:	f008 f801 	bl	8008e72 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000e70:	200a      	movs	r0, #10
 8000e72:	f007 fa17 	bl	80082a4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000e76:	bf00      	nop
 8000e78:	2180      	movs	r1, #128	; 0x80
 8000e7a:	481a      	ldr	r0, [pc, #104]	; (8000ee4 <i2cTest+0x158>)
 8000e7c:	f007 ffe2 	bl	8008e44 <HAL_GPIO_ReadPin>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d1f8      	bne.n	8000e78 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e86:	23c0      	movs	r3, #192	; 0xc0
 8000e88:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000e8a:	2312      	movs	r3, #18
 8000e8c:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000e96:	463b      	mov	r3, r7
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4812      	ldr	r0, [pc, #72]	; (8000ee4 <i2cTest+0x158>)
 8000e9c:	f007 fd72 	bl	8008984 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <i2cTest+0x154>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <i2cTest+0x154>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000eae:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <i2cTest+0x154>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <i2cTest+0x154>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000ebe:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <i2cTest+0x154>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <i2cTest+0x154>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 0201 	orr.w	r2, r2, #1
 8000ece:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000ed0:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <i2cTest+0x154>)
 8000ed2:	f007 ffff 	bl	8008ed4 <HAL_I2C_Init>
}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000290 	.word	0x20000290
 8000ee4:	40010c00 	.word	0x40010c00

08000ee8 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000ef2:	20c8      	movs	r0, #200	; 0xc8
 8000ef4:	f007 f9d6 	bl	80082a4 <HAL_Delay>
	lcd_clear();
 8000ef8:	f006 fcaa 	bl	8007850 <lcd_clear>
	if(type == 1 && page == 0) {
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d143      	bne.n	8000f8a <printTemplate+0xa2>
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d140      	bne.n	8000f8a <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000f08:	4a9d      	ldr	r2, [pc, #628]	; (8001180 <printTemplate+0x298>)
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f006 fc73 	bl	80077f8 <lcd_print>
		lcd_print(2, 3, "0");
 8000f12:	4a9c      	ldr	r2, [pc, #624]	; (8001184 <printTemplate+0x29c>)
 8000f14:	2103      	movs	r1, #3
 8000f16:	2002      	movs	r0, #2
 8000f18:	f006 fc6e 	bl	80077f8 <lcd_print>
		lcd_print(2, 4, "1");
 8000f1c:	4a9a      	ldr	r2, [pc, #616]	; (8001188 <printTemplate+0x2a0>)
 8000f1e:	2104      	movs	r1, #4
 8000f20:	2002      	movs	r0, #2
 8000f22:	f006 fc69 	bl	80077f8 <lcd_print>
		lcd_print(2, 5, "2");
 8000f26:	4a99      	ldr	r2, [pc, #612]	; (800118c <printTemplate+0x2a4>)
 8000f28:	2105      	movs	r1, #5
 8000f2a:	2002      	movs	r0, #2
 8000f2c:	f006 fc64 	bl	80077f8 <lcd_print>
		lcd_print(2, 6, "3");
 8000f30:	4a97      	ldr	r2, [pc, #604]	; (8001190 <printTemplate+0x2a8>)
 8000f32:	2106      	movs	r1, #6
 8000f34:	2002      	movs	r0, #2
 8000f36:	f006 fc5f 	bl	80077f8 <lcd_print>
		lcd_print(2, 7, "4");
 8000f3a:	4a96      	ldr	r2, [pc, #600]	; (8001194 <printTemplate+0x2ac>)
 8000f3c:	2107      	movs	r1, #7
 8000f3e:	2002      	movs	r0, #2
 8000f40:	f006 fc5a 	bl	80077f8 <lcd_print>
		lcd_print(2, 10, "5");
 8000f44:	4a94      	ldr	r2, [pc, #592]	; (8001198 <printTemplate+0x2b0>)
 8000f46:	210a      	movs	r1, #10
 8000f48:	2002      	movs	r0, #2
 8000f4a:	f006 fc55 	bl	80077f8 <lcd_print>
		lcd_print(2, 11, "6");
 8000f4e:	4a93      	ldr	r2, [pc, #588]	; (800119c <printTemplate+0x2b4>)
 8000f50:	210b      	movs	r1, #11
 8000f52:	2002      	movs	r0, #2
 8000f54:	f006 fc50 	bl	80077f8 <lcd_print>
		lcd_print(2, 12, "7");
 8000f58:	4a91      	ldr	r2, [pc, #580]	; (80011a0 <printTemplate+0x2b8>)
 8000f5a:	210c      	movs	r1, #12
 8000f5c:	2002      	movs	r0, #2
 8000f5e:	f006 fc4b 	bl	80077f8 <lcd_print>
		lcd_print(2, 13, "8");
 8000f62:	4a90      	ldr	r2, [pc, #576]	; (80011a4 <printTemplate+0x2bc>)
 8000f64:	210d      	movs	r1, #13
 8000f66:	2002      	movs	r0, #2
 8000f68:	f006 fc46 	bl	80077f8 <lcd_print>
		lcd_print(2, 14, "9");
 8000f6c:	4a8e      	ldr	r2, [pc, #568]	; (80011a8 <printTemplate+0x2c0>)
 8000f6e:	210e      	movs	r1, #14
 8000f70:	2002      	movs	r0, #2
 8000f72:	f006 fc41 	bl	80077f8 <lcd_print>
		lcd_print(1, 5, machineID);
 8000f76:	4a8d      	ldr	r2, [pc, #564]	; (80011ac <printTemplate+0x2c4>)
 8000f78:	2105      	movs	r1, #5
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f006 fc3c 	bl	80077f8 <lcd_print>
		lcd_gotoxy(2, 3);
 8000f80:	2103      	movs	r1, #3
 8000f82:	2002      	movs	r0, #2
 8000f84:	f006 fc19 	bl	80077ba <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000f88:	e0f5      	b.n	8001176 <printTemplate+0x28e>
	} else if(type == 2) {
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d178      	bne.n	8001082 <printTemplate+0x19a>
		if(page == 1) {
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d114      	bne.n	8000fc0 <printTemplate+0xd8>
			lcd_clear();
 8000f96:	f006 fc5b 	bl	8007850 <lcd_clear>
			HAL_Delay(100);
 8000f9a:	2064      	movs	r0, #100	; 0x64
 8000f9c:	f007 f982 	bl	80082a4 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fa0:	4a83      	ldr	r2, [pc, #524]	; (80011b0 <printTemplate+0x2c8>)
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f006 fc27 	bl	80077f8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000faa:	4a82      	ldr	r2, [pc, #520]	; (80011b4 <printTemplate+0x2cc>)
 8000fac:	2107      	movs	r1, #7
 8000fae:	2001      	movs	r0, #1
 8000fb0:	f006 fc22 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000fb4:	4a80      	ldr	r2, [pc, #512]	; (80011b8 <printTemplate+0x2d0>)
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	2002      	movs	r0, #2
 8000fba:	f006 fc1d 	bl	80077f8 <lcd_print>
}
 8000fbe:	e0da      	b.n	8001176 <printTemplate+0x28e>
		} else if(page == 2) {
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d114      	bne.n	8000ff0 <printTemplate+0x108>
			lcd_clear();
 8000fc6:	f006 fc43 	bl	8007850 <lcd_clear>
			HAL_Delay(100);
 8000fca:	2064      	movs	r0, #100	; 0x64
 8000fcc:	f007 f96a 	bl	80082a4 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000fd0:	4a77      	ldr	r2, [pc, #476]	; (80011b0 <printTemplate+0x2c8>)
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f006 fc0f 	bl	80077f8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000fda:	4a76      	ldr	r2, [pc, #472]	; (80011b4 <printTemplate+0x2cc>)
 8000fdc:	2107      	movs	r1, #7
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f006 fc0a 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000fe4:	4a75      	ldr	r2, [pc, #468]	; (80011bc <printTemplate+0x2d4>)
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	2002      	movs	r0, #2
 8000fea:	f006 fc05 	bl	80077f8 <lcd_print>
}
 8000fee:	e0c2      	b.n	8001176 <printTemplate+0x28e>
		} else if(page == 3) {
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d114      	bne.n	8001020 <printTemplate+0x138>
			lcd_clear();
 8000ff6:	f006 fc2b 	bl	8007850 <lcd_clear>
			HAL_Delay(100);
 8000ffa:	2064      	movs	r0, #100	; 0x64
 8000ffc:	f007 f952 	bl	80082a4 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001000:	4a6b      	ldr	r2, [pc, #428]	; (80011b0 <printTemplate+0x2c8>)
 8001002:	2101      	movs	r1, #1
 8001004:	2001      	movs	r0, #1
 8001006:	f006 fbf7 	bl	80077f8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800100a:	4a6a      	ldr	r2, [pc, #424]	; (80011b4 <printTemplate+0x2cc>)
 800100c:	2107      	movs	r1, #7
 800100e:	2001      	movs	r0, #1
 8001010:	f006 fbf2 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001014:	4a6a      	ldr	r2, [pc, #424]	; (80011c0 <printTemplate+0x2d8>)
 8001016:	2101      	movs	r1, #1
 8001018:	2002      	movs	r0, #2
 800101a:	f006 fbed 	bl	80077f8 <lcd_print>
}
 800101e:	e0aa      	b.n	8001176 <printTemplate+0x28e>
		} else if(page == 4) {
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2b04      	cmp	r3, #4
 8001024:	d114      	bne.n	8001050 <printTemplate+0x168>
			lcd_clear();
 8001026:	f006 fc13 	bl	8007850 <lcd_clear>
			HAL_Delay(100);
 800102a:	2064      	movs	r0, #100	; 0x64
 800102c:	f007 f93a 	bl	80082a4 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001030:	4a5f      	ldr	r2, [pc, #380]	; (80011b0 <printTemplate+0x2c8>)
 8001032:	2101      	movs	r1, #1
 8001034:	2001      	movs	r0, #1
 8001036:	f006 fbdf 	bl	80077f8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800103a:	4a5e      	ldr	r2, [pc, #376]	; (80011b4 <printTemplate+0x2cc>)
 800103c:	2107      	movs	r1, #7
 800103e:	2001      	movs	r0, #1
 8001040:	f006 fbda 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001044:	4a5f      	ldr	r2, [pc, #380]	; (80011c4 <printTemplate+0x2dc>)
 8001046:	2101      	movs	r1, #1
 8001048:	2002      	movs	r0, #2
 800104a:	f006 fbd5 	bl	80077f8 <lcd_print>
}
 800104e:	e092      	b.n	8001176 <printTemplate+0x28e>
		} else if(page == 5) {
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	2b05      	cmp	r3, #5
 8001054:	f040 808f 	bne.w	8001176 <printTemplate+0x28e>
			lcd_clear();
 8001058:	f006 fbfa 	bl	8007850 <lcd_clear>
			HAL_Delay(100);
 800105c:	2064      	movs	r0, #100	; 0x64
 800105e:	f007 f921 	bl	80082a4 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001062:	4a53      	ldr	r2, [pc, #332]	; (80011b0 <printTemplate+0x2c8>)
 8001064:	2101      	movs	r1, #1
 8001066:	2001      	movs	r0, #1
 8001068:	f006 fbc6 	bl	80077f8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800106c:	4a51      	ldr	r2, [pc, #324]	; (80011b4 <printTemplate+0x2cc>)
 800106e:	2107      	movs	r1, #7
 8001070:	2001      	movs	r0, #1
 8001072:	f006 fbc1 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8001076:	4a54      	ldr	r2, [pc, #336]	; (80011c8 <printTemplate+0x2e0>)
 8001078:	2101      	movs	r1, #1
 800107a:	2002      	movs	r0, #2
 800107c:	f006 fbbc 	bl	80077f8 <lcd_print>
}
 8001080:	e079      	b.n	8001176 <printTemplate+0x28e>
	} else if(type == 3) {
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b03      	cmp	r3, #3
 8001086:	d176      	bne.n	8001176 <printTemplate+0x28e>
		if(page == 1) {
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d114      	bne.n	80010b8 <printTemplate+0x1d0>
			lcd_clear();
 800108e:	f006 fbdf 	bl	8007850 <lcd_clear>
			HAL_Delay(100);
 8001092:	2064      	movs	r0, #100	; 0x64
 8001094:	f007 f906 	bl	80082a4 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001098:	4a4c      	ldr	r2, [pc, #304]	; (80011cc <printTemplate+0x2e4>)
 800109a:	2101      	movs	r1, #1
 800109c:	2001      	movs	r0, #1
 800109e:	f006 fbab 	bl	80077f8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010a2:	4a4b      	ldr	r2, [pc, #300]	; (80011d0 <printTemplate+0x2e8>)
 80010a4:	2107      	movs	r1, #7
 80010a6:	2001      	movs	r0, #1
 80010a8:	f006 fba6 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80010ac:	4a42      	ldr	r2, [pc, #264]	; (80011b8 <printTemplate+0x2d0>)
 80010ae:	2101      	movs	r1, #1
 80010b0:	2002      	movs	r0, #2
 80010b2:	f006 fba1 	bl	80077f8 <lcd_print>
}
 80010b6:	e05e      	b.n	8001176 <printTemplate+0x28e>
		} else if(page == 2) {
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d114      	bne.n	80010e8 <printTemplate+0x200>
			lcd_clear();
 80010be:	f006 fbc7 	bl	8007850 <lcd_clear>
			HAL_Delay(100);
 80010c2:	2064      	movs	r0, #100	; 0x64
 80010c4:	f007 f8ee 	bl	80082a4 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010c8:	4a40      	ldr	r2, [pc, #256]	; (80011cc <printTemplate+0x2e4>)
 80010ca:	2101      	movs	r1, #1
 80010cc:	2001      	movs	r0, #1
 80010ce:	f006 fb93 	bl	80077f8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80010d2:	4a3f      	ldr	r2, [pc, #252]	; (80011d0 <printTemplate+0x2e8>)
 80010d4:	2107      	movs	r1, #7
 80010d6:	2001      	movs	r0, #1
 80010d8:	f006 fb8e 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80010dc:	4a37      	ldr	r2, [pc, #220]	; (80011bc <printTemplate+0x2d4>)
 80010de:	2101      	movs	r1, #1
 80010e0:	2002      	movs	r0, #2
 80010e2:	f006 fb89 	bl	80077f8 <lcd_print>
}
 80010e6:	e046      	b.n	8001176 <printTemplate+0x28e>
		} else if(page == 3) {
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	d114      	bne.n	8001118 <printTemplate+0x230>
			lcd_clear();
 80010ee:	f006 fbaf 	bl	8007850 <lcd_clear>
			HAL_Delay(100);
 80010f2:	2064      	movs	r0, #100	; 0x64
 80010f4:	f007 f8d6 	bl	80082a4 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80010f8:	4a34      	ldr	r2, [pc, #208]	; (80011cc <printTemplate+0x2e4>)
 80010fa:	2101      	movs	r1, #1
 80010fc:	2001      	movs	r0, #1
 80010fe:	f006 fb7b 	bl	80077f8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001102:	4a33      	ldr	r2, [pc, #204]	; (80011d0 <printTemplate+0x2e8>)
 8001104:	2107      	movs	r1, #7
 8001106:	2001      	movs	r0, #1
 8001108:	f006 fb76 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 800110c:	4a2c      	ldr	r2, [pc, #176]	; (80011c0 <printTemplate+0x2d8>)
 800110e:	2101      	movs	r1, #1
 8001110:	2002      	movs	r0, #2
 8001112:	f006 fb71 	bl	80077f8 <lcd_print>
}
 8001116:	e02e      	b.n	8001176 <printTemplate+0x28e>
		} else if(page == 4) {
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	2b04      	cmp	r3, #4
 800111c:	d114      	bne.n	8001148 <printTemplate+0x260>
			lcd_clear();
 800111e:	f006 fb97 	bl	8007850 <lcd_clear>
			HAL_Delay(100);
 8001122:	2064      	movs	r0, #100	; 0x64
 8001124:	f007 f8be 	bl	80082a4 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001128:	4a28      	ldr	r2, [pc, #160]	; (80011cc <printTemplate+0x2e4>)
 800112a:	2101      	movs	r1, #1
 800112c:	2001      	movs	r0, #1
 800112e:	f006 fb63 	bl	80077f8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001132:	4a27      	ldr	r2, [pc, #156]	; (80011d0 <printTemplate+0x2e8>)
 8001134:	2107      	movs	r1, #7
 8001136:	2001      	movs	r0, #1
 8001138:	f006 fb5e 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 800113c:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <printTemplate+0x2dc>)
 800113e:	2101      	movs	r1, #1
 8001140:	2002      	movs	r0, #2
 8001142:	f006 fb59 	bl	80077f8 <lcd_print>
}
 8001146:	e016      	b.n	8001176 <printTemplate+0x28e>
		} else if(page == 5) {
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	2b05      	cmp	r3, #5
 800114c:	d113      	bne.n	8001176 <printTemplate+0x28e>
			lcd_clear();
 800114e:	f006 fb7f 	bl	8007850 <lcd_clear>
			HAL_Delay(100);
 8001152:	2064      	movs	r0, #100	; 0x64
 8001154:	f007 f8a6 	bl	80082a4 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8001158:	4a1c      	ldr	r2, [pc, #112]	; (80011cc <printTemplate+0x2e4>)
 800115a:	2101      	movs	r1, #1
 800115c:	2001      	movs	r0, #1
 800115e:	f006 fb4b 	bl	80077f8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001162:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <printTemplate+0x2e8>)
 8001164:	2107      	movs	r1, #7
 8001166:	2001      	movs	r0, #1
 8001168:	f006 fb46 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 800116c:	4a16      	ldr	r2, [pc, #88]	; (80011c8 <printTemplate+0x2e0>)
 800116e:	2101      	movs	r1, #1
 8001170:	2002      	movs	r0, #2
 8001172:	f006 fb41 	bl	80077f8 <lcd_print>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	0800cbec 	.word	0x0800cbec
 8001184:	0800cbf4 	.word	0x0800cbf4
 8001188:	0800cbf8 	.word	0x0800cbf8
 800118c:	0800cbfc 	.word	0x0800cbfc
 8001190:	0800cc00 	.word	0x0800cc00
 8001194:	0800cc04 	.word	0x0800cc04
 8001198:	0800cc08 	.word	0x0800cc08
 800119c:	0800cc0c 	.word	0x0800cc0c
 80011a0:	0800cc10 	.word	0x0800cc10
 80011a4:	0800cc14 	.word	0x0800cc14
 80011a8:	0800cc18 	.word	0x0800cc18
 80011ac:	200001a4 	.word	0x200001a4
 80011b0:	0800cc1c 	.word	0x0800cc1c
 80011b4:	200001b0 	.word	0x200001b0
 80011b8:	0800cc24 	.word	0x0800cc24
 80011bc:	0800cc38 	.word	0x0800cc38
 80011c0:	0800cc4c 	.word	0x0800cc4c
 80011c4:	0800cc60 	.word	0x0800cc60
 80011c8:	0800cc74 	.word	0x0800cc74
 80011cc:	0800cc88 	.word	0x0800cc88
 80011d0:	200001c4 	.word	0x200001c4

080011d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011d8:	f3bf 8f4f 	dsb	sy
}
 80011dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <__NVIC_SystemReset+0x24>)
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80011e6:	4904      	ldr	r1, [pc, #16]	; (80011f8 <__NVIC_SystemReset+0x24>)
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__NVIC_SystemReset+0x28>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80011ee:	f3bf 8f4f 	dsb	sy
}
 80011f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <__NVIC_SystemReset+0x20>
 80011f8:	e000ed00 	.word	0xe000ed00
 80011fc:	05fa0004 	.word	0x05fa0004

08001200 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001206:	2101      	movs	r1, #1
 8001208:	488e      	ldr	r0, [pc, #568]	; (8001444 <menu+0x244>)
 800120a:	f007 fe1b 	bl	8008e44 <HAL_GPIO_ReadPin>
 800120e:	4603      	mov	r3, r0
 8001210:	2b01      	cmp	r3, #1
 8001212:	f040 808e 	bne.w	8001332 <menu+0x132>
 8001216:	4b8c      	ldr	r3, [pc, #560]	; (8001448 <menu+0x248>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	f083 0301 	eor.w	r3, r3, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 8086 	beq.w	8001332 <menu+0x132>
		menuSayac = menuSayac+1;
 8001226:	4b89      	ldr	r3, [pc, #548]	; (800144c <menu+0x24c>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b87      	ldr	r3, [pc, #540]	; (800144c <menu+0x24c>)
 8001230:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001232:	4b86      	ldr	r3, [pc, #536]	; (800144c <menu+0x24c>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b24      	cmp	r3, #36	; 0x24
 8001238:	d102      	bne.n	8001240 <menu+0x40>
			menuSayac = 1;
 800123a:	4b84      	ldr	r3, [pc, #528]	; (800144c <menu+0x24c>)
 800123c:	2201      	movs	r2, #1
 800123e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001240:	4b82      	ldr	r3, [pc, #520]	; (800144c <menu+0x24c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b12      	cmp	r3, #18
 8001246:	d106      	bne.n	8001256 <menu+0x56>
 8001248:	4b81      	ldr	r3, [pc, #516]	; (8001450 <menu+0x250>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d102      	bne.n	8001256 <menu+0x56>
			menuSayac = 21;
 8001250:	4b7e      	ldr	r3, [pc, #504]	; (800144c <menu+0x24c>)
 8001252:	2215      	movs	r2, #21
 8001254:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001256:	4b7d      	ldr	r3, [pc, #500]	; (800144c <menu+0x24c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b08      	cmp	r3, #8
 800125c:	d106      	bne.n	800126c <menu+0x6c>
 800125e:	4b7d      	ldr	r3, [pc, #500]	; (8001454 <menu+0x254>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d102      	bne.n	800126c <menu+0x6c>
			menuSayac = 16;
 8001266:	4b79      	ldr	r3, [pc, #484]	; (800144c <menu+0x24c>)
 8001268:	2210      	movs	r2, #16
 800126a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800126c:	4b77      	ldr	r3, [pc, #476]	; (800144c <menu+0x24c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b0d      	cmp	r3, #13
 8001272:	d106      	bne.n	8001282 <menu+0x82>
 8001274:	4b77      	ldr	r3, [pc, #476]	; (8001454 <menu+0x254>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d102      	bne.n	8001282 <menu+0x82>
			menuSayac = 16;
 800127c:	4b73      	ldr	r3, [pc, #460]	; (800144c <menu+0x24c>)
 800127e:	2210      	movs	r2, #16
 8001280:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001282:	4b72      	ldr	r3, [pc, #456]	; (800144c <menu+0x24c>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b09      	cmp	r3, #9
 8001288:	d106      	bne.n	8001298 <menu+0x98>
 800128a:	4b72      	ldr	r3, [pc, #456]	; (8001454 <menu+0x254>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d102      	bne.n	8001298 <menu+0x98>
			menuSayac = 13;
 8001292:	4b6e      	ldr	r3, [pc, #440]	; (800144c <menu+0x24c>)
 8001294:	220d      	movs	r2, #13
 8001296:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001298:	4b6c      	ldr	r3, [pc, #432]	; (800144c <menu+0x24c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b0a      	cmp	r3, #10
 800129e:	d10a      	bne.n	80012b6 <menu+0xb6>
 80012a0:	4b6d      	ldr	r3, [pc, #436]	; (8001458 <menu+0x258>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d003      	beq.n	80012b0 <menu+0xb0>
 80012a8:	4b6b      	ldr	r3, [pc, #428]	; (8001458 <menu+0x258>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d102      	bne.n	80012b6 <menu+0xb6>
			menuSayac = 11;
 80012b0:	4b66      	ldr	r3, [pc, #408]	; (800144c <menu+0x24c>)
 80012b2:	220b      	movs	r2, #11
 80012b4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80012b6:	4b65      	ldr	r3, [pc, #404]	; (800144c <menu+0x24c>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b0c      	cmp	r3, #12
 80012bc:	d10e      	bne.n	80012dc <menu+0xdc>
 80012be:	4b67      	ldr	r3, [pc, #412]	; (800145c <menu+0x25c>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d003      	beq.n	80012ce <menu+0xce>
 80012c6:	4b65      	ldr	r3, [pc, #404]	; (800145c <menu+0x25c>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d106      	bne.n	80012dc <menu+0xdc>
 80012ce:	4b61      	ldr	r3, [pc, #388]	; (8001454 <menu+0x254>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d102      	bne.n	80012dc <menu+0xdc>
			menuSayac = 16;
 80012d6:	4b5d      	ldr	r3, [pc, #372]	; (800144c <menu+0x24c>)
 80012d8:	2210      	movs	r2, #16
 80012da:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80012dc:	4b5b      	ldr	r3, [pc, #364]	; (800144c <menu+0x24c>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b0c      	cmp	r3, #12
 80012e2:	d10e      	bne.n	8001302 <menu+0x102>
 80012e4:	4b5d      	ldr	r3, [pc, #372]	; (800145c <menu+0x25c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d003      	beq.n	80012f4 <menu+0xf4>
 80012ec:	4b5b      	ldr	r3, [pc, #364]	; (800145c <menu+0x25c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d106      	bne.n	8001302 <menu+0x102>
 80012f4:	4b57      	ldr	r3, [pc, #348]	; (8001454 <menu+0x254>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d102      	bne.n	8001302 <menu+0x102>
			menuSayac = 13;
 80012fc:	4b53      	ldr	r3, [pc, #332]	; (800144c <menu+0x24c>)
 80012fe:	220d      	movs	r2, #13
 8001300:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001302:	4b52      	ldr	r3, [pc, #328]	; (800144c <menu+0x24c>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b0f      	cmp	r3, #15
 8001308:	d106      	bne.n	8001318 <menu+0x118>
 800130a:	4b55      	ldr	r3, [pc, #340]	; (8001460 <menu+0x260>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d102      	bne.n	8001318 <menu+0x118>
			menuSayac = 16;
 8001312:	4b4e      	ldr	r3, [pc, #312]	; (800144c <menu+0x24c>)
 8001314:	2210      	movs	r2, #16
 8001316:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001318:	4b4c      	ldr	r3, [pc, #304]	; (800144c <menu+0x24c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b18      	cmp	r3, #24
 800131e:	d106      	bne.n	800132e <menu+0x12e>
 8001320:	4b4b      	ldr	r3, [pc, #300]	; (8001450 <menu+0x250>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <menu+0x12e>
			menuSayac = 26;
 8001328:	4b48      	ldr	r3, [pc, #288]	; (800144c <menu+0x24c>)
 800132a:	221a      	movs	r2, #26
 800132c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800132e:	f003 faef 	bl	8004910 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001332:	2108      	movs	r1, #8
 8001334:	484b      	ldr	r0, [pc, #300]	; (8001464 <menu+0x264>)
 8001336:	f007 fd85 	bl	8008e44 <HAL_GPIO_ReadPin>
 800133a:	4603      	mov	r3, r0
 800133c:	2b01      	cmp	r3, #1
 800133e:	d175      	bne.n	800142c <menu+0x22c>
 8001340:	4b41      	ldr	r3, [pc, #260]	; (8001448 <menu+0x248>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	f083 0301 	eor.w	r3, r3, #1
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d06e      	beq.n	800142c <menu+0x22c>
		if (menuSayac <= 1) {
 800134e:	4b3f      	ldr	r3, [pc, #252]	; (800144c <menu+0x24c>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d802      	bhi.n	800135c <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001356:	4b3d      	ldr	r3, [pc, #244]	; (800144c <menu+0x24c>)
 8001358:	2224      	movs	r2, #36	; 0x24
 800135a:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800135c:	4b3b      	ldr	r3, [pc, #236]	; (800144c <menu+0x24c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	3b01      	subs	r3, #1
 8001362:	b2da      	uxtb	r2, r3
 8001364:	4b39      	ldr	r3, [pc, #228]	; (800144c <menu+0x24c>)
 8001366:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001368:	4b38      	ldr	r3, [pc, #224]	; (800144c <menu+0x24c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b14      	cmp	r3, #20
 800136e:	d106      	bne.n	800137e <menu+0x17e>
 8001370:	4b37      	ldr	r3, [pc, #220]	; (8001450 <menu+0x250>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <menu+0x17e>
			menuSayac = 17;
 8001378:	4b34      	ldr	r3, [pc, #208]	; (800144c <menu+0x24c>)
 800137a:	2211      	movs	r2, #17
 800137c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800137e:	4b33      	ldr	r3, [pc, #204]	; (800144c <menu+0x24c>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b0f      	cmp	r3, #15
 8001384:	d106      	bne.n	8001394 <menu+0x194>
 8001386:	4b33      	ldr	r3, [pc, #204]	; (8001454 <menu+0x254>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d102      	bne.n	8001394 <menu+0x194>
			menuSayac = 7;
 800138e:	4b2f      	ldr	r3, [pc, #188]	; (800144c <menu+0x24c>)
 8001390:	2207      	movs	r2, #7
 8001392:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001394:	4b2d      	ldr	r3, [pc, #180]	; (800144c <menu+0x24c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d106      	bne.n	80013aa <menu+0x1aa>
 800139c:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <menu+0x254>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d102      	bne.n	80013aa <menu+0x1aa>
			menuSayac = 12;
 80013a4:	4b29      	ldr	r3, [pc, #164]	; (800144c <menu+0x24c>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80013aa:	4b28      	ldr	r3, [pc, #160]	; (800144c <menu+0x24c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b0c      	cmp	r3, #12
 80013b0:	d106      	bne.n	80013c0 <menu+0x1c0>
 80013b2:	4b28      	ldr	r3, [pc, #160]	; (8001454 <menu+0x254>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d102      	bne.n	80013c0 <menu+0x1c0>
			menuSayac = 8;
 80013ba:	4b24      	ldr	r3, [pc, #144]	; (800144c <menu+0x24c>)
 80013bc:	2208      	movs	r2, #8
 80013be:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <menu+0x24c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b0a      	cmp	r3, #10
 80013c6:	d10a      	bne.n	80013de <menu+0x1de>
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <menu+0x258>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d003      	beq.n	80013d8 <menu+0x1d8>
 80013d0:	4b21      	ldr	r3, [pc, #132]	; (8001458 <menu+0x258>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d102      	bne.n	80013de <menu+0x1de>
			menuSayac = 9;
 80013d8:	4b1c      	ldr	r3, [pc, #112]	; (800144c <menu+0x24c>)
 80013da:	2209      	movs	r2, #9
 80013dc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80013de:	4b1b      	ldr	r3, [pc, #108]	; (800144c <menu+0x24c>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b0c      	cmp	r3, #12
 80013e4:	d10a      	bne.n	80013fc <menu+0x1fc>
 80013e6:	4b1d      	ldr	r3, [pc, #116]	; (800145c <menu+0x25c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d003      	beq.n	80013f6 <menu+0x1f6>
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <menu+0x25c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d102      	bne.n	80013fc <menu+0x1fc>
			menuSayac = 11;
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <menu+0x24c>)
 80013f8:	220b      	movs	r2, #11
 80013fa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <menu+0x24c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b0f      	cmp	r3, #15
 8001402:	d106      	bne.n	8001412 <menu+0x212>
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <menu+0x260>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d102      	bne.n	8001412 <menu+0x212>
			menuSayac = 14;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <menu+0x24c>)
 800140e:	220e      	movs	r2, #14
 8001410:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <menu+0x24c>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b19      	cmp	r3, #25
 8001418:	d106      	bne.n	8001428 <menu+0x228>
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <menu+0x250>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d102      	bne.n	8001428 <menu+0x228>
			menuSayac = 23;
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <menu+0x24c>)
 8001424:	2217      	movs	r2, #23
 8001426:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001428:	f003 fa72 	bl	8004910 <bekle>
	}

	if (menuSayac == 0) {
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <menu+0x24c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d133      	bne.n	800149c <menu+0x29c>
		if(dilSecim == 0) {
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <menu+0x268>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d121      	bne.n	8001480 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 800143c:	4a0b      	ldr	r2, [pc, #44]	; (800146c <menu+0x26c>)
 800143e:	2101      	movs	r1, #1
 8001440:	2001      	movs	r0, #1
 8001442:	e015      	b.n	8001470 <menu+0x270>
 8001444:	40010800 	.word	0x40010800
 8001448:	2000022f 	.word	0x2000022f
 800144c:	20000200 	.word	0x20000200
 8001450:	2000020f 	.word	0x2000020f
 8001454:	20000208 	.word	0x20000208
 8001458:	20000209 	.word	0x20000209
 800145c:	2000020a 	.word	0x2000020a
 8001460:	2000020b 	.word	0x2000020b
 8001464:	40011000 	.word	0x40011000
 8001468:	20000221 	.word	0x20000221
 800146c:	0800cc90 	.word	0x0800cc90
 8001470:	f006 f9c2 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001474:	4a94      	ldr	r2, [pc, #592]	; (80016c8 <menu+0x4c8>)
 8001476:	2101      	movs	r1, #1
 8001478:	2002      	movs	r0, #2
 800147a:	f006 f9bd 	bl	80077f8 <lcd_print>
 800147e:	e00d      	b.n	800149c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001480:	4b92      	ldr	r3, [pc, #584]	; (80016cc <menu+0x4cc>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d109      	bne.n	800149c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001488:	4a91      	ldr	r2, [pc, #580]	; (80016d0 <menu+0x4d0>)
 800148a:	2101      	movs	r1, #1
 800148c:	2001      	movs	r0, #1
 800148e:	f006 f9b3 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001492:	4a90      	ldr	r2, [pc, #576]	; (80016d4 <menu+0x4d4>)
 8001494:	2101      	movs	r1, #1
 8001496:	2002      	movs	r0, #2
 8001498:	f006 f9ae 	bl	80077f8 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 800149c:	4b8e      	ldr	r3, [pc, #568]	; (80016d8 <menu+0x4d8>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	f040 82b5 	bne.w	8001a10 <menu+0x810>
		if(dilSecim == 0) {
 80014a6:	4b89      	ldr	r3, [pc, #548]	; (80016cc <menu+0x4cc>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d105      	bne.n	80014ba <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80014ae:	4a8b      	ldr	r2, [pc, #556]	; (80016dc <menu+0x4dc>)
 80014b0:	2101      	movs	r1, #1
 80014b2:	2001      	movs	r0, #1
 80014b4:	f006 f9a0 	bl	80077f8 <lcd_print>
 80014b8:	e008      	b.n	80014cc <menu+0x2cc>
		} else if(dilSecim == 1) {
 80014ba:	4b84      	ldr	r3, [pc, #528]	; (80016cc <menu+0x4cc>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d104      	bne.n	80014cc <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 80014c2:	4a87      	ldr	r2, [pc, #540]	; (80016e0 <menu+0x4e0>)
 80014c4:	2101      	movs	r1, #1
 80014c6:	2001      	movs	r0, #1
 80014c8:	f006 f996 	bl	80077f8 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 80014cc:	4b85      	ldr	r3, [pc, #532]	; (80016e4 <menu+0x4e4>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d123      	bne.n	800151c <menu+0x31c>
			if(dilSecim == 0) {
 80014d4:	4b7d      	ldr	r3, [pc, #500]	; (80016cc <menu+0x4cc>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d105      	bne.n	80014e8 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 80014dc:	4a82      	ldr	r2, [pc, #520]	; (80016e8 <menu+0x4e8>)
 80014de:	2101      	movs	r1, #1
 80014e0:	2002      	movs	r0, #2
 80014e2:	f006 f989 	bl	80077f8 <lcd_print>
 80014e6:	e008      	b.n	80014fa <menu+0x2fa>

			} else if(dilSecim == 1) {
 80014e8:	4b78      	ldr	r3, [pc, #480]	; (80016cc <menu+0x4cc>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d104      	bne.n	80014fa <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80014f0:	4a7e      	ldr	r2, [pc, #504]	; (80016ec <menu+0x4ec>)
 80014f2:	2101      	movs	r1, #1
 80014f4:	2002      	movs	r0, #2
 80014f6:	f006 f97f 	bl	80077f8 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80014fa:	4a7d      	ldr	r2, [pc, #500]	; (80016f0 <menu+0x4f0>)
 80014fc:	210f      	movs	r1, #15
 80014fe:	2002      	movs	r0, #2
 8001500:	f006 f97a 	bl	80077f8 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001504:	4b7b      	ldr	r3, [pc, #492]	; (80016f4 <menu+0x4f4>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	220a      	movs	r2, #10
 800150a:	497b      	ldr	r1, [pc, #492]	; (80016f8 <menu+0x4f8>)
 800150c:	4618      	mov	r0, r3
 800150e:	f00a fd21 	bl	800bf54 <itoa>
			lcd_print(2, 14, snum);
 8001512:	4a79      	ldr	r2, [pc, #484]	; (80016f8 <menu+0x4f8>)
 8001514:	210e      	movs	r1, #14
 8001516:	2002      	movs	r0, #2
 8001518:	f006 f96e 	bl	80077f8 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800151c:	4b71      	ldr	r3, [pc, #452]	; (80016e4 <menu+0x4e4>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d123      	bne.n	800156c <menu+0x36c>
			if(dilSecim == 0) {
 8001524:	4b69      	ldr	r3, [pc, #420]	; (80016cc <menu+0x4cc>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d105      	bne.n	8001538 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 800152c:	4a73      	ldr	r2, [pc, #460]	; (80016fc <menu+0x4fc>)
 800152e:	2101      	movs	r1, #1
 8001530:	2002      	movs	r0, #2
 8001532:	f006 f961 	bl	80077f8 <lcd_print>
 8001536:	e008      	b.n	800154a <menu+0x34a>
			} else if(dilSecim == 1) {
 8001538:	4b64      	ldr	r3, [pc, #400]	; (80016cc <menu+0x4cc>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d104      	bne.n	800154a <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001540:	4a6f      	ldr	r2, [pc, #444]	; (8001700 <menu+0x500>)
 8001542:	2101      	movs	r1, #1
 8001544:	2002      	movs	r0, #2
 8001546:	f006 f957 	bl	80077f8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800154a:	4a6e      	ldr	r2, [pc, #440]	; (8001704 <menu+0x504>)
 800154c:	210f      	movs	r1, #15
 800154e:	2002      	movs	r0, #2
 8001550:	f006 f952 	bl	80077f8 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001554:	4b6c      	ldr	r3, [pc, #432]	; (8001708 <menu+0x508>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	220a      	movs	r2, #10
 800155a:	4967      	ldr	r1, [pc, #412]	; (80016f8 <menu+0x4f8>)
 800155c:	4618      	mov	r0, r3
 800155e:	f00a fcf9 	bl	800bf54 <itoa>
			lcd_print(2, 14, snum);
 8001562:	4a65      	ldr	r2, [pc, #404]	; (80016f8 <menu+0x4f8>)
 8001564:	210e      	movs	r1, #14
 8001566:	2002      	movs	r0, #2
 8001568:	f006 f946 	bl	80077f8 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800156c:	4b5d      	ldr	r3, [pc, #372]	; (80016e4 <menu+0x4e4>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d123      	bne.n	80015bc <menu+0x3bc>
			if(dilSecim == 0) {
 8001574:	4b55      	ldr	r3, [pc, #340]	; (80016cc <menu+0x4cc>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d105      	bne.n	8001588 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 800157c:	4a63      	ldr	r2, [pc, #396]	; (800170c <menu+0x50c>)
 800157e:	2101      	movs	r1, #1
 8001580:	2002      	movs	r0, #2
 8001582:	f006 f939 	bl	80077f8 <lcd_print>
 8001586:	e008      	b.n	800159a <menu+0x39a>
			} else if(dilSecim == 1) {
 8001588:	4b50      	ldr	r3, [pc, #320]	; (80016cc <menu+0x4cc>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d104      	bne.n	800159a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001590:	4a5f      	ldr	r2, [pc, #380]	; (8001710 <menu+0x510>)
 8001592:	2101      	movs	r1, #1
 8001594:	2002      	movs	r0, #2
 8001596:	f006 f92f 	bl	80077f8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800159a:	4a5a      	ldr	r2, [pc, #360]	; (8001704 <menu+0x504>)
 800159c:	210f      	movs	r1, #15
 800159e:	2002      	movs	r0, #2
 80015a0:	f006 f92a 	bl	80077f8 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80015a4:	4b5b      	ldr	r3, [pc, #364]	; (8001714 <menu+0x514>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	220a      	movs	r2, #10
 80015aa:	4953      	ldr	r1, [pc, #332]	; (80016f8 <menu+0x4f8>)
 80015ac:	4618      	mov	r0, r3
 80015ae:	f00a fcd1 	bl	800bf54 <itoa>
			lcd_print(2, 14, snum);
 80015b2:	4a51      	ldr	r2, [pc, #324]	; (80016f8 <menu+0x4f8>)
 80015b4:	210e      	movs	r1, #14
 80015b6:	2002      	movs	r0, #2
 80015b8:	f006 f91e 	bl	80077f8 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80015bc:	4b49      	ldr	r3, [pc, #292]	; (80016e4 <menu+0x4e4>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d123      	bne.n	800160c <menu+0x40c>
			if(dilSecim == 0) {
 80015c4:	4b41      	ldr	r3, [pc, #260]	; (80016cc <menu+0x4cc>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d105      	bne.n	80015d8 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 80015cc:	4a52      	ldr	r2, [pc, #328]	; (8001718 <menu+0x518>)
 80015ce:	2101      	movs	r1, #1
 80015d0:	2002      	movs	r0, #2
 80015d2:	f006 f911 	bl	80077f8 <lcd_print>
 80015d6:	e008      	b.n	80015ea <menu+0x3ea>
			} else if(dilSecim == 1) {
 80015d8:	4b3c      	ldr	r3, [pc, #240]	; (80016cc <menu+0x4cc>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d104      	bne.n	80015ea <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 80015e0:	4a4e      	ldr	r2, [pc, #312]	; (800171c <menu+0x51c>)
 80015e2:	2101      	movs	r1, #1
 80015e4:	2002      	movs	r0, #2
 80015e6:	f006 f907 	bl	80077f8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80015ea:	4a46      	ldr	r2, [pc, #280]	; (8001704 <menu+0x504>)
 80015ec:	210f      	movs	r1, #15
 80015ee:	2002      	movs	r0, #2
 80015f0:	f006 f902 	bl	80077f8 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80015f4:	4b4a      	ldr	r3, [pc, #296]	; (8001720 <menu+0x520>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	220a      	movs	r2, #10
 80015fa:	493f      	ldr	r1, [pc, #252]	; (80016f8 <menu+0x4f8>)
 80015fc:	4618      	mov	r0, r3
 80015fe:	f00a fca9 	bl	800bf54 <itoa>
			lcd_print(2, 14, snum);
 8001602:	4a3d      	ldr	r2, [pc, #244]	; (80016f8 <menu+0x4f8>)
 8001604:	210e      	movs	r1, #14
 8001606:	2002      	movs	r0, #2
 8001608:	f006 f8f6 	bl	80077f8 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800160c:	4b35      	ldr	r3, [pc, #212]	; (80016e4 <menu+0x4e4>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b04      	cmp	r3, #4
 8001612:	d123      	bne.n	800165c <menu+0x45c>
			if(dilSecim == 0) {
 8001614:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <menu+0x4cc>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d105      	bne.n	8001628 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 800161c:	4a41      	ldr	r2, [pc, #260]	; (8001724 <menu+0x524>)
 800161e:	2101      	movs	r1, #1
 8001620:	2002      	movs	r0, #2
 8001622:	f006 f8e9 	bl	80077f8 <lcd_print>
 8001626:	e008      	b.n	800163a <menu+0x43a>
			} else if(dilSecim == 1) {
 8001628:	4b28      	ldr	r3, [pc, #160]	; (80016cc <menu+0x4cc>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d104      	bne.n	800163a <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001630:	4a3d      	ldr	r2, [pc, #244]	; (8001728 <menu+0x528>)
 8001632:	2101      	movs	r1, #1
 8001634:	2002      	movs	r0, #2
 8001636:	f006 f8df 	bl	80077f8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800163a:	4a32      	ldr	r2, [pc, #200]	; (8001704 <menu+0x504>)
 800163c:	210f      	movs	r1, #15
 800163e:	2002      	movs	r0, #2
 8001640:	f006 f8da 	bl	80077f8 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001644:	4b39      	ldr	r3, [pc, #228]	; (800172c <menu+0x52c>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	220a      	movs	r2, #10
 800164a:	492b      	ldr	r1, [pc, #172]	; (80016f8 <menu+0x4f8>)
 800164c:	4618      	mov	r0, r3
 800164e:	f00a fc81 	bl	800bf54 <itoa>
			lcd_print(2, 14, snum);
 8001652:	4a29      	ldr	r2, [pc, #164]	; (80016f8 <menu+0x4f8>)
 8001654:	210e      	movs	r1, #14
 8001656:	2002      	movs	r0, #2
 8001658:	f006 f8ce 	bl	80077f8 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800165c:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <menu+0x4e4>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b05      	cmp	r3, #5
 8001662:	d123      	bne.n	80016ac <menu+0x4ac>
			if(dilSecim == 0) {
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <menu+0x4cc>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d105      	bne.n	8001678 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 800166c:	4a30      	ldr	r2, [pc, #192]	; (8001730 <menu+0x530>)
 800166e:	2101      	movs	r1, #1
 8001670:	2002      	movs	r0, #2
 8001672:	f006 f8c1 	bl	80077f8 <lcd_print>
 8001676:	e008      	b.n	800168a <menu+0x48a>
			} else if(dilSecim == 1) {
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <menu+0x4cc>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d104      	bne.n	800168a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001680:	4a2c      	ldr	r2, [pc, #176]	; (8001734 <menu+0x534>)
 8001682:	2101      	movs	r1, #1
 8001684:	2002      	movs	r0, #2
 8001686:	f006 f8b7 	bl	80077f8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800168a:	4a1e      	ldr	r2, [pc, #120]	; (8001704 <menu+0x504>)
 800168c:	210f      	movs	r1, #15
 800168e:	2002      	movs	r0, #2
 8001690:	f006 f8b2 	bl	80077f8 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001694:	4b28      	ldr	r3, [pc, #160]	; (8001738 <menu+0x538>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	220a      	movs	r2, #10
 800169a:	4917      	ldr	r1, [pc, #92]	; (80016f8 <menu+0x4f8>)
 800169c:	4618      	mov	r0, r3
 800169e:	f00a fc59 	bl	800bf54 <itoa>
			lcd_print(2, 14, snum);
 80016a2:	4a15      	ldr	r2, [pc, #84]	; (80016f8 <menu+0x4f8>)
 80016a4:	210e      	movs	r1, #14
 80016a6:	2002      	movs	r0, #2
 80016a8:	f006 f8a6 	bl	80077f8 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80016ac:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <menu+0x4e4>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b06      	cmp	r3, #6
 80016b2:	d15f      	bne.n	8001774 <menu+0x574>
			if(dilSecim == 0) {
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <menu+0x4cc>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d141      	bne.n	8001740 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 80016bc:	4a1f      	ldr	r2, [pc, #124]	; (800173c <menu+0x53c>)
 80016be:	2101      	movs	r1, #1
 80016c0:	2002      	movs	r0, #2
 80016c2:	f006 f899 	bl	80077f8 <lcd_print>
 80016c6:	e044      	b.n	8001752 <menu+0x552>
 80016c8:	0800cca4 	.word	0x0800cca4
 80016cc:	20000221 	.word	0x20000221
 80016d0:	0800ccb8 	.word	0x0800ccb8
 80016d4:	0800cccc 	.word	0x0800cccc
 80016d8:	20000200 	.word	0x20000200
 80016dc:	0800cce0 	.word	0x0800cce0
 80016e0:	0800ccf4 	.word	0x0800ccf4
 80016e4:	20000202 	.word	0x20000202
 80016e8:	0800cd08 	.word	0x0800cd08
 80016ec:	0800cd18 	.word	0x0800cd18
 80016f0:	0800cd28 	.word	0x0800cd28
 80016f4:	20000222 	.word	0x20000222
 80016f8:	2000019c 	.word	0x2000019c
 80016fc:	0800cd2c 	.word	0x0800cd2c
 8001700:	0800cd3c 	.word	0x0800cd3c
 8001704:	0800cd4c 	.word	0x0800cd4c
 8001708:	20000223 	.word	0x20000223
 800170c:	0800cd50 	.word	0x0800cd50
 8001710:	0800cd60 	.word	0x0800cd60
 8001714:	20000224 	.word	0x20000224
 8001718:	0800cd70 	.word	0x0800cd70
 800171c:	0800cd80 	.word	0x0800cd80
 8001720:	20000225 	.word	0x20000225
 8001724:	0800cd90 	.word	0x0800cd90
 8001728:	0800cda0 	.word	0x0800cda0
 800172c:	20000226 	.word	0x20000226
 8001730:	0800cdb0 	.word	0x0800cdb0
 8001734:	0800cdc0 	.word	0x0800cdc0
 8001738:	20000227 	.word	0x20000227
 800173c:	0800cdd0 	.word	0x0800cdd0
			} else if(dilSecim == 1) {
 8001740:	4b4f      	ldr	r3, [pc, #316]	; (8001880 <menu+0x680>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d104      	bne.n	8001752 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001748:	4a4e      	ldr	r2, [pc, #312]	; (8001884 <menu+0x684>)
 800174a:	2101      	movs	r1, #1
 800174c:	2002      	movs	r0, #2
 800174e:	f006 f853 	bl	80077f8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001752:	4a4d      	ldr	r2, [pc, #308]	; (8001888 <menu+0x688>)
 8001754:	210f      	movs	r1, #15
 8001756:	2002      	movs	r0, #2
 8001758:	f006 f84e 	bl	80077f8 <lcd_print>
			itoa(hataKayit7, snum, 10);
 800175c:	4b4b      	ldr	r3, [pc, #300]	; (800188c <menu+0x68c>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	220a      	movs	r2, #10
 8001762:	494b      	ldr	r1, [pc, #300]	; (8001890 <menu+0x690>)
 8001764:	4618      	mov	r0, r3
 8001766:	f00a fbf5 	bl	800bf54 <itoa>
			lcd_print(2, 14, snum);
 800176a:	4a49      	ldr	r2, [pc, #292]	; (8001890 <menu+0x690>)
 800176c:	210e      	movs	r1, #14
 800176e:	2002      	movs	r0, #2
 8001770:	f006 f842 	bl	80077f8 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001774:	4b47      	ldr	r3, [pc, #284]	; (8001894 <menu+0x694>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b07      	cmp	r3, #7
 800177a:	d123      	bne.n	80017c4 <menu+0x5c4>
			if(dilSecim == 0) {
 800177c:	4b40      	ldr	r3, [pc, #256]	; (8001880 <menu+0x680>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d105      	bne.n	8001790 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001784:	4a44      	ldr	r2, [pc, #272]	; (8001898 <menu+0x698>)
 8001786:	2101      	movs	r1, #1
 8001788:	2002      	movs	r0, #2
 800178a:	f006 f835 	bl	80077f8 <lcd_print>
 800178e:	e008      	b.n	80017a2 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001790:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <menu+0x680>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d104      	bne.n	80017a2 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001798:	4a40      	ldr	r2, [pc, #256]	; (800189c <menu+0x69c>)
 800179a:	2101      	movs	r1, #1
 800179c:	2002      	movs	r0, #2
 800179e:	f006 f82b 	bl	80077f8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017a2:	4a39      	ldr	r2, [pc, #228]	; (8001888 <menu+0x688>)
 80017a4:	210f      	movs	r1, #15
 80017a6:	2002      	movs	r0, #2
 80017a8:	f006 f826 	bl	80077f8 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80017ac:	4b3c      	ldr	r3, [pc, #240]	; (80018a0 <menu+0x6a0>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	220a      	movs	r2, #10
 80017b2:	4937      	ldr	r1, [pc, #220]	; (8001890 <menu+0x690>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f00a fbcd 	bl	800bf54 <itoa>
			lcd_print(2, 14, snum);
 80017ba:	4a35      	ldr	r2, [pc, #212]	; (8001890 <menu+0x690>)
 80017bc:	210e      	movs	r1, #14
 80017be:	2002      	movs	r0, #2
 80017c0:	f006 f81a 	bl	80077f8 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80017c4:	4b33      	ldr	r3, [pc, #204]	; (8001894 <menu+0x694>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d123      	bne.n	8001814 <menu+0x614>
			if(dilSecim == 0) {
 80017cc:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <menu+0x680>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d105      	bne.n	80017e0 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 80017d4:	4a33      	ldr	r2, [pc, #204]	; (80018a4 <menu+0x6a4>)
 80017d6:	2101      	movs	r1, #1
 80017d8:	2002      	movs	r0, #2
 80017da:	f006 f80d 	bl	80077f8 <lcd_print>
 80017de:	e008      	b.n	80017f2 <menu+0x5f2>
			} else if(dilSecim == 1) {
 80017e0:	4b27      	ldr	r3, [pc, #156]	; (8001880 <menu+0x680>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d104      	bne.n	80017f2 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 80017e8:	4a2f      	ldr	r2, [pc, #188]	; (80018a8 <menu+0x6a8>)
 80017ea:	2101      	movs	r1, #1
 80017ec:	2002      	movs	r0, #2
 80017ee:	f006 f803 	bl	80077f8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017f2:	4a25      	ldr	r2, [pc, #148]	; (8001888 <menu+0x688>)
 80017f4:	210f      	movs	r1, #15
 80017f6:	2002      	movs	r0, #2
 80017f8:	f005 fffe 	bl	80077f8 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80017fc:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <menu+0x6ac>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	220a      	movs	r2, #10
 8001802:	4923      	ldr	r1, [pc, #140]	; (8001890 <menu+0x690>)
 8001804:	4618      	mov	r0, r3
 8001806:	f00a fba5 	bl	800bf54 <itoa>
			lcd_print(2, 14, snum);
 800180a:	4a21      	ldr	r2, [pc, #132]	; (8001890 <menu+0x690>)
 800180c:	210e      	movs	r1, #14
 800180e:	2002      	movs	r0, #2
 8001810:	f005 fff2 	bl	80077f8 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <menu+0x694>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b09      	cmp	r3, #9
 800181a:	d123      	bne.n	8001864 <menu+0x664>
			if(dilSecim == 0) {
 800181c:	4b18      	ldr	r3, [pc, #96]	; (8001880 <menu+0x680>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d105      	bne.n	8001830 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001824:	4a22      	ldr	r2, [pc, #136]	; (80018b0 <menu+0x6b0>)
 8001826:	2101      	movs	r1, #1
 8001828:	2002      	movs	r0, #2
 800182a:	f005 ffe5 	bl	80077f8 <lcd_print>
 800182e:	e008      	b.n	8001842 <menu+0x642>
			} else if(dilSecim == 1) {
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <menu+0x680>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d104      	bne.n	8001842 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001838:	4a1e      	ldr	r2, [pc, #120]	; (80018b4 <menu+0x6b4>)
 800183a:	2101      	movs	r1, #1
 800183c:	2002      	movs	r0, #2
 800183e:	f005 ffdb 	bl	80077f8 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001842:	4a1d      	ldr	r2, [pc, #116]	; (80018b8 <menu+0x6b8>)
 8001844:	2110      	movs	r1, #16
 8001846:	2002      	movs	r0, #2
 8001848:	f005 ffd6 	bl	80077f8 <lcd_print>
			itoa(hataKayit10, snum, 10);
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <menu+0x6bc>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	220a      	movs	r2, #10
 8001852:	490f      	ldr	r1, [pc, #60]	; (8001890 <menu+0x690>)
 8001854:	4618      	mov	r0, r3
 8001856:	f00a fb7d 	bl	800bf54 <itoa>
			lcd_print(2, 15, snum);
 800185a:	4a0d      	ldr	r2, [pc, #52]	; (8001890 <menu+0x690>)
 800185c:	210f      	movs	r1, #15
 800185e:	2002      	movs	r0, #2
 8001860:	f005 ffca 	bl	80077f8 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <menu+0x694>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b0a      	cmp	r3, #10
 800186a:	d134      	bne.n	80018d6 <menu+0x6d6>
			if(dilSecim == 0) {
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <menu+0x680>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d127      	bne.n	80018c4 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001874:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <menu+0x6c0>)
 8001876:	2101      	movs	r1, #1
 8001878:	2002      	movs	r0, #2
 800187a:	f005 ffbd 	bl	80077f8 <lcd_print>
 800187e:	e02a      	b.n	80018d6 <menu+0x6d6>
 8001880:	20000221 	.word	0x20000221
 8001884:	0800cde0 	.word	0x0800cde0
 8001888:	0800cd4c 	.word	0x0800cd4c
 800188c:	20000228 	.word	0x20000228
 8001890:	2000019c 	.word	0x2000019c
 8001894:	20000202 	.word	0x20000202
 8001898:	0800cdf0 	.word	0x0800cdf0
 800189c:	0800ce00 	.word	0x0800ce00
 80018a0:	20000229 	.word	0x20000229
 80018a4:	0800ce10 	.word	0x0800ce10
 80018a8:	0800ce20 	.word	0x0800ce20
 80018ac:	2000022a 	.word	0x2000022a
 80018b0:	0800ce30 	.word	0x0800ce30
 80018b4:	0800ce40 	.word	0x0800ce40
 80018b8:	0800ce50 	.word	0x0800ce50
 80018bc:	2000022b 	.word	0x2000022b
 80018c0:	0800ce54 	.word	0x0800ce54
			} else if(dilSecim == 1) {
 80018c4:	4b82      	ldr	r3, [pc, #520]	; (8001ad0 <menu+0x8d0>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d104      	bne.n	80018d6 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 80018cc:	4a81      	ldr	r2, [pc, #516]	; (8001ad4 <menu+0x8d4>)
 80018ce:	2101      	movs	r1, #1
 80018d0:	2002      	movs	r0, #2
 80018d2:	f005 ff91 	bl	80077f8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80018d6:	2102      	movs	r1, #2
 80018d8:	487f      	ldr	r0, [pc, #508]	; (8001ad8 <menu+0x8d8>)
 80018da:	f007 fab3 	bl	8008e44 <HAL_GPIO_ReadPin>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d119      	bne.n	8001918 <menu+0x718>
 80018e4:	4b7d      	ldr	r3, [pc, #500]	; (8001adc <menu+0x8dc>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	f083 0301 	eor.w	r3, r3, #1
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d012      	beq.n	8001918 <menu+0x718>
 80018f2:	4b7b      	ldr	r3, [pc, #492]	; (8001ae0 <menu+0x8e0>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10e      	bne.n	8001918 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 80018fa:	4b7a      	ldr	r3, [pc, #488]	; (8001ae4 <menu+0x8e4>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b78      	ldr	r3, [pc, #480]	; (8001ae4 <menu+0x8e4>)
 8001904:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001906:	4b77      	ldr	r3, [pc, #476]	; (8001ae4 <menu+0x8e4>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b0a      	cmp	r3, #10
 800190c:	d902      	bls.n	8001914 <menu+0x714>
				hataGostermeSirasi = 0;
 800190e:	4b75      	ldr	r3, [pc, #468]	; (8001ae4 <menu+0x8e4>)
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001914:	f002 fffc 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001918:	2104      	movs	r1, #4
 800191a:	486f      	ldr	r0, [pc, #444]	; (8001ad8 <menu+0x8d8>)
 800191c:	f007 fa92 	bl	8008e44 <HAL_GPIO_ReadPin>
 8001920:	4603      	mov	r3, r0
 8001922:	2b01      	cmp	r3, #1
 8001924:	d119      	bne.n	800195a <menu+0x75a>
 8001926:	4b6d      	ldr	r3, [pc, #436]	; (8001adc <menu+0x8dc>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	f083 0301 	eor.w	r3, r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d012      	beq.n	800195a <menu+0x75a>
 8001934:	4b6a      	ldr	r3, [pc, #424]	; (8001ae0 <menu+0x8e0>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10e      	bne.n	800195a <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 800193c:	4b69      	ldr	r3, [pc, #420]	; (8001ae4 <menu+0x8e4>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	3b01      	subs	r3, #1
 8001942:	b2da      	uxtb	r2, r3
 8001944:	4b67      	ldr	r3, [pc, #412]	; (8001ae4 <menu+0x8e4>)
 8001946:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001948:	4b66      	ldr	r3, [pc, #408]	; (8001ae4 <menu+0x8e4>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b0b      	cmp	r3, #11
 800194e:	d902      	bls.n	8001956 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001950:	4b64      	ldr	r3, [pc, #400]	; (8001ae4 <menu+0x8e4>)
 8001952:	220a      	movs	r2, #10
 8001954:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001956:	f002 ffdb 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 800195a:	2108      	movs	r1, #8
 800195c:	485e      	ldr	r0, [pc, #376]	; (8001ad8 <menu+0x8d8>)
 800195e:	f007 fa71 	bl	8008e44 <HAL_GPIO_ReadPin>
 8001962:	4603      	mov	r3, r0
 8001964:	2b01      	cmp	r3, #1
 8001966:	d153      	bne.n	8001a10 <menu+0x810>
 8001968:	4b5c      	ldr	r3, [pc, #368]	; (8001adc <menu+0x8dc>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	f083 0301 	eor.w	r3, r3, #1
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d04c      	beq.n	8001a10 <menu+0x810>
 8001976:	4b5b      	ldr	r3, [pc, #364]	; (8001ae4 <menu+0x8e4>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b0a      	cmp	r3, #10
 800197c:	d148      	bne.n	8001a10 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 800197e:	4b5a      	ldr	r3, [pc, #360]	; (8001ae8 <menu+0x8e8>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
 8001984:	4b59      	ldr	r3, [pc, #356]	; (8001aec <menu+0x8ec>)
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 800198c:	4b58      	ldr	r3, [pc, #352]	; (8001af0 <menu+0x8f0>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
 8001992:	4b56      	ldr	r3, [pc, #344]	; (8001aec <menu+0x8ec>)
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 800199a:	4b56      	ldr	r3, [pc, #344]	; (8001af4 <menu+0x8f4>)
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
 80019a0:	4b52      	ldr	r3, [pc, #328]	; (8001aec <menu+0x8ec>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 80019a8:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <menu+0x8f8>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
 80019ae:	4b4f      	ldr	r3, [pc, #316]	; (8001aec <menu+0x8ec>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 80019b6:	4b51      	ldr	r3, [pc, #324]	; (8001afc <menu+0x8fc>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	4b4b      	ldr	r3, [pc, #300]	; (8001aec <menu+0x8ec>)
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 80019c4:	4b4e      	ldr	r3, [pc, #312]	; (8001b00 <menu+0x900>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
 80019ca:	4b48      	ldr	r3, [pc, #288]	; (8001aec <menu+0x8ec>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 80019d2:	4b4c      	ldr	r3, [pc, #304]	; (8001b04 <menu+0x904>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
 80019d8:	4b44      	ldr	r3, [pc, #272]	; (8001aec <menu+0x8ec>)
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 80019e0:	4b49      	ldr	r3, [pc, #292]	; (8001b08 <menu+0x908>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	4b41      	ldr	r3, [pc, #260]	; (8001aec <menu+0x8ec>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 80019ee:	4b47      	ldr	r3, [pc, #284]	; (8001b0c <menu+0x90c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
 80019f4:	4b3d      	ldr	r3, [pc, #244]	; (8001aec <menu+0x8ec>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 80019fc:	4b44      	ldr	r3, [pc, #272]	; (8001b10 <menu+0x910>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
 8001a02:	4b3a      	ldr	r3, [pc, #232]	; (8001aec <menu+0x8ec>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001a0a:	4b42      	ldr	r3, [pc, #264]	; (8001b14 <menu+0x914>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001a10:	4b41      	ldr	r3, [pc, #260]	; (8001b18 <menu+0x918>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	f040 80fc 	bne.w	8001c12 <menu+0xa12>
		if(dilSecim == 0) {
 8001a1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <menu+0x8d0>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d105      	bne.n	8001a2e <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001a22:	4a3e      	ldr	r2, [pc, #248]	; (8001b1c <menu+0x91c>)
 8001a24:	2101      	movs	r1, #1
 8001a26:	2001      	movs	r0, #1
 8001a28:	f005 fee6 	bl	80077f8 <lcd_print>
 8001a2c:	e008      	b.n	8001a40 <menu+0x840>
		} else if(dilSecim == 1) {
 8001a2e:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <menu+0x8d0>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d104      	bne.n	8001a40 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001a36:	4a3a      	ldr	r2, [pc, #232]	; (8001b20 <menu+0x920>)
 8001a38:	2101      	movs	r1, #1
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f005 fedc 	bl	80077f8 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001a40:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <menu+0x8e0>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d003      	beq.n	8001a50 <menu+0x850>
 8001a48:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <menu+0x8e0>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d112      	bne.n	8001a76 <menu+0x876>
			if(dilSecim == 0) {
 8001a50:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <menu+0x8d0>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d105      	bne.n	8001a64 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001a58:	4a32      	ldr	r2, [pc, #200]	; (8001b24 <menu+0x924>)
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	f005 fecb 	bl	80077f8 <lcd_print>
 8001a62:	e008      	b.n	8001a76 <menu+0x876>
			} else if(dilSecim == 1) {
 8001a64:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <menu+0x8d0>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d104      	bne.n	8001a76 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001a6c:	4a2e      	ldr	r2, [pc, #184]	; (8001b28 <menu+0x928>)
 8001a6e:	2101      	movs	r1, #1
 8001a70:	2002      	movs	r0, #2
 8001a72:	f005 fec1 	bl	80077f8 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001a76:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <menu+0x92c>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d116      	bne.n	8001aac <menu+0x8ac>
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <menu+0x8e0>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d112      	bne.n	8001aac <menu+0x8ac>
			if(dilSecim == 0) {
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <menu+0x8d0>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d105      	bne.n	8001a9a <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001a8e:	4a28      	ldr	r2, [pc, #160]	; (8001b30 <menu+0x930>)
 8001a90:	2101      	movs	r1, #1
 8001a92:	2002      	movs	r0, #2
 8001a94:	f005 feb0 	bl	80077f8 <lcd_print>
 8001a98:	e008      	b.n	8001aac <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <menu+0x8d0>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d104      	bne.n	8001aac <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001aa2:	4a24      	ldr	r2, [pc, #144]	; (8001b34 <menu+0x934>)
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	f005 fea6 	bl	80077f8 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001aac:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <menu+0x92c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d14c      	bne.n	8001b4e <menu+0x94e>
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <menu+0x8e0>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d148      	bne.n	8001b4e <menu+0x94e>
			if(dilSecim == 0) {
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <menu+0x8d0>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d13b      	bne.n	8001b3c <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001ac4:	4a1c      	ldr	r2, [pc, #112]	; (8001b38 <menu+0x938>)
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	2002      	movs	r0, #2
 8001aca:	f005 fe95 	bl	80077f8 <lcd_print>
 8001ace:	e03e      	b.n	8001b4e <menu+0x94e>
 8001ad0:	20000221 	.word	0x20000221
 8001ad4:	0800ce68 	.word	0x0800ce68
 8001ad8:	40010800 	.word	0x40010800
 8001adc:	2000022f 	.word	0x2000022f
 8001ae0:	2000020f 	.word	0x2000020f
 8001ae4:	20000202 	.word	0x20000202
 8001ae8:	20000222 	.word	0x20000222
 8001aec:	2000012c 	.word	0x2000012c
 8001af0:	20000223 	.word	0x20000223
 8001af4:	20000224 	.word	0x20000224
 8001af8:	20000225 	.word	0x20000225
 8001afc:	20000226 	.word	0x20000226
 8001b00:	20000227 	.word	0x20000227
 8001b04:	20000228 	.word	0x20000228
 8001b08:	20000229 	.word	0x20000229
 8001b0c:	2000022a 	.word	0x2000022a
 8001b10:	2000022b 	.word	0x2000022b
 8001b14:	2000022c 	.word	0x2000022c
 8001b18:	20000200 	.word	0x20000200
 8001b1c:	0800ce7c 	.word	0x0800ce7c
 8001b20:	0800ce90 	.word	0x0800ce90
 8001b24:	0800cea4 	.word	0x0800cea4
 8001b28:	0800ceb8 	.word	0x0800ceb8
 8001b2c:	20000201 	.word	0x20000201
 8001b30:	0800cecc 	.word	0x0800cecc
 8001b34:	0800cedc 	.word	0x0800cedc
 8001b38:	0800ceec 	.word	0x0800ceec
			} else if(dilSecim == 1) {
 8001b3c:	4b98      	ldr	r3, [pc, #608]	; (8001da0 <menu+0xba0>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d104      	bne.n	8001b4e <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001b44:	4a97      	ldr	r2, [pc, #604]	; (8001da4 <menu+0xba4>)
 8001b46:	2101      	movs	r1, #1
 8001b48:	2002      	movs	r0, #2
 8001b4a:	f005 fe55 	bl	80077f8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b4e:	2102      	movs	r1, #2
 8001b50:	4895      	ldr	r0, [pc, #596]	; (8001da8 <menu+0xba8>)
 8001b52:	f007 f977 	bl	8008e44 <HAL_GPIO_ReadPin>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d119      	bne.n	8001b90 <menu+0x990>
 8001b5c:	4b93      	ldr	r3, [pc, #588]	; (8001dac <menu+0xbac>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	f083 0301 	eor.w	r3, r3, #1
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d012      	beq.n	8001b90 <menu+0x990>
 8001b6a:	4b91      	ldr	r3, [pc, #580]	; (8001db0 <menu+0xbb0>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10e      	bne.n	8001b90 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001b72:	4b90      	ldr	r3, [pc, #576]	; (8001db4 <menu+0xbb4>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4b8e      	ldr	r3, [pc, #568]	; (8001db4 <menu+0xbb4>)
 8001b7c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001b7e:	4b8d      	ldr	r3, [pc, #564]	; (8001db4 <menu+0xbb4>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d902      	bls.n	8001b8c <menu+0x98c>
				calismaSekli = 0;
 8001b86:	4b8b      	ldr	r3, [pc, #556]	; (8001db4 <menu+0xbb4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b8c:	f002 fec0 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b90:	2104      	movs	r1, #4
 8001b92:	4885      	ldr	r0, [pc, #532]	; (8001da8 <menu+0xba8>)
 8001b94:	f007 f956 	bl	8008e44 <HAL_GPIO_ReadPin>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d119      	bne.n	8001bd2 <menu+0x9d2>
 8001b9e:	4b83      	ldr	r3, [pc, #524]	; (8001dac <menu+0xbac>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	f083 0301 	eor.w	r3, r3, #1
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d012      	beq.n	8001bd2 <menu+0x9d2>
 8001bac:	4b80      	ldr	r3, [pc, #512]	; (8001db0 <menu+0xbb0>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10e      	bne.n	8001bd2 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001bb4:	4b7f      	ldr	r3, [pc, #508]	; (8001db4 <menu+0xbb4>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	4b7d      	ldr	r3, [pc, #500]	; (8001db4 <menu+0xbb4>)
 8001bbe:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001bc0:	4b7c      	ldr	r3, [pc, #496]	; (8001db4 <menu+0xbb4>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d002      	beq.n	8001bce <menu+0x9ce>
	    		calismaSekli = 1;
 8001bc8:	4b7a      	ldr	r3, [pc, #488]	; (8001db4 <menu+0xbb4>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001bce:	f002 fe9f 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bd2:	2108      	movs	r1, #8
 8001bd4:	4874      	ldr	r0, [pc, #464]	; (8001da8 <menu+0xba8>)
 8001bd6:	f007 f935 	bl	8008e44 <HAL_GPIO_ReadPin>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d118      	bne.n	8001c12 <menu+0xa12>
 8001be0:	4b72      	ldr	r3, [pc, #456]	; (8001dac <menu+0xbac>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	f083 0301 	eor.w	r3, r3, #1
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d011      	beq.n	8001c12 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001bee:	4b71      	ldr	r3, [pc, #452]	; (8001db4 <menu+0xbb4>)
 8001bf0:	781a      	ldrb	r2, [r3, #0]
 8001bf2:	4b71      	ldr	r3, [pc, #452]	; (8001db8 <menu+0xbb8>)
 8001bf4:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001bf6:	4b6f      	ldr	r3, [pc, #444]	; (8001db4 <menu+0xbb4>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d106      	bne.n	8001c0c <menu+0xa0c>
				altLimit = 1;
 8001bfe:	4b6f      	ldr	r3, [pc, #444]	; (8001dbc <menu+0xbbc>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001c04:	4b6d      	ldr	r3, [pc, #436]	; (8001dbc <menu+0xbbc>)
 8001c06:	781a      	ldrb	r2, [r3, #0]
 8001c08:	4b6b      	ldr	r3, [pc, #428]	; (8001db8 <menu+0xbb8>)
 8001c0a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001c0c:	4b6c      	ldr	r3, [pc, #432]	; (8001dc0 <menu+0xbc0>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001c12:	4b6c      	ldr	r3, [pc, #432]	; (8001dc4 <menu+0xbc4>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	f040 8083 	bne.w	8001d22 <menu+0xb22>
		if(dilSecim == 0) {
 8001c1c:	4b60      	ldr	r3, [pc, #384]	; (8001da0 <menu+0xba0>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d105      	bne.n	8001c30 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001c24:	4a68      	ldr	r2, [pc, #416]	; (8001dc8 <menu+0xbc8>)
 8001c26:	2101      	movs	r1, #1
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f005 fde5 	bl	80077f8 <lcd_print>
 8001c2e:	e008      	b.n	8001c42 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001c30:	4b5b      	ldr	r3, [pc, #364]	; (8001da0 <menu+0xba0>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d104      	bne.n	8001c42 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001c38:	4a64      	ldr	r2, [pc, #400]	; (8001dcc <menu+0xbcc>)
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	f005 fddb 	bl	80077f8 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001c42:	4b63      	ldr	r3, [pc, #396]	; (8001dd0 <menu+0xbd0>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d113      	bne.n	8001c72 <menu+0xa72>
			if(dilSecim == 0) {
 8001c4a:	4b55      	ldr	r3, [pc, #340]	; (8001da0 <menu+0xba0>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d105      	bne.n	8001c5e <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001c52:	4a60      	ldr	r2, [pc, #384]	; (8001dd4 <menu+0xbd4>)
 8001c54:	2101      	movs	r1, #1
 8001c56:	2002      	movs	r0, #2
 8001c58:	f005 fdce 	bl	80077f8 <lcd_print>
 8001c5c:	e012      	b.n	8001c84 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001c5e:	4b50      	ldr	r3, [pc, #320]	; (8001da0 <menu+0xba0>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d10e      	bne.n	8001c84 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001c66:	4a5c      	ldr	r2, [pc, #368]	; (8001dd8 <menu+0xbd8>)
 8001c68:	2101      	movs	r1, #1
 8001c6a:	2002      	movs	r0, #2
 8001c6c:	f005 fdc4 	bl	80077f8 <lcd_print>
 8001c70:	e008      	b.n	8001c84 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001c72:	4b57      	ldr	r3, [pc, #348]	; (8001dd0 <menu+0xbd0>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d104      	bne.n	8001c84 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001c7a:	4a58      	ldr	r2, [pc, #352]	; (8001ddc <menu+0xbdc>)
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	2002      	movs	r0, #2
 8001c80:	f005 fdba 	bl	80077f8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c84:	2102      	movs	r1, #2
 8001c86:	4848      	ldr	r0, [pc, #288]	; (8001da8 <menu+0xba8>)
 8001c88:	f007 f8dc 	bl	8008e44 <HAL_GPIO_ReadPin>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d115      	bne.n	8001cbe <menu+0xabe>
 8001c92:	4b46      	ldr	r3, [pc, #280]	; (8001dac <menu+0xbac>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	f083 0301 	eor.w	r3, r3, #1
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00e      	beq.n	8001cbe <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001ca0:	4b4b      	ldr	r3, [pc, #300]	; (8001dd0 <menu+0xbd0>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	4b49      	ldr	r3, [pc, #292]	; (8001dd0 <menu+0xbd0>)
 8001caa:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001cac:	4b48      	ldr	r3, [pc, #288]	; (8001dd0 <menu+0xbd0>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d902      	bls.n	8001cba <menu+0xaba>
				emniyetCercevesi = 0;
 8001cb4:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <menu+0xbd0>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cba:	f002 fe29 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cbe:	2104      	movs	r1, #4
 8001cc0:	4839      	ldr	r0, [pc, #228]	; (8001da8 <menu+0xba8>)
 8001cc2:	f007 f8bf 	bl	8008e44 <HAL_GPIO_ReadPin>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d115      	bne.n	8001cf8 <menu+0xaf8>
 8001ccc:	4b37      	ldr	r3, [pc, #220]	; (8001dac <menu+0xbac>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	f083 0301 	eor.w	r3, r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00e      	beq.n	8001cf8 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001cda:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <menu+0xbd0>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <menu+0xbd0>)
 8001ce4:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001ce6:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <menu+0xbd0>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001cee:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <menu+0xbd0>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001cf4:	f002 fe0c 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001cf8:	2108      	movs	r1, #8
 8001cfa:	482b      	ldr	r0, [pc, #172]	; (8001da8 <menu+0xba8>)
 8001cfc:	f007 f8a2 	bl	8008e44 <HAL_GPIO_ReadPin>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d10d      	bne.n	8001d22 <menu+0xb22>
 8001d06:	4b29      	ldr	r3, [pc, #164]	; (8001dac <menu+0xbac>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	f083 0301 	eor.w	r3, r3, #1
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d006      	beq.n	8001d22 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001d14:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <menu+0xbd0>)
 8001d16:	781a      	ldrb	r2, [r3, #0]
 8001d18:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <menu+0xbb8>)
 8001d1a:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001d1c:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <menu+0xbc0>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001d22:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <menu+0xbc4>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	f040 80ba 	bne.w	8001ea0 <menu+0xca0>
		if(dilSecim == 0) {
 8001d2c:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <menu+0xba0>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d105      	bne.n	8001d40 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001d34:	4a2a      	ldr	r2, [pc, #168]	; (8001de0 <menu+0xbe0>)
 8001d36:	2101      	movs	r1, #1
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f005 fd5d 	bl	80077f8 <lcd_print>
 8001d3e:	e008      	b.n	8001d52 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001d40:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <menu+0xba0>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d104      	bne.n	8001d52 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001d48:	4a26      	ldr	r2, [pc, #152]	; (8001de4 <menu+0xbe4>)
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f005 fd53 	bl	80077f8 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001d52:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <menu+0xbe8>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d113      	bne.n	8001d82 <menu+0xb82>
			if(dilSecim == 0) {
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <menu+0xba0>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d105      	bne.n	8001d6e <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001d62:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <menu+0xbd4>)
 8001d64:	2101      	movs	r1, #1
 8001d66:	2002      	movs	r0, #2
 8001d68:	f005 fd46 	bl	80077f8 <lcd_print>
 8001d6c:	e049      	b.n	8001e02 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <menu+0xba0>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d145      	bne.n	8001e02 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001d76:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <menu+0xbd8>)
 8001d78:	2101      	movs	r1, #1
 8001d7a:	2002      	movs	r0, #2
 8001d7c:	f005 fd3c 	bl	80077f8 <lcd_print>
 8001d80:	e03f      	b.n	8001e02 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001d82:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <menu+0xbe8>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d13b      	bne.n	8001e02 <menu+0xc02>
			if(dilSecim == 0) {
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <menu+0xba0>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d12e      	bne.n	8001df0 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001d92:	4a16      	ldr	r2, [pc, #88]	; (8001dec <menu+0xbec>)
 8001d94:	2101      	movs	r1, #1
 8001d96:	2002      	movs	r0, #2
 8001d98:	f005 fd2e 	bl	80077f8 <lcd_print>
 8001d9c:	e031      	b.n	8001e02 <menu+0xc02>
 8001d9e:	bf00      	nop
 8001da0:	20000221 	.word	0x20000221
 8001da4:	0800cefc 	.word	0x0800cefc
 8001da8:	40010800 	.word	0x40010800
 8001dac:	2000022f 	.word	0x2000022f
 8001db0:	2000020f 	.word	0x2000020f
 8001db4:	20000201 	.word	0x20000201
 8001db8:	2000012c 	.word	0x2000012c
 8001dbc:	20000206 	.word	0x20000206
 8001dc0:	2000022c 	.word	0x2000022c
 8001dc4:	20000200 	.word	0x20000200
 8001dc8:	0800cf0c 	.word	0x0800cf0c
 8001dcc:	0800cf20 	.word	0x0800cf20
 8001dd0:	20000204 	.word	0x20000204
 8001dd4:	0800cf34 	.word	0x0800cf34
 8001dd8:	0800cf48 	.word	0x0800cf48
 8001ddc:	0800cf5c 	.word	0x0800cf5c
 8001de0:	0800cf6c 	.word	0x0800cf6c
 8001de4:	0800cf80 	.word	0x0800cf80
 8001de8:	20000205 	.word	0x20000205
 8001dec:	0800cf94 	.word	0x0800cf94
			} else if(dilSecim == 1) {
 8001df0:	4b92      	ldr	r3, [pc, #584]	; (800203c <menu+0xe3c>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d104      	bne.n	8001e02 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001df8:	4a91      	ldr	r2, [pc, #580]	; (8002040 <menu+0xe40>)
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	2002      	movs	r0, #2
 8001dfe:	f005 fcfb 	bl	80077f8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e02:	2102      	movs	r1, #2
 8001e04:	488f      	ldr	r0, [pc, #572]	; (8002044 <menu+0xe44>)
 8001e06:	f007 f81d 	bl	8008e44 <HAL_GPIO_ReadPin>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d115      	bne.n	8001e3c <menu+0xc3c>
 8001e10:	4b8d      	ldr	r3, [pc, #564]	; (8002048 <menu+0xe48>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	f083 0301 	eor.w	r3, r3, #1
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00e      	beq.n	8001e3c <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001e1e:	4b8b      	ldr	r3, [pc, #556]	; (800204c <menu+0xe4c>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	3301      	adds	r3, #1
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4b89      	ldr	r3, [pc, #548]	; (800204c <menu+0xe4c>)
 8001e28:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001e2a:	4b88      	ldr	r3, [pc, #544]	; (800204c <menu+0xe4c>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d902      	bls.n	8001e38 <menu+0xc38>
				yavaslamaLimit = 0;
 8001e32:	4b86      	ldr	r3, [pc, #536]	; (800204c <menu+0xe4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e38:	f002 fd6a 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e3c:	2104      	movs	r1, #4
 8001e3e:	4881      	ldr	r0, [pc, #516]	; (8002044 <menu+0xe44>)
 8001e40:	f007 f800 	bl	8008e44 <HAL_GPIO_ReadPin>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d115      	bne.n	8001e76 <menu+0xc76>
 8001e4a:	4b7f      	ldr	r3, [pc, #508]	; (8002048 <menu+0xe48>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	f083 0301 	eor.w	r3, r3, #1
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00e      	beq.n	8001e76 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001e58:	4b7c      	ldr	r3, [pc, #496]	; (800204c <menu+0xe4c>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	4b7a      	ldr	r3, [pc, #488]	; (800204c <menu+0xe4c>)
 8001e62:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001e64:	4b79      	ldr	r3, [pc, #484]	; (800204c <menu+0xe4c>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001e6c:	4b77      	ldr	r3, [pc, #476]	; (800204c <menu+0xe4c>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e72:	f002 fd4d 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e76:	2108      	movs	r1, #8
 8001e78:	4872      	ldr	r0, [pc, #456]	; (8002044 <menu+0xe44>)
 8001e7a:	f006 ffe3 	bl	8008e44 <HAL_GPIO_ReadPin>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d10d      	bne.n	8001ea0 <menu+0xca0>
 8001e84:	4b70      	ldr	r3, [pc, #448]	; (8002048 <menu+0xe48>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	f083 0301 	eor.w	r3, r3, #1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d006      	beq.n	8001ea0 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001e92:	4b6e      	ldr	r3, [pc, #440]	; (800204c <menu+0xe4c>)
 8001e94:	781a      	ldrb	r2, [r3, #0]
 8001e96:	4b6e      	ldr	r3, [pc, #440]	; (8002050 <menu+0xe50>)
 8001e98:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001e9a:	4b6e      	ldr	r3, [pc, #440]	; (8002054 <menu+0xe54>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001ea0:	4b6d      	ldr	r3, [pc, #436]	; (8002058 <menu+0xe58>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b05      	cmp	r3, #5
 8001ea6:	f040 80b9 	bne.w	800201c <menu+0xe1c>
		if(dilSecim == 0) {
 8001eaa:	4b64      	ldr	r3, [pc, #400]	; (800203c <menu+0xe3c>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d105      	bne.n	8001ebe <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001eb2:	4a6a      	ldr	r2, [pc, #424]	; (800205c <menu+0xe5c>)
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f005 fc9e 	bl	80077f8 <lcd_print>
 8001ebc:	e008      	b.n	8001ed0 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001ebe:	4b5f      	ldr	r3, [pc, #380]	; (800203c <menu+0xe3c>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d104      	bne.n	8001ed0 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001ec6:	4a66      	ldr	r2, [pc, #408]	; (8002060 <menu+0xe60>)
 8001ec8:	2101      	movs	r1, #1
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f005 fc94 	bl	80077f8 <lcd_print>
		}

		if(altLimit == 0) {
 8001ed0:	4b64      	ldr	r3, [pc, #400]	; (8002064 <menu+0xe64>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d113      	bne.n	8001f00 <menu+0xd00>
			if(dilSecim == 0) {
 8001ed8:	4b58      	ldr	r3, [pc, #352]	; (800203c <menu+0xe3c>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d105      	bne.n	8001eec <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001ee0:	4a61      	ldr	r2, [pc, #388]	; (8002068 <menu+0xe68>)
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	2002      	movs	r0, #2
 8001ee6:	f005 fc87 	bl	80077f8 <lcd_print>
 8001eea:	e020      	b.n	8001f2e <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001eec:	4b53      	ldr	r3, [pc, #332]	; (800203c <menu+0xe3c>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d11c      	bne.n	8001f2e <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001ef4:	4a5d      	ldr	r2, [pc, #372]	; (800206c <menu+0xe6c>)
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	2002      	movs	r0, #2
 8001efa:	f005 fc7d 	bl	80077f8 <lcd_print>
 8001efe:	e016      	b.n	8001f2e <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001f00:	4b58      	ldr	r3, [pc, #352]	; (8002064 <menu+0xe64>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d112      	bne.n	8001f2e <menu+0xd2e>
			if(dilSecim == 0){
 8001f08:	4b4c      	ldr	r3, [pc, #304]	; (800203c <menu+0xe3c>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d105      	bne.n	8001f1c <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001f10:	4a57      	ldr	r2, [pc, #348]	; (8002070 <menu+0xe70>)
 8001f12:	2101      	movs	r1, #1
 8001f14:	2002      	movs	r0, #2
 8001f16:	f005 fc6f 	bl	80077f8 <lcd_print>
 8001f1a:	e008      	b.n	8001f2e <menu+0xd2e>
			} else if(dilSecim == 1){
 8001f1c:	4b47      	ldr	r3, [pc, #284]	; (800203c <menu+0xe3c>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d104      	bne.n	8001f2e <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001f24:	4a46      	ldr	r2, [pc, #280]	; (8002040 <menu+0xe40>)
 8001f26:	2101      	movs	r1, #1
 8001f28:	2002      	movs	r0, #2
 8001f2a:	f005 fc65 	bl	80077f8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001f2e:	2102      	movs	r1, #2
 8001f30:	4844      	ldr	r0, [pc, #272]	; (8002044 <menu+0xe44>)
 8001f32:	f006 ff87 	bl	8008e44 <HAL_GPIO_ReadPin>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d119      	bne.n	8001f70 <menu+0xd70>
 8001f3c:	4b42      	ldr	r3, [pc, #264]	; (8002048 <menu+0xe48>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	f083 0301 	eor.w	r3, r3, #1
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d012      	beq.n	8001f70 <menu+0xd70>
 8001f4a:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <menu+0xe74>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10e      	bne.n	8001f70 <menu+0xd70>
			altLimit = altLimit + 1;
 8001f52:	4b44      	ldr	r3, [pc, #272]	; (8002064 <menu+0xe64>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	3301      	adds	r3, #1
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4b42      	ldr	r3, [pc, #264]	; (8002064 <menu+0xe64>)
 8001f5c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001f5e:	4b41      	ldr	r3, [pc, #260]	; (8002064 <menu+0xe64>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d902      	bls.n	8001f6c <menu+0xd6c>
				altLimit = 0;
 8001f66:	4b3f      	ldr	r3, [pc, #252]	; (8002064 <menu+0xe64>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f6c:	f002 fcd0 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001f70:	2104      	movs	r1, #4
 8001f72:	4834      	ldr	r0, [pc, #208]	; (8002044 <menu+0xe44>)
 8001f74:	f006 ff66 	bl	8008e44 <HAL_GPIO_ReadPin>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d119      	bne.n	8001fb2 <menu+0xdb2>
 8001f7e:	4b32      	ldr	r3, [pc, #200]	; (8002048 <menu+0xe48>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	f083 0301 	eor.w	r3, r3, #1
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d012      	beq.n	8001fb2 <menu+0xdb2>
 8001f8c:	4b39      	ldr	r3, [pc, #228]	; (8002074 <menu+0xe74>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10e      	bne.n	8001fb2 <menu+0xdb2>
			altLimit = altLimit - 1;
 8001f94:	4b33      	ldr	r3, [pc, #204]	; (8002064 <menu+0xe64>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	4b31      	ldr	r3, [pc, #196]	; (8002064 <menu+0xe64>)
 8001f9e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001fa0:	4b30      	ldr	r3, [pc, #192]	; (8002064 <menu+0xe64>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <menu+0xdae>
		   		altLimit = 1;
 8001fa8:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <menu+0xe64>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001fae:	f002 fcaf 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fb2:	2108      	movs	r1, #8
 8001fb4:	4823      	ldr	r0, [pc, #140]	; (8002044 <menu+0xe44>)
 8001fb6:	f006 ff45 	bl	8008e44 <HAL_GPIO_ReadPin>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d12d      	bne.n	800201c <menu+0xe1c>
 8001fc0:	4b21      	ldr	r3, [pc, #132]	; (8002048 <menu+0xe48>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	f083 0301 	eor.w	r3, r3, #1
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d026      	beq.n	800201c <menu+0xe1c>
			eepromData[5] = altLimit;
 8001fce:	4b25      	ldr	r3, [pc, #148]	; (8002064 <menu+0xe64>)
 8001fd0:	781a      	ldrb	r2, [r3, #0]
 8001fd2:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <menu+0xe50>)
 8001fd4:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001fd6:	4b23      	ldr	r3, [pc, #140]	; (8002064 <menu+0xe64>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d110      	bne.n	8002000 <menu+0xe00>
 8001fde:	4b26      	ldr	r3, [pc, #152]	; (8002078 <menu+0xe78>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <menu+0xdee>
 8001fe6:	4b24      	ldr	r3, [pc, #144]	; (8002078 <menu+0xe78>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d108      	bne.n	8002000 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8001fee:	4b22      	ldr	r3, [pc, #136]	; (8002078 <menu+0xe78>)
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001ff4:	4b20      	ldr	r3, [pc, #128]	; (8002078 <menu+0xe78>)
 8001ff6:	781a      	ldrb	r2, [r3, #0]
 8001ff8:	4b15      	ldr	r3, [pc, #84]	; (8002050 <menu+0xe50>)
 8001ffa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001ffe:	e00a      	b.n	8002016 <menu+0xe16>
			} else if(altLimit == 0) {
 8002000:	4b18      	ldr	r3, [pc, #96]	; (8002064 <menu+0xe64>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d106      	bne.n	8002016 <menu+0xe16>
				platformSilindirTipi = 0;
 8002008:	4b1c      	ldr	r3, [pc, #112]	; (800207c <menu+0xe7c>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <menu+0xe7c>)
 8002010:	781a      	ldrb	r2, [r3, #0]
 8002012:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <menu+0xe50>)
 8002014:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <menu+0xe54>)
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 800201c:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <menu+0xe58>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b06      	cmp	r3, #6
 8002022:	f040 80b6 	bne.w	8002192 <menu+0xf92>
		if(dilSecim == 0) {
 8002026:	4b05      	ldr	r3, [pc, #20]	; (800203c <menu+0xe3c>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d12a      	bne.n	8002084 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 800202e:	4a14      	ldr	r2, [pc, #80]	; (8002080 <menu+0xe80>)
 8002030:	2101      	movs	r1, #1
 8002032:	2001      	movs	r0, #1
 8002034:	f005 fbe0 	bl	80077f8 <lcd_print>
 8002038:	e02d      	b.n	8002096 <menu+0xe96>
 800203a:	bf00      	nop
 800203c:	20000221 	.word	0x20000221
 8002040:	0800cfa8 	.word	0x0800cfa8
 8002044:	40010800 	.word	0x40010800
 8002048:	2000022f 	.word	0x2000022f
 800204c:	20000205 	.word	0x20000205
 8002050:	2000012c 	.word	0x2000012c
 8002054:	2000022c 	.word	0x2000022c
 8002058:	20000200 	.word	0x20000200
 800205c:	0800cfbc 	.word	0x0800cfbc
 8002060:	0800cfd0 	.word	0x0800cfd0
 8002064:	20000206 	.word	0x20000206
 8002068:	0800cf34 	.word	0x0800cf34
 800206c:	0800cf48 	.word	0x0800cf48
 8002070:	0800cf94 	.word	0x0800cf94
 8002074:	20000201 	.word	0x20000201
 8002078:	2000020d 	.word	0x2000020d
 800207c:	20000213 	.word	0x20000213
 8002080:	0800cfe4 	.word	0x0800cfe4
		} else if(dilSecim == 1){
 8002084:	4b7a      	ldr	r3, [pc, #488]	; (8002270 <menu+0x1070>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d104      	bne.n	8002096 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800208c:	4a79      	ldr	r2, [pc, #484]	; (8002274 <menu+0x1074>)
 800208e:	2101      	movs	r1, #1
 8002090:	2001      	movs	r0, #1
 8002092:	f005 fbb1 	bl	80077f8 <lcd_print>
		}
		if(basincSalteri == 0){
 8002096:	4b78      	ldr	r3, [pc, #480]	; (8002278 <menu+0x1078>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d113      	bne.n	80020c6 <menu+0xec6>
			if(dilSecim == 0) {
 800209e:	4b74      	ldr	r3, [pc, #464]	; (8002270 <menu+0x1070>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d105      	bne.n	80020b2 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80020a6:	4a75      	ldr	r2, [pc, #468]	; (800227c <menu+0x107c>)
 80020a8:	2101      	movs	r1, #1
 80020aa:	2002      	movs	r0, #2
 80020ac:	f005 fba4 	bl	80077f8 <lcd_print>
 80020b0:	e020      	b.n	80020f4 <menu+0xef4>
			} else if(dilSecim == 1){
 80020b2:	4b6f      	ldr	r3, [pc, #444]	; (8002270 <menu+0x1070>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d11c      	bne.n	80020f4 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 80020ba:	4a71      	ldr	r2, [pc, #452]	; (8002280 <menu+0x1080>)
 80020bc:	2101      	movs	r1, #1
 80020be:	2002      	movs	r0, #2
 80020c0:	f005 fb9a 	bl	80077f8 <lcd_print>
 80020c4:	e016      	b.n	80020f4 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 80020c6:	4b6c      	ldr	r3, [pc, #432]	; (8002278 <menu+0x1078>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d112      	bne.n	80020f4 <menu+0xef4>
			if(dilSecim == 0) {
 80020ce:	4b68      	ldr	r3, [pc, #416]	; (8002270 <menu+0x1070>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 80020d6:	4a6b      	ldr	r2, [pc, #428]	; (8002284 <menu+0x1084>)
 80020d8:	2101      	movs	r1, #1
 80020da:	2002      	movs	r0, #2
 80020dc:	f005 fb8c 	bl	80077f8 <lcd_print>
 80020e0:	e008      	b.n	80020f4 <menu+0xef4>
			} else if(dilSecim == 1) {
 80020e2:	4b63      	ldr	r3, [pc, #396]	; (8002270 <menu+0x1070>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d104      	bne.n	80020f4 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 80020ea:	4a67      	ldr	r2, [pc, #412]	; (8002288 <menu+0x1088>)
 80020ec:	2101      	movs	r1, #1
 80020ee:	2002      	movs	r0, #2
 80020f0:	f005 fb82 	bl	80077f8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80020f4:	2102      	movs	r1, #2
 80020f6:	4865      	ldr	r0, [pc, #404]	; (800228c <menu+0x108c>)
 80020f8:	f006 fea4 	bl	8008e44 <HAL_GPIO_ReadPin>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d115      	bne.n	800212e <menu+0xf2e>
 8002102:	4b63      	ldr	r3, [pc, #396]	; (8002290 <menu+0x1090>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	f083 0301 	eor.w	r3, r3, #1
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00e      	beq.n	800212e <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002110:	4b59      	ldr	r3, [pc, #356]	; (8002278 <menu+0x1078>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	b2da      	uxtb	r2, r3
 8002118:	4b57      	ldr	r3, [pc, #348]	; (8002278 <menu+0x1078>)
 800211a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 800211c:	4b56      	ldr	r3, [pc, #344]	; (8002278 <menu+0x1078>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d902      	bls.n	800212a <menu+0xf2a>
				basincSalteri = 0;
 8002124:	4b54      	ldr	r3, [pc, #336]	; (8002278 <menu+0x1078>)
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800212a:	f002 fbf1 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800212e:	2104      	movs	r1, #4
 8002130:	4856      	ldr	r0, [pc, #344]	; (800228c <menu+0x108c>)
 8002132:	f006 fe87 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002136:	4603      	mov	r3, r0
 8002138:	2b01      	cmp	r3, #1
 800213a:	d115      	bne.n	8002168 <menu+0xf68>
 800213c:	4b54      	ldr	r3, [pc, #336]	; (8002290 <menu+0x1090>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	f083 0301 	eor.w	r3, r3, #1
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00e      	beq.n	8002168 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800214a:	4b4b      	ldr	r3, [pc, #300]	; (8002278 <menu+0x1078>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	3b01      	subs	r3, #1
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4b49      	ldr	r3, [pc, #292]	; (8002278 <menu+0x1078>)
 8002154:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002156:	4b48      	ldr	r3, [pc, #288]	; (8002278 <menu+0x1078>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <menu+0xf64>
		   		basincSalteri = 1;
 800215e:	4b46      	ldr	r3, [pc, #280]	; (8002278 <menu+0x1078>)
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002164:	f002 fbd4 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002168:	2108      	movs	r1, #8
 800216a:	4848      	ldr	r0, [pc, #288]	; (800228c <menu+0x108c>)
 800216c:	f006 fe6a 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002170:	4603      	mov	r3, r0
 8002172:	2b01      	cmp	r3, #1
 8002174:	d10d      	bne.n	8002192 <menu+0xf92>
 8002176:	4b46      	ldr	r3, [pc, #280]	; (8002290 <menu+0x1090>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	f083 0301 	eor.w	r3, r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d006      	beq.n	8002192 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002184:	4b3c      	ldr	r3, [pc, #240]	; (8002278 <menu+0x1078>)
 8002186:	781a      	ldrb	r2, [r3, #0]
 8002188:	4b42      	ldr	r3, [pc, #264]	; (8002294 <menu+0x1094>)
 800218a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800218c:	4b42      	ldr	r3, [pc, #264]	; (8002298 <menu+0x1098>)
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002192:	4b42      	ldr	r3, [pc, #264]	; (800229c <menu+0x109c>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b07      	cmp	r3, #7
 8002198:	f040 80f5 	bne.w	8002386 <menu+0x1186>
		if(dilSecim == 0) {
 800219c:	4b34      	ldr	r3, [pc, #208]	; (8002270 <menu+0x1070>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d105      	bne.n	80021b0 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80021a4:	4a3e      	ldr	r2, [pc, #248]	; (80022a0 <menu+0x10a0>)
 80021a6:	2101      	movs	r1, #1
 80021a8:	2001      	movs	r0, #1
 80021aa:	f005 fb25 	bl	80077f8 <lcd_print>
 80021ae:	e008      	b.n	80021c2 <menu+0xfc2>
		} else if(dilSecim == 1){
 80021b0:	4b2f      	ldr	r3, [pc, #188]	; (8002270 <menu+0x1070>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d104      	bne.n	80021c2 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80021b8:	4a3a      	ldr	r2, [pc, #232]	; (80022a4 <menu+0x10a4>)
 80021ba:	2101      	movs	r1, #1
 80021bc:	2001      	movs	r0, #1
 80021be:	f005 fb1b 	bl	80077f8 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80021c2:	4b39      	ldr	r3, [pc, #228]	; (80022a8 <menu+0x10a8>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d113      	bne.n	80021f2 <menu+0xff2>
			if(dilSecim == 0) {
 80021ca:	4b29      	ldr	r3, [pc, #164]	; (8002270 <menu+0x1070>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d105      	bne.n	80021de <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 80021d2:	4a2a      	ldr	r2, [pc, #168]	; (800227c <menu+0x107c>)
 80021d4:	2101      	movs	r1, #1
 80021d6:	2002      	movs	r0, #2
 80021d8:	f005 fb0e 	bl	80077f8 <lcd_print>
 80021dc:	e079      	b.n	80022d2 <menu+0x10d2>
			} else if(dilSecim == 1){
 80021de:	4b24      	ldr	r3, [pc, #144]	; (8002270 <menu+0x1070>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d175      	bne.n	80022d2 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 80021e6:	4a26      	ldr	r2, [pc, #152]	; (8002280 <menu+0x1080>)
 80021e8:	2101      	movs	r1, #1
 80021ea:	2002      	movs	r0, #2
 80021ec:	f005 fb04 	bl	80077f8 <lcd_print>
 80021f0:	e06f      	b.n	80022d2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80021f2:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <menu+0x10a8>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d113      	bne.n	8002222 <menu+0x1022>
			if(dilSecim == 0) {
 80021fa:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <menu+0x1070>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d105      	bne.n	800220e <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002202:	4a2a      	ldr	r2, [pc, #168]	; (80022ac <menu+0x10ac>)
 8002204:	2101      	movs	r1, #1
 8002206:	2002      	movs	r0, #2
 8002208:	f005 faf6 	bl	80077f8 <lcd_print>
 800220c:	e061      	b.n	80022d2 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800220e:	4b18      	ldr	r3, [pc, #96]	; (8002270 <menu+0x1070>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d15d      	bne.n	80022d2 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 8002216:	4a26      	ldr	r2, [pc, #152]	; (80022b0 <menu+0x10b0>)
 8002218:	2101      	movs	r1, #1
 800221a:	2002      	movs	r0, #2
 800221c:	f005 faec 	bl	80077f8 <lcd_print>
 8002220:	e057      	b.n	80022d2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 8002222:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <menu+0x10a8>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d113      	bne.n	8002252 <menu+0x1052>
			if(dilSecim == 0) {
 800222a:	4b11      	ldr	r3, [pc, #68]	; (8002270 <menu+0x1070>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d105      	bne.n	800223e <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002232:	4a20      	ldr	r2, [pc, #128]	; (80022b4 <menu+0x10b4>)
 8002234:	2101      	movs	r1, #1
 8002236:	2002      	movs	r0, #2
 8002238:	f005 fade 	bl	80077f8 <lcd_print>
 800223c:	e049      	b.n	80022d2 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <menu+0x1070>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d145      	bne.n	80022d2 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 8002246:	4a1c      	ldr	r2, [pc, #112]	; (80022b8 <menu+0x10b8>)
 8002248:	2101      	movs	r1, #1
 800224a:	2002      	movs	r0, #2
 800224c:	f005 fad4 	bl	80077f8 <lcd_print>
 8002250:	e03f      	b.n	80022d2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <menu+0x10a8>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d13b      	bne.n	80022d2 <menu+0x10d2>
			if(dilSecim == 0) {
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <menu+0x1070>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d12e      	bne.n	80022c0 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002262:	4a16      	ldr	r2, [pc, #88]	; (80022bc <menu+0x10bc>)
 8002264:	2101      	movs	r1, #1
 8002266:	2002      	movs	r0, #2
 8002268:	f005 fac6 	bl	80077f8 <lcd_print>
 800226c:	e031      	b.n	80022d2 <menu+0x10d2>
 800226e:	bf00      	nop
 8002270:	20000221 	.word	0x20000221
 8002274:	0800cff4 	.word	0x0800cff4
 8002278:	20000207 	.word	0x20000207
 800227c:	0800cf34 	.word	0x0800cf34
 8002280:	0800cf48 	.word	0x0800cf48
 8002284:	0800cf94 	.word	0x0800cf94
 8002288:	0800cfa8 	.word	0x0800cfa8
 800228c:	40010800 	.word	0x40010800
 8002290:	2000022f 	.word	0x2000022f
 8002294:	2000012c 	.word	0x2000012c
 8002298:	2000022c 	.word	0x2000022c
 800229c:	20000200 	.word	0x20000200
 80022a0:	0800d004 	.word	0x0800d004
 80022a4:	0800d018 	.word	0x0800d018
 80022a8:	20000208 	.word	0x20000208
 80022ac:	0800d02c 	.word	0x0800d02c
 80022b0:	0800d040 	.word	0x0800d040
 80022b4:	0800d054 	.word	0x0800d054
 80022b8:	0800d068 	.word	0x0800d068
 80022bc:	0800d07c 	.word	0x0800d07c
			} else if(dilSecim == 1){
 80022c0:	4b99      	ldr	r3, [pc, #612]	; (8002528 <menu+0x1328>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d104      	bne.n	80022d2 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80022c8:	4a98      	ldr	r2, [pc, #608]	; (800252c <menu+0x132c>)
 80022ca:	2101      	movs	r1, #1
 80022cc:	2002      	movs	r0, #2
 80022ce:	f005 fa93 	bl	80077f8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022d2:	2102      	movs	r1, #2
 80022d4:	4896      	ldr	r0, [pc, #600]	; (8002530 <menu+0x1330>)
 80022d6:	f006 fdb5 	bl	8008e44 <HAL_GPIO_ReadPin>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d115      	bne.n	800230c <menu+0x110c>
 80022e0:	4b94      	ldr	r3, [pc, #592]	; (8002534 <menu+0x1334>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	f083 0301 	eor.w	r3, r3, #1
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00e      	beq.n	800230c <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80022ee:	4b92      	ldr	r3, [pc, #584]	; (8002538 <menu+0x1338>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4b90      	ldr	r3, [pc, #576]	; (8002538 <menu+0x1338>)
 80022f8:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80022fa:	4b8f      	ldr	r3, [pc, #572]	; (8002538 <menu+0x1338>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d902      	bls.n	8002308 <menu+0x1108>
				kapiSecimleri = 0;
 8002302:	4b8d      	ldr	r3, [pc, #564]	; (8002538 <menu+0x1338>)
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002308:	f002 fb02 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800230c:	2104      	movs	r1, #4
 800230e:	4888      	ldr	r0, [pc, #544]	; (8002530 <menu+0x1330>)
 8002310:	f006 fd98 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002314:	4603      	mov	r3, r0
 8002316:	2b01      	cmp	r3, #1
 8002318:	d115      	bne.n	8002346 <menu+0x1146>
 800231a:	4b86      	ldr	r3, [pc, #536]	; (8002534 <menu+0x1334>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	f083 0301 	eor.w	r3, r3, #1
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00e      	beq.n	8002346 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8002328:	4b83      	ldr	r3, [pc, #524]	; (8002538 <menu+0x1338>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	3b01      	subs	r3, #1
 800232e:	b2da      	uxtb	r2, r3
 8002330:	4b81      	ldr	r3, [pc, #516]	; (8002538 <menu+0x1338>)
 8002332:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002334:	4b80      	ldr	r3, [pc, #512]	; (8002538 <menu+0x1338>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b04      	cmp	r3, #4
 800233a:	d902      	bls.n	8002342 <menu+0x1142>
		   		kapiSecimleri = 3;
 800233c:	4b7e      	ldr	r3, [pc, #504]	; (8002538 <menu+0x1338>)
 800233e:	2203      	movs	r2, #3
 8002340:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002342:	f002 fae5 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002346:	2108      	movs	r1, #8
 8002348:	4879      	ldr	r0, [pc, #484]	; (8002530 <menu+0x1330>)
 800234a:	f006 fd7b 	bl	8008e44 <HAL_GPIO_ReadPin>
 800234e:	4603      	mov	r3, r0
 8002350:	2b01      	cmp	r3, #1
 8002352:	d118      	bne.n	8002386 <menu+0x1186>
 8002354:	4b77      	ldr	r3, [pc, #476]	; (8002534 <menu+0x1334>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	f083 0301 	eor.w	r3, r3, #1
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d011      	beq.n	8002386 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002362:	4b75      	ldr	r3, [pc, #468]	; (8002538 <menu+0x1338>)
 8002364:	781a      	ldrb	r2, [r3, #0]
 8002366:	4b75      	ldr	r3, [pc, #468]	; (800253c <menu+0x133c>)
 8002368:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800236a:	4b73      	ldr	r3, [pc, #460]	; (8002538 <menu+0x1338>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d006      	beq.n	8002380 <menu+0x1180>
				altLimit = 1;
 8002372:	4b73      	ldr	r3, [pc, #460]	; (8002540 <menu+0x1340>)
 8002374:	2201      	movs	r2, #1
 8002376:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002378:	4b71      	ldr	r3, [pc, #452]	; (8002540 <menu+0x1340>)
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	4b6f      	ldr	r3, [pc, #444]	; (800253c <menu+0x133c>)
 800237e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002380:	4b70      	ldr	r3, [pc, #448]	; (8002544 <menu+0x1344>)
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002386:	4b70      	ldr	r3, [pc, #448]	; (8002548 <menu+0x1348>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b08      	cmp	r3, #8
 800238c:	f040 8092 	bne.w	80024b4 <menu+0x12b4>
		if(dilSecim == 0) {
 8002390:	4b65      	ldr	r3, [pc, #404]	; (8002528 <menu+0x1328>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d105      	bne.n	80023a4 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002398:	4a6c      	ldr	r2, [pc, #432]	; (800254c <menu+0x134c>)
 800239a:	2101      	movs	r1, #1
 800239c:	2001      	movs	r0, #1
 800239e:	f005 fa2b 	bl	80077f8 <lcd_print>
 80023a2:	e008      	b.n	80023b6 <menu+0x11b6>
		} else if(dilSecim == 1) {
 80023a4:	4b60      	ldr	r3, [pc, #384]	; (8002528 <menu+0x1328>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d104      	bne.n	80023b6 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80023ac:	4a68      	ldr	r2, [pc, #416]	; (8002550 <menu+0x1350>)
 80023ae:	2101      	movs	r1, #1
 80023b0:	2001      	movs	r0, #1
 80023b2:	f005 fa21 	bl	80077f8 <lcd_print>
		}

		if(kapiAcTipi == 0){
 80023b6:	4b67      	ldr	r3, [pc, #412]	; (8002554 <menu+0x1354>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d113      	bne.n	80023e6 <menu+0x11e6>
			if(dilSecim == 0) {
 80023be:	4b5a      	ldr	r3, [pc, #360]	; (8002528 <menu+0x1328>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d105      	bne.n	80023d2 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 80023c6:	4a64      	ldr	r2, [pc, #400]	; (8002558 <menu+0x1358>)
 80023c8:	2101      	movs	r1, #1
 80023ca:	2002      	movs	r0, #2
 80023cc:	f005 fa14 	bl	80077f8 <lcd_print>
 80023d0:	e020      	b.n	8002414 <menu+0x1214>
			} else if(dilSecim == 1) {
 80023d2:	4b55      	ldr	r3, [pc, #340]	; (8002528 <menu+0x1328>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d11c      	bne.n	8002414 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 80023da:	4a60      	ldr	r2, [pc, #384]	; (800255c <menu+0x135c>)
 80023dc:	2101      	movs	r1, #1
 80023de:	2002      	movs	r0, #2
 80023e0:	f005 fa0a 	bl	80077f8 <lcd_print>
 80023e4:	e016      	b.n	8002414 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 80023e6:	4b5b      	ldr	r3, [pc, #364]	; (8002554 <menu+0x1354>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d112      	bne.n	8002414 <menu+0x1214>
			if(dilSecim == 0){
 80023ee:	4b4e      	ldr	r3, [pc, #312]	; (8002528 <menu+0x1328>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d105      	bne.n	8002402 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80023f6:	4a5a      	ldr	r2, [pc, #360]	; (8002560 <menu+0x1360>)
 80023f8:	2101      	movs	r1, #1
 80023fa:	2002      	movs	r0, #2
 80023fc:	f005 f9fc 	bl	80077f8 <lcd_print>
 8002400:	e008      	b.n	8002414 <menu+0x1214>
			} else if(dilSecim == 1){
 8002402:	4b49      	ldr	r3, [pc, #292]	; (8002528 <menu+0x1328>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d104      	bne.n	8002414 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800240a:	4a56      	ldr	r2, [pc, #344]	; (8002564 <menu+0x1364>)
 800240c:	2101      	movs	r1, #1
 800240e:	2002      	movs	r0, #2
 8002410:	f005 f9f2 	bl	80077f8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002414:	2102      	movs	r1, #2
 8002416:	4846      	ldr	r0, [pc, #280]	; (8002530 <menu+0x1330>)
 8002418:	f006 fd14 	bl	8008e44 <HAL_GPIO_ReadPin>
 800241c:	4603      	mov	r3, r0
 800241e:	2b01      	cmp	r3, #1
 8002420:	d115      	bne.n	800244e <menu+0x124e>
 8002422:	4b44      	ldr	r3, [pc, #272]	; (8002534 <menu+0x1334>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	f083 0301 	eor.w	r3, r3, #1
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00e      	beq.n	800244e <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002430:	4b48      	ldr	r3, [pc, #288]	; (8002554 <menu+0x1354>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	3301      	adds	r3, #1
 8002436:	b2da      	uxtb	r2, r3
 8002438:	4b46      	ldr	r3, [pc, #280]	; (8002554 <menu+0x1354>)
 800243a:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800243c:	4b45      	ldr	r3, [pc, #276]	; (8002554 <menu+0x1354>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d902      	bls.n	800244a <menu+0x124a>
				kapiAcTipi = 0;
 8002444:	4b43      	ldr	r3, [pc, #268]	; (8002554 <menu+0x1354>)
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800244a:	f002 fa61 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800244e:	2104      	movs	r1, #4
 8002450:	4837      	ldr	r0, [pc, #220]	; (8002530 <menu+0x1330>)
 8002452:	f006 fcf7 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002456:	4603      	mov	r3, r0
 8002458:	2b01      	cmp	r3, #1
 800245a:	d115      	bne.n	8002488 <menu+0x1288>
 800245c:	4b35      	ldr	r3, [pc, #212]	; (8002534 <menu+0x1334>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	f083 0301 	eor.w	r3, r3, #1
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00e      	beq.n	8002488 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800246a:	4b3a      	ldr	r3, [pc, #232]	; (8002554 <menu+0x1354>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	3b01      	subs	r3, #1
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4b38      	ldr	r3, [pc, #224]	; (8002554 <menu+0x1354>)
 8002474:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002476:	4b37      	ldr	r3, [pc, #220]	; (8002554 <menu+0x1354>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <menu+0x1284>
		   		kapiAcTipi = 1;
 800247e:	4b35      	ldr	r3, [pc, #212]	; (8002554 <menu+0x1354>)
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002484:	f002 fa44 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002488:	2108      	movs	r1, #8
 800248a:	4829      	ldr	r0, [pc, #164]	; (8002530 <menu+0x1330>)
 800248c:	f006 fcda 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002490:	4603      	mov	r3, r0
 8002492:	2b01      	cmp	r3, #1
 8002494:	d10e      	bne.n	80024b4 <menu+0x12b4>
 8002496:	4b27      	ldr	r3, [pc, #156]	; (8002534 <menu+0x1334>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	f083 0301 	eor.w	r3, r3, #1
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d007      	beq.n	80024b4 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80024a4:	4b2b      	ldr	r3, [pc, #172]	; (8002554 <menu+0x1354>)
 80024a6:	781a      	ldrb	r2, [r3, #0]
 80024a8:	4b24      	ldr	r3, [pc, #144]	; (800253c <menu+0x133c>)
 80024aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80024ae:	4b25      	ldr	r3, [pc, #148]	; (8002544 <menu+0x1344>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80024b4:	4b24      	ldr	r3, [pc, #144]	; (8002548 <menu+0x1348>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b09      	cmp	r3, #9
 80024ba:	f040 80b9 	bne.w	8002630 <menu+0x1430>
		if(dilSecim == 0){
 80024be:	4b1a      	ldr	r3, [pc, #104]	; (8002528 <menu+0x1328>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d105      	bne.n	80024d2 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80024c6:	4a28      	ldr	r2, [pc, #160]	; (8002568 <menu+0x1368>)
 80024c8:	2101      	movs	r1, #1
 80024ca:	2001      	movs	r0, #1
 80024cc:	f005 f994 	bl	80077f8 <lcd_print>
 80024d0:	e008      	b.n	80024e4 <menu+0x12e4>
		} else if(dilSecim == 1) {
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <menu+0x1328>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d104      	bne.n	80024e4 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 80024da:	4a24      	ldr	r2, [pc, #144]	; (800256c <menu+0x136c>)
 80024dc:	2101      	movs	r1, #1
 80024de:	2001      	movs	r0, #1
 80024e0:	f005 f98a 	bl	80077f8 <lcd_print>
		}

		if(kapi1Tip == 0) {
 80024e4:	4b22      	ldr	r3, [pc, #136]	; (8002570 <menu+0x1370>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d105      	bne.n	80024f8 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 80024ec:	4a21      	ldr	r2, [pc, #132]	; (8002574 <menu+0x1374>)
 80024ee:	2101      	movs	r1, #1
 80024f0:	2002      	movs	r0, #2
 80024f2:	f005 f981 	bl	80077f8 <lcd_print>
 80024f6:	e04c      	b.n	8002592 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80024f8:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <menu+0x1370>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d13f      	bne.n	8002580 <menu+0x1380>
			if(dilSecim == 0){
 8002500:	4b09      	ldr	r3, [pc, #36]	; (8002528 <menu+0x1328>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d105      	bne.n	8002514 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002508:	4a1b      	ldr	r2, [pc, #108]	; (8002578 <menu+0x1378>)
 800250a:	2101      	movs	r1, #1
 800250c:	2002      	movs	r0, #2
 800250e:	f005 f973 	bl	80077f8 <lcd_print>
 8002512:	e03e      	b.n	8002592 <menu+0x1392>
			} else if(dilSecim == 1) {
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <menu+0x1328>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d13a      	bne.n	8002592 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 800251c:	4a17      	ldr	r2, [pc, #92]	; (800257c <menu+0x137c>)
 800251e:	2101      	movs	r1, #1
 8002520:	2002      	movs	r0, #2
 8002522:	f005 f969 	bl	80077f8 <lcd_print>
 8002526:	e034      	b.n	8002592 <menu+0x1392>
 8002528:	20000221 	.word	0x20000221
 800252c:	0800d090 	.word	0x0800d090
 8002530:	40010800 	.word	0x40010800
 8002534:	2000022f 	.word	0x2000022f
 8002538:	20000208 	.word	0x20000208
 800253c:	2000012c 	.word	0x2000012c
 8002540:	20000206 	.word	0x20000206
 8002544:	2000022c 	.word	0x2000022c
 8002548:	20000200 	.word	0x20000200
 800254c:	0800d0a4 	.word	0x0800d0a4
 8002550:	0800d0b8 	.word	0x0800d0b8
 8002554:	2000020c 	.word	0x2000020c
 8002558:	0800d0cc 	.word	0x0800d0cc
 800255c:	0800d0dc 	.word	0x0800d0dc
 8002560:	0800d0ec 	.word	0x0800d0ec
 8002564:	0800d100 	.word	0x0800d100
 8002568:	0800d114 	.word	0x0800d114
 800256c:	0800d128 	.word	0x0800d128
 8002570:	20000209 	.word	0x20000209
 8002574:	0800d13c 	.word	0x0800d13c
 8002578:	0800d150 	.word	0x0800d150
 800257c:	0800d160 	.word	0x0800d160
			}
		} else if(kapi1Tip == 2) {
 8002580:	4b8a      	ldr	r3, [pc, #552]	; (80027ac <menu+0x15ac>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d104      	bne.n	8002592 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002588:	4a89      	ldr	r2, [pc, #548]	; (80027b0 <menu+0x15b0>)
 800258a:	2101      	movs	r1, #1
 800258c:	2002      	movs	r0, #2
 800258e:	f005 f933 	bl	80077f8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002592:	2102      	movs	r1, #2
 8002594:	4887      	ldr	r0, [pc, #540]	; (80027b4 <menu+0x15b4>)
 8002596:	f006 fc55 	bl	8008e44 <HAL_GPIO_ReadPin>
 800259a:	4603      	mov	r3, r0
 800259c:	2b01      	cmp	r3, #1
 800259e:	d115      	bne.n	80025cc <menu+0x13cc>
 80025a0:	4b85      	ldr	r3, [pc, #532]	; (80027b8 <menu+0x15b8>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	f083 0301 	eor.w	r3, r3, #1
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00e      	beq.n	80025cc <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 80025ae:	4b7f      	ldr	r3, [pc, #508]	; (80027ac <menu+0x15ac>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	3301      	adds	r3, #1
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4b7d      	ldr	r3, [pc, #500]	; (80027ac <menu+0x15ac>)
 80025b8:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80025ba:	4b7c      	ldr	r3, [pc, #496]	; (80027ac <menu+0x15ac>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d902      	bls.n	80025c8 <menu+0x13c8>
				kapi1Tip = 0;
 80025c2:	4b7a      	ldr	r3, [pc, #488]	; (80027ac <menu+0x15ac>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025c8:	f002 f9a2 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025cc:	2104      	movs	r1, #4
 80025ce:	4879      	ldr	r0, [pc, #484]	; (80027b4 <menu+0x15b4>)
 80025d0:	f006 fc38 	bl	8008e44 <HAL_GPIO_ReadPin>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d115      	bne.n	8002606 <menu+0x1406>
 80025da:	4b77      	ldr	r3, [pc, #476]	; (80027b8 <menu+0x15b8>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	f083 0301 	eor.w	r3, r3, #1
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00e      	beq.n	8002606 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 80025e8:	4b70      	ldr	r3, [pc, #448]	; (80027ac <menu+0x15ac>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	4b6e      	ldr	r3, [pc, #440]	; (80027ac <menu+0x15ac>)
 80025f2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80025f4:	4b6d      	ldr	r3, [pc, #436]	; (80027ac <menu+0x15ac>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d902      	bls.n	8002602 <menu+0x1402>
		   		kapi1Tip = 2;
 80025fc:	4b6b      	ldr	r3, [pc, #428]	; (80027ac <menu+0x15ac>)
 80025fe:	2202      	movs	r2, #2
 8002600:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002602:	f002 f985 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002606:	2108      	movs	r1, #8
 8002608:	486a      	ldr	r0, [pc, #424]	; (80027b4 <menu+0x15b4>)
 800260a:	f006 fc1b 	bl	8008e44 <HAL_GPIO_ReadPin>
 800260e:	4603      	mov	r3, r0
 8002610:	2b01      	cmp	r3, #1
 8002612:	d10d      	bne.n	8002630 <menu+0x1430>
 8002614:	4b68      	ldr	r3, [pc, #416]	; (80027b8 <menu+0x15b8>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	f083 0301 	eor.w	r3, r3, #1
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d006      	beq.n	8002630 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8002622:	4b62      	ldr	r3, [pc, #392]	; (80027ac <menu+0x15ac>)
 8002624:	781a      	ldrb	r2, [r3, #0]
 8002626:	4b65      	ldr	r3, [pc, #404]	; (80027bc <menu+0x15bc>)
 8002628:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800262a:	4b65      	ldr	r3, [pc, #404]	; (80027c0 <menu+0x15c0>)
 800262c:	2201      	movs	r2, #1
 800262e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002630:	4b64      	ldr	r3, [pc, #400]	; (80027c4 <menu+0x15c4>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b0a      	cmp	r3, #10
 8002636:	d17f      	bne.n	8002738 <menu+0x1538>
		if(dilSecim == 0) {
 8002638:	4b63      	ldr	r3, [pc, #396]	; (80027c8 <menu+0x15c8>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002640:	4a62      	ldr	r2, [pc, #392]	; (80027cc <menu+0x15cc>)
 8002642:	2101      	movs	r1, #1
 8002644:	2001      	movs	r0, #1
 8002646:	f005 f8d7 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800264a:	4a61      	ldr	r2, [pc, #388]	; (80027d0 <menu+0x15d0>)
 800264c:	2101      	movs	r1, #1
 800264e:	2002      	movs	r0, #2
 8002650:	f005 f8d2 	bl	80077f8 <lcd_print>
 8002654:	e00d      	b.n	8002672 <menu+0x1472>
		} else if(dilSecim == 1) {
 8002656:	4b5c      	ldr	r3, [pc, #368]	; (80027c8 <menu+0x15c8>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d109      	bne.n	8002672 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800265e:	4a5d      	ldr	r2, [pc, #372]	; (80027d4 <menu+0x15d4>)
 8002660:	2101      	movs	r1, #1
 8002662:	2001      	movs	r0, #1
 8002664:	f005 f8c8 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002668:	4a5b      	ldr	r2, [pc, #364]	; (80027d8 <menu+0x15d8>)
 800266a:	2101      	movs	r1, #1
 800266c:	2002      	movs	r0, #2
 800266e:	f005 f8c3 	bl	80077f8 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002672:	4b5a      	ldr	r3, [pc, #360]	; (80027dc <menu+0x15dc>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	220a      	movs	r2, #10
 8002678:	4959      	ldr	r1, [pc, #356]	; (80027e0 <menu+0x15e0>)
 800267a:	4618      	mov	r0, r3
 800267c:	f009 fc6a 	bl	800bf54 <itoa>
		lcd_print(2,16,snum);
 8002680:	4a57      	ldr	r2, [pc, #348]	; (80027e0 <menu+0x15e0>)
 8002682:	2110      	movs	r1, #16
 8002684:	2002      	movs	r0, #2
 8002686:	f005 f8b7 	bl	80077f8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800268a:	2102      	movs	r1, #2
 800268c:	4849      	ldr	r0, [pc, #292]	; (80027b4 <menu+0x15b4>)
 800268e:	f006 fbd9 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002692:	4603      	mov	r3, r0
 8002694:	2b01      	cmp	r3, #1
 8002696:	d119      	bne.n	80026cc <menu+0x14cc>
 8002698:	4b47      	ldr	r3, [pc, #284]	; (80027b8 <menu+0x15b8>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	f083 0301 	eor.w	r3, r3, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d012      	beq.n	80026cc <menu+0x14cc>
 80026a6:	4b41      	ldr	r3, [pc, #260]	; (80027ac <menu+0x15ac>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10e      	bne.n	80026cc <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 80026ae:	4b4b      	ldr	r3, [pc, #300]	; (80027dc <menu+0x15dc>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	3301      	adds	r3, #1
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4b49      	ldr	r3, [pc, #292]	; (80027dc <menu+0x15dc>)
 80026b8:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80026ba:	4b48      	ldr	r3, [pc, #288]	; (80027dc <menu+0x15dc>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b05      	cmp	r3, #5
 80026c0:	d902      	bls.n	80026c8 <menu+0x14c8>
				kapi1AcSure = 0;
 80026c2:	4b46      	ldr	r3, [pc, #280]	; (80027dc <menu+0x15dc>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026c8:	f002 f922 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80026cc:	2104      	movs	r1, #4
 80026ce:	4839      	ldr	r0, [pc, #228]	; (80027b4 <menu+0x15b4>)
 80026d0:	f006 fbb8 	bl	8008e44 <HAL_GPIO_ReadPin>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d119      	bne.n	800270e <menu+0x150e>
 80026da:	4b37      	ldr	r3, [pc, #220]	; (80027b8 <menu+0x15b8>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	f083 0301 	eor.w	r3, r3, #1
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d012      	beq.n	800270e <menu+0x150e>
 80026e8:	4b30      	ldr	r3, [pc, #192]	; (80027ac <menu+0x15ac>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10e      	bne.n	800270e <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 80026f0:	4b3a      	ldr	r3, [pc, #232]	; (80027dc <menu+0x15dc>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	4b38      	ldr	r3, [pc, #224]	; (80027dc <menu+0x15dc>)
 80026fa:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80026fc:	4b37      	ldr	r3, [pc, #220]	; (80027dc <menu+0x15dc>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b06      	cmp	r3, #6
 8002702:	d902      	bls.n	800270a <menu+0x150a>
		   		kapi1AcSure = 5;
 8002704:	4b35      	ldr	r3, [pc, #212]	; (80027dc <menu+0x15dc>)
 8002706:	2205      	movs	r2, #5
 8002708:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800270a:	f002 f901 	bl	8004910 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800270e:	2108      	movs	r1, #8
 8002710:	4828      	ldr	r0, [pc, #160]	; (80027b4 <menu+0x15b4>)
 8002712:	f006 fb97 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002716:	4603      	mov	r3, r0
 8002718:	2b01      	cmp	r3, #1
 800271a:	d10d      	bne.n	8002738 <menu+0x1538>
 800271c:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <menu+0x15b8>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	f083 0301 	eor.w	r3, r3, #1
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d006      	beq.n	8002738 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 800272a:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <menu+0x15dc>)
 800272c:	781a      	ldrb	r2, [r3, #0]
 800272e:	4b23      	ldr	r3, [pc, #140]	; (80027bc <menu+0x15bc>)
 8002730:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002732:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <menu+0x15c0>)
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002738:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <menu+0x15c4>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b0b      	cmp	r3, #11
 800273e:	f040 80b5 	bne.w	80028ac <menu+0x16ac>
		if(dilSecim == 0) {
 8002742:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <menu+0x15c8>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d105      	bne.n	8002756 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 800274a:	4a26      	ldr	r2, [pc, #152]	; (80027e4 <menu+0x15e4>)
 800274c:	2101      	movs	r1, #1
 800274e:	2001      	movs	r0, #1
 8002750:	f005 f852 	bl	80077f8 <lcd_print>
 8002754:	e008      	b.n	8002768 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002756:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <menu+0x15c8>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d104      	bne.n	8002768 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 800275e:	4a22      	ldr	r2, [pc, #136]	; (80027e8 <menu+0x15e8>)
 8002760:	2101      	movs	r1, #1
 8002762:	2001      	movs	r0, #1
 8002764:	f005 f848 	bl	80077f8 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002768:	4b20      	ldr	r3, [pc, #128]	; (80027ec <menu+0x15ec>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d105      	bne.n	800277c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002770:	4a1f      	ldr	r2, [pc, #124]	; (80027f0 <menu+0x15f0>)
 8002772:	2101      	movs	r1, #1
 8002774:	2002      	movs	r0, #2
 8002776:	f005 f83f 	bl	80077f8 <lcd_print>
 800277a:	e048      	b.n	800280e <menu+0x160e>
		} else if(kapi2Tip == 1) {
 800277c:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <menu+0x15ec>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d13b      	bne.n	80027fc <menu+0x15fc>
			if(dilSecim == 0) {
 8002784:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <menu+0x15c8>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d105      	bne.n	8002798 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 800278c:	4a19      	ldr	r2, [pc, #100]	; (80027f4 <menu+0x15f4>)
 800278e:	2101      	movs	r1, #1
 8002790:	2002      	movs	r0, #2
 8002792:	f005 f831 	bl	80077f8 <lcd_print>
 8002796:	e03a      	b.n	800280e <menu+0x160e>
			} else if(dilSecim == 1) {
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <menu+0x15c8>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d136      	bne.n	800280e <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 80027a0:	4a15      	ldr	r2, [pc, #84]	; (80027f8 <menu+0x15f8>)
 80027a2:	2101      	movs	r1, #1
 80027a4:	2002      	movs	r0, #2
 80027a6:	f005 f827 	bl	80077f8 <lcd_print>
 80027aa:	e030      	b.n	800280e <menu+0x160e>
 80027ac:	20000209 	.word	0x20000209
 80027b0:	0800d174 	.word	0x0800d174
 80027b4:	40010800 	.word	0x40010800
 80027b8:	2000022f 	.word	0x2000022f
 80027bc:	2000012c 	.word	0x2000012c
 80027c0:	2000022c 	.word	0x2000022c
 80027c4:	20000200 	.word	0x20000200
 80027c8:	20000221 	.word	0x20000221
 80027cc:	0800d184 	.word	0x0800d184
 80027d0:	0800d198 	.word	0x0800d198
 80027d4:	0800d1a8 	.word	0x0800d1a8
 80027d8:	0800d1bc 	.word	0x0800d1bc
 80027dc:	20000219 	.word	0x20000219
 80027e0:	2000019c 	.word	0x2000019c
 80027e4:	0800d1cc 	.word	0x0800d1cc
 80027e8:	0800d1e0 	.word	0x0800d1e0
 80027ec:	2000020a 	.word	0x2000020a
 80027f0:	0800d13c 	.word	0x0800d13c
 80027f4:	0800d150 	.word	0x0800d150
 80027f8:	0800d160 	.word	0x0800d160
			}
		} else if(kapi2Tip == 2) {
 80027fc:	4b8a      	ldr	r3, [pc, #552]	; (8002a28 <menu+0x1828>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d104      	bne.n	800280e <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002804:	4a89      	ldr	r2, [pc, #548]	; (8002a2c <menu+0x182c>)
 8002806:	2101      	movs	r1, #1
 8002808:	2002      	movs	r0, #2
 800280a:	f004 fff5 	bl	80077f8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800280e:	2102      	movs	r1, #2
 8002810:	4887      	ldr	r0, [pc, #540]	; (8002a30 <menu+0x1830>)
 8002812:	f006 fb17 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002816:	4603      	mov	r3, r0
 8002818:	2b01      	cmp	r3, #1
 800281a:	d115      	bne.n	8002848 <menu+0x1648>
 800281c:	4b85      	ldr	r3, [pc, #532]	; (8002a34 <menu+0x1834>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	f083 0301 	eor.w	r3, r3, #1
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00e      	beq.n	8002848 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 800282a:	4b7f      	ldr	r3, [pc, #508]	; (8002a28 <menu+0x1828>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	3301      	adds	r3, #1
 8002830:	b2da      	uxtb	r2, r3
 8002832:	4b7d      	ldr	r3, [pc, #500]	; (8002a28 <menu+0x1828>)
 8002834:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002836:	4b7c      	ldr	r3, [pc, #496]	; (8002a28 <menu+0x1828>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d902      	bls.n	8002844 <menu+0x1644>
				kapi2Tip = 0;
 800283e:	4b7a      	ldr	r3, [pc, #488]	; (8002a28 <menu+0x1828>)
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002844:	f002 f864 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002848:	2104      	movs	r1, #4
 800284a:	4879      	ldr	r0, [pc, #484]	; (8002a30 <menu+0x1830>)
 800284c:	f006 fafa 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002850:	4603      	mov	r3, r0
 8002852:	2b01      	cmp	r3, #1
 8002854:	d115      	bne.n	8002882 <menu+0x1682>
 8002856:	4b77      	ldr	r3, [pc, #476]	; (8002a34 <menu+0x1834>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	f083 0301 	eor.w	r3, r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00e      	beq.n	8002882 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002864:	4b70      	ldr	r3, [pc, #448]	; (8002a28 <menu+0x1828>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	3b01      	subs	r3, #1
 800286a:	b2da      	uxtb	r2, r3
 800286c:	4b6e      	ldr	r3, [pc, #440]	; (8002a28 <menu+0x1828>)
 800286e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002870:	4b6d      	ldr	r3, [pc, #436]	; (8002a28 <menu+0x1828>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b03      	cmp	r3, #3
 8002876:	d902      	bls.n	800287e <menu+0x167e>
		   		kapi2Tip = 2;
 8002878:	4b6b      	ldr	r3, [pc, #428]	; (8002a28 <menu+0x1828>)
 800287a:	2202      	movs	r2, #2
 800287c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800287e:	f002 f847 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002882:	2108      	movs	r1, #8
 8002884:	486a      	ldr	r0, [pc, #424]	; (8002a30 <menu+0x1830>)
 8002886:	f006 fadd 	bl	8008e44 <HAL_GPIO_ReadPin>
 800288a:	4603      	mov	r3, r0
 800288c:	2b01      	cmp	r3, #1
 800288e:	d10d      	bne.n	80028ac <menu+0x16ac>
 8002890:	4b68      	ldr	r3, [pc, #416]	; (8002a34 <menu+0x1834>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	f083 0301 	eor.w	r3, r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d006      	beq.n	80028ac <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 800289e:	4b62      	ldr	r3, [pc, #392]	; (8002a28 <menu+0x1828>)
 80028a0:	781a      	ldrb	r2, [r3, #0]
 80028a2:	4b65      	ldr	r3, [pc, #404]	; (8002a38 <menu+0x1838>)
 80028a4:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80028a6:	4b65      	ldr	r3, [pc, #404]	; (8002a3c <menu+0x183c>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80028ac:	4b64      	ldr	r3, [pc, #400]	; (8002a40 <menu+0x1840>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b0c      	cmp	r3, #12
 80028b2:	d17f      	bne.n	80029b4 <menu+0x17b4>
		if(dilSecim == 0) {
 80028b4:	4b63      	ldr	r3, [pc, #396]	; (8002a44 <menu+0x1844>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10a      	bne.n	80028d2 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 80028bc:	4a62      	ldr	r2, [pc, #392]	; (8002a48 <menu+0x1848>)
 80028be:	2101      	movs	r1, #1
 80028c0:	2001      	movs	r0, #1
 80028c2:	f004 ff99 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80028c6:	4a61      	ldr	r2, [pc, #388]	; (8002a4c <menu+0x184c>)
 80028c8:	2101      	movs	r1, #1
 80028ca:	2002      	movs	r0, #2
 80028cc:	f004 ff94 	bl	80077f8 <lcd_print>
 80028d0:	e00d      	b.n	80028ee <menu+0x16ee>
		} else if(dilSecim == 1) {
 80028d2:	4b5c      	ldr	r3, [pc, #368]	; (8002a44 <menu+0x1844>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d109      	bne.n	80028ee <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 80028da:	4a5d      	ldr	r2, [pc, #372]	; (8002a50 <menu+0x1850>)
 80028dc:	2101      	movs	r1, #1
 80028de:	2001      	movs	r0, #1
 80028e0:	f004 ff8a 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80028e4:	4a5b      	ldr	r2, [pc, #364]	; (8002a54 <menu+0x1854>)
 80028e6:	2101      	movs	r1, #1
 80028e8:	2002      	movs	r0, #2
 80028ea:	f004 ff85 	bl	80077f8 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 80028ee:	4b5a      	ldr	r3, [pc, #360]	; (8002a58 <menu+0x1858>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	220a      	movs	r2, #10
 80028f4:	4959      	ldr	r1, [pc, #356]	; (8002a5c <menu+0x185c>)
 80028f6:	4618      	mov	r0, r3
 80028f8:	f009 fb2c 	bl	800bf54 <itoa>
		lcd_print(2,16,snum);
 80028fc:	4a57      	ldr	r2, [pc, #348]	; (8002a5c <menu+0x185c>)
 80028fe:	2110      	movs	r1, #16
 8002900:	2002      	movs	r0, #2
 8002902:	f004 ff79 	bl	80077f8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002906:	2102      	movs	r1, #2
 8002908:	4849      	ldr	r0, [pc, #292]	; (8002a30 <menu+0x1830>)
 800290a:	f006 fa9b 	bl	8008e44 <HAL_GPIO_ReadPin>
 800290e:	4603      	mov	r3, r0
 8002910:	2b01      	cmp	r3, #1
 8002912:	d119      	bne.n	8002948 <menu+0x1748>
 8002914:	4b47      	ldr	r3, [pc, #284]	; (8002a34 <menu+0x1834>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	f083 0301 	eor.w	r3, r3, #1
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d012      	beq.n	8002948 <menu+0x1748>
 8002922:	4b41      	ldr	r3, [pc, #260]	; (8002a28 <menu+0x1828>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10e      	bne.n	8002948 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 800292a:	4b4b      	ldr	r3, [pc, #300]	; (8002a58 <menu+0x1858>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	3301      	adds	r3, #1
 8002930:	b2da      	uxtb	r2, r3
 8002932:	4b49      	ldr	r3, [pc, #292]	; (8002a58 <menu+0x1858>)
 8002934:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002936:	4b48      	ldr	r3, [pc, #288]	; (8002a58 <menu+0x1858>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b05      	cmp	r3, #5
 800293c:	d902      	bls.n	8002944 <menu+0x1744>
				kapi2AcSure = 0;
 800293e:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <menu+0x1858>)
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002944:	f001 ffe4 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002948:	2104      	movs	r1, #4
 800294a:	4839      	ldr	r0, [pc, #228]	; (8002a30 <menu+0x1830>)
 800294c:	f006 fa7a 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002950:	4603      	mov	r3, r0
 8002952:	2b01      	cmp	r3, #1
 8002954:	d119      	bne.n	800298a <menu+0x178a>
 8002956:	4b37      	ldr	r3, [pc, #220]	; (8002a34 <menu+0x1834>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	f083 0301 	eor.w	r3, r3, #1
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d012      	beq.n	800298a <menu+0x178a>
 8002964:	4b30      	ldr	r3, [pc, #192]	; (8002a28 <menu+0x1828>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10e      	bne.n	800298a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 800296c:	4b3a      	ldr	r3, [pc, #232]	; (8002a58 <menu+0x1858>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	3b01      	subs	r3, #1
 8002972:	b2da      	uxtb	r2, r3
 8002974:	4b38      	ldr	r3, [pc, #224]	; (8002a58 <menu+0x1858>)
 8002976:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002978:	4b37      	ldr	r3, [pc, #220]	; (8002a58 <menu+0x1858>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b06      	cmp	r3, #6
 800297e:	d902      	bls.n	8002986 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002980:	4b35      	ldr	r3, [pc, #212]	; (8002a58 <menu+0x1858>)
 8002982:	2205      	movs	r2, #5
 8002984:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002986:	f001 ffc3 	bl	8004910 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800298a:	2108      	movs	r1, #8
 800298c:	4828      	ldr	r0, [pc, #160]	; (8002a30 <menu+0x1830>)
 800298e:	f006 fa59 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002992:	4603      	mov	r3, r0
 8002994:	2b01      	cmp	r3, #1
 8002996:	d10d      	bne.n	80029b4 <menu+0x17b4>
 8002998:	4b26      	ldr	r3, [pc, #152]	; (8002a34 <menu+0x1834>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	f083 0301 	eor.w	r3, r3, #1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d006      	beq.n	80029b4 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 80029a6:	4b2c      	ldr	r3, [pc, #176]	; (8002a58 <menu+0x1858>)
 80029a8:	781a      	ldrb	r2, [r3, #0]
 80029aa:	4b23      	ldr	r3, [pc, #140]	; (8002a38 <menu+0x1838>)
 80029ac:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80029ae:	4b23      	ldr	r3, [pc, #140]	; (8002a3c <menu+0x183c>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80029b4:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <menu+0x1840>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b0d      	cmp	r3, #13
 80029ba:	f040 80b5 	bne.w	8002b28 <menu+0x1928>
		if(dilSecim == 0) {
 80029be:	4b21      	ldr	r3, [pc, #132]	; (8002a44 <menu+0x1844>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d105      	bne.n	80029d2 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 80029c6:	4a26      	ldr	r2, [pc, #152]	; (8002a60 <menu+0x1860>)
 80029c8:	2101      	movs	r1, #1
 80029ca:	2001      	movs	r0, #1
 80029cc:	f004 ff14 	bl	80077f8 <lcd_print>
 80029d0:	e008      	b.n	80029e4 <menu+0x17e4>
		} else if(dilSecim == 1){
 80029d2:	4b1c      	ldr	r3, [pc, #112]	; (8002a44 <menu+0x1844>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d104      	bne.n	80029e4 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 80029da:	4a22      	ldr	r2, [pc, #136]	; (8002a64 <menu+0x1864>)
 80029dc:	2101      	movs	r1, #1
 80029de:	2001      	movs	r0, #1
 80029e0:	f004 ff0a 	bl	80077f8 <lcd_print>
		}

		if(kapitablaTip == 0) {
 80029e4:	4b20      	ldr	r3, [pc, #128]	; (8002a68 <menu+0x1868>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d105      	bne.n	80029f8 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 80029ec:	4a1f      	ldr	r2, [pc, #124]	; (8002a6c <menu+0x186c>)
 80029ee:	2101      	movs	r1, #1
 80029f0:	2002      	movs	r0, #2
 80029f2:	f004 ff01 	bl	80077f8 <lcd_print>
 80029f6:	e048      	b.n	8002a8a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <menu+0x1868>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d13b      	bne.n	8002a78 <menu+0x1878>
			if(dilSecim == 0) {
 8002a00:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <menu+0x1844>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d105      	bne.n	8002a14 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002a08:	4a19      	ldr	r2, [pc, #100]	; (8002a70 <menu+0x1870>)
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	2002      	movs	r0, #2
 8002a0e:	f004 fef3 	bl	80077f8 <lcd_print>
 8002a12:	e03a      	b.n	8002a8a <menu+0x188a>
			} else if(dilSecim == 1) {
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <menu+0x1844>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d136      	bne.n	8002a8a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002a1c:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <menu+0x1874>)
 8002a1e:	2101      	movs	r1, #1
 8002a20:	2002      	movs	r0, #2
 8002a22:	f004 fee9 	bl	80077f8 <lcd_print>
 8002a26:	e030      	b.n	8002a8a <menu+0x188a>
 8002a28:	2000020a 	.word	0x2000020a
 8002a2c:	0800d174 	.word	0x0800d174
 8002a30:	40010800 	.word	0x40010800
 8002a34:	2000022f 	.word	0x2000022f
 8002a38:	2000012c 	.word	0x2000012c
 8002a3c:	2000022c 	.word	0x2000022c
 8002a40:	20000200 	.word	0x20000200
 8002a44:	20000221 	.word	0x20000221
 8002a48:	0800d1f4 	.word	0x0800d1f4
 8002a4c:	0800d198 	.word	0x0800d198
 8002a50:	0800d208 	.word	0x0800d208
 8002a54:	0800d1bc 	.word	0x0800d1bc
 8002a58:	2000021a 	.word	0x2000021a
 8002a5c:	2000019c 	.word	0x2000019c
 8002a60:	0800d21c 	.word	0x0800d21c
 8002a64:	0800d230 	.word	0x0800d230
 8002a68:	2000020b 	.word	0x2000020b
 8002a6c:	0800d13c 	.word	0x0800d13c
 8002a70:	0800d150 	.word	0x0800d150
 8002a74:	0800d160 	.word	0x0800d160
			}
		} else if(kapitablaTip == 2) {
 8002a78:	4b5b      	ldr	r3, [pc, #364]	; (8002be8 <menu+0x19e8>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d104      	bne.n	8002a8a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002a80:	4a5a      	ldr	r2, [pc, #360]	; (8002bec <menu+0x19ec>)
 8002a82:	2101      	movs	r1, #1
 8002a84:	2002      	movs	r0, #2
 8002a86:	f004 feb7 	bl	80077f8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	4858      	ldr	r0, [pc, #352]	; (8002bf0 <menu+0x19f0>)
 8002a8e:	f006 f9d9 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d115      	bne.n	8002ac4 <menu+0x18c4>
 8002a98:	4b56      	ldr	r3, [pc, #344]	; (8002bf4 <menu+0x19f4>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	f083 0301 	eor.w	r3, r3, #1
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00e      	beq.n	8002ac4 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002aa6:	4b50      	ldr	r3, [pc, #320]	; (8002be8 <menu+0x19e8>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	4b4e      	ldr	r3, [pc, #312]	; (8002be8 <menu+0x19e8>)
 8002ab0:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002ab2:	4b4d      	ldr	r3, [pc, #308]	; (8002be8 <menu+0x19e8>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d902      	bls.n	8002ac0 <menu+0x18c0>
				kapitablaTip = 0;
 8002aba:	4b4b      	ldr	r3, [pc, #300]	; (8002be8 <menu+0x19e8>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ac0:	f001 ff26 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ac4:	2104      	movs	r1, #4
 8002ac6:	484a      	ldr	r0, [pc, #296]	; (8002bf0 <menu+0x19f0>)
 8002ac8:	f006 f9bc 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d115      	bne.n	8002afe <menu+0x18fe>
 8002ad2:	4b48      	ldr	r3, [pc, #288]	; (8002bf4 <menu+0x19f4>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	f083 0301 	eor.w	r3, r3, #1
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00e      	beq.n	8002afe <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002ae0:	4b41      	ldr	r3, [pc, #260]	; (8002be8 <menu+0x19e8>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	4b3f      	ldr	r3, [pc, #252]	; (8002be8 <menu+0x19e8>)
 8002aea:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002aec:	4b3e      	ldr	r3, [pc, #248]	; (8002be8 <menu+0x19e8>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d902      	bls.n	8002afa <menu+0x18fa>
		   		kapitablaTip = 2;
 8002af4:	4b3c      	ldr	r3, [pc, #240]	; (8002be8 <menu+0x19e8>)
 8002af6:	2202      	movs	r2, #2
 8002af8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002afa:	f001 ff09 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002afe:	2108      	movs	r1, #8
 8002b00:	483b      	ldr	r0, [pc, #236]	; (8002bf0 <menu+0x19f0>)
 8002b02:	f006 f99f 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d10d      	bne.n	8002b28 <menu+0x1928>
 8002b0c:	4b39      	ldr	r3, [pc, #228]	; (8002bf4 <menu+0x19f4>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	f083 0301 	eor.w	r3, r3, #1
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d006      	beq.n	8002b28 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002b1a:	4b33      	ldr	r3, [pc, #204]	; (8002be8 <menu+0x19e8>)
 8002b1c:	781a      	ldrb	r2, [r3, #0]
 8002b1e:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <menu+0x19f8>)
 8002b20:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002b22:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <menu+0x19fc>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002b28:	4b35      	ldr	r3, [pc, #212]	; (8002c00 <menu+0x1a00>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b0e      	cmp	r3, #14
 8002b2e:	f040 80f2 	bne.w	8002d16 <menu+0x1b16>
		if(dilSecim == 0) {
 8002b32:	4b34      	ldr	r3, [pc, #208]	; (8002c04 <menu+0x1a04>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d105      	bne.n	8002b46 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002b3a:	4a33      	ldr	r2, [pc, #204]	; (8002c08 <menu+0x1a08>)
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	2001      	movs	r0, #1
 8002b40:	f004 fe5a 	bl	80077f8 <lcd_print>
 8002b44:	e008      	b.n	8002b58 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002b46:	4b2f      	ldr	r3, [pc, #188]	; (8002c04 <menu+0x1a04>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d104      	bne.n	8002b58 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002b4e:	4a2f      	ldr	r2, [pc, #188]	; (8002c0c <menu+0x1a0c>)
 8002b50:	2101      	movs	r1, #1
 8002b52:	2001      	movs	r0, #1
 8002b54:	f004 fe50 	bl	80077f8 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002b58:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <menu+0x1a10>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d113      	bne.n	8002b88 <menu+0x1988>
			if(dilSecim == 0){
 8002b60:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <menu+0x1a04>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d105      	bne.n	8002b74 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002b68:	4a2a      	ldr	r2, [pc, #168]	; (8002c14 <menu+0x1a14>)
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	2002      	movs	r0, #2
 8002b6e:	f004 fe43 	bl	80077f8 <lcd_print>
 8002b72:	e071      	b.n	8002c58 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002b74:	4b23      	ldr	r3, [pc, #140]	; (8002c04 <menu+0x1a04>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d16d      	bne.n	8002c58 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002b7c:	4a26      	ldr	r2, [pc, #152]	; (8002c18 <menu+0x1a18>)
 8002b7e:	2101      	movs	r1, #1
 8002b80:	2002      	movs	r0, #2
 8002b82:	f004 fe39 	bl	80077f8 <lcd_print>
 8002b86:	e067      	b.n	8002c58 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002b88:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <menu+0x1a10>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d112      	bne.n	8002bb6 <menu+0x19b6>
			if(dilSecim == 0){
 8002b90:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <menu+0x1a04>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d104      	bne.n	8002ba2 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002b98:	4a20      	ldr	r2, [pc, #128]	; (8002c1c <menu+0x1a1c>)
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	2002      	movs	r0, #2
 8002b9e:	f004 fe2b 	bl	80077f8 <lcd_print>
			}
			if(dilSecim == 1){
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <menu+0x1a04>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d156      	bne.n	8002c58 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002baa:	4a1d      	ldr	r2, [pc, #116]	; (8002c20 <menu+0x1a20>)
 8002bac:	2101      	movs	r1, #1
 8002bae:	2002      	movs	r0, #2
 8002bb0:	f004 fe22 	bl	80077f8 <lcd_print>
 8002bb4:	e050      	b.n	8002c58 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002bb6:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <menu+0x1a10>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d136      	bne.n	8002c2c <menu+0x1a2c>
			if(dilSecim == 0){
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <menu+0x1a04>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d105      	bne.n	8002bd2 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002bc6:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <menu+0x1a24>)
 8002bc8:	2101      	movs	r1, #1
 8002bca:	2002      	movs	r0, #2
 8002bcc:	f004 fe14 	bl	80077f8 <lcd_print>
 8002bd0:	e042      	b.n	8002c58 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002bd2:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <menu+0x1a04>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d13e      	bne.n	8002c58 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002bda:	4a13      	ldr	r2, [pc, #76]	; (8002c28 <menu+0x1a28>)
 8002bdc:	2101      	movs	r1, #1
 8002bde:	2002      	movs	r0, #2
 8002be0:	f004 fe0a 	bl	80077f8 <lcd_print>
 8002be4:	e038      	b.n	8002c58 <menu+0x1a58>
 8002be6:	bf00      	nop
 8002be8:	2000020b 	.word	0x2000020b
 8002bec:	0800d174 	.word	0x0800d174
 8002bf0:	40010800 	.word	0x40010800
 8002bf4:	2000022f 	.word	0x2000022f
 8002bf8:	2000012c 	.word	0x2000012c
 8002bfc:	2000022c 	.word	0x2000022c
 8002c00:	20000200 	.word	0x20000200
 8002c04:	20000221 	.word	0x20000221
 8002c08:	0800d244 	.word	0x0800d244
 8002c0c:	0800d258 	.word	0x0800d258
 8002c10:	2000020d 	.word	0x2000020d
 8002c14:	0800d26c 	.word	0x0800d26c
 8002c18:	0800d27c 	.word	0x0800d27c
 8002c1c:	0800d28c 	.word	0x0800d28c
 8002c20:	0800d29c 	.word	0x0800d29c
 8002c24:	0800d2ac 	.word	0x0800d2ac
 8002c28:	0800d2c0 	.word	0x0800d2c0
			}
		} else if(kapiTablaAcKonum == 3) {
 8002c2c:	4b9b      	ldr	r3, [pc, #620]	; (8002e9c <menu+0x1c9c>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d111      	bne.n	8002c58 <menu+0x1a58>
			if(dilSecim == 0) {
 8002c34:	4b9a      	ldr	r3, [pc, #616]	; (8002ea0 <menu+0x1ca0>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d104      	bne.n	8002c46 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002c3c:	4a99      	ldr	r2, [pc, #612]	; (8002ea4 <menu+0x1ca4>)
 8002c3e:	2101      	movs	r1, #1
 8002c40:	2002      	movs	r0, #2
 8002c42:	f004 fdd9 	bl	80077f8 <lcd_print>
			}
			if(dilSecim == 1) {
 8002c46:	4b96      	ldr	r3, [pc, #600]	; (8002ea0 <menu+0x1ca0>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d104      	bne.n	8002c58 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002c4e:	4a96      	ldr	r2, [pc, #600]	; (8002ea8 <menu+0x1ca8>)
 8002c50:	2101      	movs	r1, #1
 8002c52:	2002      	movs	r0, #2
 8002c54:	f004 fdd0 	bl	80077f8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c58:	2102      	movs	r1, #2
 8002c5a:	4894      	ldr	r0, [pc, #592]	; (8002eac <menu+0x1cac>)
 8002c5c:	f006 f8f2 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d115      	bne.n	8002c92 <menu+0x1a92>
 8002c66:	4b92      	ldr	r3, [pc, #584]	; (8002eb0 <menu+0x1cb0>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	f083 0301 	eor.w	r3, r3, #1
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00e      	beq.n	8002c92 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002c74:	4b89      	ldr	r3, [pc, #548]	; (8002e9c <menu+0x1c9c>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	4b87      	ldr	r3, [pc, #540]	; (8002e9c <menu+0x1c9c>)
 8002c7e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002c80:	4b86      	ldr	r3, [pc, #536]	; (8002e9c <menu+0x1c9c>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d902      	bls.n	8002c8e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002c88:	4b84      	ldr	r3, [pc, #528]	; (8002e9c <menu+0x1c9c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c8e:	f001 fe3f 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c92:	2104      	movs	r1, #4
 8002c94:	4885      	ldr	r0, [pc, #532]	; (8002eac <menu+0x1cac>)
 8002c96:	f006 f8d5 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d115      	bne.n	8002ccc <menu+0x1acc>
 8002ca0:	4b83      	ldr	r3, [pc, #524]	; (8002eb0 <menu+0x1cb0>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	f083 0301 	eor.w	r3, r3, #1
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00e      	beq.n	8002ccc <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002cae:	4b7b      	ldr	r3, [pc, #492]	; (8002e9c <menu+0x1c9c>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	4b79      	ldr	r3, [pc, #484]	; (8002e9c <menu+0x1c9c>)
 8002cb8:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002cba:	4b78      	ldr	r3, [pc, #480]	; (8002e9c <menu+0x1c9c>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d902      	bls.n	8002cc8 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002cc2:	4b76      	ldr	r3, [pc, #472]	; (8002e9c <menu+0x1c9c>)
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002cc8:	f001 fe22 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ccc:	2108      	movs	r1, #8
 8002cce:	4877      	ldr	r0, [pc, #476]	; (8002eac <menu+0x1cac>)
 8002cd0:	f006 f8b8 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d11d      	bne.n	8002d16 <menu+0x1b16>
 8002cda:	4b75      	ldr	r3, [pc, #468]	; (8002eb0 <menu+0x1cb0>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	f083 0301 	eor.w	r3, r3, #1
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d016      	beq.n	8002d16 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002ce8:	4b6c      	ldr	r3, [pc, #432]	; (8002e9c <menu+0x1c9c>)
 8002cea:	781a      	ldrb	r2, [r3, #0]
 8002cec:	4b71      	ldr	r3, [pc, #452]	; (8002eb4 <menu+0x1cb4>)
 8002cee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002cf2:	4b6a      	ldr	r3, [pc, #424]	; (8002e9c <menu+0x1c9c>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <menu+0x1b02>
 8002cfa:	4b68      	ldr	r3, [pc, #416]	; (8002e9c <menu+0x1c9c>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d106      	bne.n	8002d10 <menu+0x1b10>
				altLimit = 1;
 8002d02:	4b6d      	ldr	r3, [pc, #436]	; (8002eb8 <menu+0x1cb8>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002d08:	4b6b      	ldr	r3, [pc, #428]	; (8002eb8 <menu+0x1cb8>)
 8002d0a:	781a      	ldrb	r2, [r3, #0]
 8002d0c:	4b69      	ldr	r3, [pc, #420]	; (8002eb4 <menu+0x1cb4>)
 8002d0e:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002d10:	4b6a      	ldr	r3, [pc, #424]	; (8002ebc <menu+0x1cbc>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002d16:	4b6a      	ldr	r3, [pc, #424]	; (8002ec0 <menu+0x1cc0>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b0f      	cmp	r3, #15
 8002d1c:	d17f      	bne.n	8002e1e <menu+0x1c1e>
		if(dilSecim == 0) {
 8002d1e:	4b60      	ldr	r3, [pc, #384]	; (8002ea0 <menu+0x1ca0>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10a      	bne.n	8002d3c <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002d26:	4a67      	ldr	r2, [pc, #412]	; (8002ec4 <menu+0x1cc4>)
 8002d28:	2101      	movs	r1, #1
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	f004 fd64 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002d30:	4a65      	ldr	r2, [pc, #404]	; (8002ec8 <menu+0x1cc8>)
 8002d32:	2101      	movs	r1, #1
 8002d34:	2002      	movs	r0, #2
 8002d36:	f004 fd5f 	bl	80077f8 <lcd_print>
 8002d3a:	e00d      	b.n	8002d58 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002d3c:	4b58      	ldr	r3, [pc, #352]	; (8002ea0 <menu+0x1ca0>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d109      	bne.n	8002d58 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002d44:	4a61      	ldr	r2, [pc, #388]	; (8002ecc <menu+0x1ccc>)
 8002d46:	2101      	movs	r1, #1
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f004 fd55 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002d4e:	4a60      	ldr	r2, [pc, #384]	; (8002ed0 <menu+0x1cd0>)
 8002d50:	2101      	movs	r1, #1
 8002d52:	2002      	movs	r0, #2
 8002d54:	f004 fd50 	bl	80077f8 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002d58:	4b5e      	ldr	r3, [pc, #376]	; (8002ed4 <menu+0x1cd4>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	220a      	movs	r2, #10
 8002d5e:	495e      	ldr	r1, [pc, #376]	; (8002ed8 <menu+0x1cd8>)
 8002d60:	4618      	mov	r0, r3
 8002d62:	f009 f8f7 	bl	800bf54 <itoa>
		lcd_print(2,16,snum);
 8002d66:	4a5c      	ldr	r2, [pc, #368]	; (8002ed8 <menu+0x1cd8>)
 8002d68:	2110      	movs	r1, #16
 8002d6a:	2002      	movs	r0, #2
 8002d6c:	f004 fd44 	bl	80077f8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002d70:	2102      	movs	r1, #2
 8002d72:	484e      	ldr	r0, [pc, #312]	; (8002eac <menu+0x1cac>)
 8002d74:	f006 f866 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d119      	bne.n	8002db2 <menu+0x1bb2>
 8002d7e:	4b4c      	ldr	r3, [pc, #304]	; (8002eb0 <menu+0x1cb0>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	f083 0301 	eor.w	r3, r3, #1
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d012      	beq.n	8002db2 <menu+0x1bb2>
 8002d8c:	4b53      	ldr	r3, [pc, #332]	; (8002edc <menu+0x1cdc>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10e      	bne.n	8002db2 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002d94:	4b4f      	ldr	r3, [pc, #316]	; (8002ed4 <menu+0x1cd4>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	4b4d      	ldr	r3, [pc, #308]	; (8002ed4 <menu+0x1cd4>)
 8002d9e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002da0:	4b4c      	ldr	r3, [pc, #304]	; (8002ed4 <menu+0x1cd4>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d902      	bls.n	8002dae <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002da8:	4b4a      	ldr	r3, [pc, #296]	; (8002ed4 <menu+0x1cd4>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002dae:	f001 fdaf 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002db2:	2104      	movs	r1, #4
 8002db4:	483d      	ldr	r0, [pc, #244]	; (8002eac <menu+0x1cac>)
 8002db6:	f006 f845 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d119      	bne.n	8002df4 <menu+0x1bf4>
 8002dc0:	4b3b      	ldr	r3, [pc, #236]	; (8002eb0 <menu+0x1cb0>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	f083 0301 	eor.w	r3, r3, #1
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d012      	beq.n	8002df4 <menu+0x1bf4>
 8002dce:	4b43      	ldr	r3, [pc, #268]	; (8002edc <menu+0x1cdc>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10e      	bne.n	8002df4 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002dd6:	4b3f      	ldr	r3, [pc, #252]	; (8002ed4 <menu+0x1cd4>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	4b3d      	ldr	r3, [pc, #244]	; (8002ed4 <menu+0x1cd4>)
 8002de0:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002de2:	4b3c      	ldr	r3, [pc, #240]	; (8002ed4 <menu+0x1cd4>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b06      	cmp	r3, #6
 8002de8:	d902      	bls.n	8002df0 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002dea:	4b3a      	ldr	r3, [pc, #232]	; (8002ed4 <menu+0x1cd4>)
 8002dec:	2205      	movs	r2, #5
 8002dee:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002df0:	f001 fd8e 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002df4:	2108      	movs	r1, #8
 8002df6:	482d      	ldr	r0, [pc, #180]	; (8002eac <menu+0x1cac>)
 8002df8:	f006 f824 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d10d      	bne.n	8002e1e <menu+0x1c1e>
 8002e02:	4b2b      	ldr	r3, [pc, #172]	; (8002eb0 <menu+0x1cb0>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	f083 0301 	eor.w	r3, r3, #1
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d006      	beq.n	8002e1e <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002e10:	4b30      	ldr	r3, [pc, #192]	; (8002ed4 <menu+0x1cd4>)
 8002e12:	781a      	ldrb	r2, [r3, #0]
 8002e14:	4b27      	ldr	r3, [pc, #156]	; (8002eb4 <menu+0x1cb4>)
 8002e16:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002e18:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <menu+0x1cbc>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002e1e:	4b28      	ldr	r3, [pc, #160]	; (8002ec0 <menu+0x1cc0>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b10      	cmp	r3, #16
 8002e24:	f040 80bc 	bne.w	8002fa0 <menu+0x1da0>
		if(dilSecim == 0) {
 8002e28:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <menu+0x1ca0>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d105      	bne.n	8002e3c <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002e30:	4a2b      	ldr	r2, [pc, #172]	; (8002ee0 <menu+0x1ce0>)
 8002e32:	2101      	movs	r1, #1
 8002e34:	2001      	movs	r0, #1
 8002e36:	f004 fcdf 	bl	80077f8 <lcd_print>
 8002e3a:	e008      	b.n	8002e4e <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002e3c:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <menu+0x1ca0>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d104      	bne.n	8002e4e <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002e44:	4a27      	ldr	r2, [pc, #156]	; (8002ee4 <menu+0x1ce4>)
 8002e46:	2101      	movs	r1, #1
 8002e48:	2001      	movs	r0, #1
 8002e4a:	f004 fcd5 	bl	80077f8 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002e4e:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <menu+0x1ce8>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d113      	bne.n	8002e7e <menu+0x1c7e>
			if(dilSecim == 0) {
 8002e56:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <menu+0x1ca0>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d105      	bne.n	8002e6a <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002e5e:	4a11      	ldr	r2, [pc, #68]	; (8002ea4 <menu+0x1ca4>)
 8002e60:	2101      	movs	r1, #1
 8002e62:	2002      	movs	r0, #2
 8002e64:	f004 fcc8 	bl	80077f8 <lcd_print>
 8002e68:	e04b      	b.n	8002f02 <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <menu+0x1ca0>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d147      	bne.n	8002f02 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002e72:	4a0d      	ldr	r2, [pc, #52]	; (8002ea8 <menu+0x1ca8>)
 8002e74:	2101      	movs	r1, #1
 8002e76:	2002      	movs	r0, #2
 8002e78:	f004 fcbe 	bl	80077f8 <lcd_print>
 8002e7c:	e041      	b.n	8002f02 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <menu+0x1ce8>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d13d      	bne.n	8002f02 <menu+0x1d02>
			if(dilSecim == 0) {
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <menu+0x1ca0>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d130      	bne.n	8002ef0 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002e8e:	4a17      	ldr	r2, [pc, #92]	; (8002eec <menu+0x1cec>)
 8002e90:	2101      	movs	r1, #1
 8002e92:	2002      	movs	r0, #2
 8002e94:	f004 fcb0 	bl	80077f8 <lcd_print>
 8002e98:	e033      	b.n	8002f02 <menu+0x1d02>
 8002e9a:	bf00      	nop
 8002e9c:	2000020d 	.word	0x2000020d
 8002ea0:	20000221 	.word	0x20000221
 8002ea4:	0800cf34 	.word	0x0800cf34
 8002ea8:	0800cf48 	.word	0x0800cf48
 8002eac:	40010800 	.word	0x40010800
 8002eb0:	2000022f 	.word	0x2000022f
 8002eb4:	2000012c 	.word	0x2000012c
 8002eb8:	20000206 	.word	0x20000206
 8002ebc:	2000022c 	.word	0x2000022c
 8002ec0:	20000200 	.word	0x20000200
 8002ec4:	0800d2d4 	.word	0x0800d2d4
 8002ec8:	0800d198 	.word	0x0800d198
 8002ecc:	0800d2e8 	.word	0x0800d2e8
 8002ed0:	0800d1bc 	.word	0x0800d1bc
 8002ed4:	2000021b 	.word	0x2000021b
 8002ed8:	2000019c 	.word	0x2000019c
 8002edc:	2000020b 	.word	0x2000020b
 8002ee0:	0800d2fc 	.word	0x0800d2fc
 8002ee4:	0800d310 	.word	0x0800d310
 8002ee8:	2000020e 	.word	0x2000020e
 8002eec:	0800cf94 	.word	0x0800cf94
			} else if(dilSecim == 1) {
 8002ef0:	4b99      	ldr	r3, [pc, #612]	; (8003158 <menu+0x1f58>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d104      	bne.n	8002f02 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002ef8:	4a98      	ldr	r2, [pc, #608]	; (800315c <menu+0x1f5c>)
 8002efa:	2101      	movs	r1, #1
 8002efc:	2002      	movs	r0, #2
 8002efe:	f004 fc7b 	bl	80077f8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f02:	2102      	movs	r1, #2
 8002f04:	4896      	ldr	r0, [pc, #600]	; (8003160 <menu+0x1f60>)
 8002f06:	f005 ff9d 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d115      	bne.n	8002f3c <menu+0x1d3c>
 8002f10:	4b94      	ldr	r3, [pc, #592]	; (8003164 <menu+0x1f64>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	f083 0301 	eor.w	r3, r3, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00e      	beq.n	8002f3c <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002f1e:	4b92      	ldr	r3, [pc, #584]	; (8003168 <menu+0x1f68>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	4b90      	ldr	r3, [pc, #576]	; (8003168 <menu+0x1f68>)
 8002f28:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002f2a:	4b8f      	ldr	r3, [pc, #572]	; (8003168 <menu+0x1f68>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d902      	bls.n	8002f38 <menu+0x1d38>
				yukariYavasLimit = 0;
 8002f32:	4b8d      	ldr	r3, [pc, #564]	; (8003168 <menu+0x1f68>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f38:	f001 fcea 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f3c:	2104      	movs	r1, #4
 8002f3e:	4888      	ldr	r0, [pc, #544]	; (8003160 <menu+0x1f60>)
 8002f40:	f005 ff80 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d115      	bne.n	8002f76 <menu+0x1d76>
 8002f4a:	4b86      	ldr	r3, [pc, #536]	; (8003164 <menu+0x1f64>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	f083 0301 	eor.w	r3, r3, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00e      	beq.n	8002f76 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002f58:	4b83      	ldr	r3, [pc, #524]	; (8003168 <menu+0x1f68>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	4b81      	ldr	r3, [pc, #516]	; (8003168 <menu+0x1f68>)
 8002f62:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002f64:	4b80      	ldr	r3, [pc, #512]	; (8003168 <menu+0x1f68>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8002f6c:	4b7e      	ldr	r3, [pc, #504]	; (8003168 <menu+0x1f68>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f72:	f001 fccd 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f76:	2108      	movs	r1, #8
 8002f78:	4879      	ldr	r0, [pc, #484]	; (8003160 <menu+0x1f60>)
 8002f7a:	f005 ff63 	bl	8008e44 <HAL_GPIO_ReadPin>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d10d      	bne.n	8002fa0 <menu+0x1da0>
 8002f84:	4b77      	ldr	r3, [pc, #476]	; (8003164 <menu+0x1f64>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	f083 0301 	eor.w	r3, r3, #1
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d006      	beq.n	8002fa0 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002f92:	4b75      	ldr	r3, [pc, #468]	; (8003168 <menu+0x1f68>)
 8002f94:	781a      	ldrb	r2, [r3, #0]
 8002f96:	4b75      	ldr	r3, [pc, #468]	; (800316c <menu+0x1f6c>)
 8002f98:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002f9a:	4b75      	ldr	r3, [pc, #468]	; (8003170 <menu+0x1f70>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002fa0:	4b74      	ldr	r3, [pc, #464]	; (8003174 <menu+0x1f74>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b11      	cmp	r3, #17
 8002fa6:	f040 80c3 	bne.w	8003130 <menu+0x1f30>
		if(dilSecim == 0) {
 8002faa:	4b6b      	ldr	r3, [pc, #428]	; (8003158 <menu+0x1f58>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d105      	bne.n	8002fbe <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002fb2:	4a71      	ldr	r2, [pc, #452]	; (8003178 <menu+0x1f78>)
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f004 fc1e 	bl	80077f8 <lcd_print>
 8002fbc:	e008      	b.n	8002fd0 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8002fbe:	4b66      	ldr	r3, [pc, #408]	; (8003158 <menu+0x1f58>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d104      	bne.n	8002fd0 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002fc6:	4a6d      	ldr	r2, [pc, #436]	; (800317c <menu+0x1f7c>)
 8002fc8:	2101      	movs	r1, #1
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f004 fc14 	bl	80077f8 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002fd0:	4b6b      	ldr	r3, [pc, #428]	; (8003180 <menu+0x1f80>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d113      	bne.n	8003000 <menu+0x1e00>
			if(dilSecim == 0){
 8002fd8:	4b5f      	ldr	r3, [pc, #380]	; (8003158 <menu+0x1f58>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002fe0:	4a68      	ldr	r2, [pc, #416]	; (8003184 <menu+0x1f84>)
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	2002      	movs	r0, #2
 8002fe6:	f004 fc07 	bl	80077f8 <lcd_print>
 8002fea:	e038      	b.n	800305e <menu+0x1e5e>
			} else if(dilSecim == 1){
 8002fec:	4b5a      	ldr	r3, [pc, #360]	; (8003158 <menu+0x1f58>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d134      	bne.n	800305e <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002ff4:	4a64      	ldr	r2, [pc, #400]	; (8003188 <menu+0x1f88>)
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	2002      	movs	r0, #2
 8002ffa:	f004 fbfd 	bl	80077f8 <lcd_print>
 8002ffe:	e02e      	b.n	800305e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003000:	4b5f      	ldr	r3, [pc, #380]	; (8003180 <menu+0x1f80>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d113      	bne.n	8003030 <menu+0x1e30>
			if(dilSecim == 0){
 8003008:	4b53      	ldr	r3, [pc, #332]	; (8003158 <menu+0x1f58>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d105      	bne.n	800301c <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003010:	4a5e      	ldr	r2, [pc, #376]	; (800318c <menu+0x1f8c>)
 8003012:	2101      	movs	r1, #1
 8003014:	2002      	movs	r0, #2
 8003016:	f004 fbef 	bl	80077f8 <lcd_print>
 800301a:	e020      	b.n	800305e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800301c:	4b4e      	ldr	r3, [pc, #312]	; (8003158 <menu+0x1f58>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d11c      	bne.n	800305e <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8003024:	4a5a      	ldr	r2, [pc, #360]	; (8003190 <menu+0x1f90>)
 8003026:	2101      	movs	r1, #1
 8003028:	2002      	movs	r0, #2
 800302a:	f004 fbe5 	bl	80077f8 <lcd_print>
 800302e:	e016      	b.n	800305e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003030:	4b53      	ldr	r3, [pc, #332]	; (8003180 <menu+0x1f80>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d112      	bne.n	800305e <menu+0x1e5e>
			if(dilSecim == 0) {
 8003038:	4b47      	ldr	r3, [pc, #284]	; (8003158 <menu+0x1f58>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d105      	bne.n	800304c <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8003040:	4a54      	ldr	r2, [pc, #336]	; (8003194 <menu+0x1f94>)
 8003042:	2101      	movs	r1, #1
 8003044:	2002      	movs	r0, #2
 8003046:	f004 fbd7 	bl	80077f8 <lcd_print>
 800304a:	e008      	b.n	800305e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800304c:	4b42      	ldr	r3, [pc, #264]	; (8003158 <menu+0x1f58>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d104      	bne.n	800305e <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003054:	4a50      	ldr	r2, [pc, #320]	; (8003198 <menu+0x1f98>)
 8003056:	2101      	movs	r1, #1
 8003058:	2002      	movs	r0, #2
 800305a:	f004 fbcd 	bl	80077f8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800305e:	2102      	movs	r1, #2
 8003060:	483f      	ldr	r0, [pc, #252]	; (8003160 <menu+0x1f60>)
 8003062:	f005 feef 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003066:	4603      	mov	r3, r0
 8003068:	2b01      	cmp	r3, #1
 800306a:	d115      	bne.n	8003098 <menu+0x1e98>
 800306c:	4b3d      	ldr	r3, [pc, #244]	; (8003164 <menu+0x1f64>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	f083 0301 	eor.w	r3, r3, #1
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00e      	beq.n	8003098 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800307a:	4b41      	ldr	r3, [pc, #260]	; (8003180 <menu+0x1f80>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	3301      	adds	r3, #1
 8003080:	b2da      	uxtb	r2, r3
 8003082:	4b3f      	ldr	r3, [pc, #252]	; (8003180 <menu+0x1f80>)
 8003084:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003086:	4b3e      	ldr	r3, [pc, #248]	; (8003180 <menu+0x1f80>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d902      	bls.n	8003094 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800308e:	4b3c      	ldr	r3, [pc, #240]	; (8003180 <menu+0x1f80>)
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003094:	f001 fc3c 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003098:	2104      	movs	r1, #4
 800309a:	4831      	ldr	r0, [pc, #196]	; (8003160 <menu+0x1f60>)
 800309c:	f005 fed2 	bl	8008e44 <HAL_GPIO_ReadPin>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d115      	bne.n	80030d2 <menu+0x1ed2>
 80030a6:	4b2f      	ldr	r3, [pc, #188]	; (8003164 <menu+0x1f64>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	f083 0301 	eor.w	r3, r3, #1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00e      	beq.n	80030d2 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80030b4:	4b32      	ldr	r3, [pc, #200]	; (8003180 <menu+0x1f80>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	4b30      	ldr	r3, [pc, #192]	; (8003180 <menu+0x1f80>)
 80030be:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80030c0:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <menu+0x1f80>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d902      	bls.n	80030ce <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 80030c8:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <menu+0x1f80>)
 80030ca:	2202      	movs	r2, #2
 80030cc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030ce:	f001 fc1f 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030d2:	2108      	movs	r1, #8
 80030d4:	4822      	ldr	r0, [pc, #136]	; (8003160 <menu+0x1f60>)
 80030d6:	f005 feb5 	bl	8008e44 <HAL_GPIO_ReadPin>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d127      	bne.n	8003130 <menu+0x1f30>
 80030e0:	4b20      	ldr	r3, [pc, #128]	; (8003164 <menu+0x1f64>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	f083 0301 	eor.w	r3, r3, #1
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d020      	beq.n	8003130 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <menu+0x1f80>)
 80030f0:	781a      	ldrb	r2, [r3, #0]
 80030f2:	4b1e      	ldr	r3, [pc, #120]	; (800316c <menu+0x1f6c>)
 80030f4:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80030f6:	4b22      	ldr	r3, [pc, #136]	; (8003180 <menu+0x1f80>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d003      	beq.n	8003106 <menu+0x1f06>
 80030fe:	4b20      	ldr	r3, [pc, #128]	; (8003180 <menu+0x1f80>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d106      	bne.n	8003114 <menu+0x1f14>
				calismaSekli = 0;
 8003106:	4b25      	ldr	r3, [pc, #148]	; (800319c <menu+0x1f9c>)
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 800310c:	4b23      	ldr	r3, [pc, #140]	; (800319c <menu+0x1f9c>)
 800310e:	781a      	ldrb	r2, [r3, #0]
 8003110:	4b16      	ldr	r3, [pc, #88]	; (800316c <menu+0x1f6c>)
 8003112:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003114:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <menu+0x1f80>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d106      	bne.n	800312a <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 800311c:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <menu+0x1fa0>)
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003122:	4b1f      	ldr	r3, [pc, #124]	; (80031a0 <menu+0x1fa0>)
 8003124:	781a      	ldrb	r2, [r3, #0]
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <menu+0x1f6c>)
 8003128:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800312a:	4b11      	ldr	r3, [pc, #68]	; (8003170 <menu+0x1f70>)
 800312c:	2201      	movs	r2, #1
 800312e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003130:	4b10      	ldr	r3, [pc, #64]	; (8003174 <menu+0x1f74>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b12      	cmp	r3, #18
 8003136:	f040 80d5 	bne.w	80032e4 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800313a:	4b11      	ldr	r3, [pc, #68]	; (8003180 <menu+0x1f80>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d13c      	bne.n	80031bc <menu+0x1fbc>
			if(dilSecim == 0) {
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <menu+0x1f58>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d12e      	bne.n	80031a8 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800314a:	4a16      	ldr	r2, [pc, #88]	; (80031a4 <menu+0x1fa4>)
 800314c:	2101      	movs	r1, #1
 800314e:	2001      	movs	r0, #1
 8003150:	f004 fb52 	bl	80077f8 <lcd_print>
 8003154:	e048      	b.n	80031e8 <menu+0x1fe8>
 8003156:	bf00      	nop
 8003158:	20000221 	.word	0x20000221
 800315c:	0800cfa8 	.word	0x0800cfa8
 8003160:	40010800 	.word	0x40010800
 8003164:	2000022f 	.word	0x2000022f
 8003168:	2000020e 	.word	0x2000020e
 800316c:	2000012c 	.word	0x2000012c
 8003170:	2000022c 	.word	0x2000022c
 8003174:	20000200 	.word	0x20000200
 8003178:	0800d324 	.word	0x0800d324
 800317c:	0800d338 	.word	0x0800d338
 8003180:	2000020f 	.word	0x2000020f
 8003184:	0800d34c 	.word	0x0800d34c
 8003188:	0800d35c 	.word	0x0800d35c
 800318c:	0800d36c 	.word	0x0800d36c
 8003190:	0800d37c 	.word	0x0800d37c
 8003194:	0800cf34 	.word	0x0800cf34
 8003198:	0800cf48 	.word	0x0800cf48
 800319c:	20000201 	.word	0x20000201
 80031a0:	20000212 	.word	0x20000212
 80031a4:	0800d38c 	.word	0x0800d38c
			} else if(dilSecim == 1) {
 80031a8:	4b7b      	ldr	r3, [pc, #492]	; (8003398 <menu+0x2198>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d11b      	bne.n	80031e8 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80031b0:	4a7a      	ldr	r2, [pc, #488]	; (800339c <menu+0x219c>)
 80031b2:	2101      	movs	r1, #1
 80031b4:	2001      	movs	r0, #1
 80031b6:	f004 fb1f 	bl	80077f8 <lcd_print>
 80031ba:	e015      	b.n	80031e8 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80031bc:	4b78      	ldr	r3, [pc, #480]	; (80033a0 <menu+0x21a0>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d111      	bne.n	80031e8 <menu+0x1fe8>
			if(dilSecim == 0){
 80031c4:	4b74      	ldr	r3, [pc, #464]	; (8003398 <menu+0x2198>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d104      	bne.n	80031d6 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80031cc:	4a75      	ldr	r2, [pc, #468]	; (80033a4 <menu+0x21a4>)
 80031ce:	2101      	movs	r1, #1
 80031d0:	2001      	movs	r0, #1
 80031d2:	f004 fb11 	bl	80077f8 <lcd_print>
			}
			if(dilSecim == 1){
 80031d6:	4b70      	ldr	r3, [pc, #448]	; (8003398 <menu+0x2198>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d104      	bne.n	80031e8 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80031de:	4a72      	ldr	r2, [pc, #456]	; (80033a8 <menu+0x21a8>)
 80031e0:	2101      	movs	r1, #1
 80031e2:	2001      	movs	r0, #1
 80031e4:	f004 fb08 	bl	80077f8 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80031e8:	4b70      	ldr	r3, [pc, #448]	; (80033ac <menu+0x21ac>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d113      	bne.n	8003218 <menu+0x2018>
			if(dilSecim == 0) {
 80031f0:	4b69      	ldr	r3, [pc, #420]	; (8003398 <menu+0x2198>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80031f8:	4a6d      	ldr	r2, [pc, #436]	; (80033b0 <menu+0x21b0>)
 80031fa:	2101      	movs	r1, #1
 80031fc:	2002      	movs	r0, #2
 80031fe:	f004 fafb 	bl	80077f8 <lcd_print>
 8003202:	e020      	b.n	8003246 <menu+0x2046>
			} else if(dilSecim == 1){
 8003204:	4b64      	ldr	r3, [pc, #400]	; (8003398 <menu+0x2198>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d11c      	bne.n	8003246 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 800320c:	4a69      	ldr	r2, [pc, #420]	; (80033b4 <menu+0x21b4>)
 800320e:	2101      	movs	r1, #1
 8003210:	2002      	movs	r0, #2
 8003212:	f004 faf1 	bl	80077f8 <lcd_print>
 8003216:	e016      	b.n	8003246 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003218:	4b64      	ldr	r3, [pc, #400]	; (80033ac <menu+0x21ac>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d112      	bne.n	8003246 <menu+0x2046>
			if(dilSecim == 0){
 8003220:	4b5d      	ldr	r3, [pc, #372]	; (8003398 <menu+0x2198>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d105      	bne.n	8003234 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8003228:	4a63      	ldr	r2, [pc, #396]	; (80033b8 <menu+0x21b8>)
 800322a:	2101      	movs	r1, #1
 800322c:	2002      	movs	r0, #2
 800322e:	f004 fae3 	bl	80077f8 <lcd_print>
 8003232:	e008      	b.n	8003246 <menu+0x2046>
			} else if(dilSecim == 1){
 8003234:	4b58      	ldr	r3, [pc, #352]	; (8003398 <menu+0x2198>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d104      	bne.n	8003246 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 800323c:	4a5f      	ldr	r2, [pc, #380]	; (80033bc <menu+0x21bc>)
 800323e:	2101      	movs	r1, #1
 8003240:	2002      	movs	r0, #2
 8003242:	f004 fad9 	bl	80077f8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003246:	2102      	movs	r1, #2
 8003248:	485d      	ldr	r0, [pc, #372]	; (80033c0 <menu+0x21c0>)
 800324a:	f005 fdfb 	bl	8008e44 <HAL_GPIO_ReadPin>
 800324e:	4603      	mov	r3, r0
 8003250:	2b01      	cmp	r3, #1
 8003252:	d115      	bne.n	8003280 <menu+0x2080>
 8003254:	4b5b      	ldr	r3, [pc, #364]	; (80033c4 <menu+0x21c4>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	f083 0301 	eor.w	r3, r3, #1
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00e      	beq.n	8003280 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003262:	4b52      	ldr	r3, [pc, #328]	; (80033ac <menu+0x21ac>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	b2da      	uxtb	r2, r3
 800326a:	4b50      	ldr	r3, [pc, #320]	; (80033ac <menu+0x21ac>)
 800326c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800326e:	4b4f      	ldr	r3, [pc, #316]	; (80033ac <menu+0x21ac>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d902      	bls.n	800327c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003276:	4b4d      	ldr	r3, [pc, #308]	; (80033ac <menu+0x21ac>)
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800327c:	f001 fb48 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003280:	2104      	movs	r1, #4
 8003282:	484f      	ldr	r0, [pc, #316]	; (80033c0 <menu+0x21c0>)
 8003284:	f005 fdde 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003288:	4603      	mov	r3, r0
 800328a:	2b01      	cmp	r3, #1
 800328c:	d115      	bne.n	80032ba <menu+0x20ba>
 800328e:	4b4d      	ldr	r3, [pc, #308]	; (80033c4 <menu+0x21c4>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	f083 0301 	eor.w	r3, r3, #1
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00e      	beq.n	80032ba <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800329c:	4b43      	ldr	r3, [pc, #268]	; (80033ac <menu+0x21ac>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	4b41      	ldr	r3, [pc, #260]	; (80033ac <menu+0x21ac>)
 80032a6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80032a8:	4b40      	ldr	r3, [pc, #256]	; (80033ac <menu+0x21ac>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 80032b0:	4b3e      	ldr	r3, [pc, #248]	; (80033ac <menu+0x21ac>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032b6:	f001 fb2b 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ba:	2108      	movs	r1, #8
 80032bc:	4840      	ldr	r0, [pc, #256]	; (80033c0 <menu+0x21c0>)
 80032be:	f005 fdc1 	bl	8008e44 <HAL_GPIO_ReadPin>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d10d      	bne.n	80032e4 <menu+0x20e4>
 80032c8:	4b3e      	ldr	r3, [pc, #248]	; (80033c4 <menu+0x21c4>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	f083 0301 	eor.w	r3, r3, #1
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d006      	beq.n	80032e4 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 80032d6:	4b35      	ldr	r3, [pc, #212]	; (80033ac <menu+0x21ac>)
 80032d8:	781a      	ldrb	r2, [r3, #0]
 80032da:	4b3b      	ldr	r3, [pc, #236]	; (80033c8 <menu+0x21c8>)
 80032dc:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80032de:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <menu+0x21cc>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80032e4:	4b3a      	ldr	r3, [pc, #232]	; (80033d0 <menu+0x21d0>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b13      	cmp	r3, #19
 80032ea:	f040 80d5 	bne.w	8003498 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80032ee:	4b2c      	ldr	r3, [pc, #176]	; (80033a0 <menu+0x21a0>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d113      	bne.n	800331e <menu+0x211e>
			if(dilSecim == 0) {
 80032f6:	4b28      	ldr	r3, [pc, #160]	; (8003398 <menu+0x2198>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d105      	bne.n	800330a <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80032fe:	4a35      	ldr	r2, [pc, #212]	; (80033d4 <menu+0x21d4>)
 8003300:	2101      	movs	r1, #1
 8003302:	2001      	movs	r0, #1
 8003304:	f004 fa78 	bl	80077f8 <lcd_print>
 8003308:	e01f      	b.n	800334a <menu+0x214a>
			} else if(dilSecim == 1) {
 800330a:	4b23      	ldr	r3, [pc, #140]	; (8003398 <menu+0x2198>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d11b      	bne.n	800334a <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003312:	4a31      	ldr	r2, [pc, #196]	; (80033d8 <menu+0x21d8>)
 8003314:	2101      	movs	r1, #1
 8003316:	2001      	movs	r0, #1
 8003318:	f004 fa6e 	bl	80077f8 <lcd_print>
 800331c:	e015      	b.n	800334a <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800331e:	4b20      	ldr	r3, [pc, #128]	; (80033a0 <menu+0x21a0>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d111      	bne.n	800334a <menu+0x214a>
			if(dilSecim == 0) {
 8003326:	4b1c      	ldr	r3, [pc, #112]	; (8003398 <menu+0x2198>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d104      	bne.n	8003338 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 800332e:	4a2b      	ldr	r2, [pc, #172]	; (80033dc <menu+0x21dc>)
 8003330:	2101      	movs	r1, #1
 8003332:	2001      	movs	r0, #1
 8003334:	f004 fa60 	bl	80077f8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003338:	4b17      	ldr	r3, [pc, #92]	; (8003398 <menu+0x2198>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d104      	bne.n	800334a <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003340:	4a27      	ldr	r2, [pc, #156]	; (80033e0 <menu+0x21e0>)
 8003342:	2101      	movs	r1, #1
 8003344:	2001      	movs	r0, #1
 8003346:	f004 fa57 	bl	80077f8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800334a:	4b26      	ldr	r3, [pc, #152]	; (80033e4 <menu+0x21e4>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d113      	bne.n	800337a <menu+0x217a>
			if(dilSecim == 0) {
 8003352:	4b11      	ldr	r3, [pc, #68]	; (8003398 <menu+0x2198>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d105      	bne.n	8003366 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800335a:	4a15      	ldr	r2, [pc, #84]	; (80033b0 <menu+0x21b0>)
 800335c:	2101      	movs	r1, #1
 800335e:	2002      	movs	r0, #2
 8003360:	f004 fa4a 	bl	80077f8 <lcd_print>
 8003364:	e049      	b.n	80033fa <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003366:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <menu+0x2198>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d145      	bne.n	80033fa <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800336e:	4a11      	ldr	r2, [pc, #68]	; (80033b4 <menu+0x21b4>)
 8003370:	2101      	movs	r1, #1
 8003372:	2002      	movs	r0, #2
 8003374:	f004 fa40 	bl	80077f8 <lcd_print>
 8003378:	e03f      	b.n	80033fa <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800337a:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <menu+0x21e4>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d13b      	bne.n	80033fa <menu+0x21fa>
			if(dilSecim == 0) {
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <menu+0x2198>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d12e      	bne.n	80033e8 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800338a:	4a0b      	ldr	r2, [pc, #44]	; (80033b8 <menu+0x21b8>)
 800338c:	2101      	movs	r1, #1
 800338e:	2002      	movs	r0, #2
 8003390:	f004 fa32 	bl	80077f8 <lcd_print>
 8003394:	e031      	b.n	80033fa <menu+0x21fa>
 8003396:	bf00      	nop
 8003398:	20000221 	.word	0x20000221
 800339c:	0800d3a0 	.word	0x0800d3a0
 80033a0:	2000020f 	.word	0x2000020f
 80033a4:	0800d3b0 	.word	0x0800d3b0
 80033a8:	0800d3c4 	.word	0x0800d3c4
 80033ac:	20000210 	.word	0x20000210
 80033b0:	0800cf34 	.word	0x0800cf34
 80033b4:	0800cf48 	.word	0x0800cf48
 80033b8:	0800cf94 	.word	0x0800cf94
 80033bc:	0800cfa8 	.word	0x0800cfa8
 80033c0:	40010800 	.word	0x40010800
 80033c4:	2000022f 	.word	0x2000022f
 80033c8:	2000012c 	.word	0x2000012c
 80033cc:	2000022c 	.word	0x2000022c
 80033d0:	20000200 	.word	0x20000200
 80033d4:	0800d3d8 	.word	0x0800d3d8
 80033d8:	0800d3ec 	.word	0x0800d3ec
 80033dc:	0800d400 	.word	0x0800d400
 80033e0:	0800d414 	.word	0x0800d414
 80033e4:	20000211 	.word	0x20000211
			} else if(dilSecim == 1) {
 80033e8:	4b90      	ldr	r3, [pc, #576]	; (800362c <menu+0x242c>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d104      	bne.n	80033fa <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80033f0:	4a8f      	ldr	r2, [pc, #572]	; (8003630 <menu+0x2430>)
 80033f2:	2101      	movs	r1, #1
 80033f4:	2002      	movs	r0, #2
 80033f6:	f004 f9ff 	bl	80077f8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033fa:	2102      	movs	r1, #2
 80033fc:	488d      	ldr	r0, [pc, #564]	; (8003634 <menu+0x2434>)
 80033fe:	f005 fd21 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003402:	4603      	mov	r3, r0
 8003404:	2b01      	cmp	r3, #1
 8003406:	d115      	bne.n	8003434 <menu+0x2234>
 8003408:	4b8b      	ldr	r3, [pc, #556]	; (8003638 <menu+0x2438>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	f083 0301 	eor.w	r3, r3, #1
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00e      	beq.n	8003434 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003416:	4b89      	ldr	r3, [pc, #548]	; (800363c <menu+0x243c>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	3301      	adds	r3, #1
 800341c:	b2da      	uxtb	r2, r3
 800341e:	4b87      	ldr	r3, [pc, #540]	; (800363c <menu+0x243c>)
 8003420:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003422:	4b86      	ldr	r3, [pc, #536]	; (800363c <menu+0x243c>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d902      	bls.n	8003430 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 800342a:	4b84      	ldr	r3, [pc, #528]	; (800363c <menu+0x243c>)
 800342c:	2200      	movs	r2, #0
 800342e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003430:	f001 fa6e 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003434:	2104      	movs	r1, #4
 8003436:	487f      	ldr	r0, [pc, #508]	; (8003634 <menu+0x2434>)
 8003438:	f005 fd04 	bl	8008e44 <HAL_GPIO_ReadPin>
 800343c:	4603      	mov	r3, r0
 800343e:	2b01      	cmp	r3, #1
 8003440:	d115      	bne.n	800346e <menu+0x226e>
 8003442:	4b7d      	ldr	r3, [pc, #500]	; (8003638 <menu+0x2438>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	f083 0301 	eor.w	r3, r3, #1
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00e      	beq.n	800346e <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003450:	4b7a      	ldr	r3, [pc, #488]	; (800363c <menu+0x243c>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	3b01      	subs	r3, #1
 8003456:	b2da      	uxtb	r2, r3
 8003458:	4b78      	ldr	r3, [pc, #480]	; (800363c <menu+0x243c>)
 800345a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 800345c:	4b77      	ldr	r3, [pc, #476]	; (800363c <menu+0x243c>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003464:	4b75      	ldr	r3, [pc, #468]	; (800363c <menu+0x243c>)
 8003466:	2201      	movs	r2, #1
 8003468:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800346a:	f001 fa51 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800346e:	2108      	movs	r1, #8
 8003470:	4870      	ldr	r0, [pc, #448]	; (8003634 <menu+0x2434>)
 8003472:	f005 fce7 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003476:	4603      	mov	r3, r0
 8003478:	2b01      	cmp	r3, #1
 800347a:	d10d      	bne.n	8003498 <menu+0x2298>
 800347c:	4b6e      	ldr	r3, [pc, #440]	; (8003638 <menu+0x2438>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	f083 0301 	eor.w	r3, r3, #1
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d006      	beq.n	8003498 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800348a:	4b6c      	ldr	r3, [pc, #432]	; (800363c <menu+0x243c>)
 800348c:	781a      	ldrb	r2, [r3, #0]
 800348e:	4b6c      	ldr	r3, [pc, #432]	; (8003640 <menu+0x2440>)
 8003490:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003492:	4b6c      	ldr	r3, [pc, #432]	; (8003644 <menu+0x2444>)
 8003494:	2201      	movs	r2, #1
 8003496:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003498:	4b6b      	ldr	r3, [pc, #428]	; (8003648 <menu+0x2448>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b14      	cmp	r3, #20
 800349e:	f040 80b5 	bne.w	800360c <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 80034a2:	4b6a      	ldr	r3, [pc, #424]	; (800364c <menu+0x244c>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d113      	bne.n	80034d2 <menu+0x22d2>
			if(dilSecim == 0) {
 80034aa:	4b60      	ldr	r3, [pc, #384]	; (800362c <menu+0x242c>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d105      	bne.n	80034be <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80034b2:	4a67      	ldr	r2, [pc, #412]	; (8003650 <menu+0x2450>)
 80034b4:	2101      	movs	r1, #1
 80034b6:	2001      	movs	r0, #1
 80034b8:	f004 f99e 	bl	80077f8 <lcd_print>
 80034bc:	e020      	b.n	8003500 <menu+0x2300>
			} else if(dilSecim == 1) {
 80034be:	4b5b      	ldr	r3, [pc, #364]	; (800362c <menu+0x242c>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d11c      	bne.n	8003500 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80034c6:	4a63      	ldr	r2, [pc, #396]	; (8003654 <menu+0x2454>)
 80034c8:	2101      	movs	r1, #1
 80034ca:	2001      	movs	r0, #1
 80034cc:	f004 f994 	bl	80077f8 <lcd_print>
 80034d0:	e016      	b.n	8003500 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 80034d2:	4b5e      	ldr	r3, [pc, #376]	; (800364c <menu+0x244c>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d112      	bne.n	8003500 <menu+0x2300>
			if(dilSecim == 0) {
 80034da:	4b54      	ldr	r3, [pc, #336]	; (800362c <menu+0x242c>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d105      	bne.n	80034ee <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 80034e2:	4a5d      	ldr	r2, [pc, #372]	; (8003658 <menu+0x2458>)
 80034e4:	2101      	movs	r1, #1
 80034e6:	2001      	movs	r0, #1
 80034e8:	f004 f986 	bl	80077f8 <lcd_print>
 80034ec:	e008      	b.n	8003500 <menu+0x2300>
			} else if(dilSecim == 1) {
 80034ee:	4b4f      	ldr	r3, [pc, #316]	; (800362c <menu+0x242c>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d104      	bne.n	8003500 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80034f6:	4a59      	ldr	r2, [pc, #356]	; (800365c <menu+0x245c>)
 80034f8:	2101      	movs	r1, #1
 80034fa:	2001      	movs	r0, #1
 80034fc:	f004 f97c 	bl	80077f8 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003500:	4b57      	ldr	r3, [pc, #348]	; (8003660 <menu+0x2460>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d113      	bne.n	8003530 <menu+0x2330>
			if(dilSecim == 0) {
 8003508:	4b48      	ldr	r3, [pc, #288]	; (800362c <menu+0x242c>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d105      	bne.n	800351c <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003510:	4a54      	ldr	r2, [pc, #336]	; (8003664 <menu+0x2464>)
 8003512:	2101      	movs	r1, #1
 8003514:	2002      	movs	r0, #2
 8003516:	f004 f96f 	bl	80077f8 <lcd_print>
 800351a:	e020      	b.n	800355e <menu+0x235e>
			} else if(dilSecim == 1) {
 800351c:	4b43      	ldr	r3, [pc, #268]	; (800362c <menu+0x242c>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d11c      	bne.n	800355e <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003524:	4a50      	ldr	r2, [pc, #320]	; (8003668 <menu+0x2468>)
 8003526:	2101      	movs	r1, #1
 8003528:	2002      	movs	r0, #2
 800352a:	f004 f965 	bl	80077f8 <lcd_print>
 800352e:	e016      	b.n	800355e <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003530:	4b4b      	ldr	r3, [pc, #300]	; (8003660 <menu+0x2460>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d112      	bne.n	800355e <menu+0x235e>
			if(dilSecim == 0) {
 8003538:	4b3c      	ldr	r3, [pc, #240]	; (800362c <menu+0x242c>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d105      	bne.n	800354c <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003540:	4a4a      	ldr	r2, [pc, #296]	; (800366c <menu+0x246c>)
 8003542:	2101      	movs	r1, #1
 8003544:	2002      	movs	r0, #2
 8003546:	f004 f957 	bl	80077f8 <lcd_print>
 800354a:	e008      	b.n	800355e <menu+0x235e>
			} else if(dilSecim == 1) {
 800354c:	4b37      	ldr	r3, [pc, #220]	; (800362c <menu+0x242c>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d104      	bne.n	800355e <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003554:	4a46      	ldr	r2, [pc, #280]	; (8003670 <menu+0x2470>)
 8003556:	2101      	movs	r1, #1
 8003558:	2002      	movs	r0, #2
 800355a:	f004 f94d 	bl	80077f8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800355e:	2102      	movs	r1, #2
 8003560:	4834      	ldr	r0, [pc, #208]	; (8003634 <menu+0x2434>)
 8003562:	f005 fc6f 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003566:	4603      	mov	r3, r0
 8003568:	2b01      	cmp	r3, #1
 800356a:	d119      	bne.n	80035a0 <menu+0x23a0>
 800356c:	4b32      	ldr	r3, [pc, #200]	; (8003638 <menu+0x2438>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	f083 0301 	eor.w	r3, r3, #1
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d012      	beq.n	80035a0 <menu+0x23a0>
 800357a:	4b34      	ldr	r3, [pc, #208]	; (800364c <menu+0x244c>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d10e      	bne.n	80035a0 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003582:	4b37      	ldr	r3, [pc, #220]	; (8003660 <menu+0x2460>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	3301      	adds	r3, #1
 8003588:	b2da      	uxtb	r2, r3
 800358a:	4b35      	ldr	r3, [pc, #212]	; (8003660 <menu+0x2460>)
 800358c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800358e:	4b34      	ldr	r3, [pc, #208]	; (8003660 <menu+0x2460>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d902      	bls.n	800359c <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003596:	4b32      	ldr	r3, [pc, #200]	; (8003660 <menu+0x2460>)
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800359c:	f001 f9b8 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80035a0:	2104      	movs	r1, #4
 80035a2:	4824      	ldr	r0, [pc, #144]	; (8003634 <menu+0x2434>)
 80035a4:	f005 fc4e 	bl	8008e44 <HAL_GPIO_ReadPin>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d119      	bne.n	80035e2 <menu+0x23e2>
 80035ae:	4b22      	ldr	r3, [pc, #136]	; (8003638 <menu+0x2438>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	f083 0301 	eor.w	r3, r3, #1
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d012      	beq.n	80035e2 <menu+0x23e2>
 80035bc:	4b23      	ldr	r3, [pc, #140]	; (800364c <menu+0x244c>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d10e      	bne.n	80035e2 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80035c4:	4b26      	ldr	r3, [pc, #152]	; (8003660 <menu+0x2460>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	4b24      	ldr	r3, [pc, #144]	; (8003660 <menu+0x2460>)
 80035ce:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80035d0:	4b23      	ldr	r3, [pc, #140]	; (8003660 <menu+0x2460>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 80035d8:	4b21      	ldr	r3, [pc, #132]	; (8003660 <menu+0x2460>)
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035de:	f001 f997 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035e2:	2108      	movs	r1, #8
 80035e4:	4813      	ldr	r0, [pc, #76]	; (8003634 <menu+0x2434>)
 80035e6:	f005 fc2d 	bl	8008e44 <HAL_GPIO_ReadPin>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d10d      	bne.n	800360c <menu+0x240c>
 80035f0:	4b11      	ldr	r3, [pc, #68]	; (8003638 <menu+0x2438>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	f083 0301 	eor.w	r3, r3, #1
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d006      	beq.n	800360c <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80035fe:	4b18      	ldr	r3, [pc, #96]	; (8003660 <menu+0x2460>)
 8003600:	781a      	ldrb	r2, [r3, #0]
 8003602:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <menu+0x2440>)
 8003604:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003606:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <menu+0x2444>)
 8003608:	2201      	movs	r2, #1
 800360a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800360c:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <menu+0x2448>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b15      	cmp	r3, #21
 8003612:	f040 80c2 	bne.w	800379a <menu+0x259a>
		if(dilSecim == 0) {
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <menu+0x242c>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d12c      	bne.n	8003678 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800361e:	4a15      	ldr	r2, [pc, #84]	; (8003674 <menu+0x2474>)
 8003620:	2101      	movs	r1, #1
 8003622:	2001      	movs	r0, #1
 8003624:	f004 f8e8 	bl	80077f8 <lcd_print>
 8003628:	e02f      	b.n	800368a <menu+0x248a>
 800362a:	bf00      	nop
 800362c:	20000221 	.word	0x20000221
 8003630:	0800cfa8 	.word	0x0800cfa8
 8003634:	40010800 	.word	0x40010800
 8003638:	2000022f 	.word	0x2000022f
 800363c:	20000211 	.word	0x20000211
 8003640:	2000012c 	.word	0x2000012c
 8003644:	2000022c 	.word	0x2000022c
 8003648:	20000200 	.word	0x20000200
 800364c:	2000020f 	.word	0x2000020f
 8003650:	0800d428 	.word	0x0800d428
 8003654:	0800d43c 	.word	0x0800d43c
 8003658:	0800d450 	.word	0x0800d450
 800365c:	0800d464 	.word	0x0800d464
 8003660:	20000212 	.word	0x20000212
 8003664:	0800d478 	.word	0x0800d478
 8003668:	0800d48c 	.word	0x0800d48c
 800366c:	0800d49c 	.word	0x0800d49c
 8003670:	0800d4b0 	.word	0x0800d4b0
 8003674:	0800d4c0 	.word	0x0800d4c0
		} else if(dilSecim == 1) {
 8003678:	4b9c      	ldr	r3, [pc, #624]	; (80038ec <menu+0x26ec>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d104      	bne.n	800368a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003680:	4a9b      	ldr	r2, [pc, #620]	; (80038f0 <menu+0x26f0>)
 8003682:	2101      	movs	r1, #1
 8003684:	2001      	movs	r0, #1
 8003686:	f004 f8b7 	bl	80077f8 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800368a:	4b9a      	ldr	r3, [pc, #616]	; (80038f4 <menu+0x26f4>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d112      	bne.n	80036b8 <menu+0x24b8>
			if(dilSecim == 0) {
 8003692:	4b96      	ldr	r3, [pc, #600]	; (80038ec <menu+0x26ec>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d104      	bne.n	80036a4 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 800369a:	4a97      	ldr	r2, [pc, #604]	; (80038f8 <menu+0x26f8>)
 800369c:	2101      	movs	r1, #1
 800369e:	2002      	movs	r0, #2
 80036a0:	f004 f8aa 	bl	80077f8 <lcd_print>
			}
			if(dilSecim == 1) {
 80036a4:	4b91      	ldr	r3, [pc, #580]	; (80038ec <menu+0x26ec>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d11c      	bne.n	80036e6 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 80036ac:	4a93      	ldr	r2, [pc, #588]	; (80038fc <menu+0x26fc>)
 80036ae:	2101      	movs	r1, #1
 80036b0:	2002      	movs	r0, #2
 80036b2:	f004 f8a1 	bl	80077f8 <lcd_print>
 80036b6:	e016      	b.n	80036e6 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 80036b8:	4b8e      	ldr	r3, [pc, #568]	; (80038f4 <menu+0x26f4>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d112      	bne.n	80036e6 <menu+0x24e6>
			if(dilSecim == 0) {
 80036c0:	4b8a      	ldr	r3, [pc, #552]	; (80038ec <menu+0x26ec>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d105      	bne.n	80036d4 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 80036c8:	4a8d      	ldr	r2, [pc, #564]	; (8003900 <menu+0x2700>)
 80036ca:	2101      	movs	r1, #1
 80036cc:	2002      	movs	r0, #2
 80036ce:	f004 f893 	bl	80077f8 <lcd_print>
 80036d2:	e008      	b.n	80036e6 <menu+0x24e6>
			} else if(dilSecim == 1) {
 80036d4:	4b85      	ldr	r3, [pc, #532]	; (80038ec <menu+0x26ec>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d104      	bne.n	80036e6 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 80036dc:	4a89      	ldr	r2, [pc, #548]	; (8003904 <menu+0x2704>)
 80036de:	2101      	movs	r1, #1
 80036e0:	2002      	movs	r0, #2
 80036e2:	f004 f889 	bl	80077f8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036e6:	2102      	movs	r1, #2
 80036e8:	4887      	ldr	r0, [pc, #540]	; (8003908 <menu+0x2708>)
 80036ea:	f005 fbab 	bl	8008e44 <HAL_GPIO_ReadPin>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d115      	bne.n	8003720 <menu+0x2520>
 80036f4:	4b85      	ldr	r3, [pc, #532]	; (800390c <menu+0x270c>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	f083 0301 	eor.w	r3, r3, #1
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00e      	beq.n	8003720 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003702:	4b7c      	ldr	r3, [pc, #496]	; (80038f4 <menu+0x26f4>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	3301      	adds	r3, #1
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4b7a      	ldr	r3, [pc, #488]	; (80038f4 <menu+0x26f4>)
 800370c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800370e:	4b79      	ldr	r3, [pc, #484]	; (80038f4 <menu+0x26f4>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d902      	bls.n	800371c <menu+0x251c>
				platformSilindirTipi = 0;
 8003716:	4b77      	ldr	r3, [pc, #476]	; (80038f4 <menu+0x26f4>)
 8003718:	2200      	movs	r2, #0
 800371a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800371c:	f001 f8f8 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003720:	2104      	movs	r1, #4
 8003722:	4879      	ldr	r0, [pc, #484]	; (8003908 <menu+0x2708>)
 8003724:	f005 fb8e 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003728:	4603      	mov	r3, r0
 800372a:	2b01      	cmp	r3, #1
 800372c:	d115      	bne.n	800375a <menu+0x255a>
 800372e:	4b77      	ldr	r3, [pc, #476]	; (800390c <menu+0x270c>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	f083 0301 	eor.w	r3, r3, #1
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00e      	beq.n	800375a <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 800373c:	4b6d      	ldr	r3, [pc, #436]	; (80038f4 <menu+0x26f4>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	3b01      	subs	r3, #1
 8003742:	b2da      	uxtb	r2, r3
 8003744:	4b6b      	ldr	r3, [pc, #428]	; (80038f4 <menu+0x26f4>)
 8003746:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003748:	4b6a      	ldr	r3, [pc, #424]	; (80038f4 <menu+0x26f4>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003750:	4b68      	ldr	r3, [pc, #416]	; (80038f4 <menu+0x26f4>)
 8003752:	2201      	movs	r2, #1
 8003754:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003756:	f001 f8db 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800375a:	2108      	movs	r1, #8
 800375c:	486a      	ldr	r0, [pc, #424]	; (8003908 <menu+0x2708>)
 800375e:	f005 fb71 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003762:	4603      	mov	r3, r0
 8003764:	2b01      	cmp	r3, #1
 8003766:	d118      	bne.n	800379a <menu+0x259a>
 8003768:	4b68      	ldr	r3, [pc, #416]	; (800390c <menu+0x270c>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	f083 0301 	eor.w	r3, r3, #1
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d011      	beq.n	800379a <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003776:	4b5f      	ldr	r3, [pc, #380]	; (80038f4 <menu+0x26f4>)
 8003778:	781a      	ldrb	r2, [r3, #0]
 800377a:	4b65      	ldr	r3, [pc, #404]	; (8003910 <menu+0x2710>)
 800377c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 800377e:	4b5d      	ldr	r3, [pc, #372]	; (80038f4 <menu+0x26f4>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d106      	bne.n	8003794 <menu+0x2594>
				altLimit = 1;
 8003786:	4b63      	ldr	r3, [pc, #396]	; (8003914 <menu+0x2714>)
 8003788:	2201      	movs	r2, #1
 800378a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800378c:	4b61      	ldr	r3, [pc, #388]	; (8003914 <menu+0x2714>)
 800378e:	781a      	ldrb	r2, [r3, #0]
 8003790:	4b5f      	ldr	r3, [pc, #380]	; (8003910 <menu+0x2710>)
 8003792:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003794:	4b60      	ldr	r3, [pc, #384]	; (8003918 <menu+0x2718>)
 8003796:	2201      	movs	r2, #1
 8003798:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 800379a:	4b60      	ldr	r3, [pc, #384]	; (800391c <menu+0x271c>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b16      	cmp	r3, #22
 80037a0:	f040 8081 	bne.w	80038a6 <menu+0x26a6>
		if(dilSecim == 0) {
 80037a4:	4b51      	ldr	r3, [pc, #324]	; (80038ec <menu+0x26ec>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d105      	bne.n	80037b8 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 80037ac:	4a5c      	ldr	r2, [pc, #368]	; (8003920 <menu+0x2720>)
 80037ae:	2101      	movs	r1, #1
 80037b0:	2001      	movs	r0, #1
 80037b2:	f004 f821 	bl	80077f8 <lcd_print>
 80037b6:	e008      	b.n	80037ca <menu+0x25ca>
		} else if(dilSecim == 1) {
 80037b8:	4b4c      	ldr	r3, [pc, #304]	; (80038ec <menu+0x26ec>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d104      	bne.n	80037ca <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 80037c0:	4a58      	ldr	r2, [pc, #352]	; (8003924 <menu+0x2724>)
 80037c2:	2101      	movs	r1, #1
 80037c4:	2001      	movs	r0, #1
 80037c6:	f004 f817 	bl	80077f8 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 80037ca:	4b48      	ldr	r3, [pc, #288]	; (80038ec <menu+0x26ec>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d105      	bne.n	80037de <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 80037d2:	4a55      	ldr	r2, [pc, #340]	; (8003928 <menu+0x2728>)
 80037d4:	2101      	movs	r1, #1
 80037d6:	2002      	movs	r0, #2
 80037d8:	f004 f80e 	bl	80077f8 <lcd_print>
 80037dc:	e008      	b.n	80037f0 <menu+0x25f0>
			} else if(dilSecim == 1){
 80037de:	4b43      	ldr	r3, [pc, #268]	; (80038ec <menu+0x26ec>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d104      	bne.n	80037f0 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 80037e6:	4a51      	ldr	r2, [pc, #324]	; (800392c <menu+0x272c>)
 80037e8:	2101      	movs	r1, #1
 80037ea:	2002      	movs	r0, #2
 80037ec:	f004 f804 	bl	80077f8 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 80037f0:	4b4f      	ldr	r3, [pc, #316]	; (8003930 <menu+0x2730>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	220a      	movs	r2, #10
 80037f6:	494f      	ldr	r1, [pc, #316]	; (8003934 <menu+0x2734>)
 80037f8:	4618      	mov	r0, r3
 80037fa:	f008 fbab 	bl	800bf54 <itoa>
		lcd_print(2,16,snum);
 80037fe:	4a4d      	ldr	r2, [pc, #308]	; (8003934 <menu+0x2734>)
 8003800:	2110      	movs	r1, #16
 8003802:	2002      	movs	r0, #2
 8003804:	f003 fff8 	bl	80077f8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003808:	2102      	movs	r1, #2
 800380a:	483f      	ldr	r0, [pc, #252]	; (8003908 <menu+0x2708>)
 800380c:	f005 fb1a 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003810:	4603      	mov	r3, r0
 8003812:	2b01      	cmp	r3, #1
 8003814:	d115      	bne.n	8003842 <menu+0x2642>
 8003816:	4b3d      	ldr	r3, [pc, #244]	; (800390c <menu+0x270c>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	f083 0301 	eor.w	r3, r3, #1
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00e      	beq.n	8003842 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003824:	4b42      	ldr	r3, [pc, #264]	; (8003930 <menu+0x2730>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	3301      	adds	r3, #1
 800382a:	b2da      	uxtb	r2, r3
 800382c:	4b40      	ldr	r3, [pc, #256]	; (8003930 <menu+0x2730>)
 800382e:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003830:	4b3f      	ldr	r3, [pc, #252]	; (8003930 <menu+0x2730>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b05      	cmp	r3, #5
 8003836:	d902      	bls.n	800383e <menu+0x263e>
				yukariValfTmr = 0;
 8003838:	4b3d      	ldr	r3, [pc, #244]	; (8003930 <menu+0x2730>)
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800383e:	f001 f867 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003842:	2104      	movs	r1, #4
 8003844:	4830      	ldr	r0, [pc, #192]	; (8003908 <menu+0x2708>)
 8003846:	f005 fafd 	bl	8008e44 <HAL_GPIO_ReadPin>
 800384a:	4603      	mov	r3, r0
 800384c:	2b01      	cmp	r3, #1
 800384e:	d115      	bne.n	800387c <menu+0x267c>
 8003850:	4b2e      	ldr	r3, [pc, #184]	; (800390c <menu+0x270c>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	f083 0301 	eor.w	r3, r3, #1
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00e      	beq.n	800387c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 800385e:	4b34      	ldr	r3, [pc, #208]	; (8003930 <menu+0x2730>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	3b01      	subs	r3, #1
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b32      	ldr	r3, [pc, #200]	; (8003930 <menu+0x2730>)
 8003868:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 800386a:	4b31      	ldr	r3, [pc, #196]	; (8003930 <menu+0x2730>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b06      	cmp	r3, #6
 8003870:	d902      	bls.n	8003878 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003872:	4b2f      	ldr	r3, [pc, #188]	; (8003930 <menu+0x2730>)
 8003874:	2205      	movs	r2, #5
 8003876:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003878:	f001 f84a 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800387c:	2108      	movs	r1, #8
 800387e:	4822      	ldr	r0, [pc, #136]	; (8003908 <menu+0x2708>)
 8003880:	f005 fae0 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003884:	4603      	mov	r3, r0
 8003886:	2b01      	cmp	r3, #1
 8003888:	d10d      	bne.n	80038a6 <menu+0x26a6>
 800388a:	4b20      	ldr	r3, [pc, #128]	; (800390c <menu+0x270c>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	f083 0301 	eor.w	r3, r3, #1
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d006      	beq.n	80038a6 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003898:	4b25      	ldr	r3, [pc, #148]	; (8003930 <menu+0x2730>)
 800389a:	781a      	ldrb	r2, [r3, #0]
 800389c:	4b1c      	ldr	r3, [pc, #112]	; (8003910 <menu+0x2710>)
 800389e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <menu+0x2718>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80038a6:	4b1d      	ldr	r3, [pc, #116]	; (800391c <menu+0x271c>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b17      	cmp	r3, #23
 80038ac:	f040 80ac 	bne.w	8003a08 <menu+0x2808>
		if(dilSecim == 0) {
 80038b0:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <menu+0x26ec>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d105      	bne.n	80038c4 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 80038b8:	4a1f      	ldr	r2, [pc, #124]	; (8003938 <menu+0x2738>)
 80038ba:	2101      	movs	r1, #1
 80038bc:	2001      	movs	r0, #1
 80038be:	f003 ff9b 	bl	80077f8 <lcd_print>
 80038c2:	e008      	b.n	80038d6 <menu+0x26d6>
		} else if(dilSecim == 1) {
 80038c4:	4b09      	ldr	r3, [pc, #36]	; (80038ec <menu+0x26ec>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d104      	bne.n	80038d6 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 80038cc:	4a1b      	ldr	r2, [pc, #108]	; (800393c <menu+0x273c>)
 80038ce:	2101      	movs	r1, #1
 80038d0:	2001      	movs	r0, #1
 80038d2:	f003 ff91 	bl	80077f8 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 80038d6:	4b05      	ldr	r3, [pc, #20]	; (80038ec <menu+0x26ec>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d130      	bne.n	8003940 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 80038de:	4a12      	ldr	r2, [pc, #72]	; (8003928 <menu+0x2728>)
 80038e0:	2101      	movs	r1, #1
 80038e2:	2002      	movs	r0, #2
 80038e4:	f003 ff88 	bl	80077f8 <lcd_print>
 80038e8:	e033      	b.n	8003952 <menu+0x2752>
 80038ea:	bf00      	nop
 80038ec:	20000221 	.word	0x20000221
 80038f0:	0800d4d4 	.word	0x0800d4d4
 80038f4:	20000213 	.word	0x20000213
 80038f8:	0800d478 	.word	0x0800d478
 80038fc:	0800d48c 	.word	0x0800d48c
 8003900:	0800d49c 	.word	0x0800d49c
 8003904:	0800d4b0 	.word	0x0800d4b0
 8003908:	40010800 	.word	0x40010800
 800390c:	2000022f 	.word	0x2000022f
 8003910:	2000012c 	.word	0x2000012c
 8003914:	20000206 	.word	0x20000206
 8003918:	2000022c 	.word	0x2000022c
 800391c:	20000200 	.word	0x20000200
 8003920:	0800d4e4 	.word	0x0800d4e4
 8003924:	0800d4f8 	.word	0x0800d4f8
 8003928:	0800d198 	.word	0x0800d198
 800392c:	0800d50c 	.word	0x0800d50c
 8003930:	20000214 	.word	0x20000214
 8003934:	2000019c 	.word	0x2000019c
 8003938:	0800d51c 	.word	0x0800d51c
 800393c:	0800d530 	.word	0x0800d530
			} else if(dilSecim == 1) {
 8003940:	4b98      	ldr	r3, [pc, #608]	; (8003ba4 <menu+0x29a4>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d104      	bne.n	8003952 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003948:	4a97      	ldr	r2, [pc, #604]	; (8003ba8 <menu+0x29a8>)
 800394a:	2101      	movs	r1, #1
 800394c:	2002      	movs	r0, #2
 800394e:	f003 ff53 	bl	80077f8 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003952:	4b96      	ldr	r3, [pc, #600]	; (8003bac <menu+0x29ac>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	220a      	movs	r2, #10
 8003958:	4995      	ldr	r1, [pc, #596]	; (8003bb0 <menu+0x29b0>)
 800395a:	4618      	mov	r0, r3
 800395c:	f008 fafa 	bl	800bf54 <itoa>
		lcd_print(2,16,snum);
 8003960:	4a93      	ldr	r2, [pc, #588]	; (8003bb0 <menu+0x29b0>)
 8003962:	2110      	movs	r1, #16
 8003964:	2002      	movs	r0, #2
 8003966:	f003 ff47 	bl	80077f8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800396a:	2102      	movs	r1, #2
 800396c:	4891      	ldr	r0, [pc, #580]	; (8003bb4 <menu+0x29b4>)
 800396e:	f005 fa69 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003972:	4603      	mov	r3, r0
 8003974:	2b01      	cmp	r3, #1
 8003976:	d115      	bne.n	80039a4 <menu+0x27a4>
 8003978:	4b8f      	ldr	r3, [pc, #572]	; (8003bb8 <menu+0x29b8>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	f083 0301 	eor.w	r3, r3, #1
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00e      	beq.n	80039a4 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003986:	4b89      	ldr	r3, [pc, #548]	; (8003bac <menu+0x29ac>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	3301      	adds	r3, #1
 800398c:	b2da      	uxtb	r2, r3
 800398e:	4b87      	ldr	r3, [pc, #540]	; (8003bac <menu+0x29ac>)
 8003990:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003992:	4b86      	ldr	r3, [pc, #536]	; (8003bac <menu+0x29ac>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b05      	cmp	r3, #5
 8003998:	d902      	bls.n	80039a0 <menu+0x27a0>
				asagiValfTmr = 0;
 800399a:	4b84      	ldr	r3, [pc, #528]	; (8003bac <menu+0x29ac>)
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039a0:	f000 ffb6 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039a4:	2104      	movs	r1, #4
 80039a6:	4883      	ldr	r0, [pc, #524]	; (8003bb4 <menu+0x29b4>)
 80039a8:	f005 fa4c 	bl	8008e44 <HAL_GPIO_ReadPin>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d115      	bne.n	80039de <menu+0x27de>
 80039b2:	4b81      	ldr	r3, [pc, #516]	; (8003bb8 <menu+0x29b8>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	f083 0301 	eor.w	r3, r3, #1
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00e      	beq.n	80039de <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 80039c0:	4b7a      	ldr	r3, [pc, #488]	; (8003bac <menu+0x29ac>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	4b78      	ldr	r3, [pc, #480]	; (8003bac <menu+0x29ac>)
 80039ca:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 80039cc:	4b77      	ldr	r3, [pc, #476]	; (8003bac <menu+0x29ac>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b06      	cmp	r3, #6
 80039d2:	d902      	bls.n	80039da <menu+0x27da>
		   		asagiValfTmr = 5;
 80039d4:	4b75      	ldr	r3, [pc, #468]	; (8003bac <menu+0x29ac>)
 80039d6:	2205      	movs	r2, #5
 80039d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039da:	f000 ff99 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039de:	2108      	movs	r1, #8
 80039e0:	4874      	ldr	r0, [pc, #464]	; (8003bb4 <menu+0x29b4>)
 80039e2:	f005 fa2f 	bl	8008e44 <HAL_GPIO_ReadPin>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d10d      	bne.n	8003a08 <menu+0x2808>
 80039ec:	4b72      	ldr	r3, [pc, #456]	; (8003bb8 <menu+0x29b8>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	f083 0301 	eor.w	r3, r3, #1
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d006      	beq.n	8003a08 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 80039fa:	4b6c      	ldr	r3, [pc, #432]	; (8003bac <menu+0x29ac>)
 80039fc:	781a      	ldrb	r2, [r3, #0]
 80039fe:	4b6f      	ldr	r3, [pc, #444]	; (8003bbc <menu+0x29bc>)
 8003a00:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003a02:	4b6f      	ldr	r3, [pc, #444]	; (8003bc0 <menu+0x29c0>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003a08:	4b6e      	ldr	r3, [pc, #440]	; (8003bc4 <menu+0x29c4>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b18      	cmp	r3, #24
 8003a0e:	f040 809d 	bne.w	8003b4c <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003a12:	4b6d      	ldr	r3, [pc, #436]	; (8003bc8 <menu+0x29c8>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d113      	bne.n	8003a42 <menu+0x2842>
			if(dilSecim == 0) {
 8003a1a:	4b62      	ldr	r3, [pc, #392]	; (8003ba4 <menu+0x29a4>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d105      	bne.n	8003a2e <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003a22:	4a6a      	ldr	r2, [pc, #424]	; (8003bcc <menu+0x29cc>)
 8003a24:	2101      	movs	r1, #1
 8003a26:	2001      	movs	r0, #1
 8003a28:	f003 fee6 	bl	80077f8 <lcd_print>
 8003a2c:	e020      	b.n	8003a70 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003a2e:	4b5d      	ldr	r3, [pc, #372]	; (8003ba4 <menu+0x29a4>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d11c      	bne.n	8003a70 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003a36:	4a66      	ldr	r2, [pc, #408]	; (8003bd0 <menu+0x29d0>)
 8003a38:	2101      	movs	r1, #1
 8003a3a:	2001      	movs	r0, #1
 8003a3c:	f003 fedc 	bl	80077f8 <lcd_print>
 8003a40:	e016      	b.n	8003a70 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003a42:	4b61      	ldr	r3, [pc, #388]	; (8003bc8 <menu+0x29c8>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d112      	bne.n	8003a70 <menu+0x2870>
			if(dilSecim == 0) {
 8003a4a:	4b56      	ldr	r3, [pc, #344]	; (8003ba4 <menu+0x29a4>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d105      	bne.n	8003a5e <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003a52:	4a60      	ldr	r2, [pc, #384]	; (8003bd4 <menu+0x29d4>)
 8003a54:	2101      	movs	r1, #1
 8003a56:	2001      	movs	r0, #1
 8003a58:	f003 fece 	bl	80077f8 <lcd_print>
 8003a5c:	e008      	b.n	8003a70 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003a5e:	4b51      	ldr	r3, [pc, #324]	; (8003ba4 <menu+0x29a4>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d104      	bne.n	8003a70 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003a66:	4a5c      	ldr	r2, [pc, #368]	; (8003bd8 <menu+0x29d8>)
 8003a68:	2101      	movs	r1, #1
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	f003 fec4 	bl	80077f8 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003a70:	4b4c      	ldr	r3, [pc, #304]	; (8003ba4 <menu+0x29a4>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d105      	bne.n	8003a84 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a78:	4a58      	ldr	r2, [pc, #352]	; (8003bdc <menu+0x29dc>)
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	2002      	movs	r0, #2
 8003a7e:	f003 febb 	bl	80077f8 <lcd_print>
 8003a82:	e008      	b.n	8003a96 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003a84:	4b47      	ldr	r3, [pc, #284]	; (8003ba4 <menu+0x29a4>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d104      	bne.n	8003a96 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003a8c:	4a46      	ldr	r2, [pc, #280]	; (8003ba8 <menu+0x29a8>)
 8003a8e:	2101      	movs	r1, #1
 8003a90:	2002      	movs	r0, #2
 8003a92:	f003 feb1 	bl	80077f8 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003a96:	4b52      	ldr	r3, [pc, #328]	; (8003be0 <menu+0x29e0>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	220a      	movs	r2, #10
 8003a9c:	4944      	ldr	r1, [pc, #272]	; (8003bb0 <menu+0x29b0>)
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f008 fa58 	bl	800bf54 <itoa>
		lcd_print(2, 16, snum);
 8003aa4:	4a42      	ldr	r2, [pc, #264]	; (8003bb0 <menu+0x29b0>)
 8003aa6:	2110      	movs	r1, #16
 8003aa8:	2002      	movs	r0, #2
 8003aaa:	f003 fea5 	bl	80077f8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aae:	2102      	movs	r1, #2
 8003ab0:	4840      	ldr	r0, [pc, #256]	; (8003bb4 <menu+0x29b4>)
 8003ab2:	f005 f9c7 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d115      	bne.n	8003ae8 <menu+0x28e8>
 8003abc:	4b3e      	ldr	r3, [pc, #248]	; (8003bb8 <menu+0x29b8>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	f083 0301 	eor.w	r3, r3, #1
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00e      	beq.n	8003ae8 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003aca:	4b45      	ldr	r3, [pc, #276]	; (8003be0 <menu+0x29e0>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	4b43      	ldr	r3, [pc, #268]	; (8003be0 <menu+0x29e0>)
 8003ad4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003ad6:	4b42      	ldr	r3, [pc, #264]	; (8003be0 <menu+0x29e0>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b05      	cmp	r3, #5
 8003adc:	d902      	bls.n	8003ae4 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003ade:	4b40      	ldr	r3, [pc, #256]	; (8003be0 <menu+0x29e0>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ae4:	f000 ff14 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ae8:	2104      	movs	r1, #4
 8003aea:	4832      	ldr	r0, [pc, #200]	; (8003bb4 <menu+0x29b4>)
 8003aec:	f005 f9aa 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d115      	bne.n	8003b22 <menu+0x2922>
 8003af6:	4b30      	ldr	r3, [pc, #192]	; (8003bb8 <menu+0x29b8>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	f083 0301 	eor.w	r3, r3, #1
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00e      	beq.n	8003b22 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003b04:	4b36      	ldr	r3, [pc, #216]	; (8003be0 <menu+0x29e0>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	4b34      	ldr	r3, [pc, #208]	; (8003be0 <menu+0x29e0>)
 8003b0e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003b10:	4b33      	ldr	r3, [pc, #204]	; (8003be0 <menu+0x29e0>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b06      	cmp	r3, #6
 8003b16:	d902      	bls.n	8003b1e <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003b18:	4b31      	ldr	r3, [pc, #196]	; (8003be0 <menu+0x29e0>)
 8003b1a:	2205      	movs	r2, #5
 8003b1c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b1e:	f000 fef7 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b22:	2108      	movs	r1, #8
 8003b24:	4823      	ldr	r0, [pc, #140]	; (8003bb4 <menu+0x29b4>)
 8003b26:	f005 f98d 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d10d      	bne.n	8003b4c <menu+0x294c>
 8003b30:	4b21      	ldr	r3, [pc, #132]	; (8003bb8 <menu+0x29b8>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	f083 0301 	eor.w	r3, r3, #1
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d006      	beq.n	8003b4c <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003b3e:	4b28      	ldr	r3, [pc, #160]	; (8003be0 <menu+0x29e0>)
 8003b40:	781a      	ldrb	r2, [r3, #0]
 8003b42:	4b1e      	ldr	r3, [pc, #120]	; (8003bbc <menu+0x29bc>)
 8003b44:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003b46:	4b1e      	ldr	r3, [pc, #120]	; (8003bc0 <menu+0x29c0>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003b4c:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <menu+0x29c4>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b19      	cmp	r3, #25
 8003b52:	f040 80c4 	bne.w	8003cde <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003b56:	4b1c      	ldr	r3, [pc, #112]	; (8003bc8 <menu+0x29c8>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d113      	bne.n	8003b86 <menu+0x2986>
			if(dilSecim == 0) {
 8003b5e:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <menu+0x29a4>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d105      	bne.n	8003b72 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003b66:	4a1f      	ldr	r2, [pc, #124]	; (8003be4 <menu+0x29e4>)
 8003b68:	2101      	movs	r1, #1
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	f003 fe44 	bl	80077f8 <lcd_print>
 8003b70:	e047      	b.n	8003c02 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003b72:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <menu+0x29a4>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d143      	bne.n	8003c02 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003b7a:	4a1b      	ldr	r2, [pc, #108]	; (8003be8 <menu+0x29e8>)
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	2001      	movs	r0, #1
 8003b80:	f003 fe3a 	bl	80077f8 <lcd_print>
 8003b84:	e03d      	b.n	8003c02 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003b86:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <menu+0x29c8>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d139      	bne.n	8003c02 <menu+0x2a02>
			if(dilSecim == 0) {
 8003b8e:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <menu+0x29a4>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d12c      	bne.n	8003bf0 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003b96:	4a15      	ldr	r2, [pc, #84]	; (8003bec <menu+0x29ec>)
 8003b98:	2101      	movs	r1, #1
 8003b9a:	2001      	movs	r0, #1
 8003b9c:	f003 fe2c 	bl	80077f8 <lcd_print>
 8003ba0:	e02f      	b.n	8003c02 <menu+0x2a02>
 8003ba2:	bf00      	nop
 8003ba4:	20000221 	.word	0x20000221
 8003ba8:	0800d50c 	.word	0x0800d50c
 8003bac:	20000215 	.word	0x20000215
 8003bb0:	2000019c 	.word	0x2000019c
 8003bb4:	40010800 	.word	0x40010800
 8003bb8:	2000022f 	.word	0x2000022f
 8003bbc:	2000012c 	.word	0x2000012c
 8003bc0:	2000022c 	.word	0x2000022c
 8003bc4:	20000200 	.word	0x20000200
 8003bc8:	2000020f 	.word	0x2000020f
 8003bcc:	0800d544 	.word	0x0800d544
 8003bd0:	0800d558 	.word	0x0800d558
 8003bd4:	0800d56c 	.word	0x0800d56c
 8003bd8:	0800d580 	.word	0x0800d580
 8003bdc:	0800d198 	.word	0x0800d198
 8003be0:	20000216 	.word	0x20000216
 8003be4:	0800d594 	.word	0x0800d594
 8003be8:	0800d5a8 	.word	0x0800d5a8
 8003bec:	0800d5bc 	.word	0x0800d5bc
			} else if(dilSecim == 1) {
 8003bf0:	4b73      	ldr	r3, [pc, #460]	; (8003dc0 <menu+0x2bc0>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d104      	bne.n	8003c02 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003bf8:	4a72      	ldr	r2, [pc, #456]	; (8003dc4 <menu+0x2bc4>)
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	f003 fdfb 	bl	80077f8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003c02:	4b6f      	ldr	r3, [pc, #444]	; (8003dc0 <menu+0x2bc0>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d105      	bne.n	8003c16 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c0a:	4a6f      	ldr	r2, [pc, #444]	; (8003dc8 <menu+0x2bc8>)
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	2002      	movs	r0, #2
 8003c10:	f003 fdf2 	bl	80077f8 <lcd_print>
 8003c14:	e008      	b.n	8003c28 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003c16:	4b6a      	ldr	r3, [pc, #424]	; (8003dc0 <menu+0x2bc0>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d104      	bne.n	8003c28 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003c1e:	4a6b      	ldr	r2, [pc, #428]	; (8003dcc <menu+0x2bcc>)
 8003c20:	2101      	movs	r1, #1
 8003c22:	2002      	movs	r0, #2
 8003c24:	f003 fde8 	bl	80077f8 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003c28:	4b69      	ldr	r3, [pc, #420]	; (8003dd0 <menu+0x2bd0>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	220a      	movs	r2, #10
 8003c2e:	4969      	ldr	r1, [pc, #420]	; (8003dd4 <menu+0x2bd4>)
 8003c30:	4618      	mov	r0, r3
 8003c32:	f008 f98f 	bl	800bf54 <itoa>
		lcd_print(2,16,snum);
 8003c36:	4a67      	ldr	r2, [pc, #412]	; (8003dd4 <menu+0x2bd4>)
 8003c38:	2110      	movs	r1, #16
 8003c3a:	2002      	movs	r0, #2
 8003c3c:	f003 fddc 	bl	80077f8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c40:	2102      	movs	r1, #2
 8003c42:	4865      	ldr	r0, [pc, #404]	; (8003dd8 <menu+0x2bd8>)
 8003c44:	f005 f8fe 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d115      	bne.n	8003c7a <menu+0x2a7a>
 8003c4e:	4b63      	ldr	r3, [pc, #396]	; (8003ddc <menu+0x2bdc>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	f083 0301 	eor.w	r3, r3, #1
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00e      	beq.n	8003c7a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003c5c:	4b5c      	ldr	r3, [pc, #368]	; (8003dd0 <menu+0x2bd0>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	4b5a      	ldr	r3, [pc, #360]	; (8003dd0 <menu+0x2bd0>)
 8003c66:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003c68:	4b59      	ldr	r3, [pc, #356]	; (8003dd0 <menu+0x2bd0>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b05      	cmp	r3, #5
 8003c6e:	d902      	bls.n	8003c76 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003c70:	4b57      	ldr	r3, [pc, #348]	; (8003dd0 <menu+0x2bd0>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c76:	f000 fe4b 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c7a:	2104      	movs	r1, #4
 8003c7c:	4856      	ldr	r0, [pc, #344]	; (8003dd8 <menu+0x2bd8>)
 8003c7e:	f005 f8e1 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d115      	bne.n	8003cb4 <menu+0x2ab4>
 8003c88:	4b54      	ldr	r3, [pc, #336]	; (8003ddc <menu+0x2bdc>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	f083 0301 	eor.w	r3, r3, #1
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00e      	beq.n	8003cb4 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003c96:	4b4e      	ldr	r3, [pc, #312]	; (8003dd0 <menu+0x2bd0>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	4b4c      	ldr	r3, [pc, #304]	; (8003dd0 <menu+0x2bd0>)
 8003ca0:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003ca2:	4b4b      	ldr	r3, [pc, #300]	; (8003dd0 <menu+0x2bd0>)
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b06      	cmp	r3, #6
 8003ca8:	d902      	bls.n	8003cb0 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003caa:	4b49      	ldr	r3, [pc, #292]	; (8003dd0 <menu+0x2bd0>)
 8003cac:	2205      	movs	r2, #5
 8003cae:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003cb0:	f000 fe2e 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cb4:	2108      	movs	r1, #8
 8003cb6:	4848      	ldr	r0, [pc, #288]	; (8003dd8 <menu+0x2bd8>)
 8003cb8:	f005 f8c4 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d10d      	bne.n	8003cde <menu+0x2ade>
 8003cc2:	4b46      	ldr	r3, [pc, #280]	; (8003ddc <menu+0x2bdc>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	f083 0301 	eor.w	r3, r3, #1
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d006      	beq.n	8003cde <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003cd0:	4b3f      	ldr	r3, [pc, #252]	; (8003dd0 <menu+0x2bd0>)
 8003cd2:	781a      	ldrb	r2, [r3, #0]
 8003cd4:	4b42      	ldr	r3, [pc, #264]	; (8003de0 <menu+0x2be0>)
 8003cd6:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003cd8:	4b42      	ldr	r3, [pc, #264]	; (8003de4 <menu+0x2be4>)
 8003cda:	2201      	movs	r2, #1
 8003cdc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003cde:	4b42      	ldr	r3, [pc, #264]	; (8003de8 <menu+0x2be8>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b1a      	cmp	r3, #26
 8003ce4:	f040 80ec 	bne.w	8003ec0 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003ce8:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <menu+0x2bc0>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d105      	bne.n	8003cfc <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003cf0:	4a3e      	ldr	r2, [pc, #248]	; (8003dec <menu+0x2bec>)
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	f003 fd7f 	bl	80077f8 <lcd_print>
 8003cfa:	e008      	b.n	8003d0e <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003cfc:	4b30      	ldr	r3, [pc, #192]	; (8003dc0 <menu+0x2bc0>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d104      	bne.n	8003d0e <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003d04:	4a3a      	ldr	r2, [pc, #232]	; (8003df0 <menu+0x2bf0>)
 8003d06:	2101      	movs	r1, #1
 8003d08:	2001      	movs	r0, #1
 8003d0a:	f003 fd75 	bl	80077f8 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003d0e:	4b39      	ldr	r3, [pc, #228]	; (8003df4 <menu+0x2bf4>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b63      	cmp	r3, #99	; 0x63
 8003d14:	d91e      	bls.n	8003d54 <menu+0x2b54>
			if(dilSecim == 0) {
 8003d16:	4b2a      	ldr	r3, [pc, #168]	; (8003dc0 <menu+0x2bc0>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d104      	bne.n	8003d28 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d1e:	4a2a      	ldr	r2, [pc, #168]	; (8003dc8 <menu+0x2bc8>)
 8003d20:	2101      	movs	r1, #1
 8003d22:	2002      	movs	r0, #2
 8003d24:	f003 fd68 	bl	80077f8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003d28:	4b25      	ldr	r3, [pc, #148]	; (8003dc0 <menu+0x2bc0>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d104      	bne.n	8003d3a <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003d30:	4a26      	ldr	r2, [pc, #152]	; (8003dcc <menu+0x2bcc>)
 8003d32:	2101      	movs	r1, #1
 8003d34:	2002      	movs	r0, #2
 8003d36:	f003 fd5f 	bl	80077f8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003d3a:	4b2e      	ldr	r3, [pc, #184]	; (8003df4 <menu+0x2bf4>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	220a      	movs	r2, #10
 8003d40:	4924      	ldr	r1, [pc, #144]	; (8003dd4 <menu+0x2bd4>)
 8003d42:	4618      	mov	r0, r3
 8003d44:	f008 f906 	bl	800bf54 <itoa>
			lcd_print(2,14,snum);
 8003d48:	4a22      	ldr	r2, [pc, #136]	; (8003dd4 <menu+0x2bd4>)
 8003d4a:	210e      	movs	r1, #14
 8003d4c:	2002      	movs	r0, #2
 8003d4e:	f003 fd53 	bl	80077f8 <lcd_print>
 8003d52:	e066      	b.n	8003e22 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003d54:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <menu+0x2bf4>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b09      	cmp	r3, #9
 8003d5a:	d923      	bls.n	8003da4 <menu+0x2ba4>
 8003d5c:	4b25      	ldr	r3, [pc, #148]	; (8003df4 <menu+0x2bf4>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b63      	cmp	r3, #99	; 0x63
 8003d62:	d81f      	bhi.n	8003da4 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003d64:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <menu+0x2bc0>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d105      	bne.n	8003d78 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d6c:	4a16      	ldr	r2, [pc, #88]	; (8003dc8 <menu+0x2bc8>)
 8003d6e:	2101      	movs	r1, #1
 8003d70:	2002      	movs	r0, #2
 8003d72:	f003 fd41 	bl	80077f8 <lcd_print>
 8003d76:	e008      	b.n	8003d8a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003d78:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <menu+0x2bc0>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d104      	bne.n	8003d8a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003d80:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <menu+0x2bcc>)
 8003d82:	2101      	movs	r1, #1
 8003d84:	2002      	movs	r0, #2
 8003d86:	f003 fd37 	bl	80077f8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003d8a:	4b1a      	ldr	r3, [pc, #104]	; (8003df4 <menu+0x2bf4>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	220a      	movs	r2, #10
 8003d90:	4910      	ldr	r1, [pc, #64]	; (8003dd4 <menu+0x2bd4>)
 8003d92:	4618      	mov	r0, r3
 8003d94:	f008 f8de 	bl	800bf54 <itoa>
			lcd_print(2, 15, snum);
 8003d98:	4a0e      	ldr	r2, [pc, #56]	; (8003dd4 <menu+0x2bd4>)
 8003d9a:	210f      	movs	r1, #15
 8003d9c:	2002      	movs	r0, #2
 8003d9e:	f003 fd2b 	bl	80077f8 <lcd_print>
 8003da2:	e03e      	b.n	8003e22 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003da4:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <menu+0x2bf4>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b09      	cmp	r3, #9
 8003daa:	d83a      	bhi.n	8003e22 <menu+0x2c22>
			if(dilSecim == 0) {
 8003dac:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <menu+0x2bc0>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d121      	bne.n	8003df8 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003db4:	4a04      	ldr	r2, [pc, #16]	; (8003dc8 <menu+0x2bc8>)
 8003db6:	2101      	movs	r1, #1
 8003db8:	2002      	movs	r0, #2
 8003dba:	f003 fd1d 	bl	80077f8 <lcd_print>
 8003dbe:	e024      	b.n	8003e0a <menu+0x2c0a>
 8003dc0:	20000221 	.word	0x20000221
 8003dc4:	0800d5d0 	.word	0x0800d5d0
 8003dc8:	0800d198 	.word	0x0800d198
 8003dcc:	0800d50c 	.word	0x0800d50c
 8003dd0:	20000217 	.word	0x20000217
 8003dd4:	2000019c 	.word	0x2000019c
 8003dd8:	40010800 	.word	0x40010800
 8003ddc:	2000022f 	.word	0x2000022f
 8003de0:	2000012c 	.word	0x2000012c
 8003de4:	2000022c 	.word	0x2000022c
 8003de8:	20000200 	.word	0x20000200
 8003dec:	0800d5e4 	.word	0x0800d5e4
 8003df0:	0800d5f8 	.word	0x0800d5f8
 8003df4:	20000218 	.word	0x20000218
			} else if(dilSecim == 1) {
 8003df8:	4b8f      	ldr	r3, [pc, #572]	; (8004038 <menu+0x2e38>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d104      	bne.n	8003e0a <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003e00:	4a8e      	ldr	r2, [pc, #568]	; (800403c <menu+0x2e3c>)
 8003e02:	2101      	movs	r1, #1
 8003e04:	2002      	movs	r0, #2
 8003e06:	f003 fcf7 	bl	80077f8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003e0a:	4b8d      	ldr	r3, [pc, #564]	; (8004040 <menu+0x2e40>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	220a      	movs	r2, #10
 8003e10:	498c      	ldr	r1, [pc, #560]	; (8004044 <menu+0x2e44>)
 8003e12:	4618      	mov	r0, r3
 8003e14:	f008 f89e 	bl	800bf54 <itoa>
			lcd_print(2, 16, snum);
 8003e18:	4a8a      	ldr	r2, [pc, #552]	; (8004044 <menu+0x2e44>)
 8003e1a:	2110      	movs	r1, #16
 8003e1c:	2002      	movs	r0, #2
 8003e1e:	f003 fceb 	bl	80077f8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e22:	2102      	movs	r1, #2
 8003e24:	4888      	ldr	r0, [pc, #544]	; (8004048 <menu+0x2e48>)
 8003e26:	f005 f80d 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d115      	bne.n	8003e5c <menu+0x2c5c>
 8003e30:	4b86      	ldr	r3, [pc, #536]	; (800404c <menu+0x2e4c>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	f083 0301 	eor.w	r3, r3, #1
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00e      	beq.n	8003e5c <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003e3e:	4b80      	ldr	r3, [pc, #512]	; (8004040 <menu+0x2e40>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	3301      	adds	r3, #1
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	4b7e      	ldr	r3, [pc, #504]	; (8004040 <menu+0x2e40>)
 8003e48:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003e4a:	4b7d      	ldr	r3, [pc, #500]	; (8004040 <menu+0x2e40>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2bb4      	cmp	r3, #180	; 0xb4
 8003e50:	d902      	bls.n	8003e58 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003e52:	4b7b      	ldr	r3, [pc, #492]	; (8004040 <menu+0x2e40>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e58:	f000 fd5a 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e5c:	2104      	movs	r1, #4
 8003e5e:	487a      	ldr	r0, [pc, #488]	; (8004048 <menu+0x2e48>)
 8003e60:	f004 fff0 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d115      	bne.n	8003e96 <menu+0x2c96>
 8003e6a:	4b78      	ldr	r3, [pc, #480]	; (800404c <menu+0x2e4c>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	f083 0301 	eor.w	r3, r3, #1
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00e      	beq.n	8003e96 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003e78:	4b71      	ldr	r3, [pc, #452]	; (8004040 <menu+0x2e40>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	4b6f      	ldr	r3, [pc, #444]	; (8004040 <menu+0x2e40>)
 8003e82:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003e84:	4b6e      	ldr	r3, [pc, #440]	; (8004040 <menu+0x2e40>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2bb5      	cmp	r3, #181	; 0xb5
 8003e8a:	d902      	bls.n	8003e92 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003e8c:	4b6c      	ldr	r3, [pc, #432]	; (8004040 <menu+0x2e40>)
 8003e8e:	22b4      	movs	r2, #180	; 0xb4
 8003e90:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e92:	f000 fd3d 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e96:	2108      	movs	r1, #8
 8003e98:	486b      	ldr	r0, [pc, #428]	; (8004048 <menu+0x2e48>)
 8003e9a:	f004 ffd3 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d10d      	bne.n	8003ec0 <menu+0x2cc0>
 8003ea4:	4b69      	ldr	r3, [pc, #420]	; (800404c <menu+0x2e4c>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	f083 0301 	eor.w	r3, r3, #1
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d006      	beq.n	8003ec0 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003eb2:	4b63      	ldr	r3, [pc, #396]	; (8004040 <menu+0x2e40>)
 8003eb4:	781a      	ldrb	r2, [r3, #0]
 8003eb6:	4b66      	ldr	r3, [pc, #408]	; (8004050 <menu+0x2e50>)
 8003eb8:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003eba:	4b66      	ldr	r3, [pc, #408]	; (8004054 <menu+0x2e54>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003ec0:	4b65      	ldr	r3, [pc, #404]	; (8004058 <menu+0x2e58>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b1b      	cmp	r3, #27
 8003ec6:	f040 8083 	bne.w	8003fd0 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003eca:	4a64      	ldr	r2, [pc, #400]	; (800405c <menu+0x2e5c>)
 8003ecc:	2101      	movs	r1, #1
 8003ece:	2001      	movs	r0, #1
 8003ed0:	f003 fc92 	bl	80077f8 <lcd_print>

		if(buzzer == 0) {
 8003ed4:	4b62      	ldr	r3, [pc, #392]	; (8004060 <menu+0x2e60>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d113      	bne.n	8003f04 <menu+0x2d04>
			if(dilSecim == 0) {
 8003edc:	4b56      	ldr	r3, [pc, #344]	; (8004038 <menu+0x2e38>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d105      	bne.n	8003ef0 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003ee4:	4a5f      	ldr	r2, [pc, #380]	; (8004064 <menu+0x2e64>)
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	2002      	movs	r0, #2
 8003eea:	f003 fc85 	bl	80077f8 <lcd_print>
 8003eee:	e020      	b.n	8003f32 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003ef0:	4b51      	ldr	r3, [pc, #324]	; (8004038 <menu+0x2e38>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d11c      	bne.n	8003f32 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003ef8:	4a5b      	ldr	r2, [pc, #364]	; (8004068 <menu+0x2e68>)
 8003efa:	2101      	movs	r1, #1
 8003efc:	2002      	movs	r0, #2
 8003efe:	f003 fc7b 	bl	80077f8 <lcd_print>
 8003f02:	e016      	b.n	8003f32 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003f04:	4b56      	ldr	r3, [pc, #344]	; (8004060 <menu+0x2e60>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d112      	bne.n	8003f32 <menu+0x2d32>
			if(dilSecim == 0) {
 8003f0c:	4b4a      	ldr	r3, [pc, #296]	; (8004038 <menu+0x2e38>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d105      	bne.n	8003f20 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003f14:	4a55      	ldr	r2, [pc, #340]	; (800406c <menu+0x2e6c>)
 8003f16:	2101      	movs	r1, #1
 8003f18:	2002      	movs	r0, #2
 8003f1a:	f003 fc6d 	bl	80077f8 <lcd_print>
 8003f1e:	e008      	b.n	8003f32 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003f20:	4b45      	ldr	r3, [pc, #276]	; (8004038 <menu+0x2e38>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d104      	bne.n	8003f32 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003f28:	4a51      	ldr	r2, [pc, #324]	; (8004070 <menu+0x2e70>)
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	2002      	movs	r0, #2
 8003f2e:	f003 fc63 	bl	80077f8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f32:	2102      	movs	r1, #2
 8003f34:	4844      	ldr	r0, [pc, #272]	; (8004048 <menu+0x2e48>)
 8003f36:	f004 ff85 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d115      	bne.n	8003f6c <menu+0x2d6c>
 8003f40:	4b42      	ldr	r3, [pc, #264]	; (800404c <menu+0x2e4c>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	f083 0301 	eor.w	r3, r3, #1
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00e      	beq.n	8003f6c <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003f4e:	4b44      	ldr	r3, [pc, #272]	; (8004060 <menu+0x2e60>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	3301      	adds	r3, #1
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	4b42      	ldr	r3, [pc, #264]	; (8004060 <menu+0x2e60>)
 8003f58:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003f5a:	4b41      	ldr	r3, [pc, #260]	; (8004060 <menu+0x2e60>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d902      	bls.n	8003f68 <menu+0x2d68>
				buzzer = 0;
 8003f62:	4b3f      	ldr	r3, [pc, #252]	; (8004060 <menu+0x2e60>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f68:	f000 fcd2 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f6c:	2104      	movs	r1, #4
 8003f6e:	4836      	ldr	r0, [pc, #216]	; (8004048 <menu+0x2e48>)
 8003f70:	f004 ff68 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d115      	bne.n	8003fa6 <menu+0x2da6>
 8003f7a:	4b34      	ldr	r3, [pc, #208]	; (800404c <menu+0x2e4c>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	f083 0301 	eor.w	r3, r3, #1
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00e      	beq.n	8003fa6 <menu+0x2da6>
			buzzer = buzzer - 1;
 8003f88:	4b35      	ldr	r3, [pc, #212]	; (8004060 <menu+0x2e60>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	4b33      	ldr	r3, [pc, #204]	; (8004060 <menu+0x2e60>)
 8003f92:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003f94:	4b32      	ldr	r3, [pc, #200]	; (8004060 <menu+0x2e60>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <menu+0x2da2>
		   		buzzer = 1;
 8003f9c:	4b30      	ldr	r3, [pc, #192]	; (8004060 <menu+0x2e60>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003fa2:	f000 fcb5 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fa6:	2108      	movs	r1, #8
 8003fa8:	4827      	ldr	r0, [pc, #156]	; (8004048 <menu+0x2e48>)
 8003faa:	f004 ff4b 	bl	8008e44 <HAL_GPIO_ReadPin>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d10d      	bne.n	8003fd0 <menu+0x2dd0>
 8003fb4:	4b25      	ldr	r3, [pc, #148]	; (800404c <menu+0x2e4c>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	f083 0301 	eor.w	r3, r3, #1
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d006      	beq.n	8003fd0 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003fc2:	4b27      	ldr	r3, [pc, #156]	; (8004060 <menu+0x2e60>)
 8003fc4:	781a      	ldrb	r2, [r3, #0]
 8003fc6:	4b22      	ldr	r3, [pc, #136]	; (8004050 <menu+0x2e50>)
 8003fc8:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003fca:	4b22      	ldr	r3, [pc, #136]	; (8004054 <menu+0x2e54>)
 8003fcc:	2201      	movs	r2, #1
 8003fce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003fd0:	4b21      	ldr	r3, [pc, #132]	; (8004058 <menu+0x2e58>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b1c      	cmp	r3, #28
 8003fd6:	f040 80ab 	bne.w	8004130 <menu+0x2f30>
		calismaSayModu = 0;
 8003fda:	4b26      	ldr	r3, [pc, #152]	; (8004074 <menu+0x2e74>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003fe0:	4a25      	ldr	r2, [pc, #148]	; (8004078 <menu+0x2e78>)
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	f003 fc07 	bl	80077f8 <lcd_print>

		if(demoMode == 0) {
 8003fea:	4b24      	ldr	r3, [pc, #144]	; (800407c <menu+0x2e7c>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d113      	bne.n	800401a <menu+0x2e1a>
			if(dilSecim == 0) {
 8003ff2:	4b11      	ldr	r3, [pc, #68]	; (8004038 <menu+0x2e38>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d105      	bne.n	8004006 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8003ffa:	4a1a      	ldr	r2, [pc, #104]	; (8004064 <menu+0x2e64>)
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	2002      	movs	r0, #2
 8004000:	f003 fbfa 	bl	80077f8 <lcd_print>
 8004004:	e045      	b.n	8004092 <menu+0x2e92>
			} else if(dilSecim == 1) {
 8004006:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <menu+0x2e38>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d141      	bne.n	8004092 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 800400e:	4a16      	ldr	r2, [pc, #88]	; (8004068 <menu+0x2e68>)
 8004010:	2101      	movs	r1, #1
 8004012:	2002      	movs	r0, #2
 8004014:	f003 fbf0 	bl	80077f8 <lcd_print>
 8004018:	e03b      	b.n	8004092 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 800401a:	4b18      	ldr	r3, [pc, #96]	; (800407c <menu+0x2e7c>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d137      	bne.n	8004092 <menu+0x2e92>
			if(dilSecim == 0){
 8004022:	4b05      	ldr	r3, [pc, #20]	; (8004038 <menu+0x2e38>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d12a      	bne.n	8004080 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 800402a:	4a10      	ldr	r2, [pc, #64]	; (800406c <menu+0x2e6c>)
 800402c:	2101      	movs	r1, #1
 800402e:	2002      	movs	r0, #2
 8004030:	f003 fbe2 	bl	80077f8 <lcd_print>
 8004034:	e02d      	b.n	8004092 <menu+0x2e92>
 8004036:	bf00      	nop
 8004038:	20000221 	.word	0x20000221
 800403c:	0800d50c 	.word	0x0800d50c
 8004040:	20000218 	.word	0x20000218
 8004044:	2000019c 	.word	0x2000019c
 8004048:	40010800 	.word	0x40010800
 800404c:	2000022f 	.word	0x2000022f
 8004050:	2000012c 	.word	0x2000012c
 8004054:	2000022c 	.word	0x2000022c
 8004058:	20000200 	.word	0x20000200
 800405c:	0800d60c 	.word	0x0800d60c
 8004060:	2000021c 	.word	0x2000021c
 8004064:	0800cf34 	.word	0x0800cf34
 8004068:	0800cf48 	.word	0x0800cf48
 800406c:	0800cf94 	.word	0x0800cf94
 8004070:	0800cfa8 	.word	0x0800cfa8
 8004074:	20000220 	.word	0x20000220
 8004078:	0800d620 	.word	0x0800d620
 800407c:	2000021e 	.word	0x2000021e
			} else if(dilSecim == 1) {
 8004080:	4b71      	ldr	r3, [pc, #452]	; (8004248 <menu+0x3048>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d104      	bne.n	8004092 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004088:	4a70      	ldr	r2, [pc, #448]	; (800424c <menu+0x304c>)
 800408a:	2101      	movs	r1, #1
 800408c:	2002      	movs	r0, #2
 800408e:	f003 fbb3 	bl	80077f8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004092:	2102      	movs	r1, #2
 8004094:	486e      	ldr	r0, [pc, #440]	; (8004250 <menu+0x3050>)
 8004096:	f004 fed5 	bl	8008e44 <HAL_GPIO_ReadPin>
 800409a:	4603      	mov	r3, r0
 800409c:	2b01      	cmp	r3, #1
 800409e:	d115      	bne.n	80040cc <menu+0x2ecc>
 80040a0:	4b6c      	ldr	r3, [pc, #432]	; (8004254 <menu+0x3054>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	f083 0301 	eor.w	r3, r3, #1
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00e      	beq.n	80040cc <menu+0x2ecc>
			demoMode = demoMode + 1;
 80040ae:	4b6a      	ldr	r3, [pc, #424]	; (8004258 <menu+0x3058>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	3301      	adds	r3, #1
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	4b68      	ldr	r3, [pc, #416]	; (8004258 <menu+0x3058>)
 80040b8:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80040ba:	4b67      	ldr	r3, [pc, #412]	; (8004258 <menu+0x3058>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d902      	bls.n	80040c8 <menu+0x2ec8>
				demoMode = 0;
 80040c2:	4b65      	ldr	r3, [pc, #404]	; (8004258 <menu+0x3058>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80040c8:	f000 fc22 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80040cc:	2104      	movs	r1, #4
 80040ce:	4860      	ldr	r0, [pc, #384]	; (8004250 <menu+0x3050>)
 80040d0:	f004 feb8 	bl	8008e44 <HAL_GPIO_ReadPin>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d115      	bne.n	8004106 <menu+0x2f06>
 80040da:	4b5e      	ldr	r3, [pc, #376]	; (8004254 <menu+0x3054>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	f083 0301 	eor.w	r3, r3, #1
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00e      	beq.n	8004106 <menu+0x2f06>
			demoMode = demoMode - 1;
 80040e8:	4b5b      	ldr	r3, [pc, #364]	; (8004258 <menu+0x3058>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	4b59      	ldr	r3, [pc, #356]	; (8004258 <menu+0x3058>)
 80040f2:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80040f4:	4b58      	ldr	r3, [pc, #352]	; (8004258 <menu+0x3058>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <menu+0x2f02>
		   		demoMode = 1;
 80040fc:	4b56      	ldr	r3, [pc, #344]	; (8004258 <menu+0x3058>)
 80040fe:	2201      	movs	r2, #1
 8004100:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004102:	f000 fc05 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004106:	2108      	movs	r1, #8
 8004108:	4851      	ldr	r0, [pc, #324]	; (8004250 <menu+0x3050>)
 800410a:	f004 fe9b 	bl	8008e44 <HAL_GPIO_ReadPin>
 800410e:	4603      	mov	r3, r0
 8004110:	2b01      	cmp	r3, #1
 8004112:	d10d      	bne.n	8004130 <menu+0x2f30>
 8004114:	4b4f      	ldr	r3, [pc, #316]	; (8004254 <menu+0x3054>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	f083 0301 	eor.w	r3, r3, #1
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d006      	beq.n	8004130 <menu+0x2f30>
			eepromData[26] = demoMode;
 8004122:	4b4d      	ldr	r3, [pc, #308]	; (8004258 <menu+0x3058>)
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	4b4d      	ldr	r3, [pc, #308]	; (800425c <menu+0x305c>)
 8004128:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800412a:	4b4d      	ldr	r3, [pc, #308]	; (8004260 <menu+0x3060>)
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004130:	4b4c      	ldr	r3, [pc, #304]	; (8004264 <menu+0x3064>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b1d      	cmp	r3, #29
 8004136:	f040 8132 	bne.w	800439e <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800413a:	4b4b      	ldr	r3, [pc, #300]	; (8004268 <menu+0x3068>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d113      	bne.n	800416a <menu+0x2f6a>
 8004142:	4b4a      	ldr	r3, [pc, #296]	; (800426c <menu+0x306c>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10f      	bne.n	800416a <menu+0x2f6a>
 800414a:	4b49      	ldr	r3, [pc, #292]	; (8004270 <menu+0x3070>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10b      	bne.n	800416a <menu+0x2f6a>
 8004152:	4b48      	ldr	r3, [pc, #288]	; (8004274 <menu+0x3074>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d107      	bne.n	800416a <menu+0x2f6a>
 800415a:	4b47      	ldr	r3, [pc, #284]	; (8004278 <menu+0x3078>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d103      	bne.n	800416a <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004162:	4b46      	ldr	r3, [pc, #280]	; (800427c <menu+0x307c>)
 8004164:	2200      	movs	r2, #0
 8004166:	701a      	strb	r2, [r3, #0]
 8004168:	e002      	b.n	8004170 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800416a:	4b44      	ldr	r3, [pc, #272]	; (800427c <menu+0x307c>)
 800416c:	2201      	movs	r2, #1
 800416e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004170:	4b43      	ldr	r3, [pc, #268]	; (8004280 <menu+0x3080>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d154      	bne.n	8004222 <menu+0x3022>
			if(dilSecim == 0) {
 8004178:	4b33      	ldr	r3, [pc, #204]	; (8004248 <menu+0x3048>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d105      	bne.n	800418c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004180:	4a40      	ldr	r2, [pc, #256]	; (8004284 <menu+0x3084>)
 8004182:	2101      	movs	r1, #1
 8004184:	2001      	movs	r0, #1
 8004186:	f003 fb37 	bl	80077f8 <lcd_print>
 800418a:	e008      	b.n	800419e <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800418c:	4b2e      	ldr	r3, [pc, #184]	; (8004248 <menu+0x3048>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d104      	bne.n	800419e <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004194:	4a3c      	ldr	r2, [pc, #240]	; (8004288 <menu+0x3088>)
 8004196:	2101      	movs	r1, #1
 8004198:	2001      	movs	r0, #1
 800419a:	f003 fb2d 	bl	80077f8 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800419e:	4b36      	ldr	r3, [pc, #216]	; (8004278 <menu+0x3078>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	220a      	movs	r2, #10
 80041a4:	4939      	ldr	r1, [pc, #228]	; (800428c <menu+0x308c>)
 80041a6:	4618      	mov	r0, r3
 80041a8:	f007 fed4 	bl	800bf54 <itoa>
			lcd_print(2, 12, snum);
 80041ac:	4a37      	ldr	r2, [pc, #220]	; (800428c <menu+0x308c>)
 80041ae:	210c      	movs	r1, #12
 80041b0:	2002      	movs	r0, #2
 80041b2:	f003 fb21 	bl	80077f8 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80041b6:	4b2f      	ldr	r3, [pc, #188]	; (8004274 <menu+0x3074>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	220a      	movs	r2, #10
 80041bc:	4933      	ldr	r1, [pc, #204]	; (800428c <menu+0x308c>)
 80041be:	4618      	mov	r0, r3
 80041c0:	f007 fec8 	bl	800bf54 <itoa>
			lcd_print(2, 13, snum);
 80041c4:	4a31      	ldr	r2, [pc, #196]	; (800428c <menu+0x308c>)
 80041c6:	210d      	movs	r1, #13
 80041c8:	2002      	movs	r0, #2
 80041ca:	f003 fb15 	bl	80077f8 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80041ce:	4b28      	ldr	r3, [pc, #160]	; (8004270 <menu+0x3070>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	220a      	movs	r2, #10
 80041d4:	492d      	ldr	r1, [pc, #180]	; (800428c <menu+0x308c>)
 80041d6:	4618      	mov	r0, r3
 80041d8:	f007 febc 	bl	800bf54 <itoa>
			lcd_print(2, 14, snum);
 80041dc:	4a2b      	ldr	r2, [pc, #172]	; (800428c <menu+0x308c>)
 80041de:	210e      	movs	r1, #14
 80041e0:	2002      	movs	r0, #2
 80041e2:	f003 fb09 	bl	80077f8 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80041e6:	4b21      	ldr	r3, [pc, #132]	; (800426c <menu+0x306c>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	220a      	movs	r2, #10
 80041ec:	4927      	ldr	r1, [pc, #156]	; (800428c <menu+0x308c>)
 80041ee:	4618      	mov	r0, r3
 80041f0:	f007 feb0 	bl	800bf54 <itoa>
			lcd_print(2, 15, snum);
 80041f4:	4a25      	ldr	r2, [pc, #148]	; (800428c <menu+0x308c>)
 80041f6:	210f      	movs	r1, #15
 80041f8:	2002      	movs	r0, #2
 80041fa:	f003 fafd 	bl	80077f8 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80041fe:	4b1a      	ldr	r3, [pc, #104]	; (8004268 <menu+0x3068>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	220a      	movs	r2, #10
 8004204:	4921      	ldr	r1, [pc, #132]	; (800428c <menu+0x308c>)
 8004206:	4618      	mov	r0, r3
 8004208:	f007 fea4 	bl	800bf54 <itoa>
			lcd_print(2, 16, snum);
 800420c:	4a1f      	ldr	r2, [pc, #124]	; (800428c <menu+0x308c>)
 800420e:	2110      	movs	r1, #16
 8004210:	2002      	movs	r0, #2
 8004212:	f003 faf1 	bl	80077f8 <lcd_print>

			lcd_print(2, 1, "           ");
 8004216:	4a1e      	ldr	r2, [pc, #120]	; (8004290 <menu+0x3090>)
 8004218:	2101      	movs	r1, #1
 800421a:	2002      	movs	r0, #2
 800421c:	f003 faec 	bl	80077f8 <lcd_print>
 8004220:	e048      	b.n	80042b4 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 8004222:	4b17      	ldr	r3, [pc, #92]	; (8004280 <menu+0x3080>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d144      	bne.n	80042b4 <menu+0x30b4>
			if(dilSecim == 0) {
 800422a:	4b07      	ldr	r3, [pc, #28]	; (8004248 <menu+0x3048>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d132      	bne.n	8004298 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004232:	4a14      	ldr	r2, [pc, #80]	; (8004284 <menu+0x3084>)
 8004234:	2101      	movs	r1, #1
 8004236:	2001      	movs	r0, #1
 8004238:	f003 fade 	bl	80077f8 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 800423c:	4a15      	ldr	r2, [pc, #84]	; (8004294 <menu+0x3094>)
 800423e:	2101      	movs	r1, #1
 8004240:	2002      	movs	r0, #2
 8004242:	f003 fad9 	bl	80077f8 <lcd_print>
 8004246:	e035      	b.n	80042b4 <menu+0x30b4>
 8004248:	20000221 	.word	0x20000221
 800424c:	0800cfa8 	.word	0x0800cfa8
 8004250:	40010800 	.word	0x40010800
 8004254:	2000022f 	.word	0x2000022f
 8004258:	2000021e 	.word	0x2000021e
 800425c:	2000012c 	.word	0x2000012c
 8004260:	2000022c 	.word	0x2000022c
 8004264:	20000200 	.word	0x20000200
 8004268:	200001fd 	.word	0x200001fd
 800426c:	200001fe 	.word	0x200001fe
 8004270:	20000000 	.word	0x20000000
 8004274:	20000001 	.word	0x20000001
 8004278:	200001ff 	.word	0x200001ff
 800427c:	20000241 	.word	0x20000241
 8004280:	20000220 	.word	0x20000220
 8004284:	0800d630 	.word	0x0800d630
 8004288:	0800d644 	.word	0x0800d644
 800428c:	2000019c 	.word	0x2000019c
 8004290:	0800d658 	.word	0x0800d658
 8004294:	0800d664 	.word	0x0800d664
			} else if(dilSecim == 1) {
 8004298:	4b94      	ldr	r3, [pc, #592]	; (80044ec <menu+0x32ec>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d109      	bne.n	80042b4 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80042a0:	4a93      	ldr	r2, [pc, #588]	; (80044f0 <menu+0x32f0>)
 80042a2:	2101      	movs	r1, #1
 80042a4:	2001      	movs	r0, #1
 80042a6:	f003 faa7 	bl	80077f8 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80042aa:	4a92      	ldr	r2, [pc, #584]	; (80044f4 <menu+0x32f4>)
 80042ac:	2101      	movs	r1, #1
 80042ae:	2002      	movs	r0, #2
 80042b0:	f003 faa2 	bl	80077f8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80042b4:	2102      	movs	r1, #2
 80042b6:	4890      	ldr	r0, [pc, #576]	; (80044f8 <menu+0x32f8>)
 80042b8:	f004 fdc4 	bl	8008e44 <HAL_GPIO_ReadPin>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d119      	bne.n	80042f6 <menu+0x30f6>
 80042c2:	4b8e      	ldr	r3, [pc, #568]	; (80044fc <menu+0x32fc>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	f083 0301 	eor.w	r3, r3, #1
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d012      	beq.n	80042f6 <menu+0x30f6>
 80042d0:	4b8b      	ldr	r3, [pc, #556]	; (8004500 <menu+0x3300>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00e      	beq.n	80042f6 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 80042d8:	4b8a      	ldr	r3, [pc, #552]	; (8004504 <menu+0x3304>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	3301      	adds	r3, #1
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	4b88      	ldr	r3, [pc, #544]	; (8004504 <menu+0x3304>)
 80042e2:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80042e4:	4b87      	ldr	r3, [pc, #540]	; (8004504 <menu+0x3304>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d902      	bls.n	80042f2 <menu+0x30f2>
				calismaSayModu = 0;
 80042ec:	4b85      	ldr	r3, [pc, #532]	; (8004504 <menu+0x3304>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80042f2:	f000 fb0d 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80042f6:	2104      	movs	r1, #4
 80042f8:	487f      	ldr	r0, [pc, #508]	; (80044f8 <menu+0x32f8>)
 80042fa:	f004 fda3 	bl	8008e44 <HAL_GPIO_ReadPin>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b01      	cmp	r3, #1
 8004302:	d119      	bne.n	8004338 <menu+0x3138>
 8004304:	4b7d      	ldr	r3, [pc, #500]	; (80044fc <menu+0x32fc>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	f083 0301 	eor.w	r3, r3, #1
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d012      	beq.n	8004338 <menu+0x3138>
 8004312:	4b7b      	ldr	r3, [pc, #492]	; (8004500 <menu+0x3300>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00e      	beq.n	8004338 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 800431a:	4b7a      	ldr	r3, [pc, #488]	; (8004504 <menu+0x3304>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	3b01      	subs	r3, #1
 8004320:	b2da      	uxtb	r2, r3
 8004322:	4b78      	ldr	r3, [pc, #480]	; (8004504 <menu+0x3304>)
 8004324:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004326:	4b77      	ldr	r3, [pc, #476]	; (8004504 <menu+0x3304>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <menu+0x3134>
		   		calismaSayModu = 1;
 800432e:	4b75      	ldr	r3, [pc, #468]	; (8004504 <menu+0x3304>)
 8004330:	2201      	movs	r2, #1
 8004332:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004334:	f000 faec 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004338:	2108      	movs	r1, #8
 800433a:	486f      	ldr	r0, [pc, #444]	; (80044f8 <menu+0x32f8>)
 800433c:	f004 fd82 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004340:	4603      	mov	r3, r0
 8004342:	2b01      	cmp	r3, #1
 8004344:	d12b      	bne.n	800439e <menu+0x319e>
 8004346:	4b6d      	ldr	r3, [pc, #436]	; (80044fc <menu+0x32fc>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	f083 0301 	eor.w	r3, r3, #1
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d024      	beq.n	800439e <menu+0x319e>
			eepromData[32] = 0;
 8004354:	4b6c      	ldr	r3, [pc, #432]	; (8004508 <menu+0x3308>)
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 800435c:	4b6a      	ldr	r3, [pc, #424]	; (8004508 <menu+0x3308>)
 800435e:	2200      	movs	r2, #0
 8004360:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004362:	4b69      	ldr	r3, [pc, #420]	; (8004508 <menu+0x3308>)
 8004364:	2200      	movs	r2, #0
 8004366:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004368:	4b67      	ldr	r3, [pc, #412]	; (8004508 <menu+0x3308>)
 800436a:	2200      	movs	r2, #0
 800436c:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800436e:	4b66      	ldr	r3, [pc, #408]	; (8004508 <menu+0x3308>)
 8004370:	2200      	movs	r2, #0
 8004372:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004374:	4b65      	ldr	r3, [pc, #404]	; (800450c <menu+0x330c>)
 8004376:	2200      	movs	r2, #0
 8004378:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800437a:	4b65      	ldr	r3, [pc, #404]	; (8004510 <menu+0x3310>)
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004380:	4b64      	ldr	r3, [pc, #400]	; (8004514 <menu+0x3314>)
 8004382:	2200      	movs	r2, #0
 8004384:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004386:	4b64      	ldr	r3, [pc, #400]	; (8004518 <menu+0x3318>)
 8004388:	2200      	movs	r2, #0
 800438a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800438c:	4b63      	ldr	r3, [pc, #396]	; (800451c <menu+0x331c>)
 800438e:	2200      	movs	r2, #0
 8004390:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004392:	4b5c      	ldr	r3, [pc, #368]	; (8004504 <menu+0x3304>)
 8004394:	2200      	movs	r2, #0
 8004396:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004398:	4b61      	ldr	r3, [pc, #388]	; (8004520 <menu+0x3320>)
 800439a:	2201      	movs	r2, #1
 800439c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800439e:	4b61      	ldr	r3, [pc, #388]	; (8004524 <menu+0x3324>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b1e      	cmp	r3, #30
 80043a4:	d16f      	bne.n	8004486 <menu+0x3286>
		calismaSayModu = 0;
 80043a6:	4b57      	ldr	r3, [pc, #348]	; (8004504 <menu+0x3304>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80043ac:	4b4f      	ldr	r3, [pc, #316]	; (80044ec <menu+0x32ec>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10a      	bne.n	80043ca <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 80043b4:	4a5c      	ldr	r2, [pc, #368]	; (8004528 <menu+0x3328>)
 80043b6:	2101      	movs	r1, #1
 80043b8:	2001      	movs	r0, #1
 80043ba:	f003 fa1d 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80043be:	4a5b      	ldr	r2, [pc, #364]	; (800452c <menu+0x332c>)
 80043c0:	2101      	movs	r1, #1
 80043c2:	2002      	movs	r0, #2
 80043c4:	f003 fa18 	bl	80077f8 <lcd_print>
 80043c8:	e00d      	b.n	80043e6 <menu+0x31e6>
		} else if(dilSecim == 1) {
 80043ca:	4b48      	ldr	r3, [pc, #288]	; (80044ec <menu+0x32ec>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d109      	bne.n	80043e6 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80043d2:	4a57      	ldr	r2, [pc, #348]	; (8004530 <menu+0x3330>)
 80043d4:	2101      	movs	r1, #1
 80043d6:	2001      	movs	r0, #1
 80043d8:	f003 fa0e 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 80043dc:	4a55      	ldr	r2, [pc, #340]	; (8004534 <menu+0x3334>)
 80043de:	2101      	movs	r1, #1
 80043e0:	2002      	movs	r0, #2
 80043e2:	f003 fa09 	bl	80077f8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80043e6:	2102      	movs	r1, #2
 80043e8:	4843      	ldr	r0, [pc, #268]	; (80044f8 <menu+0x32f8>)
 80043ea:	f004 fd2b 	bl	8008e44 <HAL_GPIO_ReadPin>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d115      	bne.n	8004420 <menu+0x3220>
 80043f4:	4b41      	ldr	r3, [pc, #260]	; (80044fc <menu+0x32fc>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	f083 0301 	eor.w	r3, r3, #1
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00e      	beq.n	8004420 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8004402:	4b3a      	ldr	r3, [pc, #232]	; (80044ec <menu+0x32ec>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	3301      	adds	r3, #1
 8004408:	b2da      	uxtb	r2, r3
 800440a:	4b38      	ldr	r3, [pc, #224]	; (80044ec <menu+0x32ec>)
 800440c:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800440e:	4b37      	ldr	r3, [pc, #220]	; (80044ec <menu+0x32ec>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d902      	bls.n	800441c <menu+0x321c>
				dilSecim = 0;
 8004416:	4b35      	ldr	r3, [pc, #212]	; (80044ec <menu+0x32ec>)
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800441c:	f000 fa78 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004420:	2104      	movs	r1, #4
 8004422:	4835      	ldr	r0, [pc, #212]	; (80044f8 <menu+0x32f8>)
 8004424:	f004 fd0e 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004428:	4603      	mov	r3, r0
 800442a:	2b01      	cmp	r3, #1
 800442c:	d115      	bne.n	800445a <menu+0x325a>
 800442e:	4b33      	ldr	r3, [pc, #204]	; (80044fc <menu+0x32fc>)
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	f083 0301 	eor.w	r3, r3, #1
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00e      	beq.n	800445a <menu+0x325a>
			dilSecim = dilSecim - 1;
 800443c:	4b2b      	ldr	r3, [pc, #172]	; (80044ec <menu+0x32ec>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	3b01      	subs	r3, #1
 8004442:	b2da      	uxtb	r2, r3
 8004444:	4b29      	ldr	r3, [pc, #164]	; (80044ec <menu+0x32ec>)
 8004446:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004448:	4b28      	ldr	r3, [pc, #160]	; (80044ec <menu+0x32ec>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <menu+0x3256>
		   		dilSecim = 1;
 8004450:	4b26      	ldr	r3, [pc, #152]	; (80044ec <menu+0x32ec>)
 8004452:	2201      	movs	r2, #1
 8004454:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004456:	f000 fa5b 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800445a:	2108      	movs	r1, #8
 800445c:	4826      	ldr	r0, [pc, #152]	; (80044f8 <menu+0x32f8>)
 800445e:	f004 fcf1 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004462:	4603      	mov	r3, r0
 8004464:	2b01      	cmp	r3, #1
 8004466:	d10e      	bne.n	8004486 <menu+0x3286>
 8004468:	4b24      	ldr	r3, [pc, #144]	; (80044fc <menu+0x32fc>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	f083 0301 	eor.w	r3, r3, #1
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d007      	beq.n	8004486 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004476:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <menu+0x32ec>)
 8004478:	781a      	ldrb	r2, [r3, #0]
 800447a:	4b23      	ldr	r3, [pc, #140]	; (8004508 <menu+0x3308>)
 800447c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004480:	4b27      	ldr	r3, [pc, #156]	; (8004520 <menu+0x3320>)
 8004482:	2201      	movs	r2, #1
 8004484:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004486:	4b27      	ldr	r3, [pc, #156]	; (8004524 <menu+0x3324>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b1f      	cmp	r3, #31
 800448c:	f040 80b7 	bne.w	80045fe <menu+0x33fe>
		calismaSayModu = 0;
 8004490:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <menu+0x3304>)
 8004492:	2200      	movs	r2, #0
 8004494:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004496:	4a28      	ldr	r2, [pc, #160]	; (8004538 <menu+0x3338>)
 8004498:	2101      	movs	r1, #1
 800449a:	2001      	movs	r0, #1
 800449c:	f003 f9ac 	bl	80077f8 <lcd_print>

		if(iotMode == 0) {
 80044a0:	4b26      	ldr	r3, [pc, #152]	; (800453c <menu+0x333c>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d113      	bne.n	80044d0 <menu+0x32d0>
			if(dilSecim == 0) {
 80044a8:	4b10      	ldr	r3, [pc, #64]	; (80044ec <menu+0x32ec>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d105      	bne.n	80044bc <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 80044b0:	4a23      	ldr	r2, [pc, #140]	; (8004540 <menu+0x3340>)
 80044b2:	2101      	movs	r1, #1
 80044b4:	2002      	movs	r0, #2
 80044b6:	f003 f99f 	bl	80077f8 <lcd_print>
 80044ba:	e050      	b.n	800455e <menu+0x335e>
			} else if(dilSecim == 1) {
 80044bc:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <menu+0x32ec>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d14c      	bne.n	800455e <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 80044c4:	4a1f      	ldr	r2, [pc, #124]	; (8004544 <menu+0x3344>)
 80044c6:	2101      	movs	r1, #1
 80044c8:	2002      	movs	r0, #2
 80044ca:	f003 f995 	bl	80077f8 <lcd_print>
 80044ce:	e046      	b.n	800455e <menu+0x335e>
			}
		} else if(iotMode == 1) {
 80044d0:	4b1a      	ldr	r3, [pc, #104]	; (800453c <menu+0x333c>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d142      	bne.n	800455e <menu+0x335e>
			if(dilSecim == 0) {
 80044d8:	4b04      	ldr	r3, [pc, #16]	; (80044ec <menu+0x32ec>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d135      	bne.n	800454c <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 80044e0:	4a19      	ldr	r2, [pc, #100]	; (8004548 <menu+0x3348>)
 80044e2:	2101      	movs	r1, #1
 80044e4:	2002      	movs	r0, #2
 80044e6:	f003 f987 	bl	80077f8 <lcd_print>
 80044ea:	e038      	b.n	800455e <menu+0x335e>
 80044ec:	20000221 	.word	0x20000221
 80044f0:	0800d644 	.word	0x0800d644
 80044f4:	0800d678 	.word	0x0800d678
 80044f8:	40010800 	.word	0x40010800
 80044fc:	2000022f 	.word	0x2000022f
 8004500:	20000241 	.word	0x20000241
 8004504:	20000220 	.word	0x20000220
 8004508:	2000012c 	.word	0x2000012c
 800450c:	200001ff 	.word	0x200001ff
 8004510:	20000001 	.word	0x20000001
 8004514:	20000000 	.word	0x20000000
 8004518:	200001fe 	.word	0x200001fe
 800451c:	200001fd 	.word	0x200001fd
 8004520:	2000022c 	.word	0x2000022c
 8004524:	20000200 	.word	0x20000200
 8004528:	0800d68c 	.word	0x0800d68c
 800452c:	0800d6a0 	.word	0x0800d6a0
 8004530:	0800d6b4 	.word	0x0800d6b4
 8004534:	0800d6c8 	.word	0x0800d6c8
 8004538:	0800d6dc 	.word	0x0800d6dc
 800453c:	2000021f 	.word	0x2000021f
 8004540:	0800cf34 	.word	0x0800cf34
 8004544:	0800cf48 	.word	0x0800cf48
 8004548:	0800cf94 	.word	0x0800cf94
			} else if(dilSecim == 1) {
 800454c:	4bae      	ldr	r3, [pc, #696]	; (8004808 <menu+0x3608>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d104      	bne.n	800455e <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004554:	4aad      	ldr	r2, [pc, #692]	; (800480c <menu+0x360c>)
 8004556:	2101      	movs	r1, #1
 8004558:	2002      	movs	r0, #2
 800455a:	f003 f94d 	bl	80077f8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800455e:	2102      	movs	r1, #2
 8004560:	48ab      	ldr	r0, [pc, #684]	; (8004810 <menu+0x3610>)
 8004562:	f004 fc6f 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004566:	4603      	mov	r3, r0
 8004568:	2b01      	cmp	r3, #1
 800456a:	d115      	bne.n	8004598 <menu+0x3398>
 800456c:	4ba9      	ldr	r3, [pc, #676]	; (8004814 <menu+0x3614>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	f083 0301 	eor.w	r3, r3, #1
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00e      	beq.n	8004598 <menu+0x3398>
			iotMode = iotMode + 1;
 800457a:	4ba7      	ldr	r3, [pc, #668]	; (8004818 <menu+0x3618>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	3301      	adds	r3, #1
 8004580:	b2da      	uxtb	r2, r3
 8004582:	4ba5      	ldr	r3, [pc, #660]	; (8004818 <menu+0x3618>)
 8004584:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004586:	4ba4      	ldr	r3, [pc, #656]	; (8004818 <menu+0x3618>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d902      	bls.n	8004594 <menu+0x3394>
				iotMode = 0;
 800458e:	4ba2      	ldr	r3, [pc, #648]	; (8004818 <menu+0x3618>)
 8004590:	2200      	movs	r2, #0
 8004592:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004594:	f000 f9bc 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004598:	2104      	movs	r1, #4
 800459a:	489d      	ldr	r0, [pc, #628]	; (8004810 <menu+0x3610>)
 800459c:	f004 fc52 	bl	8008e44 <HAL_GPIO_ReadPin>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d115      	bne.n	80045d2 <menu+0x33d2>
 80045a6:	4b9b      	ldr	r3, [pc, #620]	; (8004814 <menu+0x3614>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	f083 0301 	eor.w	r3, r3, #1
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00e      	beq.n	80045d2 <menu+0x33d2>
			iotMode = iotMode - 1;
 80045b4:	4b98      	ldr	r3, [pc, #608]	; (8004818 <menu+0x3618>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	4b96      	ldr	r3, [pc, #600]	; (8004818 <menu+0x3618>)
 80045be:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 80045c0:	4b95      	ldr	r3, [pc, #596]	; (8004818 <menu+0x3618>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <menu+0x33ce>
		   		iotMode = 1;
 80045c8:	4b93      	ldr	r3, [pc, #588]	; (8004818 <menu+0x3618>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80045ce:	f000 f99f 	bl	8004910 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045d2:	2108      	movs	r1, #8
 80045d4:	488e      	ldr	r0, [pc, #568]	; (8004810 <menu+0x3610>)
 80045d6:	f004 fc35 	bl	8008e44 <HAL_GPIO_ReadPin>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d10e      	bne.n	80045fe <menu+0x33fe>
 80045e0:	4b8c      	ldr	r3, [pc, #560]	; (8004814 <menu+0x3614>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	f083 0301 	eor.w	r3, r3, #1
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <menu+0x33fe>
			eepromData[48] = iotMode;
 80045ee:	4b8a      	ldr	r3, [pc, #552]	; (8004818 <menu+0x3618>)
 80045f0:	781a      	ldrb	r2, [r3, #0]
 80045f2:	4b8a      	ldr	r3, [pc, #552]	; (800481c <menu+0x361c>)
 80045f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 80045f8:	4b89      	ldr	r3, [pc, #548]	; (8004820 <menu+0x3620>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80045fe:	4b89      	ldr	r3, [pc, #548]	; (8004824 <menu+0x3624>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	2b20      	cmp	r3, #32
 8004604:	d134      	bne.n	8004670 <menu+0x3470>
		calismaSayModu = 0;
 8004606:	4b88      	ldr	r3, [pc, #544]	; (8004828 <menu+0x3628>)
 8004608:	2200      	movs	r2, #0
 800460a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800460c:	4b7e      	ldr	r3, [pc, #504]	; (8004808 <menu+0x3608>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d105      	bne.n	8004620 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 8004614:	4a85      	ldr	r2, [pc, #532]	; (800482c <menu+0x362c>)
 8004616:	2101      	movs	r1, #1
 8004618:	2001      	movs	r0, #1
 800461a:	f003 f8ed 	bl	80077f8 <lcd_print>
 800461e:	e004      	b.n	800462a <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 8004620:	4a83      	ldr	r2, [pc, #524]	; (8004830 <menu+0x3630>)
 8004622:	2101      	movs	r1, #1
 8004624:	2001      	movs	r0, #1
 8004626:	f003 f8e7 	bl	80077f8 <lcd_print>
		}

		//lcd_print(2, 1, machineID);
		//lcd_print(2, 13, "    ");

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800462a:	2102      	movs	r1, #2
 800462c:	4878      	ldr	r0, [pc, #480]	; (8004810 <menu+0x3610>)
 800462e:	f004 fc09 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004632:	4603      	mov	r3, r0
 8004634:	2b01      	cmp	r3, #1
 8004636:	d11b      	bne.n	8004670 <menu+0x3470>
 8004638:	2104      	movs	r1, #4
 800463a:	4875      	ldr	r0, [pc, #468]	; (8004810 <menu+0x3610>)
 800463c:	f004 fc02 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004640:	4603      	mov	r3, r0
 8004642:	2b01      	cmp	r3, #1
 8004644:	d114      	bne.n	8004670 <menu+0x3470>
 8004646:	4b73      	ldr	r3, [pc, #460]	; (8004814 <menu+0x3614>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	f083 0301 	eor.w	r3, r3, #1
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00d      	beq.n	8004670 <menu+0x3470>
			takeMachineID();
 8004654:	f002 fa68 	bl	8006b28 <takeMachineID>

			lcd_print(2, 1, machineID);
 8004658:	4a76      	ldr	r2, [pc, #472]	; (8004834 <menu+0x3634>)
 800465a:	2101      	movs	r1, #1
 800465c:	2002      	movs	r0, #2
 800465e:	f003 f8cb 	bl	80077f8 <lcd_print>
			lcd_print(2, 13, "    ");
 8004662:	4a75      	ldr	r2, [pc, #468]	; (8004838 <menu+0x3638>)
 8004664:	210d      	movs	r1, #13
 8004666:	2002      	movs	r0, #2
 8004668:	f003 f8c6 	bl	80077f8 <lcd_print>

			bekle();
 800466c:	f000 f950 	bl	8004910 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004670:	4b6c      	ldr	r3, [pc, #432]	; (8004824 <menu+0x3624>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b21      	cmp	r3, #33	; 0x21
 8004676:	d136      	bne.n	80046e6 <menu+0x34e6>
		calismaSayModu = 0;
 8004678:	4b6b      	ldr	r3, [pc, #428]	; (8004828 <menu+0x3628>)
 800467a:	2200      	movs	r2, #0
 800467c:	701a      	strb	r2, [r3, #0]

		int ssidLength = strlen(wifiSSID);
 800467e:	486f      	ldr	r0, [pc, #444]	; (800483c <menu+0x363c>)
 8004680:	f7fb fdd0 	bl	8000224 <strlen>
 8004684:	4603      	mov	r3, r0
 8004686:	607b      	str	r3, [r7, #4]

		lcd_print(1, 1, "WIFI SSID       ");
 8004688:	4a6d      	ldr	r2, [pc, #436]	; (8004840 <menu+0x3640>)
 800468a:	2101      	movs	r1, #1
 800468c:	2001      	movs	r0, #1
 800468e:	f003 f8b3 	bl	80077f8 <lcd_print>
			lcd_print(2, 1+ssidLength, emptyArray);
		} else {
			slideText(wifiSSID, 1, 2, 0);
		}*/

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004692:	2102      	movs	r1, #2
 8004694:	485e      	ldr	r0, [pc, #376]	; (8004810 <menu+0x3610>)
 8004696:	f004 fbd5 	bl	8008e44 <HAL_GPIO_ReadPin>
 800469a:	4603      	mov	r3, r0
 800469c:	2b01      	cmp	r3, #1
 800469e:	d122      	bne.n	80046e6 <menu+0x34e6>
 80046a0:	2104      	movs	r1, #4
 80046a2:	485b      	ldr	r0, [pc, #364]	; (8004810 <menu+0x3610>)
 80046a4:	f004 fbce 	bl	8008e44 <HAL_GPIO_ReadPin>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d11b      	bne.n	80046e6 <menu+0x34e6>
 80046ae:	4b59      	ldr	r3, [pc, #356]	; (8004814 <menu+0x3614>)
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	f083 0301 	eor.w	r3, r3, #1
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d014      	beq.n	80046e6 <menu+0x34e6>
			takeWifiSSID();
 80046bc:	f002 faee 	bl	8006c9c <takeWifiSSID>

			lcd_print(2, 1, wifiSSID);
 80046c0:	4a5e      	ldr	r2, [pc, #376]	; (800483c <menu+0x363c>)
 80046c2:	2101      	movs	r1, #1
 80046c4:	2002      	movs	r0, #2
 80046c6:	f003 f897 	bl	80077f8 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 80046ca:	485c      	ldr	r0, [pc, #368]	; (800483c <menu+0x363c>)
 80046cc:	f7fb fdaa 	bl	8000224 <strlen>
 80046d0:	4603      	mov	r3, r0
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	3301      	adds	r3, #1
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	4a5a      	ldr	r2, [pc, #360]	; (8004844 <menu+0x3644>)
 80046da:	4619      	mov	r1, r3
 80046dc:	2002      	movs	r0, #2
 80046de:	f003 f88b 	bl	80077f8 <lcd_print>

			bekle();
 80046e2:	f000 f915 	bl	8004910 <bekle>
		}
	}

	if (menuSayac == 34) {
 80046e6:	4b4f      	ldr	r3, [pc, #316]	; (8004824 <menu+0x3624>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b22      	cmp	r3, #34	; 0x22
 80046ec:	d136      	bne.n	800475c <menu+0x355c>
		calismaSayModu = 0;
 80046ee:	4b4e      	ldr	r3, [pc, #312]	; (8004828 <menu+0x3628>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	701a      	strb	r2, [r3, #0]

		int passLength = strlen(wifiPass);
 80046f4:	4854      	ldr	r0, [pc, #336]	; (8004848 <menu+0x3648>)
 80046f6:	f7fb fd95 	bl	8000224 <strlen>
 80046fa:	4603      	mov	r3, r0
 80046fc:	603b      	str	r3, [r7, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80046fe:	4a53      	ldr	r2, [pc, #332]	; (800484c <menu+0x364c>)
 8004700:	2101      	movs	r1, #1
 8004702:	2001      	movs	r0, #1
 8004704:	f003 f878 	bl	80077f8 <lcd_print>
			lcd_print(2, 1+passLength, emptyArray);
		} else {
			slideText(wifiPass, 1, 2, 1);
		}*/

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004708:	2102      	movs	r1, #2
 800470a:	4841      	ldr	r0, [pc, #260]	; (8004810 <menu+0x3610>)
 800470c:	f004 fb9a 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004710:	4603      	mov	r3, r0
 8004712:	2b01      	cmp	r3, #1
 8004714:	d122      	bne.n	800475c <menu+0x355c>
 8004716:	2104      	movs	r1, #4
 8004718:	483d      	ldr	r0, [pc, #244]	; (8004810 <menu+0x3610>)
 800471a:	f004 fb93 	bl	8008e44 <HAL_GPIO_ReadPin>
 800471e:	4603      	mov	r3, r0
 8004720:	2b01      	cmp	r3, #1
 8004722:	d11b      	bne.n	800475c <menu+0x355c>
 8004724:	4b3b      	ldr	r3, [pc, #236]	; (8004814 <menu+0x3614>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	f083 0301 	eor.w	r3, r3, #1
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d014      	beq.n	800475c <menu+0x355c>
			takeWifiPass();
 8004732:	f002 fb2b 	bl	8006d8c <takeWifiPass>

			lcd_print(2, 1, wifiPass);
 8004736:	4a44      	ldr	r2, [pc, #272]	; (8004848 <menu+0x3648>)
 8004738:	2101      	movs	r1, #1
 800473a:	2002      	movs	r0, #2
 800473c:	f003 f85c 	bl	80077f8 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004740:	4841      	ldr	r0, [pc, #260]	; (8004848 <menu+0x3648>)
 8004742:	f7fb fd6f 	bl	8000224 <strlen>
 8004746:	4603      	mov	r3, r0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	3301      	adds	r3, #1
 800474c:	b2db      	uxtb	r3, r3
 800474e:	4a3d      	ldr	r2, [pc, #244]	; (8004844 <menu+0x3644>)
 8004750:	4619      	mov	r1, r3
 8004752:	2002      	movs	r0, #2
 8004754:	f003 f850 	bl	80077f8 <lcd_print>

			bekle();
 8004758:	f000 f8da 	bl	8004910 <bekle>
		}
	}

	if (menuSayac == 35) {
 800475c:	4b31      	ldr	r3, [pc, #196]	; (8004824 <menu+0x3624>)
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	2b23      	cmp	r3, #35	; 0x23
 8004762:	d14d      	bne.n	8004800 <menu+0x3600>
		if(dilSecim == 0) {
 8004764:	4b28      	ldr	r3, [pc, #160]	; (8004808 <menu+0x3608>)
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <menu+0x3582>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 800476c:	4a38      	ldr	r2, [pc, #224]	; (8004850 <menu+0x3650>)
 800476e:	2101      	movs	r1, #1
 8004770:	2001      	movs	r0, #1
 8004772:	f003 f841 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004776:	4a37      	ldr	r2, [pc, #220]	; (8004854 <menu+0x3654>)
 8004778:	2101      	movs	r1, #1
 800477a:	2002      	movs	r0, #2
 800477c:	f003 f83c 	bl	80077f8 <lcd_print>
 8004780:	e00d      	b.n	800479e <menu+0x359e>
		} else if(dilSecim == 1) {
 8004782:	4b21      	ldr	r3, [pc, #132]	; (8004808 <menu+0x3608>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d109      	bne.n	800479e <menu+0x359e>
			lcd_print(1, 1, " EXIT THE MENU  ");
 800478a:	4a33      	ldr	r2, [pc, #204]	; (8004858 <menu+0x3658>)
 800478c:	2101      	movs	r1, #1
 800478e:	2001      	movs	r0, #1
 8004790:	f003 f832 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004794:	4a31      	ldr	r2, [pc, #196]	; (800485c <menu+0x365c>)
 8004796:	2101      	movs	r1, #1
 8004798:	2002      	movs	r0, #2
 800479a:	f003 f82d 	bl	80077f8 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 800479e:	2108      	movs	r1, #8
 80047a0:	481b      	ldr	r0, [pc, #108]	; (8004810 <menu+0x3610>)
 80047a2:	f004 fb4f 	bl	8008e44 <HAL_GPIO_ReadPin>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d129      	bne.n	8004800 <menu+0x3600>
			menuGiris = 0;
 80047ac:	4b2c      	ldr	r3, [pc, #176]	; (8004860 <menu+0x3660>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80047b2:	bf00      	nop
 80047b4:	482b      	ldr	r0, [pc, #172]	; (8004864 <menu+0x3664>)
 80047b6:	f005 f96e 	bl	8009a96 <HAL_I2C_GetError>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b04      	cmp	r3, #4
 80047be:	d0f9      	beq.n	80047b4 <menu+0x35b4>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80047c0:	bf00      	nop
 80047c2:	4828      	ldr	r0, [pc, #160]	; (8004864 <menu+0x3664>)
 80047c4:	f005 f95a 	bl	8009a7c <HAL_I2C_GetState>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b20      	cmp	r3, #32
 80047cc:	d1f9      	bne.n	80047c2 <menu+0x35c2>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80047ce:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80047d2:	9302      	str	r3, [sp, #8]
 80047d4:	236e      	movs	r3, #110	; 0x6e
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	4b10      	ldr	r3, [pc, #64]	; (800481c <menu+0x361c>)
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	236e      	movs	r3, #110	; 0x6e
 80047de:	2200      	movs	r2, #0
 80047e0:	21a0      	movs	r1, #160	; 0xa0
 80047e2:	4820      	ldr	r0, [pc, #128]	; (8004864 <menu+0x3664>)
 80047e4:	f004 fde8 	bl	80093b8 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 80047e8:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80047ec:	f003 fd5a 	bl	80082a4 <HAL_Delay>

			lcd_clear();
 80047f0:	f003 f82e 	bl	8007850 <lcd_clear>
			HAL_Delay(500);
 80047f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80047f8:	f003 fd54 	bl	80082a4 <HAL_Delay>
			NVIC_SystemReset();
 80047fc:	f7fc fcea 	bl	80011d4 <__NVIC_SystemReset>
		}
	}
}
 8004800:	bf00      	nop
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}
 8004808:	20000221 	.word	0x20000221
 800480c:	0800cfa8 	.word	0x0800cfa8
 8004810:	40010800 	.word	0x40010800
 8004814:	2000022f 	.word	0x2000022f
 8004818:	2000021f 	.word	0x2000021f
 800481c:	2000012c 	.word	0x2000012c
 8004820:	2000022c 	.word	0x2000022c
 8004824:	20000200 	.word	0x20000200
 8004828:	20000220 	.word	0x20000220
 800482c:	0800d6f0 	.word	0x0800d6f0
 8004830:	0800d704 	.word	0x0800d704
 8004834:	200001a4 	.word	0x200001a4
 8004838:	0800d718 	.word	0x0800d718
 800483c:	200001b0 	.word	0x200001b0
 8004840:	0800d720 	.word	0x0800d720
 8004844:	20000010 	.word	0x20000010
 8004848:	200001c4 	.word	0x200001c4
 800484c:	0800d734 	.word	0x0800d734
 8004850:	0800d748 	.word	0x0800d748
 8004854:	0800d75c 	.word	0x0800d75c
 8004858:	0800d770 	.word	0x0800d770
 800485c:	0800d784 	.word	0x0800d784
 8004860:	2000021d 	.word	0x2000021d
 8004864:	20000290 	.word	0x20000290

08004868 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	4603      	mov	r3, r0
 8004870:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004872:	79fb      	ldrb	r3, [r7, #7]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d105      	bne.n	8004884 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004878:	4a22      	ldr	r2, [pc, #136]	; (8004904 <lcdUpdate+0x9c>)
 800487a:	2101      	movs	r1, #1
 800487c:	2002      	movs	r0, #2
 800487e:	f002 ffbb 	bl	80077f8 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004882:	e03b      	b.n	80048fc <lcdUpdate+0x94>
	} else if(y==2) {
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	2b02      	cmp	r3, #2
 8004888:	d105      	bne.n	8004896 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 800488a:	4a1e      	ldr	r2, [pc, #120]	; (8004904 <lcdUpdate+0x9c>)
 800488c:	2102      	movs	r1, #2
 800488e:	2002      	movs	r0, #2
 8004890:	f002 ffb2 	bl	80077f8 <lcd_print>
}
 8004894:	e032      	b.n	80048fc <lcdUpdate+0x94>
	} else if(y==3) {
 8004896:	79fb      	ldrb	r3, [r7, #7]
 8004898:	2b03      	cmp	r3, #3
 800489a:	d105      	bne.n	80048a8 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 800489c:	4a19      	ldr	r2, [pc, #100]	; (8004904 <lcdUpdate+0x9c>)
 800489e:	2103      	movs	r1, #3
 80048a0:	2002      	movs	r0, #2
 80048a2:	f002 ffa9 	bl	80077f8 <lcd_print>
}
 80048a6:	e029      	b.n	80048fc <lcdUpdate+0x94>
	} else if(y==4) {
 80048a8:	79fb      	ldrb	r3, [r7, #7]
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d105      	bne.n	80048ba <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80048ae:	4a15      	ldr	r2, [pc, #84]	; (8004904 <lcdUpdate+0x9c>)
 80048b0:	2104      	movs	r1, #4
 80048b2:	2002      	movs	r0, #2
 80048b4:	f002 ffa0 	bl	80077f8 <lcd_print>
}
 80048b8:	e020      	b.n	80048fc <lcdUpdate+0x94>
	} else if(y==5) {
 80048ba:	79fb      	ldrb	r3, [r7, #7]
 80048bc:	2b05      	cmp	r3, #5
 80048be:	d105      	bne.n	80048cc <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80048c0:	4a10      	ldr	r2, [pc, #64]	; (8004904 <lcdUpdate+0x9c>)
 80048c2:	2105      	movs	r1, #5
 80048c4:	2002      	movs	r0, #2
 80048c6:	f002 ff97 	bl	80077f8 <lcd_print>
}
 80048ca:	e017      	b.n	80048fc <lcdUpdate+0x94>
	} else if(y==6) {
 80048cc:	79fb      	ldrb	r3, [r7, #7]
 80048ce:	2b06      	cmp	r3, #6
 80048d0:	d105      	bne.n	80048de <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80048d2:	4a0c      	ldr	r2, [pc, #48]	; (8004904 <lcdUpdate+0x9c>)
 80048d4:	2106      	movs	r1, #6
 80048d6:	2002      	movs	r0, #2
 80048d8:	f002 ff8e 	bl	80077f8 <lcd_print>
}
 80048dc:	e00e      	b.n	80048fc <lcdUpdate+0x94>
	} else if (y==7) {
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	2b07      	cmp	r3, #7
 80048e2:	d10b      	bne.n	80048fc <lcdUpdate+0x94>
		lcd_clear();
 80048e4:	f002 ffb4 	bl	8007850 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 80048e8:	4a07      	ldr	r2, [pc, #28]	; (8004908 <lcdUpdate+0xa0>)
 80048ea:	2104      	movs	r1, #4
 80048ec:	2001      	movs	r0, #1
 80048ee:	f002 ff83 	bl	80077f8 <lcd_print>
		lcd_print(2, 6, "RUN");
 80048f2:	4a06      	ldr	r2, [pc, #24]	; (800490c <lcdUpdate+0xa4>)
 80048f4:	2106      	movs	r1, #6
 80048f6:	2002      	movs	r0, #2
 80048f8:	f002 ff7e 	bl	80077f8 <lcd_print>
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	0800d798 	.word	0x0800d798
 8004908:	0800d79c 	.word	0x0800d79c
 800490c:	0800d7a4 	.word	0x0800d7a4

08004910 <bekle>:

void bekle() {
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
	timer1=millis;
 8004914:	4b47      	ldr	r3, [pc, #284]	; (8004a34 <bekle+0x124>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a47      	ldr	r2, [pc, #284]	; (8004a38 <bekle+0x128>)
 800491a:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800491c:	e002      	b.n	8004924 <bekle+0x14>
    	butonKontrol = 1;
 800491e:	4b47      	ldr	r3, [pc, #284]	; (8004a3c <bekle+0x12c>)
 8004920:	2201      	movs	r2, #1
 8004922:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004924:	2101      	movs	r1, #1
 8004926:	4846      	ldr	r0, [pc, #280]	; (8004a40 <bekle+0x130>)
 8004928:	f004 fa8c 	bl	8008e44 <HAL_GPIO_ReadPin>
 800492c:	4603      	mov	r3, r0
 800492e:	2b01      	cmp	r3, #1
 8004930:	d109      	bne.n	8004946 <bekle+0x36>
 8004932:	4b40      	ldr	r3, [pc, #256]	; (8004a34 <bekle+0x124>)
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	4b40      	ldr	r3, [pc, #256]	; (8004a38 <bekle+0x128>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d0ef      	beq.n	800491e <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800493e:	e002      	b.n	8004946 <bekle+0x36>
    	butonKontrol = 1;
 8004940:	4b3e      	ldr	r3, [pc, #248]	; (8004a3c <bekle+0x12c>)
 8004942:	2201      	movs	r2, #1
 8004944:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004946:	2108      	movs	r1, #8
 8004948:	483e      	ldr	r0, [pc, #248]	; (8004a44 <bekle+0x134>)
 800494a:	f004 fa7b 	bl	8008e44 <HAL_GPIO_ReadPin>
 800494e:	4603      	mov	r3, r0
 8004950:	2b01      	cmp	r3, #1
 8004952:	d109      	bne.n	8004968 <bekle+0x58>
 8004954:	4b37      	ldr	r3, [pc, #220]	; (8004a34 <bekle+0x124>)
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	4b37      	ldr	r3, [pc, #220]	; (8004a38 <bekle+0x128>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	429a      	cmp	r2, r3
 800495e:	d0ef      	beq.n	8004940 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004960:	e002      	b.n	8004968 <bekle+0x58>
    	butonKontrol = 1;
 8004962:	4b36      	ldr	r3, [pc, #216]	; (8004a3c <bekle+0x12c>)
 8004964:	2201      	movs	r2, #1
 8004966:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004968:	2102      	movs	r1, #2
 800496a:	4835      	ldr	r0, [pc, #212]	; (8004a40 <bekle+0x130>)
 800496c:	f004 fa6a 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004970:	4603      	mov	r3, r0
 8004972:	2b01      	cmp	r3, #1
 8004974:	d109      	bne.n	800498a <bekle+0x7a>
 8004976:	4b2f      	ldr	r3, [pc, #188]	; (8004a34 <bekle+0x124>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	4b2f      	ldr	r3, [pc, #188]	; (8004a38 <bekle+0x128>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	429a      	cmp	r2, r3
 8004980:	d0ef      	beq.n	8004962 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004982:	e002      	b.n	800498a <bekle+0x7a>
    	butonKontrol = 1;
 8004984:	4b2d      	ldr	r3, [pc, #180]	; (8004a3c <bekle+0x12c>)
 8004986:	2201      	movs	r2, #1
 8004988:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800498a:	2104      	movs	r1, #4
 800498c:	482c      	ldr	r0, [pc, #176]	; (8004a40 <bekle+0x130>)
 800498e:	f004 fa59 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004992:	4603      	mov	r3, r0
 8004994:	2b01      	cmp	r3, #1
 8004996:	d109      	bne.n	80049ac <bekle+0x9c>
 8004998:	4b26      	ldr	r3, [pc, #152]	; (8004a34 <bekle+0x124>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	4b26      	ldr	r3, [pc, #152]	; (8004a38 <bekle+0x128>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d0ef      	beq.n	8004984 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049a4:	e002      	b.n	80049ac <bekle+0x9c>
    	butonKontrol = 1;
 80049a6:	4b25      	ldr	r3, [pc, #148]	; (8004a3c <bekle+0x12c>)
 80049a8:	2201      	movs	r2, #1
 80049aa:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049ac:	2108      	movs	r1, #8
 80049ae:	4824      	ldr	r0, [pc, #144]	; (8004a40 <bekle+0x130>)
 80049b0:	f004 fa48 	bl	8008e44 <HAL_GPIO_ReadPin>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d109      	bne.n	80049ce <bekle+0xbe>
 80049ba:	4b1e      	ldr	r3, [pc, #120]	; (8004a34 <bekle+0x124>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	4b1e      	ldr	r3, [pc, #120]	; (8004a38 <bekle+0x128>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d0ef      	beq.n	80049a6 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80049c6:	e002      	b.n	80049ce <bekle+0xbe>
    	butonKontrol = 1;
 80049c8:	4b1c      	ldr	r3, [pc, #112]	; (8004a3c <bekle+0x12c>)
 80049ca:	2201      	movs	r2, #1
 80049cc:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80049ce:	2180      	movs	r1, #128	; 0x80
 80049d0:	481c      	ldr	r0, [pc, #112]	; (8004a44 <bekle+0x134>)
 80049d2:	f004 fa37 	bl	8008e44 <HAL_GPIO_ReadPin>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d109      	bne.n	80049f0 <bekle+0xe0>
 80049dc:	4b15      	ldr	r3, [pc, #84]	; (8004a34 <bekle+0x124>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	4b15      	ldr	r3, [pc, #84]	; (8004a38 <bekle+0x128>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d0ef      	beq.n	80049c8 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80049e8:	e002      	b.n	80049f0 <bekle+0xe0>
    	butonKontrol = 1;
 80049ea:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <bekle+0x12c>)
 80049ec:	2201      	movs	r2, #1
 80049ee:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80049f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049f4:	4813      	ldr	r0, [pc, #76]	; (8004a44 <bekle+0x134>)
 80049f6:	f004 fa25 	bl	8008e44 <HAL_GPIO_ReadPin>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d109      	bne.n	8004a14 <bekle+0x104>
 8004a00:	4b0c      	ldr	r3, [pc, #48]	; (8004a34 <bekle+0x124>)
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	4b0c      	ldr	r3, [pc, #48]	; (8004a38 <bekle+0x128>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d0ee      	beq.n	80049ea <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a0c:	e002      	b.n	8004a14 <bekle+0x104>
    	butonKontrol = 1;
 8004a0e:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <bekle+0x12c>)
 8004a10:	2201      	movs	r2, #1
 8004a12:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a18:	480a      	ldr	r0, [pc, #40]	; (8004a44 <bekle+0x134>)
 8004a1a:	f004 fa13 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d105      	bne.n	8004a30 <bekle+0x120>
 8004a24:	4b03      	ldr	r3, [pc, #12]	; (8004a34 <bekle+0x124>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	4b03      	ldr	r3, [pc, #12]	; (8004a38 <bekle+0x128>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d0ee      	beq.n	8004a0e <bekle+0xfe>
    }

}
 8004a30:	bf00      	nop
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	200001dc 	.word	0x200001dc
 8004a38:	200001e4 	.word	0x200001e4
 8004a3c:	2000022f 	.word	0x2000022f
 8004a40:	40010800 	.word	0x40010800
 8004a44:	40011000 	.word	0x40011000

08004a48 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004a4c:	4b07      	ldr	r3, [pc, #28]	; (8004a6c <checkLCDBacklight+0x24>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <checkLCDBacklight+0x28>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b3b      	cmp	r3, #59	; 0x3b
 8004a58:	d903      	bls.n	8004a62 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004a5a:	2000      	movs	r0, #0
 8004a5c:	f002 ff18 	bl	8007890 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004a60:	e002      	b.n	8004a68 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004a62:	2001      	movs	r0, #1
 8004a64:	f002 ff14 	bl	8007890 <lcd_backlight>
}
 8004a68:	bf00      	nop
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	200001dc 	.word	0x200001dc
 8004a70:	200001f8 	.word	0x200001f8

08004a74 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004a78:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <checkBasincSalteri+0x54>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d102      	bne.n	8004a86 <checkBasincSalteri+0x12>
		basincVar=1;
 8004a80:	4b12      	ldr	r3, [pc, #72]	; (8004acc <checkBasincSalteri+0x58>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004a86:	4b10      	ldr	r3, [pc, #64]	; (8004ac8 <checkBasincSalteri+0x54>)
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d119      	bne.n	8004ac2 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004a8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a92:	480f      	ldr	r0, [pc, #60]	; (8004ad0 <checkBasincSalteri+0x5c>)
 8004a94:	f004 f9d6 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d10a      	bne.n	8004ab4 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004a9e:	4b0d      	ldr	r3, [pc, #52]	; (8004ad4 <checkBasincSalteri+0x60>)
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <checkBasincSalteri+0x64>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d90a      	bls.n	8004ac2 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004aac:	4b07      	ldr	r3, [pc, #28]	; (8004acc <checkBasincSalteri+0x58>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004ab2:	e006      	b.n	8004ac2 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004ab4:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <checkBasincSalteri+0x60>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a07      	ldr	r2, [pc, #28]	; (8004ad8 <checkBasincSalteri+0x64>)
 8004aba:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004abc:	4b03      	ldr	r3, [pc, #12]	; (8004acc <checkBasincSalteri+0x58>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	701a      	strb	r2, [r3, #0]
}
 8004ac2:	bf00      	nop
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	20000207 	.word	0x20000207
 8004acc:	20000203 	.word	0x20000203
 8004ad0:	40011000 	.word	0x40011000
 8004ad4:	200001dc 	.word	0x200001dc
 8004ad8:	200001f4 	.word	0x200001f4

08004adc <checkBasGonder>:

void checkBasGonder() {
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004ae0:	4b1b      	ldr	r3, [pc, #108]	; (8004b50 <checkBasGonder+0x74>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d10b      	bne.n	8004b00 <checkBasGonder+0x24>
 8004ae8:	4b1a      	ldr	r3, [pc, #104]	; (8004b54 <checkBasGonder+0x78>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d007      	beq.n	8004b00 <checkBasGonder+0x24>
 8004af0:	4b19      	ldr	r3, [pc, #100]	; (8004b58 <checkBasGonder+0x7c>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d103      	bne.n	8004b00 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004af8:	4b18      	ldr	r3, [pc, #96]	; (8004b5c <checkBasGonder+0x80>)
 8004afa:	2201      	movs	r2, #1
 8004afc:	701a      	strb	r2, [r3, #0]
 8004afe:	e009      	b.n	8004b14 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004b00:	4b14      	ldr	r3, [pc, #80]	; (8004b54 <checkBasGonder+0x78>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	f083 0301 	eor.w	r3, r3, #1
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d002      	beq.n	8004b14 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004b0e:	4b13      	ldr	r3, [pc, #76]	; (8004b5c <checkBasGonder+0x80>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004b14:	4b0e      	ldr	r3, [pc, #56]	; (8004b50 <checkBasGonder+0x74>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d10b      	bne.n	8004b34 <checkBasGonder+0x58>
 8004b1c:	4b10      	ldr	r3, [pc, #64]	; (8004b60 <checkBasGonder+0x84>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d007      	beq.n	8004b34 <checkBasGonder+0x58>
 8004b24:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <checkBasGonder+0x7c>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d103      	bne.n	8004b34 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004b2c:	4b0d      	ldr	r3, [pc, #52]	; (8004b64 <checkBasGonder+0x88>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004b32:	e009      	b.n	8004b48 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004b34:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <checkBasGonder+0x84>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	f083 0301 	eor.w	r3, r3, #1
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004b42:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <checkBasGonder+0x88>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
}
 8004b48:	bf00      	nop
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr
 8004b50:	20000201 	.word	0x20000201
 8004b54:	20000235 	.word	0x20000235
 8004b58:	2000020f 	.word	0x2000020f
 8004b5c:	2000023c 	.word	0x2000023c
 8004b60:	20000238 	.word	0x20000238
 8004b64:	2000023d 	.word	0x2000023d

08004b68 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004b6c:	4b24      	ldr	r3, [pc, #144]	; (8004c00 <checkKapiSecimleri+0x98>)
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d102      	bne.n	8004b7a <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004b74:	4b23      	ldr	r3, [pc, #140]	; (8004c04 <checkKapiSecimleri+0x9c>)
 8004b76:	2201      	movs	r2, #1
 8004b78:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004b7a:	4b21      	ldr	r3, [pc, #132]	; (8004c00 <checkKapiSecimleri+0x98>)
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d10e      	bne.n	8004ba0 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004b82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b86:	4820      	ldr	r0, [pc, #128]	; (8004c08 <checkKapiSecimleri+0xa0>)
 8004b88:	f004 f95c 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d103      	bne.n	8004b9a <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004b92:	4b1c      	ldr	r3, [pc, #112]	; (8004c04 <checkKapiSecimleri+0x9c>)
 8004b94:	2201      	movs	r2, #1
 8004b96:	701a      	strb	r2, [r3, #0]
 8004b98:	e002      	b.n	8004ba0 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004b9a:	4b1a      	ldr	r3, [pc, #104]	; (8004c04 <checkKapiSecimleri+0x9c>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004ba0:	4b17      	ldr	r3, [pc, #92]	; (8004c00 <checkKapiSecimleri+0x98>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d10e      	bne.n	8004bc6 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004ba8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bac:	4816      	ldr	r0, [pc, #88]	; (8004c08 <checkKapiSecimleri+0xa0>)
 8004bae:	f004 f949 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d103      	bne.n	8004bc0 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004bb8:	4b12      	ldr	r3, [pc, #72]	; (8004c04 <checkKapiSecimleri+0x9c>)
 8004bba:	2201      	movs	r2, #1
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	e002      	b.n	8004bc6 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004bc0:	4b10      	ldr	r3, [pc, #64]	; (8004c04 <checkKapiSecimleri+0x9c>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004bc6:	4b0e      	ldr	r3, [pc, #56]	; (8004c00 <checkKapiSecimleri+0x98>)
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d116      	bne.n	8004bfc <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004bce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bd2:	480d      	ldr	r0, [pc, #52]	; (8004c08 <checkKapiSecimleri+0xa0>)
 8004bd4:	f004 f936 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10b      	bne.n	8004bf6 <checkKapiSecimleri+0x8e>
 8004bde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004be2:	4809      	ldr	r0, [pc, #36]	; (8004c08 <checkKapiSecimleri+0xa0>)
 8004be4:	f004 f92e 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d103      	bne.n	8004bf6 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004bee:	4b05      	ldr	r3, [pc, #20]	; (8004c04 <checkKapiSecimleri+0x9c>)
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004bf4:	e002      	b.n	8004bfc <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004bf6:	4b03      	ldr	r3, [pc, #12]	; (8004c04 <checkKapiSecimleri+0x9c>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	701a      	strb	r2, [r3, #0]
}
 8004bfc:	bf00      	nop
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	20000208 	.word	0x20000208
 8004c04:	20000253 	.word	0x20000253
 8004c08:	40010800 	.word	0x40010800

08004c0c <checkAktifCalisma>:

void checkAktifCalisma() {
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004c10:	4b62      	ldr	r3, [pc, #392]	; (8004d9c <checkAktifCalisma+0x190>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f041 833e 	bne.w	8006296 <checkAktifCalisma+0x168a>
 8004c1a:	4b61      	ldr	r3, [pc, #388]	; (8004da0 <checkAktifCalisma+0x194>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	f041 8339 	bne.w	8006296 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004c24:	4b5f      	ldr	r3, [pc, #380]	; (8004da4 <checkAktifCalisma+0x198>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d11a      	bne.n	8004c62 <checkAktifCalisma+0x56>
 8004c2c:	4b5e      	ldr	r3, [pc, #376]	; (8004da8 <checkAktifCalisma+0x19c>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d116      	bne.n	8004c62 <checkAktifCalisma+0x56>
 8004c34:	4b5d      	ldr	r3, [pc, #372]	; (8004dac <checkAktifCalisma+0x1a0>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <checkAktifCalisma+0x46>
 8004c3c:	4b5c      	ldr	r3, [pc, #368]	; (8004db0 <checkAktifCalisma+0x1a4>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	f083 0301 	eor.w	r3, r3, #1
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <checkAktifCalisma+0x46>
 8004c4a:	4b5a      	ldr	r3, [pc, #360]	; (8004db4 <checkAktifCalisma+0x1a8>)
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d007      	beq.n	8004c62 <checkAktifCalisma+0x56>
 8004c52:	4b59      	ldr	r3, [pc, #356]	; (8004db8 <checkAktifCalisma+0x1ac>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d018      	beq.n	8004c8c <checkAktifCalisma+0x80>
 8004c5a:	4b58      	ldr	r3, [pc, #352]	; (8004dbc <checkAktifCalisma+0x1b0>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d114      	bne.n	8004c8c <checkAktifCalisma+0x80>
 8004c62:	4b57      	ldr	r3, [pc, #348]	; (8004dc0 <checkAktifCalisma+0x1b4>)
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d010      	beq.n	8004c8c <checkAktifCalisma+0x80>
 8004c6a:	4b56      	ldr	r3, [pc, #344]	; (8004dc4 <checkAktifCalisma+0x1b8>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00c      	beq.n	8004c8c <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004c72:	2201      	movs	r2, #1
 8004c74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c78:	4853      	ldr	r0, [pc, #332]	; (8004dc8 <checkAktifCalisma+0x1bc>)
 8004c7a:	f004 f8fa 	bl	8008e72 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004c7e:	4b53      	ldr	r3, [pc, #332]	; (8004dcc <checkAktifCalisma+0x1c0>)
 8004c80:	2201      	movs	r2, #1
 8004c82:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004c84:	4b52      	ldr	r3, [pc, #328]	; (8004dd0 <checkAktifCalisma+0x1c4>)
 8004c86:	2201      	movs	r2, #1
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	e008      	b.n	8004c9e <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c92:	484d      	ldr	r0, [pc, #308]	; (8004dc8 <checkAktifCalisma+0x1bc>)
 8004c94:	f004 f8ed 	bl	8008e72 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004c98:	4b4c      	ldr	r3, [pc, #304]	; (8004dcc <checkAktifCalisma+0x1c0>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004c9e:	4b40      	ldr	r3, [pc, #256]	; (8004da0 <checkAktifCalisma+0x194>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d160      	bne.n	8004d68 <checkAktifCalisma+0x15c>
 8004ca6:	4b46      	ldr	r3, [pc, #280]	; (8004dc0 <checkAktifCalisma+0x1b4>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d05c      	beq.n	8004d68 <checkAktifCalisma+0x15c>
 8004cae:	4b45      	ldr	r3, [pc, #276]	; (8004dc4 <checkAktifCalisma+0x1b8>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d058      	beq.n	8004d68 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004cb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004cba:	4843      	ldr	r0, [pc, #268]	; (8004dc8 <checkAktifCalisma+0x1bc>)
 8004cbc:	f004 f8c2 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <checkAktifCalisma+0xc2>
 8004cc6:	4b43      	ldr	r3, [pc, #268]	; (8004dd4 <checkAktifCalisma+0x1c8>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d04c      	beq.n	8004d68 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004cce:	2102      	movs	r1, #2
 8004cd0:	4841      	ldr	r0, [pc, #260]	; (8004dd8 <checkAktifCalisma+0x1cc>)
 8004cd2:	f004 f8b7 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d145      	bne.n	8004d68 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004cdc:	4b3f      	ldr	r3, [pc, #252]	; (8004ddc <checkAktifCalisma+0x1d0>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d041      	beq.n	8004d68 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004ce4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ce8:	4837      	ldr	r0, [pc, #220]	; (8004dc8 <checkAktifCalisma+0x1bc>)
 8004cea:	f004 f8ab 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d10e      	bne.n	8004d12 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004cf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cf8:	4833      	ldr	r0, [pc, #204]	; (8004dc8 <checkAktifCalisma+0x1bc>)
 8004cfa:	f004 f8a3 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d106      	bne.n	8004d12 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004d04:	2140      	movs	r1, #64	; 0x40
 8004d06:	4834      	ldr	r0, [pc, #208]	; (8004dd8 <checkAktifCalisma+0x1cc>)
 8004d08:	f004 f89c 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d003      	beq.n	8004d1a <checkAktifCalisma+0x10e>
 8004d12:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <checkAktifCalisma+0x198>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d026      	beq.n	8004d68 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004d1a:	4b24      	ldr	r3, [pc, #144]	; (8004dac <checkAktifCalisma+0x1a0>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	f083 0301 	eor.w	r3, r3, #1
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d01f      	beq.n	8004d68 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004d28:	4b1f      	ldr	r3, [pc, #124]	; (8004da8 <checkAktifCalisma+0x19c>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	f083 0301 	eor.w	r3, r3, #1
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d018      	beq.n	8004d68 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004d36:	4b20      	ldr	r3, [pc, #128]	; (8004db8 <checkAktifCalisma+0x1ac>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	f083 0301 	eor.w	r3, r3, #1
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d011      	beq.n	8004d68 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004d44:	4b26      	ldr	r3, [pc, #152]	; (8004de0 <checkAktifCalisma+0x1d4>)
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	f083 0301 	eor.w	r3, r3, #1
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004d52:	4b24      	ldr	r3, [pc, #144]	; (8004de4 <checkAktifCalisma+0x1d8>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	f083 0301 	eor.w	r3, r3, #1
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004d60:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <checkAktifCalisma+0x198>)
 8004d62:	2201      	movs	r2, #1
 8004d64:	701a      	strb	r2, [r3, #0]
 8004d66:	e002      	b.n	8004d6e <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004d68:	4b0e      	ldr	r3, [pc, #56]	; (8004da4 <checkAktifCalisma+0x198>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004d6e:	4b0d      	ldr	r3, [pc, #52]	; (8004da4 <checkAktifCalisma+0x198>)
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d03a      	beq.n	8004dec <checkAktifCalisma+0x1e0>
 8004d76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d7a:	4817      	ldr	r0, [pc, #92]	; (8004dd8 <checkAktifCalisma+0x1cc>)
 8004d7c:	f004 f862 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d132      	bne.n	8004dec <checkAktifCalisma+0x1e0>
 8004d86:	4b18      	ldr	r3, [pc, #96]	; (8004de8 <checkAktifCalisma+0x1dc>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d02e      	beq.n	8004dec <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d94:	480c      	ldr	r0, [pc, #48]	; (8004dc8 <checkAktifCalisma+0x1bc>)
 8004d96:	f004 f86c 	bl	8008e72 <HAL_GPIO_WritePin>
 8004d9a:	e02d      	b.n	8004df8 <checkAktifCalisma+0x1ec>
 8004d9c:	2000021e 	.word	0x2000021e
 8004da0:	2000021d 	.word	0x2000021d
 8004da4:	20000235 	.word	0x20000235
 8004da8:	20000236 	.word	0x20000236
 8004dac:	20000238 	.word	0x20000238
 8004db0:	20000230 	.word	0x20000230
 8004db4:	20000213 	.word	0x20000213
 8004db8:	20000237 	.word	0x20000237
 8004dbc:	20000212 	.word	0x20000212
 8004dc0:	20000252 	.word	0x20000252
 8004dc4:	20000253 	.word	0x20000253
 8004dc8:	40010c00 	.word	0x40010c00
 8004dcc:	20000254 	.word	0x20000254
 8004dd0:	2000023f 	.word	0x2000023f
 8004dd4:	2000023c 	.word	0x2000023c
 8004dd8:	40011000 	.word	0x40011000
 8004ddc:	20000203 	.word	0x20000203
 8004de0:	2000023a 	.word	0x2000023a
 8004de4:	2000023b 	.word	0x2000023b
 8004de8:	2000020e 	.word	0x2000020e
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004dec:	2200      	movs	r2, #0
 8004dee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004df2:	4860      	ldr	r0, [pc, #384]	; (8004f74 <checkAktifCalisma+0x368>)
 8004df4:	f004 f83d 	bl	8008e72 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004df8:	4b5f      	ldr	r3, [pc, #380]	; (8004f78 <checkAktifCalisma+0x36c>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d013      	beq.n	8004e28 <checkAktifCalisma+0x21c>
 8004e00:	4b5e      	ldr	r3, [pc, #376]	; (8004f7c <checkAktifCalisma+0x370>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d007      	beq.n	8004e18 <checkAktifCalisma+0x20c>
 8004e08:	4b5c      	ldr	r3, [pc, #368]	; (8004f7c <checkAktifCalisma+0x370>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d003      	beq.n	8004e18 <checkAktifCalisma+0x20c>
 8004e10:	4b5b      	ldr	r3, [pc, #364]	; (8004f80 <checkAktifCalisma+0x374>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d107      	bne.n	8004e28 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004e18:	2201      	movs	r2, #1
 8004e1a:	2104      	movs	r1, #4
 8004e1c:	4855      	ldr	r0, [pc, #340]	; (8004f74 <checkAktifCalisma+0x368>)
 8004e1e:	f004 f828 	bl	8008e72 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004e22:	4b58      	ldr	r3, [pc, #352]	; (8004f84 <checkAktifCalisma+0x378>)
 8004e24:	2201      	movs	r2, #1
 8004e26:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004e28:	4b56      	ldr	r3, [pc, #344]	; (8004f84 <checkAktifCalisma+0x378>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d02f      	beq.n	8004e90 <checkAktifCalisma+0x284>
 8004e30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e34:	484f      	ldr	r0, [pc, #316]	; (8004f74 <checkAktifCalisma+0x368>)
 8004e36:	f004 f805 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d106      	bne.n	8004e4e <checkAktifCalisma+0x242>
 8004e40:	4b51      	ldr	r3, [pc, #324]	; (8004f88 <checkAktifCalisma+0x37c>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	f083 0301 	eor.w	r3, r3, #1
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <checkAktifCalisma+0x250>
 8004e4e:	2102      	movs	r1, #2
 8004e50:	484e      	ldr	r0, [pc, #312]	; (8004f8c <checkAktifCalisma+0x380>)
 8004e52:	f003 fff7 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d119      	bne.n	8004e90 <checkAktifCalisma+0x284>
 8004e5c:	4b4c      	ldr	r3, [pc, #304]	; (8004f90 <checkAktifCalisma+0x384>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d015      	beq.n	8004e90 <checkAktifCalisma+0x284>
 8004e64:	4b4b      	ldr	r3, [pc, #300]	; (8004f94 <checkAktifCalisma+0x388>)
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d011      	beq.n	8004e90 <checkAktifCalisma+0x284>
 8004e6c:	4b4a      	ldr	r3, [pc, #296]	; (8004f98 <checkAktifCalisma+0x38c>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00d      	beq.n	8004e90 <checkAktifCalisma+0x284>
 8004e74:	4b49      	ldr	r3, [pc, #292]	; (8004f9c <checkAktifCalisma+0x390>)
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	f083 0301 	eor.w	r3, r3, #1
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d006      	beq.n	8004e90 <checkAktifCalisma+0x284>
			timer2=millis;
 8004e82:	4b47      	ldr	r3, [pc, #284]	; (8004fa0 <checkAktifCalisma+0x394>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a47      	ldr	r2, [pc, #284]	; (8004fa4 <checkAktifCalisma+0x398>)
 8004e88:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8004e8a:	4b44      	ldr	r3, [pc, #272]	; (8004f9c <checkAktifCalisma+0x390>)
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004e90:	4b43      	ldr	r3, [pc, #268]	; (8004fa0 <checkAktifCalisma+0x394>)
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	4b43      	ldr	r3, [pc, #268]	; (8004fa4 <checkAktifCalisma+0x398>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	4a43      	ldr	r2, [pc, #268]	; (8004fa8 <checkAktifCalisma+0x39c>)
 8004e9c:	7812      	ldrb	r2, [r2, #0]
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d303      	bcc.n	8004eaa <checkAktifCalisma+0x29e>
 8004ea2:	4b3e      	ldr	r3, [pc, #248]	; (8004f9c <checkAktifCalisma+0x390>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d111      	bne.n	8004ece <checkAktifCalisma+0x2c2>
 8004eaa:	4b39      	ldr	r3, [pc, #228]	; (8004f90 <checkAktifCalisma+0x384>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	f083 0301 	eor.w	r3, r3, #1
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10a      	bne.n	8004ece <checkAktifCalisma+0x2c2>
 8004eb8:	4b36      	ldr	r3, [pc, #216]	; (8004f94 <checkAktifCalisma+0x388>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	f083 0301 	eor.w	r3, r3, #1
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d103      	bne.n	8004ece <checkAktifCalisma+0x2c2>
 8004ec6:	4b34      	ldr	r3, [pc, #208]	; (8004f98 <checkAktifCalisma+0x38c>)
 8004ec8:	781b      	ldrb	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10a      	bne.n	8004ee4 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2104      	movs	r1, #4
 8004ed2:	4828      	ldr	r0, [pc, #160]	; (8004f74 <checkAktifCalisma+0x368>)
 8004ed4:	f003 ffcd 	bl	8008e72 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8004ed8:	4b2a      	ldr	r3, [pc, #168]	; (8004f84 <checkAktifCalisma+0x378>)
 8004eda:	2200      	movs	r2, #0
 8004edc:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8004ede:	4b2f      	ldr	r3, [pc, #188]	; (8004f9c <checkAktifCalisma+0x390>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8004ee4:	4b31      	ldr	r3, [pc, #196]	; (8004fac <checkAktifCalisma+0x3a0>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d102      	bne.n	8004ef2 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8004eec:	4b30      	ldr	r3, [pc, #192]	; (8004fb0 <checkAktifCalisma+0x3a4>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004ef2:	4b2e      	ldr	r3, [pc, #184]	; (8004fac <checkAktifCalisma+0x3a0>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d116      	bne.n	8004f28 <checkAktifCalisma+0x31c>
 8004efa:	4b2e      	ldr	r3, [pc, #184]	; (8004fb4 <checkAktifCalisma+0x3a8>)
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d112      	bne.n	8004f28 <checkAktifCalisma+0x31c>
 8004f02:	2101      	movs	r1, #1
 8004f04:	4821      	ldr	r0, [pc, #132]	; (8004f8c <checkAktifCalisma+0x380>)
 8004f06:	f003 ff9d 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10b      	bne.n	8004f28 <checkAktifCalisma+0x31c>
 8004f10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f14:	4817      	ldr	r0, [pc, #92]	; (8004f74 <checkAktifCalisma+0x368>)
 8004f16:	f003 ff95 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d103      	bne.n	8004f28 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8004f20:	4b23      	ldr	r3, [pc, #140]	; (8004fb0 <checkAktifCalisma+0x3a4>)
 8004f22:	2201      	movs	r2, #1
 8004f24:	701a      	strb	r2, [r3, #0]
 8004f26:	e011      	b.n	8004f4c <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004f28:	4b20      	ldr	r3, [pc, #128]	; (8004fac <checkAktifCalisma+0x3a0>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d10d      	bne.n	8004f4c <checkAktifCalisma+0x340>
 8004f30:	2101      	movs	r1, #1
 8004f32:	4816      	ldr	r0, [pc, #88]	; (8004f8c <checkAktifCalisma+0x380>)
 8004f34:	f003 ff86 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d106      	bne.n	8004f4c <checkAktifCalisma+0x340>
 8004f3e:	4b1d      	ldr	r3, [pc, #116]	; (8004fb4 <checkAktifCalisma+0x3a8>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d102      	bne.n	8004f4c <checkAktifCalisma+0x340>
			cerceveVar=0;
 8004f46:	4b1a      	ldr	r3, [pc, #104]	; (8004fb0 <checkAktifCalisma+0x3a4>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8004f4c:	4b17      	ldr	r3, [pc, #92]	; (8004fac <checkAktifCalisma+0x3a0>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d134      	bne.n	8004fbe <checkAktifCalisma+0x3b2>
 8004f54:	4b17      	ldr	r3, [pc, #92]	; (8004fb4 <checkAktifCalisma+0x3a8>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d130      	bne.n	8004fbe <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	480b      	ldr	r0, [pc, #44]	; (8004f8c <checkAktifCalisma+0x380>)
 8004f60:	f003 ff70 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d126      	bne.n	8004fb8 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8004f6a:	4b11      	ldr	r3, [pc, #68]	; (8004fb0 <checkAktifCalisma+0x3a4>)
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	701a      	strb	r2, [r3, #0]
 8004f70:	e025      	b.n	8004fbe <checkAktifCalisma+0x3b2>
 8004f72:	bf00      	nop
 8004f74:	40010c00 	.word	0x40010c00
 8004f78:	20000235 	.word	0x20000235
 8004f7c:	2000020f 	.word	0x2000020f
 8004f80:	20000213 	.word	0x20000213
 8004f84:	20000239 	.word	0x20000239
 8004f88:	2000023c 	.word	0x2000023c
 8004f8c:	40011000 	.word	0x40011000
 8004f90:	20000252 	.word	0x20000252
 8004f94:	20000253 	.word	0x20000253
 8004f98:	20000203 	.word	0x20000203
 8004f9c:	20000231 	.word	0x20000231
 8004fa0:	200001dc 	.word	0x200001dc
 8004fa4:	200001e8 	.word	0x200001e8
 8004fa8:	20000214 	.word	0x20000214
 8004fac:	20000204 	.word	0x20000204
 8004fb0:	20000257 	.word	0x20000257
 8004fb4:	20000201 	.word	0x20000201
			} else {
				cerceveVar=0;
 8004fb8:	4b7f      	ldr	r3, [pc, #508]	; (80051b8 <checkAktifCalisma+0x5ac>)
 8004fba:	2200      	movs	r2, #0
 8004fbc:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004fbe:	4b7f      	ldr	r3, [pc, #508]	; (80051bc <checkAktifCalisma+0x5b0>)
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d17c      	bne.n	80050c0 <checkAktifCalisma+0x4b4>
 8004fc6:	4b7e      	ldr	r3, [pc, #504]	; (80051c0 <checkAktifCalisma+0x5b4>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d078      	beq.n	80050c0 <checkAktifCalisma+0x4b4>
 8004fce:	4b7d      	ldr	r3, [pc, #500]	; (80051c4 <checkAktifCalisma+0x5b8>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d074      	beq.n	80050c0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004fd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004fda:	487b      	ldr	r0, [pc, #492]	; (80051c8 <checkAktifCalisma+0x5bc>)
 8004fdc:	f003 ff32 	bl	8008e44 <HAL_GPIO_ReadPin>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d003      	beq.n	8004fee <checkAktifCalisma+0x3e2>
 8004fe6:	4b79      	ldr	r3, [pc, #484]	; (80051cc <checkAktifCalisma+0x5c0>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d068      	beq.n	80050c0 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8004fee:	4b72      	ldr	r3, [pc, #456]	; (80051b8 <checkAktifCalisma+0x5ac>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d064      	beq.n	80050c0 <checkAktifCalisma+0x4b4>
 8004ff6:	4b76      	ldr	r3, [pc, #472]	; (80051d0 <checkAktifCalisma+0x5c4>)
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	f083 0301 	eor.w	r3, r3, #1
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d05d      	beq.n	80050c0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005004:	2104      	movs	r1, #4
 8005006:	4873      	ldr	r0, [pc, #460]	; (80051d4 <checkAktifCalisma+0x5c8>)
 8005008:	f003 ff1c 	bl	8008e44 <HAL_GPIO_ReadPin>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <checkAktifCalisma+0x40e>
 8005012:	4b71      	ldr	r3, [pc, #452]	; (80051d8 <checkAktifCalisma+0x5cc>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d152      	bne.n	80050c0 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800501a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800501e:	486a      	ldr	r0, [pc, #424]	; (80051c8 <checkAktifCalisma+0x5bc>)
 8005020:	f003 ff10 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005024:	4603      	mov	r3, r0
 8005026:	2b01      	cmp	r3, #1
 8005028:	d10e      	bne.n	8005048 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800502a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800502e:	4866      	ldr	r0, [pc, #408]	; (80051c8 <checkAktifCalisma+0x5bc>)
 8005030:	f003 ff08 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005034:	4603      	mov	r3, r0
 8005036:	2b01      	cmp	r3, #1
 8005038:	d106      	bne.n	8005048 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800503a:	2140      	movs	r1, #64	; 0x40
 800503c:	4865      	ldr	r0, [pc, #404]	; (80051d4 <checkAktifCalisma+0x5c8>)
 800503e:	f003 ff01 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005042:	4603      	mov	r3, r0
 8005044:	2b01      	cmp	r3, #1
 8005046:	d003      	beq.n	8005050 <checkAktifCalisma+0x444>
 8005048:	4b64      	ldr	r3, [pc, #400]	; (80051dc <checkAktifCalisma+0x5d0>)
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d037      	beq.n	80050c0 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005050:	4b63      	ldr	r3, [pc, #396]	; (80051e0 <checkAktifCalisma+0x5d4>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	f083 0301 	eor.w	r3, r3, #1
 8005058:	b2db      	uxtb	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d030      	beq.n	80050c0 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800505e:	4b61      	ldr	r3, [pc, #388]	; (80051e4 <checkAktifCalisma+0x5d8>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	f083 0301 	eor.w	r3, r3, #1
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d029      	beq.n	80050c0 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 800506c:	4b5e      	ldr	r3, [pc, #376]	; (80051e8 <checkAktifCalisma+0x5dc>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	f083 0301 	eor.w	r3, r3, #1
 8005074:	b2db      	uxtb	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d022      	beq.n	80050c0 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 800507a:	4b5c      	ldr	r3, [pc, #368]	; (80051ec <checkAktifCalisma+0x5e0>)
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	f083 0301 	eor.w	r3, r3, #1
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01b      	beq.n	80050c0 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005088:	4b59      	ldr	r3, [pc, #356]	; (80051f0 <checkAktifCalisma+0x5e4>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	f083 0301 	eor.w	r3, r3, #1
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b00      	cmp	r3, #0
 8005094:	d014      	beq.n	80050c0 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8005096:	4b57      	ldr	r3, [pc, #348]	; (80051f4 <checkAktifCalisma+0x5e8>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	f083 0301 	eor.w	r3, r3, #1
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00d      	beq.n	80050c0 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80050a4:	2201      	movs	r2, #1
 80050a6:	2102      	movs	r1, #2
 80050a8:	4847      	ldr	r0, [pc, #284]	; (80051c8 <checkAktifCalisma+0x5bc>)
 80050aa:	f003 fee2 	bl	8008e72 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80050ae:	4b4b      	ldr	r3, [pc, #300]	; (80051dc <checkAktifCalisma+0x5d0>)
 80050b0:	2201      	movs	r2, #1
 80050b2:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80050b4:	4b50      	ldr	r3, [pc, #320]	; (80051f8 <checkAktifCalisma+0x5ec>)
 80050b6:	2201      	movs	r2, #1
 80050b8:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80050ba:	4b50      	ldr	r3, [pc, #320]	; (80051fc <checkAktifCalisma+0x5f0>)
 80050bc:	2201      	movs	r2, #1
 80050be:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80050c0:	4b46      	ldr	r3, [pc, #280]	; (80051dc <checkAktifCalisma+0x5d0>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d033      	beq.n	8005130 <checkAktifCalisma+0x524>
 80050c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050cc:	483e      	ldr	r0, [pc, #248]	; (80051c8 <checkAktifCalisma+0x5bc>)
 80050ce:	f003 feb9 	bl	8008e44 <HAL_GPIO_ReadPin>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d106      	bne.n	80050e6 <checkAktifCalisma+0x4da>
 80050d8:	4b3c      	ldr	r3, [pc, #240]	; (80051cc <checkAktifCalisma+0x5c0>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	f083 0301 	eor.w	r3, r3, #1
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10a      	bne.n	80050fc <checkAktifCalisma+0x4f0>
 80050e6:	2104      	movs	r1, #4
 80050e8:	483a      	ldr	r0, [pc, #232]	; (80051d4 <checkAktifCalisma+0x5c8>)
 80050ea:	f003 feab 	bl	8008e44 <HAL_GPIO_ReadPin>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d11d      	bne.n	8005130 <checkAktifCalisma+0x524>
 80050f4:	4b38      	ldr	r3, [pc, #224]	; (80051d8 <checkAktifCalisma+0x5cc>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d019      	beq.n	8005130 <checkAktifCalisma+0x524>
 80050fc:	4b30      	ldr	r3, [pc, #192]	; (80051c0 <checkAktifCalisma+0x5b4>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d015      	beq.n	8005130 <checkAktifCalisma+0x524>
 8005104:	4b2f      	ldr	r3, [pc, #188]	; (80051c4 <checkAktifCalisma+0x5b8>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d011      	beq.n	8005130 <checkAktifCalisma+0x524>
 800510c:	4b2a      	ldr	r3, [pc, #168]	; (80051b8 <checkAktifCalisma+0x5ac>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00d      	beq.n	8005130 <checkAktifCalisma+0x524>
 8005114:	4b3a      	ldr	r3, [pc, #232]	; (8005200 <checkAktifCalisma+0x5f4>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	f083 0301 	eor.w	r3, r3, #1
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d006      	beq.n	8005130 <checkAktifCalisma+0x524>
			timer2=millis;
 8005122:	4b38      	ldr	r3, [pc, #224]	; (8005204 <checkAktifCalisma+0x5f8>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a38      	ldr	r2, [pc, #224]	; (8005208 <checkAktifCalisma+0x5fc>)
 8005128:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800512a:	4b35      	ldr	r3, [pc, #212]	; (8005200 <checkAktifCalisma+0x5f4>)
 800512c:	2201      	movs	r2, #1
 800512e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005130:	4b34      	ldr	r3, [pc, #208]	; (8005204 <checkAktifCalisma+0x5f8>)
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	4b34      	ldr	r3, [pc, #208]	; (8005208 <checkAktifCalisma+0x5fc>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	4a34      	ldr	r2, [pc, #208]	; (800520c <checkAktifCalisma+0x600>)
 800513c:	7812      	ldrb	r2, [r2, #0]
 800513e:	4293      	cmp	r3, r2
 8005140:	d303      	bcc.n	800514a <checkAktifCalisma+0x53e>
 8005142:	4b2f      	ldr	r3, [pc, #188]	; (8005200 <checkAktifCalisma+0x5f4>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d114      	bne.n	8005174 <checkAktifCalisma+0x568>
 800514a:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <checkAktifCalisma+0x5b4>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	f083 0301 	eor.w	r3, r3, #1
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10d      	bne.n	8005174 <checkAktifCalisma+0x568>
 8005158:	4b1a      	ldr	r3, [pc, #104]	; (80051c4 <checkAktifCalisma+0x5b8>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	f083 0301 	eor.w	r3, r3, #1
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d106      	bne.n	8005174 <checkAktifCalisma+0x568>
 8005166:	4b14      	ldr	r3, [pc, #80]	; (80051b8 <checkAktifCalisma+0x5ac>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	f083 0301 	eor.w	r3, r3, #1
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005174:	2200      	movs	r2, #0
 8005176:	2102      	movs	r1, #2
 8005178:	4813      	ldr	r0, [pc, #76]	; (80051c8 <checkAktifCalisma+0x5bc>)
 800517a:	f003 fe7a 	bl	8008e72 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 800517e:	4b17      	ldr	r3, [pc, #92]	; (80051dc <checkAktifCalisma+0x5d0>)
 8005180:	2200      	movs	r2, #0
 8005182:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005184:	4b1e      	ldr	r3, [pc, #120]	; (8005200 <checkAktifCalisma+0x5f4>)
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800518a:	4b14      	ldr	r3, [pc, #80]	; (80051dc <checkAktifCalisma+0x5d0>)
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d040      	beq.n	8005214 <checkAktifCalisma+0x608>
 8005192:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005196:	480f      	ldr	r0, [pc, #60]	; (80051d4 <checkAktifCalisma+0x5c8>)
 8005198:	f003 fe54 	bl	8008e44 <HAL_GPIO_ReadPin>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d138      	bne.n	8005214 <checkAktifCalisma+0x608>
 80051a2:	4b1b      	ldr	r3, [pc, #108]	; (8005210 <checkAktifCalisma+0x604>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d034      	beq.n	8005214 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80051aa:	2201      	movs	r2, #1
 80051ac:	2101      	movs	r1, #1
 80051ae:	4806      	ldr	r0, [pc, #24]	; (80051c8 <checkAktifCalisma+0x5bc>)
 80051b0:	f003 fe5f 	bl	8008e72 <HAL_GPIO_WritePin>
 80051b4:	e033      	b.n	800521e <checkAktifCalisma+0x612>
 80051b6:	bf00      	nop
 80051b8:	20000257 	.word	0x20000257
 80051bc:	2000021d 	.word	0x2000021d
 80051c0:	20000252 	.word	0x20000252
 80051c4:	20000253 	.word	0x20000253
 80051c8:	40010c00 	.word	0x40010c00
 80051cc:	2000023d 	.word	0x2000023d
 80051d0:	20000251 	.word	0x20000251
 80051d4:	40011000 	.word	0x40011000
 80051d8:	20000206 	.word	0x20000206
 80051dc:	20000238 	.word	0x20000238
 80051e0:	20000235 	.word	0x20000235
 80051e4:	20000239 	.word	0x20000239
 80051e8:	20000236 	.word	0x20000236
 80051ec:	20000237 	.word	0x20000237
 80051f0:	2000023a 	.word	0x2000023a
 80051f4:	2000023b 	.word	0x2000023b
 80051f8:	20000240 	.word	0x20000240
 80051fc:	20000261 	.word	0x20000261
 8005200:	20000230 	.word	0x20000230
 8005204:	200001dc 	.word	0x200001dc
 8005208:	200001e8 	.word	0x200001e8
 800520c:	20000215 	.word	0x20000215
 8005210:	20000205 	.word	0x20000205
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005214:	2200      	movs	r2, #0
 8005216:	2101      	movs	r1, #1
 8005218:	4836      	ldr	r0, [pc, #216]	; (80052f4 <checkAktifCalisma+0x6e8>)
 800521a:	f003 fe2a 	bl	8008e72 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800521e:	4b36      	ldr	r3, [pc, #216]	; (80052f8 <checkAktifCalisma+0x6ec>)
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	f040 8080 	bne.w	8005328 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005228:	4b34      	ldr	r3, [pc, #208]	; (80052fc <checkAktifCalisma+0x6f0>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d003      	beq.n	8005238 <checkAktifCalisma+0x62c>
 8005230:	4b32      	ldr	r3, [pc, #200]	; (80052fc <checkAktifCalisma+0x6f0>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b02      	cmp	r3, #2
 8005236:	d177      	bne.n	8005328 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005238:	4b31      	ldr	r3, [pc, #196]	; (8005300 <checkAktifCalisma+0x6f4>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d073      	beq.n	8005328 <checkAktifCalisma+0x71c>
 8005240:	4b30      	ldr	r3, [pc, #192]	; (8005304 <checkAktifCalisma+0x6f8>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d06f      	beq.n	8005328 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005248:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800524c:	4829      	ldr	r0, [pc, #164]	; (80052f4 <checkAktifCalisma+0x6e8>)
 800524e:	f003 fdf9 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d167      	bne.n	8005328 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005258:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800525c:	482a      	ldr	r0, [pc, #168]	; (8005308 <checkAktifCalisma+0x6fc>)
 800525e:	f003 fdf1 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d003      	beq.n	8005270 <checkAktifCalisma+0x664>
 8005268:	4b28      	ldr	r3, [pc, #160]	; (800530c <checkAktifCalisma+0x700>)
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d15b      	bne.n	8005328 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005270:	2140      	movs	r1, #64	; 0x40
 8005272:	4825      	ldr	r0, [pc, #148]	; (8005308 <checkAktifCalisma+0x6fc>)
 8005274:	f003 fde6 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005278:	4603      	mov	r3, r0
 800527a:	2b01      	cmp	r3, #1
 800527c:	d10f      	bne.n	800529e <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800527e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005282:	481c      	ldr	r0, [pc, #112]	; (80052f4 <checkAktifCalisma+0x6e8>)
 8005284:	f003 fdde 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005288:	4603      	mov	r3, r0
 800528a:	2b01      	cmp	r3, #1
 800528c:	d107      	bne.n	800529e <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 800528e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005292:	4818      	ldr	r0, [pc, #96]	; (80052f4 <checkAktifCalisma+0x6e8>)
 8005294:	f003 fdd6 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005298:	4603      	mov	r3, r0
 800529a:	2b01      	cmp	r3, #1
 800529c:	d003      	beq.n	80052a6 <checkAktifCalisma+0x69a>
 800529e:	4b1c      	ldr	r3, [pc, #112]	; (8005310 <checkAktifCalisma+0x704>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d040      	beq.n	8005328 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80052a6:	4b1b      	ldr	r3, [pc, #108]	; (8005314 <checkAktifCalisma+0x708>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	f083 0301 	eor.w	r3, r3, #1
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d039      	beq.n	8005328 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80052b4:	4b18      	ldr	r3, [pc, #96]	; (8005318 <checkAktifCalisma+0x70c>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	f083 0301 	eor.w	r3, r3, #1
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d032      	beq.n	8005328 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80052c2:	4b16      	ldr	r3, [pc, #88]	; (800531c <checkAktifCalisma+0x710>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	f083 0301 	eor.w	r3, r3, #1
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d02b      	beq.n	8005328 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80052d0:	4b13      	ldr	r3, [pc, #76]	; (8005320 <checkAktifCalisma+0x714>)
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	f083 0301 	eor.w	r3, r3, #1
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d024      	beq.n	8005328 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80052de:	4b11      	ldr	r3, [pc, #68]	; (8005324 <checkAktifCalisma+0x718>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	f083 0301 	eor.w	r3, r3, #1
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01d      	beq.n	8005328 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 80052ec:	4b08      	ldr	r3, [pc, #32]	; (8005310 <checkAktifCalisma+0x704>)
 80052ee:	2201      	movs	r2, #1
 80052f0:	701a      	strb	r2, [r3, #0]
 80052f2:	e01c      	b.n	800532e <checkAktifCalisma+0x722>
 80052f4:	40010c00 	.word	0x40010c00
 80052f8:	2000021d 	.word	0x2000021d
 80052fc:	2000020f 	.word	0x2000020f
 8005300:	20000252 	.word	0x20000252
 8005304:	20000253 	.word	0x20000253
 8005308:	40011000 	.word	0x40011000
 800530c:	20000210 	.word	0x20000210
 8005310:	20000236 	.word	0x20000236
 8005314:	20000235 	.word	0x20000235
 8005318:	20000239 	.word	0x20000239
 800531c:	20000238 	.word	0x20000238
 8005320:	20000237 	.word	0x20000237
 8005324:	2000023b 	.word	0x2000023b
		} else {
			devmotoryukaricalisiyor=0;
 8005328:	4b64      	ldr	r3, [pc, #400]	; (80054bc <checkAktifCalisma+0x8b0>)
 800532a:	2200      	movs	r2, #0
 800532c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800532e:	4b63      	ldr	r3, [pc, #396]	; (80054bc <checkAktifCalisma+0x8b0>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d007      	beq.n	8005346 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005336:	2201      	movs	r2, #1
 8005338:	2120      	movs	r1, #32
 800533a:	4861      	ldr	r0, [pc, #388]	; (80054c0 <checkAktifCalisma+0x8b4>)
 800533c:	f003 fd99 	bl	8008e72 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005340:	4b60      	ldr	r3, [pc, #384]	; (80054c4 <checkAktifCalisma+0x8b8>)
 8005342:	2201      	movs	r2, #1
 8005344:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005346:	4b5f      	ldr	r3, [pc, #380]	; (80054c4 <checkAktifCalisma+0x8b8>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d025      	beq.n	800539a <checkAktifCalisma+0x78e>
 800534e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005352:	485d      	ldr	r0, [pc, #372]	; (80054c8 <checkAktifCalisma+0x8bc>)
 8005354:	f003 fd76 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005358:	4603      	mov	r3, r0
 800535a:	2b01      	cmp	r3, #1
 800535c:	d007      	beq.n	800536e <checkAktifCalisma+0x762>
 800535e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005362:	4857      	ldr	r0, [pc, #348]	; (80054c0 <checkAktifCalisma+0x8b4>)
 8005364:	f003 fd6e 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005368:	4603      	mov	r3, r0
 800536a:	2b01      	cmp	r3, #1
 800536c:	d115      	bne.n	800539a <checkAktifCalisma+0x78e>
 800536e:	4b57      	ldr	r3, [pc, #348]	; (80054cc <checkAktifCalisma+0x8c0>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d011      	beq.n	800539a <checkAktifCalisma+0x78e>
 8005376:	4b56      	ldr	r3, [pc, #344]	; (80054d0 <checkAktifCalisma+0x8c4>)
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00d      	beq.n	800539a <checkAktifCalisma+0x78e>
 800537e:	4b55      	ldr	r3, [pc, #340]	; (80054d4 <checkAktifCalisma+0x8c8>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	f083 0301 	eor.w	r3, r3, #1
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b00      	cmp	r3, #0
 800538a:	d006      	beq.n	800539a <checkAktifCalisma+0x78e>
			timer2=millis;
 800538c:	4b52      	ldr	r3, [pc, #328]	; (80054d8 <checkAktifCalisma+0x8cc>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a52      	ldr	r2, [pc, #328]	; (80054dc <checkAktifCalisma+0x8d0>)
 8005392:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8005394:	4b4f      	ldr	r3, [pc, #316]	; (80054d4 <checkAktifCalisma+0x8c8>)
 8005396:	2201      	movs	r2, #1
 8005398:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800539a:	4b4f      	ldr	r3, [pc, #316]	; (80054d8 <checkAktifCalisma+0x8cc>)
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	4b4f      	ldr	r3, [pc, #316]	; (80054dc <checkAktifCalisma+0x8d0>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	4a4e      	ldr	r2, [pc, #312]	; (80054e0 <checkAktifCalisma+0x8d4>)
 80053a6:	7812      	ldrb	r2, [r2, #0]
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d303      	bcc.n	80053b4 <checkAktifCalisma+0x7a8>
 80053ac:	4b49      	ldr	r3, [pc, #292]	; (80054d4 <checkAktifCalisma+0x8c8>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10d      	bne.n	80053d0 <checkAktifCalisma+0x7c4>
 80053b4:	4b45      	ldr	r3, [pc, #276]	; (80054cc <checkAktifCalisma+0x8c0>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	f083 0301 	eor.w	r3, r3, #1
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d106      	bne.n	80053d0 <checkAktifCalisma+0x7c4>
 80053c2:	4b43      	ldr	r3, [pc, #268]	; (80054d0 <checkAktifCalisma+0x8c4>)
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	f083 0301 	eor.w	r3, r3, #1
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80053d0:	2200      	movs	r2, #0
 80053d2:	2120      	movs	r1, #32
 80053d4:	483a      	ldr	r0, [pc, #232]	; (80054c0 <checkAktifCalisma+0x8b4>)
 80053d6:	f003 fd4c 	bl	8008e72 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80053da:	4b3a      	ldr	r3, [pc, #232]	; (80054c4 <checkAktifCalisma+0x8b8>)
 80053dc:	2200      	movs	r2, #0
 80053de:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80053e0:	4b3c      	ldr	r3, [pc, #240]	; (80054d4 <checkAktifCalisma+0x8c8>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80053e6:	4b3f      	ldr	r3, [pc, #252]	; (80054e4 <checkAktifCalisma+0x8d8>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f040 8088 	bne.w	8005500 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80053f0:	4b3d      	ldr	r3, [pc, #244]	; (80054e8 <checkAktifCalisma+0x8dc>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d003      	beq.n	8005400 <checkAktifCalisma+0x7f4>
 80053f8:	4b3b      	ldr	r3, [pc, #236]	; (80054e8 <checkAktifCalisma+0x8dc>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d17f      	bne.n	8005500 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005400:	4b32      	ldr	r3, [pc, #200]	; (80054cc <checkAktifCalisma+0x8c0>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d07b      	beq.n	8005500 <checkAktifCalisma+0x8f4>
 8005408:	4b31      	ldr	r3, [pc, #196]	; (80054d0 <checkAktifCalisma+0x8c4>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d077      	beq.n	8005500 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005410:	2140      	movs	r1, #64	; 0x40
 8005412:	482b      	ldr	r0, [pc, #172]	; (80054c0 <checkAktifCalisma+0x8b4>)
 8005414:	f003 fd16 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d170      	bne.n	8005500 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800541e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005422:	4827      	ldr	r0, [pc, #156]	; (80054c0 <checkAktifCalisma+0x8b4>)
 8005424:	f003 fd0e 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <checkAktifCalisma+0x82a>
 800542e:	4b2f      	ldr	r3, [pc, #188]	; (80054ec <checkAktifCalisma+0x8e0>)
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d164      	bne.n	8005500 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005436:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800543a:	4823      	ldr	r0, [pc, #140]	; (80054c8 <checkAktifCalisma+0x8bc>)
 800543c:	f003 fd02 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005440:	4603      	mov	r3, r0
 8005442:	2b01      	cmp	r3, #1
 8005444:	d10f      	bne.n	8005466 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005446:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800544a:	481f      	ldr	r0, [pc, #124]	; (80054c8 <checkAktifCalisma+0x8bc>)
 800544c:	f003 fcfa 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005450:	4603      	mov	r3, r0
 8005452:	2b01      	cmp	r3, #1
 8005454:	d107      	bne.n	8005466 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005456:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800545a:	481b      	ldr	r0, [pc, #108]	; (80054c8 <checkAktifCalisma+0x8bc>)
 800545c:	f003 fcf2 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005460:	4603      	mov	r3, r0
 8005462:	2b01      	cmp	r3, #1
 8005464:	d003      	beq.n	800546e <checkAktifCalisma+0x862>
 8005466:	4b22      	ldr	r3, [pc, #136]	; (80054f0 <checkAktifCalisma+0x8e4>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d048      	beq.n	8005500 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800546e:	4b21      	ldr	r3, [pc, #132]	; (80054f4 <checkAktifCalisma+0x8e8>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	f083 0301 	eor.w	r3, r3, #1
 8005476:	b2db      	uxtb	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	d041      	beq.n	8005500 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 800547c:	4b1e      	ldr	r3, [pc, #120]	; (80054f8 <checkAktifCalisma+0x8ec>)
 800547e:	781b      	ldrb	r3, [r3, #0]
 8005480:	f083 0301 	eor.w	r3, r3, #1
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d03a      	beq.n	8005500 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 800548a:	4b1c      	ldr	r3, [pc, #112]	; (80054fc <checkAktifCalisma+0x8f0>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	f083 0301 	eor.w	r3, r3, #1
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d033      	beq.n	8005500 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8005498:	4b0a      	ldr	r3, [pc, #40]	; (80054c4 <checkAktifCalisma+0x8b8>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	f083 0301 	eor.w	r3, r3, #1
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d02c      	beq.n	8005500 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80054a6:	4b05      	ldr	r3, [pc, #20]	; (80054bc <checkAktifCalisma+0x8b0>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	f083 0301 	eor.w	r3, r3, #1
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d025      	beq.n	8005500 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80054b4:	4b0e      	ldr	r3, [pc, #56]	; (80054f0 <checkAktifCalisma+0x8e4>)
 80054b6:	2201      	movs	r2, #1
 80054b8:	701a      	strb	r2, [r3, #0]
 80054ba:	e024      	b.n	8005506 <checkAktifCalisma+0x8fa>
 80054bc:	20000236 	.word	0x20000236
 80054c0:	40011000 	.word	0x40011000
 80054c4:	2000023a 	.word	0x2000023a
 80054c8:	40010c00 	.word	0x40010c00
 80054cc:	20000252 	.word	0x20000252
 80054d0:	20000253 	.word	0x20000253
 80054d4:	20000232 	.word	0x20000232
 80054d8:	200001dc 	.word	0x200001dc
 80054dc:	200001e8 	.word	0x200001e8
 80054e0:	20000216 	.word	0x20000216
 80054e4:	2000021d 	.word	0x2000021d
 80054e8:	2000020f 	.word	0x2000020f
 80054ec:	20000211 	.word	0x20000211
 80054f0:	20000237 	.word	0x20000237
 80054f4:	20000235 	.word	0x20000235
 80054f8:	20000239 	.word	0x20000239
 80054fc:	20000238 	.word	0x20000238
		} else {
			devmotorasagicalisiyor=0;
 8005500:	4b96      	ldr	r3, [pc, #600]	; (800575c <checkAktifCalisma+0xb50>)
 8005502:	2200      	movs	r2, #0
 8005504:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8005506:	4b95      	ldr	r3, [pc, #596]	; (800575c <checkAktifCalisma+0xb50>)
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d007      	beq.n	800551e <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800550e:	2201      	movs	r2, #1
 8005510:	2110      	movs	r1, #16
 8005512:	4893      	ldr	r0, [pc, #588]	; (8005760 <checkAktifCalisma+0xb54>)
 8005514:	f003 fcad 	bl	8008e72 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8005518:	4b92      	ldr	r3, [pc, #584]	; (8005764 <checkAktifCalisma+0xb58>)
 800551a:	2201      	movs	r2, #1
 800551c:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800551e:	4b91      	ldr	r3, [pc, #580]	; (8005764 <checkAktifCalisma+0xb58>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d024      	beq.n	8005570 <checkAktifCalisma+0x964>
 8005526:	2140      	movs	r1, #64	; 0x40
 8005528:	488d      	ldr	r0, [pc, #564]	; (8005760 <checkAktifCalisma+0xb54>)
 800552a:	f003 fc8b 	bl	8008e44 <HAL_GPIO_ReadPin>
 800552e:	4603      	mov	r3, r0
 8005530:	2b01      	cmp	r3, #1
 8005532:	d007      	beq.n	8005544 <checkAktifCalisma+0x938>
 8005534:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005538:	4889      	ldr	r0, [pc, #548]	; (8005760 <checkAktifCalisma+0xb54>)
 800553a:	f003 fc83 	bl	8008e44 <HAL_GPIO_ReadPin>
 800553e:	4603      	mov	r3, r0
 8005540:	2b01      	cmp	r3, #1
 8005542:	d115      	bne.n	8005570 <checkAktifCalisma+0x964>
 8005544:	4b88      	ldr	r3, [pc, #544]	; (8005768 <checkAktifCalisma+0xb5c>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d011      	beq.n	8005570 <checkAktifCalisma+0x964>
 800554c:	4b87      	ldr	r3, [pc, #540]	; (800576c <checkAktifCalisma+0xb60>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00d      	beq.n	8005570 <checkAktifCalisma+0x964>
 8005554:	4b86      	ldr	r3, [pc, #536]	; (8005770 <checkAktifCalisma+0xb64>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	f083 0301 	eor.w	r3, r3, #1
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d006      	beq.n	8005570 <checkAktifCalisma+0x964>
			timer2=millis;
 8005562:	4b84      	ldr	r3, [pc, #528]	; (8005774 <checkAktifCalisma+0xb68>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a84      	ldr	r2, [pc, #528]	; (8005778 <checkAktifCalisma+0xb6c>)
 8005568:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 800556a:	4b81      	ldr	r3, [pc, #516]	; (8005770 <checkAktifCalisma+0xb64>)
 800556c:	2201      	movs	r2, #1
 800556e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005570:	4b80      	ldr	r3, [pc, #512]	; (8005774 <checkAktifCalisma+0xb68>)
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	4b80      	ldr	r3, [pc, #512]	; (8005778 <checkAktifCalisma+0xb6c>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	4a80      	ldr	r2, [pc, #512]	; (800577c <checkAktifCalisma+0xb70>)
 800557c:	7812      	ldrb	r2, [r2, #0]
 800557e:	4293      	cmp	r3, r2
 8005580:	d303      	bcc.n	800558a <checkAktifCalisma+0x97e>
 8005582:	4b7b      	ldr	r3, [pc, #492]	; (8005770 <checkAktifCalisma+0xb64>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10d      	bne.n	80055a6 <checkAktifCalisma+0x99a>
 800558a:	4b77      	ldr	r3, [pc, #476]	; (8005768 <checkAktifCalisma+0xb5c>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	f083 0301 	eor.w	r3, r3, #1
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d106      	bne.n	80055a6 <checkAktifCalisma+0x99a>
 8005598:	4b74      	ldr	r3, [pc, #464]	; (800576c <checkAktifCalisma+0xb60>)
 800559a:	781b      	ldrb	r3, [r3, #0]
 800559c:	f083 0301 	eor.w	r3, r3, #1
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80055a6:	2200      	movs	r2, #0
 80055a8:	2110      	movs	r1, #16
 80055aa:	486d      	ldr	r0, [pc, #436]	; (8005760 <checkAktifCalisma+0xb54>)
 80055ac:	f003 fc61 	bl	8008e72 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80055b0:	4b6c      	ldr	r3, [pc, #432]	; (8005764 <checkAktifCalisma+0xb58>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80055b6:	4b6e      	ldr	r3, [pc, #440]	; (8005770 <checkAktifCalisma+0xb64>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80055bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055c0:	486f      	ldr	r0, [pc, #444]	; (8005780 <checkAktifCalisma+0xb74>)
 80055c2:	f003 fc3f 	bl	8008e44 <HAL_GPIO_ReadPin>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d120      	bne.n	800560e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80055cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055d0:	486b      	ldr	r0, [pc, #428]	; (8005780 <checkAktifCalisma+0xb74>)
 80055d2:	f003 fc37 	bl	8008e44 <HAL_GPIO_ReadPin>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d118      	bne.n	800560e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80055dc:	2104      	movs	r1, #4
 80055de:	4868      	ldr	r0, [pc, #416]	; (8005780 <checkAktifCalisma+0xb74>)
 80055e0:	f003 fc30 	bl	8008e44 <HAL_GPIO_ReadPin>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d111      	bne.n	800560e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80055ea:	2102      	movs	r1, #2
 80055ec:	4864      	ldr	r0, [pc, #400]	; (8005780 <checkAktifCalisma+0xb74>)
 80055ee:	f003 fc29 	bl	8008e44 <HAL_GPIO_ReadPin>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10a      	bne.n	800560e <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80055f8:	2101      	movs	r1, #1
 80055fa:	4861      	ldr	r0, [pc, #388]	; (8005780 <checkAktifCalisma+0xb74>)
 80055fc:	f003 fc22 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d103      	bne.n	800560e <checkAktifCalisma+0xa02>
			makineStop=1;
 8005606:	4b5f      	ldr	r3, [pc, #380]	; (8005784 <checkAktifCalisma+0xb78>)
 8005608:	2201      	movs	r2, #1
 800560a:	701a      	strb	r2, [r3, #0]
 800560c:	e002      	b.n	8005614 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 800560e:	4b5d      	ldr	r3, [pc, #372]	; (8005784 <checkAktifCalisma+0xb78>)
 8005610:	2200      	movs	r2, #0
 8005612:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005614:	4b5c      	ldr	r3, [pc, #368]	; (8005788 <checkAktifCalisma+0xb7c>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d144      	bne.n	80056a6 <checkAktifCalisma+0xa9a>
 800561c:	4b5b      	ldr	r3, [pc, #364]	; (800578c <checkAktifCalisma+0xb80>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d003      	beq.n	800562c <checkAktifCalisma+0xa20>
 8005624:	4b59      	ldr	r3, [pc, #356]	; (800578c <checkAktifCalisma+0xb80>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	2b03      	cmp	r3, #3
 800562a:	d13c      	bne.n	80056a6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800562c:	2180      	movs	r1, #128	; 0x80
 800562e:	484c      	ldr	r0, [pc, #304]	; (8005760 <checkAktifCalisma+0xb54>)
 8005630:	f003 fc08 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d103      	bne.n	8005642 <checkAktifCalisma+0xa36>
 800563a:	4b55      	ldr	r3, [pc, #340]	; (8005790 <checkAktifCalisma+0xb84>)
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00b      	beq.n	800565a <checkAktifCalisma+0xa4e>
 8005642:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005646:	484e      	ldr	r0, [pc, #312]	; (8005780 <checkAktifCalisma+0xb74>)
 8005648:	f003 fbfc 	bl	8008e44 <HAL_GPIO_ReadPin>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d129      	bne.n	80056a6 <checkAktifCalisma+0xa9a>
 8005652:	4b4f      	ldr	r3, [pc, #316]	; (8005790 <checkAktifCalisma+0xb84>)
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	2b01      	cmp	r3, #1
 8005658:	d125      	bne.n	80056a6 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800565a:	2104      	movs	r1, #4
 800565c:	4840      	ldr	r0, [pc, #256]	; (8005760 <checkAktifCalisma+0xb54>)
 800565e:	f003 fbf1 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005662:	4603      	mov	r3, r0
 8005664:	2b01      	cmp	r3, #1
 8005666:	d003      	beq.n	8005670 <checkAktifCalisma+0xa64>
 8005668:	4b4a      	ldr	r3, [pc, #296]	; (8005794 <checkAktifCalisma+0xb88>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d11a      	bne.n	80056a6 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005670:	2102      	movs	r1, #2
 8005672:	483b      	ldr	r0, [pc, #236]	; (8005760 <checkAktifCalisma+0xb54>)
 8005674:	f003 fbe6 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d113      	bne.n	80056a6 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 800567e:	4b46      	ldr	r3, [pc, #280]	; (8005798 <checkAktifCalisma+0xb8c>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	f083 0301 	eor.w	r3, r3, #1
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00c      	beq.n	80056a6 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 800568c:	4b3d      	ldr	r3, [pc, #244]	; (8005784 <checkAktifCalisma+0xb78>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8005694:	4b41      	ldr	r3, [pc, #260]	; (800579c <checkAktifCalisma+0xb90>)
 8005696:	2201      	movs	r2, #1
 8005698:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800569a:	4b36      	ldr	r3, [pc, #216]	; (8005774 <checkAktifCalisma+0xb68>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a40      	ldr	r2, [pc, #256]	; (80057a0 <checkAktifCalisma+0xb94>)
 80056a0:	6013      	str	r3, [r2, #0]
			bekle();
 80056a2:	f7ff f935 	bl	8004910 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80056a6:	4b33      	ldr	r3, [pc, #204]	; (8005774 <checkAktifCalisma+0xb68>)
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	4b3d      	ldr	r3, [pc, #244]	; (80057a0 <checkAktifCalisma+0xb94>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	4a3c      	ldr	r2, [pc, #240]	; (80057a4 <checkAktifCalisma+0xb98>)
 80056b2:	7812      	ldrb	r2, [r2, #0]
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d211      	bcs.n	80056dc <checkAktifCalisma+0xad0>
 80056b8:	2104      	movs	r1, #4
 80056ba:	4829      	ldr	r0, [pc, #164]	; (8005760 <checkAktifCalisma+0xb54>)
 80056bc:	f003 fbc2 	bl	8008e44 <HAL_GPIO_ReadPin>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <checkAktifCalisma+0xad0>
 80056c6:	4b33      	ldr	r3, [pc, #204]	; (8005794 <checkAktifCalisma+0xb88>)
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d006      	beq.n	80056dc <checkAktifCalisma+0xad0>
 80056ce:	4b2d      	ldr	r3, [pc, #180]	; (8005784 <checkAktifCalisma+0xb78>)
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	f083 0301 	eor.w	r3, r3, #1
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d002      	beq.n	80056e2 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80056dc:	4b2f      	ldr	r3, [pc, #188]	; (800579c <checkAktifCalisma+0xb90>)
 80056de:	2200      	movs	r2, #0
 80056e0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80056e2:	4b29      	ldr	r3, [pc, #164]	; (8005788 <checkAktifCalisma+0xb7c>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d160      	bne.n	80057ac <checkAktifCalisma+0xba0>
 80056ea:	4b28      	ldr	r3, [pc, #160]	; (800578c <checkAktifCalisma+0xb80>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d003      	beq.n	80056fa <checkAktifCalisma+0xaee>
 80056f2:	4b26      	ldr	r3, [pc, #152]	; (800578c <checkAktifCalisma+0xb80>)
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d158      	bne.n	80057ac <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80056fa:	2104      	movs	r1, #4
 80056fc:	4818      	ldr	r0, [pc, #96]	; (8005760 <checkAktifCalisma+0xb54>)
 80056fe:	f003 fba1 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005702:	4603      	mov	r3, r0
 8005704:	2b01      	cmp	r3, #1
 8005706:	d003      	beq.n	8005710 <checkAktifCalisma+0xb04>
 8005708:	4b22      	ldr	r3, [pc, #136]	; (8005794 <checkAktifCalisma+0xb88>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d14d      	bne.n	80057ac <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005710:	2102      	movs	r1, #2
 8005712:	4813      	ldr	r0, [pc, #76]	; (8005760 <checkAktifCalisma+0xb54>)
 8005714:	f003 fb96 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d146      	bne.n	80057ac <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800571e:	2180      	movs	r1, #128	; 0x80
 8005720:	480f      	ldr	r0, [pc, #60]	; (8005760 <checkAktifCalisma+0xb54>)
 8005722:	f003 fb8f 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d103      	bne.n	8005734 <checkAktifCalisma+0xb28>
 800572c:	4b18      	ldr	r3, [pc, #96]	; (8005790 <checkAktifCalisma+0xb84>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00b      	beq.n	800574c <checkAktifCalisma+0xb40>
 8005734:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005738:	4811      	ldr	r0, [pc, #68]	; (8005780 <checkAktifCalisma+0xb74>)
 800573a:	f003 fb83 	bl	8008e44 <HAL_GPIO_ReadPin>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d133      	bne.n	80057ac <checkAktifCalisma+0xba0>
 8005744:	4b12      	ldr	r3, [pc, #72]	; (8005790 <checkAktifCalisma+0xb84>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d12f      	bne.n	80057ac <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 800574c:	4b0d      	ldr	r3, [pc, #52]	; (8005784 <checkAktifCalisma+0xb78>)
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d02b      	beq.n	80057ac <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005754:	4b14      	ldr	r3, [pc, #80]	; (80057a8 <checkAktifCalisma+0xb9c>)
 8005756:	2201      	movs	r2, #1
 8005758:	701a      	strb	r2, [r3, #0]
 800575a:	e02a      	b.n	80057b2 <checkAktifCalisma+0xba6>
 800575c:	20000237 	.word	0x20000237
 8005760:	40011000 	.word	0x40011000
 8005764:	2000023b 	.word	0x2000023b
 8005768:	20000252 	.word	0x20000252
 800576c:	20000253 	.word	0x20000253
 8005770:	20000233 	.word	0x20000233
 8005774:	200001dc 	.word	0x200001dc
 8005778:	200001e8 	.word	0x200001e8
 800577c:	20000216 	.word	0x20000216
 8005780:	40010c00 	.word	0x40010c00
 8005784:	20000242 	.word	0x20000242
 8005788:	20000209 	.word	0x20000209
 800578c:	20000208 	.word	0x20000208
 8005790:	2000020c 	.word	0x2000020c
 8005794:	20000206 	.word	0x20000206
 8005798:	2000022f 	.word	0x2000022f
 800579c:	20000243 	.word	0x20000243
 80057a0:	200001e0 	.word	0x200001e0
 80057a4:	20000219 	.word	0x20000219
 80057a8:	20000244 	.word	0x20000244
		} else {
			kapi1butonkontrol=0;
 80057ac:	4b8b      	ldr	r3, [pc, #556]	; (80059dc <checkAktifCalisma+0xdd0>)
 80057ae:	2200      	movs	r2, #0
 80057b0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80057b2:	4b8b      	ldr	r3, [pc, #556]	; (80059e0 <checkAktifCalisma+0xdd4>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d121      	bne.n	80057fe <checkAktifCalisma+0xbf2>
 80057ba:	4b8a      	ldr	r3, [pc, #552]	; (80059e4 <checkAktifCalisma+0xdd8>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d003      	beq.n	80057ca <checkAktifCalisma+0xbbe>
 80057c2:	4b88      	ldr	r3, [pc, #544]	; (80059e4 <checkAktifCalisma+0xdd8>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b03      	cmp	r3, #3
 80057c8:	d119      	bne.n	80057fe <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80057ca:	2104      	movs	r1, #4
 80057cc:	4886      	ldr	r0, [pc, #536]	; (80059e8 <checkAktifCalisma+0xddc>)
 80057ce:	f003 fb39 	bl	8008e44 <HAL_GPIO_ReadPin>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d003      	beq.n	80057e0 <checkAktifCalisma+0xbd4>
 80057d8:	4b84      	ldr	r3, [pc, #528]	; (80059ec <checkAktifCalisma+0xde0>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10e      	bne.n	80057fe <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80057e0:	2102      	movs	r1, #2
 80057e2:	4881      	ldr	r0, [pc, #516]	; (80059e8 <checkAktifCalisma+0xddc>)
 80057e4:	f003 fb2e 	bl	8008e44 <HAL_GPIO_ReadPin>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d107      	bne.n	80057fe <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 80057ee:	4b80      	ldr	r3, [pc, #512]	; (80059f0 <checkAktifCalisma+0xde4>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 80057f6:	4b7f      	ldr	r3, [pc, #508]	; (80059f4 <checkAktifCalisma+0xde8>)
 80057f8:	2201      	movs	r2, #1
 80057fa:	701a      	strb	r2, [r3, #0]
 80057fc:	e002      	b.n	8005804 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 80057fe:	4b7d      	ldr	r3, [pc, #500]	; (80059f4 <checkAktifCalisma+0xde8>)
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005804:	4b75      	ldr	r3, [pc, #468]	; (80059dc <checkAktifCalisma+0xdd0>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d107      	bne.n	800581c <checkAktifCalisma+0xc10>
 800580c:	4b79      	ldr	r3, [pc, #484]	; (80059f4 <checkAktifCalisma+0xde8>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d103      	bne.n	800581c <checkAktifCalisma+0xc10>
 8005814:	4b78      	ldr	r3, [pc, #480]	; (80059f8 <checkAktifCalisma+0xdec>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d005      	beq.n	8005828 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800581c:	2201      	movs	r2, #1
 800581e:	2180      	movs	r1, #128	; 0x80
 8005820:	4876      	ldr	r0, [pc, #472]	; (80059fc <checkAktifCalisma+0xdf0>)
 8005822:	f003 fb26 	bl	8008e72 <HAL_GPIO_WritePin>
 8005826:	e004      	b.n	8005832 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005828:	2200      	movs	r2, #0
 800582a:	2180      	movs	r1, #128	; 0x80
 800582c:	4873      	ldr	r0, [pc, #460]	; (80059fc <checkAktifCalisma+0xdf0>)
 800582e:	f003 fb20 	bl	8008e72 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005832:	4b73      	ldr	r3, [pc, #460]	; (8005a00 <checkAktifCalisma+0xdf4>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d141      	bne.n	80058be <checkAktifCalisma+0xcb2>
 800583a:	4b6a      	ldr	r3, [pc, #424]	; (80059e4 <checkAktifCalisma+0xdd8>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d003      	beq.n	800584a <checkAktifCalisma+0xc3e>
 8005842:	4b68      	ldr	r3, [pc, #416]	; (80059e4 <checkAktifCalisma+0xdd8>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b03      	cmp	r3, #3
 8005848:	d139      	bne.n	80058be <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800584a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800584e:	4866      	ldr	r0, [pc, #408]	; (80059e8 <checkAktifCalisma+0xddc>)
 8005850:	f003 faf8 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d103      	bne.n	8005862 <checkAktifCalisma+0xc56>
 800585a:	4b6a      	ldr	r3, [pc, #424]	; (8005a04 <checkAktifCalisma+0xdf8>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00b      	beq.n	800587a <checkAktifCalisma+0xc6e>
 8005862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005866:	4868      	ldr	r0, [pc, #416]	; (8005a08 <checkAktifCalisma+0xdfc>)
 8005868:	f003 faec 	bl	8008e44 <HAL_GPIO_ReadPin>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d125      	bne.n	80058be <checkAktifCalisma+0xcb2>
 8005872:	4b64      	ldr	r3, [pc, #400]	; (8005a04 <checkAktifCalisma+0xdf8>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d121      	bne.n	80058be <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800587a:	2102      	movs	r1, #2
 800587c:	485a      	ldr	r0, [pc, #360]	; (80059e8 <checkAktifCalisma+0xddc>)
 800587e:	f003 fae1 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005882:	4603      	mov	r3, r0
 8005884:	2b01      	cmp	r3, #1
 8005886:	d11a      	bne.n	80058be <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005888:	2104      	movs	r1, #4
 800588a:	4857      	ldr	r0, [pc, #348]	; (80059e8 <checkAktifCalisma+0xddc>)
 800588c:	f003 fada 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d113      	bne.n	80058be <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005896:	4b56      	ldr	r3, [pc, #344]	; (80059f0 <checkAktifCalisma+0xde4>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00f      	beq.n	80058be <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 800589e:	4b5b      	ldr	r3, [pc, #364]	; (8005a0c <checkAktifCalisma+0xe00>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	f083 0301 	eor.w	r3, r3, #1
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d008      	beq.n	80058be <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80058ac:	4b58      	ldr	r3, [pc, #352]	; (8005a10 <checkAktifCalisma+0xe04>)
 80058ae:	2201      	movs	r2, #1
 80058b0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80058b2:	4b58      	ldr	r3, [pc, #352]	; (8005a14 <checkAktifCalisma+0xe08>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a58      	ldr	r2, [pc, #352]	; (8005a18 <checkAktifCalisma+0xe0c>)
 80058b8:	6013      	str	r3, [r2, #0]
			bekle();
 80058ba:	f7ff f829 	bl	8004910 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80058be:	4b55      	ldr	r3, [pc, #340]	; (8005a14 <checkAktifCalisma+0xe08>)
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	4b55      	ldr	r3, [pc, #340]	; (8005a18 <checkAktifCalisma+0xe0c>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	4a54      	ldr	r2, [pc, #336]	; (8005a1c <checkAktifCalisma+0xe10>)
 80058ca:	7812      	ldrb	r2, [r2, #0]
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d20d      	bcs.n	80058ec <checkAktifCalisma+0xce0>
 80058d0:	2102      	movs	r1, #2
 80058d2:	4845      	ldr	r0, [pc, #276]	; (80059e8 <checkAktifCalisma+0xddc>)
 80058d4:	f003 fab6 	bl	8008e44 <HAL_GPIO_ReadPin>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d006      	beq.n	80058ec <checkAktifCalisma+0xce0>
 80058de:	4b44      	ldr	r3, [pc, #272]	; (80059f0 <checkAktifCalisma+0xde4>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	f083 0301 	eor.w	r3, r3, #1
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d002      	beq.n	80058f2 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 80058ec:	4b48      	ldr	r3, [pc, #288]	; (8005a10 <checkAktifCalisma+0xe04>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80058f2:	4b43      	ldr	r3, [pc, #268]	; (8005a00 <checkAktifCalisma+0xdf4>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d135      	bne.n	8005966 <checkAktifCalisma+0xd5a>
 80058fa:	4b3a      	ldr	r3, [pc, #232]	; (80059e4 <checkAktifCalisma+0xdd8>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d003      	beq.n	800590a <checkAktifCalisma+0xcfe>
 8005902:	4b38      	ldr	r3, [pc, #224]	; (80059e4 <checkAktifCalisma+0xdd8>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2b03      	cmp	r3, #3
 8005908:	d12d      	bne.n	8005966 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800590a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800590e:	4836      	ldr	r0, [pc, #216]	; (80059e8 <checkAktifCalisma+0xddc>)
 8005910:	f003 fa98 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d103      	bne.n	8005922 <checkAktifCalisma+0xd16>
 800591a:	4b3a      	ldr	r3, [pc, #232]	; (8005a04 <checkAktifCalisma+0xdf8>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00b      	beq.n	800593a <checkAktifCalisma+0xd2e>
 8005922:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005926:	4838      	ldr	r0, [pc, #224]	; (8005a08 <checkAktifCalisma+0xdfc>)
 8005928:	f003 fa8c 	bl	8008e44 <HAL_GPIO_ReadPin>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d119      	bne.n	8005966 <checkAktifCalisma+0xd5a>
 8005932:	4b34      	ldr	r3, [pc, #208]	; (8005a04 <checkAktifCalisma+0xdf8>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d115      	bne.n	8005966 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800593a:	2102      	movs	r1, #2
 800593c:	482a      	ldr	r0, [pc, #168]	; (80059e8 <checkAktifCalisma+0xddc>)
 800593e:	f003 fa81 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005942:	4603      	mov	r3, r0
 8005944:	2b01      	cmp	r3, #1
 8005946:	d10e      	bne.n	8005966 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005948:	2104      	movs	r1, #4
 800594a:	4827      	ldr	r0, [pc, #156]	; (80059e8 <checkAktifCalisma+0xddc>)
 800594c:	f003 fa7a 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d107      	bne.n	8005966 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005956:	4b26      	ldr	r3, [pc, #152]	; (80059f0 <checkAktifCalisma+0xde4>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 800595e:	4b30      	ldr	r3, [pc, #192]	; (8005a20 <checkAktifCalisma+0xe14>)
 8005960:	2201      	movs	r2, #1
 8005962:	701a      	strb	r2, [r3, #0]
 8005964:	e002      	b.n	800596c <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005966:	4b2e      	ldr	r3, [pc, #184]	; (8005a20 <checkAktifCalisma+0xe14>)
 8005968:	2200      	movs	r2, #0
 800596a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800596c:	4b24      	ldr	r3, [pc, #144]	; (8005a00 <checkAktifCalisma+0xdf4>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b02      	cmp	r3, #2
 8005972:	d11d      	bne.n	80059b0 <checkAktifCalisma+0xda4>
 8005974:	4b1b      	ldr	r3, [pc, #108]	; (80059e4 <checkAktifCalisma+0xdd8>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d003      	beq.n	8005984 <checkAktifCalisma+0xd78>
 800597c:	4b19      	ldr	r3, [pc, #100]	; (80059e4 <checkAktifCalisma+0xdd8>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b03      	cmp	r3, #3
 8005982:	d115      	bne.n	80059b0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005984:	2102      	movs	r1, #2
 8005986:	4818      	ldr	r0, [pc, #96]	; (80059e8 <checkAktifCalisma+0xddc>)
 8005988:	f003 fa5c 	bl	8008e44 <HAL_GPIO_ReadPin>
 800598c:	4603      	mov	r3, r0
 800598e:	2b01      	cmp	r3, #1
 8005990:	d10e      	bne.n	80059b0 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005992:	2104      	movs	r1, #4
 8005994:	4814      	ldr	r0, [pc, #80]	; (80059e8 <checkAktifCalisma+0xddc>)
 8005996:	f003 fa55 	bl	8008e44 <HAL_GPIO_ReadPin>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d107      	bne.n	80059b0 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80059a0:	4b13      	ldr	r3, [pc, #76]	; (80059f0 <checkAktifCalisma+0xde4>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80059a8:	4b1e      	ldr	r3, [pc, #120]	; (8005a24 <checkAktifCalisma+0xe18>)
 80059aa:	2201      	movs	r2, #1
 80059ac:	701a      	strb	r2, [r3, #0]
 80059ae:	e002      	b.n	80059b6 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80059b0:	4b1c      	ldr	r3, [pc, #112]	; (8005a24 <checkAktifCalisma+0xe18>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80059b6:	4b1a      	ldr	r3, [pc, #104]	; (8005a20 <checkAktifCalisma+0xe14>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d107      	bne.n	80059ce <checkAktifCalisma+0xdc2>
 80059be:	4b19      	ldr	r3, [pc, #100]	; (8005a24 <checkAktifCalisma+0xe18>)
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <checkAktifCalisma+0xdc2>
 80059c6:	4b12      	ldr	r3, [pc, #72]	; (8005a10 <checkAktifCalisma+0xe04>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d02c      	beq.n	8005a28 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80059ce:	2201      	movs	r2, #1
 80059d0:	2140      	movs	r1, #64	; 0x40
 80059d2:	480a      	ldr	r0, [pc, #40]	; (80059fc <checkAktifCalisma+0xdf0>)
 80059d4:	f003 fa4d 	bl	8008e72 <HAL_GPIO_WritePin>
 80059d8:	e02b      	b.n	8005a32 <checkAktifCalisma+0xe26>
 80059da:	bf00      	nop
 80059dc:	20000244 	.word	0x20000244
 80059e0:	20000209 	.word	0x20000209
 80059e4:	20000208 	.word	0x20000208
 80059e8:	40011000 	.word	0x40011000
 80059ec:	20000206 	.word	0x20000206
 80059f0:	20000242 	.word	0x20000242
 80059f4:	20000245 	.word	0x20000245
 80059f8:	20000243 	.word	0x20000243
 80059fc:	40010800 	.word	0x40010800
 8005a00:	2000020a 	.word	0x2000020a
 8005a04:	2000020c 	.word	0x2000020c
 8005a08:	40010c00 	.word	0x40010c00
 8005a0c:	2000022f 	.word	0x2000022f
 8005a10:	20000246 	.word	0x20000246
 8005a14:	200001dc 	.word	0x200001dc
 8005a18:	200001e0 	.word	0x200001e0
 8005a1c:	2000021a 	.word	0x2000021a
 8005a20:	20000247 	.word	0x20000247
 8005a24:	20000248 	.word	0x20000248
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005a28:	2200      	movs	r2, #0
 8005a2a:	2140      	movs	r1, #64	; 0x40
 8005a2c:	488d      	ldr	r0, [pc, #564]	; (8005c64 <checkAktifCalisma+0x1058>)
 8005a2e:	f003 fa20 	bl	8008e72 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005a32:	4b8d      	ldr	r3, [pc, #564]	; (8005c68 <checkAktifCalisma+0x105c>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <checkAktifCalisma+0xe36>
 8005a3a:	4b8b      	ldr	r3, [pc, #556]	; (8005c68 <checkAktifCalisma+0x105c>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d115      	bne.n	8005a6e <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005a42:	2104      	movs	r1, #4
 8005a44:	4889      	ldr	r0, [pc, #548]	; (8005c6c <checkAktifCalisma+0x1060>)
 8005a46:	f003 f9fd 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d003      	beq.n	8005a58 <checkAktifCalisma+0xe4c>
 8005a50:	4b87      	ldr	r3, [pc, #540]	; (8005c70 <checkAktifCalisma+0x1064>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005a58:	2102      	movs	r1, #2
 8005a5a:	4884      	ldr	r0, [pc, #528]	; (8005c6c <checkAktifCalisma+0x1060>)
 8005a5c:	f003 f9f2 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d103      	bne.n	8005a6e <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005a66:	4b83      	ldr	r3, [pc, #524]	; (8005c74 <checkAktifCalisma+0x1068>)
 8005a68:	2201      	movs	r2, #1
 8005a6a:	701a      	strb	r2, [r3, #0]
 8005a6c:	e002      	b.n	8005a74 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005a6e:	4b81      	ldr	r3, [pc, #516]	; (8005c74 <checkAktifCalisma+0x1068>)
 8005a70:	2200      	movs	r2, #0
 8005a72:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005a74:	4b7c      	ldr	r3, [pc, #496]	; (8005c68 <checkAktifCalisma+0x105c>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d003      	beq.n	8005a84 <checkAktifCalisma+0xe78>
 8005a7c:	4b7a      	ldr	r3, [pc, #488]	; (8005c68 <checkAktifCalisma+0x105c>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b02      	cmp	r3, #2
 8005a82:	d111      	bne.n	8005aa8 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a84:	2102      	movs	r1, #2
 8005a86:	4879      	ldr	r0, [pc, #484]	; (8005c6c <checkAktifCalisma+0x1060>)
 8005a88:	f003 f9dc 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d10a      	bne.n	8005aa8 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005a92:	2104      	movs	r1, #4
 8005a94:	4875      	ldr	r0, [pc, #468]	; (8005c6c <checkAktifCalisma+0x1060>)
 8005a96:	f003 f9d5 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d103      	bne.n	8005aa8 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005aa0:	4b75      	ldr	r3, [pc, #468]	; (8005c78 <checkAktifCalisma+0x106c>)
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	e002      	b.n	8005aae <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005aa8:	4b73      	ldr	r3, [pc, #460]	; (8005c78 <checkAktifCalisma+0x106c>)
 8005aaa:	2200      	movs	r2, #0
 8005aac:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005aae:	4b71      	ldr	r3, [pc, #452]	; (8005c74 <checkAktifCalisma+0x1068>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00f      	beq.n	8005ad6 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005ab6:	4b71      	ldr	r3, [pc, #452]	; (8005c7c <checkAktifCalisma+0x1070>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d10b      	bne.n	8005ad6 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005abe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ac2:	486f      	ldr	r0, [pc, #444]	; (8005c80 <checkAktifCalisma+0x1074>)
 8005ac4:	f003 f9be 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d103      	bne.n	8005ad6 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005ace:	4b6d      	ldr	r3, [pc, #436]	; (8005c84 <checkAktifCalisma+0x1078>)
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	701a      	strb	r2, [r3, #0]
 8005ad4:	e002      	b.n	8005adc <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005ad6:	4b6b      	ldr	r3, [pc, #428]	; (8005c84 <checkAktifCalisma+0x1078>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005adc:	4b66      	ldr	r3, [pc, #408]	; (8005c78 <checkAktifCalisma+0x106c>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00f      	beq.n	8005b04 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005ae4:	4b65      	ldr	r3, [pc, #404]	; (8005c7c <checkAktifCalisma+0x1070>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d10b      	bne.n	8005b04 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005aec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005af0:	4863      	ldr	r0, [pc, #396]	; (8005c80 <checkAktifCalisma+0x1074>)
 8005af2:	f003 f9a7 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d103      	bne.n	8005b04 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005afc:	4b62      	ldr	r3, [pc, #392]	; (8005c88 <checkAktifCalisma+0x107c>)
 8005afe:	2201      	movs	r2, #1
 8005b00:	701a      	strb	r2, [r3, #0]
 8005b02:	e002      	b.n	8005b0a <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005b04:	4b60      	ldr	r3, [pc, #384]	; (8005c88 <checkAktifCalisma+0x107c>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005b0a:	4b60      	ldr	r3, [pc, #384]	; (8005c8c <checkAktifCalisma+0x1080>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d137      	bne.n	8005b82 <checkAktifCalisma+0xf76>
 8005b12:	4b5f      	ldr	r3, [pc, #380]	; (8005c90 <checkAktifCalisma+0x1084>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d003      	beq.n	8005b22 <checkAktifCalisma+0xf16>
 8005b1a:	4b5d      	ldr	r3, [pc, #372]	; (8005c90 <checkAktifCalisma+0x1084>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b03      	cmp	r3, #3
 8005b20:	d12f      	bne.n	8005b82 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005b22:	4b54      	ldr	r3, [pc, #336]	; (8005c74 <checkAktifCalisma+0x1068>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d103      	bne.n	8005b32 <checkAktifCalisma+0xf26>
 8005b2a:	4b53      	ldr	r3, [pc, #332]	; (8005c78 <checkAktifCalisma+0x106c>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d027      	beq.n	8005b82 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005b32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005b36:	484d      	ldr	r0, [pc, #308]	; (8005c6c <checkAktifCalisma+0x1060>)
 8005b38:	f003 f984 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d103      	bne.n	8005b4a <checkAktifCalisma+0xf3e>
 8005b42:	4b4e      	ldr	r3, [pc, #312]	; (8005c7c <checkAktifCalisma+0x1070>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d007      	beq.n	8005b5a <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005b4a:	4b4e      	ldr	r3, [pc, #312]	; (8005c84 <checkAktifCalisma+0x1078>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d103      	bne.n	8005b5a <checkAktifCalisma+0xf4e>
 8005b52:	4b4d      	ldr	r3, [pc, #308]	; (8005c88 <checkAktifCalisma+0x107c>)
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d013      	beq.n	8005b82 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005b5a:	4b4e      	ldr	r3, [pc, #312]	; (8005c94 <checkAktifCalisma+0x1088>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00f      	beq.n	8005b82 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005b62:	4b4d      	ldr	r3, [pc, #308]	; (8005c98 <checkAktifCalisma+0x108c>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	f083 0301 	eor.w	r3, r3, #1
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d008      	beq.n	8005b82 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005b70:	4b4a      	ldr	r3, [pc, #296]	; (8005c9c <checkAktifCalisma+0x1090>)
 8005b72:	2201      	movs	r2, #1
 8005b74:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005b76:	4b4a      	ldr	r3, [pc, #296]	; (8005ca0 <checkAktifCalisma+0x1094>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a4a      	ldr	r2, [pc, #296]	; (8005ca4 <checkAktifCalisma+0x1098>)
 8005b7c:	6013      	str	r3, [r2, #0]
			bekle();
 8005b7e:	f7fe fec7 	bl	8004910 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005b82:	4b47      	ldr	r3, [pc, #284]	; (8005ca0 <checkAktifCalisma+0x1094>)
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	4b47      	ldr	r3, [pc, #284]	; (8005ca4 <checkAktifCalisma+0x1098>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	4a46      	ldr	r2, [pc, #280]	; (8005ca8 <checkAktifCalisma+0x109c>)
 8005b8e:	7812      	ldrb	r2, [r2, #0]
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d214      	bcs.n	8005bbe <checkAktifCalisma+0xfb2>
 8005b94:	4b37      	ldr	r3, [pc, #220]	; (8005c74 <checkAktifCalisma+0x1068>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	f083 0301 	eor.w	r3, r3, #1
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d006      	beq.n	8005bb0 <checkAktifCalisma+0xfa4>
 8005ba2:	4b35      	ldr	r3, [pc, #212]	; (8005c78 <checkAktifCalisma+0x106c>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	f083 0301 	eor.w	r3, r3, #1
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d106      	bne.n	8005bbe <checkAktifCalisma+0xfb2>
 8005bb0:	4b38      	ldr	r3, [pc, #224]	; (8005c94 <checkAktifCalisma+0x1088>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	f083 0301 	eor.w	r3, r3, #1
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005bbe:	4b37      	ldr	r3, [pc, #220]	; (8005c9c <checkAktifCalisma+0x1090>)
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005bc4:	4b31      	ldr	r3, [pc, #196]	; (8005c8c <checkAktifCalisma+0x1080>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d12b      	bne.n	8005c24 <checkAktifCalisma+0x1018>
 8005bcc:	4b30      	ldr	r3, [pc, #192]	; (8005c90 <checkAktifCalisma+0x1084>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d003      	beq.n	8005bdc <checkAktifCalisma+0xfd0>
 8005bd4:	4b2e      	ldr	r3, [pc, #184]	; (8005c90 <checkAktifCalisma+0x1084>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d123      	bne.n	8005c24 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005bdc:	4b25      	ldr	r3, [pc, #148]	; (8005c74 <checkAktifCalisma+0x1068>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d103      	bne.n	8005bec <checkAktifCalisma+0xfe0>
 8005be4:	4b24      	ldr	r3, [pc, #144]	; (8005c78 <checkAktifCalisma+0x106c>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d01b      	beq.n	8005c24 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005bec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bf0:	481e      	ldr	r0, [pc, #120]	; (8005c6c <checkAktifCalisma+0x1060>)
 8005bf2:	f003 f927 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d103      	bne.n	8005c04 <checkAktifCalisma+0xff8>
 8005bfc:	4b1f      	ldr	r3, [pc, #124]	; (8005c7c <checkAktifCalisma+0x1070>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d007      	beq.n	8005c14 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005c04:	4b1f      	ldr	r3, [pc, #124]	; (8005c84 <checkAktifCalisma+0x1078>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d103      	bne.n	8005c14 <checkAktifCalisma+0x1008>
 8005c0c:	4b1e      	ldr	r3, [pc, #120]	; (8005c88 <checkAktifCalisma+0x107c>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d007      	beq.n	8005c24 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005c14:	4b1f      	ldr	r3, [pc, #124]	; (8005c94 <checkAktifCalisma+0x1088>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d003      	beq.n	8005c24 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005c1c:	4b23      	ldr	r3, [pc, #140]	; (8005cac <checkAktifCalisma+0x10a0>)
 8005c1e:	2201      	movs	r2, #1
 8005c20:	701a      	strb	r2, [r3, #0]
 8005c22:	e002      	b.n	8005c2a <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005c24:	4b21      	ldr	r3, [pc, #132]	; (8005cac <checkAktifCalisma+0x10a0>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005c2a:	4b18      	ldr	r3, [pc, #96]	; (8005c8c <checkAktifCalisma+0x1080>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d140      	bne.n	8005cb4 <checkAktifCalisma+0x10a8>
 8005c32:	4b17      	ldr	r3, [pc, #92]	; (8005c90 <checkAktifCalisma+0x1084>)
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d003      	beq.n	8005c42 <checkAktifCalisma+0x1036>
 8005c3a:	4b15      	ldr	r3, [pc, #84]	; (8005c90 <checkAktifCalisma+0x1084>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d138      	bne.n	8005cb4 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005c42:	4b0c      	ldr	r3, [pc, #48]	; (8005c74 <checkAktifCalisma+0x1068>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d103      	bne.n	8005c52 <checkAktifCalisma+0x1046>
 8005c4a:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <checkAktifCalisma+0x106c>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d030      	beq.n	8005cb4 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005c52:	4b10      	ldr	r3, [pc, #64]	; (8005c94 <checkAktifCalisma+0x1088>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d02c      	beq.n	8005cb4 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005c5a:	4b15      	ldr	r3, [pc, #84]	; (8005cb0 <checkAktifCalisma+0x10a4>)
 8005c5c:	2201      	movs	r2, #1
 8005c5e:	701a      	strb	r2, [r3, #0]
 8005c60:	e02b      	b.n	8005cba <checkAktifCalisma+0x10ae>
 8005c62:	bf00      	nop
 8005c64:	40010800 	.word	0x40010800
 8005c68:	2000020d 	.word	0x2000020d
 8005c6c:	40011000 	.word	0x40011000
 8005c70:	20000206 	.word	0x20000206
 8005c74:	2000024c 	.word	0x2000024c
 8005c78:	2000024d 	.word	0x2000024d
 8005c7c:	2000020c 	.word	0x2000020c
 8005c80:	40010c00 	.word	0x40010c00
 8005c84:	2000025c 	.word	0x2000025c
 8005c88:	2000025d 	.word	0x2000025d
 8005c8c:	2000020b 	.word	0x2000020b
 8005c90:	20000208 	.word	0x20000208
 8005c94:	20000242 	.word	0x20000242
 8005c98:	2000022f 	.word	0x2000022f
 8005c9c:	20000249 	.word	0x20000249
 8005ca0:	200001dc 	.word	0x200001dc
 8005ca4:	200001e0 	.word	0x200001e0
 8005ca8:	2000021b 	.word	0x2000021b
 8005cac:	2000024a 	.word	0x2000024a
 8005cb0:	2000024b 	.word	0x2000024b
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005cb4:	4b8b      	ldr	r3, [pc, #556]	; (8005ee4 <checkAktifCalisma+0x12d8>)
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005cba:	4b8b      	ldr	r3, [pc, #556]	; (8005ee8 <checkAktifCalisma+0x12dc>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d107      	bne.n	8005cd2 <checkAktifCalisma+0x10c6>
 8005cc2:	4b8a      	ldr	r3, [pc, #552]	; (8005eec <checkAktifCalisma+0x12e0>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d103      	bne.n	8005cd2 <checkAktifCalisma+0x10c6>
 8005cca:	4b86      	ldr	r3, [pc, #536]	; (8005ee4 <checkAktifCalisma+0x12d8>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d005      	beq.n	8005cde <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	2120      	movs	r1, #32
 8005cd6:	4886      	ldr	r0, [pc, #536]	; (8005ef0 <checkAktifCalisma+0x12e4>)
 8005cd8:	f003 f8cb 	bl	8008e72 <HAL_GPIO_WritePin>
 8005cdc:	e004      	b.n	8005ce8 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2120      	movs	r1, #32
 8005ce2:	4883      	ldr	r0, [pc, #524]	; (8005ef0 <checkAktifCalisma+0x12e4>)
 8005ce4:	f003 f8c5 	bl	8008e72 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005ce8:	4b82      	ldr	r3, [pc, #520]	; (8005ef4 <checkAktifCalisma+0x12e8>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00e      	beq.n	8005d0e <checkAktifCalisma+0x1102>
 8005cf0:	2102      	movs	r1, #2
 8005cf2:	4881      	ldr	r0, [pc, #516]	; (8005ef8 <checkAktifCalisma+0x12ec>)
 8005cf4:	f003 f8a6 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d107      	bne.n	8005d0e <checkAktifCalisma+0x1102>
 8005cfe:	4b7f      	ldr	r3, [pc, #508]	; (8005efc <checkAktifCalisma+0x12f0>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d103      	bne.n	8005d0e <checkAktifCalisma+0x1102>
 8005d06:	4b7e      	ldr	r3, [pc, #504]	; (8005f00 <checkAktifCalisma+0x12f4>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d112      	bne.n	8005d34 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005d0e:	4b7d      	ldr	r3, [pc, #500]	; (8005f04 <checkAktifCalisma+0x12f8>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d066      	beq.n	8005de4 <checkAktifCalisma+0x11d8>
 8005d16:	2104      	movs	r1, #4
 8005d18:	4877      	ldr	r0, [pc, #476]	; (8005ef8 <checkAktifCalisma+0x12ec>)
 8005d1a:	f003 f893 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d15f      	bne.n	8005de4 <checkAktifCalisma+0x11d8>
 8005d24:	4b75      	ldr	r3, [pc, #468]	; (8005efc <checkAktifCalisma+0x12f0>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d05b      	beq.n	8005de4 <checkAktifCalisma+0x11d8>
 8005d2c:	4b74      	ldr	r3, [pc, #464]	; (8005f00 <checkAktifCalisma+0x12f4>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d057      	beq.n	8005de4 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005d34:	4b74      	ldr	r3, [pc, #464]	; (8005f08 <checkAktifCalisma+0x12fc>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	4b72      	ldr	r3, [pc, #456]	; (8005f08 <checkAktifCalisma+0x12fc>)
 8005d3e:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005d40:	4b71      	ldr	r3, [pc, #452]	; (8005f08 <checkAktifCalisma+0x12fc>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b09      	cmp	r3, #9
 8005d46:	d908      	bls.n	8005d5a <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005d48:	4b6f      	ldr	r3, [pc, #444]	; (8005f08 <checkAktifCalisma+0x12fc>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005d4e:	4b6f      	ldr	r3, [pc, #444]	; (8005f0c <checkAktifCalisma+0x1300>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	3301      	adds	r3, #1
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	4b6d      	ldr	r3, [pc, #436]	; (8005f0c <checkAktifCalisma+0x1300>)
 8005d58:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005d5a:	4b6c      	ldr	r3, [pc, #432]	; (8005f0c <checkAktifCalisma+0x1300>)
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	2b09      	cmp	r3, #9
 8005d60:	d908      	bls.n	8005d74 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005d62:	4b6a      	ldr	r3, [pc, #424]	; (8005f0c <checkAktifCalisma+0x1300>)
 8005d64:	2200      	movs	r2, #0
 8005d66:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005d68:	4b69      	ldr	r3, [pc, #420]	; (8005f10 <checkAktifCalisma+0x1304>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	b2da      	uxtb	r2, r3
 8005d70:	4b67      	ldr	r3, [pc, #412]	; (8005f10 <checkAktifCalisma+0x1304>)
 8005d72:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005d74:	4b66      	ldr	r3, [pc, #408]	; (8005f10 <checkAktifCalisma+0x1304>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2b09      	cmp	r3, #9
 8005d7a:	d908      	bls.n	8005d8e <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005d7c:	4b64      	ldr	r3, [pc, #400]	; (8005f10 <checkAktifCalisma+0x1304>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005d82:	4b64      	ldr	r3, [pc, #400]	; (8005f14 <checkAktifCalisma+0x1308>)
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	3301      	adds	r3, #1
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	4b62      	ldr	r3, [pc, #392]	; (8005f14 <checkAktifCalisma+0x1308>)
 8005d8c:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005d8e:	4b61      	ldr	r3, [pc, #388]	; (8005f14 <checkAktifCalisma+0x1308>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	2b09      	cmp	r3, #9
 8005d94:	d908      	bls.n	8005da8 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005d96:	4b5f      	ldr	r3, [pc, #380]	; (8005f14 <checkAktifCalisma+0x1308>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005d9c:	4b5e      	ldr	r3, [pc, #376]	; (8005f18 <checkAktifCalisma+0x130c>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	3301      	adds	r3, #1
 8005da2:	b2da      	uxtb	r2, r3
 8005da4:	4b5c      	ldr	r3, [pc, #368]	; (8005f18 <checkAktifCalisma+0x130c>)
 8005da6:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005da8:	4b5b      	ldr	r3, [pc, #364]	; (8005f18 <checkAktifCalisma+0x130c>)
 8005daa:	781a      	ldrb	r2, [r3, #0]
 8005dac:	4b5b      	ldr	r3, [pc, #364]	; (8005f1c <checkAktifCalisma+0x1310>)
 8005dae:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005db2:	4b58      	ldr	r3, [pc, #352]	; (8005f14 <checkAktifCalisma+0x1308>)
 8005db4:	781a      	ldrb	r2, [r3, #0]
 8005db6:	4b59      	ldr	r3, [pc, #356]	; (8005f1c <checkAktifCalisma+0x1310>)
 8005db8:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005dba:	4b55      	ldr	r3, [pc, #340]	; (8005f10 <checkAktifCalisma+0x1304>)
 8005dbc:	781a      	ldrb	r2, [r3, #0]
 8005dbe:	4b57      	ldr	r3, [pc, #348]	; (8005f1c <checkAktifCalisma+0x1310>)
 8005dc0:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005dc2:	4b52      	ldr	r3, [pc, #328]	; (8005f0c <checkAktifCalisma+0x1300>)
 8005dc4:	781a      	ldrb	r2, [r3, #0]
 8005dc6:	4b55      	ldr	r3, [pc, #340]	; (8005f1c <checkAktifCalisma+0x1310>)
 8005dc8:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005dca:	4b4f      	ldr	r3, [pc, #316]	; (8005f08 <checkAktifCalisma+0x12fc>)
 8005dcc:	781a      	ldrb	r2, [r3, #0]
 8005dce:	4b53      	ldr	r3, [pc, #332]	; (8005f1c <checkAktifCalisma+0x1310>)
 8005dd0:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005dd2:	4b53      	ldr	r3, [pc, #332]	; (8005f20 <checkAktifCalisma+0x1314>)
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005dd8:	4b46      	ldr	r3, [pc, #280]	; (8005ef4 <checkAktifCalisma+0x12e8>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005dde:	4b49      	ldr	r3, [pc, #292]	; (8005f04 <checkAktifCalisma+0x12f8>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005de4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005de8:	484e      	ldr	r0, [pc, #312]	; (8005f24 <checkAktifCalisma+0x1318>)
 8005dea:	f003 f82b 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d016      	beq.n	8005e22 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005df4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005df8:	484a      	ldr	r0, [pc, #296]	; (8005f24 <checkAktifCalisma+0x1318>)
 8005dfa:	f003 f823 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00e      	beq.n	8005e22 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005e04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e08:	4846      	ldr	r0, [pc, #280]	; (8005f24 <checkAktifCalisma+0x1318>)
 8005e0a:	f003 f81b 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d006      	beq.n	8005e22 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005e14:	2140      	movs	r1, #64	; 0x40
 8005e16:	4838      	ldr	r0, [pc, #224]	; (8005ef8 <checkAktifCalisma+0x12ec>)
 8005e18:	f003 f814 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d103      	bne.n	8005e2a <checkAktifCalisma+0x121e>
			startBasili=1;
 8005e22:	4b41      	ldr	r3, [pc, #260]	; (8005f28 <checkAktifCalisma+0x131c>)
 8005e24:	2201      	movs	r2, #1
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	e002      	b.n	8005e30 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005e2a:	4b3f      	ldr	r3, [pc, #252]	; (8005f28 <checkAktifCalisma+0x131c>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005e30:	4b3d      	ldr	r3, [pc, #244]	; (8005f28 <checkAktifCalisma+0x131c>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d016      	beq.n	8005e66 <checkAktifCalisma+0x125a>
 8005e38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e3c:	4839      	ldr	r0, [pc, #228]	; (8005f24 <checkAktifCalisma+0x1318>)
 8005e3e:	f003 f801 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005e42:	4603      	mov	r3, r0
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d10e      	bne.n	8005e66 <checkAktifCalisma+0x125a>
			hataVar=1;
 8005e48:	4b38      	ldr	r3, [pc, #224]	; (8005f2c <checkAktifCalisma+0x1320>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005e4e:	2001      	movs	r0, #1
 8005e50:	f7fa fe98 	bl	8000b84 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005e54:	2001      	movs	r0, #1
 8005e56:	f7fa fe3b 	bl	8000ad0 <hata2EEPROM>
			convertAndSendData();
 8005e5a:	f001 f931 	bl	80070c0 <convertAndSendData>
			acilstophatasi=1;
 8005e5e:	4b34      	ldr	r3, [pc, #208]	; (8005f30 <checkAktifCalisma+0x1324>)
 8005e60:	2201      	movs	r2, #1
 8005e62:	701a      	strb	r2, [r3, #0]
 8005e64:	e018      	b.n	8005e98 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005e66:	4b32      	ldr	r3, [pc, #200]	; (8005f30 <checkAktifCalisma+0x1324>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d014      	beq.n	8005e98 <checkAktifCalisma+0x128c>
 8005e6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e72:	482c      	ldr	r0, [pc, #176]	; (8005f24 <checkAktifCalisma+0x1318>)
 8005e74:	f002 ffe6 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10c      	bne.n	8005e98 <checkAktifCalisma+0x128c>
 8005e7e:	4b2a      	ldr	r3, [pc, #168]	; (8005f28 <checkAktifCalisma+0x131c>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	f083 0301 	eor.w	r3, r3, #1
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d005      	beq.n	8005e98 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005e8c:	4b28      	ldr	r3, [pc, #160]	; (8005f30 <checkAktifCalisma+0x1324>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8005e92:	2001      	movs	r0, #1
 8005e94:	f7fe fce8 	bl	8004868 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8005e98:	4b26      	ldr	r3, [pc, #152]	; (8005f34 <checkAktifCalisma+0x1328>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	f083 0301 	eor.w	r3, r3, #1
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d04e      	beq.n	8005f44 <checkAktifCalisma+0x1338>
 8005ea6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005eaa:	481e      	ldr	r0, [pc, #120]	; (8005f24 <checkAktifCalisma+0x1318>)
 8005eac:	f002 ffca 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <checkAktifCalisma+0x12b2>
 8005eb6:	4b20      	ldr	r3, [pc, #128]	; (8005f38 <checkAktifCalisma+0x132c>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d042      	beq.n	8005f44 <checkAktifCalisma+0x1338>
 8005ebe:	4b1f      	ldr	r3, [pc, #124]	; (8005f3c <checkAktifCalisma+0x1330>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d13e      	bne.n	8005f44 <checkAktifCalisma+0x1338>
			hataVar=1;
 8005ec6:	4b19      	ldr	r3, [pc, #100]	; (8005f2c <checkAktifCalisma+0x1320>)
 8005ec8:	2201      	movs	r2, #1
 8005eca:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005ecc:	2002      	movs	r0, #2
 8005ece:	f7fa fe59 	bl	8000b84 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8005ed2:	2002      	movs	r0, #2
 8005ed4:	f7fa fdfc 	bl	8000ad0 <hata2EEPROM>
			convertAndSendData();
 8005ed8:	f001 f8f2 	bl	80070c0 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005edc:	4b18      	ldr	r3, [pc, #96]	; (8005f40 <checkAktifCalisma+0x1334>)
 8005ede:	2201      	movs	r2, #1
 8005ee0:	701a      	strb	r2, [r3, #0]
 8005ee2:	e047      	b.n	8005f74 <checkAktifCalisma+0x1368>
 8005ee4:	2000024b 	.word	0x2000024b
 8005ee8:	2000024a 	.word	0x2000024a
 8005eec:	20000249 	.word	0x20000249
 8005ef0:	40010800 	.word	0x40010800
 8005ef4:	2000023f 	.word	0x2000023f
 8005ef8:	40011000 	.word	0x40011000
 8005efc:	20000206 	.word	0x20000206
 8005f00:	20000242 	.word	0x20000242
 8005f04:	20000240 	.word	0x20000240
 8005f08:	200001fd 	.word	0x200001fd
 8005f0c:	200001fe 	.word	0x200001fe
 8005f10:	20000000 	.word	0x20000000
 8005f14:	20000001 	.word	0x20000001
 8005f18:	200001ff 	.word	0x200001ff
 8005f1c:	2000012c 	.word	0x2000012c
 8005f20:	2000022c 	.word	0x2000022c
 8005f24:	40010c00 	.word	0x40010c00
 8005f28:	2000024e 	.word	0x2000024e
 8005f2c:	20000255 	.word	0x20000255
 8005f30:	20000250 	.word	0x20000250
 8005f34:	20000257 	.word	0x20000257
 8005f38:	20000261 	.word	0x20000261
 8005f3c:	20000204 	.word	0x20000204
 8005f40:	20000251 	.word	0x20000251
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005f44:	4b9b      	ldr	r3, [pc, #620]	; (80061b4 <checkAktifCalisma+0x15a8>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d013      	beq.n	8005f74 <checkAktifCalisma+0x1368>
 8005f4c:	4b9a      	ldr	r3, [pc, #616]	; (80061b8 <checkAktifCalisma+0x15ac>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00f      	beq.n	8005f74 <checkAktifCalisma+0x1368>
 8005f54:	4b99      	ldr	r3, [pc, #612]	; (80061bc <checkAktifCalisma+0x15b0>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	f083 0301 	eor.w	r3, r3, #1
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d008      	beq.n	8005f74 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8005f62:	4b94      	ldr	r3, [pc, #592]	; (80061b4 <checkAktifCalisma+0x15a8>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8005f68:	4b95      	ldr	r3, [pc, #596]	; (80061c0 <checkAktifCalisma+0x15b4>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8005f6e:	2002      	movs	r0, #2
 8005f70:	f7fe fc7a 	bl	8004868 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8005f74:	4b93      	ldr	r3, [pc, #588]	; (80061c4 <checkAktifCalisma+0x15b8>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d11e      	bne.n	8005fba <checkAktifCalisma+0x13ae>
 8005f7c:	4b92      	ldr	r3, [pc, #584]	; (80061c8 <checkAktifCalisma+0x15bc>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d11a      	bne.n	8005fba <checkAktifCalisma+0x13ae>
 8005f84:	4b91      	ldr	r3, [pc, #580]	; (80061cc <checkAktifCalisma+0x15c0>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d016      	beq.n	8005fba <checkAktifCalisma+0x13ae>
 8005f8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f90:	488f      	ldr	r0, [pc, #572]	; (80061d0 <checkAktifCalisma+0x15c4>)
 8005f92:	f002 ff57 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d10e      	bne.n	8005fba <checkAktifCalisma+0x13ae>
			hataVar=1;
 8005f9c:	4b8d      	ldr	r3, [pc, #564]	; (80061d4 <checkAktifCalisma+0x15c8>)
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8005fa2:	2003      	movs	r0, #3
 8005fa4:	f7fa fdee 	bl	8000b84 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8005fa8:	2003      	movs	r0, #3
 8005faa:	f7fa fd91 	bl	8000ad0 <hata2EEPROM>
			convertAndSendData();
 8005fae:	f001 f887 	bl	80070c0 <convertAndSendData>
			basinchatasi=1;
 8005fb2:	4b89      	ldr	r3, [pc, #548]	; (80061d8 <checkAktifCalisma+0x15cc>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	e015      	b.n	8005fe6 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005fba:	4b87      	ldr	r3, [pc, #540]	; (80061d8 <checkAktifCalisma+0x15cc>)
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d011      	beq.n	8005fe6 <checkAktifCalisma+0x13da>
 8005fc2:	4b80      	ldr	r3, [pc, #512]	; (80061c4 <checkAktifCalisma+0x15b8>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d10d      	bne.n	8005fe6 <checkAktifCalisma+0x13da>
 8005fca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005fce:	4883      	ldr	r0, [pc, #524]	; (80061dc <checkAktifCalisma+0x15d0>)
 8005fd0:	f002 ff38 	bl	8008e44 <HAL_GPIO_ReadPin>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d105      	bne.n	8005fe6 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8005fda:	4b7f      	ldr	r3, [pc, #508]	; (80061d8 <checkAktifCalisma+0x15cc>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8005fe0:	2003      	movs	r0, #3
 8005fe2:	f7fe fc41 	bl	8004868 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8005fe6:	4b7e      	ldr	r3, [pc, #504]	; (80061e0 <checkAktifCalisma+0x15d4>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d103      	bne.n	8005ff6 <checkAktifCalisma+0x13ea>
 8005fee:	4b7d      	ldr	r3, [pc, #500]	; (80061e4 <checkAktifCalisma+0x15d8>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d01e      	beq.n	8006034 <checkAktifCalisma+0x1428>
 8005ff6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ffa:	487b      	ldr	r0, [pc, #492]	; (80061e8 <checkAktifCalisma+0x15dc>)
 8005ffc:	f002 ff22 	bl	8008e44 <HAL_GPIO_ReadPin>
 8006000:	4603      	mov	r3, r0
 8006002:	2b01      	cmp	r3, #1
 8006004:	d116      	bne.n	8006034 <checkAktifCalisma+0x1428>
 8006006:	4b79      	ldr	r3, [pc, #484]	; (80061ec <checkAktifCalisma+0x15e0>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d003      	beq.n	8006016 <checkAktifCalisma+0x140a>
 800600e:	4b77      	ldr	r3, [pc, #476]	; (80061ec <checkAktifCalisma+0x15e0>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b03      	cmp	r3, #3
 8006014:	d10e      	bne.n	8006034 <checkAktifCalisma+0x1428>
			hataVar=1;
 8006016:	4b6f      	ldr	r3, [pc, #444]	; (80061d4 <checkAktifCalisma+0x15c8>)
 8006018:	2201      	movs	r2, #1
 800601a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 800601c:	2004      	movs	r0, #4
 800601e:	f7fa fdb1 	bl	8000b84 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8006022:	2004      	movs	r0, #4
 8006024:	f7fa fd54 	bl	8000ad0 <hata2EEPROM>
			convertAndSendData();
 8006028:	f001 f84a 	bl	80070c0 <convertAndSendData>
			katkapisivicihatasi=1;
 800602c:	4b70      	ldr	r3, [pc, #448]	; (80061f0 <checkAktifCalisma+0x15e4>)
 800602e:	2201      	movs	r2, #1
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	e01f      	b.n	8006074 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006034:	4b6e      	ldr	r3, [pc, #440]	; (80061f0 <checkAktifCalisma+0x15e4>)
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d01b      	beq.n	8006074 <checkAktifCalisma+0x1468>
 800603c:	4b6d      	ldr	r3, [pc, #436]	; (80061f4 <checkAktifCalisma+0x15e8>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d017      	beq.n	8006074 <checkAktifCalisma+0x1468>
 8006044:	4b66      	ldr	r3, [pc, #408]	; (80061e0 <checkAktifCalisma+0x15d4>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	f083 0301 	eor.w	r3, r3, #1
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d010      	beq.n	8006074 <checkAktifCalisma+0x1468>
 8006052:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006056:	4864      	ldr	r0, [pc, #400]	; (80061e8 <checkAktifCalisma+0x15dc>)
 8006058:	f002 fef4 	bl	8008e44 <HAL_GPIO_ReadPin>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d108      	bne.n	8006074 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8006062:	4b63      	ldr	r3, [pc, #396]	; (80061f0 <checkAktifCalisma+0x15e4>)
 8006064:	2200      	movs	r2, #0
 8006066:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006068:	4b5e      	ldr	r3, [pc, #376]	; (80061e4 <checkAktifCalisma+0x15d8>)
 800606a:	2200      	movs	r2, #0
 800606c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800606e:	2004      	movs	r0, #4
 8006070:	f7fe fbfa 	bl	8004868 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006074:	4b5a      	ldr	r3, [pc, #360]	; (80061e0 <checkAktifCalisma+0x15d4>)
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d103      	bne.n	8006084 <checkAktifCalisma+0x1478>
 800607c:	4b5e      	ldr	r3, [pc, #376]	; (80061f8 <checkAktifCalisma+0x15ec>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d01e      	beq.n	80060c2 <checkAktifCalisma+0x14b6>
 8006084:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006088:	4857      	ldr	r0, [pc, #348]	; (80061e8 <checkAktifCalisma+0x15dc>)
 800608a:	f002 fedb 	bl	8008e44 <HAL_GPIO_ReadPin>
 800608e:	4603      	mov	r3, r0
 8006090:	2b01      	cmp	r3, #1
 8006092:	d116      	bne.n	80060c2 <checkAktifCalisma+0x14b6>
 8006094:	4b55      	ldr	r3, [pc, #340]	; (80061ec <checkAktifCalisma+0x15e0>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d003      	beq.n	80060a4 <checkAktifCalisma+0x1498>
 800609c:	4b53      	ldr	r3, [pc, #332]	; (80061ec <checkAktifCalisma+0x15e0>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	d10e      	bne.n	80060c2 <checkAktifCalisma+0x14b6>
			hataVar=1;
 80060a4:	4b4b      	ldr	r3, [pc, #300]	; (80061d4 <checkAktifCalisma+0x15c8>)
 80060a6:	2201      	movs	r2, #1
 80060a8:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80060aa:	2005      	movs	r0, #5
 80060ac:	f7fa fd6a 	bl	8000b84 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80060b0:	2005      	movs	r0, #5
 80060b2:	f7fa fd0d 	bl	8000ad0 <hata2EEPROM>
			convertAndSendData();
 80060b6:	f001 f803 	bl	80070c0 <convertAndSendData>
			tablakapisivicihatasi=1;
 80060ba:	4b50      	ldr	r3, [pc, #320]	; (80061fc <checkAktifCalisma+0x15f0>)
 80060bc:	2201      	movs	r2, #1
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	e023      	b.n	800610a <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80060c2:	4b4e      	ldr	r3, [pc, #312]	; (80061fc <checkAktifCalisma+0x15f0>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d01f      	beq.n	800610a <checkAktifCalisma+0x14fe>
 80060ca:	4b4a      	ldr	r3, [pc, #296]	; (80061f4 <checkAktifCalisma+0x15e8>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d01b      	beq.n	800610a <checkAktifCalisma+0x14fe>
 80060d2:	4b43      	ldr	r3, [pc, #268]	; (80061e0 <checkAktifCalisma+0x15d4>)
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	f083 0301 	eor.w	r3, r3, #1
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d014      	beq.n	800610a <checkAktifCalisma+0x14fe>
 80060e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80060e4:	4840      	ldr	r0, [pc, #256]	; (80061e8 <checkAktifCalisma+0x15dc>)
 80060e6:	f002 fead 	bl	8008e44 <HAL_GPIO_ReadPin>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10c      	bne.n	800610a <checkAktifCalisma+0x14fe>
 80060f0:	4b40      	ldr	r3, [pc, #256]	; (80061f4 <checkAktifCalisma+0x15e8>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d008      	beq.n	800610a <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 80060f8:	4b40      	ldr	r3, [pc, #256]	; (80061fc <checkAktifCalisma+0x15f0>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80060fe:	4b3e      	ldr	r3, [pc, #248]	; (80061f8 <checkAktifCalisma+0x15ec>)
 8006100:	2200      	movs	r2, #0
 8006102:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006104:	2005      	movs	r0, #5
 8006106:	f7fe fbaf 	bl	8004868 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800610a:	4b30      	ldr	r3, [pc, #192]	; (80061cc <checkAktifCalisma+0x15c0>)
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d107      	bne.n	8006122 <checkAktifCalisma+0x1516>
 8006112:	4b2a      	ldr	r3, [pc, #168]	; (80061bc <checkAktifCalisma+0x15b0>)
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d103      	bne.n	8006122 <checkAktifCalisma+0x1516>
 800611a:	4b39      	ldr	r3, [pc, #228]	; (8006200 <checkAktifCalisma+0x15f4>)
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d016      	beq.n	8006150 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8006122:	4b38      	ldr	r3, [pc, #224]	; (8006204 <checkAktifCalisma+0x15f8>)
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	4b38      	ldr	r3, [pc, #224]	; (8006208 <checkAktifCalisma+0x15fc>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	4a37      	ldr	r2, [pc, #220]	; (800620c <checkAktifCalisma+0x1600>)
 800612e:	7812      	ldrb	r2, [r2, #0]
 8006130:	4293      	cmp	r3, r2
 8006132:	d30d      	bcc.n	8006150 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8006134:	4b27      	ldr	r3, [pc, #156]	; (80061d4 <checkAktifCalisma+0x15c8>)
 8006136:	2201      	movs	r2, #1
 8006138:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 800613a:	2006      	movs	r0, #6
 800613c:	f7fa fd22 	bl	8000b84 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006140:	2006      	movs	r0, #6
 8006142:	f7fa fcc5 	bl	8000ad0 <hata2EEPROM>
			  	convertAndSendData();
 8006146:	f000 ffbb 	bl	80070c0 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 800614a:	4b31      	ldr	r3, [pc, #196]	; (8006210 <checkAktifCalisma+0x1604>)
 800614c:	2201      	movs	r2, #1
 800614e:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006150:	4b2f      	ldr	r3, [pc, #188]	; (8006210 <checkAktifCalisma+0x1604>)
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d013      	beq.n	8006180 <checkAktifCalisma+0x1574>
 8006158:	2108      	movs	r1, #8
 800615a:	4823      	ldr	r0, [pc, #140]	; (80061e8 <checkAktifCalisma+0x15dc>)
 800615c:	f002 fe72 	bl	8008e44 <HAL_GPIO_ReadPin>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00c      	beq.n	8006180 <checkAktifCalisma+0x1574>
 8006166:	4b1e      	ldr	r3, [pc, #120]	; (80061e0 <checkAktifCalisma+0x15d4>)
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	f083 0301 	eor.w	r3, r3, #1
 800616e:	b2db      	uxtb	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8006174:	4b26      	ldr	r3, [pc, #152]	; (8006210 <checkAktifCalisma+0x1604>)
 8006176:	2200      	movs	r2, #0
 8006178:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 800617a:	2006      	movs	r0, #6
 800617c:	f7fe fb74 	bl	8004868 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006180:	4b24      	ldr	r3, [pc, #144]	; (8006214 <checkAktifCalisma+0x1608>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10b      	bne.n	80061a0 <checkAktifCalisma+0x1594>
 8006188:	4b0c      	ldr	r3, [pc, #48]	; (80061bc <checkAktifCalisma+0x15b0>)
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d107      	bne.n	80061a0 <checkAktifCalisma+0x1594>
 8006190:	4b21      	ldr	r3, [pc, #132]	; (8006218 <checkAktifCalisma+0x160c>)
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d103      	bne.n	80061a0 <checkAktifCalisma+0x1594>
 8006198:	4b19      	ldr	r3, [pc, #100]	; (8006200 <checkAktifCalisma+0x15f4>)
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d03f      	beq.n	8006220 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80061a0:	4b1e      	ldr	r3, [pc, #120]	; (800621c <checkAktifCalisma+0x1610>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80061a6:	4b0f      	ldr	r3, [pc, #60]	; (80061e4 <checkAktifCalisma+0x15d8>)
 80061a8:	2201      	movs	r2, #1
 80061aa:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80061ac:	4b12      	ldr	r3, [pc, #72]	; (80061f8 <checkAktifCalisma+0x15ec>)
 80061ae:	2201      	movs	r2, #1
 80061b0:	701a      	strb	r2, [r3, #0]
 80061b2:	e03c      	b.n	800622e <checkAktifCalisma+0x1622>
 80061b4:	20000251 	.word	0x20000251
 80061b8:	20000257 	.word	0x20000257
 80061bc:	20000238 	.word	0x20000238
 80061c0:	20000261 	.word	0x20000261
 80061c4:	20000203 	.word	0x20000203
 80061c8:	20000207 	.word	0x20000207
 80061cc:	20000254 	.word	0x20000254
 80061d0:	40011000 	.word	0x40011000
 80061d4:	20000255 	.word	0x20000255
 80061d8:	2000025e 	.word	0x2000025e
 80061dc:	40010c00 	.word	0x40010c00
 80061e0:	2000024e 	.word	0x2000024e
 80061e4:	20000262 	.word	0x20000262
 80061e8:	40010800 	.word	0x40010800
 80061ec:	20000208 	.word	0x20000208
 80061f0:	2000025f 	.word	0x2000025f
 80061f4:	20000242 	.word	0x20000242
 80061f8:	20000263 	.word	0x20000263
 80061fc:	20000260 	.word	0x20000260
 8006200:	20000237 	.word	0x20000237
 8006204:	200001dc 	.word	0x200001dc
 8006208:	200001f0 	.word	0x200001f0
 800620c:	20000218 	.word	0x20000218
 8006210:	2000024f 	.word	0x2000024f
 8006214:	20000235 	.word	0x20000235
 8006218:	20000236 	.word	0x20000236
 800621c:	20000256 	.word	0x20000256
		} else {
			makineCalisiyor=1;
 8006220:	4b1e      	ldr	r3, [pc, #120]	; (800629c <checkAktifCalisma+0x1690>)
 8006222:	2201      	movs	r2, #1
 8006224:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8006226:	4b1e      	ldr	r3, [pc, #120]	; (80062a0 <checkAktifCalisma+0x1694>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a1e      	ldr	r2, [pc, #120]	; (80062a4 <checkAktifCalisma+0x1698>)
 800622c:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800622e:	4b1e      	ldr	r3, [pc, #120]	; (80062a8 <checkAktifCalisma+0x169c>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d02f      	beq.n	8006296 <checkAktifCalisma+0x168a>
 8006236:	4b1d      	ldr	r3, [pc, #116]	; (80062ac <checkAktifCalisma+0x16a0>)
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	f083 0301 	eor.w	r3, r3, #1
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b00      	cmp	r3, #0
 8006242:	d028      	beq.n	8006296 <checkAktifCalisma+0x168a>
 8006244:	4b1a      	ldr	r3, [pc, #104]	; (80062b0 <checkAktifCalisma+0x16a4>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	f083 0301 	eor.w	r3, r3, #1
 800624c:	b2db      	uxtb	r3, r3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d021      	beq.n	8006296 <checkAktifCalisma+0x168a>
 8006252:	4b18      	ldr	r3, [pc, #96]	; (80062b4 <checkAktifCalisma+0x16a8>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	f083 0301 	eor.w	r3, r3, #1
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01a      	beq.n	8006296 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006260:	4b15      	ldr	r3, [pc, #84]	; (80062b8 <checkAktifCalisma+0x16ac>)
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	f083 0301 	eor.w	r3, r3, #1
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d013      	beq.n	8006296 <checkAktifCalisma+0x168a>
 800626e:	4b13      	ldr	r3, [pc, #76]	; (80062bc <checkAktifCalisma+0x16b0>)
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	f083 0301 	eor.w	r3, r3, #1
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00c      	beq.n	8006296 <checkAktifCalisma+0x168a>
 800627c:	4b10      	ldr	r3, [pc, #64]	; (80062c0 <checkAktifCalisma+0x16b4>)
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	f083 0301 	eor.w	r3, r3, #1
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d005      	beq.n	8006296 <checkAktifCalisma+0x168a>
			hataVar=0;
 800628a:	4b07      	ldr	r3, [pc, #28]	; (80062a8 <checkAktifCalisma+0x169c>)
 800628c:	2200      	movs	r2, #0
 800628e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006290:	2007      	movs	r0, #7
 8006292:	f7fe fae9 	bl	8004868 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8006296:	bf00      	nop
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	20000256 	.word	0x20000256
 80062a0:	200001dc 	.word	0x200001dc
 80062a4:	200001f0 	.word	0x200001f0
 80062a8:	20000255 	.word	0x20000255
 80062ac:	20000250 	.word	0x20000250
 80062b0:	20000251 	.word	0x20000251
 80062b4:	2000025e 	.word	0x2000025e
 80062b8:	2000025f 	.word	0x2000025f
 80062bc:	20000260 	.word	0x20000260
 80062c0:	2000024f 	.word	0x2000024f

080062c4 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80062c8:	4b8b      	ldr	r3, [pc, #556]	; (80064f8 <checkDemoModCalisma+0x234>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	f040 8229 	bne.w	8006724 <checkDemoModCalisma+0x460>
 80062d2:	4b8a      	ldr	r3, [pc, #552]	; (80064fc <checkDemoModCalisma+0x238>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f000 8224 	beq.w	8006724 <checkDemoModCalisma+0x460>
 80062dc:	4b88      	ldr	r3, [pc, #544]	; (8006500 <checkDemoModCalisma+0x23c>)
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	f040 821f 	bne.w	8006724 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80062e6:	2102      	movs	r1, #2
 80062e8:	4886      	ldr	r0, [pc, #536]	; (8006504 <checkDemoModCalisma+0x240>)
 80062ea:	f002 fdab 	bl	8008e44 <HAL_GPIO_ReadPin>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d11d      	bne.n	8006330 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 80062f4:	4b84      	ldr	r3, [pc, #528]	; (8006508 <checkDemoModCalisma+0x244>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	f083 0301 	eor.w	r3, r3, #1
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d016      	beq.n	8006330 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8006302:	4b82      	ldr	r3, [pc, #520]	; (800650c <checkDemoModCalisma+0x248>)
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	f083 0301 	eor.w	r3, r3, #1
 800630a:	b2db      	uxtb	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00f      	beq.n	8006330 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006310:	4b7f      	ldr	r3, [pc, #508]	; (8006510 <checkDemoModCalisma+0x24c>)
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	f083 0301 	eor.w	r3, r3, #1
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d008      	beq.n	8006330 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800631e:	2201      	movs	r2, #1
 8006320:	2104      	movs	r1, #4
 8006322:	487c      	ldr	r0, [pc, #496]	; (8006514 <checkDemoModCalisma+0x250>)
 8006324:	f002 fda5 	bl	8008e72 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8006328:	4b7b      	ldr	r3, [pc, #492]	; (8006518 <checkDemoModCalisma+0x254>)
 800632a:	2201      	movs	r2, #1
 800632c:	701a      	strb	r2, [r3, #0]
 800632e:	e00e      	b.n	800634e <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006330:	2102      	movs	r1, #2
 8006332:	4874      	ldr	r0, [pc, #464]	; (8006504 <checkDemoModCalisma+0x240>)
 8006334:	f002 fd86 	bl	8008e44 <HAL_GPIO_ReadPin>
 8006338:	4603      	mov	r3, r0
 800633a:	2b01      	cmp	r3, #1
 800633c:	d107      	bne.n	800634e <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800633e:	2200      	movs	r2, #0
 8006340:	2104      	movs	r1, #4
 8006342:	4874      	ldr	r0, [pc, #464]	; (8006514 <checkDemoModCalisma+0x250>)
 8006344:	f002 fd95 	bl	8008e72 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006348:	4b73      	ldr	r3, [pc, #460]	; (8006518 <checkDemoModCalisma+0x254>)
 800634a:	2200      	movs	r2, #0
 800634c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800634e:	4b72      	ldr	r3, [pc, #456]	; (8006518 <checkDemoModCalisma+0x254>)
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10b      	bne.n	800636e <checkDemoModCalisma+0xaa>
 8006356:	4b6d      	ldr	r3, [pc, #436]	; (800650c <checkDemoModCalisma+0x248>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d107      	bne.n	800636e <checkDemoModCalisma+0xaa>
 800635e:	4b6c      	ldr	r3, [pc, #432]	; (8006510 <checkDemoModCalisma+0x24c>)
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d103      	bne.n	800636e <checkDemoModCalisma+0xaa>
 8006366:	4b68      	ldr	r3, [pc, #416]	; (8006508 <checkDemoModCalisma+0x244>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00c      	beq.n	8006388 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800636e:	2201      	movs	r2, #1
 8006370:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006374:	4867      	ldr	r0, [pc, #412]	; (8006514 <checkDemoModCalisma+0x250>)
 8006376:	f002 fd7c 	bl	8008e72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800637a:	2201      	movs	r2, #1
 800637c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006380:	4864      	ldr	r0, [pc, #400]	; (8006514 <checkDemoModCalisma+0x250>)
 8006382:	f002 fd76 	bl	8008e72 <HAL_GPIO_WritePin>
 8006386:	e00b      	b.n	80063a0 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006388:	2200      	movs	r2, #0
 800638a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800638e:	4861      	ldr	r0, [pc, #388]	; (8006514 <checkDemoModCalisma+0x250>)
 8006390:	f002 fd6f 	bl	8008e72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006394:	2200      	movs	r2, #0
 8006396:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800639a:	485e      	ldr	r0, [pc, #376]	; (8006514 <checkDemoModCalisma+0x250>)
 800639c:	f002 fd69 	bl	8008e72 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80063a0:	2102      	movs	r1, #2
 80063a2:	4858      	ldr	r0, [pc, #352]	; (8006504 <checkDemoModCalisma+0x240>)
 80063a4:	f002 fd4e 	bl	8008e44 <HAL_GPIO_ReadPin>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d10d      	bne.n	80063ca <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80063ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063b2:	4854      	ldr	r0, [pc, #336]	; (8006504 <checkDemoModCalisma+0x240>)
 80063b4:	f002 fd46 	bl	8008e44 <HAL_GPIO_ReadPin>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d105      	bne.n	80063ca <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80063be:	4b56      	ldr	r3, [pc, #344]	; (8006518 <checkDemoModCalisma+0x254>)
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	f083 0301 	eor.w	r3, r3, #1
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80063ca:	2102      	movs	r1, #2
 80063cc:	484d      	ldr	r0, [pc, #308]	; (8006504 <checkDemoModCalisma+0x240>)
 80063ce:	f002 fd39 	bl	8008e44 <HAL_GPIO_ReadPin>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d125      	bne.n	8006424 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80063d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80063dc:	4849      	ldr	r0, [pc, #292]	; (8006504 <checkDemoModCalisma+0x240>)
 80063de:	f002 fd31 	bl	8008e44 <HAL_GPIO_ReadPin>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d11d      	bne.n	8006424 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80063e8:	4b4b      	ldr	r3, [pc, #300]	; (8006518 <checkDemoModCalisma+0x254>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	f083 0301 	eor.w	r3, r3, #1
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d016      	beq.n	8006424 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80063f6:	4b44      	ldr	r3, [pc, #272]	; (8006508 <checkDemoModCalisma+0x244>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	f083 0301 	eor.w	r3, r3, #1
 80063fe:	b2db      	uxtb	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d00f      	beq.n	8006424 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8006404:	4b42      	ldr	r3, [pc, #264]	; (8006510 <checkDemoModCalisma+0x24c>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	f083 0301 	eor.w	r3, r3, #1
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d008      	beq.n	8006424 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006412:	2201      	movs	r2, #1
 8006414:	2120      	movs	r1, #32
 8006416:	483b      	ldr	r0, [pc, #236]	; (8006504 <checkDemoModCalisma+0x240>)
 8006418:	f002 fd2b 	bl	8008e72 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 800641c:	4b3b      	ldr	r3, [pc, #236]	; (800650c <checkDemoModCalisma+0x248>)
 800641e:	2201      	movs	r2, #1
 8006420:	701a      	strb	r2, [r3, #0]
 8006422:	e007      	b.n	8006434 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006424:	2200      	movs	r2, #0
 8006426:	2120      	movs	r1, #32
 8006428:	4836      	ldr	r0, [pc, #216]	; (8006504 <checkDemoModCalisma+0x240>)
 800642a:	f002 fd22 	bl	8008e72 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800642e:	4b37      	ldr	r3, [pc, #220]	; (800650c <checkDemoModCalisma+0x248>)
 8006430:	2200      	movs	r2, #0
 8006432:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006434:	2102      	movs	r1, #2
 8006436:	4833      	ldr	r0, [pc, #204]	; (8006504 <checkDemoModCalisma+0x240>)
 8006438:	f002 fd04 	bl	8008e44 <HAL_GPIO_ReadPin>
 800643c:	4603      	mov	r3, r0
 800643e:	2b01      	cmp	r3, #1
 8006440:	d125      	bne.n	800648e <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006442:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006446:	482f      	ldr	r0, [pc, #188]	; (8006504 <checkDemoModCalisma+0x240>)
 8006448:	f002 fcfc 	bl	8008e44 <HAL_GPIO_ReadPin>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d11d      	bne.n	800648e <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8006452:	4b31      	ldr	r3, [pc, #196]	; (8006518 <checkDemoModCalisma+0x254>)
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	f083 0301 	eor.w	r3, r3, #1
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d016      	beq.n	800648e <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006460:	4b2a      	ldr	r3, [pc, #168]	; (800650c <checkDemoModCalisma+0x248>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	f083 0301 	eor.w	r3, r3, #1
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00f      	beq.n	800648e <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800646e:	4b26      	ldr	r3, [pc, #152]	; (8006508 <checkDemoModCalisma+0x244>)
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	f083 0301 	eor.w	r3, r3, #1
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	d008      	beq.n	800648e <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800647c:	2201      	movs	r2, #1
 800647e:	2110      	movs	r1, #16
 8006480:	4820      	ldr	r0, [pc, #128]	; (8006504 <checkDemoModCalisma+0x240>)
 8006482:	f002 fcf6 	bl	8008e72 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8006486:	4b22      	ldr	r3, [pc, #136]	; (8006510 <checkDemoModCalisma+0x24c>)
 8006488:	2201      	movs	r2, #1
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	e007      	b.n	800649e <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800648e:	2200      	movs	r2, #0
 8006490:	2110      	movs	r1, #16
 8006492:	481c      	ldr	r0, [pc, #112]	; (8006504 <checkDemoModCalisma+0x240>)
 8006494:	f002 fced 	bl	8008e72 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8006498:	4b1d      	ldr	r3, [pc, #116]	; (8006510 <checkDemoModCalisma+0x24c>)
 800649a:	2200      	movs	r2, #0
 800649c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800649e:	2104      	movs	r1, #4
 80064a0:	4818      	ldr	r0, [pc, #96]	; (8006504 <checkDemoModCalisma+0x240>)
 80064a2:	f002 fccf 	bl	8008e44 <HAL_GPIO_ReadPin>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d139      	bne.n	8006520 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80064ac:	4b1a      	ldr	r3, [pc, #104]	; (8006518 <checkDemoModCalisma+0x254>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	f083 0301 	eor.w	r3, r3, #1
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d032      	beq.n	8006520 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80064ba:	4b15      	ldr	r3, [pc, #84]	; (8006510 <checkDemoModCalisma+0x24c>)
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	f083 0301 	eor.w	r3, r3, #1
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d02b      	beq.n	8006520 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80064c8:	4b10      	ldr	r3, [pc, #64]	; (800650c <checkDemoModCalisma+0x248>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	f083 0301 	eor.w	r3, r3, #1
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d024      	beq.n	8006520 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80064d6:	2201      	movs	r2, #1
 80064d8:	2102      	movs	r1, #2
 80064da:	480e      	ldr	r0, [pc, #56]	; (8006514 <checkDemoModCalisma+0x250>)
 80064dc:	f002 fcc9 	bl	8008e72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80064e0:	2201      	movs	r2, #1
 80064e2:	2101      	movs	r1, #1
 80064e4:	480b      	ldr	r0, [pc, #44]	; (8006514 <checkDemoModCalisma+0x250>)
 80064e6:	f002 fcc4 	bl	8008e72 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80064ea:	4b07      	ldr	r3, [pc, #28]	; (8006508 <checkDemoModCalisma+0x244>)
 80064ec:	2201      	movs	r2, #1
 80064ee:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80064f0:	4b0a      	ldr	r3, [pc, #40]	; (800651c <checkDemoModCalisma+0x258>)
 80064f2:	2201      	movs	r2, #1
 80064f4:	701a      	strb	r2, [r3, #0]
 80064f6:	e027      	b.n	8006548 <checkDemoModCalisma+0x284>
 80064f8:	2000021e 	.word	0x2000021e
 80064fc:	20000252 	.word	0x20000252
 8006500:	2000021d 	.word	0x2000021d
 8006504:	40011000 	.word	0x40011000
 8006508:	20000259 	.word	0x20000259
 800650c:	2000025a 	.word	0x2000025a
 8006510:	2000025b 	.word	0x2000025b
 8006514:	40010c00 	.word	0x40010c00
 8006518:	20000258 	.word	0x20000258
 800651c:	2000023e 	.word	0x2000023e
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006520:	2104      	movs	r1, #4
 8006522:	48a0      	ldr	r0, [pc, #640]	; (80067a4 <checkDemoModCalisma+0x4e0>)
 8006524:	f002 fc8e 	bl	8008e44 <HAL_GPIO_ReadPin>
 8006528:	4603      	mov	r3, r0
 800652a:	2b01      	cmp	r3, #1
 800652c:	d10c      	bne.n	8006548 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800652e:	2200      	movs	r2, #0
 8006530:	2102      	movs	r1, #2
 8006532:	489d      	ldr	r0, [pc, #628]	; (80067a8 <checkDemoModCalisma+0x4e4>)
 8006534:	f002 fc9d 	bl	8008e72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006538:	2200      	movs	r2, #0
 800653a:	2101      	movs	r1, #1
 800653c:	489a      	ldr	r0, [pc, #616]	; (80067a8 <checkDemoModCalisma+0x4e4>)
 800653e:	f002 fc98 	bl	8008e72 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8006542:	4b9a      	ldr	r3, [pc, #616]	; (80067ac <checkDemoModCalisma+0x4e8>)
 8006544:	2200      	movs	r2, #0
 8006546:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006548:	2104      	movs	r1, #4
 800654a:	4896      	ldr	r0, [pc, #600]	; (80067a4 <checkDemoModCalisma+0x4e0>)
 800654c:	f002 fc7a 	bl	8008e44 <HAL_GPIO_ReadPin>
 8006550:	4603      	mov	r3, r0
 8006552:	2b01      	cmp	r3, #1
 8006554:	d10d      	bne.n	8006572 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006556:	2201      	movs	r2, #1
 8006558:	2180      	movs	r1, #128	; 0x80
 800655a:	4895      	ldr	r0, [pc, #596]	; (80067b0 <checkDemoModCalisma+0x4ec>)
 800655c:	f002 fc89 	bl	8008e72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006560:	2201      	movs	r2, #1
 8006562:	2120      	movs	r1, #32
 8006564:	4892      	ldr	r0, [pc, #584]	; (80067b0 <checkDemoModCalisma+0x4ec>)
 8006566:	f002 fc84 	bl	8008e72 <HAL_GPIO_WritePin>
			timer3 = millis;
 800656a:	4b92      	ldr	r3, [pc, #584]	; (80067b4 <checkDemoModCalisma+0x4f0>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a92      	ldr	r2, [pc, #584]	; (80067b8 <checkDemoModCalisma+0x4f4>)
 8006570:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006572:	4b90      	ldr	r3, [pc, #576]	; (80067b4 <checkDemoModCalisma+0x4f0>)
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	4b90      	ldr	r3, [pc, #576]	; (80067b8 <checkDemoModCalisma+0x4f4>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	2b04      	cmp	r3, #4
 800657e:	d909      	bls.n	8006594 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006580:	2200      	movs	r2, #0
 8006582:	2180      	movs	r1, #128	; 0x80
 8006584:	488a      	ldr	r0, [pc, #552]	; (80067b0 <checkDemoModCalisma+0x4ec>)
 8006586:	f002 fc74 	bl	8008e72 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800658a:	2200      	movs	r2, #0
 800658c:	2120      	movs	r1, #32
 800658e:	4888      	ldr	r0, [pc, #544]	; (80067b0 <checkDemoModCalisma+0x4ec>)
 8006590:	f002 fc6f 	bl	8008e72 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006594:	2102      	movs	r1, #2
 8006596:	4883      	ldr	r0, [pc, #524]	; (80067a4 <checkDemoModCalisma+0x4e0>)
 8006598:	f002 fc54 	bl	8008e44 <HAL_GPIO_ReadPin>
 800659c:	4603      	mov	r3, r0
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d108      	bne.n	80065b4 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80065a2:	2201      	movs	r2, #1
 80065a4:	2140      	movs	r1, #64	; 0x40
 80065a6:	4882      	ldr	r0, [pc, #520]	; (80067b0 <checkDemoModCalisma+0x4ec>)
 80065a8:	f002 fc63 	bl	8008e72 <HAL_GPIO_WritePin>
			timer3 = millis;
 80065ac:	4b81      	ldr	r3, [pc, #516]	; (80067b4 <checkDemoModCalisma+0x4f0>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a81      	ldr	r2, [pc, #516]	; (80067b8 <checkDemoModCalisma+0x4f4>)
 80065b2:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80065b4:	4b7f      	ldr	r3, [pc, #508]	; (80067b4 <checkDemoModCalisma+0x4f0>)
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	4b7f      	ldr	r3, [pc, #508]	; (80067b8 <checkDemoModCalisma+0x4f4>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d904      	bls.n	80065cc <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80065c2:	2200      	movs	r2, #0
 80065c4:	2140      	movs	r1, #64	; 0x40
 80065c6:	487a      	ldr	r0, [pc, #488]	; (80067b0 <checkDemoModCalisma+0x4ec>)
 80065c8:	f002 fc53 	bl	8008e72 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80065cc:	4b7b      	ldr	r3, [pc, #492]	; (80067bc <checkDemoModCalisma+0x4f8>)
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d058      	beq.n	8006686 <checkDemoModCalisma+0x3c2>
 80065d4:	4b7a      	ldr	r3, [pc, #488]	; (80067c0 <checkDemoModCalisma+0x4fc>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d054      	beq.n	8006686 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80065dc:	4b79      	ldr	r3, [pc, #484]	; (80067c4 <checkDemoModCalisma+0x500>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	3301      	adds	r3, #1
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	4b77      	ldr	r3, [pc, #476]	; (80067c4 <checkDemoModCalisma+0x500>)
 80065e6:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80065e8:	4b76      	ldr	r3, [pc, #472]	; (80067c4 <checkDemoModCalisma+0x500>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b09      	cmp	r3, #9
 80065ee:	d908      	bls.n	8006602 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 80065f0:	4b74      	ldr	r3, [pc, #464]	; (80067c4 <checkDemoModCalisma+0x500>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 80065f6:	4b74      	ldr	r3, [pc, #464]	; (80067c8 <checkDemoModCalisma+0x504>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	3301      	adds	r3, #1
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	4b72      	ldr	r3, [pc, #456]	; (80067c8 <checkDemoModCalisma+0x504>)
 8006600:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8006602:	4b71      	ldr	r3, [pc, #452]	; (80067c8 <checkDemoModCalisma+0x504>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	2b09      	cmp	r3, #9
 8006608:	d908      	bls.n	800661c <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 800660a:	4b6f      	ldr	r3, [pc, #444]	; (80067c8 <checkDemoModCalisma+0x504>)
 800660c:	2200      	movs	r2, #0
 800660e:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006610:	4b6e      	ldr	r3, [pc, #440]	; (80067cc <checkDemoModCalisma+0x508>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	3301      	adds	r3, #1
 8006616:	b2da      	uxtb	r2, r3
 8006618:	4b6c      	ldr	r3, [pc, #432]	; (80067cc <checkDemoModCalisma+0x508>)
 800661a:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 800661c:	4b6b      	ldr	r3, [pc, #428]	; (80067cc <checkDemoModCalisma+0x508>)
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	2b09      	cmp	r3, #9
 8006622:	d908      	bls.n	8006636 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8006624:	4b69      	ldr	r3, [pc, #420]	; (80067cc <checkDemoModCalisma+0x508>)
 8006626:	2200      	movs	r2, #0
 8006628:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 800662a:	4b69      	ldr	r3, [pc, #420]	; (80067d0 <checkDemoModCalisma+0x50c>)
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	3301      	adds	r3, #1
 8006630:	b2da      	uxtb	r2, r3
 8006632:	4b67      	ldr	r3, [pc, #412]	; (80067d0 <checkDemoModCalisma+0x50c>)
 8006634:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8006636:	4b66      	ldr	r3, [pc, #408]	; (80067d0 <checkDemoModCalisma+0x50c>)
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	2b09      	cmp	r3, #9
 800663c:	d908      	bls.n	8006650 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 800663e:	4b64      	ldr	r3, [pc, #400]	; (80067d0 <checkDemoModCalisma+0x50c>)
 8006640:	2200      	movs	r2, #0
 8006642:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006644:	4b63      	ldr	r3, [pc, #396]	; (80067d4 <checkDemoModCalisma+0x510>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	3301      	adds	r3, #1
 800664a:	b2da      	uxtb	r2, r3
 800664c:	4b61      	ldr	r3, [pc, #388]	; (80067d4 <checkDemoModCalisma+0x510>)
 800664e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006650:	4b60      	ldr	r3, [pc, #384]	; (80067d4 <checkDemoModCalisma+0x510>)
 8006652:	781a      	ldrb	r2, [r3, #0]
 8006654:	4b60      	ldr	r3, [pc, #384]	; (80067d8 <checkDemoModCalisma+0x514>)
 8006656:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800665a:	4b5d      	ldr	r3, [pc, #372]	; (80067d0 <checkDemoModCalisma+0x50c>)
 800665c:	781a      	ldrb	r2, [r3, #0]
 800665e:	4b5e      	ldr	r3, [pc, #376]	; (80067d8 <checkDemoModCalisma+0x514>)
 8006660:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006662:	4b5a      	ldr	r3, [pc, #360]	; (80067cc <checkDemoModCalisma+0x508>)
 8006664:	781a      	ldrb	r2, [r3, #0]
 8006666:	4b5c      	ldr	r3, [pc, #368]	; (80067d8 <checkDemoModCalisma+0x514>)
 8006668:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800666a:	4b57      	ldr	r3, [pc, #348]	; (80067c8 <checkDemoModCalisma+0x504>)
 800666c:	781a      	ldrb	r2, [r3, #0]
 800666e:	4b5a      	ldr	r3, [pc, #360]	; (80067d8 <checkDemoModCalisma+0x514>)
 8006670:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006672:	4b54      	ldr	r3, [pc, #336]	; (80067c4 <checkDemoModCalisma+0x500>)
 8006674:	781a      	ldrb	r2, [r3, #0]
 8006676:	4b58      	ldr	r3, [pc, #352]	; (80067d8 <checkDemoModCalisma+0x514>)
 8006678:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 800667a:	4b58      	ldr	r3, [pc, #352]	; (80067dc <checkDemoModCalisma+0x518>)
 800667c:	2201      	movs	r2, #1
 800667e:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8006680:	4b4f      	ldr	r3, [pc, #316]	; (80067c0 <checkDemoModCalisma+0x4fc>)
 8006682:	2200      	movs	r2, #0
 8006684:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8006686:	4b56      	ldr	r3, [pc, #344]	; (80067e0 <checkDemoModCalisma+0x51c>)
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	f040 8087 	bne.w	800679e <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8006690:	4a54      	ldr	r2, [pc, #336]	; (80067e4 <checkDemoModCalisma+0x520>)
 8006692:	2101      	movs	r1, #1
 8006694:	2002      	movs	r0, #2
 8006696:	f001 f8af 	bl	80077f8 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 800669a:	4a53      	ldr	r2, [pc, #332]	; (80067e8 <checkDemoModCalisma+0x524>)
 800669c:	2101      	movs	r1, #1
 800669e:	2001      	movs	r0, #1
 80066a0:	f001 f8aa 	bl	80077f8 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 80066a4:	4b4b      	ldr	r3, [pc, #300]	; (80067d4 <checkDemoModCalisma+0x510>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	220a      	movs	r2, #10
 80066aa:	4950      	ldr	r1, [pc, #320]	; (80067ec <checkDemoModCalisma+0x528>)
 80066ac:	4618      	mov	r0, r3
 80066ae:	f005 fc51 	bl	800bf54 <itoa>
			lcd_print(2,12,snum);
 80066b2:	4a4e      	ldr	r2, [pc, #312]	; (80067ec <checkDemoModCalisma+0x528>)
 80066b4:	210c      	movs	r1, #12
 80066b6:	2002      	movs	r0, #2
 80066b8:	f001 f89e 	bl	80077f8 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80066bc:	4b44      	ldr	r3, [pc, #272]	; (80067d0 <checkDemoModCalisma+0x50c>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	220a      	movs	r2, #10
 80066c2:	494a      	ldr	r1, [pc, #296]	; (80067ec <checkDemoModCalisma+0x528>)
 80066c4:	4618      	mov	r0, r3
 80066c6:	f005 fc45 	bl	800bf54 <itoa>
			lcd_print(2,13,snum);
 80066ca:	4a48      	ldr	r2, [pc, #288]	; (80067ec <checkDemoModCalisma+0x528>)
 80066cc:	210d      	movs	r1, #13
 80066ce:	2002      	movs	r0, #2
 80066d0:	f001 f892 	bl	80077f8 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80066d4:	4b3d      	ldr	r3, [pc, #244]	; (80067cc <checkDemoModCalisma+0x508>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	220a      	movs	r2, #10
 80066da:	4944      	ldr	r1, [pc, #272]	; (80067ec <checkDemoModCalisma+0x528>)
 80066dc:	4618      	mov	r0, r3
 80066de:	f005 fc39 	bl	800bf54 <itoa>
			lcd_print(2,14,snum);
 80066e2:	4a42      	ldr	r2, [pc, #264]	; (80067ec <checkDemoModCalisma+0x528>)
 80066e4:	210e      	movs	r1, #14
 80066e6:	2002      	movs	r0, #2
 80066e8:	f001 f886 	bl	80077f8 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 80066ec:	4b36      	ldr	r3, [pc, #216]	; (80067c8 <checkDemoModCalisma+0x504>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	220a      	movs	r2, #10
 80066f2:	493e      	ldr	r1, [pc, #248]	; (80067ec <checkDemoModCalisma+0x528>)
 80066f4:	4618      	mov	r0, r3
 80066f6:	f005 fc2d 	bl	800bf54 <itoa>
			lcd_print(2,15,snum);
 80066fa:	4a3c      	ldr	r2, [pc, #240]	; (80067ec <checkDemoModCalisma+0x528>)
 80066fc:	210f      	movs	r1, #15
 80066fe:	2002      	movs	r0, #2
 8006700:	f001 f87a 	bl	80077f8 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8006704:	4b2f      	ldr	r3, [pc, #188]	; (80067c4 <checkDemoModCalisma+0x500>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	220a      	movs	r2, #10
 800670a:	4938      	ldr	r1, [pc, #224]	; (80067ec <checkDemoModCalisma+0x528>)
 800670c:	4618      	mov	r0, r3
 800670e:	f005 fc21 	bl	800bf54 <itoa>
			lcd_print(2,16,snum);
 8006712:	4a36      	ldr	r2, [pc, #216]	; (80067ec <checkDemoModCalisma+0x528>)
 8006714:	2110      	movs	r1, #16
 8006716:	2002      	movs	r0, #2
 8006718:	f001 f86e 	bl	80077f8 <lcd_print>
			mesajYazildi=1;
 800671c:	4b34      	ldr	r3, [pc, #208]	; (80067f0 <checkDemoModCalisma+0x52c>)
 800671e:	2201      	movs	r2, #1
 8006720:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8006722:	e03c      	b.n	800679e <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8006724:	4b33      	ldr	r3, [pc, #204]	; (80067f4 <checkDemoModCalisma+0x530>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d003      	beq.n	8006734 <checkDemoModCalisma+0x470>
 800672c:	4b2c      	ldr	r3, [pc, #176]	; (80067e0 <checkDemoModCalisma+0x51c>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d134      	bne.n	800679e <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006734:	2200      	movs	r2, #0
 8006736:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800673a:	481b      	ldr	r0, [pc, #108]	; (80067a8 <checkDemoModCalisma+0x4e4>)
 800673c:	f002 fb99 	bl	8008e72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006740:	2200      	movs	r2, #0
 8006742:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006746:	4818      	ldr	r0, [pc, #96]	; (80067a8 <checkDemoModCalisma+0x4e4>)
 8006748:	f002 fb93 	bl	8008e72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800674c:	2200      	movs	r2, #0
 800674e:	2104      	movs	r1, #4
 8006750:	4815      	ldr	r0, [pc, #84]	; (80067a8 <checkDemoModCalisma+0x4e4>)
 8006752:	f002 fb8e 	bl	8008e72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006756:	2200      	movs	r2, #0
 8006758:	2102      	movs	r1, #2
 800675a:	4813      	ldr	r0, [pc, #76]	; (80067a8 <checkDemoModCalisma+0x4e4>)
 800675c:	f002 fb89 	bl	8008e72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006760:	2200      	movs	r2, #0
 8006762:	2101      	movs	r1, #1
 8006764:	4810      	ldr	r0, [pc, #64]	; (80067a8 <checkDemoModCalisma+0x4e4>)
 8006766:	f002 fb84 	bl	8008e72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800676a:	2200      	movs	r2, #0
 800676c:	2120      	movs	r1, #32
 800676e:	480d      	ldr	r0, [pc, #52]	; (80067a4 <checkDemoModCalisma+0x4e0>)
 8006770:	f002 fb7f 	bl	8008e72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006774:	2200      	movs	r2, #0
 8006776:	2110      	movs	r1, #16
 8006778:	480a      	ldr	r0, [pc, #40]	; (80067a4 <checkDemoModCalisma+0x4e0>)
 800677a:	f002 fb7a 	bl	8008e72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800677e:	2200      	movs	r2, #0
 8006780:	2180      	movs	r1, #128	; 0x80
 8006782:	480b      	ldr	r0, [pc, #44]	; (80067b0 <checkDemoModCalisma+0x4ec>)
 8006784:	f002 fb75 	bl	8008e72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006788:	2200      	movs	r2, #0
 800678a:	2140      	movs	r1, #64	; 0x40
 800678c:	4808      	ldr	r0, [pc, #32]	; (80067b0 <checkDemoModCalisma+0x4ec>)
 800678e:	f002 fb70 	bl	8008e72 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006792:	2200      	movs	r2, #0
 8006794:	2120      	movs	r1, #32
 8006796:	4806      	ldr	r0, [pc, #24]	; (80067b0 <checkDemoModCalisma+0x4ec>)
 8006798:	f002 fb6b 	bl	8008e72 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 800679c:	e7ff      	b.n	800679e <checkDemoModCalisma+0x4da>
 800679e:	bf00      	nop
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	40011000 	.word	0x40011000
 80067a8:	40010c00 	.word	0x40010c00
 80067ac:	20000259 	.word	0x20000259
 80067b0:	40010800 	.word	0x40010800
 80067b4:	200001dc 	.word	0x200001dc
 80067b8:	200001ec 	.word	0x200001ec
 80067bc:	20000258 	.word	0x20000258
 80067c0:	2000023e 	.word	0x2000023e
 80067c4:	200001fd 	.word	0x200001fd
 80067c8:	200001fe 	.word	0x200001fe
 80067cc:	20000000 	.word	0x20000000
 80067d0:	20000001 	.word	0x20000001
 80067d4:	200001ff 	.word	0x200001ff
 80067d8:	2000012c 	.word	0x2000012c
 80067dc:	2000022c 	.word	0x2000022c
 80067e0:	2000021d 	.word	0x2000021d
 80067e4:	0800d7a8 	.word	0x0800d7a8
 80067e8:	0800d7b4 	.word	0x0800d7b4
 80067ec:	2000019c 	.word	0x2000019c
 80067f0:	20000234 	.word	0x20000234
 80067f4:	2000021e 	.word	0x2000021e

080067f8 <mainLoop>:

void mainLoop() {
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80067fe:	f7fe f923 	bl	8004a48 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006802:	2101      	movs	r1, #1
 8006804:	48ac      	ldr	r0, [pc, #688]	; (8006ab8 <mainLoop+0x2c0>)
 8006806:	f002 fb1d 	bl	8008e44 <HAL_GPIO_ReadPin>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d136      	bne.n	800687e <mainLoop+0x86>
 8006810:	2108      	movs	r1, #8
 8006812:	48aa      	ldr	r0, [pc, #680]	; (8006abc <mainLoop+0x2c4>)
 8006814:	f002 fb16 	bl	8008e44 <HAL_GPIO_ReadPin>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d12f      	bne.n	800687e <mainLoop+0x86>
 800681e:	2102      	movs	r1, #2
 8006820:	48a5      	ldr	r0, [pc, #660]	; (8006ab8 <mainLoop+0x2c0>)
 8006822:	f002 fb0f 	bl	8008e44 <HAL_GPIO_ReadPin>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	d128      	bne.n	800687e <mainLoop+0x86>
 800682c:	2104      	movs	r1, #4
 800682e:	48a2      	ldr	r0, [pc, #648]	; (8006ab8 <mainLoop+0x2c0>)
 8006830:	f002 fb08 	bl	8008e44 <HAL_GPIO_ReadPin>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d121      	bne.n	800687e <mainLoop+0x86>
 800683a:	2108      	movs	r1, #8
 800683c:	489e      	ldr	r0, [pc, #632]	; (8006ab8 <mainLoop+0x2c0>)
 800683e:	f002 fb01 	bl	8008e44 <HAL_GPIO_ReadPin>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d11a      	bne.n	800687e <mainLoop+0x86>
 8006848:	2180      	movs	r1, #128	; 0x80
 800684a:	489c      	ldr	r0, [pc, #624]	; (8006abc <mainLoop+0x2c4>)
 800684c:	f002 fafa 	bl	8008e44 <HAL_GPIO_ReadPin>
 8006850:	4603      	mov	r3, r0
 8006852:	2b01      	cmp	r3, #1
 8006854:	d113      	bne.n	800687e <mainLoop+0x86>
 8006856:	f44f 7180 	mov.w	r1, #256	; 0x100
 800685a:	4898      	ldr	r0, [pc, #608]	; (8006abc <mainLoop+0x2c4>)
 800685c:	f002 faf2 	bl	8008e44 <HAL_GPIO_ReadPin>
 8006860:	4603      	mov	r3, r0
 8006862:	2b01      	cmp	r3, #1
 8006864:	d10b      	bne.n	800687e <mainLoop+0x86>
 8006866:	f44f 7100 	mov.w	r1, #512	; 0x200
 800686a:	4894      	ldr	r0, [pc, #592]	; (8006abc <mainLoop+0x2c4>)
 800686c:	f002 faea 	bl	8008e44 <HAL_GPIO_ReadPin>
 8006870:	4603      	mov	r3, r0
 8006872:	2b01      	cmp	r3, #1
 8006874:	d103      	bne.n	800687e <mainLoop+0x86>
			butonKontrol=0;
 8006876:	4b92      	ldr	r3, [pc, #584]	; (8006ac0 <mainLoop+0x2c8>)
 8006878:	2200      	movs	r2, #0
 800687a:	701a      	strb	r2, [r3, #0]
 800687c:	e003      	b.n	8006886 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 800687e:	4b91      	ldr	r3, [pc, #580]	; (8006ac4 <mainLoop+0x2cc>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a91      	ldr	r2, [pc, #580]	; (8006ac8 <mainLoop+0x2d0>)
 8006884:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006886:	4b91      	ldr	r3, [pc, #580]	; (8006acc <mainLoop+0x2d4>)
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d03a      	beq.n	8006904 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800688e:	bf00      	nop
 8006890:	488f      	ldr	r0, [pc, #572]	; (8006ad0 <mainLoop+0x2d8>)
 8006892:	f003 f900 	bl	8009a96 <HAL_I2C_GetError>
 8006896:	4603      	mov	r3, r0
 8006898:	2b04      	cmp	r3, #4
 800689a:	d0f9      	beq.n	8006890 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800689c:	bf00      	nop
 800689e:	488c      	ldr	r0, [pc, #560]	; (8006ad0 <mainLoop+0x2d8>)
 80068a0:	f003 f8ec 	bl	8009a7c <HAL_I2C_GetState>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	d1f9      	bne.n	800689e <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80068aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80068ae:	9302      	str	r3, [sp, #8]
 80068b0:	236e      	movs	r3, #110	; 0x6e
 80068b2:	9301      	str	r3, [sp, #4]
 80068b4:	4b87      	ldr	r3, [pc, #540]	; (8006ad4 <mainLoop+0x2dc>)
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	236e      	movs	r3, #110	; 0x6e
 80068ba:	2200      	movs	r2, #0
 80068bc:	21a0      	movs	r1, #160	; 0xa0
 80068be:	4884      	ldr	r0, [pc, #528]	; (8006ad0 <mainLoop+0x2d8>)
 80068c0:	f002 fd7a 	bl	80093b8 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 80068c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80068c8:	f001 fcec 	bl	80082a4 <HAL_Delay>

		  hafizaYaz=0;
 80068cc:	4b7f      	ldr	r3, [pc, #508]	; (8006acc <mainLoop+0x2d4>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80068d2:	4b81      	ldr	r3, [pc, #516]	; (8006ad8 <mainLoop+0x2e0>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d105      	bne.n	80068e6 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 80068da:	4a80      	ldr	r2, [pc, #512]	; (8006adc <mainLoop+0x2e4>)
 80068dc:	2101      	movs	r1, #1
 80068de:	2002      	movs	r0, #2
 80068e0:	f000 ff8a 	bl	80077f8 <lcd_print>
 80068e4:	e008      	b.n	80068f8 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 80068e6:	4b7c      	ldr	r3, [pc, #496]	; (8006ad8 <mainLoop+0x2e0>)
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d104      	bne.n	80068f8 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 80068ee:	4a7c      	ldr	r2, [pc, #496]	; (8006ae0 <mainLoop+0x2e8>)
 80068f0:	2101      	movs	r1, #1
 80068f2:	2002      	movs	r0, #2
 80068f4:	f000 ff80 	bl	80077f8 <lcd_print>
		  }

		  HAL_Delay(1000);
 80068f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068fc:	f001 fcd2 	bl	80082a4 <HAL_Delay>
		  lcd_clear();
 8006900:	f000 ffa6 	bl	8007850 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006904:	4b77      	ldr	r3, [pc, #476]	; (8006ae4 <mainLoop+0x2ec>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	f083 0301 	eor.w	r3, r3, #1
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d06d      	beq.n	80069ee <mainLoop+0x1f6>
 8006912:	486f      	ldr	r0, [pc, #444]	; (8006ad0 <mainLoop+0x2d8>)
 8006914:	f003 f8b2 	bl	8009a7c <HAL_I2C_GetState>
 8006918:	4603      	mov	r3, r0
 800691a:	2b20      	cmp	r3, #32
 800691c:	d167      	bne.n	80069ee <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 800691e:	4b72      	ldr	r3, [pc, #456]	; (8006ae8 <mainLoop+0x2f0>)
 8006920:	781b      	ldrb	r3, [r3, #0]
 8006922:	f083 0301 	eor.w	r3, r3, #1
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d044      	beq.n	80069b6 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 800692c:	4a6f      	ldr	r2, [pc, #444]	; (8006aec <mainLoop+0x2f4>)
 800692e:	2101      	movs	r1, #1
 8006930:	2001      	movs	r0, #1
 8006932:	f000 ff61 	bl	80077f8 <lcd_print>
			  if(dilSecim==0) {
 8006936:	4b68      	ldr	r3, [pc, #416]	; (8006ad8 <mainLoop+0x2e0>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d105      	bne.n	800694a <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 800693e:	4a6c      	ldr	r2, [pc, #432]	; (8006af0 <mainLoop+0x2f8>)
 8006940:	2101      	movs	r1, #1
 8006942:	2002      	movs	r0, #2
 8006944:	f000 ff58 	bl	80077f8 <lcd_print>
 8006948:	e008      	b.n	800695c <mainLoop+0x164>
			  } else if(dilSecim==1) {
 800694a:	4b63      	ldr	r3, [pc, #396]	; (8006ad8 <mainLoop+0x2e0>)
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d104      	bne.n	800695c <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006952:	4a68      	ldr	r2, [pc, #416]	; (8006af4 <mainLoop+0x2fc>)
 8006954:	2101      	movs	r1, #1
 8006956:	2002      	movs	r0, #2
 8006958:	f000 ff4e 	bl	80077f8 <lcd_print>
			  }
			  HAL_Delay(1000);
 800695c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006960:	f001 fca0 	bl	80082a4 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006964:	bf00      	nop
 8006966:	485a      	ldr	r0, [pc, #360]	; (8006ad0 <mainLoop+0x2d8>)
 8006968:	f003 f895 	bl	8009a96 <HAL_I2C_GetError>
 800696c:	4603      	mov	r3, r0
 800696e:	2b04      	cmp	r3, #4
 8006970:	d0f9      	beq.n	8006966 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006972:	e003      	b.n	800697c <mainLoop+0x184>
				  HAL_Delay(1000);
 8006974:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006978:	f001 fc94 	bl	80082a4 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800697c:	4854      	ldr	r0, [pc, #336]	; (8006ad0 <mainLoop+0x2d8>)
 800697e:	f003 f87d 	bl	8009a7c <HAL_I2C_GetState>
 8006982:	4603      	mov	r3, r0
 8006984:	2b20      	cmp	r3, #32
 8006986:	d1f5      	bne.n	8006974 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006988:	4b53      	ldr	r3, [pc, #332]	; (8006ad8 <mainLoop+0x2e0>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d105      	bne.n	800699c <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006990:	4a59      	ldr	r2, [pc, #356]	; (8006af8 <mainLoop+0x300>)
 8006992:	2101      	movs	r1, #1
 8006994:	2002      	movs	r0, #2
 8006996:	f000 ff2f 	bl	80077f8 <lcd_print>
 800699a:	e008      	b.n	80069ae <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 800699c:	4b4e      	ldr	r3, [pc, #312]	; (8006ad8 <mainLoop+0x2e0>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d104      	bne.n	80069ae <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 80069a4:	4a55      	ldr	r2, [pc, #340]	; (8006afc <mainLoop+0x304>)
 80069a6:	2101      	movs	r1, #1
 80069a8:	2002      	movs	r0, #2
 80069aa:	f000 ff25 	bl	80077f8 <lcd_print>
			  }

			  ilkOkuma=1;
 80069ae:	4b4e      	ldr	r3, [pc, #312]	; (8006ae8 <mainLoop+0x2f0>)
 80069b0:	2201      	movs	r2, #1
 80069b2:	701a      	strb	r2, [r3, #0]
 80069b4:	e014      	b.n	80069e0 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 80069b6:	4b48      	ldr	r3, [pc, #288]	; (8006ad8 <mainLoop+0x2e0>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d105      	bne.n	80069ca <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 80069be:	4a50      	ldr	r2, [pc, #320]	; (8006b00 <mainLoop+0x308>)
 80069c0:	2101      	movs	r1, #1
 80069c2:	2002      	movs	r0, #2
 80069c4:	f000 ff18 	bl	80077f8 <lcd_print>
 80069c8:	e008      	b.n	80069dc <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 80069ca:	4b43      	ldr	r3, [pc, #268]	; (8006ad8 <mainLoop+0x2e0>)
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d104      	bne.n	80069dc <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 80069d2:	4a4c      	ldr	r2, [pc, #304]	; (8006b04 <mainLoop+0x30c>)
 80069d4:	2101      	movs	r1, #1
 80069d6:	2002      	movs	r0, #2
 80069d8:	f000 ff0e 	bl	80077f8 <lcd_print>
			  }
			  lcd_clear();
 80069dc:	f000 ff38 	bl	8007850 <lcd_clear>
		  }

		  lcd_clear();
 80069e0:	f000 ff36 	bl	8007850 <lcd_clear>

		  eepromKontrol();
 80069e4:	f7f9 fc26 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 80069e8:	4b3e      	ldr	r3, [pc, #248]	; (8006ae4 <mainLoop+0x2ec>)
 80069ea:	2201      	movs	r2, #1
 80069ec:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80069ee:	4b46      	ldr	r3, [pc, #280]	; (8006b08 <mainLoop+0x310>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d11c      	bne.n	8006a30 <mainLoop+0x238>
 80069f6:	4b45      	ldr	r3, [pc, #276]	; (8006b0c <mainLoop+0x314>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	f083 0301 	eor.w	r3, r3, #1
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d015      	beq.n	8006a30 <mainLoop+0x238>
 8006a04:	4b42      	ldr	r3, [pc, #264]	; (8006b10 <mainLoop+0x318>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d111      	bne.n	8006a30 <mainLoop+0x238>
			lcd_clear();
 8006a0c:	f000 ff20 	bl	8007850 <lcd_clear>
			HAL_Delay(10);
 8006a10:	200a      	movs	r0, #10
 8006a12:	f001 fc47 	bl	80082a4 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006a16:	4a3f      	ldr	r2, [pc, #252]	; (8006b14 <mainLoop+0x31c>)
 8006a18:	2101      	movs	r1, #1
 8006a1a:	2001      	movs	r0, #1
 8006a1c:	f000 feec 	bl	80077f8 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006a20:	4a3d      	ldr	r2, [pc, #244]	; (8006b18 <mainLoop+0x320>)
 8006a22:	2101      	movs	r1, #1
 8006a24:	2002      	movs	r0, #2
 8006a26:	f000 fee7 	bl	80077f8 <lcd_print>
			mesajYazildi=1;
 8006a2a:	4b38      	ldr	r3, [pc, #224]	; (8006b0c <mainLoop+0x314>)
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006a30:	4b35      	ldr	r3, [pc, #212]	; (8006b08 <mainLoop+0x310>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d112      	bne.n	8006a5e <mainLoop+0x266>
 8006a38:	2102      	movs	r1, #2
 8006a3a:	481f      	ldr	r0, [pc, #124]	; (8006ab8 <mainLoop+0x2c0>)
 8006a3c:	f002 fa02 	bl	8008e44 <HAL_GPIO_ReadPin>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d10b      	bne.n	8006a5e <mainLoop+0x266>
 8006a46:	2104      	movs	r1, #4
 8006a48:	481b      	ldr	r0, [pc, #108]	; (8006ab8 <mainLoop+0x2c0>)
 8006a4a:	f002 f9fb 	bl	8008e44 <HAL_GPIO_ReadPin>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d104      	bne.n	8006a5e <mainLoop+0x266>
			menuGiris=1;
 8006a54:	4b2c      	ldr	r3, [pc, #176]	; (8006b08 <mainLoop+0x310>)
 8006a56:	2201      	movs	r2, #1
 8006a58:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006a5a:	f000 fef9 	bl	8007850 <lcd_clear>
		}

		if(menuGiris==1) {
 8006a5e:	4b2a      	ldr	r3, [pc, #168]	; (8006b08 <mainLoop+0x310>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d101      	bne.n	8006a6a <mainLoop+0x272>
			menu();
 8006a66:	f7fa fbcb 	bl	8001200 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a6e:	4813      	ldr	r0, [pc, #76]	; (8006abc <mainLoop+0x2c4>)
 8006a70:	f002 fa17 	bl	8008ea2 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006a74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a78:	4828      	ldr	r0, [pc, #160]	; (8006b1c <mainLoop+0x324>)
 8006a7a:	f002 f9e3 	bl	8008e44 <HAL_GPIO_ReadPin>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10a      	bne.n	8006a9a <mainLoop+0x2a2>
 8006a84:	4b26      	ldr	r3, [pc, #152]	; (8006b20 <mainLoop+0x328>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	f083 0301 	eor.w	r3, r3, #1
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <mainLoop+0x2a2>
			stopVar=1;
 8006a92:	4b24      	ldr	r3, [pc, #144]	; (8006b24 <mainLoop+0x32c>)
 8006a94:	2201      	movs	r2, #1
 8006a96:	701a      	strb	r2, [r3, #0]
 8006a98:	e002      	b.n	8006aa0 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006a9a:	4b22      	ldr	r3, [pc, #136]	; (8006b24 <mainLoop+0x32c>)
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006aa0:	f7fd ffe8 	bl	8004a74 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006aa4:	f7fe f81a 	bl	8004adc <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006aa8:	f7fe f85e 	bl	8004b68 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006aac:	f7fe f8ae 	bl	8004c0c <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006ab0:	f7ff fc08 	bl	80062c4 <checkDemoModCalisma>
		checkLCDBacklight();
 8006ab4:	e6a3      	b.n	80067fe <mainLoop+0x6>
 8006ab6:	bf00      	nop
 8006ab8:	40010800 	.word	0x40010800
 8006abc:	40011000 	.word	0x40011000
 8006ac0:	2000022f 	.word	0x2000022f
 8006ac4:	200001dc 	.word	0x200001dc
 8006ac8:	200001f8 	.word	0x200001f8
 8006acc:	2000022c 	.word	0x2000022c
 8006ad0:	20000290 	.word	0x20000290
 8006ad4:	2000012c 	.word	0x2000012c
 8006ad8:	20000221 	.word	0x20000221
 8006adc:	0800d7c8 	.word	0x0800d7c8
 8006ae0:	0800d7dc 	.word	0x0800d7dc
 8006ae4:	2000022d 	.word	0x2000022d
 8006ae8:	2000022e 	.word	0x2000022e
 8006aec:	0800d7f0 	.word	0x0800d7f0
 8006af0:	0800d804 	.word	0x0800d804
 8006af4:	0800d818 	.word	0x0800d818
 8006af8:	0800d82c 	.word	0x0800d82c
 8006afc:	0800d840 	.word	0x0800d840
 8006b00:	0800d854 	.word	0x0800d854
 8006b04:	0800d868 	.word	0x0800d868
 8006b08:	2000021d 	.word	0x2000021d
 8006b0c:	20000234 	.word	0x20000234
 8006b10:	2000021e 	.word	0x2000021e
 8006b14:	0800d87c 	.word	0x0800d87c
 8006b18:	0800d890 	.word	0x0800d890
 8006b1c:	40010c00 	.word	0x40010c00
 8006b20:	20000255 	.word	0x20000255
 8006b24:	20000252 	.word	0x20000252

08006b28 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "IoTMenu.h"

void takeMachineID() {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af04      	add	r7, sp, #16
	bool validInput = false;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	73fb      	strb	r3, [r7, #15]

	int loc = 0;
 8006b32:	2300      	movs	r3, #0
 8006b34:	60bb      	str	r3, [r7, #8]
	int writeLoc = 5;
 8006b36:	2305      	movs	r3, #5
 8006b38:	607b      	str	r3, [r7, #4]

	memset(machineID, 0, sizeof(machineID));
 8006b3a:	220c      	movs	r2, #12
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	4848      	ldr	r0, [pc, #288]	; (8006c60 <takeMachineID+0x138>)
 8006b40:	f005 fb79 	bl	800c236 <memset>

	while(!validInput) {
 8006b44:	e071      	b.n	8006c2a <takeMachineID+0x102>
		lcd_clear();
 8006b46:	f000 fe83 	bl	8007850 <lcd_clear>

		saveCharacter(loc, writeLoc, machineID, idStartPos, 'M');
 8006b4a:	4b46      	ldr	r3, [pc, #280]	; (8006c64 <takeMachineID+0x13c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	224d      	movs	r2, #77	; 0x4d
 8006b50:	9200      	str	r2, [sp, #0]
 8006b52:	4a43      	ldr	r2, [pc, #268]	; (8006c60 <takeMachineID+0x138>)
 8006b54:	6879      	ldr	r1, [r7, #4]
 8006b56:	68b8      	ldr	r0, [r7, #8]
 8006b58:	f000 fb20 	bl	800719c <saveCharacter>

		if (strlen(machineID) == 12) {
 8006b5c:	4840      	ldr	r0, [pc, #256]	; (8006c60 <takeMachineID+0x138>)
 8006b5e:	f7f9 fb61 	bl	8000224 <strlen>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b0c      	cmp	r3, #12
 8006b66:	d138      	bne.n	8006bda <takeMachineID+0xb2>
		    if(checkMachineID(&huart1, machineID) == 1) {
 8006b68:	493d      	ldr	r1, [pc, #244]	; (8006c60 <takeMachineID+0x138>)
 8006b6a:	483f      	ldr	r0, [pc, #252]	; (8006c68 <takeMachineID+0x140>)
 8006b6c:	f7f9 ff24 	bl	80009b8 <checkMachineID>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b01      	cmp	r3, #1
 8006b74:	d105      	bne.n	8006b82 <takeMachineID+0x5a>
		    	validInput = true; // Doğru uzunlukta veri girildi
 8006b76:	2301      	movs	r3, #1
 8006b78:	73fb      	strb	r3, [r7, #15]
		    	setupCompleted = 1;
 8006b7a:	4b3c      	ldr	r3, [pc, #240]	; (8006c6c <takeMachineID+0x144>)
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	701a      	strb	r2, [r3, #0]
 8006b80:	e053      	b.n	8006c2a <takeMachineID+0x102>
		    } else {
		    	lcd_clear();
 8006b82:	f000 fe65 	bl	8007850 <lcd_clear>
		    	HAL_Delay(50);
 8006b86:	2032      	movs	r0, #50	; 0x32
 8006b88:	f001 fb8c 	bl	80082a4 <HAL_Delay>
		    	if(dilSecim == 0) {
 8006b8c:	4b38      	ldr	r3, [pc, #224]	; (8006c70 <takeMachineID+0x148>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10a      	bne.n	8006baa <takeMachineID+0x82>
		    		lcd_print(1, 1, "BU ID FARKLI BIR");
 8006b94:	4a37      	ldr	r2, [pc, #220]	; (8006c74 <takeMachineID+0x14c>)
 8006b96:	2101      	movs	r1, #1
 8006b98:	2001      	movs	r0, #1
 8006b9a:	f000 fe2d 	bl	80077f8 <lcd_print>
		    		lcd_print(2, 1, " MAKINEDE AKTIF ");
 8006b9e:	4a36      	ldr	r2, [pc, #216]	; (8006c78 <takeMachineID+0x150>)
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	2002      	movs	r0, #2
 8006ba4:	f000 fe28 	bl	80077f8 <lcd_print>
 8006ba8:	e009      	b.n	8006bbe <takeMachineID+0x96>
		    	} else {
		    		lcd_print(1, 1, "THIS  ID CAN NOT");
 8006baa:	4a34      	ldr	r2, [pc, #208]	; (8006c7c <takeMachineID+0x154>)
 8006bac:	2101      	movs	r1, #1
 8006bae:	2001      	movs	r0, #1
 8006bb0:	f000 fe22 	bl	80077f8 <lcd_print>
		    		lcd_print(2, 1, "    BE  USED    ");
 8006bb4:	4a32      	ldr	r2, [pc, #200]	; (8006c80 <takeMachineID+0x158>)
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	2002      	movs	r0, #2
 8006bba:	f000 fe1d 	bl	80077f8 <lcd_print>
		    	}
		    	HAL_Delay(2000);
 8006bbe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006bc2:	f001 fb6f 	bl	80082a4 <HAL_Delay>
		    	loc = 0;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	60bb      	str	r3, [r7, #8]
		    	writeLoc = 5;
 8006bca:	2305      	movs	r3, #5
 8006bcc:	607b      	str	r3, [r7, #4]
		    	memset(machineID, 0, sizeof(machineID));
 8006bce:	220c      	movs	r2, #12
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	4823      	ldr	r0, [pc, #140]	; (8006c60 <takeMachineID+0x138>)
 8006bd4:	f005 fb2f 	bl	800c236 <memset>
 8006bd8:	e027      	b.n	8006c2a <takeMachineID+0x102>
		    }
		} else {
		    lcd_clear();
 8006bda:	f000 fe39 	bl	8007850 <lcd_clear>
		    if(dilSecim == 0) {
 8006bde:	4b24      	ldr	r3, [pc, #144]	; (8006c70 <takeMachineID+0x148>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10a      	bne.n	8006bfc <takeMachineID+0xd4>
		    	lcd_print(1, 1, " ID 12 KARAKTER ");
 8006be6:	4a27      	ldr	r2, [pc, #156]	; (8006c84 <takeMachineID+0x15c>)
 8006be8:	2101      	movs	r1, #1
 8006bea:	2001      	movs	r0, #1
 8006bec:	f000 fe04 	bl	80077f8 <lcd_print>
		    	lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006bf0:	4a25      	ldr	r2, [pc, #148]	; (8006c88 <takeMachineID+0x160>)
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	2002      	movs	r0, #2
 8006bf6:	f000 fdff 	bl	80077f8 <lcd_print>
 8006bfa:	e009      	b.n	8006c10 <takeMachineID+0xe8>
		    } else {
		    	lcd_print(1, 1, "MACHINE ID MUST");
 8006bfc:	4a23      	ldr	r2, [pc, #140]	; (8006c8c <takeMachineID+0x164>)
 8006bfe:	2101      	movs	r1, #1
 8006c00:	2001      	movs	r0, #1
 8006c02:	f000 fdf9 	bl	80077f8 <lcd_print>
		    	lcd_print(2, 1, "BE 12 CHARACTERS");
 8006c06:	4a22      	ldr	r2, [pc, #136]	; (8006c90 <takeMachineID+0x168>)
 8006c08:	2101      	movs	r1, #1
 8006c0a:	2002      	movs	r0, #2
 8006c0c:	f000 fdf4 	bl	80077f8 <lcd_print>
		    }
		    HAL_Delay(2000); // Kullanıcıya mesajı göster
 8006c10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006c14:	f001 fb46 	bl	80082a4 <HAL_Delay>
		    loc = 0;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60bb      	str	r3, [r7, #8]
		    writeLoc = 5;
 8006c1c:	2305      	movs	r3, #5
 8006c1e:	607b      	str	r3, [r7, #4]
		    memset(machineID, 0, sizeof(machineID));
 8006c20:	220c      	movs	r2, #12
 8006c22:	2100      	movs	r1, #0
 8006c24:	480e      	ldr	r0, [pc, #56]	; (8006c60 <takeMachineID+0x138>)
 8006c26:	f005 fb06 	bl	800c236 <memset>
	while(!validInput) {
 8006c2a:	7bfb      	ldrb	r3, [r7, #15]
 8006c2c:	f083 0301 	eor.w	r3, r3, #1
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d187      	bne.n	8006b46 <takeMachineID+0x1e>
		}
	}

	//EEPROM'a kaydetme işini burada gerçekleştir
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006c36:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006c3a:	9302      	str	r3, [sp, #8]
 8006c3c:	236e      	movs	r3, #110	; 0x6e
 8006c3e:	9301      	str	r3, [sp, #4]
 8006c40:	4b14      	ldr	r3, [pc, #80]	; (8006c94 <takeMachineID+0x16c>)
 8006c42:	9300      	str	r3, [sp, #0]
 8006c44:	236e      	movs	r3, #110	; 0x6e
 8006c46:	2200      	movs	r2, #0
 8006c48:	21a0      	movs	r1, #160	; 0xa0
 8006c4a:	4813      	ldr	r0, [pc, #76]	; (8006c98 <takeMachineID+0x170>)
 8006c4c:	f002 fbb4 	bl	80093b8 <HAL_I2C_Mem_Write>
	HAL_Delay(1200);
 8006c50:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006c54:	f001 fb26 	bl	80082a4 <HAL_Delay>
}
 8006c58:	bf00      	nop
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	200001a4 	.word	0x200001a4
 8006c64:	20000004 	.word	0x20000004
 8006c68:	2000032c 	.word	0x2000032c
 8006c6c:	200001d8 	.word	0x200001d8
 8006c70:	20000221 	.word	0x20000221
 8006c74:	0800d8a4 	.word	0x0800d8a4
 8006c78:	0800d8b8 	.word	0x0800d8b8
 8006c7c:	0800d8cc 	.word	0x0800d8cc
 8006c80:	0800d8e0 	.word	0x0800d8e0
 8006c84:	0800d8f4 	.word	0x0800d8f4
 8006c88:	0800d908 	.word	0x0800d908
 8006c8c:	0800d91c 	.word	0x0800d91c
 8006c90:	0800d92c 	.word	0x0800d92c
 8006c94:	2000012c 	.word	0x2000012c
 8006c98:	20000290 	.word	0x20000290

08006c9c <takeWifiSSID>:

void takeWifiSSID() {
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b088      	sub	sp, #32
 8006ca0:	af04      	add	r7, sp, #16
    bool validInput = false;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]

    int loc = 0;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8006caa:	2307      	movs	r3, #7
 8006cac:	607b      	str	r3, [r7, #4]

    memset(wifiSSID, 0, sizeof(wifiSSID));
 8006cae:	2214      	movs	r2, #20
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	482d      	ldr	r0, [pc, #180]	; (8006d68 <takeWifiSSID+0xcc>)
 8006cb4:	f005 fabf 	bl	800c236 <memset>

    while(!validInput) {
 8006cb8:	e03b      	b.n	8006d32 <takeWifiSSID+0x96>
        lcd_clear();
 8006cba:	f000 fdc9 	bl	8007850 <lcd_clear>

        saveCharacter(loc, writeLoc, wifiSSID, ssidStartPos, 'S');
 8006cbe:	4b2b      	ldr	r3, [pc, #172]	; (8006d6c <takeWifiSSID+0xd0>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2253      	movs	r2, #83	; 0x53
 8006cc4:	9200      	str	r2, [sp, #0]
 8006cc6:	4a28      	ldr	r2, [pc, #160]	; (8006d68 <takeWifiSSID+0xcc>)
 8006cc8:	6879      	ldr	r1, [r7, #4]
 8006cca:	68b8      	ldr	r0, [r7, #8]
 8006ccc:	f000 fa66 	bl	800719c <saveCharacter>

        if (strlen(wifiSSID) <= 20) {
 8006cd0:	4825      	ldr	r0, [pc, #148]	; (8006d68 <takeWifiSSID+0xcc>)
 8006cd2:	f7f9 faa7 	bl	8000224 <strlen>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b14      	cmp	r3, #20
 8006cda:	d802      	bhi.n	8006ce2 <takeWifiSSID+0x46>
            validInput = true; // Uygun uzunlukta veri girildi
 8006cdc:	2301      	movs	r3, #1
 8006cde:	73fb      	strb	r3, [r7, #15]
 8006ce0:	e027      	b.n	8006d32 <takeWifiSSID+0x96>
        } else {
            lcd_clear();
 8006ce2:	f000 fdb5 	bl	8007850 <lcd_clear>
            if(dilSecim == 0) {
 8006ce6:	4b22      	ldr	r3, [pc, #136]	; (8006d70 <takeWifiSSID+0xd4>)
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10a      	bne.n	8006d04 <takeWifiSSID+0x68>
            	lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006cee:	4a21      	ldr	r2, [pc, #132]	; (8006d74 <takeWifiSSID+0xd8>)
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	2001      	movs	r0, #1
 8006cf4:	f000 fd80 	bl	80077f8 <lcd_print>
            	lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8006cf8:	4a1f      	ldr	r2, [pc, #124]	; (8006d78 <takeWifiSSID+0xdc>)
 8006cfa:	2101      	movs	r1, #1
 8006cfc:	2002      	movs	r0, #2
 8006cfe:	f000 fd7b 	bl	80077f8 <lcd_print>
 8006d02:	e009      	b.n	8006d18 <takeWifiSSID+0x7c>
            } else {
            	lcd_print(1, 1, "SSID CANT EXCEED");
 8006d04:	4a1d      	ldr	r2, [pc, #116]	; (8006d7c <takeWifiSSID+0xe0>)
 8006d06:	2101      	movs	r1, #1
 8006d08:	2001      	movs	r0, #1
 8006d0a:	f000 fd75 	bl	80077f8 <lcd_print>
            	lcd_print(2, 1, " 20 CHARACTERS ");
 8006d0e:	4a1c      	ldr	r2, [pc, #112]	; (8006d80 <takeWifiSSID+0xe4>)
 8006d10:	2101      	movs	r1, #1
 8006d12:	2002      	movs	r0, #2
 8006d14:	f000 fd70 	bl	80077f8 <lcd_print>
            }
            HAL_Delay(2000); // Kullanıcıya mesajı göster
 8006d18:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006d1c:	f001 fac2 	bl	80082a4 <HAL_Delay>
            // Uzunluğu sıfırla ve yeniden dene
            loc = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	60bb      	str	r3, [r7, #8]
            writeLoc = 7;
 8006d24:	2307      	movs	r3, #7
 8006d26:	607b      	str	r3, [r7, #4]
            memset(wifiSSID, 0, sizeof(wifiSSID));
 8006d28:	2214      	movs	r2, #20
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	480e      	ldr	r0, [pc, #56]	; (8006d68 <takeWifiSSID+0xcc>)
 8006d2e:	f005 fa82 	bl	800c236 <memset>
    while(!validInput) {
 8006d32:	7bfb      	ldrb	r3, [r7, #15]
 8006d34:	f083 0301 	eor.w	r3, r3, #1
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1bd      	bne.n	8006cba <takeWifiSSID+0x1e>
        }
    }

    // EEPROM'a kaydetme işini burada gerçekleştir
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006d3e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006d42:	9302      	str	r3, [sp, #8]
 8006d44:	236e      	movs	r3, #110	; 0x6e
 8006d46:	9301      	str	r3, [sp, #4]
 8006d48:	4b0e      	ldr	r3, [pc, #56]	; (8006d84 <takeWifiSSID+0xe8>)
 8006d4a:	9300      	str	r3, [sp, #0]
 8006d4c:	236e      	movs	r3, #110	; 0x6e
 8006d4e:	2200      	movs	r2, #0
 8006d50:	21a0      	movs	r1, #160	; 0xa0
 8006d52:	480d      	ldr	r0, [pc, #52]	; (8006d88 <takeWifiSSID+0xec>)
 8006d54:	f002 fb30 	bl	80093b8 <HAL_I2C_Mem_Write>
	HAL_Delay(1200);
 8006d58:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006d5c:	f001 faa2 	bl	80082a4 <HAL_Delay>
}
 8006d60:	bf00      	nop
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	200001b0 	.word	0x200001b0
 8006d6c:	20000008 	.word	0x20000008
 8006d70:	20000221 	.word	0x20000221
 8006d74:	0800d940 	.word	0x0800d940
 8006d78:	0800d954 	.word	0x0800d954
 8006d7c:	0800d968 	.word	0x0800d968
 8006d80:	0800d97c 	.word	0x0800d97c
 8006d84:	2000012c 	.word	0x2000012c
 8006d88:	20000290 	.word	0x20000290

08006d8c <takeWifiPass>:

void takeWifiPass() {
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b088      	sub	sp, #32
 8006d90:	af04      	add	r7, sp, #16
    bool validInput = false;
 8006d92:	2300      	movs	r3, #0
 8006d94:	73fb      	strb	r3, [r7, #15]

    int loc = 0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8006d9a:	2307      	movs	r3, #7
 8006d9c:	607b      	str	r3, [r7, #4]

    memset(wifiPass, 0, sizeof(wifiPass));
 8006d9e:	2214      	movs	r2, #20
 8006da0:	2100      	movs	r1, #0
 8006da2:	482d      	ldr	r0, [pc, #180]	; (8006e58 <takeWifiPass+0xcc>)
 8006da4:	f005 fa47 	bl	800c236 <memset>

    while(!validInput) {
 8006da8:	e03b      	b.n	8006e22 <takeWifiPass+0x96>
        lcd_clear();
 8006daa:	f000 fd51 	bl	8007850 <lcd_clear>

        saveCharacter(loc, writeLoc, wifiPass, passStartPos, 'P');
 8006dae:	4b2b      	ldr	r3, [pc, #172]	; (8006e5c <takeWifiPass+0xd0>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	2250      	movs	r2, #80	; 0x50
 8006db4:	9200      	str	r2, [sp, #0]
 8006db6:	4a28      	ldr	r2, [pc, #160]	; (8006e58 <takeWifiPass+0xcc>)
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	68b8      	ldr	r0, [r7, #8]
 8006dbc:	f000 f9ee 	bl	800719c <saveCharacter>

        if (strlen(wifiPass) <= 20) {
 8006dc0:	4825      	ldr	r0, [pc, #148]	; (8006e58 <takeWifiPass+0xcc>)
 8006dc2:	f7f9 fa2f 	bl	8000224 <strlen>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b14      	cmp	r3, #20
 8006dca:	d802      	bhi.n	8006dd2 <takeWifiPass+0x46>
            validInput = true; // Uygun uzunlukta veri girildi
 8006dcc:	2301      	movs	r3, #1
 8006dce:	73fb      	strb	r3, [r7, #15]
 8006dd0:	e027      	b.n	8006e22 <takeWifiPass+0x96>
        } else {
            lcd_clear();
 8006dd2:	f000 fd3d 	bl	8007850 <lcd_clear>
            if(dilSecim == 0) {
 8006dd6:	4b22      	ldr	r3, [pc, #136]	; (8006e60 <takeWifiPass+0xd4>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d10a      	bne.n	8006df4 <takeWifiPass+0x68>
            	lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006dde:	4a21      	ldr	r2, [pc, #132]	; (8006e64 <takeWifiPass+0xd8>)
 8006de0:	2101      	movs	r1, #1
 8006de2:	2001      	movs	r0, #1
 8006de4:	f000 fd08 	bl	80077f8 <lcd_print>
            	lcd_print(2, 1, "FAZLA PASS OLMAZ");
 8006de8:	4a1f      	ldr	r2, [pc, #124]	; (8006e68 <takeWifiPass+0xdc>)
 8006dea:	2101      	movs	r1, #1
 8006dec:	2002      	movs	r0, #2
 8006dee:	f000 fd03 	bl	80077f8 <lcd_print>
 8006df2:	e009      	b.n	8006e08 <takeWifiPass+0x7c>
            } else {
            	lcd_print(1, 1, "PASS CANT EXCEED");
 8006df4:	4a1d      	ldr	r2, [pc, #116]	; (8006e6c <takeWifiPass+0xe0>)
 8006df6:	2101      	movs	r1, #1
 8006df8:	2001      	movs	r0, #1
 8006dfa:	f000 fcfd 	bl	80077f8 <lcd_print>
            	lcd_print(2, 1, " 20 CHARACTERS ");
 8006dfe:	4a1c      	ldr	r2, [pc, #112]	; (8006e70 <takeWifiPass+0xe4>)
 8006e00:	2101      	movs	r1, #1
 8006e02:	2002      	movs	r0, #2
 8006e04:	f000 fcf8 	bl	80077f8 <lcd_print>
            }
            HAL_Delay(2000); // Kullanıcıya mesajı göster
 8006e08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006e0c:	f001 fa4a 	bl	80082a4 <HAL_Delay>
            // Uzunluğu sıfırla ve yeniden dene
            loc = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	60bb      	str	r3, [r7, #8]
            writeLoc = 7;
 8006e14:	2307      	movs	r3, #7
 8006e16:	607b      	str	r3, [r7, #4]
            memset(wifiPass, 0, sizeof(wifiPass));
 8006e18:	2214      	movs	r2, #20
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	480e      	ldr	r0, [pc, #56]	; (8006e58 <takeWifiPass+0xcc>)
 8006e1e:	f005 fa0a 	bl	800c236 <memset>
    while(!validInput) {
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
 8006e24:	f083 0301 	eor.w	r3, r3, #1
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1bd      	bne.n	8006daa <takeWifiPass+0x1e>
        }
    }

    // EEPROM'a kaydetme işini burada gerçekleştir
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006e2e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006e32:	9302      	str	r3, [sp, #8]
 8006e34:	236e      	movs	r3, #110	; 0x6e
 8006e36:	9301      	str	r3, [sp, #4]
 8006e38:	4b0e      	ldr	r3, [pc, #56]	; (8006e74 <takeWifiPass+0xe8>)
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	236e      	movs	r3, #110	; 0x6e
 8006e3e:	2200      	movs	r2, #0
 8006e40:	21a0      	movs	r1, #160	; 0xa0
 8006e42:	480d      	ldr	r0, [pc, #52]	; (8006e78 <takeWifiPass+0xec>)
 8006e44:	f002 fab8 	bl	80093b8 <HAL_I2C_Mem_Write>
	HAL_Delay(1200);
 8006e48:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006e4c:	f001 fa2a 	bl	80082a4 <HAL_Delay>
}
 8006e50:	bf00      	nop
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	200001c4 	.word	0x200001c4
 8006e5c:	2000000c 	.word	0x2000000c
 8006e60:	20000221 	.word	0x20000221
 8006e64:	0800d940 	.word	0x0800d940
 8006e68:	0800d98c 	.word	0x0800d98c
 8006e6c:	0800d9a0 	.word	0x0800d9a0
 8006e70:	0800d97c 	.word	0x0800d97c
 8006e74:	2000012c 	.word	0x2000012c
 8006e78:	20000290 	.word	0x20000290

08006e7c <mergeData>:

char* mergeData() {
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b09c      	sub	sp, #112	; 0x70
 8006e80:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 8006e82:	2300      	movs	r3, #0
 8006e84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006e8a:	2228      	movs	r2, #40	; 0x28
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f005 f9d1 	bl	800c236 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8006e94:	4b67      	ldr	r3, [pc, #412]	; (8007034 <mergeData+0x1b8>)
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	713b      	strb	r3, [r7, #4]
 8006e9a:	4b67      	ldr	r3, [pc, #412]	; (8007038 <mergeData+0x1bc>)
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	717b      	strb	r3, [r7, #5]
 8006ea0:	4b66      	ldr	r3, [pc, #408]	; (800703c <mergeData+0x1c0>)
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	71bb      	strb	r3, [r7, #6]
 8006ea6:	4b66      	ldr	r3, [pc, #408]	; (8007040 <mergeData+0x1c4>)
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	71fb      	strb	r3, [r7, #7]
 8006eac:	4b65      	ldr	r3, [pc, #404]	; (8007044 <mergeData+0x1c8>)
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	723b      	strb	r3, [r7, #8]
 8006eb2:	4b65      	ldr	r3, [pc, #404]	; (8007048 <mergeData+0x1cc>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	727b      	strb	r3, [r7, #9]
 8006eb8:	4b64      	ldr	r3, [pc, #400]	; (800704c <mergeData+0x1d0>)
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	72bb      	strb	r3, [r7, #10]
 8006ebe:	4b64      	ldr	r3, [pc, #400]	; (8007050 <mergeData+0x1d4>)
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	72fb      	strb	r3, [r7, #11]
 8006ec4:	4b63      	ldr	r3, [pc, #396]	; (8007054 <mergeData+0x1d8>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	733b      	strb	r3, [r7, #12]
 8006eca:	4b63      	ldr	r3, [pc, #396]	; (8007058 <mergeData+0x1dc>)
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	737b      	strb	r3, [r7, #13]
 8006ed0:	4b62      	ldr	r3, [pc, #392]	; (800705c <mergeData+0x1e0>)
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	73bb      	strb	r3, [r7, #14]
 8006ed6:	4b62      	ldr	r3, [pc, #392]	; (8007060 <mergeData+0x1e4>)
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	73fb      	strb	r3, [r7, #15]
 8006edc:	4b61      	ldr	r3, [pc, #388]	; (8007064 <mergeData+0x1e8>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	743b      	strb	r3, [r7, #16]
 8006ee2:	4b61      	ldr	r3, [pc, #388]	; (8007068 <mergeData+0x1ec>)
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	747b      	strb	r3, [r7, #17]
 8006ee8:	4b60      	ldr	r3, [pc, #384]	; (800706c <mergeData+0x1f0>)
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	74bb      	strb	r3, [r7, #18]
 8006eee:	4b60      	ldr	r3, [pc, #384]	; (8007070 <mergeData+0x1f4>)
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	74fb      	strb	r3, [r7, #19]
 8006ef4:	4b5f      	ldr	r3, [pc, #380]	; (8007074 <mergeData+0x1f8>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	753b      	strb	r3, [r7, #20]
 8006efa:	4b5f      	ldr	r3, [pc, #380]	; (8007078 <mergeData+0x1fc>)
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	757b      	strb	r3, [r7, #21]
 8006f00:	4b5e      	ldr	r3, [pc, #376]	; (800707c <mergeData+0x200>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	75bb      	strb	r3, [r7, #22]
 8006f06:	4b5e      	ldr	r3, [pc, #376]	; (8007080 <mergeData+0x204>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	75fb      	strb	r3, [r7, #23]
 8006f0c:	4b5d      	ldr	r3, [pc, #372]	; (8007084 <mergeData+0x208>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	763b      	strb	r3, [r7, #24]
 8006f12:	4b5d      	ldr	r3, [pc, #372]	; (8007088 <mergeData+0x20c>)
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	767b      	strb	r3, [r7, #25]
 8006f18:	4b5c      	ldr	r3, [pc, #368]	; (800708c <mergeData+0x210>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	76bb      	strb	r3, [r7, #26]
 8006f1e:	4b5c      	ldr	r3, [pc, #368]	; (8007090 <mergeData+0x214>)
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	76fb      	strb	r3, [r7, #27]
 8006f24:	4b5b      	ldr	r3, [pc, #364]	; (8007094 <mergeData+0x218>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	773b      	strb	r3, [r7, #28]
 8006f2a:	4b5b      	ldr	r3, [pc, #364]	; (8007098 <mergeData+0x21c>)
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	777b      	strb	r3, [r7, #29]
 8006f30:	4b5a      	ldr	r3, [pc, #360]	; (800709c <mergeData+0x220>)
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	77bb      	strb	r3, [r7, #30]
 8006f36:	4b5a      	ldr	r3, [pc, #360]	; (80070a0 <mergeData+0x224>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	77fb      	strb	r3, [r7, #31]
 8006f3c:	4b59      	ldr	r3, [pc, #356]	; (80070a4 <mergeData+0x228>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	f887 3020 	strb.w	r3, [r7, #32]
 8006f44:	4b58      	ldr	r3, [pc, #352]	; (80070a8 <mergeData+0x22c>)
 8006f46:	781b      	ldrb	r3, [r3, #0]
 8006f48:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8006f4c:	4b57      	ldr	r3, [pc, #348]	; (80070ac <mergeData+0x230>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006f54:	4b56      	ldr	r3, [pc, #344]	; (80070b0 <mergeData+0x234>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f5c:	4b55      	ldr	r3, [pc, #340]	; (80070b4 <mergeData+0x238>)
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8006f64:	4b54      	ldr	r3, [pc, #336]	; (80070b8 <mergeData+0x23c>)
 8006f66:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8006f6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 8006f6e:	4b52      	ldr	r3, [pc, #328]	; (80070b8 <mergeData+0x23c>)
 8006f70:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8006f74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 8006f78:	4b4f      	ldr	r3, [pc, #316]	; (80070b8 <mergeData+0x23c>)
 8006f7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8006f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 8006f82:	4b4d      	ldr	r3, [pc, #308]	; (80070b8 <mergeData+0x23c>)
 8006f84:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8006f88:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 8006f8c:	4b4a      	ldr	r3, [pc, #296]	; (80070b8 <mergeData+0x23c>)
 8006f8e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8006f92:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 8006f96:	4b48      	ldr	r3, [pc, #288]	; (80070b8 <mergeData+0x23c>)
 8006f98:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8006f9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 8006fa0:	4b45      	ldr	r3, [pc, #276]	; (80070b8 <mergeData+0x23c>)
 8006fa2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8006fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 8006faa:	4b43      	ldr	r3, [pc, #268]	; (80070b8 <mergeData+0x23c>)
 8006fac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8006fb0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 8006fb4:	4b40      	ldr	r3, [pc, #256]	; (80070b8 <mergeData+0x23c>)
 8006fb6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8006fba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 8006fbe:	4b3e      	ldr	r3, [pc, #248]	; (80070b8 <mergeData+0x23c>)
 8006fc0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8006fc4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006fc8:	2306      	movs	r3, #6
 8006fca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8006fce:	2300      	movs	r3, #0
 8006fd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fd2:	e015      	b.n	8007000 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 8006fd4:	1d3a      	adds	r2, r7, #4
 8006fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fd8:	4413      	add	r3, r2
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	461a      	mov	r2, r3
 8006fde:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006fe2:	4936      	ldr	r1, [pc, #216]	; (80070bc <mergeData+0x240>)
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f005 f89f 	bl	800c128 <siprintf>
	    strcat(combinedString, temp);
 8006fea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006fee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f005 f8f9 	bl	800c1ec <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8006ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ffc:	3301      	adds	r3, #1
 8006ffe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007000:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007002:	2b2b      	cmp	r3, #43	; 0x2b
 8007004:	d9e6      	bls.n	8006fd4 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8007006:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800700a:	4618      	mov	r0, r3
 800700c:	f7f9 f90a 	bl	8000224 <strlen>
 8007010:	4603      	mov	r3, r0
 8007012:	3301      	adds	r3, #1
 8007014:	4618      	mov	r0, r3
 8007016:	f004 ff9f 	bl	800bf58 <malloc>
 800701a:	4603      	mov	r3, r0
 800701c:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 800701e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007022:	4619      	mov	r1, r3
 8007024:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007026:	f005 f94b 	bl	800c2c0 <strcpy>
	return result;
 800702a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 800702c:	4618      	mov	r0, r3
 800702e:	3770      	adds	r7, #112	; 0x70
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	2000020f 	.word	0x2000020f
 8007038:	20000201 	.word	0x20000201
 800703c:	20000204 	.word	0x20000204
 8007040:	20000205 	.word	0x20000205
 8007044:	20000206 	.word	0x20000206
 8007048:	2000020d 	.word	0x2000020d
 800704c:	20000207 	.word	0x20000207
 8007050:	20000208 	.word	0x20000208
 8007054:	2000020c 	.word	0x2000020c
 8007058:	20000209 	.word	0x20000209
 800705c:	20000219 	.word	0x20000219
 8007060:	2000020a 	.word	0x2000020a
 8007064:	2000021a 	.word	0x2000021a
 8007068:	2000020b 	.word	0x2000020b
 800706c:	2000021b 	.word	0x2000021b
 8007070:	2000020e 	.word	0x2000020e
 8007074:	20000210 	.word	0x20000210
 8007078:	20000211 	.word	0x20000211
 800707c:	20000212 	.word	0x20000212
 8007080:	20000213 	.word	0x20000213
 8007084:	20000214 	.word	0x20000214
 8007088:	20000215 	.word	0x20000215
 800708c:	20000216 	.word	0x20000216
 8007090:	20000217 	.word	0x20000217
 8007094:	20000218 	.word	0x20000218
 8007098:	2000021c 	.word	0x2000021c
 800709c:	2000021e 	.word	0x2000021e
 80070a0:	200001fd 	.word	0x200001fd
 80070a4:	200001fe 	.word	0x200001fe
 80070a8:	20000000 	.word	0x20000000
 80070ac:	20000001 	.word	0x20000001
 80070b0:	200001ff 	.word	0x200001ff
 80070b4:	20000221 	.word	0x20000221
 80070b8:	2000012c 	.word	0x2000012c
 80070bc:	0800d9b4 	.word	0x0800d9b4

080070c0 <convertAndSendData>:

void convertAndSendData() {
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 80070c6:	4b1a      	ldr	r3, [pc, #104]	; (8007130 <convertAndSendData+0x70>)
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d10a      	bne.n	80070e4 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 80070ce:	4a19      	ldr	r2, [pc, #100]	; (8007134 <convertAndSendData+0x74>)
 80070d0:	2101      	movs	r1, #1
 80070d2:	2001      	movs	r0, #1
 80070d4:	f000 fb90 	bl	80077f8 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 80070d8:	4a17      	ldr	r2, [pc, #92]	; (8007138 <convertAndSendData+0x78>)
 80070da:	2101      	movs	r1, #1
 80070dc:	2002      	movs	r0, #2
 80070de:	f000 fb8b 	bl	80077f8 <lcd_print>
 80070e2:	e009      	b.n	80070f8 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 80070e4:	4a15      	ldr	r2, [pc, #84]	; (800713c <convertAndSendData+0x7c>)
 80070e6:	2101      	movs	r1, #1
 80070e8:	2001      	movs	r0, #1
 80070ea:	f000 fb85 	bl	80077f8 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 80070ee:	4a14      	ldr	r2, [pc, #80]	; (8007140 <convertAndSendData+0x80>)
 80070f0:	2101      	movs	r1, #1
 80070f2:	2002      	movs	r0, #2
 80070f4:	f000 fb80 	bl	80077f8 <lcd_print>
	}
	for(int i=0; i<2; i++) {
 80070f8:	2300      	movs	r3, #0
 80070fa:	607b      	str	r3, [r7, #4]
 80070fc:	e00a      	b.n	8007114 <convertAndSendData+0x54>
		sendMachineData(&huart1, machineID, mergeData());
 80070fe:	f7ff febd 	bl	8006e7c <mergeData>
 8007102:	4603      	mov	r3, r0
 8007104:	461a      	mov	r2, r3
 8007106:	490f      	ldr	r1, [pc, #60]	; (8007144 <convertAndSendData+0x84>)
 8007108:	480f      	ldr	r0, [pc, #60]	; (8007148 <convertAndSendData+0x88>)
 800710a:	f7f9 fbef 	bl	80008ec <sendMachineData>
	for(int i=0; i<2; i++) {
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	3301      	adds	r3, #1
 8007112:	607b      	str	r3, [r7, #4]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2b01      	cmp	r3, #1
 8007118:	ddf1      	ble.n	80070fe <convertAndSendData+0x3e>
	}
	HAL_Delay(500);
 800711a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800711e:	f001 f8c1 	bl	80082a4 <HAL_Delay>
	lcd_clear();
 8007122:	f000 fb95 	bl	8007850 <lcd_clear>
}
 8007126:	bf00      	nop
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	20000221 	.word	0x20000221
 8007134:	0800d9b8 	.word	0x0800d9b8
 8007138:	0800d9cc 	.word	0x0800d9cc
 800713c:	0800d9e0 	.word	0x0800d9e0
 8007140:	0800d9f4 	.word	0x0800d9f4
 8007144:	200001a4 	.word	0x200001a4
 8007148:	2000032c 	.word	0x2000032c

0800714c <iotSetup>:

void iotSetup() {
 800714c:	b580      	push	{r7, lr}
 800714e:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8007150:	4b0e      	ldr	r3, [pc, #56]	; (800718c <iotSetup+0x40>)
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00b      	beq.n	8007170 <iotSetup+0x24>
		if(wifiPass[0] == '\0') {
			takeWifiPass();
		}
		HAL_Delay(500);*/

		takeMachineID();
 8007158:	f7ff fce6 	bl	8006b28 <takeMachineID>
		HAL_Delay(10);
 800715c:	200a      	movs	r0, #10
 800715e:	f001 f8a1 	bl	80082a4 <HAL_Delay>
		takeWifiSSID();
 8007162:	f7ff fd9b 	bl	8006c9c <takeWifiSSID>
		HAL_Delay(10);
 8007166:	200a      	movs	r0, #10
 8007168:	f001 f89c 	bl	80082a4 <HAL_Delay>
		takeWifiPass();
 800716c:	f7ff fe0e 	bl	8006d8c <takeWifiPass>
	}

	ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8007170:	4a07      	ldr	r2, [pc, #28]	; (8007190 <iotSetup+0x44>)
 8007172:	4908      	ldr	r1, [pc, #32]	; (8007194 <iotSetup+0x48>)
 8007174:	4808      	ldr	r0, [pc, #32]	; (8007198 <iotSetup+0x4c>)
 8007176:	f7f9 fb7b 	bl	8000870 <ESP8266_Init>
	HAL_Delay(500);
 800717a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800717e:	f001 f891 	bl	80082a4 <HAL_Delay>
	convertAndSendData();
 8007182:	f7ff ff9d 	bl	80070c0 <convertAndSendData>
}
 8007186:	bf00      	nop
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	2000021f 	.word	0x2000021f
 8007190:	200001c4 	.word	0x200001c4
 8007194:	200001b0 	.word	0x200001b0
 8007198:	2000032c 	.word	0x2000032c

0800719c <saveCharacter>:

void saveCharacter(int loc, int writeLoc, char *data, int startPos, char type) {
 800719c:	b580      	push	{r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
 80071a8:	603b      	str	r3, [r7, #0]
    int characterPos = 0; // Kullanıcının LCD üzerinde seçtiği karakterin pozisyonu
 80071aa:	2300      	movs	r3, #0
 80071ac:	61fb      	str	r3, [r7, #28]
    char selectedChar;

    int cursorLoc = 1;
 80071ae:	2301      	movs	r3, #1
 80071b0:	617b      	str	r3, [r7, #20]

    int page = 1; // SSID ve password için sayfa kontrolü
 80071b2:	2301      	movs	r3, #1
 80071b4:	613b      	str	r3, [r7, #16]

    lcd_clear();
 80071b6:	f000 fb4b 	bl	8007850 <lcd_clear>
    HAL_Delay(50);
 80071ba:	2032      	movs	r0, #50	; 0x32
 80071bc:	f001 f872 	bl	80082a4 <HAL_Delay>
    lcd_cursor(1);
 80071c0:	2001      	movs	r0, #1
 80071c2:	f000 fb77 	bl	80078b4 <lcd_cursor>
    if (type == 'M') {
 80071c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80071ca:	2b4d      	cmp	r3, #77	; 0x4d
 80071cc:	d104      	bne.n	80071d8 <saveCharacter+0x3c>
    	printTemplate(1, 0);
 80071ce:	2100      	movs	r1, #0
 80071d0:	2001      	movs	r0, #1
 80071d2:	f7f9 fe89 	bl	8000ee8 <printTemplate>
 80071d6:	e00a      	b.n	80071ee <saveCharacter+0x52>
    } else {
    	printTemplate(type == 'S' ? 2 : 3, page);
 80071d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80071dc:	2b53      	cmp	r3, #83	; 0x53
 80071de:	d101      	bne.n	80071e4 <saveCharacter+0x48>
 80071e0:	2302      	movs	r3, #2
 80071e2:	e000      	b.n	80071e6 <saveCharacter+0x4a>
 80071e4:	2303      	movs	r3, #3
 80071e6:	6939      	ldr	r1, [r7, #16]
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7f9 fe7d 	bl	8000ee8 <printTemplate>
    }

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80071ee:	2108      	movs	r1, #8
 80071f0:	48ad      	ldr	r0, [pc, #692]	; (80074a8 <saveCharacter+0x30c>)
 80071f2:	f001 fe27 	bl	8008e44 <HAL_GPIO_ReadPin>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b01      	cmp	r3, #1
 80071fa:	f000 815f 	beq.w	80074bc <saveCharacter+0x320>
            // Kaydetme işlemini bitir
            break;
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80071fe:	2101      	movs	r1, #1
 8007200:	48a9      	ldr	r0, [pc, #676]	; (80074a8 <saveCharacter+0x30c>)
 8007202:	f001 fe1f 	bl	8008e44 <HAL_GPIO_ReadPin>
 8007206:	4603      	mov	r3, r0
 8007208:	2b01      	cmp	r3, #1
 800720a:	d174      	bne.n	80072f6 <saveCharacter+0x15a>
        	characterPos++;
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	3301      	adds	r3, #1
 8007210:	61fb      	str	r3, [r7, #28]
        	cursorLoc++;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	3301      	adds	r3, #1
 8007216:	617b      	str	r3, [r7, #20]

        	if(type == 'M') {
 8007218:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800721c:	2b4d      	cmp	r3, #77	; 0x4d
 800721e:	d10b      	bne.n	8007238 <saveCharacter+0x9c>
        		if(cursorLoc == 10) {
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2b0a      	cmp	r3, #10
 8007224:	d102      	bne.n	800722c <saveCharacter+0x90>
        			cursorLoc = 7;
 8007226:	2307      	movs	r3, #7
 8007228:	617b      	str	r3, [r7, #20]
 800722a:	e05b      	b.n	80072e4 <saveCharacter+0x148>
        		} else if(cursorLoc == 3) {
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	2b03      	cmp	r3, #3
 8007230:	d158      	bne.n	80072e4 <saveCharacter+0x148>
        			cursorLoc = 14;
 8007232:	230e      	movs	r3, #14
 8007234:	617b      	str	r3, [r7, #20]
 8007236:	e055      	b.n	80072e4 <saveCharacter+0x148>
        		}
        	} else {
        		if(cursorLoc == 16) {
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	2b10      	cmp	r3, #16
 800723c:	d10d      	bne.n	800725a <saveCharacter+0xbe>
        		    if(type == 'S') {
 800723e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007242:	2b53      	cmp	r3, #83	; 0x53
 8007244:	d104      	bne.n	8007250 <saveCharacter+0xb4>
        		    	printTemplate(2, 2);
 8007246:	2102      	movs	r1, #2
 8007248:	2002      	movs	r0, #2
 800724a:	f7f9 fe4d 	bl	8000ee8 <printTemplate>
 800724e:	e049      	b.n	80072e4 <saveCharacter+0x148>
        		    } else {
        		    	printTemplate(3, 2);
 8007250:	2102      	movs	r1, #2
 8007252:	2003      	movs	r0, #3
 8007254:	f7f9 fe48 	bl	8000ee8 <printTemplate>
 8007258:	e044      	b.n	80072e4 <saveCharacter+0x148>
        		    }
        		} else if(cursorLoc == 32) {
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b20      	cmp	r3, #32
 800725e:	d10d      	bne.n	800727c <saveCharacter+0xe0>
        		    if(type == 'S') {
 8007260:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007264:	2b53      	cmp	r3, #83	; 0x53
 8007266:	d104      	bne.n	8007272 <saveCharacter+0xd6>
        		    	printTemplate(2, 3);
 8007268:	2103      	movs	r1, #3
 800726a:	2002      	movs	r0, #2
 800726c:	f7f9 fe3c 	bl	8000ee8 <printTemplate>
 8007270:	e038      	b.n	80072e4 <saveCharacter+0x148>
        		    } else {
        		    	printTemplate(3, 3);
 8007272:	2103      	movs	r1, #3
 8007274:	2003      	movs	r0, #3
 8007276:	f7f9 fe37 	bl	8000ee8 <printTemplate>
 800727a:	e033      	b.n	80072e4 <saveCharacter+0x148>
        		    }
        		} else if(cursorLoc == 48) {
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	2b30      	cmp	r3, #48	; 0x30
 8007280:	d10d      	bne.n	800729e <saveCharacter+0x102>
        		    if(type == 'S') {
 8007282:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007286:	2b53      	cmp	r3, #83	; 0x53
 8007288:	d104      	bne.n	8007294 <saveCharacter+0xf8>
        		    	printTemplate(2, 4);
 800728a:	2104      	movs	r1, #4
 800728c:	2002      	movs	r0, #2
 800728e:	f7f9 fe2b 	bl	8000ee8 <printTemplate>
 8007292:	e027      	b.n	80072e4 <saveCharacter+0x148>
        		    } else {
        		    	printTemplate(3, 4);
 8007294:	2104      	movs	r1, #4
 8007296:	2003      	movs	r0, #3
 8007298:	f7f9 fe26 	bl	8000ee8 <printTemplate>
 800729c:	e022      	b.n	80072e4 <saveCharacter+0x148>
        		    }
        		} else if(cursorLoc == 64) {
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	2b40      	cmp	r3, #64	; 0x40
 80072a2:	d10d      	bne.n	80072c0 <saveCharacter+0x124>
        		    if(type == 'S') {
 80072a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80072a8:	2b53      	cmp	r3, #83	; 0x53
 80072aa:	d104      	bne.n	80072b6 <saveCharacter+0x11a>
        		    	printTemplate(2, 5);
 80072ac:	2105      	movs	r1, #5
 80072ae:	2002      	movs	r0, #2
 80072b0:	f7f9 fe1a 	bl	8000ee8 <printTemplate>
 80072b4:	e016      	b.n	80072e4 <saveCharacter+0x148>
        		    } else {
        		    	printTemplate(3, 5);
 80072b6:	2105      	movs	r1, #5
 80072b8:	2003      	movs	r0, #3
 80072ba:	f7f9 fe15 	bl	8000ee8 <printTemplate>
 80072be:	e011      	b.n	80072e4 <saveCharacter+0x148>
        		    }
        		} else if(cursorLoc == 80) {
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	2b50      	cmp	r3, #80	; 0x50
 80072c4:	d10e      	bne.n	80072e4 <saveCharacter+0x148>
        		    cursorLoc = 1;
 80072c6:	2301      	movs	r3, #1
 80072c8:	617b      	str	r3, [r7, #20]

        		    if(type == 'S') {
 80072ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80072ce:	2b53      	cmp	r3, #83	; 0x53
 80072d0:	d104      	bne.n	80072dc <saveCharacter+0x140>
        		    	printTemplate(2, 1);
 80072d2:	2101      	movs	r1, #1
 80072d4:	2002      	movs	r0, #2
 80072d6:	f7f9 fe07 	bl	8000ee8 <printTemplate>
 80072da:	e003      	b.n	80072e4 <saveCharacter+0x148>
        		    } else {
        		    	printTemplate(3, 1);
 80072dc:	2101      	movs	r1, #1
 80072de:	2003      	movs	r0, #3
 80072e0:	f7f9 fe02 	bl	8000ee8 <printTemplate>
        		    }
        		}
        	}

        	lcd_gotoxy(2, cursorLoc);
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	4619      	mov	r1, r3
 80072ea:	2002      	movs	r0, #2
 80072ec:	f000 fa65 	bl	80077ba <lcd_gotoxy>
        	HAL_Delay(200); //Debouncing delay
 80072f0:	20c8      	movs	r0, #200	; 0xc8
 80072f2:	f000 ffd7 	bl	80082a4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80072f6:	2108      	movs	r1, #8
 80072f8:	486c      	ldr	r0, [pc, #432]	; (80074ac <saveCharacter+0x310>)
 80072fa:	f001 fda3 	bl	8008e44 <HAL_GPIO_ReadPin>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b01      	cmp	r3, #1
 8007302:	d176      	bne.n	80073f2 <saveCharacter+0x256>
        	characterPos--;
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	3b01      	subs	r3, #1
 8007308:	61fb      	str	r3, [r7, #28]
        	cursorLoc--;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	3b01      	subs	r3, #1
 800730e:	617b      	str	r3, [r7, #20]

        	if(type == 'M') {
 8007310:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007314:	2b4d      	cmp	r3, #77	; 0x4d
 8007316:	d10b      	bne.n	8007330 <saveCharacter+0x194>
        	    if(cursorLoc == 7) {
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	2b07      	cmp	r3, #7
 800731c:	d102      	bne.n	8007324 <saveCharacter+0x188>
        	    	cursorLoc = 10;
 800731e:	230a      	movs	r3, #10
 8007320:	617b      	str	r3, [r7, #20]
 8007322:	e05d      	b.n	80073e0 <saveCharacter+0x244>
        	    } else if(cursorLoc == 14) {
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	2b0e      	cmp	r3, #14
 8007328:	d15a      	bne.n	80073e0 <saveCharacter+0x244>
        	    	cursorLoc = 3;
 800732a:	2303      	movs	r3, #3
 800732c:	617b      	str	r3, [r7, #20]
 800732e:	e057      	b.n	80073e0 <saveCharacter+0x244>
        	    }
        	} else {
        		if(cursorLoc == 1) {
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d10f      	bne.n	8007356 <saveCharacter+0x1ba>
        			cursorLoc = 80;
 8007336:	2350      	movs	r3, #80	; 0x50
 8007338:	617b      	str	r3, [r7, #20]

        			if(type == 'S') {
 800733a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800733e:	2b53      	cmp	r3, #83	; 0x53
 8007340:	d104      	bne.n	800734c <saveCharacter+0x1b0>
        				printTemplate(2, 5);
 8007342:	2105      	movs	r1, #5
 8007344:	2002      	movs	r0, #2
 8007346:	f7f9 fdcf 	bl	8000ee8 <printTemplate>
 800734a:	e049      	b.n	80073e0 <saveCharacter+0x244>
        			} else {
        				printTemplate(3, 5);
 800734c:	2105      	movs	r1, #5
 800734e:	2003      	movs	r0, #3
 8007350:	f7f9 fdca 	bl	8000ee8 <printTemplate>
 8007354:	e044      	b.n	80073e0 <saveCharacter+0x244>
        			}
        		} else if(cursorLoc == 17) {
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2b11      	cmp	r3, #17
 800735a:	d10d      	bne.n	8007378 <saveCharacter+0x1dc>
        			if(type == 'S') {
 800735c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007360:	2b53      	cmp	r3, #83	; 0x53
 8007362:	d104      	bne.n	800736e <saveCharacter+0x1d2>
        				printTemplate(2, 1);
 8007364:	2101      	movs	r1, #1
 8007366:	2002      	movs	r0, #2
 8007368:	f7f9 fdbe 	bl	8000ee8 <printTemplate>
 800736c:	e038      	b.n	80073e0 <saveCharacter+0x244>
        			} else {
        				printTemplate(3, 1);
 800736e:	2101      	movs	r1, #1
 8007370:	2003      	movs	r0, #3
 8007372:	f7f9 fdb9 	bl	8000ee8 <printTemplate>
 8007376:	e033      	b.n	80073e0 <saveCharacter+0x244>
        			}
        		} else if(cursorLoc == 33) {
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	2b21      	cmp	r3, #33	; 0x21
 800737c:	d10d      	bne.n	800739a <saveCharacter+0x1fe>
        			if(type == 'S') {
 800737e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007382:	2b53      	cmp	r3, #83	; 0x53
 8007384:	d104      	bne.n	8007390 <saveCharacter+0x1f4>
        				printTemplate(2, 2);
 8007386:	2102      	movs	r1, #2
 8007388:	2002      	movs	r0, #2
 800738a:	f7f9 fdad 	bl	8000ee8 <printTemplate>
 800738e:	e027      	b.n	80073e0 <saveCharacter+0x244>
        			} else {
        				printTemplate(3, 2);
 8007390:	2102      	movs	r1, #2
 8007392:	2003      	movs	r0, #3
 8007394:	f7f9 fda8 	bl	8000ee8 <printTemplate>
 8007398:	e022      	b.n	80073e0 <saveCharacter+0x244>
        			}
        		} else if(cursorLoc == 49) {
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2b31      	cmp	r3, #49	; 0x31
 800739e:	d10d      	bne.n	80073bc <saveCharacter+0x220>
        			if(type == 'S') {
 80073a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80073a4:	2b53      	cmp	r3, #83	; 0x53
 80073a6:	d104      	bne.n	80073b2 <saveCharacter+0x216>
        				printTemplate(2, 3);
 80073a8:	2103      	movs	r1, #3
 80073aa:	2002      	movs	r0, #2
 80073ac:	f7f9 fd9c 	bl	8000ee8 <printTemplate>
 80073b0:	e016      	b.n	80073e0 <saveCharacter+0x244>
        			} else {
        				printTemplate(3, 3);
 80073b2:	2103      	movs	r1, #3
 80073b4:	2003      	movs	r0, #3
 80073b6:	f7f9 fd97 	bl	8000ee8 <printTemplate>
 80073ba:	e011      	b.n	80073e0 <saveCharacter+0x244>
        			}
        		} else if(cursorLoc == 65) {
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2b41      	cmp	r3, #65	; 0x41
 80073c0:	d10e      	bne.n	80073e0 <saveCharacter+0x244>
        			cursorLoc = 1;
 80073c2:	2301      	movs	r3, #1
 80073c4:	617b      	str	r3, [r7, #20]
        			if(type == 'S') {
 80073c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80073ca:	2b53      	cmp	r3, #83	; 0x53
 80073cc:	d104      	bne.n	80073d8 <saveCharacter+0x23c>
        				printTemplate(2, 4);
 80073ce:	2104      	movs	r1, #4
 80073d0:	2002      	movs	r0, #2
 80073d2:	f7f9 fd89 	bl	8000ee8 <printTemplate>
 80073d6:	e003      	b.n	80073e0 <saveCharacter+0x244>
        			} else {
        				printTemplate(3, 4);
 80073d8:	2104      	movs	r1, #4
 80073da:	2003      	movs	r0, #3
 80073dc:	f7f9 fd84 	bl	8000ee8 <printTemplate>
        			}
        		}
        	}

        	lcd_gotoxy(2, cursorLoc);
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	4619      	mov	r1, r3
 80073e6:	2002      	movs	r0, #2
 80073e8:	f000 f9e7 	bl	80077ba <lcd_gotoxy>
        	HAL_Delay(200); //Debouncing delay
 80073ec:	20c8      	movs	r0, #200	; 0xc8
 80073ee:	f000 ff59 	bl	80082a4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80073f2:	2102      	movs	r1, #2
 80073f4:	482c      	ldr	r0, [pc, #176]	; (80074a8 <saveCharacter+0x30c>)
 80073f6:	f001 fd25 	bl	8008e44 <HAL_GPIO_ReadPin>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d12a      	bne.n	8007456 <saveCharacter+0x2ba>
            // Karakteri seç ve kaydet
        	if(type == 'M') {
 8007400:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007404:	2b4d      	cmp	r3, #77	; 0x4d
 8007406:	d105      	bne.n	8007414 <saveCharacter+0x278>
        		selectedChar = idCharactersArray[characterPos];
 8007408:	4a29      	ldr	r2, [pc, #164]	; (80074b0 <saveCharacter+0x314>)
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	4413      	add	r3, r2
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	76fb      	strb	r3, [r7, #27]
 8007412:	e004      	b.n	800741e <saveCharacter+0x282>
        	} else {
        		selectedChar = charactersArray[characterPos];
 8007414:	4a27      	ldr	r2, [pc, #156]	; (80074b4 <saveCharacter+0x318>)
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	4413      	add	r3, r2
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	76fb      	strb	r3, [r7, #27]
        	}

            data[loc] = selectedChar; //machineID, SSID ya da PASS dizisine karakteri kaydet
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	4413      	add	r3, r2
 8007424:	7efa      	ldrb	r2, [r7, #27]
 8007426:	701a      	strb	r2, [r3, #0]
            eepromData[startPos + loc] = characterPos; //eepromData'ya karakteri kaydet
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	4413      	add	r3, r2
 800742e:	69fa      	ldr	r2, [r7, #28]
 8007430:	b2d1      	uxtb	r1, r2
 8007432:	4a21      	ldr	r2, [pc, #132]	; (80074b8 <saveCharacter+0x31c>)
 8007434:	54d1      	strb	r1, [r2, r3]

            loc++;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3301      	adds	r3, #1
 800743a:	60fb      	str	r3, [r7, #12]
            writeLoc++;
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	3301      	adds	r3, #1
 8007440:	60bb      	str	r3, [r7, #8]
            lcd_print_char(1, writeLoc, selectedChar);
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	b2db      	uxtb	r3, r3
 8007446:	7efa      	ldrb	r2, [r7, #27]
 8007448:	4619      	mov	r1, r3
 800744a:	2001      	movs	r0, #1
 800744c:	f000 f9e9 	bl	8007822 <lcd_print_char>
            HAL_Delay(250); // Debouncing için gecikme
 8007450:	20fa      	movs	r0, #250	; 0xfa
 8007452:	f000 ff27 	bl	80082a4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007456:	2104      	movs	r1, #4
 8007458:	4813      	ldr	r0, [pc, #76]	; (80074a8 <saveCharacter+0x30c>)
 800745a:	f001 fcf3 	bl	8008e44 <HAL_GPIO_ReadPin>
 800745e:	4603      	mov	r3, r0
 8007460:	2b01      	cmp	r3, #1
 8007462:	f47f aec4 	bne.w	80071ee <saveCharacter+0x52>
            // Son karakteri sil
            if (loc > 0) {
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	dd18      	ble.n	800749e <saveCharacter+0x302>
                loc--;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	3b01      	subs	r3, #1
 8007470:	60fb      	str	r3, [r7, #12]
                writeLoc--;
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	3b01      	subs	r3, #1
 8007476:	60bb      	str	r3, [r7, #8]
                lcd_delete_char(1, writeLoc + 1);
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	b2db      	uxtb	r3, r3
 800747c:	3301      	adds	r3, #1
 800747e:	b2db      	uxtb	r3, r3
 8007480:	4619      	mov	r1, r3
 8007482:	2001      	movs	r0, #1
 8007484:	f000 f9ee 	bl	8007864 <lcd_delete_char>
                data[loc] = '\0';
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	4413      	add	r3, r2
 800748e:	2200      	movs	r2, #0
 8007490:	701a      	strb	r2, [r3, #0]
                eepromData[startPos + loc] = '\0';
 8007492:	683a      	ldr	r2, [r7, #0]
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4413      	add	r3, r2
 8007498:	4a07      	ldr	r2, [pc, #28]	; (80074b8 <saveCharacter+0x31c>)
 800749a:	2100      	movs	r1, #0
 800749c:	54d1      	strb	r1, [r2, r3]
            }
            HAL_Delay(250); // Debouncing için gecikme
 800749e:	20fa      	movs	r0, #250	; 0xfa
 80074a0:	f000 ff00 	bl	80082a4 <HAL_Delay>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80074a4:	e6a3      	b.n	80071ee <saveCharacter+0x52>
 80074a6:	bf00      	nop
 80074a8:	40010800 	.word	0x40010800
 80074ac:	40011000 	.word	0x40011000
 80074b0:	20000024 	.word	0x20000024
 80074b4:	20000030 	.word	0x20000030
 80074b8:	2000012c 	.word	0x2000012c
            break;
 80074bc:	bf00      	nop
        }
    }
}
 80074be:	bf00      	nop
 80074c0:	3720      	adds	r7, #32
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop

080074c8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af02      	add	r7, sp, #8
 80074ce:	4603      	mov	r3, r0
 80074d0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80074d2:	79fb      	ldrb	r3, [r7, #7]
 80074d4:	f023 030f 	bic.w	r3, r3, #15
 80074d8:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80074da:	79fb      	ldrb	r3, [r7, #7]
 80074dc:	011b      	lsls	r3, r3, #4
 80074de:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80074e0:	7b7b      	ldrb	r3, [r7, #13]
 80074e2:	f043 030c 	orr.w	r3, r3, #12
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80074ea:	7b7b      	ldrb	r3, [r7, #13]
 80074ec:	f043 0308 	orr.w	r3, r3, #8
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80074f4:	7b3b      	ldrb	r3, [r7, #12]
 80074f6:	f043 030c 	orr.w	r3, r3, #12
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80074fe:	7b3b      	ldrb	r3, [r7, #12]
 8007500:	f043 0308 	orr.w	r3, r3, #8
 8007504:	b2db      	uxtb	r3, r3
 8007506:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007508:	bf00      	nop
 800750a:	4825      	ldr	r0, [pc, #148]	; (80075a0 <lcd_send_cmd+0xd8>)
 800750c:	f002 fac3 	bl	8009a96 <HAL_I2C_GetError>
 8007510:	4603      	mov	r3, r0
 8007512:	2b04      	cmp	r3, #4
 8007514:	d0f9      	beq.n	800750a <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007516:	bf00      	nop
 8007518:	4821      	ldr	r0, [pc, #132]	; (80075a0 <lcd_send_cmd+0xd8>)
 800751a:	f002 faaf 	bl	8009a7c <HAL_I2C_GetState>
 800751e:	4603      	mov	r3, r0
 8007520:	2b20      	cmp	r3, #32
 8007522:	d1f9      	bne.n	8007518 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007524:	4b1f      	ldr	r3, [pc, #124]	; (80075a4 <lcd_send_cmd+0xdc>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d116      	bne.n	800755a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800752c:	2300      	movs	r3, #0
 800752e:	73fb      	strb	r3, [r7, #15]
 8007530:	e00f      	b.n	8007552 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	3310      	adds	r3, #16
 8007536:	443b      	add	r3, r7
 8007538:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	f022 0208 	bic.w	r2, r2, #8
 8007542:	b2d2      	uxtb	r2, r2
 8007544:	3310      	adds	r3, #16
 8007546:	443b      	add	r3, r7
 8007548:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800754c:	7bfb      	ldrb	r3, [r7, #15]
 800754e:	3301      	adds	r3, #1
 8007550:	73fb      	strb	r3, [r7, #15]
 8007552:	7bfb      	ldrb	r3, [r7, #15]
 8007554:	2b03      	cmp	r3, #3
 8007556:	d9ec      	bls.n	8007532 <lcd_send_cmd+0x6a>
 8007558:	e015      	b.n	8007586 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800755a:	2300      	movs	r3, #0
 800755c:	73bb      	strb	r3, [r7, #14]
 800755e:	e00f      	b.n	8007580 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007560:	7bbb      	ldrb	r3, [r7, #14]
 8007562:	3310      	adds	r3, #16
 8007564:	443b      	add	r3, r7
 8007566:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	f042 0208 	orr.w	r2, r2, #8
 8007570:	b2d2      	uxtb	r2, r2
 8007572:	3310      	adds	r3, #16
 8007574:	443b      	add	r3, r7
 8007576:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800757a:	7bbb      	ldrb	r3, [r7, #14]
 800757c:	3301      	adds	r3, #1
 800757e:	73bb      	strb	r3, [r7, #14]
 8007580:	7bbb      	ldrb	r3, [r7, #14]
 8007582:	2b03      	cmp	r3, #3
 8007584:	d9ec      	bls.n	8007560 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007586:	f107 0208 	add.w	r2, r7, #8
 800758a:	2364      	movs	r3, #100	; 0x64
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	2304      	movs	r3, #4
 8007590:	214e      	movs	r1, #78	; 0x4e
 8007592:	4803      	ldr	r0, [pc, #12]	; (80075a0 <lcd_send_cmd+0xd8>)
 8007594:	f001 fe12 	bl	80091bc <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007598:	bf00      	nop
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	20000290 	.word	0x20000290
 80075a4:	20000264 	.word	0x20000264

080075a8 <lcd_send_data>:

void lcd_send_data (char data) {
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	4603      	mov	r3, r0
 80075b0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80075b2:	79fb      	ldrb	r3, [r7, #7]
 80075b4:	f023 030f 	bic.w	r3, r3, #15
 80075b8:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 80075ba:	79fb      	ldrb	r3, [r7, #7]
 80075bc:	011b      	lsls	r3, r3, #4
 80075be:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80075c0:	7b7b      	ldrb	r3, [r7, #13]
 80075c2:	f043 030d 	orr.w	r3, r3, #13
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80075ca:	7b7b      	ldrb	r3, [r7, #13]
 80075cc:	f043 0309 	orr.w	r3, r3, #9
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80075d4:	7b3b      	ldrb	r3, [r7, #12]
 80075d6:	f043 030d 	orr.w	r3, r3, #13
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80075de:	7b3b      	ldrb	r3, [r7, #12]
 80075e0:	f043 0309 	orr.w	r3, r3, #9
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80075e8:	bf00      	nop
 80075ea:	4825      	ldr	r0, [pc, #148]	; (8007680 <lcd_send_data+0xd8>)
 80075ec:	f002 fa53 	bl	8009a96 <HAL_I2C_GetError>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b04      	cmp	r3, #4
 80075f4:	d0f9      	beq.n	80075ea <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80075f6:	bf00      	nop
 80075f8:	4821      	ldr	r0, [pc, #132]	; (8007680 <lcd_send_data+0xd8>)
 80075fa:	f002 fa3f 	bl	8009a7c <HAL_I2C_GetState>
 80075fe:	4603      	mov	r3, r0
 8007600:	2b20      	cmp	r3, #32
 8007602:	d1f9      	bne.n	80075f8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007604:	4b1f      	ldr	r3, [pc, #124]	; (8007684 <lcd_send_data+0xdc>)
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d116      	bne.n	800763a <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800760c:	2300      	movs	r3, #0
 800760e:	73fb      	strb	r3, [r7, #15]
 8007610:	e00f      	b.n	8007632 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007612:	7bfb      	ldrb	r3, [r7, #15]
 8007614:	3310      	adds	r3, #16
 8007616:	443b      	add	r3, r7
 8007618:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800761c:	7bfb      	ldrb	r3, [r7, #15]
 800761e:	f022 0208 	bic.w	r2, r2, #8
 8007622:	b2d2      	uxtb	r2, r2
 8007624:	3310      	adds	r3, #16
 8007626:	443b      	add	r3, r7
 8007628:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800762c:	7bfb      	ldrb	r3, [r7, #15]
 800762e:	3301      	adds	r3, #1
 8007630:	73fb      	strb	r3, [r7, #15]
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	2b03      	cmp	r3, #3
 8007636:	d9ec      	bls.n	8007612 <lcd_send_data+0x6a>
 8007638:	e015      	b.n	8007666 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800763a:	2300      	movs	r3, #0
 800763c:	73bb      	strb	r3, [r7, #14]
 800763e:	e00f      	b.n	8007660 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007640:	7bbb      	ldrb	r3, [r7, #14]
 8007642:	3310      	adds	r3, #16
 8007644:	443b      	add	r3, r7
 8007646:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800764a:	7bbb      	ldrb	r3, [r7, #14]
 800764c:	f042 0208 	orr.w	r2, r2, #8
 8007650:	b2d2      	uxtb	r2, r2
 8007652:	3310      	adds	r3, #16
 8007654:	443b      	add	r3, r7
 8007656:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800765a:	7bbb      	ldrb	r3, [r7, #14]
 800765c:	3301      	adds	r3, #1
 800765e:	73bb      	strb	r3, [r7, #14]
 8007660:	7bbb      	ldrb	r3, [r7, #14]
 8007662:	2b03      	cmp	r3, #3
 8007664:	d9ec      	bls.n	8007640 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007666:	f107 0208 	add.w	r2, r7, #8
 800766a:	2364      	movs	r3, #100	; 0x64
 800766c:	9300      	str	r3, [sp, #0]
 800766e:	2304      	movs	r3, #4
 8007670:	214e      	movs	r1, #78	; 0x4e
 8007672:	4803      	ldr	r0, [pc, #12]	; (8007680 <lcd_send_data+0xd8>)
 8007674:	f001 fda2 	bl	80091bc <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007678:	bf00      	nop
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20000290 	.word	0x20000290
 8007684:	20000264 	.word	0x20000264

08007688 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007690:	e006      	b.n	80076a0 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	1c5a      	adds	r2, r3, #1
 8007696:	607a      	str	r2, [r7, #4]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	4618      	mov	r0, r3
 800769c:	f7ff ff84 	bl	80075a8 <lcd_send_data>
	while (*str) {
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d1f4      	bne.n	8007692 <lcd_send_string+0xa>
	}
}
 80076a8:	bf00      	nop
 80076aa:	bf00      	nop
 80076ac:	3708      	adds	r7, #8
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
	...

080076b4 <lcd_send_char>:

void lcd_send_char(char ch) {
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b086      	sub	sp, #24
 80076b8:	af02      	add	r7, sp, #8
 80076ba:	4603      	mov	r3, r0
 80076bc:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 80076be:	79fb      	ldrb	r3, [r7, #7]
 80076c0:	f023 030f 	bic.w	r3, r3, #15
 80076c4:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 80076c6:	79fb      	ldrb	r3, [r7, #7]
 80076c8:	011b      	lsls	r3, r3, #4
 80076ca:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80076cc:	7b7b      	ldrb	r3, [r7, #13]
 80076ce:	f043 030d 	orr.w	r3, r3, #13
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 80076d6:	7b7b      	ldrb	r3, [r7, #13]
 80076d8:	f043 0309 	orr.w	r3, r3, #9
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80076e0:	7b3b      	ldrb	r3, [r7, #12]
 80076e2:	f043 030d 	orr.w	r3, r3, #13
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80076ea:	7b3b      	ldrb	r3, [r7, #12]
 80076ec:	f043 0309 	orr.w	r3, r3, #9
 80076f0:	b2db      	uxtb	r3, r3
 80076f2:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80076f4:	bf00      	nop
 80076f6:	4825      	ldr	r0, [pc, #148]	; (800778c <lcd_send_char+0xd8>)
 80076f8:	f002 f9cd 	bl	8009a96 <HAL_I2C_GetError>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b04      	cmp	r3, #4
 8007700:	d0f9      	beq.n	80076f6 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007702:	bf00      	nop
 8007704:	4821      	ldr	r0, [pc, #132]	; (800778c <lcd_send_char+0xd8>)
 8007706:	f002 f9b9 	bl	8009a7c <HAL_I2C_GetState>
 800770a:	4603      	mov	r3, r0
 800770c:	2b20      	cmp	r3, #32
 800770e:	d1f9      	bne.n	8007704 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007710:	4b1f      	ldr	r3, [pc, #124]	; (8007790 <lcd_send_char+0xdc>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d116      	bne.n	8007746 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007718:	2300      	movs	r3, #0
 800771a:	73fb      	strb	r3, [r7, #15]
 800771c:	e00f      	b.n	800773e <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800771e:	7bfb      	ldrb	r3, [r7, #15]
 8007720:	3310      	adds	r3, #16
 8007722:	443b      	add	r3, r7
 8007724:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007728:	7bfb      	ldrb	r3, [r7, #15]
 800772a:	f022 0208 	bic.w	r2, r2, #8
 800772e:	b2d2      	uxtb	r2, r2
 8007730:	3310      	adds	r3, #16
 8007732:	443b      	add	r3, r7
 8007734:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007738:	7bfb      	ldrb	r3, [r7, #15]
 800773a:	3301      	adds	r3, #1
 800773c:	73fb      	strb	r3, [r7, #15]
 800773e:	7bfb      	ldrb	r3, [r7, #15]
 8007740:	2b03      	cmp	r3, #3
 8007742:	d9ec      	bls.n	800771e <lcd_send_char+0x6a>
 8007744:	e015      	b.n	8007772 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007746:	2300      	movs	r3, #0
 8007748:	73bb      	strb	r3, [r7, #14]
 800774a:	e00f      	b.n	800776c <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 800774c:	7bbb      	ldrb	r3, [r7, #14]
 800774e:	3310      	adds	r3, #16
 8007750:	443b      	add	r3, r7
 8007752:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007756:	7bbb      	ldrb	r3, [r7, #14]
 8007758:	f042 0208 	orr.w	r2, r2, #8
 800775c:	b2d2      	uxtb	r2, r2
 800775e:	3310      	adds	r3, #16
 8007760:	443b      	add	r3, r7
 8007762:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007766:	7bbb      	ldrb	r3, [r7, #14]
 8007768:	3301      	adds	r3, #1
 800776a:	73bb      	strb	r3, [r7, #14]
 800776c:	7bbb      	ldrb	r3, [r7, #14]
 800776e:	2b03      	cmp	r3, #3
 8007770:	d9ec      	bls.n	800774c <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007772:	f107 0208 	add.w	r2, r7, #8
 8007776:	2364      	movs	r3, #100	; 0x64
 8007778:	9300      	str	r3, [sp, #0]
 800777a:	2304      	movs	r3, #4
 800777c:	214e      	movs	r1, #78	; 0x4e
 800777e:	4803      	ldr	r0, [pc, #12]	; (800778c <lcd_send_char+0xd8>)
 8007780:	f001 fd1c 	bl	80091bc <HAL_I2C_Master_Transmit>
}
 8007784:	bf00      	nop
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}
 800778c:	20000290 	.word	0x20000290
 8007790:	20000264 	.word	0x20000264

08007794 <lcd_init>:

void lcd_init (void) {
 8007794:	b580      	push	{r7, lr}
 8007796:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007798:	2002      	movs	r0, #2
 800779a:	f7ff fe95 	bl	80074c8 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800779e:	2028      	movs	r0, #40	; 0x28
 80077a0:	f7ff fe92 	bl	80074c8 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80077a4:	200c      	movs	r0, #12
 80077a6:	f7ff fe8f 	bl	80074c8 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80077aa:	2080      	movs	r0, #128	; 0x80
 80077ac:	f7ff fe8c 	bl	80074c8 <lcd_send_cmd>
	lcd_backlight(1);
 80077b0:	2001      	movs	r0, #1
 80077b2:	f000 f86d 	bl	8007890 <lcd_backlight>
}
 80077b6:	bf00      	nop
 80077b8:	bd80      	pop	{r7, pc}

080077ba <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b082      	sub	sp, #8
 80077be:	af00      	add	r7, sp, #0
 80077c0:	4603      	mov	r3, r0
 80077c2:	460a      	mov	r2, r1
 80077c4:	71fb      	strb	r3, [r7, #7]
 80077c6:	4613      	mov	r3, r2
 80077c8:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 80077ca:	79fb      	ldrb	r3, [r7, #7]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d106      	bne.n	80077de <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 80077d0:	79bb      	ldrb	r3, [r7, #6]
 80077d2:	337f      	adds	r3, #127	; 0x7f
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	4618      	mov	r0, r3
 80077d8:	f7ff fe76 	bl	80074c8 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80077dc:	e008      	b.n	80077f0 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80077de:	79fb      	ldrb	r3, [r7, #7]
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	d105      	bne.n	80077f0 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80077e4:	79bb      	ldrb	r3, [r7, #6]
 80077e6:	3b41      	subs	r3, #65	; 0x41
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7ff fe6c 	bl	80074c8 <lcd_send_cmd>
}
 80077f0:	bf00      	nop
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	4603      	mov	r3, r0
 8007800:	603a      	str	r2, [r7, #0]
 8007802:	71fb      	strb	r3, [r7, #7]
 8007804:	460b      	mov	r3, r1
 8007806:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007808:	79ba      	ldrb	r2, [r7, #6]
 800780a:	79fb      	ldrb	r3, [r7, #7]
 800780c:	4611      	mov	r1, r2
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff ffd3 	bl	80077ba <lcd_gotoxy>
	lcd_send_string(str);
 8007814:	6838      	ldr	r0, [r7, #0]
 8007816:	f7ff ff37 	bl	8007688 <lcd_send_string>
}
 800781a:	bf00      	nop
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007822:	b580      	push	{r7, lr}
 8007824:	b082      	sub	sp, #8
 8007826:	af00      	add	r7, sp, #0
 8007828:	4603      	mov	r3, r0
 800782a:	71fb      	strb	r3, [r7, #7]
 800782c:	460b      	mov	r3, r1
 800782e:	71bb      	strb	r3, [r7, #6]
 8007830:	4613      	mov	r3, r2
 8007832:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007834:	79ba      	ldrb	r2, [r7, #6]
 8007836:	79fb      	ldrb	r3, [r7, #7]
 8007838:	4611      	mov	r1, r2
 800783a:	4618      	mov	r0, r3
 800783c:	f7ff ffbd 	bl	80077ba <lcd_gotoxy>
    lcd_send_char(ch);
 8007840:	797b      	ldrb	r3, [r7, #5]
 8007842:	4618      	mov	r0, r3
 8007844:	f7ff ff36 	bl	80076b4 <lcd_send_char>
}
 8007848:	bf00      	nop
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <lcd_clear>:

void lcd_clear(void) {
 8007850:	b580      	push	{r7, lr}
 8007852:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007854:	2001      	movs	r0, #1
 8007856:	f7ff fe37 	bl	80074c8 <lcd_send_cmd>
    HAL_Delay(2);
 800785a:	2002      	movs	r0, #2
 800785c:	f000 fd22 	bl	80082a4 <HAL_Delay>
}
 8007860:	bf00      	nop
 8007862:	bd80      	pop	{r7, pc}

08007864 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	4603      	mov	r3, r0
 800786c:	460a      	mov	r2, r1
 800786e:	71fb      	strb	r3, [r7, #7]
 8007870:	4613      	mov	r3, r2
 8007872:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007874:	79ba      	ldrb	r2, [r7, #6]
 8007876:	79fb      	ldrb	r3, [r7, #7]
 8007878:	4611      	mov	r1, r2
 800787a:	4618      	mov	r0, r3
 800787c:	f7ff ff9d 	bl	80077ba <lcd_gotoxy>

    lcd_send_char(' ');
 8007880:	2020      	movs	r0, #32
 8007882:	f7ff ff17 	bl	80076b4 <lcd_send_char>
}
 8007886:	bf00      	nop
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
	...

08007890 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800789a:	4a05      	ldr	r2, [pc, #20]	; (80078b0 <lcd_backlight+0x20>)
 800789c:	79fb      	ldrb	r3, [r7, #7]
 800789e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 80078a0:	2000      	movs	r0, #0
 80078a2:	f7ff fe11 	bl	80074c8 <lcd_send_cmd>
}
 80078a6:	bf00      	nop
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20000264 	.word	0x20000264

080078b4 <lcd_cursor>:

void lcd_cursor(int state) {
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d106      	bne.n	80078d0 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 80078c2:	200e      	movs	r0, #14
 80078c4:	f7ff fe00 	bl	80074c8 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 80078c8:	200f      	movs	r0, #15
 80078ca:	f7ff fdfd 	bl	80074c8 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 80078ce:	e002      	b.n	80078d6 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 80078d0:	200c      	movs	r0, #12
 80078d2:	f7ff fdf9 	bl	80074c8 <lcd_send_cmd>
}
 80078d6:	bf00      	nop
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
	...

080078e0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80078e0:	b480      	push	{r7}
 80078e2:	b083      	sub	sp, #12
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80078e8:	4b04      	ldr	r3, [pc, #16]	; (80078fc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	3301      	adds	r3, #1
 80078ee:	4a03      	ldr	r2, [pc, #12]	; (80078fc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80078f0:	6013      	str	r3, [r2, #0]
}
 80078f2:	bf00      	nop
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bc80      	pop	{r7}
 80078fa:	4770      	bx	lr
 80078fc:	200001dc 	.word	0x200001dc

08007900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007904:	f000 fc6c 	bl	80081e0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007908:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800790c:	f000 fcca 	bl	80082a4 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007910:	f000 f89c 	bl	8007a4c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007914:	f000 f9be 	bl	8007c94 <MX_GPIO_Init>
  MX_CAN_Init();
 8007918:	f000 f8de 	bl	8007ad8 <MX_CAN_Init>
  MX_I2C1_Init();
 800791c:	f000 f910 	bl	8007b40 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007920:	f000 f93c 	bl	8007b9c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007924:	f000 f98c 	bl	8007c40 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007928:	2201      	movs	r2, #1
 800792a:	2140      	movs	r1, #64	; 0x40
 800792c:	483e      	ldr	r0, [pc, #248]	; (8007a28 <main+0x128>)
 800792e:	f001 faa0 	bl	8008e72 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007932:	2201      	movs	r2, #1
 8007934:	2180      	movs	r1, #128	; 0x80
 8007936:	483c      	ldr	r0, [pc, #240]	; (8007a28 <main+0x128>)
 8007938:	f001 fa9b 	bl	8008e72 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800793c:	200a      	movs	r0, #10
 800793e:	f000 fcb1 	bl	80082a4 <HAL_Delay>
  lcd_init();
 8007942:	f7ff ff27 	bl	8007794 <lcd_init>
  HAL_Delay(10);
 8007946:	200a      	movs	r0, #10
 8007948:	f000 fcac 	bl	80082a4 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 800794c:	4837      	ldr	r0, [pc, #220]	; (8007a2c <main+0x12c>)
 800794e:	f003 f943 	bl	800abd8 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007952:	bf00      	nop
 8007954:	4836      	ldr	r0, [pc, #216]	; (8007a30 <main+0x130>)
 8007956:	f002 f89e 	bl	8009a96 <HAL_I2C_GetError>
 800795a:	4603      	mov	r3, r0
 800795c:	2b04      	cmp	r3, #4
 800795e:	d0f9      	beq.n	8007954 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007960:	bf00      	nop
 8007962:	4833      	ldr	r0, [pc, #204]	; (8007a30 <main+0x130>)
 8007964:	f002 f88a 	bl	8009a7c <HAL_I2C_GetState>
 8007968:	4603      	mov	r3, r0
 800796a:	2b20      	cmp	r3, #32
 800796c:	d1f9      	bne.n	8007962 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800796e:	2200      	movs	r2, #0
 8007970:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007974:	482c      	ldr	r0, [pc, #176]	; (8007a28 <main+0x128>)
 8007976:	f001 fa7c 	bl	8008e72 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800797a:	2200      	movs	r2, #0
 800797c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007980:	4829      	ldr	r0, [pc, #164]	; (8007a28 <main+0x128>)
 8007982:	f001 fa76 	bl	8008e72 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007986:	2200      	movs	r2, #0
 8007988:	2104      	movs	r1, #4
 800798a:	4827      	ldr	r0, [pc, #156]	; (8007a28 <main+0x128>)
 800798c:	f001 fa71 	bl	8008e72 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007990:	2200      	movs	r2, #0
 8007992:	2102      	movs	r1, #2
 8007994:	4824      	ldr	r0, [pc, #144]	; (8007a28 <main+0x128>)
 8007996:	f001 fa6c 	bl	8008e72 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800799a:	2200      	movs	r2, #0
 800799c:	2101      	movs	r1, #1
 800799e:	4822      	ldr	r0, [pc, #136]	; (8007a28 <main+0x128>)
 80079a0:	f001 fa67 	bl	8008e72 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80079a4:	2200      	movs	r2, #0
 80079a6:	2120      	movs	r1, #32
 80079a8:	4822      	ldr	r0, [pc, #136]	; (8007a34 <main+0x134>)
 80079aa:	f001 fa62 	bl	8008e72 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80079ae:	2200      	movs	r2, #0
 80079b0:	2110      	movs	r1, #16
 80079b2:	4820      	ldr	r0, [pc, #128]	; (8007a34 <main+0x134>)
 80079b4:	f001 fa5d 	bl	8008e72 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80079b8:	2200      	movs	r2, #0
 80079ba:	2180      	movs	r1, #128	; 0x80
 80079bc:	481e      	ldr	r0, [pc, #120]	; (8007a38 <main+0x138>)
 80079be:	f001 fa58 	bl	8008e72 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80079c2:	2200      	movs	r2, #0
 80079c4:	2140      	movs	r1, #64	; 0x40
 80079c6:	481c      	ldr	r0, [pc, #112]	; (8007a38 <main+0x138>)
 80079c8:	f001 fa53 	bl	8008e72 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80079cc:	2200      	movs	r2, #0
 80079ce:	2120      	movs	r1, #32
 80079d0:	4819      	ldr	r0, [pc, #100]	; (8007a38 <main+0x138>)
 80079d2:	f001 fa4e 	bl	8008e72 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 80079d6:	2200      	movs	r2, #0
 80079d8:	2110      	movs	r1, #16
 80079da:	4817      	ldr	r0, [pc, #92]	; (8007a38 <main+0x138>)
 80079dc:	f001 fa49 	bl	8008e72 <HAL_GPIO_WritePin>

  i2cTest();
 80079e0:	f7f9 f9d4 	bl	8000d8c <i2cTest>
  HAL_Delay(100);
 80079e4:	2064      	movs	r0, #100	; 0x64
 80079e6:	f000 fc5d 	bl	80082a4 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 80079ea:	4a14      	ldr	r2, [pc, #80]	; (8007a3c <main+0x13c>)
 80079ec:	2101      	movs	r1, #1
 80079ee:	2001      	movs	r0, #1
 80079f0:	f7ff ff02 	bl	80077f8 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 80079f4:	4a12      	ldr	r2, [pc, #72]	; (8007a40 <main+0x140>)
 80079f6:	2101      	movs	r1, #1
 80079f8:	2002      	movs	r0, #2
 80079fa:	f7ff fefd 	bl	80077f8 <lcd_print>
  HAL_Delay(1000);
 80079fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a02:	f000 fc4f 	bl	80082a4 <HAL_Delay>
  lcd_clear();
 8007a06:	f7ff ff23 	bl	8007850 <lcd_clear>

  eepromKontrol();
 8007a0a:	f7f8 fc13 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007a0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a12:	f000 fc47 	bl	80082a4 <HAL_Delay>

  backLightTimer = millis;
 8007a16:	4b0b      	ldr	r3, [pc, #44]	; (8007a44 <main+0x144>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a0b      	ldr	r2, [pc, #44]	; (8007a48 <main+0x148>)
 8007a1c:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007a1e:	f7ff fb95 	bl	800714c <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007a22:	f7fe fee9 	bl	80067f8 <mainLoop>
 8007a26:	e7fc      	b.n	8007a22 <main+0x122>
 8007a28:	40010c00 	.word	0x40010c00
 8007a2c:	200002e4 	.word	0x200002e4
 8007a30:	20000290 	.word	0x20000290
 8007a34:	40011000 	.word	0x40011000
 8007a38:	40010800 	.word	0x40010800
 8007a3c:	0800da08 	.word	0x0800da08
 8007a40:	0800da1c 	.word	0x0800da1c
 8007a44:	200001dc 	.word	0x200001dc
 8007a48:	200001f8 	.word	0x200001f8

08007a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b090      	sub	sp, #64	; 0x40
 8007a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007a52:	f107 0318 	add.w	r3, r7, #24
 8007a56:	2228      	movs	r2, #40	; 0x28
 8007a58:	2100      	movs	r1, #0
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f004 fbeb 	bl	800c236 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007a60:	1d3b      	adds	r3, r7, #4
 8007a62:	2200      	movs	r2, #0
 8007a64:	601a      	str	r2, [r3, #0]
 8007a66:	605a      	str	r2, [r3, #4]
 8007a68:	609a      	str	r2, [r3, #8]
 8007a6a:	60da      	str	r2, [r3, #12]
 8007a6c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007a72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007a80:	2302      	movs	r3, #2
 8007a82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007a84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007a8a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007a90:	f107 0318 	add.w	r3, r7, #24
 8007a94:	4618      	mov	r0, r3
 8007a96:	f002 fc3f 	bl	800a318 <HAL_RCC_OscConfig>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d001      	beq.n	8007aa4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007aa0:	f000 f9a2 	bl	8007de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007aa4:	230f      	movs	r3, #15
 8007aa6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007aac:	2300      	movs	r3, #0
 8007aae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007ab0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ab4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007aba:	1d3b      	adds	r3, r7, #4
 8007abc:	2102      	movs	r1, #2
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f002 feac 	bl	800a81c <HAL_RCC_ClockConfig>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007aca:	f000 f98d 	bl	8007de8 <Error_Handler>
  }
}
 8007ace:	bf00      	nop
 8007ad0:	3740      	adds	r7, #64	; 0x40
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
	...

08007ad8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007adc:	4b16      	ldr	r3, [pc, #88]	; (8007b38 <MX_CAN_Init+0x60>)
 8007ade:	4a17      	ldr	r2, [pc, #92]	; (8007b3c <MX_CAN_Init+0x64>)
 8007ae0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007ae2:	4b15      	ldr	r3, [pc, #84]	; (8007b38 <MX_CAN_Init+0x60>)
 8007ae4:	2210      	movs	r2, #16
 8007ae6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007ae8:	4b13      	ldr	r3, [pc, #76]	; (8007b38 <MX_CAN_Init+0x60>)
 8007aea:	2200      	movs	r2, #0
 8007aec:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007aee:	4b12      	ldr	r3, [pc, #72]	; (8007b38 <MX_CAN_Init+0x60>)
 8007af0:	2200      	movs	r2, #0
 8007af2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007af4:	4b10      	ldr	r3, [pc, #64]	; (8007b38 <MX_CAN_Init+0x60>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007afa:	4b0f      	ldr	r3, [pc, #60]	; (8007b38 <MX_CAN_Init+0x60>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007b00:	4b0d      	ldr	r3, [pc, #52]	; (8007b38 <MX_CAN_Init+0x60>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007b06:	4b0c      	ldr	r3, [pc, #48]	; (8007b38 <MX_CAN_Init+0x60>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007b0c:	4b0a      	ldr	r3, [pc, #40]	; (8007b38 <MX_CAN_Init+0x60>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007b12:	4b09      	ldr	r3, [pc, #36]	; (8007b38 <MX_CAN_Init+0x60>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007b18:	4b07      	ldr	r3, [pc, #28]	; (8007b38 <MX_CAN_Init+0x60>)
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007b1e:	4b06      	ldr	r3, [pc, #24]	; (8007b38 <MX_CAN_Init+0x60>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007b24:	4804      	ldr	r0, [pc, #16]	; (8007b38 <MX_CAN_Init+0x60>)
 8007b26:	f000 fbe1 	bl	80082ec <HAL_CAN_Init>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d001      	beq.n	8007b34 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007b30:	f000 f95a 	bl	8007de8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007b34:	bf00      	nop
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	20000268 	.word	0x20000268
 8007b3c:	40006400 	.word	0x40006400

08007b40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007b44:	4b12      	ldr	r3, [pc, #72]	; (8007b90 <MX_I2C1_Init+0x50>)
 8007b46:	4a13      	ldr	r2, [pc, #76]	; (8007b94 <MX_I2C1_Init+0x54>)
 8007b48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007b4a:	4b11      	ldr	r3, [pc, #68]	; (8007b90 <MX_I2C1_Init+0x50>)
 8007b4c:	4a12      	ldr	r2, [pc, #72]	; (8007b98 <MX_I2C1_Init+0x58>)
 8007b4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007b50:	4b0f      	ldr	r3, [pc, #60]	; (8007b90 <MX_I2C1_Init+0x50>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007b56:	4b0e      	ldr	r3, [pc, #56]	; (8007b90 <MX_I2C1_Init+0x50>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007b5c:	4b0c      	ldr	r3, [pc, #48]	; (8007b90 <MX_I2C1_Init+0x50>)
 8007b5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007b62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007b64:	4b0a      	ldr	r3, [pc, #40]	; (8007b90 <MX_I2C1_Init+0x50>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007b6a:	4b09      	ldr	r3, [pc, #36]	; (8007b90 <MX_I2C1_Init+0x50>)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007b70:	4b07      	ldr	r3, [pc, #28]	; (8007b90 <MX_I2C1_Init+0x50>)
 8007b72:	2200      	movs	r2, #0
 8007b74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007b76:	4b06      	ldr	r3, [pc, #24]	; (8007b90 <MX_I2C1_Init+0x50>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007b7c:	4804      	ldr	r0, [pc, #16]	; (8007b90 <MX_I2C1_Init+0x50>)
 8007b7e:	f001 f9a9 	bl	8008ed4 <HAL_I2C_Init>
 8007b82:	4603      	mov	r3, r0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d001      	beq.n	8007b8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007b88:	f000 f92e 	bl	8007de8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007b8c:	bf00      	nop
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	20000290 	.word	0x20000290
 8007b94:	40005400 	.word	0x40005400
 8007b98:	00061a80 	.word	0x00061a80

08007b9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007ba2:	f107 0308 	add.w	r3, r7, #8
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	601a      	str	r2, [r3, #0]
 8007baa:	605a      	str	r2, [r3, #4]
 8007bac:	609a      	str	r2, [r3, #8]
 8007bae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007bb0:	463b      	mov	r3, r7
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007bb8:	4b1f      	ldr	r3, [pc, #124]	; (8007c38 <MX_TIM1_Init+0x9c>)
 8007bba:	4a20      	ldr	r2, [pc, #128]	; (8007c3c <MX_TIM1_Init+0xa0>)
 8007bbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007bbe:	4b1e      	ldr	r3, [pc, #120]	; (8007c38 <MX_TIM1_Init+0x9c>)
 8007bc0:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007bc4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007bc6:	4b1c      	ldr	r3, [pc, #112]	; (8007c38 <MX_TIM1_Init+0x9c>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007bcc:	4b1a      	ldr	r3, [pc, #104]	; (8007c38 <MX_TIM1_Init+0x9c>)
 8007bce:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007bd2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007bd4:	4b18      	ldr	r3, [pc, #96]	; (8007c38 <MX_TIM1_Init+0x9c>)
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007bda:	4b17      	ldr	r3, [pc, #92]	; (8007c38 <MX_TIM1_Init+0x9c>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007be0:	4b15      	ldr	r3, [pc, #84]	; (8007c38 <MX_TIM1_Init+0x9c>)
 8007be2:	2200      	movs	r2, #0
 8007be4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007be6:	4814      	ldr	r0, [pc, #80]	; (8007c38 <MX_TIM1_Init+0x9c>)
 8007be8:	f002 ffa6 	bl	800ab38 <HAL_TIM_Base_Init>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007bf2:	f000 f8f9 	bl	8007de8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007bf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bfa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007bfc:	f107 0308 	add.w	r3, r7, #8
 8007c00:	4619      	mov	r1, r3
 8007c02:	480d      	ldr	r0, [pc, #52]	; (8007c38 <MX_TIM1_Init+0x9c>)
 8007c04:	f003 f950 	bl	800aea8 <HAL_TIM_ConfigClockSource>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007c0e:	f000 f8eb 	bl	8007de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007c12:	2300      	movs	r3, #0
 8007c14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007c16:	2300      	movs	r3, #0
 8007c18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007c1a:	463b      	mov	r3, r7
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4806      	ldr	r0, [pc, #24]	; (8007c38 <MX_TIM1_Init+0x9c>)
 8007c20:	f003 fb3e 	bl	800b2a0 <HAL_TIMEx_MasterConfigSynchronization>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d001      	beq.n	8007c2e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007c2a:	f000 f8dd 	bl	8007de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007c2e:	bf00      	nop
 8007c30:	3718      	adds	r7, #24
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	200002e4 	.word	0x200002e4
 8007c3c:	40012c00 	.word	0x40012c00

08007c40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007c44:	4b11      	ldr	r3, [pc, #68]	; (8007c8c <MX_USART1_UART_Init+0x4c>)
 8007c46:	4a12      	ldr	r2, [pc, #72]	; (8007c90 <MX_USART1_UART_Init+0x50>)
 8007c48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007c4a:	4b10      	ldr	r3, [pc, #64]	; (8007c8c <MX_USART1_UART_Init+0x4c>)
 8007c4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007c50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007c52:	4b0e      	ldr	r3, [pc, #56]	; (8007c8c <MX_USART1_UART_Init+0x4c>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007c58:	4b0c      	ldr	r3, [pc, #48]	; (8007c8c <MX_USART1_UART_Init+0x4c>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007c5e:	4b0b      	ldr	r3, [pc, #44]	; (8007c8c <MX_USART1_UART_Init+0x4c>)
 8007c60:	2200      	movs	r2, #0
 8007c62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007c64:	4b09      	ldr	r3, [pc, #36]	; (8007c8c <MX_USART1_UART_Init+0x4c>)
 8007c66:	220c      	movs	r2, #12
 8007c68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007c6a:	4b08      	ldr	r3, [pc, #32]	; (8007c8c <MX_USART1_UART_Init+0x4c>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007c70:	4b06      	ldr	r3, [pc, #24]	; (8007c8c <MX_USART1_UART_Init+0x4c>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007c76:	4805      	ldr	r0, [pc, #20]	; (8007c8c <MX_USART1_UART_Init+0x4c>)
 8007c78:	f003 fb90 	bl	800b39c <HAL_UART_Init>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007c82:	f000 f8b1 	bl	8007de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007c86:	bf00      	nop
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	2000032c 	.word	0x2000032c
 8007c90:	40013800 	.word	0x40013800

08007c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b088      	sub	sp, #32
 8007c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c9a:	f107 0310 	add.w	r3, r7, #16
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	605a      	str	r2, [r3, #4]
 8007ca4:	609a      	str	r2, [r3, #8]
 8007ca6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ca8:	4b4b      	ldr	r3, [pc, #300]	; (8007dd8 <MX_GPIO_Init+0x144>)
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	4a4a      	ldr	r2, [pc, #296]	; (8007dd8 <MX_GPIO_Init+0x144>)
 8007cae:	f043 0310 	orr.w	r3, r3, #16
 8007cb2:	6193      	str	r3, [r2, #24]
 8007cb4:	4b48      	ldr	r3, [pc, #288]	; (8007dd8 <MX_GPIO_Init+0x144>)
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	f003 0310 	and.w	r3, r3, #16
 8007cbc:	60fb      	str	r3, [r7, #12]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007cc0:	4b45      	ldr	r3, [pc, #276]	; (8007dd8 <MX_GPIO_Init+0x144>)
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	4a44      	ldr	r2, [pc, #272]	; (8007dd8 <MX_GPIO_Init+0x144>)
 8007cc6:	f043 0320 	orr.w	r3, r3, #32
 8007cca:	6193      	str	r3, [r2, #24]
 8007ccc:	4b42      	ldr	r3, [pc, #264]	; (8007dd8 <MX_GPIO_Init+0x144>)
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	f003 0320 	and.w	r3, r3, #32
 8007cd4:	60bb      	str	r3, [r7, #8]
 8007cd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007cd8:	4b3f      	ldr	r3, [pc, #252]	; (8007dd8 <MX_GPIO_Init+0x144>)
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	4a3e      	ldr	r2, [pc, #248]	; (8007dd8 <MX_GPIO_Init+0x144>)
 8007cde:	f043 0304 	orr.w	r3, r3, #4
 8007ce2:	6193      	str	r3, [r2, #24]
 8007ce4:	4b3c      	ldr	r3, [pc, #240]	; (8007dd8 <MX_GPIO_Init+0x144>)
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	f003 0304 	and.w	r3, r3, #4
 8007cec:	607b      	str	r3, [r7, #4]
 8007cee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cf0:	4b39      	ldr	r3, [pc, #228]	; (8007dd8 <MX_GPIO_Init+0x144>)
 8007cf2:	699b      	ldr	r3, [r3, #24]
 8007cf4:	4a38      	ldr	r2, [pc, #224]	; (8007dd8 <MX_GPIO_Init+0x144>)
 8007cf6:	f043 0308 	orr.w	r3, r3, #8
 8007cfa:	6193      	str	r3, [r2, #24]
 8007cfc:	4b36      	ldr	r3, [pc, #216]	; (8007dd8 <MX_GPIO_Init+0x144>)
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	f003 0308 	and.w	r3, r3, #8
 8007d04:	603b      	str	r3, [r7, #0]
 8007d06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8007d08:	2200      	movs	r2, #0
 8007d0a:	21f0      	movs	r1, #240	; 0xf0
 8007d0c:	4833      	ldr	r0, [pc, #204]	; (8007ddc <MX_GPIO_Init+0x148>)
 8007d0e:	f001 f8b0 	bl	8008e72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8007d12:	2200      	movs	r2, #0
 8007d14:	f241 0130 	movw	r1, #4144	; 0x1030
 8007d18:	4831      	ldr	r0, [pc, #196]	; (8007de0 <MX_GPIO_Init+0x14c>)
 8007d1a:	f001 f8aa 	bl	8008e72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f640 4107 	movw	r1, #3079	; 0xc07
 8007d24:	482f      	ldr	r0, [pc, #188]	; (8007de4 <MX_GPIO_Init+0x150>)
 8007d26:	f001 f8a4 	bl	8008e72 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8007d2a:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8007d2e:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d30:	2300      	movs	r3, #0
 8007d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d34:	2300      	movs	r3, #0
 8007d36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d38:	f107 0310 	add.w	r3, r7, #16
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	4828      	ldr	r0, [pc, #160]	; (8007de0 <MX_GPIO_Init+0x14c>)
 8007d40:	f000 fe20 	bl	8008984 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007d44:	f248 130f 	movw	r3, #33039	; 0x810f
 8007d48:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d52:	f107 0310 	add.w	r3, r7, #16
 8007d56:	4619      	mov	r1, r3
 8007d58:	4820      	ldr	r0, [pc, #128]	; (8007ddc <MX_GPIO_Init+0x148>)
 8007d5a:	f000 fe13 	bl	8008984 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8007d5e:	23f0      	movs	r3, #240	; 0xf0
 8007d60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d62:	2301      	movs	r3, #1
 8007d64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d66:	2300      	movs	r3, #0
 8007d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d6e:	f107 0310 	add.w	r3, r7, #16
 8007d72:	4619      	mov	r1, r3
 8007d74:	4819      	ldr	r0, [pc, #100]	; (8007ddc <MX_GPIO_Init+0x148>)
 8007d76:	f000 fe05 	bl	8008984 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8007d7a:	f241 0330 	movw	r3, #4144	; 0x1030
 8007d7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d80:	2301      	movs	r3, #1
 8007d82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d84:	2300      	movs	r3, #0
 8007d86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d88:	2302      	movs	r3, #2
 8007d8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d8c:	f107 0310 	add.w	r3, r7, #16
 8007d90:	4619      	mov	r1, r3
 8007d92:	4813      	ldr	r0, [pc, #76]	; (8007de0 <MX_GPIO_Init+0x14c>)
 8007d94:	f000 fdf6 	bl	8008984 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007d98:	f640 4307 	movw	r3, #3079	; 0xc07
 8007d9c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007da2:	2300      	movs	r3, #0
 8007da4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007da6:	2302      	movs	r3, #2
 8007da8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007daa:	f107 0310 	add.w	r3, r7, #16
 8007dae:	4619      	mov	r1, r3
 8007db0:	480c      	ldr	r0, [pc, #48]	; (8007de4 <MX_GPIO_Init+0x150>)
 8007db2:	f000 fde7 	bl	8008984 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8007db6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007dc4:	f107 0310 	add.w	r3, r7, #16
 8007dc8:	4619      	mov	r1, r3
 8007dca:	4806      	ldr	r0, [pc, #24]	; (8007de4 <MX_GPIO_Init+0x150>)
 8007dcc:	f000 fdda 	bl	8008984 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007dd0:	bf00      	nop
 8007dd2:	3720      	adds	r7, #32
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	40021000 	.word	0x40021000
 8007ddc:	40010800 	.word	0x40010800
 8007de0:	40011000 	.word	0x40011000
 8007de4:	40010c00 	.word	0x40010c00

08007de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007de8:	b480      	push	{r7}
 8007dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8007dec:	bf00      	nop
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bc80      	pop	{r7}
 8007df2:	4770      	bx	lr

08007df4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007dfa:	4b15      	ldr	r3, [pc, #84]	; (8007e50 <HAL_MspInit+0x5c>)
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	4a14      	ldr	r2, [pc, #80]	; (8007e50 <HAL_MspInit+0x5c>)
 8007e00:	f043 0301 	orr.w	r3, r3, #1
 8007e04:	6193      	str	r3, [r2, #24]
 8007e06:	4b12      	ldr	r3, [pc, #72]	; (8007e50 <HAL_MspInit+0x5c>)
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	f003 0301 	and.w	r3, r3, #1
 8007e0e:	60bb      	str	r3, [r7, #8]
 8007e10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007e12:	4b0f      	ldr	r3, [pc, #60]	; (8007e50 <HAL_MspInit+0x5c>)
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	4a0e      	ldr	r2, [pc, #56]	; (8007e50 <HAL_MspInit+0x5c>)
 8007e18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e1c:	61d3      	str	r3, [r2, #28]
 8007e1e:	4b0c      	ldr	r3, [pc, #48]	; (8007e50 <HAL_MspInit+0x5c>)
 8007e20:	69db      	ldr	r3, [r3, #28]
 8007e22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e26:	607b      	str	r3, [r7, #4]
 8007e28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007e2a:	4b0a      	ldr	r3, [pc, #40]	; (8007e54 <HAL_MspInit+0x60>)
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007e36:	60fb      	str	r3, [r7, #12]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007e3e:	60fb      	str	r3, [r7, #12]
 8007e40:	4a04      	ldr	r2, [pc, #16]	; (8007e54 <HAL_MspInit+0x60>)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007e46:	bf00      	nop
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bc80      	pop	{r7}
 8007e4e:	4770      	bx	lr
 8007e50:	40021000 	.word	0x40021000
 8007e54:	40010000 	.word	0x40010000

08007e58 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b088      	sub	sp, #32
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e60:	f107 0310 	add.w	r3, r7, #16
 8007e64:	2200      	movs	r2, #0
 8007e66:	601a      	str	r2, [r3, #0]
 8007e68:	605a      	str	r2, [r3, #4]
 8007e6a:	609a      	str	r2, [r3, #8]
 8007e6c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a1c      	ldr	r2, [pc, #112]	; (8007ee4 <HAL_CAN_MspInit+0x8c>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d131      	bne.n	8007edc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007e78:	4b1b      	ldr	r3, [pc, #108]	; (8007ee8 <HAL_CAN_MspInit+0x90>)
 8007e7a:	69db      	ldr	r3, [r3, #28]
 8007e7c:	4a1a      	ldr	r2, [pc, #104]	; (8007ee8 <HAL_CAN_MspInit+0x90>)
 8007e7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007e82:	61d3      	str	r3, [r2, #28]
 8007e84:	4b18      	ldr	r3, [pc, #96]	; (8007ee8 <HAL_CAN_MspInit+0x90>)
 8007e86:	69db      	ldr	r3, [r3, #28]
 8007e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e90:	4b15      	ldr	r3, [pc, #84]	; (8007ee8 <HAL_CAN_MspInit+0x90>)
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	4a14      	ldr	r2, [pc, #80]	; (8007ee8 <HAL_CAN_MspInit+0x90>)
 8007e96:	f043 0304 	orr.w	r3, r3, #4
 8007e9a:	6193      	str	r3, [r2, #24]
 8007e9c:	4b12      	ldr	r3, [pc, #72]	; (8007ee8 <HAL_CAN_MspInit+0x90>)
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	60bb      	str	r3, [r7, #8]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007ea8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007eac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007eb6:	f107 0310 	add.w	r3, r7, #16
 8007eba:	4619      	mov	r1, r3
 8007ebc:	480b      	ldr	r0, [pc, #44]	; (8007eec <HAL_CAN_MspInit+0x94>)
 8007ebe:	f000 fd61 	bl	8008984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ec6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ec8:	2302      	movs	r3, #2
 8007eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ed0:	f107 0310 	add.w	r3, r7, #16
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	4805      	ldr	r0, [pc, #20]	; (8007eec <HAL_CAN_MspInit+0x94>)
 8007ed8:	f000 fd54 	bl	8008984 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8007edc:	bf00      	nop
 8007ede:	3720      	adds	r7, #32
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	40006400 	.word	0x40006400
 8007ee8:	40021000 	.word	0x40021000
 8007eec:	40010800 	.word	0x40010800

08007ef0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b088      	sub	sp, #32
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ef8:	f107 0310 	add.w	r3, r7, #16
 8007efc:	2200      	movs	r2, #0
 8007efe:	601a      	str	r2, [r3, #0]
 8007f00:	605a      	str	r2, [r3, #4]
 8007f02:	609a      	str	r2, [r3, #8]
 8007f04:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a15      	ldr	r2, [pc, #84]	; (8007f60 <HAL_I2C_MspInit+0x70>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d123      	bne.n	8007f58 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f10:	4b14      	ldr	r3, [pc, #80]	; (8007f64 <HAL_I2C_MspInit+0x74>)
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	4a13      	ldr	r2, [pc, #76]	; (8007f64 <HAL_I2C_MspInit+0x74>)
 8007f16:	f043 0308 	orr.w	r3, r3, #8
 8007f1a:	6193      	str	r3, [r2, #24]
 8007f1c:	4b11      	ldr	r3, [pc, #68]	; (8007f64 <HAL_I2C_MspInit+0x74>)
 8007f1e:	699b      	ldr	r3, [r3, #24]
 8007f20:	f003 0308 	and.w	r3, r3, #8
 8007f24:	60fb      	str	r3, [r7, #12]
 8007f26:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007f28:	23c0      	movs	r3, #192	; 0xc0
 8007f2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007f2c:	2312      	movs	r3, #18
 8007f2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007f30:	2303      	movs	r3, #3
 8007f32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f34:	f107 0310 	add.w	r3, r7, #16
 8007f38:	4619      	mov	r1, r3
 8007f3a:	480b      	ldr	r0, [pc, #44]	; (8007f68 <HAL_I2C_MspInit+0x78>)
 8007f3c:	f000 fd22 	bl	8008984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007f40:	4b08      	ldr	r3, [pc, #32]	; (8007f64 <HAL_I2C_MspInit+0x74>)
 8007f42:	69db      	ldr	r3, [r3, #28]
 8007f44:	4a07      	ldr	r2, [pc, #28]	; (8007f64 <HAL_I2C_MspInit+0x74>)
 8007f46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f4a:	61d3      	str	r3, [r2, #28]
 8007f4c:	4b05      	ldr	r3, [pc, #20]	; (8007f64 <HAL_I2C_MspInit+0x74>)
 8007f4e:	69db      	ldr	r3, [r3, #28]
 8007f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f54:	60bb      	str	r3, [r7, #8]
 8007f56:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007f58:	bf00      	nop
 8007f5a:	3720      	adds	r7, #32
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	40005400 	.word	0x40005400
 8007f64:	40021000 	.word	0x40021000
 8007f68:	40010c00 	.word	0x40010c00

08007f6c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a0a      	ldr	r2, [pc, #40]	; (8007fa4 <HAL_I2C_MspDeInit+0x38>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d10d      	bne.n	8007f9a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8007f7e:	4b0a      	ldr	r3, [pc, #40]	; (8007fa8 <HAL_I2C_MspDeInit+0x3c>)
 8007f80:	69db      	ldr	r3, [r3, #28]
 8007f82:	4a09      	ldr	r2, [pc, #36]	; (8007fa8 <HAL_I2C_MspDeInit+0x3c>)
 8007f84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f88:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8007f8a:	2140      	movs	r1, #64	; 0x40
 8007f8c:	4807      	ldr	r0, [pc, #28]	; (8007fac <HAL_I2C_MspDeInit+0x40>)
 8007f8e:	f000 fe8d 	bl	8008cac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8007f92:	2180      	movs	r1, #128	; 0x80
 8007f94:	4805      	ldr	r0, [pc, #20]	; (8007fac <HAL_I2C_MspDeInit+0x40>)
 8007f96:	f000 fe89 	bl	8008cac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8007f9a:	bf00      	nop
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	40005400 	.word	0x40005400
 8007fa8:	40021000 	.word	0x40021000
 8007fac:	40010c00 	.word	0x40010c00

08007fb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a0d      	ldr	r2, [pc, #52]	; (8007ff4 <HAL_TIM_Base_MspInit+0x44>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d113      	bne.n	8007fea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007fc2:	4b0d      	ldr	r3, [pc, #52]	; (8007ff8 <HAL_TIM_Base_MspInit+0x48>)
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	4a0c      	ldr	r2, [pc, #48]	; (8007ff8 <HAL_TIM_Base_MspInit+0x48>)
 8007fc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007fcc:	6193      	str	r3, [r2, #24]
 8007fce:	4b0a      	ldr	r3, [pc, #40]	; (8007ff8 <HAL_TIM_Base_MspInit+0x48>)
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fd6:	60fb      	str	r3, [r7, #12]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8007fda:	2200      	movs	r2, #0
 8007fdc:	2100      	movs	r1, #0
 8007fde:	2019      	movs	r0, #25
 8007fe0:	f000 fb57 	bl	8008692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8007fe4:	2019      	movs	r0, #25
 8007fe6:	f000 fb70 	bl	80086ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8007fea:	bf00      	nop
 8007fec:	3710      	adds	r7, #16
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	40012c00 	.word	0x40012c00
 8007ff8:	40021000 	.word	0x40021000

08007ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b088      	sub	sp, #32
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008004:	f107 0310 	add.w	r3, r7, #16
 8008008:	2200      	movs	r2, #0
 800800a:	601a      	str	r2, [r3, #0]
 800800c:	605a      	str	r2, [r3, #4]
 800800e:	609a      	str	r2, [r3, #8]
 8008010:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a20      	ldr	r2, [pc, #128]	; (8008098 <HAL_UART_MspInit+0x9c>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d139      	bne.n	8008090 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800801c:	4b1f      	ldr	r3, [pc, #124]	; (800809c <HAL_UART_MspInit+0xa0>)
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	4a1e      	ldr	r2, [pc, #120]	; (800809c <HAL_UART_MspInit+0xa0>)
 8008022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008026:	6193      	str	r3, [r2, #24]
 8008028:	4b1c      	ldr	r3, [pc, #112]	; (800809c <HAL_UART_MspInit+0xa0>)
 800802a:	699b      	ldr	r3, [r3, #24]
 800802c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008030:	60fb      	str	r3, [r7, #12]
 8008032:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008034:	4b19      	ldr	r3, [pc, #100]	; (800809c <HAL_UART_MspInit+0xa0>)
 8008036:	699b      	ldr	r3, [r3, #24]
 8008038:	4a18      	ldr	r2, [pc, #96]	; (800809c <HAL_UART_MspInit+0xa0>)
 800803a:	f043 0304 	orr.w	r3, r3, #4
 800803e:	6193      	str	r3, [r2, #24]
 8008040:	4b16      	ldr	r3, [pc, #88]	; (800809c <HAL_UART_MspInit+0xa0>)
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	f003 0304 	and.w	r3, r3, #4
 8008048:	60bb      	str	r3, [r7, #8]
 800804a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800804c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008050:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008052:	2302      	movs	r3, #2
 8008054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008056:	2303      	movs	r3, #3
 8008058:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800805a:	f107 0310 	add.w	r3, r7, #16
 800805e:	4619      	mov	r1, r3
 8008060:	480f      	ldr	r0, [pc, #60]	; (80080a0 <HAL_UART_MspInit+0xa4>)
 8008062:	f000 fc8f 	bl	8008984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800806a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800806c:	2300      	movs	r3, #0
 800806e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008070:	2300      	movs	r3, #0
 8008072:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008074:	f107 0310 	add.w	r3, r7, #16
 8008078:	4619      	mov	r1, r3
 800807a:	4809      	ldr	r0, [pc, #36]	; (80080a0 <HAL_UART_MspInit+0xa4>)
 800807c:	f000 fc82 	bl	8008984 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008080:	2200      	movs	r2, #0
 8008082:	2100      	movs	r1, #0
 8008084:	2025      	movs	r0, #37	; 0x25
 8008086:	f000 fb04 	bl	8008692 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800808a:	2025      	movs	r0, #37	; 0x25
 800808c:	f000 fb1d 	bl	80086ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008090:	bf00      	nop
 8008092:	3720      	adds	r7, #32
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}
 8008098:	40013800 	.word	0x40013800
 800809c:	40021000 	.word	0x40021000
 80080a0:	40010800 	.word	0x40010800

080080a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80080a4:	b480      	push	{r7}
 80080a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80080a8:	e7fe      	b.n	80080a8 <NMI_Handler+0x4>

080080aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80080aa:	b480      	push	{r7}
 80080ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80080ae:	e7fe      	b.n	80080ae <HardFault_Handler+0x4>

080080b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80080b0:	b480      	push	{r7}
 80080b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80080b4:	e7fe      	b.n	80080b4 <MemManage_Handler+0x4>

080080b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80080b6:	b480      	push	{r7}
 80080b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80080ba:	e7fe      	b.n	80080ba <BusFault_Handler+0x4>

080080bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80080bc:	b480      	push	{r7}
 80080be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80080c0:	e7fe      	b.n	80080c0 <UsageFault_Handler+0x4>

080080c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80080c2:	b480      	push	{r7}
 80080c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80080c6:	bf00      	nop
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bc80      	pop	{r7}
 80080cc:	4770      	bx	lr

080080ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80080ce:	b480      	push	{r7}
 80080d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80080d2:	bf00      	nop
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bc80      	pop	{r7}
 80080d8:	4770      	bx	lr

080080da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80080da:	b480      	push	{r7}
 80080dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80080de:	bf00      	nop
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bc80      	pop	{r7}
 80080e4:	4770      	bx	lr

080080e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80080ea:	f000 f8bf 	bl	800826c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80080ee:	bf00      	nop
 80080f0:	bd80      	pop	{r7, pc}
	...

080080f4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80080f8:	4802      	ldr	r0, [pc, #8]	; (8008104 <TIM1_UP_IRQHandler+0x10>)
 80080fa:	f002 fdcd 	bl	800ac98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80080fe:	bf00      	nop
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	200002e4 	.word	0x200002e4

08008108 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800810c:	4802      	ldr	r0, [pc, #8]	; (8008118 <USART1_IRQHandler+0x10>)
 800810e:	f003 f9ef 	bl	800b4f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008112:	bf00      	nop
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	2000032c 	.word	0x2000032c

0800811c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008124:	4a14      	ldr	r2, [pc, #80]	; (8008178 <_sbrk+0x5c>)
 8008126:	4b15      	ldr	r3, [pc, #84]	; (800817c <_sbrk+0x60>)
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008130:	4b13      	ldr	r3, [pc, #76]	; (8008180 <_sbrk+0x64>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d102      	bne.n	800813e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008138:	4b11      	ldr	r3, [pc, #68]	; (8008180 <_sbrk+0x64>)
 800813a:	4a12      	ldr	r2, [pc, #72]	; (8008184 <_sbrk+0x68>)
 800813c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800813e:	4b10      	ldr	r3, [pc, #64]	; (8008180 <_sbrk+0x64>)
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4413      	add	r3, r2
 8008146:	693a      	ldr	r2, [r7, #16]
 8008148:	429a      	cmp	r2, r3
 800814a:	d207      	bcs.n	800815c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800814c:	f004 f88c 	bl	800c268 <__errno>
 8008150:	4603      	mov	r3, r0
 8008152:	220c      	movs	r2, #12
 8008154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800815a:	e009      	b.n	8008170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800815c:	4b08      	ldr	r3, [pc, #32]	; (8008180 <_sbrk+0x64>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008162:	4b07      	ldr	r3, [pc, #28]	; (8008180 <_sbrk+0x64>)
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4413      	add	r3, r2
 800816a:	4a05      	ldr	r2, [pc, #20]	; (8008180 <_sbrk+0x64>)
 800816c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800816e:	68fb      	ldr	r3, [r7, #12]
}
 8008170:	4618      	mov	r0, r3
 8008172:	3718      	adds	r7, #24
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	2000c000 	.word	0x2000c000
 800817c:	00000400 	.word	0x00000400
 8008180:	20000374 	.word	0x20000374
 8008184:	200004c8 	.word	0x200004c8

08008188 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008188:	b480      	push	{r7}
 800818a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800818c:	bf00      	nop
 800818e:	46bd      	mov	sp, r7
 8008190:	bc80      	pop	{r7}
 8008192:	4770      	bx	lr

08008194 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008194:	480c      	ldr	r0, [pc, #48]	; (80081c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008196:	490d      	ldr	r1, [pc, #52]	; (80081cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008198:	4a0d      	ldr	r2, [pc, #52]	; (80081d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800819a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800819c:	e002      	b.n	80081a4 <LoopCopyDataInit>

0800819e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800819e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80081a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80081a2:	3304      	adds	r3, #4

080081a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80081a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80081a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80081a8:	d3f9      	bcc.n	800819e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80081aa:	4a0a      	ldr	r2, [pc, #40]	; (80081d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80081ac:	4c0a      	ldr	r4, [pc, #40]	; (80081d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80081ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80081b0:	e001      	b.n	80081b6 <LoopFillZerobss>

080081b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80081b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80081b4:	3204      	adds	r2, #4

080081b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80081b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80081b8:	d3fb      	bcc.n	80081b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80081ba:	f7ff ffe5 	bl	8008188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80081be:	f004 f859 	bl	800c274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80081c2:	f7ff fb9d 	bl	8007900 <main>
  bx lr
 80081c6:	4770      	bx	lr
  ldr r0, =_sdata
 80081c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80081cc:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 80081d0:	0800dabc 	.word	0x0800dabc
  ldr r2, =_sbss
 80081d4:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 80081d8:	200004c4 	.word	0x200004c4

080081dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80081dc:	e7fe      	b.n	80081dc <ADC1_2_IRQHandler>
	...

080081e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80081e4:	4b08      	ldr	r3, [pc, #32]	; (8008208 <HAL_Init+0x28>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a07      	ldr	r2, [pc, #28]	; (8008208 <HAL_Init+0x28>)
 80081ea:	f043 0310 	orr.w	r3, r3, #16
 80081ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80081f0:	2003      	movs	r0, #3
 80081f2:	f000 fa43 	bl	800867c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80081f6:	200f      	movs	r0, #15
 80081f8:	f000 f808 	bl	800820c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80081fc:	f7ff fdfa 	bl	8007df4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008200:	2300      	movs	r3, #0
}
 8008202:	4618      	mov	r0, r3
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	40022000 	.word	0x40022000

0800820c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008214:	4b12      	ldr	r3, [pc, #72]	; (8008260 <HAL_InitTick+0x54>)
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	4b12      	ldr	r3, [pc, #72]	; (8008264 <HAL_InitTick+0x58>)
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	4619      	mov	r1, r3
 800821e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008222:	fbb3 f3f1 	udiv	r3, r3, r1
 8008226:	fbb2 f3f3 	udiv	r3, r2, r3
 800822a:	4618      	mov	r0, r3
 800822c:	f000 fa5b 	bl	80086e6 <HAL_SYSTICK_Config>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e00e      	b.n	8008258 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2b0f      	cmp	r3, #15
 800823e:	d80a      	bhi.n	8008256 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008240:	2200      	movs	r2, #0
 8008242:	6879      	ldr	r1, [r7, #4]
 8008244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008248:	f000 fa23 	bl	8008692 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800824c:	4a06      	ldr	r2, [pc, #24]	; (8008268 <HAL_InitTick+0x5c>)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	e000      	b.n	8008258 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008256:	2301      	movs	r3, #1
}
 8008258:	4618      	mov	r0, r3
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	200000b4 	.word	0x200000b4
 8008264:	200000bc 	.word	0x200000bc
 8008268:	200000b8 	.word	0x200000b8

0800826c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800826c:	b480      	push	{r7}
 800826e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008270:	4b05      	ldr	r3, [pc, #20]	; (8008288 <HAL_IncTick+0x1c>)
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	461a      	mov	r2, r3
 8008276:	4b05      	ldr	r3, [pc, #20]	; (800828c <HAL_IncTick+0x20>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4413      	add	r3, r2
 800827c:	4a03      	ldr	r2, [pc, #12]	; (800828c <HAL_IncTick+0x20>)
 800827e:	6013      	str	r3, [r2, #0]
}
 8008280:	bf00      	nop
 8008282:	46bd      	mov	sp, r7
 8008284:	bc80      	pop	{r7}
 8008286:	4770      	bx	lr
 8008288:	200000bc 	.word	0x200000bc
 800828c:	20000378 	.word	0x20000378

08008290 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008290:	b480      	push	{r7}
 8008292:	af00      	add	r7, sp, #0
  return uwTick;
 8008294:	4b02      	ldr	r3, [pc, #8]	; (80082a0 <HAL_GetTick+0x10>)
 8008296:	681b      	ldr	r3, [r3, #0]
}
 8008298:	4618      	mov	r0, r3
 800829a:	46bd      	mov	sp, r7
 800829c:	bc80      	pop	{r7}
 800829e:	4770      	bx	lr
 80082a0:	20000378 	.word	0x20000378

080082a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80082ac:	f7ff fff0 	bl	8008290 <HAL_GetTick>
 80082b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082bc:	d005      	beq.n	80082ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80082be:	4b0a      	ldr	r3, [pc, #40]	; (80082e8 <HAL_Delay+0x44>)
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	461a      	mov	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	4413      	add	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80082ca:	bf00      	nop
 80082cc:	f7ff ffe0 	bl	8008290 <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d8f7      	bhi.n	80082cc <HAL_Delay+0x28>
  {
  }
}
 80082dc:	bf00      	nop
 80082de:	bf00      	nop
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	200000bc 	.word	0x200000bc

080082ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e0ed      	b.n	80084da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d102      	bne.n	8008310 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7ff fda4 	bl	8007e58 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f042 0201 	orr.w	r2, r2, #1
 800831e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008320:	f7ff ffb6 	bl	8008290 <HAL_GetTick>
 8008324:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008326:	e012      	b.n	800834e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008328:	f7ff ffb2 	bl	8008290 <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	2b0a      	cmp	r3, #10
 8008334:	d90b      	bls.n	800834e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2205      	movs	r2, #5
 8008346:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e0c5      	b.n	80084da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f003 0301 	and.w	r3, r3, #1
 8008358:	2b00      	cmp	r3, #0
 800835a:	d0e5      	beq.n	8008328 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f022 0202 	bic.w	r2, r2, #2
 800836a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800836c:	f7ff ff90 	bl	8008290 <HAL_GetTick>
 8008370:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008372:	e012      	b.n	800839a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008374:	f7ff ff8c 	bl	8008290 <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	2b0a      	cmp	r3, #10
 8008380:	d90b      	bls.n	800839a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008386:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2205      	movs	r2, #5
 8008392:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e09f      	b.n	80084da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	f003 0302 	and.w	r3, r3, #2
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d1e5      	bne.n	8008374 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	7e1b      	ldrb	r3, [r3, #24]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d108      	bne.n	80083c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083be:	601a      	str	r2, [r3, #0]
 80083c0:	e007      	b.n	80083d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	7e5b      	ldrb	r3, [r3, #25]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d108      	bne.n	80083ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083e8:	601a      	str	r2, [r3, #0]
 80083ea:	e007      	b.n	80083fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80083fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	7e9b      	ldrb	r3, [r3, #26]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d108      	bne.n	8008416 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f042 0220 	orr.w	r2, r2, #32
 8008412:	601a      	str	r2, [r3, #0]
 8008414:	e007      	b.n	8008426 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f022 0220 	bic.w	r2, r2, #32
 8008424:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	7edb      	ldrb	r3, [r3, #27]
 800842a:	2b01      	cmp	r3, #1
 800842c:	d108      	bne.n	8008440 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f022 0210 	bic.w	r2, r2, #16
 800843c:	601a      	str	r2, [r3, #0]
 800843e:	e007      	b.n	8008450 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f042 0210 	orr.w	r2, r2, #16
 800844e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	7f1b      	ldrb	r3, [r3, #28]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d108      	bne.n	800846a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f042 0208 	orr.w	r2, r2, #8
 8008466:	601a      	str	r2, [r3, #0]
 8008468:	e007      	b.n	800847a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f022 0208 	bic.w	r2, r2, #8
 8008478:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	7f5b      	ldrb	r3, [r3, #29]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d108      	bne.n	8008494 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f042 0204 	orr.w	r2, r2, #4
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	e007      	b.n	80084a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f022 0204 	bic.w	r2, r2, #4
 80084a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	431a      	orrs	r2, r3
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	431a      	orrs	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	695b      	ldr	r3, [r3, #20]
 80084b8:	ea42 0103 	orr.w	r1, r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	1e5a      	subs	r2, r3, #1
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	430a      	orrs	r2, r1
 80084c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
	...

080084e4 <__NVIC_SetPriorityGrouping>:
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f003 0307 	and.w	r3, r3, #7
 80084f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80084f4:	4b0c      	ldr	r3, [pc, #48]	; (8008528 <__NVIC_SetPriorityGrouping+0x44>)
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008500:	4013      	ands	r3, r2
 8008502:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800850c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008516:	4a04      	ldr	r2, [pc, #16]	; (8008528 <__NVIC_SetPriorityGrouping+0x44>)
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	60d3      	str	r3, [r2, #12]
}
 800851c:	bf00      	nop
 800851e:	3714      	adds	r7, #20
 8008520:	46bd      	mov	sp, r7
 8008522:	bc80      	pop	{r7}
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	e000ed00 	.word	0xe000ed00

0800852c <__NVIC_GetPriorityGrouping>:
{
 800852c:	b480      	push	{r7}
 800852e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008530:	4b04      	ldr	r3, [pc, #16]	; (8008544 <__NVIC_GetPriorityGrouping+0x18>)
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	0a1b      	lsrs	r3, r3, #8
 8008536:	f003 0307 	and.w	r3, r3, #7
}
 800853a:	4618      	mov	r0, r3
 800853c:	46bd      	mov	sp, r7
 800853e:	bc80      	pop	{r7}
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	e000ed00 	.word	0xe000ed00

08008548 <__NVIC_EnableIRQ>:
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	4603      	mov	r3, r0
 8008550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008556:	2b00      	cmp	r3, #0
 8008558:	db0b      	blt.n	8008572 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800855a:	79fb      	ldrb	r3, [r7, #7]
 800855c:	f003 021f 	and.w	r2, r3, #31
 8008560:	4906      	ldr	r1, [pc, #24]	; (800857c <__NVIC_EnableIRQ+0x34>)
 8008562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008566:	095b      	lsrs	r3, r3, #5
 8008568:	2001      	movs	r0, #1
 800856a:	fa00 f202 	lsl.w	r2, r0, r2
 800856e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008572:	bf00      	nop
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	bc80      	pop	{r7}
 800857a:	4770      	bx	lr
 800857c:	e000e100 	.word	0xe000e100

08008580 <__NVIC_SetPriority>:
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	6039      	str	r1, [r7, #0]
 800858a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800858c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008590:	2b00      	cmp	r3, #0
 8008592:	db0a      	blt.n	80085aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	b2da      	uxtb	r2, r3
 8008598:	490c      	ldr	r1, [pc, #48]	; (80085cc <__NVIC_SetPriority+0x4c>)
 800859a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800859e:	0112      	lsls	r2, r2, #4
 80085a0:	b2d2      	uxtb	r2, r2
 80085a2:	440b      	add	r3, r1
 80085a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80085a8:	e00a      	b.n	80085c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	b2da      	uxtb	r2, r3
 80085ae:	4908      	ldr	r1, [pc, #32]	; (80085d0 <__NVIC_SetPriority+0x50>)
 80085b0:	79fb      	ldrb	r3, [r7, #7]
 80085b2:	f003 030f 	and.w	r3, r3, #15
 80085b6:	3b04      	subs	r3, #4
 80085b8:	0112      	lsls	r2, r2, #4
 80085ba:	b2d2      	uxtb	r2, r2
 80085bc:	440b      	add	r3, r1
 80085be:	761a      	strb	r2, [r3, #24]
}
 80085c0:	bf00      	nop
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bc80      	pop	{r7}
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	e000e100 	.word	0xe000e100
 80085d0:	e000ed00 	.word	0xe000ed00

080085d4 <NVIC_EncodePriority>:
{
 80085d4:	b480      	push	{r7}
 80085d6:	b089      	sub	sp, #36	; 0x24
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f003 0307 	and.w	r3, r3, #7
 80085e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	f1c3 0307 	rsb	r3, r3, #7
 80085ee:	2b04      	cmp	r3, #4
 80085f0:	bf28      	it	cs
 80085f2:	2304      	movcs	r3, #4
 80085f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	3304      	adds	r3, #4
 80085fa:	2b06      	cmp	r3, #6
 80085fc:	d902      	bls.n	8008604 <NVIC_EncodePriority+0x30>
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	3b03      	subs	r3, #3
 8008602:	e000      	b.n	8008606 <NVIC_EncodePriority+0x32>
 8008604:	2300      	movs	r3, #0
 8008606:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008608:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	fa02 f303 	lsl.w	r3, r2, r3
 8008612:	43da      	mvns	r2, r3
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	401a      	ands	r2, r3
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800861c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	fa01 f303 	lsl.w	r3, r1, r3
 8008626:	43d9      	mvns	r1, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800862c:	4313      	orrs	r3, r2
}
 800862e:	4618      	mov	r0, r3
 8008630:	3724      	adds	r7, #36	; 0x24
 8008632:	46bd      	mov	sp, r7
 8008634:	bc80      	pop	{r7}
 8008636:	4770      	bx	lr

08008638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	3b01      	subs	r3, #1
 8008644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008648:	d301      	bcc.n	800864e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800864a:	2301      	movs	r3, #1
 800864c:	e00f      	b.n	800866e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800864e:	4a0a      	ldr	r2, [pc, #40]	; (8008678 <SysTick_Config+0x40>)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	3b01      	subs	r3, #1
 8008654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008656:	210f      	movs	r1, #15
 8008658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800865c:	f7ff ff90 	bl	8008580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008660:	4b05      	ldr	r3, [pc, #20]	; (8008678 <SysTick_Config+0x40>)
 8008662:	2200      	movs	r2, #0
 8008664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008666:	4b04      	ldr	r3, [pc, #16]	; (8008678 <SysTick_Config+0x40>)
 8008668:	2207      	movs	r2, #7
 800866a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3708      	adds	r7, #8
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	e000e010 	.word	0xe000e010

0800867c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7ff ff2d 	bl	80084e4 <__NVIC_SetPriorityGrouping>
}
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}

08008692 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008692:	b580      	push	{r7, lr}
 8008694:	b086      	sub	sp, #24
 8008696:	af00      	add	r7, sp, #0
 8008698:	4603      	mov	r3, r0
 800869a:	60b9      	str	r1, [r7, #8]
 800869c:	607a      	str	r2, [r7, #4]
 800869e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80086a0:	2300      	movs	r3, #0
 80086a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80086a4:	f7ff ff42 	bl	800852c <__NVIC_GetPriorityGrouping>
 80086a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80086aa:	687a      	ldr	r2, [r7, #4]
 80086ac:	68b9      	ldr	r1, [r7, #8]
 80086ae:	6978      	ldr	r0, [r7, #20]
 80086b0:	f7ff ff90 	bl	80085d4 <NVIC_EncodePriority>
 80086b4:	4602      	mov	r2, r0
 80086b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086ba:	4611      	mov	r1, r2
 80086bc:	4618      	mov	r0, r3
 80086be:	f7ff ff5f 	bl	8008580 <__NVIC_SetPriority>
}
 80086c2:	bf00      	nop
 80086c4:	3718      	adds	r7, #24
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}

080086ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80086ca:	b580      	push	{r7, lr}
 80086cc:	b082      	sub	sp, #8
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	4603      	mov	r3, r0
 80086d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80086d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086d8:	4618      	mov	r0, r3
 80086da:	f7ff ff35 	bl	8008548 <__NVIC_EnableIRQ>
}
 80086de:	bf00      	nop
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b082      	sub	sp, #8
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f7ff ffa2 	bl	8008638 <SysTick_Config>
 80086f4:	4603      	mov	r3, r0
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80086fe:	b480      	push	{r7}
 8008700:	b085      	sub	sp, #20
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008710:	b2db      	uxtb	r3, r3
 8008712:	2b02      	cmp	r3, #2
 8008714:	d008      	beq.n	8008728 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2204      	movs	r2, #4
 800871a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e020      	b.n	800876a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f022 020e 	bic.w	r2, r2, #14
 8008736:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f022 0201 	bic.w	r2, r2, #1
 8008746:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008750:	2101      	movs	r1, #1
 8008752:	fa01 f202 	lsl.w	r2, r1, r2
 8008756:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2201      	movs	r2, #1
 800875c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008768:	7bfb      	ldrb	r3, [r7, #15]
}
 800876a:	4618      	mov	r0, r3
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	bc80      	pop	{r7}
 8008772:	4770      	bx	lr

08008774 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800877c:	2300      	movs	r3, #0
 800877e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b02      	cmp	r3, #2
 800878a:	d005      	beq.n	8008798 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2204      	movs	r2, #4
 8008790:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	73fb      	strb	r3, [r7, #15]
 8008796:	e0d6      	b.n	8008946 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f022 020e 	bic.w	r2, r2, #14
 80087a6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f022 0201 	bic.w	r2, r2, #1
 80087b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	461a      	mov	r2, r3
 80087be:	4b64      	ldr	r3, [pc, #400]	; (8008950 <HAL_DMA_Abort_IT+0x1dc>)
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d958      	bls.n	8008876 <HAL_DMA_Abort_IT+0x102>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a62      	ldr	r2, [pc, #392]	; (8008954 <HAL_DMA_Abort_IT+0x1e0>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d04f      	beq.n	800886e <HAL_DMA_Abort_IT+0xfa>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a61      	ldr	r2, [pc, #388]	; (8008958 <HAL_DMA_Abort_IT+0x1e4>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d048      	beq.n	800886a <HAL_DMA_Abort_IT+0xf6>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a5f      	ldr	r2, [pc, #380]	; (800895c <HAL_DMA_Abort_IT+0x1e8>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d040      	beq.n	8008864 <HAL_DMA_Abort_IT+0xf0>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a5e      	ldr	r2, [pc, #376]	; (8008960 <HAL_DMA_Abort_IT+0x1ec>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d038      	beq.n	800885e <HAL_DMA_Abort_IT+0xea>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a5c      	ldr	r2, [pc, #368]	; (8008964 <HAL_DMA_Abort_IT+0x1f0>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d030      	beq.n	8008858 <HAL_DMA_Abort_IT+0xe4>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a5b      	ldr	r2, [pc, #364]	; (8008968 <HAL_DMA_Abort_IT+0x1f4>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d028      	beq.n	8008852 <HAL_DMA_Abort_IT+0xde>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a52      	ldr	r2, [pc, #328]	; (8008950 <HAL_DMA_Abort_IT+0x1dc>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d020      	beq.n	800884c <HAL_DMA_Abort_IT+0xd8>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a57      	ldr	r2, [pc, #348]	; (800896c <HAL_DMA_Abort_IT+0x1f8>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d019      	beq.n	8008848 <HAL_DMA_Abort_IT+0xd4>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a55      	ldr	r2, [pc, #340]	; (8008970 <HAL_DMA_Abort_IT+0x1fc>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d012      	beq.n	8008844 <HAL_DMA_Abort_IT+0xd0>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a54      	ldr	r2, [pc, #336]	; (8008974 <HAL_DMA_Abort_IT+0x200>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d00a      	beq.n	800883e <HAL_DMA_Abort_IT+0xca>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a52      	ldr	r2, [pc, #328]	; (8008978 <HAL_DMA_Abort_IT+0x204>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d102      	bne.n	8008838 <HAL_DMA_Abort_IT+0xc4>
 8008832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008836:	e01b      	b.n	8008870 <HAL_DMA_Abort_IT+0xfc>
 8008838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800883c:	e018      	b.n	8008870 <HAL_DMA_Abort_IT+0xfc>
 800883e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008842:	e015      	b.n	8008870 <HAL_DMA_Abort_IT+0xfc>
 8008844:	2310      	movs	r3, #16
 8008846:	e013      	b.n	8008870 <HAL_DMA_Abort_IT+0xfc>
 8008848:	2301      	movs	r3, #1
 800884a:	e011      	b.n	8008870 <HAL_DMA_Abort_IT+0xfc>
 800884c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008850:	e00e      	b.n	8008870 <HAL_DMA_Abort_IT+0xfc>
 8008852:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008856:	e00b      	b.n	8008870 <HAL_DMA_Abort_IT+0xfc>
 8008858:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800885c:	e008      	b.n	8008870 <HAL_DMA_Abort_IT+0xfc>
 800885e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008862:	e005      	b.n	8008870 <HAL_DMA_Abort_IT+0xfc>
 8008864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008868:	e002      	b.n	8008870 <HAL_DMA_Abort_IT+0xfc>
 800886a:	2310      	movs	r3, #16
 800886c:	e000      	b.n	8008870 <HAL_DMA_Abort_IT+0xfc>
 800886e:	2301      	movs	r3, #1
 8008870:	4a42      	ldr	r2, [pc, #264]	; (800897c <HAL_DMA_Abort_IT+0x208>)
 8008872:	6053      	str	r3, [r2, #4]
 8008874:	e057      	b.n	8008926 <HAL_DMA_Abort_IT+0x1b2>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a36      	ldr	r2, [pc, #216]	; (8008954 <HAL_DMA_Abort_IT+0x1e0>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d04f      	beq.n	8008920 <HAL_DMA_Abort_IT+0x1ac>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a34      	ldr	r2, [pc, #208]	; (8008958 <HAL_DMA_Abort_IT+0x1e4>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d048      	beq.n	800891c <HAL_DMA_Abort_IT+0x1a8>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a33      	ldr	r2, [pc, #204]	; (800895c <HAL_DMA_Abort_IT+0x1e8>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d040      	beq.n	8008916 <HAL_DMA_Abort_IT+0x1a2>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a31      	ldr	r2, [pc, #196]	; (8008960 <HAL_DMA_Abort_IT+0x1ec>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d038      	beq.n	8008910 <HAL_DMA_Abort_IT+0x19c>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a30      	ldr	r2, [pc, #192]	; (8008964 <HAL_DMA_Abort_IT+0x1f0>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d030      	beq.n	800890a <HAL_DMA_Abort_IT+0x196>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a2e      	ldr	r2, [pc, #184]	; (8008968 <HAL_DMA_Abort_IT+0x1f4>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d028      	beq.n	8008904 <HAL_DMA_Abort_IT+0x190>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a26      	ldr	r2, [pc, #152]	; (8008950 <HAL_DMA_Abort_IT+0x1dc>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d020      	beq.n	80088fe <HAL_DMA_Abort_IT+0x18a>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a2a      	ldr	r2, [pc, #168]	; (800896c <HAL_DMA_Abort_IT+0x1f8>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d019      	beq.n	80088fa <HAL_DMA_Abort_IT+0x186>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a29      	ldr	r2, [pc, #164]	; (8008970 <HAL_DMA_Abort_IT+0x1fc>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d012      	beq.n	80088f6 <HAL_DMA_Abort_IT+0x182>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a27      	ldr	r2, [pc, #156]	; (8008974 <HAL_DMA_Abort_IT+0x200>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d00a      	beq.n	80088f0 <HAL_DMA_Abort_IT+0x17c>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4a26      	ldr	r2, [pc, #152]	; (8008978 <HAL_DMA_Abort_IT+0x204>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d102      	bne.n	80088ea <HAL_DMA_Abort_IT+0x176>
 80088e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088e8:	e01b      	b.n	8008922 <HAL_DMA_Abort_IT+0x1ae>
 80088ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80088ee:	e018      	b.n	8008922 <HAL_DMA_Abort_IT+0x1ae>
 80088f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80088f4:	e015      	b.n	8008922 <HAL_DMA_Abort_IT+0x1ae>
 80088f6:	2310      	movs	r3, #16
 80088f8:	e013      	b.n	8008922 <HAL_DMA_Abort_IT+0x1ae>
 80088fa:	2301      	movs	r3, #1
 80088fc:	e011      	b.n	8008922 <HAL_DMA_Abort_IT+0x1ae>
 80088fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008902:	e00e      	b.n	8008922 <HAL_DMA_Abort_IT+0x1ae>
 8008904:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008908:	e00b      	b.n	8008922 <HAL_DMA_Abort_IT+0x1ae>
 800890a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800890e:	e008      	b.n	8008922 <HAL_DMA_Abort_IT+0x1ae>
 8008910:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008914:	e005      	b.n	8008922 <HAL_DMA_Abort_IT+0x1ae>
 8008916:	f44f 7380 	mov.w	r3, #256	; 0x100
 800891a:	e002      	b.n	8008922 <HAL_DMA_Abort_IT+0x1ae>
 800891c:	2310      	movs	r3, #16
 800891e:	e000      	b.n	8008922 <HAL_DMA_Abort_IT+0x1ae>
 8008920:	2301      	movs	r3, #1
 8008922:	4a17      	ldr	r2, [pc, #92]	; (8008980 <HAL_DMA_Abort_IT+0x20c>)
 8008924:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800893a:	2b00      	cmp	r3, #0
 800893c:	d003      	beq.n	8008946 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	4798      	blx	r3
    } 
  }
  return status;
 8008946:	7bfb      	ldrb	r3, [r7, #15]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	40020080 	.word	0x40020080
 8008954:	40020008 	.word	0x40020008
 8008958:	4002001c 	.word	0x4002001c
 800895c:	40020030 	.word	0x40020030
 8008960:	40020044 	.word	0x40020044
 8008964:	40020058 	.word	0x40020058
 8008968:	4002006c 	.word	0x4002006c
 800896c:	40020408 	.word	0x40020408
 8008970:	4002041c 	.word	0x4002041c
 8008974:	40020430 	.word	0x40020430
 8008978:	40020444 	.word	0x40020444
 800897c:	40020400 	.word	0x40020400
 8008980:	40020000 	.word	0x40020000

08008984 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008984:	b480      	push	{r7}
 8008986:	b08b      	sub	sp, #44	; 0x2c
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800898e:	2300      	movs	r3, #0
 8008990:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008992:	2300      	movs	r3, #0
 8008994:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008996:	e179      	b.n	8008c8c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008998:	2201      	movs	r2, #1
 800899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800899c:	fa02 f303 	lsl.w	r3, r2, r3
 80089a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	69fa      	ldr	r2, [r7, #28]
 80089a8:	4013      	ands	r3, r2
 80089aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80089ac:	69ba      	ldr	r2, [r7, #24]
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	f040 8168 	bne.w	8008c86 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	4a96      	ldr	r2, [pc, #600]	; (8008c14 <HAL_GPIO_Init+0x290>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d05e      	beq.n	8008a7e <HAL_GPIO_Init+0xfa>
 80089c0:	4a94      	ldr	r2, [pc, #592]	; (8008c14 <HAL_GPIO_Init+0x290>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d875      	bhi.n	8008ab2 <HAL_GPIO_Init+0x12e>
 80089c6:	4a94      	ldr	r2, [pc, #592]	; (8008c18 <HAL_GPIO_Init+0x294>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d058      	beq.n	8008a7e <HAL_GPIO_Init+0xfa>
 80089cc:	4a92      	ldr	r2, [pc, #584]	; (8008c18 <HAL_GPIO_Init+0x294>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d86f      	bhi.n	8008ab2 <HAL_GPIO_Init+0x12e>
 80089d2:	4a92      	ldr	r2, [pc, #584]	; (8008c1c <HAL_GPIO_Init+0x298>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d052      	beq.n	8008a7e <HAL_GPIO_Init+0xfa>
 80089d8:	4a90      	ldr	r2, [pc, #576]	; (8008c1c <HAL_GPIO_Init+0x298>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d869      	bhi.n	8008ab2 <HAL_GPIO_Init+0x12e>
 80089de:	4a90      	ldr	r2, [pc, #576]	; (8008c20 <HAL_GPIO_Init+0x29c>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d04c      	beq.n	8008a7e <HAL_GPIO_Init+0xfa>
 80089e4:	4a8e      	ldr	r2, [pc, #568]	; (8008c20 <HAL_GPIO_Init+0x29c>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d863      	bhi.n	8008ab2 <HAL_GPIO_Init+0x12e>
 80089ea:	4a8e      	ldr	r2, [pc, #568]	; (8008c24 <HAL_GPIO_Init+0x2a0>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d046      	beq.n	8008a7e <HAL_GPIO_Init+0xfa>
 80089f0:	4a8c      	ldr	r2, [pc, #560]	; (8008c24 <HAL_GPIO_Init+0x2a0>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d85d      	bhi.n	8008ab2 <HAL_GPIO_Init+0x12e>
 80089f6:	2b12      	cmp	r3, #18
 80089f8:	d82a      	bhi.n	8008a50 <HAL_GPIO_Init+0xcc>
 80089fa:	2b12      	cmp	r3, #18
 80089fc:	d859      	bhi.n	8008ab2 <HAL_GPIO_Init+0x12e>
 80089fe:	a201      	add	r2, pc, #4	; (adr r2, 8008a04 <HAL_GPIO_Init+0x80>)
 8008a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a04:	08008a7f 	.word	0x08008a7f
 8008a08:	08008a59 	.word	0x08008a59
 8008a0c:	08008a6b 	.word	0x08008a6b
 8008a10:	08008aad 	.word	0x08008aad
 8008a14:	08008ab3 	.word	0x08008ab3
 8008a18:	08008ab3 	.word	0x08008ab3
 8008a1c:	08008ab3 	.word	0x08008ab3
 8008a20:	08008ab3 	.word	0x08008ab3
 8008a24:	08008ab3 	.word	0x08008ab3
 8008a28:	08008ab3 	.word	0x08008ab3
 8008a2c:	08008ab3 	.word	0x08008ab3
 8008a30:	08008ab3 	.word	0x08008ab3
 8008a34:	08008ab3 	.word	0x08008ab3
 8008a38:	08008ab3 	.word	0x08008ab3
 8008a3c:	08008ab3 	.word	0x08008ab3
 8008a40:	08008ab3 	.word	0x08008ab3
 8008a44:	08008ab3 	.word	0x08008ab3
 8008a48:	08008a61 	.word	0x08008a61
 8008a4c:	08008a75 	.word	0x08008a75
 8008a50:	4a75      	ldr	r2, [pc, #468]	; (8008c28 <HAL_GPIO_Init+0x2a4>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d013      	beq.n	8008a7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008a56:	e02c      	b.n	8008ab2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	623b      	str	r3, [r7, #32]
          break;
 8008a5e:	e029      	b.n	8008ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	68db      	ldr	r3, [r3, #12]
 8008a64:	3304      	adds	r3, #4
 8008a66:	623b      	str	r3, [r7, #32]
          break;
 8008a68:	e024      	b.n	8008ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	68db      	ldr	r3, [r3, #12]
 8008a6e:	3308      	adds	r3, #8
 8008a70:	623b      	str	r3, [r7, #32]
          break;
 8008a72:	e01f      	b.n	8008ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	330c      	adds	r3, #12
 8008a7a:	623b      	str	r3, [r7, #32]
          break;
 8008a7c:	e01a      	b.n	8008ab4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d102      	bne.n	8008a8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008a86:	2304      	movs	r3, #4
 8008a88:	623b      	str	r3, [r7, #32]
          break;
 8008a8a:	e013      	b.n	8008ab4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d105      	bne.n	8008aa0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008a94:	2308      	movs	r3, #8
 8008a96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	69fa      	ldr	r2, [r7, #28]
 8008a9c:	611a      	str	r2, [r3, #16]
          break;
 8008a9e:	e009      	b.n	8008ab4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008aa0:	2308      	movs	r3, #8
 8008aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	69fa      	ldr	r2, [r7, #28]
 8008aa8:	615a      	str	r2, [r3, #20]
          break;
 8008aaa:	e003      	b.n	8008ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008aac:	2300      	movs	r3, #0
 8008aae:	623b      	str	r3, [r7, #32]
          break;
 8008ab0:	e000      	b.n	8008ab4 <HAL_GPIO_Init+0x130>
          break;
 8008ab2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	2bff      	cmp	r3, #255	; 0xff
 8008ab8:	d801      	bhi.n	8008abe <HAL_GPIO_Init+0x13a>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	e001      	b.n	8008ac2 <HAL_GPIO_Init+0x13e>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	2bff      	cmp	r3, #255	; 0xff
 8008ac8:	d802      	bhi.n	8008ad0 <HAL_GPIO_Init+0x14c>
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	e002      	b.n	8008ad6 <HAL_GPIO_Init+0x152>
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	3b08      	subs	r3, #8
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	210f      	movs	r1, #15
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8008ae4:	43db      	mvns	r3, r3
 8008ae6:	401a      	ands	r2, r3
 8008ae8:	6a39      	ldr	r1, [r7, #32]
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	fa01 f303 	lsl.w	r3, r1, r3
 8008af0:	431a      	orrs	r2, r3
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 80c1 	beq.w	8008c86 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008b04:	4b49      	ldr	r3, [pc, #292]	; (8008c2c <HAL_GPIO_Init+0x2a8>)
 8008b06:	699b      	ldr	r3, [r3, #24]
 8008b08:	4a48      	ldr	r2, [pc, #288]	; (8008c2c <HAL_GPIO_Init+0x2a8>)
 8008b0a:	f043 0301 	orr.w	r3, r3, #1
 8008b0e:	6193      	str	r3, [r2, #24]
 8008b10:	4b46      	ldr	r3, [pc, #280]	; (8008c2c <HAL_GPIO_Init+0x2a8>)
 8008b12:	699b      	ldr	r3, [r3, #24]
 8008b14:	f003 0301 	and.w	r3, r3, #1
 8008b18:	60bb      	str	r3, [r7, #8]
 8008b1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008b1c:	4a44      	ldr	r2, [pc, #272]	; (8008c30 <HAL_GPIO_Init+0x2ac>)
 8008b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b20:	089b      	lsrs	r3, r3, #2
 8008b22:	3302      	adds	r3, #2
 8008b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b2c:	f003 0303 	and.w	r3, r3, #3
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	220f      	movs	r2, #15
 8008b34:	fa02 f303 	lsl.w	r3, r2, r3
 8008b38:	43db      	mvns	r3, r3
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a3c      	ldr	r2, [pc, #240]	; (8008c34 <HAL_GPIO_Init+0x2b0>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d01f      	beq.n	8008b88 <HAL_GPIO_Init+0x204>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a3b      	ldr	r2, [pc, #236]	; (8008c38 <HAL_GPIO_Init+0x2b4>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d019      	beq.n	8008b84 <HAL_GPIO_Init+0x200>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a3a      	ldr	r2, [pc, #232]	; (8008c3c <HAL_GPIO_Init+0x2b8>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d013      	beq.n	8008b80 <HAL_GPIO_Init+0x1fc>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a39      	ldr	r2, [pc, #228]	; (8008c40 <HAL_GPIO_Init+0x2bc>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d00d      	beq.n	8008b7c <HAL_GPIO_Init+0x1f8>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a38      	ldr	r2, [pc, #224]	; (8008c44 <HAL_GPIO_Init+0x2c0>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d007      	beq.n	8008b78 <HAL_GPIO_Init+0x1f4>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a37      	ldr	r2, [pc, #220]	; (8008c48 <HAL_GPIO_Init+0x2c4>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d101      	bne.n	8008b74 <HAL_GPIO_Init+0x1f0>
 8008b70:	2305      	movs	r3, #5
 8008b72:	e00a      	b.n	8008b8a <HAL_GPIO_Init+0x206>
 8008b74:	2306      	movs	r3, #6
 8008b76:	e008      	b.n	8008b8a <HAL_GPIO_Init+0x206>
 8008b78:	2304      	movs	r3, #4
 8008b7a:	e006      	b.n	8008b8a <HAL_GPIO_Init+0x206>
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e004      	b.n	8008b8a <HAL_GPIO_Init+0x206>
 8008b80:	2302      	movs	r3, #2
 8008b82:	e002      	b.n	8008b8a <HAL_GPIO_Init+0x206>
 8008b84:	2301      	movs	r3, #1
 8008b86:	e000      	b.n	8008b8a <HAL_GPIO_Init+0x206>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b8c:	f002 0203 	and.w	r2, r2, #3
 8008b90:	0092      	lsls	r2, r2, #2
 8008b92:	4093      	lsls	r3, r2
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008b9a:	4925      	ldr	r1, [pc, #148]	; (8008c30 <HAL_GPIO_Init+0x2ac>)
 8008b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b9e:	089b      	lsrs	r3, r3, #2
 8008ba0:	3302      	adds	r3, #2
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d006      	beq.n	8008bc2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008bb4:	4b25      	ldr	r3, [pc, #148]	; (8008c4c <HAL_GPIO_Init+0x2c8>)
 8008bb6:	689a      	ldr	r2, [r3, #8]
 8008bb8:	4924      	ldr	r1, [pc, #144]	; (8008c4c <HAL_GPIO_Init+0x2c8>)
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	608b      	str	r3, [r1, #8]
 8008bc0:	e006      	b.n	8008bd0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008bc2:	4b22      	ldr	r3, [pc, #136]	; (8008c4c <HAL_GPIO_Init+0x2c8>)
 8008bc4:	689a      	ldr	r2, [r3, #8]
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	43db      	mvns	r3, r3
 8008bca:	4920      	ldr	r1, [pc, #128]	; (8008c4c <HAL_GPIO_Init+0x2c8>)
 8008bcc:	4013      	ands	r3, r2
 8008bce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d006      	beq.n	8008bea <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008bdc:	4b1b      	ldr	r3, [pc, #108]	; (8008c4c <HAL_GPIO_Init+0x2c8>)
 8008bde:	68da      	ldr	r2, [r3, #12]
 8008be0:	491a      	ldr	r1, [pc, #104]	; (8008c4c <HAL_GPIO_Init+0x2c8>)
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	60cb      	str	r3, [r1, #12]
 8008be8:	e006      	b.n	8008bf8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008bea:	4b18      	ldr	r3, [pc, #96]	; (8008c4c <HAL_GPIO_Init+0x2c8>)
 8008bec:	68da      	ldr	r2, [r3, #12]
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	43db      	mvns	r3, r3
 8008bf2:	4916      	ldr	r1, [pc, #88]	; (8008c4c <HAL_GPIO_Init+0x2c8>)
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d025      	beq.n	8008c50 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008c04:	4b11      	ldr	r3, [pc, #68]	; (8008c4c <HAL_GPIO_Init+0x2c8>)
 8008c06:	685a      	ldr	r2, [r3, #4]
 8008c08:	4910      	ldr	r1, [pc, #64]	; (8008c4c <HAL_GPIO_Init+0x2c8>)
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	604b      	str	r3, [r1, #4]
 8008c10:	e025      	b.n	8008c5e <HAL_GPIO_Init+0x2da>
 8008c12:	bf00      	nop
 8008c14:	10320000 	.word	0x10320000
 8008c18:	10310000 	.word	0x10310000
 8008c1c:	10220000 	.word	0x10220000
 8008c20:	10210000 	.word	0x10210000
 8008c24:	10120000 	.word	0x10120000
 8008c28:	10110000 	.word	0x10110000
 8008c2c:	40021000 	.word	0x40021000
 8008c30:	40010000 	.word	0x40010000
 8008c34:	40010800 	.word	0x40010800
 8008c38:	40010c00 	.word	0x40010c00
 8008c3c:	40011000 	.word	0x40011000
 8008c40:	40011400 	.word	0x40011400
 8008c44:	40011800 	.word	0x40011800
 8008c48:	40011c00 	.word	0x40011c00
 8008c4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008c50:	4b15      	ldr	r3, [pc, #84]	; (8008ca8 <HAL_GPIO_Init+0x324>)
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	43db      	mvns	r3, r3
 8008c58:	4913      	ldr	r1, [pc, #76]	; (8008ca8 <HAL_GPIO_Init+0x324>)
 8008c5a:	4013      	ands	r3, r2
 8008c5c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	685b      	ldr	r3, [r3, #4]
 8008c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d006      	beq.n	8008c78 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008c6a:	4b0f      	ldr	r3, [pc, #60]	; (8008ca8 <HAL_GPIO_Init+0x324>)
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	490e      	ldr	r1, [pc, #56]	; (8008ca8 <HAL_GPIO_Init+0x324>)
 8008c70:	69bb      	ldr	r3, [r7, #24]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	600b      	str	r3, [r1, #0]
 8008c76:	e006      	b.n	8008c86 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008c78:	4b0b      	ldr	r3, [pc, #44]	; (8008ca8 <HAL_GPIO_Init+0x324>)
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	43db      	mvns	r3, r3
 8008c80:	4909      	ldr	r1, [pc, #36]	; (8008ca8 <HAL_GPIO_Init+0x324>)
 8008c82:	4013      	ands	r3, r2
 8008c84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c88:	3301      	adds	r3, #1
 8008c8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c92:	fa22 f303 	lsr.w	r3, r2, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f47f ae7e 	bne.w	8008998 <HAL_GPIO_Init+0x14>
  }
}
 8008c9c:	bf00      	nop
 8008c9e:	bf00      	nop
 8008ca0:	372c      	adds	r7, #44	; 0x2c
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bc80      	pop	{r7}
 8008ca6:	4770      	bx	lr
 8008ca8:	40010400 	.word	0x40010400

08008cac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b089      	sub	sp, #36	; 0x24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8008cba:	e0a6      	b.n	8008e0a <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc4:	683a      	ldr	r2, [r7, #0]
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f000 8099 	beq.w	8008e04 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8008cd2:	4a54      	ldr	r2, [pc, #336]	; (8008e24 <HAL_GPIO_DeInit+0x178>)
 8008cd4:	69fb      	ldr	r3, [r7, #28]
 8008cd6:	089b      	lsrs	r3, r3, #2
 8008cd8:	3302      	adds	r3, #2
 8008cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cde:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	f003 0303 	and.w	r3, r3, #3
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	220f      	movs	r2, #15
 8008cea:	fa02 f303 	lsl.w	r3, r2, r3
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a4c      	ldr	r2, [pc, #304]	; (8008e28 <HAL_GPIO_DeInit+0x17c>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d01f      	beq.n	8008d3c <HAL_GPIO_DeInit+0x90>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a4b      	ldr	r2, [pc, #300]	; (8008e2c <HAL_GPIO_DeInit+0x180>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d019      	beq.n	8008d38 <HAL_GPIO_DeInit+0x8c>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a4a      	ldr	r2, [pc, #296]	; (8008e30 <HAL_GPIO_DeInit+0x184>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d013      	beq.n	8008d34 <HAL_GPIO_DeInit+0x88>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a49      	ldr	r2, [pc, #292]	; (8008e34 <HAL_GPIO_DeInit+0x188>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d00d      	beq.n	8008d30 <HAL_GPIO_DeInit+0x84>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a48      	ldr	r2, [pc, #288]	; (8008e38 <HAL_GPIO_DeInit+0x18c>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d007      	beq.n	8008d2c <HAL_GPIO_DeInit+0x80>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a47      	ldr	r2, [pc, #284]	; (8008e3c <HAL_GPIO_DeInit+0x190>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d101      	bne.n	8008d28 <HAL_GPIO_DeInit+0x7c>
 8008d24:	2305      	movs	r3, #5
 8008d26:	e00a      	b.n	8008d3e <HAL_GPIO_DeInit+0x92>
 8008d28:	2306      	movs	r3, #6
 8008d2a:	e008      	b.n	8008d3e <HAL_GPIO_DeInit+0x92>
 8008d2c:	2304      	movs	r3, #4
 8008d2e:	e006      	b.n	8008d3e <HAL_GPIO_DeInit+0x92>
 8008d30:	2303      	movs	r3, #3
 8008d32:	e004      	b.n	8008d3e <HAL_GPIO_DeInit+0x92>
 8008d34:	2302      	movs	r3, #2
 8008d36:	e002      	b.n	8008d3e <HAL_GPIO_DeInit+0x92>
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e000      	b.n	8008d3e <HAL_GPIO_DeInit+0x92>
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	69fa      	ldr	r2, [r7, #28]
 8008d40:	f002 0203 	and.w	r2, r2, #3
 8008d44:	0092      	lsls	r2, r2, #2
 8008d46:	4093      	lsls	r3, r2
 8008d48:	697a      	ldr	r2, [r7, #20]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d132      	bne.n	8008db4 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008d4e:	4b3c      	ldr	r3, [pc, #240]	; (8008e40 <HAL_GPIO_DeInit+0x194>)
 8008d50:	681a      	ldr	r2, [r3, #0]
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	43db      	mvns	r3, r3
 8008d56:	493a      	ldr	r1, [pc, #232]	; (8008e40 <HAL_GPIO_DeInit+0x194>)
 8008d58:	4013      	ands	r3, r2
 8008d5a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008d5c:	4b38      	ldr	r3, [pc, #224]	; (8008e40 <HAL_GPIO_DeInit+0x194>)
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	43db      	mvns	r3, r3
 8008d64:	4936      	ldr	r1, [pc, #216]	; (8008e40 <HAL_GPIO_DeInit+0x194>)
 8008d66:	4013      	ands	r3, r2
 8008d68:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8008d6a:	4b35      	ldr	r3, [pc, #212]	; (8008e40 <HAL_GPIO_DeInit+0x194>)
 8008d6c:	68da      	ldr	r2, [r3, #12]
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	43db      	mvns	r3, r3
 8008d72:	4933      	ldr	r1, [pc, #204]	; (8008e40 <HAL_GPIO_DeInit+0x194>)
 8008d74:	4013      	ands	r3, r2
 8008d76:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8008d78:	4b31      	ldr	r3, [pc, #196]	; (8008e40 <HAL_GPIO_DeInit+0x194>)
 8008d7a:	689a      	ldr	r2, [r3, #8]
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	43db      	mvns	r3, r3
 8008d80:	492f      	ldr	r1, [pc, #188]	; (8008e40 <HAL_GPIO_DeInit+0x194>)
 8008d82:	4013      	ands	r3, r2
 8008d84:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	f003 0303 	and.w	r3, r3, #3
 8008d8c:	009b      	lsls	r3, r3, #2
 8008d8e:	220f      	movs	r2, #15
 8008d90:	fa02 f303 	lsl.w	r3, r2, r3
 8008d94:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8008d96:	4a23      	ldr	r2, [pc, #140]	; (8008e24 <HAL_GPIO_DeInit+0x178>)
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	089b      	lsrs	r3, r3, #2
 8008d9c:	3302      	adds	r3, #2
 8008d9e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	43da      	mvns	r2, r3
 8008da6:	481f      	ldr	r0, [pc, #124]	; (8008e24 <HAL_GPIO_DeInit+0x178>)
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	089b      	lsrs	r3, r3, #2
 8008dac:	400a      	ands	r2, r1
 8008dae:	3302      	adds	r3, #2
 8008db0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	2bff      	cmp	r3, #255	; 0xff
 8008db8:	d801      	bhi.n	8008dbe <HAL_GPIO_DeInit+0x112>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	e001      	b.n	8008dc2 <HAL_GPIO_DeInit+0x116>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	2bff      	cmp	r3, #255	; 0xff
 8008dc8:	d802      	bhi.n	8008dd0 <HAL_GPIO_DeInit+0x124>
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	e002      	b.n	8008dd6 <HAL_GPIO_DeInit+0x12a>
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	3b08      	subs	r3, #8
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	210f      	movs	r1, #15
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	fa01 f303 	lsl.w	r3, r1, r3
 8008de4:	43db      	mvns	r3, r3
 8008de6:	401a      	ands	r2, r3
 8008de8:	2104      	movs	r1, #4
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	fa01 f303 	lsl.w	r3, r1, r3
 8008df0:	431a      	orrs	r2, r3
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68da      	ldr	r2, [r3, #12]
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	43db      	mvns	r3, r3
 8008dfe:	401a      	ands	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	3301      	adds	r3, #1
 8008e08:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	69fb      	ldr	r3, [r7, #28]
 8008e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f47f af52 	bne.w	8008cbc <HAL_GPIO_DeInit+0x10>
  }
}
 8008e18:	bf00      	nop
 8008e1a:	bf00      	nop
 8008e1c:	3724      	adds	r7, #36	; 0x24
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bc80      	pop	{r7}
 8008e22:	4770      	bx	lr
 8008e24:	40010000 	.word	0x40010000
 8008e28:	40010800 	.word	0x40010800
 8008e2c:	40010c00 	.word	0x40010c00
 8008e30:	40011000 	.word	0x40011000
 8008e34:	40011400 	.word	0x40011400
 8008e38:	40011800 	.word	0x40011800
 8008e3c:	40011c00 	.word	0x40011c00
 8008e40:	40010400 	.word	0x40010400

08008e44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	689a      	ldr	r2, [r3, #8]
 8008e54:	887b      	ldrh	r3, [r7, #2]
 8008e56:	4013      	ands	r3, r2
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d002      	beq.n	8008e62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	73fb      	strb	r3, [r7, #15]
 8008e60:	e001      	b.n	8008e66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008e62:	2300      	movs	r3, #0
 8008e64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3714      	adds	r7, #20
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bc80      	pop	{r7}
 8008e70:	4770      	bx	lr

08008e72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e72:	b480      	push	{r7}
 8008e74:	b083      	sub	sp, #12
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
 8008e7a:	460b      	mov	r3, r1
 8008e7c:	807b      	strh	r3, [r7, #2]
 8008e7e:	4613      	mov	r3, r2
 8008e80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008e82:	787b      	ldrb	r3, [r7, #1]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d003      	beq.n	8008e90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e88:	887a      	ldrh	r2, [r7, #2]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008e8e:	e003      	b.n	8008e98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008e90:	887b      	ldrh	r3, [r7, #2]
 8008e92:	041a      	lsls	r2, r3, #16
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	611a      	str	r2, [r3, #16]
}
 8008e98:	bf00      	nop
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bc80      	pop	{r7}
 8008ea0:	4770      	bx	lr

08008ea2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b085      	sub	sp, #20
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	460b      	mov	r3, r1
 8008eac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68db      	ldr	r3, [r3, #12]
 8008eb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008eb4:	887a      	ldrh	r2, [r7, #2]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	4013      	ands	r3, r2
 8008eba:	041a      	lsls	r2, r3, #16
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	43d9      	mvns	r1, r3
 8008ec0:	887b      	ldrh	r3, [r7, #2]
 8008ec2:	400b      	ands	r3, r1
 8008ec4:	431a      	orrs	r2, r3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	611a      	str	r2, [r3, #16]
}
 8008eca:	bf00      	nop
 8008ecc:	3714      	adds	r7, #20
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bc80      	pop	{r7}
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d101      	bne.n	8008ee6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e12b      	b.n	800913e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d106      	bne.n	8008f00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7fe fff8 	bl	8007ef0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2224      	movs	r2, #36	; 0x24
 8008f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f022 0201 	bic.w	r2, r2, #1
 8008f16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008f38:	f001 fdb8 	bl	800aaac <HAL_RCC_GetPCLK1Freq>
 8008f3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	4a81      	ldr	r2, [pc, #516]	; (8009148 <HAL_I2C_Init+0x274>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d807      	bhi.n	8008f58 <HAL_I2C_Init+0x84>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	4a80      	ldr	r2, [pc, #512]	; (800914c <HAL_I2C_Init+0x278>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	bf94      	ite	ls
 8008f50:	2301      	movls	r3, #1
 8008f52:	2300      	movhi	r3, #0
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	e006      	b.n	8008f66 <HAL_I2C_Init+0x92>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	4a7d      	ldr	r2, [pc, #500]	; (8009150 <HAL_I2C_Init+0x27c>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	bf94      	ite	ls
 8008f60:	2301      	movls	r3, #1
 8008f62:	2300      	movhi	r3, #0
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d001      	beq.n	8008f6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e0e7      	b.n	800913e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	4a78      	ldr	r2, [pc, #480]	; (8009154 <HAL_I2C_Init+0x280>)
 8008f72:	fba2 2303 	umull	r2, r3, r2, r3
 8008f76:	0c9b      	lsrs	r3, r3, #18
 8008f78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	430a      	orrs	r2, r1
 8008f8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	6a1b      	ldr	r3, [r3, #32]
 8008f94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	4a6a      	ldr	r2, [pc, #424]	; (8009148 <HAL_I2C_Init+0x274>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d802      	bhi.n	8008fa8 <HAL_I2C_Init+0xd4>
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	e009      	b.n	8008fbc <HAL_I2C_Init+0xe8>
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008fae:	fb02 f303 	mul.w	r3, r2, r3
 8008fb2:	4a69      	ldr	r2, [pc, #420]	; (8009158 <HAL_I2C_Init+0x284>)
 8008fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb8:	099b      	lsrs	r3, r3, #6
 8008fba:	3301      	adds	r3, #1
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	6812      	ldr	r2, [r2, #0]
 8008fc0:	430b      	orrs	r3, r1
 8008fc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	69db      	ldr	r3, [r3, #28]
 8008fca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008fce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	495c      	ldr	r1, [pc, #368]	; (8009148 <HAL_I2C_Init+0x274>)
 8008fd8:	428b      	cmp	r3, r1
 8008fda:	d819      	bhi.n	8009010 <HAL_I2C_Init+0x13c>
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	1e59      	subs	r1, r3, #1
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	005b      	lsls	r3, r3, #1
 8008fe6:	fbb1 f3f3 	udiv	r3, r1, r3
 8008fea:	1c59      	adds	r1, r3, #1
 8008fec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008ff0:	400b      	ands	r3, r1
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00a      	beq.n	800900c <HAL_I2C_Init+0x138>
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	1e59      	subs	r1, r3, #1
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	005b      	lsls	r3, r3, #1
 8009000:	fbb1 f3f3 	udiv	r3, r1, r3
 8009004:	3301      	adds	r3, #1
 8009006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800900a:	e051      	b.n	80090b0 <HAL_I2C_Init+0x1dc>
 800900c:	2304      	movs	r3, #4
 800900e:	e04f      	b.n	80090b0 <HAL_I2C_Init+0x1dc>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d111      	bne.n	800903c <HAL_I2C_Init+0x168>
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	1e58      	subs	r0, r3, #1
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6859      	ldr	r1, [r3, #4]
 8009020:	460b      	mov	r3, r1
 8009022:	005b      	lsls	r3, r3, #1
 8009024:	440b      	add	r3, r1
 8009026:	fbb0 f3f3 	udiv	r3, r0, r3
 800902a:	3301      	adds	r3, #1
 800902c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009030:	2b00      	cmp	r3, #0
 8009032:	bf0c      	ite	eq
 8009034:	2301      	moveq	r3, #1
 8009036:	2300      	movne	r3, #0
 8009038:	b2db      	uxtb	r3, r3
 800903a:	e012      	b.n	8009062 <HAL_I2C_Init+0x18e>
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	1e58      	subs	r0, r3, #1
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6859      	ldr	r1, [r3, #4]
 8009044:	460b      	mov	r3, r1
 8009046:	009b      	lsls	r3, r3, #2
 8009048:	440b      	add	r3, r1
 800904a:	0099      	lsls	r1, r3, #2
 800904c:	440b      	add	r3, r1
 800904e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009052:	3301      	adds	r3, #1
 8009054:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009058:	2b00      	cmp	r3, #0
 800905a:	bf0c      	ite	eq
 800905c:	2301      	moveq	r3, #1
 800905e:	2300      	movne	r3, #0
 8009060:	b2db      	uxtb	r3, r3
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <HAL_I2C_Init+0x196>
 8009066:	2301      	movs	r3, #1
 8009068:	e022      	b.n	80090b0 <HAL_I2C_Init+0x1dc>
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10e      	bne.n	8009090 <HAL_I2C_Init+0x1bc>
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	1e58      	subs	r0, r3, #1
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6859      	ldr	r1, [r3, #4]
 800907a:	460b      	mov	r3, r1
 800907c:	005b      	lsls	r3, r3, #1
 800907e:	440b      	add	r3, r1
 8009080:	fbb0 f3f3 	udiv	r3, r0, r3
 8009084:	3301      	adds	r3, #1
 8009086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800908a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800908e:	e00f      	b.n	80090b0 <HAL_I2C_Init+0x1dc>
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	1e58      	subs	r0, r3, #1
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6859      	ldr	r1, [r3, #4]
 8009098:	460b      	mov	r3, r1
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	440b      	add	r3, r1
 800909e:	0099      	lsls	r1, r3, #2
 80090a0:	440b      	add	r3, r1
 80090a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80090a6:	3301      	adds	r3, #1
 80090a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090b0:	6879      	ldr	r1, [r7, #4]
 80090b2:	6809      	ldr	r1, [r1, #0]
 80090b4:	4313      	orrs	r3, r2
 80090b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	69da      	ldr	r2, [r3, #28]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a1b      	ldr	r3, [r3, #32]
 80090ca:	431a      	orrs	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	430a      	orrs	r2, r1
 80090d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80090de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	6911      	ldr	r1, [r2, #16]
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	68d2      	ldr	r2, [r2, #12]
 80090ea:	4311      	orrs	r1, r2
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	6812      	ldr	r2, [r2, #0]
 80090f0:	430b      	orrs	r3, r1
 80090f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	695a      	ldr	r2, [r3, #20]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	431a      	orrs	r2, r3
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	430a      	orrs	r2, r1
 800910e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f042 0201 	orr.w	r2, r2, #1
 800911e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2220      	movs	r2, #32
 800912a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2200      	movs	r2, #0
 8009138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	000186a0 	.word	0x000186a0
 800914c:	001e847f 	.word	0x001e847f
 8009150:	003d08ff 	.word	0x003d08ff
 8009154:	431bde83 	.word	0x431bde83
 8009158:	10624dd3 	.word	0x10624dd3

0800915c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e021      	b.n	80091b2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2224      	movs	r2, #36	; 0x24
 8009172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f022 0201 	bic.w	r2, r2, #1
 8009184:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7fe fef0 	bl	8007f6c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2200      	movs	r2, #0
 800919e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091b0:	2300      	movs	r3, #0
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b088      	sub	sp, #32
 80091c0:	af02      	add	r7, sp, #8
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	607a      	str	r2, [r7, #4]
 80091c6:	461a      	mov	r2, r3
 80091c8:	460b      	mov	r3, r1
 80091ca:	817b      	strh	r3, [r7, #10]
 80091cc:	4613      	mov	r3, r2
 80091ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80091d0:	f7ff f85e 	bl	8008290 <HAL_GetTick>
 80091d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	2b20      	cmp	r3, #32
 80091e0:	f040 80e0 	bne.w	80093a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	2319      	movs	r3, #25
 80091ea:	2201      	movs	r2, #1
 80091ec:	4970      	ldr	r1, [pc, #448]	; (80093b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	f000 fe5c 	bl	8009eac <I2C_WaitOnFlagUntilTimeout>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80091fa:	2302      	movs	r3, #2
 80091fc:	e0d3      	b.n	80093a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009204:	2b01      	cmp	r3, #1
 8009206:	d101      	bne.n	800920c <HAL_I2C_Master_Transmit+0x50>
 8009208:	2302      	movs	r3, #2
 800920a:	e0cc      	b.n	80093a6 <HAL_I2C_Master_Transmit+0x1ea>
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 0301 	and.w	r3, r3, #1
 800921e:	2b01      	cmp	r3, #1
 8009220:	d007      	beq.n	8009232 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	681a      	ldr	r2, [r3, #0]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f042 0201 	orr.w	r2, r2, #1
 8009230:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009240:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2221      	movs	r2, #33	; 0x21
 8009246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2210      	movs	r2, #16
 800924e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	893a      	ldrh	r2, [r7, #8]
 8009262:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009268:	b29a      	uxth	r2, r3
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	4a50      	ldr	r2, [pc, #320]	; (80093b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8009272:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009274:	8979      	ldrh	r1, [r7, #10]
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	6a3a      	ldr	r2, [r7, #32]
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 fc16 	bl	8009aac <I2C_MasterRequestWrite>
 8009280:	4603      	mov	r3, r0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d001      	beq.n	800928a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e08d      	b.n	80093a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800928a:	2300      	movs	r3, #0
 800928c:	613b      	str	r3, [r7, #16]
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	695b      	ldr	r3, [r3, #20]
 8009294:	613b      	str	r3, [r7, #16]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	699b      	ldr	r3, [r3, #24]
 800929c:	613b      	str	r3, [r7, #16]
 800929e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80092a0:	e066      	b.n	8009370 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	6a39      	ldr	r1, [r7, #32]
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f000 ff1a 	bl	800a0e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00d      	beq.n	80092ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b6:	2b04      	cmp	r3, #4
 80092b8:	d107      	bne.n	80092ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e06b      	b.n	80093a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092d2:	781a      	ldrb	r2, [r3, #0]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092de:	1c5a      	adds	r2, r3, #1
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	3b01      	subs	r3, #1
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092f6:	3b01      	subs	r3, #1
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	695b      	ldr	r3, [r3, #20]
 8009304:	f003 0304 	and.w	r3, r3, #4
 8009308:	2b04      	cmp	r3, #4
 800930a:	d11b      	bne.n	8009344 <HAL_I2C_Master_Transmit+0x188>
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009310:	2b00      	cmp	r3, #0
 8009312:	d017      	beq.n	8009344 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009318:	781a      	ldrb	r2, [r3, #0]
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009324:	1c5a      	adds	r2, r3, #1
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800932e:	b29b      	uxth	r3, r3
 8009330:	3b01      	subs	r3, #1
 8009332:	b29a      	uxth	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800933c:	3b01      	subs	r3, #1
 800933e:	b29a      	uxth	r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	6a39      	ldr	r1, [r7, #32]
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f000 ff11 	bl	800a170 <I2C_WaitOnBTFFlagUntilTimeout>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00d      	beq.n	8009370 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009358:	2b04      	cmp	r3, #4
 800935a:	d107      	bne.n	800936c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800936a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	e01a      	b.n	80093a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009374:	2b00      	cmp	r3, #0
 8009376:	d194      	bne.n	80092a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	2220      	movs	r2, #32
 800938c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2200      	movs	r2, #0
 8009394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80093a0:	2300      	movs	r3, #0
 80093a2:	e000      	b.n	80093a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80093a4:	2302      	movs	r3, #2
  }
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3718      	adds	r7, #24
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	00100002 	.word	0x00100002
 80093b4:	ffff0000 	.word	0xffff0000

080093b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b088      	sub	sp, #32
 80093bc:	af02      	add	r7, sp, #8
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	4608      	mov	r0, r1
 80093c2:	4611      	mov	r1, r2
 80093c4:	461a      	mov	r2, r3
 80093c6:	4603      	mov	r3, r0
 80093c8:	817b      	strh	r3, [r7, #10]
 80093ca:	460b      	mov	r3, r1
 80093cc:	813b      	strh	r3, [r7, #8]
 80093ce:	4613      	mov	r3, r2
 80093d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80093d2:	f7fe ff5d 	bl	8008290 <HAL_GetTick>
 80093d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	2b20      	cmp	r3, #32
 80093e2:	f040 80d9 	bne.w	8009598 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	9300      	str	r3, [sp, #0]
 80093ea:	2319      	movs	r3, #25
 80093ec:	2201      	movs	r2, #1
 80093ee:	496d      	ldr	r1, [pc, #436]	; (80095a4 <HAL_I2C_Mem_Write+0x1ec>)
 80093f0:	68f8      	ldr	r0, [r7, #12]
 80093f2:	f000 fd5b 	bl	8009eac <I2C_WaitOnFlagUntilTimeout>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d001      	beq.n	8009400 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80093fc:	2302      	movs	r3, #2
 80093fe:	e0cc      	b.n	800959a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009406:	2b01      	cmp	r3, #1
 8009408:	d101      	bne.n	800940e <HAL_I2C_Mem_Write+0x56>
 800940a:	2302      	movs	r3, #2
 800940c:	e0c5      	b.n	800959a <HAL_I2C_Mem_Write+0x1e2>
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2201      	movs	r2, #1
 8009412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f003 0301 	and.w	r3, r3, #1
 8009420:	2b01      	cmp	r3, #1
 8009422:	d007      	beq.n	8009434 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f042 0201 	orr.w	r2, r2, #1
 8009432:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009442:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2221      	movs	r2, #33	; 0x21
 8009448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2240      	movs	r2, #64	; 0x40
 8009450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2200      	movs	r2, #0
 8009458:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6a3a      	ldr	r2, [r7, #32]
 800945e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009464:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800946a:	b29a      	uxth	r2, r3
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	4a4d      	ldr	r2, [pc, #308]	; (80095a8 <HAL_I2C_Mem_Write+0x1f0>)
 8009474:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009476:	88f8      	ldrh	r0, [r7, #6]
 8009478:	893a      	ldrh	r2, [r7, #8]
 800947a:	8979      	ldrh	r1, [r7, #10]
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	9301      	str	r3, [sp, #4]
 8009480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	4603      	mov	r3, r0
 8009486:	68f8      	ldr	r0, [r7, #12]
 8009488:	f000 fb92 	bl	8009bb0 <I2C_RequestMemoryWrite>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d052      	beq.n	8009538 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e081      	b.n	800959a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009496:	697a      	ldr	r2, [r7, #20]
 8009498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f000 fe20 	bl	800a0e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00d      	beq.n	80094c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094aa:	2b04      	cmp	r3, #4
 80094ac:	d107      	bne.n	80094be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e06b      	b.n	800959a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c6:	781a      	ldrb	r2, [r3, #0]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d2:	1c5a      	adds	r2, r3, #1
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094dc:	3b01      	subs	r3, #1
 80094de:	b29a      	uxth	r2, r3
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	3b01      	subs	r3, #1
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	695b      	ldr	r3, [r3, #20]
 80094f8:	f003 0304 	and.w	r3, r3, #4
 80094fc:	2b04      	cmp	r3, #4
 80094fe:	d11b      	bne.n	8009538 <HAL_I2C_Mem_Write+0x180>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009504:	2b00      	cmp	r3, #0
 8009506:	d017      	beq.n	8009538 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800950c:	781a      	ldrb	r2, [r3, #0]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009518:	1c5a      	adds	r2, r3, #1
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009522:	3b01      	subs	r3, #1
 8009524:	b29a      	uxth	r2, r3
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800952e:	b29b      	uxth	r3, r3
 8009530:	3b01      	subs	r3, #1
 8009532:	b29a      	uxth	r2, r3
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800953c:	2b00      	cmp	r3, #0
 800953e:	d1aa      	bne.n	8009496 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009540:	697a      	ldr	r2, [r7, #20]
 8009542:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f000 fe13 	bl	800a170 <I2C_WaitOnBTFFlagUntilTimeout>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00d      	beq.n	800956c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009554:	2b04      	cmp	r3, #4
 8009556:	d107      	bne.n	8009568 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009566:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e016      	b.n	800959a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800957a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2220      	movs	r2, #32
 8009580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	e000      	b.n	800959a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009598:	2302      	movs	r3, #2
  }
}
 800959a:	4618      	mov	r0, r3
 800959c:	3718      	adds	r7, #24
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	00100002 	.word	0x00100002
 80095a8:	ffff0000 	.word	0xffff0000

080095ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b08c      	sub	sp, #48	; 0x30
 80095b0:	af02      	add	r7, sp, #8
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	4608      	mov	r0, r1
 80095b6:	4611      	mov	r1, r2
 80095b8:	461a      	mov	r2, r3
 80095ba:	4603      	mov	r3, r0
 80095bc:	817b      	strh	r3, [r7, #10]
 80095be:	460b      	mov	r3, r1
 80095c0:	813b      	strh	r3, [r7, #8]
 80095c2:	4613      	mov	r3, r2
 80095c4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80095c6:	2300      	movs	r3, #0
 80095c8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80095ca:	f7fe fe61 	bl	8008290 <HAL_GetTick>
 80095ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	2b20      	cmp	r3, #32
 80095da:	f040 8244 	bne.w	8009a66 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80095de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	2319      	movs	r3, #25
 80095e4:	2201      	movs	r2, #1
 80095e6:	4982      	ldr	r1, [pc, #520]	; (80097f0 <HAL_I2C_Mem_Read+0x244>)
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f000 fc5f 	bl	8009eac <I2C_WaitOnFlagUntilTimeout>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d001      	beq.n	80095f8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80095f4:	2302      	movs	r3, #2
 80095f6:	e237      	b.n	8009a68 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d101      	bne.n	8009606 <HAL_I2C_Mem_Read+0x5a>
 8009602:	2302      	movs	r3, #2
 8009604:	e230      	b.n	8009a68 <HAL_I2C_Mem_Read+0x4bc>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2201      	movs	r2, #1
 800960a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f003 0301 	and.w	r3, r3, #1
 8009618:	2b01      	cmp	r3, #1
 800961a:	d007      	beq.n	800962c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f042 0201 	orr.w	r2, r2, #1
 800962a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800963a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2222      	movs	r2, #34	; 0x22
 8009640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2240      	movs	r2, #64	; 0x40
 8009648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009656:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800965c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009662:	b29a      	uxth	r2, r3
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	4a62      	ldr	r2, [pc, #392]	; (80097f4 <HAL_I2C_Mem_Read+0x248>)
 800966c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800966e:	88f8      	ldrh	r0, [r7, #6]
 8009670:	893a      	ldrh	r2, [r7, #8]
 8009672:	8979      	ldrh	r1, [r7, #10]
 8009674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009676:	9301      	str	r3, [sp, #4]
 8009678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967a:	9300      	str	r3, [sp, #0]
 800967c:	4603      	mov	r3, r0
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	f000 fb2c 	bl	8009cdc <I2C_RequestMemoryRead>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d001      	beq.n	800968e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	e1ec      	b.n	8009a68 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009692:	2b00      	cmp	r3, #0
 8009694:	d113      	bne.n	80096be <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009696:	2300      	movs	r3, #0
 8009698:	61fb      	str	r3, [r7, #28]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	695b      	ldr	r3, [r3, #20]
 80096a0:	61fb      	str	r3, [r7, #28]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	61fb      	str	r3, [r7, #28]
 80096aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096ba:	601a      	str	r2, [r3, #0]
 80096bc:	e1c0      	b.n	8009a40 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d11e      	bne.n	8009704 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80096d6:	b672      	cpsid	i
}
 80096d8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096da:	2300      	movs	r3, #0
 80096dc:	61bb      	str	r3, [r7, #24]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	695b      	ldr	r3, [r3, #20]
 80096e4:	61bb      	str	r3, [r7, #24]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	699b      	ldr	r3, [r3, #24]
 80096ec:	61bb      	str	r3, [r7, #24]
 80096ee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009700:	b662      	cpsie	i
}
 8009702:	e035      	b.n	8009770 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009708:	2b02      	cmp	r3, #2
 800970a:	d11e      	bne.n	800974a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800971a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800971c:	b672      	cpsid	i
}
 800971e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009720:	2300      	movs	r3, #0
 8009722:	617b      	str	r3, [r7, #20]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	695b      	ldr	r3, [r3, #20]
 800972a:	617b      	str	r3, [r7, #20]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	699b      	ldr	r3, [r3, #24]
 8009732:	617b      	str	r3, [r7, #20]
 8009734:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009744:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009746:	b662      	cpsie	i
}
 8009748:	e012      	b.n	8009770 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009758:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800975a:	2300      	movs	r3, #0
 800975c:	613b      	str	r3, [r7, #16]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	695b      	ldr	r3, [r3, #20]
 8009764:	613b      	str	r3, [r7, #16]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	699b      	ldr	r3, [r3, #24]
 800976c:	613b      	str	r3, [r7, #16]
 800976e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009770:	e166      	b.n	8009a40 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009776:	2b03      	cmp	r3, #3
 8009778:	f200 811f 	bhi.w	80099ba <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009780:	2b01      	cmp	r3, #1
 8009782:	d123      	bne.n	80097cc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009786:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009788:	68f8      	ldr	r0, [r7, #12]
 800978a:	f000 fd39 	bl	800a200 <I2C_WaitOnRXNEFlagUntilTimeout>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d001      	beq.n	8009798 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009794:	2301      	movs	r3, #1
 8009796:	e167      	b.n	8009a68 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	691a      	ldr	r2, [r3, #16]
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a2:	b2d2      	uxtb	r2, r2
 80097a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097aa:	1c5a      	adds	r2, r3, #1
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b4:	3b01      	subs	r3, #1
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	3b01      	subs	r3, #1
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80097ca:	e139      	b.n	8009a40 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097d0:	2b02      	cmp	r3, #2
 80097d2:	d152      	bne.n	800987a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80097d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d6:	9300      	str	r3, [sp, #0]
 80097d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097da:	2200      	movs	r2, #0
 80097dc:	4906      	ldr	r1, [pc, #24]	; (80097f8 <HAL_I2C_Mem_Read+0x24c>)
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f000 fb64 	bl	8009eac <I2C_WaitOnFlagUntilTimeout>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d008      	beq.n	80097fc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80097ea:	2301      	movs	r3, #1
 80097ec:	e13c      	b.n	8009a68 <HAL_I2C_Mem_Read+0x4bc>
 80097ee:	bf00      	nop
 80097f0:	00100002 	.word	0x00100002
 80097f4:	ffff0000 	.word	0xffff0000
 80097f8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80097fc:	b672      	cpsid	i
}
 80097fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800980e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	691a      	ldr	r2, [r3, #16]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981a:	b2d2      	uxtb	r2, r2
 800981c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009822:	1c5a      	adds	r2, r3, #1
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800982c:	3b01      	subs	r3, #1
 800982e:	b29a      	uxth	r2, r3
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009838:	b29b      	uxth	r3, r3
 800983a:	3b01      	subs	r3, #1
 800983c:	b29a      	uxth	r2, r3
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009842:	b662      	cpsie	i
}
 8009844:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	691a      	ldr	r2, [r3, #16]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009850:	b2d2      	uxtb	r2, r2
 8009852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009858:	1c5a      	adds	r2, r3, #1
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009862:	3b01      	subs	r3, #1
 8009864:	b29a      	uxth	r2, r3
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800986e:	b29b      	uxth	r3, r3
 8009870:	3b01      	subs	r3, #1
 8009872:	b29a      	uxth	r2, r3
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009878:	e0e2      	b.n	8009a40 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800987a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009880:	2200      	movs	r2, #0
 8009882:	497b      	ldr	r1, [pc, #492]	; (8009a70 <HAL_I2C_Mem_Read+0x4c4>)
 8009884:	68f8      	ldr	r0, [r7, #12]
 8009886:	f000 fb11 	bl	8009eac <I2C_WaitOnFlagUntilTimeout>
 800988a:	4603      	mov	r3, r0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d001      	beq.n	8009894 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	e0e9      	b.n	8009a68 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80098a4:	b672      	cpsid	i
}
 80098a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	691a      	ldr	r2, [r3, #16]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b2:	b2d2      	uxtb	r2, r2
 80098b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ba:	1c5a      	adds	r2, r3, #1
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098c4:	3b01      	subs	r3, #1
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	3b01      	subs	r3, #1
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80098da:	4b66      	ldr	r3, [pc, #408]	; (8009a74 <HAL_I2C_Mem_Read+0x4c8>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	08db      	lsrs	r3, r3, #3
 80098e0:	4a65      	ldr	r2, [pc, #404]	; (8009a78 <HAL_I2C_Mem_Read+0x4cc>)
 80098e2:	fba2 2303 	umull	r2, r3, r2, r3
 80098e6:	0a1a      	lsrs	r2, r3, #8
 80098e8:	4613      	mov	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	4413      	add	r3, r2
 80098ee:	00da      	lsls	r2, r3, #3
 80098f0:	1ad3      	subs	r3, r2, r3
 80098f2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80098fa:	6a3b      	ldr	r3, [r7, #32]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d118      	bne.n	8009932 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2220      	movs	r2, #32
 800990a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991a:	f043 0220 	orr.w	r2, r3, #32
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009922:	b662      	cpsie	i
}
 8009924:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e09a      	b.n	8009a68 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	695b      	ldr	r3, [r3, #20]
 8009938:	f003 0304 	and.w	r3, r3, #4
 800993c:	2b04      	cmp	r3, #4
 800993e:	d1d9      	bne.n	80098f4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800994e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	691a      	ldr	r2, [r3, #16]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995a:	b2d2      	uxtb	r2, r2
 800995c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009962:	1c5a      	adds	r2, r3, #1
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800996c:	3b01      	subs	r3, #1
 800996e:	b29a      	uxth	r2, r3
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009978:	b29b      	uxth	r3, r3
 800997a:	3b01      	subs	r3, #1
 800997c:	b29a      	uxth	r2, r3
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009982:	b662      	cpsie	i
}
 8009984:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	691a      	ldr	r2, [r3, #16]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009990:	b2d2      	uxtb	r2, r2
 8009992:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009998:	1c5a      	adds	r2, r3, #1
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099a2:	3b01      	subs	r3, #1
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	3b01      	subs	r3, #1
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80099b8:	e042      	b.n	8009a40 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80099ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80099be:	68f8      	ldr	r0, [r7, #12]
 80099c0:	f000 fc1e 	bl	800a200 <I2C_WaitOnRXNEFlagUntilTimeout>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d001      	beq.n	80099ce <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	e04c      	b.n	8009a68 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	691a      	ldr	r2, [r3, #16]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d8:	b2d2      	uxtb	r2, r2
 80099da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e0:	1c5a      	adds	r2, r3, #1
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099ea:	3b01      	subs	r3, #1
 80099ec:	b29a      	uxth	r2, r3
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	3b01      	subs	r3, #1
 80099fa:	b29a      	uxth	r2, r3
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	f003 0304 	and.w	r3, r3, #4
 8009a0a:	2b04      	cmp	r3, #4
 8009a0c:	d118      	bne.n	8009a40 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	691a      	ldr	r2, [r3, #16]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	b2d2      	uxtb	r2, r2
 8009a1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	1c5a      	adds	r2, r3, #1
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	3b01      	subs	r3, #1
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f47f ae94 	bne.w	8009772 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2220      	movs	r2, #32
 8009a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2200      	movs	r2, #0
 8009a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009a62:	2300      	movs	r3, #0
 8009a64:	e000      	b.n	8009a68 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009a66:	2302      	movs	r3, #2
  }
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3728      	adds	r7, #40	; 0x28
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	00010004 	.word	0x00010004
 8009a74:	200000b4 	.word	0x200000b4
 8009a78:	14f8b589 	.word	0x14f8b589

08009a7c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a8a:	b2db      	uxtb	r3, r3
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	370c      	adds	r7, #12
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bc80      	pop	{r7}
 8009a94:	4770      	bx	lr

08009a96 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009a96:	b480      	push	{r7}
 8009a98:	b083      	sub	sp, #12
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	370c      	adds	r7, #12
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bc80      	pop	{r7}
 8009aaa:	4770      	bx	lr

08009aac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b088      	sub	sp, #32
 8009ab0:	af02      	add	r7, sp, #8
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	607a      	str	r2, [r7, #4]
 8009ab6:	603b      	str	r3, [r7, #0]
 8009ab8:	460b      	mov	r3, r1
 8009aba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	2b08      	cmp	r3, #8
 8009ac6:	d006      	beq.n	8009ad6 <I2C_MasterRequestWrite+0x2a>
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	2b01      	cmp	r3, #1
 8009acc:	d003      	beq.n	8009ad6 <I2C_MasterRequestWrite+0x2a>
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009ad4:	d108      	bne.n	8009ae8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ae4:	601a      	str	r2, [r3, #0]
 8009ae6:	e00b      	b.n	8009b00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aec:	2b12      	cmp	r3, #18
 8009aee:	d107      	bne.n	8009b00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009afe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	9300      	str	r3, [sp, #0]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b0c:	68f8      	ldr	r0, [r7, #12]
 8009b0e:	f000 f9cd 	bl	8009eac <I2C_WaitOnFlagUntilTimeout>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00d      	beq.n	8009b34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b26:	d103      	bne.n	8009b30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e035      	b.n	8009ba0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b3c:	d108      	bne.n	8009b50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009b3e:	897b      	ldrh	r3, [r7, #10]
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	461a      	mov	r2, r3
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009b4c:	611a      	str	r2, [r3, #16]
 8009b4e:	e01b      	b.n	8009b88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009b50:	897b      	ldrh	r3, [r7, #10]
 8009b52:	11db      	asrs	r3, r3, #7
 8009b54:	b2db      	uxtb	r3, r3
 8009b56:	f003 0306 	and.w	r3, r3, #6
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	f063 030f 	orn	r3, r3, #15
 8009b60:	b2da      	uxtb	r2, r3
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	490e      	ldr	r1, [pc, #56]	; (8009ba8 <I2C_MasterRequestWrite+0xfc>)
 8009b6e:	68f8      	ldr	r0, [r7, #12]
 8009b70:	f000 fa16 	bl	8009fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d001      	beq.n	8009b7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e010      	b.n	8009ba0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009b7e:	897b      	ldrh	r3, [r7, #10]
 8009b80:	b2da      	uxtb	r2, r3
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	4907      	ldr	r1, [pc, #28]	; (8009bac <I2C_MasterRequestWrite+0x100>)
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f000 fa06 	bl	8009fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e000      	b.n	8009ba0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3718      	adds	r7, #24
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	00010008 	.word	0x00010008
 8009bac:	00010002 	.word	0x00010002

08009bb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b088      	sub	sp, #32
 8009bb4:	af02      	add	r7, sp, #8
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	4608      	mov	r0, r1
 8009bba:	4611      	mov	r1, r2
 8009bbc:	461a      	mov	r2, r3
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	817b      	strh	r3, [r7, #10]
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	813b      	strh	r3, [r7, #8]
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bd8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	6a3b      	ldr	r3, [r7, #32]
 8009be0:	2200      	movs	r2, #0
 8009be2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f000 f960 	bl	8009eac <I2C_WaitOnFlagUntilTimeout>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00d      	beq.n	8009c0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c00:	d103      	bne.n	8009c0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009c0a:	2303      	movs	r3, #3
 8009c0c:	e05f      	b.n	8009cce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009c0e:	897b      	ldrh	r3, [r7, #10]
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	461a      	mov	r2, r3
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009c1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c20:	6a3a      	ldr	r2, [r7, #32]
 8009c22:	492d      	ldr	r1, [pc, #180]	; (8009cd8 <I2C_RequestMemoryWrite+0x128>)
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f000 f9bb 	bl	8009fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d001      	beq.n	8009c34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	e04c      	b.n	8009cce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c34:	2300      	movs	r3, #0
 8009c36:	617b      	str	r3, [r7, #20]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	695b      	ldr	r3, [r3, #20]
 8009c3e:	617b      	str	r3, [r7, #20]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	617b      	str	r3, [r7, #20]
 8009c48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c4c:	6a39      	ldr	r1, [r7, #32]
 8009c4e:	68f8      	ldr	r0, [r7, #12]
 8009c50:	f000 fa46 	bl	800a0e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00d      	beq.n	8009c76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5e:	2b04      	cmp	r3, #4
 8009c60:	d107      	bne.n	8009c72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	e02b      	b.n	8009cce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009c76:	88fb      	ldrh	r3, [r7, #6]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d105      	bne.n	8009c88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009c7c:	893b      	ldrh	r3, [r7, #8]
 8009c7e:	b2da      	uxtb	r2, r3
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	611a      	str	r2, [r3, #16]
 8009c86:	e021      	b.n	8009ccc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009c88:	893b      	ldrh	r3, [r7, #8]
 8009c8a:	0a1b      	lsrs	r3, r3, #8
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	b2da      	uxtb	r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c98:	6a39      	ldr	r1, [r7, #32]
 8009c9a:	68f8      	ldr	r0, [r7, #12]
 8009c9c:	f000 fa20 	bl	800a0e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00d      	beq.n	8009cc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009caa:	2b04      	cmp	r3, #4
 8009cac:	d107      	bne.n	8009cbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e005      	b.n	8009cce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009cc2:	893b      	ldrh	r3, [r7, #8]
 8009cc4:	b2da      	uxtb	r2, r3
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3718      	adds	r7, #24
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	00010002 	.word	0x00010002

08009cdc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b088      	sub	sp, #32
 8009ce0:	af02      	add	r7, sp, #8
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	4608      	mov	r0, r1
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	461a      	mov	r2, r3
 8009cea:	4603      	mov	r3, r0
 8009cec:	817b      	strh	r3, [r7, #10]
 8009cee:	460b      	mov	r3, r1
 8009cf0:	813b      	strh	r3, [r7, #8]
 8009cf2:	4613      	mov	r3, r2
 8009cf4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009d04:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d18:	9300      	str	r3, [sp, #0]
 8009d1a:	6a3b      	ldr	r3, [r7, #32]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f000 f8c2 	bl	8009eac <I2C_WaitOnFlagUntilTimeout>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00d      	beq.n	8009d4a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d3c:	d103      	bne.n	8009d46 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d44:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009d46:	2303      	movs	r3, #3
 8009d48:	e0aa      	b.n	8009ea0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009d4a:	897b      	ldrh	r3, [r7, #10]
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	461a      	mov	r2, r3
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009d58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5c:	6a3a      	ldr	r2, [r7, #32]
 8009d5e:	4952      	ldr	r1, [pc, #328]	; (8009ea8 <I2C_RequestMemoryRead+0x1cc>)
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f000 f91d 	bl	8009fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009d66:	4603      	mov	r3, r0
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d001      	beq.n	8009d70 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e097      	b.n	8009ea0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d70:	2300      	movs	r3, #0
 8009d72:	617b      	str	r3, [r7, #20]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	695b      	ldr	r3, [r3, #20]
 8009d7a:	617b      	str	r3, [r7, #20]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	699b      	ldr	r3, [r3, #24]
 8009d82:	617b      	str	r3, [r7, #20]
 8009d84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d88:	6a39      	ldr	r1, [r7, #32]
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	f000 f9a8 	bl	800a0e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00d      	beq.n	8009db2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9a:	2b04      	cmp	r3, #4
 8009d9c:	d107      	bne.n	8009dae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e076      	b.n	8009ea0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009db2:	88fb      	ldrh	r3, [r7, #6]
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d105      	bne.n	8009dc4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009db8:	893b      	ldrh	r3, [r7, #8]
 8009dba:	b2da      	uxtb	r2, r3
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	611a      	str	r2, [r3, #16]
 8009dc2:	e021      	b.n	8009e08 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009dc4:	893b      	ldrh	r3, [r7, #8]
 8009dc6:	0a1b      	lsrs	r3, r3, #8
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	b2da      	uxtb	r2, r3
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dd4:	6a39      	ldr	r1, [r7, #32]
 8009dd6:	68f8      	ldr	r0, [r7, #12]
 8009dd8:	f000 f982 	bl	800a0e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00d      	beq.n	8009dfe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de6:	2b04      	cmp	r3, #4
 8009de8:	d107      	bne.n	8009dfa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009df8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e050      	b.n	8009ea0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009dfe:	893b      	ldrh	r3, [r7, #8]
 8009e00:	b2da      	uxtb	r2, r3
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e0a:	6a39      	ldr	r1, [r7, #32]
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f000 f967 	bl	800a0e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00d      	beq.n	8009e34 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1c:	2b04      	cmp	r3, #4
 8009e1e:	d107      	bne.n	8009e30 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009e30:	2301      	movs	r3, #1
 8009e32:	e035      	b.n	8009ea0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	681a      	ldr	r2, [r3, #0]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009e42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e46:	9300      	str	r3, [sp, #0]
 8009e48:	6a3b      	ldr	r3, [r7, #32]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f000 f82b 	bl	8009eac <I2C_WaitOnFlagUntilTimeout>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d00d      	beq.n	8009e78 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e6a:	d103      	bne.n	8009e74 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009e74:	2303      	movs	r3, #3
 8009e76:	e013      	b.n	8009ea0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009e78:	897b      	ldrh	r3, [r7, #10]
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	f043 0301 	orr.w	r3, r3, #1
 8009e80:	b2da      	uxtb	r2, r3
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	6a3a      	ldr	r2, [r7, #32]
 8009e8c:	4906      	ldr	r1, [pc, #24]	; (8009ea8 <I2C_RequestMemoryRead+0x1cc>)
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f000 f886 	bl	8009fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d001      	beq.n	8009e9e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e000      	b.n	8009ea0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	00010002 	.word	0x00010002

08009eac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	60f8      	str	r0, [r7, #12]
 8009eb4:	60b9      	str	r1, [r7, #8]
 8009eb6:	603b      	str	r3, [r7, #0]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ebc:	e048      	b.n	8009f50 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ec4:	d044      	beq.n	8009f50 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ec6:	f7fe f9e3 	bl	8008290 <HAL_GetTick>
 8009eca:	4602      	mov	r2, r0
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	1ad3      	subs	r3, r2, r3
 8009ed0:	683a      	ldr	r2, [r7, #0]
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d302      	bcc.n	8009edc <I2C_WaitOnFlagUntilTimeout+0x30>
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d139      	bne.n	8009f50 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	0c1b      	lsrs	r3, r3, #16
 8009ee0:	b2db      	uxtb	r3, r3
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d10d      	bne.n	8009f02 <I2C_WaitOnFlagUntilTimeout+0x56>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	695b      	ldr	r3, [r3, #20]
 8009eec:	43da      	mvns	r2, r3
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	b29b      	uxth	r3, r3
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	bf0c      	ite	eq
 8009ef8:	2301      	moveq	r3, #1
 8009efa:	2300      	movne	r3, #0
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	461a      	mov	r2, r3
 8009f00:	e00c      	b.n	8009f1c <I2C_WaitOnFlagUntilTimeout+0x70>
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	43da      	mvns	r2, r3
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	bf0c      	ite	eq
 8009f14:	2301      	moveq	r3, #1
 8009f16:	2300      	movne	r3, #0
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	79fb      	ldrb	r3, [r7, #7]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d116      	bne.n	8009f50 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2200      	movs	r2, #0
 8009f26:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2220      	movs	r2, #32
 8009f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2200      	movs	r2, #0
 8009f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f3c:	f043 0220 	orr.w	r2, r3, #32
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	e023      	b.n	8009f98 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	0c1b      	lsrs	r3, r3, #16
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d10d      	bne.n	8009f76 <I2C_WaitOnFlagUntilTimeout+0xca>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	695b      	ldr	r3, [r3, #20]
 8009f60:	43da      	mvns	r2, r3
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	4013      	ands	r3, r2
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	bf0c      	ite	eq
 8009f6c:	2301      	moveq	r3, #1
 8009f6e:	2300      	movne	r3, #0
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	461a      	mov	r2, r3
 8009f74:	e00c      	b.n	8009f90 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	699b      	ldr	r3, [r3, #24]
 8009f7c:	43da      	mvns	r2, r3
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	4013      	ands	r3, r2
 8009f82:	b29b      	uxth	r3, r3
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	bf0c      	ite	eq
 8009f88:	2301      	moveq	r3, #1
 8009f8a:	2300      	movne	r3, #0
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	461a      	mov	r2, r3
 8009f90:	79fb      	ldrb	r3, [r7, #7]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d093      	beq.n	8009ebe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f96:	2300      	movs	r3, #0
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3710      	adds	r7, #16
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}

08009fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	607a      	str	r2, [r7, #4]
 8009fac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009fae:	e071      	b.n	800a094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	695b      	ldr	r3, [r3, #20]
 8009fb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fbe:	d123      	bne.n	800a008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009fd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2220      	movs	r2, #32
 8009fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff4:	f043 0204 	orr.w	r2, r3, #4
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	e067      	b.n	800a0d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a00e:	d041      	beq.n	800a094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a010:	f7fe f93e 	bl	8008290 <HAL_GetTick>
 800a014:	4602      	mov	r2, r0
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	1ad3      	subs	r3, r2, r3
 800a01a:	687a      	ldr	r2, [r7, #4]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d302      	bcc.n	800a026 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d136      	bne.n	800a094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	0c1b      	lsrs	r3, r3, #16
 800a02a:	b2db      	uxtb	r3, r3
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d10c      	bne.n	800a04a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	695b      	ldr	r3, [r3, #20]
 800a036:	43da      	mvns	r2, r3
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	4013      	ands	r3, r2
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	2b00      	cmp	r3, #0
 800a040:	bf14      	ite	ne
 800a042:	2301      	movne	r3, #1
 800a044:	2300      	moveq	r3, #0
 800a046:	b2db      	uxtb	r3, r3
 800a048:	e00b      	b.n	800a062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	699b      	ldr	r3, [r3, #24]
 800a050:	43da      	mvns	r2, r3
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	4013      	ands	r3, r2
 800a056:	b29b      	uxth	r3, r3
 800a058:	2b00      	cmp	r3, #0
 800a05a:	bf14      	ite	ne
 800a05c:	2301      	movne	r3, #1
 800a05e:	2300      	moveq	r3, #0
 800a060:	b2db      	uxtb	r3, r3
 800a062:	2b00      	cmp	r3, #0
 800a064:	d016      	beq.n	800a094 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2200      	movs	r2, #0
 800a06a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2220      	movs	r2, #32
 800a070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2200      	movs	r2, #0
 800a078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a080:	f043 0220 	orr.w	r2, r3, #32
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e021      	b.n	800a0d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	0c1b      	lsrs	r3, r3, #16
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d10c      	bne.n	800a0b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	695b      	ldr	r3, [r3, #20]
 800a0a4:	43da      	mvns	r2, r3
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	4013      	ands	r3, r2
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	bf14      	ite	ne
 800a0b0:	2301      	movne	r3, #1
 800a0b2:	2300      	moveq	r3, #0
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	e00b      	b.n	800a0d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	43da      	mvns	r2, r3
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	4013      	ands	r3, r2
 800a0c4:	b29b      	uxth	r3, r3
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	bf14      	ite	ne
 800a0ca:	2301      	movne	r3, #1
 800a0cc:	2300      	moveq	r3, #0
 800a0ce:	b2db      	uxtb	r3, r3
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f47f af6d 	bne.w	8009fb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a0d6:	2300      	movs	r3, #0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3710      	adds	r7, #16
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a0ec:	e034      	b.n	800a158 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 f8e3 	bl	800a2ba <I2C_IsAcknowledgeFailed>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e034      	b.n	800a168 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a104:	d028      	beq.n	800a158 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a106:	f7fe f8c3 	bl	8008290 <HAL_GetTick>
 800a10a:	4602      	mov	r2, r0
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	429a      	cmp	r2, r3
 800a114:	d302      	bcc.n	800a11c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d11d      	bne.n	800a158 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	695b      	ldr	r3, [r3, #20]
 800a122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a126:	2b80      	cmp	r3, #128	; 0x80
 800a128:	d016      	beq.n	800a158 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	2200      	movs	r2, #0
 800a12e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2220      	movs	r2, #32
 800a134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a144:	f043 0220 	orr.w	r2, r3, #32
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	e007      	b.n	800a168 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	695b      	ldr	r3, [r3, #20]
 800a15e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a162:	2b80      	cmp	r3, #128	; 0x80
 800a164:	d1c3      	bne.n	800a0ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a17c:	e034      	b.n	800a1e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f000 f89b 	bl	800a2ba <I2C_IsAcknowledgeFailed>
 800a184:	4603      	mov	r3, r0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d001      	beq.n	800a18e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a18a:	2301      	movs	r3, #1
 800a18c:	e034      	b.n	800a1f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a194:	d028      	beq.n	800a1e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a196:	f7fe f87b 	bl	8008290 <HAL_GetTick>
 800a19a:	4602      	mov	r2, r0
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d302      	bcc.n	800a1ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a1a6:	68bb      	ldr	r3, [r7, #8]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d11d      	bne.n	800a1e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	695b      	ldr	r3, [r3, #20]
 800a1b2:	f003 0304 	and.w	r3, r3, #4
 800a1b6:	2b04      	cmp	r3, #4
 800a1b8:	d016      	beq.n	800a1e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2220      	movs	r2, #32
 800a1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d4:	f043 0220 	orr.w	r2, r3, #32
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	e007      	b.n	800a1f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	695b      	ldr	r3, [r3, #20]
 800a1ee:	f003 0304 	and.w	r3, r3, #4
 800a1f2:	2b04      	cmp	r3, #4
 800a1f4:	d1c3      	bne.n	800a17e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a1f6:	2300      	movs	r3, #0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b084      	sub	sp, #16
 800a204:	af00      	add	r7, sp, #0
 800a206:	60f8      	str	r0, [r7, #12]
 800a208:	60b9      	str	r1, [r7, #8]
 800a20a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a20c:	e049      	b.n	800a2a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	f003 0310 	and.w	r3, r3, #16
 800a218:	2b10      	cmp	r3, #16
 800a21a:	d119      	bne.n	800a250 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f06f 0210 	mvn.w	r2, #16
 800a224:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2220      	movs	r2, #32
 800a230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2200      	movs	r2, #0
 800a238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	e030      	b.n	800a2b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a250:	f7fe f81e 	bl	8008290 <HAL_GetTick>
 800a254:	4602      	mov	r2, r0
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	1ad3      	subs	r3, r2, r3
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d302      	bcc.n	800a266 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d11d      	bne.n	800a2a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	695b      	ldr	r3, [r3, #20]
 800a26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a270:	2b40      	cmp	r3, #64	; 0x40
 800a272:	d016      	beq.n	800a2a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	2200      	movs	r2, #0
 800a278:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2220      	movs	r2, #32
 800a27e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28e:	f043 0220 	orr.w	r2, r3, #32
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e007      	b.n	800a2b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	695b      	ldr	r3, [r3, #20]
 800a2a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ac:	2b40      	cmp	r3, #64	; 0x40
 800a2ae:	d1ae      	bne.n	800a20e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a2b0:	2300      	movs	r3, #0
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b083      	sub	sp, #12
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	695b      	ldr	r3, [r3, #20]
 800a2c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2d0:	d11b      	bne.n	800a30a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a2da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2220      	movs	r2, #32
 800a2e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f6:	f043 0204 	orr.w	r2, r3, #4
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	e000      	b.n	800a30c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	bc80      	pop	{r7}
 800a314:	4770      	bx	lr
	...

0800a318 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d101      	bne.n	800a32a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e272      	b.n	800a810 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f003 0301 	and.w	r3, r3, #1
 800a332:	2b00      	cmp	r3, #0
 800a334:	f000 8087 	beq.w	800a446 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a338:	4b92      	ldr	r3, [pc, #584]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a33a:	685b      	ldr	r3, [r3, #4]
 800a33c:	f003 030c 	and.w	r3, r3, #12
 800a340:	2b04      	cmp	r3, #4
 800a342:	d00c      	beq.n	800a35e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a344:	4b8f      	ldr	r3, [pc, #572]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	f003 030c 	and.w	r3, r3, #12
 800a34c:	2b08      	cmp	r3, #8
 800a34e:	d112      	bne.n	800a376 <HAL_RCC_OscConfig+0x5e>
 800a350:	4b8c      	ldr	r3, [pc, #560]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a35c:	d10b      	bne.n	800a376 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a35e:	4b89      	ldr	r3, [pc, #548]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a366:	2b00      	cmp	r3, #0
 800a368:	d06c      	beq.n	800a444 <HAL_RCC_OscConfig+0x12c>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d168      	bne.n	800a444 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	e24c      	b.n	800a810 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a37e:	d106      	bne.n	800a38e <HAL_RCC_OscConfig+0x76>
 800a380:	4b80      	ldr	r3, [pc, #512]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a7f      	ldr	r2, [pc, #508]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a38a:	6013      	str	r3, [r2, #0]
 800a38c:	e02e      	b.n	800a3ec <HAL_RCC_OscConfig+0xd4>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d10c      	bne.n	800a3b0 <HAL_RCC_OscConfig+0x98>
 800a396:	4b7b      	ldr	r3, [pc, #492]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a7a      	ldr	r2, [pc, #488]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a39c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3a0:	6013      	str	r3, [r2, #0]
 800a3a2:	4b78      	ldr	r3, [pc, #480]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a77      	ldr	r2, [pc, #476]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a3a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3ac:	6013      	str	r3, [r2, #0]
 800a3ae:	e01d      	b.n	800a3ec <HAL_RCC_OscConfig+0xd4>
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a3b8:	d10c      	bne.n	800a3d4 <HAL_RCC_OscConfig+0xbc>
 800a3ba:	4b72      	ldr	r3, [pc, #456]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a71      	ldr	r2, [pc, #452]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a3c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a3c4:	6013      	str	r3, [r2, #0]
 800a3c6:	4b6f      	ldr	r3, [pc, #444]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a6e      	ldr	r2, [pc, #440]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a3cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3d0:	6013      	str	r3, [r2, #0]
 800a3d2:	e00b      	b.n	800a3ec <HAL_RCC_OscConfig+0xd4>
 800a3d4:	4b6b      	ldr	r3, [pc, #428]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a6a      	ldr	r2, [pc, #424]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a3da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a3de:	6013      	str	r3, [r2, #0]
 800a3e0:	4b68      	ldr	r3, [pc, #416]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a67      	ldr	r2, [pc, #412]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a3e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a3ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d013      	beq.n	800a41c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3f4:	f7fd ff4c 	bl	8008290 <HAL_GetTick>
 800a3f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a3fa:	e008      	b.n	800a40e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a3fc:	f7fd ff48 	bl	8008290 <HAL_GetTick>
 800a400:	4602      	mov	r2, r0
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	1ad3      	subs	r3, r2, r3
 800a406:	2b64      	cmp	r3, #100	; 0x64
 800a408:	d901      	bls.n	800a40e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a40a:	2303      	movs	r3, #3
 800a40c:	e200      	b.n	800a810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a40e:	4b5d      	ldr	r3, [pc, #372]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a416:	2b00      	cmp	r3, #0
 800a418:	d0f0      	beq.n	800a3fc <HAL_RCC_OscConfig+0xe4>
 800a41a:	e014      	b.n	800a446 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a41c:	f7fd ff38 	bl	8008290 <HAL_GetTick>
 800a420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a422:	e008      	b.n	800a436 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a424:	f7fd ff34 	bl	8008290 <HAL_GetTick>
 800a428:	4602      	mov	r2, r0
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	2b64      	cmp	r3, #100	; 0x64
 800a430:	d901      	bls.n	800a436 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a432:	2303      	movs	r3, #3
 800a434:	e1ec      	b.n	800a810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a436:	4b53      	ldr	r3, [pc, #332]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1f0      	bne.n	800a424 <HAL_RCC_OscConfig+0x10c>
 800a442:	e000      	b.n	800a446 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f003 0302 	and.w	r3, r3, #2
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d063      	beq.n	800a51a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a452:	4b4c      	ldr	r3, [pc, #304]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	f003 030c 	and.w	r3, r3, #12
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00b      	beq.n	800a476 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a45e:	4b49      	ldr	r3, [pc, #292]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	f003 030c 	and.w	r3, r3, #12
 800a466:	2b08      	cmp	r3, #8
 800a468:	d11c      	bne.n	800a4a4 <HAL_RCC_OscConfig+0x18c>
 800a46a:	4b46      	ldr	r3, [pc, #280]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a472:	2b00      	cmp	r3, #0
 800a474:	d116      	bne.n	800a4a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a476:	4b43      	ldr	r3, [pc, #268]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f003 0302 	and.w	r3, r3, #2
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d005      	beq.n	800a48e <HAL_RCC_OscConfig+0x176>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	691b      	ldr	r3, [r3, #16]
 800a486:	2b01      	cmp	r3, #1
 800a488:	d001      	beq.n	800a48e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e1c0      	b.n	800a810 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a48e:	4b3d      	ldr	r3, [pc, #244]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	695b      	ldr	r3, [r3, #20]
 800a49a:	00db      	lsls	r3, r3, #3
 800a49c:	4939      	ldr	r1, [pc, #228]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a4a2:	e03a      	b.n	800a51a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	691b      	ldr	r3, [r3, #16]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d020      	beq.n	800a4ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a4ac:	4b36      	ldr	r3, [pc, #216]	; (800a588 <HAL_RCC_OscConfig+0x270>)
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4b2:	f7fd feed 	bl	8008290 <HAL_GetTick>
 800a4b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a4b8:	e008      	b.n	800a4cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4ba:	f7fd fee9 	bl	8008290 <HAL_GetTick>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	1ad3      	subs	r3, r2, r3
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d901      	bls.n	800a4cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	e1a1      	b.n	800a810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a4cc:	4b2d      	ldr	r3, [pc, #180]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 0302 	and.w	r3, r3, #2
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d0f0      	beq.n	800a4ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a4d8:	4b2a      	ldr	r3, [pc, #168]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	695b      	ldr	r3, [r3, #20]
 800a4e4:	00db      	lsls	r3, r3, #3
 800a4e6:	4927      	ldr	r1, [pc, #156]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	600b      	str	r3, [r1, #0]
 800a4ec:	e015      	b.n	800a51a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a4ee:	4b26      	ldr	r3, [pc, #152]	; (800a588 <HAL_RCC_OscConfig+0x270>)
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4f4:	f7fd fecc 	bl	8008290 <HAL_GetTick>
 800a4f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a4fa:	e008      	b.n	800a50e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a4fc:	f7fd fec8 	bl	8008290 <HAL_GetTick>
 800a500:	4602      	mov	r2, r0
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	1ad3      	subs	r3, r2, r3
 800a506:	2b02      	cmp	r3, #2
 800a508:	d901      	bls.n	800a50e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a50a:	2303      	movs	r3, #3
 800a50c:	e180      	b.n	800a810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a50e:	4b1d      	ldr	r3, [pc, #116]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f003 0302 	and.w	r3, r3, #2
 800a516:	2b00      	cmp	r3, #0
 800a518:	d1f0      	bne.n	800a4fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 0308 	and.w	r3, r3, #8
 800a522:	2b00      	cmp	r3, #0
 800a524:	d03a      	beq.n	800a59c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	699b      	ldr	r3, [r3, #24]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d019      	beq.n	800a562 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a52e:	4b17      	ldr	r3, [pc, #92]	; (800a58c <HAL_RCC_OscConfig+0x274>)
 800a530:	2201      	movs	r2, #1
 800a532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a534:	f7fd feac 	bl	8008290 <HAL_GetTick>
 800a538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a53a:	e008      	b.n	800a54e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a53c:	f7fd fea8 	bl	8008290 <HAL_GetTick>
 800a540:	4602      	mov	r2, r0
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	1ad3      	subs	r3, r2, r3
 800a546:	2b02      	cmp	r3, #2
 800a548:	d901      	bls.n	800a54e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a54a:	2303      	movs	r3, #3
 800a54c:	e160      	b.n	800a810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a54e:	4b0d      	ldr	r3, [pc, #52]	; (800a584 <HAL_RCC_OscConfig+0x26c>)
 800a550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a552:	f003 0302 	and.w	r3, r3, #2
 800a556:	2b00      	cmp	r3, #0
 800a558:	d0f0      	beq.n	800a53c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a55a:	2001      	movs	r0, #1
 800a55c:	f000 face 	bl	800aafc <RCC_Delay>
 800a560:	e01c      	b.n	800a59c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a562:	4b0a      	ldr	r3, [pc, #40]	; (800a58c <HAL_RCC_OscConfig+0x274>)
 800a564:	2200      	movs	r2, #0
 800a566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a568:	f7fd fe92 	bl	8008290 <HAL_GetTick>
 800a56c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a56e:	e00f      	b.n	800a590 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a570:	f7fd fe8e 	bl	8008290 <HAL_GetTick>
 800a574:	4602      	mov	r2, r0
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	1ad3      	subs	r3, r2, r3
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d908      	bls.n	800a590 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a57e:	2303      	movs	r3, #3
 800a580:	e146      	b.n	800a810 <HAL_RCC_OscConfig+0x4f8>
 800a582:	bf00      	nop
 800a584:	40021000 	.word	0x40021000
 800a588:	42420000 	.word	0x42420000
 800a58c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a590:	4b92      	ldr	r3, [pc, #584]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a594:	f003 0302 	and.w	r3, r3, #2
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1e9      	bne.n	800a570 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f003 0304 	and.w	r3, r3, #4
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f000 80a6 	beq.w	800a6f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a5ae:	4b8b      	ldr	r3, [pc, #556]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a5b0:	69db      	ldr	r3, [r3, #28]
 800a5b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d10d      	bne.n	800a5d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a5ba:	4b88      	ldr	r3, [pc, #544]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a5bc:	69db      	ldr	r3, [r3, #28]
 800a5be:	4a87      	ldr	r2, [pc, #540]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a5c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5c4:	61d3      	str	r3, [r2, #28]
 800a5c6:	4b85      	ldr	r3, [pc, #532]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a5c8:	69db      	ldr	r3, [r3, #28]
 800a5ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5ce:	60bb      	str	r3, [r7, #8]
 800a5d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a5d6:	4b82      	ldr	r3, [pc, #520]	; (800a7e0 <HAL_RCC_OscConfig+0x4c8>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d118      	bne.n	800a614 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a5e2:	4b7f      	ldr	r3, [pc, #508]	; (800a7e0 <HAL_RCC_OscConfig+0x4c8>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a7e      	ldr	r2, [pc, #504]	; (800a7e0 <HAL_RCC_OscConfig+0x4c8>)
 800a5e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a5ee:	f7fd fe4f 	bl	8008290 <HAL_GetTick>
 800a5f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a5f4:	e008      	b.n	800a608 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5f6:	f7fd fe4b 	bl	8008290 <HAL_GetTick>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	1ad3      	subs	r3, r2, r3
 800a600:	2b64      	cmp	r3, #100	; 0x64
 800a602:	d901      	bls.n	800a608 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a604:	2303      	movs	r3, #3
 800a606:	e103      	b.n	800a810 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a608:	4b75      	ldr	r3, [pc, #468]	; (800a7e0 <HAL_RCC_OscConfig+0x4c8>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a610:	2b00      	cmp	r3, #0
 800a612:	d0f0      	beq.n	800a5f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d106      	bne.n	800a62a <HAL_RCC_OscConfig+0x312>
 800a61c:	4b6f      	ldr	r3, [pc, #444]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a61e:	6a1b      	ldr	r3, [r3, #32]
 800a620:	4a6e      	ldr	r2, [pc, #440]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a622:	f043 0301 	orr.w	r3, r3, #1
 800a626:	6213      	str	r3, [r2, #32]
 800a628:	e02d      	b.n	800a686 <HAL_RCC_OscConfig+0x36e>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	68db      	ldr	r3, [r3, #12]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d10c      	bne.n	800a64c <HAL_RCC_OscConfig+0x334>
 800a632:	4b6a      	ldr	r3, [pc, #424]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a634:	6a1b      	ldr	r3, [r3, #32]
 800a636:	4a69      	ldr	r2, [pc, #420]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a638:	f023 0301 	bic.w	r3, r3, #1
 800a63c:	6213      	str	r3, [r2, #32]
 800a63e:	4b67      	ldr	r3, [pc, #412]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a640:	6a1b      	ldr	r3, [r3, #32]
 800a642:	4a66      	ldr	r2, [pc, #408]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a644:	f023 0304 	bic.w	r3, r3, #4
 800a648:	6213      	str	r3, [r2, #32]
 800a64a:	e01c      	b.n	800a686 <HAL_RCC_OscConfig+0x36e>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	2b05      	cmp	r3, #5
 800a652:	d10c      	bne.n	800a66e <HAL_RCC_OscConfig+0x356>
 800a654:	4b61      	ldr	r3, [pc, #388]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a656:	6a1b      	ldr	r3, [r3, #32]
 800a658:	4a60      	ldr	r2, [pc, #384]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a65a:	f043 0304 	orr.w	r3, r3, #4
 800a65e:	6213      	str	r3, [r2, #32]
 800a660:	4b5e      	ldr	r3, [pc, #376]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a662:	6a1b      	ldr	r3, [r3, #32]
 800a664:	4a5d      	ldr	r2, [pc, #372]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a666:	f043 0301 	orr.w	r3, r3, #1
 800a66a:	6213      	str	r3, [r2, #32]
 800a66c:	e00b      	b.n	800a686 <HAL_RCC_OscConfig+0x36e>
 800a66e:	4b5b      	ldr	r3, [pc, #364]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a670:	6a1b      	ldr	r3, [r3, #32]
 800a672:	4a5a      	ldr	r2, [pc, #360]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a674:	f023 0301 	bic.w	r3, r3, #1
 800a678:	6213      	str	r3, [r2, #32]
 800a67a:	4b58      	ldr	r3, [pc, #352]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a67c:	6a1b      	ldr	r3, [r3, #32]
 800a67e:	4a57      	ldr	r2, [pc, #348]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a680:	f023 0304 	bic.w	r3, r3, #4
 800a684:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d015      	beq.n	800a6ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a68e:	f7fd fdff 	bl	8008290 <HAL_GetTick>
 800a692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a694:	e00a      	b.n	800a6ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a696:	f7fd fdfb 	bl	8008290 <HAL_GetTick>
 800a69a:	4602      	mov	r2, r0
 800a69c:	693b      	ldr	r3, [r7, #16]
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d901      	bls.n	800a6ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	e0b1      	b.n	800a810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a6ac:	4b4b      	ldr	r3, [pc, #300]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a6ae:	6a1b      	ldr	r3, [r3, #32]
 800a6b0:	f003 0302 	and.w	r3, r3, #2
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d0ee      	beq.n	800a696 <HAL_RCC_OscConfig+0x37e>
 800a6b8:	e014      	b.n	800a6e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a6ba:	f7fd fde9 	bl	8008290 <HAL_GetTick>
 800a6be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a6c0:	e00a      	b.n	800a6d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6c2:	f7fd fde5 	bl	8008290 <HAL_GetTick>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	1ad3      	subs	r3, r2, r3
 800a6cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6d0:	4293      	cmp	r3, r2
 800a6d2:	d901      	bls.n	800a6d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a6d4:	2303      	movs	r3, #3
 800a6d6:	e09b      	b.n	800a810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a6d8:	4b40      	ldr	r3, [pc, #256]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a6da:	6a1b      	ldr	r3, [r3, #32]
 800a6dc:	f003 0302 	and.w	r3, r3, #2
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1ee      	bne.n	800a6c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a6e4:	7dfb      	ldrb	r3, [r7, #23]
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d105      	bne.n	800a6f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a6ea:	4b3c      	ldr	r3, [pc, #240]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a6ec:	69db      	ldr	r3, [r3, #28]
 800a6ee:	4a3b      	ldr	r2, [pc, #236]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a6f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a6f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	69db      	ldr	r3, [r3, #28]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f000 8087 	beq.w	800a80e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a700:	4b36      	ldr	r3, [pc, #216]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	f003 030c 	and.w	r3, r3, #12
 800a708:	2b08      	cmp	r3, #8
 800a70a:	d061      	beq.n	800a7d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	69db      	ldr	r3, [r3, #28]
 800a710:	2b02      	cmp	r3, #2
 800a712:	d146      	bne.n	800a7a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a714:	4b33      	ldr	r3, [pc, #204]	; (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a716:	2200      	movs	r2, #0
 800a718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a71a:	f7fd fdb9 	bl	8008290 <HAL_GetTick>
 800a71e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a720:	e008      	b.n	800a734 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a722:	f7fd fdb5 	bl	8008290 <HAL_GetTick>
 800a726:	4602      	mov	r2, r0
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	1ad3      	subs	r3, r2, r3
 800a72c:	2b02      	cmp	r3, #2
 800a72e:	d901      	bls.n	800a734 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a730:	2303      	movs	r3, #3
 800a732:	e06d      	b.n	800a810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a734:	4b29      	ldr	r3, [pc, #164]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1f0      	bne.n	800a722 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a1b      	ldr	r3, [r3, #32]
 800a744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a748:	d108      	bne.n	800a75c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a74a:	4b24      	ldr	r3, [pc, #144]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a74c:	685b      	ldr	r3, [r3, #4]
 800a74e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	689b      	ldr	r3, [r3, #8]
 800a756:	4921      	ldr	r1, [pc, #132]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a758:	4313      	orrs	r3, r2
 800a75a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a75c:	4b1f      	ldr	r3, [pc, #124]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6a19      	ldr	r1, [r3, #32]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76c:	430b      	orrs	r3, r1
 800a76e:	491b      	ldr	r1, [pc, #108]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a770:	4313      	orrs	r3, r2
 800a772:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a774:	4b1b      	ldr	r3, [pc, #108]	; (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a776:	2201      	movs	r2, #1
 800a778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a77a:	f7fd fd89 	bl	8008290 <HAL_GetTick>
 800a77e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a780:	e008      	b.n	800a794 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a782:	f7fd fd85 	bl	8008290 <HAL_GetTick>
 800a786:	4602      	mov	r2, r0
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	1ad3      	subs	r3, r2, r3
 800a78c:	2b02      	cmp	r3, #2
 800a78e:	d901      	bls.n	800a794 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a790:	2303      	movs	r3, #3
 800a792:	e03d      	b.n	800a810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a794:	4b11      	ldr	r3, [pc, #68]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d0f0      	beq.n	800a782 <HAL_RCC_OscConfig+0x46a>
 800a7a0:	e035      	b.n	800a80e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7a2:	4b10      	ldr	r3, [pc, #64]	; (800a7e4 <HAL_RCC_OscConfig+0x4cc>)
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7a8:	f7fd fd72 	bl	8008290 <HAL_GetTick>
 800a7ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a7ae:	e008      	b.n	800a7c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a7b0:	f7fd fd6e 	bl	8008290 <HAL_GetTick>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	d901      	bls.n	800a7c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a7be:	2303      	movs	r3, #3
 800a7c0:	e026      	b.n	800a810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a7c2:	4b06      	ldr	r3, [pc, #24]	; (800a7dc <HAL_RCC_OscConfig+0x4c4>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1f0      	bne.n	800a7b0 <HAL_RCC_OscConfig+0x498>
 800a7ce:	e01e      	b.n	800a80e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	69db      	ldr	r3, [r3, #28]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d107      	bne.n	800a7e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	e019      	b.n	800a810 <HAL_RCC_OscConfig+0x4f8>
 800a7dc:	40021000 	.word	0x40021000
 800a7e0:	40007000 	.word	0x40007000
 800a7e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a7e8:	4b0b      	ldr	r3, [pc, #44]	; (800a818 <HAL_RCC_OscConfig+0x500>)
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6a1b      	ldr	r3, [r3, #32]
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d106      	bne.n	800a80a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a806:	429a      	cmp	r2, r3
 800a808:	d001      	beq.n	800a80e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e000      	b.n	800a810 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	3718      	adds	r7, #24
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}
 800a818:	40021000 	.word	0x40021000

0800a81c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b084      	sub	sp, #16
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d101      	bne.n	800a830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	e0d0      	b.n	800a9d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a830:	4b6a      	ldr	r3, [pc, #424]	; (800a9dc <HAL_RCC_ClockConfig+0x1c0>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f003 0307 	and.w	r3, r3, #7
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d910      	bls.n	800a860 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a83e:	4b67      	ldr	r3, [pc, #412]	; (800a9dc <HAL_RCC_ClockConfig+0x1c0>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f023 0207 	bic.w	r2, r3, #7
 800a846:	4965      	ldr	r1, [pc, #404]	; (800a9dc <HAL_RCC_ClockConfig+0x1c0>)
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	4313      	orrs	r3, r2
 800a84c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a84e:	4b63      	ldr	r3, [pc, #396]	; (800a9dc <HAL_RCC_ClockConfig+0x1c0>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f003 0307 	and.w	r3, r3, #7
 800a856:	683a      	ldr	r2, [r7, #0]
 800a858:	429a      	cmp	r2, r3
 800a85a:	d001      	beq.n	800a860 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a85c:	2301      	movs	r3, #1
 800a85e:	e0b8      	b.n	800a9d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f003 0302 	and.w	r3, r3, #2
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d020      	beq.n	800a8ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 0304 	and.w	r3, r3, #4
 800a874:	2b00      	cmp	r3, #0
 800a876:	d005      	beq.n	800a884 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a878:	4b59      	ldr	r3, [pc, #356]	; (800a9e0 <HAL_RCC_ClockConfig+0x1c4>)
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	4a58      	ldr	r2, [pc, #352]	; (800a9e0 <HAL_RCC_ClockConfig+0x1c4>)
 800a87e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a882:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	f003 0308 	and.w	r3, r3, #8
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d005      	beq.n	800a89c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a890:	4b53      	ldr	r3, [pc, #332]	; (800a9e0 <HAL_RCC_ClockConfig+0x1c4>)
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	4a52      	ldr	r2, [pc, #328]	; (800a9e0 <HAL_RCC_ClockConfig+0x1c4>)
 800a896:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a89a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a89c:	4b50      	ldr	r3, [pc, #320]	; (800a9e0 <HAL_RCC_ClockConfig+0x1c4>)
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	494d      	ldr	r1, [pc, #308]	; (800a9e0 <HAL_RCC_ClockConfig+0x1c4>)
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 0301 	and.w	r3, r3, #1
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d040      	beq.n	800a93c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d107      	bne.n	800a8d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a8c2:	4b47      	ldr	r3, [pc, #284]	; (800a9e0 <HAL_RCC_ClockConfig+0x1c4>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d115      	bne.n	800a8fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e07f      	b.n	800a9d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	d107      	bne.n	800a8ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a8da:	4b41      	ldr	r3, [pc, #260]	; (800a9e0 <HAL_RCC_ClockConfig+0x1c4>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d109      	bne.n	800a8fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	e073      	b.n	800a9d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a8ea:	4b3d      	ldr	r3, [pc, #244]	; (800a9e0 <HAL_RCC_ClockConfig+0x1c4>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f003 0302 	and.w	r3, r3, #2
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d101      	bne.n	800a8fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e06b      	b.n	800a9d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a8fa:	4b39      	ldr	r3, [pc, #228]	; (800a9e0 <HAL_RCC_ClockConfig+0x1c4>)
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	f023 0203 	bic.w	r2, r3, #3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	4936      	ldr	r1, [pc, #216]	; (800a9e0 <HAL_RCC_ClockConfig+0x1c4>)
 800a908:	4313      	orrs	r3, r2
 800a90a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a90c:	f7fd fcc0 	bl	8008290 <HAL_GetTick>
 800a910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a912:	e00a      	b.n	800a92a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a914:	f7fd fcbc 	bl	8008290 <HAL_GetTick>
 800a918:	4602      	mov	r2, r0
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	1ad3      	subs	r3, r2, r3
 800a91e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a922:	4293      	cmp	r3, r2
 800a924:	d901      	bls.n	800a92a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a926:	2303      	movs	r3, #3
 800a928:	e053      	b.n	800a9d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a92a:	4b2d      	ldr	r3, [pc, #180]	; (800a9e0 <HAL_RCC_ClockConfig+0x1c4>)
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	f003 020c 	and.w	r2, r3, #12
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	429a      	cmp	r2, r3
 800a93a:	d1eb      	bne.n	800a914 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a93c:	4b27      	ldr	r3, [pc, #156]	; (800a9dc <HAL_RCC_ClockConfig+0x1c0>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f003 0307 	and.w	r3, r3, #7
 800a944:	683a      	ldr	r2, [r7, #0]
 800a946:	429a      	cmp	r2, r3
 800a948:	d210      	bcs.n	800a96c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a94a:	4b24      	ldr	r3, [pc, #144]	; (800a9dc <HAL_RCC_ClockConfig+0x1c0>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f023 0207 	bic.w	r2, r3, #7
 800a952:	4922      	ldr	r1, [pc, #136]	; (800a9dc <HAL_RCC_ClockConfig+0x1c0>)
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	4313      	orrs	r3, r2
 800a958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a95a:	4b20      	ldr	r3, [pc, #128]	; (800a9dc <HAL_RCC_ClockConfig+0x1c0>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f003 0307 	and.w	r3, r3, #7
 800a962:	683a      	ldr	r2, [r7, #0]
 800a964:	429a      	cmp	r2, r3
 800a966:	d001      	beq.n	800a96c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	e032      	b.n	800a9d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f003 0304 	and.w	r3, r3, #4
 800a974:	2b00      	cmp	r3, #0
 800a976:	d008      	beq.n	800a98a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a978:	4b19      	ldr	r3, [pc, #100]	; (800a9e0 <HAL_RCC_ClockConfig+0x1c4>)
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	4916      	ldr	r1, [pc, #88]	; (800a9e0 <HAL_RCC_ClockConfig+0x1c4>)
 800a986:	4313      	orrs	r3, r2
 800a988:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f003 0308 	and.w	r3, r3, #8
 800a992:	2b00      	cmp	r3, #0
 800a994:	d009      	beq.n	800a9aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a996:	4b12      	ldr	r3, [pc, #72]	; (800a9e0 <HAL_RCC_ClockConfig+0x1c4>)
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	00db      	lsls	r3, r3, #3
 800a9a4:	490e      	ldr	r1, [pc, #56]	; (800a9e0 <HAL_RCC_ClockConfig+0x1c4>)
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a9aa:	f000 f821 	bl	800a9f0 <HAL_RCC_GetSysClockFreq>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	4b0b      	ldr	r3, [pc, #44]	; (800a9e0 <HAL_RCC_ClockConfig+0x1c4>)
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	091b      	lsrs	r3, r3, #4
 800a9b6:	f003 030f 	and.w	r3, r3, #15
 800a9ba:	490a      	ldr	r1, [pc, #40]	; (800a9e4 <HAL_RCC_ClockConfig+0x1c8>)
 800a9bc:	5ccb      	ldrb	r3, [r1, r3]
 800a9be:	fa22 f303 	lsr.w	r3, r2, r3
 800a9c2:	4a09      	ldr	r2, [pc, #36]	; (800a9e8 <HAL_RCC_ClockConfig+0x1cc>)
 800a9c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a9c6:	4b09      	ldr	r3, [pc, #36]	; (800a9ec <HAL_RCC_ClockConfig+0x1d0>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fd fc1e 	bl	800820c <HAL_InitTick>

  return HAL_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	40022000 	.word	0x40022000
 800a9e0:	40021000 	.word	0x40021000
 800a9e4:	0800da30 	.word	0x0800da30
 800a9e8:	200000b4 	.word	0x200000b4
 800a9ec:	200000b8 	.word	0x200000b8

0800a9f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b087      	sub	sp, #28
 800a9f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	60fb      	str	r3, [r7, #12]
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	60bb      	str	r3, [r7, #8]
 800a9fe:	2300      	movs	r3, #0
 800aa00:	617b      	str	r3, [r7, #20]
 800aa02:	2300      	movs	r3, #0
 800aa04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800aa06:	2300      	movs	r3, #0
 800aa08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800aa0a:	4b1e      	ldr	r3, [pc, #120]	; (800aa84 <HAL_RCC_GetSysClockFreq+0x94>)
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f003 030c 	and.w	r3, r3, #12
 800aa16:	2b04      	cmp	r3, #4
 800aa18:	d002      	beq.n	800aa20 <HAL_RCC_GetSysClockFreq+0x30>
 800aa1a:	2b08      	cmp	r3, #8
 800aa1c:	d003      	beq.n	800aa26 <HAL_RCC_GetSysClockFreq+0x36>
 800aa1e:	e027      	b.n	800aa70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800aa20:	4b19      	ldr	r3, [pc, #100]	; (800aa88 <HAL_RCC_GetSysClockFreq+0x98>)
 800aa22:	613b      	str	r3, [r7, #16]
      break;
 800aa24:	e027      	b.n	800aa76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	0c9b      	lsrs	r3, r3, #18
 800aa2a:	f003 030f 	and.w	r3, r3, #15
 800aa2e:	4a17      	ldr	r2, [pc, #92]	; (800aa8c <HAL_RCC_GetSysClockFreq+0x9c>)
 800aa30:	5cd3      	ldrb	r3, [r2, r3]
 800aa32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d010      	beq.n	800aa60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800aa3e:	4b11      	ldr	r3, [pc, #68]	; (800aa84 <HAL_RCC_GetSysClockFreq+0x94>)
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	0c5b      	lsrs	r3, r3, #17
 800aa44:	f003 0301 	and.w	r3, r3, #1
 800aa48:	4a11      	ldr	r2, [pc, #68]	; (800aa90 <HAL_RCC_GetSysClockFreq+0xa0>)
 800aa4a:	5cd3      	ldrb	r3, [r2, r3]
 800aa4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a0d      	ldr	r2, [pc, #52]	; (800aa88 <HAL_RCC_GetSysClockFreq+0x98>)
 800aa52:	fb03 f202 	mul.w	r2, r3, r2
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa5c:	617b      	str	r3, [r7, #20]
 800aa5e:	e004      	b.n	800aa6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4a0c      	ldr	r2, [pc, #48]	; (800aa94 <HAL_RCC_GetSysClockFreq+0xa4>)
 800aa64:	fb02 f303 	mul.w	r3, r2, r3
 800aa68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	613b      	str	r3, [r7, #16]
      break;
 800aa6e:	e002      	b.n	800aa76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800aa70:	4b05      	ldr	r3, [pc, #20]	; (800aa88 <HAL_RCC_GetSysClockFreq+0x98>)
 800aa72:	613b      	str	r3, [r7, #16]
      break;
 800aa74:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aa76:	693b      	ldr	r3, [r7, #16]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	371c      	adds	r7, #28
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bc80      	pop	{r7}
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop
 800aa84:	40021000 	.word	0x40021000
 800aa88:	007a1200 	.word	0x007a1200
 800aa8c:	0800da48 	.word	0x0800da48
 800aa90:	0800da58 	.word	0x0800da58
 800aa94:	003d0900 	.word	0x003d0900

0800aa98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aa9c:	4b02      	ldr	r3, [pc, #8]	; (800aaa8 <HAL_RCC_GetHCLKFreq+0x10>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
}
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bc80      	pop	{r7}
 800aaa6:	4770      	bx	lr
 800aaa8:	200000b4 	.word	0x200000b4

0800aaac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aab0:	f7ff fff2 	bl	800aa98 <HAL_RCC_GetHCLKFreq>
 800aab4:	4602      	mov	r2, r0
 800aab6:	4b05      	ldr	r3, [pc, #20]	; (800aacc <HAL_RCC_GetPCLK1Freq+0x20>)
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	0a1b      	lsrs	r3, r3, #8
 800aabc:	f003 0307 	and.w	r3, r3, #7
 800aac0:	4903      	ldr	r1, [pc, #12]	; (800aad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aac2:	5ccb      	ldrb	r3, [r1, r3]
 800aac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	40021000 	.word	0x40021000
 800aad0:	0800da40 	.word	0x0800da40

0800aad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aad8:	f7ff ffde 	bl	800aa98 <HAL_RCC_GetHCLKFreq>
 800aadc:	4602      	mov	r2, r0
 800aade:	4b05      	ldr	r3, [pc, #20]	; (800aaf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	0adb      	lsrs	r3, r3, #11
 800aae4:	f003 0307 	and.w	r3, r3, #7
 800aae8:	4903      	ldr	r1, [pc, #12]	; (800aaf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aaea:	5ccb      	ldrb	r3, [r1, r3]
 800aaec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	40021000 	.word	0x40021000
 800aaf8:	0800da40 	.word	0x0800da40

0800aafc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800ab04:	4b0a      	ldr	r3, [pc, #40]	; (800ab30 <RCC_Delay+0x34>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4a0a      	ldr	r2, [pc, #40]	; (800ab34 <RCC_Delay+0x38>)
 800ab0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ab0e:	0a5b      	lsrs	r3, r3, #9
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	fb02 f303 	mul.w	r3, r2, r3
 800ab16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800ab18:	bf00      	nop
  }
  while (Delay --);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	1e5a      	subs	r2, r3, #1
 800ab1e:	60fa      	str	r2, [r7, #12]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1f9      	bne.n	800ab18 <RCC_Delay+0x1c>
}
 800ab24:	bf00      	nop
 800ab26:	bf00      	nop
 800ab28:	3714      	adds	r7, #20
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bc80      	pop	{r7}
 800ab2e:	4770      	bx	lr
 800ab30:	200000b4 	.word	0x200000b4
 800ab34:	10624dd3 	.word	0x10624dd3

0800ab38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d101      	bne.n	800ab4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	e041      	b.n	800abce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab50:	b2db      	uxtb	r3, r3
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d106      	bne.n	800ab64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2200      	movs	r2, #0
 800ab5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f7fd fa26 	bl	8007fb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2202      	movs	r2, #2
 800ab68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	3304      	adds	r3, #4
 800ab74:	4619      	mov	r1, r3
 800ab76:	4610      	mov	r0, r2
 800ab78:	f000 fa82 	bl	800b080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3708      	adds	r7, #8
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
	...

0800abd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800abd8:	b480      	push	{r7}
 800abda:	b085      	sub	sp, #20
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	2b01      	cmp	r3, #1
 800abea:	d001      	beq.n	800abf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	e044      	b.n	800ac7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2202      	movs	r2, #2
 800abf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68da      	ldr	r2, [r3, #12]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f042 0201 	orr.w	r2, r2, #1
 800ac06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a1d      	ldr	r2, [pc, #116]	; (800ac84 <HAL_TIM_Base_Start_IT+0xac>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d018      	beq.n	800ac44 <HAL_TIM_Base_Start_IT+0x6c>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a1c      	ldr	r2, [pc, #112]	; (800ac88 <HAL_TIM_Base_Start_IT+0xb0>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d013      	beq.n	800ac44 <HAL_TIM_Base_Start_IT+0x6c>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac24:	d00e      	beq.n	800ac44 <HAL_TIM_Base_Start_IT+0x6c>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a18      	ldr	r2, [pc, #96]	; (800ac8c <HAL_TIM_Base_Start_IT+0xb4>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d009      	beq.n	800ac44 <HAL_TIM_Base_Start_IT+0x6c>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a16      	ldr	r2, [pc, #88]	; (800ac90 <HAL_TIM_Base_Start_IT+0xb8>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d004      	beq.n	800ac44 <HAL_TIM_Base_Start_IT+0x6c>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a15      	ldr	r2, [pc, #84]	; (800ac94 <HAL_TIM_Base_Start_IT+0xbc>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d111      	bne.n	800ac68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	f003 0307 	and.w	r3, r3, #7
 800ac4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2b06      	cmp	r3, #6
 800ac54:	d010      	beq.n	800ac78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f042 0201 	orr.w	r2, r2, #1
 800ac64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac66:	e007      	b.n	800ac78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f042 0201 	orr.w	r2, r2, #1
 800ac76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bc80      	pop	{r7}
 800ac82:	4770      	bx	lr
 800ac84:	40012c00 	.word	0x40012c00
 800ac88:	40013400 	.word	0x40013400
 800ac8c:	40000400 	.word	0x40000400
 800ac90:	40000800 	.word	0x40000800
 800ac94:	40000c00 	.word	0x40000c00

0800ac98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	f003 0302 	and.w	r3, r3, #2
 800acaa:	2b02      	cmp	r3, #2
 800acac:	d122      	bne.n	800acf4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	68db      	ldr	r3, [r3, #12]
 800acb4:	f003 0302 	and.w	r3, r3, #2
 800acb8:	2b02      	cmp	r3, #2
 800acba:	d11b      	bne.n	800acf4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f06f 0202 	mvn.w	r2, #2
 800acc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2201      	movs	r2, #1
 800acca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	699b      	ldr	r3, [r3, #24]
 800acd2:	f003 0303 	and.w	r3, r3, #3
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d003      	beq.n	800ace2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f9b4 	bl	800b048 <HAL_TIM_IC_CaptureCallback>
 800ace0:	e005      	b.n	800acee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 f9a7 	bl	800b036 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 f9b6 	bl	800b05a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	691b      	ldr	r3, [r3, #16]
 800acfa:	f003 0304 	and.w	r3, r3, #4
 800acfe:	2b04      	cmp	r3, #4
 800ad00:	d122      	bne.n	800ad48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	68db      	ldr	r3, [r3, #12]
 800ad08:	f003 0304 	and.w	r3, r3, #4
 800ad0c:	2b04      	cmp	r3, #4
 800ad0e:	d11b      	bne.n	800ad48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f06f 0204 	mvn.w	r2, #4
 800ad18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2202      	movs	r2, #2
 800ad1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	699b      	ldr	r3, [r3, #24]
 800ad26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d003      	beq.n	800ad36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 f98a 	bl	800b048 <HAL_TIM_IC_CaptureCallback>
 800ad34:	e005      	b.n	800ad42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f000 f97d 	bl	800b036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 f98c 	bl	800b05a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2200      	movs	r2, #0
 800ad46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	f003 0308 	and.w	r3, r3, #8
 800ad52:	2b08      	cmp	r3, #8
 800ad54:	d122      	bne.n	800ad9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	f003 0308 	and.w	r3, r3, #8
 800ad60:	2b08      	cmp	r3, #8
 800ad62:	d11b      	bne.n	800ad9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f06f 0208 	mvn.w	r2, #8
 800ad6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2204      	movs	r2, #4
 800ad72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	69db      	ldr	r3, [r3, #28]
 800ad7a:	f003 0303 	and.w	r3, r3, #3
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d003      	beq.n	800ad8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad82:	6878      	ldr	r0, [r7, #4]
 800ad84:	f000 f960 	bl	800b048 <HAL_TIM_IC_CaptureCallback>
 800ad88:	e005      	b.n	800ad96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 f953 	bl	800b036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 f962 	bl	800b05a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	f003 0310 	and.w	r3, r3, #16
 800ada6:	2b10      	cmp	r3, #16
 800ada8:	d122      	bne.n	800adf0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	f003 0310 	and.w	r3, r3, #16
 800adb4:	2b10      	cmp	r3, #16
 800adb6:	d11b      	bne.n	800adf0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f06f 0210 	mvn.w	r2, #16
 800adc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2208      	movs	r2, #8
 800adc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	69db      	ldr	r3, [r3, #28]
 800adce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800add2:	2b00      	cmp	r3, #0
 800add4:	d003      	beq.n	800adde <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 f936 	bl	800b048 <HAL_TIM_IC_CaptureCallback>
 800addc:	e005      	b.n	800adea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 f929 	bl	800b036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 f938 	bl	800b05a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	691b      	ldr	r3, [r3, #16]
 800adf6:	f003 0301 	and.w	r3, r3, #1
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	d10e      	bne.n	800ae1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	68db      	ldr	r3, [r3, #12]
 800ae04:	f003 0301 	and.w	r3, r3, #1
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d107      	bne.n	800ae1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f06f 0201 	mvn.w	r2, #1
 800ae14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f7fc fd62 	bl	80078e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	691b      	ldr	r3, [r3, #16]
 800ae22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae26:	2b80      	cmp	r3, #128	; 0x80
 800ae28:	d10e      	bne.n	800ae48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae34:	2b80      	cmp	r3, #128	; 0x80
 800ae36:	d107      	bne.n	800ae48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ae40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 faa1 	bl	800b38a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae52:	2b40      	cmp	r3, #64	; 0x40
 800ae54:	d10e      	bne.n	800ae74 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae60:	2b40      	cmp	r3, #64	; 0x40
 800ae62:	d107      	bne.n	800ae74 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ae6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 f8fc 	bl	800b06c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	f003 0320 	and.w	r3, r3, #32
 800ae7e:	2b20      	cmp	r3, #32
 800ae80:	d10e      	bne.n	800aea0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	68db      	ldr	r3, [r3, #12]
 800ae88:	f003 0320 	and.w	r3, r3, #32
 800ae8c:	2b20      	cmp	r3, #32
 800ae8e:	d107      	bne.n	800aea0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f06f 0220 	mvn.w	r2, #32
 800ae98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 fa6c 	bl	800b378 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aea0:	bf00      	nop
 800aea2:	3708      	adds	r7, #8
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}

0800aea8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d101      	bne.n	800aec4 <HAL_TIM_ConfigClockSource+0x1c>
 800aec0:	2302      	movs	r3, #2
 800aec2:	e0b4      	b.n	800b02e <HAL_TIM_ConfigClockSource+0x186>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2202      	movs	r2, #2
 800aed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aeea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aefc:	d03e      	beq.n	800af7c <HAL_TIM_ConfigClockSource+0xd4>
 800aefe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af02:	f200 8087 	bhi.w	800b014 <HAL_TIM_ConfigClockSource+0x16c>
 800af06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af0a:	f000 8086 	beq.w	800b01a <HAL_TIM_ConfigClockSource+0x172>
 800af0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af12:	d87f      	bhi.n	800b014 <HAL_TIM_ConfigClockSource+0x16c>
 800af14:	2b70      	cmp	r3, #112	; 0x70
 800af16:	d01a      	beq.n	800af4e <HAL_TIM_ConfigClockSource+0xa6>
 800af18:	2b70      	cmp	r3, #112	; 0x70
 800af1a:	d87b      	bhi.n	800b014 <HAL_TIM_ConfigClockSource+0x16c>
 800af1c:	2b60      	cmp	r3, #96	; 0x60
 800af1e:	d050      	beq.n	800afc2 <HAL_TIM_ConfigClockSource+0x11a>
 800af20:	2b60      	cmp	r3, #96	; 0x60
 800af22:	d877      	bhi.n	800b014 <HAL_TIM_ConfigClockSource+0x16c>
 800af24:	2b50      	cmp	r3, #80	; 0x50
 800af26:	d03c      	beq.n	800afa2 <HAL_TIM_ConfigClockSource+0xfa>
 800af28:	2b50      	cmp	r3, #80	; 0x50
 800af2a:	d873      	bhi.n	800b014 <HAL_TIM_ConfigClockSource+0x16c>
 800af2c:	2b40      	cmp	r3, #64	; 0x40
 800af2e:	d058      	beq.n	800afe2 <HAL_TIM_ConfigClockSource+0x13a>
 800af30:	2b40      	cmp	r3, #64	; 0x40
 800af32:	d86f      	bhi.n	800b014 <HAL_TIM_ConfigClockSource+0x16c>
 800af34:	2b30      	cmp	r3, #48	; 0x30
 800af36:	d064      	beq.n	800b002 <HAL_TIM_ConfigClockSource+0x15a>
 800af38:	2b30      	cmp	r3, #48	; 0x30
 800af3a:	d86b      	bhi.n	800b014 <HAL_TIM_ConfigClockSource+0x16c>
 800af3c:	2b20      	cmp	r3, #32
 800af3e:	d060      	beq.n	800b002 <HAL_TIM_ConfigClockSource+0x15a>
 800af40:	2b20      	cmp	r3, #32
 800af42:	d867      	bhi.n	800b014 <HAL_TIM_ConfigClockSource+0x16c>
 800af44:	2b00      	cmp	r3, #0
 800af46:	d05c      	beq.n	800b002 <HAL_TIM_ConfigClockSource+0x15a>
 800af48:	2b10      	cmp	r3, #16
 800af4a:	d05a      	beq.n	800b002 <HAL_TIM_ConfigClockSource+0x15a>
 800af4c:	e062      	b.n	800b014 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800af5e:	f000 f980 	bl	800b262 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	689b      	ldr	r3, [r3, #8]
 800af68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800af70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	68ba      	ldr	r2, [r7, #8]
 800af78:	609a      	str	r2, [r3, #8]
      break;
 800af7a:	e04f      	b.n	800b01c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800af8c:	f000 f969 	bl	800b262 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	689a      	ldr	r2, [r3, #8]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800af9e:	609a      	str	r2, [r3, #8]
      break;
 800afa0:	e03c      	b.n	800b01c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800afae:	461a      	mov	r2, r3
 800afb0:	f000 f8e0 	bl	800b174 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	2150      	movs	r1, #80	; 0x50
 800afba:	4618      	mov	r0, r3
 800afbc:	f000 f937 	bl	800b22e <TIM_ITRx_SetConfig>
      break;
 800afc0:	e02c      	b.n	800b01c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800afce:	461a      	mov	r2, r3
 800afd0:	f000 f8fe 	bl	800b1d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2160      	movs	r1, #96	; 0x60
 800afda:	4618      	mov	r0, r3
 800afdc:	f000 f927 	bl	800b22e <TIM_ITRx_SetConfig>
      break;
 800afe0:	e01c      	b.n	800b01c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800afee:	461a      	mov	r2, r3
 800aff0:	f000 f8c0 	bl	800b174 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	2140      	movs	r1, #64	; 0x40
 800affa:	4618      	mov	r0, r3
 800affc:	f000 f917 	bl	800b22e <TIM_ITRx_SetConfig>
      break;
 800b000:	e00c      	b.n	800b01c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4619      	mov	r1, r3
 800b00c:	4610      	mov	r0, r2
 800b00e:	f000 f90e 	bl	800b22e <TIM_ITRx_SetConfig>
      break;
 800b012:	e003      	b.n	800b01c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b014:	2301      	movs	r3, #1
 800b016:	73fb      	strb	r3, [r7, #15]
      break;
 800b018:	e000      	b.n	800b01c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b01a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2201      	movs	r2, #1
 800b020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b036:	b480      	push	{r7}
 800b038:	b083      	sub	sp, #12
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b03e:	bf00      	nop
 800b040:	370c      	adds	r7, #12
 800b042:	46bd      	mov	sp, r7
 800b044:	bc80      	pop	{r7}
 800b046:	4770      	bx	lr

0800b048 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b050:	bf00      	nop
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	bc80      	pop	{r7}
 800b058:	4770      	bx	lr

0800b05a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b05a:	b480      	push	{r7}
 800b05c:	b083      	sub	sp, #12
 800b05e:	af00      	add	r7, sp, #0
 800b060:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b062:	bf00      	nop
 800b064:	370c      	adds	r7, #12
 800b066:	46bd      	mov	sp, r7
 800b068:	bc80      	pop	{r7}
 800b06a:	4770      	bx	lr

0800b06c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b06c:	b480      	push	{r7}
 800b06e:	b083      	sub	sp, #12
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b074:	bf00      	nop
 800b076:	370c      	adds	r7, #12
 800b078:	46bd      	mov	sp, r7
 800b07a:	bc80      	pop	{r7}
 800b07c:	4770      	bx	lr
	...

0800b080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b080:	b480      	push	{r7}
 800b082:	b085      	sub	sp, #20
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	4a33      	ldr	r2, [pc, #204]	; (800b160 <TIM_Base_SetConfig+0xe0>)
 800b094:	4293      	cmp	r3, r2
 800b096:	d013      	beq.n	800b0c0 <TIM_Base_SetConfig+0x40>
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	4a32      	ldr	r2, [pc, #200]	; (800b164 <TIM_Base_SetConfig+0xe4>)
 800b09c:	4293      	cmp	r3, r2
 800b09e:	d00f      	beq.n	800b0c0 <TIM_Base_SetConfig+0x40>
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0a6:	d00b      	beq.n	800b0c0 <TIM_Base_SetConfig+0x40>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4a2f      	ldr	r2, [pc, #188]	; (800b168 <TIM_Base_SetConfig+0xe8>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	d007      	beq.n	800b0c0 <TIM_Base_SetConfig+0x40>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	4a2e      	ldr	r2, [pc, #184]	; (800b16c <TIM_Base_SetConfig+0xec>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d003      	beq.n	800b0c0 <TIM_Base_SetConfig+0x40>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4a2d      	ldr	r2, [pc, #180]	; (800b170 <TIM_Base_SetConfig+0xf0>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d108      	bne.n	800b0d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	4a22      	ldr	r2, [pc, #136]	; (800b160 <TIM_Base_SetConfig+0xe0>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d013      	beq.n	800b102 <TIM_Base_SetConfig+0x82>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	4a21      	ldr	r2, [pc, #132]	; (800b164 <TIM_Base_SetConfig+0xe4>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d00f      	beq.n	800b102 <TIM_Base_SetConfig+0x82>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0e8:	d00b      	beq.n	800b102 <TIM_Base_SetConfig+0x82>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a1e      	ldr	r2, [pc, #120]	; (800b168 <TIM_Base_SetConfig+0xe8>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d007      	beq.n	800b102 <TIM_Base_SetConfig+0x82>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a1d      	ldr	r2, [pc, #116]	; (800b16c <TIM_Base_SetConfig+0xec>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d003      	beq.n	800b102 <TIM_Base_SetConfig+0x82>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a1c      	ldr	r2, [pc, #112]	; (800b170 <TIM_Base_SetConfig+0xf0>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d108      	bne.n	800b114 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	68fa      	ldr	r2, [r7, #12]
 800b110:	4313      	orrs	r3, r2
 800b112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	695b      	ldr	r3, [r3, #20]
 800b11e:	4313      	orrs	r3, r2
 800b120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	68fa      	ldr	r2, [r7, #12]
 800b126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	689a      	ldr	r2, [r3, #8]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	681a      	ldr	r2, [r3, #0]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	4a09      	ldr	r2, [pc, #36]	; (800b160 <TIM_Base_SetConfig+0xe0>)
 800b13c:	4293      	cmp	r3, r2
 800b13e:	d003      	beq.n	800b148 <TIM_Base_SetConfig+0xc8>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	4a08      	ldr	r2, [pc, #32]	; (800b164 <TIM_Base_SetConfig+0xe4>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d103      	bne.n	800b150 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	691a      	ldr	r2, [r3, #16]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2201      	movs	r2, #1
 800b154:	615a      	str	r2, [r3, #20]
}
 800b156:	bf00      	nop
 800b158:	3714      	adds	r7, #20
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bc80      	pop	{r7}
 800b15e:	4770      	bx	lr
 800b160:	40012c00 	.word	0x40012c00
 800b164:	40013400 	.word	0x40013400
 800b168:	40000400 	.word	0x40000400
 800b16c:	40000800 	.word	0x40000800
 800b170:	40000c00 	.word	0x40000c00

0800b174 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b174:	b480      	push	{r7}
 800b176:	b087      	sub	sp, #28
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	6a1b      	ldr	r3, [r3, #32]
 800b184:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6a1b      	ldr	r3, [r3, #32]
 800b18a:	f023 0201 	bic.w	r2, r3, #1
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	699b      	ldr	r3, [r3, #24]
 800b196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b19e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	011b      	lsls	r3, r3, #4
 800b1a4:	693a      	ldr	r2, [r7, #16]
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	f023 030a 	bic.w	r3, r3, #10
 800b1b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b1b2:	697a      	ldr	r2, [r7, #20]
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	693a      	ldr	r2, [r7, #16]
 800b1be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	697a      	ldr	r2, [r7, #20]
 800b1c4:	621a      	str	r2, [r3, #32]
}
 800b1c6:	bf00      	nop
 800b1c8:	371c      	adds	r7, #28
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bc80      	pop	{r7}
 800b1ce:	4770      	bx	lr

0800b1d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b087      	sub	sp, #28
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6a1b      	ldr	r3, [r3, #32]
 800b1e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	6a1b      	ldr	r3, [r3, #32]
 800b1e6:	f023 0210 	bic.w	r2, r3, #16
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	699b      	ldr	r3, [r3, #24]
 800b1f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b1fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	031b      	lsls	r3, r3, #12
 800b200:	693a      	ldr	r2, [r7, #16]
 800b202:	4313      	orrs	r3, r2
 800b204:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b206:	697b      	ldr	r3, [r7, #20]
 800b208:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b20c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	011b      	lsls	r3, r3, #4
 800b212:	697a      	ldr	r2, [r7, #20]
 800b214:	4313      	orrs	r3, r2
 800b216:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	693a      	ldr	r2, [r7, #16]
 800b21c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	697a      	ldr	r2, [r7, #20]
 800b222:	621a      	str	r2, [r3, #32]
}
 800b224:	bf00      	nop
 800b226:	371c      	adds	r7, #28
 800b228:	46bd      	mov	sp, r7
 800b22a:	bc80      	pop	{r7}
 800b22c:	4770      	bx	lr

0800b22e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b22e:	b480      	push	{r7}
 800b230:	b085      	sub	sp, #20
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
 800b236:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b244:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b246:	683a      	ldr	r2, [r7, #0]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	f043 0307 	orr.w	r3, r3, #7
 800b250:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	609a      	str	r2, [r3, #8]
}
 800b258:	bf00      	nop
 800b25a:	3714      	adds	r7, #20
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bc80      	pop	{r7}
 800b260:	4770      	bx	lr

0800b262 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b262:	b480      	push	{r7}
 800b264:	b087      	sub	sp, #28
 800b266:	af00      	add	r7, sp, #0
 800b268:	60f8      	str	r0, [r7, #12]
 800b26a:	60b9      	str	r1, [r7, #8]
 800b26c:	607a      	str	r2, [r7, #4]
 800b26e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	689b      	ldr	r3, [r3, #8]
 800b274:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b27c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	021a      	lsls	r2, r3, #8
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	431a      	orrs	r2, r3
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	4313      	orrs	r3, r2
 800b28a:	697a      	ldr	r2, [r7, #20]
 800b28c:	4313      	orrs	r3, r2
 800b28e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	697a      	ldr	r2, [r7, #20]
 800b294:	609a      	str	r2, [r3, #8]
}
 800b296:	bf00      	nop
 800b298:	371c      	adds	r7, #28
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bc80      	pop	{r7}
 800b29e:	4770      	bx	lr

0800b2a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2b0:	2b01      	cmp	r3, #1
 800b2b2:	d101      	bne.n	800b2b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b2b4:	2302      	movs	r3, #2
 800b2b6:	e050      	b.n	800b35a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2202      	movs	r2, #2
 800b2c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2e0:	683b      	ldr	r3, [r7, #0]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	68fa      	ldr	r2, [r7, #12]
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	68fa      	ldr	r2, [r7, #12]
 800b2f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	4a1b      	ldr	r2, [pc, #108]	; (800b364 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d018      	beq.n	800b32e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a19      	ldr	r2, [pc, #100]	; (800b368 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d013      	beq.n	800b32e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b30e:	d00e      	beq.n	800b32e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4a15      	ldr	r2, [pc, #84]	; (800b36c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b316:	4293      	cmp	r3, r2
 800b318:	d009      	beq.n	800b32e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	4a14      	ldr	r2, [pc, #80]	; (800b370 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b320:	4293      	cmp	r3, r2
 800b322:	d004      	beq.n	800b32e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a12      	ldr	r2, [pc, #72]	; (800b374 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d10c      	bne.n	800b348 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b334:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	68ba      	ldr	r2, [r7, #8]
 800b33c:	4313      	orrs	r3, r2
 800b33e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	68ba      	ldr	r2, [r7, #8]
 800b346:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b358:	2300      	movs	r3, #0
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3714      	adds	r7, #20
 800b35e:	46bd      	mov	sp, r7
 800b360:	bc80      	pop	{r7}
 800b362:	4770      	bx	lr
 800b364:	40012c00 	.word	0x40012c00
 800b368:	40013400 	.word	0x40013400
 800b36c:	40000400 	.word	0x40000400
 800b370:	40000800 	.word	0x40000800
 800b374:	40000c00 	.word	0x40000c00

0800b378 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b380:	bf00      	nop
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	bc80      	pop	{r7}
 800b388:	4770      	bx	lr

0800b38a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b38a:	b480      	push	{r7}
 800b38c:	b083      	sub	sp, #12
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b392:	bf00      	nop
 800b394:	370c      	adds	r7, #12
 800b396:	46bd      	mov	sp, r7
 800b398:	bc80      	pop	{r7}
 800b39a:	4770      	bx	lr

0800b39c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d101      	bne.n	800b3ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	e042      	b.n	800b434 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d106      	bne.n	800b3c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2200      	movs	r2, #0
 800b3be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f7fc fe1a 	bl	8007ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2224      	movs	r2, #36	; 0x24
 800b3cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	68da      	ldr	r2, [r3, #12]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b3de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b3e0:	6878      	ldr	r0, [r7, #4]
 800b3e2:	f000 fd11 	bl	800be08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	691a      	ldr	r2, [r3, #16]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b3f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	695a      	ldr	r2, [r3, #20]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b404:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	68da      	ldr	r2, [r3, #12]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b414:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2220      	movs	r2, #32
 800b420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2220      	movs	r2, #32
 800b428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3708      	adds	r7, #8
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b085      	sub	sp, #20
 800b440:	af00      	add	r7, sp, #0
 800b442:	60f8      	str	r0, [r7, #12]
 800b444:	60b9      	str	r1, [r7, #8]
 800b446:	4613      	mov	r3, r2
 800b448:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b450:	b2db      	uxtb	r3, r3
 800b452:	2b20      	cmp	r3, #32
 800b454:	d121      	bne.n	800b49a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d002      	beq.n	800b462 <HAL_UART_Transmit_IT+0x26>
 800b45c:	88fb      	ldrh	r3, [r7, #6]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d101      	bne.n	800b466 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b462:	2301      	movs	r3, #1
 800b464:	e01a      	b.n	800b49c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	68ba      	ldr	r2, [r7, #8]
 800b46a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	88fa      	ldrh	r2, [r7, #6]
 800b470:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	88fa      	ldrh	r2, [r7, #6]
 800b476:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2200      	movs	r2, #0
 800b47c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2221      	movs	r2, #33	; 0x21
 800b482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	68da      	ldr	r2, [r3, #12]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b494:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b496:	2300      	movs	r3, #0
 800b498:	e000      	b.n	800b49c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b49a:	2302      	movs	r3, #2
  }
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3714      	adds	r7, #20
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bc80      	pop	{r7}
 800b4a4:	4770      	bx	lr

0800b4a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b084      	sub	sp, #16
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	60f8      	str	r0, [r7, #12]
 800b4ae:	60b9      	str	r1, [r7, #8]
 800b4b0:	4613      	mov	r3, r2
 800b4b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	2b20      	cmp	r3, #32
 800b4be:	d112      	bne.n	800b4e6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d002      	beq.n	800b4cc <HAL_UART_Receive_IT+0x26>
 800b4c6:	88fb      	ldrh	r3, [r7, #6]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d101      	bne.n	800b4d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e00b      	b.n	800b4e8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b4d6:	88fb      	ldrh	r3, [r7, #6]
 800b4d8:	461a      	mov	r2, r3
 800b4da:	68b9      	ldr	r1, [r7, #8]
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f000 fabf 	bl	800ba60 <UART_Start_Receive_IT>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	e000      	b.n	800b4e8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800b4e6:	2302      	movs	r3, #2
  }
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3710      	adds	r7, #16
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}

0800b4f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b0ba      	sub	sp, #232	; 0xe8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	68db      	ldr	r3, [r3, #12]
 800b508:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	695b      	ldr	r3, [r3, #20]
 800b512:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b516:	2300      	movs	r3, #0
 800b518:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b51c:	2300      	movs	r3, #0
 800b51e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b526:	f003 030f 	and.w	r3, r3, #15
 800b52a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b52e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b532:	2b00      	cmp	r3, #0
 800b534:	d10f      	bne.n	800b556 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b53a:	f003 0320 	and.w	r3, r3, #32
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d009      	beq.n	800b556 <HAL_UART_IRQHandler+0x66>
 800b542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b546:	f003 0320 	and.w	r3, r3, #32
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d003      	beq.n	800b556 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 fb9c 	bl	800bc8c <UART_Receive_IT>
      return;
 800b554:	e25b      	b.n	800ba0e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b556:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	f000 80de 	beq.w	800b71c <HAL_UART_IRQHandler+0x22c>
 800b560:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b564:	f003 0301 	and.w	r3, r3, #1
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d106      	bne.n	800b57a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b56c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b570:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b574:	2b00      	cmp	r3, #0
 800b576:	f000 80d1 	beq.w	800b71c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b57a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b57e:	f003 0301 	and.w	r3, r3, #1
 800b582:	2b00      	cmp	r3, #0
 800b584:	d00b      	beq.n	800b59e <HAL_UART_IRQHandler+0xae>
 800b586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b58a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d005      	beq.n	800b59e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b596:	f043 0201 	orr.w	r2, r3, #1
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b59e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5a2:	f003 0304 	and.w	r3, r3, #4
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d00b      	beq.n	800b5c2 <HAL_UART_IRQHandler+0xd2>
 800b5aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5ae:	f003 0301 	and.w	r3, r3, #1
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d005      	beq.n	800b5c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5ba:	f043 0202 	orr.w	r2, r3, #2
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b5c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5c6:	f003 0302 	and.w	r3, r3, #2
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00b      	beq.n	800b5e6 <HAL_UART_IRQHandler+0xf6>
 800b5ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5d2:	f003 0301 	and.w	r3, r3, #1
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d005      	beq.n	800b5e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5de:	f043 0204 	orr.w	r2, r3, #4
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b5e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5ea:	f003 0308 	and.w	r3, r3, #8
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d011      	beq.n	800b616 <HAL_UART_IRQHandler+0x126>
 800b5f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5f6:	f003 0320 	and.w	r3, r3, #32
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d105      	bne.n	800b60a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b5fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b602:	f003 0301 	and.w	r3, r3, #1
 800b606:	2b00      	cmp	r3, #0
 800b608:	d005      	beq.n	800b616 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b60e:	f043 0208 	orr.w	r2, r3, #8
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	f000 81f2 	beq.w	800ba04 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b620:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b624:	f003 0320 	and.w	r3, r3, #32
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d008      	beq.n	800b63e <HAL_UART_IRQHandler+0x14e>
 800b62c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b630:	f003 0320 	and.w	r3, r3, #32
 800b634:	2b00      	cmp	r3, #0
 800b636:	d002      	beq.n	800b63e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 fb27 	bl	800bc8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	695b      	ldr	r3, [r3, #20]
 800b644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b648:	2b00      	cmp	r3, #0
 800b64a:	bf14      	ite	ne
 800b64c:	2301      	movne	r3, #1
 800b64e:	2300      	moveq	r3, #0
 800b650:	b2db      	uxtb	r3, r3
 800b652:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b65a:	f003 0308 	and.w	r3, r3, #8
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d103      	bne.n	800b66a <HAL_UART_IRQHandler+0x17a>
 800b662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b666:	2b00      	cmp	r3, #0
 800b668:	d04f      	beq.n	800b70a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 fa31 	bl	800bad2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	695b      	ldr	r3, [r3, #20]
 800b676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d041      	beq.n	800b702 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	3314      	adds	r3, #20
 800b684:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b688:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b68c:	e853 3f00 	ldrex	r3, [r3]
 800b690:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b694:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b69c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	3314      	adds	r3, #20
 800b6a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b6aa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b6ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b6b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b6ba:	e841 2300 	strex	r3, r2, [r1]
 800b6be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b6c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d1d9      	bne.n	800b67e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d013      	beq.n	800b6fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6d6:	4a7e      	ldr	r2, [pc, #504]	; (800b8d0 <HAL_UART_IRQHandler+0x3e0>)
 800b6d8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7fd f848 	bl	8008774 <HAL_DMA_Abort_IT>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d016      	beq.n	800b718 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b6f4:	4610      	mov	r0, r2
 800b6f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6f8:	e00e      	b.n	800b718 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 f99c 	bl	800ba38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b700:	e00a      	b.n	800b718 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 f998 	bl	800ba38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b708:	e006      	b.n	800b718 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 f994 	bl	800ba38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2200      	movs	r2, #0
 800b714:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b716:	e175      	b.n	800ba04 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b718:	bf00      	nop
    return;
 800b71a:	e173      	b.n	800ba04 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b720:	2b01      	cmp	r3, #1
 800b722:	f040 814f 	bne.w	800b9c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b72a:	f003 0310 	and.w	r3, r3, #16
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f000 8148 	beq.w	800b9c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b738:	f003 0310 	and.w	r3, r3, #16
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	f000 8141 	beq.w	800b9c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b742:	2300      	movs	r3, #0
 800b744:	60bb      	str	r3, [r7, #8]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	60bb      	str	r3, [r7, #8]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	60bb      	str	r3, [r7, #8]
 800b756:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	695b      	ldr	r3, [r3, #20]
 800b75e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b762:	2b00      	cmp	r3, #0
 800b764:	f000 80b6 	beq.w	800b8d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b774:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b778:	2b00      	cmp	r3, #0
 800b77a:	f000 8145 	beq.w	800ba08 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b782:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b786:	429a      	cmp	r2, r3
 800b788:	f080 813e 	bcs.w	800ba08 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b792:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b798:	699b      	ldr	r3, [r3, #24]
 800b79a:	2b20      	cmp	r3, #32
 800b79c:	f000 8088 	beq.w	800b8b0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	330c      	adds	r3, #12
 800b7a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b7ae:	e853 3f00 	ldrex	r3, [r3]
 800b7b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b7b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b7ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	330c      	adds	r3, #12
 800b7c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b7cc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b7d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b7d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b7dc:	e841 2300 	strex	r3, r2, [r1]
 800b7e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b7e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1d9      	bne.n	800b7a0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	3314      	adds	r3, #20
 800b7f2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7f6:	e853 3f00 	ldrex	r3, [r3]
 800b7fa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b7fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7fe:	f023 0301 	bic.w	r3, r3, #1
 800b802:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	3314      	adds	r3, #20
 800b80c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b810:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b814:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b816:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b818:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b81c:	e841 2300 	strex	r3, r2, [r1]
 800b820:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b824:	2b00      	cmp	r3, #0
 800b826:	d1e1      	bne.n	800b7ec <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	3314      	adds	r3, #20
 800b82e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b830:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b832:	e853 3f00 	ldrex	r3, [r3]
 800b836:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b83a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b83e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	3314      	adds	r3, #20
 800b848:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b84c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b84e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b850:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b852:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b854:	e841 2300 	strex	r3, r2, [r1]
 800b858:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b85a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1e3      	bne.n	800b828 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2220      	movs	r2, #32
 800b864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2200      	movs	r2, #0
 800b86c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	330c      	adds	r3, #12
 800b874:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b878:	e853 3f00 	ldrex	r3, [r3]
 800b87c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b87e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b880:	f023 0310 	bic.w	r3, r3, #16
 800b884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	330c      	adds	r3, #12
 800b88e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b892:	65ba      	str	r2, [r7, #88]	; 0x58
 800b894:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b896:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b898:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b89a:	e841 2300 	strex	r3, r2, [r1]
 800b89e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b8a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1e3      	bne.n	800b86e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fc ff27 	bl	80086fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2202      	movs	r2, #2
 800b8b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	1ad3      	subs	r3, r2, r3
 800b8c2:	b29b      	uxth	r3, r3
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 f8bf 	bl	800ba4a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b8cc:	e09c      	b.n	800ba08 <HAL_UART_IRQHandler+0x518>
 800b8ce:	bf00      	nop
 800b8d0:	0800bb97 	.word	0x0800bb97
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	1ad3      	subs	r3, r2, r3
 800b8e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b8e8:	b29b      	uxth	r3, r3
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	f000 808e 	beq.w	800ba0c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b8f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f000 8089 	beq.w	800ba0c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	330c      	adds	r3, #12
 800b900:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b904:	e853 3f00 	ldrex	r3, [r3]
 800b908:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b90c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b910:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	330c      	adds	r3, #12
 800b91a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b91e:	647a      	str	r2, [r7, #68]	; 0x44
 800b920:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b922:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b924:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b926:	e841 2300 	strex	r3, r2, [r1]
 800b92a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b92c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1e3      	bne.n	800b8fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	3314      	adds	r3, #20
 800b938:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93c:	e853 3f00 	ldrex	r3, [r3]
 800b940:	623b      	str	r3, [r7, #32]
   return(result);
 800b942:	6a3b      	ldr	r3, [r7, #32]
 800b944:	f023 0301 	bic.w	r3, r3, #1
 800b948:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	3314      	adds	r3, #20
 800b952:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b956:	633a      	str	r2, [r7, #48]	; 0x30
 800b958:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b95a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b95c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b95e:	e841 2300 	strex	r3, r2, [r1]
 800b962:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b966:	2b00      	cmp	r3, #0
 800b968:	d1e3      	bne.n	800b932 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2220      	movs	r2, #32
 800b96e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2200      	movs	r2, #0
 800b976:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	330c      	adds	r3, #12
 800b97e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	e853 3f00 	ldrex	r3, [r3]
 800b986:	60fb      	str	r3, [r7, #12]
   return(result);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f023 0310 	bic.w	r3, r3, #16
 800b98e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	330c      	adds	r3, #12
 800b998:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b99c:	61fa      	str	r2, [r7, #28]
 800b99e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a0:	69b9      	ldr	r1, [r7, #24]
 800b9a2:	69fa      	ldr	r2, [r7, #28]
 800b9a4:	e841 2300 	strex	r3, r2, [r1]
 800b9a8:	617b      	str	r3, [r7, #20]
   return(result);
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d1e3      	bne.n	800b978 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2202      	movs	r2, #2
 800b9b4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b9b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 f844 	bl	800ba4a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b9c2:	e023      	b.n	800ba0c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b9c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d009      	beq.n	800b9e4 <HAL_UART_IRQHandler+0x4f4>
 800b9d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d003      	beq.n	800b9e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 f8ee 	bl	800bbbe <UART_Transmit_IT>
    return;
 800b9e2:	e014      	b.n	800ba0e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b9e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d00e      	beq.n	800ba0e <HAL_UART_IRQHandler+0x51e>
 800b9f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d008      	beq.n	800ba0e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 f92d 	bl	800bc5c <UART_EndTransmit_IT>
    return;
 800ba02:	e004      	b.n	800ba0e <HAL_UART_IRQHandler+0x51e>
    return;
 800ba04:	bf00      	nop
 800ba06:	e002      	b.n	800ba0e <HAL_UART_IRQHandler+0x51e>
      return;
 800ba08:	bf00      	nop
 800ba0a:	e000      	b.n	800ba0e <HAL_UART_IRQHandler+0x51e>
      return;
 800ba0c:	bf00      	nop
  }
}
 800ba0e:	37e8      	adds	r7, #232	; 0xe8
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ba1c:	bf00      	nop
 800ba1e:	370c      	adds	r7, #12
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bc80      	pop	{r7}
 800ba24:	4770      	bx	lr

0800ba26 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba26:	b480      	push	{r7}
 800ba28:	b083      	sub	sp, #12
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ba2e:	bf00      	nop
 800ba30:	370c      	adds	r7, #12
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bc80      	pop	{r7}
 800ba36:	4770      	bx	lr

0800ba38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b083      	sub	sp, #12
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ba40:	bf00      	nop
 800ba42:	370c      	adds	r7, #12
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bc80      	pop	{r7}
 800ba48:	4770      	bx	lr

0800ba4a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ba4a:	b480      	push	{r7}
 800ba4c:	b083      	sub	sp, #12
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	6078      	str	r0, [r7, #4]
 800ba52:	460b      	mov	r3, r1
 800ba54:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ba56:	bf00      	nop
 800ba58:	370c      	adds	r7, #12
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bc80      	pop	{r7}
 800ba5e:	4770      	bx	lr

0800ba60 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba60:	b480      	push	{r7}
 800ba62:	b085      	sub	sp, #20
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	60f8      	str	r0, [r7, #12]
 800ba68:	60b9      	str	r1, [r7, #8]
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	68ba      	ldr	r2, [r7, #8]
 800ba72:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	88fa      	ldrh	r2, [r7, #6]
 800ba78:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	88fa      	ldrh	r2, [r7, #6]
 800ba7e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	2200      	movs	r2, #0
 800ba84:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2222      	movs	r2, #34	; 0x22
 800ba8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d007      	beq.n	800baa6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	68da      	ldr	r2, [r3, #12]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800baa4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	695a      	ldr	r2, [r3, #20]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f042 0201 	orr.w	r2, r2, #1
 800bab4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68da      	ldr	r2, [r3, #12]
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f042 0220 	orr.w	r2, r2, #32
 800bac4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bac6:	2300      	movs	r3, #0
}
 800bac8:	4618      	mov	r0, r3
 800baca:	3714      	adds	r7, #20
 800bacc:	46bd      	mov	sp, r7
 800bace:	bc80      	pop	{r7}
 800bad0:	4770      	bx	lr

0800bad2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bad2:	b480      	push	{r7}
 800bad4:	b095      	sub	sp, #84	; 0x54
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	330c      	adds	r3, #12
 800bae0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bae4:	e853 3f00 	ldrex	r3, [r3]
 800bae8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800baea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800baf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	330c      	adds	r3, #12
 800baf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bafa:	643a      	str	r2, [r7, #64]	; 0x40
 800bafc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bafe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bb00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb02:	e841 2300 	strex	r3, r2, [r1]
 800bb06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d1e5      	bne.n	800bada <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	3314      	adds	r3, #20
 800bb14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb16:	6a3b      	ldr	r3, [r7, #32]
 800bb18:	e853 3f00 	ldrex	r3, [r3]
 800bb1c:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb1e:	69fb      	ldr	r3, [r7, #28]
 800bb20:	f023 0301 	bic.w	r3, r3, #1
 800bb24:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	3314      	adds	r3, #20
 800bb2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bb30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bb34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb36:	e841 2300 	strex	r3, r2, [r1]
 800bb3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d1e5      	bne.n	800bb0e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d119      	bne.n	800bb7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	330c      	adds	r3, #12
 800bb50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	e853 3f00 	ldrex	r3, [r3]
 800bb58:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb5a:	68bb      	ldr	r3, [r7, #8]
 800bb5c:	f023 0310 	bic.w	r3, r3, #16
 800bb60:	647b      	str	r3, [r7, #68]	; 0x44
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	330c      	adds	r3, #12
 800bb68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb6a:	61ba      	str	r2, [r7, #24]
 800bb6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb6e:	6979      	ldr	r1, [r7, #20]
 800bb70:	69ba      	ldr	r2, [r7, #24]
 800bb72:	e841 2300 	strex	r3, r2, [r1]
 800bb76:	613b      	str	r3, [r7, #16]
   return(result);
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d1e5      	bne.n	800bb4a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2220      	movs	r2, #32
 800bb82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bb8c:	bf00      	nop
 800bb8e:	3754      	adds	r7, #84	; 0x54
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bc80      	pop	{r7}
 800bb94:	4770      	bx	lr

0800bb96 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bb96:	b580      	push	{r7, lr}
 800bb98:	b084      	sub	sp, #16
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bba2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2200      	movs	r2, #0
 800bba8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2200      	movs	r2, #0
 800bbae:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	f7ff ff41 	bl	800ba38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbb6:	bf00      	nop
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bbbe:	b480      	push	{r7}
 800bbc0:	b085      	sub	sp, #20
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bbcc:	b2db      	uxtb	r3, r3
 800bbce:	2b21      	cmp	r3, #33	; 0x21
 800bbd0:	d13e      	bne.n	800bc50 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbda:	d114      	bne.n	800bc06 <UART_Transmit_IT+0x48>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	691b      	ldr	r3, [r3, #16]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d110      	bne.n	800bc06 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6a1b      	ldr	r3, [r3, #32]
 800bbe8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	881b      	ldrh	r3, [r3, #0]
 800bbee:	461a      	mov	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bbf8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6a1b      	ldr	r3, [r3, #32]
 800bbfe:	1c9a      	adds	r2, r3, #2
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	621a      	str	r2, [r3, #32]
 800bc04:	e008      	b.n	800bc18 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6a1b      	ldr	r3, [r3, #32]
 800bc0a:	1c59      	adds	r1, r3, #1
 800bc0c:	687a      	ldr	r2, [r7, #4]
 800bc0e:	6211      	str	r1, [r2, #32]
 800bc10:	781a      	ldrb	r2, [r3, #0]
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	3b01      	subs	r3, #1
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	4619      	mov	r1, r3
 800bc26:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d10f      	bne.n	800bc4c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	68da      	ldr	r2, [r3, #12]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc3a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	68da      	ldr	r2, [r3, #12]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bc4a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	e000      	b.n	800bc52 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bc50:	2302      	movs	r3, #2
  }
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3714      	adds	r7, #20
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bc80      	pop	{r7}
 800bc5a:	4770      	bx	lr

0800bc5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	68da      	ldr	r2, [r3, #12]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2220      	movs	r2, #32
 800bc78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f7ff fec9 	bl	800ba14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bc82:	2300      	movs	r3, #0
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3708      	adds	r7, #8
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}

0800bc8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b08c      	sub	sp, #48	; 0x30
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bc9a:	b2db      	uxtb	r3, r3
 800bc9c:	2b22      	cmp	r3, #34	; 0x22
 800bc9e:	f040 80ae 	bne.w	800bdfe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	689b      	ldr	r3, [r3, #8]
 800bca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcaa:	d117      	bne.n	800bcdc <UART_Receive_IT+0x50>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	691b      	ldr	r3, [r3, #16]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d113      	bne.n	800bcdc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bcb4:	2300      	movs	r3, #0
 800bcb6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcbc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcca:	b29a      	uxth	r2, r3
 800bccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcd4:	1c9a      	adds	r2, r3, #2
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	629a      	str	r2, [r3, #40]	; 0x28
 800bcda:	e026      	b.n	800bd2a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bce0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bce2:	2300      	movs	r3, #0
 800bce4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcee:	d007      	beq.n	800bd00 <UART_Receive_IT+0x74>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d10a      	bne.n	800bd0e <UART_Receive_IT+0x82>
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	691b      	ldr	r3, [r3, #16]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d106      	bne.n	800bd0e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	b2da      	uxtb	r2, r3
 800bd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd0a:	701a      	strb	r2, [r3, #0]
 800bd0c:	e008      	b.n	800bd20 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	b2db      	uxtb	r3, r3
 800bd16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd1a:	b2da      	uxtb	r2, r3
 800bd1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd1e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd24:	1c5a      	adds	r2, r3, #1
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	3b01      	subs	r3, #1
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	4619      	mov	r1, r3
 800bd38:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d15d      	bne.n	800bdfa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	68da      	ldr	r2, [r3, #12]
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f022 0220 	bic.w	r2, r2, #32
 800bd4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	68da      	ldr	r2, [r3, #12]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bd5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	695a      	ldr	r2, [r3, #20]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	f022 0201 	bic.w	r2, r2, #1
 800bd6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2220      	movs	r2, #32
 800bd72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d135      	bne.n	800bdf0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2200      	movs	r2, #0
 800bd88:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	330c      	adds	r3, #12
 800bd90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd92:	697b      	ldr	r3, [r7, #20]
 800bd94:	e853 3f00 	ldrex	r3, [r3]
 800bd98:	613b      	str	r3, [r7, #16]
   return(result);
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	f023 0310 	bic.w	r3, r3, #16
 800bda0:	627b      	str	r3, [r7, #36]	; 0x24
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	330c      	adds	r3, #12
 800bda8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdaa:	623a      	str	r2, [r7, #32]
 800bdac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdae:	69f9      	ldr	r1, [r7, #28]
 800bdb0:	6a3a      	ldr	r2, [r7, #32]
 800bdb2:	e841 2300 	strex	r3, r2, [r1]
 800bdb6:	61bb      	str	r3, [r7, #24]
   return(result);
 800bdb8:	69bb      	ldr	r3, [r7, #24]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d1e5      	bne.n	800bd8a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f003 0310 	and.w	r3, r3, #16
 800bdc8:	2b10      	cmp	r3, #16
 800bdca:	d10a      	bne.n	800bde2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bdcc:	2300      	movs	r3, #0
 800bdce:	60fb      	str	r3, [r7, #12]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	60fb      	str	r3, [r7, #12]
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	60fb      	str	r3, [r7, #12]
 800bde0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bde6:	4619      	mov	r1, r3
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f7ff fe2e 	bl	800ba4a <HAL_UARTEx_RxEventCallback>
 800bdee:	e002      	b.n	800bdf6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f7ff fe18 	bl	800ba26 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	e002      	b.n	800be00 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	e000      	b.n	800be00 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bdfe:	2302      	movs	r3, #2
  }
}
 800be00:	4618      	mov	r0, r3
 800be02:	3730      	adds	r7, #48	; 0x30
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	691b      	ldr	r3, [r3, #16]
 800be16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	68da      	ldr	r2, [r3, #12]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	430a      	orrs	r2, r1
 800be24:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	689a      	ldr	r2, [r3, #8]
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	691b      	ldr	r3, [r3, #16]
 800be2e:	431a      	orrs	r2, r3
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	695b      	ldr	r3, [r3, #20]
 800be34:	4313      	orrs	r3, r2
 800be36:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800be42:	f023 030c 	bic.w	r3, r3, #12
 800be46:	687a      	ldr	r2, [r7, #4]
 800be48:	6812      	ldr	r2, [r2, #0]
 800be4a:	68b9      	ldr	r1, [r7, #8]
 800be4c:	430b      	orrs	r3, r1
 800be4e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	695b      	ldr	r3, [r3, #20]
 800be56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	699a      	ldr	r2, [r3, #24]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	430a      	orrs	r2, r1
 800be64:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a2c      	ldr	r2, [pc, #176]	; (800bf1c <UART_SetConfig+0x114>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d103      	bne.n	800be78 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800be70:	f7fe fe30 	bl	800aad4 <HAL_RCC_GetPCLK2Freq>
 800be74:	60f8      	str	r0, [r7, #12]
 800be76:	e002      	b.n	800be7e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800be78:	f7fe fe18 	bl	800aaac <HAL_RCC_GetPCLK1Freq>
 800be7c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800be7e:	68fa      	ldr	r2, [r7, #12]
 800be80:	4613      	mov	r3, r2
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	4413      	add	r3, r2
 800be86:	009a      	lsls	r2, r3, #2
 800be88:	441a      	add	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	685b      	ldr	r3, [r3, #4]
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	fbb2 f3f3 	udiv	r3, r2, r3
 800be94:	4a22      	ldr	r2, [pc, #136]	; (800bf20 <UART_SetConfig+0x118>)
 800be96:	fba2 2303 	umull	r2, r3, r2, r3
 800be9a:	095b      	lsrs	r3, r3, #5
 800be9c:	0119      	lsls	r1, r3, #4
 800be9e:	68fa      	ldr	r2, [r7, #12]
 800bea0:	4613      	mov	r3, r2
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	4413      	add	r3, r2
 800bea6:	009a      	lsls	r2, r3, #2
 800bea8:	441a      	add	r2, r3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	fbb2 f2f3 	udiv	r2, r2, r3
 800beb4:	4b1a      	ldr	r3, [pc, #104]	; (800bf20 <UART_SetConfig+0x118>)
 800beb6:	fba3 0302 	umull	r0, r3, r3, r2
 800beba:	095b      	lsrs	r3, r3, #5
 800bebc:	2064      	movs	r0, #100	; 0x64
 800bebe:	fb00 f303 	mul.w	r3, r0, r3
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	011b      	lsls	r3, r3, #4
 800bec6:	3332      	adds	r3, #50	; 0x32
 800bec8:	4a15      	ldr	r2, [pc, #84]	; (800bf20 <UART_SetConfig+0x118>)
 800beca:	fba2 2303 	umull	r2, r3, r2, r3
 800bece:	095b      	lsrs	r3, r3, #5
 800bed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bed4:	4419      	add	r1, r3
 800bed6:	68fa      	ldr	r2, [r7, #12]
 800bed8:	4613      	mov	r3, r2
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	4413      	add	r3, r2
 800bede:	009a      	lsls	r2, r3, #2
 800bee0:	441a      	add	r2, r3
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	fbb2 f2f3 	udiv	r2, r2, r3
 800beec:	4b0c      	ldr	r3, [pc, #48]	; (800bf20 <UART_SetConfig+0x118>)
 800beee:	fba3 0302 	umull	r0, r3, r3, r2
 800bef2:	095b      	lsrs	r3, r3, #5
 800bef4:	2064      	movs	r0, #100	; 0x64
 800bef6:	fb00 f303 	mul.w	r3, r0, r3
 800befa:	1ad3      	subs	r3, r2, r3
 800befc:	011b      	lsls	r3, r3, #4
 800befe:	3332      	adds	r3, #50	; 0x32
 800bf00:	4a07      	ldr	r2, [pc, #28]	; (800bf20 <UART_SetConfig+0x118>)
 800bf02:	fba2 2303 	umull	r2, r3, r2, r3
 800bf06:	095b      	lsrs	r3, r3, #5
 800bf08:	f003 020f 	and.w	r2, r3, #15
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	440a      	add	r2, r1
 800bf12:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800bf14:	bf00      	nop
 800bf16:	3710      	adds	r7, #16
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}
 800bf1c:	40013800 	.word	0x40013800
 800bf20:	51eb851f 	.word	0x51eb851f

0800bf24 <__itoa>:
 800bf24:	1e93      	subs	r3, r2, #2
 800bf26:	2b22      	cmp	r3, #34	; 0x22
 800bf28:	b510      	push	{r4, lr}
 800bf2a:	460c      	mov	r4, r1
 800bf2c:	d904      	bls.n	800bf38 <__itoa+0x14>
 800bf2e:	2300      	movs	r3, #0
 800bf30:	461c      	mov	r4, r3
 800bf32:	700b      	strb	r3, [r1, #0]
 800bf34:	4620      	mov	r0, r4
 800bf36:	bd10      	pop	{r4, pc}
 800bf38:	2a0a      	cmp	r2, #10
 800bf3a:	d109      	bne.n	800bf50 <__itoa+0x2c>
 800bf3c:	2800      	cmp	r0, #0
 800bf3e:	da07      	bge.n	800bf50 <__itoa+0x2c>
 800bf40:	232d      	movs	r3, #45	; 0x2d
 800bf42:	700b      	strb	r3, [r1, #0]
 800bf44:	2101      	movs	r1, #1
 800bf46:	4240      	negs	r0, r0
 800bf48:	4421      	add	r1, r4
 800bf4a:	f000 f90d 	bl	800c168 <__utoa>
 800bf4e:	e7f1      	b.n	800bf34 <__itoa+0x10>
 800bf50:	2100      	movs	r1, #0
 800bf52:	e7f9      	b.n	800bf48 <__itoa+0x24>

0800bf54 <itoa>:
 800bf54:	f7ff bfe6 	b.w	800bf24 <__itoa>

0800bf58 <malloc>:
 800bf58:	4b02      	ldr	r3, [pc, #8]	; (800bf64 <malloc+0xc>)
 800bf5a:	4601      	mov	r1, r0
 800bf5c:	6818      	ldr	r0, [r3, #0]
 800bf5e:	f000 b823 	b.w	800bfa8 <_malloc_r>
 800bf62:	bf00      	nop
 800bf64:	2000010c 	.word	0x2000010c

0800bf68 <sbrk_aligned>:
 800bf68:	b570      	push	{r4, r5, r6, lr}
 800bf6a:	4e0e      	ldr	r6, [pc, #56]	; (800bfa4 <sbrk_aligned+0x3c>)
 800bf6c:	460c      	mov	r4, r1
 800bf6e:	6831      	ldr	r1, [r6, #0]
 800bf70:	4605      	mov	r5, r0
 800bf72:	b911      	cbnz	r1, 800bf7a <sbrk_aligned+0x12>
 800bf74:	f000 f968 	bl	800c248 <_sbrk_r>
 800bf78:	6030      	str	r0, [r6, #0]
 800bf7a:	4621      	mov	r1, r4
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	f000 f963 	bl	800c248 <_sbrk_r>
 800bf82:	1c43      	adds	r3, r0, #1
 800bf84:	d00a      	beq.n	800bf9c <sbrk_aligned+0x34>
 800bf86:	1cc4      	adds	r4, r0, #3
 800bf88:	f024 0403 	bic.w	r4, r4, #3
 800bf8c:	42a0      	cmp	r0, r4
 800bf8e:	d007      	beq.n	800bfa0 <sbrk_aligned+0x38>
 800bf90:	1a21      	subs	r1, r4, r0
 800bf92:	4628      	mov	r0, r5
 800bf94:	f000 f958 	bl	800c248 <_sbrk_r>
 800bf98:	3001      	adds	r0, #1
 800bf9a:	d101      	bne.n	800bfa0 <sbrk_aligned+0x38>
 800bf9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	bd70      	pop	{r4, r5, r6, pc}
 800bfa4:	20000380 	.word	0x20000380

0800bfa8 <_malloc_r>:
 800bfa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfac:	1ccd      	adds	r5, r1, #3
 800bfae:	f025 0503 	bic.w	r5, r5, #3
 800bfb2:	3508      	adds	r5, #8
 800bfb4:	2d0c      	cmp	r5, #12
 800bfb6:	bf38      	it	cc
 800bfb8:	250c      	movcc	r5, #12
 800bfba:	2d00      	cmp	r5, #0
 800bfbc:	4607      	mov	r7, r0
 800bfbe:	db01      	blt.n	800bfc4 <_malloc_r+0x1c>
 800bfc0:	42a9      	cmp	r1, r5
 800bfc2:	d905      	bls.n	800bfd0 <_malloc_r+0x28>
 800bfc4:	230c      	movs	r3, #12
 800bfc6:	2600      	movs	r6, #0
 800bfc8:	603b      	str	r3, [r7, #0]
 800bfca:	4630      	mov	r0, r6
 800bfcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfd0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c0a4 <_malloc_r+0xfc>
 800bfd4:	f000 f89c 	bl	800c110 <__malloc_lock>
 800bfd8:	f8d8 3000 	ldr.w	r3, [r8]
 800bfdc:	461c      	mov	r4, r3
 800bfde:	bb5c      	cbnz	r4, 800c038 <_malloc_r+0x90>
 800bfe0:	4629      	mov	r1, r5
 800bfe2:	4638      	mov	r0, r7
 800bfe4:	f7ff ffc0 	bl	800bf68 <sbrk_aligned>
 800bfe8:	1c43      	adds	r3, r0, #1
 800bfea:	4604      	mov	r4, r0
 800bfec:	d155      	bne.n	800c09a <_malloc_r+0xf2>
 800bfee:	f8d8 4000 	ldr.w	r4, [r8]
 800bff2:	4626      	mov	r6, r4
 800bff4:	2e00      	cmp	r6, #0
 800bff6:	d145      	bne.n	800c084 <_malloc_r+0xdc>
 800bff8:	2c00      	cmp	r4, #0
 800bffa:	d048      	beq.n	800c08e <_malloc_r+0xe6>
 800bffc:	6823      	ldr	r3, [r4, #0]
 800bffe:	4631      	mov	r1, r6
 800c000:	4638      	mov	r0, r7
 800c002:	eb04 0903 	add.w	r9, r4, r3
 800c006:	f000 f91f 	bl	800c248 <_sbrk_r>
 800c00a:	4581      	cmp	r9, r0
 800c00c:	d13f      	bne.n	800c08e <_malloc_r+0xe6>
 800c00e:	6821      	ldr	r1, [r4, #0]
 800c010:	4638      	mov	r0, r7
 800c012:	1a6d      	subs	r5, r5, r1
 800c014:	4629      	mov	r1, r5
 800c016:	f7ff ffa7 	bl	800bf68 <sbrk_aligned>
 800c01a:	3001      	adds	r0, #1
 800c01c:	d037      	beq.n	800c08e <_malloc_r+0xe6>
 800c01e:	6823      	ldr	r3, [r4, #0]
 800c020:	442b      	add	r3, r5
 800c022:	6023      	str	r3, [r4, #0]
 800c024:	f8d8 3000 	ldr.w	r3, [r8]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d038      	beq.n	800c09e <_malloc_r+0xf6>
 800c02c:	685a      	ldr	r2, [r3, #4]
 800c02e:	42a2      	cmp	r2, r4
 800c030:	d12b      	bne.n	800c08a <_malloc_r+0xe2>
 800c032:	2200      	movs	r2, #0
 800c034:	605a      	str	r2, [r3, #4]
 800c036:	e00f      	b.n	800c058 <_malloc_r+0xb0>
 800c038:	6822      	ldr	r2, [r4, #0]
 800c03a:	1b52      	subs	r2, r2, r5
 800c03c:	d41f      	bmi.n	800c07e <_malloc_r+0xd6>
 800c03e:	2a0b      	cmp	r2, #11
 800c040:	d917      	bls.n	800c072 <_malloc_r+0xca>
 800c042:	1961      	adds	r1, r4, r5
 800c044:	42a3      	cmp	r3, r4
 800c046:	6025      	str	r5, [r4, #0]
 800c048:	bf18      	it	ne
 800c04a:	6059      	strne	r1, [r3, #4]
 800c04c:	6863      	ldr	r3, [r4, #4]
 800c04e:	bf08      	it	eq
 800c050:	f8c8 1000 	streq.w	r1, [r8]
 800c054:	5162      	str	r2, [r4, r5]
 800c056:	604b      	str	r3, [r1, #4]
 800c058:	4638      	mov	r0, r7
 800c05a:	f104 060b 	add.w	r6, r4, #11
 800c05e:	f000 f85d 	bl	800c11c <__malloc_unlock>
 800c062:	f026 0607 	bic.w	r6, r6, #7
 800c066:	1d23      	adds	r3, r4, #4
 800c068:	1af2      	subs	r2, r6, r3
 800c06a:	d0ae      	beq.n	800bfca <_malloc_r+0x22>
 800c06c:	1b9b      	subs	r3, r3, r6
 800c06e:	50a3      	str	r3, [r4, r2]
 800c070:	e7ab      	b.n	800bfca <_malloc_r+0x22>
 800c072:	42a3      	cmp	r3, r4
 800c074:	6862      	ldr	r2, [r4, #4]
 800c076:	d1dd      	bne.n	800c034 <_malloc_r+0x8c>
 800c078:	f8c8 2000 	str.w	r2, [r8]
 800c07c:	e7ec      	b.n	800c058 <_malloc_r+0xb0>
 800c07e:	4623      	mov	r3, r4
 800c080:	6864      	ldr	r4, [r4, #4]
 800c082:	e7ac      	b.n	800bfde <_malloc_r+0x36>
 800c084:	4634      	mov	r4, r6
 800c086:	6876      	ldr	r6, [r6, #4]
 800c088:	e7b4      	b.n	800bff4 <_malloc_r+0x4c>
 800c08a:	4613      	mov	r3, r2
 800c08c:	e7cc      	b.n	800c028 <_malloc_r+0x80>
 800c08e:	230c      	movs	r3, #12
 800c090:	4638      	mov	r0, r7
 800c092:	603b      	str	r3, [r7, #0]
 800c094:	f000 f842 	bl	800c11c <__malloc_unlock>
 800c098:	e797      	b.n	800bfca <_malloc_r+0x22>
 800c09a:	6025      	str	r5, [r4, #0]
 800c09c:	e7dc      	b.n	800c058 <_malloc_r+0xb0>
 800c09e:	605b      	str	r3, [r3, #4]
 800c0a0:	deff      	udf	#255	; 0xff
 800c0a2:	bf00      	nop
 800c0a4:	2000037c 	.word	0x2000037c

0800c0a8 <sniprintf>:
 800c0a8:	b40c      	push	{r2, r3}
 800c0aa:	b530      	push	{r4, r5, lr}
 800c0ac:	4b17      	ldr	r3, [pc, #92]	; (800c10c <sniprintf+0x64>)
 800c0ae:	1e0c      	subs	r4, r1, #0
 800c0b0:	681d      	ldr	r5, [r3, #0]
 800c0b2:	b09d      	sub	sp, #116	; 0x74
 800c0b4:	da08      	bge.n	800c0c8 <sniprintf+0x20>
 800c0b6:	238b      	movs	r3, #139	; 0x8b
 800c0b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c0bc:	602b      	str	r3, [r5, #0]
 800c0be:	b01d      	add	sp, #116	; 0x74
 800c0c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0c4:	b002      	add	sp, #8
 800c0c6:	4770      	bx	lr
 800c0c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c0cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c0d0:	bf0c      	ite	eq
 800c0d2:	4623      	moveq	r3, r4
 800c0d4:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c0d8:	9304      	str	r3, [sp, #16]
 800c0da:	9307      	str	r3, [sp, #28]
 800c0dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c0e0:	9002      	str	r0, [sp, #8]
 800c0e2:	9006      	str	r0, [sp, #24]
 800c0e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c0e8:	4628      	mov	r0, r5
 800c0ea:	ab21      	add	r3, sp, #132	; 0x84
 800c0ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c0ee:	a902      	add	r1, sp, #8
 800c0f0:	9301      	str	r3, [sp, #4]
 800c0f2:	f000 f98f 	bl	800c414 <_svfiprintf_r>
 800c0f6:	1c43      	adds	r3, r0, #1
 800c0f8:	bfbc      	itt	lt
 800c0fa:	238b      	movlt	r3, #139	; 0x8b
 800c0fc:	602b      	strlt	r3, [r5, #0]
 800c0fe:	2c00      	cmp	r4, #0
 800c100:	d0dd      	beq.n	800c0be <sniprintf+0x16>
 800c102:	2200      	movs	r2, #0
 800c104:	9b02      	ldr	r3, [sp, #8]
 800c106:	701a      	strb	r2, [r3, #0]
 800c108:	e7d9      	b.n	800c0be <sniprintf+0x16>
 800c10a:	bf00      	nop
 800c10c:	2000010c 	.word	0x2000010c

0800c110 <__malloc_lock>:
 800c110:	4801      	ldr	r0, [pc, #4]	; (800c118 <__malloc_lock+0x8>)
 800c112:	f000 b8d3 	b.w	800c2bc <__retarget_lock_acquire_recursive>
 800c116:	bf00      	nop
 800c118:	200004bc 	.word	0x200004bc

0800c11c <__malloc_unlock>:
 800c11c:	4801      	ldr	r0, [pc, #4]	; (800c124 <__malloc_unlock+0x8>)
 800c11e:	f000 b8ce 	b.w	800c2be <__retarget_lock_release_recursive>
 800c122:	bf00      	nop
 800c124:	200004bc 	.word	0x200004bc

0800c128 <siprintf>:
 800c128:	b40e      	push	{r1, r2, r3}
 800c12a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c12e:	b500      	push	{lr}
 800c130:	b09c      	sub	sp, #112	; 0x70
 800c132:	ab1d      	add	r3, sp, #116	; 0x74
 800c134:	9002      	str	r0, [sp, #8]
 800c136:	9006      	str	r0, [sp, #24]
 800c138:	9107      	str	r1, [sp, #28]
 800c13a:	9104      	str	r1, [sp, #16]
 800c13c:	4808      	ldr	r0, [pc, #32]	; (800c160 <siprintf+0x38>)
 800c13e:	4909      	ldr	r1, [pc, #36]	; (800c164 <siprintf+0x3c>)
 800c140:	f853 2b04 	ldr.w	r2, [r3], #4
 800c144:	9105      	str	r1, [sp, #20]
 800c146:	6800      	ldr	r0, [r0, #0]
 800c148:	a902      	add	r1, sp, #8
 800c14a:	9301      	str	r3, [sp, #4]
 800c14c:	f000 f962 	bl	800c414 <_svfiprintf_r>
 800c150:	2200      	movs	r2, #0
 800c152:	9b02      	ldr	r3, [sp, #8]
 800c154:	701a      	strb	r2, [r3, #0]
 800c156:	b01c      	add	sp, #112	; 0x70
 800c158:	f85d eb04 	ldr.w	lr, [sp], #4
 800c15c:	b003      	add	sp, #12
 800c15e:	4770      	bx	lr
 800c160:	2000010c 	.word	0x2000010c
 800c164:	ffff0208 	.word	0xffff0208

0800c168 <__utoa>:
 800c168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c16a:	b08b      	sub	sp, #44	; 0x2c
 800c16c:	4605      	mov	r5, r0
 800c16e:	460b      	mov	r3, r1
 800c170:	466e      	mov	r6, sp
 800c172:	4c1d      	ldr	r4, [pc, #116]	; (800c1e8 <__utoa+0x80>)
 800c174:	f104 0c20 	add.w	ip, r4, #32
 800c178:	4637      	mov	r7, r6
 800c17a:	6820      	ldr	r0, [r4, #0]
 800c17c:	6861      	ldr	r1, [r4, #4]
 800c17e:	3408      	adds	r4, #8
 800c180:	c703      	stmia	r7!, {r0, r1}
 800c182:	4564      	cmp	r4, ip
 800c184:	463e      	mov	r6, r7
 800c186:	d1f7      	bne.n	800c178 <__utoa+0x10>
 800c188:	7921      	ldrb	r1, [r4, #4]
 800c18a:	6820      	ldr	r0, [r4, #0]
 800c18c:	7139      	strb	r1, [r7, #4]
 800c18e:	1e91      	subs	r1, r2, #2
 800c190:	2922      	cmp	r1, #34	; 0x22
 800c192:	6038      	str	r0, [r7, #0]
 800c194:	f04f 0100 	mov.w	r1, #0
 800c198:	d904      	bls.n	800c1a4 <__utoa+0x3c>
 800c19a:	7019      	strb	r1, [r3, #0]
 800c19c:	460b      	mov	r3, r1
 800c19e:	4618      	mov	r0, r3
 800c1a0:	b00b      	add	sp, #44	; 0x2c
 800c1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1a4:	1e58      	subs	r0, r3, #1
 800c1a6:	4684      	mov	ip, r0
 800c1a8:	fbb5 f7f2 	udiv	r7, r5, r2
 800c1ac:	fb02 5617 	mls	r6, r2, r7, r5
 800c1b0:	3628      	adds	r6, #40	; 0x28
 800c1b2:	446e      	add	r6, sp
 800c1b4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c1b8:	460c      	mov	r4, r1
 800c1ba:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c1be:	462e      	mov	r6, r5
 800c1c0:	42b2      	cmp	r2, r6
 800c1c2:	463d      	mov	r5, r7
 800c1c4:	f101 0101 	add.w	r1, r1, #1
 800c1c8:	d9ee      	bls.n	800c1a8 <__utoa+0x40>
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	545a      	strb	r2, [r3, r1]
 800c1ce:	1919      	adds	r1, r3, r4
 800c1d0:	1aa5      	subs	r5, r4, r2
 800c1d2:	42aa      	cmp	r2, r5
 800c1d4:	dae3      	bge.n	800c19e <__utoa+0x36>
 800c1d6:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c1da:	780e      	ldrb	r6, [r1, #0]
 800c1dc:	3201      	adds	r2, #1
 800c1de:	7006      	strb	r6, [r0, #0]
 800c1e0:	f801 5901 	strb.w	r5, [r1], #-1
 800c1e4:	e7f4      	b.n	800c1d0 <__utoa+0x68>
 800c1e6:	bf00      	nop
 800c1e8:	0800da5a 	.word	0x0800da5a

0800c1ec <strcat>:
 800c1ec:	4602      	mov	r2, r0
 800c1ee:	b510      	push	{r4, lr}
 800c1f0:	7814      	ldrb	r4, [r2, #0]
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	3201      	adds	r2, #1
 800c1f6:	2c00      	cmp	r4, #0
 800c1f8:	d1fa      	bne.n	800c1f0 <strcat+0x4>
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c200:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c204:	2a00      	cmp	r2, #0
 800c206:	d1f9      	bne.n	800c1fc <strcat+0x10>
 800c208:	bd10      	pop	{r4, pc}

0800c20a <strstr>:
 800c20a:	780a      	ldrb	r2, [r1, #0]
 800c20c:	b570      	push	{r4, r5, r6, lr}
 800c20e:	b96a      	cbnz	r2, 800c22c <strstr+0x22>
 800c210:	bd70      	pop	{r4, r5, r6, pc}
 800c212:	429a      	cmp	r2, r3
 800c214:	d109      	bne.n	800c22a <strstr+0x20>
 800c216:	460c      	mov	r4, r1
 800c218:	4605      	mov	r5, r0
 800c21a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d0f6      	beq.n	800c210 <strstr+0x6>
 800c222:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c226:	429e      	cmp	r6, r3
 800c228:	d0f7      	beq.n	800c21a <strstr+0x10>
 800c22a:	3001      	adds	r0, #1
 800c22c:	7803      	ldrb	r3, [r0, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d1ef      	bne.n	800c212 <strstr+0x8>
 800c232:	4618      	mov	r0, r3
 800c234:	e7ec      	b.n	800c210 <strstr+0x6>

0800c236 <memset>:
 800c236:	4603      	mov	r3, r0
 800c238:	4402      	add	r2, r0
 800c23a:	4293      	cmp	r3, r2
 800c23c:	d100      	bne.n	800c240 <memset+0xa>
 800c23e:	4770      	bx	lr
 800c240:	f803 1b01 	strb.w	r1, [r3], #1
 800c244:	e7f9      	b.n	800c23a <memset+0x4>
	...

0800c248 <_sbrk_r>:
 800c248:	b538      	push	{r3, r4, r5, lr}
 800c24a:	2300      	movs	r3, #0
 800c24c:	4d05      	ldr	r5, [pc, #20]	; (800c264 <_sbrk_r+0x1c>)
 800c24e:	4604      	mov	r4, r0
 800c250:	4608      	mov	r0, r1
 800c252:	602b      	str	r3, [r5, #0]
 800c254:	f7fb ff62 	bl	800811c <_sbrk>
 800c258:	1c43      	adds	r3, r0, #1
 800c25a:	d102      	bne.n	800c262 <_sbrk_r+0x1a>
 800c25c:	682b      	ldr	r3, [r5, #0]
 800c25e:	b103      	cbz	r3, 800c262 <_sbrk_r+0x1a>
 800c260:	6023      	str	r3, [r4, #0]
 800c262:	bd38      	pop	{r3, r4, r5, pc}
 800c264:	200004c0 	.word	0x200004c0

0800c268 <__errno>:
 800c268:	4b01      	ldr	r3, [pc, #4]	; (800c270 <__errno+0x8>)
 800c26a:	6818      	ldr	r0, [r3, #0]
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	2000010c 	.word	0x2000010c

0800c274 <__libc_init_array>:
 800c274:	b570      	push	{r4, r5, r6, lr}
 800c276:	2600      	movs	r6, #0
 800c278:	4d0c      	ldr	r5, [pc, #48]	; (800c2ac <__libc_init_array+0x38>)
 800c27a:	4c0d      	ldr	r4, [pc, #52]	; (800c2b0 <__libc_init_array+0x3c>)
 800c27c:	1b64      	subs	r4, r4, r5
 800c27e:	10a4      	asrs	r4, r4, #2
 800c280:	42a6      	cmp	r6, r4
 800c282:	d109      	bne.n	800c298 <__libc_init_array+0x24>
 800c284:	f000 fbc6 	bl	800ca14 <_init>
 800c288:	2600      	movs	r6, #0
 800c28a:	4d0a      	ldr	r5, [pc, #40]	; (800c2b4 <__libc_init_array+0x40>)
 800c28c:	4c0a      	ldr	r4, [pc, #40]	; (800c2b8 <__libc_init_array+0x44>)
 800c28e:	1b64      	subs	r4, r4, r5
 800c290:	10a4      	asrs	r4, r4, #2
 800c292:	42a6      	cmp	r6, r4
 800c294:	d105      	bne.n	800c2a2 <__libc_init_array+0x2e>
 800c296:	bd70      	pop	{r4, r5, r6, pc}
 800c298:	f855 3b04 	ldr.w	r3, [r5], #4
 800c29c:	4798      	blx	r3
 800c29e:	3601      	adds	r6, #1
 800c2a0:	e7ee      	b.n	800c280 <__libc_init_array+0xc>
 800c2a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2a6:	4798      	blx	r3
 800c2a8:	3601      	adds	r6, #1
 800c2aa:	e7f2      	b.n	800c292 <__libc_init_array+0x1e>
 800c2ac:	0800dab4 	.word	0x0800dab4
 800c2b0:	0800dab4 	.word	0x0800dab4
 800c2b4:	0800dab4 	.word	0x0800dab4
 800c2b8:	0800dab8 	.word	0x0800dab8

0800c2bc <__retarget_lock_acquire_recursive>:
 800c2bc:	4770      	bx	lr

0800c2be <__retarget_lock_release_recursive>:
 800c2be:	4770      	bx	lr

0800c2c0 <strcpy>:
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c2c6:	f803 2b01 	strb.w	r2, [r3], #1
 800c2ca:	2a00      	cmp	r2, #0
 800c2cc:	d1f9      	bne.n	800c2c2 <strcpy+0x2>
 800c2ce:	4770      	bx	lr

0800c2d0 <_free_r>:
 800c2d0:	b538      	push	{r3, r4, r5, lr}
 800c2d2:	4605      	mov	r5, r0
 800c2d4:	2900      	cmp	r1, #0
 800c2d6:	d040      	beq.n	800c35a <_free_r+0x8a>
 800c2d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c2dc:	1f0c      	subs	r4, r1, #4
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	bfb8      	it	lt
 800c2e2:	18e4      	addlt	r4, r4, r3
 800c2e4:	f7ff ff14 	bl	800c110 <__malloc_lock>
 800c2e8:	4a1c      	ldr	r2, [pc, #112]	; (800c35c <_free_r+0x8c>)
 800c2ea:	6813      	ldr	r3, [r2, #0]
 800c2ec:	b933      	cbnz	r3, 800c2fc <_free_r+0x2c>
 800c2ee:	6063      	str	r3, [r4, #4]
 800c2f0:	6014      	str	r4, [r2, #0]
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2f8:	f7ff bf10 	b.w	800c11c <__malloc_unlock>
 800c2fc:	42a3      	cmp	r3, r4
 800c2fe:	d908      	bls.n	800c312 <_free_r+0x42>
 800c300:	6820      	ldr	r0, [r4, #0]
 800c302:	1821      	adds	r1, r4, r0
 800c304:	428b      	cmp	r3, r1
 800c306:	bf01      	itttt	eq
 800c308:	6819      	ldreq	r1, [r3, #0]
 800c30a:	685b      	ldreq	r3, [r3, #4]
 800c30c:	1809      	addeq	r1, r1, r0
 800c30e:	6021      	streq	r1, [r4, #0]
 800c310:	e7ed      	b.n	800c2ee <_free_r+0x1e>
 800c312:	461a      	mov	r2, r3
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	b10b      	cbz	r3, 800c31c <_free_r+0x4c>
 800c318:	42a3      	cmp	r3, r4
 800c31a:	d9fa      	bls.n	800c312 <_free_r+0x42>
 800c31c:	6811      	ldr	r1, [r2, #0]
 800c31e:	1850      	adds	r0, r2, r1
 800c320:	42a0      	cmp	r0, r4
 800c322:	d10b      	bne.n	800c33c <_free_r+0x6c>
 800c324:	6820      	ldr	r0, [r4, #0]
 800c326:	4401      	add	r1, r0
 800c328:	1850      	adds	r0, r2, r1
 800c32a:	4283      	cmp	r3, r0
 800c32c:	6011      	str	r1, [r2, #0]
 800c32e:	d1e0      	bne.n	800c2f2 <_free_r+0x22>
 800c330:	6818      	ldr	r0, [r3, #0]
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	4408      	add	r0, r1
 800c336:	6010      	str	r0, [r2, #0]
 800c338:	6053      	str	r3, [r2, #4]
 800c33a:	e7da      	b.n	800c2f2 <_free_r+0x22>
 800c33c:	d902      	bls.n	800c344 <_free_r+0x74>
 800c33e:	230c      	movs	r3, #12
 800c340:	602b      	str	r3, [r5, #0]
 800c342:	e7d6      	b.n	800c2f2 <_free_r+0x22>
 800c344:	6820      	ldr	r0, [r4, #0]
 800c346:	1821      	adds	r1, r4, r0
 800c348:	428b      	cmp	r3, r1
 800c34a:	bf01      	itttt	eq
 800c34c:	6819      	ldreq	r1, [r3, #0]
 800c34e:	685b      	ldreq	r3, [r3, #4]
 800c350:	1809      	addeq	r1, r1, r0
 800c352:	6021      	streq	r1, [r4, #0]
 800c354:	6063      	str	r3, [r4, #4]
 800c356:	6054      	str	r4, [r2, #4]
 800c358:	e7cb      	b.n	800c2f2 <_free_r+0x22>
 800c35a:	bd38      	pop	{r3, r4, r5, pc}
 800c35c:	2000037c 	.word	0x2000037c

0800c360 <__ssputs_r>:
 800c360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c364:	461f      	mov	r7, r3
 800c366:	688e      	ldr	r6, [r1, #8]
 800c368:	4682      	mov	sl, r0
 800c36a:	42be      	cmp	r6, r7
 800c36c:	460c      	mov	r4, r1
 800c36e:	4690      	mov	r8, r2
 800c370:	680b      	ldr	r3, [r1, #0]
 800c372:	d82c      	bhi.n	800c3ce <__ssputs_r+0x6e>
 800c374:	898a      	ldrh	r2, [r1, #12]
 800c376:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c37a:	d026      	beq.n	800c3ca <__ssputs_r+0x6a>
 800c37c:	6965      	ldr	r5, [r4, #20]
 800c37e:	6909      	ldr	r1, [r1, #16]
 800c380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c384:	eba3 0901 	sub.w	r9, r3, r1
 800c388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c38c:	1c7b      	adds	r3, r7, #1
 800c38e:	444b      	add	r3, r9
 800c390:	106d      	asrs	r5, r5, #1
 800c392:	429d      	cmp	r5, r3
 800c394:	bf38      	it	cc
 800c396:	461d      	movcc	r5, r3
 800c398:	0553      	lsls	r3, r2, #21
 800c39a:	d527      	bpl.n	800c3ec <__ssputs_r+0x8c>
 800c39c:	4629      	mov	r1, r5
 800c39e:	f7ff fe03 	bl	800bfa8 <_malloc_r>
 800c3a2:	4606      	mov	r6, r0
 800c3a4:	b360      	cbz	r0, 800c400 <__ssputs_r+0xa0>
 800c3a6:	464a      	mov	r2, r9
 800c3a8:	6921      	ldr	r1, [r4, #16]
 800c3aa:	f000 fb1c 	bl	800c9e6 <memcpy>
 800c3ae:	89a3      	ldrh	r3, [r4, #12]
 800c3b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c3b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3b8:	81a3      	strh	r3, [r4, #12]
 800c3ba:	6126      	str	r6, [r4, #16]
 800c3bc:	444e      	add	r6, r9
 800c3be:	6026      	str	r6, [r4, #0]
 800c3c0:	463e      	mov	r6, r7
 800c3c2:	6165      	str	r5, [r4, #20]
 800c3c4:	eba5 0509 	sub.w	r5, r5, r9
 800c3c8:	60a5      	str	r5, [r4, #8]
 800c3ca:	42be      	cmp	r6, r7
 800c3cc:	d900      	bls.n	800c3d0 <__ssputs_r+0x70>
 800c3ce:	463e      	mov	r6, r7
 800c3d0:	4632      	mov	r2, r6
 800c3d2:	4641      	mov	r1, r8
 800c3d4:	6820      	ldr	r0, [r4, #0]
 800c3d6:	f000 fade 	bl	800c996 <memmove>
 800c3da:	2000      	movs	r0, #0
 800c3dc:	68a3      	ldr	r3, [r4, #8]
 800c3de:	1b9b      	subs	r3, r3, r6
 800c3e0:	60a3      	str	r3, [r4, #8]
 800c3e2:	6823      	ldr	r3, [r4, #0]
 800c3e4:	4433      	add	r3, r6
 800c3e6:	6023      	str	r3, [r4, #0]
 800c3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ec:	462a      	mov	r2, r5
 800c3ee:	f000 faa3 	bl	800c938 <_realloc_r>
 800c3f2:	4606      	mov	r6, r0
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	d1e0      	bne.n	800c3ba <__ssputs_r+0x5a>
 800c3f8:	4650      	mov	r0, sl
 800c3fa:	6921      	ldr	r1, [r4, #16]
 800c3fc:	f7ff ff68 	bl	800c2d0 <_free_r>
 800c400:	230c      	movs	r3, #12
 800c402:	f8ca 3000 	str.w	r3, [sl]
 800c406:	89a3      	ldrh	r3, [r4, #12]
 800c408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c40c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c410:	81a3      	strh	r3, [r4, #12]
 800c412:	e7e9      	b.n	800c3e8 <__ssputs_r+0x88>

0800c414 <_svfiprintf_r>:
 800c414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c418:	4698      	mov	r8, r3
 800c41a:	898b      	ldrh	r3, [r1, #12]
 800c41c:	4607      	mov	r7, r0
 800c41e:	061b      	lsls	r3, r3, #24
 800c420:	460d      	mov	r5, r1
 800c422:	4614      	mov	r4, r2
 800c424:	b09d      	sub	sp, #116	; 0x74
 800c426:	d50e      	bpl.n	800c446 <_svfiprintf_r+0x32>
 800c428:	690b      	ldr	r3, [r1, #16]
 800c42a:	b963      	cbnz	r3, 800c446 <_svfiprintf_r+0x32>
 800c42c:	2140      	movs	r1, #64	; 0x40
 800c42e:	f7ff fdbb 	bl	800bfa8 <_malloc_r>
 800c432:	6028      	str	r0, [r5, #0]
 800c434:	6128      	str	r0, [r5, #16]
 800c436:	b920      	cbnz	r0, 800c442 <_svfiprintf_r+0x2e>
 800c438:	230c      	movs	r3, #12
 800c43a:	603b      	str	r3, [r7, #0]
 800c43c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c440:	e0d0      	b.n	800c5e4 <_svfiprintf_r+0x1d0>
 800c442:	2340      	movs	r3, #64	; 0x40
 800c444:	616b      	str	r3, [r5, #20]
 800c446:	2300      	movs	r3, #0
 800c448:	9309      	str	r3, [sp, #36]	; 0x24
 800c44a:	2320      	movs	r3, #32
 800c44c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c450:	2330      	movs	r3, #48	; 0x30
 800c452:	f04f 0901 	mov.w	r9, #1
 800c456:	f8cd 800c 	str.w	r8, [sp, #12]
 800c45a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c5fc <_svfiprintf_r+0x1e8>
 800c45e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c462:	4623      	mov	r3, r4
 800c464:	469a      	mov	sl, r3
 800c466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c46a:	b10a      	cbz	r2, 800c470 <_svfiprintf_r+0x5c>
 800c46c:	2a25      	cmp	r2, #37	; 0x25
 800c46e:	d1f9      	bne.n	800c464 <_svfiprintf_r+0x50>
 800c470:	ebba 0b04 	subs.w	fp, sl, r4
 800c474:	d00b      	beq.n	800c48e <_svfiprintf_r+0x7a>
 800c476:	465b      	mov	r3, fp
 800c478:	4622      	mov	r2, r4
 800c47a:	4629      	mov	r1, r5
 800c47c:	4638      	mov	r0, r7
 800c47e:	f7ff ff6f 	bl	800c360 <__ssputs_r>
 800c482:	3001      	adds	r0, #1
 800c484:	f000 80a9 	beq.w	800c5da <_svfiprintf_r+0x1c6>
 800c488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c48a:	445a      	add	r2, fp
 800c48c:	9209      	str	r2, [sp, #36]	; 0x24
 800c48e:	f89a 3000 	ldrb.w	r3, [sl]
 800c492:	2b00      	cmp	r3, #0
 800c494:	f000 80a1 	beq.w	800c5da <_svfiprintf_r+0x1c6>
 800c498:	2300      	movs	r3, #0
 800c49a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c49e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4a2:	f10a 0a01 	add.w	sl, sl, #1
 800c4a6:	9304      	str	r3, [sp, #16]
 800c4a8:	9307      	str	r3, [sp, #28]
 800c4aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4ae:	931a      	str	r3, [sp, #104]	; 0x68
 800c4b0:	4654      	mov	r4, sl
 800c4b2:	2205      	movs	r2, #5
 800c4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4b8:	4850      	ldr	r0, [pc, #320]	; (800c5fc <_svfiprintf_r+0x1e8>)
 800c4ba:	f000 fa86 	bl	800c9ca <memchr>
 800c4be:	9a04      	ldr	r2, [sp, #16]
 800c4c0:	b9d8      	cbnz	r0, 800c4fa <_svfiprintf_r+0xe6>
 800c4c2:	06d0      	lsls	r0, r2, #27
 800c4c4:	bf44      	itt	mi
 800c4c6:	2320      	movmi	r3, #32
 800c4c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4cc:	0711      	lsls	r1, r2, #28
 800c4ce:	bf44      	itt	mi
 800c4d0:	232b      	movmi	r3, #43	; 0x2b
 800c4d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4d6:	f89a 3000 	ldrb.w	r3, [sl]
 800c4da:	2b2a      	cmp	r3, #42	; 0x2a
 800c4dc:	d015      	beq.n	800c50a <_svfiprintf_r+0xf6>
 800c4de:	4654      	mov	r4, sl
 800c4e0:	2000      	movs	r0, #0
 800c4e2:	f04f 0c0a 	mov.w	ip, #10
 800c4e6:	9a07      	ldr	r2, [sp, #28]
 800c4e8:	4621      	mov	r1, r4
 800c4ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c4ee:	3b30      	subs	r3, #48	; 0x30
 800c4f0:	2b09      	cmp	r3, #9
 800c4f2:	d94d      	bls.n	800c590 <_svfiprintf_r+0x17c>
 800c4f4:	b1b0      	cbz	r0, 800c524 <_svfiprintf_r+0x110>
 800c4f6:	9207      	str	r2, [sp, #28]
 800c4f8:	e014      	b.n	800c524 <_svfiprintf_r+0x110>
 800c4fa:	eba0 0308 	sub.w	r3, r0, r8
 800c4fe:	fa09 f303 	lsl.w	r3, r9, r3
 800c502:	4313      	orrs	r3, r2
 800c504:	46a2      	mov	sl, r4
 800c506:	9304      	str	r3, [sp, #16]
 800c508:	e7d2      	b.n	800c4b0 <_svfiprintf_r+0x9c>
 800c50a:	9b03      	ldr	r3, [sp, #12]
 800c50c:	1d19      	adds	r1, r3, #4
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	9103      	str	r1, [sp, #12]
 800c512:	2b00      	cmp	r3, #0
 800c514:	bfbb      	ittet	lt
 800c516:	425b      	neglt	r3, r3
 800c518:	f042 0202 	orrlt.w	r2, r2, #2
 800c51c:	9307      	strge	r3, [sp, #28]
 800c51e:	9307      	strlt	r3, [sp, #28]
 800c520:	bfb8      	it	lt
 800c522:	9204      	strlt	r2, [sp, #16]
 800c524:	7823      	ldrb	r3, [r4, #0]
 800c526:	2b2e      	cmp	r3, #46	; 0x2e
 800c528:	d10c      	bne.n	800c544 <_svfiprintf_r+0x130>
 800c52a:	7863      	ldrb	r3, [r4, #1]
 800c52c:	2b2a      	cmp	r3, #42	; 0x2a
 800c52e:	d134      	bne.n	800c59a <_svfiprintf_r+0x186>
 800c530:	9b03      	ldr	r3, [sp, #12]
 800c532:	3402      	adds	r4, #2
 800c534:	1d1a      	adds	r2, r3, #4
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	9203      	str	r2, [sp, #12]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	bfb8      	it	lt
 800c53e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c542:	9305      	str	r3, [sp, #20]
 800c544:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c600 <_svfiprintf_r+0x1ec>
 800c548:	2203      	movs	r2, #3
 800c54a:	4650      	mov	r0, sl
 800c54c:	7821      	ldrb	r1, [r4, #0]
 800c54e:	f000 fa3c 	bl	800c9ca <memchr>
 800c552:	b138      	cbz	r0, 800c564 <_svfiprintf_r+0x150>
 800c554:	2240      	movs	r2, #64	; 0x40
 800c556:	9b04      	ldr	r3, [sp, #16]
 800c558:	eba0 000a 	sub.w	r0, r0, sl
 800c55c:	4082      	lsls	r2, r0
 800c55e:	4313      	orrs	r3, r2
 800c560:	3401      	adds	r4, #1
 800c562:	9304      	str	r3, [sp, #16]
 800c564:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c568:	2206      	movs	r2, #6
 800c56a:	4826      	ldr	r0, [pc, #152]	; (800c604 <_svfiprintf_r+0x1f0>)
 800c56c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c570:	f000 fa2b 	bl	800c9ca <memchr>
 800c574:	2800      	cmp	r0, #0
 800c576:	d038      	beq.n	800c5ea <_svfiprintf_r+0x1d6>
 800c578:	4b23      	ldr	r3, [pc, #140]	; (800c608 <_svfiprintf_r+0x1f4>)
 800c57a:	bb1b      	cbnz	r3, 800c5c4 <_svfiprintf_r+0x1b0>
 800c57c:	9b03      	ldr	r3, [sp, #12]
 800c57e:	3307      	adds	r3, #7
 800c580:	f023 0307 	bic.w	r3, r3, #7
 800c584:	3308      	adds	r3, #8
 800c586:	9303      	str	r3, [sp, #12]
 800c588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c58a:	4433      	add	r3, r6
 800c58c:	9309      	str	r3, [sp, #36]	; 0x24
 800c58e:	e768      	b.n	800c462 <_svfiprintf_r+0x4e>
 800c590:	460c      	mov	r4, r1
 800c592:	2001      	movs	r0, #1
 800c594:	fb0c 3202 	mla	r2, ip, r2, r3
 800c598:	e7a6      	b.n	800c4e8 <_svfiprintf_r+0xd4>
 800c59a:	2300      	movs	r3, #0
 800c59c:	f04f 0c0a 	mov.w	ip, #10
 800c5a0:	4619      	mov	r1, r3
 800c5a2:	3401      	adds	r4, #1
 800c5a4:	9305      	str	r3, [sp, #20]
 800c5a6:	4620      	mov	r0, r4
 800c5a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5ac:	3a30      	subs	r2, #48	; 0x30
 800c5ae:	2a09      	cmp	r2, #9
 800c5b0:	d903      	bls.n	800c5ba <_svfiprintf_r+0x1a6>
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d0c6      	beq.n	800c544 <_svfiprintf_r+0x130>
 800c5b6:	9105      	str	r1, [sp, #20]
 800c5b8:	e7c4      	b.n	800c544 <_svfiprintf_r+0x130>
 800c5ba:	4604      	mov	r4, r0
 800c5bc:	2301      	movs	r3, #1
 800c5be:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5c2:	e7f0      	b.n	800c5a6 <_svfiprintf_r+0x192>
 800c5c4:	ab03      	add	r3, sp, #12
 800c5c6:	9300      	str	r3, [sp, #0]
 800c5c8:	462a      	mov	r2, r5
 800c5ca:	4638      	mov	r0, r7
 800c5cc:	4b0f      	ldr	r3, [pc, #60]	; (800c60c <_svfiprintf_r+0x1f8>)
 800c5ce:	a904      	add	r1, sp, #16
 800c5d0:	f3af 8000 	nop.w
 800c5d4:	1c42      	adds	r2, r0, #1
 800c5d6:	4606      	mov	r6, r0
 800c5d8:	d1d6      	bne.n	800c588 <_svfiprintf_r+0x174>
 800c5da:	89ab      	ldrh	r3, [r5, #12]
 800c5dc:	065b      	lsls	r3, r3, #25
 800c5de:	f53f af2d 	bmi.w	800c43c <_svfiprintf_r+0x28>
 800c5e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c5e4:	b01d      	add	sp, #116	; 0x74
 800c5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5ea:	ab03      	add	r3, sp, #12
 800c5ec:	9300      	str	r3, [sp, #0]
 800c5ee:	462a      	mov	r2, r5
 800c5f0:	4638      	mov	r0, r7
 800c5f2:	4b06      	ldr	r3, [pc, #24]	; (800c60c <_svfiprintf_r+0x1f8>)
 800c5f4:	a904      	add	r1, sp, #16
 800c5f6:	f000 f87d 	bl	800c6f4 <_printf_i>
 800c5fa:	e7eb      	b.n	800c5d4 <_svfiprintf_r+0x1c0>
 800c5fc:	0800da7f 	.word	0x0800da7f
 800c600:	0800da85 	.word	0x0800da85
 800c604:	0800da89 	.word	0x0800da89
 800c608:	00000000 	.word	0x00000000
 800c60c:	0800c361 	.word	0x0800c361

0800c610 <_printf_common>:
 800c610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c614:	4616      	mov	r6, r2
 800c616:	4699      	mov	r9, r3
 800c618:	688a      	ldr	r2, [r1, #8]
 800c61a:	690b      	ldr	r3, [r1, #16]
 800c61c:	4607      	mov	r7, r0
 800c61e:	4293      	cmp	r3, r2
 800c620:	bfb8      	it	lt
 800c622:	4613      	movlt	r3, r2
 800c624:	6033      	str	r3, [r6, #0]
 800c626:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c62a:	460c      	mov	r4, r1
 800c62c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c630:	b10a      	cbz	r2, 800c636 <_printf_common+0x26>
 800c632:	3301      	adds	r3, #1
 800c634:	6033      	str	r3, [r6, #0]
 800c636:	6823      	ldr	r3, [r4, #0]
 800c638:	0699      	lsls	r1, r3, #26
 800c63a:	bf42      	ittt	mi
 800c63c:	6833      	ldrmi	r3, [r6, #0]
 800c63e:	3302      	addmi	r3, #2
 800c640:	6033      	strmi	r3, [r6, #0]
 800c642:	6825      	ldr	r5, [r4, #0]
 800c644:	f015 0506 	ands.w	r5, r5, #6
 800c648:	d106      	bne.n	800c658 <_printf_common+0x48>
 800c64a:	f104 0a19 	add.w	sl, r4, #25
 800c64e:	68e3      	ldr	r3, [r4, #12]
 800c650:	6832      	ldr	r2, [r6, #0]
 800c652:	1a9b      	subs	r3, r3, r2
 800c654:	42ab      	cmp	r3, r5
 800c656:	dc2b      	bgt.n	800c6b0 <_printf_common+0xa0>
 800c658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c65c:	1e13      	subs	r3, r2, #0
 800c65e:	6822      	ldr	r2, [r4, #0]
 800c660:	bf18      	it	ne
 800c662:	2301      	movne	r3, #1
 800c664:	0692      	lsls	r2, r2, #26
 800c666:	d430      	bmi.n	800c6ca <_printf_common+0xba>
 800c668:	4649      	mov	r1, r9
 800c66a:	4638      	mov	r0, r7
 800c66c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c670:	47c0      	blx	r8
 800c672:	3001      	adds	r0, #1
 800c674:	d023      	beq.n	800c6be <_printf_common+0xae>
 800c676:	6823      	ldr	r3, [r4, #0]
 800c678:	6922      	ldr	r2, [r4, #16]
 800c67a:	f003 0306 	and.w	r3, r3, #6
 800c67e:	2b04      	cmp	r3, #4
 800c680:	bf14      	ite	ne
 800c682:	2500      	movne	r5, #0
 800c684:	6833      	ldreq	r3, [r6, #0]
 800c686:	f04f 0600 	mov.w	r6, #0
 800c68a:	bf08      	it	eq
 800c68c:	68e5      	ldreq	r5, [r4, #12]
 800c68e:	f104 041a 	add.w	r4, r4, #26
 800c692:	bf08      	it	eq
 800c694:	1aed      	subeq	r5, r5, r3
 800c696:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c69a:	bf08      	it	eq
 800c69c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	bfc4      	itt	gt
 800c6a4:	1a9b      	subgt	r3, r3, r2
 800c6a6:	18ed      	addgt	r5, r5, r3
 800c6a8:	42b5      	cmp	r5, r6
 800c6aa:	d11a      	bne.n	800c6e2 <_printf_common+0xd2>
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	e008      	b.n	800c6c2 <_printf_common+0xb2>
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	4652      	mov	r2, sl
 800c6b4:	4649      	mov	r1, r9
 800c6b6:	4638      	mov	r0, r7
 800c6b8:	47c0      	blx	r8
 800c6ba:	3001      	adds	r0, #1
 800c6bc:	d103      	bne.n	800c6c6 <_printf_common+0xb6>
 800c6be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6c6:	3501      	adds	r5, #1
 800c6c8:	e7c1      	b.n	800c64e <_printf_common+0x3e>
 800c6ca:	2030      	movs	r0, #48	; 0x30
 800c6cc:	18e1      	adds	r1, r4, r3
 800c6ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6d2:	1c5a      	adds	r2, r3, #1
 800c6d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6d8:	4422      	add	r2, r4
 800c6da:	3302      	adds	r3, #2
 800c6dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6e0:	e7c2      	b.n	800c668 <_printf_common+0x58>
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	4622      	mov	r2, r4
 800c6e6:	4649      	mov	r1, r9
 800c6e8:	4638      	mov	r0, r7
 800c6ea:	47c0      	blx	r8
 800c6ec:	3001      	adds	r0, #1
 800c6ee:	d0e6      	beq.n	800c6be <_printf_common+0xae>
 800c6f0:	3601      	adds	r6, #1
 800c6f2:	e7d9      	b.n	800c6a8 <_printf_common+0x98>

0800c6f4 <_printf_i>:
 800c6f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c6f8:	7e0f      	ldrb	r7, [r1, #24]
 800c6fa:	4691      	mov	r9, r2
 800c6fc:	2f78      	cmp	r7, #120	; 0x78
 800c6fe:	4680      	mov	r8, r0
 800c700:	460c      	mov	r4, r1
 800c702:	469a      	mov	sl, r3
 800c704:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c706:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c70a:	d807      	bhi.n	800c71c <_printf_i+0x28>
 800c70c:	2f62      	cmp	r7, #98	; 0x62
 800c70e:	d80a      	bhi.n	800c726 <_printf_i+0x32>
 800c710:	2f00      	cmp	r7, #0
 800c712:	f000 80d5 	beq.w	800c8c0 <_printf_i+0x1cc>
 800c716:	2f58      	cmp	r7, #88	; 0x58
 800c718:	f000 80c1 	beq.w	800c89e <_printf_i+0x1aa>
 800c71c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c720:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c724:	e03a      	b.n	800c79c <_printf_i+0xa8>
 800c726:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c72a:	2b15      	cmp	r3, #21
 800c72c:	d8f6      	bhi.n	800c71c <_printf_i+0x28>
 800c72e:	a101      	add	r1, pc, #4	; (adr r1, 800c734 <_printf_i+0x40>)
 800c730:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c734:	0800c78d 	.word	0x0800c78d
 800c738:	0800c7a1 	.word	0x0800c7a1
 800c73c:	0800c71d 	.word	0x0800c71d
 800c740:	0800c71d 	.word	0x0800c71d
 800c744:	0800c71d 	.word	0x0800c71d
 800c748:	0800c71d 	.word	0x0800c71d
 800c74c:	0800c7a1 	.word	0x0800c7a1
 800c750:	0800c71d 	.word	0x0800c71d
 800c754:	0800c71d 	.word	0x0800c71d
 800c758:	0800c71d 	.word	0x0800c71d
 800c75c:	0800c71d 	.word	0x0800c71d
 800c760:	0800c8a7 	.word	0x0800c8a7
 800c764:	0800c7cd 	.word	0x0800c7cd
 800c768:	0800c861 	.word	0x0800c861
 800c76c:	0800c71d 	.word	0x0800c71d
 800c770:	0800c71d 	.word	0x0800c71d
 800c774:	0800c8c9 	.word	0x0800c8c9
 800c778:	0800c71d 	.word	0x0800c71d
 800c77c:	0800c7cd 	.word	0x0800c7cd
 800c780:	0800c71d 	.word	0x0800c71d
 800c784:	0800c71d 	.word	0x0800c71d
 800c788:	0800c869 	.word	0x0800c869
 800c78c:	682b      	ldr	r3, [r5, #0]
 800c78e:	1d1a      	adds	r2, r3, #4
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	602a      	str	r2, [r5, #0]
 800c794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c79c:	2301      	movs	r3, #1
 800c79e:	e0a0      	b.n	800c8e2 <_printf_i+0x1ee>
 800c7a0:	6820      	ldr	r0, [r4, #0]
 800c7a2:	682b      	ldr	r3, [r5, #0]
 800c7a4:	0607      	lsls	r7, r0, #24
 800c7a6:	f103 0104 	add.w	r1, r3, #4
 800c7aa:	6029      	str	r1, [r5, #0]
 800c7ac:	d501      	bpl.n	800c7b2 <_printf_i+0xbe>
 800c7ae:	681e      	ldr	r6, [r3, #0]
 800c7b0:	e003      	b.n	800c7ba <_printf_i+0xc6>
 800c7b2:	0646      	lsls	r6, r0, #25
 800c7b4:	d5fb      	bpl.n	800c7ae <_printf_i+0xba>
 800c7b6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c7ba:	2e00      	cmp	r6, #0
 800c7bc:	da03      	bge.n	800c7c6 <_printf_i+0xd2>
 800c7be:	232d      	movs	r3, #45	; 0x2d
 800c7c0:	4276      	negs	r6, r6
 800c7c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7c6:	230a      	movs	r3, #10
 800c7c8:	4859      	ldr	r0, [pc, #356]	; (800c930 <_printf_i+0x23c>)
 800c7ca:	e012      	b.n	800c7f2 <_printf_i+0xfe>
 800c7cc:	682b      	ldr	r3, [r5, #0]
 800c7ce:	6820      	ldr	r0, [r4, #0]
 800c7d0:	1d19      	adds	r1, r3, #4
 800c7d2:	6029      	str	r1, [r5, #0]
 800c7d4:	0605      	lsls	r5, r0, #24
 800c7d6:	d501      	bpl.n	800c7dc <_printf_i+0xe8>
 800c7d8:	681e      	ldr	r6, [r3, #0]
 800c7da:	e002      	b.n	800c7e2 <_printf_i+0xee>
 800c7dc:	0641      	lsls	r1, r0, #25
 800c7de:	d5fb      	bpl.n	800c7d8 <_printf_i+0xe4>
 800c7e0:	881e      	ldrh	r6, [r3, #0]
 800c7e2:	2f6f      	cmp	r7, #111	; 0x6f
 800c7e4:	bf0c      	ite	eq
 800c7e6:	2308      	moveq	r3, #8
 800c7e8:	230a      	movne	r3, #10
 800c7ea:	4851      	ldr	r0, [pc, #324]	; (800c930 <_printf_i+0x23c>)
 800c7ec:	2100      	movs	r1, #0
 800c7ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c7f2:	6865      	ldr	r5, [r4, #4]
 800c7f4:	2d00      	cmp	r5, #0
 800c7f6:	bfa8      	it	ge
 800c7f8:	6821      	ldrge	r1, [r4, #0]
 800c7fa:	60a5      	str	r5, [r4, #8]
 800c7fc:	bfa4      	itt	ge
 800c7fe:	f021 0104 	bicge.w	r1, r1, #4
 800c802:	6021      	strge	r1, [r4, #0]
 800c804:	b90e      	cbnz	r6, 800c80a <_printf_i+0x116>
 800c806:	2d00      	cmp	r5, #0
 800c808:	d04b      	beq.n	800c8a2 <_printf_i+0x1ae>
 800c80a:	4615      	mov	r5, r2
 800c80c:	fbb6 f1f3 	udiv	r1, r6, r3
 800c810:	fb03 6711 	mls	r7, r3, r1, r6
 800c814:	5dc7      	ldrb	r7, [r0, r7]
 800c816:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c81a:	4637      	mov	r7, r6
 800c81c:	42bb      	cmp	r3, r7
 800c81e:	460e      	mov	r6, r1
 800c820:	d9f4      	bls.n	800c80c <_printf_i+0x118>
 800c822:	2b08      	cmp	r3, #8
 800c824:	d10b      	bne.n	800c83e <_printf_i+0x14a>
 800c826:	6823      	ldr	r3, [r4, #0]
 800c828:	07de      	lsls	r6, r3, #31
 800c82a:	d508      	bpl.n	800c83e <_printf_i+0x14a>
 800c82c:	6923      	ldr	r3, [r4, #16]
 800c82e:	6861      	ldr	r1, [r4, #4]
 800c830:	4299      	cmp	r1, r3
 800c832:	bfde      	ittt	le
 800c834:	2330      	movle	r3, #48	; 0x30
 800c836:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c83a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c83e:	1b52      	subs	r2, r2, r5
 800c840:	6122      	str	r2, [r4, #16]
 800c842:	464b      	mov	r3, r9
 800c844:	4621      	mov	r1, r4
 800c846:	4640      	mov	r0, r8
 800c848:	f8cd a000 	str.w	sl, [sp]
 800c84c:	aa03      	add	r2, sp, #12
 800c84e:	f7ff fedf 	bl	800c610 <_printf_common>
 800c852:	3001      	adds	r0, #1
 800c854:	d14a      	bne.n	800c8ec <_printf_i+0x1f8>
 800c856:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c85a:	b004      	add	sp, #16
 800c85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c860:	6823      	ldr	r3, [r4, #0]
 800c862:	f043 0320 	orr.w	r3, r3, #32
 800c866:	6023      	str	r3, [r4, #0]
 800c868:	2778      	movs	r7, #120	; 0x78
 800c86a:	4832      	ldr	r0, [pc, #200]	; (800c934 <_printf_i+0x240>)
 800c86c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c870:	6823      	ldr	r3, [r4, #0]
 800c872:	6829      	ldr	r1, [r5, #0]
 800c874:	061f      	lsls	r7, r3, #24
 800c876:	f851 6b04 	ldr.w	r6, [r1], #4
 800c87a:	d402      	bmi.n	800c882 <_printf_i+0x18e>
 800c87c:	065f      	lsls	r7, r3, #25
 800c87e:	bf48      	it	mi
 800c880:	b2b6      	uxthmi	r6, r6
 800c882:	07df      	lsls	r7, r3, #31
 800c884:	bf48      	it	mi
 800c886:	f043 0320 	orrmi.w	r3, r3, #32
 800c88a:	6029      	str	r1, [r5, #0]
 800c88c:	bf48      	it	mi
 800c88e:	6023      	strmi	r3, [r4, #0]
 800c890:	b91e      	cbnz	r6, 800c89a <_printf_i+0x1a6>
 800c892:	6823      	ldr	r3, [r4, #0]
 800c894:	f023 0320 	bic.w	r3, r3, #32
 800c898:	6023      	str	r3, [r4, #0]
 800c89a:	2310      	movs	r3, #16
 800c89c:	e7a6      	b.n	800c7ec <_printf_i+0xf8>
 800c89e:	4824      	ldr	r0, [pc, #144]	; (800c930 <_printf_i+0x23c>)
 800c8a0:	e7e4      	b.n	800c86c <_printf_i+0x178>
 800c8a2:	4615      	mov	r5, r2
 800c8a4:	e7bd      	b.n	800c822 <_printf_i+0x12e>
 800c8a6:	682b      	ldr	r3, [r5, #0]
 800c8a8:	6826      	ldr	r6, [r4, #0]
 800c8aa:	1d18      	adds	r0, r3, #4
 800c8ac:	6961      	ldr	r1, [r4, #20]
 800c8ae:	6028      	str	r0, [r5, #0]
 800c8b0:	0635      	lsls	r5, r6, #24
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	d501      	bpl.n	800c8ba <_printf_i+0x1c6>
 800c8b6:	6019      	str	r1, [r3, #0]
 800c8b8:	e002      	b.n	800c8c0 <_printf_i+0x1cc>
 800c8ba:	0670      	lsls	r0, r6, #25
 800c8bc:	d5fb      	bpl.n	800c8b6 <_printf_i+0x1c2>
 800c8be:	8019      	strh	r1, [r3, #0]
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	4615      	mov	r5, r2
 800c8c4:	6123      	str	r3, [r4, #16]
 800c8c6:	e7bc      	b.n	800c842 <_printf_i+0x14e>
 800c8c8:	682b      	ldr	r3, [r5, #0]
 800c8ca:	2100      	movs	r1, #0
 800c8cc:	1d1a      	adds	r2, r3, #4
 800c8ce:	602a      	str	r2, [r5, #0]
 800c8d0:	681d      	ldr	r5, [r3, #0]
 800c8d2:	6862      	ldr	r2, [r4, #4]
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	f000 f878 	bl	800c9ca <memchr>
 800c8da:	b108      	cbz	r0, 800c8e0 <_printf_i+0x1ec>
 800c8dc:	1b40      	subs	r0, r0, r5
 800c8de:	6060      	str	r0, [r4, #4]
 800c8e0:	6863      	ldr	r3, [r4, #4]
 800c8e2:	6123      	str	r3, [r4, #16]
 800c8e4:	2300      	movs	r3, #0
 800c8e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8ea:	e7aa      	b.n	800c842 <_printf_i+0x14e>
 800c8ec:	462a      	mov	r2, r5
 800c8ee:	4649      	mov	r1, r9
 800c8f0:	4640      	mov	r0, r8
 800c8f2:	6923      	ldr	r3, [r4, #16]
 800c8f4:	47d0      	blx	sl
 800c8f6:	3001      	adds	r0, #1
 800c8f8:	d0ad      	beq.n	800c856 <_printf_i+0x162>
 800c8fa:	6823      	ldr	r3, [r4, #0]
 800c8fc:	079b      	lsls	r3, r3, #30
 800c8fe:	d413      	bmi.n	800c928 <_printf_i+0x234>
 800c900:	68e0      	ldr	r0, [r4, #12]
 800c902:	9b03      	ldr	r3, [sp, #12]
 800c904:	4298      	cmp	r0, r3
 800c906:	bfb8      	it	lt
 800c908:	4618      	movlt	r0, r3
 800c90a:	e7a6      	b.n	800c85a <_printf_i+0x166>
 800c90c:	2301      	movs	r3, #1
 800c90e:	4632      	mov	r2, r6
 800c910:	4649      	mov	r1, r9
 800c912:	4640      	mov	r0, r8
 800c914:	47d0      	blx	sl
 800c916:	3001      	adds	r0, #1
 800c918:	d09d      	beq.n	800c856 <_printf_i+0x162>
 800c91a:	3501      	adds	r5, #1
 800c91c:	68e3      	ldr	r3, [r4, #12]
 800c91e:	9903      	ldr	r1, [sp, #12]
 800c920:	1a5b      	subs	r3, r3, r1
 800c922:	42ab      	cmp	r3, r5
 800c924:	dcf2      	bgt.n	800c90c <_printf_i+0x218>
 800c926:	e7eb      	b.n	800c900 <_printf_i+0x20c>
 800c928:	2500      	movs	r5, #0
 800c92a:	f104 0619 	add.w	r6, r4, #25
 800c92e:	e7f5      	b.n	800c91c <_printf_i+0x228>
 800c930:	0800da90 	.word	0x0800da90
 800c934:	0800daa1 	.word	0x0800daa1

0800c938 <_realloc_r>:
 800c938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c93c:	4680      	mov	r8, r0
 800c93e:	4614      	mov	r4, r2
 800c940:	460e      	mov	r6, r1
 800c942:	b921      	cbnz	r1, 800c94e <_realloc_r+0x16>
 800c944:	4611      	mov	r1, r2
 800c946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c94a:	f7ff bb2d 	b.w	800bfa8 <_malloc_r>
 800c94e:	b92a      	cbnz	r2, 800c95c <_realloc_r+0x24>
 800c950:	f7ff fcbe 	bl	800c2d0 <_free_r>
 800c954:	4625      	mov	r5, r4
 800c956:	4628      	mov	r0, r5
 800c958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c95c:	f000 f851 	bl	800ca02 <_malloc_usable_size_r>
 800c960:	4284      	cmp	r4, r0
 800c962:	4607      	mov	r7, r0
 800c964:	d802      	bhi.n	800c96c <_realloc_r+0x34>
 800c966:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c96a:	d812      	bhi.n	800c992 <_realloc_r+0x5a>
 800c96c:	4621      	mov	r1, r4
 800c96e:	4640      	mov	r0, r8
 800c970:	f7ff fb1a 	bl	800bfa8 <_malloc_r>
 800c974:	4605      	mov	r5, r0
 800c976:	2800      	cmp	r0, #0
 800c978:	d0ed      	beq.n	800c956 <_realloc_r+0x1e>
 800c97a:	42bc      	cmp	r4, r7
 800c97c:	4622      	mov	r2, r4
 800c97e:	4631      	mov	r1, r6
 800c980:	bf28      	it	cs
 800c982:	463a      	movcs	r2, r7
 800c984:	f000 f82f 	bl	800c9e6 <memcpy>
 800c988:	4631      	mov	r1, r6
 800c98a:	4640      	mov	r0, r8
 800c98c:	f7ff fca0 	bl	800c2d0 <_free_r>
 800c990:	e7e1      	b.n	800c956 <_realloc_r+0x1e>
 800c992:	4635      	mov	r5, r6
 800c994:	e7df      	b.n	800c956 <_realloc_r+0x1e>

0800c996 <memmove>:
 800c996:	4288      	cmp	r0, r1
 800c998:	b510      	push	{r4, lr}
 800c99a:	eb01 0402 	add.w	r4, r1, r2
 800c99e:	d902      	bls.n	800c9a6 <memmove+0x10>
 800c9a0:	4284      	cmp	r4, r0
 800c9a2:	4623      	mov	r3, r4
 800c9a4:	d807      	bhi.n	800c9b6 <memmove+0x20>
 800c9a6:	1e43      	subs	r3, r0, #1
 800c9a8:	42a1      	cmp	r1, r4
 800c9aa:	d008      	beq.n	800c9be <memmove+0x28>
 800c9ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c9b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c9b4:	e7f8      	b.n	800c9a8 <memmove+0x12>
 800c9b6:	4601      	mov	r1, r0
 800c9b8:	4402      	add	r2, r0
 800c9ba:	428a      	cmp	r2, r1
 800c9bc:	d100      	bne.n	800c9c0 <memmove+0x2a>
 800c9be:	bd10      	pop	{r4, pc}
 800c9c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c9c4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c9c8:	e7f7      	b.n	800c9ba <memmove+0x24>

0800c9ca <memchr>:
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	b510      	push	{r4, lr}
 800c9ce:	b2c9      	uxtb	r1, r1
 800c9d0:	4402      	add	r2, r0
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	d101      	bne.n	800c9dc <memchr+0x12>
 800c9d8:	2000      	movs	r0, #0
 800c9da:	e003      	b.n	800c9e4 <memchr+0x1a>
 800c9dc:	7804      	ldrb	r4, [r0, #0]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	428c      	cmp	r4, r1
 800c9e2:	d1f6      	bne.n	800c9d2 <memchr+0x8>
 800c9e4:	bd10      	pop	{r4, pc}

0800c9e6 <memcpy>:
 800c9e6:	440a      	add	r2, r1
 800c9e8:	4291      	cmp	r1, r2
 800c9ea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c9ee:	d100      	bne.n	800c9f2 <memcpy+0xc>
 800c9f0:	4770      	bx	lr
 800c9f2:	b510      	push	{r4, lr}
 800c9f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9f8:	4291      	cmp	r1, r2
 800c9fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9fe:	d1f9      	bne.n	800c9f4 <memcpy+0xe>
 800ca00:	bd10      	pop	{r4, pc}

0800ca02 <_malloc_usable_size_r>:
 800ca02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca06:	1f18      	subs	r0, r3, #4
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	bfbc      	itt	lt
 800ca0c:	580b      	ldrlt	r3, [r1, r0]
 800ca0e:	18c0      	addlt	r0, r0, r3
 800ca10:	4770      	bx	lr
	...

0800ca14 <_init>:
 800ca14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca16:	bf00      	nop
 800ca18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca1a:	bc08      	pop	{r3}
 800ca1c:	469e      	mov	lr, r3
 800ca1e:	4770      	bx	lr

0800ca20 <_fini>:
 800ca20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca22:	bf00      	nop
 800ca24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca26:	bc08      	pop	{r3}
 800ca28:	469e      	mov	lr, r3
 800ca2a:	4770      	bx	lr
