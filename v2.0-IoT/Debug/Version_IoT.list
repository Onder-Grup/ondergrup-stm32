
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc88  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  0800be6c  0800be6c  0001be6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc30  0800cc30  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  0800cc30  0800cc30  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cc30  0800cc30  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc30  0800cc30  0001cc30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc34  0800cc34  0001cc34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800cc38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  200000b4  0800ccec  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  0800ccec  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001212f  00000000  00000000  00020120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000240e  00000000  00000000  0003224f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001168  00000000  00000000  00034660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd1  00000000  00000000  000357c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001ef8  00000000  00000000  00036599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000170e0  00000000  00000000  00038491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ebff  00000000  00000000  0004f571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004b60  00000000  00000000  000ee170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f2cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000b4 	.word	0x200000b4
 8000200:	00000000 	.word	0x00000000
 8000204:	0800be54 	.word	0x0800be54

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000b8 	.word	0x200000b8
 8000220:	0800be54 	.word	0x0800be54

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af02      	add	r7, sp, #8
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	f023 030f 	bic.w	r3, r3, #15
 8000244:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	011b      	lsls	r3, r3, #4
 800024a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800024c:	7b7b      	ldrb	r3, [r7, #13]
 800024e:	f043 030c 	orr.w	r3, r3, #12
 8000252:	b2db      	uxtb	r3, r3
 8000254:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000256:	7b7b      	ldrb	r3, [r7, #13]
 8000258:	f043 0308 	orr.w	r3, r3, #8
 800025c:	b2db      	uxtb	r3, r3
 800025e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000260:	7b3b      	ldrb	r3, [r7, #12]
 8000262:	f043 030c 	orr.w	r3, r3, #12
 8000266:	b2db      	uxtb	r3, r3
 8000268:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800026a:	7b3b      	ldrb	r3, [r7, #12]
 800026c:	f043 0308 	orr.w	r3, r3, #8
 8000270:	b2db      	uxtb	r3, r3
 8000272:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000274:	bf00      	nop
 8000276:	4825      	ldr	r0, [pc, #148]	; (800030c <lcd_send_cmd+0xd8>)
 8000278:	f009 fba1 	bl	80099be <HAL_I2C_GetError>
 800027c:	4603      	mov	r3, r0
 800027e:	2b04      	cmp	r3, #4
 8000280:	d0f9      	beq.n	8000276 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000282:	bf00      	nop
 8000284:	4821      	ldr	r0, [pc, #132]	; (800030c <lcd_send_cmd+0xd8>)
 8000286:	f009 fb8d 	bl	80099a4 <HAL_I2C_GetState>
 800028a:	4603      	mov	r3, r0
 800028c:	2b20      	cmp	r3, #32
 800028e:	d1f9      	bne.n	8000284 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000290:	4b1f      	ldr	r3, [pc, #124]	; (8000310 <lcd_send_cmd+0xdc>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d116      	bne.n	80002c6 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8000298:	2300      	movs	r3, #0
 800029a:	73fb      	strb	r3, [r7, #15]
 800029c:	e00f      	b.n	80002be <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800029e:	7bfb      	ldrb	r3, [r7, #15]
 80002a0:	3310      	adds	r3, #16
 80002a2:	443b      	add	r3, r7
 80002a4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80002a8:	7bfb      	ldrb	r3, [r7, #15]
 80002aa:	f022 0208 	bic.w	r2, r2, #8
 80002ae:	b2d2      	uxtb	r2, r2
 80002b0:	3310      	adds	r3, #16
 80002b2:	443b      	add	r3, r7
 80002b4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80002b8:	7bfb      	ldrb	r3, [r7, #15]
 80002ba:	3301      	adds	r3, #1
 80002bc:	73fb      	strb	r3, [r7, #15]
 80002be:	7bfb      	ldrb	r3, [r7, #15]
 80002c0:	2b03      	cmp	r3, #3
 80002c2:	d9ec      	bls.n	800029e <lcd_send_cmd+0x6a>
 80002c4:	e015      	b.n	80002f2 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80002c6:	2300      	movs	r3, #0
 80002c8:	73bb      	strb	r3, [r7, #14]
 80002ca:	e00f      	b.n	80002ec <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80002cc:	7bbb      	ldrb	r3, [r7, #14]
 80002ce:	3310      	adds	r3, #16
 80002d0:	443b      	add	r3, r7
 80002d2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80002d6:	7bbb      	ldrb	r3, [r7, #14]
 80002d8:	f042 0208 	orr.w	r2, r2, #8
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	3310      	adds	r3, #16
 80002e0:	443b      	add	r3, r7
 80002e2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80002e6:	7bbb      	ldrb	r3, [r7, #14]
 80002e8:	3301      	adds	r3, #1
 80002ea:	73bb      	strb	r3, [r7, #14]
 80002ec:	7bbb      	ldrb	r3, [r7, #14]
 80002ee:	2b03      	cmp	r3, #3
 80002f0:	d9ec      	bls.n	80002cc <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002f2:	f107 0208 	add.w	r2, r7, #8
 80002f6:	2364      	movs	r3, #100	; 0x64
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	2304      	movs	r3, #4
 80002fc:	214e      	movs	r1, #78	; 0x4e
 80002fe:	4803      	ldr	r0, [pc, #12]	; (800030c <lcd_send_cmd+0xd8>)
 8000300:	f008 fef0 	bl	80090e4 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000304:	bf00      	nop
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	200000fc 	.word	0x200000fc
 8000310:	200000d0 	.word	0x200000d0

08000314 <lcd_send_data>:

void lcd_send_data (char data) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af02      	add	r7, sp, #8
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	f023 030f 	bic.w	r3, r3, #15
 8000324:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	011b      	lsls	r3, r3, #4
 800032a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800032c:	7b7b      	ldrb	r3, [r7, #13]
 800032e:	f043 030d 	orr.w	r3, r3, #13
 8000332:	b2db      	uxtb	r3, r3
 8000334:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000336:	7b7b      	ldrb	r3, [r7, #13]
 8000338:	f043 0309 	orr.w	r3, r3, #9
 800033c:	b2db      	uxtb	r3, r3
 800033e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000340:	7b3b      	ldrb	r3, [r7, #12]
 8000342:	f043 030d 	orr.w	r3, r3, #13
 8000346:	b2db      	uxtb	r3, r3
 8000348:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800034a:	7b3b      	ldrb	r3, [r7, #12]
 800034c:	f043 0309 	orr.w	r3, r3, #9
 8000350:	b2db      	uxtb	r3, r3
 8000352:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000354:	bf00      	nop
 8000356:	4825      	ldr	r0, [pc, #148]	; (80003ec <lcd_send_data+0xd8>)
 8000358:	f009 fb31 	bl	80099be <HAL_I2C_GetError>
 800035c:	4603      	mov	r3, r0
 800035e:	2b04      	cmp	r3, #4
 8000360:	d0f9      	beq.n	8000356 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000362:	bf00      	nop
 8000364:	4821      	ldr	r0, [pc, #132]	; (80003ec <lcd_send_data+0xd8>)
 8000366:	f009 fb1d 	bl	80099a4 <HAL_I2C_GetState>
 800036a:	4603      	mov	r3, r0
 800036c:	2b20      	cmp	r3, #32
 800036e:	d1f9      	bne.n	8000364 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000370:	4b1f      	ldr	r3, [pc, #124]	; (80003f0 <lcd_send_data+0xdc>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d116      	bne.n	80003a6 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8000378:	2300      	movs	r3, #0
 800037a:	73fb      	strb	r3, [r7, #15]
 800037c:	e00f      	b.n	800039e <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	3310      	adds	r3, #16
 8000382:	443b      	add	r3, r7
 8000384:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	f022 0208 	bic.w	r2, r2, #8
 800038e:	b2d2      	uxtb	r2, r2
 8000390:	3310      	adds	r3, #16
 8000392:	443b      	add	r3, r7
 8000394:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000398:	7bfb      	ldrb	r3, [r7, #15]
 800039a:	3301      	adds	r3, #1
 800039c:	73fb      	strb	r3, [r7, #15]
 800039e:	7bfb      	ldrb	r3, [r7, #15]
 80003a0:	2b03      	cmp	r3, #3
 80003a2:	d9ec      	bls.n	800037e <lcd_send_data+0x6a>
 80003a4:	e015      	b.n	80003d2 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80003a6:	2300      	movs	r3, #0
 80003a8:	73bb      	strb	r3, [r7, #14]
 80003aa:	e00f      	b.n	80003cc <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80003ac:	7bbb      	ldrb	r3, [r7, #14]
 80003ae:	3310      	adds	r3, #16
 80003b0:	443b      	add	r3, r7
 80003b2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003b6:	7bbb      	ldrb	r3, [r7, #14]
 80003b8:	f042 0208 	orr.w	r2, r2, #8
 80003bc:	b2d2      	uxtb	r2, r2
 80003be:	3310      	adds	r3, #16
 80003c0:	443b      	add	r3, r7
 80003c2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003c6:	7bbb      	ldrb	r3, [r7, #14]
 80003c8:	3301      	adds	r3, #1
 80003ca:	73bb      	strb	r3, [r7, #14]
 80003cc:	7bbb      	ldrb	r3, [r7, #14]
 80003ce:	2b03      	cmp	r3, #3
 80003d0:	d9ec      	bls.n	80003ac <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003d2:	f107 0208 	add.w	r2, r7, #8
 80003d6:	2364      	movs	r3, #100	; 0x64
 80003d8:	9300      	str	r3, [sp, #0]
 80003da:	2304      	movs	r3, #4
 80003dc:	214e      	movs	r1, #78	; 0x4e
 80003de:	4803      	ldr	r0, [pc, #12]	; (80003ec <lcd_send_data+0xd8>)
 80003e0:	f008 fe80 	bl	80090e4 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80003e4:	bf00      	nop
 80003e6:	3710      	adds	r7, #16
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	200000fc 	.word	0x200000fc
 80003f0:	200000d0 	.word	0x200000d0

080003f4 <lcd_send_string>:

void lcd_send_string (char *str) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	while (*str) {
 80003fc:	e006      	b.n	800040c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	1c5a      	adds	r2, r3, #1
 8000402:	607a      	str	r2, [r7, #4]
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ff84 	bl	8000314 <lcd_send_data>
	while (*str) {
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d1f4      	bne.n	80003fe <lcd_send_string+0xa>
	}
}
 8000414:	bf00      	nop
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af02      	add	r7, sp, #8
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	f023 030f 	bic.w	r3, r3, #15
 8000430:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	011b      	lsls	r3, r3, #4
 8000436:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8000438:	7b7b      	ldrb	r3, [r7, #13]
 800043a:	f043 030d 	orr.w	r3, r3, #13
 800043e:	b2db      	uxtb	r3, r3
 8000440:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000442:	7b7b      	ldrb	r3, [r7, #13]
 8000444:	f043 0309 	orr.w	r3, r3, #9
 8000448:	b2db      	uxtb	r3, r3
 800044a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 800044c:	7b3b      	ldrb	r3, [r7, #12]
 800044e:	f043 030d 	orr.w	r3, r3, #13
 8000452:	b2db      	uxtb	r3, r3
 8000454:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8000456:	7b3b      	ldrb	r3, [r7, #12]
 8000458:	f043 0309 	orr.w	r3, r3, #9
 800045c:	b2db      	uxtb	r3, r3
 800045e:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000460:	bf00      	nop
 8000462:	4825      	ldr	r0, [pc, #148]	; (80004f8 <lcd_send_char+0xd8>)
 8000464:	f009 faab 	bl	80099be <HAL_I2C_GetError>
 8000468:	4603      	mov	r3, r0
 800046a:	2b04      	cmp	r3, #4
 800046c:	d0f9      	beq.n	8000462 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800046e:	bf00      	nop
 8000470:	4821      	ldr	r0, [pc, #132]	; (80004f8 <lcd_send_char+0xd8>)
 8000472:	f009 fa97 	bl	80099a4 <HAL_I2C_GetState>
 8000476:	4603      	mov	r3, r0
 8000478:	2b20      	cmp	r3, #32
 800047a:	d1f9      	bne.n	8000470 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 800047c:	4b1f      	ldr	r3, [pc, #124]	; (80004fc <lcd_send_char+0xdc>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d116      	bne.n	80004b2 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8000484:	2300      	movs	r3, #0
 8000486:	73fb      	strb	r3, [r7, #15]
 8000488:	e00f      	b.n	80004aa <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800048a:	7bfb      	ldrb	r3, [r7, #15]
 800048c:	3310      	adds	r3, #16
 800048e:	443b      	add	r3, r7
 8000490:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000494:	7bfb      	ldrb	r3, [r7, #15]
 8000496:	f022 0208 	bic.w	r2, r2, #8
 800049a:	b2d2      	uxtb	r2, r2
 800049c:	3310      	adds	r3, #16
 800049e:	443b      	add	r3, r7
 80004a0:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
 80004a6:	3301      	adds	r3, #1
 80004a8:	73fb      	strb	r3, [r7, #15]
 80004aa:	7bfb      	ldrb	r3, [r7, #15]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d9ec      	bls.n	800048a <lcd_send_char+0x6a>
 80004b0:	e015      	b.n	80004de <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80004b2:	2300      	movs	r3, #0
 80004b4:	73bb      	strb	r3, [r7, #14]
 80004b6:	e00f      	b.n	80004d8 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80004b8:	7bbb      	ldrb	r3, [r7, #14]
 80004ba:	3310      	adds	r3, #16
 80004bc:	443b      	add	r3, r7
 80004be:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004c2:	7bbb      	ldrb	r3, [r7, #14]
 80004c4:	f042 0208 	orr.w	r2, r2, #8
 80004c8:	b2d2      	uxtb	r2, r2
 80004ca:	3310      	adds	r3, #16
 80004cc:	443b      	add	r3, r7
 80004ce:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80004d2:	7bbb      	ldrb	r3, [r7, #14]
 80004d4:	3301      	adds	r3, #1
 80004d6:	73bb      	strb	r3, [r7, #14]
 80004d8:	7bbb      	ldrb	r3, [r7, #14]
 80004da:	2b03      	cmp	r3, #3
 80004dc:	d9ec      	bls.n	80004b8 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80004de:	f107 0208 	add.w	r2, r7, #8
 80004e2:	2364      	movs	r3, #100	; 0x64
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2304      	movs	r3, #4
 80004e8:	214e      	movs	r1, #78	; 0x4e
 80004ea:	4803      	ldr	r0, [pc, #12]	; (80004f8 <lcd_send_char+0xd8>)
 80004ec:	f008 fdfa 	bl	80090e4 <HAL_I2C_Master_Transmit>
}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	200000fc 	.word	0x200000fc
 80004fc:	200000d0 	.word	0x200000d0

08000500 <lcd_init>:

void lcd_init (void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000504:	2002      	movs	r0, #2
 8000506:	f7ff fe95 	bl	8000234 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800050a:	2028      	movs	r0, #40	; 0x28
 800050c:	f7ff fe92 	bl	8000234 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000510:	200c      	movs	r0, #12
 8000512:	f7ff fe8f 	bl	8000234 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8000516:	2080      	movs	r0, #128	; 0x80
 8000518:	f7ff fe8c 	bl	8000234 <lcd_send_cmd>
	lcd_backlight(1);
 800051c:	2001      	movs	r0, #1
 800051e:	f000 f86d 	bl	80005fc <lcd_backlight>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}

08000526 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	4603      	mov	r3, r0
 800052e:	460a      	mov	r2, r1
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	4613      	mov	r3, r2
 8000534:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d106      	bne.n	800054a <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 800053c:	79bb      	ldrb	r3, [r7, #6]
 800053e:	337f      	adds	r3, #127	; 0x7f
 8000540:	b2db      	uxtb	r3, r3
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff fe76 	bl	8000234 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8000548:	e008      	b.n	800055c <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d105      	bne.n	800055c <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	3b41      	subs	r3, #65	; 0x41
 8000554:	b2db      	uxtb	r3, r3
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff fe6c 	bl	8000234 <lcd_send_cmd>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	603a      	str	r2, [r7, #0]
 800056e:	71fb      	strb	r3, [r7, #7]
 8000570:	460b      	mov	r3, r1
 8000572:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000574:	79ba      	ldrb	r2, [r7, #6]
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	4611      	mov	r1, r2
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ffd3 	bl	8000526 <lcd_gotoxy>
	lcd_send_string(str);
 8000580:	6838      	ldr	r0, [r7, #0]
 8000582:	f7ff ff37 	bl	80003f4 <lcd_send_string>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 800058e:	b580      	push	{r7, lr}
 8000590:	b082      	sub	sp, #8
 8000592:	af00      	add	r7, sp, #0
 8000594:	4603      	mov	r3, r0
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	460b      	mov	r3, r1
 800059a:	71bb      	strb	r3, [r7, #6]
 800059c:	4613      	mov	r3, r2
 800059e:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80005a0:	79ba      	ldrb	r2, [r7, #6]
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ffbd 	bl	8000526 <lcd_gotoxy>
    lcd_send_char(ch);
 80005ac:	797b      	ldrb	r3, [r7, #5]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff36 	bl	8000420 <lcd_send_char>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <lcd_clear>:

void lcd_clear(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f7ff fe37 	bl	8000234 <lcd_send_cmd>
    HAL_Delay(2);
 80005c6:	2002      	movs	r0, #2
 80005c8:	f007 fe00 	bl	80081cc <HAL_Delay>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	460a      	mov	r2, r1
 80005da:	71fb      	strb	r3, [r7, #7]
 80005dc:	4613      	mov	r3, r2
 80005de:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 80005e0:	79ba      	ldrb	r2, [r7, #6]
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	4611      	mov	r1, r2
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ff9d 	bl	8000526 <lcd_gotoxy>

    lcd_send_char(' ');
 80005ec:	2020      	movs	r0, #32
 80005ee:	f7ff ff17 	bl	8000420 <lcd_send_char>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <lcd_backlight+0x20>)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 800060c:	2000      	movs	r0, #0
 800060e:	f7ff fe11 	bl	8000234 <lcd_send_cmd>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	200000d0 	.word	0x200000d0

08000620 <lcd_cursor>:

void lcd_cursor(int state) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d106      	bne.n	800063c <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 800062e:	200e      	movs	r0, #14
 8000630:	f7ff fe00 	bl	8000234 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000634:	200f      	movs	r0, #15
 8000636:	f7ff fdfd 	bl	8000234 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800063a:	e002      	b.n	8000642 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 800063c:	200c      	movs	r0, #12
 800063e:	f7ff fdf9 	bl	8000234 <lcd_send_cmd>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000650:	f3bf 8f4f 	dsb	sy
}
 8000654:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <__NVIC_SystemReset+0x24>)
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800065e:	4904      	ldr	r1, [pc, #16]	; (8000670 <__NVIC_SystemReset+0x24>)
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <__NVIC_SystemReset+0x28>)
 8000662:	4313      	orrs	r3, r2
 8000664:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000666:	f3bf 8f4f 	dsb	sy
}
 800066a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <__NVIC_SystemReset+0x20>
 8000670:	e000ed00 	.word	0xe000ed00
 8000674:	05fa0004 	.word	0x05fa0004

08000678 <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000682:	20c8      	movs	r0, #200	; 0xc8
 8000684:	f007 fda2 	bl	80081cc <HAL_Delay>
	lcd_clear();
 8000688:	f7ff ff98 	bl	80005bc <lcd_clear>
	if(type == 1 && page == 0) {
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d143      	bne.n	800071a <printTemplate+0xa2>
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d140      	bne.n	800071a <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000698:	4a9d      	ldr	r2, [pc, #628]	; (8000910 <printTemplate+0x298>)
 800069a:	2101      	movs	r1, #1
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff ff61 	bl	8000564 <lcd_print>
		lcd_print(2, 3, "0");
 80006a2:	4a9c      	ldr	r2, [pc, #624]	; (8000914 <printTemplate+0x29c>)
 80006a4:	2103      	movs	r1, #3
 80006a6:	2002      	movs	r0, #2
 80006a8:	f7ff ff5c 	bl	8000564 <lcd_print>
		lcd_print(2, 4, "1");
 80006ac:	4a9a      	ldr	r2, [pc, #616]	; (8000918 <printTemplate+0x2a0>)
 80006ae:	2104      	movs	r1, #4
 80006b0:	2002      	movs	r0, #2
 80006b2:	f7ff ff57 	bl	8000564 <lcd_print>
		lcd_print(2, 5, "2");
 80006b6:	4a99      	ldr	r2, [pc, #612]	; (800091c <printTemplate+0x2a4>)
 80006b8:	2105      	movs	r1, #5
 80006ba:	2002      	movs	r0, #2
 80006bc:	f7ff ff52 	bl	8000564 <lcd_print>
		lcd_print(2, 6, "3");
 80006c0:	4a97      	ldr	r2, [pc, #604]	; (8000920 <printTemplate+0x2a8>)
 80006c2:	2106      	movs	r1, #6
 80006c4:	2002      	movs	r0, #2
 80006c6:	f7ff ff4d 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "4");
 80006ca:	4a96      	ldr	r2, [pc, #600]	; (8000924 <printTemplate+0x2ac>)
 80006cc:	2107      	movs	r1, #7
 80006ce:	2002      	movs	r0, #2
 80006d0:	f7ff ff48 	bl	8000564 <lcd_print>
		lcd_print(2, 10, "5");
 80006d4:	4a94      	ldr	r2, [pc, #592]	; (8000928 <printTemplate+0x2b0>)
 80006d6:	210a      	movs	r1, #10
 80006d8:	2002      	movs	r0, #2
 80006da:	f7ff ff43 	bl	8000564 <lcd_print>
		lcd_print(2, 11, "6");
 80006de:	4a93      	ldr	r2, [pc, #588]	; (800092c <printTemplate+0x2b4>)
 80006e0:	210b      	movs	r1, #11
 80006e2:	2002      	movs	r0, #2
 80006e4:	f7ff ff3e 	bl	8000564 <lcd_print>
		lcd_print(2, 12, "7");
 80006e8:	4a91      	ldr	r2, [pc, #580]	; (8000930 <printTemplate+0x2b8>)
 80006ea:	210c      	movs	r1, #12
 80006ec:	2002      	movs	r0, #2
 80006ee:	f7ff ff39 	bl	8000564 <lcd_print>
		lcd_print(2, 13, "8");
 80006f2:	4a90      	ldr	r2, [pc, #576]	; (8000934 <printTemplate+0x2bc>)
 80006f4:	210d      	movs	r1, #13
 80006f6:	2002      	movs	r0, #2
 80006f8:	f7ff ff34 	bl	8000564 <lcd_print>
		lcd_print(2, 14, "9");
 80006fc:	4a8e      	ldr	r2, [pc, #568]	; (8000938 <printTemplate+0x2c0>)
 80006fe:	210e      	movs	r1, #14
 8000700:	2002      	movs	r0, #2
 8000702:	f7ff ff2f 	bl	8000564 <lcd_print>
		lcd_print(1, 5, machineID);
 8000706:	4a8d      	ldr	r2, [pc, #564]	; (800093c <printTemplate+0x2c4>)
 8000708:	2105      	movs	r1, #5
 800070a:	2001      	movs	r0, #1
 800070c:	f7ff ff2a 	bl	8000564 <lcd_print>
		lcd_gotoxy(2, 3);
 8000710:	2103      	movs	r1, #3
 8000712:	2002      	movs	r0, #2
 8000714:	f7ff ff07 	bl	8000526 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000718:	e0f5      	b.n	8000906 <printTemplate+0x28e>
	} else if(type == 2) {
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b02      	cmp	r3, #2
 800071e:	d178      	bne.n	8000812 <printTemplate+0x19a>
		if(page == 1) {
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d114      	bne.n	8000750 <printTemplate+0xd8>
			lcd_clear();
 8000726:	f7ff ff49 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 800072a:	2064      	movs	r0, #100	; 0x64
 800072c:	f007 fd4e 	bl	80081cc <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000730:	4a83      	ldr	r2, [pc, #524]	; (8000940 <printTemplate+0x2c8>)
 8000732:	2101      	movs	r1, #1
 8000734:	2001      	movs	r0, #1
 8000736:	f7ff ff15 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800073a:	4a82      	ldr	r2, [pc, #520]	; (8000944 <printTemplate+0x2cc>)
 800073c:	2107      	movs	r1, #7
 800073e:	2001      	movs	r0, #1
 8000740:	f7ff ff10 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000744:	4a80      	ldr	r2, [pc, #512]	; (8000948 <printTemplate+0x2d0>)
 8000746:	2101      	movs	r1, #1
 8000748:	2002      	movs	r0, #2
 800074a:	f7ff ff0b 	bl	8000564 <lcd_print>
}
 800074e:	e0da      	b.n	8000906 <printTemplate+0x28e>
		} else if(page == 2) {
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	2b02      	cmp	r3, #2
 8000754:	d114      	bne.n	8000780 <printTemplate+0x108>
			lcd_clear();
 8000756:	f7ff ff31 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 800075a:	2064      	movs	r0, #100	; 0x64
 800075c:	f007 fd36 	bl	80081cc <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000760:	4a77      	ldr	r2, [pc, #476]	; (8000940 <printTemplate+0x2c8>)
 8000762:	2101      	movs	r1, #1
 8000764:	2001      	movs	r0, #1
 8000766:	f7ff fefd 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800076a:	4a76      	ldr	r2, [pc, #472]	; (8000944 <printTemplate+0x2cc>)
 800076c:	2107      	movs	r1, #7
 800076e:	2001      	movs	r0, #1
 8000770:	f7ff fef8 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000774:	4a75      	ldr	r2, [pc, #468]	; (800094c <printTemplate+0x2d4>)
 8000776:	2101      	movs	r1, #1
 8000778:	2002      	movs	r0, #2
 800077a:	f7ff fef3 	bl	8000564 <lcd_print>
}
 800077e:	e0c2      	b.n	8000906 <printTemplate+0x28e>
		} else if(page == 3) {
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	2b03      	cmp	r3, #3
 8000784:	d114      	bne.n	80007b0 <printTemplate+0x138>
			lcd_clear();
 8000786:	f7ff ff19 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 800078a:	2064      	movs	r0, #100	; 0x64
 800078c:	f007 fd1e 	bl	80081cc <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000790:	4a6b      	ldr	r2, [pc, #428]	; (8000940 <printTemplate+0x2c8>)
 8000792:	2101      	movs	r1, #1
 8000794:	2001      	movs	r0, #1
 8000796:	f7ff fee5 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800079a:	4a6a      	ldr	r2, [pc, #424]	; (8000944 <printTemplate+0x2cc>)
 800079c:	2107      	movs	r1, #7
 800079e:	2001      	movs	r0, #1
 80007a0:	f7ff fee0 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80007a4:	4a6a      	ldr	r2, [pc, #424]	; (8000950 <printTemplate+0x2d8>)
 80007a6:	2101      	movs	r1, #1
 80007a8:	2002      	movs	r0, #2
 80007aa:	f7ff fedb 	bl	8000564 <lcd_print>
}
 80007ae:	e0aa      	b.n	8000906 <printTemplate+0x28e>
		} else if(page == 4) {
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	2b04      	cmp	r3, #4
 80007b4:	d114      	bne.n	80007e0 <printTemplate+0x168>
			lcd_clear();
 80007b6:	f7ff ff01 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 80007ba:	2064      	movs	r0, #100	; 0x64
 80007bc:	f007 fd06 	bl	80081cc <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80007c0:	4a5f      	ldr	r2, [pc, #380]	; (8000940 <printTemplate+0x2c8>)
 80007c2:	2101      	movs	r1, #1
 80007c4:	2001      	movs	r0, #1
 80007c6:	f7ff fecd 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80007ca:	4a5e      	ldr	r2, [pc, #376]	; (8000944 <printTemplate+0x2cc>)
 80007cc:	2107      	movs	r1, #7
 80007ce:	2001      	movs	r0, #1
 80007d0:	f7ff fec8 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 80007d4:	4a5f      	ldr	r2, [pc, #380]	; (8000954 <printTemplate+0x2dc>)
 80007d6:	2101      	movs	r1, #1
 80007d8:	2002      	movs	r0, #2
 80007da:	f7ff fec3 	bl	8000564 <lcd_print>
}
 80007de:	e092      	b.n	8000906 <printTemplate+0x28e>
		} else if(page == 5) {
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	2b05      	cmp	r3, #5
 80007e4:	f040 808f 	bne.w	8000906 <printTemplate+0x28e>
			lcd_clear();
 80007e8:	f7ff fee8 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 80007ec:	2064      	movs	r0, #100	; 0x64
 80007ee:	f007 fced 	bl	80081cc <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80007f2:	4a53      	ldr	r2, [pc, #332]	; (8000940 <printTemplate+0x2c8>)
 80007f4:	2101      	movs	r1, #1
 80007f6:	2001      	movs	r0, #1
 80007f8:	f7ff feb4 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80007fc:	4a51      	ldr	r2, [pc, #324]	; (8000944 <printTemplate+0x2cc>)
 80007fe:	2107      	movs	r1, #7
 8000800:	2001      	movs	r0, #1
 8000802:	f7ff feaf 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000806:	4a54      	ldr	r2, [pc, #336]	; (8000958 <printTemplate+0x2e0>)
 8000808:	2101      	movs	r1, #1
 800080a:	2002      	movs	r0, #2
 800080c:	f7ff feaa 	bl	8000564 <lcd_print>
}
 8000810:	e079      	b.n	8000906 <printTemplate+0x28e>
	} else if(type == 3) {
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	2b03      	cmp	r3, #3
 8000816:	d176      	bne.n	8000906 <printTemplate+0x28e>
		if(page == 1) {
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d114      	bne.n	8000848 <printTemplate+0x1d0>
			lcd_clear();
 800081e:	f7ff fecd 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 8000822:	2064      	movs	r0, #100	; 0x64
 8000824:	f007 fcd2 	bl	80081cc <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000828:	4a4c      	ldr	r2, [pc, #304]	; (800095c <printTemplate+0x2e4>)
 800082a:	2101      	movs	r1, #1
 800082c:	2001      	movs	r0, #1
 800082e:	f7ff fe99 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000832:	4a4b      	ldr	r2, [pc, #300]	; (8000960 <printTemplate+0x2e8>)
 8000834:	2107      	movs	r1, #7
 8000836:	2001      	movs	r0, #1
 8000838:	f7ff fe94 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 800083c:	4a42      	ldr	r2, [pc, #264]	; (8000948 <printTemplate+0x2d0>)
 800083e:	2101      	movs	r1, #1
 8000840:	2002      	movs	r0, #2
 8000842:	f7ff fe8f 	bl	8000564 <lcd_print>
}
 8000846:	e05e      	b.n	8000906 <printTemplate+0x28e>
		} else if(page == 2) {
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	2b02      	cmp	r3, #2
 800084c:	d114      	bne.n	8000878 <printTemplate+0x200>
			lcd_clear();
 800084e:	f7ff feb5 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 8000852:	2064      	movs	r0, #100	; 0x64
 8000854:	f007 fcba 	bl	80081cc <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000858:	4a40      	ldr	r2, [pc, #256]	; (800095c <printTemplate+0x2e4>)
 800085a:	2101      	movs	r1, #1
 800085c:	2001      	movs	r0, #1
 800085e:	f7ff fe81 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000862:	4a3f      	ldr	r2, [pc, #252]	; (8000960 <printTemplate+0x2e8>)
 8000864:	2107      	movs	r1, #7
 8000866:	2001      	movs	r0, #1
 8000868:	f7ff fe7c 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 800086c:	4a37      	ldr	r2, [pc, #220]	; (800094c <printTemplate+0x2d4>)
 800086e:	2101      	movs	r1, #1
 8000870:	2002      	movs	r0, #2
 8000872:	f7ff fe77 	bl	8000564 <lcd_print>
}
 8000876:	e046      	b.n	8000906 <printTemplate+0x28e>
		} else if(page == 3) {
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	2b03      	cmp	r3, #3
 800087c:	d114      	bne.n	80008a8 <printTemplate+0x230>
			lcd_clear();
 800087e:	f7ff fe9d 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 8000882:	2064      	movs	r0, #100	; 0x64
 8000884:	f007 fca2 	bl	80081cc <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000888:	4a34      	ldr	r2, [pc, #208]	; (800095c <printTemplate+0x2e4>)
 800088a:	2101      	movs	r1, #1
 800088c:	2001      	movs	r0, #1
 800088e:	f7ff fe69 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000892:	4a33      	ldr	r2, [pc, #204]	; (8000960 <printTemplate+0x2e8>)
 8000894:	2107      	movs	r1, #7
 8000896:	2001      	movs	r0, #1
 8000898:	f7ff fe64 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 800089c:	4a2c      	ldr	r2, [pc, #176]	; (8000950 <printTemplate+0x2d8>)
 800089e:	2101      	movs	r1, #1
 80008a0:	2002      	movs	r0, #2
 80008a2:	f7ff fe5f 	bl	8000564 <lcd_print>
}
 80008a6:	e02e      	b.n	8000906 <printTemplate+0x28e>
		} else if(page == 4) {
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	2b04      	cmp	r3, #4
 80008ac:	d114      	bne.n	80008d8 <printTemplate+0x260>
			lcd_clear();
 80008ae:	f7ff fe85 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 80008b2:	2064      	movs	r0, #100	; 0x64
 80008b4:	f007 fc8a 	bl	80081cc <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80008b8:	4a28      	ldr	r2, [pc, #160]	; (800095c <printTemplate+0x2e4>)
 80008ba:	2101      	movs	r1, #1
 80008bc:	2001      	movs	r0, #1
 80008be:	f7ff fe51 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80008c2:	4a27      	ldr	r2, [pc, #156]	; (8000960 <printTemplate+0x2e8>)
 80008c4:	2107      	movs	r1, #7
 80008c6:	2001      	movs	r0, #1
 80008c8:	f7ff fe4c 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 80008cc:	4a21      	ldr	r2, [pc, #132]	; (8000954 <printTemplate+0x2dc>)
 80008ce:	2101      	movs	r1, #1
 80008d0:	2002      	movs	r0, #2
 80008d2:	f7ff fe47 	bl	8000564 <lcd_print>
}
 80008d6:	e016      	b.n	8000906 <printTemplate+0x28e>
		} else if(page == 5) {
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	2b05      	cmp	r3, #5
 80008dc:	d113      	bne.n	8000906 <printTemplate+0x28e>
			lcd_clear();
 80008de:	f7ff fe6d 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 80008e2:	2064      	movs	r0, #100	; 0x64
 80008e4:	f007 fc72 	bl	80081cc <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80008e8:	4a1c      	ldr	r2, [pc, #112]	; (800095c <printTemplate+0x2e4>)
 80008ea:	2101      	movs	r1, #1
 80008ec:	2001      	movs	r0, #1
 80008ee:	f7ff fe39 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80008f2:	4a1b      	ldr	r2, [pc, #108]	; (8000960 <printTemplate+0x2e8>)
 80008f4:	2107      	movs	r1, #7
 80008f6:	2001      	movs	r0, #1
 80008f8:	f7ff fe34 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 80008fc:	4a16      	ldr	r2, [pc, #88]	; (8000958 <printTemplate+0x2e0>)
 80008fe:	2101      	movs	r1, #1
 8000900:	2002      	movs	r0, #2
 8000902:	f7ff fe2f 	bl	8000564 <lcd_print>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	0800be6c 	.word	0x0800be6c
 8000914:	0800be74 	.word	0x0800be74
 8000918:	0800be78 	.word	0x0800be78
 800091c:	0800be7c 	.word	0x0800be7c
 8000920:	0800be80 	.word	0x0800be80
 8000924:	0800be84 	.word	0x0800be84
 8000928:	0800be88 	.word	0x0800be88
 800092c:	0800be8c 	.word	0x0800be8c
 8000930:	0800be90 	.word	0x0800be90
 8000934:	0800be94 	.word	0x0800be94
 8000938:	0800be98 	.word	0x0800be98
 800093c:	20000278 	.word	0x20000278
 8000940:	0800be9c 	.word	0x0800be9c
 8000944:	20000284 	.word	0x20000284
 8000948:	0800bea4 	.word	0x0800bea4
 800094c:	0800beb8 	.word	0x0800beb8
 8000950:	0800becc 	.word	0x0800becc
 8000954:	0800bee0 	.word	0x0800bee0
 8000958:	0800bef4 	.word	0x0800bef4
 800095c:	0800bf08 	.word	0x0800bf08
 8000960:	20000298 	.word	0x20000298

08000964 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 800096c:	4a04      	ldr	r2, [pc, #16]	; (8000980 <getCharFromCursorPosition+0x1c>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	781b      	ldrb	r3, [r3, #0]
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	20000050 	.word	0x20000050

08000984 <readWiFiCredentialsFromEEPROM>:

void readWiFiCredentialsFromEEPROM() {
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af04      	add	r7, sp, #16
    uint16_t wifiDataStartAddress = 50;
 800098a:	2332      	movs	r3, #50	; 0x32
 800098c:	80fb      	strh	r3, [r7, #6]

    HAL_I2C_Mem_Read(&hi2c1, 0xA0, wifiDataStartAddress, I2C_MEMADD_SIZE_16BIT, (uint8_t*)wifiSSID, 20, 3000);
 800098e:	88fa      	ldrh	r2, [r7, #6]
 8000990:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000994:	9302      	str	r3, [sp, #8]
 8000996:	2314      	movs	r3, #20
 8000998:	9301      	str	r3, [sp, #4]
 800099a:	4b10      	ldr	r3, [pc, #64]	; (80009dc <readWiFiCredentialsFromEEPROM+0x58>)
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	2310      	movs	r3, #16
 80009a0:	21a0      	movs	r1, #160	; 0xa0
 80009a2:	480f      	ldr	r0, [pc, #60]	; (80009e0 <readWiFiCredentialsFromEEPROM+0x5c>)
 80009a4:	f008 fd96 	bl	80094d4 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(&hi2c1, 0xA0, wifiDataStartAddress + 21, I2C_MEMADD_SIZE_16BIT, (uint8_t*)wifiPass, 20, 3000);
 80009a8:	88fb      	ldrh	r3, [r7, #6]
 80009aa:	3315      	adds	r3, #21
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009b2:	9302      	str	r3, [sp, #8]
 80009b4:	2314      	movs	r3, #20
 80009b6:	9301      	str	r3, [sp, #4]
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <readWiFiCredentialsFromEEPROM+0x60>)
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2310      	movs	r3, #16
 80009be:	21a0      	movs	r1, #160	; 0xa0
 80009c0:	4807      	ldr	r0, [pc, #28]	; (80009e0 <readWiFiCredentialsFromEEPROM+0x5c>)
 80009c2:	f008 fd87 	bl	80094d4 <HAL_I2C_Mem_Read>

    wifiSSID[20] = '\0';
 80009c6:	4b05      	ldr	r3, [pc, #20]	; (80009dc <readWiFiCredentialsFromEEPROM+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	751a      	strb	r2, [r3, #20]
    wifiPass[20] = '\0';
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <readWiFiCredentialsFromEEPROM+0x60>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	751a      	strb	r2, [r3, #20]
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000284 	.word	0x20000284
 80009e0:	200000fc 	.word	0x200000fc
 80009e4:	20000298 	.word	0x20000298

080009e8 <writeWiFiCredentialsToEEPROM>:

void writeWiFiCredentialsToEEPROM(const char* ssid, const char* password) {
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b089      	sub	sp, #36	; 0x24
 80009ec:	af04      	add	r7, sp, #16
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
    uint16_t wifiDataStartAddress = 50;
 80009f2:	2332      	movs	r3, #50	; 0x32
 80009f4:	81fb      	strh	r3, [r7, #14]

    HAL_I2C_Mem_Write(&hi2c1, 0xA0, wifiDataStartAddress, I2C_MEMADD_SIZE_16BIT, (uint8_t*)ssid, strlen(ssid), 3000);
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff fc14 	bl	8000224 <strlen>
 80009fc:	4603      	mov	r3, r0
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	89fa      	ldrh	r2, [r7, #14]
 8000a02:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000a06:	9102      	str	r1, [sp, #8]
 8000a08:	9301      	str	r3, [sp, #4]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	2310      	movs	r3, #16
 8000a10:	21a0      	movs	r1, #160	; 0xa0
 8000a12:	4814      	ldr	r0, [pc, #80]	; (8000a64 <writeWiFiCredentialsToEEPROM+0x7c>)
 8000a14:	f008 fc64 	bl	80092e0 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 8000a18:	200a      	movs	r0, #10
 8000a1a:	f007 fbd7 	bl	80081cc <HAL_Delay>

    HAL_I2C_Mem_Write(&hi2c1, 0xA0, wifiDataStartAddress + strlen(ssid) + 1, I2C_MEMADD_SIZE_16BIT, (uint8_t*)password, strlen(password), 3000);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff fc00 	bl	8000224 <strlen>
 8000a24:	4603      	mov	r3, r0
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	89fb      	ldrh	r3, [r7, #14]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	3301      	adds	r3, #1
 8000a30:	b29c      	uxth	r4, r3
 8000a32:	6838      	ldr	r0, [r7, #0]
 8000a34:	f7ff fbf6 	bl	8000224 <strlen>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000a40:	9202      	str	r2, [sp, #8]
 8000a42:	9301      	str	r3, [sp, #4]
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	9300      	str	r3, [sp, #0]
 8000a48:	2310      	movs	r3, #16
 8000a4a:	4622      	mov	r2, r4
 8000a4c:	21a0      	movs	r1, #160	; 0xa0
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <writeWiFiCredentialsToEEPROM+0x7c>)
 8000a50:	f008 fc46 	bl	80092e0 <HAL_I2C_Mem_Write>
    HAL_Delay(10);
 8000a54:	200a      	movs	r0, #10
 8000a56:	f007 fbb9 	bl	80081cc <HAL_Delay>
}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd90      	pop	{r4, r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000fc 	.word	0x200000fc

08000a68 <takeMachineID>:

void takeMachineID(int state) {
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b08b      	sub	sp, #44	; 0x2c
 8000a6c:	af04      	add	r7, sp, #16
 8000a6e:	6078      	str	r0, [r7, #4]
	mainSection:
	lcd_cursor(1);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f7ff fdd5 	bl	8000620 <lcd_cursor>

    int cursorPosition = 3;
 8000a76:	2303      	movs	r3, #3
 8000a78:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8000a7e:	2305      	movs	r3, #5
 8000a80:	60fb      	str	r3, [r7, #12]

    if(state == 0) {
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d104      	bne.n	8000a92 <takeMachineID+0x2a>
    	memset(machineID, 0, sizeof(machineID));
 8000a88:	220c      	movs	r2, #12
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4899      	ldr	r0, [pc, #612]	; (8000cf4 <takeMachineID+0x28c>)
 8000a8e:	f00b f9a7 	bl	800bde0 <memset>
    }
    HAL_Delay(100);
 8000a92:	2064      	movs	r0, #100	; 0x64
 8000a94:	f007 fb9a 	bl	80081cc <HAL_Delay>

    printTemplate(1, 0);
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	f7ff fdec 	bl	8000678 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000aa0:	2108      	movs	r1, #8
 8000aa2:	4895      	ldr	r0, [pc, #596]	; (8000cf8 <takeMachineID+0x290>)
 8000aa4:	f008 f962 	bl	8008d6c <HAL_GPIO_ReadPin>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d138      	bne.n	8000b20 <takeMachineID+0xb8>
        	lcd_cursor(0);
 8000aae:	2000      	movs	r0, #0
 8000ab0:	f7ff fdb6 	bl	8000620 <lcd_cursor>

        	if(machineID[11] == '\0') {
 8000ab4:	4b8f      	ldr	r3, [pc, #572]	; (8000cf4 <takeMachineID+0x28c>)
 8000ab6:	7adb      	ldrb	r3, [r3, #11]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d110      	bne.n	8000ade <takeMachineID+0x76>
        		lcd_clear();
 8000abc:	f7ff fd7e 	bl	80005bc <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8000ac0:	4a8e      	ldr	r2, [pc, #568]	; (8000cfc <takeMachineID+0x294>)
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f7ff fd4d 	bl	8000564 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8000aca:	4a8d      	ldr	r2, [pc, #564]	; (8000d00 <takeMachineID+0x298>)
 8000acc:	2101      	movs	r1, #1
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f7ff fd48 	bl	8000564 <lcd_print>
        		HAL_Delay(1200);
 8000ad4:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000ad8:	f007 fb78 	bl	80081cc <HAL_Delay>
        		goto mainSection;
 8000adc:	e7c8      	b.n	8000a70 <takeMachineID+0x8>
        		goto mainSection;
        	} else {
        		eepromData[49] = 1;
        	}*/

        	memcpy(&eepromData[idStartPos], machineID, 12);
 8000ade:	4b89      	ldr	r3, [pc, #548]	; (8000d04 <takeMachineID+0x29c>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	4b88      	ldr	r3, [pc, #544]	; (8000d08 <takeMachineID+0x2a0>)
 8000ae6:	4413      	add	r3, r2
 8000ae8:	4a82      	ldr	r2, [pc, #520]	; (8000cf4 <takeMachineID+0x28c>)
 8000aea:	461c      	mov	r4, r3
 8000aec:	4613      	mov	r3, r2
 8000aee:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000af0:	6020      	str	r0, [r4, #0]
 8000af2:	6061      	str	r1, [r4, #4]
 8000af4:	60a2      	str	r2, [r4, #8]
        	HAL_Delay(200);
 8000af6:	20c8      	movs	r0, #200	; 0xc8
 8000af8:	f007 fb68 	bl	80081cc <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000afc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b00:	9302      	str	r3, [sp, #8]
 8000b02:	236e      	movs	r3, #110	; 0x6e
 8000b04:	9301      	str	r3, [sp, #4]
 8000b06:	4b80      	ldr	r3, [pc, #512]	; (8000d08 <takeMachineID+0x2a0>)
 8000b08:	9300      	str	r3, [sp, #0]
 8000b0a:	236e      	movs	r3, #110	; 0x6e
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	21a0      	movs	r1, #160	; 0xa0
 8000b10:	487e      	ldr	r0, [pc, #504]	; (8000d0c <takeMachineID+0x2a4>)
 8000b12:	f008 fbe5 	bl	80092e0 <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8000b16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b1a:	f007 fb57 	bl	80081cc <HAL_Delay>

            break;
 8000b1e:	e0e5      	b.n	8000cec <takeMachineID+0x284>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000b20:	2101      	movs	r1, #1
 8000b22:	4875      	ldr	r0, [pc, #468]	; (8000cf8 <takeMachineID+0x290>)
 8000b24:	f008 f922 	bl	8008d6c <HAL_GPIO_ReadPin>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d112      	bne.n	8000b54 <takeMachineID+0xec>
        	if(cursorPosition == 7) {
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	2b07      	cmp	r3, #7
 8000b32:	d102      	bne.n	8000b3a <takeMachineID+0xd2>
        		cursorPosition = 10;
 8000b34:	230a      	movs	r3, #10
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	e008      	b.n	8000b4c <takeMachineID+0xe4>
        	} else if (cursorPosition == 14) {
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	2b0e      	cmp	r3, #14
 8000b3e:	d102      	bne.n	8000b46 <takeMachineID+0xde>
                cursorPosition = 3;
 8000b40:	2303      	movs	r3, #3
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	e002      	b.n	8000b4c <takeMachineID+0xe4>
            } else {
            	cursorPosition++;
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000b4c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000b50:	f007 fb3c 	bl	80081cc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000b54:	2108      	movs	r1, #8
 8000b56:	486e      	ldr	r0, [pc, #440]	; (8000d10 <takeMachineID+0x2a8>)
 8000b58:	f008 f908 	bl	8008d6c <HAL_GPIO_ReadPin>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d112      	bne.n	8000b88 <takeMachineID+0x120>
            if (cursorPosition == 3) {
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	d102      	bne.n	8000b6e <takeMachineID+0x106>
                cursorPosition = 14;
 8000b68:	230e      	movs	r3, #14
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	e008      	b.n	8000b80 <takeMachineID+0x118>
            } else if(cursorPosition == 10) {
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	2b0a      	cmp	r3, #10
 8000b72:	d102      	bne.n	8000b7a <takeMachineID+0x112>
            	cursorPosition = 7;
 8000b74:	2307      	movs	r3, #7
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	e002      	b.n	8000b80 <takeMachineID+0x118>
            } else {
            	cursorPosition--;
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000b80:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000b84:	f007 fb22 	bl	80081cc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000b88:	2102      	movs	r1, #2
 8000b8a:	485b      	ldr	r0, [pc, #364]	; (8000cf8 <takeMachineID+0x290>)
 8000b8c:	f008 f8ee 	bl	8008d6c <HAL_GPIO_ReadPin>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d16c      	bne.n	8000c70 <takeMachineID+0x208>
        	if(cursorPosition == 3) {
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	2b03      	cmp	r3, #3
 8000b9a:	d105      	bne.n	8000ba8 <takeMachineID+0x140>
        		machineID[machineIDLoc] = '0';
 8000b9c:	4a55      	ldr	r2, [pc, #340]	; (8000cf4 <takeMachineID+0x28c>)
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	2230      	movs	r2, #48	; 0x30
 8000ba4:	701a      	strb	r2, [r3, #0]
 8000ba6:	e04f      	b.n	8000c48 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 4) {
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	d105      	bne.n	8000bba <takeMachineID+0x152>
        		machineID[machineIDLoc] = '1';
 8000bae:	4a51      	ldr	r2, [pc, #324]	; (8000cf4 <takeMachineID+0x28c>)
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	4413      	add	r3, r2
 8000bb4:	2231      	movs	r2, #49	; 0x31
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	e046      	b.n	8000c48 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 5) {
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	2b05      	cmp	r3, #5
 8000bbe:	d105      	bne.n	8000bcc <takeMachineID+0x164>
        		machineID[machineIDLoc] = '2';
 8000bc0:	4a4c      	ldr	r2, [pc, #304]	; (8000cf4 <takeMachineID+0x28c>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	2232      	movs	r2, #50	; 0x32
 8000bc8:	701a      	strb	r2, [r3, #0]
 8000bca:	e03d      	b.n	8000c48 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 6) {
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	2b06      	cmp	r3, #6
 8000bd0:	d105      	bne.n	8000bde <takeMachineID+0x176>
        		machineID[machineIDLoc] = '3';
 8000bd2:	4a48      	ldr	r2, [pc, #288]	; (8000cf4 <takeMachineID+0x28c>)
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	2233      	movs	r2, #51	; 0x33
 8000bda:	701a      	strb	r2, [r3, #0]
 8000bdc:	e034      	b.n	8000c48 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 7) {
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	2b07      	cmp	r3, #7
 8000be2:	d105      	bne.n	8000bf0 <takeMachineID+0x188>
        		machineID[machineIDLoc] = '4';
 8000be4:	4a43      	ldr	r2, [pc, #268]	; (8000cf4 <takeMachineID+0x28c>)
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	4413      	add	r3, r2
 8000bea:	2234      	movs	r2, #52	; 0x34
 8000bec:	701a      	strb	r2, [r3, #0]
 8000bee:	e02b      	b.n	8000c48 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 10) {
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	2b0a      	cmp	r3, #10
 8000bf4:	d105      	bne.n	8000c02 <takeMachineID+0x19a>
        		machineID[machineIDLoc] = '5';
 8000bf6:	4a3f      	ldr	r2, [pc, #252]	; (8000cf4 <takeMachineID+0x28c>)
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	2235      	movs	r2, #53	; 0x35
 8000bfe:	701a      	strb	r2, [r3, #0]
 8000c00:	e022      	b.n	8000c48 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 11) {
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	2b0b      	cmp	r3, #11
 8000c06:	d105      	bne.n	8000c14 <takeMachineID+0x1ac>
        		machineID[machineIDLoc] = '6';
 8000c08:	4a3a      	ldr	r2, [pc, #232]	; (8000cf4 <takeMachineID+0x28c>)
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	2236      	movs	r2, #54	; 0x36
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e019      	b.n	8000c48 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 12) {
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	2b0c      	cmp	r3, #12
 8000c18:	d105      	bne.n	8000c26 <takeMachineID+0x1be>
        		machineID[machineIDLoc] = '7';
 8000c1a:	4a36      	ldr	r2, [pc, #216]	; (8000cf4 <takeMachineID+0x28c>)
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	4413      	add	r3, r2
 8000c20:	2237      	movs	r2, #55	; 0x37
 8000c22:	701a      	strb	r2, [r3, #0]
 8000c24:	e010      	b.n	8000c48 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 13) {
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	2b0d      	cmp	r3, #13
 8000c2a:	d105      	bne.n	8000c38 <takeMachineID+0x1d0>
        		machineID[machineIDLoc] = '8';
 8000c2c:	4a31      	ldr	r2, [pc, #196]	; (8000cf4 <takeMachineID+0x28c>)
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	4413      	add	r3, r2
 8000c32:	2238      	movs	r2, #56	; 0x38
 8000c34:	701a      	strb	r2, [r3, #0]
 8000c36:	e007      	b.n	8000c48 <takeMachineID+0x1e0>
        	} else if(cursorPosition == 14) {
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	2b0e      	cmp	r3, #14
 8000c3c:	d104      	bne.n	8000c48 <takeMachineID+0x1e0>
        		machineID[machineIDLoc] = '9';
 8000c3e:	4a2d      	ldr	r2, [pc, #180]	; (8000cf4 <takeMachineID+0x28c>)
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	4413      	add	r3, r2
 8000c44:	2239      	movs	r2, #57	; 0x39
 8000c46:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	b2d9      	uxtb	r1, r3
 8000c4c:	4a29      	ldr	r2, [pc, #164]	; (8000cf4 <takeMachineID+0x28c>)
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	4413      	add	r3, r2
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	f7ff fc99 	bl	800058e <lcd_print_char>

        	writeLoc++;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	3301      	adds	r3, #1
 8000c66:	613b      	str	r3, [r7, #16]

        	HAL_Delay(450);
 8000c68:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000c6c:	f007 faae 	bl	80081cc <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000c70:	2104      	movs	r1, #4
 8000c72:	4821      	ldr	r0, [pc, #132]	; (8000cf8 <takeMachineID+0x290>)
 8000c74:	f008 f87a 	bl	8008d6c <HAL_GPIO_ReadPin>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d12f      	bne.n	8000cde <takeMachineID+0x276>
            if(strlen(machineID) >= 1) {
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <takeMachineID+0x28c>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d027      	beq.n	8000cd6 <takeMachineID+0x26e>

                machineID[machineIDLoc] = '\0';
 8000c86:	4a1b      	ldr	r2, [pc, #108]	; (8000cf4 <takeMachineID+0x28c>)
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	3304      	adds	r3, #4
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	4619      	mov	r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff fc98 	bl	80005d0 <lcd_delete_char>
                HAL_Delay(50);
 8000ca0:	2032      	movs	r0, #50	; 0x32
 8000ca2:	f007 fa93 	bl	80081cc <HAL_Delay>

                if(writeLoc > 5) {
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2b05      	cmp	r3, #5
 8000caa:	dd03      	ble.n	8000cb4 <takeMachineID+0x24c>
                	writeLoc--;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	e004      	b.n	8000cbe <takeMachineID+0x256>
                } else if(writeLoc < 5) {
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	dc01      	bgt.n	8000cbe <takeMachineID+0x256>
                	writeLoc = 5;
 8000cba:	2305      	movs	r3, #5
 8000cbc:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	dd03      	ble.n	8000ccc <takeMachineID+0x264>
                	machineIDLoc--;
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	613b      	str	r3, [r7, #16]
 8000cca:	e004      	b.n	8000cd6 <takeMachineID+0x26e>
                } else if(machineIDLoc < 0) {
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	da01      	bge.n	8000cd6 <takeMachineID+0x26e>
                	machineIDLoc = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(350);
 8000cd6:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000cda:	f007 fa77 	bl	80081cc <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	2002      	movs	r0, #2
 8000ce6:	f7ff fc1e 	bl	8000526 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000cea:	e6d9      	b.n	8000aa0 <takeMachineID+0x38>
    }
}
 8000cec:	bf00      	nop
 8000cee:	371c      	adds	r7, #28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd90      	pop	{r4, r7, pc}
 8000cf4:	20000278 	.word	0x20000278
 8000cf8:	40010800 	.word	0x40010800
 8000cfc:	0800bf10 	.word	0x0800bf10
 8000d00:	0800bf24 	.word	0x0800bf24
 8000d04:	200000a1 	.word	0x200000a1
 8000d08:	200001e0 	.word	0x200001e0
 8000d0c:	200000fc 	.word	0x200000fc
 8000d10:	40011000 	.word	0x40011000

08000d14 <takeWifiSSID>:

void takeWifiSSID(int state) {
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b08b      	sub	sp, #44	; 0x2c
 8000d18:	af04      	add	r7, sp, #16
 8000d1a:	6078      	str	r0, [r7, #4]
	mainSSIDSection:
    lcd_cursor(1);
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f7ff fc7f 	bl	8000620 <lcd_cursor>

    if(state == 0) {
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d104      	bne.n	8000d32 <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000d28:	2214      	movs	r2, #20
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	488f      	ldr	r0, [pc, #572]	; (8000f6c <takeWifiSSID+0x258>)
 8000d2e:	f00b f857 	bl	800bde0 <memset>
    }

    int realCharPos = 1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8000d36:	4b8e      	ldr	r3, [pc, #568]	; (8000f70 <takeWifiSSID+0x25c>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	601a      	str	r2, [r3, #0]
    page = 1;
 8000d3c:	4b8d      	ldr	r3, [pc, #564]	; (8000f74 <takeWifiSSID+0x260>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8000d46:	2307      	movs	r3, #7
 8000d48:	60fb      	str	r3, [r7, #12]

    printTemplate(2, 1);
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	2002      	movs	r0, #2
 8000d4e:	f7ff fc93 	bl	8000678 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000d52:	2108      	movs	r1, #8
 8000d54:	4888      	ldr	r0, [pc, #544]	; (8000f78 <takeWifiSSID+0x264>)
 8000d56:	f008 f809 	bl	8008d6c <HAL_GPIO_ReadPin>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d139      	bne.n	8000dd4 <takeWifiSSID+0xc0>
            lcd_cursor(0);
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff fc5d 	bl	8000620 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8000d66:	4881      	ldr	r0, [pc, #516]	; (8000f6c <takeWifiSSID+0x258>)
 8000d68:	f7ff fa5c 	bl	8000224 <strlen>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b14      	cmp	r3, #20
 8000d70:	d910      	bls.n	8000d94 <takeWifiSSID+0x80>
                lcd_clear();
 8000d72:	f7ff fc23 	bl	80005bc <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8000d76:	4a81      	ldr	r2, [pc, #516]	; (8000f7c <takeWifiSSID+0x268>)
 8000d78:	2101      	movs	r1, #1
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f7ff fbf2 	bl	8000564 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8000d80:	4a7f      	ldr	r2, [pc, #508]	; (8000f80 <takeWifiSSID+0x26c>)
 8000d82:	2101      	movs	r1, #1
 8000d84:	2002      	movs	r0, #2
 8000d86:	f7ff fbed 	bl	8000564 <lcd_print>
                HAL_Delay(1200);
 8000d8a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000d8e:	f007 fa1d 	bl	80081cc <HAL_Delay>
                goto mainSSIDSection;
 8000d92:	e7c3      	b.n	8000d1c <takeWifiSSID+0x8>
            }

            memcpy(&eepromData[ssidStartPos], (uint8_t *)wifiSSID, strlen(wifiSSID));
 8000d94:	4b7b      	ldr	r3, [pc, #492]	; (8000f84 <takeWifiSSID+0x270>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b7b      	ldr	r3, [pc, #492]	; (8000f88 <takeWifiSSID+0x274>)
 8000d9c:	18d4      	adds	r4, r2, r3
 8000d9e:	4873      	ldr	r0, [pc, #460]	; (8000f6c <takeWifiSSID+0x258>)
 8000da0:	f7ff fa40 	bl	8000224 <strlen>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	4970      	ldr	r1, [pc, #448]	; (8000f6c <takeWifiSSID+0x258>)
 8000daa:	4620      	mov	r0, r4
 8000dac:	f00b f844 	bl	800be38 <memcpy>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000db0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000db4:	9302      	str	r3, [sp, #8]
 8000db6:	236e      	movs	r3, #110	; 0x6e
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	4b73      	ldr	r3, [pc, #460]	; (8000f88 <takeWifiSSID+0x274>)
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	236e      	movs	r3, #110	; 0x6e
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	21a0      	movs	r1, #160	; 0xa0
 8000dc4:	4871      	ldr	r0, [pc, #452]	; (8000f8c <takeWifiSSID+0x278>)
 8000dc6:	f008 fa8b 	bl	80092e0 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8000dca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dce:	f007 f9fd 	bl	80081cc <HAL_Delay>

            break;
 8000dd2:	e14b      	b.n	800106c <takeWifiSSID+0x358>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	4868      	ldr	r0, [pc, #416]	; (8000f78 <takeWifiSSID+0x264>)
 8000dd8:	f007 ffc8 	bl	8008d6c <HAL_GPIO_ReadPin>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d166      	bne.n	8000eb0 <takeWifiSSID+0x19c>
        	realCharPos++;
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	3301      	adds	r3, #1
 8000de6:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	2b50      	cmp	r3, #80	; 0x50
 8000dec:	dd01      	ble.n	8000df2 <takeWifiSSID+0xde>
        		realCharPos = 1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8000df2:	4b5f      	ldr	r3, [pc, #380]	; (8000f70 <takeWifiSSID+0x25c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b10      	cmp	r3, #16
 8000df8:	d152      	bne.n	8000ea0 <takeWifiSSID+0x18c>
            	if(page == 1) {
 8000dfa:	4b5e      	ldr	r3, [pc, #376]	; (8000f74 <takeWifiSSID+0x260>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d10c      	bne.n	8000e1c <takeWifiSSID+0x108>
            		cursorPosition = 1;
 8000e02:	4b5b      	ldr	r3, [pc, #364]	; (8000f70 <takeWifiSSID+0x25c>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	601a      	str	r2, [r3, #0]
            		page++;
 8000e08:	4b5a      	ldr	r3, [pc, #360]	; (8000f74 <takeWifiSSID+0x260>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a59      	ldr	r2, [pc, #356]	; (8000f74 <takeWifiSSID+0x260>)
 8000e10:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8000e12:	2102      	movs	r1, #2
 8000e14:	2002      	movs	r0, #2
 8000e16:	f7ff fc2f 	bl	8000678 <printTemplate>
 8000e1a:	e046      	b.n	8000eaa <takeWifiSSID+0x196>
            	} else if(page == 2) {
 8000e1c:	4b55      	ldr	r3, [pc, #340]	; (8000f74 <takeWifiSSID+0x260>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d10c      	bne.n	8000e3e <takeWifiSSID+0x12a>
            		cursorPosition = 1;
 8000e24:	4b52      	ldr	r3, [pc, #328]	; (8000f70 <takeWifiSSID+0x25c>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	601a      	str	r2, [r3, #0]
            		page++;
 8000e2a:	4b52      	ldr	r3, [pc, #328]	; (8000f74 <takeWifiSSID+0x260>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	4a50      	ldr	r2, [pc, #320]	; (8000f74 <takeWifiSSID+0x260>)
 8000e32:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8000e34:	2103      	movs	r1, #3
 8000e36:	2002      	movs	r0, #2
 8000e38:	f7ff fc1e 	bl	8000678 <printTemplate>
 8000e3c:	e035      	b.n	8000eaa <takeWifiSSID+0x196>
            	} else if(page == 3) {
 8000e3e:	4b4d      	ldr	r3, [pc, #308]	; (8000f74 <takeWifiSSID+0x260>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d10c      	bne.n	8000e60 <takeWifiSSID+0x14c>
            		cursorPosition = 1;
 8000e46:	4b4a      	ldr	r3, [pc, #296]	; (8000f70 <takeWifiSSID+0x25c>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
            		page++;
 8000e4c:	4b49      	ldr	r3, [pc, #292]	; (8000f74 <takeWifiSSID+0x260>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	4a48      	ldr	r2, [pc, #288]	; (8000f74 <takeWifiSSID+0x260>)
 8000e54:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8000e56:	2104      	movs	r1, #4
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f7ff fc0d 	bl	8000678 <printTemplate>
 8000e5e:	e024      	b.n	8000eaa <takeWifiSSID+0x196>
            	} else if(page == 4) {
 8000e60:	4b44      	ldr	r3, [pc, #272]	; (8000f74 <takeWifiSSID+0x260>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	d10c      	bne.n	8000e82 <takeWifiSSID+0x16e>
            		cursorPosition = 1;
 8000e68:	4b41      	ldr	r3, [pc, #260]	; (8000f70 <takeWifiSSID+0x25c>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	601a      	str	r2, [r3, #0]
            		page++;
 8000e6e:	4b41      	ldr	r3, [pc, #260]	; (8000f74 <takeWifiSSID+0x260>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	3301      	adds	r3, #1
 8000e74:	4a3f      	ldr	r2, [pc, #252]	; (8000f74 <takeWifiSSID+0x260>)
 8000e76:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8000e78:	2105      	movs	r1, #5
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f7ff fbfc 	bl	8000678 <printTemplate>
 8000e80:	e013      	b.n	8000eaa <takeWifiSSID+0x196>
            	} else if(page == 5) {
 8000e82:	4b3c      	ldr	r3, [pc, #240]	; (8000f74 <takeWifiSSID+0x260>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b05      	cmp	r3, #5
 8000e88:	d10f      	bne.n	8000eaa <takeWifiSSID+0x196>
            		cursorPosition = 1;
 8000e8a:	4b39      	ldr	r3, [pc, #228]	; (8000f70 <takeWifiSSID+0x25c>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000e90:	4b38      	ldr	r3, [pc, #224]	; (8000f74 <takeWifiSSID+0x260>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000e96:	2101      	movs	r1, #1
 8000e98:	2002      	movs	r0, #2
 8000e9a:	f7ff fbed 	bl	8000678 <printTemplate>
 8000e9e:	e004      	b.n	8000eaa <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition++;
 8000ea0:	4b33      	ldr	r3, [pc, #204]	; (8000f70 <takeWifiSSID+0x25c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	4a32      	ldr	r2, [pc, #200]	; (8000f70 <takeWifiSSID+0x25c>)
 8000ea8:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000eaa:	20fa      	movs	r0, #250	; 0xfa
 8000eac:	f007 f98e 	bl	80081cc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000eb0:	2108      	movs	r1, #8
 8000eb2:	4837      	ldr	r0, [pc, #220]	; (8000f90 <takeWifiSSID+0x27c>)
 8000eb4:	f007 ff5a 	bl	8008d6c <HAL_GPIO_ReadPin>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d172      	bne.n	8000fa4 <takeWifiSSID+0x290>
        	realCharPos--;
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	dc01      	bgt.n	8000ece <takeWifiSSID+0x1ba>
        		realCharPos = 80;
 8000eca:	2350      	movs	r3, #80	; 0x50
 8000ecc:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8000ece:	4b28      	ldr	r3, [pc, #160]	; (8000f70 <takeWifiSSID+0x25c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d15e      	bne.n	8000f94 <takeWifiSSID+0x280>
            	if(page == 1) {
 8000ed6:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <takeWifiSSID+0x260>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d10a      	bne.n	8000ef4 <takeWifiSSID+0x1e0>
            		cursorPosition = 16;
 8000ede:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <takeWifiSSID+0x25c>)
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	601a      	str	r2, [r3, #0]
            		page = 5;
 8000ee4:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <takeWifiSSID+0x260>)
 8000ee6:	2205      	movs	r2, #5
 8000ee8:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8000eea:	2105      	movs	r1, #5
 8000eec:	2002      	movs	r0, #2
 8000eee:	f7ff fbc3 	bl	8000678 <printTemplate>
 8000ef2:	e054      	b.n	8000f9e <takeWifiSSID+0x28a>
            	} else if(page == 2) {
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <takeWifiSSID+0x260>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d10a      	bne.n	8000f12 <takeWifiSSID+0x1fe>
            		cursorPosition = 16;
 8000efc:	4b1c      	ldr	r3, [pc, #112]	; (8000f70 <takeWifiSSID+0x25c>)
 8000efe:	2210      	movs	r2, #16
 8000f00:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <takeWifiSSID+0x260>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000f08:	2101      	movs	r1, #1
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	f7ff fbb4 	bl	8000678 <printTemplate>
 8000f10:	e045      	b.n	8000f9e <takeWifiSSID+0x28a>
            	} else if(page == 3) {
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <takeWifiSSID+0x260>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d10a      	bne.n	8000f30 <takeWifiSSID+0x21c>
            		cursorPosition = 16;
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <takeWifiSSID+0x25c>)
 8000f1c:	2210      	movs	r2, #16
 8000f1e:	601a      	str	r2, [r3, #0]
            		page = 2;
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <takeWifiSSID+0x260>)
 8000f22:	2202      	movs	r2, #2
 8000f24:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8000f26:	2102      	movs	r1, #2
 8000f28:	2002      	movs	r0, #2
 8000f2a:	f7ff fba5 	bl	8000678 <printTemplate>
 8000f2e:	e036      	b.n	8000f9e <takeWifiSSID+0x28a>
            	} else if(page == 4) {
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <takeWifiSSID+0x260>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b04      	cmp	r3, #4
 8000f36:	d10a      	bne.n	8000f4e <takeWifiSSID+0x23a>
            		cursorPosition = 16;
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <takeWifiSSID+0x25c>)
 8000f3a:	2210      	movs	r2, #16
 8000f3c:	601a      	str	r2, [r3, #0]
            		page = 3;
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <takeWifiSSID+0x260>)
 8000f40:	2203      	movs	r2, #3
 8000f42:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8000f44:	2103      	movs	r1, #3
 8000f46:	2002      	movs	r0, #2
 8000f48:	f7ff fb96 	bl	8000678 <printTemplate>
 8000f4c:	e027      	b.n	8000f9e <takeWifiSSID+0x28a>
            	} else if(page == 5) {
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <takeWifiSSID+0x260>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	d123      	bne.n	8000f9e <takeWifiSSID+0x28a>
            		cursorPosition = 16;
 8000f56:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <takeWifiSSID+0x25c>)
 8000f58:	2210      	movs	r2, #16
 8000f5a:	601a      	str	r2, [r3, #0]
            		page = 4;
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <takeWifiSSID+0x260>)
 8000f5e:	2204      	movs	r2, #4
 8000f60:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8000f62:	2104      	movs	r1, #4
 8000f64:	2002      	movs	r0, #2
 8000f66:	f7ff fb87 	bl	8000678 <printTemplate>
 8000f6a:	e018      	b.n	8000f9e <takeWifiSSID+0x28a>
 8000f6c:	20000284 	.word	0x20000284
 8000f70:	20000034 	.word	0x20000034
 8000f74:	20000038 	.word	0x20000038
 8000f78:	40010800 	.word	0x40010800
 8000f7c:	0800bf38 	.word	0x0800bf38
 8000f80:	0800bf4c 	.word	0x0800bf4c
 8000f84:	200000a2 	.word	0x200000a2
 8000f88:	200001e0 	.word	0x200001e0
 8000f8c:	200000fc 	.word	0x200000fc
 8000f90:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8000f94:	4b37      	ldr	r3, [pc, #220]	; (8001074 <takeWifiSSID+0x360>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	4a36      	ldr	r2, [pc, #216]	; (8001074 <takeWifiSSID+0x360>)
 8000f9c:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000f9e:	20fa      	movs	r0, #250	; 0xfa
 8000fa0:	f007 f914 	bl	80081cc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000fa4:	2102      	movs	r1, #2
 8000fa6:	4834      	ldr	r0, [pc, #208]	; (8001078 <takeWifiSSID+0x364>)
 8000fa8:	f007 fee0 	bl	8008d6c <HAL_GPIO_ReadPin>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d11e      	bne.n	8000ff0 <takeWifiSSID+0x2dc>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3b01      	subs	r3, #1
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fcd4 	bl	8000964 <getCharFromCursorPosition>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4a2e      	ldr	r2, [pc, #184]	; (800107c <takeWifiSSID+0x368>)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	460a      	mov	r2, r1
 8000fc8:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	b2d9      	uxtb	r1, r3
 8000fce:	4a2b      	ldr	r2, [pc, #172]	; (800107c <takeWifiSSID+0x368>)
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f7ff fad8 	bl	800058e <lcd_print_char>

            writeLoc++;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
            wifiNameLoc++;
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8000fea:	20fa      	movs	r0, #250	; 0xfa
 8000fec:	f007 f8ee 	bl	80081cc <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	4821      	ldr	r0, [pc, #132]	; (8001078 <takeWifiSSID+0x364>)
 8000ff4:	f007 feba 	bl	8008d6c <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d12e      	bne.n	800105c <takeWifiSSID+0x348>
        	if(strlen(wifiSSID) >= 1) {
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <takeWifiSSID+0x368>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d027      	beq.n	8001056 <takeWifiSSID+0x342>
        		wifiSSID[wifiNameLoc] = '\0';
 8001006:	4a1d      	ldr	r2, [pc, #116]	; (800107c <takeWifiSSID+0x368>)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4413      	add	r3, r2
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	b2db      	uxtb	r3, r3
 8001014:	3306      	adds	r3, #6
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4619      	mov	r1, r3
 800101a:	2001      	movs	r0, #1
 800101c:	f7ff fad8 	bl	80005d0 <lcd_delete_char>
        		HAL_Delay(50);
 8001020:	2032      	movs	r0, #50	; 0x32
 8001022:	f007 f8d3 	bl	80081cc <HAL_Delay>
        		if(writeLoc > 7) {
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	2b07      	cmp	r3, #7
 800102a:	dd03      	ble.n	8001034 <takeWifiSSID+0x320>
        			writeLoc--;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3b01      	subs	r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	e004      	b.n	800103e <takeWifiSSID+0x32a>
        		} else if(writeLoc < 7) {
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b06      	cmp	r3, #6
 8001038:	dc01      	bgt.n	800103e <takeWifiSSID+0x32a>
        			writeLoc = 7;
 800103a:	2307      	movs	r3, #7
 800103c:	60fb      	str	r3, [r7, #12]
        		}

        		if(wifiNameLoc > 0) {
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	2b00      	cmp	r3, #0
 8001042:	dd03      	ble.n	800104c <takeWifiSSID+0x338>
        			wifiNameLoc--;
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	3b01      	subs	r3, #1
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	e004      	b.n	8001056 <takeWifiSSID+0x342>
        		} else if(wifiNameLoc < 0) {
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	2b00      	cmp	r3, #0
 8001050:	da01      	bge.n	8001056 <takeWifiSSID+0x342>
        			wifiNameLoc = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
        		}
        	}

        	HAL_Delay(250);
 8001056:	20fa      	movs	r0, #250	; 0xfa
 8001058:	f007 f8b8 	bl	80081cc <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800105c:	4b05      	ldr	r3, [pc, #20]	; (8001074 <takeWifiSSID+0x360>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	4619      	mov	r1, r3
 8001064:	2002      	movs	r0, #2
 8001066:	f7ff fa5e 	bl	8000526 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800106a:	e672      	b.n	8000d52 <takeWifiSSID+0x3e>
    }
}
 800106c:	bf00      	nop
 800106e:	371c      	adds	r7, #28
 8001070:	46bd      	mov	sp, r7
 8001072:	bd90      	pop	{r4, r7, pc}
 8001074:	20000034 	.word	0x20000034
 8001078:	40010800 	.word	0x40010800
 800107c:	20000284 	.word	0x20000284

08001080 <takeWifiPass>:

void takeWifiPass(int state) {
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b08b      	sub	sp, #44	; 0x2c
 8001084:	af04      	add	r7, sp, #16
 8001086:	6078      	str	r0, [r7, #4]
	mainPASSSection:
    lcd_cursor(1);
 8001088:	2001      	movs	r0, #1
 800108a:	f7ff fac9 	bl	8000620 <lcd_cursor>

    if(state == 0) {
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d104      	bne.n	800109e <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 8001094:	2214      	movs	r2, #20
 8001096:	2100      	movs	r1, #0
 8001098:	488f      	ldr	r0, [pc, #572]	; (80012d8 <takeWifiPass+0x258>)
 800109a:	f00a fea1 	bl	800bde0 <memset>
    }

    int realCharPos = 1;
 800109e:	2301      	movs	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 80010a2:	4b8e      	ldr	r3, [pc, #568]	; (80012dc <takeWifiPass+0x25c>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
    page = 1;
 80010a8:	4b8d      	ldr	r3, [pc, #564]	; (80012e0 <takeWifiPass+0x260>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 80010b2:	2307      	movs	r3, #7
 80010b4:	60fb      	str	r3, [r7, #12]

    printTemplate(3, 1);
 80010b6:	2101      	movs	r1, #1
 80010b8:	2003      	movs	r0, #3
 80010ba:	f7ff fadd 	bl	8000678 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80010be:	2108      	movs	r1, #8
 80010c0:	4888      	ldr	r0, [pc, #544]	; (80012e4 <takeWifiPass+0x264>)
 80010c2:	f007 fe53 	bl	8008d6c <HAL_GPIO_ReadPin>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d139      	bne.n	8001140 <takeWifiPass+0xc0>
            lcd_cursor(0);
 80010cc:	2000      	movs	r0, #0
 80010ce:	f7ff faa7 	bl	8000620 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 80010d2:	4881      	ldr	r0, [pc, #516]	; (80012d8 <takeWifiPass+0x258>)
 80010d4:	f7ff f8a6 	bl	8000224 <strlen>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b14      	cmp	r3, #20
 80010dc:	d910      	bls.n	8001100 <takeWifiPass+0x80>
                lcd_clear();
 80010de:	f7ff fa6d 	bl	80005bc <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 80010e2:	4a81      	ldr	r2, [pc, #516]	; (80012e8 <takeWifiPass+0x268>)
 80010e4:	2101      	movs	r1, #1
 80010e6:	2001      	movs	r0, #1
 80010e8:	f7ff fa3c 	bl	8000564 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 80010ec:	4a7f      	ldr	r2, [pc, #508]	; (80012ec <takeWifiPass+0x26c>)
 80010ee:	2101      	movs	r1, #1
 80010f0:	2002      	movs	r0, #2
 80010f2:	f7ff fa37 	bl	8000564 <lcd_print>
                HAL_Delay(1200);
 80010f6:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80010fa:	f007 f867 	bl	80081cc <HAL_Delay>
                goto mainPASSSection;
 80010fe:	e7c3      	b.n	8001088 <takeWifiPass+0x8>
            }

            memcpy(&eepromData[passStartPos], (uint8_t *)wifiPass, strlen(wifiPass));
 8001100:	4b7b      	ldr	r3, [pc, #492]	; (80012f0 <takeWifiPass+0x270>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	4b7b      	ldr	r3, [pc, #492]	; (80012f4 <takeWifiPass+0x274>)
 8001108:	18d4      	adds	r4, r2, r3
 800110a:	4873      	ldr	r0, [pc, #460]	; (80012d8 <takeWifiPass+0x258>)
 800110c:	f7ff f88a 	bl	8000224 <strlen>
 8001110:	4603      	mov	r3, r0
 8001112:	461a      	mov	r2, r3
 8001114:	4970      	ldr	r1, [pc, #448]	; (80012d8 <takeWifiPass+0x258>)
 8001116:	4620      	mov	r0, r4
 8001118:	f00a fe8e 	bl	800be38 <memcpy>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800111c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001120:	9302      	str	r3, [sp, #8]
 8001122:	236e      	movs	r3, #110	; 0x6e
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	4b73      	ldr	r3, [pc, #460]	; (80012f4 <takeWifiPass+0x274>)
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	236e      	movs	r3, #110	; 0x6e
 800112c:	2200      	movs	r2, #0
 800112e:	21a0      	movs	r1, #160	; 0xa0
 8001130:	4871      	ldr	r0, [pc, #452]	; (80012f8 <takeWifiPass+0x278>)
 8001132:	f008 f8d5 	bl	80092e0 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8001136:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800113a:	f007 f847 	bl	80081cc <HAL_Delay>

            break;
 800113e:	e14b      	b.n	80013d8 <takeWifiPass+0x358>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001140:	2101      	movs	r1, #1
 8001142:	4868      	ldr	r0, [pc, #416]	; (80012e4 <takeWifiPass+0x264>)
 8001144:	f007 fe12 	bl	8008d6c <HAL_GPIO_ReadPin>
 8001148:	4603      	mov	r3, r0
 800114a:	2b01      	cmp	r3, #1
 800114c:	d166      	bne.n	800121c <takeWifiPass+0x19c>
        	realCharPos++;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	3301      	adds	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	2b50      	cmp	r3, #80	; 0x50
 8001158:	dd01      	ble.n	800115e <takeWifiPass+0xde>
        	    realCharPos = 1;
 800115a:	2301      	movs	r3, #1
 800115c:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 800115e:	4b5f      	ldr	r3, [pc, #380]	; (80012dc <takeWifiPass+0x25c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b10      	cmp	r3, #16
 8001164:	d152      	bne.n	800120c <takeWifiPass+0x18c>
            	if(page == 1) {
 8001166:	4b5e      	ldr	r3, [pc, #376]	; (80012e0 <takeWifiPass+0x260>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d10c      	bne.n	8001188 <takeWifiPass+0x108>
            		cursorPosition = 1;
 800116e:	4b5b      	ldr	r3, [pc, #364]	; (80012dc <takeWifiPass+0x25c>)
 8001170:	2201      	movs	r2, #1
 8001172:	601a      	str	r2, [r3, #0]
            		page++;
 8001174:	4b5a      	ldr	r3, [pc, #360]	; (80012e0 <takeWifiPass+0x260>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	4a59      	ldr	r2, [pc, #356]	; (80012e0 <takeWifiPass+0x260>)
 800117c:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 800117e:	2102      	movs	r1, #2
 8001180:	2003      	movs	r0, #3
 8001182:	f7ff fa79 	bl	8000678 <printTemplate>
 8001186:	e046      	b.n	8001216 <takeWifiPass+0x196>
            	} else if(page == 2) {
 8001188:	4b55      	ldr	r3, [pc, #340]	; (80012e0 <takeWifiPass+0x260>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d10c      	bne.n	80011aa <takeWifiPass+0x12a>
            		cursorPosition = 1;
 8001190:	4b52      	ldr	r3, [pc, #328]	; (80012dc <takeWifiPass+0x25c>)
 8001192:	2201      	movs	r2, #1
 8001194:	601a      	str	r2, [r3, #0]
            		page++;
 8001196:	4b52      	ldr	r3, [pc, #328]	; (80012e0 <takeWifiPass+0x260>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	3301      	adds	r3, #1
 800119c:	4a50      	ldr	r2, [pc, #320]	; (80012e0 <takeWifiPass+0x260>)
 800119e:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 80011a0:	2103      	movs	r1, #3
 80011a2:	2003      	movs	r0, #3
 80011a4:	f7ff fa68 	bl	8000678 <printTemplate>
 80011a8:	e035      	b.n	8001216 <takeWifiPass+0x196>
            	} else if(page == 3) {
 80011aa:	4b4d      	ldr	r3, [pc, #308]	; (80012e0 <takeWifiPass+0x260>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d10c      	bne.n	80011cc <takeWifiPass+0x14c>
            		cursorPosition = 1;
 80011b2:	4b4a      	ldr	r3, [pc, #296]	; (80012dc <takeWifiPass+0x25c>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	601a      	str	r2, [r3, #0]
            		page++;
 80011b8:	4b49      	ldr	r3, [pc, #292]	; (80012e0 <takeWifiPass+0x260>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	4a48      	ldr	r2, [pc, #288]	; (80012e0 <takeWifiPass+0x260>)
 80011c0:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 80011c2:	2104      	movs	r1, #4
 80011c4:	2003      	movs	r0, #3
 80011c6:	f7ff fa57 	bl	8000678 <printTemplate>
 80011ca:	e024      	b.n	8001216 <takeWifiPass+0x196>
            	} else if(page == 4) {
 80011cc:	4b44      	ldr	r3, [pc, #272]	; (80012e0 <takeWifiPass+0x260>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b04      	cmp	r3, #4
 80011d2:	d10c      	bne.n	80011ee <takeWifiPass+0x16e>
            		cursorPosition = 1;
 80011d4:	4b41      	ldr	r3, [pc, #260]	; (80012dc <takeWifiPass+0x25c>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	601a      	str	r2, [r3, #0]
            		page++;
 80011da:	4b41      	ldr	r3, [pc, #260]	; (80012e0 <takeWifiPass+0x260>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	4a3f      	ldr	r2, [pc, #252]	; (80012e0 <takeWifiPass+0x260>)
 80011e2:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 80011e4:	2105      	movs	r1, #5
 80011e6:	2003      	movs	r0, #3
 80011e8:	f7ff fa46 	bl	8000678 <printTemplate>
 80011ec:	e013      	b.n	8001216 <takeWifiPass+0x196>
            	} else if(page == 5) {
 80011ee:	4b3c      	ldr	r3, [pc, #240]	; (80012e0 <takeWifiPass+0x260>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b05      	cmp	r3, #5
 80011f4:	d10f      	bne.n	8001216 <takeWifiPass+0x196>
            		cursorPosition = 1;
 80011f6:	4b39      	ldr	r3, [pc, #228]	; (80012dc <takeWifiPass+0x25c>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	601a      	str	r2, [r3, #0]
            		page = 1;
 80011fc:	4b38      	ldr	r3, [pc, #224]	; (80012e0 <takeWifiPass+0x260>)
 80011fe:	2201      	movs	r2, #1
 8001200:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001202:	2101      	movs	r1, #1
 8001204:	2003      	movs	r0, #3
 8001206:	f7ff fa37 	bl	8000678 <printTemplate>
 800120a:	e004      	b.n	8001216 <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition++;
 800120c:	4b33      	ldr	r3, [pc, #204]	; (80012dc <takeWifiPass+0x25c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	4a32      	ldr	r2, [pc, #200]	; (80012dc <takeWifiPass+0x25c>)
 8001214:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001216:	20fa      	movs	r0, #250	; 0xfa
 8001218:	f006 ffd8 	bl	80081cc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800121c:	2108      	movs	r1, #8
 800121e:	4837      	ldr	r0, [pc, #220]	; (80012fc <takeWifiPass+0x27c>)
 8001220:	f007 fda4 	bl	8008d6c <HAL_GPIO_ReadPin>
 8001224:	4603      	mov	r3, r0
 8001226:	2b01      	cmp	r3, #1
 8001228:	d172      	bne.n	8001310 <takeWifiPass+0x290>
        	realCharPos--;
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	3b01      	subs	r3, #1
 800122e:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	2b00      	cmp	r3, #0
 8001234:	dc01      	bgt.n	800123a <takeWifiPass+0x1ba>
        	    realCharPos = 80;
 8001236:	2350      	movs	r3, #80	; 0x50
 8001238:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 800123a:	4b28      	ldr	r3, [pc, #160]	; (80012dc <takeWifiPass+0x25c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d15e      	bne.n	8001300 <takeWifiPass+0x280>
            	if(page == 1) {
 8001242:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <takeWifiPass+0x260>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d10a      	bne.n	8001260 <takeWifiPass+0x1e0>
            		cursorPosition = 16;
 800124a:	4b24      	ldr	r3, [pc, #144]	; (80012dc <takeWifiPass+0x25c>)
 800124c:	2210      	movs	r2, #16
 800124e:	601a      	str	r2, [r3, #0]
            		page = 5;
 8001250:	4b23      	ldr	r3, [pc, #140]	; (80012e0 <takeWifiPass+0x260>)
 8001252:	2205      	movs	r2, #5
 8001254:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 8001256:	2105      	movs	r1, #5
 8001258:	2003      	movs	r0, #3
 800125a:	f7ff fa0d 	bl	8000678 <printTemplate>
 800125e:	e054      	b.n	800130a <takeWifiPass+0x28a>
            	} else if(page == 2) {
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <takeWifiPass+0x260>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d10a      	bne.n	800127e <takeWifiPass+0x1fe>
            		cursorPosition = 16;
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <takeWifiPass+0x25c>)
 800126a:	2210      	movs	r2, #16
 800126c:	601a      	str	r2, [r3, #0]
            		page = 1;
 800126e:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <takeWifiPass+0x260>)
 8001270:	2201      	movs	r2, #1
 8001272:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001274:	2101      	movs	r1, #1
 8001276:	2003      	movs	r0, #3
 8001278:	f7ff f9fe 	bl	8000678 <printTemplate>
 800127c:	e045      	b.n	800130a <takeWifiPass+0x28a>
            	} else if(page == 3) {
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <takeWifiPass+0x260>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b03      	cmp	r3, #3
 8001284:	d10a      	bne.n	800129c <takeWifiPass+0x21c>
            		cursorPosition = 16;
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <takeWifiPass+0x25c>)
 8001288:	2210      	movs	r2, #16
 800128a:	601a      	str	r2, [r3, #0]
            		page = 2;
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <takeWifiPass+0x260>)
 800128e:	2202      	movs	r2, #2
 8001290:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 8001292:	2102      	movs	r1, #2
 8001294:	2003      	movs	r0, #3
 8001296:	f7ff f9ef 	bl	8000678 <printTemplate>
 800129a:	e036      	b.n	800130a <takeWifiPass+0x28a>
            	} else if(page == 4) {
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <takeWifiPass+0x260>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b04      	cmp	r3, #4
 80012a2:	d10a      	bne.n	80012ba <takeWifiPass+0x23a>
            		cursorPosition = 16;
 80012a4:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <takeWifiPass+0x25c>)
 80012a6:	2210      	movs	r2, #16
 80012a8:	601a      	str	r2, [r3, #0]
            		page = 3;
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <takeWifiPass+0x260>)
 80012ac:	2203      	movs	r2, #3
 80012ae:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 80012b0:	2103      	movs	r1, #3
 80012b2:	2003      	movs	r0, #3
 80012b4:	f7ff f9e0 	bl	8000678 <printTemplate>
 80012b8:	e027      	b.n	800130a <takeWifiPass+0x28a>
            	} else if(page == 5) {
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <takeWifiPass+0x260>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b05      	cmp	r3, #5
 80012c0:	d123      	bne.n	800130a <takeWifiPass+0x28a>
            		cursorPosition = 16;
 80012c2:	4b06      	ldr	r3, [pc, #24]	; (80012dc <takeWifiPass+0x25c>)
 80012c4:	2210      	movs	r2, #16
 80012c6:	601a      	str	r2, [r3, #0]
            		page = 4;
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <takeWifiPass+0x260>)
 80012ca:	2204      	movs	r2, #4
 80012cc:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 80012ce:	2104      	movs	r1, #4
 80012d0:	2003      	movs	r0, #3
 80012d2:	f7ff f9d1 	bl	8000678 <printTemplate>
 80012d6:	e018      	b.n	800130a <takeWifiPass+0x28a>
 80012d8:	20000298 	.word	0x20000298
 80012dc:	20000034 	.word	0x20000034
 80012e0:	20000038 	.word	0x20000038
 80012e4:	40010800 	.word	0x40010800
 80012e8:	0800bf38 	.word	0x0800bf38
 80012ec:	0800bf60 	.word	0x0800bf60
 80012f0:	200000a3 	.word	0x200000a3
 80012f4:	200001e0 	.word	0x200001e0
 80012f8:	200000fc 	.word	0x200000fc
 80012fc:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8001300:	4b37      	ldr	r3, [pc, #220]	; (80013e0 <takeWifiPass+0x360>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3b01      	subs	r3, #1
 8001306:	4a36      	ldr	r2, [pc, #216]	; (80013e0 <takeWifiPass+0x360>)
 8001308:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800130a:	20fa      	movs	r0, #250	; 0xfa
 800130c:	f006 ff5e 	bl	80081cc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8001310:	2102      	movs	r1, #2
 8001312:	4834      	ldr	r0, [pc, #208]	; (80013e4 <takeWifiPass+0x364>)
 8001314:	f007 fd2a 	bl	8008d6c <HAL_GPIO_ReadPin>
 8001318:	4603      	mov	r3, r0
 800131a:	2b01      	cmp	r3, #1
 800131c:	d11e      	bne.n	800135c <takeWifiPass+0x2dc>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3b01      	subs	r3, #1
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fb1e 	bl	8000964 <getCharFromCursorPosition>
 8001328:	4603      	mov	r3, r0
 800132a:	4619      	mov	r1, r3
 800132c:	4a2e      	ldr	r2, [pc, #184]	; (80013e8 <takeWifiPass+0x368>)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	4413      	add	r3, r2
 8001332:	460a      	mov	r2, r1
 8001334:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	b2d9      	uxtb	r1, r3
 800133a:	4a2b      	ldr	r2, [pc, #172]	; (80013e8 <takeWifiPass+0x368>)
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4413      	add	r3, r2
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff f922 	bl	800058e <lcd_print_char>

            writeLoc++;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	3301      	adds	r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
            wifiPassLoc++;
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	3301      	adds	r3, #1
 8001354:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8001356:	20fa      	movs	r0, #250	; 0xfa
 8001358:	f006 ff38 	bl	80081cc <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800135c:	2104      	movs	r1, #4
 800135e:	4821      	ldr	r0, [pc, #132]	; (80013e4 <takeWifiPass+0x364>)
 8001360:	f007 fd04 	bl	8008d6c <HAL_GPIO_ReadPin>
 8001364:	4603      	mov	r3, r0
 8001366:	2b01      	cmp	r3, #1
 8001368:	d12e      	bne.n	80013c8 <takeWifiPass+0x348>
            if(strlen(wifiPass) >= 1) {
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <takeWifiPass+0x368>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d027      	beq.n	80013c2 <takeWifiPass+0x342>
            	wifiPass[wifiPassLoc] = '\0';
 8001372:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <takeWifiPass+0x368>)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4413      	add	r3, r2
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	3306      	adds	r3, #6
 8001382:	b2db      	uxtb	r3, r3
 8001384:	4619      	mov	r1, r3
 8001386:	2001      	movs	r0, #1
 8001388:	f7ff f922 	bl	80005d0 <lcd_delete_char>
            	HAL_Delay(50);
 800138c:	2032      	movs	r0, #50	; 0x32
 800138e:	f006 ff1d 	bl	80081cc <HAL_Delay>

            	if(writeLoc > 7) {
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2b07      	cmp	r3, #7
 8001396:	dd03      	ble.n	80013a0 <takeWifiPass+0x320>
            		writeLoc--;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3b01      	subs	r3, #1
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	e004      	b.n	80013aa <takeWifiPass+0x32a>
            	} else if(writeLoc < 7) {
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	dc01      	bgt.n	80013aa <takeWifiPass+0x32a>
            		writeLoc = 7;
 80013a6:	2307      	movs	r3, #7
 80013a8:	60fb      	str	r3, [r7, #12]
            	}

            	if(wifiPassLoc > 0) {
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	dd03      	ble.n	80013b8 <takeWifiPass+0x338>
            		wifiPassLoc--;
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	e004      	b.n	80013c2 <takeWifiPass+0x342>
            	} else if(wifiPassLoc < 0) {
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	da01      	bge.n	80013c2 <takeWifiPass+0x342>
            		wifiPassLoc = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
            	}
            }

            HAL_Delay(250);
 80013c2:	20fa      	movs	r0, #250	; 0xfa
 80013c4:	f006 ff02 	bl	80081cc <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <takeWifiPass+0x360>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	4619      	mov	r1, r3
 80013d0:	2002      	movs	r0, #2
 80013d2:	f7ff f8a8 	bl	8000526 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80013d6:	e672      	b.n	80010be <takeWifiPass+0x3e>
    }
}
 80013d8:	bf00      	nop
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd90      	pop	{r4, r7, pc}
 80013e0:	20000034 	.word	0x20000034
 80013e4:	40010800 	.word	0x40010800
 80013e8:	20000298 	.word	0x20000298

080013ec <checkSlideVal>:

int checkSlideVal(int state) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d111      	bne.n	800141e <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80013fa:	2101      	movs	r1, #1
 80013fc:	4813      	ldr	r0, [pc, #76]	; (800144c <checkSlideVal+0x60>)
 80013fe:	f007 fcb5 	bl	8008d6c <HAL_GPIO_ReadPin>
 8001402:	4603      	mov	r3, r0
 8001404:	2b01      	cmp	r3, #1
 8001406:	d101      	bne.n	800140c <checkSlideVal+0x20>
			return 34;
 8001408:	2322      	movs	r3, #34	; 0x22
 800140a:	e01b      	b.n	8001444 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800140c:	2108      	movs	r1, #8
 800140e:	4810      	ldr	r0, [pc, #64]	; (8001450 <checkSlideVal+0x64>)
 8001410:	f007 fcac 	bl	8008d6c <HAL_GPIO_ReadPin>
 8001414:	4603      	mov	r3, r0
 8001416:	2b01      	cmp	r3, #1
 8001418:	d113      	bne.n	8001442 <checkSlideVal+0x56>
			return 32;
 800141a:	2320      	movs	r3, #32
 800141c:	e012      	b.n	8001444 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800141e:	2101      	movs	r1, #1
 8001420:	480a      	ldr	r0, [pc, #40]	; (800144c <checkSlideVal+0x60>)
 8001422:	f007 fca3 	bl	8008d6c <HAL_GPIO_ReadPin>
 8001426:	4603      	mov	r3, r0
 8001428:	2b01      	cmp	r3, #1
 800142a:	d101      	bne.n	8001430 <checkSlideVal+0x44>
			return 35;
 800142c:	2323      	movs	r3, #35	; 0x23
 800142e:	e009      	b.n	8001444 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001430:	2108      	movs	r1, #8
 8001432:	4807      	ldr	r0, [pc, #28]	; (8001450 <checkSlideVal+0x64>)
 8001434:	f007 fc9a 	bl	8008d6c <HAL_GPIO_ReadPin>
 8001438:	4603      	mov	r3, r0
 800143a:	2b01      	cmp	r3, #1
 800143c:	d101      	bne.n	8001442 <checkSlideVal+0x56>
			return 33;
 800143e:	2321      	movs	r3, #33	; 0x21
 8001440:	e000      	b.n	8001444 <checkSlideVal+0x58>
		}
	}
	return 0;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40010800 	.word	0x40010800
 8001450:	40011000 	.word	0x40011000

08001454 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
 8001460:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f7fe fede 	bl	8000224 <strlen>
 8001468:	4603      	mov	r3, r0
 800146a:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 800146c:	2301      	movs	r3, #1
 800146e:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8001470:	e08a      	b.n	8001588 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 8001472:	6838      	ldr	r0, [r7, #0]
 8001474:	f7ff ffba 	bl	80013ec <checkSlideVal>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	dd07      	ble.n	800148e <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 800147e:	6838      	ldr	r0, [r7, #0]
 8001480:	f7ff ffb4 	bl	80013ec <checkSlideVal>
 8001484:	4603      	mov	r3, r0
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b44      	ldr	r3, [pc, #272]	; (800159c <slideText+0x148>)
 800148a:	701a      	strb	r2, [r3, #0]
			break;
 800148c:	e081      	b.n	8001592 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
 8001492:	e075      	b.n	8001580 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001494:	6838      	ldr	r0, [r7, #0]
 8001496:	f7ff ffa9 	bl	80013ec <checkSlideVal>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	dd09      	ble.n	80014b4 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 80014a0:	6838      	ldr	r0, [r7, #0]
 80014a2:	f7ff ffa3 	bl	80013ec <checkSlideVal>
 80014a6:	4603      	mov	r3, r0
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b3c      	ldr	r3, [pc, #240]	; (800159c <slideText+0x148>)
 80014ac:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80014b2:	e069      	b.n	8001588 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	6a3b      	ldr	r3, [r7, #32]
 80014b8:	4413      	add	r3, r2
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	e029      	b.n	8001512 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 80014be:	6838      	ldr	r0, [r7, #0]
 80014c0:	f7ff ff94 	bl	80013ec <checkSlideVal>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	dd0b      	ble.n	80014e2 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 80014ca:	6838      	ldr	r0, [r7, #0]
 80014cc:	f7ff ff8e 	bl	80013ec <checkSlideVal>
 80014d0:	4603      	mov	r3, r0
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	4b31      	ldr	r3, [pc, #196]	; (800159c <slideText+0x148>)
 80014d6:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80014e0:	e01d      	b.n	800151e <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	b2d8      	uxtb	r0, r3
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	b2d9      	uxtb	r1, r3
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4413      	add	r3, r2
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	f7ff f844 	bl	800058e <lcd_print_char>
				HAL_Delay(30);
 8001506:	201e      	movs	r0, #30
 8001508:	f006 fe60 	bl	80081cc <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	3301      	adds	r3, #1
 8001510:	61fb      	str	r3, [r7, #28]
 8001512:	7dfa      	ldrb	r2, [r7, #23]
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4413      	add	r3, r2
 8001518:	69fa      	ldr	r2, [r7, #28]
 800151a:	429a      	cmp	r2, r3
 800151c:	dbcf      	blt.n	80014be <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800151e:	7dfb      	ldrb	r3, [r7, #23]
 8001520:	3b01      	subs	r3, #1
 8001522:	61bb      	str	r3, [r7, #24]
 8001524:	e023      	b.n	800156e <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 8001526:	6838      	ldr	r0, [r7, #0]
 8001528:	f7ff ff60 	bl	80013ec <checkSlideVal>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	dd0b      	ble.n	800154a <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 8001532:	6838      	ldr	r0, [r7, #0]
 8001534:	f7ff ff5a 	bl	80013ec <checkSlideVal>
 8001538:	4603      	mov	r3, r0
 800153a:	b2da      	uxtb	r2, r3
 800153c:	4b17      	ldr	r3, [pc, #92]	; (800159c <slideText+0x148>)
 800153e:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001540:	7dfb      	ldrb	r3, [r7, #23]
 8001542:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001548:	e017      	b.n	800157a <slideText+0x126>
				}
			     if(j >= startPos) {
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	429a      	cmp	r2, r3
 8001550:	db0a      	blt.n	8001568 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	69ba      	ldr	r2, [r7, #24]
 8001558:	b2d1      	uxtb	r1, r2
 800155a:	2220      	movs	r2, #32
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff f816 	bl	800058e <lcd_print_char>
			    	 HAL_Delay(30);
 8001562:	201e      	movs	r0, #30
 8001564:	f006 fe32 	bl	80081cc <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	3b01      	subs	r3, #1
 800156c:	61bb      	str	r3, [r7, #24]
 800156e:	7dfa      	ldrb	r2, [r7, #23]
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	429a      	cmp	r2, r3
 8001578:	dad5      	bge.n	8001526 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 800157a:	6a3b      	ldr	r3, [r7, #32]
 800157c:	3301      	adds	r3, #1
 800157e:	623b      	str	r3, [r7, #32]
 8001580:	7dfb      	ldrb	r3, [r7, #23]
 8001582:	6a3a      	ldr	r2, [r7, #32]
 8001584:	429a      	cmp	r2, r3
 8001586:	db85      	blt.n	8001494 <slideText+0x40>
	while(mainLoopVal == 1) {
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	2b01      	cmp	r3, #1
 800158c:	f43f af71 	beq.w	8001472 <slideText+0x1e>
			     }
			}
		}
	}
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	; 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200002b0 	.word	0x200002b0

080015a0 <menu>:

void menu() {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80015a4:	2101      	movs	r1, #1
 80015a6:	488f      	ldr	r0, [pc, #572]	; (80017e4 <menu+0x244>)
 80015a8:	f007 fbe0 	bl	8008d6c <HAL_GPIO_ReadPin>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	f040 808e 	bne.w	80016d0 <menu+0x130>
 80015b4:	4b8c      	ldr	r3, [pc, #560]	; (80017e8 <menu+0x248>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	f083 0301 	eor.w	r3, r3, #1
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 8086 	beq.w	80016d0 <menu+0x130>
		menuSayac = menuSayac+1;
 80015c4:	4b89      	ldr	r3, [pc, #548]	; (80017ec <menu+0x24c>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	3301      	adds	r3, #1
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	4b87      	ldr	r3, [pc, #540]	; (80017ec <menu+0x24c>)
 80015ce:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80015d0:	4b86      	ldr	r3, [pc, #536]	; (80017ec <menu+0x24c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b24      	cmp	r3, #36	; 0x24
 80015d6:	d102      	bne.n	80015de <menu+0x3e>
			menuSayac = 1;
 80015d8:	4b84      	ldr	r3, [pc, #528]	; (80017ec <menu+0x24c>)
 80015da:	2201      	movs	r2, #1
 80015dc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80015de:	4b83      	ldr	r3, [pc, #524]	; (80017ec <menu+0x24c>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b12      	cmp	r3, #18
 80015e4:	d106      	bne.n	80015f4 <menu+0x54>
 80015e6:	4b82      	ldr	r3, [pc, #520]	; (80017f0 <menu+0x250>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d102      	bne.n	80015f4 <menu+0x54>
			menuSayac = 21;
 80015ee:	4b7f      	ldr	r3, [pc, #508]	; (80017ec <menu+0x24c>)
 80015f0:	2215      	movs	r2, #21
 80015f2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80015f4:	4b7d      	ldr	r3, [pc, #500]	; (80017ec <menu+0x24c>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d106      	bne.n	800160a <menu+0x6a>
 80015fc:	4b7d      	ldr	r3, [pc, #500]	; (80017f4 <menu+0x254>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d102      	bne.n	800160a <menu+0x6a>
			menuSayac = 16;
 8001604:	4b79      	ldr	r3, [pc, #484]	; (80017ec <menu+0x24c>)
 8001606:	2210      	movs	r2, #16
 8001608:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800160a:	4b78      	ldr	r3, [pc, #480]	; (80017ec <menu+0x24c>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b0d      	cmp	r3, #13
 8001610:	d106      	bne.n	8001620 <menu+0x80>
 8001612:	4b78      	ldr	r3, [pc, #480]	; (80017f4 <menu+0x254>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d102      	bne.n	8001620 <menu+0x80>
			menuSayac = 16;
 800161a:	4b74      	ldr	r3, [pc, #464]	; (80017ec <menu+0x24c>)
 800161c:	2210      	movs	r2, #16
 800161e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001620:	4b72      	ldr	r3, [pc, #456]	; (80017ec <menu+0x24c>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b09      	cmp	r3, #9
 8001626:	d106      	bne.n	8001636 <menu+0x96>
 8001628:	4b72      	ldr	r3, [pc, #456]	; (80017f4 <menu+0x254>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b02      	cmp	r3, #2
 800162e:	d102      	bne.n	8001636 <menu+0x96>
			menuSayac = 13;
 8001630:	4b6e      	ldr	r3, [pc, #440]	; (80017ec <menu+0x24c>)
 8001632:	220d      	movs	r2, #13
 8001634:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001636:	4b6d      	ldr	r3, [pc, #436]	; (80017ec <menu+0x24c>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b0a      	cmp	r3, #10
 800163c:	d10a      	bne.n	8001654 <menu+0xb4>
 800163e:	4b6e      	ldr	r3, [pc, #440]	; (80017f8 <menu+0x258>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d003      	beq.n	800164e <menu+0xae>
 8001646:	4b6c      	ldr	r3, [pc, #432]	; (80017f8 <menu+0x258>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d102      	bne.n	8001654 <menu+0xb4>
			menuSayac = 11;
 800164e:	4b67      	ldr	r3, [pc, #412]	; (80017ec <menu+0x24c>)
 8001650:	220b      	movs	r2, #11
 8001652:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001654:	4b65      	ldr	r3, [pc, #404]	; (80017ec <menu+0x24c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b0c      	cmp	r3, #12
 800165a:	d10e      	bne.n	800167a <menu+0xda>
 800165c:	4b67      	ldr	r3, [pc, #412]	; (80017fc <menu+0x25c>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d003      	beq.n	800166c <menu+0xcc>
 8001664:	4b65      	ldr	r3, [pc, #404]	; (80017fc <menu+0x25c>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d106      	bne.n	800167a <menu+0xda>
 800166c:	4b61      	ldr	r3, [pc, #388]	; (80017f4 <menu+0x254>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d102      	bne.n	800167a <menu+0xda>
			menuSayac = 16;
 8001674:	4b5d      	ldr	r3, [pc, #372]	; (80017ec <menu+0x24c>)
 8001676:	2210      	movs	r2, #16
 8001678:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800167a:	4b5c      	ldr	r3, [pc, #368]	; (80017ec <menu+0x24c>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b0c      	cmp	r3, #12
 8001680:	d10e      	bne.n	80016a0 <menu+0x100>
 8001682:	4b5e      	ldr	r3, [pc, #376]	; (80017fc <menu+0x25c>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d003      	beq.n	8001692 <menu+0xf2>
 800168a:	4b5c      	ldr	r3, [pc, #368]	; (80017fc <menu+0x25c>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b02      	cmp	r3, #2
 8001690:	d106      	bne.n	80016a0 <menu+0x100>
 8001692:	4b58      	ldr	r3, [pc, #352]	; (80017f4 <menu+0x254>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d102      	bne.n	80016a0 <menu+0x100>
			menuSayac = 13;
 800169a:	4b54      	ldr	r3, [pc, #336]	; (80017ec <menu+0x24c>)
 800169c:	220d      	movs	r2, #13
 800169e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80016a0:	4b52      	ldr	r3, [pc, #328]	; (80017ec <menu+0x24c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b0f      	cmp	r3, #15
 80016a6:	d106      	bne.n	80016b6 <menu+0x116>
 80016a8:	4b55      	ldr	r3, [pc, #340]	; (8001800 <menu+0x260>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d102      	bne.n	80016b6 <menu+0x116>
			menuSayac = 16;
 80016b0:	4b4e      	ldr	r3, [pc, #312]	; (80017ec <menu+0x24c>)
 80016b2:	2210      	movs	r2, #16
 80016b4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80016b6:	4b4d      	ldr	r3, [pc, #308]	; (80017ec <menu+0x24c>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b18      	cmp	r3, #24
 80016bc:	d106      	bne.n	80016cc <menu+0x12c>
 80016be:	4b4c      	ldr	r3, [pc, #304]	; (80017f0 <menu+0x250>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d102      	bne.n	80016cc <menu+0x12c>
			menuSayac = 26;
 80016c6:	4b49      	ldr	r3, [pc, #292]	; (80017ec <menu+0x24c>)
 80016c8:	221a      	movs	r2, #26
 80016ca:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80016cc:	f003 feee 	bl	80054ac <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80016d0:	2108      	movs	r1, #8
 80016d2:	484c      	ldr	r0, [pc, #304]	; (8001804 <menu+0x264>)
 80016d4:	f007 fb4a 	bl	8008d6c <HAL_GPIO_ReadPin>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d175      	bne.n	80017ca <menu+0x22a>
 80016de:	4b42      	ldr	r3, [pc, #264]	; (80017e8 <menu+0x248>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	f083 0301 	eor.w	r3, r3, #1
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d06e      	beq.n	80017ca <menu+0x22a>
		if (menuSayac <= 1) {
 80016ec:	4b3f      	ldr	r3, [pc, #252]	; (80017ec <menu+0x24c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d802      	bhi.n	80016fa <menu+0x15a>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80016f4:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <menu+0x24c>)
 80016f6:	2224      	movs	r2, #36	; 0x24
 80016f8:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80016fa:	4b3c      	ldr	r3, [pc, #240]	; (80017ec <menu+0x24c>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	3b01      	subs	r3, #1
 8001700:	b2da      	uxtb	r2, r3
 8001702:	4b3a      	ldr	r3, [pc, #232]	; (80017ec <menu+0x24c>)
 8001704:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001706:	4b39      	ldr	r3, [pc, #228]	; (80017ec <menu+0x24c>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b14      	cmp	r3, #20
 800170c:	d106      	bne.n	800171c <menu+0x17c>
 800170e:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <menu+0x250>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <menu+0x17c>
			menuSayac = 17;
 8001716:	4b35      	ldr	r3, [pc, #212]	; (80017ec <menu+0x24c>)
 8001718:	2211      	movs	r2, #17
 800171a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800171c:	4b33      	ldr	r3, [pc, #204]	; (80017ec <menu+0x24c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b0f      	cmp	r3, #15
 8001722:	d106      	bne.n	8001732 <menu+0x192>
 8001724:	4b33      	ldr	r3, [pc, #204]	; (80017f4 <menu+0x254>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d102      	bne.n	8001732 <menu+0x192>
			menuSayac = 7;
 800172c:	4b2f      	ldr	r3, [pc, #188]	; (80017ec <menu+0x24c>)
 800172e:	2207      	movs	r2, #7
 8001730:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001732:	4b2e      	ldr	r3, [pc, #184]	; (80017ec <menu+0x24c>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b0f      	cmp	r3, #15
 8001738:	d106      	bne.n	8001748 <menu+0x1a8>
 800173a:	4b2e      	ldr	r3, [pc, #184]	; (80017f4 <menu+0x254>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d102      	bne.n	8001748 <menu+0x1a8>
			menuSayac = 12;
 8001742:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <menu+0x24c>)
 8001744:	220c      	movs	r2, #12
 8001746:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001748:	4b28      	ldr	r3, [pc, #160]	; (80017ec <menu+0x24c>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b0c      	cmp	r3, #12
 800174e:	d106      	bne.n	800175e <menu+0x1be>
 8001750:	4b28      	ldr	r3, [pc, #160]	; (80017f4 <menu+0x254>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d102      	bne.n	800175e <menu+0x1be>
			menuSayac = 8;
 8001758:	4b24      	ldr	r3, [pc, #144]	; (80017ec <menu+0x24c>)
 800175a:	2208      	movs	r2, #8
 800175c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <menu+0x24c>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b0a      	cmp	r3, #10
 8001764:	d10a      	bne.n	800177c <menu+0x1dc>
 8001766:	4b24      	ldr	r3, [pc, #144]	; (80017f8 <menu+0x258>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d003      	beq.n	8001776 <menu+0x1d6>
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <menu+0x258>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d102      	bne.n	800177c <menu+0x1dc>
			menuSayac = 9;
 8001776:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <menu+0x24c>)
 8001778:	2209      	movs	r2, #9
 800177a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800177c:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <menu+0x24c>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b0c      	cmp	r3, #12
 8001782:	d10a      	bne.n	800179a <menu+0x1fa>
 8001784:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <menu+0x25c>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d003      	beq.n	8001794 <menu+0x1f4>
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <menu+0x25c>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d102      	bne.n	800179a <menu+0x1fa>
			menuSayac = 11;
 8001794:	4b15      	ldr	r3, [pc, #84]	; (80017ec <menu+0x24c>)
 8001796:	220b      	movs	r2, #11
 8001798:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800179a:	4b14      	ldr	r3, [pc, #80]	; (80017ec <menu+0x24c>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b0f      	cmp	r3, #15
 80017a0:	d106      	bne.n	80017b0 <menu+0x210>
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <menu+0x260>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d102      	bne.n	80017b0 <menu+0x210>
			menuSayac = 14;
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <menu+0x24c>)
 80017ac:	220e      	movs	r2, #14
 80017ae:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80017b0:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <menu+0x24c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b19      	cmp	r3, #25
 80017b6:	d106      	bne.n	80017c6 <menu+0x226>
 80017b8:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <menu+0x250>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <menu+0x226>
			menuSayac = 23;
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <menu+0x24c>)
 80017c2:	2217      	movs	r2, #23
 80017c4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80017c6:	f003 fe71 	bl	80054ac <bekle>
	}

	if (menuSayac == 0) {
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <menu+0x24c>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d134      	bne.n	800183c <menu+0x29c>
		if(dilSecim == 0) {
 80017d2:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <menu+0x268>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d122      	bne.n	8001820 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80017da:	4a0c      	ldr	r2, [pc, #48]	; (800180c <menu+0x26c>)
 80017dc:	2101      	movs	r1, #1
 80017de:	2001      	movs	r0, #1
 80017e0:	e016      	b.n	8001810 <menu+0x270>
 80017e2:	bf00      	nop
 80017e4:	40010800 	.word	0x40010800
 80017e8:	200002df 	.word	0x200002df
 80017ec:	200002b0 	.word	0x200002b0
 80017f0:	200002bf 	.word	0x200002bf
 80017f4:	200002b8 	.word	0x200002b8
 80017f8:	200002b9 	.word	0x200002b9
 80017fc:	200002ba 	.word	0x200002ba
 8001800:	200002bb 	.word	0x200002bb
 8001804:	40011000 	.word	0x40011000
 8001808:	200002d1 	.word	0x200002d1
 800180c:	0800bf74 	.word	0x0800bf74
 8001810:	f7fe fea8 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001814:	4a94      	ldr	r2, [pc, #592]	; (8001a68 <menu+0x4c8>)
 8001816:	2101      	movs	r1, #1
 8001818:	2002      	movs	r0, #2
 800181a:	f7fe fea3 	bl	8000564 <lcd_print>
 800181e:	e00d      	b.n	800183c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001820:	4b92      	ldr	r3, [pc, #584]	; (8001a6c <menu+0x4cc>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d109      	bne.n	800183c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001828:	4a91      	ldr	r2, [pc, #580]	; (8001a70 <menu+0x4d0>)
 800182a:	2101      	movs	r1, #1
 800182c:	2001      	movs	r0, #1
 800182e:	f7fe fe99 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001832:	4a90      	ldr	r2, [pc, #576]	; (8001a74 <menu+0x4d4>)
 8001834:	2101      	movs	r1, #1
 8001836:	2002      	movs	r0, #2
 8001838:	f7fe fe94 	bl	8000564 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 800183c:	4b8e      	ldr	r3, [pc, #568]	; (8001a78 <menu+0x4d8>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b01      	cmp	r3, #1
 8001842:	f040 82b5 	bne.w	8001db0 <menu+0x810>
		if(dilSecim == 0) {
 8001846:	4b89      	ldr	r3, [pc, #548]	; (8001a6c <menu+0x4cc>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d105      	bne.n	800185a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800184e:	4a8b      	ldr	r2, [pc, #556]	; (8001a7c <menu+0x4dc>)
 8001850:	2101      	movs	r1, #1
 8001852:	2001      	movs	r0, #1
 8001854:	f7fe fe86 	bl	8000564 <lcd_print>
 8001858:	e008      	b.n	800186c <menu+0x2cc>
		} else if(dilSecim == 1) {
 800185a:	4b84      	ldr	r3, [pc, #528]	; (8001a6c <menu+0x4cc>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d104      	bne.n	800186c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001862:	4a87      	ldr	r2, [pc, #540]	; (8001a80 <menu+0x4e0>)
 8001864:	2101      	movs	r1, #1
 8001866:	2001      	movs	r0, #1
 8001868:	f7fe fe7c 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 800186c:	4b85      	ldr	r3, [pc, #532]	; (8001a84 <menu+0x4e4>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d123      	bne.n	80018bc <menu+0x31c>
			if(dilSecim == 0) {
 8001874:	4b7d      	ldr	r3, [pc, #500]	; (8001a6c <menu+0x4cc>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d105      	bne.n	8001888 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 800187c:	4a82      	ldr	r2, [pc, #520]	; (8001a88 <menu+0x4e8>)
 800187e:	2101      	movs	r1, #1
 8001880:	2002      	movs	r0, #2
 8001882:	f7fe fe6f 	bl	8000564 <lcd_print>
 8001886:	e008      	b.n	800189a <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001888:	4b78      	ldr	r3, [pc, #480]	; (8001a6c <menu+0x4cc>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d104      	bne.n	800189a <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001890:	4a7e      	ldr	r2, [pc, #504]	; (8001a8c <menu+0x4ec>)
 8001892:	2101      	movs	r1, #1
 8001894:	2002      	movs	r0, #2
 8001896:	f7fe fe65 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800189a:	4a7d      	ldr	r2, [pc, #500]	; (8001a90 <menu+0x4f0>)
 800189c:	210f      	movs	r1, #15
 800189e:	2002      	movs	r0, #2
 80018a0:	f7fe fe60 	bl	8000564 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80018a4:	4b7b      	ldr	r3, [pc, #492]	; (8001a94 <menu+0x4f4>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	220a      	movs	r2, #10
 80018aa:	497b      	ldr	r1, [pc, #492]	; (8001a98 <menu+0x4f8>)
 80018ac:	4618      	mov	r0, r3
 80018ae:	f00a fa53 	bl	800bd58 <itoa>
			lcd_print(2, 14, snum);
 80018b2:	4a79      	ldr	r2, [pc, #484]	; (8001a98 <menu+0x4f8>)
 80018b4:	210e      	movs	r1, #14
 80018b6:	2002      	movs	r0, #2
 80018b8:	f7fe fe54 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80018bc:	4b71      	ldr	r3, [pc, #452]	; (8001a84 <menu+0x4e4>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d123      	bne.n	800190c <menu+0x36c>
			if(dilSecim == 0) {
 80018c4:	4b69      	ldr	r3, [pc, #420]	; (8001a6c <menu+0x4cc>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d105      	bne.n	80018d8 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80018cc:	4a73      	ldr	r2, [pc, #460]	; (8001a9c <menu+0x4fc>)
 80018ce:	2101      	movs	r1, #1
 80018d0:	2002      	movs	r0, #2
 80018d2:	f7fe fe47 	bl	8000564 <lcd_print>
 80018d6:	e008      	b.n	80018ea <menu+0x34a>
			} else if(dilSecim == 1) {
 80018d8:	4b64      	ldr	r3, [pc, #400]	; (8001a6c <menu+0x4cc>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d104      	bne.n	80018ea <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 80018e0:	4a6f      	ldr	r2, [pc, #444]	; (8001aa0 <menu+0x500>)
 80018e2:	2101      	movs	r1, #1
 80018e4:	2002      	movs	r0, #2
 80018e6:	f7fe fe3d 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018ea:	4a6e      	ldr	r2, [pc, #440]	; (8001aa4 <menu+0x504>)
 80018ec:	210f      	movs	r1, #15
 80018ee:	2002      	movs	r0, #2
 80018f0:	f7fe fe38 	bl	8000564 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80018f4:	4b6c      	ldr	r3, [pc, #432]	; (8001aa8 <menu+0x508>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	220a      	movs	r2, #10
 80018fa:	4967      	ldr	r1, [pc, #412]	; (8001a98 <menu+0x4f8>)
 80018fc:	4618      	mov	r0, r3
 80018fe:	f00a fa2b 	bl	800bd58 <itoa>
			lcd_print(2, 14, snum);
 8001902:	4a65      	ldr	r2, [pc, #404]	; (8001a98 <menu+0x4f8>)
 8001904:	210e      	movs	r1, #14
 8001906:	2002      	movs	r0, #2
 8001908:	f7fe fe2c 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800190c:	4b5d      	ldr	r3, [pc, #372]	; (8001a84 <menu+0x4e4>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d123      	bne.n	800195c <menu+0x3bc>
			if(dilSecim == 0) {
 8001914:	4b55      	ldr	r3, [pc, #340]	; (8001a6c <menu+0x4cc>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d105      	bne.n	8001928 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 800191c:	4a63      	ldr	r2, [pc, #396]	; (8001aac <menu+0x50c>)
 800191e:	2101      	movs	r1, #1
 8001920:	2002      	movs	r0, #2
 8001922:	f7fe fe1f 	bl	8000564 <lcd_print>
 8001926:	e008      	b.n	800193a <menu+0x39a>
			} else if(dilSecim == 1) {
 8001928:	4b50      	ldr	r3, [pc, #320]	; (8001a6c <menu+0x4cc>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d104      	bne.n	800193a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001930:	4a5f      	ldr	r2, [pc, #380]	; (8001ab0 <menu+0x510>)
 8001932:	2101      	movs	r1, #1
 8001934:	2002      	movs	r0, #2
 8001936:	f7fe fe15 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800193a:	4a5a      	ldr	r2, [pc, #360]	; (8001aa4 <menu+0x504>)
 800193c:	210f      	movs	r1, #15
 800193e:	2002      	movs	r0, #2
 8001940:	f7fe fe10 	bl	8000564 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001944:	4b5b      	ldr	r3, [pc, #364]	; (8001ab4 <menu+0x514>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	220a      	movs	r2, #10
 800194a:	4953      	ldr	r1, [pc, #332]	; (8001a98 <menu+0x4f8>)
 800194c:	4618      	mov	r0, r3
 800194e:	f00a fa03 	bl	800bd58 <itoa>
			lcd_print(2, 14, snum);
 8001952:	4a51      	ldr	r2, [pc, #324]	; (8001a98 <menu+0x4f8>)
 8001954:	210e      	movs	r1, #14
 8001956:	2002      	movs	r0, #2
 8001958:	f7fe fe04 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800195c:	4b49      	ldr	r3, [pc, #292]	; (8001a84 <menu+0x4e4>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b03      	cmp	r3, #3
 8001962:	d123      	bne.n	80019ac <menu+0x40c>
			if(dilSecim == 0) {
 8001964:	4b41      	ldr	r3, [pc, #260]	; (8001a6c <menu+0x4cc>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d105      	bne.n	8001978 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800196c:	4a52      	ldr	r2, [pc, #328]	; (8001ab8 <menu+0x518>)
 800196e:	2101      	movs	r1, #1
 8001970:	2002      	movs	r0, #2
 8001972:	f7fe fdf7 	bl	8000564 <lcd_print>
 8001976:	e008      	b.n	800198a <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001978:	4b3c      	ldr	r3, [pc, #240]	; (8001a6c <menu+0x4cc>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d104      	bne.n	800198a <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001980:	4a4e      	ldr	r2, [pc, #312]	; (8001abc <menu+0x51c>)
 8001982:	2101      	movs	r1, #1
 8001984:	2002      	movs	r0, #2
 8001986:	f7fe fded 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800198a:	4a46      	ldr	r2, [pc, #280]	; (8001aa4 <menu+0x504>)
 800198c:	210f      	movs	r1, #15
 800198e:	2002      	movs	r0, #2
 8001990:	f7fe fde8 	bl	8000564 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001994:	4b4a      	ldr	r3, [pc, #296]	; (8001ac0 <menu+0x520>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	220a      	movs	r2, #10
 800199a:	493f      	ldr	r1, [pc, #252]	; (8001a98 <menu+0x4f8>)
 800199c:	4618      	mov	r0, r3
 800199e:	f00a f9db 	bl	800bd58 <itoa>
			lcd_print(2, 14, snum);
 80019a2:	4a3d      	ldr	r2, [pc, #244]	; (8001a98 <menu+0x4f8>)
 80019a4:	210e      	movs	r1, #14
 80019a6:	2002      	movs	r0, #2
 80019a8:	f7fe fddc 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80019ac:	4b35      	ldr	r3, [pc, #212]	; (8001a84 <menu+0x4e4>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d123      	bne.n	80019fc <menu+0x45c>
			if(dilSecim == 0) {
 80019b4:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <menu+0x4cc>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d105      	bne.n	80019c8 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80019bc:	4a41      	ldr	r2, [pc, #260]	; (8001ac4 <menu+0x524>)
 80019be:	2101      	movs	r1, #1
 80019c0:	2002      	movs	r0, #2
 80019c2:	f7fe fdcf 	bl	8000564 <lcd_print>
 80019c6:	e008      	b.n	80019da <menu+0x43a>
			} else if(dilSecim == 1) {
 80019c8:	4b28      	ldr	r3, [pc, #160]	; (8001a6c <menu+0x4cc>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d104      	bne.n	80019da <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80019d0:	4a3d      	ldr	r2, [pc, #244]	; (8001ac8 <menu+0x528>)
 80019d2:	2101      	movs	r1, #1
 80019d4:	2002      	movs	r0, #2
 80019d6:	f7fe fdc5 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019da:	4a32      	ldr	r2, [pc, #200]	; (8001aa4 <menu+0x504>)
 80019dc:	210f      	movs	r1, #15
 80019de:	2002      	movs	r0, #2
 80019e0:	f7fe fdc0 	bl	8000564 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80019e4:	4b39      	ldr	r3, [pc, #228]	; (8001acc <menu+0x52c>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	220a      	movs	r2, #10
 80019ea:	492b      	ldr	r1, [pc, #172]	; (8001a98 <menu+0x4f8>)
 80019ec:	4618      	mov	r0, r3
 80019ee:	f00a f9b3 	bl	800bd58 <itoa>
			lcd_print(2, 14, snum);
 80019f2:	4a29      	ldr	r2, [pc, #164]	; (8001a98 <menu+0x4f8>)
 80019f4:	210e      	movs	r1, #14
 80019f6:	2002      	movs	r0, #2
 80019f8:	f7fe fdb4 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80019fc:	4b21      	ldr	r3, [pc, #132]	; (8001a84 <menu+0x4e4>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b05      	cmp	r3, #5
 8001a02:	d123      	bne.n	8001a4c <menu+0x4ac>
			if(dilSecim == 0) {
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <menu+0x4cc>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d105      	bne.n	8001a18 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001a0c:	4a30      	ldr	r2, [pc, #192]	; (8001ad0 <menu+0x530>)
 8001a0e:	2101      	movs	r1, #1
 8001a10:	2002      	movs	r0, #2
 8001a12:	f7fe fda7 	bl	8000564 <lcd_print>
 8001a16:	e008      	b.n	8001a2a <menu+0x48a>
			} else if(dilSecim == 1) {
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <menu+0x4cc>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d104      	bne.n	8001a2a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001a20:	4a2c      	ldr	r2, [pc, #176]	; (8001ad4 <menu+0x534>)
 8001a22:	2101      	movs	r1, #1
 8001a24:	2002      	movs	r0, #2
 8001a26:	f7fe fd9d 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a2a:	4a1e      	ldr	r2, [pc, #120]	; (8001aa4 <menu+0x504>)
 8001a2c:	210f      	movs	r1, #15
 8001a2e:	2002      	movs	r0, #2
 8001a30:	f7fe fd98 	bl	8000564 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001a34:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <menu+0x538>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	220a      	movs	r2, #10
 8001a3a:	4917      	ldr	r1, [pc, #92]	; (8001a98 <menu+0x4f8>)
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f00a f98b 	bl	800bd58 <itoa>
			lcd_print(2, 14, snum);
 8001a42:	4a15      	ldr	r2, [pc, #84]	; (8001a98 <menu+0x4f8>)
 8001a44:	210e      	movs	r1, #14
 8001a46:	2002      	movs	r0, #2
 8001a48:	f7fe fd8c 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <menu+0x4e4>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b06      	cmp	r3, #6
 8001a52:	d15f      	bne.n	8001b14 <menu+0x574>
			if(dilSecim == 0) {
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <menu+0x4cc>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d141      	bne.n	8001ae0 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001a5c:	4a1f      	ldr	r2, [pc, #124]	; (8001adc <menu+0x53c>)
 8001a5e:	2101      	movs	r1, #1
 8001a60:	2002      	movs	r0, #2
 8001a62:	f7fe fd7f 	bl	8000564 <lcd_print>
 8001a66:	e044      	b.n	8001af2 <menu+0x552>
 8001a68:	0800bf88 	.word	0x0800bf88
 8001a6c:	200002d1 	.word	0x200002d1
 8001a70:	0800bf9c 	.word	0x0800bf9c
 8001a74:	0800bfb0 	.word	0x0800bfb0
 8001a78:	200002b0 	.word	0x200002b0
 8001a7c:	0800bfc4 	.word	0x0800bfc4
 8001a80:	0800bfd8 	.word	0x0800bfd8
 8001a84:	200002b2 	.word	0x200002b2
 8001a88:	0800bfec 	.word	0x0800bfec
 8001a8c:	0800bffc 	.word	0x0800bffc
 8001a90:	0800c00c 	.word	0x0800c00c
 8001a94:	200002d2 	.word	0x200002d2
 8001a98:	20000250 	.word	0x20000250
 8001a9c:	0800c010 	.word	0x0800c010
 8001aa0:	0800c020 	.word	0x0800c020
 8001aa4:	0800c030 	.word	0x0800c030
 8001aa8:	200002d3 	.word	0x200002d3
 8001aac:	0800c034 	.word	0x0800c034
 8001ab0:	0800c044 	.word	0x0800c044
 8001ab4:	200002d4 	.word	0x200002d4
 8001ab8:	0800c054 	.word	0x0800c054
 8001abc:	0800c064 	.word	0x0800c064
 8001ac0:	200002d5 	.word	0x200002d5
 8001ac4:	0800c074 	.word	0x0800c074
 8001ac8:	0800c084 	.word	0x0800c084
 8001acc:	200002d6 	.word	0x200002d6
 8001ad0:	0800c094 	.word	0x0800c094
 8001ad4:	0800c0a4 	.word	0x0800c0a4
 8001ad8:	200002d7 	.word	0x200002d7
 8001adc:	0800c0b4 	.word	0x0800c0b4
			} else if(dilSecim == 1) {
 8001ae0:	4b4f      	ldr	r3, [pc, #316]	; (8001c20 <menu+0x680>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d104      	bne.n	8001af2 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001ae8:	4a4e      	ldr	r2, [pc, #312]	; (8001c24 <menu+0x684>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	2002      	movs	r0, #2
 8001aee:	f7fe fd39 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001af2:	4a4d      	ldr	r2, [pc, #308]	; (8001c28 <menu+0x688>)
 8001af4:	210f      	movs	r1, #15
 8001af6:	2002      	movs	r0, #2
 8001af8:	f7fe fd34 	bl	8000564 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001afc:	4b4b      	ldr	r3, [pc, #300]	; (8001c2c <menu+0x68c>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	220a      	movs	r2, #10
 8001b02:	494b      	ldr	r1, [pc, #300]	; (8001c30 <menu+0x690>)
 8001b04:	4618      	mov	r0, r3
 8001b06:	f00a f927 	bl	800bd58 <itoa>
			lcd_print(2, 14, snum);
 8001b0a:	4a49      	ldr	r2, [pc, #292]	; (8001c30 <menu+0x690>)
 8001b0c:	210e      	movs	r1, #14
 8001b0e:	2002      	movs	r0, #2
 8001b10:	f7fe fd28 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001b14:	4b47      	ldr	r3, [pc, #284]	; (8001c34 <menu+0x694>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b07      	cmp	r3, #7
 8001b1a:	d123      	bne.n	8001b64 <menu+0x5c4>
			if(dilSecim == 0) {
 8001b1c:	4b40      	ldr	r3, [pc, #256]	; (8001c20 <menu+0x680>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d105      	bne.n	8001b30 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001b24:	4a44      	ldr	r2, [pc, #272]	; (8001c38 <menu+0x698>)
 8001b26:	2101      	movs	r1, #1
 8001b28:	2002      	movs	r0, #2
 8001b2a:	f7fe fd1b 	bl	8000564 <lcd_print>
 8001b2e:	e008      	b.n	8001b42 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001b30:	4b3b      	ldr	r3, [pc, #236]	; (8001c20 <menu+0x680>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d104      	bne.n	8001b42 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001b38:	4a40      	ldr	r2, [pc, #256]	; (8001c3c <menu+0x69c>)
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	2002      	movs	r0, #2
 8001b3e:	f7fe fd11 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b42:	4a39      	ldr	r2, [pc, #228]	; (8001c28 <menu+0x688>)
 8001b44:	210f      	movs	r1, #15
 8001b46:	2002      	movs	r0, #2
 8001b48:	f7fe fd0c 	bl	8000564 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001b4c:	4b3c      	ldr	r3, [pc, #240]	; (8001c40 <menu+0x6a0>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	220a      	movs	r2, #10
 8001b52:	4937      	ldr	r1, [pc, #220]	; (8001c30 <menu+0x690>)
 8001b54:	4618      	mov	r0, r3
 8001b56:	f00a f8ff 	bl	800bd58 <itoa>
			lcd_print(2, 14, snum);
 8001b5a:	4a35      	ldr	r2, [pc, #212]	; (8001c30 <menu+0x690>)
 8001b5c:	210e      	movs	r1, #14
 8001b5e:	2002      	movs	r0, #2
 8001b60:	f7fe fd00 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001b64:	4b33      	ldr	r3, [pc, #204]	; (8001c34 <menu+0x694>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d123      	bne.n	8001bb4 <menu+0x614>
			if(dilSecim == 0) {
 8001b6c:	4b2c      	ldr	r3, [pc, #176]	; (8001c20 <menu+0x680>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d105      	bne.n	8001b80 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001b74:	4a33      	ldr	r2, [pc, #204]	; (8001c44 <menu+0x6a4>)
 8001b76:	2101      	movs	r1, #1
 8001b78:	2002      	movs	r0, #2
 8001b7a:	f7fe fcf3 	bl	8000564 <lcd_print>
 8001b7e:	e008      	b.n	8001b92 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001b80:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <menu+0x680>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d104      	bne.n	8001b92 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001b88:	4a2f      	ldr	r2, [pc, #188]	; (8001c48 <menu+0x6a8>)
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	2002      	movs	r0, #2
 8001b8e:	f7fe fce9 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001b92:	4a25      	ldr	r2, [pc, #148]	; (8001c28 <menu+0x688>)
 8001b94:	210f      	movs	r1, #15
 8001b96:	2002      	movs	r0, #2
 8001b98:	f7fe fce4 	bl	8000564 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001b9c:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <menu+0x6ac>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	220a      	movs	r2, #10
 8001ba2:	4923      	ldr	r1, [pc, #140]	; (8001c30 <menu+0x690>)
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f00a f8d7 	bl	800bd58 <itoa>
			lcd_print(2, 14, snum);
 8001baa:	4a21      	ldr	r2, [pc, #132]	; (8001c30 <menu+0x690>)
 8001bac:	210e      	movs	r1, #14
 8001bae:	2002      	movs	r0, #2
 8001bb0:	f7fe fcd8 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001bb4:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <menu+0x694>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b09      	cmp	r3, #9
 8001bba:	d123      	bne.n	8001c04 <menu+0x664>
			if(dilSecim == 0) {
 8001bbc:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <menu+0x680>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d105      	bne.n	8001bd0 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001bc4:	4a22      	ldr	r2, [pc, #136]	; (8001c50 <menu+0x6b0>)
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	2002      	movs	r0, #2
 8001bca:	f7fe fccb 	bl	8000564 <lcd_print>
 8001bce:	e008      	b.n	8001be2 <menu+0x642>
			} else if(dilSecim == 1) {
 8001bd0:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <menu+0x680>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d104      	bne.n	8001be2 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001bd8:	4a1e      	ldr	r2, [pc, #120]	; (8001c54 <menu+0x6b4>)
 8001bda:	2101      	movs	r1, #1
 8001bdc:	2002      	movs	r0, #2
 8001bde:	f7fe fcc1 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001be2:	4a1d      	ldr	r2, [pc, #116]	; (8001c58 <menu+0x6b8>)
 8001be4:	2110      	movs	r1, #16
 8001be6:	2002      	movs	r0, #2
 8001be8:	f7fe fcbc 	bl	8000564 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001bec:	4b1b      	ldr	r3, [pc, #108]	; (8001c5c <menu+0x6bc>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	220a      	movs	r2, #10
 8001bf2:	490f      	ldr	r1, [pc, #60]	; (8001c30 <menu+0x690>)
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f00a f8af 	bl	800bd58 <itoa>
			lcd_print(2, 15, snum);
 8001bfa:	4a0d      	ldr	r2, [pc, #52]	; (8001c30 <menu+0x690>)
 8001bfc:	210f      	movs	r1, #15
 8001bfe:	2002      	movs	r0, #2
 8001c00:	f7fe fcb0 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <menu+0x694>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b0a      	cmp	r3, #10
 8001c0a:	d134      	bne.n	8001c76 <menu+0x6d6>
			if(dilSecim == 0) {
 8001c0c:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <menu+0x680>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d127      	bne.n	8001c64 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001c14:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <menu+0x6c0>)
 8001c16:	2101      	movs	r1, #1
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f7fe fca3 	bl	8000564 <lcd_print>
 8001c1e:	e02a      	b.n	8001c76 <menu+0x6d6>
 8001c20:	200002d1 	.word	0x200002d1
 8001c24:	0800c0c4 	.word	0x0800c0c4
 8001c28:	0800c030 	.word	0x0800c030
 8001c2c:	200002d8 	.word	0x200002d8
 8001c30:	20000250 	.word	0x20000250
 8001c34:	200002b2 	.word	0x200002b2
 8001c38:	0800c0d4 	.word	0x0800c0d4
 8001c3c:	0800c0e4 	.word	0x0800c0e4
 8001c40:	200002d9 	.word	0x200002d9
 8001c44:	0800c0f4 	.word	0x0800c0f4
 8001c48:	0800c104 	.word	0x0800c104
 8001c4c:	200002da 	.word	0x200002da
 8001c50:	0800c114 	.word	0x0800c114
 8001c54:	0800c124 	.word	0x0800c124
 8001c58:	0800c134 	.word	0x0800c134
 8001c5c:	200002db 	.word	0x200002db
 8001c60:	0800c138 	.word	0x0800c138
			} else if(dilSecim == 1) {
 8001c64:	4b82      	ldr	r3, [pc, #520]	; (8001e70 <menu+0x8d0>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d104      	bne.n	8001c76 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001c6c:	4a81      	ldr	r2, [pc, #516]	; (8001e74 <menu+0x8d4>)
 8001c6e:	2101      	movs	r1, #1
 8001c70:	2002      	movs	r0, #2
 8001c72:	f7fe fc77 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c76:	2102      	movs	r1, #2
 8001c78:	487f      	ldr	r0, [pc, #508]	; (8001e78 <menu+0x8d8>)
 8001c7a:	f007 f877 	bl	8008d6c <HAL_GPIO_ReadPin>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d119      	bne.n	8001cb8 <menu+0x718>
 8001c84:	4b7d      	ldr	r3, [pc, #500]	; (8001e7c <menu+0x8dc>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	f083 0301 	eor.w	r3, r3, #1
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d012      	beq.n	8001cb8 <menu+0x718>
 8001c92:	4b7b      	ldr	r3, [pc, #492]	; (8001e80 <menu+0x8e0>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10e      	bne.n	8001cb8 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001c9a:	4b7a      	ldr	r3, [pc, #488]	; (8001e84 <menu+0x8e4>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4b78      	ldr	r3, [pc, #480]	; (8001e84 <menu+0x8e4>)
 8001ca4:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001ca6:	4b77      	ldr	r3, [pc, #476]	; (8001e84 <menu+0x8e4>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b0a      	cmp	r3, #10
 8001cac:	d902      	bls.n	8001cb4 <menu+0x714>
				hataGostermeSirasi = 0;
 8001cae:	4b75      	ldr	r3, [pc, #468]	; (8001e84 <menu+0x8e4>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cb4:	f003 fbfa 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cb8:	2104      	movs	r1, #4
 8001cba:	486f      	ldr	r0, [pc, #444]	; (8001e78 <menu+0x8d8>)
 8001cbc:	f007 f856 	bl	8008d6c <HAL_GPIO_ReadPin>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d119      	bne.n	8001cfa <menu+0x75a>
 8001cc6:	4b6d      	ldr	r3, [pc, #436]	; (8001e7c <menu+0x8dc>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	f083 0301 	eor.w	r3, r3, #1
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d012      	beq.n	8001cfa <menu+0x75a>
 8001cd4:	4b6a      	ldr	r3, [pc, #424]	; (8001e80 <menu+0x8e0>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10e      	bne.n	8001cfa <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001cdc:	4b69      	ldr	r3, [pc, #420]	; (8001e84 <menu+0x8e4>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	4b67      	ldr	r3, [pc, #412]	; (8001e84 <menu+0x8e4>)
 8001ce6:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001ce8:	4b66      	ldr	r3, [pc, #408]	; (8001e84 <menu+0x8e4>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b0b      	cmp	r3, #11
 8001cee:	d902      	bls.n	8001cf6 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001cf0:	4b64      	ldr	r3, [pc, #400]	; (8001e84 <menu+0x8e4>)
 8001cf2:	220a      	movs	r2, #10
 8001cf4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001cf6:	f003 fbd9 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001cfa:	2108      	movs	r1, #8
 8001cfc:	485e      	ldr	r0, [pc, #376]	; (8001e78 <menu+0x8d8>)
 8001cfe:	f007 f835 	bl	8008d6c <HAL_GPIO_ReadPin>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d153      	bne.n	8001db0 <menu+0x810>
 8001d08:	4b5c      	ldr	r3, [pc, #368]	; (8001e7c <menu+0x8dc>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	f083 0301 	eor.w	r3, r3, #1
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d04c      	beq.n	8001db0 <menu+0x810>
 8001d16:	4b5b      	ldr	r3, [pc, #364]	; (8001e84 <menu+0x8e4>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b0a      	cmp	r3, #10
 8001d1c:	d148      	bne.n	8001db0 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001d1e:	4b5a      	ldr	r3, [pc, #360]	; (8001e88 <menu+0x8e8>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
 8001d24:	4b59      	ldr	r3, [pc, #356]	; (8001e8c <menu+0x8ec>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001d2c:	4b58      	ldr	r3, [pc, #352]	; (8001e90 <menu+0x8f0>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
 8001d32:	4b56      	ldr	r3, [pc, #344]	; (8001e8c <menu+0x8ec>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001d3a:	4b56      	ldr	r3, [pc, #344]	; (8001e94 <menu+0x8f4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
 8001d40:	4b52      	ldr	r3, [pc, #328]	; (8001e8c <menu+0x8ec>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001d48:	4b53      	ldr	r3, [pc, #332]	; (8001e98 <menu+0x8f8>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
 8001d4e:	4b4f      	ldr	r3, [pc, #316]	; (8001e8c <menu+0x8ec>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001d56:	4b51      	ldr	r3, [pc, #324]	; (8001e9c <menu+0x8fc>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
 8001d5c:	4b4b      	ldr	r3, [pc, #300]	; (8001e8c <menu+0x8ec>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001d64:	4b4e      	ldr	r3, [pc, #312]	; (8001ea0 <menu+0x900>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
 8001d6a:	4b48      	ldr	r3, [pc, #288]	; (8001e8c <menu+0x8ec>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001d72:	4b4c      	ldr	r3, [pc, #304]	; (8001ea4 <menu+0x904>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	4b44      	ldr	r3, [pc, #272]	; (8001e8c <menu+0x8ec>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001d80:	4b49      	ldr	r3, [pc, #292]	; (8001ea8 <menu+0x908>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	701a      	strb	r2, [r3, #0]
 8001d86:	4b41      	ldr	r3, [pc, #260]	; (8001e8c <menu+0x8ec>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001d8e:	4b47      	ldr	r3, [pc, #284]	; (8001eac <menu+0x90c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	4b3d      	ldr	r3, [pc, #244]	; (8001e8c <menu+0x8ec>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001d9c:	4b44      	ldr	r3, [pc, #272]	; (8001eb0 <menu+0x910>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	701a      	strb	r2, [r3, #0]
 8001da2:	4b3a      	ldr	r3, [pc, #232]	; (8001e8c <menu+0x8ec>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001daa:	4b42      	ldr	r3, [pc, #264]	; (8001eb4 <menu+0x914>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001db0:	4b41      	ldr	r3, [pc, #260]	; (8001eb8 <menu+0x918>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	f040 80fc 	bne.w	8001fb2 <menu+0xa12>
		if(dilSecim == 0) {
 8001dba:	4b2d      	ldr	r3, [pc, #180]	; (8001e70 <menu+0x8d0>)
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d105      	bne.n	8001dce <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001dc2:	4a3e      	ldr	r2, [pc, #248]	; (8001ebc <menu+0x91c>)
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	2001      	movs	r0, #1
 8001dc8:	f7fe fbcc 	bl	8000564 <lcd_print>
 8001dcc:	e008      	b.n	8001de0 <menu+0x840>
		} else if(dilSecim == 1) {
 8001dce:	4b28      	ldr	r3, [pc, #160]	; (8001e70 <menu+0x8d0>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d104      	bne.n	8001de0 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001dd6:	4a3a      	ldr	r2, [pc, #232]	; (8001ec0 <menu+0x920>)
 8001dd8:	2101      	movs	r1, #1
 8001dda:	2001      	movs	r0, #1
 8001ddc:	f7fe fbc2 	bl	8000564 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001de0:	4b27      	ldr	r3, [pc, #156]	; (8001e80 <menu+0x8e0>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d003      	beq.n	8001df0 <menu+0x850>
 8001de8:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <menu+0x8e0>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d112      	bne.n	8001e16 <menu+0x876>
			if(dilSecim == 0) {
 8001df0:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <menu+0x8d0>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d105      	bne.n	8001e04 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001df8:	4a32      	ldr	r2, [pc, #200]	; (8001ec4 <menu+0x924>)
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	2002      	movs	r0, #2
 8001dfe:	f7fe fbb1 	bl	8000564 <lcd_print>
 8001e02:	e008      	b.n	8001e16 <menu+0x876>
			} else if(dilSecim == 1) {
 8001e04:	4b1a      	ldr	r3, [pc, #104]	; (8001e70 <menu+0x8d0>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d104      	bne.n	8001e16 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001e0c:	4a2e      	ldr	r2, [pc, #184]	; (8001ec8 <menu+0x928>)
 8001e0e:	2101      	movs	r1, #1
 8001e10:	2002      	movs	r0, #2
 8001e12:	f7fe fba7 	bl	8000564 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001e16:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <menu+0x92c>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d116      	bne.n	8001e4c <menu+0x8ac>
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <menu+0x8e0>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d112      	bne.n	8001e4c <menu+0x8ac>
			if(dilSecim == 0) {
 8001e26:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <menu+0x8d0>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d105      	bne.n	8001e3a <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001e2e:	4a28      	ldr	r2, [pc, #160]	; (8001ed0 <menu+0x930>)
 8001e30:	2101      	movs	r1, #1
 8001e32:	2002      	movs	r0, #2
 8001e34:	f7fe fb96 	bl	8000564 <lcd_print>
 8001e38:	e008      	b.n	8001e4c <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <menu+0x8d0>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d104      	bne.n	8001e4c <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001e42:	4a24      	ldr	r2, [pc, #144]	; (8001ed4 <menu+0x934>)
 8001e44:	2101      	movs	r1, #1
 8001e46:	2002      	movs	r0, #2
 8001e48:	f7fe fb8c 	bl	8000564 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <menu+0x92c>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d14c      	bne.n	8001eee <menu+0x94e>
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <menu+0x8e0>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d148      	bne.n	8001eee <menu+0x94e>
			if(dilSecim == 0) {
 8001e5c:	4b04      	ldr	r3, [pc, #16]	; (8001e70 <menu+0x8d0>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d13b      	bne.n	8001edc <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001e64:	4a1c      	ldr	r2, [pc, #112]	; (8001ed8 <menu+0x938>)
 8001e66:	2101      	movs	r1, #1
 8001e68:	2002      	movs	r0, #2
 8001e6a:	f7fe fb7b 	bl	8000564 <lcd_print>
 8001e6e:	e03e      	b.n	8001eee <menu+0x94e>
 8001e70:	200002d1 	.word	0x200002d1
 8001e74:	0800c14c 	.word	0x0800c14c
 8001e78:	40010800 	.word	0x40010800
 8001e7c:	200002df 	.word	0x200002df
 8001e80:	200002bf 	.word	0x200002bf
 8001e84:	200002b2 	.word	0x200002b2
 8001e88:	200002d2 	.word	0x200002d2
 8001e8c:	200001e0 	.word	0x200001e0
 8001e90:	200002d3 	.word	0x200002d3
 8001e94:	200002d4 	.word	0x200002d4
 8001e98:	200002d5 	.word	0x200002d5
 8001e9c:	200002d6 	.word	0x200002d6
 8001ea0:	200002d7 	.word	0x200002d7
 8001ea4:	200002d8 	.word	0x200002d8
 8001ea8:	200002d9 	.word	0x200002d9
 8001eac:	200002da 	.word	0x200002da
 8001eb0:	200002db 	.word	0x200002db
 8001eb4:	200002dc 	.word	0x200002dc
 8001eb8:	200002b0 	.word	0x200002b0
 8001ebc:	0800c160 	.word	0x0800c160
 8001ec0:	0800c174 	.word	0x0800c174
 8001ec4:	0800c188 	.word	0x0800c188
 8001ec8:	0800c19c 	.word	0x0800c19c
 8001ecc:	200002b1 	.word	0x200002b1
 8001ed0:	0800c1b0 	.word	0x0800c1b0
 8001ed4:	0800c1c0 	.word	0x0800c1c0
 8001ed8:	0800c1d0 	.word	0x0800c1d0
			} else if(dilSecim == 1) {
 8001edc:	4b98      	ldr	r3, [pc, #608]	; (8002140 <menu+0xba0>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d104      	bne.n	8001eee <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001ee4:	4a97      	ldr	r2, [pc, #604]	; (8002144 <menu+0xba4>)
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	2002      	movs	r0, #2
 8001eea:	f7fe fb3b 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001eee:	2102      	movs	r1, #2
 8001ef0:	4895      	ldr	r0, [pc, #596]	; (8002148 <menu+0xba8>)
 8001ef2:	f006 ff3b 	bl	8008d6c <HAL_GPIO_ReadPin>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d119      	bne.n	8001f30 <menu+0x990>
 8001efc:	4b93      	ldr	r3, [pc, #588]	; (800214c <menu+0xbac>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	f083 0301 	eor.w	r3, r3, #1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d012      	beq.n	8001f30 <menu+0x990>
 8001f0a:	4b91      	ldr	r3, [pc, #580]	; (8002150 <menu+0xbb0>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d10e      	bne.n	8001f30 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001f12:	4b90      	ldr	r3, [pc, #576]	; (8002154 <menu+0xbb4>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	3301      	adds	r3, #1
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4b8e      	ldr	r3, [pc, #568]	; (8002154 <menu+0xbb4>)
 8001f1c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001f1e:	4b8d      	ldr	r3, [pc, #564]	; (8002154 <menu+0xbb4>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d902      	bls.n	8001f2c <menu+0x98c>
				calismaSekli = 0;
 8001f26:	4b8b      	ldr	r3, [pc, #556]	; (8002154 <menu+0xbb4>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f2c:	f003 fabe 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001f30:	2104      	movs	r1, #4
 8001f32:	4885      	ldr	r0, [pc, #532]	; (8002148 <menu+0xba8>)
 8001f34:	f006 ff1a 	bl	8008d6c <HAL_GPIO_ReadPin>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d119      	bne.n	8001f72 <menu+0x9d2>
 8001f3e:	4b83      	ldr	r3, [pc, #524]	; (800214c <menu+0xbac>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	f083 0301 	eor.w	r3, r3, #1
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d012      	beq.n	8001f72 <menu+0x9d2>
 8001f4c:	4b80      	ldr	r3, [pc, #512]	; (8002150 <menu+0xbb0>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10e      	bne.n	8001f72 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001f54:	4b7f      	ldr	r3, [pc, #508]	; (8002154 <menu+0xbb4>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	4b7d      	ldr	r3, [pc, #500]	; (8002154 <menu+0xbb4>)
 8001f5e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001f60:	4b7c      	ldr	r3, [pc, #496]	; (8002154 <menu+0xbb4>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <menu+0x9ce>
	    		calismaSekli = 1;
 8001f68:	4b7a      	ldr	r3, [pc, #488]	; (8002154 <menu+0xbb4>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001f6e:	f003 fa9d 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f72:	2108      	movs	r1, #8
 8001f74:	4874      	ldr	r0, [pc, #464]	; (8002148 <menu+0xba8>)
 8001f76:	f006 fef9 	bl	8008d6c <HAL_GPIO_ReadPin>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d118      	bne.n	8001fb2 <menu+0xa12>
 8001f80:	4b72      	ldr	r3, [pc, #456]	; (800214c <menu+0xbac>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	f083 0301 	eor.w	r3, r3, #1
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d011      	beq.n	8001fb2 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001f8e:	4b71      	ldr	r3, [pc, #452]	; (8002154 <menu+0xbb4>)
 8001f90:	781a      	ldrb	r2, [r3, #0]
 8001f92:	4b71      	ldr	r3, [pc, #452]	; (8002158 <menu+0xbb8>)
 8001f94:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001f96:	4b6f      	ldr	r3, [pc, #444]	; (8002154 <menu+0xbb4>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d106      	bne.n	8001fac <menu+0xa0c>
				altLimit = 1;
 8001f9e:	4b6f      	ldr	r3, [pc, #444]	; (800215c <menu+0xbbc>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001fa4:	4b6d      	ldr	r3, [pc, #436]	; (800215c <menu+0xbbc>)
 8001fa6:	781a      	ldrb	r2, [r3, #0]
 8001fa8:	4b6b      	ldr	r3, [pc, #428]	; (8002158 <menu+0xbb8>)
 8001faa:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001fac:	4b6c      	ldr	r3, [pc, #432]	; (8002160 <menu+0xbc0>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001fb2:	4b6c      	ldr	r3, [pc, #432]	; (8002164 <menu+0xbc4>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	f040 8083 	bne.w	80020c2 <menu+0xb22>
		if(dilSecim == 0) {
 8001fbc:	4b60      	ldr	r3, [pc, #384]	; (8002140 <menu+0xba0>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d105      	bne.n	8001fd0 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001fc4:	4a68      	ldr	r2, [pc, #416]	; (8002168 <menu+0xbc8>)
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f7fe facb 	bl	8000564 <lcd_print>
 8001fce:	e008      	b.n	8001fe2 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001fd0:	4b5b      	ldr	r3, [pc, #364]	; (8002140 <menu+0xba0>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d104      	bne.n	8001fe2 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001fd8:	4a64      	ldr	r2, [pc, #400]	; (800216c <menu+0xbcc>)
 8001fda:	2101      	movs	r1, #1
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f7fe fac1 	bl	8000564 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001fe2:	4b63      	ldr	r3, [pc, #396]	; (8002170 <menu+0xbd0>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d113      	bne.n	8002012 <menu+0xa72>
			if(dilSecim == 0) {
 8001fea:	4b55      	ldr	r3, [pc, #340]	; (8002140 <menu+0xba0>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d105      	bne.n	8001ffe <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001ff2:	4a60      	ldr	r2, [pc, #384]	; (8002174 <menu+0xbd4>)
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	2002      	movs	r0, #2
 8001ff8:	f7fe fab4 	bl	8000564 <lcd_print>
 8001ffc:	e012      	b.n	8002024 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001ffe:	4b50      	ldr	r3, [pc, #320]	; (8002140 <menu+0xba0>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d10e      	bne.n	8002024 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8002006:	4a5c      	ldr	r2, [pc, #368]	; (8002178 <menu+0xbd8>)
 8002008:	2101      	movs	r1, #1
 800200a:	2002      	movs	r0, #2
 800200c:	f7fe faaa 	bl	8000564 <lcd_print>
 8002010:	e008      	b.n	8002024 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8002012:	4b57      	ldr	r3, [pc, #348]	; (8002170 <menu+0xbd0>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d104      	bne.n	8002024 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 800201a:	4a58      	ldr	r2, [pc, #352]	; (800217c <menu+0xbdc>)
 800201c:	2101      	movs	r1, #1
 800201e:	2002      	movs	r0, #2
 8002020:	f7fe faa0 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002024:	2102      	movs	r1, #2
 8002026:	4848      	ldr	r0, [pc, #288]	; (8002148 <menu+0xba8>)
 8002028:	f006 fea0 	bl	8008d6c <HAL_GPIO_ReadPin>
 800202c:	4603      	mov	r3, r0
 800202e:	2b01      	cmp	r3, #1
 8002030:	d115      	bne.n	800205e <menu+0xabe>
 8002032:	4b46      	ldr	r3, [pc, #280]	; (800214c <menu+0xbac>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	f083 0301 	eor.w	r3, r3, #1
 800203a:	b2db      	uxtb	r3, r3
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00e      	beq.n	800205e <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8002040:	4b4b      	ldr	r3, [pc, #300]	; (8002170 <menu+0xbd0>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	3301      	adds	r3, #1
 8002046:	b2da      	uxtb	r2, r3
 8002048:	4b49      	ldr	r3, [pc, #292]	; (8002170 <menu+0xbd0>)
 800204a:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 800204c:	4b48      	ldr	r3, [pc, #288]	; (8002170 <menu+0xbd0>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d902      	bls.n	800205a <menu+0xaba>
				emniyetCercevesi = 0;
 8002054:	4b46      	ldr	r3, [pc, #280]	; (8002170 <menu+0xbd0>)
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800205a:	f003 fa27 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800205e:	2104      	movs	r1, #4
 8002060:	4839      	ldr	r0, [pc, #228]	; (8002148 <menu+0xba8>)
 8002062:	f006 fe83 	bl	8008d6c <HAL_GPIO_ReadPin>
 8002066:	4603      	mov	r3, r0
 8002068:	2b01      	cmp	r3, #1
 800206a:	d115      	bne.n	8002098 <menu+0xaf8>
 800206c:	4b37      	ldr	r3, [pc, #220]	; (800214c <menu+0xbac>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	f083 0301 	eor.w	r3, r3, #1
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00e      	beq.n	8002098 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 800207a:	4b3d      	ldr	r3, [pc, #244]	; (8002170 <menu+0xbd0>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	3b01      	subs	r3, #1
 8002080:	b2da      	uxtb	r2, r3
 8002082:	4b3b      	ldr	r3, [pc, #236]	; (8002170 <menu+0xbd0>)
 8002084:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8002086:	4b3a      	ldr	r3, [pc, #232]	; (8002170 <menu+0xbd0>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 800208e:	4b38      	ldr	r3, [pc, #224]	; (8002170 <menu+0xbd0>)
 8002090:	2201      	movs	r2, #1
 8002092:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002094:	f003 fa0a 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8002098:	2108      	movs	r1, #8
 800209a:	482b      	ldr	r0, [pc, #172]	; (8002148 <menu+0xba8>)
 800209c:	f006 fe66 	bl	8008d6c <HAL_GPIO_ReadPin>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d10d      	bne.n	80020c2 <menu+0xb22>
 80020a6:	4b29      	ldr	r3, [pc, #164]	; (800214c <menu+0xbac>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	f083 0301 	eor.w	r3, r3, #1
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d006      	beq.n	80020c2 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 80020b4:	4b2e      	ldr	r3, [pc, #184]	; (8002170 <menu+0xbd0>)
 80020b6:	781a      	ldrb	r2, [r3, #0]
 80020b8:	4b27      	ldr	r3, [pc, #156]	; (8002158 <menu+0xbb8>)
 80020ba:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 80020bc:	4b28      	ldr	r3, [pc, #160]	; (8002160 <menu+0xbc0>)
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 80020c2:	4b28      	ldr	r3, [pc, #160]	; (8002164 <menu+0xbc4>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	f040 80ba 	bne.w	8002240 <menu+0xca0>
		if(dilSecim == 0) {
 80020cc:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <menu+0xba0>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d105      	bne.n	80020e0 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 80020d4:	4a2a      	ldr	r2, [pc, #168]	; (8002180 <menu+0xbe0>)
 80020d6:	2101      	movs	r1, #1
 80020d8:	2001      	movs	r0, #1
 80020da:	f7fe fa43 	bl	8000564 <lcd_print>
 80020de:	e008      	b.n	80020f2 <menu+0xb52>
		} else if(dilSecim == 1) {
 80020e0:	4b17      	ldr	r3, [pc, #92]	; (8002140 <menu+0xba0>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d104      	bne.n	80020f2 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 80020e8:	4a26      	ldr	r2, [pc, #152]	; (8002184 <menu+0xbe4>)
 80020ea:	2101      	movs	r1, #1
 80020ec:	2001      	movs	r0, #1
 80020ee:	f7fe fa39 	bl	8000564 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 80020f2:	4b25      	ldr	r3, [pc, #148]	; (8002188 <menu+0xbe8>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d113      	bne.n	8002122 <menu+0xb82>
			if(dilSecim == 0) {
 80020fa:	4b11      	ldr	r3, [pc, #68]	; (8002140 <menu+0xba0>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d105      	bne.n	800210e <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8002102:	4a1c      	ldr	r2, [pc, #112]	; (8002174 <menu+0xbd4>)
 8002104:	2101      	movs	r1, #1
 8002106:	2002      	movs	r0, #2
 8002108:	f7fe fa2c 	bl	8000564 <lcd_print>
 800210c:	e049      	b.n	80021a2 <menu+0xc02>
			} else if(dilSecim == 1) {
 800210e:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <menu+0xba0>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d145      	bne.n	80021a2 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8002116:	4a18      	ldr	r2, [pc, #96]	; (8002178 <menu+0xbd8>)
 8002118:	2101      	movs	r1, #1
 800211a:	2002      	movs	r0, #2
 800211c:	f7fe fa22 	bl	8000564 <lcd_print>
 8002120:	e03f      	b.n	80021a2 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8002122:	4b19      	ldr	r3, [pc, #100]	; (8002188 <menu+0xbe8>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d13b      	bne.n	80021a2 <menu+0xc02>
			if(dilSecim == 0) {
 800212a:	4b05      	ldr	r3, [pc, #20]	; (8002140 <menu+0xba0>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d12e      	bne.n	8002190 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8002132:	4a16      	ldr	r2, [pc, #88]	; (800218c <menu+0xbec>)
 8002134:	2101      	movs	r1, #1
 8002136:	2002      	movs	r0, #2
 8002138:	f7fe fa14 	bl	8000564 <lcd_print>
 800213c:	e031      	b.n	80021a2 <menu+0xc02>
 800213e:	bf00      	nop
 8002140:	200002d1 	.word	0x200002d1
 8002144:	0800c1e0 	.word	0x0800c1e0
 8002148:	40010800 	.word	0x40010800
 800214c:	200002df 	.word	0x200002df
 8002150:	200002bf 	.word	0x200002bf
 8002154:	200002b1 	.word	0x200002b1
 8002158:	200001e0 	.word	0x200001e0
 800215c:	200002b6 	.word	0x200002b6
 8002160:	200002dc 	.word	0x200002dc
 8002164:	200002b0 	.word	0x200002b0
 8002168:	0800c1f0 	.word	0x0800c1f0
 800216c:	0800c204 	.word	0x0800c204
 8002170:	200002b4 	.word	0x200002b4
 8002174:	0800c218 	.word	0x0800c218
 8002178:	0800c22c 	.word	0x0800c22c
 800217c:	0800c240 	.word	0x0800c240
 8002180:	0800c250 	.word	0x0800c250
 8002184:	0800c264 	.word	0x0800c264
 8002188:	200002b5 	.word	0x200002b5
 800218c:	0800c278 	.word	0x0800c278
			} else if(dilSecim == 1) {
 8002190:	4b92      	ldr	r3, [pc, #584]	; (80023dc <menu+0xe3c>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d104      	bne.n	80021a2 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8002198:	4a91      	ldr	r2, [pc, #580]	; (80023e0 <menu+0xe40>)
 800219a:	2101      	movs	r1, #1
 800219c:	2002      	movs	r0, #2
 800219e:	f7fe f9e1 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021a2:	2102      	movs	r1, #2
 80021a4:	488f      	ldr	r0, [pc, #572]	; (80023e4 <menu+0xe44>)
 80021a6:	f006 fde1 	bl	8008d6c <HAL_GPIO_ReadPin>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d115      	bne.n	80021dc <menu+0xc3c>
 80021b0:	4b8d      	ldr	r3, [pc, #564]	; (80023e8 <menu+0xe48>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	f083 0301 	eor.w	r3, r3, #1
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00e      	beq.n	80021dc <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 80021be:	4b8b      	ldr	r3, [pc, #556]	; (80023ec <menu+0xe4c>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	3301      	adds	r3, #1
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4b89      	ldr	r3, [pc, #548]	; (80023ec <menu+0xe4c>)
 80021c8:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80021ca:	4b88      	ldr	r3, [pc, #544]	; (80023ec <menu+0xe4c>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d902      	bls.n	80021d8 <menu+0xc38>
				yavaslamaLimit = 0;
 80021d2:	4b86      	ldr	r3, [pc, #536]	; (80023ec <menu+0xe4c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021d8:	f003 f968 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021dc:	2104      	movs	r1, #4
 80021de:	4881      	ldr	r0, [pc, #516]	; (80023e4 <menu+0xe44>)
 80021e0:	f006 fdc4 	bl	8008d6c <HAL_GPIO_ReadPin>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d115      	bne.n	8002216 <menu+0xc76>
 80021ea:	4b7f      	ldr	r3, [pc, #508]	; (80023e8 <menu+0xe48>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	f083 0301 	eor.w	r3, r3, #1
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00e      	beq.n	8002216 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 80021f8:	4b7c      	ldr	r3, [pc, #496]	; (80023ec <menu+0xe4c>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	4b7a      	ldr	r3, [pc, #488]	; (80023ec <menu+0xe4c>)
 8002202:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002204:	4b79      	ldr	r3, [pc, #484]	; (80023ec <menu+0xe4c>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <menu+0xc72>
		   		yavaslamaLimit = 1;
 800220c:	4b77      	ldr	r3, [pc, #476]	; (80023ec <menu+0xe4c>)
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002212:	f003 f94b 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002216:	2108      	movs	r1, #8
 8002218:	4872      	ldr	r0, [pc, #456]	; (80023e4 <menu+0xe44>)
 800221a:	f006 fda7 	bl	8008d6c <HAL_GPIO_ReadPin>
 800221e:	4603      	mov	r3, r0
 8002220:	2b01      	cmp	r3, #1
 8002222:	d10d      	bne.n	8002240 <menu+0xca0>
 8002224:	4b70      	ldr	r3, [pc, #448]	; (80023e8 <menu+0xe48>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	f083 0301 	eor.w	r3, r3, #1
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d006      	beq.n	8002240 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8002232:	4b6e      	ldr	r3, [pc, #440]	; (80023ec <menu+0xe4c>)
 8002234:	781a      	ldrb	r2, [r3, #0]
 8002236:	4b6e      	ldr	r3, [pc, #440]	; (80023f0 <menu+0xe50>)
 8002238:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800223a:	4b6e      	ldr	r3, [pc, #440]	; (80023f4 <menu+0xe54>)
 800223c:	2201      	movs	r2, #1
 800223e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002240:	4b6d      	ldr	r3, [pc, #436]	; (80023f8 <menu+0xe58>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b05      	cmp	r3, #5
 8002246:	f040 80b9 	bne.w	80023bc <menu+0xe1c>
		if(dilSecim == 0) {
 800224a:	4b64      	ldr	r3, [pc, #400]	; (80023dc <menu+0xe3c>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d105      	bne.n	800225e <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8002252:	4a6a      	ldr	r2, [pc, #424]	; (80023fc <menu+0xe5c>)
 8002254:	2101      	movs	r1, #1
 8002256:	2001      	movs	r0, #1
 8002258:	f7fe f984 	bl	8000564 <lcd_print>
 800225c:	e008      	b.n	8002270 <menu+0xcd0>
		} else if(dilSecim == 1) {
 800225e:	4b5f      	ldr	r3, [pc, #380]	; (80023dc <menu+0xe3c>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d104      	bne.n	8002270 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8002266:	4a66      	ldr	r2, [pc, #408]	; (8002400 <menu+0xe60>)
 8002268:	2101      	movs	r1, #1
 800226a:	2001      	movs	r0, #1
 800226c:	f7fe f97a 	bl	8000564 <lcd_print>
		}

		if(altLimit == 0) {
 8002270:	4b64      	ldr	r3, [pc, #400]	; (8002404 <menu+0xe64>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d113      	bne.n	80022a0 <menu+0xd00>
			if(dilSecim == 0) {
 8002278:	4b58      	ldr	r3, [pc, #352]	; (80023dc <menu+0xe3c>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d105      	bne.n	800228c <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002280:	4a61      	ldr	r2, [pc, #388]	; (8002408 <menu+0xe68>)
 8002282:	2101      	movs	r1, #1
 8002284:	2002      	movs	r0, #2
 8002286:	f7fe f96d 	bl	8000564 <lcd_print>
 800228a:	e020      	b.n	80022ce <menu+0xd2e>
			} else if(dilSecim == 1) {
 800228c:	4b53      	ldr	r3, [pc, #332]	; (80023dc <menu+0xe3c>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d11c      	bne.n	80022ce <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8002294:	4a5d      	ldr	r2, [pc, #372]	; (800240c <menu+0xe6c>)
 8002296:	2101      	movs	r1, #1
 8002298:	2002      	movs	r0, #2
 800229a:	f7fe f963 	bl	8000564 <lcd_print>
 800229e:	e016      	b.n	80022ce <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 80022a0:	4b58      	ldr	r3, [pc, #352]	; (8002404 <menu+0xe64>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d112      	bne.n	80022ce <menu+0xd2e>
			if(dilSecim == 0){
 80022a8:	4b4c      	ldr	r3, [pc, #304]	; (80023dc <menu+0xe3c>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d105      	bne.n	80022bc <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80022b0:	4a57      	ldr	r2, [pc, #348]	; (8002410 <menu+0xe70>)
 80022b2:	2101      	movs	r1, #1
 80022b4:	2002      	movs	r0, #2
 80022b6:	f7fe f955 	bl	8000564 <lcd_print>
 80022ba:	e008      	b.n	80022ce <menu+0xd2e>
			} else if(dilSecim == 1){
 80022bc:	4b47      	ldr	r3, [pc, #284]	; (80023dc <menu+0xe3c>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d104      	bne.n	80022ce <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80022c4:	4a46      	ldr	r2, [pc, #280]	; (80023e0 <menu+0xe40>)
 80022c6:	2101      	movs	r1, #1
 80022c8:	2002      	movs	r0, #2
 80022ca:	f7fe f94b 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80022ce:	2102      	movs	r1, #2
 80022d0:	4844      	ldr	r0, [pc, #272]	; (80023e4 <menu+0xe44>)
 80022d2:	f006 fd4b 	bl	8008d6c <HAL_GPIO_ReadPin>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d119      	bne.n	8002310 <menu+0xd70>
 80022dc:	4b42      	ldr	r3, [pc, #264]	; (80023e8 <menu+0xe48>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	f083 0301 	eor.w	r3, r3, #1
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d012      	beq.n	8002310 <menu+0xd70>
 80022ea:	4b4a      	ldr	r3, [pc, #296]	; (8002414 <menu+0xe74>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10e      	bne.n	8002310 <menu+0xd70>
			altLimit = altLimit + 1;
 80022f2:	4b44      	ldr	r3, [pc, #272]	; (8002404 <menu+0xe64>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	3301      	adds	r3, #1
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b42      	ldr	r3, [pc, #264]	; (8002404 <menu+0xe64>)
 80022fc:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80022fe:	4b41      	ldr	r3, [pc, #260]	; (8002404 <menu+0xe64>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d902      	bls.n	800230c <menu+0xd6c>
				altLimit = 0;
 8002306:	4b3f      	ldr	r3, [pc, #252]	; (8002404 <menu+0xe64>)
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800230c:	f003 f8ce 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002310:	2104      	movs	r1, #4
 8002312:	4834      	ldr	r0, [pc, #208]	; (80023e4 <menu+0xe44>)
 8002314:	f006 fd2a 	bl	8008d6c <HAL_GPIO_ReadPin>
 8002318:	4603      	mov	r3, r0
 800231a:	2b01      	cmp	r3, #1
 800231c:	d119      	bne.n	8002352 <menu+0xdb2>
 800231e:	4b32      	ldr	r3, [pc, #200]	; (80023e8 <menu+0xe48>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	f083 0301 	eor.w	r3, r3, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b00      	cmp	r3, #0
 800232a:	d012      	beq.n	8002352 <menu+0xdb2>
 800232c:	4b39      	ldr	r3, [pc, #228]	; (8002414 <menu+0xe74>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10e      	bne.n	8002352 <menu+0xdb2>
			altLimit = altLimit - 1;
 8002334:	4b33      	ldr	r3, [pc, #204]	; (8002404 <menu+0xe64>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	3b01      	subs	r3, #1
 800233a:	b2da      	uxtb	r2, r3
 800233c:	4b31      	ldr	r3, [pc, #196]	; (8002404 <menu+0xe64>)
 800233e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002340:	4b30      	ldr	r3, [pc, #192]	; (8002404 <menu+0xe64>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d002      	beq.n	800234e <menu+0xdae>
		   		altLimit = 1;
 8002348:	4b2e      	ldr	r3, [pc, #184]	; (8002404 <menu+0xe64>)
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800234e:	f003 f8ad 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002352:	2108      	movs	r1, #8
 8002354:	4823      	ldr	r0, [pc, #140]	; (80023e4 <menu+0xe44>)
 8002356:	f006 fd09 	bl	8008d6c <HAL_GPIO_ReadPin>
 800235a:	4603      	mov	r3, r0
 800235c:	2b01      	cmp	r3, #1
 800235e:	d12d      	bne.n	80023bc <menu+0xe1c>
 8002360:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <menu+0xe48>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	f083 0301 	eor.w	r3, r3, #1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d026      	beq.n	80023bc <menu+0xe1c>
			eepromData[5] = altLimit;
 800236e:	4b25      	ldr	r3, [pc, #148]	; (8002404 <menu+0xe64>)
 8002370:	781a      	ldrb	r2, [r3, #0]
 8002372:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <menu+0xe50>)
 8002374:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002376:	4b23      	ldr	r3, [pc, #140]	; (8002404 <menu+0xe64>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d110      	bne.n	80023a0 <menu+0xe00>
 800237e:	4b26      	ldr	r3, [pc, #152]	; (8002418 <menu+0xe78>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d003      	beq.n	800238e <menu+0xdee>
 8002386:	4b24      	ldr	r3, [pc, #144]	; (8002418 <menu+0xe78>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d108      	bne.n	80023a0 <menu+0xe00>
				kapiTablaAcKonum = 3;
 800238e:	4b22      	ldr	r3, [pc, #136]	; (8002418 <menu+0xe78>)
 8002390:	2203      	movs	r2, #3
 8002392:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002394:	4b20      	ldr	r3, [pc, #128]	; (8002418 <menu+0xe78>)
 8002396:	781a      	ldrb	r2, [r3, #0]
 8002398:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <menu+0xe50>)
 800239a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800239e:	e00a      	b.n	80023b6 <menu+0xe16>
			} else if(altLimit == 0) {
 80023a0:	4b18      	ldr	r3, [pc, #96]	; (8002404 <menu+0xe64>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d106      	bne.n	80023b6 <menu+0xe16>
				platformSilindirTipi = 0;
 80023a8:	4b1c      	ldr	r3, [pc, #112]	; (800241c <menu+0xe7c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80023ae:	4b1b      	ldr	r3, [pc, #108]	; (800241c <menu+0xe7c>)
 80023b0:	781a      	ldrb	r2, [r3, #0]
 80023b2:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <menu+0xe50>)
 80023b4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <menu+0xe54>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80023bc:	4b0e      	ldr	r3, [pc, #56]	; (80023f8 <menu+0xe58>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b06      	cmp	r3, #6
 80023c2:	f040 80b6 	bne.w	8002532 <menu+0xf92>
		if(dilSecim == 0) {
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <menu+0xe3c>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d12a      	bne.n	8002424 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80023ce:	4a14      	ldr	r2, [pc, #80]	; (8002420 <menu+0xe80>)
 80023d0:	2101      	movs	r1, #1
 80023d2:	2001      	movs	r0, #1
 80023d4:	f7fe f8c6 	bl	8000564 <lcd_print>
 80023d8:	e02d      	b.n	8002436 <menu+0xe96>
 80023da:	bf00      	nop
 80023dc:	200002d1 	.word	0x200002d1
 80023e0:	0800c28c 	.word	0x0800c28c
 80023e4:	40010800 	.word	0x40010800
 80023e8:	200002df 	.word	0x200002df
 80023ec:	200002b5 	.word	0x200002b5
 80023f0:	200001e0 	.word	0x200001e0
 80023f4:	200002dc 	.word	0x200002dc
 80023f8:	200002b0 	.word	0x200002b0
 80023fc:	0800c2a0 	.word	0x0800c2a0
 8002400:	0800c2b4 	.word	0x0800c2b4
 8002404:	200002b6 	.word	0x200002b6
 8002408:	0800c218 	.word	0x0800c218
 800240c:	0800c22c 	.word	0x0800c22c
 8002410:	0800c278 	.word	0x0800c278
 8002414:	200002b1 	.word	0x200002b1
 8002418:	200002bd 	.word	0x200002bd
 800241c:	200002c3 	.word	0x200002c3
 8002420:	0800c2c8 	.word	0x0800c2c8
		} else if(dilSecim == 1){
 8002424:	4b7a      	ldr	r3, [pc, #488]	; (8002610 <menu+0x1070>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d104      	bne.n	8002436 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800242c:	4a79      	ldr	r2, [pc, #484]	; (8002614 <menu+0x1074>)
 800242e:	2101      	movs	r1, #1
 8002430:	2001      	movs	r0, #1
 8002432:	f7fe f897 	bl	8000564 <lcd_print>
		}
		if(basincSalteri == 0){
 8002436:	4b78      	ldr	r3, [pc, #480]	; (8002618 <menu+0x1078>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d113      	bne.n	8002466 <menu+0xec6>
			if(dilSecim == 0) {
 800243e:	4b74      	ldr	r3, [pc, #464]	; (8002610 <menu+0x1070>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d105      	bne.n	8002452 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8002446:	4a75      	ldr	r2, [pc, #468]	; (800261c <menu+0x107c>)
 8002448:	2101      	movs	r1, #1
 800244a:	2002      	movs	r0, #2
 800244c:	f7fe f88a 	bl	8000564 <lcd_print>
 8002450:	e020      	b.n	8002494 <menu+0xef4>
			} else if(dilSecim == 1){
 8002452:	4b6f      	ldr	r3, [pc, #444]	; (8002610 <menu+0x1070>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d11c      	bne.n	8002494 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800245a:	4a71      	ldr	r2, [pc, #452]	; (8002620 <menu+0x1080>)
 800245c:	2101      	movs	r1, #1
 800245e:	2002      	movs	r0, #2
 8002460:	f7fe f880 	bl	8000564 <lcd_print>
 8002464:	e016      	b.n	8002494 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8002466:	4b6c      	ldr	r3, [pc, #432]	; (8002618 <menu+0x1078>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d112      	bne.n	8002494 <menu+0xef4>
			if(dilSecim == 0) {
 800246e:	4b68      	ldr	r3, [pc, #416]	; (8002610 <menu+0x1070>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d105      	bne.n	8002482 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8002476:	4a6b      	ldr	r2, [pc, #428]	; (8002624 <menu+0x1084>)
 8002478:	2101      	movs	r1, #1
 800247a:	2002      	movs	r0, #2
 800247c:	f7fe f872 	bl	8000564 <lcd_print>
 8002480:	e008      	b.n	8002494 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002482:	4b63      	ldr	r3, [pc, #396]	; (8002610 <menu+0x1070>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d104      	bne.n	8002494 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800248a:	4a67      	ldr	r2, [pc, #412]	; (8002628 <menu+0x1088>)
 800248c:	2101      	movs	r1, #1
 800248e:	2002      	movs	r0, #2
 8002490:	f7fe f868 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002494:	2102      	movs	r1, #2
 8002496:	4865      	ldr	r0, [pc, #404]	; (800262c <menu+0x108c>)
 8002498:	f006 fc68 	bl	8008d6c <HAL_GPIO_ReadPin>
 800249c:	4603      	mov	r3, r0
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d115      	bne.n	80024ce <menu+0xf2e>
 80024a2:	4b63      	ldr	r3, [pc, #396]	; (8002630 <menu+0x1090>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	f083 0301 	eor.w	r3, r3, #1
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00e      	beq.n	80024ce <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80024b0:	4b59      	ldr	r3, [pc, #356]	; (8002618 <menu+0x1078>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	3301      	adds	r3, #1
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	4b57      	ldr	r3, [pc, #348]	; (8002618 <menu+0x1078>)
 80024ba:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80024bc:	4b56      	ldr	r3, [pc, #344]	; (8002618 <menu+0x1078>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d902      	bls.n	80024ca <menu+0xf2a>
				basincSalteri = 0;
 80024c4:	4b54      	ldr	r3, [pc, #336]	; (8002618 <menu+0x1078>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024ca:	f002 ffef 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024ce:	2104      	movs	r1, #4
 80024d0:	4856      	ldr	r0, [pc, #344]	; (800262c <menu+0x108c>)
 80024d2:	f006 fc4b 	bl	8008d6c <HAL_GPIO_ReadPin>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d115      	bne.n	8002508 <menu+0xf68>
 80024dc:	4b54      	ldr	r3, [pc, #336]	; (8002630 <menu+0x1090>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	f083 0301 	eor.w	r3, r3, #1
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00e      	beq.n	8002508 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 80024ea:	4b4b      	ldr	r3, [pc, #300]	; (8002618 <menu+0x1078>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	4b49      	ldr	r3, [pc, #292]	; (8002618 <menu+0x1078>)
 80024f4:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80024f6:	4b48      	ldr	r3, [pc, #288]	; (8002618 <menu+0x1078>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d002      	beq.n	8002504 <menu+0xf64>
		   		basincSalteri = 1;
 80024fe:	4b46      	ldr	r3, [pc, #280]	; (8002618 <menu+0x1078>)
 8002500:	2201      	movs	r2, #1
 8002502:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002504:	f002 ffd2 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002508:	2108      	movs	r1, #8
 800250a:	4848      	ldr	r0, [pc, #288]	; (800262c <menu+0x108c>)
 800250c:	f006 fc2e 	bl	8008d6c <HAL_GPIO_ReadPin>
 8002510:	4603      	mov	r3, r0
 8002512:	2b01      	cmp	r3, #1
 8002514:	d10d      	bne.n	8002532 <menu+0xf92>
 8002516:	4b46      	ldr	r3, [pc, #280]	; (8002630 <menu+0x1090>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	f083 0301 	eor.w	r3, r3, #1
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d006      	beq.n	8002532 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002524:	4b3c      	ldr	r3, [pc, #240]	; (8002618 <menu+0x1078>)
 8002526:	781a      	ldrb	r2, [r3, #0]
 8002528:	4b42      	ldr	r3, [pc, #264]	; (8002634 <menu+0x1094>)
 800252a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800252c:	4b42      	ldr	r3, [pc, #264]	; (8002638 <menu+0x1098>)
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002532:	4b42      	ldr	r3, [pc, #264]	; (800263c <menu+0x109c>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b07      	cmp	r3, #7
 8002538:	f040 80f5 	bne.w	8002726 <menu+0x1186>
		if(dilSecim == 0) {
 800253c:	4b34      	ldr	r3, [pc, #208]	; (8002610 <menu+0x1070>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d105      	bne.n	8002550 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002544:	4a3e      	ldr	r2, [pc, #248]	; (8002640 <menu+0x10a0>)
 8002546:	2101      	movs	r1, #1
 8002548:	2001      	movs	r0, #1
 800254a:	f7fe f80b 	bl	8000564 <lcd_print>
 800254e:	e008      	b.n	8002562 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002550:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <menu+0x1070>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d104      	bne.n	8002562 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002558:	4a3a      	ldr	r2, [pc, #232]	; (8002644 <menu+0x10a4>)
 800255a:	2101      	movs	r1, #1
 800255c:	2001      	movs	r0, #1
 800255e:	f7fe f801 	bl	8000564 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002562:	4b39      	ldr	r3, [pc, #228]	; (8002648 <menu+0x10a8>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d113      	bne.n	8002592 <menu+0xff2>
			if(dilSecim == 0) {
 800256a:	4b29      	ldr	r3, [pc, #164]	; (8002610 <menu+0x1070>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d105      	bne.n	800257e <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002572:	4a2a      	ldr	r2, [pc, #168]	; (800261c <menu+0x107c>)
 8002574:	2101      	movs	r1, #1
 8002576:	2002      	movs	r0, #2
 8002578:	f7fd fff4 	bl	8000564 <lcd_print>
 800257c:	e079      	b.n	8002672 <menu+0x10d2>
			} else if(dilSecim == 1){
 800257e:	4b24      	ldr	r3, [pc, #144]	; (8002610 <menu+0x1070>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d175      	bne.n	8002672 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 8002586:	4a26      	ldr	r2, [pc, #152]	; (8002620 <menu+0x1080>)
 8002588:	2101      	movs	r1, #1
 800258a:	2002      	movs	r0, #2
 800258c:	f7fd ffea 	bl	8000564 <lcd_print>
 8002590:	e06f      	b.n	8002672 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8002592:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <menu+0x10a8>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d113      	bne.n	80025c2 <menu+0x1022>
			if(dilSecim == 0) {
 800259a:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <menu+0x1070>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d105      	bne.n	80025ae <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80025a2:	4a2a      	ldr	r2, [pc, #168]	; (800264c <menu+0x10ac>)
 80025a4:	2101      	movs	r1, #1
 80025a6:	2002      	movs	r0, #2
 80025a8:	f7fd ffdc 	bl	8000564 <lcd_print>
 80025ac:	e061      	b.n	8002672 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80025ae:	4b18      	ldr	r3, [pc, #96]	; (8002610 <menu+0x1070>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d15d      	bne.n	8002672 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80025b6:	4a26      	ldr	r2, [pc, #152]	; (8002650 <menu+0x10b0>)
 80025b8:	2101      	movs	r1, #1
 80025ba:	2002      	movs	r0, #2
 80025bc:	f7fd ffd2 	bl	8000564 <lcd_print>
 80025c0:	e057      	b.n	8002672 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80025c2:	4b21      	ldr	r3, [pc, #132]	; (8002648 <menu+0x10a8>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d113      	bne.n	80025f2 <menu+0x1052>
			if(dilSecim == 0) {
 80025ca:	4b11      	ldr	r3, [pc, #68]	; (8002610 <menu+0x1070>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d105      	bne.n	80025de <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80025d2:	4a20      	ldr	r2, [pc, #128]	; (8002654 <menu+0x10b4>)
 80025d4:	2101      	movs	r1, #1
 80025d6:	2002      	movs	r0, #2
 80025d8:	f7fd ffc4 	bl	8000564 <lcd_print>
 80025dc:	e049      	b.n	8002672 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <menu+0x1070>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d145      	bne.n	8002672 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80025e6:	4a1c      	ldr	r2, [pc, #112]	; (8002658 <menu+0x10b8>)
 80025e8:	2101      	movs	r1, #1
 80025ea:	2002      	movs	r0, #2
 80025ec:	f7fd ffba 	bl	8000564 <lcd_print>
 80025f0:	e03f      	b.n	8002672 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <menu+0x10a8>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d13b      	bne.n	8002672 <menu+0x10d2>
			if(dilSecim == 0) {
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <menu+0x1070>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d12e      	bne.n	8002660 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002602:	4a16      	ldr	r2, [pc, #88]	; (800265c <menu+0x10bc>)
 8002604:	2101      	movs	r1, #1
 8002606:	2002      	movs	r0, #2
 8002608:	f7fd ffac 	bl	8000564 <lcd_print>
 800260c:	e031      	b.n	8002672 <menu+0x10d2>
 800260e:	bf00      	nop
 8002610:	200002d1 	.word	0x200002d1
 8002614:	0800c2d8 	.word	0x0800c2d8
 8002618:	200002b7 	.word	0x200002b7
 800261c:	0800c218 	.word	0x0800c218
 8002620:	0800c22c 	.word	0x0800c22c
 8002624:	0800c278 	.word	0x0800c278
 8002628:	0800c28c 	.word	0x0800c28c
 800262c:	40010800 	.word	0x40010800
 8002630:	200002df 	.word	0x200002df
 8002634:	200001e0 	.word	0x200001e0
 8002638:	200002dc 	.word	0x200002dc
 800263c:	200002b0 	.word	0x200002b0
 8002640:	0800c2e8 	.word	0x0800c2e8
 8002644:	0800c2fc 	.word	0x0800c2fc
 8002648:	200002b8 	.word	0x200002b8
 800264c:	0800c310 	.word	0x0800c310
 8002650:	0800c324 	.word	0x0800c324
 8002654:	0800c338 	.word	0x0800c338
 8002658:	0800c34c 	.word	0x0800c34c
 800265c:	0800c360 	.word	0x0800c360
			} else if(dilSecim == 1){
 8002660:	4b99      	ldr	r3, [pc, #612]	; (80028c8 <menu+0x1328>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d104      	bne.n	8002672 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002668:	4a98      	ldr	r2, [pc, #608]	; (80028cc <menu+0x132c>)
 800266a:	2101      	movs	r1, #1
 800266c:	2002      	movs	r0, #2
 800266e:	f7fd ff79 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002672:	2102      	movs	r1, #2
 8002674:	4896      	ldr	r0, [pc, #600]	; (80028d0 <menu+0x1330>)
 8002676:	f006 fb79 	bl	8008d6c <HAL_GPIO_ReadPin>
 800267a:	4603      	mov	r3, r0
 800267c:	2b01      	cmp	r3, #1
 800267e:	d115      	bne.n	80026ac <menu+0x110c>
 8002680:	4b94      	ldr	r3, [pc, #592]	; (80028d4 <menu+0x1334>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	f083 0301 	eor.w	r3, r3, #1
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00e      	beq.n	80026ac <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 800268e:	4b92      	ldr	r3, [pc, #584]	; (80028d8 <menu+0x1338>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	3301      	adds	r3, #1
 8002694:	b2da      	uxtb	r2, r3
 8002696:	4b90      	ldr	r3, [pc, #576]	; (80028d8 <menu+0x1338>)
 8002698:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800269a:	4b8f      	ldr	r3, [pc, #572]	; (80028d8 <menu+0x1338>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d902      	bls.n	80026a8 <menu+0x1108>
				kapiSecimleri = 0;
 80026a2:	4b8d      	ldr	r3, [pc, #564]	; (80028d8 <menu+0x1338>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026a8:	f002 ff00 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026ac:	2104      	movs	r1, #4
 80026ae:	4888      	ldr	r0, [pc, #544]	; (80028d0 <menu+0x1330>)
 80026b0:	f006 fb5c 	bl	8008d6c <HAL_GPIO_ReadPin>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d115      	bne.n	80026e6 <menu+0x1146>
 80026ba:	4b86      	ldr	r3, [pc, #536]	; (80028d4 <menu+0x1334>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	f083 0301 	eor.w	r3, r3, #1
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00e      	beq.n	80026e6 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80026c8:	4b83      	ldr	r3, [pc, #524]	; (80028d8 <menu+0x1338>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	4b81      	ldr	r3, [pc, #516]	; (80028d8 <menu+0x1338>)
 80026d2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80026d4:	4b80      	ldr	r3, [pc, #512]	; (80028d8 <menu+0x1338>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d902      	bls.n	80026e2 <menu+0x1142>
		   		kapiSecimleri = 3;
 80026dc:	4b7e      	ldr	r3, [pc, #504]	; (80028d8 <menu+0x1338>)
 80026de:	2203      	movs	r2, #3
 80026e0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026e2:	f002 fee3 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026e6:	2108      	movs	r1, #8
 80026e8:	4879      	ldr	r0, [pc, #484]	; (80028d0 <menu+0x1330>)
 80026ea:	f006 fb3f 	bl	8008d6c <HAL_GPIO_ReadPin>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d118      	bne.n	8002726 <menu+0x1186>
 80026f4:	4b77      	ldr	r3, [pc, #476]	; (80028d4 <menu+0x1334>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	f083 0301 	eor.w	r3, r3, #1
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d011      	beq.n	8002726 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002702:	4b75      	ldr	r3, [pc, #468]	; (80028d8 <menu+0x1338>)
 8002704:	781a      	ldrb	r2, [r3, #0]
 8002706:	4b75      	ldr	r3, [pc, #468]	; (80028dc <menu+0x133c>)
 8002708:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800270a:	4b73      	ldr	r3, [pc, #460]	; (80028d8 <menu+0x1338>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d006      	beq.n	8002720 <menu+0x1180>
				altLimit = 1;
 8002712:	4b73      	ldr	r3, [pc, #460]	; (80028e0 <menu+0x1340>)
 8002714:	2201      	movs	r2, #1
 8002716:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002718:	4b71      	ldr	r3, [pc, #452]	; (80028e0 <menu+0x1340>)
 800271a:	781a      	ldrb	r2, [r3, #0]
 800271c:	4b6f      	ldr	r3, [pc, #444]	; (80028dc <menu+0x133c>)
 800271e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002720:	4b70      	ldr	r3, [pc, #448]	; (80028e4 <menu+0x1344>)
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002726:	4b70      	ldr	r3, [pc, #448]	; (80028e8 <menu+0x1348>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b08      	cmp	r3, #8
 800272c:	f040 8092 	bne.w	8002854 <menu+0x12b4>
		if(dilSecim == 0) {
 8002730:	4b65      	ldr	r3, [pc, #404]	; (80028c8 <menu+0x1328>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d105      	bne.n	8002744 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002738:	4a6c      	ldr	r2, [pc, #432]	; (80028ec <menu+0x134c>)
 800273a:	2101      	movs	r1, #1
 800273c:	2001      	movs	r0, #1
 800273e:	f7fd ff11 	bl	8000564 <lcd_print>
 8002742:	e008      	b.n	8002756 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002744:	4b60      	ldr	r3, [pc, #384]	; (80028c8 <menu+0x1328>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b01      	cmp	r3, #1
 800274a:	d104      	bne.n	8002756 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800274c:	4a68      	ldr	r2, [pc, #416]	; (80028f0 <menu+0x1350>)
 800274e:	2101      	movs	r1, #1
 8002750:	2001      	movs	r0, #1
 8002752:	f7fd ff07 	bl	8000564 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002756:	4b67      	ldr	r3, [pc, #412]	; (80028f4 <menu+0x1354>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d113      	bne.n	8002786 <menu+0x11e6>
			if(dilSecim == 0) {
 800275e:	4b5a      	ldr	r3, [pc, #360]	; (80028c8 <menu+0x1328>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d105      	bne.n	8002772 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002766:	4a64      	ldr	r2, [pc, #400]	; (80028f8 <menu+0x1358>)
 8002768:	2101      	movs	r1, #1
 800276a:	2002      	movs	r0, #2
 800276c:	f7fd fefa 	bl	8000564 <lcd_print>
 8002770:	e020      	b.n	80027b4 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002772:	4b55      	ldr	r3, [pc, #340]	; (80028c8 <menu+0x1328>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d11c      	bne.n	80027b4 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800277a:	4a60      	ldr	r2, [pc, #384]	; (80028fc <menu+0x135c>)
 800277c:	2101      	movs	r1, #1
 800277e:	2002      	movs	r0, #2
 8002780:	f7fd fef0 	bl	8000564 <lcd_print>
 8002784:	e016      	b.n	80027b4 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8002786:	4b5b      	ldr	r3, [pc, #364]	; (80028f4 <menu+0x1354>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d112      	bne.n	80027b4 <menu+0x1214>
			if(dilSecim == 0){
 800278e:	4b4e      	ldr	r3, [pc, #312]	; (80028c8 <menu+0x1328>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d105      	bne.n	80027a2 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002796:	4a5a      	ldr	r2, [pc, #360]	; (8002900 <menu+0x1360>)
 8002798:	2101      	movs	r1, #1
 800279a:	2002      	movs	r0, #2
 800279c:	f7fd fee2 	bl	8000564 <lcd_print>
 80027a0:	e008      	b.n	80027b4 <menu+0x1214>
			} else if(dilSecim == 1){
 80027a2:	4b49      	ldr	r3, [pc, #292]	; (80028c8 <menu+0x1328>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d104      	bne.n	80027b4 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80027aa:	4a56      	ldr	r2, [pc, #344]	; (8002904 <menu+0x1364>)
 80027ac:	2101      	movs	r1, #1
 80027ae:	2002      	movs	r0, #2
 80027b0:	f7fd fed8 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027b4:	2102      	movs	r1, #2
 80027b6:	4846      	ldr	r0, [pc, #280]	; (80028d0 <menu+0x1330>)
 80027b8:	f006 fad8 	bl	8008d6c <HAL_GPIO_ReadPin>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d115      	bne.n	80027ee <menu+0x124e>
 80027c2:	4b44      	ldr	r3, [pc, #272]	; (80028d4 <menu+0x1334>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	f083 0301 	eor.w	r3, r3, #1
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00e      	beq.n	80027ee <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80027d0:	4b48      	ldr	r3, [pc, #288]	; (80028f4 <menu+0x1354>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	3301      	adds	r3, #1
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	4b46      	ldr	r3, [pc, #280]	; (80028f4 <menu+0x1354>)
 80027da:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80027dc:	4b45      	ldr	r3, [pc, #276]	; (80028f4 <menu+0x1354>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d902      	bls.n	80027ea <menu+0x124a>
				kapiAcTipi = 0;
 80027e4:	4b43      	ldr	r3, [pc, #268]	; (80028f4 <menu+0x1354>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027ea:	f002 fe5f 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027ee:	2104      	movs	r1, #4
 80027f0:	4837      	ldr	r0, [pc, #220]	; (80028d0 <menu+0x1330>)
 80027f2:	f006 fabb 	bl	8008d6c <HAL_GPIO_ReadPin>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d115      	bne.n	8002828 <menu+0x1288>
 80027fc:	4b35      	ldr	r3, [pc, #212]	; (80028d4 <menu+0x1334>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	f083 0301 	eor.w	r3, r3, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00e      	beq.n	8002828 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800280a:	4b3a      	ldr	r3, [pc, #232]	; (80028f4 <menu+0x1354>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	3b01      	subs	r3, #1
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <menu+0x1354>)
 8002814:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002816:	4b37      	ldr	r3, [pc, #220]	; (80028f4 <menu+0x1354>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d002      	beq.n	8002824 <menu+0x1284>
		   		kapiAcTipi = 1;
 800281e:	4b35      	ldr	r3, [pc, #212]	; (80028f4 <menu+0x1354>)
 8002820:	2201      	movs	r2, #1
 8002822:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002824:	f002 fe42 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002828:	2108      	movs	r1, #8
 800282a:	4829      	ldr	r0, [pc, #164]	; (80028d0 <menu+0x1330>)
 800282c:	f006 fa9e 	bl	8008d6c <HAL_GPIO_ReadPin>
 8002830:	4603      	mov	r3, r0
 8002832:	2b01      	cmp	r3, #1
 8002834:	d10e      	bne.n	8002854 <menu+0x12b4>
 8002836:	4b27      	ldr	r3, [pc, #156]	; (80028d4 <menu+0x1334>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	f083 0301 	eor.w	r3, r3, #1
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d007      	beq.n	8002854 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002844:	4b2b      	ldr	r3, [pc, #172]	; (80028f4 <menu+0x1354>)
 8002846:	781a      	ldrb	r2, [r3, #0]
 8002848:	4b24      	ldr	r3, [pc, #144]	; (80028dc <menu+0x133c>)
 800284a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800284e:	4b25      	ldr	r3, [pc, #148]	; (80028e4 <menu+0x1344>)
 8002850:	2201      	movs	r2, #1
 8002852:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002854:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <menu+0x1348>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b09      	cmp	r3, #9
 800285a:	f040 80b9 	bne.w	80029d0 <menu+0x1430>
		if(dilSecim == 0){
 800285e:	4b1a      	ldr	r3, [pc, #104]	; (80028c8 <menu+0x1328>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d105      	bne.n	8002872 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002866:	4a28      	ldr	r2, [pc, #160]	; (8002908 <menu+0x1368>)
 8002868:	2101      	movs	r1, #1
 800286a:	2001      	movs	r0, #1
 800286c:	f7fd fe7a 	bl	8000564 <lcd_print>
 8002870:	e008      	b.n	8002884 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002872:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <menu+0x1328>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d104      	bne.n	8002884 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800287a:	4a24      	ldr	r2, [pc, #144]	; (800290c <menu+0x136c>)
 800287c:	2101      	movs	r1, #1
 800287e:	2001      	movs	r0, #1
 8002880:	f7fd fe70 	bl	8000564 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002884:	4b22      	ldr	r3, [pc, #136]	; (8002910 <menu+0x1370>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 800288c:	4a21      	ldr	r2, [pc, #132]	; (8002914 <menu+0x1374>)
 800288e:	2101      	movs	r1, #1
 8002890:	2002      	movs	r0, #2
 8002892:	f7fd fe67 	bl	8000564 <lcd_print>
 8002896:	e04c      	b.n	8002932 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <menu+0x1370>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d13f      	bne.n	8002920 <menu+0x1380>
			if(dilSecim == 0){
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <menu+0x1328>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d105      	bne.n	80028b4 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80028a8:	4a1b      	ldr	r2, [pc, #108]	; (8002918 <menu+0x1378>)
 80028aa:	2101      	movs	r1, #1
 80028ac:	2002      	movs	r0, #2
 80028ae:	f7fd fe59 	bl	8000564 <lcd_print>
 80028b2:	e03e      	b.n	8002932 <menu+0x1392>
			} else if(dilSecim == 1) {
 80028b4:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <menu+0x1328>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d13a      	bne.n	8002932 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80028bc:	4a17      	ldr	r2, [pc, #92]	; (800291c <menu+0x137c>)
 80028be:	2101      	movs	r1, #1
 80028c0:	2002      	movs	r0, #2
 80028c2:	f7fd fe4f 	bl	8000564 <lcd_print>
 80028c6:	e034      	b.n	8002932 <menu+0x1392>
 80028c8:	200002d1 	.word	0x200002d1
 80028cc:	0800c374 	.word	0x0800c374
 80028d0:	40010800 	.word	0x40010800
 80028d4:	200002df 	.word	0x200002df
 80028d8:	200002b8 	.word	0x200002b8
 80028dc:	200001e0 	.word	0x200001e0
 80028e0:	200002b6 	.word	0x200002b6
 80028e4:	200002dc 	.word	0x200002dc
 80028e8:	200002b0 	.word	0x200002b0
 80028ec:	0800c388 	.word	0x0800c388
 80028f0:	0800c39c 	.word	0x0800c39c
 80028f4:	200002bc 	.word	0x200002bc
 80028f8:	0800c3b0 	.word	0x0800c3b0
 80028fc:	0800c3c0 	.word	0x0800c3c0
 8002900:	0800c3d0 	.word	0x0800c3d0
 8002904:	0800c3e4 	.word	0x0800c3e4
 8002908:	0800c3f8 	.word	0x0800c3f8
 800290c:	0800c40c 	.word	0x0800c40c
 8002910:	200002b9 	.word	0x200002b9
 8002914:	0800c420 	.word	0x0800c420
 8002918:	0800c434 	.word	0x0800c434
 800291c:	0800c444 	.word	0x0800c444
			}
		} else if(kapi1Tip == 2) {
 8002920:	4b8a      	ldr	r3, [pc, #552]	; (8002b4c <menu+0x15ac>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d104      	bne.n	8002932 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002928:	4a89      	ldr	r2, [pc, #548]	; (8002b50 <menu+0x15b0>)
 800292a:	2101      	movs	r1, #1
 800292c:	2002      	movs	r0, #2
 800292e:	f7fd fe19 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002932:	2102      	movs	r1, #2
 8002934:	4887      	ldr	r0, [pc, #540]	; (8002b54 <menu+0x15b4>)
 8002936:	f006 fa19 	bl	8008d6c <HAL_GPIO_ReadPin>
 800293a:	4603      	mov	r3, r0
 800293c:	2b01      	cmp	r3, #1
 800293e:	d115      	bne.n	800296c <menu+0x13cc>
 8002940:	4b85      	ldr	r3, [pc, #532]	; (8002b58 <menu+0x15b8>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	f083 0301 	eor.w	r3, r3, #1
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00e      	beq.n	800296c <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 800294e:	4b7f      	ldr	r3, [pc, #508]	; (8002b4c <menu+0x15ac>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	3301      	adds	r3, #1
 8002954:	b2da      	uxtb	r2, r3
 8002956:	4b7d      	ldr	r3, [pc, #500]	; (8002b4c <menu+0x15ac>)
 8002958:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800295a:	4b7c      	ldr	r3, [pc, #496]	; (8002b4c <menu+0x15ac>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d902      	bls.n	8002968 <menu+0x13c8>
				kapi1Tip = 0;
 8002962:	4b7a      	ldr	r3, [pc, #488]	; (8002b4c <menu+0x15ac>)
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002968:	f002 fda0 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800296c:	2104      	movs	r1, #4
 800296e:	4879      	ldr	r0, [pc, #484]	; (8002b54 <menu+0x15b4>)
 8002970:	f006 f9fc 	bl	8008d6c <HAL_GPIO_ReadPin>
 8002974:	4603      	mov	r3, r0
 8002976:	2b01      	cmp	r3, #1
 8002978:	d115      	bne.n	80029a6 <menu+0x1406>
 800297a:	4b77      	ldr	r3, [pc, #476]	; (8002b58 <menu+0x15b8>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	f083 0301 	eor.w	r3, r3, #1
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00e      	beq.n	80029a6 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002988:	4b70      	ldr	r3, [pc, #448]	; (8002b4c <menu+0x15ac>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	3b01      	subs	r3, #1
 800298e:	b2da      	uxtb	r2, r3
 8002990:	4b6e      	ldr	r3, [pc, #440]	; (8002b4c <menu+0x15ac>)
 8002992:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002994:	4b6d      	ldr	r3, [pc, #436]	; (8002b4c <menu+0x15ac>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b03      	cmp	r3, #3
 800299a:	d902      	bls.n	80029a2 <menu+0x1402>
		   		kapi1Tip = 2;
 800299c:	4b6b      	ldr	r3, [pc, #428]	; (8002b4c <menu+0x15ac>)
 800299e:	2202      	movs	r2, #2
 80029a0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029a2:	f002 fd83 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029a6:	2108      	movs	r1, #8
 80029a8:	486a      	ldr	r0, [pc, #424]	; (8002b54 <menu+0x15b4>)
 80029aa:	f006 f9df 	bl	8008d6c <HAL_GPIO_ReadPin>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d10d      	bne.n	80029d0 <menu+0x1430>
 80029b4:	4b68      	ldr	r3, [pc, #416]	; (8002b58 <menu+0x15b8>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	f083 0301 	eor.w	r3, r3, #1
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d006      	beq.n	80029d0 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80029c2:	4b62      	ldr	r3, [pc, #392]	; (8002b4c <menu+0x15ac>)
 80029c4:	781a      	ldrb	r2, [r3, #0]
 80029c6:	4b65      	ldr	r3, [pc, #404]	; (8002b5c <menu+0x15bc>)
 80029c8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80029ca:	4b65      	ldr	r3, [pc, #404]	; (8002b60 <menu+0x15c0>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80029d0:	4b64      	ldr	r3, [pc, #400]	; (8002b64 <menu+0x15c4>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b0a      	cmp	r3, #10
 80029d6:	d17f      	bne.n	8002ad8 <menu+0x1538>
		if(dilSecim == 0) {
 80029d8:	4b63      	ldr	r3, [pc, #396]	; (8002b68 <menu+0x15c8>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80029e0:	4a62      	ldr	r2, [pc, #392]	; (8002b6c <menu+0x15cc>)
 80029e2:	2101      	movs	r1, #1
 80029e4:	2001      	movs	r0, #1
 80029e6:	f7fd fdbd 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80029ea:	4a61      	ldr	r2, [pc, #388]	; (8002b70 <menu+0x15d0>)
 80029ec:	2101      	movs	r1, #1
 80029ee:	2002      	movs	r0, #2
 80029f0:	f7fd fdb8 	bl	8000564 <lcd_print>
 80029f4:	e00d      	b.n	8002a12 <menu+0x1472>
		} else if(dilSecim == 1) {
 80029f6:	4b5c      	ldr	r3, [pc, #368]	; (8002b68 <menu+0x15c8>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d109      	bne.n	8002a12 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80029fe:	4a5d      	ldr	r2, [pc, #372]	; (8002b74 <menu+0x15d4>)
 8002a00:	2101      	movs	r1, #1
 8002a02:	2001      	movs	r0, #1
 8002a04:	f7fd fdae 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002a08:	4a5b      	ldr	r2, [pc, #364]	; (8002b78 <menu+0x15d8>)
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	2002      	movs	r0, #2
 8002a0e:	f7fd fda9 	bl	8000564 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002a12:	4b5a      	ldr	r3, [pc, #360]	; (8002b7c <menu+0x15dc>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	220a      	movs	r2, #10
 8002a18:	4959      	ldr	r1, [pc, #356]	; (8002b80 <menu+0x15e0>)
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f009 f99c 	bl	800bd58 <itoa>
		lcd_print(2,16,snum);
 8002a20:	4a57      	ldr	r2, [pc, #348]	; (8002b80 <menu+0x15e0>)
 8002a22:	2110      	movs	r1, #16
 8002a24:	2002      	movs	r0, #2
 8002a26:	f7fd fd9d 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	4849      	ldr	r0, [pc, #292]	; (8002b54 <menu+0x15b4>)
 8002a2e:	f006 f99d 	bl	8008d6c <HAL_GPIO_ReadPin>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d119      	bne.n	8002a6c <menu+0x14cc>
 8002a38:	4b47      	ldr	r3, [pc, #284]	; (8002b58 <menu+0x15b8>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	f083 0301 	eor.w	r3, r3, #1
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d012      	beq.n	8002a6c <menu+0x14cc>
 8002a46:	4b41      	ldr	r3, [pc, #260]	; (8002b4c <menu+0x15ac>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10e      	bne.n	8002a6c <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002a4e:	4b4b      	ldr	r3, [pc, #300]	; (8002b7c <menu+0x15dc>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	3301      	adds	r3, #1
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	4b49      	ldr	r3, [pc, #292]	; (8002b7c <menu+0x15dc>)
 8002a58:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002a5a:	4b48      	ldr	r3, [pc, #288]	; (8002b7c <menu+0x15dc>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b05      	cmp	r3, #5
 8002a60:	d902      	bls.n	8002a68 <menu+0x14c8>
				kapi1AcSure = 0;
 8002a62:	4b46      	ldr	r3, [pc, #280]	; (8002b7c <menu+0x15dc>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a68:	f002 fd20 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002a6c:	2104      	movs	r1, #4
 8002a6e:	4839      	ldr	r0, [pc, #228]	; (8002b54 <menu+0x15b4>)
 8002a70:	f006 f97c 	bl	8008d6c <HAL_GPIO_ReadPin>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d119      	bne.n	8002aae <menu+0x150e>
 8002a7a:	4b37      	ldr	r3, [pc, #220]	; (8002b58 <menu+0x15b8>)
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	f083 0301 	eor.w	r3, r3, #1
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d012      	beq.n	8002aae <menu+0x150e>
 8002a88:	4b30      	ldr	r3, [pc, #192]	; (8002b4c <menu+0x15ac>)
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10e      	bne.n	8002aae <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002a90:	4b3a      	ldr	r3, [pc, #232]	; (8002b7c <menu+0x15dc>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b2da      	uxtb	r2, r3
 8002a98:	4b38      	ldr	r3, [pc, #224]	; (8002b7c <menu+0x15dc>)
 8002a9a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002a9c:	4b37      	ldr	r3, [pc, #220]	; (8002b7c <menu+0x15dc>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b06      	cmp	r3, #6
 8002aa2:	d902      	bls.n	8002aaa <menu+0x150a>
		   		kapi1AcSure = 5;
 8002aa4:	4b35      	ldr	r3, [pc, #212]	; (8002b7c <menu+0x15dc>)
 8002aa6:	2205      	movs	r2, #5
 8002aa8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002aaa:	f002 fcff 	bl	80054ac <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002aae:	2108      	movs	r1, #8
 8002ab0:	4828      	ldr	r0, [pc, #160]	; (8002b54 <menu+0x15b4>)
 8002ab2:	f006 f95b 	bl	8008d6c <HAL_GPIO_ReadPin>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d10d      	bne.n	8002ad8 <menu+0x1538>
 8002abc:	4b26      	ldr	r3, [pc, #152]	; (8002b58 <menu+0x15b8>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	f083 0301 	eor.w	r3, r3, #1
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d006      	beq.n	8002ad8 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8002aca:	4b2c      	ldr	r3, [pc, #176]	; (8002b7c <menu+0x15dc>)
 8002acc:	781a      	ldrb	r2, [r3, #0]
 8002ace:	4b23      	ldr	r3, [pc, #140]	; (8002b5c <menu+0x15bc>)
 8002ad0:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002ad2:	4b23      	ldr	r3, [pc, #140]	; (8002b60 <menu+0x15c0>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002ad8:	4b22      	ldr	r3, [pc, #136]	; (8002b64 <menu+0x15c4>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b0b      	cmp	r3, #11
 8002ade:	f040 80b5 	bne.w	8002c4c <menu+0x16ac>
		if(dilSecim == 0) {
 8002ae2:	4b21      	ldr	r3, [pc, #132]	; (8002b68 <menu+0x15c8>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d105      	bne.n	8002af6 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002aea:	4a26      	ldr	r2, [pc, #152]	; (8002b84 <menu+0x15e4>)
 8002aec:	2101      	movs	r1, #1
 8002aee:	2001      	movs	r0, #1
 8002af0:	f7fd fd38 	bl	8000564 <lcd_print>
 8002af4:	e008      	b.n	8002b08 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002af6:	4b1c      	ldr	r3, [pc, #112]	; (8002b68 <menu+0x15c8>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d104      	bne.n	8002b08 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002afe:	4a22      	ldr	r2, [pc, #136]	; (8002b88 <menu+0x15e8>)
 8002b00:	2101      	movs	r1, #1
 8002b02:	2001      	movs	r0, #1
 8002b04:	f7fd fd2e 	bl	8000564 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002b08:	4b20      	ldr	r3, [pc, #128]	; (8002b8c <menu+0x15ec>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d105      	bne.n	8002b1c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002b10:	4a1f      	ldr	r2, [pc, #124]	; (8002b90 <menu+0x15f0>)
 8002b12:	2101      	movs	r1, #1
 8002b14:	2002      	movs	r0, #2
 8002b16:	f7fd fd25 	bl	8000564 <lcd_print>
 8002b1a:	e048      	b.n	8002bae <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002b1c:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <menu+0x15ec>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d13b      	bne.n	8002b9c <menu+0x15fc>
			if(dilSecim == 0) {
 8002b24:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <menu+0x15c8>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d105      	bne.n	8002b38 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002b2c:	4a19      	ldr	r2, [pc, #100]	; (8002b94 <menu+0x15f4>)
 8002b2e:	2101      	movs	r1, #1
 8002b30:	2002      	movs	r0, #2
 8002b32:	f7fd fd17 	bl	8000564 <lcd_print>
 8002b36:	e03a      	b.n	8002bae <menu+0x160e>
			} else if(dilSecim == 1) {
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <menu+0x15c8>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d136      	bne.n	8002bae <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002b40:	4a15      	ldr	r2, [pc, #84]	; (8002b98 <menu+0x15f8>)
 8002b42:	2101      	movs	r1, #1
 8002b44:	2002      	movs	r0, #2
 8002b46:	f7fd fd0d 	bl	8000564 <lcd_print>
 8002b4a:	e030      	b.n	8002bae <menu+0x160e>
 8002b4c:	200002b9 	.word	0x200002b9
 8002b50:	0800c458 	.word	0x0800c458
 8002b54:	40010800 	.word	0x40010800
 8002b58:	200002df 	.word	0x200002df
 8002b5c:	200001e0 	.word	0x200001e0
 8002b60:	200002dc 	.word	0x200002dc
 8002b64:	200002b0 	.word	0x200002b0
 8002b68:	200002d1 	.word	0x200002d1
 8002b6c:	0800c468 	.word	0x0800c468
 8002b70:	0800c47c 	.word	0x0800c47c
 8002b74:	0800c48c 	.word	0x0800c48c
 8002b78:	0800c4a0 	.word	0x0800c4a0
 8002b7c:	200002c9 	.word	0x200002c9
 8002b80:	20000250 	.word	0x20000250
 8002b84:	0800c4b0 	.word	0x0800c4b0
 8002b88:	0800c4c4 	.word	0x0800c4c4
 8002b8c:	200002ba 	.word	0x200002ba
 8002b90:	0800c420 	.word	0x0800c420
 8002b94:	0800c434 	.word	0x0800c434
 8002b98:	0800c444 	.word	0x0800c444
			}
		} else if(kapi2Tip == 2) {
 8002b9c:	4b8a      	ldr	r3, [pc, #552]	; (8002dc8 <menu+0x1828>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d104      	bne.n	8002bae <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002ba4:	4a89      	ldr	r2, [pc, #548]	; (8002dcc <menu+0x182c>)
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	2002      	movs	r0, #2
 8002baa:	f7fd fcdb 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bae:	2102      	movs	r1, #2
 8002bb0:	4887      	ldr	r0, [pc, #540]	; (8002dd0 <menu+0x1830>)
 8002bb2:	f006 f8db 	bl	8008d6c <HAL_GPIO_ReadPin>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d115      	bne.n	8002be8 <menu+0x1648>
 8002bbc:	4b85      	ldr	r3, [pc, #532]	; (8002dd4 <menu+0x1834>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	f083 0301 	eor.w	r3, r3, #1
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00e      	beq.n	8002be8 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002bca:	4b7f      	ldr	r3, [pc, #508]	; (8002dc8 <menu+0x1828>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4b7d      	ldr	r3, [pc, #500]	; (8002dc8 <menu+0x1828>)
 8002bd4:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002bd6:	4b7c      	ldr	r3, [pc, #496]	; (8002dc8 <menu+0x1828>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d902      	bls.n	8002be4 <menu+0x1644>
				kapi2Tip = 0;
 8002bde:	4b7a      	ldr	r3, [pc, #488]	; (8002dc8 <menu+0x1828>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002be4:	f002 fc62 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002be8:	2104      	movs	r1, #4
 8002bea:	4879      	ldr	r0, [pc, #484]	; (8002dd0 <menu+0x1830>)
 8002bec:	f006 f8be 	bl	8008d6c <HAL_GPIO_ReadPin>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d115      	bne.n	8002c22 <menu+0x1682>
 8002bf6:	4b77      	ldr	r3, [pc, #476]	; (8002dd4 <menu+0x1834>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	f083 0301 	eor.w	r3, r3, #1
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00e      	beq.n	8002c22 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002c04:	4b70      	ldr	r3, [pc, #448]	; (8002dc8 <menu+0x1828>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	4b6e      	ldr	r3, [pc, #440]	; (8002dc8 <menu+0x1828>)
 8002c0e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002c10:	4b6d      	ldr	r3, [pc, #436]	; (8002dc8 <menu+0x1828>)
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d902      	bls.n	8002c1e <menu+0x167e>
		   		kapi2Tip = 2;
 8002c18:	4b6b      	ldr	r3, [pc, #428]	; (8002dc8 <menu+0x1828>)
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c1e:	f002 fc45 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c22:	2108      	movs	r1, #8
 8002c24:	486a      	ldr	r0, [pc, #424]	; (8002dd0 <menu+0x1830>)
 8002c26:	f006 f8a1 	bl	8008d6c <HAL_GPIO_ReadPin>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d10d      	bne.n	8002c4c <menu+0x16ac>
 8002c30:	4b68      	ldr	r3, [pc, #416]	; (8002dd4 <menu+0x1834>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	f083 0301 	eor.w	r3, r3, #1
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d006      	beq.n	8002c4c <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002c3e:	4b62      	ldr	r3, [pc, #392]	; (8002dc8 <menu+0x1828>)
 8002c40:	781a      	ldrb	r2, [r3, #0]
 8002c42:	4b65      	ldr	r3, [pc, #404]	; (8002dd8 <menu+0x1838>)
 8002c44:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002c46:	4b65      	ldr	r3, [pc, #404]	; (8002ddc <menu+0x183c>)
 8002c48:	2201      	movs	r2, #1
 8002c4a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002c4c:	4b64      	ldr	r3, [pc, #400]	; (8002de0 <menu+0x1840>)
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b0c      	cmp	r3, #12
 8002c52:	d17f      	bne.n	8002d54 <menu+0x17b4>
		if(dilSecim == 0) {
 8002c54:	4b63      	ldr	r3, [pc, #396]	; (8002de4 <menu+0x1844>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10a      	bne.n	8002c72 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002c5c:	4a62      	ldr	r2, [pc, #392]	; (8002de8 <menu+0x1848>)
 8002c5e:	2101      	movs	r1, #1
 8002c60:	2001      	movs	r0, #1
 8002c62:	f7fd fc7f 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002c66:	4a61      	ldr	r2, [pc, #388]	; (8002dec <menu+0x184c>)
 8002c68:	2101      	movs	r1, #1
 8002c6a:	2002      	movs	r0, #2
 8002c6c:	f7fd fc7a 	bl	8000564 <lcd_print>
 8002c70:	e00d      	b.n	8002c8e <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002c72:	4b5c      	ldr	r3, [pc, #368]	; (8002de4 <menu+0x1844>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d109      	bne.n	8002c8e <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002c7a:	4a5d      	ldr	r2, [pc, #372]	; (8002df0 <menu+0x1850>)
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	2001      	movs	r0, #1
 8002c80:	f7fd fc70 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002c84:	4a5b      	ldr	r2, [pc, #364]	; (8002df4 <menu+0x1854>)
 8002c86:	2101      	movs	r1, #1
 8002c88:	2002      	movs	r0, #2
 8002c8a:	f7fd fc6b 	bl	8000564 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002c8e:	4b5a      	ldr	r3, [pc, #360]	; (8002df8 <menu+0x1858>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	220a      	movs	r2, #10
 8002c94:	4959      	ldr	r1, [pc, #356]	; (8002dfc <menu+0x185c>)
 8002c96:	4618      	mov	r0, r3
 8002c98:	f009 f85e 	bl	800bd58 <itoa>
		lcd_print(2,16,snum);
 8002c9c:	4a57      	ldr	r2, [pc, #348]	; (8002dfc <menu+0x185c>)
 8002c9e:	2110      	movs	r1, #16
 8002ca0:	2002      	movs	r0, #2
 8002ca2:	f7fd fc5f 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002ca6:	2102      	movs	r1, #2
 8002ca8:	4849      	ldr	r0, [pc, #292]	; (8002dd0 <menu+0x1830>)
 8002caa:	f006 f85f 	bl	8008d6c <HAL_GPIO_ReadPin>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d119      	bne.n	8002ce8 <menu+0x1748>
 8002cb4:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <menu+0x1834>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	f083 0301 	eor.w	r3, r3, #1
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d012      	beq.n	8002ce8 <menu+0x1748>
 8002cc2:	4b41      	ldr	r3, [pc, #260]	; (8002dc8 <menu+0x1828>)
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10e      	bne.n	8002ce8 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002cca:	4b4b      	ldr	r3, [pc, #300]	; (8002df8 <menu+0x1858>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	4b49      	ldr	r3, [pc, #292]	; (8002df8 <menu+0x1858>)
 8002cd4:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002cd6:	4b48      	ldr	r3, [pc, #288]	; (8002df8 <menu+0x1858>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b05      	cmp	r3, #5
 8002cdc:	d902      	bls.n	8002ce4 <menu+0x1744>
				kapi2AcSure = 0;
 8002cde:	4b46      	ldr	r3, [pc, #280]	; (8002df8 <menu+0x1858>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ce4:	f002 fbe2 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002ce8:	2104      	movs	r1, #4
 8002cea:	4839      	ldr	r0, [pc, #228]	; (8002dd0 <menu+0x1830>)
 8002cec:	f006 f83e 	bl	8008d6c <HAL_GPIO_ReadPin>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d119      	bne.n	8002d2a <menu+0x178a>
 8002cf6:	4b37      	ldr	r3, [pc, #220]	; (8002dd4 <menu+0x1834>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	f083 0301 	eor.w	r3, r3, #1
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d012      	beq.n	8002d2a <menu+0x178a>
 8002d04:	4b30      	ldr	r3, [pc, #192]	; (8002dc8 <menu+0x1828>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d10e      	bne.n	8002d2a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002d0c:	4b3a      	ldr	r3, [pc, #232]	; (8002df8 <menu+0x1858>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	4b38      	ldr	r3, [pc, #224]	; (8002df8 <menu+0x1858>)
 8002d16:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002d18:	4b37      	ldr	r3, [pc, #220]	; (8002df8 <menu+0x1858>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b06      	cmp	r3, #6
 8002d1e:	d902      	bls.n	8002d26 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002d20:	4b35      	ldr	r3, [pc, #212]	; (8002df8 <menu+0x1858>)
 8002d22:	2205      	movs	r2, #5
 8002d24:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d26:	f002 fbc1 	bl	80054ac <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d2a:	2108      	movs	r1, #8
 8002d2c:	4828      	ldr	r0, [pc, #160]	; (8002dd0 <menu+0x1830>)
 8002d2e:	f006 f81d 	bl	8008d6c <HAL_GPIO_ReadPin>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d10d      	bne.n	8002d54 <menu+0x17b4>
 8002d38:	4b26      	ldr	r3, [pc, #152]	; (8002dd4 <menu+0x1834>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	f083 0301 	eor.w	r3, r3, #1
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d006      	beq.n	8002d54 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002d46:	4b2c      	ldr	r3, [pc, #176]	; (8002df8 <menu+0x1858>)
 8002d48:	781a      	ldrb	r2, [r3, #0]
 8002d4a:	4b23      	ldr	r3, [pc, #140]	; (8002dd8 <menu+0x1838>)
 8002d4c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002d4e:	4b23      	ldr	r3, [pc, #140]	; (8002ddc <menu+0x183c>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002d54:	4b22      	ldr	r3, [pc, #136]	; (8002de0 <menu+0x1840>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b0d      	cmp	r3, #13
 8002d5a:	f040 80b5 	bne.w	8002ec8 <menu+0x1928>
		if(dilSecim == 0) {
 8002d5e:	4b21      	ldr	r3, [pc, #132]	; (8002de4 <menu+0x1844>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d105      	bne.n	8002d72 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002d66:	4a26      	ldr	r2, [pc, #152]	; (8002e00 <menu+0x1860>)
 8002d68:	2101      	movs	r1, #1
 8002d6a:	2001      	movs	r0, #1
 8002d6c:	f7fd fbfa 	bl	8000564 <lcd_print>
 8002d70:	e008      	b.n	8002d84 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002d72:	4b1c      	ldr	r3, [pc, #112]	; (8002de4 <menu+0x1844>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d104      	bne.n	8002d84 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002d7a:	4a22      	ldr	r2, [pc, #136]	; (8002e04 <menu+0x1864>)
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	2001      	movs	r0, #1
 8002d80:	f7fd fbf0 	bl	8000564 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002d84:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <menu+0x1868>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d105      	bne.n	8002d98 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002d8c:	4a1f      	ldr	r2, [pc, #124]	; (8002e0c <menu+0x186c>)
 8002d8e:	2101      	movs	r1, #1
 8002d90:	2002      	movs	r0, #2
 8002d92:	f7fd fbe7 	bl	8000564 <lcd_print>
 8002d96:	e048      	b.n	8002e2a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002d98:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <menu+0x1868>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d13b      	bne.n	8002e18 <menu+0x1878>
			if(dilSecim == 0) {
 8002da0:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <menu+0x1844>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d105      	bne.n	8002db4 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002da8:	4a19      	ldr	r2, [pc, #100]	; (8002e10 <menu+0x1870>)
 8002daa:	2101      	movs	r1, #1
 8002dac:	2002      	movs	r0, #2
 8002dae:	f7fd fbd9 	bl	8000564 <lcd_print>
 8002db2:	e03a      	b.n	8002e2a <menu+0x188a>
			} else if(dilSecim == 1) {
 8002db4:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <menu+0x1844>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d136      	bne.n	8002e2a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002dbc:	4a15      	ldr	r2, [pc, #84]	; (8002e14 <menu+0x1874>)
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	2002      	movs	r0, #2
 8002dc2:	f7fd fbcf 	bl	8000564 <lcd_print>
 8002dc6:	e030      	b.n	8002e2a <menu+0x188a>
 8002dc8:	200002ba 	.word	0x200002ba
 8002dcc:	0800c458 	.word	0x0800c458
 8002dd0:	40010800 	.word	0x40010800
 8002dd4:	200002df 	.word	0x200002df
 8002dd8:	200001e0 	.word	0x200001e0
 8002ddc:	200002dc 	.word	0x200002dc
 8002de0:	200002b0 	.word	0x200002b0
 8002de4:	200002d1 	.word	0x200002d1
 8002de8:	0800c4d8 	.word	0x0800c4d8
 8002dec:	0800c47c 	.word	0x0800c47c
 8002df0:	0800c4ec 	.word	0x0800c4ec
 8002df4:	0800c4a0 	.word	0x0800c4a0
 8002df8:	200002ca 	.word	0x200002ca
 8002dfc:	20000250 	.word	0x20000250
 8002e00:	0800c500 	.word	0x0800c500
 8002e04:	0800c514 	.word	0x0800c514
 8002e08:	200002bb 	.word	0x200002bb
 8002e0c:	0800c420 	.word	0x0800c420
 8002e10:	0800c434 	.word	0x0800c434
 8002e14:	0800c444 	.word	0x0800c444
			}
		} else if(kapitablaTip == 2) {
 8002e18:	4b5b      	ldr	r3, [pc, #364]	; (8002f88 <menu+0x19e8>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d104      	bne.n	8002e2a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002e20:	4a5a      	ldr	r2, [pc, #360]	; (8002f8c <menu+0x19ec>)
 8002e22:	2101      	movs	r1, #1
 8002e24:	2002      	movs	r0, #2
 8002e26:	f7fd fb9d 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	4858      	ldr	r0, [pc, #352]	; (8002f90 <menu+0x19f0>)
 8002e2e:	f005 ff9d 	bl	8008d6c <HAL_GPIO_ReadPin>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d115      	bne.n	8002e64 <menu+0x18c4>
 8002e38:	4b56      	ldr	r3, [pc, #344]	; (8002f94 <menu+0x19f4>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	f083 0301 	eor.w	r3, r3, #1
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00e      	beq.n	8002e64 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002e46:	4b50      	ldr	r3, [pc, #320]	; (8002f88 <menu+0x19e8>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4b4e      	ldr	r3, [pc, #312]	; (8002f88 <menu+0x19e8>)
 8002e50:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002e52:	4b4d      	ldr	r3, [pc, #308]	; (8002f88 <menu+0x19e8>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d902      	bls.n	8002e60 <menu+0x18c0>
				kapitablaTip = 0;
 8002e5a:	4b4b      	ldr	r3, [pc, #300]	; (8002f88 <menu+0x19e8>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e60:	f002 fb24 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e64:	2104      	movs	r1, #4
 8002e66:	484a      	ldr	r0, [pc, #296]	; (8002f90 <menu+0x19f0>)
 8002e68:	f005 ff80 	bl	8008d6c <HAL_GPIO_ReadPin>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d115      	bne.n	8002e9e <menu+0x18fe>
 8002e72:	4b48      	ldr	r3, [pc, #288]	; (8002f94 <menu+0x19f4>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	f083 0301 	eor.w	r3, r3, #1
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00e      	beq.n	8002e9e <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002e80:	4b41      	ldr	r3, [pc, #260]	; (8002f88 <menu+0x19e8>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	4b3f      	ldr	r3, [pc, #252]	; (8002f88 <menu+0x19e8>)
 8002e8a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002e8c:	4b3e      	ldr	r3, [pc, #248]	; (8002f88 <menu+0x19e8>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d902      	bls.n	8002e9a <menu+0x18fa>
		   		kapitablaTip = 2;
 8002e94:	4b3c      	ldr	r3, [pc, #240]	; (8002f88 <menu+0x19e8>)
 8002e96:	2202      	movs	r2, #2
 8002e98:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e9a:	f002 fb07 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e9e:	2108      	movs	r1, #8
 8002ea0:	483b      	ldr	r0, [pc, #236]	; (8002f90 <menu+0x19f0>)
 8002ea2:	f005 ff63 	bl	8008d6c <HAL_GPIO_ReadPin>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d10d      	bne.n	8002ec8 <menu+0x1928>
 8002eac:	4b39      	ldr	r3, [pc, #228]	; (8002f94 <menu+0x19f4>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	f083 0301 	eor.w	r3, r3, #1
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d006      	beq.n	8002ec8 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002eba:	4b33      	ldr	r3, [pc, #204]	; (8002f88 <menu+0x19e8>)
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	4b36      	ldr	r3, [pc, #216]	; (8002f98 <menu+0x19f8>)
 8002ec0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002ec2:	4b36      	ldr	r3, [pc, #216]	; (8002f9c <menu+0x19fc>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002ec8:	4b35      	ldr	r3, [pc, #212]	; (8002fa0 <menu+0x1a00>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b0e      	cmp	r3, #14
 8002ece:	f040 80f2 	bne.w	80030b6 <menu+0x1b16>
		if(dilSecim == 0) {
 8002ed2:	4b34      	ldr	r3, [pc, #208]	; (8002fa4 <menu+0x1a04>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d105      	bne.n	8002ee6 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002eda:	4a33      	ldr	r2, [pc, #204]	; (8002fa8 <menu+0x1a08>)
 8002edc:	2101      	movs	r1, #1
 8002ede:	2001      	movs	r0, #1
 8002ee0:	f7fd fb40 	bl	8000564 <lcd_print>
 8002ee4:	e008      	b.n	8002ef8 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002ee6:	4b2f      	ldr	r3, [pc, #188]	; (8002fa4 <menu+0x1a04>)
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d104      	bne.n	8002ef8 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002eee:	4a2f      	ldr	r2, [pc, #188]	; (8002fac <menu+0x1a0c>)
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	2001      	movs	r0, #1
 8002ef4:	f7fd fb36 	bl	8000564 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002ef8:	4b2d      	ldr	r3, [pc, #180]	; (8002fb0 <menu+0x1a10>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d113      	bne.n	8002f28 <menu+0x1988>
			if(dilSecim == 0){
 8002f00:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <menu+0x1a04>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d105      	bne.n	8002f14 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002f08:	4a2a      	ldr	r2, [pc, #168]	; (8002fb4 <menu+0x1a14>)
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	2002      	movs	r0, #2
 8002f0e:	f7fd fb29 	bl	8000564 <lcd_print>
 8002f12:	e071      	b.n	8002ff8 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002f14:	4b23      	ldr	r3, [pc, #140]	; (8002fa4 <menu+0x1a04>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d16d      	bne.n	8002ff8 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002f1c:	4a26      	ldr	r2, [pc, #152]	; (8002fb8 <menu+0x1a18>)
 8002f1e:	2101      	movs	r1, #1
 8002f20:	2002      	movs	r0, #2
 8002f22:	f7fd fb1f 	bl	8000564 <lcd_print>
 8002f26:	e067      	b.n	8002ff8 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002f28:	4b21      	ldr	r3, [pc, #132]	; (8002fb0 <menu+0x1a10>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d112      	bne.n	8002f56 <menu+0x19b6>
			if(dilSecim == 0){
 8002f30:	4b1c      	ldr	r3, [pc, #112]	; (8002fa4 <menu+0x1a04>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d104      	bne.n	8002f42 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002f38:	4a20      	ldr	r2, [pc, #128]	; (8002fbc <menu+0x1a1c>)
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	2002      	movs	r0, #2
 8002f3e:	f7fd fb11 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1){
 8002f42:	4b18      	ldr	r3, [pc, #96]	; (8002fa4 <menu+0x1a04>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d156      	bne.n	8002ff8 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002f4a:	4a1d      	ldr	r2, [pc, #116]	; (8002fc0 <menu+0x1a20>)
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	2002      	movs	r0, #2
 8002f50:	f7fd fb08 	bl	8000564 <lcd_print>
 8002f54:	e050      	b.n	8002ff8 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002f56:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <menu+0x1a10>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d136      	bne.n	8002fcc <menu+0x1a2c>
			if(dilSecim == 0){
 8002f5e:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <menu+0x1a04>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d105      	bne.n	8002f72 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002f66:	4a17      	ldr	r2, [pc, #92]	; (8002fc4 <menu+0x1a24>)
 8002f68:	2101      	movs	r1, #1
 8002f6a:	2002      	movs	r0, #2
 8002f6c:	f7fd fafa 	bl	8000564 <lcd_print>
 8002f70:	e042      	b.n	8002ff8 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002f72:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <menu+0x1a04>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d13e      	bne.n	8002ff8 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002f7a:	4a13      	ldr	r2, [pc, #76]	; (8002fc8 <menu+0x1a28>)
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	2002      	movs	r0, #2
 8002f80:	f7fd faf0 	bl	8000564 <lcd_print>
 8002f84:	e038      	b.n	8002ff8 <menu+0x1a58>
 8002f86:	bf00      	nop
 8002f88:	200002bb 	.word	0x200002bb
 8002f8c:	0800c458 	.word	0x0800c458
 8002f90:	40010800 	.word	0x40010800
 8002f94:	200002df 	.word	0x200002df
 8002f98:	200001e0 	.word	0x200001e0
 8002f9c:	200002dc 	.word	0x200002dc
 8002fa0:	200002b0 	.word	0x200002b0
 8002fa4:	200002d1 	.word	0x200002d1
 8002fa8:	0800c528 	.word	0x0800c528
 8002fac:	0800c53c 	.word	0x0800c53c
 8002fb0:	200002bd 	.word	0x200002bd
 8002fb4:	0800c550 	.word	0x0800c550
 8002fb8:	0800c560 	.word	0x0800c560
 8002fbc:	0800c570 	.word	0x0800c570
 8002fc0:	0800c580 	.word	0x0800c580
 8002fc4:	0800c590 	.word	0x0800c590
 8002fc8:	0800c5a4 	.word	0x0800c5a4
			}
		} else if(kapiTablaAcKonum == 3) {
 8002fcc:	4b9b      	ldr	r3, [pc, #620]	; (800323c <menu+0x1c9c>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d111      	bne.n	8002ff8 <menu+0x1a58>
			if(dilSecim == 0) {
 8002fd4:	4b9a      	ldr	r3, [pc, #616]	; (8003240 <menu+0x1ca0>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d104      	bne.n	8002fe6 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002fdc:	4a99      	ldr	r2, [pc, #612]	; (8003244 <menu+0x1ca4>)
 8002fde:	2101      	movs	r1, #1
 8002fe0:	2002      	movs	r0, #2
 8002fe2:	f7fd fabf 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1) {
 8002fe6:	4b96      	ldr	r3, [pc, #600]	; (8003240 <menu+0x1ca0>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d104      	bne.n	8002ff8 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002fee:	4a96      	ldr	r2, [pc, #600]	; (8003248 <menu+0x1ca8>)
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	2002      	movs	r0, #2
 8002ff4:	f7fd fab6 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ff8:	2102      	movs	r1, #2
 8002ffa:	4894      	ldr	r0, [pc, #592]	; (800324c <menu+0x1cac>)
 8002ffc:	f005 feb6 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003000:	4603      	mov	r3, r0
 8003002:	2b01      	cmp	r3, #1
 8003004:	d115      	bne.n	8003032 <menu+0x1a92>
 8003006:	4b92      	ldr	r3, [pc, #584]	; (8003250 <menu+0x1cb0>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	f083 0301 	eor.w	r3, r3, #1
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00e      	beq.n	8003032 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8003014:	4b89      	ldr	r3, [pc, #548]	; (800323c <menu+0x1c9c>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	3301      	adds	r3, #1
 800301a:	b2da      	uxtb	r2, r3
 800301c:	4b87      	ldr	r3, [pc, #540]	; (800323c <menu+0x1c9c>)
 800301e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8003020:	4b86      	ldr	r3, [pc, #536]	; (800323c <menu+0x1c9c>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d902      	bls.n	800302e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8003028:	4b84      	ldr	r3, [pc, #528]	; (800323c <menu+0x1c9c>)
 800302a:	2200      	movs	r2, #0
 800302c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800302e:	f002 fa3d 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003032:	2104      	movs	r1, #4
 8003034:	4885      	ldr	r0, [pc, #532]	; (800324c <menu+0x1cac>)
 8003036:	f005 fe99 	bl	8008d6c <HAL_GPIO_ReadPin>
 800303a:	4603      	mov	r3, r0
 800303c:	2b01      	cmp	r3, #1
 800303e:	d115      	bne.n	800306c <menu+0x1acc>
 8003040:	4b83      	ldr	r3, [pc, #524]	; (8003250 <menu+0x1cb0>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	f083 0301 	eor.w	r3, r3, #1
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00e      	beq.n	800306c <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 800304e:	4b7b      	ldr	r3, [pc, #492]	; (800323c <menu+0x1c9c>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	3b01      	subs	r3, #1
 8003054:	b2da      	uxtb	r2, r3
 8003056:	4b79      	ldr	r3, [pc, #484]	; (800323c <menu+0x1c9c>)
 8003058:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 800305a:	4b78      	ldr	r3, [pc, #480]	; (800323c <menu+0x1c9c>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b03      	cmp	r3, #3
 8003060:	d902      	bls.n	8003068 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8003062:	4b76      	ldr	r3, [pc, #472]	; (800323c <menu+0x1c9c>)
 8003064:	2202      	movs	r2, #2
 8003066:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003068:	f002 fa20 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800306c:	2108      	movs	r1, #8
 800306e:	4877      	ldr	r0, [pc, #476]	; (800324c <menu+0x1cac>)
 8003070:	f005 fe7c 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003074:	4603      	mov	r3, r0
 8003076:	2b01      	cmp	r3, #1
 8003078:	d11d      	bne.n	80030b6 <menu+0x1b16>
 800307a:	4b75      	ldr	r3, [pc, #468]	; (8003250 <menu+0x1cb0>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	f083 0301 	eor.w	r3, r3, #1
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d016      	beq.n	80030b6 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8003088:	4b6c      	ldr	r3, [pc, #432]	; (800323c <menu+0x1c9c>)
 800308a:	781a      	ldrb	r2, [r3, #0]
 800308c:	4b71      	ldr	r3, [pc, #452]	; (8003254 <menu+0x1cb4>)
 800308e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8003092:	4b6a      	ldr	r3, [pc, #424]	; (800323c <menu+0x1c9c>)
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <menu+0x1b02>
 800309a:	4b68      	ldr	r3, [pc, #416]	; (800323c <menu+0x1c9c>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d106      	bne.n	80030b0 <menu+0x1b10>
				altLimit = 1;
 80030a2:	4b6d      	ldr	r3, [pc, #436]	; (8003258 <menu+0x1cb8>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80030a8:	4b6b      	ldr	r3, [pc, #428]	; (8003258 <menu+0x1cb8>)
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	4b69      	ldr	r3, [pc, #420]	; (8003254 <menu+0x1cb4>)
 80030ae:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 80030b0:	4b6a      	ldr	r3, [pc, #424]	; (800325c <menu+0x1cbc>)
 80030b2:	2201      	movs	r2, #1
 80030b4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 80030b6:	4b6a      	ldr	r3, [pc, #424]	; (8003260 <menu+0x1cc0>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b0f      	cmp	r3, #15
 80030bc:	d17f      	bne.n	80031be <menu+0x1c1e>
		if(dilSecim == 0) {
 80030be:	4b60      	ldr	r3, [pc, #384]	; (8003240 <menu+0x1ca0>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10a      	bne.n	80030dc <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 80030c6:	4a67      	ldr	r2, [pc, #412]	; (8003264 <menu+0x1cc4>)
 80030c8:	2101      	movs	r1, #1
 80030ca:	2001      	movs	r0, #1
 80030cc:	f7fd fa4a 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80030d0:	4a65      	ldr	r2, [pc, #404]	; (8003268 <menu+0x1cc8>)
 80030d2:	2101      	movs	r1, #1
 80030d4:	2002      	movs	r0, #2
 80030d6:	f7fd fa45 	bl	8000564 <lcd_print>
 80030da:	e00d      	b.n	80030f8 <menu+0x1b58>
		} else if(dilSecim == 1) {
 80030dc:	4b58      	ldr	r3, [pc, #352]	; (8003240 <menu+0x1ca0>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d109      	bne.n	80030f8 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 80030e4:	4a61      	ldr	r2, [pc, #388]	; (800326c <menu+0x1ccc>)
 80030e6:	2101      	movs	r1, #1
 80030e8:	2001      	movs	r0, #1
 80030ea:	f7fd fa3b 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80030ee:	4a60      	ldr	r2, [pc, #384]	; (8003270 <menu+0x1cd0>)
 80030f0:	2101      	movs	r1, #1
 80030f2:	2002      	movs	r0, #2
 80030f4:	f7fd fa36 	bl	8000564 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 80030f8:	4b5e      	ldr	r3, [pc, #376]	; (8003274 <menu+0x1cd4>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	220a      	movs	r2, #10
 80030fe:	495e      	ldr	r1, [pc, #376]	; (8003278 <menu+0x1cd8>)
 8003100:	4618      	mov	r0, r3
 8003102:	f008 fe29 	bl	800bd58 <itoa>
		lcd_print(2,16,snum);
 8003106:	4a5c      	ldr	r2, [pc, #368]	; (8003278 <menu+0x1cd8>)
 8003108:	2110      	movs	r1, #16
 800310a:	2002      	movs	r0, #2
 800310c:	f7fd fa2a 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003110:	2102      	movs	r1, #2
 8003112:	484e      	ldr	r0, [pc, #312]	; (800324c <menu+0x1cac>)
 8003114:	f005 fe2a 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003118:	4603      	mov	r3, r0
 800311a:	2b01      	cmp	r3, #1
 800311c:	d119      	bne.n	8003152 <menu+0x1bb2>
 800311e:	4b4c      	ldr	r3, [pc, #304]	; (8003250 <menu+0x1cb0>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	f083 0301 	eor.w	r3, r3, #1
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d012      	beq.n	8003152 <menu+0x1bb2>
 800312c:	4b53      	ldr	r3, [pc, #332]	; (800327c <menu+0x1cdc>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10e      	bne.n	8003152 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8003134:	4b4f      	ldr	r3, [pc, #316]	; (8003274 <menu+0x1cd4>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	b2da      	uxtb	r2, r3
 800313c:	4b4d      	ldr	r3, [pc, #308]	; (8003274 <menu+0x1cd4>)
 800313e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8003140:	4b4c      	ldr	r3, [pc, #304]	; (8003274 <menu+0x1cd4>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b05      	cmp	r3, #5
 8003146:	d902      	bls.n	800314e <menu+0x1bae>
				kapiTablaAcSure = 0;
 8003148:	4b4a      	ldr	r3, [pc, #296]	; (8003274 <menu+0x1cd4>)
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800314e:	f002 f9ad 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003152:	2104      	movs	r1, #4
 8003154:	483d      	ldr	r0, [pc, #244]	; (800324c <menu+0x1cac>)
 8003156:	f005 fe09 	bl	8008d6c <HAL_GPIO_ReadPin>
 800315a:	4603      	mov	r3, r0
 800315c:	2b01      	cmp	r3, #1
 800315e:	d119      	bne.n	8003194 <menu+0x1bf4>
 8003160:	4b3b      	ldr	r3, [pc, #236]	; (8003250 <menu+0x1cb0>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	f083 0301 	eor.w	r3, r3, #1
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d012      	beq.n	8003194 <menu+0x1bf4>
 800316e:	4b43      	ldr	r3, [pc, #268]	; (800327c <menu+0x1cdc>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10e      	bne.n	8003194 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8003176:	4b3f      	ldr	r3, [pc, #252]	; (8003274 <menu+0x1cd4>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	3b01      	subs	r3, #1
 800317c:	b2da      	uxtb	r2, r3
 800317e:	4b3d      	ldr	r3, [pc, #244]	; (8003274 <menu+0x1cd4>)
 8003180:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8003182:	4b3c      	ldr	r3, [pc, #240]	; (8003274 <menu+0x1cd4>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b06      	cmp	r3, #6
 8003188:	d902      	bls.n	8003190 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 800318a:	4b3a      	ldr	r3, [pc, #232]	; (8003274 <menu+0x1cd4>)
 800318c:	2205      	movs	r2, #5
 800318e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003190:	f002 f98c 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003194:	2108      	movs	r1, #8
 8003196:	482d      	ldr	r0, [pc, #180]	; (800324c <menu+0x1cac>)
 8003198:	f005 fde8 	bl	8008d6c <HAL_GPIO_ReadPin>
 800319c:	4603      	mov	r3, r0
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d10d      	bne.n	80031be <menu+0x1c1e>
 80031a2:	4b2b      	ldr	r3, [pc, #172]	; (8003250 <menu+0x1cb0>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	f083 0301 	eor.w	r3, r3, #1
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d006      	beq.n	80031be <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 80031b0:	4b30      	ldr	r3, [pc, #192]	; (8003274 <menu+0x1cd4>)
 80031b2:	781a      	ldrb	r2, [r3, #0]
 80031b4:	4b27      	ldr	r3, [pc, #156]	; (8003254 <menu+0x1cb4>)
 80031b6:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80031b8:	4b28      	ldr	r3, [pc, #160]	; (800325c <menu+0x1cbc>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80031be:	4b28      	ldr	r3, [pc, #160]	; (8003260 <menu+0x1cc0>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b10      	cmp	r3, #16
 80031c4:	f040 80bc 	bne.w	8003340 <menu+0x1da0>
		if(dilSecim == 0) {
 80031c8:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <menu+0x1ca0>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d105      	bne.n	80031dc <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80031d0:	4a2b      	ldr	r2, [pc, #172]	; (8003280 <menu+0x1ce0>)
 80031d2:	2101      	movs	r1, #1
 80031d4:	2001      	movs	r0, #1
 80031d6:	f7fd f9c5 	bl	8000564 <lcd_print>
 80031da:	e008      	b.n	80031ee <menu+0x1c4e>
		} else if(dilSecim == 1) {
 80031dc:	4b18      	ldr	r3, [pc, #96]	; (8003240 <menu+0x1ca0>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d104      	bne.n	80031ee <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 80031e4:	4a27      	ldr	r2, [pc, #156]	; (8003284 <menu+0x1ce4>)
 80031e6:	2101      	movs	r1, #1
 80031e8:	2001      	movs	r0, #1
 80031ea:	f7fd f9bb 	bl	8000564 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80031ee:	4b26      	ldr	r3, [pc, #152]	; (8003288 <menu+0x1ce8>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d113      	bne.n	800321e <menu+0x1c7e>
			if(dilSecim == 0) {
 80031f6:	4b12      	ldr	r3, [pc, #72]	; (8003240 <menu+0x1ca0>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d105      	bne.n	800320a <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 80031fe:	4a11      	ldr	r2, [pc, #68]	; (8003244 <menu+0x1ca4>)
 8003200:	2101      	movs	r1, #1
 8003202:	2002      	movs	r0, #2
 8003204:	f7fd f9ae 	bl	8000564 <lcd_print>
 8003208:	e04b      	b.n	80032a2 <menu+0x1d02>
			} else if(dilSecim == 1) {
 800320a:	4b0d      	ldr	r3, [pc, #52]	; (8003240 <menu+0x1ca0>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d147      	bne.n	80032a2 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8003212:	4a0d      	ldr	r2, [pc, #52]	; (8003248 <menu+0x1ca8>)
 8003214:	2101      	movs	r1, #1
 8003216:	2002      	movs	r0, #2
 8003218:	f7fd f9a4 	bl	8000564 <lcd_print>
 800321c:	e041      	b.n	80032a2 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 800321e:	4b1a      	ldr	r3, [pc, #104]	; (8003288 <menu+0x1ce8>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d13d      	bne.n	80032a2 <menu+0x1d02>
			if(dilSecim == 0) {
 8003226:	4b06      	ldr	r3, [pc, #24]	; (8003240 <menu+0x1ca0>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d130      	bne.n	8003290 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 800322e:	4a17      	ldr	r2, [pc, #92]	; (800328c <menu+0x1cec>)
 8003230:	2101      	movs	r1, #1
 8003232:	2002      	movs	r0, #2
 8003234:	f7fd f996 	bl	8000564 <lcd_print>
 8003238:	e033      	b.n	80032a2 <menu+0x1d02>
 800323a:	bf00      	nop
 800323c:	200002bd 	.word	0x200002bd
 8003240:	200002d1 	.word	0x200002d1
 8003244:	0800c218 	.word	0x0800c218
 8003248:	0800c22c 	.word	0x0800c22c
 800324c:	40010800 	.word	0x40010800
 8003250:	200002df 	.word	0x200002df
 8003254:	200001e0 	.word	0x200001e0
 8003258:	200002b6 	.word	0x200002b6
 800325c:	200002dc 	.word	0x200002dc
 8003260:	200002b0 	.word	0x200002b0
 8003264:	0800c5b8 	.word	0x0800c5b8
 8003268:	0800c47c 	.word	0x0800c47c
 800326c:	0800c5cc 	.word	0x0800c5cc
 8003270:	0800c4a0 	.word	0x0800c4a0
 8003274:	200002cb 	.word	0x200002cb
 8003278:	20000250 	.word	0x20000250
 800327c:	200002bb 	.word	0x200002bb
 8003280:	0800c5e0 	.word	0x0800c5e0
 8003284:	0800c5f4 	.word	0x0800c5f4
 8003288:	200002be 	.word	0x200002be
 800328c:	0800c278 	.word	0x0800c278
			} else if(dilSecim == 1) {
 8003290:	4b99      	ldr	r3, [pc, #612]	; (80034f8 <menu+0x1f58>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d104      	bne.n	80032a2 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8003298:	4a98      	ldr	r2, [pc, #608]	; (80034fc <menu+0x1f5c>)
 800329a:	2101      	movs	r1, #1
 800329c:	2002      	movs	r0, #2
 800329e:	f7fd f961 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032a2:	2102      	movs	r1, #2
 80032a4:	4896      	ldr	r0, [pc, #600]	; (8003500 <menu+0x1f60>)
 80032a6:	f005 fd61 	bl	8008d6c <HAL_GPIO_ReadPin>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d115      	bne.n	80032dc <menu+0x1d3c>
 80032b0:	4b94      	ldr	r3, [pc, #592]	; (8003504 <menu+0x1f64>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	f083 0301 	eor.w	r3, r3, #1
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00e      	beq.n	80032dc <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80032be:	4b92      	ldr	r3, [pc, #584]	; (8003508 <menu+0x1f68>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	3301      	adds	r3, #1
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	4b90      	ldr	r3, [pc, #576]	; (8003508 <menu+0x1f68>)
 80032c8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80032ca:	4b8f      	ldr	r3, [pc, #572]	; (8003508 <menu+0x1f68>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d902      	bls.n	80032d8 <menu+0x1d38>
				yukariYavasLimit = 0;
 80032d2:	4b8d      	ldr	r3, [pc, #564]	; (8003508 <menu+0x1f68>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032d8:	f002 f8e8 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032dc:	2104      	movs	r1, #4
 80032de:	4888      	ldr	r0, [pc, #544]	; (8003500 <menu+0x1f60>)
 80032e0:	f005 fd44 	bl	8008d6c <HAL_GPIO_ReadPin>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d115      	bne.n	8003316 <menu+0x1d76>
 80032ea:	4b86      	ldr	r3, [pc, #536]	; (8003504 <menu+0x1f64>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	f083 0301 	eor.w	r3, r3, #1
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00e      	beq.n	8003316 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 80032f8:	4b83      	ldr	r3, [pc, #524]	; (8003508 <menu+0x1f68>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b2da      	uxtb	r2, r3
 8003300:	4b81      	ldr	r3, [pc, #516]	; (8003508 <menu+0x1f68>)
 8003302:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003304:	4b80      	ldr	r3, [pc, #512]	; (8003508 <menu+0x1f68>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d002      	beq.n	8003312 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 800330c:	4b7e      	ldr	r3, [pc, #504]	; (8003508 <menu+0x1f68>)
 800330e:	2201      	movs	r2, #1
 8003310:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003312:	f002 f8cb 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003316:	2108      	movs	r1, #8
 8003318:	4879      	ldr	r0, [pc, #484]	; (8003500 <menu+0x1f60>)
 800331a:	f005 fd27 	bl	8008d6c <HAL_GPIO_ReadPin>
 800331e:	4603      	mov	r3, r0
 8003320:	2b01      	cmp	r3, #1
 8003322:	d10d      	bne.n	8003340 <menu+0x1da0>
 8003324:	4b77      	ldr	r3, [pc, #476]	; (8003504 <menu+0x1f64>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	f083 0301 	eor.w	r3, r3, #1
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d006      	beq.n	8003340 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8003332:	4b75      	ldr	r3, [pc, #468]	; (8003508 <menu+0x1f68>)
 8003334:	781a      	ldrb	r2, [r3, #0]
 8003336:	4b75      	ldr	r3, [pc, #468]	; (800350c <menu+0x1f6c>)
 8003338:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800333a:	4b75      	ldr	r3, [pc, #468]	; (8003510 <menu+0x1f70>)
 800333c:	2201      	movs	r2, #1
 800333e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003340:	4b74      	ldr	r3, [pc, #464]	; (8003514 <menu+0x1f74>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b11      	cmp	r3, #17
 8003346:	f040 80c3 	bne.w	80034d0 <menu+0x1f30>
		if(dilSecim == 0) {
 800334a:	4b6b      	ldr	r3, [pc, #428]	; (80034f8 <menu+0x1f58>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d105      	bne.n	800335e <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8003352:	4a71      	ldr	r2, [pc, #452]	; (8003518 <menu+0x1f78>)
 8003354:	2101      	movs	r1, #1
 8003356:	2001      	movs	r0, #1
 8003358:	f7fd f904 	bl	8000564 <lcd_print>
 800335c:	e008      	b.n	8003370 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800335e:	4b66      	ldr	r3, [pc, #408]	; (80034f8 <menu+0x1f58>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d104      	bne.n	8003370 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8003366:	4a6d      	ldr	r2, [pc, #436]	; (800351c <menu+0x1f7c>)
 8003368:	2101      	movs	r1, #1
 800336a:	2001      	movs	r0, #1
 800336c:	f7fd f8fa 	bl	8000564 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003370:	4b6b      	ldr	r3, [pc, #428]	; (8003520 <menu+0x1f80>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b02      	cmp	r3, #2
 8003376:	d113      	bne.n	80033a0 <menu+0x1e00>
			if(dilSecim == 0){
 8003378:	4b5f      	ldr	r3, [pc, #380]	; (80034f8 <menu+0x1f58>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d105      	bne.n	800338c <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003380:	4a68      	ldr	r2, [pc, #416]	; (8003524 <menu+0x1f84>)
 8003382:	2101      	movs	r1, #1
 8003384:	2002      	movs	r0, #2
 8003386:	f7fd f8ed 	bl	8000564 <lcd_print>
 800338a:	e038      	b.n	80033fe <menu+0x1e5e>
			} else if(dilSecim == 1){
 800338c:	4b5a      	ldr	r3, [pc, #360]	; (80034f8 <menu+0x1f58>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d134      	bne.n	80033fe <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8003394:	4a64      	ldr	r2, [pc, #400]	; (8003528 <menu+0x1f88>)
 8003396:	2101      	movs	r1, #1
 8003398:	2002      	movs	r0, #2
 800339a:	f7fd f8e3 	bl	8000564 <lcd_print>
 800339e:	e02e      	b.n	80033fe <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80033a0:	4b5f      	ldr	r3, [pc, #380]	; (8003520 <menu+0x1f80>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d113      	bne.n	80033d0 <menu+0x1e30>
			if(dilSecim == 0){
 80033a8:	4b53      	ldr	r3, [pc, #332]	; (80034f8 <menu+0x1f58>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d105      	bne.n	80033bc <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80033b0:	4a5e      	ldr	r2, [pc, #376]	; (800352c <menu+0x1f8c>)
 80033b2:	2101      	movs	r1, #1
 80033b4:	2002      	movs	r0, #2
 80033b6:	f7fd f8d5 	bl	8000564 <lcd_print>
 80033ba:	e020      	b.n	80033fe <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80033bc:	4b4e      	ldr	r3, [pc, #312]	; (80034f8 <menu+0x1f58>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d11c      	bne.n	80033fe <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80033c4:	4a5a      	ldr	r2, [pc, #360]	; (8003530 <menu+0x1f90>)
 80033c6:	2101      	movs	r1, #1
 80033c8:	2002      	movs	r0, #2
 80033ca:	f7fd f8cb 	bl	8000564 <lcd_print>
 80033ce:	e016      	b.n	80033fe <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80033d0:	4b53      	ldr	r3, [pc, #332]	; (8003520 <menu+0x1f80>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d112      	bne.n	80033fe <menu+0x1e5e>
			if(dilSecim == 0) {
 80033d8:	4b47      	ldr	r3, [pc, #284]	; (80034f8 <menu+0x1f58>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d105      	bne.n	80033ec <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80033e0:	4a54      	ldr	r2, [pc, #336]	; (8003534 <menu+0x1f94>)
 80033e2:	2101      	movs	r1, #1
 80033e4:	2002      	movs	r0, #2
 80033e6:	f7fd f8bd 	bl	8000564 <lcd_print>
 80033ea:	e008      	b.n	80033fe <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80033ec:	4b42      	ldr	r3, [pc, #264]	; (80034f8 <menu+0x1f58>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d104      	bne.n	80033fe <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 80033f4:	4a50      	ldr	r2, [pc, #320]	; (8003538 <menu+0x1f98>)
 80033f6:	2101      	movs	r1, #1
 80033f8:	2002      	movs	r0, #2
 80033fa:	f7fd f8b3 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033fe:	2102      	movs	r1, #2
 8003400:	483f      	ldr	r0, [pc, #252]	; (8003500 <menu+0x1f60>)
 8003402:	f005 fcb3 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003406:	4603      	mov	r3, r0
 8003408:	2b01      	cmp	r3, #1
 800340a:	d115      	bne.n	8003438 <menu+0x1e98>
 800340c:	4b3d      	ldr	r3, [pc, #244]	; (8003504 <menu+0x1f64>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	f083 0301 	eor.w	r3, r3, #1
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00e      	beq.n	8003438 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800341a:	4b41      	ldr	r3, [pc, #260]	; (8003520 <menu+0x1f80>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	3301      	adds	r3, #1
 8003420:	b2da      	uxtb	r2, r3
 8003422:	4b3f      	ldr	r3, [pc, #252]	; (8003520 <menu+0x1f80>)
 8003424:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003426:	4b3e      	ldr	r3, [pc, #248]	; (8003520 <menu+0x1f80>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b02      	cmp	r3, #2
 800342c:	d902      	bls.n	8003434 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800342e:	4b3c      	ldr	r3, [pc, #240]	; (8003520 <menu+0x1f80>)
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003434:	f002 f83a 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003438:	2104      	movs	r1, #4
 800343a:	4831      	ldr	r0, [pc, #196]	; (8003500 <menu+0x1f60>)
 800343c:	f005 fc96 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003440:	4603      	mov	r3, r0
 8003442:	2b01      	cmp	r3, #1
 8003444:	d115      	bne.n	8003472 <menu+0x1ed2>
 8003446:	4b2f      	ldr	r3, [pc, #188]	; (8003504 <menu+0x1f64>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	f083 0301 	eor.w	r3, r3, #1
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00e      	beq.n	8003472 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003454:	4b32      	ldr	r3, [pc, #200]	; (8003520 <menu+0x1f80>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	3b01      	subs	r3, #1
 800345a:	b2da      	uxtb	r2, r3
 800345c:	4b30      	ldr	r3, [pc, #192]	; (8003520 <menu+0x1f80>)
 800345e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003460:	4b2f      	ldr	r3, [pc, #188]	; (8003520 <menu+0x1f80>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b03      	cmp	r3, #3
 8003466:	d902      	bls.n	800346e <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003468:	4b2d      	ldr	r3, [pc, #180]	; (8003520 <menu+0x1f80>)
 800346a:	2202      	movs	r2, #2
 800346c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800346e:	f002 f81d 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003472:	2108      	movs	r1, #8
 8003474:	4822      	ldr	r0, [pc, #136]	; (8003500 <menu+0x1f60>)
 8003476:	f005 fc79 	bl	8008d6c <HAL_GPIO_ReadPin>
 800347a:	4603      	mov	r3, r0
 800347c:	2b01      	cmp	r3, #1
 800347e:	d127      	bne.n	80034d0 <menu+0x1f30>
 8003480:	4b20      	ldr	r3, [pc, #128]	; (8003504 <menu+0x1f64>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	f083 0301 	eor.w	r3, r3, #1
 8003488:	b2db      	uxtb	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d020      	beq.n	80034d0 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 800348e:	4b24      	ldr	r3, [pc, #144]	; (8003520 <menu+0x1f80>)
 8003490:	781a      	ldrb	r2, [r3, #0]
 8003492:	4b1e      	ldr	r3, [pc, #120]	; (800350c <menu+0x1f6c>)
 8003494:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8003496:	4b22      	ldr	r3, [pc, #136]	; (8003520 <menu+0x1f80>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b02      	cmp	r3, #2
 800349c:	d003      	beq.n	80034a6 <menu+0x1f06>
 800349e:	4b20      	ldr	r3, [pc, #128]	; (8003520 <menu+0x1f80>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d106      	bne.n	80034b4 <menu+0x1f14>
				calismaSekli = 0;
 80034a6:	4b25      	ldr	r3, [pc, #148]	; (800353c <menu+0x1f9c>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80034ac:	4b23      	ldr	r3, [pc, #140]	; (800353c <menu+0x1f9c>)
 80034ae:	781a      	ldrb	r2, [r3, #0]
 80034b0:	4b16      	ldr	r3, [pc, #88]	; (800350c <menu+0x1f6c>)
 80034b2:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80034b4:	4b1a      	ldr	r3, [pc, #104]	; (8003520 <menu+0x1f80>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d106      	bne.n	80034ca <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80034bc:	4b20      	ldr	r3, [pc, #128]	; (8003540 <menu+0x1fa0>)
 80034be:	2201      	movs	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80034c2:	4b1f      	ldr	r3, [pc, #124]	; (8003540 <menu+0x1fa0>)
 80034c4:	781a      	ldrb	r2, [r3, #0]
 80034c6:	4b11      	ldr	r3, [pc, #68]	; (800350c <menu+0x1f6c>)
 80034c8:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80034ca:	4b11      	ldr	r3, [pc, #68]	; (8003510 <menu+0x1f70>)
 80034cc:	2201      	movs	r2, #1
 80034ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80034d0:	4b10      	ldr	r3, [pc, #64]	; (8003514 <menu+0x1f74>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b12      	cmp	r3, #18
 80034d6:	f040 80d5 	bne.w	8003684 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80034da:	4b11      	ldr	r3, [pc, #68]	; (8003520 <menu+0x1f80>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d13c      	bne.n	800355c <menu+0x1fbc>
			if(dilSecim == 0) {
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <menu+0x1f58>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d12e      	bne.n	8003548 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80034ea:	4a16      	ldr	r2, [pc, #88]	; (8003544 <menu+0x1fa4>)
 80034ec:	2101      	movs	r1, #1
 80034ee:	2001      	movs	r0, #1
 80034f0:	f7fd f838 	bl	8000564 <lcd_print>
 80034f4:	e048      	b.n	8003588 <menu+0x1fe8>
 80034f6:	bf00      	nop
 80034f8:	200002d1 	.word	0x200002d1
 80034fc:	0800c28c 	.word	0x0800c28c
 8003500:	40010800 	.word	0x40010800
 8003504:	200002df 	.word	0x200002df
 8003508:	200002be 	.word	0x200002be
 800350c:	200001e0 	.word	0x200001e0
 8003510:	200002dc 	.word	0x200002dc
 8003514:	200002b0 	.word	0x200002b0
 8003518:	0800c608 	.word	0x0800c608
 800351c:	0800c61c 	.word	0x0800c61c
 8003520:	200002bf 	.word	0x200002bf
 8003524:	0800c630 	.word	0x0800c630
 8003528:	0800c640 	.word	0x0800c640
 800352c:	0800c650 	.word	0x0800c650
 8003530:	0800c660 	.word	0x0800c660
 8003534:	0800c218 	.word	0x0800c218
 8003538:	0800c22c 	.word	0x0800c22c
 800353c:	200002b1 	.word	0x200002b1
 8003540:	200002c2 	.word	0x200002c2
 8003544:	0800c670 	.word	0x0800c670
			} else if(dilSecim == 1) {
 8003548:	4b7b      	ldr	r3, [pc, #492]	; (8003738 <menu+0x2198>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d11b      	bne.n	8003588 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003550:	4a7a      	ldr	r2, [pc, #488]	; (800373c <menu+0x219c>)
 8003552:	2101      	movs	r1, #1
 8003554:	2001      	movs	r0, #1
 8003556:	f7fd f805 	bl	8000564 <lcd_print>
 800355a:	e015      	b.n	8003588 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800355c:	4b78      	ldr	r3, [pc, #480]	; (8003740 <menu+0x21a0>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d111      	bne.n	8003588 <menu+0x1fe8>
			if(dilSecim == 0){
 8003564:	4b74      	ldr	r3, [pc, #464]	; (8003738 <menu+0x2198>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d104      	bne.n	8003576 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800356c:	4a75      	ldr	r2, [pc, #468]	; (8003744 <menu+0x21a4>)
 800356e:	2101      	movs	r1, #1
 8003570:	2001      	movs	r0, #1
 8003572:	f7fc fff7 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1){
 8003576:	4b70      	ldr	r3, [pc, #448]	; (8003738 <menu+0x2198>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d104      	bne.n	8003588 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800357e:	4a72      	ldr	r2, [pc, #456]	; (8003748 <menu+0x21a8>)
 8003580:	2101      	movs	r1, #1
 8003582:	2001      	movs	r0, #1
 8003584:	f7fc ffee 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003588:	4b70      	ldr	r3, [pc, #448]	; (800374c <menu+0x21ac>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d113      	bne.n	80035b8 <menu+0x2018>
			if(dilSecim == 0) {
 8003590:	4b69      	ldr	r3, [pc, #420]	; (8003738 <menu+0x2198>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d105      	bne.n	80035a4 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003598:	4a6d      	ldr	r2, [pc, #436]	; (8003750 <menu+0x21b0>)
 800359a:	2101      	movs	r1, #1
 800359c:	2002      	movs	r0, #2
 800359e:	f7fc ffe1 	bl	8000564 <lcd_print>
 80035a2:	e020      	b.n	80035e6 <menu+0x2046>
			} else if(dilSecim == 1){
 80035a4:	4b64      	ldr	r3, [pc, #400]	; (8003738 <menu+0x2198>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d11c      	bne.n	80035e6 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80035ac:	4a69      	ldr	r2, [pc, #420]	; (8003754 <menu+0x21b4>)
 80035ae:	2101      	movs	r1, #1
 80035b0:	2002      	movs	r0, #2
 80035b2:	f7fc ffd7 	bl	8000564 <lcd_print>
 80035b6:	e016      	b.n	80035e6 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80035b8:	4b64      	ldr	r3, [pc, #400]	; (800374c <menu+0x21ac>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d112      	bne.n	80035e6 <menu+0x2046>
			if(dilSecim == 0){
 80035c0:	4b5d      	ldr	r3, [pc, #372]	; (8003738 <menu+0x2198>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d105      	bne.n	80035d4 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80035c8:	4a63      	ldr	r2, [pc, #396]	; (8003758 <menu+0x21b8>)
 80035ca:	2101      	movs	r1, #1
 80035cc:	2002      	movs	r0, #2
 80035ce:	f7fc ffc9 	bl	8000564 <lcd_print>
 80035d2:	e008      	b.n	80035e6 <menu+0x2046>
			} else if(dilSecim == 1){
 80035d4:	4b58      	ldr	r3, [pc, #352]	; (8003738 <menu+0x2198>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d104      	bne.n	80035e6 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80035dc:	4a5f      	ldr	r2, [pc, #380]	; (800375c <menu+0x21bc>)
 80035de:	2101      	movs	r1, #1
 80035e0:	2002      	movs	r0, #2
 80035e2:	f7fc ffbf 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035e6:	2102      	movs	r1, #2
 80035e8:	485d      	ldr	r0, [pc, #372]	; (8003760 <menu+0x21c0>)
 80035ea:	f005 fbbf 	bl	8008d6c <HAL_GPIO_ReadPin>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d115      	bne.n	8003620 <menu+0x2080>
 80035f4:	4b5b      	ldr	r3, [pc, #364]	; (8003764 <menu+0x21c4>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	f083 0301 	eor.w	r3, r3, #1
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00e      	beq.n	8003620 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003602:	4b52      	ldr	r3, [pc, #328]	; (800374c <menu+0x21ac>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	3301      	adds	r3, #1
 8003608:	b2da      	uxtb	r2, r3
 800360a:	4b50      	ldr	r3, [pc, #320]	; (800374c <menu+0x21ac>)
 800360c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800360e:	4b4f      	ldr	r3, [pc, #316]	; (800374c <menu+0x21ac>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d902      	bls.n	800361c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003616:	4b4d      	ldr	r3, [pc, #308]	; (800374c <menu+0x21ac>)
 8003618:	2200      	movs	r2, #0
 800361a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800361c:	f001 ff46 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003620:	2104      	movs	r1, #4
 8003622:	484f      	ldr	r0, [pc, #316]	; (8003760 <menu+0x21c0>)
 8003624:	f005 fba2 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003628:	4603      	mov	r3, r0
 800362a:	2b01      	cmp	r3, #1
 800362c:	d115      	bne.n	800365a <menu+0x20ba>
 800362e:	4b4d      	ldr	r3, [pc, #308]	; (8003764 <menu+0x21c4>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	f083 0301 	eor.w	r3, r3, #1
 8003636:	b2db      	uxtb	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00e      	beq.n	800365a <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800363c:	4b43      	ldr	r3, [pc, #268]	; (800374c <menu+0x21ac>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	3b01      	subs	r3, #1
 8003642:	b2da      	uxtb	r2, r3
 8003644:	4b41      	ldr	r3, [pc, #260]	; (800374c <menu+0x21ac>)
 8003646:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003648:	4b40      	ldr	r3, [pc, #256]	; (800374c <menu+0x21ac>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d002      	beq.n	8003656 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003650:	4b3e      	ldr	r3, [pc, #248]	; (800374c <menu+0x21ac>)
 8003652:	2201      	movs	r2, #1
 8003654:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003656:	f001 ff29 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800365a:	2108      	movs	r1, #8
 800365c:	4840      	ldr	r0, [pc, #256]	; (8003760 <menu+0x21c0>)
 800365e:	f005 fb85 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003662:	4603      	mov	r3, r0
 8003664:	2b01      	cmp	r3, #1
 8003666:	d10d      	bne.n	8003684 <menu+0x20e4>
 8003668:	4b3e      	ldr	r3, [pc, #248]	; (8003764 <menu+0x21c4>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	f083 0301 	eor.w	r3, r3, #1
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d006      	beq.n	8003684 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8003676:	4b35      	ldr	r3, [pc, #212]	; (800374c <menu+0x21ac>)
 8003678:	781a      	ldrb	r2, [r3, #0]
 800367a:	4b3b      	ldr	r3, [pc, #236]	; (8003768 <menu+0x21c8>)
 800367c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800367e:	4b3b      	ldr	r3, [pc, #236]	; (800376c <menu+0x21cc>)
 8003680:	2201      	movs	r2, #1
 8003682:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003684:	4b3a      	ldr	r3, [pc, #232]	; (8003770 <menu+0x21d0>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b13      	cmp	r3, #19
 800368a:	f040 80d5 	bne.w	8003838 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 800368e:	4b2c      	ldr	r3, [pc, #176]	; (8003740 <menu+0x21a0>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d113      	bne.n	80036be <menu+0x211e>
			if(dilSecim == 0) {
 8003696:	4b28      	ldr	r3, [pc, #160]	; (8003738 <menu+0x2198>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d105      	bne.n	80036aa <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800369e:	4a35      	ldr	r2, [pc, #212]	; (8003774 <menu+0x21d4>)
 80036a0:	2101      	movs	r1, #1
 80036a2:	2001      	movs	r0, #1
 80036a4:	f7fc ff5e 	bl	8000564 <lcd_print>
 80036a8:	e01f      	b.n	80036ea <menu+0x214a>
			} else if(dilSecim == 1) {
 80036aa:	4b23      	ldr	r3, [pc, #140]	; (8003738 <menu+0x2198>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d11b      	bne.n	80036ea <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80036b2:	4a31      	ldr	r2, [pc, #196]	; (8003778 <menu+0x21d8>)
 80036b4:	2101      	movs	r1, #1
 80036b6:	2001      	movs	r0, #1
 80036b8:	f7fc ff54 	bl	8000564 <lcd_print>
 80036bc:	e015      	b.n	80036ea <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80036be:	4b20      	ldr	r3, [pc, #128]	; (8003740 <menu+0x21a0>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d111      	bne.n	80036ea <menu+0x214a>
			if(dilSecim == 0) {
 80036c6:	4b1c      	ldr	r3, [pc, #112]	; (8003738 <menu+0x2198>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d104      	bne.n	80036d8 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80036ce:	4a2b      	ldr	r2, [pc, #172]	; (800377c <menu+0x21dc>)
 80036d0:	2101      	movs	r1, #1
 80036d2:	2001      	movs	r0, #1
 80036d4:	f7fc ff46 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1) {
 80036d8:	4b17      	ldr	r3, [pc, #92]	; (8003738 <menu+0x2198>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d104      	bne.n	80036ea <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80036e0:	4a27      	ldr	r2, [pc, #156]	; (8003780 <menu+0x21e0>)
 80036e2:	2101      	movs	r1, #1
 80036e4:	2001      	movs	r0, #1
 80036e6:	f7fc ff3d 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80036ea:	4b26      	ldr	r3, [pc, #152]	; (8003784 <menu+0x21e4>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d113      	bne.n	800371a <menu+0x217a>
			if(dilSecim == 0) {
 80036f2:	4b11      	ldr	r3, [pc, #68]	; (8003738 <menu+0x2198>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d105      	bne.n	8003706 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80036fa:	4a15      	ldr	r2, [pc, #84]	; (8003750 <menu+0x21b0>)
 80036fc:	2101      	movs	r1, #1
 80036fe:	2002      	movs	r0, #2
 8003700:	f7fc ff30 	bl	8000564 <lcd_print>
 8003704:	e049      	b.n	800379a <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003706:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <menu+0x2198>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d145      	bne.n	800379a <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800370e:	4a11      	ldr	r2, [pc, #68]	; (8003754 <menu+0x21b4>)
 8003710:	2101      	movs	r1, #1
 8003712:	2002      	movs	r0, #2
 8003714:	f7fc ff26 	bl	8000564 <lcd_print>
 8003718:	e03f      	b.n	800379a <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800371a:	4b1a      	ldr	r3, [pc, #104]	; (8003784 <menu+0x21e4>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d13b      	bne.n	800379a <menu+0x21fa>
			if(dilSecim == 0) {
 8003722:	4b05      	ldr	r3, [pc, #20]	; (8003738 <menu+0x2198>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d12e      	bne.n	8003788 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800372a:	4a0b      	ldr	r2, [pc, #44]	; (8003758 <menu+0x21b8>)
 800372c:	2101      	movs	r1, #1
 800372e:	2002      	movs	r0, #2
 8003730:	f7fc ff18 	bl	8000564 <lcd_print>
 8003734:	e031      	b.n	800379a <menu+0x21fa>
 8003736:	bf00      	nop
 8003738:	200002d1 	.word	0x200002d1
 800373c:	0800c684 	.word	0x0800c684
 8003740:	200002bf 	.word	0x200002bf
 8003744:	0800c694 	.word	0x0800c694
 8003748:	0800c6a8 	.word	0x0800c6a8
 800374c:	200002c0 	.word	0x200002c0
 8003750:	0800c218 	.word	0x0800c218
 8003754:	0800c22c 	.word	0x0800c22c
 8003758:	0800c278 	.word	0x0800c278
 800375c:	0800c28c 	.word	0x0800c28c
 8003760:	40010800 	.word	0x40010800
 8003764:	200002df 	.word	0x200002df
 8003768:	200001e0 	.word	0x200001e0
 800376c:	200002dc 	.word	0x200002dc
 8003770:	200002b0 	.word	0x200002b0
 8003774:	0800c6bc 	.word	0x0800c6bc
 8003778:	0800c6d0 	.word	0x0800c6d0
 800377c:	0800c6e4 	.word	0x0800c6e4
 8003780:	0800c6f8 	.word	0x0800c6f8
 8003784:	200002c1 	.word	0x200002c1
			} else if(dilSecim == 1) {
 8003788:	4b90      	ldr	r3, [pc, #576]	; (80039cc <menu+0x242c>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d104      	bne.n	800379a <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003790:	4a8f      	ldr	r2, [pc, #572]	; (80039d0 <menu+0x2430>)
 8003792:	2101      	movs	r1, #1
 8003794:	2002      	movs	r0, #2
 8003796:	f7fc fee5 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800379a:	2102      	movs	r1, #2
 800379c:	488d      	ldr	r0, [pc, #564]	; (80039d4 <menu+0x2434>)
 800379e:	f005 fae5 	bl	8008d6c <HAL_GPIO_ReadPin>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d115      	bne.n	80037d4 <menu+0x2234>
 80037a8:	4b8b      	ldr	r3, [pc, #556]	; (80039d8 <menu+0x2438>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	f083 0301 	eor.w	r3, r3, #1
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00e      	beq.n	80037d4 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80037b6:	4b89      	ldr	r3, [pc, #548]	; (80039dc <menu+0x243c>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	3301      	adds	r3, #1
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	4b87      	ldr	r3, [pc, #540]	; (80039dc <menu+0x243c>)
 80037c0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80037c2:	4b86      	ldr	r3, [pc, #536]	; (80039dc <menu+0x243c>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d902      	bls.n	80037d0 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80037ca:	4b84      	ldr	r3, [pc, #528]	; (80039dc <menu+0x243c>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037d0:	f001 fe6c 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037d4:	2104      	movs	r1, #4
 80037d6:	487f      	ldr	r0, [pc, #508]	; (80039d4 <menu+0x2434>)
 80037d8:	f005 fac8 	bl	8008d6c <HAL_GPIO_ReadPin>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d115      	bne.n	800380e <menu+0x226e>
 80037e2:	4b7d      	ldr	r3, [pc, #500]	; (80039d8 <menu+0x2438>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	f083 0301 	eor.w	r3, r3, #1
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00e      	beq.n	800380e <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80037f0:	4b7a      	ldr	r3, [pc, #488]	; (80039dc <menu+0x243c>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	4b78      	ldr	r3, [pc, #480]	; (80039dc <menu+0x243c>)
 80037fa:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80037fc:	4b77      	ldr	r3, [pc, #476]	; (80039dc <menu+0x243c>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003804:	4b75      	ldr	r3, [pc, #468]	; (80039dc <menu+0x243c>)
 8003806:	2201      	movs	r2, #1
 8003808:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800380a:	f001 fe4f 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800380e:	2108      	movs	r1, #8
 8003810:	4870      	ldr	r0, [pc, #448]	; (80039d4 <menu+0x2434>)
 8003812:	f005 faab 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003816:	4603      	mov	r3, r0
 8003818:	2b01      	cmp	r3, #1
 800381a:	d10d      	bne.n	8003838 <menu+0x2298>
 800381c:	4b6e      	ldr	r3, [pc, #440]	; (80039d8 <menu+0x2438>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	f083 0301 	eor.w	r3, r3, #1
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d006      	beq.n	8003838 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800382a:	4b6c      	ldr	r3, [pc, #432]	; (80039dc <menu+0x243c>)
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	4b6c      	ldr	r3, [pc, #432]	; (80039e0 <menu+0x2440>)
 8003830:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003832:	4b6c      	ldr	r3, [pc, #432]	; (80039e4 <menu+0x2444>)
 8003834:	2201      	movs	r2, #1
 8003836:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003838:	4b6b      	ldr	r3, [pc, #428]	; (80039e8 <menu+0x2448>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b14      	cmp	r3, #20
 800383e:	f040 80b5 	bne.w	80039ac <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8003842:	4b6a      	ldr	r3, [pc, #424]	; (80039ec <menu+0x244c>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d113      	bne.n	8003872 <menu+0x22d2>
			if(dilSecim == 0) {
 800384a:	4b60      	ldr	r3, [pc, #384]	; (80039cc <menu+0x242c>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d105      	bne.n	800385e <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003852:	4a67      	ldr	r2, [pc, #412]	; (80039f0 <menu+0x2450>)
 8003854:	2101      	movs	r1, #1
 8003856:	2001      	movs	r0, #1
 8003858:	f7fc fe84 	bl	8000564 <lcd_print>
 800385c:	e020      	b.n	80038a0 <menu+0x2300>
			} else if(dilSecim == 1) {
 800385e:	4b5b      	ldr	r3, [pc, #364]	; (80039cc <menu+0x242c>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d11c      	bne.n	80038a0 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003866:	4a63      	ldr	r2, [pc, #396]	; (80039f4 <menu+0x2454>)
 8003868:	2101      	movs	r1, #1
 800386a:	2001      	movs	r0, #1
 800386c:	f7fc fe7a 	bl	8000564 <lcd_print>
 8003870:	e016      	b.n	80038a0 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003872:	4b5e      	ldr	r3, [pc, #376]	; (80039ec <menu+0x244c>)
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b02      	cmp	r3, #2
 8003878:	d112      	bne.n	80038a0 <menu+0x2300>
			if(dilSecim == 0) {
 800387a:	4b54      	ldr	r3, [pc, #336]	; (80039cc <menu+0x242c>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d105      	bne.n	800388e <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003882:	4a5d      	ldr	r2, [pc, #372]	; (80039f8 <menu+0x2458>)
 8003884:	2101      	movs	r1, #1
 8003886:	2001      	movs	r0, #1
 8003888:	f7fc fe6c 	bl	8000564 <lcd_print>
 800388c:	e008      	b.n	80038a0 <menu+0x2300>
			} else if(dilSecim == 1) {
 800388e:	4b4f      	ldr	r3, [pc, #316]	; (80039cc <menu+0x242c>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d104      	bne.n	80038a0 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003896:	4a59      	ldr	r2, [pc, #356]	; (80039fc <menu+0x245c>)
 8003898:	2101      	movs	r1, #1
 800389a:	2001      	movs	r0, #1
 800389c:	f7fc fe62 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80038a0:	4b57      	ldr	r3, [pc, #348]	; (8003a00 <menu+0x2460>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d113      	bne.n	80038d0 <menu+0x2330>
			if(dilSecim == 0) {
 80038a8:	4b48      	ldr	r3, [pc, #288]	; (80039cc <menu+0x242c>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d105      	bne.n	80038bc <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80038b0:	4a54      	ldr	r2, [pc, #336]	; (8003a04 <menu+0x2464>)
 80038b2:	2101      	movs	r1, #1
 80038b4:	2002      	movs	r0, #2
 80038b6:	f7fc fe55 	bl	8000564 <lcd_print>
 80038ba:	e020      	b.n	80038fe <menu+0x235e>
			} else if(dilSecim == 1) {
 80038bc:	4b43      	ldr	r3, [pc, #268]	; (80039cc <menu+0x242c>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d11c      	bne.n	80038fe <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80038c4:	4a50      	ldr	r2, [pc, #320]	; (8003a08 <menu+0x2468>)
 80038c6:	2101      	movs	r1, #1
 80038c8:	2002      	movs	r0, #2
 80038ca:	f7fc fe4b 	bl	8000564 <lcd_print>
 80038ce:	e016      	b.n	80038fe <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80038d0:	4b4b      	ldr	r3, [pc, #300]	; (8003a00 <menu+0x2460>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d112      	bne.n	80038fe <menu+0x235e>
			if(dilSecim == 0) {
 80038d8:	4b3c      	ldr	r3, [pc, #240]	; (80039cc <menu+0x242c>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d105      	bne.n	80038ec <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 80038e0:	4a4a      	ldr	r2, [pc, #296]	; (8003a0c <menu+0x246c>)
 80038e2:	2101      	movs	r1, #1
 80038e4:	2002      	movs	r0, #2
 80038e6:	f7fc fe3d 	bl	8000564 <lcd_print>
 80038ea:	e008      	b.n	80038fe <menu+0x235e>
			} else if(dilSecim == 1) {
 80038ec:	4b37      	ldr	r3, [pc, #220]	; (80039cc <menu+0x242c>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d104      	bne.n	80038fe <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80038f4:	4a46      	ldr	r2, [pc, #280]	; (8003a10 <menu+0x2470>)
 80038f6:	2101      	movs	r1, #1
 80038f8:	2002      	movs	r0, #2
 80038fa:	f7fc fe33 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80038fe:	2102      	movs	r1, #2
 8003900:	4834      	ldr	r0, [pc, #208]	; (80039d4 <menu+0x2434>)
 8003902:	f005 fa33 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003906:	4603      	mov	r3, r0
 8003908:	2b01      	cmp	r3, #1
 800390a:	d119      	bne.n	8003940 <menu+0x23a0>
 800390c:	4b32      	ldr	r3, [pc, #200]	; (80039d8 <menu+0x2438>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	f083 0301 	eor.w	r3, r3, #1
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d012      	beq.n	8003940 <menu+0x23a0>
 800391a:	4b34      	ldr	r3, [pc, #208]	; (80039ec <menu+0x244c>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d10e      	bne.n	8003940 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003922:	4b37      	ldr	r3, [pc, #220]	; (8003a00 <menu+0x2460>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	3301      	adds	r3, #1
 8003928:	b2da      	uxtb	r2, r3
 800392a:	4b35      	ldr	r3, [pc, #212]	; (8003a00 <menu+0x2460>)
 800392c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800392e:	4b34      	ldr	r3, [pc, #208]	; (8003a00 <menu+0x2460>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d902      	bls.n	800393c <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003936:	4b32      	ldr	r3, [pc, #200]	; (8003a00 <menu+0x2460>)
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800393c:	f001 fdb6 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003940:	2104      	movs	r1, #4
 8003942:	4824      	ldr	r0, [pc, #144]	; (80039d4 <menu+0x2434>)
 8003944:	f005 fa12 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003948:	4603      	mov	r3, r0
 800394a:	2b01      	cmp	r3, #1
 800394c:	d119      	bne.n	8003982 <menu+0x23e2>
 800394e:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <menu+0x2438>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	f083 0301 	eor.w	r3, r3, #1
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d012      	beq.n	8003982 <menu+0x23e2>
 800395c:	4b23      	ldr	r3, [pc, #140]	; (80039ec <menu+0x244c>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b02      	cmp	r3, #2
 8003962:	d10e      	bne.n	8003982 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003964:	4b26      	ldr	r3, [pc, #152]	; (8003a00 <menu+0x2460>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	3b01      	subs	r3, #1
 800396a:	b2da      	uxtb	r2, r3
 800396c:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <menu+0x2460>)
 800396e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003970:	4b23      	ldr	r3, [pc, #140]	; (8003a00 <menu+0x2460>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003978:	4b21      	ldr	r3, [pc, #132]	; (8003a00 <menu+0x2460>)
 800397a:	2201      	movs	r2, #1
 800397c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800397e:	f001 fd95 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003982:	2108      	movs	r1, #8
 8003984:	4813      	ldr	r0, [pc, #76]	; (80039d4 <menu+0x2434>)
 8003986:	f005 f9f1 	bl	8008d6c <HAL_GPIO_ReadPin>
 800398a:	4603      	mov	r3, r0
 800398c:	2b01      	cmp	r3, #1
 800398e:	d10d      	bne.n	80039ac <menu+0x240c>
 8003990:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <menu+0x2438>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	f083 0301 	eor.w	r3, r3, #1
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d006      	beq.n	80039ac <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 800399e:	4b18      	ldr	r3, [pc, #96]	; (8003a00 <menu+0x2460>)
 80039a0:	781a      	ldrb	r2, [r3, #0]
 80039a2:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <menu+0x2440>)
 80039a4:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80039a6:	4b0f      	ldr	r3, [pc, #60]	; (80039e4 <menu+0x2444>)
 80039a8:	2201      	movs	r2, #1
 80039aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80039ac:	4b0e      	ldr	r3, [pc, #56]	; (80039e8 <menu+0x2448>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b15      	cmp	r3, #21
 80039b2:	f040 80c2 	bne.w	8003b3a <menu+0x259a>
		if(dilSecim == 0) {
 80039b6:	4b05      	ldr	r3, [pc, #20]	; (80039cc <menu+0x242c>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d12c      	bne.n	8003a18 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80039be:	4a15      	ldr	r2, [pc, #84]	; (8003a14 <menu+0x2474>)
 80039c0:	2101      	movs	r1, #1
 80039c2:	2001      	movs	r0, #1
 80039c4:	f7fc fdce 	bl	8000564 <lcd_print>
 80039c8:	e02f      	b.n	8003a2a <menu+0x248a>
 80039ca:	bf00      	nop
 80039cc:	200002d1 	.word	0x200002d1
 80039d0:	0800c28c 	.word	0x0800c28c
 80039d4:	40010800 	.word	0x40010800
 80039d8:	200002df 	.word	0x200002df
 80039dc:	200002c1 	.word	0x200002c1
 80039e0:	200001e0 	.word	0x200001e0
 80039e4:	200002dc 	.word	0x200002dc
 80039e8:	200002b0 	.word	0x200002b0
 80039ec:	200002bf 	.word	0x200002bf
 80039f0:	0800c70c 	.word	0x0800c70c
 80039f4:	0800c720 	.word	0x0800c720
 80039f8:	0800c734 	.word	0x0800c734
 80039fc:	0800c748 	.word	0x0800c748
 8003a00:	200002c2 	.word	0x200002c2
 8003a04:	0800c75c 	.word	0x0800c75c
 8003a08:	0800c770 	.word	0x0800c770
 8003a0c:	0800c780 	.word	0x0800c780
 8003a10:	0800c794 	.word	0x0800c794
 8003a14:	0800c7a4 	.word	0x0800c7a4
		} else if(dilSecim == 1) {
 8003a18:	4b9c      	ldr	r3, [pc, #624]	; (8003c8c <menu+0x26ec>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d104      	bne.n	8003a2a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003a20:	4a9b      	ldr	r2, [pc, #620]	; (8003c90 <menu+0x26f0>)
 8003a22:	2101      	movs	r1, #1
 8003a24:	2001      	movs	r0, #1
 8003a26:	f7fc fd9d 	bl	8000564 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003a2a:	4b9a      	ldr	r3, [pc, #616]	; (8003c94 <menu+0x26f4>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d112      	bne.n	8003a58 <menu+0x24b8>
			if(dilSecim == 0) {
 8003a32:	4b96      	ldr	r3, [pc, #600]	; (8003c8c <menu+0x26ec>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d104      	bne.n	8003a44 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003a3a:	4a97      	ldr	r2, [pc, #604]	; (8003c98 <menu+0x26f8>)
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	2002      	movs	r0, #2
 8003a40:	f7fc fd90 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1) {
 8003a44:	4b91      	ldr	r3, [pc, #580]	; (8003c8c <menu+0x26ec>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d11c      	bne.n	8003a86 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003a4c:	4a93      	ldr	r2, [pc, #588]	; (8003c9c <menu+0x26fc>)
 8003a4e:	2101      	movs	r1, #1
 8003a50:	2002      	movs	r0, #2
 8003a52:	f7fc fd87 	bl	8000564 <lcd_print>
 8003a56:	e016      	b.n	8003a86 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003a58:	4b8e      	ldr	r3, [pc, #568]	; (8003c94 <menu+0x26f4>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d112      	bne.n	8003a86 <menu+0x24e6>
			if(dilSecim == 0) {
 8003a60:	4b8a      	ldr	r3, [pc, #552]	; (8003c8c <menu+0x26ec>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d105      	bne.n	8003a74 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003a68:	4a8d      	ldr	r2, [pc, #564]	; (8003ca0 <menu+0x2700>)
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	2002      	movs	r0, #2
 8003a6e:	f7fc fd79 	bl	8000564 <lcd_print>
 8003a72:	e008      	b.n	8003a86 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003a74:	4b85      	ldr	r3, [pc, #532]	; (8003c8c <menu+0x26ec>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d104      	bne.n	8003a86 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003a7c:	4a89      	ldr	r2, [pc, #548]	; (8003ca4 <menu+0x2704>)
 8003a7e:	2101      	movs	r1, #1
 8003a80:	2002      	movs	r0, #2
 8003a82:	f7fc fd6f 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a86:	2102      	movs	r1, #2
 8003a88:	4887      	ldr	r0, [pc, #540]	; (8003ca8 <menu+0x2708>)
 8003a8a:	f005 f96f 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d115      	bne.n	8003ac0 <menu+0x2520>
 8003a94:	4b85      	ldr	r3, [pc, #532]	; (8003cac <menu+0x270c>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	f083 0301 	eor.w	r3, r3, #1
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00e      	beq.n	8003ac0 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003aa2:	4b7c      	ldr	r3, [pc, #496]	; (8003c94 <menu+0x26f4>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	4b7a      	ldr	r3, [pc, #488]	; (8003c94 <menu+0x26f4>)
 8003aac:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003aae:	4b79      	ldr	r3, [pc, #484]	; (8003c94 <menu+0x26f4>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d902      	bls.n	8003abc <menu+0x251c>
				platformSilindirTipi = 0;
 8003ab6:	4b77      	ldr	r3, [pc, #476]	; (8003c94 <menu+0x26f4>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003abc:	f001 fcf6 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ac0:	2104      	movs	r1, #4
 8003ac2:	4879      	ldr	r0, [pc, #484]	; (8003ca8 <menu+0x2708>)
 8003ac4:	f005 f952 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d115      	bne.n	8003afa <menu+0x255a>
 8003ace:	4b77      	ldr	r3, [pc, #476]	; (8003cac <menu+0x270c>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	f083 0301 	eor.w	r3, r3, #1
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00e      	beq.n	8003afa <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003adc:	4b6d      	ldr	r3, [pc, #436]	; (8003c94 <menu+0x26f4>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	4b6b      	ldr	r3, [pc, #428]	; (8003c94 <menu+0x26f4>)
 8003ae6:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003ae8:	4b6a      	ldr	r3, [pc, #424]	; (8003c94 <menu+0x26f4>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003af0:	4b68      	ldr	r3, [pc, #416]	; (8003c94 <menu+0x26f4>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003af6:	f001 fcd9 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003afa:	2108      	movs	r1, #8
 8003afc:	486a      	ldr	r0, [pc, #424]	; (8003ca8 <menu+0x2708>)
 8003afe:	f005 f935 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d118      	bne.n	8003b3a <menu+0x259a>
 8003b08:	4b68      	ldr	r3, [pc, #416]	; (8003cac <menu+0x270c>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	f083 0301 	eor.w	r3, r3, #1
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d011      	beq.n	8003b3a <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003b16:	4b5f      	ldr	r3, [pc, #380]	; (8003c94 <menu+0x26f4>)
 8003b18:	781a      	ldrb	r2, [r3, #0]
 8003b1a:	4b65      	ldr	r3, [pc, #404]	; (8003cb0 <menu+0x2710>)
 8003b1c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003b1e:	4b5d      	ldr	r3, [pc, #372]	; (8003c94 <menu+0x26f4>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d106      	bne.n	8003b34 <menu+0x2594>
				altLimit = 1;
 8003b26:	4b63      	ldr	r3, [pc, #396]	; (8003cb4 <menu+0x2714>)
 8003b28:	2201      	movs	r2, #1
 8003b2a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003b2c:	4b61      	ldr	r3, [pc, #388]	; (8003cb4 <menu+0x2714>)
 8003b2e:	781a      	ldrb	r2, [r3, #0]
 8003b30:	4b5f      	ldr	r3, [pc, #380]	; (8003cb0 <menu+0x2710>)
 8003b32:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003b34:	4b60      	ldr	r3, [pc, #384]	; (8003cb8 <menu+0x2718>)
 8003b36:	2201      	movs	r2, #1
 8003b38:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003b3a:	4b60      	ldr	r3, [pc, #384]	; (8003cbc <menu+0x271c>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b16      	cmp	r3, #22
 8003b40:	f040 8081 	bne.w	8003c46 <menu+0x26a6>
		if(dilSecim == 0) {
 8003b44:	4b51      	ldr	r3, [pc, #324]	; (8003c8c <menu+0x26ec>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d105      	bne.n	8003b58 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003b4c:	4a5c      	ldr	r2, [pc, #368]	; (8003cc0 <menu+0x2720>)
 8003b4e:	2101      	movs	r1, #1
 8003b50:	2001      	movs	r0, #1
 8003b52:	f7fc fd07 	bl	8000564 <lcd_print>
 8003b56:	e008      	b.n	8003b6a <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003b58:	4b4c      	ldr	r3, [pc, #304]	; (8003c8c <menu+0x26ec>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d104      	bne.n	8003b6a <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003b60:	4a58      	ldr	r2, [pc, #352]	; (8003cc4 <menu+0x2724>)
 8003b62:	2101      	movs	r1, #1
 8003b64:	2001      	movs	r0, #1
 8003b66:	f7fc fcfd 	bl	8000564 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003b6a:	4b48      	ldr	r3, [pc, #288]	; (8003c8c <menu+0x26ec>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d105      	bne.n	8003b7e <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b72:	4a55      	ldr	r2, [pc, #340]	; (8003cc8 <menu+0x2728>)
 8003b74:	2101      	movs	r1, #1
 8003b76:	2002      	movs	r0, #2
 8003b78:	f7fc fcf4 	bl	8000564 <lcd_print>
 8003b7c:	e008      	b.n	8003b90 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003b7e:	4b43      	ldr	r3, [pc, #268]	; (8003c8c <menu+0x26ec>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d104      	bne.n	8003b90 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003b86:	4a51      	ldr	r2, [pc, #324]	; (8003ccc <menu+0x272c>)
 8003b88:	2101      	movs	r1, #1
 8003b8a:	2002      	movs	r0, #2
 8003b8c:	f7fc fcea 	bl	8000564 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003b90:	4b4f      	ldr	r3, [pc, #316]	; (8003cd0 <menu+0x2730>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	220a      	movs	r2, #10
 8003b96:	494f      	ldr	r1, [pc, #316]	; (8003cd4 <menu+0x2734>)
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f008 f8dd 	bl	800bd58 <itoa>
		lcd_print(2,16,snum);
 8003b9e:	4a4d      	ldr	r2, [pc, #308]	; (8003cd4 <menu+0x2734>)
 8003ba0:	2110      	movs	r1, #16
 8003ba2:	2002      	movs	r0, #2
 8003ba4:	f7fc fcde 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ba8:	2102      	movs	r1, #2
 8003baa:	483f      	ldr	r0, [pc, #252]	; (8003ca8 <menu+0x2708>)
 8003bac:	f005 f8de 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d115      	bne.n	8003be2 <menu+0x2642>
 8003bb6:	4b3d      	ldr	r3, [pc, #244]	; (8003cac <menu+0x270c>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	f083 0301 	eor.w	r3, r3, #1
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d00e      	beq.n	8003be2 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003bc4:	4b42      	ldr	r3, [pc, #264]	; (8003cd0 <menu+0x2730>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	4b40      	ldr	r3, [pc, #256]	; (8003cd0 <menu+0x2730>)
 8003bce:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003bd0:	4b3f      	ldr	r3, [pc, #252]	; (8003cd0 <menu+0x2730>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b05      	cmp	r3, #5
 8003bd6:	d902      	bls.n	8003bde <menu+0x263e>
				yukariValfTmr = 0;
 8003bd8:	4b3d      	ldr	r3, [pc, #244]	; (8003cd0 <menu+0x2730>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003bde:	f001 fc65 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003be2:	2104      	movs	r1, #4
 8003be4:	4830      	ldr	r0, [pc, #192]	; (8003ca8 <menu+0x2708>)
 8003be6:	f005 f8c1 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d115      	bne.n	8003c1c <menu+0x267c>
 8003bf0:	4b2e      	ldr	r3, [pc, #184]	; (8003cac <menu+0x270c>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	f083 0301 	eor.w	r3, r3, #1
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00e      	beq.n	8003c1c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003bfe:	4b34      	ldr	r3, [pc, #208]	; (8003cd0 <menu+0x2730>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	4b32      	ldr	r3, [pc, #200]	; (8003cd0 <menu+0x2730>)
 8003c08:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003c0a:	4b31      	ldr	r3, [pc, #196]	; (8003cd0 <menu+0x2730>)
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	2b06      	cmp	r3, #6
 8003c10:	d902      	bls.n	8003c18 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003c12:	4b2f      	ldr	r3, [pc, #188]	; (8003cd0 <menu+0x2730>)
 8003c14:	2205      	movs	r2, #5
 8003c16:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c18:	f001 fc48 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c1c:	2108      	movs	r1, #8
 8003c1e:	4822      	ldr	r0, [pc, #136]	; (8003ca8 <menu+0x2708>)
 8003c20:	f005 f8a4 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d10d      	bne.n	8003c46 <menu+0x26a6>
 8003c2a:	4b20      	ldr	r3, [pc, #128]	; (8003cac <menu+0x270c>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	f083 0301 	eor.w	r3, r3, #1
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d006      	beq.n	8003c46 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003c38:	4b25      	ldr	r3, [pc, #148]	; (8003cd0 <menu+0x2730>)
 8003c3a:	781a      	ldrb	r2, [r3, #0]
 8003c3c:	4b1c      	ldr	r3, [pc, #112]	; (8003cb0 <menu+0x2710>)
 8003c3e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003c40:	4b1d      	ldr	r3, [pc, #116]	; (8003cb8 <menu+0x2718>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003c46:	4b1d      	ldr	r3, [pc, #116]	; (8003cbc <menu+0x271c>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b17      	cmp	r3, #23
 8003c4c:	f040 80ac 	bne.w	8003da8 <menu+0x2808>
		if(dilSecim == 0) {
 8003c50:	4b0e      	ldr	r3, [pc, #56]	; (8003c8c <menu+0x26ec>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d105      	bne.n	8003c64 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003c58:	4a1f      	ldr	r2, [pc, #124]	; (8003cd8 <menu+0x2738>)
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	f7fc fc81 	bl	8000564 <lcd_print>
 8003c62:	e008      	b.n	8003c76 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <menu+0x26ec>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d104      	bne.n	8003c76 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003c6c:	4a1b      	ldr	r2, [pc, #108]	; (8003cdc <menu+0x273c>)
 8003c6e:	2101      	movs	r1, #1
 8003c70:	2001      	movs	r0, #1
 8003c72:	f7fc fc77 	bl	8000564 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003c76:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <menu+0x26ec>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d130      	bne.n	8003ce0 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c7e:	4a12      	ldr	r2, [pc, #72]	; (8003cc8 <menu+0x2728>)
 8003c80:	2101      	movs	r1, #1
 8003c82:	2002      	movs	r0, #2
 8003c84:	f7fc fc6e 	bl	8000564 <lcd_print>
 8003c88:	e033      	b.n	8003cf2 <menu+0x2752>
 8003c8a:	bf00      	nop
 8003c8c:	200002d1 	.word	0x200002d1
 8003c90:	0800c7b8 	.word	0x0800c7b8
 8003c94:	200002c3 	.word	0x200002c3
 8003c98:	0800c75c 	.word	0x0800c75c
 8003c9c:	0800c770 	.word	0x0800c770
 8003ca0:	0800c780 	.word	0x0800c780
 8003ca4:	0800c794 	.word	0x0800c794
 8003ca8:	40010800 	.word	0x40010800
 8003cac:	200002df 	.word	0x200002df
 8003cb0:	200001e0 	.word	0x200001e0
 8003cb4:	200002b6 	.word	0x200002b6
 8003cb8:	200002dc 	.word	0x200002dc
 8003cbc:	200002b0 	.word	0x200002b0
 8003cc0:	0800c7c8 	.word	0x0800c7c8
 8003cc4:	0800c7dc 	.word	0x0800c7dc
 8003cc8:	0800c47c 	.word	0x0800c47c
 8003ccc:	0800c7f0 	.word	0x0800c7f0
 8003cd0:	200002c4 	.word	0x200002c4
 8003cd4:	20000250 	.word	0x20000250
 8003cd8:	0800c800 	.word	0x0800c800
 8003cdc:	0800c814 	.word	0x0800c814
			} else if(dilSecim == 1) {
 8003ce0:	4b98      	ldr	r3, [pc, #608]	; (8003f44 <menu+0x29a4>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d104      	bne.n	8003cf2 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003ce8:	4a97      	ldr	r2, [pc, #604]	; (8003f48 <menu+0x29a8>)
 8003cea:	2101      	movs	r1, #1
 8003cec:	2002      	movs	r0, #2
 8003cee:	f7fc fc39 	bl	8000564 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003cf2:	4b96      	ldr	r3, [pc, #600]	; (8003f4c <menu+0x29ac>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	220a      	movs	r2, #10
 8003cf8:	4995      	ldr	r1, [pc, #596]	; (8003f50 <menu+0x29b0>)
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f008 f82c 	bl	800bd58 <itoa>
		lcd_print(2,16,snum);
 8003d00:	4a93      	ldr	r2, [pc, #588]	; (8003f50 <menu+0x29b0>)
 8003d02:	2110      	movs	r1, #16
 8003d04:	2002      	movs	r0, #2
 8003d06:	f7fc fc2d 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d0a:	2102      	movs	r1, #2
 8003d0c:	4891      	ldr	r0, [pc, #580]	; (8003f54 <menu+0x29b4>)
 8003d0e:	f005 f82d 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d115      	bne.n	8003d44 <menu+0x27a4>
 8003d18:	4b8f      	ldr	r3, [pc, #572]	; (8003f58 <menu+0x29b8>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	f083 0301 	eor.w	r3, r3, #1
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00e      	beq.n	8003d44 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003d26:	4b89      	ldr	r3, [pc, #548]	; (8003f4c <menu+0x29ac>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	4b87      	ldr	r3, [pc, #540]	; (8003f4c <menu+0x29ac>)
 8003d30:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003d32:	4b86      	ldr	r3, [pc, #536]	; (8003f4c <menu+0x29ac>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b05      	cmp	r3, #5
 8003d38:	d902      	bls.n	8003d40 <menu+0x27a0>
				asagiValfTmr = 0;
 8003d3a:	4b84      	ldr	r3, [pc, #528]	; (8003f4c <menu+0x29ac>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d40:	f001 fbb4 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d44:	2104      	movs	r1, #4
 8003d46:	4883      	ldr	r0, [pc, #524]	; (8003f54 <menu+0x29b4>)
 8003d48:	f005 f810 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d115      	bne.n	8003d7e <menu+0x27de>
 8003d52:	4b81      	ldr	r3, [pc, #516]	; (8003f58 <menu+0x29b8>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	f083 0301 	eor.w	r3, r3, #1
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00e      	beq.n	8003d7e <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003d60:	4b7a      	ldr	r3, [pc, #488]	; (8003f4c <menu+0x29ac>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b2da      	uxtb	r2, r3
 8003d68:	4b78      	ldr	r3, [pc, #480]	; (8003f4c <menu+0x29ac>)
 8003d6a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003d6c:	4b77      	ldr	r3, [pc, #476]	; (8003f4c <menu+0x29ac>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b06      	cmp	r3, #6
 8003d72:	d902      	bls.n	8003d7a <menu+0x27da>
		   		asagiValfTmr = 5;
 8003d74:	4b75      	ldr	r3, [pc, #468]	; (8003f4c <menu+0x29ac>)
 8003d76:	2205      	movs	r2, #5
 8003d78:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d7a:	f001 fb97 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d7e:	2108      	movs	r1, #8
 8003d80:	4874      	ldr	r0, [pc, #464]	; (8003f54 <menu+0x29b4>)
 8003d82:	f004 fff3 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d10d      	bne.n	8003da8 <menu+0x2808>
 8003d8c:	4b72      	ldr	r3, [pc, #456]	; (8003f58 <menu+0x29b8>)
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	f083 0301 	eor.w	r3, r3, #1
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d006      	beq.n	8003da8 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003d9a:	4b6c      	ldr	r3, [pc, #432]	; (8003f4c <menu+0x29ac>)
 8003d9c:	781a      	ldrb	r2, [r3, #0]
 8003d9e:	4b6f      	ldr	r3, [pc, #444]	; (8003f5c <menu+0x29bc>)
 8003da0:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003da2:	4b6f      	ldr	r3, [pc, #444]	; (8003f60 <menu+0x29c0>)
 8003da4:	2201      	movs	r2, #1
 8003da6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003da8:	4b6e      	ldr	r3, [pc, #440]	; (8003f64 <menu+0x29c4>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b18      	cmp	r3, #24
 8003dae:	f040 809d 	bne.w	8003eec <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003db2:	4b6d      	ldr	r3, [pc, #436]	; (8003f68 <menu+0x29c8>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d113      	bne.n	8003de2 <menu+0x2842>
			if(dilSecim == 0) {
 8003dba:	4b62      	ldr	r3, [pc, #392]	; (8003f44 <menu+0x29a4>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d105      	bne.n	8003dce <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003dc2:	4a6a      	ldr	r2, [pc, #424]	; (8003f6c <menu+0x29cc>)
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	2001      	movs	r0, #1
 8003dc8:	f7fc fbcc 	bl	8000564 <lcd_print>
 8003dcc:	e020      	b.n	8003e10 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003dce:	4b5d      	ldr	r3, [pc, #372]	; (8003f44 <menu+0x29a4>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d11c      	bne.n	8003e10 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003dd6:	4a66      	ldr	r2, [pc, #408]	; (8003f70 <menu+0x29d0>)
 8003dd8:	2101      	movs	r1, #1
 8003dda:	2001      	movs	r0, #1
 8003ddc:	f7fc fbc2 	bl	8000564 <lcd_print>
 8003de0:	e016      	b.n	8003e10 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003de2:	4b61      	ldr	r3, [pc, #388]	; (8003f68 <menu+0x29c8>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d112      	bne.n	8003e10 <menu+0x2870>
			if(dilSecim == 0) {
 8003dea:	4b56      	ldr	r3, [pc, #344]	; (8003f44 <menu+0x29a4>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d105      	bne.n	8003dfe <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003df2:	4a60      	ldr	r2, [pc, #384]	; (8003f74 <menu+0x29d4>)
 8003df4:	2101      	movs	r1, #1
 8003df6:	2001      	movs	r0, #1
 8003df8:	f7fc fbb4 	bl	8000564 <lcd_print>
 8003dfc:	e008      	b.n	8003e10 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003dfe:	4b51      	ldr	r3, [pc, #324]	; (8003f44 <menu+0x29a4>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d104      	bne.n	8003e10 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003e06:	4a5c      	ldr	r2, [pc, #368]	; (8003f78 <menu+0x29d8>)
 8003e08:	2101      	movs	r1, #1
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	f7fc fbaa 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003e10:	4b4c      	ldr	r3, [pc, #304]	; (8003f44 <menu+0x29a4>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d105      	bne.n	8003e24 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e18:	4a58      	ldr	r2, [pc, #352]	; (8003f7c <menu+0x29dc>)
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	2002      	movs	r0, #2
 8003e1e:	f7fc fba1 	bl	8000564 <lcd_print>
 8003e22:	e008      	b.n	8003e36 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003e24:	4b47      	ldr	r3, [pc, #284]	; (8003f44 <menu+0x29a4>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d104      	bne.n	8003e36 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003e2c:	4a46      	ldr	r2, [pc, #280]	; (8003f48 <menu+0x29a8>)
 8003e2e:	2101      	movs	r1, #1
 8003e30:	2002      	movs	r0, #2
 8003e32:	f7fc fb97 	bl	8000564 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003e36:	4b52      	ldr	r3, [pc, #328]	; (8003f80 <menu+0x29e0>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	220a      	movs	r2, #10
 8003e3c:	4944      	ldr	r1, [pc, #272]	; (8003f50 <menu+0x29b0>)
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f007 ff8a 	bl	800bd58 <itoa>
		lcd_print(2, 16, snum);
 8003e44:	4a42      	ldr	r2, [pc, #264]	; (8003f50 <menu+0x29b0>)
 8003e46:	2110      	movs	r1, #16
 8003e48:	2002      	movs	r0, #2
 8003e4a:	f7fc fb8b 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e4e:	2102      	movs	r1, #2
 8003e50:	4840      	ldr	r0, [pc, #256]	; (8003f54 <menu+0x29b4>)
 8003e52:	f004 ff8b 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d115      	bne.n	8003e88 <menu+0x28e8>
 8003e5c:	4b3e      	ldr	r3, [pc, #248]	; (8003f58 <menu+0x29b8>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	f083 0301 	eor.w	r3, r3, #1
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00e      	beq.n	8003e88 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003e6a:	4b45      	ldr	r3, [pc, #276]	; (8003f80 <menu+0x29e0>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	4b43      	ldr	r3, [pc, #268]	; (8003f80 <menu+0x29e0>)
 8003e74:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003e76:	4b42      	ldr	r3, [pc, #264]	; (8003f80 <menu+0x29e0>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b05      	cmp	r3, #5
 8003e7c:	d902      	bls.n	8003e84 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003e7e:	4b40      	ldr	r3, [pc, #256]	; (8003f80 <menu+0x29e0>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e84:	f001 fb12 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e88:	2104      	movs	r1, #4
 8003e8a:	4832      	ldr	r0, [pc, #200]	; (8003f54 <menu+0x29b4>)
 8003e8c:	f004 ff6e 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d115      	bne.n	8003ec2 <menu+0x2922>
 8003e96:	4b30      	ldr	r3, [pc, #192]	; (8003f58 <menu+0x29b8>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	f083 0301 	eor.w	r3, r3, #1
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00e      	beq.n	8003ec2 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003ea4:	4b36      	ldr	r3, [pc, #216]	; (8003f80 <menu+0x29e0>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b2da      	uxtb	r2, r3
 8003eac:	4b34      	ldr	r3, [pc, #208]	; (8003f80 <menu+0x29e0>)
 8003eae:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003eb0:	4b33      	ldr	r3, [pc, #204]	; (8003f80 <menu+0x29e0>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b06      	cmp	r3, #6
 8003eb6:	d902      	bls.n	8003ebe <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003eb8:	4b31      	ldr	r3, [pc, #196]	; (8003f80 <menu+0x29e0>)
 8003eba:	2205      	movs	r2, #5
 8003ebc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ebe:	f001 faf5 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ec2:	2108      	movs	r1, #8
 8003ec4:	4823      	ldr	r0, [pc, #140]	; (8003f54 <menu+0x29b4>)
 8003ec6:	f004 ff51 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d10d      	bne.n	8003eec <menu+0x294c>
 8003ed0:	4b21      	ldr	r3, [pc, #132]	; (8003f58 <menu+0x29b8>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	f083 0301 	eor.w	r3, r3, #1
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d006      	beq.n	8003eec <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003ede:	4b28      	ldr	r3, [pc, #160]	; (8003f80 <menu+0x29e0>)
 8003ee0:	781a      	ldrb	r2, [r3, #0]
 8003ee2:	4b1e      	ldr	r3, [pc, #120]	; (8003f5c <menu+0x29bc>)
 8003ee4:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003ee6:	4b1e      	ldr	r3, [pc, #120]	; (8003f60 <menu+0x29c0>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003eec:	4b1d      	ldr	r3, [pc, #116]	; (8003f64 <menu+0x29c4>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b19      	cmp	r3, #25
 8003ef2:	f040 80c4 	bne.w	800407e <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003ef6:	4b1c      	ldr	r3, [pc, #112]	; (8003f68 <menu+0x29c8>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d113      	bne.n	8003f26 <menu+0x2986>
			if(dilSecim == 0) {
 8003efe:	4b11      	ldr	r3, [pc, #68]	; (8003f44 <menu+0x29a4>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d105      	bne.n	8003f12 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003f06:	4a1f      	ldr	r2, [pc, #124]	; (8003f84 <menu+0x29e4>)
 8003f08:	2101      	movs	r1, #1
 8003f0a:	2001      	movs	r0, #1
 8003f0c:	f7fc fb2a 	bl	8000564 <lcd_print>
 8003f10:	e047      	b.n	8003fa2 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003f12:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <menu+0x29a4>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d143      	bne.n	8003fa2 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003f1a:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <menu+0x29e8>)
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	2001      	movs	r0, #1
 8003f20:	f7fc fb20 	bl	8000564 <lcd_print>
 8003f24:	e03d      	b.n	8003fa2 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003f26:	4b10      	ldr	r3, [pc, #64]	; (8003f68 <menu+0x29c8>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d139      	bne.n	8003fa2 <menu+0x2a02>
			if(dilSecim == 0) {
 8003f2e:	4b05      	ldr	r3, [pc, #20]	; (8003f44 <menu+0x29a4>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d12c      	bne.n	8003f90 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003f36:	4a15      	ldr	r2, [pc, #84]	; (8003f8c <menu+0x29ec>)
 8003f38:	2101      	movs	r1, #1
 8003f3a:	2001      	movs	r0, #1
 8003f3c:	f7fc fb12 	bl	8000564 <lcd_print>
 8003f40:	e02f      	b.n	8003fa2 <menu+0x2a02>
 8003f42:	bf00      	nop
 8003f44:	200002d1 	.word	0x200002d1
 8003f48:	0800c7f0 	.word	0x0800c7f0
 8003f4c:	200002c5 	.word	0x200002c5
 8003f50:	20000250 	.word	0x20000250
 8003f54:	40010800 	.word	0x40010800
 8003f58:	200002df 	.word	0x200002df
 8003f5c:	200001e0 	.word	0x200001e0
 8003f60:	200002dc 	.word	0x200002dc
 8003f64:	200002b0 	.word	0x200002b0
 8003f68:	200002bf 	.word	0x200002bf
 8003f6c:	0800c828 	.word	0x0800c828
 8003f70:	0800c83c 	.word	0x0800c83c
 8003f74:	0800c850 	.word	0x0800c850
 8003f78:	0800c864 	.word	0x0800c864
 8003f7c:	0800c47c 	.word	0x0800c47c
 8003f80:	200002c6 	.word	0x200002c6
 8003f84:	0800c878 	.word	0x0800c878
 8003f88:	0800c88c 	.word	0x0800c88c
 8003f8c:	0800c8a0 	.word	0x0800c8a0
			} else if(dilSecim == 1) {
 8003f90:	4b73      	ldr	r3, [pc, #460]	; (8004160 <menu+0x2bc0>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d104      	bne.n	8003fa2 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003f98:	4a72      	ldr	r2, [pc, #456]	; (8004164 <menu+0x2bc4>)
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	2001      	movs	r0, #1
 8003f9e:	f7fc fae1 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003fa2:	4b6f      	ldr	r3, [pc, #444]	; (8004160 <menu+0x2bc0>)
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d105      	bne.n	8003fb6 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003faa:	4a6f      	ldr	r2, [pc, #444]	; (8004168 <menu+0x2bc8>)
 8003fac:	2101      	movs	r1, #1
 8003fae:	2002      	movs	r0, #2
 8003fb0:	f7fc fad8 	bl	8000564 <lcd_print>
 8003fb4:	e008      	b.n	8003fc8 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003fb6:	4b6a      	ldr	r3, [pc, #424]	; (8004160 <menu+0x2bc0>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d104      	bne.n	8003fc8 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003fbe:	4a6b      	ldr	r2, [pc, #428]	; (800416c <menu+0x2bcc>)
 8003fc0:	2101      	movs	r1, #1
 8003fc2:	2002      	movs	r0, #2
 8003fc4:	f7fc face 	bl	8000564 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003fc8:	4b69      	ldr	r3, [pc, #420]	; (8004170 <menu+0x2bd0>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	220a      	movs	r2, #10
 8003fce:	4969      	ldr	r1, [pc, #420]	; (8004174 <menu+0x2bd4>)
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f007 fec1 	bl	800bd58 <itoa>
		lcd_print(2,16,snum);
 8003fd6:	4a67      	ldr	r2, [pc, #412]	; (8004174 <menu+0x2bd4>)
 8003fd8:	2110      	movs	r1, #16
 8003fda:	2002      	movs	r0, #2
 8003fdc:	f7fc fac2 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fe0:	2102      	movs	r1, #2
 8003fe2:	4865      	ldr	r0, [pc, #404]	; (8004178 <menu+0x2bd8>)
 8003fe4:	f004 fec2 	bl	8008d6c <HAL_GPIO_ReadPin>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d115      	bne.n	800401a <menu+0x2a7a>
 8003fee:	4b63      	ldr	r3, [pc, #396]	; (800417c <menu+0x2bdc>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	f083 0301 	eor.w	r3, r3, #1
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00e      	beq.n	800401a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003ffc:	4b5c      	ldr	r3, [pc, #368]	; (8004170 <menu+0x2bd0>)
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	3301      	adds	r3, #1
 8004002:	b2da      	uxtb	r2, r3
 8004004:	4b5a      	ldr	r3, [pc, #360]	; (8004170 <menu+0x2bd0>)
 8004006:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8004008:	4b59      	ldr	r3, [pc, #356]	; (8004170 <menu+0x2bd0>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	2b05      	cmp	r3, #5
 800400e:	d902      	bls.n	8004016 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8004010:	4b57      	ldr	r3, [pc, #348]	; (8004170 <menu+0x2bd0>)
 8004012:	2200      	movs	r2, #0
 8004014:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004016:	f001 fa49 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800401a:	2104      	movs	r1, #4
 800401c:	4856      	ldr	r0, [pc, #344]	; (8004178 <menu+0x2bd8>)
 800401e:	f004 fea5 	bl	8008d6c <HAL_GPIO_ReadPin>
 8004022:	4603      	mov	r3, r0
 8004024:	2b01      	cmp	r3, #1
 8004026:	d115      	bne.n	8004054 <menu+0x2ab4>
 8004028:	4b54      	ldr	r3, [pc, #336]	; (800417c <menu+0x2bdc>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	f083 0301 	eor.w	r3, r3, #1
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00e      	beq.n	8004054 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8004036:	4b4e      	ldr	r3, [pc, #312]	; (8004170 <menu+0x2bd0>)
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	3b01      	subs	r3, #1
 800403c:	b2da      	uxtb	r2, r3
 800403e:	4b4c      	ldr	r3, [pc, #304]	; (8004170 <menu+0x2bd0>)
 8004040:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8004042:	4b4b      	ldr	r3, [pc, #300]	; (8004170 <menu+0x2bd0>)
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b06      	cmp	r3, #6
 8004048:	d902      	bls.n	8004050 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 800404a:	4b49      	ldr	r3, [pc, #292]	; (8004170 <menu+0x2bd0>)
 800404c:	2205      	movs	r2, #5
 800404e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004050:	f001 fa2c 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004054:	2108      	movs	r1, #8
 8004056:	4848      	ldr	r0, [pc, #288]	; (8004178 <menu+0x2bd8>)
 8004058:	f004 fe88 	bl	8008d6c <HAL_GPIO_ReadPin>
 800405c:	4603      	mov	r3, r0
 800405e:	2b01      	cmp	r3, #1
 8004060:	d10d      	bne.n	800407e <menu+0x2ade>
 8004062:	4b46      	ldr	r3, [pc, #280]	; (800417c <menu+0x2bdc>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	f083 0301 	eor.w	r3, r3, #1
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d006      	beq.n	800407e <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8004070:	4b3f      	ldr	r3, [pc, #252]	; (8004170 <menu+0x2bd0>)
 8004072:	781a      	ldrb	r2, [r3, #0]
 8004074:	4b42      	ldr	r3, [pc, #264]	; (8004180 <menu+0x2be0>)
 8004076:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8004078:	4b42      	ldr	r3, [pc, #264]	; (8004184 <menu+0x2be4>)
 800407a:	2201      	movs	r2, #1
 800407c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 800407e:	4b42      	ldr	r3, [pc, #264]	; (8004188 <menu+0x2be8>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b1a      	cmp	r3, #26
 8004084:	f040 80ec 	bne.w	8004260 <menu+0x2cc0>
		if(dilSecim == 0) {
 8004088:	4b35      	ldr	r3, [pc, #212]	; (8004160 <menu+0x2bc0>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d105      	bne.n	800409c <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8004090:	4a3e      	ldr	r2, [pc, #248]	; (800418c <menu+0x2bec>)
 8004092:	2101      	movs	r1, #1
 8004094:	2001      	movs	r0, #1
 8004096:	f7fc fa65 	bl	8000564 <lcd_print>
 800409a:	e008      	b.n	80040ae <menu+0x2b0e>
		} else if(dilSecim == 1) {
 800409c:	4b30      	ldr	r3, [pc, #192]	; (8004160 <menu+0x2bc0>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d104      	bne.n	80040ae <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 80040a4:	4a3a      	ldr	r2, [pc, #232]	; (8004190 <menu+0x2bf0>)
 80040a6:	2101      	movs	r1, #1
 80040a8:	2001      	movs	r0, #1
 80040aa:	f7fc fa5b 	bl	8000564 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 80040ae:	4b39      	ldr	r3, [pc, #228]	; (8004194 <menu+0x2bf4>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b63      	cmp	r3, #99	; 0x63
 80040b4:	d91e      	bls.n	80040f4 <menu+0x2b54>
			if(dilSecim == 0) {
 80040b6:	4b2a      	ldr	r3, [pc, #168]	; (8004160 <menu+0x2bc0>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d104      	bne.n	80040c8 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 80040be:	4a2a      	ldr	r2, [pc, #168]	; (8004168 <menu+0x2bc8>)
 80040c0:	2101      	movs	r1, #1
 80040c2:	2002      	movs	r0, #2
 80040c4:	f7fc fa4e 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1) {
 80040c8:	4b25      	ldr	r3, [pc, #148]	; (8004160 <menu+0x2bc0>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d104      	bne.n	80040da <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 80040d0:	4a26      	ldr	r2, [pc, #152]	; (800416c <menu+0x2bcc>)
 80040d2:	2101      	movs	r1, #1
 80040d4:	2002      	movs	r0, #2
 80040d6:	f7fc fa45 	bl	8000564 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80040da:	4b2e      	ldr	r3, [pc, #184]	; (8004194 <menu+0x2bf4>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	220a      	movs	r2, #10
 80040e0:	4924      	ldr	r1, [pc, #144]	; (8004174 <menu+0x2bd4>)
 80040e2:	4618      	mov	r0, r3
 80040e4:	f007 fe38 	bl	800bd58 <itoa>
			lcd_print(2,14,snum);
 80040e8:	4a22      	ldr	r2, [pc, #136]	; (8004174 <menu+0x2bd4>)
 80040ea:	210e      	movs	r1, #14
 80040ec:	2002      	movs	r0, #2
 80040ee:	f7fc fa39 	bl	8000564 <lcd_print>
 80040f2:	e066      	b.n	80041c2 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80040f4:	4b27      	ldr	r3, [pc, #156]	; (8004194 <menu+0x2bf4>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b09      	cmp	r3, #9
 80040fa:	d923      	bls.n	8004144 <menu+0x2ba4>
 80040fc:	4b25      	ldr	r3, [pc, #148]	; (8004194 <menu+0x2bf4>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b63      	cmp	r3, #99	; 0x63
 8004102:	d81f      	bhi.n	8004144 <menu+0x2ba4>
			if(dilSecim == 0) {
 8004104:	4b16      	ldr	r3, [pc, #88]	; (8004160 <menu+0x2bc0>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d105      	bne.n	8004118 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 800410c:	4a16      	ldr	r2, [pc, #88]	; (8004168 <menu+0x2bc8>)
 800410e:	2101      	movs	r1, #1
 8004110:	2002      	movs	r0, #2
 8004112:	f7fc fa27 	bl	8000564 <lcd_print>
 8004116:	e008      	b.n	800412a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8004118:	4b11      	ldr	r3, [pc, #68]	; (8004160 <menu+0x2bc0>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d104      	bne.n	800412a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8004120:	4a12      	ldr	r2, [pc, #72]	; (800416c <menu+0x2bcc>)
 8004122:	2101      	movs	r1, #1
 8004124:	2002      	movs	r0, #2
 8004126:	f7fc fa1d 	bl	8000564 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800412a:	4b1a      	ldr	r3, [pc, #104]	; (8004194 <menu+0x2bf4>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	220a      	movs	r2, #10
 8004130:	4910      	ldr	r1, [pc, #64]	; (8004174 <menu+0x2bd4>)
 8004132:	4618      	mov	r0, r3
 8004134:	f007 fe10 	bl	800bd58 <itoa>
			lcd_print(2, 15, snum);
 8004138:	4a0e      	ldr	r2, [pc, #56]	; (8004174 <menu+0x2bd4>)
 800413a:	210f      	movs	r1, #15
 800413c:	2002      	movs	r0, #2
 800413e:	f7fc fa11 	bl	8000564 <lcd_print>
 8004142:	e03e      	b.n	80041c2 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8004144:	4b13      	ldr	r3, [pc, #76]	; (8004194 <menu+0x2bf4>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b09      	cmp	r3, #9
 800414a:	d83a      	bhi.n	80041c2 <menu+0x2c22>
			if(dilSecim == 0) {
 800414c:	4b04      	ldr	r3, [pc, #16]	; (8004160 <menu+0x2bc0>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d121      	bne.n	8004198 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8004154:	4a04      	ldr	r2, [pc, #16]	; (8004168 <menu+0x2bc8>)
 8004156:	2101      	movs	r1, #1
 8004158:	2002      	movs	r0, #2
 800415a:	f7fc fa03 	bl	8000564 <lcd_print>
 800415e:	e024      	b.n	80041aa <menu+0x2c0a>
 8004160:	200002d1 	.word	0x200002d1
 8004164:	0800c8b4 	.word	0x0800c8b4
 8004168:	0800c47c 	.word	0x0800c47c
 800416c:	0800c7f0 	.word	0x0800c7f0
 8004170:	200002c7 	.word	0x200002c7
 8004174:	20000250 	.word	0x20000250
 8004178:	40010800 	.word	0x40010800
 800417c:	200002df 	.word	0x200002df
 8004180:	200001e0 	.word	0x200001e0
 8004184:	200002dc 	.word	0x200002dc
 8004188:	200002b0 	.word	0x200002b0
 800418c:	0800c8c8 	.word	0x0800c8c8
 8004190:	0800c8dc 	.word	0x0800c8dc
 8004194:	200002c8 	.word	0x200002c8
			} else if(dilSecim == 1) {
 8004198:	4b8f      	ldr	r3, [pc, #572]	; (80043d8 <menu+0x2e38>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d104      	bne.n	80041aa <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 80041a0:	4a8e      	ldr	r2, [pc, #568]	; (80043dc <menu+0x2e3c>)
 80041a2:	2101      	movs	r1, #1
 80041a4:	2002      	movs	r0, #2
 80041a6:	f7fc f9dd 	bl	8000564 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80041aa:	4b8d      	ldr	r3, [pc, #564]	; (80043e0 <menu+0x2e40>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	220a      	movs	r2, #10
 80041b0:	498c      	ldr	r1, [pc, #560]	; (80043e4 <menu+0x2e44>)
 80041b2:	4618      	mov	r0, r3
 80041b4:	f007 fdd0 	bl	800bd58 <itoa>
			lcd_print(2, 16, snum);
 80041b8:	4a8a      	ldr	r2, [pc, #552]	; (80043e4 <menu+0x2e44>)
 80041ba:	2110      	movs	r1, #16
 80041bc:	2002      	movs	r0, #2
 80041be:	f7fc f9d1 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80041c2:	2102      	movs	r1, #2
 80041c4:	4888      	ldr	r0, [pc, #544]	; (80043e8 <menu+0x2e48>)
 80041c6:	f004 fdd1 	bl	8008d6c <HAL_GPIO_ReadPin>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d115      	bne.n	80041fc <menu+0x2c5c>
 80041d0:	4b86      	ldr	r3, [pc, #536]	; (80043ec <menu+0x2e4c>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	f083 0301 	eor.w	r3, r3, #1
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00e      	beq.n	80041fc <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 80041de:	4b80      	ldr	r3, [pc, #512]	; (80043e0 <menu+0x2e40>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	3301      	adds	r3, #1
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	4b7e      	ldr	r3, [pc, #504]	; (80043e0 <menu+0x2e40>)
 80041e8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80041ea:	4b7d      	ldr	r3, [pc, #500]	; (80043e0 <menu+0x2e40>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2bb4      	cmp	r3, #180	; 0xb4
 80041f0:	d902      	bls.n	80041f8 <menu+0x2c58>
				makineCalismaTmr = 0;
 80041f2:	4b7b      	ldr	r3, [pc, #492]	; (80043e0 <menu+0x2e40>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80041f8:	f001 f958 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80041fc:	2104      	movs	r1, #4
 80041fe:	487a      	ldr	r0, [pc, #488]	; (80043e8 <menu+0x2e48>)
 8004200:	f004 fdb4 	bl	8008d6c <HAL_GPIO_ReadPin>
 8004204:	4603      	mov	r3, r0
 8004206:	2b01      	cmp	r3, #1
 8004208:	d115      	bne.n	8004236 <menu+0x2c96>
 800420a:	4b78      	ldr	r3, [pc, #480]	; (80043ec <menu+0x2e4c>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	f083 0301 	eor.w	r3, r3, #1
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00e      	beq.n	8004236 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8004218:	4b71      	ldr	r3, [pc, #452]	; (80043e0 <menu+0x2e40>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	3b01      	subs	r3, #1
 800421e:	b2da      	uxtb	r2, r3
 8004220:	4b6f      	ldr	r3, [pc, #444]	; (80043e0 <menu+0x2e40>)
 8004222:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8004224:	4b6e      	ldr	r3, [pc, #440]	; (80043e0 <menu+0x2e40>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2bb5      	cmp	r3, #181	; 0xb5
 800422a:	d902      	bls.n	8004232 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 800422c:	4b6c      	ldr	r3, [pc, #432]	; (80043e0 <menu+0x2e40>)
 800422e:	22b4      	movs	r2, #180	; 0xb4
 8004230:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004232:	f001 f93b 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004236:	2108      	movs	r1, #8
 8004238:	486b      	ldr	r0, [pc, #428]	; (80043e8 <menu+0x2e48>)
 800423a:	f004 fd97 	bl	8008d6c <HAL_GPIO_ReadPin>
 800423e:	4603      	mov	r3, r0
 8004240:	2b01      	cmp	r3, #1
 8004242:	d10d      	bne.n	8004260 <menu+0x2cc0>
 8004244:	4b69      	ldr	r3, [pc, #420]	; (80043ec <menu+0x2e4c>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	f083 0301 	eor.w	r3, r3, #1
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d006      	beq.n	8004260 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8004252:	4b63      	ldr	r3, [pc, #396]	; (80043e0 <menu+0x2e40>)
 8004254:	781a      	ldrb	r2, [r3, #0]
 8004256:	4b66      	ldr	r3, [pc, #408]	; (80043f0 <menu+0x2e50>)
 8004258:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800425a:	4b66      	ldr	r3, [pc, #408]	; (80043f4 <menu+0x2e54>)
 800425c:	2201      	movs	r2, #1
 800425e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004260:	4b65      	ldr	r3, [pc, #404]	; (80043f8 <menu+0x2e58>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b1b      	cmp	r3, #27
 8004266:	f040 8083 	bne.w	8004370 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800426a:	4a64      	ldr	r2, [pc, #400]	; (80043fc <menu+0x2e5c>)
 800426c:	2101      	movs	r1, #1
 800426e:	2001      	movs	r0, #1
 8004270:	f7fc f978 	bl	8000564 <lcd_print>

		if(buzzer == 0) {
 8004274:	4b62      	ldr	r3, [pc, #392]	; (8004400 <menu+0x2e60>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d113      	bne.n	80042a4 <menu+0x2d04>
			if(dilSecim == 0) {
 800427c:	4b56      	ldr	r3, [pc, #344]	; (80043d8 <menu+0x2e38>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d105      	bne.n	8004290 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8004284:	4a5f      	ldr	r2, [pc, #380]	; (8004404 <menu+0x2e64>)
 8004286:	2101      	movs	r1, #1
 8004288:	2002      	movs	r0, #2
 800428a:	f7fc f96b 	bl	8000564 <lcd_print>
 800428e:	e020      	b.n	80042d2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004290:	4b51      	ldr	r3, [pc, #324]	; (80043d8 <menu+0x2e38>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d11c      	bne.n	80042d2 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8004298:	4a5b      	ldr	r2, [pc, #364]	; (8004408 <menu+0x2e68>)
 800429a:	2101      	movs	r1, #1
 800429c:	2002      	movs	r0, #2
 800429e:	f7fc f961 	bl	8000564 <lcd_print>
 80042a2:	e016      	b.n	80042d2 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 80042a4:	4b56      	ldr	r3, [pc, #344]	; (8004400 <menu+0x2e60>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d112      	bne.n	80042d2 <menu+0x2d32>
			if(dilSecim == 0) {
 80042ac:	4b4a      	ldr	r3, [pc, #296]	; (80043d8 <menu+0x2e38>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d105      	bne.n	80042c0 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80042b4:	4a55      	ldr	r2, [pc, #340]	; (800440c <menu+0x2e6c>)
 80042b6:	2101      	movs	r1, #1
 80042b8:	2002      	movs	r0, #2
 80042ba:	f7fc f953 	bl	8000564 <lcd_print>
 80042be:	e008      	b.n	80042d2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80042c0:	4b45      	ldr	r3, [pc, #276]	; (80043d8 <menu+0x2e38>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d104      	bne.n	80042d2 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80042c8:	4a51      	ldr	r2, [pc, #324]	; (8004410 <menu+0x2e70>)
 80042ca:	2101      	movs	r1, #1
 80042cc:	2002      	movs	r0, #2
 80042ce:	f7fc f949 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80042d2:	2102      	movs	r1, #2
 80042d4:	4844      	ldr	r0, [pc, #272]	; (80043e8 <menu+0x2e48>)
 80042d6:	f004 fd49 	bl	8008d6c <HAL_GPIO_ReadPin>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d115      	bne.n	800430c <menu+0x2d6c>
 80042e0:	4b42      	ldr	r3, [pc, #264]	; (80043ec <menu+0x2e4c>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	f083 0301 	eor.w	r3, r3, #1
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00e      	beq.n	800430c <menu+0x2d6c>
			buzzer = buzzer + 1;
 80042ee:	4b44      	ldr	r3, [pc, #272]	; (8004400 <menu+0x2e60>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	3301      	adds	r3, #1
 80042f4:	b2da      	uxtb	r2, r3
 80042f6:	4b42      	ldr	r3, [pc, #264]	; (8004400 <menu+0x2e60>)
 80042f8:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80042fa:	4b41      	ldr	r3, [pc, #260]	; (8004400 <menu+0x2e60>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d902      	bls.n	8004308 <menu+0x2d68>
				buzzer = 0;
 8004302:	4b3f      	ldr	r3, [pc, #252]	; (8004400 <menu+0x2e60>)
 8004304:	2200      	movs	r2, #0
 8004306:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004308:	f001 f8d0 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800430c:	2104      	movs	r1, #4
 800430e:	4836      	ldr	r0, [pc, #216]	; (80043e8 <menu+0x2e48>)
 8004310:	f004 fd2c 	bl	8008d6c <HAL_GPIO_ReadPin>
 8004314:	4603      	mov	r3, r0
 8004316:	2b01      	cmp	r3, #1
 8004318:	d115      	bne.n	8004346 <menu+0x2da6>
 800431a:	4b34      	ldr	r3, [pc, #208]	; (80043ec <menu+0x2e4c>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	f083 0301 	eor.w	r3, r3, #1
 8004322:	b2db      	uxtb	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00e      	beq.n	8004346 <menu+0x2da6>
			buzzer = buzzer - 1;
 8004328:	4b35      	ldr	r3, [pc, #212]	; (8004400 <menu+0x2e60>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	3b01      	subs	r3, #1
 800432e:	b2da      	uxtb	r2, r3
 8004330:	4b33      	ldr	r3, [pc, #204]	; (8004400 <menu+0x2e60>)
 8004332:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004334:	4b32      	ldr	r3, [pc, #200]	; (8004400 <menu+0x2e60>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <menu+0x2da2>
		   		buzzer = 1;
 800433c:	4b30      	ldr	r3, [pc, #192]	; (8004400 <menu+0x2e60>)
 800433e:	2201      	movs	r2, #1
 8004340:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004342:	f001 f8b3 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004346:	2108      	movs	r1, #8
 8004348:	4827      	ldr	r0, [pc, #156]	; (80043e8 <menu+0x2e48>)
 800434a:	f004 fd0f 	bl	8008d6c <HAL_GPIO_ReadPin>
 800434e:	4603      	mov	r3, r0
 8004350:	2b01      	cmp	r3, #1
 8004352:	d10d      	bne.n	8004370 <menu+0x2dd0>
 8004354:	4b25      	ldr	r3, [pc, #148]	; (80043ec <menu+0x2e4c>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	f083 0301 	eor.w	r3, r3, #1
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d006      	beq.n	8004370 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8004362:	4b27      	ldr	r3, [pc, #156]	; (8004400 <menu+0x2e60>)
 8004364:	781a      	ldrb	r2, [r3, #0]
 8004366:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <menu+0x2e50>)
 8004368:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800436a:	4b22      	ldr	r3, [pc, #136]	; (80043f4 <menu+0x2e54>)
 800436c:	2201      	movs	r2, #1
 800436e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004370:	4b21      	ldr	r3, [pc, #132]	; (80043f8 <menu+0x2e58>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b1c      	cmp	r3, #28
 8004376:	f040 80ab 	bne.w	80044d0 <menu+0x2f30>
		calismaSayModu = 0;
 800437a:	4b26      	ldr	r3, [pc, #152]	; (8004414 <menu+0x2e74>)
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004380:	4a25      	ldr	r2, [pc, #148]	; (8004418 <menu+0x2e78>)
 8004382:	2101      	movs	r1, #1
 8004384:	2001      	movs	r0, #1
 8004386:	f7fc f8ed 	bl	8000564 <lcd_print>

		if(demoMode == 0) {
 800438a:	4b24      	ldr	r3, [pc, #144]	; (800441c <menu+0x2e7c>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d113      	bne.n	80043ba <menu+0x2e1a>
			if(dilSecim == 0) {
 8004392:	4b11      	ldr	r3, [pc, #68]	; (80043d8 <menu+0x2e38>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d105      	bne.n	80043a6 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 800439a:	4a1a      	ldr	r2, [pc, #104]	; (8004404 <menu+0x2e64>)
 800439c:	2101      	movs	r1, #1
 800439e:	2002      	movs	r0, #2
 80043a0:	f7fc f8e0 	bl	8000564 <lcd_print>
 80043a4:	e045      	b.n	8004432 <menu+0x2e92>
			} else if(dilSecim == 1) {
 80043a6:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <menu+0x2e38>)
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d141      	bne.n	8004432 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80043ae:	4a16      	ldr	r2, [pc, #88]	; (8004408 <menu+0x2e68>)
 80043b0:	2101      	movs	r1, #1
 80043b2:	2002      	movs	r0, #2
 80043b4:	f7fc f8d6 	bl	8000564 <lcd_print>
 80043b8:	e03b      	b.n	8004432 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80043ba:	4b18      	ldr	r3, [pc, #96]	; (800441c <menu+0x2e7c>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d137      	bne.n	8004432 <menu+0x2e92>
			if(dilSecim == 0){
 80043c2:	4b05      	ldr	r3, [pc, #20]	; (80043d8 <menu+0x2e38>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d12a      	bne.n	8004420 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80043ca:	4a10      	ldr	r2, [pc, #64]	; (800440c <menu+0x2e6c>)
 80043cc:	2101      	movs	r1, #1
 80043ce:	2002      	movs	r0, #2
 80043d0:	f7fc f8c8 	bl	8000564 <lcd_print>
 80043d4:	e02d      	b.n	8004432 <menu+0x2e92>
 80043d6:	bf00      	nop
 80043d8:	200002d1 	.word	0x200002d1
 80043dc:	0800c7f0 	.word	0x0800c7f0
 80043e0:	200002c8 	.word	0x200002c8
 80043e4:	20000250 	.word	0x20000250
 80043e8:	40010800 	.word	0x40010800
 80043ec:	200002df 	.word	0x200002df
 80043f0:	200001e0 	.word	0x200001e0
 80043f4:	200002dc 	.word	0x200002dc
 80043f8:	200002b0 	.word	0x200002b0
 80043fc:	0800c8f0 	.word	0x0800c8f0
 8004400:	200002cc 	.word	0x200002cc
 8004404:	0800c218 	.word	0x0800c218
 8004408:	0800c22c 	.word	0x0800c22c
 800440c:	0800c278 	.word	0x0800c278
 8004410:	0800c28c 	.word	0x0800c28c
 8004414:	200002d0 	.word	0x200002d0
 8004418:	0800c904 	.word	0x0800c904
 800441c:	200002ce 	.word	0x200002ce
			} else if(dilSecim == 1) {
 8004420:	4b71      	ldr	r3, [pc, #452]	; (80045e8 <menu+0x3048>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d104      	bne.n	8004432 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004428:	4a70      	ldr	r2, [pc, #448]	; (80045ec <menu+0x304c>)
 800442a:	2101      	movs	r1, #1
 800442c:	2002      	movs	r0, #2
 800442e:	f7fc f899 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004432:	2102      	movs	r1, #2
 8004434:	486e      	ldr	r0, [pc, #440]	; (80045f0 <menu+0x3050>)
 8004436:	f004 fc99 	bl	8008d6c <HAL_GPIO_ReadPin>
 800443a:	4603      	mov	r3, r0
 800443c:	2b01      	cmp	r3, #1
 800443e:	d115      	bne.n	800446c <menu+0x2ecc>
 8004440:	4b6c      	ldr	r3, [pc, #432]	; (80045f4 <menu+0x3054>)
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	f083 0301 	eor.w	r3, r3, #1
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00e      	beq.n	800446c <menu+0x2ecc>
			demoMode = demoMode + 1;
 800444e:	4b6a      	ldr	r3, [pc, #424]	; (80045f8 <menu+0x3058>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	3301      	adds	r3, #1
 8004454:	b2da      	uxtb	r2, r3
 8004456:	4b68      	ldr	r3, [pc, #416]	; (80045f8 <menu+0x3058>)
 8004458:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800445a:	4b67      	ldr	r3, [pc, #412]	; (80045f8 <menu+0x3058>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d902      	bls.n	8004468 <menu+0x2ec8>
				demoMode = 0;
 8004462:	4b65      	ldr	r3, [pc, #404]	; (80045f8 <menu+0x3058>)
 8004464:	2200      	movs	r2, #0
 8004466:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004468:	f001 f820 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800446c:	2104      	movs	r1, #4
 800446e:	4860      	ldr	r0, [pc, #384]	; (80045f0 <menu+0x3050>)
 8004470:	f004 fc7c 	bl	8008d6c <HAL_GPIO_ReadPin>
 8004474:	4603      	mov	r3, r0
 8004476:	2b01      	cmp	r3, #1
 8004478:	d115      	bne.n	80044a6 <menu+0x2f06>
 800447a:	4b5e      	ldr	r3, [pc, #376]	; (80045f4 <menu+0x3054>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	f083 0301 	eor.w	r3, r3, #1
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00e      	beq.n	80044a6 <menu+0x2f06>
			demoMode = demoMode - 1;
 8004488:	4b5b      	ldr	r3, [pc, #364]	; (80045f8 <menu+0x3058>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	3b01      	subs	r3, #1
 800448e:	b2da      	uxtb	r2, r3
 8004490:	4b59      	ldr	r3, [pc, #356]	; (80045f8 <menu+0x3058>)
 8004492:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004494:	4b58      	ldr	r3, [pc, #352]	; (80045f8 <menu+0x3058>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <menu+0x2f02>
		   		demoMode = 1;
 800449c:	4b56      	ldr	r3, [pc, #344]	; (80045f8 <menu+0x3058>)
 800449e:	2201      	movs	r2, #1
 80044a0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80044a2:	f001 f803 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80044a6:	2108      	movs	r1, #8
 80044a8:	4851      	ldr	r0, [pc, #324]	; (80045f0 <menu+0x3050>)
 80044aa:	f004 fc5f 	bl	8008d6c <HAL_GPIO_ReadPin>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d10d      	bne.n	80044d0 <menu+0x2f30>
 80044b4:	4b4f      	ldr	r3, [pc, #316]	; (80045f4 <menu+0x3054>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	f083 0301 	eor.w	r3, r3, #1
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d006      	beq.n	80044d0 <menu+0x2f30>
			eepromData[26] = demoMode;
 80044c2:	4b4d      	ldr	r3, [pc, #308]	; (80045f8 <menu+0x3058>)
 80044c4:	781a      	ldrb	r2, [r3, #0]
 80044c6:	4b4d      	ldr	r3, [pc, #308]	; (80045fc <menu+0x305c>)
 80044c8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80044ca:	4b4d      	ldr	r3, [pc, #308]	; (8004600 <menu+0x3060>)
 80044cc:	2201      	movs	r2, #1
 80044ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80044d0:	4b4c      	ldr	r3, [pc, #304]	; (8004604 <menu+0x3064>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b1d      	cmp	r3, #29
 80044d6:	f040 8132 	bne.w	800473e <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80044da:	4b4b      	ldr	r3, [pc, #300]	; (8004608 <menu+0x3068>)
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d113      	bne.n	800450a <menu+0x2f6a>
 80044e2:	4b4a      	ldr	r3, [pc, #296]	; (800460c <menu+0x306c>)
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10f      	bne.n	800450a <menu+0x2f6a>
 80044ea:	4b49      	ldr	r3, [pc, #292]	; (8004610 <menu+0x3070>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10b      	bne.n	800450a <menu+0x2f6a>
 80044f2:	4b48      	ldr	r3, [pc, #288]	; (8004614 <menu+0x3074>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d107      	bne.n	800450a <menu+0x2f6a>
 80044fa:	4b47      	ldr	r3, [pc, #284]	; (8004618 <menu+0x3078>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d103      	bne.n	800450a <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004502:	4b46      	ldr	r3, [pc, #280]	; (800461c <menu+0x307c>)
 8004504:	2200      	movs	r2, #0
 8004506:	701a      	strb	r2, [r3, #0]
 8004508:	e002      	b.n	8004510 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800450a:	4b44      	ldr	r3, [pc, #272]	; (800461c <menu+0x307c>)
 800450c:	2201      	movs	r2, #1
 800450e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004510:	4b43      	ldr	r3, [pc, #268]	; (8004620 <menu+0x3080>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d154      	bne.n	80045c2 <menu+0x3022>
			if(dilSecim == 0) {
 8004518:	4b33      	ldr	r3, [pc, #204]	; (80045e8 <menu+0x3048>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d105      	bne.n	800452c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004520:	4a40      	ldr	r2, [pc, #256]	; (8004624 <menu+0x3084>)
 8004522:	2101      	movs	r1, #1
 8004524:	2001      	movs	r0, #1
 8004526:	f7fc f81d 	bl	8000564 <lcd_print>
 800452a:	e008      	b.n	800453e <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800452c:	4b2e      	ldr	r3, [pc, #184]	; (80045e8 <menu+0x3048>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d104      	bne.n	800453e <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004534:	4a3c      	ldr	r2, [pc, #240]	; (8004628 <menu+0x3088>)
 8004536:	2101      	movs	r1, #1
 8004538:	2001      	movs	r0, #1
 800453a:	f7fc f813 	bl	8000564 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800453e:	4b36      	ldr	r3, [pc, #216]	; (8004618 <menu+0x3078>)
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	220a      	movs	r2, #10
 8004544:	4939      	ldr	r1, [pc, #228]	; (800462c <menu+0x308c>)
 8004546:	4618      	mov	r0, r3
 8004548:	f007 fc06 	bl	800bd58 <itoa>
			lcd_print(2, 12, snum);
 800454c:	4a37      	ldr	r2, [pc, #220]	; (800462c <menu+0x308c>)
 800454e:	210c      	movs	r1, #12
 8004550:	2002      	movs	r0, #2
 8004552:	f7fc f807 	bl	8000564 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004556:	4b2f      	ldr	r3, [pc, #188]	; (8004614 <menu+0x3074>)
 8004558:	781b      	ldrb	r3, [r3, #0]
 800455a:	220a      	movs	r2, #10
 800455c:	4933      	ldr	r1, [pc, #204]	; (800462c <menu+0x308c>)
 800455e:	4618      	mov	r0, r3
 8004560:	f007 fbfa 	bl	800bd58 <itoa>
			lcd_print(2, 13, snum);
 8004564:	4a31      	ldr	r2, [pc, #196]	; (800462c <menu+0x308c>)
 8004566:	210d      	movs	r1, #13
 8004568:	2002      	movs	r0, #2
 800456a:	f7fb fffb 	bl	8000564 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800456e:	4b28      	ldr	r3, [pc, #160]	; (8004610 <menu+0x3070>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	220a      	movs	r2, #10
 8004574:	492d      	ldr	r1, [pc, #180]	; (800462c <menu+0x308c>)
 8004576:	4618      	mov	r0, r3
 8004578:	f007 fbee 	bl	800bd58 <itoa>
			lcd_print(2, 14, snum);
 800457c:	4a2b      	ldr	r2, [pc, #172]	; (800462c <menu+0x308c>)
 800457e:	210e      	movs	r1, #14
 8004580:	2002      	movs	r0, #2
 8004582:	f7fb ffef 	bl	8000564 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004586:	4b21      	ldr	r3, [pc, #132]	; (800460c <menu+0x306c>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	220a      	movs	r2, #10
 800458c:	4927      	ldr	r1, [pc, #156]	; (800462c <menu+0x308c>)
 800458e:	4618      	mov	r0, r3
 8004590:	f007 fbe2 	bl	800bd58 <itoa>
			lcd_print(2, 15, snum);
 8004594:	4a25      	ldr	r2, [pc, #148]	; (800462c <menu+0x308c>)
 8004596:	210f      	movs	r1, #15
 8004598:	2002      	movs	r0, #2
 800459a:	f7fb ffe3 	bl	8000564 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800459e:	4b1a      	ldr	r3, [pc, #104]	; (8004608 <menu+0x3068>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	220a      	movs	r2, #10
 80045a4:	4921      	ldr	r1, [pc, #132]	; (800462c <menu+0x308c>)
 80045a6:	4618      	mov	r0, r3
 80045a8:	f007 fbd6 	bl	800bd58 <itoa>
			lcd_print(2, 16, snum);
 80045ac:	4a1f      	ldr	r2, [pc, #124]	; (800462c <menu+0x308c>)
 80045ae:	2110      	movs	r1, #16
 80045b0:	2002      	movs	r0, #2
 80045b2:	f7fb ffd7 	bl	8000564 <lcd_print>

			lcd_print(2, 1, "           ");
 80045b6:	4a1e      	ldr	r2, [pc, #120]	; (8004630 <menu+0x3090>)
 80045b8:	2101      	movs	r1, #1
 80045ba:	2002      	movs	r0, #2
 80045bc:	f7fb ffd2 	bl	8000564 <lcd_print>
 80045c0:	e048      	b.n	8004654 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80045c2:	4b17      	ldr	r3, [pc, #92]	; (8004620 <menu+0x3080>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d144      	bne.n	8004654 <menu+0x30b4>
			if(dilSecim == 0) {
 80045ca:	4b07      	ldr	r3, [pc, #28]	; (80045e8 <menu+0x3048>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d132      	bne.n	8004638 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80045d2:	4a14      	ldr	r2, [pc, #80]	; (8004624 <menu+0x3084>)
 80045d4:	2101      	movs	r1, #1
 80045d6:	2001      	movs	r0, #1
 80045d8:	f7fb ffc4 	bl	8000564 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80045dc:	4a15      	ldr	r2, [pc, #84]	; (8004634 <menu+0x3094>)
 80045de:	2101      	movs	r1, #1
 80045e0:	2002      	movs	r0, #2
 80045e2:	f7fb ffbf 	bl	8000564 <lcd_print>
 80045e6:	e035      	b.n	8004654 <menu+0x30b4>
 80045e8:	200002d1 	.word	0x200002d1
 80045ec:	0800c28c 	.word	0x0800c28c
 80045f0:	40010800 	.word	0x40010800
 80045f4:	200002df 	.word	0x200002df
 80045f8:	200002ce 	.word	0x200002ce
 80045fc:	200001e0 	.word	0x200001e0
 8004600:	200002dc 	.word	0x200002dc
 8004604:	200002b0 	.word	0x200002b0
 8004608:	200002ad 	.word	0x200002ad
 800460c:	200002ae 	.word	0x200002ae
 8004610:	200000a4 	.word	0x200000a4
 8004614:	200000a5 	.word	0x200000a5
 8004618:	200002af 	.word	0x200002af
 800461c:	200002f1 	.word	0x200002f1
 8004620:	200002d0 	.word	0x200002d0
 8004624:	0800c914 	.word	0x0800c914
 8004628:	0800c928 	.word	0x0800c928
 800462c:	20000250 	.word	0x20000250
 8004630:	0800c93c 	.word	0x0800c93c
 8004634:	0800c948 	.word	0x0800c948
			} else if(dilSecim == 1) {
 8004638:	4b94      	ldr	r3, [pc, #592]	; (800488c <menu+0x32ec>)
 800463a:	781b      	ldrb	r3, [r3, #0]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d109      	bne.n	8004654 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004640:	4a93      	ldr	r2, [pc, #588]	; (8004890 <menu+0x32f0>)
 8004642:	2101      	movs	r1, #1
 8004644:	2001      	movs	r0, #1
 8004646:	f7fb ff8d 	bl	8000564 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800464a:	4a92      	ldr	r2, [pc, #584]	; (8004894 <menu+0x32f4>)
 800464c:	2101      	movs	r1, #1
 800464e:	2002      	movs	r0, #2
 8004650:	f7fb ff88 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004654:	2102      	movs	r1, #2
 8004656:	4890      	ldr	r0, [pc, #576]	; (8004898 <menu+0x32f8>)
 8004658:	f004 fb88 	bl	8008d6c <HAL_GPIO_ReadPin>
 800465c:	4603      	mov	r3, r0
 800465e:	2b01      	cmp	r3, #1
 8004660:	d119      	bne.n	8004696 <menu+0x30f6>
 8004662:	4b8e      	ldr	r3, [pc, #568]	; (800489c <menu+0x32fc>)
 8004664:	781b      	ldrb	r3, [r3, #0]
 8004666:	f083 0301 	eor.w	r3, r3, #1
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d012      	beq.n	8004696 <menu+0x30f6>
 8004670:	4b8b      	ldr	r3, [pc, #556]	; (80048a0 <menu+0x3300>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00e      	beq.n	8004696 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004678:	4b8a      	ldr	r3, [pc, #552]	; (80048a4 <menu+0x3304>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	3301      	adds	r3, #1
 800467e:	b2da      	uxtb	r2, r3
 8004680:	4b88      	ldr	r3, [pc, #544]	; (80048a4 <menu+0x3304>)
 8004682:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004684:	4b87      	ldr	r3, [pc, #540]	; (80048a4 <menu+0x3304>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d902      	bls.n	8004692 <menu+0x30f2>
				calismaSayModu = 0;
 800468c:	4b85      	ldr	r3, [pc, #532]	; (80048a4 <menu+0x3304>)
 800468e:	2200      	movs	r2, #0
 8004690:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004692:	f000 ff0b 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004696:	2104      	movs	r1, #4
 8004698:	487f      	ldr	r0, [pc, #508]	; (8004898 <menu+0x32f8>)
 800469a:	f004 fb67 	bl	8008d6c <HAL_GPIO_ReadPin>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d119      	bne.n	80046d8 <menu+0x3138>
 80046a4:	4b7d      	ldr	r3, [pc, #500]	; (800489c <menu+0x32fc>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	f083 0301 	eor.w	r3, r3, #1
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d012      	beq.n	80046d8 <menu+0x3138>
 80046b2:	4b7b      	ldr	r3, [pc, #492]	; (80048a0 <menu+0x3300>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00e      	beq.n	80046d8 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80046ba:	4b7a      	ldr	r3, [pc, #488]	; (80048a4 <menu+0x3304>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	3b01      	subs	r3, #1
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	4b78      	ldr	r3, [pc, #480]	; (80048a4 <menu+0x3304>)
 80046c4:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80046c6:	4b77      	ldr	r3, [pc, #476]	; (80048a4 <menu+0x3304>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <menu+0x3134>
		   		calismaSayModu = 1;
 80046ce:	4b75      	ldr	r3, [pc, #468]	; (80048a4 <menu+0x3304>)
 80046d0:	2201      	movs	r2, #1
 80046d2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80046d4:	f000 feea 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80046d8:	2108      	movs	r1, #8
 80046da:	486f      	ldr	r0, [pc, #444]	; (8004898 <menu+0x32f8>)
 80046dc:	f004 fb46 	bl	8008d6c <HAL_GPIO_ReadPin>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d12b      	bne.n	800473e <menu+0x319e>
 80046e6:	4b6d      	ldr	r3, [pc, #436]	; (800489c <menu+0x32fc>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	f083 0301 	eor.w	r3, r3, #1
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d024      	beq.n	800473e <menu+0x319e>
			eepromData[32] = 0;
 80046f4:	4b6c      	ldr	r3, [pc, #432]	; (80048a8 <menu+0x3308>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80046fc:	4b6a      	ldr	r3, [pc, #424]	; (80048a8 <menu+0x3308>)
 80046fe:	2200      	movs	r2, #0
 8004700:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004702:	4b69      	ldr	r3, [pc, #420]	; (80048a8 <menu+0x3308>)
 8004704:	2200      	movs	r2, #0
 8004706:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004708:	4b67      	ldr	r3, [pc, #412]	; (80048a8 <menu+0x3308>)
 800470a:	2200      	movs	r2, #0
 800470c:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800470e:	4b66      	ldr	r3, [pc, #408]	; (80048a8 <menu+0x3308>)
 8004710:	2200      	movs	r2, #0
 8004712:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004714:	4b65      	ldr	r3, [pc, #404]	; (80048ac <menu+0x330c>)
 8004716:	2200      	movs	r2, #0
 8004718:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800471a:	4b65      	ldr	r3, [pc, #404]	; (80048b0 <menu+0x3310>)
 800471c:	2200      	movs	r2, #0
 800471e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004720:	4b64      	ldr	r3, [pc, #400]	; (80048b4 <menu+0x3314>)
 8004722:	2200      	movs	r2, #0
 8004724:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004726:	4b64      	ldr	r3, [pc, #400]	; (80048b8 <menu+0x3318>)
 8004728:	2200      	movs	r2, #0
 800472a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800472c:	4b63      	ldr	r3, [pc, #396]	; (80048bc <menu+0x331c>)
 800472e:	2200      	movs	r2, #0
 8004730:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004732:	4b5c      	ldr	r3, [pc, #368]	; (80048a4 <menu+0x3304>)
 8004734:	2200      	movs	r2, #0
 8004736:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004738:	4b61      	ldr	r3, [pc, #388]	; (80048c0 <menu+0x3320>)
 800473a:	2201      	movs	r2, #1
 800473c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800473e:	4b61      	ldr	r3, [pc, #388]	; (80048c4 <menu+0x3324>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b1e      	cmp	r3, #30
 8004744:	d16f      	bne.n	8004826 <menu+0x3286>
		calismaSayModu = 0;
 8004746:	4b57      	ldr	r3, [pc, #348]	; (80048a4 <menu+0x3304>)
 8004748:	2200      	movs	r2, #0
 800474a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800474c:	4b4f      	ldr	r3, [pc, #316]	; (800488c <menu+0x32ec>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10a      	bne.n	800476a <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004754:	4a5c      	ldr	r2, [pc, #368]	; (80048c8 <menu+0x3328>)
 8004756:	2101      	movs	r1, #1
 8004758:	2001      	movs	r0, #1
 800475a:	f7fb ff03 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800475e:	4a5b      	ldr	r2, [pc, #364]	; (80048cc <menu+0x332c>)
 8004760:	2101      	movs	r1, #1
 8004762:	2002      	movs	r0, #2
 8004764:	f7fb fefe 	bl	8000564 <lcd_print>
 8004768:	e00d      	b.n	8004786 <menu+0x31e6>
		} else if(dilSecim == 1) {
 800476a:	4b48      	ldr	r3, [pc, #288]	; (800488c <menu+0x32ec>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d109      	bne.n	8004786 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004772:	4a57      	ldr	r2, [pc, #348]	; (80048d0 <menu+0x3330>)
 8004774:	2101      	movs	r1, #1
 8004776:	2001      	movs	r0, #1
 8004778:	f7fb fef4 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800477c:	4a55      	ldr	r2, [pc, #340]	; (80048d4 <menu+0x3334>)
 800477e:	2101      	movs	r1, #1
 8004780:	2002      	movs	r0, #2
 8004782:	f7fb feef 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004786:	2102      	movs	r1, #2
 8004788:	4843      	ldr	r0, [pc, #268]	; (8004898 <menu+0x32f8>)
 800478a:	f004 faef 	bl	8008d6c <HAL_GPIO_ReadPin>
 800478e:	4603      	mov	r3, r0
 8004790:	2b01      	cmp	r3, #1
 8004792:	d115      	bne.n	80047c0 <menu+0x3220>
 8004794:	4b41      	ldr	r3, [pc, #260]	; (800489c <menu+0x32fc>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	f083 0301 	eor.w	r3, r3, #1
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d00e      	beq.n	80047c0 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80047a2:	4b3a      	ldr	r3, [pc, #232]	; (800488c <menu+0x32ec>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	3301      	adds	r3, #1
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	4b38      	ldr	r3, [pc, #224]	; (800488c <menu+0x32ec>)
 80047ac:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80047ae:	4b37      	ldr	r3, [pc, #220]	; (800488c <menu+0x32ec>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d902      	bls.n	80047bc <menu+0x321c>
				dilSecim = 0;
 80047b6:	4b35      	ldr	r3, [pc, #212]	; (800488c <menu+0x32ec>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80047bc:	f000 fe76 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047c0:	2104      	movs	r1, #4
 80047c2:	4835      	ldr	r0, [pc, #212]	; (8004898 <menu+0x32f8>)
 80047c4:	f004 fad2 	bl	8008d6c <HAL_GPIO_ReadPin>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d115      	bne.n	80047fa <menu+0x325a>
 80047ce:	4b33      	ldr	r3, [pc, #204]	; (800489c <menu+0x32fc>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	f083 0301 	eor.w	r3, r3, #1
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00e      	beq.n	80047fa <menu+0x325a>
			dilSecim = dilSecim - 1;
 80047dc:	4b2b      	ldr	r3, [pc, #172]	; (800488c <menu+0x32ec>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	4b29      	ldr	r3, [pc, #164]	; (800488c <menu+0x32ec>)
 80047e6:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80047e8:	4b28      	ldr	r3, [pc, #160]	; (800488c <menu+0x32ec>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <menu+0x3256>
		   		dilSecim = 1;
 80047f0:	4b26      	ldr	r3, [pc, #152]	; (800488c <menu+0x32ec>)
 80047f2:	2201      	movs	r2, #1
 80047f4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80047f6:	f000 fe59 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80047fa:	2108      	movs	r1, #8
 80047fc:	4826      	ldr	r0, [pc, #152]	; (8004898 <menu+0x32f8>)
 80047fe:	f004 fab5 	bl	8008d6c <HAL_GPIO_ReadPin>
 8004802:	4603      	mov	r3, r0
 8004804:	2b01      	cmp	r3, #1
 8004806:	d10e      	bne.n	8004826 <menu+0x3286>
 8004808:	4b24      	ldr	r3, [pc, #144]	; (800489c <menu+0x32fc>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	f083 0301 	eor.w	r3, r3, #1
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d007      	beq.n	8004826 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004816:	4b1d      	ldr	r3, [pc, #116]	; (800488c <menu+0x32ec>)
 8004818:	781a      	ldrb	r2, [r3, #0]
 800481a:	4b23      	ldr	r3, [pc, #140]	; (80048a8 <menu+0x3308>)
 800481c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004820:	4b27      	ldr	r3, [pc, #156]	; (80048c0 <menu+0x3320>)
 8004822:	2201      	movs	r2, #1
 8004824:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004826:	4b27      	ldr	r3, [pc, #156]	; (80048c4 <menu+0x3324>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2b1f      	cmp	r3, #31
 800482c:	f040 80b7 	bne.w	800499e <menu+0x33fe>
		calismaSayModu = 0;
 8004830:	4b1c      	ldr	r3, [pc, #112]	; (80048a4 <menu+0x3304>)
 8004832:	2200      	movs	r2, #0
 8004834:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004836:	4a28      	ldr	r2, [pc, #160]	; (80048d8 <menu+0x3338>)
 8004838:	2101      	movs	r1, #1
 800483a:	2001      	movs	r0, #1
 800483c:	f7fb fe92 	bl	8000564 <lcd_print>

		if(iotMode == 0) {
 8004840:	4b26      	ldr	r3, [pc, #152]	; (80048dc <menu+0x333c>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d113      	bne.n	8004870 <menu+0x32d0>
			if(dilSecim == 0) {
 8004848:	4b10      	ldr	r3, [pc, #64]	; (800488c <menu+0x32ec>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d105      	bne.n	800485c <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004850:	4a23      	ldr	r2, [pc, #140]	; (80048e0 <menu+0x3340>)
 8004852:	2101      	movs	r1, #1
 8004854:	2002      	movs	r0, #2
 8004856:	f7fb fe85 	bl	8000564 <lcd_print>
 800485a:	e050      	b.n	80048fe <menu+0x335e>
			} else if(dilSecim == 1) {
 800485c:	4b0b      	ldr	r3, [pc, #44]	; (800488c <menu+0x32ec>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d14c      	bne.n	80048fe <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004864:	4a1f      	ldr	r2, [pc, #124]	; (80048e4 <menu+0x3344>)
 8004866:	2101      	movs	r1, #1
 8004868:	2002      	movs	r0, #2
 800486a:	f7fb fe7b 	bl	8000564 <lcd_print>
 800486e:	e046      	b.n	80048fe <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004870:	4b1a      	ldr	r3, [pc, #104]	; (80048dc <menu+0x333c>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d142      	bne.n	80048fe <menu+0x335e>
			if(dilSecim == 0){
 8004878:	4b04      	ldr	r3, [pc, #16]	; (800488c <menu+0x32ec>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d135      	bne.n	80048ec <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004880:	4a19      	ldr	r2, [pc, #100]	; (80048e8 <menu+0x3348>)
 8004882:	2101      	movs	r1, #1
 8004884:	2002      	movs	r0, #2
 8004886:	f7fb fe6d 	bl	8000564 <lcd_print>
 800488a:	e038      	b.n	80048fe <menu+0x335e>
 800488c:	200002d1 	.word	0x200002d1
 8004890:	0800c928 	.word	0x0800c928
 8004894:	0800c95c 	.word	0x0800c95c
 8004898:	40010800 	.word	0x40010800
 800489c:	200002df 	.word	0x200002df
 80048a0:	200002f1 	.word	0x200002f1
 80048a4:	200002d0 	.word	0x200002d0
 80048a8:	200001e0 	.word	0x200001e0
 80048ac:	200002af 	.word	0x200002af
 80048b0:	200000a5 	.word	0x200000a5
 80048b4:	200000a4 	.word	0x200000a4
 80048b8:	200002ae 	.word	0x200002ae
 80048bc:	200002ad 	.word	0x200002ad
 80048c0:	200002dc 	.word	0x200002dc
 80048c4:	200002b0 	.word	0x200002b0
 80048c8:	0800c970 	.word	0x0800c970
 80048cc:	0800c984 	.word	0x0800c984
 80048d0:	0800c998 	.word	0x0800c998
 80048d4:	0800c9ac 	.word	0x0800c9ac
 80048d8:	0800c9c0 	.word	0x0800c9c0
 80048dc:	200002cf 	.word	0x200002cf
 80048e0:	0800c218 	.word	0x0800c218
 80048e4:	0800c22c 	.word	0x0800c22c
 80048e8:	0800c278 	.word	0x0800c278
			} else if(dilSecim == 1) {
 80048ec:	4bac      	ldr	r3, [pc, #688]	; (8004ba0 <menu+0x3600>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d104      	bne.n	80048fe <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 80048f4:	4aab      	ldr	r2, [pc, #684]	; (8004ba4 <menu+0x3604>)
 80048f6:	2101      	movs	r1, #1
 80048f8:	2002      	movs	r0, #2
 80048fa:	f7fb fe33 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80048fe:	2102      	movs	r1, #2
 8004900:	48a9      	ldr	r0, [pc, #676]	; (8004ba8 <menu+0x3608>)
 8004902:	f004 fa33 	bl	8008d6c <HAL_GPIO_ReadPin>
 8004906:	4603      	mov	r3, r0
 8004908:	2b01      	cmp	r3, #1
 800490a:	d115      	bne.n	8004938 <menu+0x3398>
 800490c:	4ba7      	ldr	r3, [pc, #668]	; (8004bac <menu+0x360c>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	f083 0301 	eor.w	r3, r3, #1
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00e      	beq.n	8004938 <menu+0x3398>
			iotMode = iotMode + 1;
 800491a:	4ba5      	ldr	r3, [pc, #660]	; (8004bb0 <menu+0x3610>)
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	3301      	adds	r3, #1
 8004920:	b2da      	uxtb	r2, r3
 8004922:	4ba3      	ldr	r3, [pc, #652]	; (8004bb0 <menu+0x3610>)
 8004924:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004926:	4ba2      	ldr	r3, [pc, #648]	; (8004bb0 <menu+0x3610>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d902      	bls.n	8004934 <menu+0x3394>
				iotMode = 0;
 800492e:	4ba0      	ldr	r3, [pc, #640]	; (8004bb0 <menu+0x3610>)
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004934:	f000 fdba 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004938:	2104      	movs	r1, #4
 800493a:	489b      	ldr	r0, [pc, #620]	; (8004ba8 <menu+0x3608>)
 800493c:	f004 fa16 	bl	8008d6c <HAL_GPIO_ReadPin>
 8004940:	4603      	mov	r3, r0
 8004942:	2b01      	cmp	r3, #1
 8004944:	d115      	bne.n	8004972 <menu+0x33d2>
 8004946:	4b99      	ldr	r3, [pc, #612]	; (8004bac <menu+0x360c>)
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	f083 0301 	eor.w	r3, r3, #1
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00e      	beq.n	8004972 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004954:	4b96      	ldr	r3, [pc, #600]	; (8004bb0 <menu+0x3610>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	3b01      	subs	r3, #1
 800495a:	b2da      	uxtb	r2, r3
 800495c:	4b94      	ldr	r3, [pc, #592]	; (8004bb0 <menu+0x3610>)
 800495e:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004960:	4b93      	ldr	r3, [pc, #588]	; (8004bb0 <menu+0x3610>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <menu+0x33ce>
		   		iotMode = 1;
 8004968:	4b91      	ldr	r3, [pc, #580]	; (8004bb0 <menu+0x3610>)
 800496a:	2201      	movs	r2, #1
 800496c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800496e:	f000 fd9d 	bl	80054ac <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004972:	2108      	movs	r1, #8
 8004974:	488c      	ldr	r0, [pc, #560]	; (8004ba8 <menu+0x3608>)
 8004976:	f004 f9f9 	bl	8008d6c <HAL_GPIO_ReadPin>
 800497a:	4603      	mov	r3, r0
 800497c:	2b01      	cmp	r3, #1
 800497e:	d10e      	bne.n	800499e <menu+0x33fe>
 8004980:	4b8a      	ldr	r3, [pc, #552]	; (8004bac <menu+0x360c>)
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	f083 0301 	eor.w	r3, r3, #1
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d007      	beq.n	800499e <menu+0x33fe>
			eepromData[48] = iotMode;
 800498e:	4b88      	ldr	r3, [pc, #544]	; (8004bb0 <menu+0x3610>)
 8004990:	781a      	ldrb	r2, [r3, #0]
 8004992:	4b88      	ldr	r3, [pc, #544]	; (8004bb4 <menu+0x3614>)
 8004994:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004998:	4b87      	ldr	r3, [pc, #540]	; (8004bb8 <menu+0x3618>)
 800499a:	2201      	movs	r2, #1
 800499c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 800499e:	4b87      	ldr	r3, [pc, #540]	; (8004bbc <menu+0x361c>)
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d138      	bne.n	8004a18 <menu+0x3478>
		calismaSayModu = 0;
 80049a6:	4b86      	ldr	r3, [pc, #536]	; (8004bc0 <menu+0x3620>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 80049ac:	4a85      	ldr	r2, [pc, #532]	; (8004bc4 <menu+0x3624>)
 80049ae:	2101      	movs	r1, #1
 80049b0:	2001      	movs	r0, #1
 80049b2:	f7fb fdd7 	bl	8000564 <lcd_print>

		lcd_print(2, 1, machineID);
 80049b6:	4a84      	ldr	r2, [pc, #528]	; (8004bc8 <menu+0x3628>)
 80049b8:	2101      	movs	r1, #1
 80049ba:	2002      	movs	r0, #2
 80049bc:	f7fb fdd2 	bl	8000564 <lcd_print>
		lcd_print(2, 13, "    ");
 80049c0:	4a82      	ldr	r2, [pc, #520]	; (8004bcc <menu+0x362c>)
 80049c2:	210d      	movs	r1, #13
 80049c4:	2002      	movs	r0, #2
 80049c6:	f7fb fdcd 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80049ca:	2102      	movs	r1, #2
 80049cc:	4876      	ldr	r0, [pc, #472]	; (8004ba8 <menu+0x3608>)
 80049ce:	f004 f9cd 	bl	8008d6c <HAL_GPIO_ReadPin>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d11f      	bne.n	8004a18 <menu+0x3478>
 80049d8:	2104      	movs	r1, #4
 80049da:	4873      	ldr	r0, [pc, #460]	; (8004ba8 <menu+0x3608>)
 80049dc:	f004 f9c6 	bl	8008d6c <HAL_GPIO_ReadPin>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d118      	bne.n	8004a18 <menu+0x3478>
 80049e6:	4b71      	ldr	r3, [pc, #452]	; (8004bac <menu+0x360c>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	f083 0301 	eor.w	r3, r3, #1
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d011      	beq.n	8004a18 <menu+0x3478>
			takeMachineID(0);
 80049f4:	2000      	movs	r0, #0
 80049f6:	f7fc f837 	bl	8000a68 <takeMachineID>

			HAL_Delay(50);
 80049fa:	2032      	movs	r0, #50	; 0x32
 80049fc:	f003 fbe6 	bl	80081cc <HAL_Delay>

			lcd_print(2, 1, machineID);
 8004a00:	4a71      	ldr	r2, [pc, #452]	; (8004bc8 <menu+0x3628>)
 8004a02:	2101      	movs	r1, #1
 8004a04:	2002      	movs	r0, #2
 8004a06:	f7fb fdad 	bl	8000564 <lcd_print>
			lcd_print(2, 13, "    ");
 8004a0a:	4a70      	ldr	r2, [pc, #448]	; (8004bcc <menu+0x362c>)
 8004a0c:	210d      	movs	r1, #13
 8004a0e:	2002      	movs	r0, #2
 8004a10:	f7fb fda8 	bl	8000564 <lcd_print>

			bekle();
 8004a14:	f000 fd4a 	bl	80054ac <bekle>
		}
	}

	if (menuSayac == 33) {
 8004a18:	4b68      	ldr	r3, [pc, #416]	; (8004bbc <menu+0x361c>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2b21      	cmp	r3, #33	; 0x21
 8004a1e:	d153      	bne.n	8004ac8 <menu+0x3528>
		calismaSayModu = 0;
 8004a20:	4b67      	ldr	r3, [pc, #412]	; (8004bc0 <menu+0x3620>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004a26:	4a6a      	ldr	r2, [pc, #424]	; (8004bd0 <menu+0x3630>)
 8004a28:	2101      	movs	r1, #1
 8004a2a:	2001      	movs	r0, #1
 8004a2c:	f7fb fd9a 	bl	8000564 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 8004a30:	4868      	ldr	r0, [pc, #416]	; (8004bd4 <menu+0x3634>)
 8004a32:	f7fb fbf7 	bl	8000224 <strlen>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b10      	cmp	r3, #16
 8004a3a:	d811      	bhi.n	8004a60 <menu+0x34c0>
			lcd_print(2, 1, wifiSSID);
 8004a3c:	4a65      	ldr	r2, [pc, #404]	; (8004bd4 <menu+0x3634>)
 8004a3e:	2101      	movs	r1, #1
 8004a40:	2002      	movs	r0, #2
 8004a42:	f7fb fd8f 	bl	8000564 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004a46:	4863      	ldr	r0, [pc, #396]	; (8004bd4 <menu+0x3634>)
 8004a48:	f7fb fbec 	bl	8000224 <strlen>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	3301      	adds	r3, #1
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	4a60      	ldr	r2, [pc, #384]	; (8004bd8 <menu+0x3638>)
 8004a56:	4619      	mov	r1, r3
 8004a58:	2002      	movs	r0, #2
 8004a5a:	f7fb fd83 	bl	8000564 <lcd_print>
 8004a5e:	e005      	b.n	8004a6c <menu+0x34cc>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8004a60:	2300      	movs	r3, #0
 8004a62:	2202      	movs	r2, #2
 8004a64:	2101      	movs	r1, #1
 8004a66:	485b      	ldr	r0, [pc, #364]	; (8004bd4 <menu+0x3634>)
 8004a68:	f7fc fcf4 	bl	8001454 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	484e      	ldr	r0, [pc, #312]	; (8004ba8 <menu+0x3608>)
 8004a70:	f004 f97c 	bl	8008d6c <HAL_GPIO_ReadPin>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d126      	bne.n	8004ac8 <menu+0x3528>
 8004a7a:	2104      	movs	r1, #4
 8004a7c:	484a      	ldr	r0, [pc, #296]	; (8004ba8 <menu+0x3608>)
 8004a7e:	f004 f975 	bl	8008d6c <HAL_GPIO_ReadPin>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d11f      	bne.n	8004ac8 <menu+0x3528>
 8004a88:	4b48      	ldr	r3, [pc, #288]	; (8004bac <menu+0x360c>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	f083 0301 	eor.w	r3, r3, #1
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d018      	beq.n	8004ac8 <menu+0x3528>
			takeWifiSSID(0);
 8004a96:	2000      	movs	r0, #0
 8004a98:	f7fc f93c 	bl	8000d14 <takeWifiSSID>

			HAL_Delay(100);
 8004a9c:	2064      	movs	r0, #100	; 0x64
 8004a9e:	f003 fb95 	bl	80081cc <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 8004aa2:	4a4c      	ldr	r2, [pc, #304]	; (8004bd4 <menu+0x3634>)
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	2002      	movs	r0, #2
 8004aa8:	f7fb fd5c 	bl	8000564 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004aac:	4849      	ldr	r0, [pc, #292]	; (8004bd4 <menu+0x3634>)
 8004aae:	f7fb fbb9 	bl	8000224 <strlen>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	4a47      	ldr	r2, [pc, #284]	; (8004bd8 <menu+0x3638>)
 8004abc:	4619      	mov	r1, r3
 8004abe:	2002      	movs	r0, #2
 8004ac0:	f7fb fd50 	bl	8000564 <lcd_print>

			bekle();
 8004ac4:	f000 fcf2 	bl	80054ac <bekle>
		}
	}

	if (menuSayac == 34) {
 8004ac8:	4b3c      	ldr	r3, [pc, #240]	; (8004bbc <menu+0x361c>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b22      	cmp	r3, #34	; 0x22
 8004ace:	d153      	bne.n	8004b78 <menu+0x35d8>
		calismaSayModu = 0;
 8004ad0:	4b3b      	ldr	r3, [pc, #236]	; (8004bc0 <menu+0x3620>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004ad6:	4a41      	ldr	r2, [pc, #260]	; (8004bdc <menu+0x363c>)
 8004ad8:	2101      	movs	r1, #1
 8004ada:	2001      	movs	r0, #1
 8004adc:	f7fb fd42 	bl	8000564 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 8004ae0:	483f      	ldr	r0, [pc, #252]	; (8004be0 <menu+0x3640>)
 8004ae2:	f7fb fb9f 	bl	8000224 <strlen>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b10      	cmp	r3, #16
 8004aea:	d811      	bhi.n	8004b10 <menu+0x3570>
			lcd_print(2, 1, wifiPass);
 8004aec:	4a3c      	ldr	r2, [pc, #240]	; (8004be0 <menu+0x3640>)
 8004aee:	2101      	movs	r1, #1
 8004af0:	2002      	movs	r0, #2
 8004af2:	f7fb fd37 	bl	8000564 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004af6:	483a      	ldr	r0, [pc, #232]	; (8004be0 <menu+0x3640>)
 8004af8:	f7fb fb94 	bl	8000224 <strlen>
 8004afc:	4603      	mov	r3, r0
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	3301      	adds	r3, #1
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	4a34      	ldr	r2, [pc, #208]	; (8004bd8 <menu+0x3638>)
 8004b06:	4619      	mov	r1, r3
 8004b08:	2002      	movs	r0, #2
 8004b0a:	f7fb fd2b 	bl	8000564 <lcd_print>
 8004b0e:	e005      	b.n	8004b1c <menu+0x357c>
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004b10:	2301      	movs	r3, #1
 8004b12:	2202      	movs	r2, #2
 8004b14:	2101      	movs	r1, #1
 8004b16:	4832      	ldr	r0, [pc, #200]	; (8004be0 <menu+0x3640>)
 8004b18:	f7fc fc9c 	bl	8001454 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b1c:	2102      	movs	r1, #2
 8004b1e:	4822      	ldr	r0, [pc, #136]	; (8004ba8 <menu+0x3608>)
 8004b20:	f004 f924 	bl	8008d6c <HAL_GPIO_ReadPin>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d126      	bne.n	8004b78 <menu+0x35d8>
 8004b2a:	2104      	movs	r1, #4
 8004b2c:	481e      	ldr	r0, [pc, #120]	; (8004ba8 <menu+0x3608>)
 8004b2e:	f004 f91d 	bl	8008d6c <HAL_GPIO_ReadPin>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d11f      	bne.n	8004b78 <menu+0x35d8>
 8004b38:	4b1c      	ldr	r3, [pc, #112]	; (8004bac <menu+0x360c>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	f083 0301 	eor.w	r3, r3, #1
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d018      	beq.n	8004b78 <menu+0x35d8>
			takeWifiPass(0);
 8004b46:	2000      	movs	r0, #0
 8004b48:	f7fc fa9a 	bl	8001080 <takeWifiPass>

			HAL_Delay(50);
 8004b4c:	2032      	movs	r0, #50	; 0x32
 8004b4e:	f003 fb3d 	bl	80081cc <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004b52:	4a23      	ldr	r2, [pc, #140]	; (8004be0 <menu+0x3640>)
 8004b54:	2101      	movs	r1, #1
 8004b56:	2002      	movs	r0, #2
 8004b58:	f7fb fd04 	bl	8000564 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004b5c:	4820      	ldr	r0, [pc, #128]	; (8004be0 <menu+0x3640>)
 8004b5e:	f7fb fb61 	bl	8000224 <strlen>
 8004b62:	4603      	mov	r3, r0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	3301      	adds	r3, #1
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	4a1b      	ldr	r2, [pc, #108]	; (8004bd8 <menu+0x3638>)
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	2002      	movs	r0, #2
 8004b70:	f7fb fcf8 	bl	8000564 <lcd_print>

			bekle();
 8004b74:	f000 fc9a 	bl	80054ac <bekle>
		}
	}

	if (menuSayac == 35) {
 8004b78:	4b10      	ldr	r3, [pc, #64]	; (8004bbc <menu+0x361c>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b23      	cmp	r3, #35	; 0x23
 8004b7e:	d155      	bne.n	8004c2c <menu+0x368c>
		if(dilSecim == 0) {
 8004b80:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <menu+0x3600>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d131      	bne.n	8004bec <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004b88:	4a16      	ldr	r2, [pc, #88]	; (8004be4 <menu+0x3644>)
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	2001      	movs	r0, #1
 8004b8e:	f7fb fce9 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004b92:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <menu+0x3648>)
 8004b94:	2101      	movs	r1, #1
 8004b96:	2002      	movs	r0, #2
 8004b98:	f7fb fce4 	bl	8000564 <lcd_print>
 8004b9c:	e034      	b.n	8004c08 <menu+0x3668>
 8004b9e:	bf00      	nop
 8004ba0:	200002d1 	.word	0x200002d1
 8004ba4:	0800c28c 	.word	0x0800c28c
 8004ba8:	40010800 	.word	0x40010800
 8004bac:	200002df 	.word	0x200002df
 8004bb0:	200002cf 	.word	0x200002cf
 8004bb4:	200001e0 	.word	0x200001e0
 8004bb8:	200002dc 	.word	0x200002dc
 8004bbc:	200002b0 	.word	0x200002b0
 8004bc0:	200002d0 	.word	0x200002d0
 8004bc4:	0800c9d4 	.word	0x0800c9d4
 8004bc8:	20000278 	.word	0x20000278
 8004bcc:	0800c9e8 	.word	0x0800c9e8
 8004bd0:	0800c9f0 	.word	0x0800c9f0
 8004bd4:	20000284 	.word	0x20000284
 8004bd8:	2000003c 	.word	0x2000003c
 8004bdc:	0800ca04 	.word	0x0800ca04
 8004be0:	20000298 	.word	0x20000298
 8004be4:	0800ca18 	.word	0x0800ca18
 8004be8:	0800ca2c 	.word	0x0800ca2c
		} else if(dilSecim == 1) {
 8004bec:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <menu+0x3690>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d109      	bne.n	8004c08 <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004bf4:	4a0f      	ldr	r2, [pc, #60]	; (8004c34 <menu+0x3694>)
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	2001      	movs	r0, #1
 8004bfa:	f7fb fcb3 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004bfe:	4a0e      	ldr	r2, [pc, #56]	; (8004c38 <menu+0x3698>)
 8004c00:	2101      	movs	r1, #1
 8004c02:	2002      	movs	r0, #2
 8004c04:	f7fb fcae 	bl	8000564 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004c08:	2108      	movs	r1, #8
 8004c0a:	480c      	ldr	r0, [pc, #48]	; (8004c3c <menu+0x369c>)
 8004c0c:	f004 f8ae 	bl	8008d6c <HAL_GPIO_ReadPin>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d10a      	bne.n	8004c2c <menu+0x368c>
			menuGiris = 0;
 8004c16:	4b0a      	ldr	r3, [pc, #40]	; (8004c40 <menu+0x36a0>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004c1c:	f7fb fcce 	bl	80005bc <lcd_clear>
			HAL_Delay(500);
 8004c20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c24:	f003 fad2 	bl	80081cc <HAL_Delay>
			NVIC_SystemReset();
 8004c28:	f7fb fd10 	bl	800064c <__NVIC_SystemReset>
		}
	}
}
 8004c2c:	bf00      	nop
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	200002d1 	.word	0x200002d1
 8004c34:	0800ca40 	.word	0x0800ca40
 8004c38:	0800ca54 	.word	0x0800ca54
 8004c3c:	40010800 	.word	0x40010800
 8004c40:	200002cd 	.word	0x200002cd

08004c44 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b082      	sub	sp, #8
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004c4e:	79fb      	ldrb	r3, [r7, #7]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d105      	bne.n	8004c60 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004c54:	4a22      	ldr	r2, [pc, #136]	; (8004ce0 <lcdUpdate+0x9c>)
 8004c56:	2101      	movs	r1, #1
 8004c58:	2002      	movs	r0, #2
 8004c5a:	f7fb fc83 	bl	8000564 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 8004c5e:	e03b      	b.n	8004cd8 <lcdUpdate+0x94>
	} else if(y==2) {
 8004c60:	79fb      	ldrb	r3, [r7, #7]
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d105      	bne.n	8004c72 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004c66:	4a1e      	ldr	r2, [pc, #120]	; (8004ce0 <lcdUpdate+0x9c>)
 8004c68:	2102      	movs	r1, #2
 8004c6a:	2002      	movs	r0, #2
 8004c6c:	f7fb fc7a 	bl	8000564 <lcd_print>
}
 8004c70:	e032      	b.n	8004cd8 <lcdUpdate+0x94>
	} else if(y==3) {
 8004c72:	79fb      	ldrb	r3, [r7, #7]
 8004c74:	2b03      	cmp	r3, #3
 8004c76:	d105      	bne.n	8004c84 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004c78:	4a19      	ldr	r2, [pc, #100]	; (8004ce0 <lcdUpdate+0x9c>)
 8004c7a:	2103      	movs	r1, #3
 8004c7c:	2002      	movs	r0, #2
 8004c7e:	f7fb fc71 	bl	8000564 <lcd_print>
}
 8004c82:	e029      	b.n	8004cd8 <lcdUpdate+0x94>
	} else if(y==4) {
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d105      	bne.n	8004c96 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004c8a:	4a15      	ldr	r2, [pc, #84]	; (8004ce0 <lcdUpdate+0x9c>)
 8004c8c:	2104      	movs	r1, #4
 8004c8e:	2002      	movs	r0, #2
 8004c90:	f7fb fc68 	bl	8000564 <lcd_print>
}
 8004c94:	e020      	b.n	8004cd8 <lcdUpdate+0x94>
	} else if(y==5) {
 8004c96:	79fb      	ldrb	r3, [r7, #7]
 8004c98:	2b05      	cmp	r3, #5
 8004c9a:	d105      	bne.n	8004ca8 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004c9c:	4a10      	ldr	r2, [pc, #64]	; (8004ce0 <lcdUpdate+0x9c>)
 8004c9e:	2105      	movs	r1, #5
 8004ca0:	2002      	movs	r0, #2
 8004ca2:	f7fb fc5f 	bl	8000564 <lcd_print>
}
 8004ca6:	e017      	b.n	8004cd8 <lcdUpdate+0x94>
	} else if(y==6) {
 8004ca8:	79fb      	ldrb	r3, [r7, #7]
 8004caa:	2b06      	cmp	r3, #6
 8004cac:	d105      	bne.n	8004cba <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004cae:	4a0c      	ldr	r2, [pc, #48]	; (8004ce0 <lcdUpdate+0x9c>)
 8004cb0:	2106      	movs	r1, #6
 8004cb2:	2002      	movs	r0, #2
 8004cb4:	f7fb fc56 	bl	8000564 <lcd_print>
}
 8004cb8:	e00e      	b.n	8004cd8 <lcdUpdate+0x94>
	} else if (y==7) {
 8004cba:	79fb      	ldrb	r3, [r7, #7]
 8004cbc:	2b07      	cmp	r3, #7
 8004cbe:	d10b      	bne.n	8004cd8 <lcdUpdate+0x94>
		lcd_clear();
 8004cc0:	f7fb fc7c 	bl	80005bc <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8004cc4:	4a07      	ldr	r2, [pc, #28]	; (8004ce4 <lcdUpdate+0xa0>)
 8004cc6:	2101      	movs	r1, #1
 8004cc8:	2001      	movs	r0, #1
 8004cca:	f7fb fc4b 	bl	8000564 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 8004cce:	4a06      	ldr	r2, [pc, #24]	; (8004ce8 <lcdUpdate+0xa4>)
 8004cd0:	2101      	movs	r1, #1
 8004cd2:	2002      	movs	r0, #2
 8004cd4:	f7fb fc46 	bl	8000564 <lcd_print>
}
 8004cd8:	bf00      	nop
 8004cda:	3708      	adds	r7, #8
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	0800c134 	.word	0x0800c134
 8004ce4:	0800ca68 	.word	0x0800ca68
 8004ce8:	0800ca7c 	.word	0x0800ca7c

08004cec <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8004cf6:	79fb      	ldrb	r3, [r7, #7]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d11d      	bne.n	8004d38 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8004cfc:	4b62      	ldr	r3, [pc, #392]	; (8004e88 <hataKoduLcdGoster+0x19c>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d105      	bne.n	8004d10 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8004d04:	4a61      	ldr	r2, [pc, #388]	; (8004e8c <hataKoduLcdGoster+0x1a0>)
 8004d06:	2101      	movs	r1, #1
 8004d08:	2001      	movs	r0, #1
 8004d0a:	f7fb fc2b 	bl	8000564 <lcd_print>
 8004d0e:	e008      	b.n	8004d22 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8004d10:	4b5d      	ldr	r3, [pc, #372]	; (8004e88 <hataKoduLcdGoster+0x19c>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d104      	bne.n	8004d22 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004d18:	4a5d      	ldr	r2, [pc, #372]	; (8004e90 <hataKoduLcdGoster+0x1a4>)
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	2001      	movs	r0, #1
 8004d1e:	f7fb fc21 	bl	8000564 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8004d22:	4a5c      	ldr	r2, [pc, #368]	; (8004e94 <hataKoduLcdGoster+0x1a8>)
 8004d24:	2101      	movs	r1, #1
 8004d26:	2002      	movs	r0, #2
 8004d28:	f7fb fc1c 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 8004d2c:	4a5a      	ldr	r2, [pc, #360]	; (8004e98 <hataKoduLcdGoster+0x1ac>)
 8004d2e:	2107      	movs	r1, #7
 8004d30:	2002      	movs	r0, #2
 8004d32:	f7fb fc17 	bl	8000564 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8004d36:	e0a3      	b.n	8004e80 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8004d38:	79fb      	ldrb	r3, [r7, #7]
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d11d      	bne.n	8004d7a <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8004d3e:	4b52      	ldr	r3, [pc, #328]	; (8004e88 <hataKoduLcdGoster+0x19c>)
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d105      	bne.n	8004d52 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 8004d46:	4a51      	ldr	r2, [pc, #324]	; (8004e8c <hataKoduLcdGoster+0x1a0>)
 8004d48:	2101      	movs	r1, #1
 8004d4a:	2001      	movs	r0, #1
 8004d4c:	f7fb fc0a 	bl	8000564 <lcd_print>
 8004d50:	e008      	b.n	8004d64 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8004d52:	4b4d      	ldr	r3, [pc, #308]	; (8004e88 <hataKoduLcdGoster+0x19c>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d104      	bne.n	8004d64 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004d5a:	4a4d      	ldr	r2, [pc, #308]	; (8004e90 <hataKoduLcdGoster+0x1a4>)
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	2001      	movs	r0, #1
 8004d60:	f7fb fc00 	bl	8000564 <lcd_print>
		lcd_print(2, 2, "2");
 8004d64:	4a4d      	ldr	r2, [pc, #308]	; (8004e9c <hataKoduLcdGoster+0x1b0>)
 8004d66:	2102      	movs	r1, #2
 8004d68:	2002      	movs	r0, #2
 8004d6a:	f7fb fbfb 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 8004d6e:	4a4a      	ldr	r2, [pc, #296]	; (8004e98 <hataKoduLcdGoster+0x1ac>)
 8004d70:	2107      	movs	r1, #7
 8004d72:	2002      	movs	r0, #2
 8004d74:	f7fb fbf6 	bl	8000564 <lcd_print>
}
 8004d78:	e082      	b.n	8004e80 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
 8004d7c:	2b03      	cmp	r3, #3
 8004d7e:	d11d      	bne.n	8004dbc <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8004d80:	4b41      	ldr	r3, [pc, #260]	; (8004e88 <hataKoduLcdGoster+0x19c>)
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d105      	bne.n	8004d94 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8004d88:	4a40      	ldr	r2, [pc, #256]	; (8004e8c <hataKoduLcdGoster+0x1a0>)
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	2001      	movs	r0, #1
 8004d8e:	f7fb fbe9 	bl	8000564 <lcd_print>
 8004d92:	e008      	b.n	8004da6 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8004d94:	4b3c      	ldr	r3, [pc, #240]	; (8004e88 <hataKoduLcdGoster+0x19c>)
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d104      	bne.n	8004da6 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004d9c:	4a3c      	ldr	r2, [pc, #240]	; (8004e90 <hataKoduLcdGoster+0x1a4>)
 8004d9e:	2101      	movs	r1, #1
 8004da0:	2001      	movs	r0, #1
 8004da2:	f7fb fbdf 	bl	8000564 <lcd_print>
		lcd_print(2, 3, "3");
 8004da6:	4a3e      	ldr	r2, [pc, #248]	; (8004ea0 <hataKoduLcdGoster+0x1b4>)
 8004da8:	2103      	movs	r1, #3
 8004daa:	2002      	movs	r0, #2
 8004dac:	f7fb fbda 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 8004db0:	4a39      	ldr	r2, [pc, #228]	; (8004e98 <hataKoduLcdGoster+0x1ac>)
 8004db2:	2107      	movs	r1, #7
 8004db4:	2002      	movs	r0, #2
 8004db6:	f7fb fbd5 	bl	8000564 <lcd_print>
}
 8004dba:	e061      	b.n	8004e80 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8004dbc:	79fb      	ldrb	r3, [r7, #7]
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d11d      	bne.n	8004dfe <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8004dc2:	4b31      	ldr	r3, [pc, #196]	; (8004e88 <hataKoduLcdGoster+0x19c>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d105      	bne.n	8004dd6 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8004dca:	4a30      	ldr	r2, [pc, #192]	; (8004e8c <hataKoduLcdGoster+0x1a0>)
 8004dcc:	2101      	movs	r1, #1
 8004dce:	2001      	movs	r0, #1
 8004dd0:	f7fb fbc8 	bl	8000564 <lcd_print>
 8004dd4:	e008      	b.n	8004de8 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8004dd6:	4b2c      	ldr	r3, [pc, #176]	; (8004e88 <hataKoduLcdGoster+0x19c>)
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d104      	bne.n	8004de8 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004dde:	4a2c      	ldr	r2, [pc, #176]	; (8004e90 <hataKoduLcdGoster+0x1a4>)
 8004de0:	2101      	movs	r1, #1
 8004de2:	2001      	movs	r0, #1
 8004de4:	f7fb fbbe 	bl	8000564 <lcd_print>
		lcd_print(2, 4, "4");
 8004de8:	4a2e      	ldr	r2, [pc, #184]	; (8004ea4 <hataKoduLcdGoster+0x1b8>)
 8004dea:	2104      	movs	r1, #4
 8004dec:	2002      	movs	r0, #2
 8004dee:	f7fb fbb9 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 8004df2:	4a29      	ldr	r2, [pc, #164]	; (8004e98 <hataKoduLcdGoster+0x1ac>)
 8004df4:	2107      	movs	r1, #7
 8004df6:	2002      	movs	r0, #2
 8004df8:	f7fb fbb4 	bl	8000564 <lcd_print>
}
 8004dfc:	e040      	b.n	8004e80 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8004dfe:	79fb      	ldrb	r3, [r7, #7]
 8004e00:	2b05      	cmp	r3, #5
 8004e02:	d11d      	bne.n	8004e40 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8004e04:	4b20      	ldr	r3, [pc, #128]	; (8004e88 <hataKoduLcdGoster+0x19c>)
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d105      	bne.n	8004e18 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8004e0c:	4a1f      	ldr	r2, [pc, #124]	; (8004e8c <hataKoduLcdGoster+0x1a0>)
 8004e0e:	2101      	movs	r1, #1
 8004e10:	2001      	movs	r0, #1
 8004e12:	f7fb fba7 	bl	8000564 <lcd_print>
 8004e16:	e008      	b.n	8004e2a <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8004e18:	4b1b      	ldr	r3, [pc, #108]	; (8004e88 <hataKoduLcdGoster+0x19c>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d104      	bne.n	8004e2a <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004e20:	4a1b      	ldr	r2, [pc, #108]	; (8004e90 <hataKoduLcdGoster+0x1a4>)
 8004e22:	2101      	movs	r1, #1
 8004e24:	2001      	movs	r0, #1
 8004e26:	f7fb fb9d 	bl	8000564 <lcd_print>
		lcd_print(2, 5, "5");
 8004e2a:	4a1f      	ldr	r2, [pc, #124]	; (8004ea8 <hataKoduLcdGoster+0x1bc>)
 8004e2c:	2105      	movs	r1, #5
 8004e2e:	2002      	movs	r0, #2
 8004e30:	f7fb fb98 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 8004e34:	4a18      	ldr	r2, [pc, #96]	; (8004e98 <hataKoduLcdGoster+0x1ac>)
 8004e36:	2107      	movs	r1, #7
 8004e38:	2002      	movs	r0, #2
 8004e3a:	f7fb fb93 	bl	8000564 <lcd_print>
}
 8004e3e:	e01f      	b.n	8004e80 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	2b06      	cmp	r3, #6
 8004e44:	d11c      	bne.n	8004e80 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8004e46:	4b10      	ldr	r3, [pc, #64]	; (8004e88 <hataKoduLcdGoster+0x19c>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d105      	bne.n	8004e5a <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 8004e4e:	4a0f      	ldr	r2, [pc, #60]	; (8004e8c <hataKoduLcdGoster+0x1a0>)
 8004e50:	2101      	movs	r1, #1
 8004e52:	2001      	movs	r0, #1
 8004e54:	f7fb fb86 	bl	8000564 <lcd_print>
 8004e58:	e008      	b.n	8004e6c <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8004e5a:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <hataKoduLcdGoster+0x19c>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d104      	bne.n	8004e6c <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004e62:	4a0b      	ldr	r2, [pc, #44]	; (8004e90 <hataKoduLcdGoster+0x1a4>)
 8004e64:	2101      	movs	r1, #1
 8004e66:	2001      	movs	r0, #1
 8004e68:	f7fb fb7c 	bl	8000564 <lcd_print>
		lcd_print(2, 6, "6");
 8004e6c:	4a0f      	ldr	r2, [pc, #60]	; (8004eac <hataKoduLcdGoster+0x1c0>)
 8004e6e:	2106      	movs	r1, #6
 8004e70:	2002      	movs	r0, #2
 8004e72:	f7fb fb77 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 8004e76:	4a08      	ldr	r2, [pc, #32]	; (8004e98 <hataKoduLcdGoster+0x1ac>)
 8004e78:	2107      	movs	r1, #7
 8004e7a:	2002      	movs	r0, #2
 8004e7c:	f7fb fb72 	bl	8000564 <lcd_print>
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	200002d1 	.word	0x200002d1
 8004e8c:	0800ca90 	.word	0x0800ca90
 8004e90:	0800caa4 	.word	0x0800caa4
 8004e94:	0800be78 	.word	0x0800be78
 8004e98:	0800cab8 	.word	0x0800cab8
 8004e9c:	0800be7c 	.word	0x0800be7c
 8004ea0:	0800be80 	.word	0x0800be80
 8004ea4:	0800be84 	.word	0x0800be84
 8004ea8:	0800be88 	.word	0x0800be88
 8004eac:	0800be8c 	.word	0x0800be8c

08004eb0 <eepromKontrol>:
	HAL_Delay(500);
	lcd_clear();
	HAL_Delay(500);
}

void eepromKontrol(int type) {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af04      	add	r7, sp, #16
 8004eb6:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004eb8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004ebc:	9302      	str	r3, [sp, #8]
 8004ebe:	236e      	movs	r3, #110	; 0x6e
 8004ec0:	9301      	str	r3, [sp, #4]
 8004ec2:	4b9c      	ldr	r3, [pc, #624]	; (8005134 <eepromKontrol+0x284>)
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	236e      	movs	r3, #110	; 0x6e
 8004ec8:	2200      	movs	r2, #0
 8004eca:	21a0      	movs	r1, #160	; 0xa0
 8004ecc:	489a      	ldr	r0, [pc, #616]	; (8005138 <eepromKontrol+0x288>)
 8004ece:	f004 fb01 	bl	80094d4 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8004ed2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004ed6:	f003 f979 	bl	80081cc <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8004eda:	4b96      	ldr	r3, [pc, #600]	; (8005134 <eepromKontrol+0x284>)
 8004edc:	78da      	ldrb	r2, [r3, #3]
 8004ede:	4b97      	ldr	r3, [pc, #604]	; (800513c <eepromKontrol+0x28c>)
 8004ee0:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8004ee2:	4b94      	ldr	r3, [pc, #592]	; (8005134 <eepromKontrol+0x284>)
 8004ee4:	785a      	ldrb	r2, [r3, #1]
 8004ee6:	4b96      	ldr	r3, [pc, #600]	; (8005140 <eepromKontrol+0x290>)
 8004ee8:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8004eea:	4b92      	ldr	r3, [pc, #584]	; (8005134 <eepromKontrol+0x284>)
 8004eec:	789a      	ldrb	r2, [r3, #2]
 8004eee:	4b95      	ldr	r3, [pc, #596]	; (8005144 <eepromKontrol+0x294>)
 8004ef0:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8004ef2:	4b90      	ldr	r3, [pc, #576]	; (8005134 <eepromKontrol+0x284>)
 8004ef4:	791a      	ldrb	r2, [r3, #4]
 8004ef6:	4b94      	ldr	r3, [pc, #592]	; (8005148 <eepromKontrol+0x298>)
 8004ef8:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8004efa:	4b8e      	ldr	r3, [pc, #568]	; (8005134 <eepromKontrol+0x284>)
 8004efc:	795a      	ldrb	r2, [r3, #5]
 8004efe:	4b93      	ldr	r3, [pc, #588]	; (800514c <eepromKontrol+0x29c>)
 8004f00:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8004f02:	4b8c      	ldr	r3, [pc, #560]	; (8005134 <eepromKontrol+0x284>)
 8004f04:	799a      	ldrb	r2, [r3, #6]
 8004f06:	4b92      	ldr	r3, [pc, #584]	; (8005150 <eepromKontrol+0x2a0>)
 8004f08:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8004f0a:	4b8a      	ldr	r3, [pc, #552]	; (8005134 <eepromKontrol+0x284>)
 8004f0c:	79da      	ldrb	r2, [r3, #7]
 8004f0e:	4b91      	ldr	r3, [pc, #580]	; (8005154 <eepromKontrol+0x2a4>)
 8004f10:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8004f12:	4b88      	ldr	r3, [pc, #544]	; (8005134 <eepromKontrol+0x284>)
 8004f14:	7a1a      	ldrb	r2, [r3, #8]
 8004f16:	4b90      	ldr	r3, [pc, #576]	; (8005158 <eepromKontrol+0x2a8>)
 8004f18:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8004f1a:	4b86      	ldr	r3, [pc, #536]	; (8005134 <eepromKontrol+0x284>)
 8004f1c:	7a5a      	ldrb	r2, [r3, #9]
 8004f1e:	4b8f      	ldr	r3, [pc, #572]	; (800515c <eepromKontrol+0x2ac>)
 8004f20:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8004f22:	4b84      	ldr	r3, [pc, #528]	; (8005134 <eepromKontrol+0x284>)
 8004f24:	7a9a      	ldrb	r2, [r3, #10]
 8004f26:	4b8e      	ldr	r3, [pc, #568]	; (8005160 <eepromKontrol+0x2b0>)
 8004f28:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8004f2a:	4b82      	ldr	r3, [pc, #520]	; (8005134 <eepromKontrol+0x284>)
 8004f2c:	7ada      	ldrb	r2, [r3, #11]
 8004f2e:	4b8d      	ldr	r3, [pc, #564]	; (8005164 <eepromKontrol+0x2b4>)
 8004f30:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8004f32:	4b80      	ldr	r3, [pc, #512]	; (8005134 <eepromKontrol+0x284>)
 8004f34:	7b1a      	ldrb	r2, [r3, #12]
 8004f36:	4b8c      	ldr	r3, [pc, #560]	; (8005168 <eepromKontrol+0x2b8>)
 8004f38:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8004f3a:	4b7e      	ldr	r3, [pc, #504]	; (8005134 <eepromKontrol+0x284>)
 8004f3c:	7b5a      	ldrb	r2, [r3, #13]
 8004f3e:	4b8b      	ldr	r3, [pc, #556]	; (800516c <eepromKontrol+0x2bc>)
 8004f40:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8004f42:	4b7c      	ldr	r3, [pc, #496]	; (8005134 <eepromKontrol+0x284>)
 8004f44:	7b9a      	ldrb	r2, [r3, #14]
 8004f46:	4b8a      	ldr	r3, [pc, #552]	; (8005170 <eepromKontrol+0x2c0>)
 8004f48:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8004f4a:	4b7a      	ldr	r3, [pc, #488]	; (8005134 <eepromKontrol+0x284>)
 8004f4c:	7bda      	ldrb	r2, [r3, #15]
 8004f4e:	4b89      	ldr	r3, [pc, #548]	; (8005174 <eepromKontrol+0x2c4>)
 8004f50:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8004f52:	4b78      	ldr	r3, [pc, #480]	; (8005134 <eepromKontrol+0x284>)
 8004f54:	7c1a      	ldrb	r2, [r3, #16]
 8004f56:	4b88      	ldr	r3, [pc, #544]	; (8005178 <eepromKontrol+0x2c8>)
 8004f58:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8004f5a:	4b76      	ldr	r3, [pc, #472]	; (8005134 <eepromKontrol+0x284>)
 8004f5c:	7c5a      	ldrb	r2, [r3, #17]
 8004f5e:	4b87      	ldr	r3, [pc, #540]	; (800517c <eepromKontrol+0x2cc>)
 8004f60:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8004f62:	4b74      	ldr	r3, [pc, #464]	; (8005134 <eepromKontrol+0x284>)
 8004f64:	7c9a      	ldrb	r2, [r3, #18]
 8004f66:	4b86      	ldr	r3, [pc, #536]	; (8005180 <eepromKontrol+0x2d0>)
 8004f68:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8004f6a:	4b72      	ldr	r3, [pc, #456]	; (8005134 <eepromKontrol+0x284>)
 8004f6c:	7cda      	ldrb	r2, [r3, #19]
 8004f6e:	4b85      	ldr	r3, [pc, #532]	; (8005184 <eepromKontrol+0x2d4>)
 8004f70:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8004f72:	4b70      	ldr	r3, [pc, #448]	; (8005134 <eepromKontrol+0x284>)
 8004f74:	7d1a      	ldrb	r2, [r3, #20]
 8004f76:	4b84      	ldr	r3, [pc, #528]	; (8005188 <eepromKontrol+0x2d8>)
 8004f78:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8004f7a:	4b6e      	ldr	r3, [pc, #440]	; (8005134 <eepromKontrol+0x284>)
 8004f7c:	7d5a      	ldrb	r2, [r3, #21]
 8004f7e:	4b83      	ldr	r3, [pc, #524]	; (800518c <eepromKontrol+0x2dc>)
 8004f80:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8004f82:	4b6c      	ldr	r3, [pc, #432]	; (8005134 <eepromKontrol+0x284>)
 8004f84:	7d9a      	ldrb	r2, [r3, #22]
 8004f86:	4b82      	ldr	r3, [pc, #520]	; (8005190 <eepromKontrol+0x2e0>)
 8004f88:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8004f8a:	4b6a      	ldr	r3, [pc, #424]	; (8005134 <eepromKontrol+0x284>)
 8004f8c:	7dda      	ldrb	r2, [r3, #23]
 8004f8e:	4b81      	ldr	r3, [pc, #516]	; (8005194 <eepromKontrol+0x2e4>)
 8004f90:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8004f92:	4b68      	ldr	r3, [pc, #416]	; (8005134 <eepromKontrol+0x284>)
 8004f94:	7e1a      	ldrb	r2, [r3, #24]
 8004f96:	4b80      	ldr	r3, [pc, #512]	; (8005198 <eepromKontrol+0x2e8>)
 8004f98:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8004f9a:	4b66      	ldr	r3, [pc, #408]	; (8005134 <eepromKontrol+0x284>)
 8004f9c:	7e5a      	ldrb	r2, [r3, #25]
 8004f9e:	4b7f      	ldr	r3, [pc, #508]	; (800519c <eepromKontrol+0x2ec>)
 8004fa0:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8004fa2:	4b64      	ldr	r3, [pc, #400]	; (8005134 <eepromKontrol+0x284>)
 8004fa4:	7e9a      	ldrb	r2, [r3, #26]
 8004fa6:	4b7e      	ldr	r3, [pc, #504]	; (80051a0 <eepromKontrol+0x2f0>)
 8004fa8:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8004faa:	4b62      	ldr	r3, [pc, #392]	; (8005134 <eepromKontrol+0x284>)
 8004fac:	7eda      	ldrb	r2, [r3, #27]
 8004fae:	4b7d      	ldr	r3, [pc, #500]	; (80051a4 <eepromKontrol+0x2f4>)
 8004fb0:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8004fb2:	4b60      	ldr	r3, [pc, #384]	; (8005134 <eepromKontrol+0x284>)
 8004fb4:	7f1a      	ldrb	r2, [r3, #28]
 8004fb6:	4b7c      	ldr	r3, [pc, #496]	; (80051a8 <eepromKontrol+0x2f8>)
 8004fb8:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8004fba:	4b5e      	ldr	r3, [pc, #376]	; (8005134 <eepromKontrol+0x284>)
 8004fbc:	7f5a      	ldrb	r2, [r3, #29]
 8004fbe:	4b7b      	ldr	r3, [pc, #492]	; (80051ac <eepromKontrol+0x2fc>)
 8004fc0:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8004fc2:	4b5c      	ldr	r3, [pc, #368]	; (8005134 <eepromKontrol+0x284>)
 8004fc4:	7f9a      	ldrb	r2, [r3, #30]
 8004fc6:	4b7a      	ldr	r3, [pc, #488]	; (80051b0 <eepromKontrol+0x300>)
 8004fc8:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8004fca:	4b5a      	ldr	r3, [pc, #360]	; (8005134 <eepromKontrol+0x284>)
 8004fcc:	7fda      	ldrb	r2, [r3, #31]
 8004fce:	4b79      	ldr	r3, [pc, #484]	; (80051b4 <eepromKontrol+0x304>)
 8004fd0:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8004fd2:	4b58      	ldr	r3, [pc, #352]	; (8005134 <eepromKontrol+0x284>)
 8004fd4:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004fd8:	4b77      	ldr	r3, [pc, #476]	; (80051b8 <eepromKontrol+0x308>)
 8004fda:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8004fdc:	4b55      	ldr	r3, [pc, #340]	; (8005134 <eepromKontrol+0x284>)
 8004fde:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004fe2:	4b76      	ldr	r3, [pc, #472]	; (80051bc <eepromKontrol+0x30c>)
 8004fe4:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8004fe6:	4b53      	ldr	r3, [pc, #332]	; (8005134 <eepromKontrol+0x284>)
 8004fe8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8004fec:	4b74      	ldr	r3, [pc, #464]	; (80051c0 <eepromKontrol+0x310>)
 8004fee:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8004ff0:	4b50      	ldr	r3, [pc, #320]	; (8005134 <eepromKontrol+0x284>)
 8004ff2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004ff6:	4b73      	ldr	r3, [pc, #460]	; (80051c4 <eepromKontrol+0x314>)
 8004ff8:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8004ffa:	4b4e      	ldr	r3, [pc, #312]	; (8005134 <eepromKontrol+0x284>)
 8004ffc:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005000:	4b71      	ldr	r3, [pc, #452]	; (80051c8 <eepromKontrol+0x318>)
 8005002:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005004:	4b4b      	ldr	r3, [pc, #300]	; (8005134 <eepromKontrol+0x284>)
 8005006:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800500a:	4b70      	ldr	r3, [pc, #448]	; (80051cc <eepromKontrol+0x31c>)
 800500c:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 800500e:	4b49      	ldr	r3, [pc, #292]	; (8005134 <eepromKontrol+0x284>)
 8005010:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005014:	4b6e      	ldr	r3, [pc, #440]	; (80051d0 <eepromKontrol+0x320>)
 8005016:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005018:	4b46      	ldr	r3, [pc, #280]	; (8005134 <eepromKontrol+0x284>)
 800501a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800501e:	4b6d      	ldr	r3, [pc, #436]	; (80051d4 <eepromKontrol+0x324>)
 8005020:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8005022:	4b44      	ldr	r3, [pc, #272]	; (8005134 <eepromKontrol+0x284>)
 8005024:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005028:	4b6b      	ldr	r3, [pc, #428]	; (80051d8 <eepromKontrol+0x328>)
 800502a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 800502c:	4b41      	ldr	r3, [pc, #260]	; (8005134 <eepromKontrol+0x284>)
 800502e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005032:	4b6a      	ldr	r3, [pc, #424]	; (80051dc <eepromKontrol+0x32c>)
 8005034:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8005036:	4b3f      	ldr	r3, [pc, #252]	; (8005134 <eepromKontrol+0x284>)
 8005038:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800503c:	4b68      	ldr	r3, [pc, #416]	; (80051e0 <eepromKontrol+0x330>)
 800503e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8005040:	4b3c      	ldr	r3, [pc, #240]	; (8005134 <eepromKontrol+0x284>)
 8005042:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005046:	4b67      	ldr	r3, [pc, #412]	; (80051e4 <eepromKontrol+0x334>)
 8005048:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 800504a:	4b3a      	ldr	r3, [pc, #232]	; (8005134 <eepromKontrol+0x284>)
 800504c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005050:	4b65      	ldr	r3, [pc, #404]	; (80051e8 <eepromKontrol+0x338>)
 8005052:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8005054:	4b37      	ldr	r3, [pc, #220]	; (8005134 <eepromKontrol+0x284>)
 8005056:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800505a:	4b64      	ldr	r3, [pc, #400]	; (80051ec <eepromKontrol+0x33c>)
 800505c:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 800505e:	4b35      	ldr	r3, [pc, #212]	; (8005134 <eepromKontrol+0x284>)
 8005060:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005064:	4b62      	ldr	r3, [pc, #392]	; (80051f0 <eepromKontrol+0x340>)
 8005066:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8005068:	4b32      	ldr	r3, [pc, #200]	; (8005134 <eepromKontrol+0x284>)
 800506a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800506e:	4b61      	ldr	r3, [pc, #388]	; (80051f4 <eepromKontrol+0x344>)
 8005070:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 8005072:	4b51      	ldr	r3, [pc, #324]	; (80051b8 <eepromKontrol+0x308>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b09      	cmp	r3, #9
 8005078:	d902      	bls.n	8005080 <eepromKontrol+0x1d0>
	    calismaSayisi10000=0;
 800507a:	4b4f      	ldr	r3, [pc, #316]	; (80051b8 <eepromKontrol+0x308>)
 800507c:	2200      	movs	r2, #0
 800507e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8005080:	4b4c      	ldr	r3, [pc, #304]	; (80051b4 <eepromKontrol+0x304>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b09      	cmp	r3, #9
 8005086:	d902      	bls.n	800508e <eepromKontrol+0x1de>
	    calismaSayisi1000=0;
 8005088:	4b4a      	ldr	r3, [pc, #296]	; (80051b4 <eepromKontrol+0x304>)
 800508a:	2200      	movs	r2, #0
 800508c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800508e:	4b48      	ldr	r3, [pc, #288]	; (80051b0 <eepromKontrol+0x300>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b09      	cmp	r3, #9
 8005094:	d902      	bls.n	800509c <eepromKontrol+0x1ec>
	    calismaSayisi100=0;
 8005096:	4b46      	ldr	r3, [pc, #280]	; (80051b0 <eepromKontrol+0x300>)
 8005098:	2200      	movs	r2, #0
 800509a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 800509c:	4b43      	ldr	r3, [pc, #268]	; (80051ac <eepromKontrol+0x2fc>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b09      	cmp	r3, #9
 80050a2:	d902      	bls.n	80050aa <eepromKontrol+0x1fa>
	    calismaSayisi10=0;
 80050a4:	4b41      	ldr	r3, [pc, #260]	; (80051ac <eepromKontrol+0x2fc>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 80050aa:	4b3f      	ldr	r3, [pc, #252]	; (80051a8 <eepromKontrol+0x2f8>)
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	2b09      	cmp	r3, #9
 80050b0:	d902      	bls.n	80050b8 <eepromKontrol+0x208>
	    calismaSayisi1=0;
 80050b2:	4b3d      	ldr	r3, [pc, #244]	; (80051a8 <eepromKontrol+0x2f8>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80050b8:	4b21      	ldr	r3, [pc, #132]	; (8005140 <eepromKontrol+0x290>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d902      	bls.n	80050c6 <eepromKontrol+0x216>
	    calismaSekli=0;
 80050c0:	4b1f      	ldr	r3, [pc, #124]	; (8005140 <eepromKontrol+0x290>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80050c6:	4b1f      	ldr	r3, [pc, #124]	; (8005144 <eepromKontrol+0x294>)
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d902      	bls.n	80050d4 <eepromKontrol+0x224>
	    emniyetCercevesi=1;
 80050ce:	4b1d      	ldr	r3, [pc, #116]	; (8005144 <eepromKontrol+0x294>)
 80050d0:	2201      	movs	r2, #1
 80050d2:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80050d4:	4b1c      	ldr	r3, [pc, #112]	; (8005148 <eepromKontrol+0x298>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d902      	bls.n	80050e2 <eepromKontrol+0x232>
	    yavaslamaLimit=0;
 80050dc:	4b1a      	ldr	r3, [pc, #104]	; (8005148 <eepromKontrol+0x298>)
 80050de:	2200      	movs	r2, #0
 80050e0:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 80050e2:	4b1a      	ldr	r3, [pc, #104]	; (800514c <eepromKontrol+0x29c>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d902      	bls.n	80050f0 <eepromKontrol+0x240>
	    altLimit=1;
 80050ea:	4b18      	ldr	r3, [pc, #96]	; (800514c <eepromKontrol+0x29c>)
 80050ec:	2201      	movs	r2, #1
 80050ee:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 80050f0:	4b17      	ldr	r3, [pc, #92]	; (8005150 <eepromKontrol+0x2a0>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d902      	bls.n	80050fe <eepromKontrol+0x24e>
	    basincSalteri=1;
 80050f8:	4b15      	ldr	r3, [pc, #84]	; (8005150 <eepromKontrol+0x2a0>)
 80050fa:	2201      	movs	r2, #1
 80050fc:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 80050fe:	4b15      	ldr	r3, [pc, #84]	; (8005154 <eepromKontrol+0x2a4>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b03      	cmp	r3, #3
 8005104:	d902      	bls.n	800510c <eepromKontrol+0x25c>
	    kapiSecimleri=3;
 8005106:	4b13      	ldr	r3, [pc, #76]	; (8005154 <eepromKontrol+0x2a4>)
 8005108:	2203      	movs	r2, #3
 800510a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 800510c:	4b2f      	ldr	r3, [pc, #188]	; (80051cc <eepromKontrol+0x31c>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d902      	bls.n	800511a <eepromKontrol+0x26a>
	    kapiAcTipi=0;
 8005114:	4b2d      	ldr	r3, [pc, #180]	; (80051cc <eepromKontrol+0x31c>)
 8005116:	2200      	movs	r2, #0
 8005118:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 800511a:	4b0f      	ldr	r3, [pc, #60]	; (8005158 <eepromKontrol+0x2a8>)
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b02      	cmp	r3, #2
 8005120:	d902      	bls.n	8005128 <eepromKontrol+0x278>
	    kapi1Tip=1;
 8005122:	4b0d      	ldr	r3, [pc, #52]	; (8005158 <eepromKontrol+0x2a8>)
 8005124:	2201      	movs	r2, #1
 8005126:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8005128:	4b0c      	ldr	r3, [pc, #48]	; (800515c <eepromKontrol+0x2ac>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b05      	cmp	r3, #5
 800512e:	d966      	bls.n	80051fe <eepromKontrol+0x34e>
 8005130:	e062      	b.n	80051f8 <eepromKontrol+0x348>
 8005132:	bf00      	nop
 8005134:	200001e0 	.word	0x200001e0
 8005138:	200000fc 	.word	0x200000fc
 800513c:	2000024e 	.word	0x2000024e
 8005140:	200002b1 	.word	0x200002b1
 8005144:	200002b4 	.word	0x200002b4
 8005148:	200002b5 	.word	0x200002b5
 800514c:	200002b6 	.word	0x200002b6
 8005150:	200002b7 	.word	0x200002b7
 8005154:	200002b8 	.word	0x200002b8
 8005158:	200002b9 	.word	0x200002b9
 800515c:	200002c9 	.word	0x200002c9
 8005160:	200002ba 	.word	0x200002ba
 8005164:	200002ca 	.word	0x200002ca
 8005168:	200002bb 	.word	0x200002bb
 800516c:	200002cb 	.word	0x200002cb
 8005170:	200002be 	.word	0x200002be
 8005174:	200002bf 	.word	0x200002bf
 8005178:	200002c0 	.word	0x200002c0
 800517c:	200002c1 	.word	0x200002c1
 8005180:	200002c2 	.word	0x200002c2
 8005184:	200002c3 	.word	0x200002c3
 8005188:	200002c4 	.word	0x200002c4
 800518c:	200002c5 	.word	0x200002c5
 8005190:	200002c6 	.word	0x200002c6
 8005194:	200002c7 	.word	0x200002c7
 8005198:	200002c8 	.word	0x200002c8
 800519c:	200002cc 	.word	0x200002cc
 80051a0:	200002ce 	.word	0x200002ce
 80051a4:	200002ac 	.word	0x200002ac
 80051a8:	200002ad 	.word	0x200002ad
 80051ac:	200002ae 	.word	0x200002ae
 80051b0:	200000a4 	.word	0x200000a4
 80051b4:	200000a5 	.word	0x200000a5
 80051b8:	200002af 	.word	0x200002af
 80051bc:	200002d1 	.word	0x200002d1
 80051c0:	200002cf 	.word	0x200002cf
 80051c4:	200002bd 	.word	0x200002bd
 80051c8:	200002d0 	.word	0x200002d0
 80051cc:	200002bc 	.word	0x200002bc
 80051d0:	200002d2 	.word	0x200002d2
 80051d4:	200002d3 	.word	0x200002d3
 80051d8:	200002d4 	.word	0x200002d4
 80051dc:	200002d5 	.word	0x200002d5
 80051e0:	200002d6 	.word	0x200002d6
 80051e4:	200002d7 	.word	0x200002d7
 80051e8:	200002d8 	.word	0x200002d8
 80051ec:	200002d9 	.word	0x200002d9
 80051f0:	200002da 	.word	0x200002da
 80051f4:	200002db 	.word	0x200002db
	    kapi1AcSure=5;
 80051f8:	4b53      	ldr	r3, [pc, #332]	; (8005348 <eepromKontrol+0x498>)
 80051fa:	2205      	movs	r2, #5
 80051fc:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 80051fe:	4b53      	ldr	r3, [pc, #332]	; (800534c <eepromKontrol+0x49c>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b02      	cmp	r3, #2
 8005204:	d902      	bls.n	800520c <eepromKontrol+0x35c>
	    kapi2Tip=1;
 8005206:	4b51      	ldr	r3, [pc, #324]	; (800534c <eepromKontrol+0x49c>)
 8005208:	2201      	movs	r2, #1
 800520a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800520c:	4b50      	ldr	r3, [pc, #320]	; (8005350 <eepromKontrol+0x4a0>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b05      	cmp	r3, #5
 8005212:	d902      	bls.n	800521a <eepromKontrol+0x36a>
	    kapi2AcSure=5;
 8005214:	4b4e      	ldr	r3, [pc, #312]	; (8005350 <eepromKontrol+0x4a0>)
 8005216:	2205      	movs	r2, #5
 8005218:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 800521a:	4b4e      	ldr	r3, [pc, #312]	; (8005354 <eepromKontrol+0x4a4>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b02      	cmp	r3, #2
 8005220:	d902      	bls.n	8005228 <eepromKontrol+0x378>
	    kapitablaTip=1;
 8005222:	4b4c      	ldr	r3, [pc, #304]	; (8005354 <eepromKontrol+0x4a4>)
 8005224:	2201      	movs	r2, #1
 8005226:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8005228:	4b4b      	ldr	r3, [pc, #300]	; (8005358 <eepromKontrol+0x4a8>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b02      	cmp	r3, #2
 800522e:	d902      	bls.n	8005236 <eepromKontrol+0x386>
	    kapiTablaAcKonum=2;
 8005230:	4b49      	ldr	r3, [pc, #292]	; (8005358 <eepromKontrol+0x4a8>)
 8005232:	2202      	movs	r2, #2
 8005234:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8005236:	4b49      	ldr	r3, [pc, #292]	; (800535c <eepromKontrol+0x4ac>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b05      	cmp	r3, #5
 800523c:	d902      	bls.n	8005244 <eepromKontrol+0x394>
	    kapiTablaAcSure=5;
 800523e:	4b47      	ldr	r3, [pc, #284]	; (800535c <eepromKontrol+0x4ac>)
 8005240:	2205      	movs	r2, #5
 8005242:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8005244:	4b46      	ldr	r3, [pc, #280]	; (8005360 <eepromKontrol+0x4b0>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d902      	bls.n	8005252 <eepromKontrol+0x3a2>
	    yukariYavasLimit=0;
 800524c:	4b44      	ldr	r3, [pc, #272]	; (8005360 <eepromKontrol+0x4b0>)
 800524e:	2200      	movs	r2, #0
 8005250:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8005252:	4b44      	ldr	r3, [pc, #272]	; (8005364 <eepromKontrol+0x4b4>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d902      	bls.n	8005260 <eepromKontrol+0x3b0>
	    devirmeYuruyusSecim=0;
 800525a:	4b42      	ldr	r3, [pc, #264]	; (8005364 <eepromKontrol+0x4b4>)
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8005260:	4b41      	ldr	r3, [pc, #260]	; (8005368 <eepromKontrol+0x4b8>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d902      	bls.n	800526e <eepromKontrol+0x3be>
	    devirmeYukariIleriLimit=1;
 8005268:	4b3f      	ldr	r3, [pc, #252]	; (8005368 <eepromKontrol+0x4b8>)
 800526a:	2201      	movs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 800526e:	4b3f      	ldr	r3, [pc, #252]	; (800536c <eepromKontrol+0x4bc>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d902      	bls.n	800527c <eepromKontrol+0x3cc>
	    devirmeAsagiGeriLimit=1;
 8005276:	4b3d      	ldr	r3, [pc, #244]	; (800536c <eepromKontrol+0x4bc>)
 8005278:	2201      	movs	r2, #1
 800527a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800527c:	4b3c      	ldr	r3, [pc, #240]	; (8005370 <eepromKontrol+0x4c0>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d902      	bls.n	800528a <eepromKontrol+0x3da>
	    devirmeSilindirTipi=0;
 8005284:	4b3a      	ldr	r3, [pc, #232]	; (8005370 <eepromKontrol+0x4c0>)
 8005286:	2200      	movs	r2, #0
 8005288:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800528a:	4b3a      	ldr	r3, [pc, #232]	; (8005374 <eepromKontrol+0x4c4>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d902      	bls.n	8005298 <eepromKontrol+0x3e8>
	    platformSilindirTipi=0;
 8005292:	4b38      	ldr	r3, [pc, #224]	; (8005374 <eepromKontrol+0x4c4>)
 8005294:	2200      	movs	r2, #0
 8005296:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8005298:	4b37      	ldr	r3, [pc, #220]	; (8005378 <eepromKontrol+0x4c8>)
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b05      	cmp	r3, #5
 800529e:	d902      	bls.n	80052a6 <eepromKontrol+0x3f6>
	    yukariValfTmr=0;
 80052a0:	4b35      	ldr	r3, [pc, #212]	; (8005378 <eepromKontrol+0x4c8>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80052a6:	4b35      	ldr	r3, [pc, #212]	; (800537c <eepromKontrol+0x4cc>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2b05      	cmp	r3, #5
 80052ac:	d902      	bls.n	80052b4 <eepromKontrol+0x404>
	    asagiValfTmr=0;
 80052ae:	4b33      	ldr	r3, [pc, #204]	; (800537c <eepromKontrol+0x4cc>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80052b4:	4b32      	ldr	r3, [pc, #200]	; (8005380 <eepromKontrol+0x4d0>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	2b05      	cmp	r3, #5
 80052ba:	d902      	bls.n	80052c2 <eepromKontrol+0x412>
	    devirmeYukariIleriTmr=0;
 80052bc:	4b30      	ldr	r3, [pc, #192]	; (8005380 <eepromKontrol+0x4d0>)
 80052be:	2200      	movs	r2, #0
 80052c0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80052c2:	4b30      	ldr	r3, [pc, #192]	; (8005384 <eepromKontrol+0x4d4>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b05      	cmp	r3, #5
 80052c8:	d902      	bls.n	80052d0 <eepromKontrol+0x420>
	    devirmeAsagiGeriTmr=0;
 80052ca:	4b2e      	ldr	r3, [pc, #184]	; (8005384 <eepromKontrol+0x4d4>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80052d0:	4b2d      	ldr	r3, [pc, #180]	; (8005388 <eepromKontrol+0x4d8>)
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	2bb4      	cmp	r3, #180	; 0xb4
 80052d6:	d902      	bls.n	80052de <eepromKontrol+0x42e>
	    makineCalismaTmr=60;
 80052d8:	4b2b      	ldr	r3, [pc, #172]	; (8005388 <eepromKontrol+0x4d8>)
 80052da:	223c      	movs	r2, #60	; 0x3c
 80052dc:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80052de:	4b2b      	ldr	r3, [pc, #172]	; (800538c <eepromKontrol+0x4dc>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d902      	bls.n	80052ec <eepromKontrol+0x43c>
	    buzzer=0;
 80052e6:	4b29      	ldr	r3, [pc, #164]	; (800538c <eepromKontrol+0x4dc>)
 80052e8:	2200      	movs	r2, #0
 80052ea:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 80052ec:	4b28      	ldr	r3, [pc, #160]	; (8005390 <eepromKontrol+0x4e0>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d902      	bls.n	80052fa <eepromKontrol+0x44a>
	    demoMode=0;
 80052f4:	4b26      	ldr	r3, [pc, #152]	; (8005390 <eepromKontrol+0x4e0>)
 80052f6:	2200      	movs	r2, #0
 80052f8:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 80052fa:	4b26      	ldr	r3, [pc, #152]	; (8005394 <eepromKontrol+0x4e4>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d902      	bls.n	8005308 <eepromKontrol+0x458>
	    calismaSayModu=0;
 8005302:	4b24      	ldr	r3, [pc, #144]	; (8005394 <eepromKontrol+0x4e4>)
 8005304:	2200      	movs	r2, #0
 8005306:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8005308:	4b23      	ldr	r3, [pc, #140]	; (8005398 <eepromKontrol+0x4e8>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d902      	bls.n	8005316 <eepromKontrol+0x466>
	    dilSecim=0;
 8005310:	4b21      	ldr	r3, [pc, #132]	; (8005398 <eepromKontrol+0x4e8>)
 8005312:	2200      	movs	r2, #0
 8005314:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8005316:	4b21      	ldr	r3, [pc, #132]	; (800539c <eepromKontrol+0x4ec>)
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d902      	bls.n	8005324 <eepromKontrol+0x474>
		iotMode=0;
 800531e:	4b1f      	ldr	r3, [pc, #124]	; (800539c <eepromKontrol+0x4ec>)
 8005320:	2200      	movs	r2, #0
 8005322:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], 12);
 8005324:	4b1e      	ldr	r3, [pc, #120]	; (80053a0 <eepromKontrol+0x4f0>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	461a      	mov	r2, r3
 800532a:	4b1e      	ldr	r3, [pc, #120]	; (80053a4 <eepromKontrol+0x4f4>)
 800532c:	441a      	add	r2, r3
 800532e:	4b1e      	ldr	r3, [pc, #120]	; (80053a8 <eepromKontrol+0x4f8>)
 8005330:	6810      	ldr	r0, [r2, #0]
 8005332:	6851      	ldr	r1, [r2, #4]
 8005334:	6892      	ldr	r2, [r2, #8]
 8005336:	c307      	stmia	r3!, {r0, r1, r2}
	readWiFiCredentialsFromEEPROM(wifiSSID, wifiPass);
 8005338:	491c      	ldr	r1, [pc, #112]	; (80053ac <eepromKontrol+0x4fc>)
 800533a:	481d      	ldr	r0, [pc, #116]	; (80053b0 <eepromKontrol+0x500>)
 800533c:	f7fb fb22 	bl	8000984 <readWiFiCredentialsFromEEPROM>
}
 8005340:	bf00      	nop
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	200002c9 	.word	0x200002c9
 800534c:	200002ba 	.word	0x200002ba
 8005350:	200002ca 	.word	0x200002ca
 8005354:	200002bb 	.word	0x200002bb
 8005358:	200002bd 	.word	0x200002bd
 800535c:	200002cb 	.word	0x200002cb
 8005360:	200002be 	.word	0x200002be
 8005364:	200002bf 	.word	0x200002bf
 8005368:	200002c0 	.word	0x200002c0
 800536c:	200002c1 	.word	0x200002c1
 8005370:	200002c2 	.word	0x200002c2
 8005374:	200002c3 	.word	0x200002c3
 8005378:	200002c4 	.word	0x200002c4
 800537c:	200002c5 	.word	0x200002c5
 8005380:	200002c6 	.word	0x200002c6
 8005384:	200002c7 	.word	0x200002c7
 8005388:	200002c8 	.word	0x200002c8
 800538c:	200002cc 	.word	0x200002cc
 8005390:	200002ce 	.word	0x200002ce
 8005394:	200002d0 	.word	0x200002d0
 8005398:	200002d1 	.word	0x200002d1
 800539c:	200002cf 	.word	0x200002cf
 80053a0:	200000a1 	.word	0x200000a1
 80053a4:	200001e0 	.word	0x200001e0
 80053a8:	20000278 	.word	0x20000278
 80053ac:	20000298 	.word	0x20000298
 80053b0:	20000284 	.word	0x20000284

080053b4 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 80053b4:	b590      	push	{r4, r7, lr}
 80053b6:	b089      	sub	sp, #36	; 0x24
 80053b8:	af04      	add	r7, sp, #16
 80053ba:	4603      	mov	r3, r0
 80053bc:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 80053be:	4b26      	ldr	r3, [pc, #152]	; (8005458 <hata2EEPROM+0xa4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	1e5a      	subs	r2, r3, #1
 80053c4:	4b25      	ldr	r3, [pc, #148]	; (800545c <hata2EEPROM+0xa8>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4413      	add	r3, r2
 80053ca:	4a25      	ldr	r2, [pc, #148]	; (8005460 <hata2EEPROM+0xac>)
 80053cc:	5cd3      	ldrb	r3, [r2, r3]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80053d2:	f000 f849 	bl	8005468 <eepromDataFillWithEmpty>
		goto veriEkleme;
 80053d6:	e000      	b.n	80053da <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80053d8:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
 80053de:	e012      	b.n	8005406 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80053e0:	4b1e      	ldr	r3, [pc, #120]	; (800545c <hata2EEPROM+0xa8>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	4413      	add	r3, r2
 80053e8:	4a1d      	ldr	r2, [pc, #116]	; (8005460 <hata2EEPROM+0xac>)
 80053ea:	5cd3      	ldrb	r3, [r2, r3]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d107      	bne.n	8005400 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80053f0:	4b1a      	ldr	r3, [pc, #104]	; (800545c <hata2EEPROM+0xa8>)
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4413      	add	r3, r2
 80053f8:	4919      	ldr	r1, [pc, #100]	; (8005460 <hata2EEPROM+0xac>)
 80053fa:	79fa      	ldrb	r2, [r7, #7]
 80053fc:	54ca      	strb	r2, [r1, r3]
					break;
 80053fe:	e007      	b.n	8005410 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	3301      	adds	r3, #1
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	4b14      	ldr	r3, [pc, #80]	; (8005458 <hata2EEPROM+0xa4>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	429a      	cmp	r2, r3
 800540e:	dbe7      	blt.n	80053e0 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8005410:	4b12      	ldr	r3, [pc, #72]	; (800545c <hata2EEPROM+0xa8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	b299      	uxth	r1, r3
 8005416:	4b10      	ldr	r3, [pc, #64]	; (8005458 <hata2EEPROM+0xa4>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	b298      	uxth	r0, r3
 800541c:	4b0f      	ldr	r3, [pc, #60]	; (800545c <hata2EEPROM+0xa8>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a0f      	ldr	r2, [pc, #60]	; (8005460 <hata2EEPROM+0xac>)
 8005422:	4413      	add	r3, r2
 8005424:	4a0c      	ldr	r2, [pc, #48]	; (8005458 <hata2EEPROM+0xa4>)
 8005426:	6812      	ldr	r2, [r2, #0]
 8005428:	b292      	uxth	r2, r2
 800542a:	f640 34b8 	movw	r4, #3000	; 0xbb8
 800542e:	9402      	str	r4, [sp, #8]
 8005430:	9201      	str	r2, [sp, #4]
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	4603      	mov	r3, r0
 8005436:	460a      	mov	r2, r1
 8005438:	21a0      	movs	r1, #160	; 0xa0
 800543a:	480a      	ldr	r0, [pc, #40]	; (8005464 <hata2EEPROM+0xb0>)
 800543c:	f003 ff50 	bl	80092e0 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8005440:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005444:	f002 fec2 	bl	80081cc <HAL_Delay>
	eepromKontrol(1);
 8005448:	2001      	movs	r0, #1
 800544a:	f7ff fd31 	bl	8004eb0 <eepromKontrol>
}
 800544e:	bf00      	nop
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	bd90      	pop	{r4, r7, pc}
 8005456:	bf00      	nop
 8005458:	20000028 	.word	0x20000028
 800545c:	2000002c 	.word	0x2000002c
 8005460:	200001e0 	.word	0x200001e0
 8005464:	200000fc 	.word	0x200000fc

08005468 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8005468:	b480      	push	{r7}
 800546a:	b083      	sub	sp, #12
 800546c:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 800546e:	2300      	movs	r3, #0
 8005470:	607b      	str	r3, [r7, #4]
 8005472:	e009      	b.n	8005488 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8005474:	4a0a      	ldr	r2, [pc, #40]	; (80054a0 <eepromDataFillWithEmpty+0x38>)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800547c:	4a09      	ldr	r2, [pc, #36]	; (80054a4 <eepromDataFillWithEmpty+0x3c>)
 800547e:	2100      	movs	r1, #0
 8005480:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3301      	adds	r3, #1
 8005486:	607b      	str	r3, [r7, #4]
 8005488:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <eepromDataFillWithEmpty+0x40>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	687a      	ldr	r2, [r7, #4]
 800548e:	429a      	cmp	r2, r3
 8005490:	dbf0      	blt.n	8005474 <eepromDataFillWithEmpty+0xc>
	}
}
 8005492:	bf00      	nop
 8005494:	bf00      	nop
 8005496:	370c      	adds	r7, #12
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	20000000 	.word	0x20000000
 80054a4:	200001e0 	.word	0x200001e0
 80054a8:	20000028 	.word	0x20000028

080054ac <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
	timer1=millis;
 80054b0:	4b47      	ldr	r3, [pc, #284]	; (80055d0 <bekle+0x124>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a47      	ldr	r2, [pc, #284]	; (80055d4 <bekle+0x128>)
 80054b6:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80054b8:	e002      	b.n	80054c0 <bekle+0x14>
    	butonKontrol = 1;
 80054ba:	4b47      	ldr	r3, [pc, #284]	; (80055d8 <bekle+0x12c>)
 80054bc:	2201      	movs	r2, #1
 80054be:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80054c0:	2101      	movs	r1, #1
 80054c2:	4846      	ldr	r0, [pc, #280]	; (80055dc <bekle+0x130>)
 80054c4:	f003 fc52 	bl	8008d6c <HAL_GPIO_ReadPin>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d109      	bne.n	80054e2 <bekle+0x36>
 80054ce:	4b40      	ldr	r3, [pc, #256]	; (80055d0 <bekle+0x124>)
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	4b40      	ldr	r3, [pc, #256]	; (80055d4 <bekle+0x128>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d0ef      	beq.n	80054ba <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80054da:	e002      	b.n	80054e2 <bekle+0x36>
    	butonKontrol = 1;
 80054dc:	4b3e      	ldr	r3, [pc, #248]	; (80055d8 <bekle+0x12c>)
 80054de:	2201      	movs	r2, #1
 80054e0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80054e2:	2108      	movs	r1, #8
 80054e4:	483e      	ldr	r0, [pc, #248]	; (80055e0 <bekle+0x134>)
 80054e6:	f003 fc41 	bl	8008d6c <HAL_GPIO_ReadPin>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d109      	bne.n	8005504 <bekle+0x58>
 80054f0:	4b37      	ldr	r3, [pc, #220]	; (80055d0 <bekle+0x124>)
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	4b37      	ldr	r3, [pc, #220]	; (80055d4 <bekle+0x128>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d0ef      	beq.n	80054dc <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80054fc:	e002      	b.n	8005504 <bekle+0x58>
    	butonKontrol = 1;
 80054fe:	4b36      	ldr	r3, [pc, #216]	; (80055d8 <bekle+0x12c>)
 8005500:	2201      	movs	r2, #1
 8005502:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005504:	2102      	movs	r1, #2
 8005506:	4835      	ldr	r0, [pc, #212]	; (80055dc <bekle+0x130>)
 8005508:	f003 fc30 	bl	8008d6c <HAL_GPIO_ReadPin>
 800550c:	4603      	mov	r3, r0
 800550e:	2b01      	cmp	r3, #1
 8005510:	d109      	bne.n	8005526 <bekle+0x7a>
 8005512:	4b2f      	ldr	r3, [pc, #188]	; (80055d0 <bekle+0x124>)
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	4b2f      	ldr	r3, [pc, #188]	; (80055d4 <bekle+0x128>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	429a      	cmp	r2, r3
 800551c:	d0ef      	beq.n	80054fe <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800551e:	e002      	b.n	8005526 <bekle+0x7a>
    	butonKontrol = 1;
 8005520:	4b2d      	ldr	r3, [pc, #180]	; (80055d8 <bekle+0x12c>)
 8005522:	2201      	movs	r2, #1
 8005524:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005526:	2104      	movs	r1, #4
 8005528:	482c      	ldr	r0, [pc, #176]	; (80055dc <bekle+0x130>)
 800552a:	f003 fc1f 	bl	8008d6c <HAL_GPIO_ReadPin>
 800552e:	4603      	mov	r3, r0
 8005530:	2b01      	cmp	r3, #1
 8005532:	d109      	bne.n	8005548 <bekle+0x9c>
 8005534:	4b26      	ldr	r3, [pc, #152]	; (80055d0 <bekle+0x124>)
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	4b26      	ldr	r3, [pc, #152]	; (80055d4 <bekle+0x128>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	429a      	cmp	r2, r3
 800553e:	d0ef      	beq.n	8005520 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005540:	e002      	b.n	8005548 <bekle+0x9c>
    	butonKontrol = 1;
 8005542:	4b25      	ldr	r3, [pc, #148]	; (80055d8 <bekle+0x12c>)
 8005544:	2201      	movs	r2, #1
 8005546:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005548:	2108      	movs	r1, #8
 800554a:	4824      	ldr	r0, [pc, #144]	; (80055dc <bekle+0x130>)
 800554c:	f003 fc0e 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005550:	4603      	mov	r3, r0
 8005552:	2b01      	cmp	r3, #1
 8005554:	d109      	bne.n	800556a <bekle+0xbe>
 8005556:	4b1e      	ldr	r3, [pc, #120]	; (80055d0 <bekle+0x124>)
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	4b1e      	ldr	r3, [pc, #120]	; (80055d4 <bekle+0x128>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d0ef      	beq.n	8005542 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005562:	e002      	b.n	800556a <bekle+0xbe>
    	butonKontrol = 1;
 8005564:	4b1c      	ldr	r3, [pc, #112]	; (80055d8 <bekle+0x12c>)
 8005566:	2201      	movs	r2, #1
 8005568:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800556a:	2180      	movs	r1, #128	; 0x80
 800556c:	481c      	ldr	r0, [pc, #112]	; (80055e0 <bekle+0x134>)
 800556e:	f003 fbfd 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d109      	bne.n	800558c <bekle+0xe0>
 8005578:	4b15      	ldr	r3, [pc, #84]	; (80055d0 <bekle+0x124>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	4b15      	ldr	r3, [pc, #84]	; (80055d4 <bekle+0x128>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	429a      	cmp	r2, r3
 8005582:	d0ef      	beq.n	8005564 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005584:	e002      	b.n	800558c <bekle+0xe0>
    	butonKontrol = 1;
 8005586:	4b14      	ldr	r3, [pc, #80]	; (80055d8 <bekle+0x12c>)
 8005588:	2201      	movs	r2, #1
 800558a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800558c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005590:	4813      	ldr	r0, [pc, #76]	; (80055e0 <bekle+0x134>)
 8005592:	f003 fbeb 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d109      	bne.n	80055b0 <bekle+0x104>
 800559c:	4b0c      	ldr	r3, [pc, #48]	; (80055d0 <bekle+0x124>)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	4b0c      	ldr	r3, [pc, #48]	; (80055d4 <bekle+0x128>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d0ee      	beq.n	8005586 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80055a8:	e002      	b.n	80055b0 <bekle+0x104>
    	butonKontrol = 1;
 80055aa:	4b0b      	ldr	r3, [pc, #44]	; (80055d8 <bekle+0x12c>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80055b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055b4:	480a      	ldr	r0, [pc, #40]	; (80055e0 <bekle+0x134>)
 80055b6:	f003 fbd9 	bl	8008d6c <HAL_GPIO_ReadPin>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d105      	bne.n	80055cc <bekle+0x120>
 80055c0:	4b03      	ldr	r3, [pc, #12]	; (80055d0 <bekle+0x124>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	4b03      	ldr	r3, [pc, #12]	; (80055d4 <bekle+0x128>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d0ee      	beq.n	80055aa <bekle+0xfe>
    }

}
 80055cc:	bf00      	nop
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	20000258 	.word	0x20000258
 80055d4:	20000260 	.word	0x20000260
 80055d8:	200002df 	.word	0x200002df
 80055dc:	40010800 	.word	0x40010800
 80055e0:	40011000 	.word	0x40011000

080055e4 <i2cTest>:

void i2cTest() {
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 80055ea:	463b      	mov	r3, r7
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	605a      	str	r2, [r3, #4]
 80055f2:	609a      	str	r2, [r3, #8]
 80055f4:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 80055f6:	4b50      	ldr	r3, [pc, #320]	; (8005738 <i2cTest+0x154>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	4b4e      	ldr	r3, [pc, #312]	; (8005738 <i2cTest+0x154>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0201 	bic.w	r2, r2, #1
 8005604:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8005606:	484c      	ldr	r0, [pc, #304]	; (8005738 <i2cTest+0x154>)
 8005608:	f003 fd3c 	bl	8009084 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800560c:	23c0      	movs	r3, #192	; 0xc0
 800560e:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8005610:	2311      	movs	r3, #17
 8005612:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8005614:	2301      	movs	r3, #1
 8005616:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8005618:	2303      	movs	r3, #3
 800561a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800561c:	463b      	mov	r3, r7
 800561e:	4619      	mov	r1, r3
 8005620:	4846      	ldr	r0, [pc, #280]	; (800573c <i2cTest+0x158>)
 8005622:	f003 f943 	bl	80088ac <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8005626:	2201      	movs	r2, #1
 8005628:	2140      	movs	r1, #64	; 0x40
 800562a:	4844      	ldr	r0, [pc, #272]	; (800573c <i2cTest+0x158>)
 800562c:	f003 fbb5 	bl	8008d9a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8005630:	2201      	movs	r2, #1
 8005632:	2180      	movs	r1, #128	; 0x80
 8005634:	4841      	ldr	r0, [pc, #260]	; (800573c <i2cTest+0x158>)
 8005636:	f003 fbb0 	bl	8008d9a <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 800563a:	200a      	movs	r0, #10
 800563c:	f002 fdc6 	bl	80081cc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8005640:	bf00      	nop
 8005642:	2140      	movs	r1, #64	; 0x40
 8005644:	483d      	ldr	r0, [pc, #244]	; (800573c <i2cTest+0x158>)
 8005646:	f003 fb91 	bl	8008d6c <HAL_GPIO_ReadPin>
 800564a:	4603      	mov	r3, r0
 800564c:	2b01      	cmp	r3, #1
 800564e:	d006      	beq.n	800565e <i2cTest+0x7a>
 8005650:	2180      	movs	r1, #128	; 0x80
 8005652:	483a      	ldr	r0, [pc, #232]	; (800573c <i2cTest+0x158>)
 8005654:	f003 fb8a 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005658:	4603      	mov	r3, r0
 800565a:	2b01      	cmp	r3, #1
 800565c:	d1f1      	bne.n	8005642 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800565e:	2200      	movs	r2, #0
 8005660:	2180      	movs	r1, #128	; 0x80
 8005662:	4836      	ldr	r0, [pc, #216]	; (800573c <i2cTest+0x158>)
 8005664:	f003 fb99 	bl	8008d9a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8005668:	200a      	movs	r0, #10
 800566a:	f002 fdaf 	bl	80081cc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 800566e:	bf00      	nop
 8005670:	2180      	movs	r1, #128	; 0x80
 8005672:	4832      	ldr	r0, [pc, #200]	; (800573c <i2cTest+0x158>)
 8005674:	f003 fb7a 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005678:	4603      	mov	r3, r0
 800567a:	2b01      	cmp	r3, #1
 800567c:	d0f8      	beq.n	8005670 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800567e:	2200      	movs	r2, #0
 8005680:	2140      	movs	r1, #64	; 0x40
 8005682:	482e      	ldr	r0, [pc, #184]	; (800573c <i2cTest+0x158>)
 8005684:	f003 fb89 	bl	8008d9a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8005688:	200a      	movs	r0, #10
 800568a:	f002 fd9f 	bl	80081cc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800568e:	bf00      	nop
 8005690:	2140      	movs	r1, #64	; 0x40
 8005692:	482a      	ldr	r0, [pc, #168]	; (800573c <i2cTest+0x158>)
 8005694:	f003 fb6a 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005698:	4603      	mov	r3, r0
 800569a:	2b01      	cmp	r3, #1
 800569c:	d0f8      	beq.n	8005690 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800569e:	2201      	movs	r2, #1
 80056a0:	2140      	movs	r1, #64	; 0x40
 80056a2:	4826      	ldr	r0, [pc, #152]	; (800573c <i2cTest+0x158>)
 80056a4:	f003 fb79 	bl	8008d9a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80056a8:	200a      	movs	r0, #10
 80056aa:	f002 fd8f 	bl	80081cc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 80056ae:	bf00      	nop
 80056b0:	2140      	movs	r1, #64	; 0x40
 80056b2:	4822      	ldr	r0, [pc, #136]	; (800573c <i2cTest+0x158>)
 80056b4:	f003 fb5a 	bl	8008d6c <HAL_GPIO_ReadPin>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d1f8      	bne.n	80056b0 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80056be:	2201      	movs	r2, #1
 80056c0:	2180      	movs	r1, #128	; 0x80
 80056c2:	481e      	ldr	r0, [pc, #120]	; (800573c <i2cTest+0x158>)
 80056c4:	f003 fb69 	bl	8008d9a <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80056c8:	200a      	movs	r0, #10
 80056ca:	f002 fd7f 	bl	80081cc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80056ce:	bf00      	nop
 80056d0:	2180      	movs	r1, #128	; 0x80
 80056d2:	481a      	ldr	r0, [pc, #104]	; (800573c <i2cTest+0x158>)
 80056d4:	f003 fb4a 	bl	8008d6c <HAL_GPIO_ReadPin>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d1f8      	bne.n	80056d0 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80056de:	23c0      	movs	r3, #192	; 0xc0
 80056e0:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80056e2:	2312      	movs	r3, #18
 80056e4:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80056e6:	2301      	movs	r3, #1
 80056e8:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80056ea:	2303      	movs	r3, #3
 80056ec:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80056ee:	463b      	mov	r3, r7
 80056f0:	4619      	mov	r1, r3
 80056f2:	4812      	ldr	r0, [pc, #72]	; (800573c <i2cTest+0x158>)
 80056f4:	f003 f8da 	bl	80088ac <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80056f8:	4b0f      	ldr	r3, [pc, #60]	; (8005738 <i2cTest+0x154>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	4b0e      	ldr	r3, [pc, #56]	; (8005738 <i2cTest+0x154>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005706:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8005708:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <i2cTest+0x154>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	4b0a      	ldr	r3, [pc, #40]	; (8005738 <i2cTest+0x154>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005716:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8005718:	4b07      	ldr	r3, [pc, #28]	; (8005738 <i2cTest+0x154>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	4b06      	ldr	r3, [pc, #24]	; (8005738 <i2cTest+0x154>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0201 	orr.w	r2, r2, #1
 8005726:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8005728:	4803      	ldr	r0, [pc, #12]	; (8005738 <i2cTest+0x154>)
 800572a:	f003 fb67 	bl	8008dfc <HAL_I2C_Init>
}
 800572e:	bf00      	nop
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	200000fc 	.word	0x200000fc
 800573c:	40010c00 	.word	0x40010c00

08005740 <checkLCDBacklight>:

void checkLCDBacklight() {
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8005744:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <checkLCDBacklight+0x34>)
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	4b0b      	ldr	r3, [pc, #44]	; (8005778 <checkLCDBacklight+0x38>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	1ad2      	subs	r2, r2, r3
 800574e:	4b0b      	ldr	r3, [pc, #44]	; (800577c <checkLCDBacklight+0x3c>)
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	4619      	mov	r1, r3
 8005754:	460b      	mov	r3, r1
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	429a      	cmp	r2, r3
 800575e:	d303      	bcc.n	8005768 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 8005760:	2000      	movs	r0, #0
 8005762:	f7fa ff4b 	bl	80005fc <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8005766:	e002      	b.n	800576e <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 8005768:	2001      	movs	r0, #1
 800576a:	f7fa ff47 	bl	80005fc <lcd_backlight>
}
 800576e:	bf00      	nop
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	20000258 	.word	0x20000258
 8005778:	20000274 	.word	0x20000274
 800577c:	20000030 	.word	0x20000030

08005780 <checkBasincSalteri>:

void checkBasincSalteri() {
 8005780:	b580      	push	{r7, lr}
 8005782:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8005784:	4b13      	ldr	r3, [pc, #76]	; (80057d4 <checkBasincSalteri+0x54>)
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d102      	bne.n	8005792 <checkBasincSalteri+0x12>
		basincVar=1;
 800578c:	4b12      	ldr	r3, [pc, #72]	; (80057d8 <checkBasincSalteri+0x58>)
 800578e:	2201      	movs	r2, #1
 8005790:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8005792:	4b10      	ldr	r3, [pc, #64]	; (80057d4 <checkBasincSalteri+0x54>)
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	2b01      	cmp	r3, #1
 8005798:	d119      	bne.n	80057ce <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 800579a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800579e:	480f      	ldr	r0, [pc, #60]	; (80057dc <checkBasincSalteri+0x5c>)
 80057a0:	f003 fae4 	bl	8008d6c <HAL_GPIO_ReadPin>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10a      	bne.n	80057c0 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80057aa:	4b0d      	ldr	r3, [pc, #52]	; (80057e0 <checkBasincSalteri+0x60>)
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	4b0d      	ldr	r3, [pc, #52]	; (80057e4 <checkBasincSalteri+0x64>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d90a      	bls.n	80057ce <checkBasincSalteri+0x4e>
				basincVar=1;
 80057b8:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <checkBasincSalteri+0x58>)
 80057ba:	2201      	movs	r2, #1
 80057bc:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80057be:	e006      	b.n	80057ce <checkBasincSalteri+0x4e>
			timer5=millis;
 80057c0:	4b07      	ldr	r3, [pc, #28]	; (80057e0 <checkBasincSalteri+0x60>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a07      	ldr	r2, [pc, #28]	; (80057e4 <checkBasincSalteri+0x64>)
 80057c6:	6013      	str	r3, [r2, #0]
			basincVar=0;
 80057c8:	4b03      	ldr	r3, [pc, #12]	; (80057d8 <checkBasincSalteri+0x58>)
 80057ca:	2200      	movs	r2, #0
 80057cc:	701a      	strb	r2, [r3, #0]
}
 80057ce:	bf00      	nop
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	200002b7 	.word	0x200002b7
 80057d8:	200002b3 	.word	0x200002b3
 80057dc:	40011000 	.word	0x40011000
 80057e0:	20000258 	.word	0x20000258
 80057e4:	20000270 	.word	0x20000270

080057e8 <checkBasGonder>:

void checkBasGonder() {
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80057ec:	4b1b      	ldr	r3, [pc, #108]	; (800585c <checkBasGonder+0x74>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d10b      	bne.n	800580c <checkBasGonder+0x24>
 80057f4:	4b1a      	ldr	r3, [pc, #104]	; (8005860 <checkBasGonder+0x78>)
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d007      	beq.n	800580c <checkBasGonder+0x24>
 80057fc:	4b19      	ldr	r3, [pc, #100]	; (8005864 <checkBasGonder+0x7c>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d103      	bne.n	800580c <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8005804:	4b18      	ldr	r3, [pc, #96]	; (8005868 <checkBasGonder+0x80>)
 8005806:	2201      	movs	r2, #1
 8005808:	701a      	strb	r2, [r3, #0]
 800580a:	e009      	b.n	8005820 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 800580c:	4b14      	ldr	r3, [pc, #80]	; (8005860 <checkBasGonder+0x78>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	f083 0301 	eor.w	r3, r3, #1
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d002      	beq.n	8005820 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 800581a:	4b13      	ldr	r3, [pc, #76]	; (8005868 <checkBasGonder+0x80>)
 800581c:	2200      	movs	r2, #0
 800581e:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8005820:	4b0e      	ldr	r3, [pc, #56]	; (800585c <checkBasGonder+0x74>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d10b      	bne.n	8005840 <checkBasGonder+0x58>
 8005828:	4b10      	ldr	r3, [pc, #64]	; (800586c <checkBasGonder+0x84>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d007      	beq.n	8005840 <checkBasGonder+0x58>
 8005830:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <checkBasGonder+0x7c>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d103      	bne.n	8005840 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8005838:	4b0d      	ldr	r3, [pc, #52]	; (8005870 <checkBasGonder+0x88>)
 800583a:	2201      	movs	r2, #1
 800583c:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 800583e:	e009      	b.n	8005854 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8005840:	4b0a      	ldr	r3, [pc, #40]	; (800586c <checkBasGonder+0x84>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	f083 0301 	eor.w	r3, r3, #1
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d002      	beq.n	8005854 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 800584e:	4b08      	ldr	r3, [pc, #32]	; (8005870 <checkBasGonder+0x88>)
 8005850:	2200      	movs	r2, #0
 8005852:	701a      	strb	r2, [r3, #0]
}
 8005854:	bf00      	nop
 8005856:	46bd      	mov	sp, r7
 8005858:	bc80      	pop	{r7}
 800585a:	4770      	bx	lr
 800585c:	200002b1 	.word	0x200002b1
 8005860:	200002e5 	.word	0x200002e5
 8005864:	200002bf 	.word	0x200002bf
 8005868:	200002ec 	.word	0x200002ec
 800586c:	200002e8 	.word	0x200002e8
 8005870:	200002ed 	.word	0x200002ed

08005874 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8005874:	b580      	push	{r7, lr}
 8005876:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8005878:	4b24      	ldr	r3, [pc, #144]	; (800590c <checkKapiSecimleri+0x98>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d102      	bne.n	8005886 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8005880:	4b23      	ldr	r3, [pc, #140]	; (8005910 <checkKapiSecimleri+0x9c>)
 8005882:	2201      	movs	r2, #1
 8005884:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8005886:	4b21      	ldr	r3, [pc, #132]	; (800590c <checkKapiSecimleri+0x98>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d10e      	bne.n	80058ac <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800588e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005892:	4820      	ldr	r0, [pc, #128]	; (8005914 <checkKapiSecimleri+0xa0>)
 8005894:	f003 fa6a 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d103      	bne.n	80058a6 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 800589e:	4b1c      	ldr	r3, [pc, #112]	; (8005910 <checkKapiSecimleri+0x9c>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	e002      	b.n	80058ac <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80058a6:	4b1a      	ldr	r3, [pc, #104]	; (8005910 <checkKapiSecimleri+0x9c>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80058ac:	4b17      	ldr	r3, [pc, #92]	; (800590c <checkKapiSecimleri+0x98>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d10e      	bne.n	80058d2 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80058b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058b8:	4816      	ldr	r0, [pc, #88]	; (8005914 <checkKapiSecimleri+0xa0>)
 80058ba:	f003 fa57 	bl	8008d6c <HAL_GPIO_ReadPin>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d103      	bne.n	80058cc <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80058c4:	4b12      	ldr	r3, [pc, #72]	; (8005910 <checkKapiSecimleri+0x9c>)
 80058c6:	2201      	movs	r2, #1
 80058c8:	701a      	strb	r2, [r3, #0]
 80058ca:	e002      	b.n	80058d2 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80058cc:	4b10      	ldr	r3, [pc, #64]	; (8005910 <checkKapiSecimleri+0x9c>)
 80058ce:	2200      	movs	r2, #0
 80058d0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 80058d2:	4b0e      	ldr	r3, [pc, #56]	; (800590c <checkKapiSecimleri+0x98>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d116      	bne.n	8005908 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80058da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058de:	480d      	ldr	r0, [pc, #52]	; (8005914 <checkKapiSecimleri+0xa0>)
 80058e0:	f003 fa44 	bl	8008d6c <HAL_GPIO_ReadPin>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10b      	bne.n	8005902 <checkKapiSecimleri+0x8e>
 80058ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058ee:	4809      	ldr	r0, [pc, #36]	; (8005914 <checkKapiSecimleri+0xa0>)
 80058f0:	f003 fa3c 	bl	8008d6c <HAL_GPIO_ReadPin>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d103      	bne.n	8005902 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 80058fa:	4b05      	ldr	r3, [pc, #20]	; (8005910 <checkKapiSecimleri+0x9c>)
 80058fc:	2201      	movs	r2, #1
 80058fe:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8005900:	e002      	b.n	8005908 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8005902:	4b03      	ldr	r3, [pc, #12]	; (8005910 <checkKapiSecimleri+0x9c>)
 8005904:	2200      	movs	r2, #0
 8005906:	701a      	strb	r2, [r3, #0]
}
 8005908:	bf00      	nop
 800590a:	bd80      	pop	{r7, pc}
 800590c:	200002b8 	.word	0x200002b8
 8005910:	20000303 	.word	0x20000303
 8005914:	40010800 	.word	0x40010800

08005918 <checkAktifCalisma>:

void checkAktifCalisma() {
 8005918:	b580      	push	{r7, lr}
 800591a:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 800591c:	4b62      	ldr	r3, [pc, #392]	; (8005aa8 <checkAktifCalisma+0x190>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	f041 8332 	bne.w	8006f8a <checkAktifCalisma+0x1672>
 8005926:	4b61      	ldr	r3, [pc, #388]	; (8005aac <checkAktifCalisma+0x194>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	f041 832d 	bne.w	8006f8a <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8005930:	4b5f      	ldr	r3, [pc, #380]	; (8005ab0 <checkAktifCalisma+0x198>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d11a      	bne.n	800596e <checkAktifCalisma+0x56>
 8005938:	4b5e      	ldr	r3, [pc, #376]	; (8005ab4 <checkAktifCalisma+0x19c>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d116      	bne.n	800596e <checkAktifCalisma+0x56>
 8005940:	4b5d      	ldr	r3, [pc, #372]	; (8005ab8 <checkAktifCalisma+0x1a0>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00a      	beq.n	800595e <checkAktifCalisma+0x46>
 8005948:	4b5c      	ldr	r3, [pc, #368]	; (8005abc <checkAktifCalisma+0x1a4>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	f083 0301 	eor.w	r3, r3, #1
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <checkAktifCalisma+0x46>
 8005956:	4b5a      	ldr	r3, [pc, #360]	; (8005ac0 <checkAktifCalisma+0x1a8>)
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d007      	beq.n	800596e <checkAktifCalisma+0x56>
 800595e:	4b59      	ldr	r3, [pc, #356]	; (8005ac4 <checkAktifCalisma+0x1ac>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d018      	beq.n	8005998 <checkAktifCalisma+0x80>
 8005966:	4b58      	ldr	r3, [pc, #352]	; (8005ac8 <checkAktifCalisma+0x1b0>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d114      	bne.n	8005998 <checkAktifCalisma+0x80>
 800596e:	4b57      	ldr	r3, [pc, #348]	; (8005acc <checkAktifCalisma+0x1b4>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d010      	beq.n	8005998 <checkAktifCalisma+0x80>
 8005976:	4b56      	ldr	r3, [pc, #344]	; (8005ad0 <checkAktifCalisma+0x1b8>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00c      	beq.n	8005998 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800597e:	2201      	movs	r2, #1
 8005980:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005984:	4853      	ldr	r0, [pc, #332]	; (8005ad4 <checkAktifCalisma+0x1bc>)
 8005986:	f003 fa08 	bl	8008d9a <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 800598a:	4b53      	ldr	r3, [pc, #332]	; (8005ad8 <checkAktifCalisma+0x1c0>)
 800598c:	2201      	movs	r2, #1
 800598e:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8005990:	4b52      	ldr	r3, [pc, #328]	; (8005adc <checkAktifCalisma+0x1c4>)
 8005992:	2201      	movs	r2, #1
 8005994:	701a      	strb	r2, [r3, #0]
 8005996:	e008      	b.n	80059aa <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005998:	2200      	movs	r2, #0
 800599a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800599e:	484d      	ldr	r0, [pc, #308]	; (8005ad4 <checkAktifCalisma+0x1bc>)
 80059a0:	f003 f9fb 	bl	8008d9a <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 80059a4:	4b4c      	ldr	r3, [pc, #304]	; (8005ad8 <checkAktifCalisma+0x1c0>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 80059aa:	4b40      	ldr	r3, [pc, #256]	; (8005aac <checkAktifCalisma+0x194>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d160      	bne.n	8005a74 <checkAktifCalisma+0x15c>
 80059b2:	4b46      	ldr	r3, [pc, #280]	; (8005acc <checkAktifCalisma+0x1b4>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d05c      	beq.n	8005a74 <checkAktifCalisma+0x15c>
 80059ba:	4b45      	ldr	r3, [pc, #276]	; (8005ad0 <checkAktifCalisma+0x1b8>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d058      	beq.n	8005a74 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80059c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059c6:	4843      	ldr	r0, [pc, #268]	; (8005ad4 <checkAktifCalisma+0x1bc>)
 80059c8:	f003 f9d0 	bl	8008d6c <HAL_GPIO_ReadPin>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <checkAktifCalisma+0xc2>
 80059d2:	4b43      	ldr	r3, [pc, #268]	; (8005ae0 <checkAktifCalisma+0x1c8>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d04c      	beq.n	8005a74 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80059da:	2102      	movs	r1, #2
 80059dc:	4841      	ldr	r0, [pc, #260]	; (8005ae4 <checkAktifCalisma+0x1cc>)
 80059de:	f003 f9c5 	bl	8008d6c <HAL_GPIO_ReadPin>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d145      	bne.n	8005a74 <checkAktifCalisma+0x15c>
				&& (basincVar)
 80059e8:	4b3f      	ldr	r3, [pc, #252]	; (8005ae8 <checkAktifCalisma+0x1d0>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d041      	beq.n	8005a74 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80059f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059f4:	4837      	ldr	r0, [pc, #220]	; (8005ad4 <checkAktifCalisma+0x1bc>)
 80059f6:	f003 f9b9 	bl	8008d6c <HAL_GPIO_ReadPin>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d10e      	bne.n	8005a1e <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005a00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a04:	4833      	ldr	r0, [pc, #204]	; (8005ad4 <checkAktifCalisma+0x1bc>)
 8005a06:	f003 f9b1 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d106      	bne.n	8005a1e <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8005a10:	2140      	movs	r1, #64	; 0x40
 8005a12:	4834      	ldr	r0, [pc, #208]	; (8005ae4 <checkAktifCalisma+0x1cc>)
 8005a14:	f003 f9aa 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d003      	beq.n	8005a26 <checkAktifCalisma+0x10e>
 8005a1e:	4b24      	ldr	r3, [pc, #144]	; (8005ab0 <checkAktifCalisma+0x198>)
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d026      	beq.n	8005a74 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8005a26:	4b24      	ldr	r3, [pc, #144]	; (8005ab8 <checkAktifCalisma+0x1a0>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	f083 0301 	eor.w	r3, r3, #1
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d01f      	beq.n	8005a74 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8005a34:	4b1f      	ldr	r3, [pc, #124]	; (8005ab4 <checkAktifCalisma+0x19c>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	f083 0301 	eor.w	r3, r3, #1
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d018      	beq.n	8005a74 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8005a42:	4b20      	ldr	r3, [pc, #128]	; (8005ac4 <checkAktifCalisma+0x1ac>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	f083 0301 	eor.w	r3, r3, #1
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d011      	beq.n	8005a74 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8005a50:	4b26      	ldr	r3, [pc, #152]	; (8005aec <checkAktifCalisma+0x1d4>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	f083 0301 	eor.w	r3, r3, #1
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00a      	beq.n	8005a74 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8005a5e:	4b24      	ldr	r3, [pc, #144]	; (8005af0 <checkAktifCalisma+0x1d8>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	f083 0301 	eor.w	r3, r3, #1
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8005a6c:	4b10      	ldr	r3, [pc, #64]	; (8005ab0 <checkAktifCalisma+0x198>)
 8005a6e:	2201      	movs	r2, #1
 8005a70:	701a      	strb	r2, [r3, #0]
 8005a72:	e002      	b.n	8005a7a <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8005a74:	4b0e      	ldr	r3, [pc, #56]	; (8005ab0 <checkAktifCalisma+0x198>)
 8005a76:	2200      	movs	r2, #0
 8005a78:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8005a7a:	4b0d      	ldr	r3, [pc, #52]	; (8005ab0 <checkAktifCalisma+0x198>)
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d03a      	beq.n	8005af8 <checkAktifCalisma+0x1e0>
 8005a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a86:	4817      	ldr	r0, [pc, #92]	; (8005ae4 <checkAktifCalisma+0x1cc>)
 8005a88:	f003 f970 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d132      	bne.n	8005af8 <checkAktifCalisma+0x1e0>
 8005a92:	4b18      	ldr	r3, [pc, #96]	; (8005af4 <checkAktifCalisma+0x1dc>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d02e      	beq.n	8005af8 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005aa0:	480c      	ldr	r0, [pc, #48]	; (8005ad4 <checkAktifCalisma+0x1bc>)
 8005aa2:	f003 f97a 	bl	8008d9a <HAL_GPIO_WritePin>
 8005aa6:	e02d      	b.n	8005b04 <checkAktifCalisma+0x1ec>
 8005aa8:	200002ce 	.word	0x200002ce
 8005aac:	200002cd 	.word	0x200002cd
 8005ab0:	200002e5 	.word	0x200002e5
 8005ab4:	200002e6 	.word	0x200002e6
 8005ab8:	200002e8 	.word	0x200002e8
 8005abc:	200002e0 	.word	0x200002e0
 8005ac0:	200002c3 	.word	0x200002c3
 8005ac4:	200002e7 	.word	0x200002e7
 8005ac8:	200002c2 	.word	0x200002c2
 8005acc:	20000302 	.word	0x20000302
 8005ad0:	20000303 	.word	0x20000303
 8005ad4:	40010c00 	.word	0x40010c00
 8005ad8:	20000304 	.word	0x20000304
 8005adc:	200002ef 	.word	0x200002ef
 8005ae0:	200002ec 	.word	0x200002ec
 8005ae4:	40011000 	.word	0x40011000
 8005ae8:	200002b3 	.word	0x200002b3
 8005aec:	200002ea 	.word	0x200002ea
 8005af0:	200002eb 	.word	0x200002eb
 8005af4:	200002be 	.word	0x200002be
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005af8:	2200      	movs	r2, #0
 8005afa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005afe:	4860      	ldr	r0, [pc, #384]	; (8005c80 <checkAktifCalisma+0x368>)
 8005b00:	f003 f94b 	bl	8008d9a <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8005b04:	4b5f      	ldr	r3, [pc, #380]	; (8005c84 <checkAktifCalisma+0x36c>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d013      	beq.n	8005b34 <checkAktifCalisma+0x21c>
 8005b0c:	4b5e      	ldr	r3, [pc, #376]	; (8005c88 <checkAktifCalisma+0x370>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d007      	beq.n	8005b24 <checkAktifCalisma+0x20c>
 8005b14:	4b5c      	ldr	r3, [pc, #368]	; (8005c88 <checkAktifCalisma+0x370>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	2b02      	cmp	r3, #2
 8005b1a:	d003      	beq.n	8005b24 <checkAktifCalisma+0x20c>
 8005b1c:	4b5b      	ldr	r3, [pc, #364]	; (8005c8c <checkAktifCalisma+0x374>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d107      	bne.n	8005b34 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005b24:	2201      	movs	r2, #1
 8005b26:	2104      	movs	r1, #4
 8005b28:	4855      	ldr	r0, [pc, #340]	; (8005c80 <checkAktifCalisma+0x368>)
 8005b2a:	f003 f936 	bl	8008d9a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8005b2e:	4b58      	ldr	r3, [pc, #352]	; (8005c90 <checkAktifCalisma+0x378>)
 8005b30:	2201      	movs	r2, #1
 8005b32:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8005b34:	4b56      	ldr	r3, [pc, #344]	; (8005c90 <checkAktifCalisma+0x378>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d02f      	beq.n	8005b9c <checkAktifCalisma+0x284>
 8005b3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b40:	484f      	ldr	r0, [pc, #316]	; (8005c80 <checkAktifCalisma+0x368>)
 8005b42:	f003 f913 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d106      	bne.n	8005b5a <checkAktifCalisma+0x242>
 8005b4c:	4b51      	ldr	r3, [pc, #324]	; (8005c94 <checkAktifCalisma+0x37c>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	f083 0301 	eor.w	r3, r3, #1
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d106      	bne.n	8005b68 <checkAktifCalisma+0x250>
 8005b5a:	2102      	movs	r1, #2
 8005b5c:	484e      	ldr	r0, [pc, #312]	; (8005c98 <checkAktifCalisma+0x380>)
 8005b5e:	f003 f905 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d119      	bne.n	8005b9c <checkAktifCalisma+0x284>
 8005b68:	4b4c      	ldr	r3, [pc, #304]	; (8005c9c <checkAktifCalisma+0x384>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d015      	beq.n	8005b9c <checkAktifCalisma+0x284>
 8005b70:	4b4b      	ldr	r3, [pc, #300]	; (8005ca0 <checkAktifCalisma+0x388>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d011      	beq.n	8005b9c <checkAktifCalisma+0x284>
 8005b78:	4b4a      	ldr	r3, [pc, #296]	; (8005ca4 <checkAktifCalisma+0x38c>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00d      	beq.n	8005b9c <checkAktifCalisma+0x284>
 8005b80:	4b49      	ldr	r3, [pc, #292]	; (8005ca8 <checkAktifCalisma+0x390>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	f083 0301 	eor.w	r3, r3, #1
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d006      	beq.n	8005b9c <checkAktifCalisma+0x284>
			timer2=millis;
 8005b8e:	4b47      	ldr	r3, [pc, #284]	; (8005cac <checkAktifCalisma+0x394>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a47      	ldr	r2, [pc, #284]	; (8005cb0 <checkAktifCalisma+0x398>)
 8005b94:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8005b96:	4b44      	ldr	r3, [pc, #272]	; (8005ca8 <checkAktifCalisma+0x390>)
 8005b98:	2201      	movs	r2, #1
 8005b9a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005b9c:	4b43      	ldr	r3, [pc, #268]	; (8005cac <checkAktifCalisma+0x394>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	4b43      	ldr	r3, [pc, #268]	; (8005cb0 <checkAktifCalisma+0x398>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	4a43      	ldr	r2, [pc, #268]	; (8005cb4 <checkAktifCalisma+0x39c>)
 8005ba8:	7812      	ldrb	r2, [r2, #0]
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d303      	bcc.n	8005bb6 <checkAktifCalisma+0x29e>
 8005bae:	4b3e      	ldr	r3, [pc, #248]	; (8005ca8 <checkAktifCalisma+0x390>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d111      	bne.n	8005bda <checkAktifCalisma+0x2c2>
 8005bb6:	4b39      	ldr	r3, [pc, #228]	; (8005c9c <checkAktifCalisma+0x384>)
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	f083 0301 	eor.w	r3, r3, #1
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10a      	bne.n	8005bda <checkAktifCalisma+0x2c2>
 8005bc4:	4b36      	ldr	r3, [pc, #216]	; (8005ca0 <checkAktifCalisma+0x388>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	f083 0301 	eor.w	r3, r3, #1
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d103      	bne.n	8005bda <checkAktifCalisma+0x2c2>
 8005bd2:	4b34      	ldr	r3, [pc, #208]	; (8005ca4 <checkAktifCalisma+0x38c>)
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10a      	bne.n	8005bf0 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2104      	movs	r1, #4
 8005bde:	4828      	ldr	r0, [pc, #160]	; (8005c80 <checkAktifCalisma+0x368>)
 8005be0:	f003 f8db 	bl	8008d9a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8005be4:	4b2a      	ldr	r3, [pc, #168]	; (8005c90 <checkAktifCalisma+0x378>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8005bea:	4b2f      	ldr	r3, [pc, #188]	; (8005ca8 <checkAktifCalisma+0x390>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8005bf0:	4b31      	ldr	r3, [pc, #196]	; (8005cb8 <checkAktifCalisma+0x3a0>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d102      	bne.n	8005bfe <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8005bf8:	4b30      	ldr	r3, [pc, #192]	; (8005cbc <checkAktifCalisma+0x3a4>)
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8005bfe:	4b2e      	ldr	r3, [pc, #184]	; (8005cb8 <checkAktifCalisma+0x3a0>)
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d116      	bne.n	8005c34 <checkAktifCalisma+0x31c>
 8005c06:	4b2e      	ldr	r3, [pc, #184]	; (8005cc0 <checkAktifCalisma+0x3a8>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d112      	bne.n	8005c34 <checkAktifCalisma+0x31c>
 8005c0e:	2101      	movs	r1, #1
 8005c10:	4821      	ldr	r0, [pc, #132]	; (8005c98 <checkAktifCalisma+0x380>)
 8005c12:	f003 f8ab 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10b      	bne.n	8005c34 <checkAktifCalisma+0x31c>
 8005c1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c20:	4817      	ldr	r0, [pc, #92]	; (8005c80 <checkAktifCalisma+0x368>)
 8005c22:	f003 f8a3 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d103      	bne.n	8005c34 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8005c2c:	4b23      	ldr	r3, [pc, #140]	; (8005cbc <checkAktifCalisma+0x3a4>)
 8005c2e:	2201      	movs	r2, #1
 8005c30:	701a      	strb	r2, [r3, #0]
 8005c32:	e011      	b.n	8005c58 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005c34:	4b20      	ldr	r3, [pc, #128]	; (8005cb8 <checkAktifCalisma+0x3a0>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d10d      	bne.n	8005c58 <checkAktifCalisma+0x340>
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	4816      	ldr	r0, [pc, #88]	; (8005c98 <checkAktifCalisma+0x380>)
 8005c40:	f003 f894 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d106      	bne.n	8005c58 <checkAktifCalisma+0x340>
 8005c4a:	4b1d      	ldr	r3, [pc, #116]	; (8005cc0 <checkAktifCalisma+0x3a8>)
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d102      	bne.n	8005c58 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8005c52:	4b1a      	ldr	r3, [pc, #104]	; (8005cbc <checkAktifCalisma+0x3a4>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8005c58:	4b17      	ldr	r3, [pc, #92]	; (8005cb8 <checkAktifCalisma+0x3a0>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d134      	bne.n	8005cca <checkAktifCalisma+0x3b2>
 8005c60:	4b17      	ldr	r3, [pc, #92]	; (8005cc0 <checkAktifCalisma+0x3a8>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d130      	bne.n	8005cca <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005c68:	2101      	movs	r1, #1
 8005c6a:	480b      	ldr	r0, [pc, #44]	; (8005c98 <checkAktifCalisma+0x380>)
 8005c6c:	f003 f87e 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d126      	bne.n	8005cc4 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8005c76:	4b11      	ldr	r3, [pc, #68]	; (8005cbc <checkAktifCalisma+0x3a4>)
 8005c78:	2201      	movs	r2, #1
 8005c7a:	701a      	strb	r2, [r3, #0]
 8005c7c:	e025      	b.n	8005cca <checkAktifCalisma+0x3b2>
 8005c7e:	bf00      	nop
 8005c80:	40010c00 	.word	0x40010c00
 8005c84:	200002e5 	.word	0x200002e5
 8005c88:	200002bf 	.word	0x200002bf
 8005c8c:	200002c3 	.word	0x200002c3
 8005c90:	200002e9 	.word	0x200002e9
 8005c94:	200002ec 	.word	0x200002ec
 8005c98:	40011000 	.word	0x40011000
 8005c9c:	20000302 	.word	0x20000302
 8005ca0:	20000303 	.word	0x20000303
 8005ca4:	200002b3 	.word	0x200002b3
 8005ca8:	200002e1 	.word	0x200002e1
 8005cac:	20000258 	.word	0x20000258
 8005cb0:	20000264 	.word	0x20000264
 8005cb4:	200002c4 	.word	0x200002c4
 8005cb8:	200002b4 	.word	0x200002b4
 8005cbc:	20000307 	.word	0x20000307
 8005cc0:	200002b1 	.word	0x200002b1
			} else {
				cerceveVar=0;
 8005cc4:	4b7f      	ldr	r3, [pc, #508]	; (8005ec4 <checkAktifCalisma+0x5ac>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005cca:	4b7f      	ldr	r3, [pc, #508]	; (8005ec8 <checkAktifCalisma+0x5b0>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d17c      	bne.n	8005dcc <checkAktifCalisma+0x4b4>
 8005cd2:	4b7e      	ldr	r3, [pc, #504]	; (8005ecc <checkAktifCalisma+0x5b4>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d078      	beq.n	8005dcc <checkAktifCalisma+0x4b4>
 8005cda:	4b7d      	ldr	r3, [pc, #500]	; (8005ed0 <checkAktifCalisma+0x5b8>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d074      	beq.n	8005dcc <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8005ce2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ce6:	487b      	ldr	r0, [pc, #492]	; (8005ed4 <checkAktifCalisma+0x5bc>)
 8005ce8:	f003 f840 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005cec:	4603      	mov	r3, r0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <checkAktifCalisma+0x3e2>
 8005cf2:	4b79      	ldr	r3, [pc, #484]	; (8005ed8 <checkAktifCalisma+0x5c0>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d068      	beq.n	8005dcc <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005cfa:	4b72      	ldr	r3, [pc, #456]	; (8005ec4 <checkAktifCalisma+0x5ac>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d064      	beq.n	8005dcc <checkAktifCalisma+0x4b4>
 8005d02:	4b76      	ldr	r3, [pc, #472]	; (8005edc <checkAktifCalisma+0x5c4>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	f083 0301 	eor.w	r3, r3, #1
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d05d      	beq.n	8005dcc <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005d10:	2104      	movs	r1, #4
 8005d12:	4873      	ldr	r0, [pc, #460]	; (8005ee0 <checkAktifCalisma+0x5c8>)
 8005d14:	f003 f82a 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <checkAktifCalisma+0x40e>
 8005d1e:	4b71      	ldr	r3, [pc, #452]	; (8005ee4 <checkAktifCalisma+0x5cc>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d152      	bne.n	8005dcc <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005d26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005d2a:	486a      	ldr	r0, [pc, #424]	; (8005ed4 <checkAktifCalisma+0x5bc>)
 8005d2c:	f003 f81e 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d10e      	bne.n	8005d54 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005d36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005d3a:	4866      	ldr	r0, [pc, #408]	; (8005ed4 <checkAktifCalisma+0x5bc>)
 8005d3c:	f003 f816 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d106      	bne.n	8005d54 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005d46:	2140      	movs	r1, #64	; 0x40
 8005d48:	4865      	ldr	r0, [pc, #404]	; (8005ee0 <checkAktifCalisma+0x5c8>)
 8005d4a:	f003 f80f 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d003      	beq.n	8005d5c <checkAktifCalisma+0x444>
 8005d54:	4b64      	ldr	r3, [pc, #400]	; (8005ee8 <checkAktifCalisma+0x5d0>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d037      	beq.n	8005dcc <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005d5c:	4b63      	ldr	r3, [pc, #396]	; (8005eec <checkAktifCalisma+0x5d4>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	f083 0301 	eor.w	r3, r3, #1
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d030      	beq.n	8005dcc <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8005d6a:	4b61      	ldr	r3, [pc, #388]	; (8005ef0 <checkAktifCalisma+0x5d8>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	f083 0301 	eor.w	r3, r3, #1
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d029      	beq.n	8005dcc <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8005d78:	4b5e      	ldr	r3, [pc, #376]	; (8005ef4 <checkAktifCalisma+0x5dc>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	f083 0301 	eor.w	r3, r3, #1
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d022      	beq.n	8005dcc <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8005d86:	4b5c      	ldr	r3, [pc, #368]	; (8005ef8 <checkAktifCalisma+0x5e0>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	f083 0301 	eor.w	r3, r3, #1
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01b      	beq.n	8005dcc <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005d94:	4b59      	ldr	r3, [pc, #356]	; (8005efc <checkAktifCalisma+0x5e4>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	f083 0301 	eor.w	r3, r3, #1
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d014      	beq.n	8005dcc <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8005da2:	4b57      	ldr	r3, [pc, #348]	; (8005f00 <checkAktifCalisma+0x5e8>)
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	f083 0301 	eor.w	r3, r3, #1
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00d      	beq.n	8005dcc <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005db0:	2201      	movs	r2, #1
 8005db2:	2102      	movs	r1, #2
 8005db4:	4847      	ldr	r0, [pc, #284]	; (8005ed4 <checkAktifCalisma+0x5bc>)
 8005db6:	f002 fff0 	bl	8008d9a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8005dba:	4b4b      	ldr	r3, [pc, #300]	; (8005ee8 <checkAktifCalisma+0x5d0>)
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8005dc0:	4b50      	ldr	r3, [pc, #320]	; (8005f04 <checkAktifCalisma+0x5ec>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8005dc6:	4b50      	ldr	r3, [pc, #320]	; (8005f08 <checkAktifCalisma+0x5f0>)
 8005dc8:	2201      	movs	r2, #1
 8005dca:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005dcc:	4b46      	ldr	r3, [pc, #280]	; (8005ee8 <checkAktifCalisma+0x5d0>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d033      	beq.n	8005e3c <checkAktifCalisma+0x524>
 8005dd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005dd8:	483e      	ldr	r0, [pc, #248]	; (8005ed4 <checkAktifCalisma+0x5bc>)
 8005dda:	f002 ffc7 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d106      	bne.n	8005df2 <checkAktifCalisma+0x4da>
 8005de4:	4b3c      	ldr	r3, [pc, #240]	; (8005ed8 <checkAktifCalisma+0x5c0>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	f083 0301 	eor.w	r3, r3, #1
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10a      	bne.n	8005e08 <checkAktifCalisma+0x4f0>
 8005df2:	2104      	movs	r1, #4
 8005df4:	483a      	ldr	r0, [pc, #232]	; (8005ee0 <checkAktifCalisma+0x5c8>)
 8005df6:	f002 ffb9 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d11d      	bne.n	8005e3c <checkAktifCalisma+0x524>
 8005e00:	4b38      	ldr	r3, [pc, #224]	; (8005ee4 <checkAktifCalisma+0x5cc>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d019      	beq.n	8005e3c <checkAktifCalisma+0x524>
 8005e08:	4b30      	ldr	r3, [pc, #192]	; (8005ecc <checkAktifCalisma+0x5b4>)
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d015      	beq.n	8005e3c <checkAktifCalisma+0x524>
 8005e10:	4b2f      	ldr	r3, [pc, #188]	; (8005ed0 <checkAktifCalisma+0x5b8>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d011      	beq.n	8005e3c <checkAktifCalisma+0x524>
 8005e18:	4b2a      	ldr	r3, [pc, #168]	; (8005ec4 <checkAktifCalisma+0x5ac>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00d      	beq.n	8005e3c <checkAktifCalisma+0x524>
 8005e20:	4b3a      	ldr	r3, [pc, #232]	; (8005f0c <checkAktifCalisma+0x5f4>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	f083 0301 	eor.w	r3, r3, #1
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d006      	beq.n	8005e3c <checkAktifCalisma+0x524>
			timer2=millis;
 8005e2e:	4b38      	ldr	r3, [pc, #224]	; (8005f10 <checkAktifCalisma+0x5f8>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a38      	ldr	r2, [pc, #224]	; (8005f14 <checkAktifCalisma+0x5fc>)
 8005e34:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8005e36:	4b35      	ldr	r3, [pc, #212]	; (8005f0c <checkAktifCalisma+0x5f4>)
 8005e38:	2201      	movs	r2, #1
 8005e3a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005e3c:	4b34      	ldr	r3, [pc, #208]	; (8005f10 <checkAktifCalisma+0x5f8>)
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	4b34      	ldr	r3, [pc, #208]	; (8005f14 <checkAktifCalisma+0x5fc>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	4a34      	ldr	r2, [pc, #208]	; (8005f18 <checkAktifCalisma+0x600>)
 8005e48:	7812      	ldrb	r2, [r2, #0]
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d303      	bcc.n	8005e56 <checkAktifCalisma+0x53e>
 8005e4e:	4b2f      	ldr	r3, [pc, #188]	; (8005f0c <checkAktifCalisma+0x5f4>)
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d114      	bne.n	8005e80 <checkAktifCalisma+0x568>
 8005e56:	4b1d      	ldr	r3, [pc, #116]	; (8005ecc <checkAktifCalisma+0x5b4>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	f083 0301 	eor.w	r3, r3, #1
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10d      	bne.n	8005e80 <checkAktifCalisma+0x568>
 8005e64:	4b1a      	ldr	r3, [pc, #104]	; (8005ed0 <checkAktifCalisma+0x5b8>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	f083 0301 	eor.w	r3, r3, #1
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <checkAktifCalisma+0x568>
 8005e72:	4b14      	ldr	r3, [pc, #80]	; (8005ec4 <checkAktifCalisma+0x5ac>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	f083 0301 	eor.w	r3, r3, #1
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00a      	beq.n	8005e96 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005e80:	2200      	movs	r2, #0
 8005e82:	2102      	movs	r1, #2
 8005e84:	4813      	ldr	r0, [pc, #76]	; (8005ed4 <checkAktifCalisma+0x5bc>)
 8005e86:	f002 ff88 	bl	8008d9a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8005e8a:	4b17      	ldr	r3, [pc, #92]	; (8005ee8 <checkAktifCalisma+0x5d0>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005e90:	4b1e      	ldr	r3, [pc, #120]	; (8005f0c <checkAktifCalisma+0x5f4>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005e96:	4b14      	ldr	r3, [pc, #80]	; (8005ee8 <checkAktifCalisma+0x5d0>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d040      	beq.n	8005f20 <checkAktifCalisma+0x608>
 8005e9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005ea2:	480f      	ldr	r0, [pc, #60]	; (8005ee0 <checkAktifCalisma+0x5c8>)
 8005ea4:	f002 ff62 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d138      	bne.n	8005f20 <checkAktifCalisma+0x608>
 8005eae:	4b1b      	ldr	r3, [pc, #108]	; (8005f1c <checkAktifCalisma+0x604>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d034      	beq.n	8005f20 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	2101      	movs	r1, #1
 8005eba:	4806      	ldr	r0, [pc, #24]	; (8005ed4 <checkAktifCalisma+0x5bc>)
 8005ebc:	f002 ff6d 	bl	8008d9a <HAL_GPIO_WritePin>
 8005ec0:	e033      	b.n	8005f2a <checkAktifCalisma+0x612>
 8005ec2:	bf00      	nop
 8005ec4:	20000307 	.word	0x20000307
 8005ec8:	200002cd 	.word	0x200002cd
 8005ecc:	20000302 	.word	0x20000302
 8005ed0:	20000303 	.word	0x20000303
 8005ed4:	40010c00 	.word	0x40010c00
 8005ed8:	200002ed 	.word	0x200002ed
 8005edc:	20000301 	.word	0x20000301
 8005ee0:	40011000 	.word	0x40011000
 8005ee4:	200002b6 	.word	0x200002b6
 8005ee8:	200002e8 	.word	0x200002e8
 8005eec:	200002e5 	.word	0x200002e5
 8005ef0:	200002e9 	.word	0x200002e9
 8005ef4:	200002e6 	.word	0x200002e6
 8005ef8:	200002e7 	.word	0x200002e7
 8005efc:	200002ea 	.word	0x200002ea
 8005f00:	200002eb 	.word	0x200002eb
 8005f04:	200002f0 	.word	0x200002f0
 8005f08:	20000311 	.word	0x20000311
 8005f0c:	200002e0 	.word	0x200002e0
 8005f10:	20000258 	.word	0x20000258
 8005f14:	20000264 	.word	0x20000264
 8005f18:	200002c5 	.word	0x200002c5
 8005f1c:	200002b5 	.word	0x200002b5
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005f20:	2200      	movs	r2, #0
 8005f22:	2101      	movs	r1, #1
 8005f24:	4836      	ldr	r0, [pc, #216]	; (8006000 <checkAktifCalisma+0x6e8>)
 8005f26:	f002 ff38 	bl	8008d9a <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8005f2a:	4b36      	ldr	r3, [pc, #216]	; (8006004 <checkAktifCalisma+0x6ec>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f040 8080 	bne.w	8006034 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005f34:	4b34      	ldr	r3, [pc, #208]	; (8006008 <checkAktifCalisma+0x6f0>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d003      	beq.n	8005f44 <checkAktifCalisma+0x62c>
 8005f3c:	4b32      	ldr	r3, [pc, #200]	; (8006008 <checkAktifCalisma+0x6f0>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d177      	bne.n	8006034 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8005f44:	4b31      	ldr	r3, [pc, #196]	; (800600c <checkAktifCalisma+0x6f4>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d073      	beq.n	8006034 <checkAktifCalisma+0x71c>
 8005f4c:	4b30      	ldr	r3, [pc, #192]	; (8006010 <checkAktifCalisma+0x6f8>)
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d06f      	beq.n	8006034 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005f54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f58:	4829      	ldr	r0, [pc, #164]	; (8006000 <checkAktifCalisma+0x6e8>)
 8005f5a:	f002 ff07 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d167      	bne.n	8006034 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005f64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f68:	482a      	ldr	r0, [pc, #168]	; (8006014 <checkAktifCalisma+0x6fc>)
 8005f6a:	f002 feff 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <checkAktifCalisma+0x664>
 8005f74:	4b28      	ldr	r3, [pc, #160]	; (8006018 <checkAktifCalisma+0x700>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d15b      	bne.n	8006034 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005f7c:	2140      	movs	r1, #64	; 0x40
 8005f7e:	4825      	ldr	r0, [pc, #148]	; (8006014 <checkAktifCalisma+0x6fc>)
 8005f80:	f002 fef4 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d10f      	bne.n	8005faa <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005f8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f8e:	481c      	ldr	r0, [pc, #112]	; (8006000 <checkAktifCalisma+0x6e8>)
 8005f90:	f002 feec 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d107      	bne.n	8005faa <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005f9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f9e:	4818      	ldr	r0, [pc, #96]	; (8006000 <checkAktifCalisma+0x6e8>)
 8005fa0:	f002 fee4 	bl	8008d6c <HAL_GPIO_ReadPin>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d003      	beq.n	8005fb2 <checkAktifCalisma+0x69a>
 8005faa:	4b1c      	ldr	r3, [pc, #112]	; (800601c <checkAktifCalisma+0x704>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d040      	beq.n	8006034 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8005fb2:	4b1b      	ldr	r3, [pc, #108]	; (8006020 <checkAktifCalisma+0x708>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	f083 0301 	eor.w	r3, r3, #1
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d039      	beq.n	8006034 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8005fc0:	4b18      	ldr	r3, [pc, #96]	; (8006024 <checkAktifCalisma+0x70c>)
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	f083 0301 	eor.w	r3, r3, #1
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d032      	beq.n	8006034 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8005fce:	4b16      	ldr	r3, [pc, #88]	; (8006028 <checkAktifCalisma+0x710>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	f083 0301 	eor.w	r3, r3, #1
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d02b      	beq.n	8006034 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005fdc:	4b13      	ldr	r3, [pc, #76]	; (800602c <checkAktifCalisma+0x714>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	f083 0301 	eor.w	r3, r3, #1
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d024      	beq.n	8006034 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8005fea:	4b11      	ldr	r3, [pc, #68]	; (8006030 <checkAktifCalisma+0x718>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	f083 0301 	eor.w	r3, r3, #1
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d01d      	beq.n	8006034 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005ff8:	4b08      	ldr	r3, [pc, #32]	; (800601c <checkAktifCalisma+0x704>)
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	701a      	strb	r2, [r3, #0]
 8005ffe:	e01c      	b.n	800603a <checkAktifCalisma+0x722>
 8006000:	40010c00 	.word	0x40010c00
 8006004:	200002cd 	.word	0x200002cd
 8006008:	200002bf 	.word	0x200002bf
 800600c:	20000302 	.word	0x20000302
 8006010:	20000303 	.word	0x20000303
 8006014:	40011000 	.word	0x40011000
 8006018:	200002c0 	.word	0x200002c0
 800601c:	200002e6 	.word	0x200002e6
 8006020:	200002e5 	.word	0x200002e5
 8006024:	200002e9 	.word	0x200002e9
 8006028:	200002e8 	.word	0x200002e8
 800602c:	200002e7 	.word	0x200002e7
 8006030:	200002eb 	.word	0x200002eb
		} else {
			devmotoryukaricalisiyor=0;
 8006034:	4b64      	ldr	r3, [pc, #400]	; (80061c8 <checkAktifCalisma+0x8b0>)
 8006036:	2200      	movs	r2, #0
 8006038:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800603a:	4b63      	ldr	r3, [pc, #396]	; (80061c8 <checkAktifCalisma+0x8b0>)
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d007      	beq.n	8006052 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006042:	2201      	movs	r2, #1
 8006044:	2120      	movs	r1, #32
 8006046:	4861      	ldr	r0, [pc, #388]	; (80061cc <checkAktifCalisma+0x8b4>)
 8006048:	f002 fea7 	bl	8008d9a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 800604c:	4b60      	ldr	r3, [pc, #384]	; (80061d0 <checkAktifCalisma+0x8b8>)
 800604e:	2201      	movs	r2, #1
 8006050:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8006052:	4b5f      	ldr	r3, [pc, #380]	; (80061d0 <checkAktifCalisma+0x8b8>)
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d025      	beq.n	80060a6 <checkAktifCalisma+0x78e>
 800605a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800605e:	485d      	ldr	r0, [pc, #372]	; (80061d4 <checkAktifCalisma+0x8bc>)
 8006060:	f002 fe84 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006064:	4603      	mov	r3, r0
 8006066:	2b01      	cmp	r3, #1
 8006068:	d007      	beq.n	800607a <checkAktifCalisma+0x762>
 800606a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800606e:	4857      	ldr	r0, [pc, #348]	; (80061cc <checkAktifCalisma+0x8b4>)
 8006070:	f002 fe7c 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006074:	4603      	mov	r3, r0
 8006076:	2b01      	cmp	r3, #1
 8006078:	d115      	bne.n	80060a6 <checkAktifCalisma+0x78e>
 800607a:	4b57      	ldr	r3, [pc, #348]	; (80061d8 <checkAktifCalisma+0x8c0>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d011      	beq.n	80060a6 <checkAktifCalisma+0x78e>
 8006082:	4b56      	ldr	r3, [pc, #344]	; (80061dc <checkAktifCalisma+0x8c4>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00d      	beq.n	80060a6 <checkAktifCalisma+0x78e>
 800608a:	4b55      	ldr	r3, [pc, #340]	; (80061e0 <checkAktifCalisma+0x8c8>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	f083 0301 	eor.w	r3, r3, #1
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	d006      	beq.n	80060a6 <checkAktifCalisma+0x78e>
			timer2=millis;
 8006098:	4b52      	ldr	r3, [pc, #328]	; (80061e4 <checkAktifCalisma+0x8cc>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a52      	ldr	r2, [pc, #328]	; (80061e8 <checkAktifCalisma+0x8d0>)
 800609e:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80060a0:	4b4f      	ldr	r3, [pc, #316]	; (80061e0 <checkAktifCalisma+0x8c8>)
 80060a2:	2201      	movs	r2, #1
 80060a4:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80060a6:	4b4f      	ldr	r3, [pc, #316]	; (80061e4 <checkAktifCalisma+0x8cc>)
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	4b4f      	ldr	r3, [pc, #316]	; (80061e8 <checkAktifCalisma+0x8d0>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	4a4e      	ldr	r2, [pc, #312]	; (80061ec <checkAktifCalisma+0x8d4>)
 80060b2:	7812      	ldrb	r2, [r2, #0]
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d303      	bcc.n	80060c0 <checkAktifCalisma+0x7a8>
 80060b8:	4b49      	ldr	r3, [pc, #292]	; (80061e0 <checkAktifCalisma+0x8c8>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10d      	bne.n	80060dc <checkAktifCalisma+0x7c4>
 80060c0:	4b45      	ldr	r3, [pc, #276]	; (80061d8 <checkAktifCalisma+0x8c0>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	f083 0301 	eor.w	r3, r3, #1
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d106      	bne.n	80060dc <checkAktifCalisma+0x7c4>
 80060ce:	4b43      	ldr	r3, [pc, #268]	; (80061dc <checkAktifCalisma+0x8c4>)
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	f083 0301 	eor.w	r3, r3, #1
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d00a      	beq.n	80060f2 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80060dc:	2200      	movs	r2, #0
 80060de:	2120      	movs	r1, #32
 80060e0:	483a      	ldr	r0, [pc, #232]	; (80061cc <checkAktifCalisma+0x8b4>)
 80060e2:	f002 fe5a 	bl	8008d9a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80060e6:	4b3a      	ldr	r3, [pc, #232]	; (80061d0 <checkAktifCalisma+0x8b8>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80060ec:	4b3c      	ldr	r3, [pc, #240]	; (80061e0 <checkAktifCalisma+0x8c8>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80060f2:	4b3f      	ldr	r3, [pc, #252]	; (80061f0 <checkAktifCalisma+0x8d8>)
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f040 8088 	bne.w	800620c <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80060fc:	4b3d      	ldr	r3, [pc, #244]	; (80061f4 <checkAktifCalisma+0x8dc>)
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d003      	beq.n	800610c <checkAktifCalisma+0x7f4>
 8006104:	4b3b      	ldr	r3, [pc, #236]	; (80061f4 <checkAktifCalisma+0x8dc>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b02      	cmp	r3, #2
 800610a:	d17f      	bne.n	800620c <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 800610c:	4b32      	ldr	r3, [pc, #200]	; (80061d8 <checkAktifCalisma+0x8c0>)
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d07b      	beq.n	800620c <checkAktifCalisma+0x8f4>
 8006114:	4b31      	ldr	r3, [pc, #196]	; (80061dc <checkAktifCalisma+0x8c4>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d077      	beq.n	800620c <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 800611c:	2140      	movs	r1, #64	; 0x40
 800611e:	482b      	ldr	r0, [pc, #172]	; (80061cc <checkAktifCalisma+0x8b4>)
 8006120:	f002 fe24 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d170      	bne.n	800620c <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800612a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800612e:	4827      	ldr	r0, [pc, #156]	; (80061cc <checkAktifCalisma+0x8b4>)
 8006130:	f002 fe1c 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d003      	beq.n	8006142 <checkAktifCalisma+0x82a>
 800613a:	4b2f      	ldr	r3, [pc, #188]	; (80061f8 <checkAktifCalisma+0x8e0>)
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d164      	bne.n	800620c <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006142:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006146:	4823      	ldr	r0, [pc, #140]	; (80061d4 <checkAktifCalisma+0x8bc>)
 8006148:	f002 fe10 	bl	8008d6c <HAL_GPIO_ReadPin>
 800614c:	4603      	mov	r3, r0
 800614e:	2b01      	cmp	r3, #1
 8006150:	d10f      	bne.n	8006172 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006152:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006156:	481f      	ldr	r0, [pc, #124]	; (80061d4 <checkAktifCalisma+0x8bc>)
 8006158:	f002 fe08 	bl	8008d6c <HAL_GPIO_ReadPin>
 800615c:	4603      	mov	r3, r0
 800615e:	2b01      	cmp	r3, #1
 8006160:	d107      	bne.n	8006172 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8006162:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006166:	481b      	ldr	r0, [pc, #108]	; (80061d4 <checkAktifCalisma+0x8bc>)
 8006168:	f002 fe00 	bl	8008d6c <HAL_GPIO_ReadPin>
 800616c:	4603      	mov	r3, r0
 800616e:	2b01      	cmp	r3, #1
 8006170:	d003      	beq.n	800617a <checkAktifCalisma+0x862>
 8006172:	4b22      	ldr	r3, [pc, #136]	; (80061fc <checkAktifCalisma+0x8e4>)
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d048      	beq.n	800620c <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800617a:	4b21      	ldr	r3, [pc, #132]	; (8006200 <checkAktifCalisma+0x8e8>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	f083 0301 	eor.w	r3, r3, #1
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b00      	cmp	r3, #0
 8006186:	d041      	beq.n	800620c <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8006188:	4b1e      	ldr	r3, [pc, #120]	; (8006204 <checkAktifCalisma+0x8ec>)
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	f083 0301 	eor.w	r3, r3, #1
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d03a      	beq.n	800620c <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8006196:	4b1c      	ldr	r3, [pc, #112]	; (8006208 <checkAktifCalisma+0x8f0>)
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	f083 0301 	eor.w	r3, r3, #1
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d033      	beq.n	800620c <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80061a4:	4b0a      	ldr	r3, [pc, #40]	; (80061d0 <checkAktifCalisma+0x8b8>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	f083 0301 	eor.w	r3, r3, #1
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d02c      	beq.n	800620c <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80061b2:	4b05      	ldr	r3, [pc, #20]	; (80061c8 <checkAktifCalisma+0x8b0>)
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	f083 0301 	eor.w	r3, r3, #1
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d025      	beq.n	800620c <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80061c0:	4b0e      	ldr	r3, [pc, #56]	; (80061fc <checkAktifCalisma+0x8e4>)
 80061c2:	2201      	movs	r2, #1
 80061c4:	701a      	strb	r2, [r3, #0]
 80061c6:	e024      	b.n	8006212 <checkAktifCalisma+0x8fa>
 80061c8:	200002e6 	.word	0x200002e6
 80061cc:	40011000 	.word	0x40011000
 80061d0:	200002ea 	.word	0x200002ea
 80061d4:	40010c00 	.word	0x40010c00
 80061d8:	20000302 	.word	0x20000302
 80061dc:	20000303 	.word	0x20000303
 80061e0:	200002e2 	.word	0x200002e2
 80061e4:	20000258 	.word	0x20000258
 80061e8:	20000264 	.word	0x20000264
 80061ec:	200002c6 	.word	0x200002c6
 80061f0:	200002cd 	.word	0x200002cd
 80061f4:	200002bf 	.word	0x200002bf
 80061f8:	200002c1 	.word	0x200002c1
 80061fc:	200002e7 	.word	0x200002e7
 8006200:	200002e5 	.word	0x200002e5
 8006204:	200002e9 	.word	0x200002e9
 8006208:	200002e8 	.word	0x200002e8
		} else {
			devmotorasagicalisiyor=0;
 800620c:	4b96      	ldr	r3, [pc, #600]	; (8006468 <checkAktifCalisma+0xb50>)
 800620e:	2200      	movs	r2, #0
 8006210:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8006212:	4b95      	ldr	r3, [pc, #596]	; (8006468 <checkAktifCalisma+0xb50>)
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d007      	beq.n	800622a <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800621a:	2201      	movs	r2, #1
 800621c:	2110      	movs	r1, #16
 800621e:	4893      	ldr	r0, [pc, #588]	; (800646c <checkAktifCalisma+0xb54>)
 8006220:	f002 fdbb 	bl	8008d9a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8006224:	4b92      	ldr	r3, [pc, #584]	; (8006470 <checkAktifCalisma+0xb58>)
 8006226:	2201      	movs	r2, #1
 8006228:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800622a:	4b91      	ldr	r3, [pc, #580]	; (8006470 <checkAktifCalisma+0xb58>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d024      	beq.n	800627c <checkAktifCalisma+0x964>
 8006232:	2140      	movs	r1, #64	; 0x40
 8006234:	488d      	ldr	r0, [pc, #564]	; (800646c <checkAktifCalisma+0xb54>)
 8006236:	f002 fd99 	bl	8008d6c <HAL_GPIO_ReadPin>
 800623a:	4603      	mov	r3, r0
 800623c:	2b01      	cmp	r3, #1
 800623e:	d007      	beq.n	8006250 <checkAktifCalisma+0x938>
 8006240:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006244:	4889      	ldr	r0, [pc, #548]	; (800646c <checkAktifCalisma+0xb54>)
 8006246:	f002 fd91 	bl	8008d6c <HAL_GPIO_ReadPin>
 800624a:	4603      	mov	r3, r0
 800624c:	2b01      	cmp	r3, #1
 800624e:	d115      	bne.n	800627c <checkAktifCalisma+0x964>
 8006250:	4b88      	ldr	r3, [pc, #544]	; (8006474 <checkAktifCalisma+0xb5c>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d011      	beq.n	800627c <checkAktifCalisma+0x964>
 8006258:	4b87      	ldr	r3, [pc, #540]	; (8006478 <checkAktifCalisma+0xb60>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00d      	beq.n	800627c <checkAktifCalisma+0x964>
 8006260:	4b86      	ldr	r3, [pc, #536]	; (800647c <checkAktifCalisma+0xb64>)
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	f083 0301 	eor.w	r3, r3, #1
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d006      	beq.n	800627c <checkAktifCalisma+0x964>
			timer2=millis;
 800626e:	4b84      	ldr	r3, [pc, #528]	; (8006480 <checkAktifCalisma+0xb68>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a84      	ldr	r2, [pc, #528]	; (8006484 <checkAktifCalisma+0xb6c>)
 8006274:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8006276:	4b81      	ldr	r3, [pc, #516]	; (800647c <checkAktifCalisma+0xb64>)
 8006278:	2201      	movs	r2, #1
 800627a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800627c:	4b80      	ldr	r3, [pc, #512]	; (8006480 <checkAktifCalisma+0xb68>)
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	4b80      	ldr	r3, [pc, #512]	; (8006484 <checkAktifCalisma+0xb6c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	4a80      	ldr	r2, [pc, #512]	; (8006488 <checkAktifCalisma+0xb70>)
 8006288:	7812      	ldrb	r2, [r2, #0]
 800628a:	4293      	cmp	r3, r2
 800628c:	d303      	bcc.n	8006296 <checkAktifCalisma+0x97e>
 800628e:	4b7b      	ldr	r3, [pc, #492]	; (800647c <checkAktifCalisma+0xb64>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10d      	bne.n	80062b2 <checkAktifCalisma+0x99a>
 8006296:	4b77      	ldr	r3, [pc, #476]	; (8006474 <checkAktifCalisma+0xb5c>)
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	f083 0301 	eor.w	r3, r3, #1
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d106      	bne.n	80062b2 <checkAktifCalisma+0x99a>
 80062a4:	4b74      	ldr	r3, [pc, #464]	; (8006478 <checkAktifCalisma+0xb60>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	f083 0301 	eor.w	r3, r3, #1
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d00a      	beq.n	80062c8 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80062b2:	2200      	movs	r2, #0
 80062b4:	2110      	movs	r1, #16
 80062b6:	486d      	ldr	r0, [pc, #436]	; (800646c <checkAktifCalisma+0xb54>)
 80062b8:	f002 fd6f 	bl	8008d9a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80062bc:	4b6c      	ldr	r3, [pc, #432]	; (8006470 <checkAktifCalisma+0xb58>)
 80062be:	2200      	movs	r2, #0
 80062c0:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80062c2:	4b6e      	ldr	r3, [pc, #440]	; (800647c <checkAktifCalisma+0xb64>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80062c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80062cc:	486f      	ldr	r0, [pc, #444]	; (800648c <checkAktifCalisma+0xb74>)
 80062ce:	f002 fd4d 	bl	8008d6c <HAL_GPIO_ReadPin>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d120      	bne.n	800631a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80062d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80062dc:	486b      	ldr	r0, [pc, #428]	; (800648c <checkAktifCalisma+0xb74>)
 80062de:	f002 fd45 	bl	8008d6c <HAL_GPIO_ReadPin>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d118      	bne.n	800631a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80062e8:	2104      	movs	r1, #4
 80062ea:	4868      	ldr	r0, [pc, #416]	; (800648c <checkAktifCalisma+0xb74>)
 80062ec:	f002 fd3e 	bl	8008d6c <HAL_GPIO_ReadPin>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d111      	bne.n	800631a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80062f6:	2102      	movs	r1, #2
 80062f8:	4864      	ldr	r0, [pc, #400]	; (800648c <checkAktifCalisma+0xb74>)
 80062fa:	f002 fd37 	bl	8008d6c <HAL_GPIO_ReadPin>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10a      	bne.n	800631a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006304:	2101      	movs	r1, #1
 8006306:	4861      	ldr	r0, [pc, #388]	; (800648c <checkAktifCalisma+0xb74>)
 8006308:	f002 fd30 	bl	8008d6c <HAL_GPIO_ReadPin>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d103      	bne.n	800631a <checkAktifCalisma+0xa02>
			makineStop=1;
 8006312:	4b5f      	ldr	r3, [pc, #380]	; (8006490 <checkAktifCalisma+0xb78>)
 8006314:	2201      	movs	r2, #1
 8006316:	701a      	strb	r2, [r3, #0]
 8006318:	e002      	b.n	8006320 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 800631a:	4b5d      	ldr	r3, [pc, #372]	; (8006490 <checkAktifCalisma+0xb78>)
 800631c:	2200      	movs	r2, #0
 800631e:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006320:	4b5c      	ldr	r3, [pc, #368]	; (8006494 <checkAktifCalisma+0xb7c>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d144      	bne.n	80063b2 <checkAktifCalisma+0xa9a>
 8006328:	4b5b      	ldr	r3, [pc, #364]	; (8006498 <checkAktifCalisma+0xb80>)
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d003      	beq.n	8006338 <checkAktifCalisma+0xa20>
 8006330:	4b59      	ldr	r3, [pc, #356]	; (8006498 <checkAktifCalisma+0xb80>)
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	2b03      	cmp	r3, #3
 8006336:	d13c      	bne.n	80063b2 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006338:	2180      	movs	r1, #128	; 0x80
 800633a:	484c      	ldr	r0, [pc, #304]	; (800646c <checkAktifCalisma+0xb54>)
 800633c:	f002 fd16 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d103      	bne.n	800634e <checkAktifCalisma+0xa36>
 8006346:	4b55      	ldr	r3, [pc, #340]	; (800649c <checkAktifCalisma+0xb84>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00b      	beq.n	8006366 <checkAktifCalisma+0xa4e>
 800634e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006352:	484e      	ldr	r0, [pc, #312]	; (800648c <checkAktifCalisma+0xb74>)
 8006354:	f002 fd0a 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d129      	bne.n	80063b2 <checkAktifCalisma+0xa9a>
 800635e:	4b4f      	ldr	r3, [pc, #316]	; (800649c <checkAktifCalisma+0xb84>)
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d125      	bne.n	80063b2 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006366:	2104      	movs	r1, #4
 8006368:	4840      	ldr	r0, [pc, #256]	; (800646c <checkAktifCalisma+0xb54>)
 800636a:	f002 fcff 	bl	8008d6c <HAL_GPIO_ReadPin>
 800636e:	4603      	mov	r3, r0
 8006370:	2b01      	cmp	r3, #1
 8006372:	d003      	beq.n	800637c <checkAktifCalisma+0xa64>
 8006374:	4b4a      	ldr	r3, [pc, #296]	; (80064a0 <checkAktifCalisma+0xb88>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d11a      	bne.n	80063b2 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800637c:	2102      	movs	r1, #2
 800637e:	483b      	ldr	r0, [pc, #236]	; (800646c <checkAktifCalisma+0xb54>)
 8006380:	f002 fcf4 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d113      	bne.n	80063b2 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 800638a:	4b46      	ldr	r3, [pc, #280]	; (80064a4 <checkAktifCalisma+0xb8c>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	f083 0301 	eor.w	r3, r3, #1
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00c      	beq.n	80063b2 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8006398:	4b3d      	ldr	r3, [pc, #244]	; (8006490 <checkAktifCalisma+0xb78>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d008      	beq.n	80063b2 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 80063a0:	4b41      	ldr	r3, [pc, #260]	; (80064a8 <checkAktifCalisma+0xb90>)
 80063a2:	2201      	movs	r2, #1
 80063a4:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80063a6:	4b36      	ldr	r3, [pc, #216]	; (8006480 <checkAktifCalisma+0xb68>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a40      	ldr	r2, [pc, #256]	; (80064ac <checkAktifCalisma+0xb94>)
 80063ac:	6013      	str	r3, [r2, #0]
			bekle();
 80063ae:	f7ff f87d 	bl	80054ac <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80063b2:	4b33      	ldr	r3, [pc, #204]	; (8006480 <checkAktifCalisma+0xb68>)
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	4b3d      	ldr	r3, [pc, #244]	; (80064ac <checkAktifCalisma+0xb94>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	4a3c      	ldr	r2, [pc, #240]	; (80064b0 <checkAktifCalisma+0xb98>)
 80063be:	7812      	ldrb	r2, [r2, #0]
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d211      	bcs.n	80063e8 <checkAktifCalisma+0xad0>
 80063c4:	2104      	movs	r1, #4
 80063c6:	4829      	ldr	r0, [pc, #164]	; (800646c <checkAktifCalisma+0xb54>)
 80063c8:	f002 fcd0 	bl	8008d6c <HAL_GPIO_ReadPin>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00a      	beq.n	80063e8 <checkAktifCalisma+0xad0>
 80063d2:	4b33      	ldr	r3, [pc, #204]	; (80064a0 <checkAktifCalisma+0xb88>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d006      	beq.n	80063e8 <checkAktifCalisma+0xad0>
 80063da:	4b2d      	ldr	r3, [pc, #180]	; (8006490 <checkAktifCalisma+0xb78>)
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	f083 0301 	eor.w	r3, r3, #1
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80063e8:	4b2f      	ldr	r3, [pc, #188]	; (80064a8 <checkAktifCalisma+0xb90>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80063ee:	4b29      	ldr	r3, [pc, #164]	; (8006494 <checkAktifCalisma+0xb7c>)
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d160      	bne.n	80064b8 <checkAktifCalisma+0xba0>
 80063f6:	4b28      	ldr	r3, [pc, #160]	; (8006498 <checkAktifCalisma+0xb80>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d003      	beq.n	8006406 <checkAktifCalisma+0xaee>
 80063fe:	4b26      	ldr	r3, [pc, #152]	; (8006498 <checkAktifCalisma+0xb80>)
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	2b03      	cmp	r3, #3
 8006404:	d158      	bne.n	80064b8 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006406:	2104      	movs	r1, #4
 8006408:	4818      	ldr	r0, [pc, #96]	; (800646c <checkAktifCalisma+0xb54>)
 800640a:	f002 fcaf 	bl	8008d6c <HAL_GPIO_ReadPin>
 800640e:	4603      	mov	r3, r0
 8006410:	2b01      	cmp	r3, #1
 8006412:	d003      	beq.n	800641c <checkAktifCalisma+0xb04>
 8006414:	4b22      	ldr	r3, [pc, #136]	; (80064a0 <checkAktifCalisma+0xb88>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d14d      	bne.n	80064b8 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800641c:	2102      	movs	r1, #2
 800641e:	4813      	ldr	r0, [pc, #76]	; (800646c <checkAktifCalisma+0xb54>)
 8006420:	f002 fca4 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d146      	bne.n	80064b8 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800642a:	2180      	movs	r1, #128	; 0x80
 800642c:	480f      	ldr	r0, [pc, #60]	; (800646c <checkAktifCalisma+0xb54>)
 800642e:	f002 fc9d 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006432:	4603      	mov	r3, r0
 8006434:	2b00      	cmp	r3, #0
 8006436:	d103      	bne.n	8006440 <checkAktifCalisma+0xb28>
 8006438:	4b18      	ldr	r3, [pc, #96]	; (800649c <checkAktifCalisma+0xb84>)
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00b      	beq.n	8006458 <checkAktifCalisma+0xb40>
 8006440:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006444:	4811      	ldr	r0, [pc, #68]	; (800648c <checkAktifCalisma+0xb74>)
 8006446:	f002 fc91 	bl	8008d6c <HAL_GPIO_ReadPin>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d133      	bne.n	80064b8 <checkAktifCalisma+0xba0>
 8006450:	4b12      	ldr	r3, [pc, #72]	; (800649c <checkAktifCalisma+0xb84>)
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d12f      	bne.n	80064b8 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8006458:	4b0d      	ldr	r3, [pc, #52]	; (8006490 <checkAktifCalisma+0xb78>)
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d02b      	beq.n	80064b8 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8006460:	4b14      	ldr	r3, [pc, #80]	; (80064b4 <checkAktifCalisma+0xb9c>)
 8006462:	2201      	movs	r2, #1
 8006464:	701a      	strb	r2, [r3, #0]
 8006466:	e02a      	b.n	80064be <checkAktifCalisma+0xba6>
 8006468:	200002e7 	.word	0x200002e7
 800646c:	40011000 	.word	0x40011000
 8006470:	200002eb 	.word	0x200002eb
 8006474:	20000302 	.word	0x20000302
 8006478:	20000303 	.word	0x20000303
 800647c:	200002e3 	.word	0x200002e3
 8006480:	20000258 	.word	0x20000258
 8006484:	20000264 	.word	0x20000264
 8006488:	200002c6 	.word	0x200002c6
 800648c:	40010c00 	.word	0x40010c00
 8006490:	200002f2 	.word	0x200002f2
 8006494:	200002b9 	.word	0x200002b9
 8006498:	200002b8 	.word	0x200002b8
 800649c:	200002bc 	.word	0x200002bc
 80064a0:	200002b6 	.word	0x200002b6
 80064a4:	200002df 	.word	0x200002df
 80064a8:	200002f3 	.word	0x200002f3
 80064ac:	2000025c 	.word	0x2000025c
 80064b0:	200002c9 	.word	0x200002c9
 80064b4:	200002f4 	.word	0x200002f4
		} else {
			kapi1butonkontrol=0;
 80064b8:	4b8b      	ldr	r3, [pc, #556]	; (80066e8 <checkAktifCalisma+0xdd0>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80064be:	4b8b      	ldr	r3, [pc, #556]	; (80066ec <checkAktifCalisma+0xdd4>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	d121      	bne.n	800650a <checkAktifCalisma+0xbf2>
 80064c6:	4b8a      	ldr	r3, [pc, #552]	; (80066f0 <checkAktifCalisma+0xdd8>)
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d003      	beq.n	80064d6 <checkAktifCalisma+0xbbe>
 80064ce:	4b88      	ldr	r3, [pc, #544]	; (80066f0 <checkAktifCalisma+0xdd8>)
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	2b03      	cmp	r3, #3
 80064d4:	d119      	bne.n	800650a <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80064d6:	2104      	movs	r1, #4
 80064d8:	4886      	ldr	r0, [pc, #536]	; (80066f4 <checkAktifCalisma+0xddc>)
 80064da:	f002 fc47 	bl	8008d6c <HAL_GPIO_ReadPin>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d003      	beq.n	80064ec <checkAktifCalisma+0xbd4>
 80064e4:	4b84      	ldr	r3, [pc, #528]	; (80066f8 <checkAktifCalisma+0xde0>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d10e      	bne.n	800650a <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80064ec:	2102      	movs	r1, #2
 80064ee:	4881      	ldr	r0, [pc, #516]	; (80066f4 <checkAktifCalisma+0xddc>)
 80064f0:	f002 fc3c 	bl	8008d6c <HAL_GPIO_ReadPin>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d107      	bne.n	800650a <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 80064fa:	4b80      	ldr	r3, [pc, #512]	; (80066fc <checkAktifCalisma+0xde4>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8006502:	4b7f      	ldr	r3, [pc, #508]	; (8006700 <checkAktifCalisma+0xde8>)
 8006504:	2201      	movs	r2, #1
 8006506:	701a      	strb	r2, [r3, #0]
 8006508:	e002      	b.n	8006510 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 800650a:	4b7d      	ldr	r3, [pc, #500]	; (8006700 <checkAktifCalisma+0xde8>)
 800650c:	2200      	movs	r2, #0
 800650e:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8006510:	4b75      	ldr	r3, [pc, #468]	; (80066e8 <checkAktifCalisma+0xdd0>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d107      	bne.n	8006528 <checkAktifCalisma+0xc10>
 8006518:	4b79      	ldr	r3, [pc, #484]	; (8006700 <checkAktifCalisma+0xde8>)
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d103      	bne.n	8006528 <checkAktifCalisma+0xc10>
 8006520:	4b78      	ldr	r3, [pc, #480]	; (8006704 <checkAktifCalisma+0xdec>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d005      	beq.n	8006534 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006528:	2201      	movs	r2, #1
 800652a:	2180      	movs	r1, #128	; 0x80
 800652c:	4876      	ldr	r0, [pc, #472]	; (8006708 <checkAktifCalisma+0xdf0>)
 800652e:	f002 fc34 	bl	8008d9a <HAL_GPIO_WritePin>
 8006532:	e004      	b.n	800653e <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006534:	2200      	movs	r2, #0
 8006536:	2180      	movs	r1, #128	; 0x80
 8006538:	4873      	ldr	r0, [pc, #460]	; (8006708 <checkAktifCalisma+0xdf0>)
 800653a:	f002 fc2e 	bl	8008d9a <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800653e:	4b73      	ldr	r3, [pc, #460]	; (800670c <checkAktifCalisma+0xdf4>)
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d141      	bne.n	80065ca <checkAktifCalisma+0xcb2>
 8006546:	4b6a      	ldr	r3, [pc, #424]	; (80066f0 <checkAktifCalisma+0xdd8>)
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d003      	beq.n	8006556 <checkAktifCalisma+0xc3e>
 800654e:	4b68      	ldr	r3, [pc, #416]	; (80066f0 <checkAktifCalisma+0xdd8>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	2b03      	cmp	r3, #3
 8006554:	d139      	bne.n	80065ca <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006556:	f44f 7180 	mov.w	r1, #256	; 0x100
 800655a:	4866      	ldr	r0, [pc, #408]	; (80066f4 <checkAktifCalisma+0xddc>)
 800655c:	f002 fc06 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d103      	bne.n	800656e <checkAktifCalisma+0xc56>
 8006566:	4b6a      	ldr	r3, [pc, #424]	; (8006710 <checkAktifCalisma+0xdf8>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00b      	beq.n	8006586 <checkAktifCalisma+0xc6e>
 800656e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006572:	4868      	ldr	r0, [pc, #416]	; (8006714 <checkAktifCalisma+0xdfc>)
 8006574:	f002 fbfa 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d125      	bne.n	80065ca <checkAktifCalisma+0xcb2>
 800657e:	4b64      	ldr	r3, [pc, #400]	; (8006710 <checkAktifCalisma+0xdf8>)
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	2b01      	cmp	r3, #1
 8006584:	d121      	bne.n	80065ca <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006586:	2102      	movs	r1, #2
 8006588:	485a      	ldr	r0, [pc, #360]	; (80066f4 <checkAktifCalisma+0xddc>)
 800658a:	f002 fbef 	bl	8008d6c <HAL_GPIO_ReadPin>
 800658e:	4603      	mov	r3, r0
 8006590:	2b01      	cmp	r3, #1
 8006592:	d11a      	bne.n	80065ca <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006594:	2104      	movs	r1, #4
 8006596:	4857      	ldr	r0, [pc, #348]	; (80066f4 <checkAktifCalisma+0xddc>)
 8006598:	f002 fbe8 	bl	8008d6c <HAL_GPIO_ReadPin>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d113      	bne.n	80065ca <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80065a2:	4b56      	ldr	r3, [pc, #344]	; (80066fc <checkAktifCalisma+0xde4>)
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00f      	beq.n	80065ca <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80065aa:	4b5b      	ldr	r3, [pc, #364]	; (8006718 <checkAktifCalisma+0xe00>)
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	f083 0301 	eor.w	r3, r3, #1
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d008      	beq.n	80065ca <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80065b8:	4b58      	ldr	r3, [pc, #352]	; (800671c <checkAktifCalisma+0xe04>)
 80065ba:	2201      	movs	r2, #1
 80065bc:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80065be:	4b58      	ldr	r3, [pc, #352]	; (8006720 <checkAktifCalisma+0xe08>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a58      	ldr	r2, [pc, #352]	; (8006724 <checkAktifCalisma+0xe0c>)
 80065c4:	6013      	str	r3, [r2, #0]
			bekle();
 80065c6:	f7fe ff71 	bl	80054ac <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80065ca:	4b55      	ldr	r3, [pc, #340]	; (8006720 <checkAktifCalisma+0xe08>)
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	4b55      	ldr	r3, [pc, #340]	; (8006724 <checkAktifCalisma+0xe0c>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	4a54      	ldr	r2, [pc, #336]	; (8006728 <checkAktifCalisma+0xe10>)
 80065d6:	7812      	ldrb	r2, [r2, #0]
 80065d8:	4293      	cmp	r3, r2
 80065da:	d20d      	bcs.n	80065f8 <checkAktifCalisma+0xce0>
 80065dc:	2102      	movs	r1, #2
 80065de:	4845      	ldr	r0, [pc, #276]	; (80066f4 <checkAktifCalisma+0xddc>)
 80065e0:	f002 fbc4 	bl	8008d6c <HAL_GPIO_ReadPin>
 80065e4:	4603      	mov	r3, r0
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d006      	beq.n	80065f8 <checkAktifCalisma+0xce0>
 80065ea:	4b44      	ldr	r3, [pc, #272]	; (80066fc <checkAktifCalisma+0xde4>)
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	f083 0301 	eor.w	r3, r3, #1
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d002      	beq.n	80065fe <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 80065f8:	4b48      	ldr	r3, [pc, #288]	; (800671c <checkAktifCalisma+0xe04>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80065fe:	4b43      	ldr	r3, [pc, #268]	; (800670c <checkAktifCalisma+0xdf4>)
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d135      	bne.n	8006672 <checkAktifCalisma+0xd5a>
 8006606:	4b3a      	ldr	r3, [pc, #232]	; (80066f0 <checkAktifCalisma+0xdd8>)
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	2b01      	cmp	r3, #1
 800660c:	d003      	beq.n	8006616 <checkAktifCalisma+0xcfe>
 800660e:	4b38      	ldr	r3, [pc, #224]	; (80066f0 <checkAktifCalisma+0xdd8>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b03      	cmp	r3, #3
 8006614:	d12d      	bne.n	8006672 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006616:	f44f 7180 	mov.w	r1, #256	; 0x100
 800661a:	4836      	ldr	r0, [pc, #216]	; (80066f4 <checkAktifCalisma+0xddc>)
 800661c:	f002 fba6 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d103      	bne.n	800662e <checkAktifCalisma+0xd16>
 8006626:	4b3a      	ldr	r3, [pc, #232]	; (8006710 <checkAktifCalisma+0xdf8>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00b      	beq.n	8006646 <checkAktifCalisma+0xd2e>
 800662e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006632:	4838      	ldr	r0, [pc, #224]	; (8006714 <checkAktifCalisma+0xdfc>)
 8006634:	f002 fb9a 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d119      	bne.n	8006672 <checkAktifCalisma+0xd5a>
 800663e:	4b34      	ldr	r3, [pc, #208]	; (8006710 <checkAktifCalisma+0xdf8>)
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d115      	bne.n	8006672 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006646:	2102      	movs	r1, #2
 8006648:	482a      	ldr	r0, [pc, #168]	; (80066f4 <checkAktifCalisma+0xddc>)
 800664a:	f002 fb8f 	bl	8008d6c <HAL_GPIO_ReadPin>
 800664e:	4603      	mov	r3, r0
 8006650:	2b01      	cmp	r3, #1
 8006652:	d10e      	bne.n	8006672 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006654:	2104      	movs	r1, #4
 8006656:	4827      	ldr	r0, [pc, #156]	; (80066f4 <checkAktifCalisma+0xddc>)
 8006658:	f002 fb88 	bl	8008d6c <HAL_GPIO_ReadPin>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d107      	bne.n	8006672 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8006662:	4b26      	ldr	r3, [pc, #152]	; (80066fc <checkAktifCalisma+0xde4>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 800666a:	4b30      	ldr	r3, [pc, #192]	; (800672c <checkAktifCalisma+0xe14>)
 800666c:	2201      	movs	r2, #1
 800666e:	701a      	strb	r2, [r3, #0]
 8006670:	e002      	b.n	8006678 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8006672:	4b2e      	ldr	r3, [pc, #184]	; (800672c <checkAktifCalisma+0xe14>)
 8006674:	2200      	movs	r2, #0
 8006676:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006678:	4b24      	ldr	r3, [pc, #144]	; (800670c <checkAktifCalisma+0xdf4>)
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	2b02      	cmp	r3, #2
 800667e:	d11d      	bne.n	80066bc <checkAktifCalisma+0xda4>
 8006680:	4b1b      	ldr	r3, [pc, #108]	; (80066f0 <checkAktifCalisma+0xdd8>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d003      	beq.n	8006690 <checkAktifCalisma+0xd78>
 8006688:	4b19      	ldr	r3, [pc, #100]	; (80066f0 <checkAktifCalisma+0xdd8>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b03      	cmp	r3, #3
 800668e:	d115      	bne.n	80066bc <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006690:	2102      	movs	r1, #2
 8006692:	4818      	ldr	r0, [pc, #96]	; (80066f4 <checkAktifCalisma+0xddc>)
 8006694:	f002 fb6a 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006698:	4603      	mov	r3, r0
 800669a:	2b01      	cmp	r3, #1
 800669c:	d10e      	bne.n	80066bc <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800669e:	2104      	movs	r1, #4
 80066a0:	4814      	ldr	r0, [pc, #80]	; (80066f4 <checkAktifCalisma+0xddc>)
 80066a2:	f002 fb63 	bl	8008d6c <HAL_GPIO_ReadPin>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d107      	bne.n	80066bc <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80066ac:	4b13      	ldr	r3, [pc, #76]	; (80066fc <checkAktifCalisma+0xde4>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d003      	beq.n	80066bc <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80066b4:	4b1e      	ldr	r3, [pc, #120]	; (8006730 <checkAktifCalisma+0xe18>)
 80066b6:	2201      	movs	r2, #1
 80066b8:	701a      	strb	r2, [r3, #0]
 80066ba:	e002      	b.n	80066c2 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80066bc:	4b1c      	ldr	r3, [pc, #112]	; (8006730 <checkAktifCalisma+0xe18>)
 80066be:	2200      	movs	r2, #0
 80066c0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80066c2:	4b1a      	ldr	r3, [pc, #104]	; (800672c <checkAktifCalisma+0xe14>)
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d107      	bne.n	80066da <checkAktifCalisma+0xdc2>
 80066ca:	4b19      	ldr	r3, [pc, #100]	; (8006730 <checkAktifCalisma+0xe18>)
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d103      	bne.n	80066da <checkAktifCalisma+0xdc2>
 80066d2:	4b12      	ldr	r3, [pc, #72]	; (800671c <checkAktifCalisma+0xe04>)
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d02c      	beq.n	8006734 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80066da:	2201      	movs	r2, #1
 80066dc:	2140      	movs	r1, #64	; 0x40
 80066de:	480a      	ldr	r0, [pc, #40]	; (8006708 <checkAktifCalisma+0xdf0>)
 80066e0:	f002 fb5b 	bl	8008d9a <HAL_GPIO_WritePin>
 80066e4:	e02b      	b.n	800673e <checkAktifCalisma+0xe26>
 80066e6:	bf00      	nop
 80066e8:	200002f4 	.word	0x200002f4
 80066ec:	200002b9 	.word	0x200002b9
 80066f0:	200002b8 	.word	0x200002b8
 80066f4:	40011000 	.word	0x40011000
 80066f8:	200002b6 	.word	0x200002b6
 80066fc:	200002f2 	.word	0x200002f2
 8006700:	200002f5 	.word	0x200002f5
 8006704:	200002f3 	.word	0x200002f3
 8006708:	40010800 	.word	0x40010800
 800670c:	200002ba 	.word	0x200002ba
 8006710:	200002bc 	.word	0x200002bc
 8006714:	40010c00 	.word	0x40010c00
 8006718:	200002df 	.word	0x200002df
 800671c:	200002f6 	.word	0x200002f6
 8006720:	20000258 	.word	0x20000258
 8006724:	2000025c 	.word	0x2000025c
 8006728:	200002ca 	.word	0x200002ca
 800672c:	200002f7 	.word	0x200002f7
 8006730:	200002f8 	.word	0x200002f8
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006734:	2200      	movs	r2, #0
 8006736:	2140      	movs	r1, #64	; 0x40
 8006738:	488d      	ldr	r0, [pc, #564]	; (8006970 <checkAktifCalisma+0x1058>)
 800673a:	f002 fb2e 	bl	8008d9a <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 800673e:	4b8d      	ldr	r3, [pc, #564]	; (8006974 <checkAktifCalisma+0x105c>)
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <checkAktifCalisma+0xe36>
 8006746:	4b8b      	ldr	r3, [pc, #556]	; (8006974 <checkAktifCalisma+0x105c>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b02      	cmp	r3, #2
 800674c:	d115      	bne.n	800677a <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800674e:	2104      	movs	r1, #4
 8006750:	4889      	ldr	r0, [pc, #548]	; (8006978 <checkAktifCalisma+0x1060>)
 8006752:	f002 fb0b 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006756:	4603      	mov	r3, r0
 8006758:	2b01      	cmp	r3, #1
 800675a:	d003      	beq.n	8006764 <checkAktifCalisma+0xe4c>
 800675c:	4b87      	ldr	r3, [pc, #540]	; (800697c <checkAktifCalisma+0x1064>)
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10a      	bne.n	800677a <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8006764:	2102      	movs	r1, #2
 8006766:	4884      	ldr	r0, [pc, #528]	; (8006978 <checkAktifCalisma+0x1060>)
 8006768:	f002 fb00 	bl	8008d6c <HAL_GPIO_ReadPin>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d103      	bne.n	800677a <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8006772:	4b83      	ldr	r3, [pc, #524]	; (8006980 <checkAktifCalisma+0x1068>)
 8006774:	2201      	movs	r2, #1
 8006776:	701a      	strb	r2, [r3, #0]
 8006778:	e002      	b.n	8006780 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 800677a:	4b81      	ldr	r3, [pc, #516]	; (8006980 <checkAktifCalisma+0x1068>)
 800677c:	2200      	movs	r2, #0
 800677e:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8006780:	4b7c      	ldr	r3, [pc, #496]	; (8006974 <checkAktifCalisma+0x105c>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d003      	beq.n	8006790 <checkAktifCalisma+0xe78>
 8006788:	4b7a      	ldr	r3, [pc, #488]	; (8006974 <checkAktifCalisma+0x105c>)
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	2b02      	cmp	r3, #2
 800678e:	d111      	bne.n	80067b4 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006790:	2102      	movs	r1, #2
 8006792:	4879      	ldr	r0, [pc, #484]	; (8006978 <checkAktifCalisma+0x1060>)
 8006794:	f002 faea 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006798:	4603      	mov	r3, r0
 800679a:	2b01      	cmp	r3, #1
 800679c:	d10a      	bne.n	80067b4 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 800679e:	2104      	movs	r1, #4
 80067a0:	4875      	ldr	r0, [pc, #468]	; (8006978 <checkAktifCalisma+0x1060>)
 80067a2:	f002 fae3 	bl	8008d6c <HAL_GPIO_ReadPin>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d103      	bne.n	80067b4 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 80067ac:	4b75      	ldr	r3, [pc, #468]	; (8006984 <checkAktifCalisma+0x106c>)
 80067ae:	2201      	movs	r2, #1
 80067b0:	701a      	strb	r2, [r3, #0]
 80067b2:	e002      	b.n	80067ba <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 80067b4:	4b73      	ldr	r3, [pc, #460]	; (8006984 <checkAktifCalisma+0x106c>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 80067ba:	4b71      	ldr	r3, [pc, #452]	; (8006980 <checkAktifCalisma+0x1068>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00f      	beq.n	80067e2 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 80067c2:	4b71      	ldr	r3, [pc, #452]	; (8006988 <checkAktifCalisma+0x1070>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d10b      	bne.n	80067e2 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80067ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067ce:	486f      	ldr	r0, [pc, #444]	; (800698c <checkAktifCalisma+0x1074>)
 80067d0:	f002 facc 	bl	8008d6c <HAL_GPIO_ReadPin>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d103      	bne.n	80067e2 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 80067da:	4b6d      	ldr	r3, [pc, #436]	; (8006990 <checkAktifCalisma+0x1078>)
 80067dc:	2201      	movs	r2, #1
 80067de:	701a      	strb	r2, [r3, #0]
 80067e0:	e002      	b.n	80067e8 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 80067e2:	4b6b      	ldr	r3, [pc, #428]	; (8006990 <checkAktifCalisma+0x1078>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 80067e8:	4b66      	ldr	r3, [pc, #408]	; (8006984 <checkAktifCalisma+0x106c>)
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00f      	beq.n	8006810 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 80067f0:	4b65      	ldr	r3, [pc, #404]	; (8006988 <checkAktifCalisma+0x1070>)
 80067f2:	781b      	ldrb	r3, [r3, #0]
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d10b      	bne.n	8006810 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80067f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80067fc:	4863      	ldr	r0, [pc, #396]	; (800698c <checkAktifCalisma+0x1074>)
 80067fe:	f002 fab5 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d103      	bne.n	8006810 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8006808:	4b62      	ldr	r3, [pc, #392]	; (8006994 <checkAktifCalisma+0x107c>)
 800680a:	2201      	movs	r2, #1
 800680c:	701a      	strb	r2, [r3, #0]
 800680e:	e002      	b.n	8006816 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8006810:	4b60      	ldr	r3, [pc, #384]	; (8006994 <checkAktifCalisma+0x107c>)
 8006812:	2200      	movs	r2, #0
 8006814:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006816:	4b60      	ldr	r3, [pc, #384]	; (8006998 <checkAktifCalisma+0x1080>)
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d137      	bne.n	800688e <checkAktifCalisma+0xf76>
 800681e:	4b5f      	ldr	r3, [pc, #380]	; (800699c <checkAktifCalisma+0x1084>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	2b02      	cmp	r3, #2
 8006824:	d003      	beq.n	800682e <checkAktifCalisma+0xf16>
 8006826:	4b5d      	ldr	r3, [pc, #372]	; (800699c <checkAktifCalisma+0x1084>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	2b03      	cmp	r3, #3
 800682c:	d12f      	bne.n	800688e <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800682e:	4b54      	ldr	r3, [pc, #336]	; (8006980 <checkAktifCalisma+0x1068>)
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d103      	bne.n	800683e <checkAktifCalisma+0xf26>
 8006836:	4b53      	ldr	r3, [pc, #332]	; (8006984 <checkAktifCalisma+0x106c>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d027      	beq.n	800688e <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 800683e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006842:	484d      	ldr	r0, [pc, #308]	; (8006978 <checkAktifCalisma+0x1060>)
 8006844:	f002 fa92 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d103      	bne.n	8006856 <checkAktifCalisma+0xf3e>
 800684e:	4b4e      	ldr	r3, [pc, #312]	; (8006988 <checkAktifCalisma+0x1070>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d007      	beq.n	8006866 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006856:	4b4e      	ldr	r3, [pc, #312]	; (8006990 <checkAktifCalisma+0x1078>)
 8006858:	781b      	ldrb	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d103      	bne.n	8006866 <checkAktifCalisma+0xf4e>
 800685e:	4b4d      	ldr	r3, [pc, #308]	; (8006994 <checkAktifCalisma+0x107c>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d013      	beq.n	800688e <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8006866:	4b4e      	ldr	r3, [pc, #312]	; (80069a0 <checkAktifCalisma+0x1088>)
 8006868:	781b      	ldrb	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00f      	beq.n	800688e <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 800686e:	4b4d      	ldr	r3, [pc, #308]	; (80069a4 <checkAktifCalisma+0x108c>)
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	f083 0301 	eor.w	r3, r3, #1
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b00      	cmp	r3, #0
 800687a:	d008      	beq.n	800688e <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 800687c:	4b4a      	ldr	r3, [pc, #296]	; (80069a8 <checkAktifCalisma+0x1090>)
 800687e:	2201      	movs	r2, #1
 8006880:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006882:	4b4a      	ldr	r3, [pc, #296]	; (80069ac <checkAktifCalisma+0x1094>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a4a      	ldr	r2, [pc, #296]	; (80069b0 <checkAktifCalisma+0x1098>)
 8006888:	6013      	str	r3, [r2, #0]
			bekle();
 800688a:	f7fe fe0f 	bl	80054ac <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 800688e:	4b47      	ldr	r3, [pc, #284]	; (80069ac <checkAktifCalisma+0x1094>)
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	4b47      	ldr	r3, [pc, #284]	; (80069b0 <checkAktifCalisma+0x1098>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	4a46      	ldr	r2, [pc, #280]	; (80069b4 <checkAktifCalisma+0x109c>)
 800689a:	7812      	ldrb	r2, [r2, #0]
 800689c:	4293      	cmp	r3, r2
 800689e:	d214      	bcs.n	80068ca <checkAktifCalisma+0xfb2>
 80068a0:	4b37      	ldr	r3, [pc, #220]	; (8006980 <checkAktifCalisma+0x1068>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	f083 0301 	eor.w	r3, r3, #1
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d006      	beq.n	80068bc <checkAktifCalisma+0xfa4>
 80068ae:	4b35      	ldr	r3, [pc, #212]	; (8006984 <checkAktifCalisma+0x106c>)
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	f083 0301 	eor.w	r3, r3, #1
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d106      	bne.n	80068ca <checkAktifCalisma+0xfb2>
 80068bc:	4b38      	ldr	r3, [pc, #224]	; (80069a0 <checkAktifCalisma+0x1088>)
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	f083 0301 	eor.w	r3, r3, #1
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d002      	beq.n	80068d0 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 80068ca:	4b37      	ldr	r3, [pc, #220]	; (80069a8 <checkAktifCalisma+0x1090>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80068d0:	4b31      	ldr	r3, [pc, #196]	; (8006998 <checkAktifCalisma+0x1080>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d12b      	bne.n	8006930 <checkAktifCalisma+0x1018>
 80068d8:	4b30      	ldr	r3, [pc, #192]	; (800699c <checkAktifCalisma+0x1084>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d003      	beq.n	80068e8 <checkAktifCalisma+0xfd0>
 80068e0:	4b2e      	ldr	r3, [pc, #184]	; (800699c <checkAktifCalisma+0x1084>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d123      	bne.n	8006930 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80068e8:	4b25      	ldr	r3, [pc, #148]	; (8006980 <checkAktifCalisma+0x1068>)
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d103      	bne.n	80068f8 <checkAktifCalisma+0xfe0>
 80068f0:	4b24      	ldr	r3, [pc, #144]	; (8006984 <checkAktifCalisma+0x106c>)
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d01b      	beq.n	8006930 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80068f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068fc:	481e      	ldr	r0, [pc, #120]	; (8006978 <checkAktifCalisma+0x1060>)
 80068fe:	f002 fa35 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d103      	bne.n	8006910 <checkAktifCalisma+0xff8>
 8006908:	4b1f      	ldr	r3, [pc, #124]	; (8006988 <checkAktifCalisma+0x1070>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d007      	beq.n	8006920 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006910:	4b1f      	ldr	r3, [pc, #124]	; (8006990 <checkAktifCalisma+0x1078>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d103      	bne.n	8006920 <checkAktifCalisma+0x1008>
 8006918:	4b1e      	ldr	r3, [pc, #120]	; (8006994 <checkAktifCalisma+0x107c>)
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d007      	beq.n	8006930 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8006920:	4b1f      	ldr	r3, [pc, #124]	; (80069a0 <checkAktifCalisma+0x1088>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8006928:	4b23      	ldr	r3, [pc, #140]	; (80069b8 <checkAktifCalisma+0x10a0>)
 800692a:	2201      	movs	r2, #1
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	e002      	b.n	8006936 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8006930:	4b21      	ldr	r3, [pc, #132]	; (80069b8 <checkAktifCalisma+0x10a0>)
 8006932:	2200      	movs	r2, #0
 8006934:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006936:	4b18      	ldr	r3, [pc, #96]	; (8006998 <checkAktifCalisma+0x1080>)
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	2b02      	cmp	r3, #2
 800693c:	d140      	bne.n	80069c0 <checkAktifCalisma+0x10a8>
 800693e:	4b17      	ldr	r3, [pc, #92]	; (800699c <checkAktifCalisma+0x1084>)
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	2b02      	cmp	r3, #2
 8006944:	d003      	beq.n	800694e <checkAktifCalisma+0x1036>
 8006946:	4b15      	ldr	r3, [pc, #84]	; (800699c <checkAktifCalisma+0x1084>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	2b03      	cmp	r3, #3
 800694c:	d138      	bne.n	80069c0 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800694e:	4b0c      	ldr	r3, [pc, #48]	; (8006980 <checkAktifCalisma+0x1068>)
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d103      	bne.n	800695e <checkAktifCalisma+0x1046>
 8006956:	4b0b      	ldr	r3, [pc, #44]	; (8006984 <checkAktifCalisma+0x106c>)
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d030      	beq.n	80069c0 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 800695e:	4b10      	ldr	r3, [pc, #64]	; (80069a0 <checkAktifCalisma+0x1088>)
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d02c      	beq.n	80069c0 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8006966:	4b15      	ldr	r3, [pc, #84]	; (80069bc <checkAktifCalisma+0x10a4>)
 8006968:	2201      	movs	r2, #1
 800696a:	701a      	strb	r2, [r3, #0]
 800696c:	e02b      	b.n	80069c6 <checkAktifCalisma+0x10ae>
 800696e:	bf00      	nop
 8006970:	40010800 	.word	0x40010800
 8006974:	200002bd 	.word	0x200002bd
 8006978:	40011000 	.word	0x40011000
 800697c:	200002b6 	.word	0x200002b6
 8006980:	200002fc 	.word	0x200002fc
 8006984:	200002fd 	.word	0x200002fd
 8006988:	200002bc 	.word	0x200002bc
 800698c:	40010c00 	.word	0x40010c00
 8006990:	2000030c 	.word	0x2000030c
 8006994:	2000030d 	.word	0x2000030d
 8006998:	200002bb 	.word	0x200002bb
 800699c:	200002b8 	.word	0x200002b8
 80069a0:	200002f2 	.word	0x200002f2
 80069a4:	200002df 	.word	0x200002df
 80069a8:	200002f9 	.word	0x200002f9
 80069ac:	20000258 	.word	0x20000258
 80069b0:	2000025c 	.word	0x2000025c
 80069b4:	200002cb 	.word	0x200002cb
 80069b8:	200002fa 	.word	0x200002fa
 80069bc:	200002fb 	.word	0x200002fb
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 80069c0:	4b89      	ldr	r3, [pc, #548]	; (8006be8 <checkAktifCalisma+0x12d0>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80069c6:	4b89      	ldr	r3, [pc, #548]	; (8006bec <checkAktifCalisma+0x12d4>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d107      	bne.n	80069de <checkAktifCalisma+0x10c6>
 80069ce:	4b88      	ldr	r3, [pc, #544]	; (8006bf0 <checkAktifCalisma+0x12d8>)
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d103      	bne.n	80069de <checkAktifCalisma+0x10c6>
 80069d6:	4b84      	ldr	r3, [pc, #528]	; (8006be8 <checkAktifCalisma+0x12d0>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d005      	beq.n	80069ea <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80069de:	2201      	movs	r2, #1
 80069e0:	2120      	movs	r1, #32
 80069e2:	4884      	ldr	r0, [pc, #528]	; (8006bf4 <checkAktifCalisma+0x12dc>)
 80069e4:	f002 f9d9 	bl	8008d9a <HAL_GPIO_WritePin>
 80069e8:	e004      	b.n	80069f4 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80069ea:	2200      	movs	r2, #0
 80069ec:	2120      	movs	r1, #32
 80069ee:	4881      	ldr	r0, [pc, #516]	; (8006bf4 <checkAktifCalisma+0x12dc>)
 80069f0:	f002 f9d3 	bl	8008d9a <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80069f4:	4b80      	ldr	r3, [pc, #512]	; (8006bf8 <checkAktifCalisma+0x12e0>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d00e      	beq.n	8006a1a <checkAktifCalisma+0x1102>
 80069fc:	2102      	movs	r1, #2
 80069fe:	487f      	ldr	r0, [pc, #508]	; (8006bfc <checkAktifCalisma+0x12e4>)
 8006a00:	f002 f9b4 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d107      	bne.n	8006a1a <checkAktifCalisma+0x1102>
 8006a0a:	4b7d      	ldr	r3, [pc, #500]	; (8006c00 <checkAktifCalisma+0x12e8>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d103      	bne.n	8006a1a <checkAktifCalisma+0x1102>
 8006a12:	4b7c      	ldr	r3, [pc, #496]	; (8006c04 <checkAktifCalisma+0x12ec>)
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d112      	bne.n	8006a40 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8006a1a:	4b7b      	ldr	r3, [pc, #492]	; (8006c08 <checkAktifCalisma+0x12f0>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d066      	beq.n	8006af0 <checkAktifCalisma+0x11d8>
 8006a22:	2104      	movs	r1, #4
 8006a24:	4875      	ldr	r0, [pc, #468]	; (8006bfc <checkAktifCalisma+0x12e4>)
 8006a26:	f002 f9a1 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d15f      	bne.n	8006af0 <checkAktifCalisma+0x11d8>
 8006a30:	4b73      	ldr	r3, [pc, #460]	; (8006c00 <checkAktifCalisma+0x12e8>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d05b      	beq.n	8006af0 <checkAktifCalisma+0x11d8>
 8006a38:	4b72      	ldr	r3, [pc, #456]	; (8006c04 <checkAktifCalisma+0x12ec>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d057      	beq.n	8006af0 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8006a40:	4b72      	ldr	r3, [pc, #456]	; (8006c0c <checkAktifCalisma+0x12f4>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	3301      	adds	r3, #1
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	4b70      	ldr	r3, [pc, #448]	; (8006c0c <checkAktifCalisma+0x12f4>)
 8006a4a:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8006a4c:	4b6f      	ldr	r3, [pc, #444]	; (8006c0c <checkAktifCalisma+0x12f4>)
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	2b09      	cmp	r3, #9
 8006a52:	d908      	bls.n	8006a66 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8006a54:	4b6d      	ldr	r3, [pc, #436]	; (8006c0c <checkAktifCalisma+0x12f4>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8006a5a:	4b6d      	ldr	r3, [pc, #436]	; (8006c10 <checkAktifCalisma+0x12f8>)
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	4b6b      	ldr	r3, [pc, #428]	; (8006c10 <checkAktifCalisma+0x12f8>)
 8006a64:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8006a66:	4b6a      	ldr	r3, [pc, #424]	; (8006c10 <checkAktifCalisma+0x12f8>)
 8006a68:	781b      	ldrb	r3, [r3, #0]
 8006a6a:	2b09      	cmp	r3, #9
 8006a6c:	d908      	bls.n	8006a80 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8006a6e:	4b68      	ldr	r3, [pc, #416]	; (8006c10 <checkAktifCalisma+0x12f8>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8006a74:	4b67      	ldr	r3, [pc, #412]	; (8006c14 <checkAktifCalisma+0x12fc>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	4b65      	ldr	r3, [pc, #404]	; (8006c14 <checkAktifCalisma+0x12fc>)
 8006a7e:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8006a80:	4b64      	ldr	r3, [pc, #400]	; (8006c14 <checkAktifCalisma+0x12fc>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b09      	cmp	r3, #9
 8006a86:	d908      	bls.n	8006a9a <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8006a88:	4b62      	ldr	r3, [pc, #392]	; (8006c14 <checkAktifCalisma+0x12fc>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8006a8e:	4b62      	ldr	r3, [pc, #392]	; (8006c18 <checkAktifCalisma+0x1300>)
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	3301      	adds	r3, #1
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	4b60      	ldr	r3, [pc, #384]	; (8006c18 <checkAktifCalisma+0x1300>)
 8006a98:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8006a9a:	4b5f      	ldr	r3, [pc, #380]	; (8006c18 <checkAktifCalisma+0x1300>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b09      	cmp	r3, #9
 8006aa0:	d908      	bls.n	8006ab4 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8006aa2:	4b5d      	ldr	r3, [pc, #372]	; (8006c18 <checkAktifCalisma+0x1300>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8006aa8:	4b5c      	ldr	r3, [pc, #368]	; (8006c1c <checkAktifCalisma+0x1304>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	3301      	adds	r3, #1
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	4b5a      	ldr	r3, [pc, #360]	; (8006c1c <checkAktifCalisma+0x1304>)
 8006ab2:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006ab4:	4b59      	ldr	r3, [pc, #356]	; (8006c1c <checkAktifCalisma+0x1304>)
 8006ab6:	781a      	ldrb	r2, [r3, #0]
 8006ab8:	4b59      	ldr	r3, [pc, #356]	; (8006c20 <checkAktifCalisma+0x1308>)
 8006aba:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8006abe:	4b56      	ldr	r3, [pc, #344]	; (8006c18 <checkAktifCalisma+0x1300>)
 8006ac0:	781a      	ldrb	r2, [r3, #0]
 8006ac2:	4b57      	ldr	r3, [pc, #348]	; (8006c20 <checkAktifCalisma+0x1308>)
 8006ac4:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006ac6:	4b53      	ldr	r3, [pc, #332]	; (8006c14 <checkAktifCalisma+0x12fc>)
 8006ac8:	781a      	ldrb	r2, [r3, #0]
 8006aca:	4b55      	ldr	r3, [pc, #340]	; (8006c20 <checkAktifCalisma+0x1308>)
 8006acc:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8006ace:	4b50      	ldr	r3, [pc, #320]	; (8006c10 <checkAktifCalisma+0x12f8>)
 8006ad0:	781a      	ldrb	r2, [r3, #0]
 8006ad2:	4b53      	ldr	r3, [pc, #332]	; (8006c20 <checkAktifCalisma+0x1308>)
 8006ad4:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006ad6:	4b4d      	ldr	r3, [pc, #308]	; (8006c0c <checkAktifCalisma+0x12f4>)
 8006ad8:	781a      	ldrb	r2, [r3, #0]
 8006ada:	4b51      	ldr	r3, [pc, #324]	; (8006c20 <checkAktifCalisma+0x1308>)
 8006adc:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8006ade:	4b51      	ldr	r3, [pc, #324]	; (8006c24 <checkAktifCalisma+0x130c>)
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8006ae4:	4b44      	ldr	r3, [pc, #272]	; (8006bf8 <checkAktifCalisma+0x12e0>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8006aea:	4b47      	ldr	r3, [pc, #284]	; (8006c08 <checkAktifCalisma+0x12f0>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006af0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006af4:	484c      	ldr	r0, [pc, #304]	; (8006c28 <checkAktifCalisma+0x1310>)
 8006af6:	f002 f939 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d016      	beq.n	8006b2e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006b00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b04:	4848      	ldr	r0, [pc, #288]	; (8006c28 <checkAktifCalisma+0x1310>)
 8006b06:	f002 f931 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00e      	beq.n	8006b2e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006b10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b14:	4844      	ldr	r0, [pc, #272]	; (8006c28 <checkAktifCalisma+0x1310>)
 8006b16:	f002 f929 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d006      	beq.n	8006b2e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006b20:	2140      	movs	r1, #64	; 0x40
 8006b22:	4836      	ldr	r0, [pc, #216]	; (8006bfc <checkAktifCalisma+0x12e4>)
 8006b24:	f002 f922 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d103      	bne.n	8006b36 <checkAktifCalisma+0x121e>
			startBasili=1;
 8006b2e:	4b3f      	ldr	r3, [pc, #252]	; (8006c2c <checkAktifCalisma+0x1314>)
 8006b30:	2201      	movs	r2, #1
 8006b32:	701a      	strb	r2, [r3, #0]
 8006b34:	e002      	b.n	8006b3c <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8006b36:	4b3d      	ldr	r3, [pc, #244]	; (8006c2c <checkAktifCalisma+0x1314>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006b3c:	4b3b      	ldr	r3, [pc, #236]	; (8006c2c <checkAktifCalisma+0x1314>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d014      	beq.n	8006b6e <checkAktifCalisma+0x1256>
 8006b44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b48:	4837      	ldr	r0, [pc, #220]	; (8006c28 <checkAktifCalisma+0x1310>)
 8006b4a:	f002 f90f 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d10c      	bne.n	8006b6e <checkAktifCalisma+0x1256>
			hataVar=1;
 8006b54:	4b36      	ldr	r3, [pc, #216]	; (8006c30 <checkAktifCalisma+0x1318>)
 8006b56:	2201      	movs	r2, #1
 8006b58:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8006b5a:	2001      	movs	r0, #1
 8006b5c:	f7fe f8c6 	bl	8004cec <hataKoduLcdGoster>
			hata2EEPROM(1);
 8006b60:	2001      	movs	r0, #1
 8006b62:	f7fe fc27 	bl	80053b4 <hata2EEPROM>
			acilstophatasi=1;
 8006b66:	4b33      	ldr	r3, [pc, #204]	; (8006c34 <checkAktifCalisma+0x131c>)
 8006b68:	2201      	movs	r2, #1
 8006b6a:	701a      	strb	r2, [r3, #0]
 8006b6c:	e018      	b.n	8006ba0 <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006b6e:	4b31      	ldr	r3, [pc, #196]	; (8006c34 <checkAktifCalisma+0x131c>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d014      	beq.n	8006ba0 <checkAktifCalisma+0x1288>
 8006b76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b7a:	482b      	ldr	r0, [pc, #172]	; (8006c28 <checkAktifCalisma+0x1310>)
 8006b7c:	f002 f8f6 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10c      	bne.n	8006ba0 <checkAktifCalisma+0x1288>
 8006b86:	4b29      	ldr	r3, [pc, #164]	; (8006c2c <checkAktifCalisma+0x1314>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	f083 0301 	eor.w	r3, r3, #1
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d005      	beq.n	8006ba0 <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 8006b94:	4b27      	ldr	r3, [pc, #156]	; (8006c34 <checkAktifCalisma+0x131c>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8006b9a:	2001      	movs	r0, #1
 8006b9c:	f7fe f852 	bl	8004c44 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006ba0:	4b25      	ldr	r3, [pc, #148]	; (8006c38 <checkAktifCalisma+0x1320>)
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	f083 0301 	eor.w	r3, r3, #1
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d04c      	beq.n	8006c48 <checkAktifCalisma+0x1330>
 8006bae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006bb2:	481d      	ldr	r0, [pc, #116]	; (8006c28 <checkAktifCalisma+0x1310>)
 8006bb4:	f002 f8da 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <checkAktifCalisma+0x12ae>
 8006bbe:	4b1f      	ldr	r3, [pc, #124]	; (8006c3c <checkAktifCalisma+0x1324>)
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d040      	beq.n	8006c48 <checkAktifCalisma+0x1330>
 8006bc6:	4b1e      	ldr	r3, [pc, #120]	; (8006c40 <checkAktifCalisma+0x1328>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d13c      	bne.n	8006c48 <checkAktifCalisma+0x1330>
			hataVar=1;
 8006bce:	4b18      	ldr	r3, [pc, #96]	; (8006c30 <checkAktifCalisma+0x1318>)
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8006bd4:	2002      	movs	r0, #2
 8006bd6:	f7fe f889 	bl	8004cec <hataKoduLcdGoster>
			hata2EEPROM(2);
 8006bda:	2002      	movs	r0, #2
 8006bdc:	f7fe fbea 	bl	80053b4 <hata2EEPROM>
			emniyetCercevesihatasi=1;
 8006be0:	4b18      	ldr	r3, [pc, #96]	; (8006c44 <checkAktifCalisma+0x132c>)
 8006be2:	2201      	movs	r2, #1
 8006be4:	701a      	strb	r2, [r3, #0]
 8006be6:	e047      	b.n	8006c78 <checkAktifCalisma+0x1360>
 8006be8:	200002fb 	.word	0x200002fb
 8006bec:	200002fa 	.word	0x200002fa
 8006bf0:	200002f9 	.word	0x200002f9
 8006bf4:	40010800 	.word	0x40010800
 8006bf8:	200002ef 	.word	0x200002ef
 8006bfc:	40011000 	.word	0x40011000
 8006c00:	200002b6 	.word	0x200002b6
 8006c04:	200002f2 	.word	0x200002f2
 8006c08:	200002f0 	.word	0x200002f0
 8006c0c:	200002ad 	.word	0x200002ad
 8006c10:	200002ae 	.word	0x200002ae
 8006c14:	200000a4 	.word	0x200000a4
 8006c18:	200000a5 	.word	0x200000a5
 8006c1c:	200002af 	.word	0x200002af
 8006c20:	200001e0 	.word	0x200001e0
 8006c24:	200002dc 	.word	0x200002dc
 8006c28:	40010c00 	.word	0x40010c00
 8006c2c:	200002fe 	.word	0x200002fe
 8006c30:	20000305 	.word	0x20000305
 8006c34:	20000300 	.word	0x20000300
 8006c38:	20000307 	.word	0x20000307
 8006c3c:	20000311 	.word	0x20000311
 8006c40:	200002b4 	.word	0x200002b4
 8006c44:	20000301 	.word	0x20000301
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006c48:	4b97      	ldr	r3, [pc, #604]	; (8006ea8 <checkAktifCalisma+0x1590>)
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d013      	beq.n	8006c78 <checkAktifCalisma+0x1360>
 8006c50:	4b96      	ldr	r3, [pc, #600]	; (8006eac <checkAktifCalisma+0x1594>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00f      	beq.n	8006c78 <checkAktifCalisma+0x1360>
 8006c58:	4b95      	ldr	r3, [pc, #596]	; (8006eb0 <checkAktifCalisma+0x1598>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	f083 0301 	eor.w	r3, r3, #1
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d008      	beq.n	8006c78 <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 8006c66:	4b90      	ldr	r3, [pc, #576]	; (8006ea8 <checkAktifCalisma+0x1590>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8006c6c:	4b91      	ldr	r3, [pc, #580]	; (8006eb4 <checkAktifCalisma+0x159c>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8006c72:	2002      	movs	r0, #2
 8006c74:	f7fd ffe6 	bl	8004c44 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006c78:	4b8f      	ldr	r3, [pc, #572]	; (8006eb8 <checkAktifCalisma+0x15a0>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d11c      	bne.n	8006cba <checkAktifCalisma+0x13a2>
 8006c80:	4b8e      	ldr	r3, [pc, #568]	; (8006ebc <checkAktifCalisma+0x15a4>)
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d118      	bne.n	8006cba <checkAktifCalisma+0x13a2>
 8006c88:	4b8d      	ldr	r3, [pc, #564]	; (8006ec0 <checkAktifCalisma+0x15a8>)
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d014      	beq.n	8006cba <checkAktifCalisma+0x13a2>
 8006c90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c94:	488b      	ldr	r0, [pc, #556]	; (8006ec4 <checkAktifCalisma+0x15ac>)
 8006c96:	f002 f869 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d10c      	bne.n	8006cba <checkAktifCalisma+0x13a2>
			hataVar=1;
 8006ca0:	4b89      	ldr	r3, [pc, #548]	; (8006ec8 <checkAktifCalisma+0x15b0>)
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8006ca6:	2003      	movs	r0, #3
 8006ca8:	f7fe f820 	bl	8004cec <hataKoduLcdGoster>
			hata2EEPROM(3);
 8006cac:	2003      	movs	r0, #3
 8006cae:	f7fe fb81 	bl	80053b4 <hata2EEPROM>
			basinchatasi=1;
 8006cb2:	4b86      	ldr	r3, [pc, #536]	; (8006ecc <checkAktifCalisma+0x15b4>)
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	701a      	strb	r2, [r3, #0]
 8006cb8:	e015      	b.n	8006ce6 <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8006cba:	4b84      	ldr	r3, [pc, #528]	; (8006ecc <checkAktifCalisma+0x15b4>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d011      	beq.n	8006ce6 <checkAktifCalisma+0x13ce>
 8006cc2:	4b7d      	ldr	r3, [pc, #500]	; (8006eb8 <checkAktifCalisma+0x15a0>)
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d10d      	bne.n	8006ce6 <checkAktifCalisma+0x13ce>
 8006cca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006cce:	4880      	ldr	r0, [pc, #512]	; (8006ed0 <checkAktifCalisma+0x15b8>)
 8006cd0:	f002 f84c 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d105      	bne.n	8006ce6 <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 8006cda:	4b7c      	ldr	r3, [pc, #496]	; (8006ecc <checkAktifCalisma+0x15b4>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006ce0:	2003      	movs	r0, #3
 8006ce2:	f7fd ffaf 	bl	8004c44 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006ce6:	4b7b      	ldr	r3, [pc, #492]	; (8006ed4 <checkAktifCalisma+0x15bc>)
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d103      	bne.n	8006cf6 <checkAktifCalisma+0x13de>
 8006cee:	4b7a      	ldr	r3, [pc, #488]	; (8006ed8 <checkAktifCalisma+0x15c0>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d01c      	beq.n	8006d30 <checkAktifCalisma+0x1418>
 8006cf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006cfa:	4878      	ldr	r0, [pc, #480]	; (8006edc <checkAktifCalisma+0x15c4>)
 8006cfc:	f002 f836 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d114      	bne.n	8006d30 <checkAktifCalisma+0x1418>
 8006d06:	4b76      	ldr	r3, [pc, #472]	; (8006ee0 <checkAktifCalisma+0x15c8>)
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d003      	beq.n	8006d16 <checkAktifCalisma+0x13fe>
 8006d0e:	4b74      	ldr	r3, [pc, #464]	; (8006ee0 <checkAktifCalisma+0x15c8>)
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	2b03      	cmp	r3, #3
 8006d14:	d10c      	bne.n	8006d30 <checkAktifCalisma+0x1418>
			hataVar=1;
 8006d16:	4b6c      	ldr	r3, [pc, #432]	; (8006ec8 <checkAktifCalisma+0x15b0>)
 8006d18:	2201      	movs	r2, #1
 8006d1a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8006d1c:	2004      	movs	r0, #4
 8006d1e:	f7fd ffe5 	bl	8004cec <hataKoduLcdGoster>
			hata2EEPROM(4);
 8006d22:	2004      	movs	r0, #4
 8006d24:	f7fe fb46 	bl	80053b4 <hata2EEPROM>
			katkapisivicihatasi=1;
 8006d28:	4b6e      	ldr	r3, [pc, #440]	; (8006ee4 <checkAktifCalisma+0x15cc>)
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	701a      	strb	r2, [r3, #0]
 8006d2e:	e01f      	b.n	8006d70 <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006d30:	4b6c      	ldr	r3, [pc, #432]	; (8006ee4 <checkAktifCalisma+0x15cc>)
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d01b      	beq.n	8006d70 <checkAktifCalisma+0x1458>
 8006d38:	4b6b      	ldr	r3, [pc, #428]	; (8006ee8 <checkAktifCalisma+0x15d0>)
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d017      	beq.n	8006d70 <checkAktifCalisma+0x1458>
 8006d40:	4b64      	ldr	r3, [pc, #400]	; (8006ed4 <checkAktifCalisma+0x15bc>)
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	f083 0301 	eor.w	r3, r3, #1
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d010      	beq.n	8006d70 <checkAktifCalisma+0x1458>
 8006d4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d52:	4862      	ldr	r0, [pc, #392]	; (8006edc <checkAktifCalisma+0x15c4>)
 8006d54:	f002 f80a 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d108      	bne.n	8006d70 <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 8006d5e:	4b61      	ldr	r3, [pc, #388]	; (8006ee4 <checkAktifCalisma+0x15cc>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006d64:	4b5c      	ldr	r3, [pc, #368]	; (8006ed8 <checkAktifCalisma+0x15c0>)
 8006d66:	2200      	movs	r2, #0
 8006d68:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8006d6a:	2004      	movs	r0, #4
 8006d6c:	f7fd ff6a 	bl	8004c44 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006d70:	4b58      	ldr	r3, [pc, #352]	; (8006ed4 <checkAktifCalisma+0x15bc>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d103      	bne.n	8006d80 <checkAktifCalisma+0x1468>
 8006d78:	4b5c      	ldr	r3, [pc, #368]	; (8006eec <checkAktifCalisma+0x15d4>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d01c      	beq.n	8006dba <checkAktifCalisma+0x14a2>
 8006d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d84:	4855      	ldr	r0, [pc, #340]	; (8006edc <checkAktifCalisma+0x15c4>)
 8006d86:	f001 fff1 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d114      	bne.n	8006dba <checkAktifCalisma+0x14a2>
 8006d90:	4b53      	ldr	r3, [pc, #332]	; (8006ee0 <checkAktifCalisma+0x15c8>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d003      	beq.n	8006da0 <checkAktifCalisma+0x1488>
 8006d98:	4b51      	ldr	r3, [pc, #324]	; (8006ee0 <checkAktifCalisma+0x15c8>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b03      	cmp	r3, #3
 8006d9e:	d10c      	bne.n	8006dba <checkAktifCalisma+0x14a2>
			hataVar=1;
 8006da0:	4b49      	ldr	r3, [pc, #292]	; (8006ec8 <checkAktifCalisma+0x15b0>)
 8006da2:	2201      	movs	r2, #1
 8006da4:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8006da6:	2005      	movs	r0, #5
 8006da8:	f7fd ffa0 	bl	8004cec <hataKoduLcdGoster>
			hata2EEPROM(5);
 8006dac:	2005      	movs	r0, #5
 8006dae:	f7fe fb01 	bl	80053b4 <hata2EEPROM>
			tablakapisivicihatasi=1;
 8006db2:	4b4f      	ldr	r3, [pc, #316]	; (8006ef0 <checkAktifCalisma+0x15d8>)
 8006db4:	2201      	movs	r2, #1
 8006db6:	701a      	strb	r2, [r3, #0]
 8006db8:	e023      	b.n	8006e02 <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006dba:	4b4d      	ldr	r3, [pc, #308]	; (8006ef0 <checkAktifCalisma+0x15d8>)
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d01f      	beq.n	8006e02 <checkAktifCalisma+0x14ea>
 8006dc2:	4b49      	ldr	r3, [pc, #292]	; (8006ee8 <checkAktifCalisma+0x15d0>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d01b      	beq.n	8006e02 <checkAktifCalisma+0x14ea>
 8006dca:	4b42      	ldr	r3, [pc, #264]	; (8006ed4 <checkAktifCalisma+0x15bc>)
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	f083 0301 	eor.w	r3, r3, #1
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d014      	beq.n	8006e02 <checkAktifCalisma+0x14ea>
 8006dd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ddc:	483f      	ldr	r0, [pc, #252]	; (8006edc <checkAktifCalisma+0x15c4>)
 8006dde:	f001 ffc5 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10c      	bne.n	8006e02 <checkAktifCalisma+0x14ea>
 8006de8:	4b3f      	ldr	r3, [pc, #252]	; (8006ee8 <checkAktifCalisma+0x15d0>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d008      	beq.n	8006e02 <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 8006df0:	4b3f      	ldr	r3, [pc, #252]	; (8006ef0 <checkAktifCalisma+0x15d8>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8006df6:	4b3d      	ldr	r3, [pc, #244]	; (8006eec <checkAktifCalisma+0x15d4>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8006dfc:	2005      	movs	r0, #5
 8006dfe:	f7fd ff21 	bl	8004c44 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8006e02:	4b2f      	ldr	r3, [pc, #188]	; (8006ec0 <checkAktifCalisma+0x15a8>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d107      	bne.n	8006e1a <checkAktifCalisma+0x1502>
 8006e0a:	4b29      	ldr	r3, [pc, #164]	; (8006eb0 <checkAktifCalisma+0x1598>)
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d103      	bne.n	8006e1a <checkAktifCalisma+0x1502>
 8006e12:	4b38      	ldr	r3, [pc, #224]	; (8006ef4 <checkAktifCalisma+0x15dc>)
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d014      	beq.n	8006e44 <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 8006e1a:	4b37      	ldr	r3, [pc, #220]	; (8006ef8 <checkAktifCalisma+0x15e0>)
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	4b37      	ldr	r3, [pc, #220]	; (8006efc <checkAktifCalisma+0x15e4>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	4a36      	ldr	r2, [pc, #216]	; (8006f00 <checkAktifCalisma+0x15e8>)
 8006e26:	7812      	ldrb	r2, [r2, #0]
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d30b      	bcc.n	8006e44 <checkAktifCalisma+0x152c>
			  	hataVar=1;
 8006e2c:	4b26      	ldr	r3, [pc, #152]	; (8006ec8 <checkAktifCalisma+0x15b0>)
 8006e2e:	2201      	movs	r2, #1
 8006e30:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8006e32:	2006      	movs	r0, #6
 8006e34:	f7fd ff5a 	bl	8004cec <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006e38:	2006      	movs	r0, #6
 8006e3a:	f7fe fabb 	bl	80053b4 <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 8006e3e:	4b31      	ldr	r3, [pc, #196]	; (8006f04 <checkAktifCalisma+0x15ec>)
 8006e40:	2201      	movs	r2, #1
 8006e42:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006e44:	4b2f      	ldr	r3, [pc, #188]	; (8006f04 <checkAktifCalisma+0x15ec>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d013      	beq.n	8006e74 <checkAktifCalisma+0x155c>
 8006e4c:	2108      	movs	r1, #8
 8006e4e:	4823      	ldr	r0, [pc, #140]	; (8006edc <checkAktifCalisma+0x15c4>)
 8006e50:	f001 ff8c 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00c      	beq.n	8006e74 <checkAktifCalisma+0x155c>
 8006e5a:	4b1e      	ldr	r3, [pc, #120]	; (8006ed4 <checkAktifCalisma+0x15bc>)
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	f083 0301 	eor.w	r3, r3, #1
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d005      	beq.n	8006e74 <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 8006e68:	4b26      	ldr	r3, [pc, #152]	; (8006f04 <checkAktifCalisma+0x15ec>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8006e6e:	2006      	movs	r0, #6
 8006e70:	f7fd fee8 	bl	8004c44 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006e74:	4b24      	ldr	r3, [pc, #144]	; (8006f08 <checkAktifCalisma+0x15f0>)
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10b      	bne.n	8006e94 <checkAktifCalisma+0x157c>
 8006e7c:	4b0c      	ldr	r3, [pc, #48]	; (8006eb0 <checkAktifCalisma+0x1598>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d107      	bne.n	8006e94 <checkAktifCalisma+0x157c>
 8006e84:	4b21      	ldr	r3, [pc, #132]	; (8006f0c <checkAktifCalisma+0x15f4>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d103      	bne.n	8006e94 <checkAktifCalisma+0x157c>
 8006e8c:	4b19      	ldr	r3, [pc, #100]	; (8006ef4 <checkAktifCalisma+0x15dc>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d03f      	beq.n	8006f14 <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 8006e94:	4b1e      	ldr	r3, [pc, #120]	; (8006f10 <checkAktifCalisma+0x15f8>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8006e9a:	4b0f      	ldr	r3, [pc, #60]	; (8006ed8 <checkAktifCalisma+0x15c0>)
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006ea0:	4b12      	ldr	r3, [pc, #72]	; (8006eec <checkAktifCalisma+0x15d4>)
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	e03c      	b.n	8006f22 <checkAktifCalisma+0x160a>
 8006ea8:	20000301 	.word	0x20000301
 8006eac:	20000307 	.word	0x20000307
 8006eb0:	200002e8 	.word	0x200002e8
 8006eb4:	20000311 	.word	0x20000311
 8006eb8:	200002b3 	.word	0x200002b3
 8006ebc:	200002b7 	.word	0x200002b7
 8006ec0:	20000304 	.word	0x20000304
 8006ec4:	40011000 	.word	0x40011000
 8006ec8:	20000305 	.word	0x20000305
 8006ecc:	2000030e 	.word	0x2000030e
 8006ed0:	40010c00 	.word	0x40010c00
 8006ed4:	200002fe 	.word	0x200002fe
 8006ed8:	20000312 	.word	0x20000312
 8006edc:	40010800 	.word	0x40010800
 8006ee0:	200002b8 	.word	0x200002b8
 8006ee4:	2000030f 	.word	0x2000030f
 8006ee8:	200002f2 	.word	0x200002f2
 8006eec:	20000313 	.word	0x20000313
 8006ef0:	20000310 	.word	0x20000310
 8006ef4:	200002e7 	.word	0x200002e7
 8006ef8:	20000258 	.word	0x20000258
 8006efc:	2000026c 	.word	0x2000026c
 8006f00:	200002c8 	.word	0x200002c8
 8006f04:	200002ff 	.word	0x200002ff
 8006f08:	200002e5 	.word	0x200002e5
 8006f0c:	200002e6 	.word	0x200002e6
 8006f10:	20000306 	.word	0x20000306
		} else {
			makineCalisiyor=1;
 8006f14:	4b1e      	ldr	r3, [pc, #120]	; (8006f90 <checkAktifCalisma+0x1678>)
 8006f16:	2201      	movs	r2, #1
 8006f18:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8006f1a:	4b1e      	ldr	r3, [pc, #120]	; (8006f94 <checkAktifCalisma+0x167c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a1e      	ldr	r2, [pc, #120]	; (8006f98 <checkAktifCalisma+0x1680>)
 8006f20:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006f22:	4b1e      	ldr	r3, [pc, #120]	; (8006f9c <checkAktifCalisma+0x1684>)
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d02f      	beq.n	8006f8a <checkAktifCalisma+0x1672>
 8006f2a:	4b1d      	ldr	r3, [pc, #116]	; (8006fa0 <checkAktifCalisma+0x1688>)
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	f083 0301 	eor.w	r3, r3, #1
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d028      	beq.n	8006f8a <checkAktifCalisma+0x1672>
 8006f38:	4b1a      	ldr	r3, [pc, #104]	; (8006fa4 <checkAktifCalisma+0x168c>)
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	f083 0301 	eor.w	r3, r3, #1
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d021      	beq.n	8006f8a <checkAktifCalisma+0x1672>
 8006f46:	4b18      	ldr	r3, [pc, #96]	; (8006fa8 <checkAktifCalisma+0x1690>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	f083 0301 	eor.w	r3, r3, #1
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d01a      	beq.n	8006f8a <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006f54:	4b15      	ldr	r3, [pc, #84]	; (8006fac <checkAktifCalisma+0x1694>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	f083 0301 	eor.w	r3, r3, #1
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d013      	beq.n	8006f8a <checkAktifCalisma+0x1672>
 8006f62:	4b13      	ldr	r3, [pc, #76]	; (8006fb0 <checkAktifCalisma+0x1698>)
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	f083 0301 	eor.w	r3, r3, #1
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00c      	beq.n	8006f8a <checkAktifCalisma+0x1672>
 8006f70:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <checkAktifCalisma+0x169c>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	f083 0301 	eor.w	r3, r3, #1
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d005      	beq.n	8006f8a <checkAktifCalisma+0x1672>
			hataVar=0;
 8006f7e:	4b07      	ldr	r3, [pc, #28]	; (8006f9c <checkAktifCalisma+0x1684>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006f84:	2007      	movs	r0, #7
 8006f86:	f7fd fe5d 	bl	8004c44 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8006f8a:	bf00      	nop
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	20000306 	.word	0x20000306
 8006f94:	20000258 	.word	0x20000258
 8006f98:	2000026c 	.word	0x2000026c
 8006f9c:	20000305 	.word	0x20000305
 8006fa0:	20000300 	.word	0x20000300
 8006fa4:	20000301 	.word	0x20000301
 8006fa8:	2000030e 	.word	0x2000030e
 8006fac:	2000030f 	.word	0x2000030f
 8006fb0:	20000310 	.word	0x20000310
 8006fb4:	200002ff 	.word	0x200002ff

08006fb8 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006fbc:	4b8b      	ldr	r3, [pc, #556]	; (80071ec <checkDemoModCalisma+0x234>)
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	f040 8229 	bne.w	8007418 <checkDemoModCalisma+0x460>
 8006fc6:	4b8a      	ldr	r3, [pc, #552]	; (80071f0 <checkDemoModCalisma+0x238>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f000 8224 	beq.w	8007418 <checkDemoModCalisma+0x460>
 8006fd0:	4b88      	ldr	r3, [pc, #544]	; (80071f4 <checkDemoModCalisma+0x23c>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f040 821f 	bne.w	8007418 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006fda:	2102      	movs	r1, #2
 8006fdc:	4886      	ldr	r0, [pc, #536]	; (80071f8 <checkDemoModCalisma+0x240>)
 8006fde:	f001 fec5 	bl	8008d6c <HAL_GPIO_ReadPin>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d11d      	bne.n	8007024 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8006fe8:	4b84      	ldr	r3, [pc, #528]	; (80071fc <checkDemoModCalisma+0x244>)
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	f083 0301 	eor.w	r3, r3, #1
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d016      	beq.n	8007024 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8006ff6:	4b82      	ldr	r3, [pc, #520]	; (8007200 <checkDemoModCalisma+0x248>)
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	f083 0301 	eor.w	r3, r3, #1
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00f      	beq.n	8007024 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007004:	4b7f      	ldr	r3, [pc, #508]	; (8007204 <checkDemoModCalisma+0x24c>)
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	f083 0301 	eor.w	r3, r3, #1
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d008      	beq.n	8007024 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8007012:	2201      	movs	r2, #1
 8007014:	2104      	movs	r1, #4
 8007016:	487c      	ldr	r0, [pc, #496]	; (8007208 <checkDemoModCalisma+0x250>)
 8007018:	f001 febf 	bl	8008d9a <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 800701c:	4b7b      	ldr	r3, [pc, #492]	; (800720c <checkDemoModCalisma+0x254>)
 800701e:	2201      	movs	r2, #1
 8007020:	701a      	strb	r2, [r3, #0]
 8007022:	e00e      	b.n	8007042 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007024:	2102      	movs	r1, #2
 8007026:	4874      	ldr	r0, [pc, #464]	; (80071f8 <checkDemoModCalisma+0x240>)
 8007028:	f001 fea0 	bl	8008d6c <HAL_GPIO_ReadPin>
 800702c:	4603      	mov	r3, r0
 800702e:	2b01      	cmp	r3, #1
 8007030:	d107      	bne.n	8007042 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007032:	2200      	movs	r2, #0
 8007034:	2104      	movs	r1, #4
 8007036:	4874      	ldr	r0, [pc, #464]	; (8007208 <checkDemoModCalisma+0x250>)
 8007038:	f001 feaf 	bl	8008d9a <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 800703c:	4b73      	ldr	r3, [pc, #460]	; (800720c <checkDemoModCalisma+0x254>)
 800703e:	2200      	movs	r2, #0
 8007040:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8007042:	4b72      	ldr	r3, [pc, #456]	; (800720c <checkDemoModCalisma+0x254>)
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d10b      	bne.n	8007062 <checkDemoModCalisma+0xaa>
 800704a:	4b6d      	ldr	r3, [pc, #436]	; (8007200 <checkDemoModCalisma+0x248>)
 800704c:	781b      	ldrb	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d107      	bne.n	8007062 <checkDemoModCalisma+0xaa>
 8007052:	4b6c      	ldr	r3, [pc, #432]	; (8007204 <checkDemoModCalisma+0x24c>)
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d103      	bne.n	8007062 <checkDemoModCalisma+0xaa>
 800705a:	4b68      	ldr	r3, [pc, #416]	; (80071fc <checkDemoModCalisma+0x244>)
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00c      	beq.n	800707c <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8007062:	2201      	movs	r2, #1
 8007064:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007068:	4867      	ldr	r0, [pc, #412]	; (8007208 <checkDemoModCalisma+0x250>)
 800706a:	f001 fe96 	bl	8008d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800706e:	2201      	movs	r2, #1
 8007070:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007074:	4864      	ldr	r0, [pc, #400]	; (8007208 <checkDemoModCalisma+0x250>)
 8007076:	f001 fe90 	bl	8008d9a <HAL_GPIO_WritePin>
 800707a:	e00b      	b.n	8007094 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800707c:	2200      	movs	r2, #0
 800707e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007082:	4861      	ldr	r0, [pc, #388]	; (8007208 <checkDemoModCalisma+0x250>)
 8007084:	f001 fe89 	bl	8008d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007088:	2200      	movs	r2, #0
 800708a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800708e:	485e      	ldr	r0, [pc, #376]	; (8007208 <checkDemoModCalisma+0x250>)
 8007090:	f001 fe83 	bl	8008d9a <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007094:	2102      	movs	r1, #2
 8007096:	4858      	ldr	r0, [pc, #352]	; (80071f8 <checkDemoModCalisma+0x240>)
 8007098:	f001 fe68 	bl	8008d6c <HAL_GPIO_ReadPin>
 800709c:	4603      	mov	r3, r0
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d10d      	bne.n	80070be <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80070a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80070a6:	4854      	ldr	r0, [pc, #336]	; (80071f8 <checkDemoModCalisma+0x240>)
 80070a8:	f001 fe60 	bl	8008d6c <HAL_GPIO_ReadPin>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d105      	bne.n	80070be <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80070b2:	4b56      	ldr	r3, [pc, #344]	; (800720c <checkDemoModCalisma+0x254>)
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	f083 0301 	eor.w	r3, r3, #1
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80070be:	2102      	movs	r1, #2
 80070c0:	484d      	ldr	r0, [pc, #308]	; (80071f8 <checkDemoModCalisma+0x240>)
 80070c2:	f001 fe53 	bl	8008d6c <HAL_GPIO_ReadPin>
 80070c6:	4603      	mov	r3, r0
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d125      	bne.n	8007118 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80070cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80070d0:	4849      	ldr	r0, [pc, #292]	; (80071f8 <checkDemoModCalisma+0x240>)
 80070d2:	f001 fe4b 	bl	8008d6c <HAL_GPIO_ReadPin>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d11d      	bne.n	8007118 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80070dc:	4b4b      	ldr	r3, [pc, #300]	; (800720c <checkDemoModCalisma+0x254>)
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	f083 0301 	eor.w	r3, r3, #1
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d016      	beq.n	8007118 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80070ea:	4b44      	ldr	r3, [pc, #272]	; (80071fc <checkDemoModCalisma+0x244>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	f083 0301 	eor.w	r3, r3, #1
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00f      	beq.n	8007118 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80070f8:	4b42      	ldr	r3, [pc, #264]	; (8007204 <checkDemoModCalisma+0x24c>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	f083 0301 	eor.w	r3, r3, #1
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d008      	beq.n	8007118 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8007106:	2201      	movs	r2, #1
 8007108:	2120      	movs	r1, #32
 800710a:	483b      	ldr	r0, [pc, #236]	; (80071f8 <checkDemoModCalisma+0x240>)
 800710c:	f001 fe45 	bl	8008d9a <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007110:	4b3b      	ldr	r3, [pc, #236]	; (8007200 <checkDemoModCalisma+0x248>)
 8007112:	2201      	movs	r2, #1
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	e007      	b.n	8007128 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007118:	2200      	movs	r2, #0
 800711a:	2120      	movs	r1, #32
 800711c:	4836      	ldr	r0, [pc, #216]	; (80071f8 <checkDemoModCalisma+0x240>)
 800711e:	f001 fe3c 	bl	8008d9a <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8007122:	4b37      	ldr	r3, [pc, #220]	; (8007200 <checkDemoModCalisma+0x248>)
 8007124:	2200      	movs	r2, #0
 8007126:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007128:	2102      	movs	r1, #2
 800712a:	4833      	ldr	r0, [pc, #204]	; (80071f8 <checkDemoModCalisma+0x240>)
 800712c:	f001 fe1e 	bl	8008d6c <HAL_GPIO_ReadPin>
 8007130:	4603      	mov	r3, r0
 8007132:	2b01      	cmp	r3, #1
 8007134:	d125      	bne.n	8007182 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8007136:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800713a:	482f      	ldr	r0, [pc, #188]	; (80071f8 <checkDemoModCalisma+0x240>)
 800713c:	f001 fe16 	bl	8008d6c <HAL_GPIO_ReadPin>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d11d      	bne.n	8007182 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8007146:	4b31      	ldr	r3, [pc, #196]	; (800720c <checkDemoModCalisma+0x254>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	f083 0301 	eor.w	r3, r3, #1
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	d016      	beq.n	8007182 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8007154:	4b2a      	ldr	r3, [pc, #168]	; (8007200 <checkDemoModCalisma+0x248>)
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	f083 0301 	eor.w	r3, r3, #1
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d00f      	beq.n	8007182 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8007162:	4b26      	ldr	r3, [pc, #152]	; (80071fc <checkDemoModCalisma+0x244>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	f083 0301 	eor.w	r3, r3, #1
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d008      	beq.n	8007182 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007170:	2201      	movs	r2, #1
 8007172:	2110      	movs	r1, #16
 8007174:	4820      	ldr	r0, [pc, #128]	; (80071f8 <checkDemoModCalisma+0x240>)
 8007176:	f001 fe10 	bl	8008d9a <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 800717a:	4b22      	ldr	r3, [pc, #136]	; (8007204 <checkDemoModCalisma+0x24c>)
 800717c:	2201      	movs	r2, #1
 800717e:	701a      	strb	r2, [r3, #0]
 8007180:	e007      	b.n	8007192 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007182:	2200      	movs	r2, #0
 8007184:	2110      	movs	r1, #16
 8007186:	481c      	ldr	r0, [pc, #112]	; (80071f8 <checkDemoModCalisma+0x240>)
 8007188:	f001 fe07 	bl	8008d9a <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 800718c:	4b1d      	ldr	r3, [pc, #116]	; (8007204 <checkDemoModCalisma+0x24c>)
 800718e:	2200      	movs	r2, #0
 8007190:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007192:	2104      	movs	r1, #4
 8007194:	4818      	ldr	r0, [pc, #96]	; (80071f8 <checkDemoModCalisma+0x240>)
 8007196:	f001 fde9 	bl	8008d6c <HAL_GPIO_ReadPin>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d139      	bne.n	8007214 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80071a0:	4b1a      	ldr	r3, [pc, #104]	; (800720c <checkDemoModCalisma+0x254>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	f083 0301 	eor.w	r3, r3, #1
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d032      	beq.n	8007214 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80071ae:	4b15      	ldr	r3, [pc, #84]	; (8007204 <checkDemoModCalisma+0x24c>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	f083 0301 	eor.w	r3, r3, #1
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d02b      	beq.n	8007214 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80071bc:	4b10      	ldr	r3, [pc, #64]	; (8007200 <checkDemoModCalisma+0x248>)
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	f083 0301 	eor.w	r3, r3, #1
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d024      	beq.n	8007214 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80071ca:	2201      	movs	r2, #1
 80071cc:	2102      	movs	r1, #2
 80071ce:	480e      	ldr	r0, [pc, #56]	; (8007208 <checkDemoModCalisma+0x250>)
 80071d0:	f001 fde3 	bl	8008d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80071d4:	2201      	movs	r2, #1
 80071d6:	2101      	movs	r1, #1
 80071d8:	480b      	ldr	r0, [pc, #44]	; (8007208 <checkDemoModCalisma+0x250>)
 80071da:	f001 fdde 	bl	8008d9a <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80071de:	4b07      	ldr	r3, [pc, #28]	; (80071fc <checkDemoModCalisma+0x244>)
 80071e0:	2201      	movs	r2, #1
 80071e2:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80071e4:	4b0a      	ldr	r3, [pc, #40]	; (8007210 <checkDemoModCalisma+0x258>)
 80071e6:	2201      	movs	r2, #1
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	e027      	b.n	800723c <checkDemoModCalisma+0x284>
 80071ec:	200002ce 	.word	0x200002ce
 80071f0:	20000302 	.word	0x20000302
 80071f4:	200002cd 	.word	0x200002cd
 80071f8:	40011000 	.word	0x40011000
 80071fc:	20000309 	.word	0x20000309
 8007200:	2000030a 	.word	0x2000030a
 8007204:	2000030b 	.word	0x2000030b
 8007208:	40010c00 	.word	0x40010c00
 800720c:	20000308 	.word	0x20000308
 8007210:	200002ee 	.word	0x200002ee
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007214:	2104      	movs	r1, #4
 8007216:	48a0      	ldr	r0, [pc, #640]	; (8007498 <checkDemoModCalisma+0x4e0>)
 8007218:	f001 fda8 	bl	8008d6c <HAL_GPIO_ReadPin>
 800721c:	4603      	mov	r3, r0
 800721e:	2b01      	cmp	r3, #1
 8007220:	d10c      	bne.n	800723c <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007222:	2200      	movs	r2, #0
 8007224:	2102      	movs	r1, #2
 8007226:	489d      	ldr	r0, [pc, #628]	; (800749c <checkDemoModCalisma+0x4e4>)
 8007228:	f001 fdb7 	bl	8008d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800722c:	2200      	movs	r2, #0
 800722e:	2101      	movs	r1, #1
 8007230:	489a      	ldr	r0, [pc, #616]	; (800749c <checkDemoModCalisma+0x4e4>)
 8007232:	f001 fdb2 	bl	8008d9a <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8007236:	4b9a      	ldr	r3, [pc, #616]	; (80074a0 <checkDemoModCalisma+0x4e8>)
 8007238:	2200      	movs	r2, #0
 800723a:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 800723c:	2104      	movs	r1, #4
 800723e:	4896      	ldr	r0, [pc, #600]	; (8007498 <checkDemoModCalisma+0x4e0>)
 8007240:	f001 fd94 	bl	8008d6c <HAL_GPIO_ReadPin>
 8007244:	4603      	mov	r3, r0
 8007246:	2b01      	cmp	r3, #1
 8007248:	d10d      	bne.n	8007266 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800724a:	2201      	movs	r2, #1
 800724c:	2180      	movs	r1, #128	; 0x80
 800724e:	4895      	ldr	r0, [pc, #596]	; (80074a4 <checkDemoModCalisma+0x4ec>)
 8007250:	f001 fda3 	bl	8008d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007254:	2201      	movs	r2, #1
 8007256:	2120      	movs	r1, #32
 8007258:	4892      	ldr	r0, [pc, #584]	; (80074a4 <checkDemoModCalisma+0x4ec>)
 800725a:	f001 fd9e 	bl	8008d9a <HAL_GPIO_WritePin>
			timer3 = millis;
 800725e:	4b92      	ldr	r3, [pc, #584]	; (80074a8 <checkDemoModCalisma+0x4f0>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a92      	ldr	r2, [pc, #584]	; (80074ac <checkDemoModCalisma+0x4f4>)
 8007264:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007266:	4b90      	ldr	r3, [pc, #576]	; (80074a8 <checkDemoModCalisma+0x4f0>)
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	4b90      	ldr	r3, [pc, #576]	; (80074ac <checkDemoModCalisma+0x4f4>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	2b04      	cmp	r3, #4
 8007272:	d909      	bls.n	8007288 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007274:	2200      	movs	r2, #0
 8007276:	2180      	movs	r1, #128	; 0x80
 8007278:	488a      	ldr	r0, [pc, #552]	; (80074a4 <checkDemoModCalisma+0x4ec>)
 800727a:	f001 fd8e 	bl	8008d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800727e:	2200      	movs	r2, #0
 8007280:	2120      	movs	r1, #32
 8007282:	4888      	ldr	r0, [pc, #544]	; (80074a4 <checkDemoModCalisma+0x4ec>)
 8007284:	f001 fd89 	bl	8008d9a <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007288:	2102      	movs	r1, #2
 800728a:	4883      	ldr	r0, [pc, #524]	; (8007498 <checkDemoModCalisma+0x4e0>)
 800728c:	f001 fd6e 	bl	8008d6c <HAL_GPIO_ReadPin>
 8007290:	4603      	mov	r3, r0
 8007292:	2b01      	cmp	r3, #1
 8007294:	d108      	bne.n	80072a8 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007296:	2201      	movs	r2, #1
 8007298:	2140      	movs	r1, #64	; 0x40
 800729a:	4882      	ldr	r0, [pc, #520]	; (80074a4 <checkDemoModCalisma+0x4ec>)
 800729c:	f001 fd7d 	bl	8008d9a <HAL_GPIO_WritePin>
			timer3 = millis;
 80072a0:	4b81      	ldr	r3, [pc, #516]	; (80074a8 <checkDemoModCalisma+0x4f0>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a81      	ldr	r2, [pc, #516]	; (80074ac <checkDemoModCalisma+0x4f4>)
 80072a6:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80072a8:	4b7f      	ldr	r3, [pc, #508]	; (80074a8 <checkDemoModCalisma+0x4f0>)
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	4b7f      	ldr	r3, [pc, #508]	; (80074ac <checkDemoModCalisma+0x4f4>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	2b04      	cmp	r3, #4
 80072b4:	d904      	bls.n	80072c0 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80072b6:	2200      	movs	r2, #0
 80072b8:	2140      	movs	r1, #64	; 0x40
 80072ba:	487a      	ldr	r0, [pc, #488]	; (80074a4 <checkDemoModCalisma+0x4ec>)
 80072bc:	f001 fd6d 	bl	8008d9a <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80072c0:	4b7b      	ldr	r3, [pc, #492]	; (80074b0 <checkDemoModCalisma+0x4f8>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d058      	beq.n	800737a <checkDemoModCalisma+0x3c2>
 80072c8:	4b7a      	ldr	r3, [pc, #488]	; (80074b4 <checkDemoModCalisma+0x4fc>)
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d054      	beq.n	800737a <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 80072d0:	4b79      	ldr	r3, [pc, #484]	; (80074b8 <checkDemoModCalisma+0x500>)
 80072d2:	781b      	ldrb	r3, [r3, #0]
 80072d4:	3301      	adds	r3, #1
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	4b77      	ldr	r3, [pc, #476]	; (80074b8 <checkDemoModCalisma+0x500>)
 80072da:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80072dc:	4b76      	ldr	r3, [pc, #472]	; (80074b8 <checkDemoModCalisma+0x500>)
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b09      	cmp	r3, #9
 80072e2:	d908      	bls.n	80072f6 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 80072e4:	4b74      	ldr	r3, [pc, #464]	; (80074b8 <checkDemoModCalisma+0x500>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 80072ea:	4b74      	ldr	r3, [pc, #464]	; (80074bc <checkDemoModCalisma+0x504>)
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	3301      	adds	r3, #1
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	4b72      	ldr	r3, [pc, #456]	; (80074bc <checkDemoModCalisma+0x504>)
 80072f4:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 80072f6:	4b71      	ldr	r3, [pc, #452]	; (80074bc <checkDemoModCalisma+0x504>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	2b09      	cmp	r3, #9
 80072fc:	d908      	bls.n	8007310 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80072fe:	4b6f      	ldr	r3, [pc, #444]	; (80074bc <checkDemoModCalisma+0x504>)
 8007300:	2200      	movs	r2, #0
 8007302:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8007304:	4b6e      	ldr	r3, [pc, #440]	; (80074c0 <checkDemoModCalisma+0x508>)
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	3301      	adds	r3, #1
 800730a:	b2da      	uxtb	r2, r3
 800730c:	4b6c      	ldr	r3, [pc, #432]	; (80074c0 <checkDemoModCalisma+0x508>)
 800730e:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8007310:	4b6b      	ldr	r3, [pc, #428]	; (80074c0 <checkDemoModCalisma+0x508>)
 8007312:	781b      	ldrb	r3, [r3, #0]
 8007314:	2b09      	cmp	r3, #9
 8007316:	d908      	bls.n	800732a <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8007318:	4b69      	ldr	r3, [pc, #420]	; (80074c0 <checkDemoModCalisma+0x508>)
 800731a:	2200      	movs	r2, #0
 800731c:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 800731e:	4b69      	ldr	r3, [pc, #420]	; (80074c4 <checkDemoModCalisma+0x50c>)
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	3301      	adds	r3, #1
 8007324:	b2da      	uxtb	r2, r3
 8007326:	4b67      	ldr	r3, [pc, #412]	; (80074c4 <checkDemoModCalisma+0x50c>)
 8007328:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 800732a:	4b66      	ldr	r3, [pc, #408]	; (80074c4 <checkDemoModCalisma+0x50c>)
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	2b09      	cmp	r3, #9
 8007330:	d908      	bls.n	8007344 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8007332:	4b64      	ldr	r3, [pc, #400]	; (80074c4 <checkDemoModCalisma+0x50c>)
 8007334:	2200      	movs	r2, #0
 8007336:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8007338:	4b63      	ldr	r3, [pc, #396]	; (80074c8 <checkDemoModCalisma+0x510>)
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	3301      	adds	r3, #1
 800733e:	b2da      	uxtb	r2, r3
 8007340:	4b61      	ldr	r3, [pc, #388]	; (80074c8 <checkDemoModCalisma+0x510>)
 8007342:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007344:	4b60      	ldr	r3, [pc, #384]	; (80074c8 <checkDemoModCalisma+0x510>)
 8007346:	781a      	ldrb	r2, [r3, #0]
 8007348:	4b60      	ldr	r3, [pc, #384]	; (80074cc <checkDemoModCalisma+0x514>)
 800734a:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800734e:	4b5d      	ldr	r3, [pc, #372]	; (80074c4 <checkDemoModCalisma+0x50c>)
 8007350:	781a      	ldrb	r2, [r3, #0]
 8007352:	4b5e      	ldr	r3, [pc, #376]	; (80074cc <checkDemoModCalisma+0x514>)
 8007354:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007356:	4b5a      	ldr	r3, [pc, #360]	; (80074c0 <checkDemoModCalisma+0x508>)
 8007358:	781a      	ldrb	r2, [r3, #0]
 800735a:	4b5c      	ldr	r3, [pc, #368]	; (80074cc <checkDemoModCalisma+0x514>)
 800735c:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800735e:	4b57      	ldr	r3, [pc, #348]	; (80074bc <checkDemoModCalisma+0x504>)
 8007360:	781a      	ldrb	r2, [r3, #0]
 8007362:	4b5a      	ldr	r3, [pc, #360]	; (80074cc <checkDemoModCalisma+0x514>)
 8007364:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007366:	4b54      	ldr	r3, [pc, #336]	; (80074b8 <checkDemoModCalisma+0x500>)
 8007368:	781a      	ldrb	r2, [r3, #0]
 800736a:	4b58      	ldr	r3, [pc, #352]	; (80074cc <checkDemoModCalisma+0x514>)
 800736c:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 800736e:	4b58      	ldr	r3, [pc, #352]	; (80074d0 <checkDemoModCalisma+0x518>)
 8007370:	2201      	movs	r2, #1
 8007372:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8007374:	4b4f      	ldr	r3, [pc, #316]	; (80074b4 <checkDemoModCalisma+0x4fc>)
 8007376:	2200      	movs	r2, #0
 8007378:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 800737a:	4b56      	ldr	r3, [pc, #344]	; (80074d4 <checkDemoModCalisma+0x51c>)
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	f040 8087 	bne.w	8007492 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8007384:	4a54      	ldr	r2, [pc, #336]	; (80074d8 <checkDemoModCalisma+0x520>)
 8007386:	2101      	movs	r1, #1
 8007388:	2002      	movs	r0, #2
 800738a:	f7f9 f8eb 	bl	8000564 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 800738e:	4a53      	ldr	r2, [pc, #332]	; (80074dc <checkDemoModCalisma+0x524>)
 8007390:	2101      	movs	r1, #1
 8007392:	2001      	movs	r0, #1
 8007394:	f7f9 f8e6 	bl	8000564 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8007398:	4b4b      	ldr	r3, [pc, #300]	; (80074c8 <checkDemoModCalisma+0x510>)
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	220a      	movs	r2, #10
 800739e:	4950      	ldr	r1, [pc, #320]	; (80074e0 <checkDemoModCalisma+0x528>)
 80073a0:	4618      	mov	r0, r3
 80073a2:	f004 fcd9 	bl	800bd58 <itoa>
			lcd_print(2,12,snum);
 80073a6:	4a4e      	ldr	r2, [pc, #312]	; (80074e0 <checkDemoModCalisma+0x528>)
 80073a8:	210c      	movs	r1, #12
 80073aa:	2002      	movs	r0, #2
 80073ac:	f7f9 f8da 	bl	8000564 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 80073b0:	4b44      	ldr	r3, [pc, #272]	; (80074c4 <checkDemoModCalisma+0x50c>)
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	220a      	movs	r2, #10
 80073b6:	494a      	ldr	r1, [pc, #296]	; (80074e0 <checkDemoModCalisma+0x528>)
 80073b8:	4618      	mov	r0, r3
 80073ba:	f004 fccd 	bl	800bd58 <itoa>
			lcd_print(2,13,snum);
 80073be:	4a48      	ldr	r2, [pc, #288]	; (80074e0 <checkDemoModCalisma+0x528>)
 80073c0:	210d      	movs	r1, #13
 80073c2:	2002      	movs	r0, #2
 80073c4:	f7f9 f8ce 	bl	8000564 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 80073c8:	4b3d      	ldr	r3, [pc, #244]	; (80074c0 <checkDemoModCalisma+0x508>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	220a      	movs	r2, #10
 80073ce:	4944      	ldr	r1, [pc, #272]	; (80074e0 <checkDemoModCalisma+0x528>)
 80073d0:	4618      	mov	r0, r3
 80073d2:	f004 fcc1 	bl	800bd58 <itoa>
			lcd_print(2,14,snum);
 80073d6:	4a42      	ldr	r2, [pc, #264]	; (80074e0 <checkDemoModCalisma+0x528>)
 80073d8:	210e      	movs	r1, #14
 80073da:	2002      	movs	r0, #2
 80073dc:	f7f9 f8c2 	bl	8000564 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 80073e0:	4b36      	ldr	r3, [pc, #216]	; (80074bc <checkDemoModCalisma+0x504>)
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	220a      	movs	r2, #10
 80073e6:	493e      	ldr	r1, [pc, #248]	; (80074e0 <checkDemoModCalisma+0x528>)
 80073e8:	4618      	mov	r0, r3
 80073ea:	f004 fcb5 	bl	800bd58 <itoa>
			lcd_print(2,15,snum);
 80073ee:	4a3c      	ldr	r2, [pc, #240]	; (80074e0 <checkDemoModCalisma+0x528>)
 80073f0:	210f      	movs	r1, #15
 80073f2:	2002      	movs	r0, #2
 80073f4:	f7f9 f8b6 	bl	8000564 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 80073f8:	4b2f      	ldr	r3, [pc, #188]	; (80074b8 <checkDemoModCalisma+0x500>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	220a      	movs	r2, #10
 80073fe:	4938      	ldr	r1, [pc, #224]	; (80074e0 <checkDemoModCalisma+0x528>)
 8007400:	4618      	mov	r0, r3
 8007402:	f004 fca9 	bl	800bd58 <itoa>
			lcd_print(2,16,snum);
 8007406:	4a36      	ldr	r2, [pc, #216]	; (80074e0 <checkDemoModCalisma+0x528>)
 8007408:	2110      	movs	r1, #16
 800740a:	2002      	movs	r0, #2
 800740c:	f7f9 f8aa 	bl	8000564 <lcd_print>
			mesajYazildi=1;
 8007410:	4b34      	ldr	r3, [pc, #208]	; (80074e4 <checkDemoModCalisma+0x52c>)
 8007412:	2201      	movs	r2, #1
 8007414:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8007416:	e03c      	b.n	8007492 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8007418:	4b33      	ldr	r3, [pc, #204]	; (80074e8 <checkDemoModCalisma+0x530>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d003      	beq.n	8007428 <checkDemoModCalisma+0x470>
 8007420:	4b2c      	ldr	r3, [pc, #176]	; (80074d4 <checkDemoModCalisma+0x51c>)
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d134      	bne.n	8007492 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007428:	2200      	movs	r2, #0
 800742a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800742e:	481b      	ldr	r0, [pc, #108]	; (800749c <checkDemoModCalisma+0x4e4>)
 8007430:	f001 fcb3 	bl	8008d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007434:	2200      	movs	r2, #0
 8007436:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800743a:	4818      	ldr	r0, [pc, #96]	; (800749c <checkDemoModCalisma+0x4e4>)
 800743c:	f001 fcad 	bl	8008d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007440:	2200      	movs	r2, #0
 8007442:	2104      	movs	r1, #4
 8007444:	4815      	ldr	r0, [pc, #84]	; (800749c <checkDemoModCalisma+0x4e4>)
 8007446:	f001 fca8 	bl	8008d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800744a:	2200      	movs	r2, #0
 800744c:	2102      	movs	r1, #2
 800744e:	4813      	ldr	r0, [pc, #76]	; (800749c <checkDemoModCalisma+0x4e4>)
 8007450:	f001 fca3 	bl	8008d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007454:	2200      	movs	r2, #0
 8007456:	2101      	movs	r1, #1
 8007458:	4810      	ldr	r0, [pc, #64]	; (800749c <checkDemoModCalisma+0x4e4>)
 800745a:	f001 fc9e 	bl	8008d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800745e:	2200      	movs	r2, #0
 8007460:	2120      	movs	r1, #32
 8007462:	480d      	ldr	r0, [pc, #52]	; (8007498 <checkDemoModCalisma+0x4e0>)
 8007464:	f001 fc99 	bl	8008d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007468:	2200      	movs	r2, #0
 800746a:	2110      	movs	r1, #16
 800746c:	480a      	ldr	r0, [pc, #40]	; (8007498 <checkDemoModCalisma+0x4e0>)
 800746e:	f001 fc94 	bl	8008d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007472:	2200      	movs	r2, #0
 8007474:	2180      	movs	r1, #128	; 0x80
 8007476:	480b      	ldr	r0, [pc, #44]	; (80074a4 <checkDemoModCalisma+0x4ec>)
 8007478:	f001 fc8f 	bl	8008d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800747c:	2200      	movs	r2, #0
 800747e:	2140      	movs	r1, #64	; 0x40
 8007480:	4808      	ldr	r0, [pc, #32]	; (80074a4 <checkDemoModCalisma+0x4ec>)
 8007482:	f001 fc8a 	bl	8008d9a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007486:	2200      	movs	r2, #0
 8007488:	2120      	movs	r1, #32
 800748a:	4806      	ldr	r0, [pc, #24]	; (80074a4 <checkDemoModCalisma+0x4ec>)
 800748c:	f001 fc85 	bl	8008d9a <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8007490:	e7ff      	b.n	8007492 <checkDemoModCalisma+0x4da>
 8007492:	bf00      	nop
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	40011000 	.word	0x40011000
 800749c:	40010c00 	.word	0x40010c00
 80074a0:	20000309 	.word	0x20000309
 80074a4:	40010800 	.word	0x40010800
 80074a8:	20000258 	.word	0x20000258
 80074ac:	20000268 	.word	0x20000268
 80074b0:	20000308 	.word	0x20000308
 80074b4:	200002ee 	.word	0x200002ee
 80074b8:	200002ad 	.word	0x200002ad
 80074bc:	200002ae 	.word	0x200002ae
 80074c0:	200000a4 	.word	0x200000a4
 80074c4:	200000a5 	.word	0x200000a5
 80074c8:	200002af 	.word	0x200002af
 80074cc:	200001e0 	.word	0x200001e0
 80074d0:	200002dc 	.word	0x200002dc
 80074d4:	200002cd 	.word	0x200002cd
 80074d8:	0800cae0 	.word	0x0800cae0
 80074dc:	0800caec 	.word	0x0800caec
 80074e0:	20000250 	.word	0x20000250
 80074e4:	200002e4 	.word	0x200002e4
 80074e8:	200002ce 	.word	0x200002ce

080074ec <mainLoop>:
	char* result = malloc(strlen(combinedString) + 1);
	strcpy(result, combinedString);
	return result;
}

void mainLoop() {
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80074f2:	f7fe f925 	bl	8005740 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80074f6:	2101      	movs	r1, #1
 80074f8:	48ad      	ldr	r0, [pc, #692]	; (80077b0 <mainLoop+0x2c4>)
 80074fa:	f001 fc37 	bl	8008d6c <HAL_GPIO_ReadPin>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d136      	bne.n	8007572 <mainLoop+0x86>
 8007504:	2108      	movs	r1, #8
 8007506:	48ab      	ldr	r0, [pc, #684]	; (80077b4 <mainLoop+0x2c8>)
 8007508:	f001 fc30 	bl	8008d6c <HAL_GPIO_ReadPin>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d12f      	bne.n	8007572 <mainLoop+0x86>
 8007512:	2102      	movs	r1, #2
 8007514:	48a6      	ldr	r0, [pc, #664]	; (80077b0 <mainLoop+0x2c4>)
 8007516:	f001 fc29 	bl	8008d6c <HAL_GPIO_ReadPin>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d128      	bne.n	8007572 <mainLoop+0x86>
 8007520:	2104      	movs	r1, #4
 8007522:	48a3      	ldr	r0, [pc, #652]	; (80077b0 <mainLoop+0x2c4>)
 8007524:	f001 fc22 	bl	8008d6c <HAL_GPIO_ReadPin>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	d121      	bne.n	8007572 <mainLoop+0x86>
 800752e:	2108      	movs	r1, #8
 8007530:	489f      	ldr	r0, [pc, #636]	; (80077b0 <mainLoop+0x2c4>)
 8007532:	f001 fc1b 	bl	8008d6c <HAL_GPIO_ReadPin>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d11a      	bne.n	8007572 <mainLoop+0x86>
 800753c:	2180      	movs	r1, #128	; 0x80
 800753e:	489d      	ldr	r0, [pc, #628]	; (80077b4 <mainLoop+0x2c8>)
 8007540:	f001 fc14 	bl	8008d6c <HAL_GPIO_ReadPin>
 8007544:	4603      	mov	r3, r0
 8007546:	2b01      	cmp	r3, #1
 8007548:	d113      	bne.n	8007572 <mainLoop+0x86>
 800754a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800754e:	4899      	ldr	r0, [pc, #612]	; (80077b4 <mainLoop+0x2c8>)
 8007550:	f001 fc0c 	bl	8008d6c <HAL_GPIO_ReadPin>
 8007554:	4603      	mov	r3, r0
 8007556:	2b01      	cmp	r3, #1
 8007558:	d10b      	bne.n	8007572 <mainLoop+0x86>
 800755a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800755e:	4895      	ldr	r0, [pc, #596]	; (80077b4 <mainLoop+0x2c8>)
 8007560:	f001 fc04 	bl	8008d6c <HAL_GPIO_ReadPin>
 8007564:	4603      	mov	r3, r0
 8007566:	2b01      	cmp	r3, #1
 8007568:	d103      	bne.n	8007572 <mainLoop+0x86>
			butonKontrol=0;
 800756a:	4b93      	ldr	r3, [pc, #588]	; (80077b8 <mainLoop+0x2cc>)
 800756c:	2200      	movs	r2, #0
 800756e:	701a      	strb	r2, [r3, #0]
 8007570:	e003      	b.n	800757a <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8007572:	4b92      	ldr	r3, [pc, #584]	; (80077bc <mainLoop+0x2d0>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a92      	ldr	r2, [pc, #584]	; (80077c0 <mainLoop+0x2d4>)
 8007578:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 800757a:	4b92      	ldr	r3, [pc, #584]	; (80077c4 <mainLoop+0x2d8>)
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d03a      	beq.n	80075f8 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007582:	bf00      	nop
 8007584:	4890      	ldr	r0, [pc, #576]	; (80077c8 <mainLoop+0x2dc>)
 8007586:	f002 fa1a 	bl	80099be <HAL_I2C_GetError>
 800758a:	4603      	mov	r3, r0
 800758c:	2b04      	cmp	r3, #4
 800758e:	d0f9      	beq.n	8007584 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007590:	bf00      	nop
 8007592:	488d      	ldr	r0, [pc, #564]	; (80077c8 <mainLoop+0x2dc>)
 8007594:	f002 fa06 	bl	80099a4 <HAL_I2C_GetState>
 8007598:	4603      	mov	r3, r0
 800759a:	2b20      	cmp	r3, #32
 800759c:	d1f9      	bne.n	8007592 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800759e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80075a2:	9302      	str	r3, [sp, #8]
 80075a4:	236e      	movs	r3, #110	; 0x6e
 80075a6:	9301      	str	r3, [sp, #4]
 80075a8:	4b88      	ldr	r3, [pc, #544]	; (80077cc <mainLoop+0x2e0>)
 80075aa:	9300      	str	r3, [sp, #0]
 80075ac:	236e      	movs	r3, #110	; 0x6e
 80075ae:	2200      	movs	r2, #0
 80075b0:	21a0      	movs	r1, #160	; 0xa0
 80075b2:	4885      	ldr	r0, [pc, #532]	; (80077c8 <mainLoop+0x2dc>)
 80075b4:	f001 fe94 	bl	80092e0 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 80075b8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80075bc:	f000 fe06 	bl	80081cc <HAL_Delay>

		  hafizaYaz=0;
 80075c0:	4b80      	ldr	r3, [pc, #512]	; (80077c4 <mainLoop+0x2d8>)
 80075c2:	2200      	movs	r2, #0
 80075c4:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80075c6:	4b82      	ldr	r3, [pc, #520]	; (80077d0 <mainLoop+0x2e4>)
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d105      	bne.n	80075da <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 80075ce:	4a81      	ldr	r2, [pc, #516]	; (80077d4 <mainLoop+0x2e8>)
 80075d0:	2101      	movs	r1, #1
 80075d2:	2002      	movs	r0, #2
 80075d4:	f7f8 ffc6 	bl	8000564 <lcd_print>
 80075d8:	e008      	b.n	80075ec <mainLoop+0x100>
		  } else if(dilSecim==1) {
 80075da:	4b7d      	ldr	r3, [pc, #500]	; (80077d0 <mainLoop+0x2e4>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d104      	bne.n	80075ec <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 80075e2:	4a7d      	ldr	r2, [pc, #500]	; (80077d8 <mainLoop+0x2ec>)
 80075e4:	2101      	movs	r1, #1
 80075e6:	2002      	movs	r0, #2
 80075e8:	f7f8 ffbc 	bl	8000564 <lcd_print>
		  }

		  HAL_Delay(1000);
 80075ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80075f0:	f000 fdec 	bl	80081cc <HAL_Delay>
		  lcd_clear();
 80075f4:	f7f8 ffe2 	bl	80005bc <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 80075f8:	4b78      	ldr	r3, [pc, #480]	; (80077dc <mainLoop+0x2f0>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	f083 0301 	eor.w	r3, r3, #1
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d06e      	beq.n	80076e4 <mainLoop+0x1f8>
 8007606:	4870      	ldr	r0, [pc, #448]	; (80077c8 <mainLoop+0x2dc>)
 8007608:	f002 f9cc 	bl	80099a4 <HAL_I2C_GetState>
 800760c:	4603      	mov	r3, r0
 800760e:	2b20      	cmp	r3, #32
 8007610:	d168      	bne.n	80076e4 <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 8007612:	4b73      	ldr	r3, [pc, #460]	; (80077e0 <mainLoop+0x2f4>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	f083 0301 	eor.w	r3, r3, #1
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d044      	beq.n	80076aa <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8007620:	4a70      	ldr	r2, [pc, #448]	; (80077e4 <mainLoop+0x2f8>)
 8007622:	2101      	movs	r1, #1
 8007624:	2001      	movs	r0, #1
 8007626:	f7f8 ff9d 	bl	8000564 <lcd_print>
			  if(dilSecim==0) {
 800762a:	4b69      	ldr	r3, [pc, #420]	; (80077d0 <mainLoop+0x2e4>)
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d105      	bne.n	800763e <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 8007632:	4a6d      	ldr	r2, [pc, #436]	; (80077e8 <mainLoop+0x2fc>)
 8007634:	2101      	movs	r1, #1
 8007636:	2002      	movs	r0, #2
 8007638:	f7f8 ff94 	bl	8000564 <lcd_print>
 800763c:	e008      	b.n	8007650 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 800763e:	4b64      	ldr	r3, [pc, #400]	; (80077d0 <mainLoop+0x2e4>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d104      	bne.n	8007650 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8007646:	4a69      	ldr	r2, [pc, #420]	; (80077ec <mainLoop+0x300>)
 8007648:	2101      	movs	r1, #1
 800764a:	2002      	movs	r0, #2
 800764c:	f7f8 ff8a 	bl	8000564 <lcd_print>
			  }
			  HAL_Delay(1000);
 8007650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007654:	f000 fdba 	bl	80081cc <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007658:	bf00      	nop
 800765a:	485b      	ldr	r0, [pc, #364]	; (80077c8 <mainLoop+0x2dc>)
 800765c:	f002 f9af 	bl	80099be <HAL_I2C_GetError>
 8007660:	4603      	mov	r3, r0
 8007662:	2b04      	cmp	r3, #4
 8007664:	d0f9      	beq.n	800765a <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007666:	e003      	b.n	8007670 <mainLoop+0x184>
				  HAL_Delay(1000);
 8007668:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800766c:	f000 fdae 	bl	80081cc <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007670:	4855      	ldr	r0, [pc, #340]	; (80077c8 <mainLoop+0x2dc>)
 8007672:	f002 f997 	bl	80099a4 <HAL_I2C_GetState>
 8007676:	4603      	mov	r3, r0
 8007678:	2b20      	cmp	r3, #32
 800767a:	d1f5      	bne.n	8007668 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 800767c:	4b54      	ldr	r3, [pc, #336]	; (80077d0 <mainLoop+0x2e4>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d105      	bne.n	8007690 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8007684:	4a5a      	ldr	r2, [pc, #360]	; (80077f0 <mainLoop+0x304>)
 8007686:	2101      	movs	r1, #1
 8007688:	2002      	movs	r0, #2
 800768a:	f7f8 ff6b 	bl	8000564 <lcd_print>
 800768e:	e008      	b.n	80076a2 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8007690:	4b4f      	ldr	r3, [pc, #316]	; (80077d0 <mainLoop+0x2e4>)
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	2b01      	cmp	r3, #1
 8007696:	d104      	bne.n	80076a2 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8007698:	4a56      	ldr	r2, [pc, #344]	; (80077f4 <mainLoop+0x308>)
 800769a:	2101      	movs	r1, #1
 800769c:	2002      	movs	r0, #2
 800769e:	f7f8 ff61 	bl	8000564 <lcd_print>
			  }

			  ilkOkuma=1;
 80076a2:	4b4f      	ldr	r3, [pc, #316]	; (80077e0 <mainLoop+0x2f4>)
 80076a4:	2201      	movs	r2, #1
 80076a6:	701a      	strb	r2, [r3, #0]
 80076a8:	e014      	b.n	80076d4 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 80076aa:	4b49      	ldr	r3, [pc, #292]	; (80077d0 <mainLoop+0x2e4>)
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d105      	bne.n	80076be <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 80076b2:	4a51      	ldr	r2, [pc, #324]	; (80077f8 <mainLoop+0x30c>)
 80076b4:	2101      	movs	r1, #1
 80076b6:	2002      	movs	r0, #2
 80076b8:	f7f8 ff54 	bl	8000564 <lcd_print>
 80076bc:	e008      	b.n	80076d0 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 80076be:	4b44      	ldr	r3, [pc, #272]	; (80077d0 <mainLoop+0x2e4>)
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d104      	bne.n	80076d0 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 80076c6:	4a4d      	ldr	r2, [pc, #308]	; (80077fc <mainLoop+0x310>)
 80076c8:	2101      	movs	r1, #1
 80076ca:	2002      	movs	r0, #2
 80076cc:	f7f8 ff4a 	bl	8000564 <lcd_print>
			  }
			  lcd_clear();
 80076d0:	f7f8 ff74 	bl	80005bc <lcd_clear>
		  }

		  lcd_clear();
 80076d4:	f7f8 ff72 	bl	80005bc <lcd_clear>

		  eepromKontrol(1);
 80076d8:	2001      	movs	r0, #1
 80076da:	f7fd fbe9 	bl	8004eb0 <eepromKontrol>
		  hafizaOku=1;
 80076de:	4b3f      	ldr	r3, [pc, #252]	; (80077dc <mainLoop+0x2f0>)
 80076e0:	2201      	movs	r2, #1
 80076e2:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80076e4:	4b46      	ldr	r3, [pc, #280]	; (8007800 <mainLoop+0x314>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d11c      	bne.n	8007726 <mainLoop+0x23a>
 80076ec:	4b45      	ldr	r3, [pc, #276]	; (8007804 <mainLoop+0x318>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	f083 0301 	eor.w	r3, r3, #1
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d015      	beq.n	8007726 <mainLoop+0x23a>
 80076fa:	4b43      	ldr	r3, [pc, #268]	; (8007808 <mainLoop+0x31c>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d111      	bne.n	8007726 <mainLoop+0x23a>
			lcd_clear();
 8007702:	f7f8 ff5b 	bl	80005bc <lcd_clear>
			HAL_Delay(10);
 8007706:	200a      	movs	r0, #10
 8007708:	f000 fd60 	bl	80081cc <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 800770c:	4a3f      	ldr	r2, [pc, #252]	; (800780c <mainLoop+0x320>)
 800770e:	2101      	movs	r1, #1
 8007710:	2001      	movs	r0, #1
 8007712:	f7f8 ff27 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8007716:	4a3e      	ldr	r2, [pc, #248]	; (8007810 <mainLoop+0x324>)
 8007718:	2101      	movs	r1, #1
 800771a:	2002      	movs	r0, #2
 800771c:	f7f8 ff22 	bl	8000564 <lcd_print>
			mesajYazildi=1;
 8007720:	4b38      	ldr	r3, [pc, #224]	; (8007804 <mainLoop+0x318>)
 8007722:	2201      	movs	r2, #1
 8007724:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8007726:	4b36      	ldr	r3, [pc, #216]	; (8007800 <mainLoop+0x314>)
 8007728:	781b      	ldrb	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d112      	bne.n	8007754 <mainLoop+0x268>
 800772e:	2102      	movs	r1, #2
 8007730:	481f      	ldr	r0, [pc, #124]	; (80077b0 <mainLoop+0x2c4>)
 8007732:	f001 fb1b 	bl	8008d6c <HAL_GPIO_ReadPin>
 8007736:	4603      	mov	r3, r0
 8007738:	2b01      	cmp	r3, #1
 800773a:	d10b      	bne.n	8007754 <mainLoop+0x268>
 800773c:	2104      	movs	r1, #4
 800773e:	481c      	ldr	r0, [pc, #112]	; (80077b0 <mainLoop+0x2c4>)
 8007740:	f001 fb14 	bl	8008d6c <HAL_GPIO_ReadPin>
 8007744:	4603      	mov	r3, r0
 8007746:	2b01      	cmp	r3, #1
 8007748:	d104      	bne.n	8007754 <mainLoop+0x268>
			menuGiris=1;
 800774a:	4b2d      	ldr	r3, [pc, #180]	; (8007800 <mainLoop+0x314>)
 800774c:	2201      	movs	r2, #1
 800774e:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8007750:	f7f8 ff34 	bl	80005bc <lcd_clear>
		}

		if(menuGiris==1) {
 8007754:	4b2a      	ldr	r3, [pc, #168]	; (8007800 <mainLoop+0x314>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d102      	bne.n	8007762 <mainLoop+0x276>
			menu(&hi2c1);
 800775c:	481a      	ldr	r0, [pc, #104]	; (80077c8 <mainLoop+0x2dc>)
 800775e:	f7f9 ff1f 	bl	80015a0 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8007762:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007766:	4813      	ldr	r0, [pc, #76]	; (80077b4 <mainLoop+0x2c8>)
 8007768:	f001 fb2f 	bl	8008dca <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 800776c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007770:	4828      	ldr	r0, [pc, #160]	; (8007814 <mainLoop+0x328>)
 8007772:	f001 fafb 	bl	8008d6c <HAL_GPIO_ReadPin>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10a      	bne.n	8007792 <mainLoop+0x2a6>
 800777c:	4b26      	ldr	r3, [pc, #152]	; (8007818 <mainLoop+0x32c>)
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	f083 0301 	eor.w	r3, r3, #1
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d003      	beq.n	8007792 <mainLoop+0x2a6>
			stopVar=1;
 800778a:	4b24      	ldr	r3, [pc, #144]	; (800781c <mainLoop+0x330>)
 800778c:	2201      	movs	r2, #1
 800778e:	701a      	strb	r2, [r3, #0]
 8007790:	e002      	b.n	8007798 <mainLoop+0x2ac>
		} else {
			stopVar=0;
 8007792:	4b22      	ldr	r3, [pc, #136]	; (800781c <mainLoop+0x330>)
 8007794:	2200      	movs	r2, #0
 8007796:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8007798:	f7fd fff2 	bl	8005780 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 800779c:	f7fe f824 	bl	80057e8 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80077a0:	f7fe f868 	bl	8005874 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80077a4:	f7fe f8b8 	bl	8005918 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80077a8:	f7ff fc06 	bl	8006fb8 <checkDemoModCalisma>
		checkLCDBacklight();
 80077ac:	e6a1      	b.n	80074f2 <mainLoop+0x6>
 80077ae:	bf00      	nop
 80077b0:	40010800 	.word	0x40010800
 80077b4:	40011000 	.word	0x40011000
 80077b8:	200002df 	.word	0x200002df
 80077bc:	20000258 	.word	0x20000258
 80077c0:	20000274 	.word	0x20000274
 80077c4:	200002dc 	.word	0x200002dc
 80077c8:	200000fc 	.word	0x200000fc
 80077cc:	200001e0 	.word	0x200001e0
 80077d0:	200002d1 	.word	0x200002d1
 80077d4:	0800cb04 	.word	0x0800cb04
 80077d8:	0800cb18 	.word	0x0800cb18
 80077dc:	200002dd 	.word	0x200002dd
 80077e0:	200002de 	.word	0x200002de
 80077e4:	0800cb2c 	.word	0x0800cb2c
 80077e8:	0800cb40 	.word	0x0800cb40
 80077ec:	0800cb54 	.word	0x0800cb54
 80077f0:	0800cb68 	.word	0x0800cb68
 80077f4:	0800cb7c 	.word	0x0800cb7c
 80077f8:	0800cb90 	.word	0x0800cb90
 80077fc:	0800cba4 	.word	0x0800cba4
 8007800:	200002cd 	.word	0x200002cd
 8007804:	200002e4 	.word	0x200002e4
 8007808:	200002ce 	.word	0x200002ce
 800780c:	0800ca68 	.word	0x0800ca68
 8007810:	0800ca7c 	.word	0x0800ca7c
 8007814:	40010c00 	.word	0x40010c00
 8007818:	20000305 	.word	0x20000305
 800781c:	20000302 	.word	0x20000302

08007820 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007828:	4b04      	ldr	r3, [pc, #16]	; (800783c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	3301      	adds	r3, #1
 800782e:	4a03      	ldr	r2, [pc, #12]	; (800783c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007830:	6013      	str	r3, [r2, #0]
}
 8007832:	bf00      	nop
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	bc80      	pop	{r7}
 800783a:	4770      	bx	lr
 800783c:	20000258 	.word	0x20000258

08007840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007844:	f000 fc60 	bl	8008108 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007848:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800784c:	f000 fcbe 	bl	80081cc <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007850:	f000 f8c6 	bl	80079e0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007854:	f000 f9e8 	bl	8007c28 <MX_GPIO_Init>
  MX_CAN_Init();
 8007858:	f000 f908 	bl	8007a6c <MX_CAN_Init>
  MX_I2C1_Init();
 800785c:	f000 f93a 	bl	8007ad4 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007860:	f000 f966 	bl	8007b30 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007864:	f000 f9b6 	bl	8007bd4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007868:	2201      	movs	r2, #1
 800786a:	2140      	movs	r1, #64	; 0x40
 800786c:	4850      	ldr	r0, [pc, #320]	; (80079b0 <main+0x170>)
 800786e:	f001 fa94 	bl	8008d9a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007872:	2201      	movs	r2, #1
 8007874:	2180      	movs	r1, #128	; 0x80
 8007876:	484e      	ldr	r0, [pc, #312]	; (80079b0 <main+0x170>)
 8007878:	f001 fa8f 	bl	8008d9a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800787c:	200a      	movs	r0, #10
 800787e:	f000 fca5 	bl	80081cc <HAL_Delay>
  lcd_init();
 8007882:	f7f8 fe3d 	bl	8000500 <lcd_init>
  HAL_Delay(10);
 8007886:	200a      	movs	r0, #10
 8007888:	f000 fca0 	bl	80081cc <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 800788c:	4849      	ldr	r0, [pc, #292]	; (80079b4 <main+0x174>)
 800788e:	f003 f937 	bl	800ab00 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007892:	bf00      	nop
 8007894:	4848      	ldr	r0, [pc, #288]	; (80079b8 <main+0x178>)
 8007896:	f002 f892 	bl	80099be <HAL_I2C_GetError>
 800789a:	4603      	mov	r3, r0
 800789c:	2b04      	cmp	r3, #4
 800789e:	d0f9      	beq.n	8007894 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80078a0:	bf00      	nop
 80078a2:	4845      	ldr	r0, [pc, #276]	; (80079b8 <main+0x178>)
 80078a4:	f002 f87e 	bl	80099a4 <HAL_I2C_GetState>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b20      	cmp	r3, #32
 80078ac:	d1f9      	bne.n	80078a2 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80078ae:	2200      	movs	r2, #0
 80078b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80078b4:	483e      	ldr	r0, [pc, #248]	; (80079b0 <main+0x170>)
 80078b6:	f001 fa70 	bl	8008d9a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80078ba:	2200      	movs	r2, #0
 80078bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80078c0:	483b      	ldr	r0, [pc, #236]	; (80079b0 <main+0x170>)
 80078c2:	f001 fa6a 	bl	8008d9a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80078c6:	2200      	movs	r2, #0
 80078c8:	2104      	movs	r1, #4
 80078ca:	4839      	ldr	r0, [pc, #228]	; (80079b0 <main+0x170>)
 80078cc:	f001 fa65 	bl	8008d9a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80078d0:	2200      	movs	r2, #0
 80078d2:	2102      	movs	r1, #2
 80078d4:	4836      	ldr	r0, [pc, #216]	; (80079b0 <main+0x170>)
 80078d6:	f001 fa60 	bl	8008d9a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80078da:	2200      	movs	r2, #0
 80078dc:	2101      	movs	r1, #1
 80078de:	4834      	ldr	r0, [pc, #208]	; (80079b0 <main+0x170>)
 80078e0:	f001 fa5b 	bl	8008d9a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80078e4:	2200      	movs	r2, #0
 80078e6:	2120      	movs	r1, #32
 80078e8:	4834      	ldr	r0, [pc, #208]	; (80079bc <main+0x17c>)
 80078ea:	f001 fa56 	bl	8008d9a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80078ee:	2200      	movs	r2, #0
 80078f0:	2110      	movs	r1, #16
 80078f2:	4832      	ldr	r0, [pc, #200]	; (80079bc <main+0x17c>)
 80078f4:	f001 fa51 	bl	8008d9a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80078f8:	2200      	movs	r2, #0
 80078fa:	2180      	movs	r1, #128	; 0x80
 80078fc:	4830      	ldr	r0, [pc, #192]	; (80079c0 <main+0x180>)
 80078fe:	f001 fa4c 	bl	8008d9a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007902:	2200      	movs	r2, #0
 8007904:	2140      	movs	r1, #64	; 0x40
 8007906:	482e      	ldr	r0, [pc, #184]	; (80079c0 <main+0x180>)
 8007908:	f001 fa47 	bl	8008d9a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800790c:	2200      	movs	r2, #0
 800790e:	2120      	movs	r1, #32
 8007910:	482b      	ldr	r0, [pc, #172]	; (80079c0 <main+0x180>)
 8007912:	f001 fa42 	bl	8008d9a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007916:	2200      	movs	r2, #0
 8007918:	2110      	movs	r1, #16
 800791a:	4829      	ldr	r0, [pc, #164]	; (80079c0 <main+0x180>)
 800791c:	f001 fa3d 	bl	8008d9a <HAL_GPIO_WritePin>

  i2cTest();
 8007920:	f7fd fe60 	bl	80055e4 <i2cTest>
  HAL_Delay(100);
 8007924:	2064      	movs	r0, #100	; 0x64
 8007926:	f000 fc51 	bl	80081cc <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 800792a:	4a26      	ldr	r2, [pc, #152]	; (80079c4 <main+0x184>)
 800792c:	2101      	movs	r1, #1
 800792e:	2001      	movs	r0, #1
 8007930:	f7f8 fe18 	bl	8000564 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007934:	4a24      	ldr	r2, [pc, #144]	; (80079c8 <main+0x188>)
 8007936:	2101      	movs	r1, #1
 8007938:	2002      	movs	r0, #2
 800793a:	f7f8 fe13 	bl	8000564 <lcd_print>
  HAL_Delay(1000);
 800793e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007942:	f000 fc43 	bl	80081cc <HAL_Delay>
  lcd_clear();
 8007946:	f7f8 fe39 	bl	80005bc <lcd_clear>

  eepromKontrol(0);
 800794a:	2000      	movs	r0, #0
 800794c:	f7fd fab0 	bl	8004eb0 <eepromKontrol>
  HAL_Delay(200);
 8007950:	20c8      	movs	r0, #200	; 0xc8
 8007952:	f000 fc3b 	bl	80081cc <HAL_Delay>

  lcd_clear();
 8007956:	f7f8 fe31 	bl	80005bc <lcd_clear>
  HAL_Delay(200);
 800795a:	20c8      	movs	r0, #200	; 0xc8
 800795c:	f000 fc36 	bl	80081cc <HAL_Delay>

  backLightTimer = millis;
 8007960:	4b1a      	ldr	r3, [pc, #104]	; (80079cc <main+0x18c>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a1a      	ldr	r2, [pc, #104]	; (80079d0 <main+0x190>)
 8007966:	6013      	str	r3, [r2, #0]

  //ESP8266_Init(&huart1, "H.İ.D.", "asdasd0099123");

  if(machineID[11] == '\0') {
 8007968:	4b1a      	ldr	r3, [pc, #104]	; (80079d4 <main+0x194>)
 800796a:	7adb      	ldrb	r3, [r3, #11]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d102      	bne.n	8007976 <main+0x136>
	  takeMachineID(0);
 8007970:	2000      	movs	r0, #0
 8007972:	f7f9 f879 	bl	8000a68 <takeMachineID>
  }

  if(wifiSSID[19] == '\0') {
 8007976:	4b18      	ldr	r3, [pc, #96]	; (80079d8 <main+0x198>)
 8007978:	7cdb      	ldrb	r3, [r3, #19]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d102      	bne.n	8007984 <main+0x144>
	  takeWifiSSID(0);
 800797e:	2000      	movs	r0, #0
 8007980:	f7f9 f9c8 	bl	8000d14 <takeWifiSSID>
  }

  if(wifiPass[19] == '\0') {
 8007984:	4b15      	ldr	r3, [pc, #84]	; (80079dc <main+0x19c>)
 8007986:	7cdb      	ldrb	r3, [r3, #19]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d102      	bne.n	8007992 <main+0x152>
	  takeWifiPass(0);
 800798c:	2000      	movs	r0, #0
 800798e:	f7f9 fb77 	bl	8001080 <takeWifiPass>
  }

  if(wifiSSID[19] && wifiPass[19] != '\0') {
 8007992:	4b11      	ldr	r3, [pc, #68]	; (80079d8 <main+0x198>)
 8007994:	7cdb      	ldrb	r3, [r3, #19]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d007      	beq.n	80079aa <main+0x16a>
 800799a:	4b10      	ldr	r3, [pc, #64]	; (80079dc <main+0x19c>)
 800799c:	7cdb      	ldrb	r3, [r3, #19]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d003      	beq.n	80079aa <main+0x16a>
	  writeWiFiCredentialsToEEPROM(wifiSSID, wifiPass);
 80079a2:	490e      	ldr	r1, [pc, #56]	; (80079dc <main+0x19c>)
 80079a4:	480c      	ldr	r0, [pc, #48]	; (80079d8 <main+0x198>)
 80079a6:	f7f9 f81f 	bl	80009e8 <writeWiFiCredentialsToEEPROM>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 80079aa:	f7ff fd9f 	bl	80074ec <mainLoop>
 80079ae:	e7fc      	b.n	80079aa <main+0x16a>
 80079b0:	40010c00 	.word	0x40010c00
 80079b4:	20000150 	.word	0x20000150
 80079b8:	200000fc 	.word	0x200000fc
 80079bc:	40011000 	.word	0x40011000
 80079c0:	40010800 	.word	0x40010800
 80079c4:	0800cbb8 	.word	0x0800cbb8
 80079c8:	0800cbcc 	.word	0x0800cbcc
 80079cc:	20000258 	.word	0x20000258
 80079d0:	20000274 	.word	0x20000274
 80079d4:	20000278 	.word	0x20000278
 80079d8:	20000284 	.word	0x20000284
 80079dc:	20000298 	.word	0x20000298

080079e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b090      	sub	sp, #64	; 0x40
 80079e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80079e6:	f107 0318 	add.w	r3, r7, #24
 80079ea:	2228      	movs	r2, #40	; 0x28
 80079ec:	2100      	movs	r1, #0
 80079ee:	4618      	mov	r0, r3
 80079f0:	f004 f9f6 	bl	800bde0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80079f4:	1d3b      	adds	r3, r7, #4
 80079f6:	2200      	movs	r2, #0
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	605a      	str	r2, [r3, #4]
 80079fc:	609a      	str	r2, [r3, #8]
 80079fe:	60da      	str	r2, [r3, #12]
 8007a00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007a02:	2301      	movs	r3, #1
 8007a04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007a06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007a10:	2301      	movs	r3, #1
 8007a12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007a14:	2302      	movs	r3, #2
 8007a16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007a18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007a1e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007a24:	f107 0318 	add.w	r3, r7, #24
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f002 fc09 	bl	800a240 <HAL_RCC_OscConfig>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d001      	beq.n	8007a38 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007a34:	f000 f9a2 	bl	8007d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007a38:	230f      	movs	r3, #15
 8007a3a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007a40:	2300      	movs	r3, #0
 8007a42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007a4e:	1d3b      	adds	r3, r7, #4
 8007a50:	2102      	movs	r1, #2
 8007a52:	4618      	mov	r0, r3
 8007a54:	f002 fe76 	bl	800a744 <HAL_RCC_ClockConfig>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007a5e:	f000 f98d 	bl	8007d7c <Error_Handler>
  }
}
 8007a62:	bf00      	nop
 8007a64:	3740      	adds	r7, #64	; 0x40
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
	...

08007a6c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007a70:	4b16      	ldr	r3, [pc, #88]	; (8007acc <MX_CAN_Init+0x60>)
 8007a72:	4a17      	ldr	r2, [pc, #92]	; (8007ad0 <MX_CAN_Init+0x64>)
 8007a74:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007a76:	4b15      	ldr	r3, [pc, #84]	; (8007acc <MX_CAN_Init+0x60>)
 8007a78:	2210      	movs	r2, #16
 8007a7a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007a7c:	4b13      	ldr	r3, [pc, #76]	; (8007acc <MX_CAN_Init+0x60>)
 8007a7e:	2200      	movs	r2, #0
 8007a80:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007a82:	4b12      	ldr	r3, [pc, #72]	; (8007acc <MX_CAN_Init+0x60>)
 8007a84:	2200      	movs	r2, #0
 8007a86:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007a88:	4b10      	ldr	r3, [pc, #64]	; (8007acc <MX_CAN_Init+0x60>)
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007a8e:	4b0f      	ldr	r3, [pc, #60]	; (8007acc <MX_CAN_Init+0x60>)
 8007a90:	2200      	movs	r2, #0
 8007a92:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007a94:	4b0d      	ldr	r3, [pc, #52]	; (8007acc <MX_CAN_Init+0x60>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007a9a:	4b0c      	ldr	r3, [pc, #48]	; (8007acc <MX_CAN_Init+0x60>)
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007aa0:	4b0a      	ldr	r3, [pc, #40]	; (8007acc <MX_CAN_Init+0x60>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007aa6:	4b09      	ldr	r3, [pc, #36]	; (8007acc <MX_CAN_Init+0x60>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007aac:	4b07      	ldr	r3, [pc, #28]	; (8007acc <MX_CAN_Init+0x60>)
 8007aae:	2200      	movs	r2, #0
 8007ab0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007ab2:	4b06      	ldr	r3, [pc, #24]	; (8007acc <MX_CAN_Init+0x60>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007ab8:	4804      	ldr	r0, [pc, #16]	; (8007acc <MX_CAN_Init+0x60>)
 8007aba:	f000 fbab 	bl	8008214 <HAL_CAN_Init>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d001      	beq.n	8007ac8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007ac4:	f000 f95a 	bl	8007d7c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007ac8:	bf00      	nop
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	200000d4 	.word	0x200000d4
 8007ad0:	40006400 	.word	0x40006400

08007ad4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007ad8:	4b12      	ldr	r3, [pc, #72]	; (8007b24 <MX_I2C1_Init+0x50>)
 8007ada:	4a13      	ldr	r2, [pc, #76]	; (8007b28 <MX_I2C1_Init+0x54>)
 8007adc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007ade:	4b11      	ldr	r3, [pc, #68]	; (8007b24 <MX_I2C1_Init+0x50>)
 8007ae0:	4a12      	ldr	r2, [pc, #72]	; (8007b2c <MX_I2C1_Init+0x58>)
 8007ae2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007ae4:	4b0f      	ldr	r3, [pc, #60]	; (8007b24 <MX_I2C1_Init+0x50>)
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007aea:	4b0e      	ldr	r3, [pc, #56]	; (8007b24 <MX_I2C1_Init+0x50>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007af0:	4b0c      	ldr	r3, [pc, #48]	; (8007b24 <MX_I2C1_Init+0x50>)
 8007af2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007af6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007af8:	4b0a      	ldr	r3, [pc, #40]	; (8007b24 <MX_I2C1_Init+0x50>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007afe:	4b09      	ldr	r3, [pc, #36]	; (8007b24 <MX_I2C1_Init+0x50>)
 8007b00:	2200      	movs	r2, #0
 8007b02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007b04:	4b07      	ldr	r3, [pc, #28]	; (8007b24 <MX_I2C1_Init+0x50>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007b0a:	4b06      	ldr	r3, [pc, #24]	; (8007b24 <MX_I2C1_Init+0x50>)
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007b10:	4804      	ldr	r0, [pc, #16]	; (8007b24 <MX_I2C1_Init+0x50>)
 8007b12:	f001 f973 	bl	8008dfc <HAL_I2C_Init>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007b1c:	f000 f92e 	bl	8007d7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007b20:	bf00      	nop
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	200000fc 	.word	0x200000fc
 8007b28:	40005400 	.word	0x40005400
 8007b2c:	00061a80 	.word	0x00061a80

08007b30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007b36:	f107 0308 	add.w	r3, r7, #8
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	605a      	str	r2, [r3, #4]
 8007b40:	609a      	str	r2, [r3, #8]
 8007b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007b44:	463b      	mov	r3, r7
 8007b46:	2200      	movs	r2, #0
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007b4c:	4b1f      	ldr	r3, [pc, #124]	; (8007bcc <MX_TIM1_Init+0x9c>)
 8007b4e:	4a20      	ldr	r2, [pc, #128]	; (8007bd0 <MX_TIM1_Init+0xa0>)
 8007b50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007b52:	4b1e      	ldr	r3, [pc, #120]	; (8007bcc <MX_TIM1_Init+0x9c>)
 8007b54:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007b58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b5a:	4b1c      	ldr	r3, [pc, #112]	; (8007bcc <MX_TIM1_Init+0x9c>)
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007b60:	4b1a      	ldr	r3, [pc, #104]	; (8007bcc <MX_TIM1_Init+0x9c>)
 8007b62:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007b66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b68:	4b18      	ldr	r3, [pc, #96]	; (8007bcc <MX_TIM1_Init+0x9c>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007b6e:	4b17      	ldr	r3, [pc, #92]	; (8007bcc <MX_TIM1_Init+0x9c>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007b74:	4b15      	ldr	r3, [pc, #84]	; (8007bcc <MX_TIM1_Init+0x9c>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007b7a:	4814      	ldr	r0, [pc, #80]	; (8007bcc <MX_TIM1_Init+0x9c>)
 8007b7c:	f002 ff70 	bl	800aa60 <HAL_TIM_Base_Init>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007b86:	f000 f8f9 	bl	8007d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007b8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007b90:	f107 0308 	add.w	r3, r7, #8
 8007b94:	4619      	mov	r1, r3
 8007b96:	480d      	ldr	r0, [pc, #52]	; (8007bcc <MX_TIM1_Init+0x9c>)
 8007b98:	f003 f91a 	bl	800add0 <HAL_TIM_ConfigClockSource>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d001      	beq.n	8007ba6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007ba2:	f000 f8eb 	bl	8007d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007baa:	2300      	movs	r3, #0
 8007bac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007bae:	463b      	mov	r3, r7
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4806      	ldr	r0, [pc, #24]	; (8007bcc <MX_TIM1_Init+0x9c>)
 8007bb4:	f003 fb08 	bl	800b1c8 <HAL_TIMEx_MasterConfigSynchronization>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007bbe:	f000 f8dd 	bl	8007d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007bc2:	bf00      	nop
 8007bc4:	3718      	adds	r7, #24
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop
 8007bcc:	20000150 	.word	0x20000150
 8007bd0:	40012c00 	.word	0x40012c00

08007bd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007bd8:	4b11      	ldr	r3, [pc, #68]	; (8007c20 <MX_USART1_UART_Init+0x4c>)
 8007bda:	4a12      	ldr	r2, [pc, #72]	; (8007c24 <MX_USART1_UART_Init+0x50>)
 8007bdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007bde:	4b10      	ldr	r3, [pc, #64]	; (8007c20 <MX_USART1_UART_Init+0x4c>)
 8007be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007be4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007be6:	4b0e      	ldr	r3, [pc, #56]	; (8007c20 <MX_USART1_UART_Init+0x4c>)
 8007be8:	2200      	movs	r2, #0
 8007bea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007bec:	4b0c      	ldr	r3, [pc, #48]	; (8007c20 <MX_USART1_UART_Init+0x4c>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007bf2:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <MX_USART1_UART_Init+0x4c>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007bf8:	4b09      	ldr	r3, [pc, #36]	; (8007c20 <MX_USART1_UART_Init+0x4c>)
 8007bfa:	220c      	movs	r2, #12
 8007bfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007bfe:	4b08      	ldr	r3, [pc, #32]	; (8007c20 <MX_USART1_UART_Init+0x4c>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007c04:	4b06      	ldr	r3, [pc, #24]	; (8007c20 <MX_USART1_UART_Init+0x4c>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007c0a:	4805      	ldr	r0, [pc, #20]	; (8007c20 <MX_USART1_UART_Init+0x4c>)
 8007c0c:	f003 fb5a 	bl	800b2c4 <HAL_UART_Init>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d001      	beq.n	8007c1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007c16:	f000 f8b1 	bl	8007d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007c1a:	bf00      	nop
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	20000198 	.word	0x20000198
 8007c24:	40013800 	.word	0x40013800

08007c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b088      	sub	sp, #32
 8007c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c2e:	f107 0310 	add.w	r3, r7, #16
 8007c32:	2200      	movs	r2, #0
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	605a      	str	r2, [r3, #4]
 8007c38:	609a      	str	r2, [r3, #8]
 8007c3a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c3c:	4b4b      	ldr	r3, [pc, #300]	; (8007d6c <MX_GPIO_Init+0x144>)
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	4a4a      	ldr	r2, [pc, #296]	; (8007d6c <MX_GPIO_Init+0x144>)
 8007c42:	f043 0310 	orr.w	r3, r3, #16
 8007c46:	6193      	str	r3, [r2, #24]
 8007c48:	4b48      	ldr	r3, [pc, #288]	; (8007d6c <MX_GPIO_Init+0x144>)
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	f003 0310 	and.w	r3, r3, #16
 8007c50:	60fb      	str	r3, [r7, #12]
 8007c52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007c54:	4b45      	ldr	r3, [pc, #276]	; (8007d6c <MX_GPIO_Init+0x144>)
 8007c56:	699b      	ldr	r3, [r3, #24]
 8007c58:	4a44      	ldr	r2, [pc, #272]	; (8007d6c <MX_GPIO_Init+0x144>)
 8007c5a:	f043 0320 	orr.w	r3, r3, #32
 8007c5e:	6193      	str	r3, [r2, #24]
 8007c60:	4b42      	ldr	r3, [pc, #264]	; (8007d6c <MX_GPIO_Init+0x144>)
 8007c62:	699b      	ldr	r3, [r3, #24]
 8007c64:	f003 0320 	and.w	r3, r3, #32
 8007c68:	60bb      	str	r3, [r7, #8]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c6c:	4b3f      	ldr	r3, [pc, #252]	; (8007d6c <MX_GPIO_Init+0x144>)
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	4a3e      	ldr	r2, [pc, #248]	; (8007d6c <MX_GPIO_Init+0x144>)
 8007c72:	f043 0304 	orr.w	r3, r3, #4
 8007c76:	6193      	str	r3, [r2, #24]
 8007c78:	4b3c      	ldr	r3, [pc, #240]	; (8007d6c <MX_GPIO_Init+0x144>)
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	f003 0304 	and.w	r3, r3, #4
 8007c80:	607b      	str	r3, [r7, #4]
 8007c82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007c84:	4b39      	ldr	r3, [pc, #228]	; (8007d6c <MX_GPIO_Init+0x144>)
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	4a38      	ldr	r2, [pc, #224]	; (8007d6c <MX_GPIO_Init+0x144>)
 8007c8a:	f043 0308 	orr.w	r3, r3, #8
 8007c8e:	6193      	str	r3, [r2, #24]
 8007c90:	4b36      	ldr	r3, [pc, #216]	; (8007d6c <MX_GPIO_Init+0x144>)
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	f003 0308 	and.w	r3, r3, #8
 8007c98:	603b      	str	r3, [r7, #0]
 8007c9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	21f0      	movs	r1, #240	; 0xf0
 8007ca0:	4833      	ldr	r0, [pc, #204]	; (8007d70 <MX_GPIO_Init+0x148>)
 8007ca2:	f001 f87a 	bl	8008d9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f241 0130 	movw	r1, #4144	; 0x1030
 8007cac:	4831      	ldr	r0, [pc, #196]	; (8007d74 <MX_GPIO_Init+0x14c>)
 8007cae:	f001 f874 	bl	8008d9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f640 4107 	movw	r1, #3079	; 0xc07
 8007cb8:	482f      	ldr	r0, [pc, #188]	; (8007d78 <MX_GPIO_Init+0x150>)
 8007cba:	f001 f86e 	bl	8008d9a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8007cbe:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8007cc2:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007ccc:	f107 0310 	add.w	r3, r7, #16
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	4828      	ldr	r0, [pc, #160]	; (8007d74 <MX_GPIO_Init+0x14c>)
 8007cd4:	f000 fdea 	bl	80088ac <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007cd8:	f248 130f 	movw	r3, #33039	; 0x810f
 8007cdc:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ce6:	f107 0310 	add.w	r3, r7, #16
 8007cea:	4619      	mov	r1, r3
 8007cec:	4820      	ldr	r0, [pc, #128]	; (8007d70 <MX_GPIO_Init+0x148>)
 8007cee:	f000 fddd 	bl	80088ac <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8007cf2:	23f0      	movs	r3, #240	; 0xf0
 8007cf4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cfe:	2302      	movs	r3, #2
 8007d00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d02:	f107 0310 	add.w	r3, r7, #16
 8007d06:	4619      	mov	r1, r3
 8007d08:	4819      	ldr	r0, [pc, #100]	; (8007d70 <MX_GPIO_Init+0x148>)
 8007d0a:	f000 fdcf 	bl	80088ac <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8007d0e:	f241 0330 	movw	r3, #4144	; 0x1030
 8007d12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d14:	2301      	movs	r3, #1
 8007d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d20:	f107 0310 	add.w	r3, r7, #16
 8007d24:	4619      	mov	r1, r3
 8007d26:	4813      	ldr	r0, [pc, #76]	; (8007d74 <MX_GPIO_Init+0x14c>)
 8007d28:	f000 fdc0 	bl	80088ac <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007d2c:	f640 4307 	movw	r3, #3079	; 0xc07
 8007d30:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d32:	2301      	movs	r3, #1
 8007d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d36:	2300      	movs	r3, #0
 8007d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d3e:	f107 0310 	add.w	r3, r7, #16
 8007d42:	4619      	mov	r1, r3
 8007d44:	480c      	ldr	r0, [pc, #48]	; (8007d78 <MX_GPIO_Init+0x150>)
 8007d46:	f000 fdb1 	bl	80088ac <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8007d4a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007d4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d50:	2300      	movs	r3, #0
 8007d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d54:	2300      	movs	r3, #0
 8007d56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d58:	f107 0310 	add.w	r3, r7, #16
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	4806      	ldr	r0, [pc, #24]	; (8007d78 <MX_GPIO_Init+0x150>)
 8007d60:	f000 fda4 	bl	80088ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007d64:	bf00      	nop
 8007d66:	3720      	adds	r7, #32
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	40021000 	.word	0x40021000
 8007d70:	40010800 	.word	0x40010800
 8007d74:	40011000 	.word	0x40011000
 8007d78:	40010c00 	.word	0x40010c00

08007d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8007d80:	bf00      	nop
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bc80      	pop	{r7}
 8007d86:	4770      	bx	lr

08007d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007d8e:	4b15      	ldr	r3, [pc, #84]	; (8007de4 <HAL_MspInit+0x5c>)
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	4a14      	ldr	r2, [pc, #80]	; (8007de4 <HAL_MspInit+0x5c>)
 8007d94:	f043 0301 	orr.w	r3, r3, #1
 8007d98:	6193      	str	r3, [r2, #24]
 8007d9a:	4b12      	ldr	r3, [pc, #72]	; (8007de4 <HAL_MspInit+0x5c>)
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	60bb      	str	r3, [r7, #8]
 8007da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007da6:	4b0f      	ldr	r3, [pc, #60]	; (8007de4 <HAL_MspInit+0x5c>)
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	4a0e      	ldr	r2, [pc, #56]	; (8007de4 <HAL_MspInit+0x5c>)
 8007dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007db0:	61d3      	str	r3, [r2, #28]
 8007db2:	4b0c      	ldr	r3, [pc, #48]	; (8007de4 <HAL_MspInit+0x5c>)
 8007db4:	69db      	ldr	r3, [r3, #28]
 8007db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dba:	607b      	str	r3, [r7, #4]
 8007dbc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007dbe:	4b0a      	ldr	r3, [pc, #40]	; (8007de8 <HAL_MspInit+0x60>)
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	60fb      	str	r3, [r7, #12]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007dca:	60fb      	str	r3, [r7, #12]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	4a04      	ldr	r2, [pc, #16]	; (8007de8 <HAL_MspInit+0x60>)
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007dda:	bf00      	nop
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bc80      	pop	{r7}
 8007de2:	4770      	bx	lr
 8007de4:	40021000 	.word	0x40021000
 8007de8:	40010000 	.word	0x40010000

08007dec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b088      	sub	sp, #32
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007df4:	f107 0310 	add.w	r3, r7, #16
 8007df8:	2200      	movs	r2, #0
 8007dfa:	601a      	str	r2, [r3, #0]
 8007dfc:	605a      	str	r2, [r3, #4]
 8007dfe:	609a      	str	r2, [r3, #8]
 8007e00:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a1c      	ldr	r2, [pc, #112]	; (8007e78 <HAL_CAN_MspInit+0x8c>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d131      	bne.n	8007e70 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007e0c:	4b1b      	ldr	r3, [pc, #108]	; (8007e7c <HAL_CAN_MspInit+0x90>)
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	4a1a      	ldr	r2, [pc, #104]	; (8007e7c <HAL_CAN_MspInit+0x90>)
 8007e12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007e16:	61d3      	str	r3, [r2, #28]
 8007e18:	4b18      	ldr	r3, [pc, #96]	; (8007e7c <HAL_CAN_MspInit+0x90>)
 8007e1a:	69db      	ldr	r3, [r3, #28]
 8007e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e20:	60fb      	str	r3, [r7, #12]
 8007e22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e24:	4b15      	ldr	r3, [pc, #84]	; (8007e7c <HAL_CAN_MspInit+0x90>)
 8007e26:	699b      	ldr	r3, [r3, #24]
 8007e28:	4a14      	ldr	r2, [pc, #80]	; (8007e7c <HAL_CAN_MspInit+0x90>)
 8007e2a:	f043 0304 	orr.w	r3, r3, #4
 8007e2e:	6193      	str	r3, [r2, #24]
 8007e30:	4b12      	ldr	r3, [pc, #72]	; (8007e7c <HAL_CAN_MspInit+0x90>)
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	f003 0304 	and.w	r3, r3, #4
 8007e38:	60bb      	str	r3, [r7, #8]
 8007e3a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007e3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e40:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e42:	2300      	movs	r3, #0
 8007e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e46:	2300      	movs	r3, #0
 8007e48:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e4a:	f107 0310 	add.w	r3, r7, #16
 8007e4e:	4619      	mov	r1, r3
 8007e50:	480b      	ldr	r0, [pc, #44]	; (8007e80 <HAL_CAN_MspInit+0x94>)
 8007e52:	f000 fd2b 	bl	80088ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007e60:	2303      	movs	r3, #3
 8007e62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e64:	f107 0310 	add.w	r3, r7, #16
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4805      	ldr	r0, [pc, #20]	; (8007e80 <HAL_CAN_MspInit+0x94>)
 8007e6c:	f000 fd1e 	bl	80088ac <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8007e70:	bf00      	nop
 8007e72:	3720      	adds	r7, #32
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	40006400 	.word	0x40006400
 8007e7c:	40021000 	.word	0x40021000
 8007e80:	40010800 	.word	0x40010800

08007e84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b088      	sub	sp, #32
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e8c:	f107 0310 	add.w	r3, r7, #16
 8007e90:	2200      	movs	r2, #0
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	605a      	str	r2, [r3, #4]
 8007e96:	609a      	str	r2, [r3, #8]
 8007e98:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a15      	ldr	r2, [pc, #84]	; (8007ef4 <HAL_I2C_MspInit+0x70>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d123      	bne.n	8007eec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ea4:	4b14      	ldr	r3, [pc, #80]	; (8007ef8 <HAL_I2C_MspInit+0x74>)
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	4a13      	ldr	r2, [pc, #76]	; (8007ef8 <HAL_I2C_MspInit+0x74>)
 8007eaa:	f043 0308 	orr.w	r3, r3, #8
 8007eae:	6193      	str	r3, [r2, #24]
 8007eb0:	4b11      	ldr	r3, [pc, #68]	; (8007ef8 <HAL_I2C_MspInit+0x74>)
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	f003 0308 	and.w	r3, r3, #8
 8007eb8:	60fb      	str	r3, [r7, #12]
 8007eba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007ebc:	23c0      	movs	r3, #192	; 0xc0
 8007ebe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007ec0:	2312      	movs	r3, #18
 8007ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ec8:	f107 0310 	add.w	r3, r7, #16
 8007ecc:	4619      	mov	r1, r3
 8007ece:	480b      	ldr	r0, [pc, #44]	; (8007efc <HAL_I2C_MspInit+0x78>)
 8007ed0:	f000 fcec 	bl	80088ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007ed4:	4b08      	ldr	r3, [pc, #32]	; (8007ef8 <HAL_I2C_MspInit+0x74>)
 8007ed6:	69db      	ldr	r3, [r3, #28]
 8007ed8:	4a07      	ldr	r2, [pc, #28]	; (8007ef8 <HAL_I2C_MspInit+0x74>)
 8007eda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ede:	61d3      	str	r3, [r2, #28]
 8007ee0:	4b05      	ldr	r3, [pc, #20]	; (8007ef8 <HAL_I2C_MspInit+0x74>)
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ee8:	60bb      	str	r3, [r7, #8]
 8007eea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007eec:	bf00      	nop
 8007eee:	3720      	adds	r7, #32
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	40005400 	.word	0x40005400
 8007ef8:	40021000 	.word	0x40021000
 8007efc:	40010c00 	.word	0x40010c00

08007f00 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a0a      	ldr	r2, [pc, #40]	; (8007f38 <HAL_I2C_MspDeInit+0x38>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d10d      	bne.n	8007f2e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8007f12:	4b0a      	ldr	r3, [pc, #40]	; (8007f3c <HAL_I2C_MspDeInit+0x3c>)
 8007f14:	69db      	ldr	r3, [r3, #28]
 8007f16:	4a09      	ldr	r2, [pc, #36]	; (8007f3c <HAL_I2C_MspDeInit+0x3c>)
 8007f18:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f1c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8007f1e:	2140      	movs	r1, #64	; 0x40
 8007f20:	4807      	ldr	r0, [pc, #28]	; (8007f40 <HAL_I2C_MspDeInit+0x40>)
 8007f22:	f000 fe57 	bl	8008bd4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8007f26:	2180      	movs	r1, #128	; 0x80
 8007f28:	4805      	ldr	r0, [pc, #20]	; (8007f40 <HAL_I2C_MspDeInit+0x40>)
 8007f2a:	f000 fe53 	bl	8008bd4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8007f2e:	bf00      	nop
 8007f30:	3708      	adds	r7, #8
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	40005400 	.word	0x40005400
 8007f3c:	40021000 	.word	0x40021000
 8007f40:	40010c00 	.word	0x40010c00

08007f44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b084      	sub	sp, #16
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a0d      	ldr	r2, [pc, #52]	; (8007f88 <HAL_TIM_Base_MspInit+0x44>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d113      	bne.n	8007f7e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007f56:	4b0d      	ldr	r3, [pc, #52]	; (8007f8c <HAL_TIM_Base_MspInit+0x48>)
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	4a0c      	ldr	r2, [pc, #48]	; (8007f8c <HAL_TIM_Base_MspInit+0x48>)
 8007f5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007f60:	6193      	str	r3, [r2, #24]
 8007f62:	4b0a      	ldr	r3, [pc, #40]	; (8007f8c <HAL_TIM_Base_MspInit+0x48>)
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8007f6e:	2200      	movs	r2, #0
 8007f70:	2100      	movs	r1, #0
 8007f72:	2019      	movs	r0, #25
 8007f74:	f000 fb21 	bl	80085ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8007f78:	2019      	movs	r0, #25
 8007f7a:	f000 fb3a 	bl	80085f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8007f7e:	bf00      	nop
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	40012c00 	.word	0x40012c00
 8007f8c:	40021000 	.word	0x40021000

08007f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b088      	sub	sp, #32
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f98:	f107 0310 	add.w	r3, r7, #16
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	601a      	str	r2, [r3, #0]
 8007fa0:	605a      	str	r2, [r3, #4]
 8007fa2:	609a      	str	r2, [r3, #8]
 8007fa4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a20      	ldr	r2, [pc, #128]	; (800802c <HAL_UART_MspInit+0x9c>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d139      	bne.n	8008024 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007fb0:	4b1f      	ldr	r3, [pc, #124]	; (8008030 <HAL_UART_MspInit+0xa0>)
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	4a1e      	ldr	r2, [pc, #120]	; (8008030 <HAL_UART_MspInit+0xa0>)
 8007fb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fba:	6193      	str	r3, [r2, #24]
 8007fbc:	4b1c      	ldr	r3, [pc, #112]	; (8008030 <HAL_UART_MspInit+0xa0>)
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fc4:	60fb      	str	r3, [r7, #12]
 8007fc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fc8:	4b19      	ldr	r3, [pc, #100]	; (8008030 <HAL_UART_MspInit+0xa0>)
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	4a18      	ldr	r2, [pc, #96]	; (8008030 <HAL_UART_MspInit+0xa0>)
 8007fce:	f043 0304 	orr.w	r3, r3, #4
 8007fd2:	6193      	str	r3, [r2, #24]
 8007fd4:	4b16      	ldr	r3, [pc, #88]	; (8008030 <HAL_UART_MspInit+0xa0>)
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	f003 0304 	and.w	r3, r3, #4
 8007fdc:	60bb      	str	r3, [r7, #8]
 8007fde:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007fe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fe4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007fea:	2303      	movs	r3, #3
 8007fec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fee:	f107 0310 	add.w	r3, r7, #16
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	480f      	ldr	r0, [pc, #60]	; (8008034 <HAL_UART_MspInit+0xa4>)
 8007ff6:	f000 fc59 	bl	80088ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ffe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008000:	2300      	movs	r3, #0
 8008002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008004:	2300      	movs	r3, #0
 8008006:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008008:	f107 0310 	add.w	r3, r7, #16
 800800c:	4619      	mov	r1, r3
 800800e:	4809      	ldr	r0, [pc, #36]	; (8008034 <HAL_UART_MspInit+0xa4>)
 8008010:	f000 fc4c 	bl	80088ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008014:	2200      	movs	r2, #0
 8008016:	2100      	movs	r1, #0
 8008018:	2025      	movs	r0, #37	; 0x25
 800801a:	f000 face 	bl	80085ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800801e:	2025      	movs	r0, #37	; 0x25
 8008020:	f000 fae7 	bl	80085f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008024:	bf00      	nop
 8008026:	3720      	adds	r7, #32
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	40013800 	.word	0x40013800
 8008030:	40021000 	.word	0x40021000
 8008034:	40010800 	.word	0x40010800

08008038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008038:	b480      	push	{r7}
 800803a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800803c:	e7fe      	b.n	800803c <NMI_Handler+0x4>

0800803e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800803e:	b480      	push	{r7}
 8008040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008042:	e7fe      	b.n	8008042 <HardFault_Handler+0x4>

08008044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008044:	b480      	push	{r7}
 8008046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008048:	e7fe      	b.n	8008048 <MemManage_Handler+0x4>

0800804a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800804a:	b480      	push	{r7}
 800804c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800804e:	e7fe      	b.n	800804e <BusFault_Handler+0x4>

08008050 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008050:	b480      	push	{r7}
 8008052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008054:	e7fe      	b.n	8008054 <UsageFault_Handler+0x4>

08008056 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008056:	b480      	push	{r7}
 8008058:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800805a:	bf00      	nop
 800805c:	46bd      	mov	sp, r7
 800805e:	bc80      	pop	{r7}
 8008060:	4770      	bx	lr

08008062 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008062:	b480      	push	{r7}
 8008064:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008066:	bf00      	nop
 8008068:	46bd      	mov	sp, r7
 800806a:	bc80      	pop	{r7}
 800806c:	4770      	bx	lr

0800806e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800806e:	b480      	push	{r7}
 8008070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008072:	bf00      	nop
 8008074:	46bd      	mov	sp, r7
 8008076:	bc80      	pop	{r7}
 8008078:	4770      	bx	lr

0800807a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800807e:	f000 f889 	bl	8008194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008082:	bf00      	nop
 8008084:	bd80      	pop	{r7, pc}
	...

08008088 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800808c:	4802      	ldr	r0, [pc, #8]	; (8008098 <TIM1_UP_IRQHandler+0x10>)
 800808e:	f002 fd97 	bl	800abc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008092:	bf00      	nop
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20000150 	.word	0x20000150

0800809c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80080a0:	4802      	ldr	r0, [pc, #8]	; (80080ac <USART1_IRQHandler+0x10>)
 80080a2:	f003 f95f 	bl	800b364 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80080a6:	bf00      	nop
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20000198 	.word	0x20000198

080080b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80080b0:	b480      	push	{r7}
 80080b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80080b4:	bf00      	nop
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bc80      	pop	{r7}
 80080ba:	4770      	bx	lr

080080bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80080bc:	480c      	ldr	r0, [pc, #48]	; (80080f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80080be:	490d      	ldr	r1, [pc, #52]	; (80080f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80080c0:	4a0d      	ldr	r2, [pc, #52]	; (80080f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80080c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80080c4:	e002      	b.n	80080cc <LoopCopyDataInit>

080080c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80080c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80080c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80080ca:	3304      	adds	r3, #4

080080cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80080cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80080ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80080d0:	d3f9      	bcc.n	80080c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80080d2:	4a0a      	ldr	r2, [pc, #40]	; (80080fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80080d4:	4c0a      	ldr	r4, [pc, #40]	; (8008100 <LoopFillZerobss+0x22>)
  movs r3, #0
 80080d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80080d8:	e001      	b.n	80080de <LoopFillZerobss>

080080da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80080da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80080dc:	3204      	adds	r2, #4

080080de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80080de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80080e0:	d3fb      	bcc.n	80080da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80080e2:	f7ff ffe5 	bl	80080b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80080e6:	f003 fe83 	bl	800bdf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80080ea:	f7ff fba9 	bl	8007840 <main>
  bx lr
 80080ee:	4770      	bx	lr
  ldr r0, =_sdata
 80080f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80080f4:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 80080f8:	0800cc38 	.word	0x0800cc38
  ldr r2, =_sbss
 80080fc:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8008100:	20000318 	.word	0x20000318

08008104 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008104:	e7fe      	b.n	8008104 <ADC1_2_IRQHandler>
	...

08008108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800810c:	4b08      	ldr	r3, [pc, #32]	; (8008130 <HAL_Init+0x28>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a07      	ldr	r2, [pc, #28]	; (8008130 <HAL_Init+0x28>)
 8008112:	f043 0310 	orr.w	r3, r3, #16
 8008116:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008118:	2003      	movs	r0, #3
 800811a:	f000 fa43 	bl	80085a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800811e:	200f      	movs	r0, #15
 8008120:	f000 f808 	bl	8008134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008124:	f7ff fe30 	bl	8007d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	40022000 	.word	0x40022000

08008134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800813c:	4b12      	ldr	r3, [pc, #72]	; (8008188 <HAL_InitTick+0x54>)
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	4b12      	ldr	r3, [pc, #72]	; (800818c <HAL_InitTick+0x58>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	4619      	mov	r1, r3
 8008146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800814a:	fbb3 f3f1 	udiv	r3, r3, r1
 800814e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008152:	4618      	mov	r0, r3
 8008154:	f000 fa5b 	bl	800860e <HAL_SYSTICK_Config>
 8008158:	4603      	mov	r3, r0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d001      	beq.n	8008162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800815e:	2301      	movs	r3, #1
 8008160:	e00e      	b.n	8008180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b0f      	cmp	r3, #15
 8008166:	d80a      	bhi.n	800817e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008168:	2200      	movs	r2, #0
 800816a:	6879      	ldr	r1, [r7, #4]
 800816c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008170:	f000 fa23 	bl	80085ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008174:	4a06      	ldr	r2, [pc, #24]	; (8008190 <HAL_InitTick+0x5c>)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800817a:	2300      	movs	r3, #0
 800817c:	e000      	b.n	8008180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
}
 8008180:	4618      	mov	r0, r3
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	200000a8 	.word	0x200000a8
 800818c:	200000b0 	.word	0x200000b0
 8008190:	200000ac 	.word	0x200000ac

08008194 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008194:	b480      	push	{r7}
 8008196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008198:	4b05      	ldr	r3, [pc, #20]	; (80081b0 <HAL_IncTick+0x1c>)
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	461a      	mov	r2, r3
 800819e:	4b05      	ldr	r3, [pc, #20]	; (80081b4 <HAL_IncTick+0x20>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4413      	add	r3, r2
 80081a4:	4a03      	ldr	r2, [pc, #12]	; (80081b4 <HAL_IncTick+0x20>)
 80081a6:	6013      	str	r3, [r2, #0]
}
 80081a8:	bf00      	nop
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bc80      	pop	{r7}
 80081ae:	4770      	bx	lr
 80081b0:	200000b0 	.word	0x200000b0
 80081b4:	20000314 	.word	0x20000314

080081b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80081b8:	b480      	push	{r7}
 80081ba:	af00      	add	r7, sp, #0
  return uwTick;
 80081bc:	4b02      	ldr	r3, [pc, #8]	; (80081c8 <HAL_GetTick+0x10>)
 80081be:	681b      	ldr	r3, [r3, #0]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bc80      	pop	{r7}
 80081c6:	4770      	bx	lr
 80081c8:	20000314 	.word	0x20000314

080081cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80081d4:	f7ff fff0 	bl	80081b8 <HAL_GetTick>
 80081d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081e4:	d005      	beq.n	80081f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80081e6:	4b0a      	ldr	r3, [pc, #40]	; (8008210 <HAL_Delay+0x44>)
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	461a      	mov	r2, r3
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4413      	add	r3, r2
 80081f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80081f2:	bf00      	nop
 80081f4:	f7ff ffe0 	bl	80081b8 <HAL_GetTick>
 80081f8:	4602      	mov	r2, r0
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	429a      	cmp	r2, r3
 8008202:	d8f7      	bhi.n	80081f4 <HAL_Delay+0x28>
  {
  }
}
 8008204:	bf00      	nop
 8008206:	bf00      	nop
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	200000b0 	.word	0x200000b0

08008214 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008222:	2301      	movs	r3, #1
 8008224:	e0ed      	b.n	8008402 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 3020 	ldrb.w	r3, [r3, #32]
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	d102      	bne.n	8008238 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f7ff fdda 	bl	8007dec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f042 0201 	orr.w	r2, r2, #1
 8008246:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008248:	f7ff ffb6 	bl	80081b8 <HAL_GetTick>
 800824c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800824e:	e012      	b.n	8008276 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008250:	f7ff ffb2 	bl	80081b8 <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	2b0a      	cmp	r3, #10
 800825c:	d90b      	bls.n	8008276 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008262:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2205      	movs	r2, #5
 800826e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e0c5      	b.n	8008402 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	685b      	ldr	r3, [r3, #4]
 800827c:	f003 0301 	and.w	r3, r3, #1
 8008280:	2b00      	cmp	r3, #0
 8008282:	d0e5      	beq.n	8008250 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f022 0202 	bic.w	r2, r2, #2
 8008292:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008294:	f7ff ff90 	bl	80081b8 <HAL_GetTick>
 8008298:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800829a:	e012      	b.n	80082c2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800829c:	f7ff ff8c 	bl	80081b8 <HAL_GetTick>
 80082a0:	4602      	mov	r2, r0
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	1ad3      	subs	r3, r2, r3
 80082a6:	2b0a      	cmp	r3, #10
 80082a8:	d90b      	bls.n	80082c2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2205      	movs	r2, #5
 80082ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e09f      	b.n	8008402 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1e5      	bne.n	800829c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	7e1b      	ldrb	r3, [r3, #24]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d108      	bne.n	80082ea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	e007      	b.n	80082fa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	7e5b      	ldrb	r3, [r3, #25]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d108      	bne.n	8008314 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008310:	601a      	str	r2, [r3, #0]
 8008312:	e007      	b.n	8008324 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008322:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	7e9b      	ldrb	r3, [r3, #26]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d108      	bne.n	800833e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f042 0220 	orr.w	r2, r2, #32
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	e007      	b.n	800834e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f022 0220 	bic.w	r2, r2, #32
 800834c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	7edb      	ldrb	r3, [r3, #27]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d108      	bne.n	8008368 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f022 0210 	bic.w	r2, r2, #16
 8008364:	601a      	str	r2, [r3, #0]
 8008366:	e007      	b.n	8008378 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f042 0210 	orr.w	r2, r2, #16
 8008376:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	7f1b      	ldrb	r3, [r3, #28]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d108      	bne.n	8008392 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f042 0208 	orr.w	r2, r2, #8
 800838e:	601a      	str	r2, [r3, #0]
 8008390:	e007      	b.n	80083a2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f022 0208 	bic.w	r2, r2, #8
 80083a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	7f5b      	ldrb	r3, [r3, #29]
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d108      	bne.n	80083bc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	681a      	ldr	r2, [r3, #0]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f042 0204 	orr.w	r2, r2, #4
 80083b8:	601a      	str	r2, [r3, #0]
 80083ba:	e007      	b.n	80083cc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f022 0204 	bic.w	r2, r2, #4
 80083ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	689a      	ldr	r2, [r3, #8]
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	431a      	orrs	r2, r3
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	431a      	orrs	r2, r3
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	695b      	ldr	r3, [r3, #20]
 80083e0:	ea42 0103 	orr.w	r1, r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	1e5a      	subs	r2, r3, #1
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	430a      	orrs	r2, r1
 80083f0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2200      	movs	r2, #0
 80083f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	3710      	adds	r7, #16
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
	...

0800840c <__NVIC_SetPriorityGrouping>:
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f003 0307 	and.w	r3, r3, #7
 800841a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800841c:	4b0c      	ldr	r3, [pc, #48]	; (8008450 <__NVIC_SetPriorityGrouping+0x44>)
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008422:	68ba      	ldr	r2, [r7, #8]
 8008424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008428:	4013      	ands	r3, r2
 800842a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008434:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800843c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800843e:	4a04      	ldr	r2, [pc, #16]	; (8008450 <__NVIC_SetPriorityGrouping+0x44>)
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	60d3      	str	r3, [r2, #12]
}
 8008444:	bf00      	nop
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	bc80      	pop	{r7}
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	e000ed00 	.word	0xe000ed00

08008454 <__NVIC_GetPriorityGrouping>:
{
 8008454:	b480      	push	{r7}
 8008456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008458:	4b04      	ldr	r3, [pc, #16]	; (800846c <__NVIC_GetPriorityGrouping+0x18>)
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	0a1b      	lsrs	r3, r3, #8
 800845e:	f003 0307 	and.w	r3, r3, #7
}
 8008462:	4618      	mov	r0, r3
 8008464:	46bd      	mov	sp, r7
 8008466:	bc80      	pop	{r7}
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	e000ed00 	.word	0xe000ed00

08008470 <__NVIC_EnableIRQ>:
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	4603      	mov	r3, r0
 8008478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800847a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800847e:	2b00      	cmp	r3, #0
 8008480:	db0b      	blt.n	800849a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008482:	79fb      	ldrb	r3, [r7, #7]
 8008484:	f003 021f 	and.w	r2, r3, #31
 8008488:	4906      	ldr	r1, [pc, #24]	; (80084a4 <__NVIC_EnableIRQ+0x34>)
 800848a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800848e:	095b      	lsrs	r3, r3, #5
 8008490:	2001      	movs	r0, #1
 8008492:	fa00 f202 	lsl.w	r2, r0, r2
 8008496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800849a:	bf00      	nop
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	bc80      	pop	{r7}
 80084a2:	4770      	bx	lr
 80084a4:	e000e100 	.word	0xe000e100

080084a8 <__NVIC_SetPriority>:
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	4603      	mov	r3, r0
 80084b0:	6039      	str	r1, [r7, #0]
 80084b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	db0a      	blt.n	80084d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	b2da      	uxtb	r2, r3
 80084c0:	490c      	ldr	r1, [pc, #48]	; (80084f4 <__NVIC_SetPriority+0x4c>)
 80084c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084c6:	0112      	lsls	r2, r2, #4
 80084c8:	b2d2      	uxtb	r2, r2
 80084ca:	440b      	add	r3, r1
 80084cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80084d0:	e00a      	b.n	80084e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	4908      	ldr	r1, [pc, #32]	; (80084f8 <__NVIC_SetPriority+0x50>)
 80084d8:	79fb      	ldrb	r3, [r7, #7]
 80084da:	f003 030f 	and.w	r3, r3, #15
 80084de:	3b04      	subs	r3, #4
 80084e0:	0112      	lsls	r2, r2, #4
 80084e2:	b2d2      	uxtb	r2, r2
 80084e4:	440b      	add	r3, r1
 80084e6:	761a      	strb	r2, [r3, #24]
}
 80084e8:	bf00      	nop
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bc80      	pop	{r7}
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	e000e100 	.word	0xe000e100
 80084f8:	e000ed00 	.word	0xe000ed00

080084fc <NVIC_EncodePriority>:
{
 80084fc:	b480      	push	{r7}
 80084fe:	b089      	sub	sp, #36	; 0x24
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	f003 0307 	and.w	r3, r3, #7
 800850e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	f1c3 0307 	rsb	r3, r3, #7
 8008516:	2b04      	cmp	r3, #4
 8008518:	bf28      	it	cs
 800851a:	2304      	movcs	r3, #4
 800851c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	3304      	adds	r3, #4
 8008522:	2b06      	cmp	r3, #6
 8008524:	d902      	bls.n	800852c <NVIC_EncodePriority+0x30>
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	3b03      	subs	r3, #3
 800852a:	e000      	b.n	800852e <NVIC_EncodePriority+0x32>
 800852c:	2300      	movs	r3, #0
 800852e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008530:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	fa02 f303 	lsl.w	r3, r2, r3
 800853a:	43da      	mvns	r2, r3
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	401a      	ands	r2, r3
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008544:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	fa01 f303 	lsl.w	r3, r1, r3
 800854e:	43d9      	mvns	r1, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008554:	4313      	orrs	r3, r2
}
 8008556:	4618      	mov	r0, r3
 8008558:	3724      	adds	r7, #36	; 0x24
 800855a:	46bd      	mov	sp, r7
 800855c:	bc80      	pop	{r7}
 800855e:	4770      	bx	lr

08008560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b082      	sub	sp, #8
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	3b01      	subs	r3, #1
 800856c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008570:	d301      	bcc.n	8008576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008572:	2301      	movs	r3, #1
 8008574:	e00f      	b.n	8008596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008576:	4a0a      	ldr	r2, [pc, #40]	; (80085a0 <SysTick_Config+0x40>)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	3b01      	subs	r3, #1
 800857c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800857e:	210f      	movs	r1, #15
 8008580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008584:	f7ff ff90 	bl	80084a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008588:	4b05      	ldr	r3, [pc, #20]	; (80085a0 <SysTick_Config+0x40>)
 800858a:	2200      	movs	r2, #0
 800858c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800858e:	4b04      	ldr	r3, [pc, #16]	; (80085a0 <SysTick_Config+0x40>)
 8008590:	2207      	movs	r2, #7
 8008592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	e000e010 	.word	0xe000e010

080085a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f7ff ff2d 	bl	800840c <__NVIC_SetPriorityGrouping>
}
 80085b2:	bf00      	nop
 80085b4:	3708      	adds	r7, #8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b086      	sub	sp, #24
 80085be:	af00      	add	r7, sp, #0
 80085c0:	4603      	mov	r3, r0
 80085c2:	60b9      	str	r1, [r7, #8]
 80085c4:	607a      	str	r2, [r7, #4]
 80085c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80085cc:	f7ff ff42 	bl	8008454 <__NVIC_GetPriorityGrouping>
 80085d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	68b9      	ldr	r1, [r7, #8]
 80085d6:	6978      	ldr	r0, [r7, #20]
 80085d8:	f7ff ff90 	bl	80084fc <NVIC_EncodePriority>
 80085dc:	4602      	mov	r2, r0
 80085de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085e2:	4611      	mov	r1, r2
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7ff ff5f 	bl	80084a8 <__NVIC_SetPriority>
}
 80085ea:	bf00      	nop
 80085ec:	3718      	adds	r7, #24
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b082      	sub	sp, #8
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	4603      	mov	r3, r0
 80085fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80085fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008600:	4618      	mov	r0, r3
 8008602:	f7ff ff35 	bl	8008470 <__NVIC_EnableIRQ>
}
 8008606:	bf00      	nop
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b082      	sub	sp, #8
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7ff ffa2 	bl	8008560 <SysTick_Config>
 800861c:	4603      	mov	r3, r0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008626:	b480      	push	{r7}
 8008628:	b085      	sub	sp, #20
 800862a:	af00      	add	r7, sp, #0
 800862c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b02      	cmp	r3, #2
 800863c:	d008      	beq.n	8008650 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2204      	movs	r2, #4
 8008642:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e020      	b.n	8008692 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f022 020e 	bic.w	r2, r2, #14
 800865e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f022 0201 	bic.w	r2, r2, #1
 800866e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008678:	2101      	movs	r1, #1
 800867a:	fa01 f202 	lsl.w	r2, r1, r2
 800867e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008690:	7bfb      	ldrb	r3, [r7, #15]
}
 8008692:	4618      	mov	r0, r3
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	bc80      	pop	{r7}
 800869a:	4770      	bx	lr

0800869c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086a4:	2300      	movs	r3, #0
 80086a6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d005      	beq.n	80086c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2204      	movs	r2, #4
 80086b8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	73fb      	strb	r3, [r7, #15]
 80086be:	e0d6      	b.n	800886e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f022 020e 	bic.w	r2, r2, #14
 80086ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f022 0201 	bic.w	r2, r2, #1
 80086de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	461a      	mov	r2, r3
 80086e6:	4b64      	ldr	r3, [pc, #400]	; (8008878 <HAL_DMA_Abort_IT+0x1dc>)
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d958      	bls.n	800879e <HAL_DMA_Abort_IT+0x102>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a62      	ldr	r2, [pc, #392]	; (800887c <HAL_DMA_Abort_IT+0x1e0>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d04f      	beq.n	8008796 <HAL_DMA_Abort_IT+0xfa>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a61      	ldr	r2, [pc, #388]	; (8008880 <HAL_DMA_Abort_IT+0x1e4>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d048      	beq.n	8008792 <HAL_DMA_Abort_IT+0xf6>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a5f      	ldr	r2, [pc, #380]	; (8008884 <HAL_DMA_Abort_IT+0x1e8>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d040      	beq.n	800878c <HAL_DMA_Abort_IT+0xf0>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a5e      	ldr	r2, [pc, #376]	; (8008888 <HAL_DMA_Abort_IT+0x1ec>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d038      	beq.n	8008786 <HAL_DMA_Abort_IT+0xea>
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a5c      	ldr	r2, [pc, #368]	; (800888c <HAL_DMA_Abort_IT+0x1f0>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d030      	beq.n	8008780 <HAL_DMA_Abort_IT+0xe4>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a5b      	ldr	r2, [pc, #364]	; (8008890 <HAL_DMA_Abort_IT+0x1f4>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d028      	beq.n	800877a <HAL_DMA_Abort_IT+0xde>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a52      	ldr	r2, [pc, #328]	; (8008878 <HAL_DMA_Abort_IT+0x1dc>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d020      	beq.n	8008774 <HAL_DMA_Abort_IT+0xd8>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a57      	ldr	r2, [pc, #348]	; (8008894 <HAL_DMA_Abort_IT+0x1f8>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d019      	beq.n	8008770 <HAL_DMA_Abort_IT+0xd4>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	4a55      	ldr	r2, [pc, #340]	; (8008898 <HAL_DMA_Abort_IT+0x1fc>)
 8008742:	4293      	cmp	r3, r2
 8008744:	d012      	beq.n	800876c <HAL_DMA_Abort_IT+0xd0>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a54      	ldr	r2, [pc, #336]	; (800889c <HAL_DMA_Abort_IT+0x200>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d00a      	beq.n	8008766 <HAL_DMA_Abort_IT+0xca>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a52      	ldr	r2, [pc, #328]	; (80088a0 <HAL_DMA_Abort_IT+0x204>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d102      	bne.n	8008760 <HAL_DMA_Abort_IT+0xc4>
 800875a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800875e:	e01b      	b.n	8008798 <HAL_DMA_Abort_IT+0xfc>
 8008760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008764:	e018      	b.n	8008798 <HAL_DMA_Abort_IT+0xfc>
 8008766:	f44f 7380 	mov.w	r3, #256	; 0x100
 800876a:	e015      	b.n	8008798 <HAL_DMA_Abort_IT+0xfc>
 800876c:	2310      	movs	r3, #16
 800876e:	e013      	b.n	8008798 <HAL_DMA_Abort_IT+0xfc>
 8008770:	2301      	movs	r3, #1
 8008772:	e011      	b.n	8008798 <HAL_DMA_Abort_IT+0xfc>
 8008774:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008778:	e00e      	b.n	8008798 <HAL_DMA_Abort_IT+0xfc>
 800877a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800877e:	e00b      	b.n	8008798 <HAL_DMA_Abort_IT+0xfc>
 8008780:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008784:	e008      	b.n	8008798 <HAL_DMA_Abort_IT+0xfc>
 8008786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800878a:	e005      	b.n	8008798 <HAL_DMA_Abort_IT+0xfc>
 800878c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008790:	e002      	b.n	8008798 <HAL_DMA_Abort_IT+0xfc>
 8008792:	2310      	movs	r3, #16
 8008794:	e000      	b.n	8008798 <HAL_DMA_Abort_IT+0xfc>
 8008796:	2301      	movs	r3, #1
 8008798:	4a42      	ldr	r2, [pc, #264]	; (80088a4 <HAL_DMA_Abort_IT+0x208>)
 800879a:	6053      	str	r3, [r2, #4]
 800879c:	e057      	b.n	800884e <HAL_DMA_Abort_IT+0x1b2>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a36      	ldr	r2, [pc, #216]	; (800887c <HAL_DMA_Abort_IT+0x1e0>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d04f      	beq.n	8008848 <HAL_DMA_Abort_IT+0x1ac>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a34      	ldr	r2, [pc, #208]	; (8008880 <HAL_DMA_Abort_IT+0x1e4>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d048      	beq.n	8008844 <HAL_DMA_Abort_IT+0x1a8>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a33      	ldr	r2, [pc, #204]	; (8008884 <HAL_DMA_Abort_IT+0x1e8>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d040      	beq.n	800883e <HAL_DMA_Abort_IT+0x1a2>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a31      	ldr	r2, [pc, #196]	; (8008888 <HAL_DMA_Abort_IT+0x1ec>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d038      	beq.n	8008838 <HAL_DMA_Abort_IT+0x19c>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a30      	ldr	r2, [pc, #192]	; (800888c <HAL_DMA_Abort_IT+0x1f0>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d030      	beq.n	8008832 <HAL_DMA_Abort_IT+0x196>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a2e      	ldr	r2, [pc, #184]	; (8008890 <HAL_DMA_Abort_IT+0x1f4>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d028      	beq.n	800882c <HAL_DMA_Abort_IT+0x190>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a26      	ldr	r2, [pc, #152]	; (8008878 <HAL_DMA_Abort_IT+0x1dc>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d020      	beq.n	8008826 <HAL_DMA_Abort_IT+0x18a>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a2a      	ldr	r2, [pc, #168]	; (8008894 <HAL_DMA_Abort_IT+0x1f8>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d019      	beq.n	8008822 <HAL_DMA_Abort_IT+0x186>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a29      	ldr	r2, [pc, #164]	; (8008898 <HAL_DMA_Abort_IT+0x1fc>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d012      	beq.n	800881e <HAL_DMA_Abort_IT+0x182>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a27      	ldr	r2, [pc, #156]	; (800889c <HAL_DMA_Abort_IT+0x200>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d00a      	beq.n	8008818 <HAL_DMA_Abort_IT+0x17c>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a26      	ldr	r2, [pc, #152]	; (80088a0 <HAL_DMA_Abort_IT+0x204>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d102      	bne.n	8008812 <HAL_DMA_Abort_IT+0x176>
 800880c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008810:	e01b      	b.n	800884a <HAL_DMA_Abort_IT+0x1ae>
 8008812:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008816:	e018      	b.n	800884a <HAL_DMA_Abort_IT+0x1ae>
 8008818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800881c:	e015      	b.n	800884a <HAL_DMA_Abort_IT+0x1ae>
 800881e:	2310      	movs	r3, #16
 8008820:	e013      	b.n	800884a <HAL_DMA_Abort_IT+0x1ae>
 8008822:	2301      	movs	r3, #1
 8008824:	e011      	b.n	800884a <HAL_DMA_Abort_IT+0x1ae>
 8008826:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800882a:	e00e      	b.n	800884a <HAL_DMA_Abort_IT+0x1ae>
 800882c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008830:	e00b      	b.n	800884a <HAL_DMA_Abort_IT+0x1ae>
 8008832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008836:	e008      	b.n	800884a <HAL_DMA_Abort_IT+0x1ae>
 8008838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800883c:	e005      	b.n	800884a <HAL_DMA_Abort_IT+0x1ae>
 800883e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008842:	e002      	b.n	800884a <HAL_DMA_Abort_IT+0x1ae>
 8008844:	2310      	movs	r3, #16
 8008846:	e000      	b.n	800884a <HAL_DMA_Abort_IT+0x1ae>
 8008848:	2301      	movs	r3, #1
 800884a:	4a17      	ldr	r2, [pc, #92]	; (80088a8 <HAL_DMA_Abort_IT+0x20c>)
 800884c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2201      	movs	r2, #1
 8008852:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008862:	2b00      	cmp	r3, #0
 8008864:	d003      	beq.n	800886e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	4798      	blx	r3
    } 
  }
  return status;
 800886e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3710      	adds	r7, #16
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	40020080 	.word	0x40020080
 800887c:	40020008 	.word	0x40020008
 8008880:	4002001c 	.word	0x4002001c
 8008884:	40020030 	.word	0x40020030
 8008888:	40020044 	.word	0x40020044
 800888c:	40020058 	.word	0x40020058
 8008890:	4002006c 	.word	0x4002006c
 8008894:	40020408 	.word	0x40020408
 8008898:	4002041c 	.word	0x4002041c
 800889c:	40020430 	.word	0x40020430
 80088a0:	40020444 	.word	0x40020444
 80088a4:	40020400 	.word	0x40020400
 80088a8:	40020000 	.word	0x40020000

080088ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b08b      	sub	sp, #44	; 0x2c
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80088b6:	2300      	movs	r3, #0
 80088b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80088ba:	2300      	movs	r3, #0
 80088bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80088be:	e179      	b.n	8008bb4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80088c0:	2201      	movs	r2, #1
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	fa02 f303 	lsl.w	r3, r2, r3
 80088c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	69fa      	ldr	r2, [r7, #28]
 80088d0:	4013      	ands	r3, r2
 80088d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80088d4:	69ba      	ldr	r2, [r7, #24]
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	429a      	cmp	r2, r3
 80088da:	f040 8168 	bne.w	8008bae <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	4a96      	ldr	r2, [pc, #600]	; (8008b3c <HAL_GPIO_Init+0x290>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d05e      	beq.n	80089a6 <HAL_GPIO_Init+0xfa>
 80088e8:	4a94      	ldr	r2, [pc, #592]	; (8008b3c <HAL_GPIO_Init+0x290>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d875      	bhi.n	80089da <HAL_GPIO_Init+0x12e>
 80088ee:	4a94      	ldr	r2, [pc, #592]	; (8008b40 <HAL_GPIO_Init+0x294>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d058      	beq.n	80089a6 <HAL_GPIO_Init+0xfa>
 80088f4:	4a92      	ldr	r2, [pc, #584]	; (8008b40 <HAL_GPIO_Init+0x294>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d86f      	bhi.n	80089da <HAL_GPIO_Init+0x12e>
 80088fa:	4a92      	ldr	r2, [pc, #584]	; (8008b44 <HAL_GPIO_Init+0x298>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d052      	beq.n	80089a6 <HAL_GPIO_Init+0xfa>
 8008900:	4a90      	ldr	r2, [pc, #576]	; (8008b44 <HAL_GPIO_Init+0x298>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d869      	bhi.n	80089da <HAL_GPIO_Init+0x12e>
 8008906:	4a90      	ldr	r2, [pc, #576]	; (8008b48 <HAL_GPIO_Init+0x29c>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d04c      	beq.n	80089a6 <HAL_GPIO_Init+0xfa>
 800890c:	4a8e      	ldr	r2, [pc, #568]	; (8008b48 <HAL_GPIO_Init+0x29c>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d863      	bhi.n	80089da <HAL_GPIO_Init+0x12e>
 8008912:	4a8e      	ldr	r2, [pc, #568]	; (8008b4c <HAL_GPIO_Init+0x2a0>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d046      	beq.n	80089a6 <HAL_GPIO_Init+0xfa>
 8008918:	4a8c      	ldr	r2, [pc, #560]	; (8008b4c <HAL_GPIO_Init+0x2a0>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d85d      	bhi.n	80089da <HAL_GPIO_Init+0x12e>
 800891e:	2b12      	cmp	r3, #18
 8008920:	d82a      	bhi.n	8008978 <HAL_GPIO_Init+0xcc>
 8008922:	2b12      	cmp	r3, #18
 8008924:	d859      	bhi.n	80089da <HAL_GPIO_Init+0x12e>
 8008926:	a201      	add	r2, pc, #4	; (adr r2, 800892c <HAL_GPIO_Init+0x80>)
 8008928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892c:	080089a7 	.word	0x080089a7
 8008930:	08008981 	.word	0x08008981
 8008934:	08008993 	.word	0x08008993
 8008938:	080089d5 	.word	0x080089d5
 800893c:	080089db 	.word	0x080089db
 8008940:	080089db 	.word	0x080089db
 8008944:	080089db 	.word	0x080089db
 8008948:	080089db 	.word	0x080089db
 800894c:	080089db 	.word	0x080089db
 8008950:	080089db 	.word	0x080089db
 8008954:	080089db 	.word	0x080089db
 8008958:	080089db 	.word	0x080089db
 800895c:	080089db 	.word	0x080089db
 8008960:	080089db 	.word	0x080089db
 8008964:	080089db 	.word	0x080089db
 8008968:	080089db 	.word	0x080089db
 800896c:	080089db 	.word	0x080089db
 8008970:	08008989 	.word	0x08008989
 8008974:	0800899d 	.word	0x0800899d
 8008978:	4a75      	ldr	r2, [pc, #468]	; (8008b50 <HAL_GPIO_Init+0x2a4>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d013      	beq.n	80089a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800897e:	e02c      	b.n	80089da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	623b      	str	r3, [r7, #32]
          break;
 8008986:	e029      	b.n	80089dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	3304      	adds	r3, #4
 800898e:	623b      	str	r3, [r7, #32]
          break;
 8008990:	e024      	b.n	80089dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	3308      	adds	r3, #8
 8008998:	623b      	str	r3, [r7, #32]
          break;
 800899a:	e01f      	b.n	80089dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	330c      	adds	r3, #12
 80089a2:	623b      	str	r3, [r7, #32]
          break;
 80089a4:	e01a      	b.n	80089dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d102      	bne.n	80089b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80089ae:	2304      	movs	r3, #4
 80089b0:	623b      	str	r3, [r7, #32]
          break;
 80089b2:	e013      	b.n	80089dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	689b      	ldr	r3, [r3, #8]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d105      	bne.n	80089c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80089bc:	2308      	movs	r3, #8
 80089be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	69fa      	ldr	r2, [r7, #28]
 80089c4:	611a      	str	r2, [r3, #16]
          break;
 80089c6:	e009      	b.n	80089dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80089c8:	2308      	movs	r3, #8
 80089ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	69fa      	ldr	r2, [r7, #28]
 80089d0:	615a      	str	r2, [r3, #20]
          break;
 80089d2:	e003      	b.n	80089dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80089d4:	2300      	movs	r3, #0
 80089d6:	623b      	str	r3, [r7, #32]
          break;
 80089d8:	e000      	b.n	80089dc <HAL_GPIO_Init+0x130>
          break;
 80089da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	2bff      	cmp	r3, #255	; 0xff
 80089e0:	d801      	bhi.n	80089e6 <HAL_GPIO_Init+0x13a>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	e001      	b.n	80089ea <HAL_GPIO_Init+0x13e>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	3304      	adds	r3, #4
 80089ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80089ec:	69bb      	ldr	r3, [r7, #24]
 80089ee:	2bff      	cmp	r3, #255	; 0xff
 80089f0:	d802      	bhi.n	80089f8 <HAL_GPIO_Init+0x14c>
 80089f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	e002      	b.n	80089fe <HAL_GPIO_Init+0x152>
 80089f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fa:	3b08      	subs	r3, #8
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	210f      	movs	r1, #15
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	fa01 f303 	lsl.w	r3, r1, r3
 8008a0c:	43db      	mvns	r3, r3
 8008a0e:	401a      	ands	r2, r3
 8008a10:	6a39      	ldr	r1, [r7, #32]
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	fa01 f303 	lsl.w	r3, r1, r3
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	f000 80c1 	beq.w	8008bae <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008a2c:	4b49      	ldr	r3, [pc, #292]	; (8008b54 <HAL_GPIO_Init+0x2a8>)
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	4a48      	ldr	r2, [pc, #288]	; (8008b54 <HAL_GPIO_Init+0x2a8>)
 8008a32:	f043 0301 	orr.w	r3, r3, #1
 8008a36:	6193      	str	r3, [r2, #24]
 8008a38:	4b46      	ldr	r3, [pc, #280]	; (8008b54 <HAL_GPIO_Init+0x2a8>)
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	f003 0301 	and.w	r3, r3, #1
 8008a40:	60bb      	str	r3, [r7, #8]
 8008a42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008a44:	4a44      	ldr	r2, [pc, #272]	; (8008b58 <HAL_GPIO_Init+0x2ac>)
 8008a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a48:	089b      	lsrs	r3, r3, #2
 8008a4a:	3302      	adds	r3, #2
 8008a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a54:	f003 0303 	and.w	r3, r3, #3
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	220f      	movs	r2, #15
 8008a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a60:	43db      	mvns	r3, r3
 8008a62:	68fa      	ldr	r2, [r7, #12]
 8008a64:	4013      	ands	r3, r2
 8008a66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a3c      	ldr	r2, [pc, #240]	; (8008b5c <HAL_GPIO_Init+0x2b0>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d01f      	beq.n	8008ab0 <HAL_GPIO_Init+0x204>
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a3b      	ldr	r2, [pc, #236]	; (8008b60 <HAL_GPIO_Init+0x2b4>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d019      	beq.n	8008aac <HAL_GPIO_Init+0x200>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a3a      	ldr	r2, [pc, #232]	; (8008b64 <HAL_GPIO_Init+0x2b8>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d013      	beq.n	8008aa8 <HAL_GPIO_Init+0x1fc>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a39      	ldr	r2, [pc, #228]	; (8008b68 <HAL_GPIO_Init+0x2bc>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d00d      	beq.n	8008aa4 <HAL_GPIO_Init+0x1f8>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a38      	ldr	r2, [pc, #224]	; (8008b6c <HAL_GPIO_Init+0x2c0>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d007      	beq.n	8008aa0 <HAL_GPIO_Init+0x1f4>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a37      	ldr	r2, [pc, #220]	; (8008b70 <HAL_GPIO_Init+0x2c4>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d101      	bne.n	8008a9c <HAL_GPIO_Init+0x1f0>
 8008a98:	2305      	movs	r3, #5
 8008a9a:	e00a      	b.n	8008ab2 <HAL_GPIO_Init+0x206>
 8008a9c:	2306      	movs	r3, #6
 8008a9e:	e008      	b.n	8008ab2 <HAL_GPIO_Init+0x206>
 8008aa0:	2304      	movs	r3, #4
 8008aa2:	e006      	b.n	8008ab2 <HAL_GPIO_Init+0x206>
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e004      	b.n	8008ab2 <HAL_GPIO_Init+0x206>
 8008aa8:	2302      	movs	r3, #2
 8008aaa:	e002      	b.n	8008ab2 <HAL_GPIO_Init+0x206>
 8008aac:	2301      	movs	r3, #1
 8008aae:	e000      	b.n	8008ab2 <HAL_GPIO_Init+0x206>
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ab4:	f002 0203 	and.w	r2, r2, #3
 8008ab8:	0092      	lsls	r2, r2, #2
 8008aba:	4093      	lsls	r3, r2
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008ac2:	4925      	ldr	r1, [pc, #148]	; (8008b58 <HAL_GPIO_Init+0x2ac>)
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac6:	089b      	lsrs	r3, r3, #2
 8008ac8:	3302      	adds	r3, #2
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d006      	beq.n	8008aea <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008adc:	4b25      	ldr	r3, [pc, #148]	; (8008b74 <HAL_GPIO_Init+0x2c8>)
 8008ade:	689a      	ldr	r2, [r3, #8]
 8008ae0:	4924      	ldr	r1, [pc, #144]	; (8008b74 <HAL_GPIO_Init+0x2c8>)
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	608b      	str	r3, [r1, #8]
 8008ae8:	e006      	b.n	8008af8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008aea:	4b22      	ldr	r3, [pc, #136]	; (8008b74 <HAL_GPIO_Init+0x2c8>)
 8008aec:	689a      	ldr	r2, [r3, #8]
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	43db      	mvns	r3, r3
 8008af2:	4920      	ldr	r1, [pc, #128]	; (8008b74 <HAL_GPIO_Init+0x2c8>)
 8008af4:	4013      	ands	r3, r2
 8008af6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d006      	beq.n	8008b12 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008b04:	4b1b      	ldr	r3, [pc, #108]	; (8008b74 <HAL_GPIO_Init+0x2c8>)
 8008b06:	68da      	ldr	r2, [r3, #12]
 8008b08:	491a      	ldr	r1, [pc, #104]	; (8008b74 <HAL_GPIO_Init+0x2c8>)
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	60cb      	str	r3, [r1, #12]
 8008b10:	e006      	b.n	8008b20 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008b12:	4b18      	ldr	r3, [pc, #96]	; (8008b74 <HAL_GPIO_Init+0x2c8>)
 8008b14:	68da      	ldr	r2, [r3, #12]
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	43db      	mvns	r3, r3
 8008b1a:	4916      	ldr	r1, [pc, #88]	; (8008b74 <HAL_GPIO_Init+0x2c8>)
 8008b1c:	4013      	ands	r3, r2
 8008b1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d025      	beq.n	8008b78 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008b2c:	4b11      	ldr	r3, [pc, #68]	; (8008b74 <HAL_GPIO_Init+0x2c8>)
 8008b2e:	685a      	ldr	r2, [r3, #4]
 8008b30:	4910      	ldr	r1, [pc, #64]	; (8008b74 <HAL_GPIO_Init+0x2c8>)
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	604b      	str	r3, [r1, #4]
 8008b38:	e025      	b.n	8008b86 <HAL_GPIO_Init+0x2da>
 8008b3a:	bf00      	nop
 8008b3c:	10320000 	.word	0x10320000
 8008b40:	10310000 	.word	0x10310000
 8008b44:	10220000 	.word	0x10220000
 8008b48:	10210000 	.word	0x10210000
 8008b4c:	10120000 	.word	0x10120000
 8008b50:	10110000 	.word	0x10110000
 8008b54:	40021000 	.word	0x40021000
 8008b58:	40010000 	.word	0x40010000
 8008b5c:	40010800 	.word	0x40010800
 8008b60:	40010c00 	.word	0x40010c00
 8008b64:	40011000 	.word	0x40011000
 8008b68:	40011400 	.word	0x40011400
 8008b6c:	40011800 	.word	0x40011800
 8008b70:	40011c00 	.word	0x40011c00
 8008b74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008b78:	4b15      	ldr	r3, [pc, #84]	; (8008bd0 <HAL_GPIO_Init+0x324>)
 8008b7a:	685a      	ldr	r2, [r3, #4]
 8008b7c:	69bb      	ldr	r3, [r7, #24]
 8008b7e:	43db      	mvns	r3, r3
 8008b80:	4913      	ldr	r1, [pc, #76]	; (8008bd0 <HAL_GPIO_Init+0x324>)
 8008b82:	4013      	ands	r3, r2
 8008b84:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d006      	beq.n	8008ba0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008b92:	4b0f      	ldr	r3, [pc, #60]	; (8008bd0 <HAL_GPIO_Init+0x324>)
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	490e      	ldr	r1, [pc, #56]	; (8008bd0 <HAL_GPIO_Init+0x324>)
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	600b      	str	r3, [r1, #0]
 8008b9e:	e006      	b.n	8008bae <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008ba0:	4b0b      	ldr	r3, [pc, #44]	; (8008bd0 <HAL_GPIO_Init+0x324>)
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	43db      	mvns	r3, r3
 8008ba8:	4909      	ldr	r1, [pc, #36]	; (8008bd0 <HAL_GPIO_Init+0x324>)
 8008baa:	4013      	ands	r3, r2
 8008bac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bba:	fa22 f303 	lsr.w	r3, r2, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	f47f ae7e 	bne.w	80088c0 <HAL_GPIO_Init+0x14>
  }
}
 8008bc4:	bf00      	nop
 8008bc6:	bf00      	nop
 8008bc8:	372c      	adds	r7, #44	; 0x2c
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bc80      	pop	{r7}
 8008bce:	4770      	bx	lr
 8008bd0:	40010400 	.word	0x40010400

08008bd4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b089      	sub	sp, #36	; 0x24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008bde:	2300      	movs	r3, #0
 8008be0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8008be2:	e0a6      	b.n	8008d32 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008be4:	2201      	movs	r2, #1
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	4013      	ands	r3, r2
 8008bf0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 8099 	beq.w	8008d2c <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8008bfa:	4a54      	ldr	r2, [pc, #336]	; (8008d4c <HAL_GPIO_DeInit+0x178>)
 8008bfc:	69fb      	ldr	r3, [r7, #28]
 8008bfe:	089b      	lsrs	r3, r3, #2
 8008c00:	3302      	adds	r3, #2
 8008c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c06:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	f003 0303 	and.w	r3, r3, #3
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	220f      	movs	r2, #15
 8008c12:	fa02 f303 	lsl.w	r3, r2, r3
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	4013      	ands	r3, r2
 8008c1a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a4c      	ldr	r2, [pc, #304]	; (8008d50 <HAL_GPIO_DeInit+0x17c>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d01f      	beq.n	8008c64 <HAL_GPIO_DeInit+0x90>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a4b      	ldr	r2, [pc, #300]	; (8008d54 <HAL_GPIO_DeInit+0x180>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d019      	beq.n	8008c60 <HAL_GPIO_DeInit+0x8c>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	4a4a      	ldr	r2, [pc, #296]	; (8008d58 <HAL_GPIO_DeInit+0x184>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d013      	beq.n	8008c5c <HAL_GPIO_DeInit+0x88>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a49      	ldr	r2, [pc, #292]	; (8008d5c <HAL_GPIO_DeInit+0x188>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d00d      	beq.n	8008c58 <HAL_GPIO_DeInit+0x84>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a48      	ldr	r2, [pc, #288]	; (8008d60 <HAL_GPIO_DeInit+0x18c>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d007      	beq.n	8008c54 <HAL_GPIO_DeInit+0x80>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a47      	ldr	r2, [pc, #284]	; (8008d64 <HAL_GPIO_DeInit+0x190>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d101      	bne.n	8008c50 <HAL_GPIO_DeInit+0x7c>
 8008c4c:	2305      	movs	r3, #5
 8008c4e:	e00a      	b.n	8008c66 <HAL_GPIO_DeInit+0x92>
 8008c50:	2306      	movs	r3, #6
 8008c52:	e008      	b.n	8008c66 <HAL_GPIO_DeInit+0x92>
 8008c54:	2304      	movs	r3, #4
 8008c56:	e006      	b.n	8008c66 <HAL_GPIO_DeInit+0x92>
 8008c58:	2303      	movs	r3, #3
 8008c5a:	e004      	b.n	8008c66 <HAL_GPIO_DeInit+0x92>
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	e002      	b.n	8008c66 <HAL_GPIO_DeInit+0x92>
 8008c60:	2301      	movs	r3, #1
 8008c62:	e000      	b.n	8008c66 <HAL_GPIO_DeInit+0x92>
 8008c64:	2300      	movs	r3, #0
 8008c66:	69fa      	ldr	r2, [r7, #28]
 8008c68:	f002 0203 	and.w	r2, r2, #3
 8008c6c:	0092      	lsls	r2, r2, #2
 8008c6e:	4093      	lsls	r3, r2
 8008c70:	697a      	ldr	r2, [r7, #20]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d132      	bne.n	8008cdc <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008c76:	4b3c      	ldr	r3, [pc, #240]	; (8008d68 <HAL_GPIO_DeInit+0x194>)
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	43db      	mvns	r3, r3
 8008c7e:	493a      	ldr	r1, [pc, #232]	; (8008d68 <HAL_GPIO_DeInit+0x194>)
 8008c80:	4013      	ands	r3, r2
 8008c82:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008c84:	4b38      	ldr	r3, [pc, #224]	; (8008d68 <HAL_GPIO_DeInit+0x194>)
 8008c86:	685a      	ldr	r2, [r3, #4]
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	43db      	mvns	r3, r3
 8008c8c:	4936      	ldr	r1, [pc, #216]	; (8008d68 <HAL_GPIO_DeInit+0x194>)
 8008c8e:	4013      	ands	r3, r2
 8008c90:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8008c92:	4b35      	ldr	r3, [pc, #212]	; (8008d68 <HAL_GPIO_DeInit+0x194>)
 8008c94:	68da      	ldr	r2, [r3, #12]
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	43db      	mvns	r3, r3
 8008c9a:	4933      	ldr	r1, [pc, #204]	; (8008d68 <HAL_GPIO_DeInit+0x194>)
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8008ca0:	4b31      	ldr	r3, [pc, #196]	; (8008d68 <HAL_GPIO_DeInit+0x194>)
 8008ca2:	689a      	ldr	r2, [r3, #8]
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	43db      	mvns	r3, r3
 8008ca8:	492f      	ldr	r1, [pc, #188]	; (8008d68 <HAL_GPIO_DeInit+0x194>)
 8008caa:	4013      	ands	r3, r2
 8008cac:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	f003 0303 	and.w	r3, r3, #3
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	220f      	movs	r2, #15
 8008cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cbc:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8008cbe:	4a23      	ldr	r2, [pc, #140]	; (8008d4c <HAL_GPIO_DeInit+0x178>)
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	089b      	lsrs	r3, r3, #2
 8008cc4:	3302      	adds	r3, #2
 8008cc6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	43da      	mvns	r2, r3
 8008cce:	481f      	ldr	r0, [pc, #124]	; (8008d4c <HAL_GPIO_DeInit+0x178>)
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	089b      	lsrs	r3, r3, #2
 8008cd4:	400a      	ands	r2, r1
 8008cd6:	3302      	adds	r3, #2
 8008cd8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	2bff      	cmp	r3, #255	; 0xff
 8008ce0:	d801      	bhi.n	8008ce6 <HAL_GPIO_DeInit+0x112>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	e001      	b.n	8008cea <HAL_GPIO_DeInit+0x116>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	3304      	adds	r3, #4
 8008cea:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008cec:	69bb      	ldr	r3, [r7, #24]
 8008cee:	2bff      	cmp	r3, #255	; 0xff
 8008cf0:	d802      	bhi.n	8008cf8 <HAL_GPIO_DeInit+0x124>
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	e002      	b.n	8008cfe <HAL_GPIO_DeInit+0x12a>
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	3b08      	subs	r3, #8
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	210f      	movs	r1, #15
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	fa01 f303 	lsl.w	r3, r1, r3
 8008d0c:	43db      	mvns	r3, r3
 8008d0e:	401a      	ands	r2, r3
 8008d10:	2104      	movs	r1, #4
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	fa01 f303 	lsl.w	r3, r1, r3
 8008d18:	431a      	orrs	r2, r3
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	68da      	ldr	r2, [r3, #12]
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	43db      	mvns	r3, r3
 8008d26:	401a      	ands	r2, r3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8008d32:	683a      	ldr	r2, [r7, #0]
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	fa22 f303 	lsr.w	r3, r2, r3
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f47f af52 	bne.w	8008be4 <HAL_GPIO_DeInit+0x10>
  }
}
 8008d40:	bf00      	nop
 8008d42:	bf00      	nop
 8008d44:	3724      	adds	r7, #36	; 0x24
 8008d46:	46bd      	mov	sp, r7
 8008d48:	bc80      	pop	{r7}
 8008d4a:	4770      	bx	lr
 8008d4c:	40010000 	.word	0x40010000
 8008d50:	40010800 	.word	0x40010800
 8008d54:	40010c00 	.word	0x40010c00
 8008d58:	40011000 	.word	0x40011000
 8008d5c:	40011400 	.word	0x40011400
 8008d60:	40011800 	.word	0x40011800
 8008d64:	40011c00 	.word	0x40011c00
 8008d68:	40010400 	.word	0x40010400

08008d6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	460b      	mov	r3, r1
 8008d76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	689a      	ldr	r2, [r3, #8]
 8008d7c:	887b      	ldrh	r3, [r7, #2]
 8008d7e:	4013      	ands	r3, r2
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008d84:	2301      	movs	r3, #1
 8008d86:	73fb      	strb	r3, [r7, #15]
 8008d88:	e001      	b.n	8008d8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3714      	adds	r7, #20
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bc80      	pop	{r7}
 8008d98:	4770      	bx	lr

08008d9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b083      	sub	sp, #12
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	460b      	mov	r3, r1
 8008da4:	807b      	strh	r3, [r7, #2]
 8008da6:	4613      	mov	r3, r2
 8008da8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008daa:	787b      	ldrb	r3, [r7, #1]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d003      	beq.n	8008db8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008db0:	887a      	ldrh	r2, [r7, #2]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008db6:	e003      	b.n	8008dc0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008db8:	887b      	ldrh	r3, [r7, #2]
 8008dba:	041a      	lsls	r2, r3, #16
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	611a      	str	r2, [r3, #16]
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bc80      	pop	{r7}
 8008dc8:	4770      	bx	lr

08008dca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b085      	sub	sp, #20
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008ddc:	887a      	ldrh	r2, [r7, #2]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	4013      	ands	r3, r2
 8008de2:	041a      	lsls	r2, r3, #16
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	43d9      	mvns	r1, r3
 8008de8:	887b      	ldrh	r3, [r7, #2]
 8008dea:	400b      	ands	r3, r1
 8008dec:	431a      	orrs	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	611a      	str	r2, [r3, #16]
}
 8008df2:	bf00      	nop
 8008df4:	3714      	adds	r7, #20
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bc80      	pop	{r7}
 8008dfa:	4770      	bx	lr

08008dfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d101      	bne.n	8008e0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e12b      	b.n	8009066 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d106      	bne.n	8008e28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f7ff f82e 	bl	8007e84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2224      	movs	r2, #36	; 0x24
 8008e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f022 0201 	bic.w	r2, r2, #1
 8008e3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008e60:	f001 fdb8 	bl	800a9d4 <HAL_RCC_GetPCLK1Freq>
 8008e64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	4a81      	ldr	r2, [pc, #516]	; (8009070 <HAL_I2C_Init+0x274>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d807      	bhi.n	8008e80 <HAL_I2C_Init+0x84>
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4a80      	ldr	r2, [pc, #512]	; (8009074 <HAL_I2C_Init+0x278>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	bf94      	ite	ls
 8008e78:	2301      	movls	r3, #1
 8008e7a:	2300      	movhi	r3, #0
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	e006      	b.n	8008e8e <HAL_I2C_Init+0x92>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4a7d      	ldr	r2, [pc, #500]	; (8009078 <HAL_I2C_Init+0x27c>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	bf94      	ite	ls
 8008e88:	2301      	movls	r3, #1
 8008e8a:	2300      	movhi	r3, #0
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e0e7      	b.n	8009066 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	4a78      	ldr	r2, [pc, #480]	; (800907c <HAL_I2C_Init+0x280>)
 8008e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e9e:	0c9b      	lsrs	r3, r3, #18
 8008ea0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68ba      	ldr	r2, [r7, #8]
 8008eb2:	430a      	orrs	r2, r1
 8008eb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	6a1b      	ldr	r3, [r3, #32]
 8008ebc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	4a6a      	ldr	r2, [pc, #424]	; (8009070 <HAL_I2C_Init+0x274>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d802      	bhi.n	8008ed0 <HAL_I2C_Init+0xd4>
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	e009      	b.n	8008ee4 <HAL_I2C_Init+0xe8>
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008ed6:	fb02 f303 	mul.w	r3, r2, r3
 8008eda:	4a69      	ldr	r2, [pc, #420]	; (8009080 <HAL_I2C_Init+0x284>)
 8008edc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee0:	099b      	lsrs	r3, r3, #6
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	6812      	ldr	r2, [r2, #0]
 8008ee8:	430b      	orrs	r3, r1
 8008eea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	69db      	ldr	r3, [r3, #28]
 8008ef2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008ef6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	495c      	ldr	r1, [pc, #368]	; (8009070 <HAL_I2C_Init+0x274>)
 8008f00:	428b      	cmp	r3, r1
 8008f02:	d819      	bhi.n	8008f38 <HAL_I2C_Init+0x13c>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	1e59      	subs	r1, r3, #1
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	005b      	lsls	r3, r3, #1
 8008f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f12:	1c59      	adds	r1, r3, #1
 8008f14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008f18:	400b      	ands	r3, r1
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00a      	beq.n	8008f34 <HAL_I2C_Init+0x138>
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	1e59      	subs	r1, r3, #1
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	005b      	lsls	r3, r3, #1
 8008f28:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f32:	e051      	b.n	8008fd8 <HAL_I2C_Init+0x1dc>
 8008f34:	2304      	movs	r3, #4
 8008f36:	e04f      	b.n	8008fd8 <HAL_I2C_Init+0x1dc>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d111      	bne.n	8008f64 <HAL_I2C_Init+0x168>
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	1e58      	subs	r0, r3, #1
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6859      	ldr	r1, [r3, #4]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	005b      	lsls	r3, r3, #1
 8008f4c:	440b      	add	r3, r1
 8008f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f52:	3301      	adds	r3, #1
 8008f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	bf0c      	ite	eq
 8008f5c:	2301      	moveq	r3, #1
 8008f5e:	2300      	movne	r3, #0
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	e012      	b.n	8008f8a <HAL_I2C_Init+0x18e>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	1e58      	subs	r0, r3, #1
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6859      	ldr	r1, [r3, #4]
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	440b      	add	r3, r1
 8008f72:	0099      	lsls	r1, r3, #2
 8008f74:	440b      	add	r3, r1
 8008f76:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	bf0c      	ite	eq
 8008f84:	2301      	moveq	r3, #1
 8008f86:	2300      	movne	r3, #0
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d001      	beq.n	8008f92 <HAL_I2C_Init+0x196>
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e022      	b.n	8008fd8 <HAL_I2C_Init+0x1dc>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10e      	bne.n	8008fb8 <HAL_I2C_Init+0x1bc>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	1e58      	subs	r0, r3, #1
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6859      	ldr	r1, [r3, #4]
 8008fa2:	460b      	mov	r3, r1
 8008fa4:	005b      	lsls	r3, r3, #1
 8008fa6:	440b      	add	r3, r1
 8008fa8:	fbb0 f3f3 	udiv	r3, r0, r3
 8008fac:	3301      	adds	r3, #1
 8008fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fb6:	e00f      	b.n	8008fd8 <HAL_I2C_Init+0x1dc>
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	1e58      	subs	r0, r3, #1
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6859      	ldr	r1, [r3, #4]
 8008fc0:	460b      	mov	r3, r1
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	440b      	add	r3, r1
 8008fc6:	0099      	lsls	r1, r3, #2
 8008fc8:	440b      	add	r3, r1
 8008fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8008fce:	3301      	adds	r3, #1
 8008fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008fd8:	6879      	ldr	r1, [r7, #4]
 8008fda:	6809      	ldr	r1, [r1, #0]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	69da      	ldr	r2, [r3, #28]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a1b      	ldr	r3, [r3, #32]
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	430a      	orrs	r2, r1
 8008ffa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009006:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	6911      	ldr	r1, [r2, #16]
 800900e:	687a      	ldr	r2, [r7, #4]
 8009010:	68d2      	ldr	r2, [r2, #12]
 8009012:	4311      	orrs	r1, r2
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	6812      	ldr	r2, [r2, #0]
 8009018:	430b      	orrs	r3, r1
 800901a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	68db      	ldr	r3, [r3, #12]
 8009022:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	695a      	ldr	r2, [r3, #20]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	431a      	orrs	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	430a      	orrs	r2, r1
 8009036:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f042 0201 	orr.w	r2, r2, #1
 8009046:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2200      	movs	r2, #0
 800904c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2220      	movs	r2, #32
 8009052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009064:	2300      	movs	r3, #0
}
 8009066:	4618      	mov	r0, r3
 8009068:	3710      	adds	r7, #16
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	000186a0 	.word	0x000186a0
 8009074:	001e847f 	.word	0x001e847f
 8009078:	003d08ff 	.word	0x003d08ff
 800907c:	431bde83 	.word	0x431bde83
 8009080:	10624dd3 	.word	0x10624dd3

08009084 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b082      	sub	sp, #8
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d101      	bne.n	8009096 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e021      	b.n	80090da <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2224      	movs	r2, #36	; 0x24
 800909a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f022 0201 	bic.w	r2, r2, #1
 80090ac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7fe ff26 	bl	8007f00 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
	...

080090e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b088      	sub	sp, #32
 80090e8:	af02      	add	r7, sp, #8
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	607a      	str	r2, [r7, #4]
 80090ee:	461a      	mov	r2, r3
 80090f0:	460b      	mov	r3, r1
 80090f2:	817b      	strh	r3, [r7, #10]
 80090f4:	4613      	mov	r3, r2
 80090f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80090f8:	f7ff f85e 	bl	80081b8 <HAL_GetTick>
 80090fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b20      	cmp	r3, #32
 8009108:	f040 80e0 	bne.w	80092cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	2319      	movs	r3, #25
 8009112:	2201      	movs	r2, #1
 8009114:	4970      	ldr	r1, [pc, #448]	; (80092d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f000 fe5c 	bl	8009dd4 <I2C_WaitOnFlagUntilTimeout>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009122:	2302      	movs	r3, #2
 8009124:	e0d3      	b.n	80092ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800912c:	2b01      	cmp	r3, #1
 800912e:	d101      	bne.n	8009134 <HAL_I2C_Master_Transmit+0x50>
 8009130:	2302      	movs	r3, #2
 8009132:	e0cc      	b.n	80092ce <HAL_I2C_Master_Transmit+0x1ea>
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2201      	movs	r2, #1
 8009138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	2b01      	cmp	r3, #1
 8009148:	d007      	beq.n	800915a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f042 0201 	orr.w	r2, r2, #1
 8009158:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009168:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2221      	movs	r2, #33	; 0x21
 800916e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2210      	movs	r2, #16
 8009176:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	893a      	ldrh	r2, [r7, #8]
 800918a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009190:	b29a      	uxth	r2, r3
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	4a50      	ldr	r2, [pc, #320]	; (80092dc <HAL_I2C_Master_Transmit+0x1f8>)
 800919a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800919c:	8979      	ldrh	r1, [r7, #10]
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	6a3a      	ldr	r2, [r7, #32]
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f000 fc16 	bl	80099d4 <I2C_MasterRequestWrite>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80091ae:	2301      	movs	r3, #1
 80091b0:	e08d      	b.n	80092ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091b2:	2300      	movs	r3, #0
 80091b4:	613b      	str	r3, [r7, #16]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	695b      	ldr	r3, [r3, #20]
 80091bc:	613b      	str	r3, [r7, #16]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	613b      	str	r3, [r7, #16]
 80091c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80091c8:	e066      	b.n	8009298 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091ca:	697a      	ldr	r2, [r7, #20]
 80091cc:	6a39      	ldr	r1, [r7, #32]
 80091ce:	68f8      	ldr	r0, [r7, #12]
 80091d0:	f000 ff1a 	bl	800a008 <I2C_WaitOnTXEFlagUntilTimeout>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00d      	beq.n	80091f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091de:	2b04      	cmp	r3, #4
 80091e0:	d107      	bne.n	80091f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e06b      	b.n	80092ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fa:	781a      	ldrb	r2, [r3, #0]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009206:	1c5a      	adds	r2, r3, #1
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009210:	b29b      	uxth	r3, r3
 8009212:	3b01      	subs	r3, #1
 8009214:	b29a      	uxth	r2, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800921e:	3b01      	subs	r3, #1
 8009220:	b29a      	uxth	r2, r3
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	695b      	ldr	r3, [r3, #20]
 800922c:	f003 0304 	and.w	r3, r3, #4
 8009230:	2b04      	cmp	r3, #4
 8009232:	d11b      	bne.n	800926c <HAL_I2C_Master_Transmit+0x188>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009238:	2b00      	cmp	r3, #0
 800923a:	d017      	beq.n	800926c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009240:	781a      	ldrb	r2, [r3, #0]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924c:	1c5a      	adds	r2, r3, #1
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009256:	b29b      	uxth	r3, r3
 8009258:	3b01      	subs	r3, #1
 800925a:	b29a      	uxth	r2, r3
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009264:	3b01      	subs	r3, #1
 8009266:	b29a      	uxth	r2, r3
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800926c:	697a      	ldr	r2, [r7, #20]
 800926e:	6a39      	ldr	r1, [r7, #32]
 8009270:	68f8      	ldr	r0, [r7, #12]
 8009272:	f000 ff11 	bl	800a098 <I2C_WaitOnBTFFlagUntilTimeout>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00d      	beq.n	8009298 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009280:	2b04      	cmp	r3, #4
 8009282:	d107      	bne.n	8009294 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009292:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009294:	2301      	movs	r3, #1
 8009296:	e01a      	b.n	80092ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800929c:	2b00      	cmp	r3, #0
 800929e:	d194      	bne.n	80091ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2220      	movs	r2, #32
 80092b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2200      	movs	r2, #0
 80092bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	e000      	b.n	80092ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80092cc:	2302      	movs	r3, #2
  }
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3718      	adds	r7, #24
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	00100002 	.word	0x00100002
 80092dc:	ffff0000 	.word	0xffff0000

080092e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b088      	sub	sp, #32
 80092e4:	af02      	add	r7, sp, #8
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	4608      	mov	r0, r1
 80092ea:	4611      	mov	r1, r2
 80092ec:	461a      	mov	r2, r3
 80092ee:	4603      	mov	r3, r0
 80092f0:	817b      	strh	r3, [r7, #10]
 80092f2:	460b      	mov	r3, r1
 80092f4:	813b      	strh	r3, [r7, #8]
 80092f6:	4613      	mov	r3, r2
 80092f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80092fa:	f7fe ff5d 	bl	80081b8 <HAL_GetTick>
 80092fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009306:	b2db      	uxtb	r3, r3
 8009308:	2b20      	cmp	r3, #32
 800930a:	f040 80d9 	bne.w	80094c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	2319      	movs	r3, #25
 8009314:	2201      	movs	r2, #1
 8009316:	496d      	ldr	r1, [pc, #436]	; (80094cc <HAL_I2C_Mem_Write+0x1ec>)
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f000 fd5b 	bl	8009dd4 <I2C_WaitOnFlagUntilTimeout>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009324:	2302      	movs	r3, #2
 8009326:	e0cc      	b.n	80094c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800932e:	2b01      	cmp	r3, #1
 8009330:	d101      	bne.n	8009336 <HAL_I2C_Mem_Write+0x56>
 8009332:	2302      	movs	r3, #2
 8009334:	e0c5      	b.n	80094c2 <HAL_I2C_Mem_Write+0x1e2>
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2201      	movs	r2, #1
 800933a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f003 0301 	and.w	r3, r3, #1
 8009348:	2b01      	cmp	r3, #1
 800934a:	d007      	beq.n	800935c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f042 0201 	orr.w	r2, r2, #1
 800935a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800936a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2221      	movs	r2, #33	; 0x21
 8009370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2240      	movs	r2, #64	; 0x40
 8009378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6a3a      	ldr	r2, [r7, #32]
 8009386:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800938c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009392:	b29a      	uxth	r2, r3
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	4a4d      	ldr	r2, [pc, #308]	; (80094d0 <HAL_I2C_Mem_Write+0x1f0>)
 800939c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800939e:	88f8      	ldrh	r0, [r7, #6]
 80093a0:	893a      	ldrh	r2, [r7, #8]
 80093a2:	8979      	ldrh	r1, [r7, #10]
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	9301      	str	r3, [sp, #4]
 80093a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	4603      	mov	r3, r0
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f000 fb92 	bl	8009ad8 <I2C_RequestMemoryWrite>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d052      	beq.n	8009460 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	e081      	b.n	80094c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093be:	697a      	ldr	r2, [r7, #20]
 80093c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f000 fe20 	bl	800a008 <I2C_WaitOnTXEFlagUntilTimeout>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00d      	beq.n	80093ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d2:	2b04      	cmp	r3, #4
 80093d4:	d107      	bne.n	80093e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	681a      	ldr	r2, [r3, #0]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80093e6:	2301      	movs	r3, #1
 80093e8:	e06b      	b.n	80094c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ee:	781a      	ldrb	r2, [r3, #0]
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fa:	1c5a      	adds	r2, r3, #1
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009404:	3b01      	subs	r3, #1
 8009406:	b29a      	uxth	r2, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009410:	b29b      	uxth	r3, r3
 8009412:	3b01      	subs	r3, #1
 8009414:	b29a      	uxth	r2, r3
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	695b      	ldr	r3, [r3, #20]
 8009420:	f003 0304 	and.w	r3, r3, #4
 8009424:	2b04      	cmp	r3, #4
 8009426:	d11b      	bne.n	8009460 <HAL_I2C_Mem_Write+0x180>
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800942c:	2b00      	cmp	r3, #0
 800942e:	d017      	beq.n	8009460 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009434:	781a      	ldrb	r2, [r3, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009440:	1c5a      	adds	r2, r3, #1
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800944a:	3b01      	subs	r3, #1
 800944c:	b29a      	uxth	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009456:	b29b      	uxth	r3, r3
 8009458:	3b01      	subs	r3, #1
 800945a:	b29a      	uxth	r2, r3
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009464:	2b00      	cmp	r3, #0
 8009466:	d1aa      	bne.n	80093be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009468:	697a      	ldr	r2, [r7, #20]
 800946a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f000 fe13 	bl	800a098 <I2C_WaitOnBTFFlagUntilTimeout>
 8009472:	4603      	mov	r3, r0
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00d      	beq.n	8009494 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947c:	2b04      	cmp	r3, #4
 800947e:	d107      	bne.n	8009490 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800948e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e016      	b.n	80094c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2220      	movs	r2, #32
 80094a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80094bc:	2300      	movs	r3, #0
 80094be:	e000      	b.n	80094c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80094c0:	2302      	movs	r3, #2
  }
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3718      	adds	r7, #24
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	00100002 	.word	0x00100002
 80094d0:	ffff0000 	.word	0xffff0000

080094d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b08c      	sub	sp, #48	; 0x30
 80094d8:	af02      	add	r7, sp, #8
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	4608      	mov	r0, r1
 80094de:	4611      	mov	r1, r2
 80094e0:	461a      	mov	r2, r3
 80094e2:	4603      	mov	r3, r0
 80094e4:	817b      	strh	r3, [r7, #10]
 80094e6:	460b      	mov	r3, r1
 80094e8:	813b      	strh	r3, [r7, #8]
 80094ea:	4613      	mov	r3, r2
 80094ec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80094ee:	2300      	movs	r3, #0
 80094f0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80094f2:	f7fe fe61 	bl	80081b8 <HAL_GetTick>
 80094f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	2b20      	cmp	r3, #32
 8009502:	f040 8244 	bne.w	800998e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	2319      	movs	r3, #25
 800950c:	2201      	movs	r2, #1
 800950e:	4982      	ldr	r1, [pc, #520]	; (8009718 <HAL_I2C_Mem_Read+0x244>)
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f000 fc5f 	bl	8009dd4 <I2C_WaitOnFlagUntilTimeout>
 8009516:	4603      	mov	r3, r0
 8009518:	2b00      	cmp	r3, #0
 800951a:	d001      	beq.n	8009520 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800951c:	2302      	movs	r3, #2
 800951e:	e237      	b.n	8009990 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009526:	2b01      	cmp	r3, #1
 8009528:	d101      	bne.n	800952e <HAL_I2C_Mem_Read+0x5a>
 800952a:	2302      	movs	r3, #2
 800952c:	e230      	b.n	8009990 <HAL_I2C_Mem_Read+0x4bc>
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f003 0301 	and.w	r3, r3, #1
 8009540:	2b01      	cmp	r3, #1
 8009542:	d007      	beq.n	8009554 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f042 0201 	orr.w	r2, r2, #1
 8009552:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009562:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2222      	movs	r2, #34	; 0x22
 8009568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2240      	movs	r2, #64	; 0x40
 8009570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2200      	movs	r2, #0
 8009578:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800957e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009584:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800958a:	b29a      	uxth	r2, r3
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	4a62      	ldr	r2, [pc, #392]	; (800971c <HAL_I2C_Mem_Read+0x248>)
 8009594:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009596:	88f8      	ldrh	r0, [r7, #6]
 8009598:	893a      	ldrh	r2, [r7, #8]
 800959a:	8979      	ldrh	r1, [r7, #10]
 800959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959e:	9301      	str	r3, [sp, #4]
 80095a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a2:	9300      	str	r3, [sp, #0]
 80095a4:	4603      	mov	r3, r0
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f000 fb2c 	bl	8009c04 <I2C_RequestMemoryRead>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d001      	beq.n	80095b6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	e1ec      	b.n	8009990 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d113      	bne.n	80095e6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095be:	2300      	movs	r3, #0
 80095c0:	61fb      	str	r3, [r7, #28]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	695b      	ldr	r3, [r3, #20]
 80095c8:	61fb      	str	r3, [r7, #28]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	699b      	ldr	r3, [r3, #24]
 80095d0:	61fb      	str	r3, [r7, #28]
 80095d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095e2:	601a      	str	r2, [r3, #0]
 80095e4:	e1c0      	b.n	8009968 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d11e      	bne.n	800962c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80095fe:	b672      	cpsid	i
}
 8009600:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009602:	2300      	movs	r3, #0
 8009604:	61bb      	str	r3, [r7, #24]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	695b      	ldr	r3, [r3, #20]
 800960c:	61bb      	str	r3, [r7, #24]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	61bb      	str	r3, [r7, #24]
 8009616:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009626:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009628:	b662      	cpsie	i
}
 800962a:	e035      	b.n	8009698 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009630:	2b02      	cmp	r3, #2
 8009632:	d11e      	bne.n	8009672 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009642:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009644:	b672      	cpsid	i
}
 8009646:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009648:	2300      	movs	r3, #0
 800964a:	617b      	str	r3, [r7, #20]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	617b      	str	r3, [r7, #20]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	617b      	str	r3, [r7, #20]
 800965c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800966c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800966e:	b662      	cpsie	i
}
 8009670:	e012      	b.n	8009698 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009680:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009682:	2300      	movs	r3, #0
 8009684:	613b      	str	r3, [r7, #16]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	695b      	ldr	r3, [r3, #20]
 800968c:	613b      	str	r3, [r7, #16]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	613b      	str	r3, [r7, #16]
 8009696:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009698:	e166      	b.n	8009968 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800969e:	2b03      	cmp	r3, #3
 80096a0:	f200 811f 	bhi.w	80098e2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d123      	bne.n	80096f4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f000 fd39 	bl	800a128 <I2C_WaitOnRXNEFlagUntilTimeout>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d001      	beq.n	80096c0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	e167      	b.n	8009990 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	691a      	ldr	r2, [r3, #16]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ca:	b2d2      	uxtb	r2, r2
 80096cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d2:	1c5a      	adds	r2, r3, #1
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096dc:	3b01      	subs	r3, #1
 80096de:	b29a      	uxth	r2, r3
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096e8:	b29b      	uxth	r3, r3
 80096ea:	3b01      	subs	r3, #1
 80096ec:	b29a      	uxth	r2, r3
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80096f2:	e139      	b.n	8009968 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d152      	bne.n	80097a2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80096fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009702:	2200      	movs	r2, #0
 8009704:	4906      	ldr	r1, [pc, #24]	; (8009720 <HAL_I2C_Mem_Read+0x24c>)
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f000 fb64 	bl	8009dd4 <I2C_WaitOnFlagUntilTimeout>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d008      	beq.n	8009724 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009712:	2301      	movs	r3, #1
 8009714:	e13c      	b.n	8009990 <HAL_I2C_Mem_Read+0x4bc>
 8009716:	bf00      	nop
 8009718:	00100002 	.word	0x00100002
 800971c:	ffff0000 	.word	0xffff0000
 8009720:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009724:	b672      	cpsid	i
}
 8009726:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009736:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	691a      	ldr	r2, [r3, #16]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009742:	b2d2      	uxtb	r2, r2
 8009744:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974a:	1c5a      	adds	r2, r3, #1
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009754:	3b01      	subs	r3, #1
 8009756:	b29a      	uxth	r2, r3
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009760:	b29b      	uxth	r3, r3
 8009762:	3b01      	subs	r3, #1
 8009764:	b29a      	uxth	r2, r3
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800976a:	b662      	cpsie	i
}
 800976c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	691a      	ldr	r2, [r3, #16]
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009778:	b2d2      	uxtb	r2, r2
 800977a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009780:	1c5a      	adds	r2, r3, #1
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800978a:	3b01      	subs	r3, #1
 800978c:	b29a      	uxth	r2, r3
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009796:	b29b      	uxth	r3, r3
 8009798:	3b01      	subs	r3, #1
 800979a:	b29a      	uxth	r2, r3
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80097a0:	e0e2      	b.n	8009968 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80097a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a8:	2200      	movs	r2, #0
 80097aa:	497b      	ldr	r1, [pc, #492]	; (8009998 <HAL_I2C_Mem_Read+0x4c4>)
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f000 fb11 	bl	8009dd4 <I2C_WaitOnFlagUntilTimeout>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e0e9      	b.n	8009990 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80097cc:	b672      	cpsid	i
}
 80097ce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	691a      	ldr	r2, [r3, #16]
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097da:	b2d2      	uxtb	r2, r2
 80097dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e2:	1c5a      	adds	r2, r3, #1
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097ec:	3b01      	subs	r3, #1
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097f8:	b29b      	uxth	r3, r3
 80097fa:	3b01      	subs	r3, #1
 80097fc:	b29a      	uxth	r2, r3
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009802:	4b66      	ldr	r3, [pc, #408]	; (800999c <HAL_I2C_Mem_Read+0x4c8>)
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	08db      	lsrs	r3, r3, #3
 8009808:	4a65      	ldr	r2, [pc, #404]	; (80099a0 <HAL_I2C_Mem_Read+0x4cc>)
 800980a:	fba2 2303 	umull	r2, r3, r2, r3
 800980e:	0a1a      	lsrs	r2, r3, #8
 8009810:	4613      	mov	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4413      	add	r3, r2
 8009816:	00da      	lsls	r2, r3, #3
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800981c:	6a3b      	ldr	r3, [r7, #32]
 800981e:	3b01      	subs	r3, #1
 8009820:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009822:	6a3b      	ldr	r3, [r7, #32]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d118      	bne.n	800985a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2220      	movs	r2, #32
 8009832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	2200      	movs	r2, #0
 800983a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009842:	f043 0220 	orr.w	r2, r3, #32
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800984a:	b662      	cpsie	i
}
 800984c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2200      	movs	r2, #0
 8009852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009856:	2301      	movs	r3, #1
 8009858:	e09a      	b.n	8009990 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	695b      	ldr	r3, [r3, #20]
 8009860:	f003 0304 	and.w	r3, r3, #4
 8009864:	2b04      	cmp	r3, #4
 8009866:	d1d9      	bne.n	800981c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009876:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	691a      	ldr	r2, [r3, #16]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009882:	b2d2      	uxtb	r2, r2
 8009884:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988a:	1c5a      	adds	r2, r3, #1
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009894:	3b01      	subs	r3, #1
 8009896:	b29a      	uxth	r2, r3
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	3b01      	subs	r3, #1
 80098a4:	b29a      	uxth	r2, r3
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80098aa:	b662      	cpsie	i
}
 80098ac:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	691a      	ldr	r2, [r3, #16]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b8:	b2d2      	uxtb	r2, r2
 80098ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c0:	1c5a      	adds	r2, r3, #1
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098ca:	3b01      	subs	r3, #1
 80098cc:	b29a      	uxth	r2, r3
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	3b01      	subs	r3, #1
 80098da:	b29a      	uxth	r2, r3
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80098e0:	e042      	b.n	8009968 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f000 fc1e 	bl	800a128 <I2C_WaitOnRXNEFlagUntilTimeout>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e04c      	b.n	8009990 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	691a      	ldr	r2, [r3, #16]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009900:	b2d2      	uxtb	r2, r2
 8009902:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009908:	1c5a      	adds	r2, r3, #1
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009912:	3b01      	subs	r3, #1
 8009914:	b29a      	uxth	r2, r3
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800991e:	b29b      	uxth	r3, r3
 8009920:	3b01      	subs	r3, #1
 8009922:	b29a      	uxth	r2, r3
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	695b      	ldr	r3, [r3, #20]
 800992e:	f003 0304 	and.w	r3, r3, #4
 8009932:	2b04      	cmp	r3, #4
 8009934:	d118      	bne.n	8009968 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	691a      	ldr	r2, [r3, #16]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009940:	b2d2      	uxtb	r2, r2
 8009942:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009948:	1c5a      	adds	r2, r3, #1
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009952:	3b01      	subs	r3, #1
 8009954:	b29a      	uxth	r2, r3
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800995e:	b29b      	uxth	r3, r3
 8009960:	3b01      	subs	r3, #1
 8009962:	b29a      	uxth	r2, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800996c:	2b00      	cmp	r3, #0
 800996e:	f47f ae94 	bne.w	800969a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	2220      	movs	r2, #32
 8009976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2200      	movs	r2, #0
 800997e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800998a:	2300      	movs	r3, #0
 800998c:	e000      	b.n	8009990 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800998e:	2302      	movs	r3, #2
  }
}
 8009990:	4618      	mov	r0, r3
 8009992:	3728      	adds	r7, #40	; 0x28
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}
 8009998:	00010004 	.word	0x00010004
 800999c:	200000a8 	.word	0x200000a8
 80099a0:	14f8b589 	.word	0x14f8b589

080099a4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099b2:	b2db      	uxtb	r3, r3
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	bc80      	pop	{r7}
 80099bc:	4770      	bx	lr

080099be <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80099be:	b480      	push	{r7}
 80099c0:	b083      	sub	sp, #12
 80099c2:	af00      	add	r7, sp, #0
 80099c4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bc80      	pop	{r7}
 80099d2:	4770      	bx	lr

080099d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b088      	sub	sp, #32
 80099d8:	af02      	add	r7, sp, #8
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	607a      	str	r2, [r7, #4]
 80099de:	603b      	str	r3, [r7, #0]
 80099e0:	460b      	mov	r3, r1
 80099e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	2b08      	cmp	r3, #8
 80099ee:	d006      	beq.n	80099fe <I2C_MasterRequestWrite+0x2a>
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	2b01      	cmp	r3, #1
 80099f4:	d003      	beq.n	80099fe <I2C_MasterRequestWrite+0x2a>
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80099fc:	d108      	bne.n	8009a10 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a0c:	601a      	str	r2, [r3, #0]
 8009a0e:	e00b      	b.n	8009a28 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a14:	2b12      	cmp	r3, #18
 8009a16:	d107      	bne.n	8009a28 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a26:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	9300      	str	r3, [sp, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a34:	68f8      	ldr	r0, [r7, #12]
 8009a36:	f000 f9cd 	bl	8009dd4 <I2C_WaitOnFlagUntilTimeout>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d00d      	beq.n	8009a5c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a4e:	d103      	bne.n	8009a58 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009a58:	2303      	movs	r3, #3
 8009a5a:	e035      	b.n	8009ac8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a64:	d108      	bne.n	8009a78 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009a66:	897b      	ldrh	r3, [r7, #10]
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009a74:	611a      	str	r2, [r3, #16]
 8009a76:	e01b      	b.n	8009ab0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009a78:	897b      	ldrh	r3, [r7, #10]
 8009a7a:	11db      	asrs	r3, r3, #7
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	f003 0306 	and.w	r3, r3, #6
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	f063 030f 	orn	r3, r3, #15
 8009a88:	b2da      	uxtb	r2, r3
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	687a      	ldr	r2, [r7, #4]
 8009a94:	490e      	ldr	r1, [pc, #56]	; (8009ad0 <I2C_MasterRequestWrite+0xfc>)
 8009a96:	68f8      	ldr	r0, [r7, #12]
 8009a98:	f000 fa16 	bl	8009ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d001      	beq.n	8009aa6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e010      	b.n	8009ac8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009aa6:	897b      	ldrh	r3, [r7, #10]
 8009aa8:	b2da      	uxtb	r2, r3
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	4907      	ldr	r1, [pc, #28]	; (8009ad4 <I2C_MasterRequestWrite+0x100>)
 8009ab6:	68f8      	ldr	r0, [r7, #12]
 8009ab8:	f000 fa06 	bl	8009ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d001      	beq.n	8009ac6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	e000      	b.n	8009ac8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3718      	adds	r7, #24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	00010008 	.word	0x00010008
 8009ad4:	00010002 	.word	0x00010002

08009ad8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b088      	sub	sp, #32
 8009adc:	af02      	add	r7, sp, #8
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	4608      	mov	r0, r1
 8009ae2:	4611      	mov	r1, r2
 8009ae4:	461a      	mov	r2, r3
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	817b      	strh	r3, [r7, #10]
 8009aea:	460b      	mov	r3, r1
 8009aec:	813b      	strh	r3, [r7, #8]
 8009aee:	4613      	mov	r3, r2
 8009af0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b04:	9300      	str	r3, [sp, #0]
 8009b06:	6a3b      	ldr	r3, [r7, #32]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b0e:	68f8      	ldr	r0, [r7, #12]
 8009b10:	f000 f960 	bl	8009dd4 <I2C_WaitOnFlagUntilTimeout>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00d      	beq.n	8009b36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b28:	d103      	bne.n	8009b32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009b32:	2303      	movs	r3, #3
 8009b34:	e05f      	b.n	8009bf6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009b36:	897b      	ldrh	r3, [r7, #10]
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009b44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b48:	6a3a      	ldr	r2, [r7, #32]
 8009b4a:	492d      	ldr	r1, [pc, #180]	; (8009c00 <I2C_RequestMemoryWrite+0x128>)
 8009b4c:	68f8      	ldr	r0, [r7, #12]
 8009b4e:	f000 f9bb 	bl	8009ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d001      	beq.n	8009b5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	e04c      	b.n	8009bf6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	617b      	str	r3, [r7, #20]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	695b      	ldr	r3, [r3, #20]
 8009b66:	617b      	str	r3, [r7, #20]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	699b      	ldr	r3, [r3, #24]
 8009b6e:	617b      	str	r3, [r7, #20]
 8009b70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b74:	6a39      	ldr	r1, [r7, #32]
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f000 fa46 	bl	800a008 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00d      	beq.n	8009b9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b86:	2b04      	cmp	r3, #4
 8009b88:	d107      	bne.n	8009b9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681a      	ldr	r2, [r3, #0]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e02b      	b.n	8009bf6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009b9e:	88fb      	ldrh	r3, [r7, #6]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d105      	bne.n	8009bb0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ba4:	893b      	ldrh	r3, [r7, #8]
 8009ba6:	b2da      	uxtb	r2, r3
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	611a      	str	r2, [r3, #16]
 8009bae:	e021      	b.n	8009bf4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009bb0:	893b      	ldrh	r3, [r7, #8]
 8009bb2:	0a1b      	lsrs	r3, r3, #8
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	b2da      	uxtb	r2, r3
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bc0:	6a39      	ldr	r1, [r7, #32]
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f000 fa20 	bl	800a008 <I2C_WaitOnTXEFlagUntilTimeout>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00d      	beq.n	8009bea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd2:	2b04      	cmp	r3, #4
 8009bd4:	d107      	bne.n	8009be6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009be4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e005      	b.n	8009bf6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009bea:	893b      	ldrh	r3, [r7, #8]
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3718      	adds	r7, #24
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	00010002 	.word	0x00010002

08009c04 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b088      	sub	sp, #32
 8009c08:	af02      	add	r7, sp, #8
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	4608      	mov	r0, r1
 8009c0e:	4611      	mov	r1, r2
 8009c10:	461a      	mov	r2, r3
 8009c12:	4603      	mov	r3, r0
 8009c14:	817b      	strh	r3, [r7, #10]
 8009c16:	460b      	mov	r3, r1
 8009c18:	813b      	strh	r3, [r7, #8]
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c2c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	681a      	ldr	r2, [r3, #0]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c40:	9300      	str	r3, [sp, #0]
 8009c42:	6a3b      	ldr	r3, [r7, #32]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f000 f8c2 	bl	8009dd4 <I2C_WaitOnFlagUntilTimeout>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00d      	beq.n	8009c72 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c64:	d103      	bne.n	8009c6e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	e0aa      	b.n	8009dc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009c72:	897b      	ldrh	r3, [r7, #10]
 8009c74:	b2db      	uxtb	r3, r3
 8009c76:	461a      	mov	r2, r3
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009c80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c84:	6a3a      	ldr	r2, [r7, #32]
 8009c86:	4952      	ldr	r1, [pc, #328]	; (8009dd0 <I2C_RequestMemoryRead+0x1cc>)
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f000 f91d 	bl	8009ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d001      	beq.n	8009c98 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	e097      	b.n	8009dc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c98:	2300      	movs	r3, #0
 8009c9a:	617b      	str	r3, [r7, #20]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	695b      	ldr	r3, [r3, #20]
 8009ca2:	617b      	str	r3, [r7, #20]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	617b      	str	r3, [r7, #20]
 8009cac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cb0:	6a39      	ldr	r1, [r7, #32]
 8009cb2:	68f8      	ldr	r0, [r7, #12]
 8009cb4:	f000 f9a8 	bl	800a008 <I2C_WaitOnTXEFlagUntilTimeout>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00d      	beq.n	8009cda <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc2:	2b04      	cmp	r3, #4
 8009cc4:	d107      	bne.n	8009cd6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e076      	b.n	8009dc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009cda:	88fb      	ldrh	r3, [r7, #6]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d105      	bne.n	8009cec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ce0:	893b      	ldrh	r3, [r7, #8]
 8009ce2:	b2da      	uxtb	r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	611a      	str	r2, [r3, #16]
 8009cea:	e021      	b.n	8009d30 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009cec:	893b      	ldrh	r3, [r7, #8]
 8009cee:	0a1b      	lsrs	r3, r3, #8
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	b2da      	uxtb	r2, r3
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cfc:	6a39      	ldr	r1, [r7, #32]
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 f982 	bl	800a008 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00d      	beq.n	8009d26 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0e:	2b04      	cmp	r3, #4
 8009d10:	d107      	bne.n	8009d22 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681a      	ldr	r2, [r3, #0]
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e050      	b.n	8009dc8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009d26:	893b      	ldrh	r3, [r7, #8]
 8009d28:	b2da      	uxtb	r2, r3
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d32:	6a39      	ldr	r1, [r7, #32]
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	f000 f967 	bl	800a008 <I2C_WaitOnTXEFlagUntilTimeout>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00d      	beq.n	8009d5c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d44:	2b04      	cmp	r3, #4
 8009d46:	d107      	bne.n	8009d58 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d56:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e035      	b.n	8009dc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009d6a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6e:	9300      	str	r3, [sp, #0]
 8009d70:	6a3b      	ldr	r3, [r7, #32]
 8009d72:	2200      	movs	r2, #0
 8009d74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f000 f82b 	bl	8009dd4 <I2C_WaitOnFlagUntilTimeout>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d00d      	beq.n	8009da0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d92:	d103      	bne.n	8009d9c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009d9c:	2303      	movs	r3, #3
 8009d9e:	e013      	b.n	8009dc8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009da0:	897b      	ldrh	r3, [r7, #10]
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	f043 0301 	orr.w	r3, r3, #1
 8009da8:	b2da      	uxtb	r2, r3
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db2:	6a3a      	ldr	r2, [r7, #32]
 8009db4:	4906      	ldr	r1, [pc, #24]	; (8009dd0 <I2C_RequestMemoryRead+0x1cc>)
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 f886 	bl	8009ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d001      	beq.n	8009dc6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e000      	b.n	8009dc8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3718      	adds	r7, #24
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	00010002 	.word	0x00010002

08009dd4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	603b      	str	r3, [r7, #0]
 8009de0:	4613      	mov	r3, r2
 8009de2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009de4:	e048      	b.n	8009e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dec:	d044      	beq.n	8009e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dee:	f7fe f9e3 	bl	80081b8 <HAL_GetTick>
 8009df2:	4602      	mov	r2, r0
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	1ad3      	subs	r3, r2, r3
 8009df8:	683a      	ldr	r2, [r7, #0]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d302      	bcc.n	8009e04 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d139      	bne.n	8009e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	0c1b      	lsrs	r3, r3, #16
 8009e08:	b2db      	uxtb	r3, r3
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d10d      	bne.n	8009e2a <I2C_WaitOnFlagUntilTimeout+0x56>
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	695b      	ldr	r3, [r3, #20]
 8009e14:	43da      	mvns	r2, r3
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	4013      	ands	r3, r2
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	bf0c      	ite	eq
 8009e20:	2301      	moveq	r3, #1
 8009e22:	2300      	movne	r3, #0
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	461a      	mov	r2, r3
 8009e28:	e00c      	b.n	8009e44 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	699b      	ldr	r3, [r3, #24]
 8009e30:	43da      	mvns	r2, r3
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	4013      	ands	r3, r2
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	bf0c      	ite	eq
 8009e3c:	2301      	moveq	r3, #1
 8009e3e:	2300      	movne	r3, #0
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	461a      	mov	r2, r3
 8009e44:	79fb      	ldrb	r3, [r7, #7]
 8009e46:	429a      	cmp	r2, r3
 8009e48:	d116      	bne.n	8009e78 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2220      	movs	r2, #32
 8009e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e64:	f043 0220 	orr.w	r2, r3, #32
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009e74:	2301      	movs	r3, #1
 8009e76:	e023      	b.n	8009ec0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	0c1b      	lsrs	r3, r3, #16
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	d10d      	bne.n	8009e9e <I2C_WaitOnFlagUntilTimeout+0xca>
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	695b      	ldr	r3, [r3, #20]
 8009e88:	43da      	mvns	r2, r3
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	bf0c      	ite	eq
 8009e94:	2301      	moveq	r3, #1
 8009e96:	2300      	movne	r3, #0
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	e00c      	b.n	8009eb8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	699b      	ldr	r3, [r3, #24]
 8009ea4:	43da      	mvns	r2, r3
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	bf0c      	ite	eq
 8009eb0:	2301      	moveq	r3, #1
 8009eb2:	2300      	movne	r3, #0
 8009eb4:	b2db      	uxtb	r3, r3
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	79fb      	ldrb	r3, [r7, #7]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d093      	beq.n	8009de6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3710      	adds	r7, #16
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}

08009ec8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	60f8      	str	r0, [r7, #12]
 8009ed0:	60b9      	str	r1, [r7, #8]
 8009ed2:	607a      	str	r2, [r7, #4]
 8009ed4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009ed6:	e071      	b.n	8009fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	695b      	ldr	r3, [r3, #20]
 8009ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ee6:	d123      	bne.n	8009f30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ef6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2200      	movs	r2, #0
 8009f06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2220      	movs	r2, #32
 8009f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f1c:	f043 0204 	orr.w	r2, r3, #4
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e067      	b.n	800a000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f36:	d041      	beq.n	8009fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f38:	f7fe f93e 	bl	80081b8 <HAL_GetTick>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	1ad3      	subs	r3, r2, r3
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d302      	bcc.n	8009f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d136      	bne.n	8009fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	0c1b      	lsrs	r3, r3, #16
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d10c      	bne.n	8009f72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	695b      	ldr	r3, [r3, #20]
 8009f5e:	43da      	mvns	r2, r3
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	4013      	ands	r3, r2
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	bf14      	ite	ne
 8009f6a:	2301      	movne	r3, #1
 8009f6c:	2300      	moveq	r3, #0
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	e00b      	b.n	8009f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	699b      	ldr	r3, [r3, #24]
 8009f78:	43da      	mvns	r2, r3
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	bf14      	ite	ne
 8009f84:	2301      	movne	r3, #1
 8009f86:	2300      	moveq	r3, #0
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d016      	beq.n	8009fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2200      	movs	r2, #0
 8009f92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2220      	movs	r2, #32
 8009f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa8:	f043 0220 	orr.w	r2, r3, #32
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e021      	b.n	800a000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	0c1b      	lsrs	r3, r3, #16
 8009fc0:	b2db      	uxtb	r3, r3
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d10c      	bne.n	8009fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	695b      	ldr	r3, [r3, #20]
 8009fcc:	43da      	mvns	r2, r3
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	bf14      	ite	ne
 8009fd8:	2301      	movne	r3, #1
 8009fda:	2300      	moveq	r3, #0
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	e00b      	b.n	8009ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	699b      	ldr	r3, [r3, #24]
 8009fe6:	43da      	mvns	r2, r3
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	4013      	ands	r3, r2
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	bf14      	ite	ne
 8009ff2:	2301      	movne	r3, #1
 8009ff4:	2300      	moveq	r3, #0
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f47f af6d 	bne.w	8009ed8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009ffe:	2300      	movs	r3, #0
}
 800a000:	4618      	mov	r0, r3
 800a002:	3710      	adds	r7, #16
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	60f8      	str	r0, [r7, #12]
 800a010:	60b9      	str	r1, [r7, #8]
 800a012:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a014:	e034      	b.n	800a080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f000 f8e3 	bl	800a1e2 <I2C_IsAcknowledgeFailed>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	e034      	b.n	800a090 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a02c:	d028      	beq.n	800a080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a02e:	f7fe f8c3 	bl	80081b8 <HAL_GetTick>
 800a032:	4602      	mov	r2, r0
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	1ad3      	subs	r3, r2, r3
 800a038:	68ba      	ldr	r2, [r7, #8]
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d302      	bcc.n	800a044 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d11d      	bne.n	800a080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	695b      	ldr	r3, [r3, #20]
 800a04a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a04e:	2b80      	cmp	r3, #128	; 0x80
 800a050:	d016      	beq.n	800a080 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2200      	movs	r2, #0
 800a056:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2220      	movs	r2, #32
 800a05c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a06c:	f043 0220 	orr.w	r2, r3, #32
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2200      	movs	r2, #0
 800a078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	e007      	b.n	800a090 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	695b      	ldr	r3, [r3, #20]
 800a086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a08a:	2b80      	cmp	r3, #128	; 0x80
 800a08c:	d1c3      	bne.n	800a016 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a0a4:	e034      	b.n	800a110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f000 f89b 	bl	800a1e2 <I2C_IsAcknowledgeFailed>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d001      	beq.n	800a0b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e034      	b.n	800a120 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0bc:	d028      	beq.n	800a110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0be:	f7fe f87b 	bl	80081b8 <HAL_GetTick>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	1ad3      	subs	r3, r2, r3
 800a0c8:	68ba      	ldr	r2, [r7, #8]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d302      	bcc.n	800a0d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d11d      	bne.n	800a110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	695b      	ldr	r3, [r3, #20]
 800a0da:	f003 0304 	and.w	r3, r3, #4
 800a0de:	2b04      	cmp	r3, #4
 800a0e0:	d016      	beq.n	800a110 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	2220      	movs	r2, #32
 800a0ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0fc:	f043 0220 	orr.w	r2, r3, #32
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a10c:	2301      	movs	r3, #1
 800a10e:	e007      	b.n	800a120 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	695b      	ldr	r3, [r3, #20]
 800a116:	f003 0304 	and.w	r3, r3, #4
 800a11a:	2b04      	cmp	r3, #4
 800a11c:	d1c3      	bne.n	800a0a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3710      	adds	r7, #16
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a134:	e049      	b.n	800a1ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	695b      	ldr	r3, [r3, #20]
 800a13c:	f003 0310 	and.w	r3, r3, #16
 800a140:	2b10      	cmp	r3, #16
 800a142:	d119      	bne.n	800a178 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f06f 0210 	mvn.w	r2, #16
 800a14c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2200      	movs	r2, #0
 800a152:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2220      	movs	r2, #32
 800a158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	e030      	b.n	800a1da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a178:	f7fe f81e 	bl	80081b8 <HAL_GetTick>
 800a17c:	4602      	mov	r2, r0
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	68ba      	ldr	r2, [r7, #8]
 800a184:	429a      	cmp	r2, r3
 800a186:	d302      	bcc.n	800a18e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d11d      	bne.n	800a1ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	695b      	ldr	r3, [r3, #20]
 800a194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a198:	2b40      	cmp	r3, #64	; 0x40
 800a19a:	d016      	beq.n	800a1ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	2220      	movs	r2, #32
 800a1a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b6:	f043 0220 	orr.w	r2, r3, #32
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e007      	b.n	800a1da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	695b      	ldr	r3, [r3, #20]
 800a1d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1d4:	2b40      	cmp	r3, #64	; 0x40
 800a1d6:	d1ae      	bne.n	800a136 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b083      	sub	sp, #12
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	695b      	ldr	r3, [r3, #20]
 800a1f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1f8:	d11b      	bne.n	800a232 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a202:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2220      	movs	r2, #32
 800a20e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2200      	movs	r2, #0
 800a216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21e:	f043 0204 	orr.w	r2, r3, #4
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e000      	b.n	800a234 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	bc80      	pop	{r7}
 800a23c:	4770      	bx	lr
	...

0800a240 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d101      	bne.n	800a252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e272      	b.n	800a738 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f003 0301 	and.w	r3, r3, #1
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f000 8087 	beq.w	800a36e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a260:	4b92      	ldr	r3, [pc, #584]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a262:	685b      	ldr	r3, [r3, #4]
 800a264:	f003 030c 	and.w	r3, r3, #12
 800a268:	2b04      	cmp	r3, #4
 800a26a:	d00c      	beq.n	800a286 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a26c:	4b8f      	ldr	r3, [pc, #572]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	f003 030c 	and.w	r3, r3, #12
 800a274:	2b08      	cmp	r3, #8
 800a276:	d112      	bne.n	800a29e <HAL_RCC_OscConfig+0x5e>
 800a278:	4b8c      	ldr	r3, [pc, #560]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a284:	d10b      	bne.n	800a29e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a286:	4b89      	ldr	r3, [pc, #548]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d06c      	beq.n	800a36c <HAL_RCC_OscConfig+0x12c>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d168      	bne.n	800a36c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e24c      	b.n	800a738 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2a6:	d106      	bne.n	800a2b6 <HAL_RCC_OscConfig+0x76>
 800a2a8:	4b80      	ldr	r3, [pc, #512]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a7f      	ldr	r2, [pc, #508]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a2ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2b2:	6013      	str	r3, [r2, #0]
 800a2b4:	e02e      	b.n	800a314 <HAL_RCC_OscConfig+0xd4>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d10c      	bne.n	800a2d8 <HAL_RCC_OscConfig+0x98>
 800a2be:	4b7b      	ldr	r3, [pc, #492]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a7a      	ldr	r2, [pc, #488]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a2c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2c8:	6013      	str	r3, [r2, #0]
 800a2ca:	4b78      	ldr	r3, [pc, #480]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a77      	ldr	r2, [pc, #476]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a2d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a2d4:	6013      	str	r3, [r2, #0]
 800a2d6:	e01d      	b.n	800a314 <HAL_RCC_OscConfig+0xd4>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a2e0:	d10c      	bne.n	800a2fc <HAL_RCC_OscConfig+0xbc>
 800a2e2:	4b72      	ldr	r3, [pc, #456]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4a71      	ldr	r2, [pc, #452]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a2e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a2ec:	6013      	str	r3, [r2, #0]
 800a2ee:	4b6f      	ldr	r3, [pc, #444]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a6e      	ldr	r2, [pc, #440]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a2f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a2f8:	6013      	str	r3, [r2, #0]
 800a2fa:	e00b      	b.n	800a314 <HAL_RCC_OscConfig+0xd4>
 800a2fc:	4b6b      	ldr	r3, [pc, #428]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a6a      	ldr	r2, [pc, #424]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a306:	6013      	str	r3, [r2, #0]
 800a308:	4b68      	ldr	r3, [pc, #416]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a67      	ldr	r2, [pc, #412]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a30e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a312:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d013      	beq.n	800a344 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a31c:	f7fd ff4c 	bl	80081b8 <HAL_GetTick>
 800a320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a322:	e008      	b.n	800a336 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a324:	f7fd ff48 	bl	80081b8 <HAL_GetTick>
 800a328:	4602      	mov	r2, r0
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	1ad3      	subs	r3, r2, r3
 800a32e:	2b64      	cmp	r3, #100	; 0x64
 800a330:	d901      	bls.n	800a336 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a332:	2303      	movs	r3, #3
 800a334:	e200      	b.n	800a738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a336:	4b5d      	ldr	r3, [pc, #372]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d0f0      	beq.n	800a324 <HAL_RCC_OscConfig+0xe4>
 800a342:	e014      	b.n	800a36e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a344:	f7fd ff38 	bl	80081b8 <HAL_GetTick>
 800a348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a34a:	e008      	b.n	800a35e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a34c:	f7fd ff34 	bl	80081b8 <HAL_GetTick>
 800a350:	4602      	mov	r2, r0
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	1ad3      	subs	r3, r2, r3
 800a356:	2b64      	cmp	r3, #100	; 0x64
 800a358:	d901      	bls.n	800a35e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a35a:	2303      	movs	r3, #3
 800a35c:	e1ec      	b.n	800a738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a35e:	4b53      	ldr	r3, [pc, #332]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a366:	2b00      	cmp	r3, #0
 800a368:	d1f0      	bne.n	800a34c <HAL_RCC_OscConfig+0x10c>
 800a36a:	e000      	b.n	800a36e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a36c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 0302 	and.w	r3, r3, #2
 800a376:	2b00      	cmp	r3, #0
 800a378:	d063      	beq.n	800a442 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a37a:	4b4c      	ldr	r3, [pc, #304]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	f003 030c 	and.w	r3, r3, #12
 800a382:	2b00      	cmp	r3, #0
 800a384:	d00b      	beq.n	800a39e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a386:	4b49      	ldr	r3, [pc, #292]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	f003 030c 	and.w	r3, r3, #12
 800a38e:	2b08      	cmp	r3, #8
 800a390:	d11c      	bne.n	800a3cc <HAL_RCC_OscConfig+0x18c>
 800a392:	4b46      	ldr	r3, [pc, #280]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d116      	bne.n	800a3cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a39e:	4b43      	ldr	r3, [pc, #268]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f003 0302 	and.w	r3, r3, #2
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d005      	beq.n	800a3b6 <HAL_RCC_OscConfig+0x176>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	691b      	ldr	r3, [r3, #16]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d001      	beq.n	800a3b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e1c0      	b.n	800a738 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a3b6:	4b3d      	ldr	r3, [pc, #244]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	695b      	ldr	r3, [r3, #20]
 800a3c2:	00db      	lsls	r3, r3, #3
 800a3c4:	4939      	ldr	r1, [pc, #228]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a3ca:	e03a      	b.n	800a442 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	691b      	ldr	r3, [r3, #16]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d020      	beq.n	800a416 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a3d4:	4b36      	ldr	r3, [pc, #216]	; (800a4b0 <HAL_RCC_OscConfig+0x270>)
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3da:	f7fd feed 	bl	80081b8 <HAL_GetTick>
 800a3de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a3e0:	e008      	b.n	800a3f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a3e2:	f7fd fee9 	bl	80081b8 <HAL_GetTick>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	693b      	ldr	r3, [r7, #16]
 800a3ea:	1ad3      	subs	r3, r2, r3
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d901      	bls.n	800a3f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a3f0:	2303      	movs	r3, #3
 800a3f2:	e1a1      	b.n	800a738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a3f4:	4b2d      	ldr	r3, [pc, #180]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 0302 	and.w	r3, r3, #2
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d0f0      	beq.n	800a3e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a400:	4b2a      	ldr	r3, [pc, #168]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	695b      	ldr	r3, [r3, #20]
 800a40c:	00db      	lsls	r3, r3, #3
 800a40e:	4927      	ldr	r1, [pc, #156]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a410:	4313      	orrs	r3, r2
 800a412:	600b      	str	r3, [r1, #0]
 800a414:	e015      	b.n	800a442 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a416:	4b26      	ldr	r3, [pc, #152]	; (800a4b0 <HAL_RCC_OscConfig+0x270>)
 800a418:	2200      	movs	r2, #0
 800a41a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a41c:	f7fd fecc 	bl	80081b8 <HAL_GetTick>
 800a420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a422:	e008      	b.n	800a436 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a424:	f7fd fec8 	bl	80081b8 <HAL_GetTick>
 800a428:	4602      	mov	r2, r0
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d901      	bls.n	800a436 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a432:	2303      	movs	r3, #3
 800a434:	e180      	b.n	800a738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a436:	4b1d      	ldr	r3, [pc, #116]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f003 0302 	and.w	r3, r3, #2
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1f0      	bne.n	800a424 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 0308 	and.w	r3, r3, #8
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d03a      	beq.n	800a4c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	699b      	ldr	r3, [r3, #24]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d019      	beq.n	800a48a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a456:	4b17      	ldr	r3, [pc, #92]	; (800a4b4 <HAL_RCC_OscConfig+0x274>)
 800a458:	2201      	movs	r2, #1
 800a45a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a45c:	f7fd feac 	bl	80081b8 <HAL_GetTick>
 800a460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a462:	e008      	b.n	800a476 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a464:	f7fd fea8 	bl	80081b8 <HAL_GetTick>
 800a468:	4602      	mov	r2, r0
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	2b02      	cmp	r3, #2
 800a470:	d901      	bls.n	800a476 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a472:	2303      	movs	r3, #3
 800a474:	e160      	b.n	800a738 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a476:	4b0d      	ldr	r3, [pc, #52]	; (800a4ac <HAL_RCC_OscConfig+0x26c>)
 800a478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47a:	f003 0302 	and.w	r3, r3, #2
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d0f0      	beq.n	800a464 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a482:	2001      	movs	r0, #1
 800a484:	f000 face 	bl	800aa24 <RCC_Delay>
 800a488:	e01c      	b.n	800a4c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a48a:	4b0a      	ldr	r3, [pc, #40]	; (800a4b4 <HAL_RCC_OscConfig+0x274>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a490:	f7fd fe92 	bl	80081b8 <HAL_GetTick>
 800a494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a496:	e00f      	b.n	800a4b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a498:	f7fd fe8e 	bl	80081b8 <HAL_GetTick>
 800a49c:	4602      	mov	r2, r0
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	1ad3      	subs	r3, r2, r3
 800a4a2:	2b02      	cmp	r3, #2
 800a4a4:	d908      	bls.n	800a4b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a4a6:	2303      	movs	r3, #3
 800a4a8:	e146      	b.n	800a738 <HAL_RCC_OscConfig+0x4f8>
 800a4aa:	bf00      	nop
 800a4ac:	40021000 	.word	0x40021000
 800a4b0:	42420000 	.word	0x42420000
 800a4b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a4b8:	4b92      	ldr	r3, [pc, #584]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4bc:	f003 0302 	and.w	r3, r3, #2
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d1e9      	bne.n	800a498 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f003 0304 	and.w	r3, r3, #4
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f000 80a6 	beq.w	800a61e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a4d6:	4b8b      	ldr	r3, [pc, #556]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a4d8:	69db      	ldr	r3, [r3, #28]
 800a4da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d10d      	bne.n	800a4fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a4e2:	4b88      	ldr	r3, [pc, #544]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a4e4:	69db      	ldr	r3, [r3, #28]
 800a4e6:	4a87      	ldr	r2, [pc, #540]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a4e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4ec:	61d3      	str	r3, [r2, #28]
 800a4ee:	4b85      	ldr	r3, [pc, #532]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a4f0:	69db      	ldr	r3, [r3, #28]
 800a4f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4f6:	60bb      	str	r3, [r7, #8]
 800a4f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a4fe:	4b82      	ldr	r3, [pc, #520]	; (800a708 <HAL_RCC_OscConfig+0x4c8>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a506:	2b00      	cmp	r3, #0
 800a508:	d118      	bne.n	800a53c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a50a:	4b7f      	ldr	r3, [pc, #508]	; (800a708 <HAL_RCC_OscConfig+0x4c8>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a7e      	ldr	r2, [pc, #504]	; (800a708 <HAL_RCC_OscConfig+0x4c8>)
 800a510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a516:	f7fd fe4f 	bl	80081b8 <HAL_GetTick>
 800a51a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a51c:	e008      	b.n	800a530 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a51e:	f7fd fe4b 	bl	80081b8 <HAL_GetTick>
 800a522:	4602      	mov	r2, r0
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	1ad3      	subs	r3, r2, r3
 800a528:	2b64      	cmp	r3, #100	; 0x64
 800a52a:	d901      	bls.n	800a530 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a52c:	2303      	movs	r3, #3
 800a52e:	e103      	b.n	800a738 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a530:	4b75      	ldr	r3, [pc, #468]	; (800a708 <HAL_RCC_OscConfig+0x4c8>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d0f0      	beq.n	800a51e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d106      	bne.n	800a552 <HAL_RCC_OscConfig+0x312>
 800a544:	4b6f      	ldr	r3, [pc, #444]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a546:	6a1b      	ldr	r3, [r3, #32]
 800a548:	4a6e      	ldr	r2, [pc, #440]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a54a:	f043 0301 	orr.w	r3, r3, #1
 800a54e:	6213      	str	r3, [r2, #32]
 800a550:	e02d      	b.n	800a5ae <HAL_RCC_OscConfig+0x36e>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	68db      	ldr	r3, [r3, #12]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d10c      	bne.n	800a574 <HAL_RCC_OscConfig+0x334>
 800a55a:	4b6a      	ldr	r3, [pc, #424]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a55c:	6a1b      	ldr	r3, [r3, #32]
 800a55e:	4a69      	ldr	r2, [pc, #420]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a560:	f023 0301 	bic.w	r3, r3, #1
 800a564:	6213      	str	r3, [r2, #32]
 800a566:	4b67      	ldr	r3, [pc, #412]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a568:	6a1b      	ldr	r3, [r3, #32]
 800a56a:	4a66      	ldr	r2, [pc, #408]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a56c:	f023 0304 	bic.w	r3, r3, #4
 800a570:	6213      	str	r3, [r2, #32]
 800a572:	e01c      	b.n	800a5ae <HAL_RCC_OscConfig+0x36e>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	68db      	ldr	r3, [r3, #12]
 800a578:	2b05      	cmp	r3, #5
 800a57a:	d10c      	bne.n	800a596 <HAL_RCC_OscConfig+0x356>
 800a57c:	4b61      	ldr	r3, [pc, #388]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a57e:	6a1b      	ldr	r3, [r3, #32]
 800a580:	4a60      	ldr	r2, [pc, #384]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a582:	f043 0304 	orr.w	r3, r3, #4
 800a586:	6213      	str	r3, [r2, #32]
 800a588:	4b5e      	ldr	r3, [pc, #376]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a58a:	6a1b      	ldr	r3, [r3, #32]
 800a58c:	4a5d      	ldr	r2, [pc, #372]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a58e:	f043 0301 	orr.w	r3, r3, #1
 800a592:	6213      	str	r3, [r2, #32]
 800a594:	e00b      	b.n	800a5ae <HAL_RCC_OscConfig+0x36e>
 800a596:	4b5b      	ldr	r3, [pc, #364]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a598:	6a1b      	ldr	r3, [r3, #32]
 800a59a:	4a5a      	ldr	r2, [pc, #360]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a59c:	f023 0301 	bic.w	r3, r3, #1
 800a5a0:	6213      	str	r3, [r2, #32]
 800a5a2:	4b58      	ldr	r3, [pc, #352]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a5a4:	6a1b      	ldr	r3, [r3, #32]
 800a5a6:	4a57      	ldr	r2, [pc, #348]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a5a8:	f023 0304 	bic.w	r3, r3, #4
 800a5ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	68db      	ldr	r3, [r3, #12]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d015      	beq.n	800a5e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a5b6:	f7fd fdff 	bl	80081b8 <HAL_GetTick>
 800a5ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a5bc:	e00a      	b.n	800a5d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5be:	f7fd fdfb 	bl	80081b8 <HAL_GetTick>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	1ad3      	subs	r3, r2, r3
 800a5c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d901      	bls.n	800a5d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	e0b1      	b.n	800a738 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a5d4:	4b4b      	ldr	r3, [pc, #300]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a5d6:	6a1b      	ldr	r3, [r3, #32]
 800a5d8:	f003 0302 	and.w	r3, r3, #2
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d0ee      	beq.n	800a5be <HAL_RCC_OscConfig+0x37e>
 800a5e0:	e014      	b.n	800a60c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a5e2:	f7fd fde9 	bl	80081b8 <HAL_GetTick>
 800a5e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a5e8:	e00a      	b.n	800a600 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a5ea:	f7fd fde5 	bl	80081b8 <HAL_GetTick>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	1ad3      	subs	r3, r2, r3
 800a5f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d901      	bls.n	800a600 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a5fc:	2303      	movs	r3, #3
 800a5fe:	e09b      	b.n	800a738 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a600:	4b40      	ldr	r3, [pc, #256]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a602:	6a1b      	ldr	r3, [r3, #32]
 800a604:	f003 0302 	and.w	r3, r3, #2
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d1ee      	bne.n	800a5ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a60c:	7dfb      	ldrb	r3, [r7, #23]
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d105      	bne.n	800a61e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a612:	4b3c      	ldr	r3, [pc, #240]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a614:	69db      	ldr	r3, [r3, #28]
 800a616:	4a3b      	ldr	r2, [pc, #236]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a61c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	69db      	ldr	r3, [r3, #28]
 800a622:	2b00      	cmp	r3, #0
 800a624:	f000 8087 	beq.w	800a736 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a628:	4b36      	ldr	r3, [pc, #216]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	f003 030c 	and.w	r3, r3, #12
 800a630:	2b08      	cmp	r3, #8
 800a632:	d061      	beq.n	800a6f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	69db      	ldr	r3, [r3, #28]
 800a638:	2b02      	cmp	r3, #2
 800a63a:	d146      	bne.n	800a6ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a63c:	4b33      	ldr	r3, [pc, #204]	; (800a70c <HAL_RCC_OscConfig+0x4cc>)
 800a63e:	2200      	movs	r2, #0
 800a640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a642:	f7fd fdb9 	bl	80081b8 <HAL_GetTick>
 800a646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a648:	e008      	b.n	800a65c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a64a:	f7fd fdb5 	bl	80081b8 <HAL_GetTick>
 800a64e:	4602      	mov	r2, r0
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	1ad3      	subs	r3, r2, r3
 800a654:	2b02      	cmp	r3, #2
 800a656:	d901      	bls.n	800a65c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a658:	2303      	movs	r3, #3
 800a65a:	e06d      	b.n	800a738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a65c:	4b29      	ldr	r3, [pc, #164]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a664:	2b00      	cmp	r3, #0
 800a666:	d1f0      	bne.n	800a64a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6a1b      	ldr	r3, [r3, #32]
 800a66c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a670:	d108      	bne.n	800a684 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a672:	4b24      	ldr	r3, [pc, #144]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	4921      	ldr	r1, [pc, #132]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a680:	4313      	orrs	r3, r2
 800a682:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a684:	4b1f      	ldr	r3, [pc, #124]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6a19      	ldr	r1, [r3, #32]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a694:	430b      	orrs	r3, r1
 800a696:	491b      	ldr	r1, [pc, #108]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a698:	4313      	orrs	r3, r2
 800a69a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a69c:	4b1b      	ldr	r3, [pc, #108]	; (800a70c <HAL_RCC_OscConfig+0x4cc>)
 800a69e:	2201      	movs	r2, #1
 800a6a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6a2:	f7fd fd89 	bl	80081b8 <HAL_GetTick>
 800a6a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a6a8:	e008      	b.n	800a6bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6aa:	f7fd fd85 	bl	80081b8 <HAL_GetTick>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	1ad3      	subs	r3, r2, r3
 800a6b4:	2b02      	cmp	r3, #2
 800a6b6:	d901      	bls.n	800a6bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a6b8:	2303      	movs	r3, #3
 800a6ba:	e03d      	b.n	800a738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a6bc:	4b11      	ldr	r3, [pc, #68]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d0f0      	beq.n	800a6aa <HAL_RCC_OscConfig+0x46a>
 800a6c8:	e035      	b.n	800a736 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6ca:	4b10      	ldr	r3, [pc, #64]	; (800a70c <HAL_RCC_OscConfig+0x4cc>)
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6d0:	f7fd fd72 	bl	80081b8 <HAL_GetTick>
 800a6d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a6d6:	e008      	b.n	800a6ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6d8:	f7fd fd6e 	bl	80081b8 <HAL_GetTick>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	2b02      	cmp	r3, #2
 800a6e4:	d901      	bls.n	800a6ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	e026      	b.n	800a738 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a6ea:	4b06      	ldr	r3, [pc, #24]	; (800a704 <HAL_RCC_OscConfig+0x4c4>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d1f0      	bne.n	800a6d8 <HAL_RCC_OscConfig+0x498>
 800a6f6:	e01e      	b.n	800a736 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	69db      	ldr	r3, [r3, #28]
 800a6fc:	2b01      	cmp	r3, #1
 800a6fe:	d107      	bne.n	800a710 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	e019      	b.n	800a738 <HAL_RCC_OscConfig+0x4f8>
 800a704:	40021000 	.word	0x40021000
 800a708:	40007000 	.word	0x40007000
 800a70c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a710:	4b0b      	ldr	r3, [pc, #44]	; (800a740 <HAL_RCC_OscConfig+0x500>)
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6a1b      	ldr	r3, [r3, #32]
 800a720:	429a      	cmp	r2, r3
 800a722:	d106      	bne.n	800a732 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a72e:	429a      	cmp	r2, r3
 800a730:	d001      	beq.n	800a736 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	e000      	b.n	800a738 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a736:	2300      	movs	r3, #0
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3718      	adds	r7, #24
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	40021000 	.word	0x40021000

0800a744 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d101      	bne.n	800a758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a754:	2301      	movs	r3, #1
 800a756:	e0d0      	b.n	800a8fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a758:	4b6a      	ldr	r3, [pc, #424]	; (800a904 <HAL_RCC_ClockConfig+0x1c0>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f003 0307 	and.w	r3, r3, #7
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	429a      	cmp	r2, r3
 800a764:	d910      	bls.n	800a788 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a766:	4b67      	ldr	r3, [pc, #412]	; (800a904 <HAL_RCC_ClockConfig+0x1c0>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f023 0207 	bic.w	r2, r3, #7
 800a76e:	4965      	ldr	r1, [pc, #404]	; (800a904 <HAL_RCC_ClockConfig+0x1c0>)
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	4313      	orrs	r3, r2
 800a774:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a776:	4b63      	ldr	r3, [pc, #396]	; (800a904 <HAL_RCC_ClockConfig+0x1c0>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 0307 	and.w	r3, r3, #7
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	429a      	cmp	r2, r3
 800a782:	d001      	beq.n	800a788 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	e0b8      	b.n	800a8fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 0302 	and.w	r3, r3, #2
 800a790:	2b00      	cmp	r3, #0
 800a792:	d020      	beq.n	800a7d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 0304 	and.w	r3, r3, #4
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d005      	beq.n	800a7ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a7a0:	4b59      	ldr	r3, [pc, #356]	; (800a908 <HAL_RCC_ClockConfig+0x1c4>)
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	4a58      	ldr	r2, [pc, #352]	; (800a908 <HAL_RCC_ClockConfig+0x1c4>)
 800a7a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a7aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f003 0308 	and.w	r3, r3, #8
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d005      	beq.n	800a7c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a7b8:	4b53      	ldr	r3, [pc, #332]	; (800a908 <HAL_RCC_ClockConfig+0x1c4>)
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	4a52      	ldr	r2, [pc, #328]	; (800a908 <HAL_RCC_ClockConfig+0x1c4>)
 800a7be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a7c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a7c4:	4b50      	ldr	r3, [pc, #320]	; (800a908 <HAL_RCC_ClockConfig+0x1c4>)
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	689b      	ldr	r3, [r3, #8]
 800a7d0:	494d      	ldr	r1, [pc, #308]	; (800a908 <HAL_RCC_ClockConfig+0x1c4>)
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f003 0301 	and.w	r3, r3, #1
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d040      	beq.n	800a864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d107      	bne.n	800a7fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a7ea:	4b47      	ldr	r3, [pc, #284]	; (800a908 <HAL_RCC_ClockConfig+0x1c4>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d115      	bne.n	800a822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e07f      	b.n	800a8fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d107      	bne.n	800a812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a802:	4b41      	ldr	r3, [pc, #260]	; (800a908 <HAL_RCC_ClockConfig+0x1c4>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d109      	bne.n	800a822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a80e:	2301      	movs	r3, #1
 800a810:	e073      	b.n	800a8fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a812:	4b3d      	ldr	r3, [pc, #244]	; (800a908 <HAL_RCC_ClockConfig+0x1c4>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f003 0302 	and.w	r3, r3, #2
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d101      	bne.n	800a822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	e06b      	b.n	800a8fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a822:	4b39      	ldr	r3, [pc, #228]	; (800a908 <HAL_RCC_ClockConfig+0x1c4>)
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	f023 0203 	bic.w	r2, r3, #3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	4936      	ldr	r1, [pc, #216]	; (800a908 <HAL_RCC_ClockConfig+0x1c4>)
 800a830:	4313      	orrs	r3, r2
 800a832:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a834:	f7fd fcc0 	bl	80081b8 <HAL_GetTick>
 800a838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a83a:	e00a      	b.n	800a852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a83c:	f7fd fcbc 	bl	80081b8 <HAL_GetTick>
 800a840:	4602      	mov	r2, r0
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	f241 3288 	movw	r2, #5000	; 0x1388
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d901      	bls.n	800a852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a84e:	2303      	movs	r3, #3
 800a850:	e053      	b.n	800a8fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a852:	4b2d      	ldr	r3, [pc, #180]	; (800a908 <HAL_RCC_ClockConfig+0x1c4>)
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	f003 020c 	and.w	r2, r3, #12
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	685b      	ldr	r3, [r3, #4]
 800a85e:	009b      	lsls	r3, r3, #2
 800a860:	429a      	cmp	r2, r3
 800a862:	d1eb      	bne.n	800a83c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a864:	4b27      	ldr	r3, [pc, #156]	; (800a904 <HAL_RCC_ClockConfig+0x1c0>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f003 0307 	and.w	r3, r3, #7
 800a86c:	683a      	ldr	r2, [r7, #0]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d210      	bcs.n	800a894 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a872:	4b24      	ldr	r3, [pc, #144]	; (800a904 <HAL_RCC_ClockConfig+0x1c0>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f023 0207 	bic.w	r2, r3, #7
 800a87a:	4922      	ldr	r1, [pc, #136]	; (800a904 <HAL_RCC_ClockConfig+0x1c0>)
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	4313      	orrs	r3, r2
 800a880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a882:	4b20      	ldr	r3, [pc, #128]	; (800a904 <HAL_RCC_ClockConfig+0x1c0>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f003 0307 	and.w	r3, r3, #7
 800a88a:	683a      	ldr	r2, [r7, #0]
 800a88c:	429a      	cmp	r2, r3
 800a88e:	d001      	beq.n	800a894 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a890:	2301      	movs	r3, #1
 800a892:	e032      	b.n	800a8fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f003 0304 	and.w	r3, r3, #4
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d008      	beq.n	800a8b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a8a0:	4b19      	ldr	r3, [pc, #100]	; (800a908 <HAL_RCC_ClockConfig+0x1c4>)
 800a8a2:	685b      	ldr	r3, [r3, #4]
 800a8a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	68db      	ldr	r3, [r3, #12]
 800a8ac:	4916      	ldr	r1, [pc, #88]	; (800a908 <HAL_RCC_ClockConfig+0x1c4>)
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 0308 	and.w	r3, r3, #8
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d009      	beq.n	800a8d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a8be:	4b12      	ldr	r3, [pc, #72]	; (800a908 <HAL_RCC_ClockConfig+0x1c4>)
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	691b      	ldr	r3, [r3, #16]
 800a8ca:	00db      	lsls	r3, r3, #3
 800a8cc:	490e      	ldr	r1, [pc, #56]	; (800a908 <HAL_RCC_ClockConfig+0x1c4>)
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a8d2:	f000 f821 	bl	800a918 <HAL_RCC_GetSysClockFreq>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	4b0b      	ldr	r3, [pc, #44]	; (800a908 <HAL_RCC_ClockConfig+0x1c4>)
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	091b      	lsrs	r3, r3, #4
 800a8de:	f003 030f 	and.w	r3, r3, #15
 800a8e2:	490a      	ldr	r1, [pc, #40]	; (800a90c <HAL_RCC_ClockConfig+0x1c8>)
 800a8e4:	5ccb      	ldrb	r3, [r1, r3]
 800a8e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ea:	4a09      	ldr	r2, [pc, #36]	; (800a910 <HAL_RCC_ClockConfig+0x1cc>)
 800a8ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a8ee:	4b09      	ldr	r3, [pc, #36]	; (800a914 <HAL_RCC_ClockConfig+0x1d0>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f7fd fc1e 	bl	8008134 <HAL_InitTick>

  return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	40022000 	.word	0x40022000
 800a908:	40021000 	.word	0x40021000
 800a90c:	0800cbe0 	.word	0x0800cbe0
 800a910:	200000a8 	.word	0x200000a8
 800a914:	200000ac 	.word	0x200000ac

0800a918 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a918:	b480      	push	{r7}
 800a91a:	b087      	sub	sp, #28
 800a91c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a91e:	2300      	movs	r3, #0
 800a920:	60fb      	str	r3, [r7, #12]
 800a922:	2300      	movs	r3, #0
 800a924:	60bb      	str	r3, [r7, #8]
 800a926:	2300      	movs	r3, #0
 800a928:	617b      	str	r3, [r7, #20]
 800a92a:	2300      	movs	r3, #0
 800a92c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a92e:	2300      	movs	r3, #0
 800a930:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a932:	4b1e      	ldr	r3, [pc, #120]	; (800a9ac <HAL_RCC_GetSysClockFreq+0x94>)
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f003 030c 	and.w	r3, r3, #12
 800a93e:	2b04      	cmp	r3, #4
 800a940:	d002      	beq.n	800a948 <HAL_RCC_GetSysClockFreq+0x30>
 800a942:	2b08      	cmp	r3, #8
 800a944:	d003      	beq.n	800a94e <HAL_RCC_GetSysClockFreq+0x36>
 800a946:	e027      	b.n	800a998 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a948:	4b19      	ldr	r3, [pc, #100]	; (800a9b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800a94a:	613b      	str	r3, [r7, #16]
      break;
 800a94c:	e027      	b.n	800a99e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	0c9b      	lsrs	r3, r3, #18
 800a952:	f003 030f 	and.w	r3, r3, #15
 800a956:	4a17      	ldr	r2, [pc, #92]	; (800a9b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a958:	5cd3      	ldrb	r3, [r2, r3]
 800a95a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a962:	2b00      	cmp	r3, #0
 800a964:	d010      	beq.n	800a988 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a966:	4b11      	ldr	r3, [pc, #68]	; (800a9ac <HAL_RCC_GetSysClockFreq+0x94>)
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	0c5b      	lsrs	r3, r3, #17
 800a96c:	f003 0301 	and.w	r3, r3, #1
 800a970:	4a11      	ldr	r2, [pc, #68]	; (800a9b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800a972:	5cd3      	ldrb	r3, [r2, r3]
 800a974:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4a0d      	ldr	r2, [pc, #52]	; (800a9b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800a97a:	fb03 f202 	mul.w	r2, r3, r2
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	fbb2 f3f3 	udiv	r3, r2, r3
 800a984:	617b      	str	r3, [r7, #20]
 800a986:	e004      	b.n	800a992 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	4a0c      	ldr	r2, [pc, #48]	; (800a9bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800a98c:	fb02 f303 	mul.w	r3, r2, r3
 800a990:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	613b      	str	r3, [r7, #16]
      break;
 800a996:	e002      	b.n	800a99e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a998:	4b05      	ldr	r3, [pc, #20]	; (800a9b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800a99a:	613b      	str	r3, [r7, #16]
      break;
 800a99c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a99e:	693b      	ldr	r3, [r7, #16]
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	371c      	adds	r7, #28
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bc80      	pop	{r7}
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	40021000 	.word	0x40021000
 800a9b0:	007a1200 	.word	0x007a1200
 800a9b4:	0800cbf8 	.word	0x0800cbf8
 800a9b8:	0800cc08 	.word	0x0800cc08
 800a9bc:	003d0900 	.word	0x003d0900

0800a9c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a9c4:	4b02      	ldr	r3, [pc, #8]	; (800a9d0 <HAL_RCC_GetHCLKFreq+0x10>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bc80      	pop	{r7}
 800a9ce:	4770      	bx	lr
 800a9d0:	200000a8 	.word	0x200000a8

0800a9d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a9d8:	f7ff fff2 	bl	800a9c0 <HAL_RCC_GetHCLKFreq>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	4b05      	ldr	r3, [pc, #20]	; (800a9f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	0a1b      	lsrs	r3, r3, #8
 800a9e4:	f003 0307 	and.w	r3, r3, #7
 800a9e8:	4903      	ldr	r1, [pc, #12]	; (800a9f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a9ea:	5ccb      	ldrb	r3, [r1, r3]
 800a9ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	40021000 	.word	0x40021000
 800a9f8:	0800cbf0 	.word	0x0800cbf0

0800a9fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aa00:	f7ff ffde 	bl	800a9c0 <HAL_RCC_GetHCLKFreq>
 800aa04:	4602      	mov	r2, r0
 800aa06:	4b05      	ldr	r3, [pc, #20]	; (800aa1c <HAL_RCC_GetPCLK2Freq+0x20>)
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	0adb      	lsrs	r3, r3, #11
 800aa0c:	f003 0307 	and.w	r3, r3, #7
 800aa10:	4903      	ldr	r1, [pc, #12]	; (800aa20 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa12:	5ccb      	ldrb	r3, [r1, r3]
 800aa14:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	bd80      	pop	{r7, pc}
 800aa1c:	40021000 	.word	0x40021000
 800aa20:	0800cbf0 	.word	0x0800cbf0

0800aa24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b085      	sub	sp, #20
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800aa2c:	4b0a      	ldr	r3, [pc, #40]	; (800aa58 <RCC_Delay+0x34>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	4a0a      	ldr	r2, [pc, #40]	; (800aa5c <RCC_Delay+0x38>)
 800aa32:	fba2 2303 	umull	r2, r3, r2, r3
 800aa36:	0a5b      	lsrs	r3, r3, #9
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	fb02 f303 	mul.w	r3, r2, r3
 800aa3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800aa40:	bf00      	nop
  }
  while (Delay --);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	1e5a      	subs	r2, r3, #1
 800aa46:	60fa      	str	r2, [r7, #12]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1f9      	bne.n	800aa40 <RCC_Delay+0x1c>
}
 800aa4c:	bf00      	nop
 800aa4e:	bf00      	nop
 800aa50:	3714      	adds	r7, #20
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bc80      	pop	{r7}
 800aa56:	4770      	bx	lr
 800aa58:	200000a8 	.word	0x200000a8
 800aa5c:	10624dd3 	.word	0x10624dd3

0800aa60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b082      	sub	sp, #8
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d101      	bne.n	800aa72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e041      	b.n	800aaf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d106      	bne.n	800aa8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2200      	movs	r2, #0
 800aa82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7fd fa5c 	bl	8007f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2202      	movs	r2, #2
 800aa90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	3304      	adds	r3, #4
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	4610      	mov	r0, r2
 800aaa0:	f000 fa82 	bl	800afa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2201      	movs	r2, #1
 800aab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2201      	movs	r2, #1
 800aab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2201      	movs	r2, #1
 800aac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2201      	movs	r2, #1
 800aac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2201      	movs	r2, #1
 800aae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2201      	movs	r2, #1
 800aaf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
	...

0800ab00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b085      	sub	sp, #20
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d001      	beq.n	800ab18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab14:	2301      	movs	r3, #1
 800ab16:	e044      	b.n	800aba2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2202      	movs	r2, #2
 800ab1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	68da      	ldr	r2, [r3, #12]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f042 0201 	orr.w	r2, r2, #1
 800ab2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a1d      	ldr	r2, [pc, #116]	; (800abac <HAL_TIM_Base_Start_IT+0xac>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d018      	beq.n	800ab6c <HAL_TIM_Base_Start_IT+0x6c>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a1c      	ldr	r2, [pc, #112]	; (800abb0 <HAL_TIM_Base_Start_IT+0xb0>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d013      	beq.n	800ab6c <HAL_TIM_Base_Start_IT+0x6c>
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab4c:	d00e      	beq.n	800ab6c <HAL_TIM_Base_Start_IT+0x6c>
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	4a18      	ldr	r2, [pc, #96]	; (800abb4 <HAL_TIM_Base_Start_IT+0xb4>)
 800ab54:	4293      	cmp	r3, r2
 800ab56:	d009      	beq.n	800ab6c <HAL_TIM_Base_Start_IT+0x6c>
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a16      	ldr	r2, [pc, #88]	; (800abb8 <HAL_TIM_Base_Start_IT+0xb8>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d004      	beq.n	800ab6c <HAL_TIM_Base_Start_IT+0x6c>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a15      	ldr	r2, [pc, #84]	; (800abbc <HAL_TIM_Base_Start_IT+0xbc>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d111      	bne.n	800ab90 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	689b      	ldr	r3, [r3, #8]
 800ab72:	f003 0307 	and.w	r3, r3, #7
 800ab76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2b06      	cmp	r3, #6
 800ab7c:	d010      	beq.n	800aba0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f042 0201 	orr.w	r2, r2, #1
 800ab8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab8e:	e007      	b.n	800aba0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f042 0201 	orr.w	r2, r2, #1
 800ab9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3714      	adds	r7, #20
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bc80      	pop	{r7}
 800abaa:	4770      	bx	lr
 800abac:	40012c00 	.word	0x40012c00
 800abb0:	40013400 	.word	0x40013400
 800abb4:	40000400 	.word	0x40000400
 800abb8:	40000800 	.word	0x40000800
 800abbc:	40000c00 	.word	0x40000c00

0800abc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	f003 0302 	and.w	r3, r3, #2
 800abd2:	2b02      	cmp	r3, #2
 800abd4:	d122      	bne.n	800ac1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	f003 0302 	and.w	r3, r3, #2
 800abe0:	2b02      	cmp	r3, #2
 800abe2:	d11b      	bne.n	800ac1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f06f 0202 	mvn.w	r2, #2
 800abec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2201      	movs	r2, #1
 800abf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	f003 0303 	and.w	r3, r3, #3
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d003      	beq.n	800ac0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 f9b4 	bl	800af70 <HAL_TIM_IC_CaptureCallback>
 800ac08:	e005      	b.n	800ac16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f9a7 	bl	800af5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 f9b6 	bl	800af82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	f003 0304 	and.w	r3, r3, #4
 800ac26:	2b04      	cmp	r3, #4
 800ac28:	d122      	bne.n	800ac70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	f003 0304 	and.w	r3, r3, #4
 800ac34:	2b04      	cmp	r3, #4
 800ac36:	d11b      	bne.n	800ac70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	f06f 0204 	mvn.w	r2, #4
 800ac40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2202      	movs	r2, #2
 800ac46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	699b      	ldr	r3, [r3, #24]
 800ac4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d003      	beq.n	800ac5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 f98a 	bl	800af70 <HAL_TIM_IC_CaptureCallback>
 800ac5c:	e005      	b.n	800ac6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 f97d 	bl	800af5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 f98c 	bl	800af82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	691b      	ldr	r3, [r3, #16]
 800ac76:	f003 0308 	and.w	r3, r3, #8
 800ac7a:	2b08      	cmp	r3, #8
 800ac7c:	d122      	bne.n	800acc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	f003 0308 	and.w	r3, r3, #8
 800ac88:	2b08      	cmp	r3, #8
 800ac8a:	d11b      	bne.n	800acc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f06f 0208 	mvn.w	r2, #8
 800ac94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2204      	movs	r2, #4
 800ac9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	69db      	ldr	r3, [r3, #28]
 800aca2:	f003 0303 	and.w	r3, r3, #3
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d003      	beq.n	800acb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 f960 	bl	800af70 <HAL_TIM_IC_CaptureCallback>
 800acb0:	e005      	b.n	800acbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 f953 	bl	800af5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 f962 	bl	800af82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	f003 0310 	and.w	r3, r3, #16
 800acce:	2b10      	cmp	r3, #16
 800acd0:	d122      	bne.n	800ad18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	f003 0310 	and.w	r3, r3, #16
 800acdc:	2b10      	cmp	r3, #16
 800acde:	d11b      	bne.n	800ad18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f06f 0210 	mvn.w	r2, #16
 800ace8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2208      	movs	r2, #8
 800acee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	69db      	ldr	r3, [r3, #28]
 800acf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d003      	beq.n	800ad06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 f936 	bl	800af70 <HAL_TIM_IC_CaptureCallback>
 800ad04:	e005      	b.n	800ad12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 f929 	bl	800af5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 f938 	bl	800af82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	691b      	ldr	r3, [r3, #16]
 800ad1e:	f003 0301 	and.w	r3, r3, #1
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d10e      	bne.n	800ad44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	68db      	ldr	r3, [r3, #12]
 800ad2c:	f003 0301 	and.w	r3, r3, #1
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d107      	bne.n	800ad44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f06f 0201 	mvn.w	r2, #1
 800ad3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f7fc fd6e 	bl	8007820 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad4e:	2b80      	cmp	r3, #128	; 0x80
 800ad50:	d10e      	bne.n	800ad70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad5c:	2b80      	cmp	r3, #128	; 0x80
 800ad5e:	d107      	bne.n	800ad70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 faa1 	bl	800b2b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad7a:	2b40      	cmp	r3, #64	; 0x40
 800ad7c:	d10e      	bne.n	800ad9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad88:	2b40      	cmp	r3, #64	; 0x40
 800ad8a:	d107      	bne.n	800ad9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ad94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f000 f8fc 	bl	800af94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	691b      	ldr	r3, [r3, #16]
 800ada2:	f003 0320 	and.w	r3, r3, #32
 800ada6:	2b20      	cmp	r3, #32
 800ada8:	d10e      	bne.n	800adc8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	f003 0320 	and.w	r3, r3, #32
 800adb4:	2b20      	cmp	r3, #32
 800adb6:	d107      	bne.n	800adc8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f06f 0220 	mvn.w	r2, #32
 800adc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 fa6c 	bl	800b2a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800adc8:	bf00      	nop
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800adda:	2300      	movs	r3, #0
 800addc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d101      	bne.n	800adec <HAL_TIM_ConfigClockSource+0x1c>
 800ade8:	2302      	movs	r3, #2
 800adea:	e0b4      	b.n	800af56 <HAL_TIM_ConfigClockSource+0x186>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2201      	movs	r2, #1
 800adf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2202      	movs	r2, #2
 800adf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ae0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae24:	d03e      	beq.n	800aea4 <HAL_TIM_ConfigClockSource+0xd4>
 800ae26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae2a:	f200 8087 	bhi.w	800af3c <HAL_TIM_ConfigClockSource+0x16c>
 800ae2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae32:	f000 8086 	beq.w	800af42 <HAL_TIM_ConfigClockSource+0x172>
 800ae36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae3a:	d87f      	bhi.n	800af3c <HAL_TIM_ConfigClockSource+0x16c>
 800ae3c:	2b70      	cmp	r3, #112	; 0x70
 800ae3e:	d01a      	beq.n	800ae76 <HAL_TIM_ConfigClockSource+0xa6>
 800ae40:	2b70      	cmp	r3, #112	; 0x70
 800ae42:	d87b      	bhi.n	800af3c <HAL_TIM_ConfigClockSource+0x16c>
 800ae44:	2b60      	cmp	r3, #96	; 0x60
 800ae46:	d050      	beq.n	800aeea <HAL_TIM_ConfigClockSource+0x11a>
 800ae48:	2b60      	cmp	r3, #96	; 0x60
 800ae4a:	d877      	bhi.n	800af3c <HAL_TIM_ConfigClockSource+0x16c>
 800ae4c:	2b50      	cmp	r3, #80	; 0x50
 800ae4e:	d03c      	beq.n	800aeca <HAL_TIM_ConfigClockSource+0xfa>
 800ae50:	2b50      	cmp	r3, #80	; 0x50
 800ae52:	d873      	bhi.n	800af3c <HAL_TIM_ConfigClockSource+0x16c>
 800ae54:	2b40      	cmp	r3, #64	; 0x40
 800ae56:	d058      	beq.n	800af0a <HAL_TIM_ConfigClockSource+0x13a>
 800ae58:	2b40      	cmp	r3, #64	; 0x40
 800ae5a:	d86f      	bhi.n	800af3c <HAL_TIM_ConfigClockSource+0x16c>
 800ae5c:	2b30      	cmp	r3, #48	; 0x30
 800ae5e:	d064      	beq.n	800af2a <HAL_TIM_ConfigClockSource+0x15a>
 800ae60:	2b30      	cmp	r3, #48	; 0x30
 800ae62:	d86b      	bhi.n	800af3c <HAL_TIM_ConfigClockSource+0x16c>
 800ae64:	2b20      	cmp	r3, #32
 800ae66:	d060      	beq.n	800af2a <HAL_TIM_ConfigClockSource+0x15a>
 800ae68:	2b20      	cmp	r3, #32
 800ae6a:	d867      	bhi.n	800af3c <HAL_TIM_ConfigClockSource+0x16c>
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d05c      	beq.n	800af2a <HAL_TIM_ConfigClockSource+0x15a>
 800ae70:	2b10      	cmp	r3, #16
 800ae72:	d05a      	beq.n	800af2a <HAL_TIM_ConfigClockSource+0x15a>
 800ae74:	e062      	b.n	800af3c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ae7a:	683b      	ldr	r3, [r7, #0]
 800ae7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae86:	f000 f980 	bl	800b18a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ae98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	68ba      	ldr	r2, [r7, #8]
 800aea0:	609a      	str	r2, [r3, #8]
      break;
 800aea2:	e04f      	b.n	800af44 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aeb4:	f000 f969 	bl	800b18a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	689a      	ldr	r2, [r3, #8]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aec6:	609a      	str	r2, [r3, #8]
      break;
 800aec8:	e03c      	b.n	800af44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aed6:	461a      	mov	r2, r3
 800aed8:	f000 f8e0 	bl	800b09c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	2150      	movs	r1, #80	; 0x50
 800aee2:	4618      	mov	r0, r3
 800aee4:	f000 f937 	bl	800b156 <TIM_ITRx_SetConfig>
      break;
 800aee8:	e02c      	b.n	800af44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aef6:	461a      	mov	r2, r3
 800aef8:	f000 f8fe 	bl	800b0f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	2160      	movs	r1, #96	; 0x60
 800af02:	4618      	mov	r0, r3
 800af04:	f000 f927 	bl	800b156 <TIM_ITRx_SetConfig>
      break;
 800af08:	e01c      	b.n	800af44 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af12:	683b      	ldr	r3, [r7, #0]
 800af14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800af16:	461a      	mov	r2, r3
 800af18:	f000 f8c0 	bl	800b09c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	2140      	movs	r1, #64	; 0x40
 800af22:	4618      	mov	r0, r3
 800af24:	f000 f917 	bl	800b156 <TIM_ITRx_SetConfig>
      break;
 800af28:	e00c      	b.n	800af44 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4619      	mov	r1, r3
 800af34:	4610      	mov	r0, r2
 800af36:	f000 f90e 	bl	800b156 <TIM_ITRx_SetConfig>
      break;
 800af3a:	e003      	b.n	800af44 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800af3c:	2301      	movs	r3, #1
 800af3e:	73fb      	strb	r3, [r7, #15]
      break;
 800af40:	e000      	b.n	800af44 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800af42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2201      	movs	r2, #1
 800af48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800af54:	7bfb      	ldrb	r3, [r7, #15]
}
 800af56:	4618      	mov	r0, r3
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}

0800af5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af5e:	b480      	push	{r7}
 800af60:	b083      	sub	sp, #12
 800af62:	af00      	add	r7, sp, #0
 800af64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af66:	bf00      	nop
 800af68:	370c      	adds	r7, #12
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bc80      	pop	{r7}
 800af6e:	4770      	bx	lr

0800af70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800af70:	b480      	push	{r7}
 800af72:	b083      	sub	sp, #12
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800af78:	bf00      	nop
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bc80      	pop	{r7}
 800af80:	4770      	bx	lr

0800af82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af82:	b480      	push	{r7}
 800af84:	b083      	sub	sp, #12
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af8a:	bf00      	nop
 800af8c:	370c      	adds	r7, #12
 800af8e:	46bd      	mov	sp, r7
 800af90:	bc80      	pop	{r7}
 800af92:	4770      	bx	lr

0800af94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af9c:	bf00      	nop
 800af9e:	370c      	adds	r7, #12
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bc80      	pop	{r7}
 800afa4:	4770      	bx	lr
	...

0800afa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a33      	ldr	r2, [pc, #204]	; (800b088 <TIM_Base_SetConfig+0xe0>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d013      	beq.n	800afe8 <TIM_Base_SetConfig+0x40>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	4a32      	ldr	r2, [pc, #200]	; (800b08c <TIM_Base_SetConfig+0xe4>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d00f      	beq.n	800afe8 <TIM_Base_SetConfig+0x40>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afce:	d00b      	beq.n	800afe8 <TIM_Base_SetConfig+0x40>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	4a2f      	ldr	r2, [pc, #188]	; (800b090 <TIM_Base_SetConfig+0xe8>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d007      	beq.n	800afe8 <TIM_Base_SetConfig+0x40>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	4a2e      	ldr	r2, [pc, #184]	; (800b094 <TIM_Base_SetConfig+0xec>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d003      	beq.n	800afe8 <TIM_Base_SetConfig+0x40>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	4a2d      	ldr	r2, [pc, #180]	; (800b098 <TIM_Base_SetConfig+0xf0>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d108      	bne.n	800affa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4a22      	ldr	r2, [pc, #136]	; (800b088 <TIM_Base_SetConfig+0xe0>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d013      	beq.n	800b02a <TIM_Base_SetConfig+0x82>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4a21      	ldr	r2, [pc, #132]	; (800b08c <TIM_Base_SetConfig+0xe4>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d00f      	beq.n	800b02a <TIM_Base_SetConfig+0x82>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b010:	d00b      	beq.n	800b02a <TIM_Base_SetConfig+0x82>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	4a1e      	ldr	r2, [pc, #120]	; (800b090 <TIM_Base_SetConfig+0xe8>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d007      	beq.n	800b02a <TIM_Base_SetConfig+0x82>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	4a1d      	ldr	r2, [pc, #116]	; (800b094 <TIM_Base_SetConfig+0xec>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d003      	beq.n	800b02a <TIM_Base_SetConfig+0x82>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4a1c      	ldr	r2, [pc, #112]	; (800b098 <TIM_Base_SetConfig+0xf0>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d108      	bne.n	800b03c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	68db      	ldr	r3, [r3, #12]
 800b036:	68fa      	ldr	r2, [r7, #12]
 800b038:	4313      	orrs	r3, r2
 800b03a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	695b      	ldr	r3, [r3, #20]
 800b046:	4313      	orrs	r3, r2
 800b048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	68fa      	ldr	r2, [r7, #12]
 800b04e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	689a      	ldr	r2, [r3, #8]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4a09      	ldr	r2, [pc, #36]	; (800b088 <TIM_Base_SetConfig+0xe0>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d003      	beq.n	800b070 <TIM_Base_SetConfig+0xc8>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	4a08      	ldr	r2, [pc, #32]	; (800b08c <TIM_Base_SetConfig+0xe4>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d103      	bne.n	800b078 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	691a      	ldr	r2, [r3, #16]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	615a      	str	r2, [r3, #20]
}
 800b07e:	bf00      	nop
 800b080:	3714      	adds	r7, #20
 800b082:	46bd      	mov	sp, r7
 800b084:	bc80      	pop	{r7}
 800b086:	4770      	bx	lr
 800b088:	40012c00 	.word	0x40012c00
 800b08c:	40013400 	.word	0x40013400
 800b090:	40000400 	.word	0x40000400
 800b094:	40000800 	.word	0x40000800
 800b098:	40000c00 	.word	0x40000c00

0800b09c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b087      	sub	sp, #28
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6a1b      	ldr	r3, [r3, #32]
 800b0ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	f023 0201 	bic.w	r2, r3, #1
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	699b      	ldr	r3, [r3, #24]
 800b0be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b0c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	011b      	lsls	r3, r3, #4
 800b0cc:	693a      	ldr	r2, [r7, #16]
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	f023 030a 	bic.w	r3, r3, #10
 800b0d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b0da:	697a      	ldr	r2, [r7, #20]
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	693a      	ldr	r2, [r7, #16]
 800b0e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	621a      	str	r2, [r3, #32]
}
 800b0ee:	bf00      	nop
 800b0f0:	371c      	adds	r7, #28
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bc80      	pop	{r7}
 800b0f6:	4770      	bx	lr

0800b0f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b087      	sub	sp, #28
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6a1b      	ldr	r3, [r3, #32]
 800b108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	6a1b      	ldr	r3, [r3, #32]
 800b10e:	f023 0210 	bic.w	r2, r3, #16
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	699b      	ldr	r3, [r3, #24]
 800b11a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	031b      	lsls	r3, r3, #12
 800b128:	693a      	ldr	r2, [r7, #16]
 800b12a:	4313      	orrs	r3, r2
 800b12c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b134:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	011b      	lsls	r3, r3, #4
 800b13a:	697a      	ldr	r2, [r7, #20]
 800b13c:	4313      	orrs	r3, r2
 800b13e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	693a      	ldr	r2, [r7, #16]
 800b144:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	697a      	ldr	r2, [r7, #20]
 800b14a:	621a      	str	r2, [r3, #32]
}
 800b14c:	bf00      	nop
 800b14e:	371c      	adds	r7, #28
 800b150:	46bd      	mov	sp, r7
 800b152:	bc80      	pop	{r7}
 800b154:	4770      	bx	lr

0800b156 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b156:	b480      	push	{r7}
 800b158:	b085      	sub	sp, #20
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	6078      	str	r0, [r7, #4]
 800b15e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b16c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b16e:	683a      	ldr	r2, [r7, #0]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	4313      	orrs	r3, r2
 800b174:	f043 0307 	orr.w	r3, r3, #7
 800b178:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	609a      	str	r2, [r3, #8]
}
 800b180:	bf00      	nop
 800b182:	3714      	adds	r7, #20
 800b184:	46bd      	mov	sp, r7
 800b186:	bc80      	pop	{r7}
 800b188:	4770      	bx	lr

0800b18a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b18a:	b480      	push	{r7}
 800b18c:	b087      	sub	sp, #28
 800b18e:	af00      	add	r7, sp, #0
 800b190:	60f8      	str	r0, [r7, #12]
 800b192:	60b9      	str	r1, [r7, #8]
 800b194:	607a      	str	r2, [r7, #4]
 800b196:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b1a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	021a      	lsls	r2, r3, #8
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	431a      	orrs	r2, r3
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	4313      	orrs	r3, r2
 800b1b2:	697a      	ldr	r2, [r7, #20]
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	697a      	ldr	r2, [r7, #20]
 800b1bc:	609a      	str	r2, [r3, #8]
}
 800b1be:	bf00      	nop
 800b1c0:	371c      	adds	r7, #28
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bc80      	pop	{r7}
 800b1c6:	4770      	bx	lr

0800b1c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d101      	bne.n	800b1e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1dc:	2302      	movs	r3, #2
 800b1de:	e050      	b.n	800b282 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2202      	movs	r2, #2
 800b1ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b206:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	4313      	orrs	r3, r2
 800b210:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	68fa      	ldr	r2, [r7, #12]
 800b218:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	4a1b      	ldr	r2, [pc, #108]	; (800b28c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d018      	beq.n	800b256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	4a19      	ldr	r2, [pc, #100]	; (800b290 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d013      	beq.n	800b256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b236:	d00e      	beq.n	800b256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a15      	ldr	r2, [pc, #84]	; (800b294 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d009      	beq.n	800b256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	4a14      	ldr	r2, [pc, #80]	; (800b298 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b248:	4293      	cmp	r3, r2
 800b24a:	d004      	beq.n	800b256 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a12      	ldr	r2, [pc, #72]	; (800b29c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d10c      	bne.n	800b270 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b25c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	4313      	orrs	r3, r2
 800b266:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	68ba      	ldr	r2, [r7, #8]
 800b26e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2201      	movs	r2, #1
 800b274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b280:	2300      	movs	r3, #0
}
 800b282:	4618      	mov	r0, r3
 800b284:	3714      	adds	r7, #20
 800b286:	46bd      	mov	sp, r7
 800b288:	bc80      	pop	{r7}
 800b28a:	4770      	bx	lr
 800b28c:	40012c00 	.word	0x40012c00
 800b290:	40013400 	.word	0x40013400
 800b294:	40000400 	.word	0x40000400
 800b298:	40000800 	.word	0x40000800
 800b29c:	40000c00 	.word	0x40000c00

0800b2a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b083      	sub	sp, #12
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b2a8:	bf00      	nop
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bc80      	pop	{r7}
 800b2b0:	4770      	bx	lr

0800b2b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b2b2:	b480      	push	{r7}
 800b2b4:	b083      	sub	sp, #12
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b2ba:	bf00      	nop
 800b2bc:	370c      	adds	r7, #12
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bc80      	pop	{r7}
 800b2c2:	4770      	bx	lr

0800b2c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d101      	bne.n	800b2d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e042      	b.n	800b35c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d106      	bne.n	800b2f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f7fc fe50 	bl	8007f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2224      	movs	r2, #36	; 0x24
 800b2f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68da      	ldr	r2, [r3, #12]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b306:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 fc7f 	bl	800bc0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	691a      	ldr	r2, [r3, #16]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b31c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	695a      	ldr	r2, [r3, #20]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b32c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	68da      	ldr	r2, [r3, #12]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b33c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	2200      	movs	r2, #0
 800b342:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2220      	movs	r2, #32
 800b348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2220      	movs	r2, #32
 800b350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2200      	movs	r2, #0
 800b358:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b35a:	2300      	movs	r3, #0
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3708      	adds	r7, #8
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b0ba      	sub	sp, #232	; 0xe8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	68db      	ldr	r3, [r3, #12]
 800b37c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	695b      	ldr	r3, [r3, #20]
 800b386:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b38a:	2300      	movs	r3, #0
 800b38c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b390:	2300      	movs	r3, #0
 800b392:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b39a:	f003 030f 	and.w	r3, r3, #15
 800b39e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b3a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d10f      	bne.n	800b3ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b3aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ae:	f003 0320 	and.w	r3, r3, #32
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d009      	beq.n	800b3ca <HAL_UART_IRQHandler+0x66>
 800b3b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3ba:	f003 0320 	and.w	r3, r3, #32
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d003      	beq.n	800b3ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 fb63 	bl	800ba8e <UART_Receive_IT>
      return;
 800b3c8:	e25b      	b.n	800b882 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b3ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	f000 80de 	beq.w	800b590 <HAL_UART_IRQHandler+0x22c>
 800b3d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3d8:	f003 0301 	and.w	r3, r3, #1
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d106      	bne.n	800b3ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b3e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f000 80d1 	beq.w	800b590 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b3ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3f2:	f003 0301 	and.w	r3, r3, #1
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00b      	beq.n	800b412 <HAL_UART_IRQHandler+0xae>
 800b3fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b402:	2b00      	cmp	r3, #0
 800b404:	d005      	beq.n	800b412 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b40a:	f043 0201 	orr.w	r2, r3, #1
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b416:	f003 0304 	and.w	r3, r3, #4
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d00b      	beq.n	800b436 <HAL_UART_IRQHandler+0xd2>
 800b41e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b422:	f003 0301 	and.w	r3, r3, #1
 800b426:	2b00      	cmp	r3, #0
 800b428:	d005      	beq.n	800b436 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b42e:	f043 0202 	orr.w	r2, r3, #2
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b436:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b43a:	f003 0302 	and.w	r3, r3, #2
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d00b      	beq.n	800b45a <HAL_UART_IRQHandler+0xf6>
 800b442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b446:	f003 0301 	and.w	r3, r3, #1
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d005      	beq.n	800b45a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b452:	f043 0204 	orr.w	r2, r3, #4
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b45a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b45e:	f003 0308 	and.w	r3, r3, #8
 800b462:	2b00      	cmp	r3, #0
 800b464:	d011      	beq.n	800b48a <HAL_UART_IRQHandler+0x126>
 800b466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b46a:	f003 0320 	and.w	r3, r3, #32
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d105      	bne.n	800b47e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b476:	f003 0301 	and.w	r3, r3, #1
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d005      	beq.n	800b48a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b482:	f043 0208 	orr.w	r2, r3, #8
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b48e:	2b00      	cmp	r3, #0
 800b490:	f000 81f2 	beq.w	800b878 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b498:	f003 0320 	and.w	r3, r3, #32
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d008      	beq.n	800b4b2 <HAL_UART_IRQHandler+0x14e>
 800b4a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4a4:	f003 0320 	and.w	r3, r3, #32
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d002      	beq.n	800b4b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 faee 	bl	800ba8e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	695b      	ldr	r3, [r3, #20]
 800b4b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	bf14      	ite	ne
 800b4c0:	2301      	movne	r3, #1
 800b4c2:	2300      	moveq	r3, #0
 800b4c4:	b2db      	uxtb	r3, r3
 800b4c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4ce:	f003 0308 	and.w	r3, r3, #8
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d103      	bne.n	800b4de <HAL_UART_IRQHandler+0x17a>
 800b4d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d04f      	beq.n	800b57e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 f9f8 	bl	800b8d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	695b      	ldr	r3, [r3, #20]
 800b4ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d041      	beq.n	800b576 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	3314      	adds	r3, #20
 800b4f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b500:	e853 3f00 	ldrex	r3, [r3]
 800b504:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b508:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b50c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b510:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	3314      	adds	r3, #20
 800b51a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b51e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b522:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b526:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b52a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b52e:	e841 2300 	strex	r3, r2, [r1]
 800b532:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b536:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d1d9      	bne.n	800b4f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b542:	2b00      	cmp	r3, #0
 800b544:	d013      	beq.n	800b56e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b54a:	4a7e      	ldr	r2, [pc, #504]	; (800b744 <HAL_UART_IRQHandler+0x3e0>)
 800b54c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b552:	4618      	mov	r0, r3
 800b554:	f7fd f8a2 	bl	800869c <HAL_DMA_Abort_IT>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d016      	beq.n	800b58c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b564:	687a      	ldr	r2, [r7, #4]
 800b566:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b568:	4610      	mov	r0, r2
 800b56a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b56c:	e00e      	b.n	800b58c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 f99c 	bl	800b8ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b574:	e00a      	b.n	800b58c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 f998 	bl	800b8ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b57c:	e006      	b.n	800b58c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 f994 	bl	800b8ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2200      	movs	r2, #0
 800b588:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b58a:	e175      	b.n	800b878 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b58c:	bf00      	nop
    return;
 800b58e:	e173      	b.n	800b878 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b594:	2b01      	cmp	r3, #1
 800b596:	f040 814f 	bne.w	800b838 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b59a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b59e:	f003 0310 	and.w	r3, r3, #16
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	f000 8148 	beq.w	800b838 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b5a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5ac:	f003 0310 	and.w	r3, r3, #16
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f000 8141 	beq.w	800b838 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	60bb      	str	r3, [r7, #8]
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	60bb      	str	r3, [r7, #8]
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	685b      	ldr	r3, [r3, #4]
 800b5c8:	60bb      	str	r3, [r7, #8]
 800b5ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	695b      	ldr	r3, [r3, #20]
 800b5d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	f000 80b6 	beq.w	800b748 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b5e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	f000 8145 	beq.w	800b87c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b5f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	f080 813e 	bcs.w	800b87c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b606:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b60c:	699b      	ldr	r3, [r3, #24]
 800b60e:	2b20      	cmp	r3, #32
 800b610:	f000 8088 	beq.w	800b724 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	330c      	adds	r3, #12
 800b61a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b61e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b622:	e853 3f00 	ldrex	r3, [r3]
 800b626:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b62a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b62e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b632:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	330c      	adds	r3, #12
 800b63c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b640:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b644:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b648:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b64c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b650:	e841 2300 	strex	r3, r2, [r1]
 800b654:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b658:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1d9      	bne.n	800b614 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	3314      	adds	r3, #20
 800b666:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b668:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b66a:	e853 3f00 	ldrex	r3, [r3]
 800b66e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b670:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b672:	f023 0301 	bic.w	r3, r3, #1
 800b676:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	3314      	adds	r3, #20
 800b680:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b684:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b688:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b68c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b690:	e841 2300 	strex	r3, r2, [r1]
 800b694:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b696:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d1e1      	bne.n	800b660 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	3314      	adds	r3, #20
 800b6a2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b6a6:	e853 3f00 	ldrex	r3, [r3]
 800b6aa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b6ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b6ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	3314      	adds	r3, #20
 800b6bc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b6c0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b6c2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b6c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b6c8:	e841 2300 	strex	r3, r2, [r1]
 800b6cc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b6ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d1e3      	bne.n	800b69c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2220      	movs	r2, #32
 800b6d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	330c      	adds	r3, #12
 800b6e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6ec:	e853 3f00 	ldrex	r3, [r3]
 800b6f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b6f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6f4:	f023 0310 	bic.w	r3, r3, #16
 800b6f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	330c      	adds	r3, #12
 800b702:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b706:	65ba      	str	r2, [r7, #88]	; 0x58
 800b708:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b70a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b70c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b70e:	e841 2300 	strex	r3, r2, [r1]
 800b712:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1e3      	bne.n	800b6e2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b71e:	4618      	mov	r0, r3
 800b720:	f7fc ff81 	bl	8008626 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2202      	movs	r2, #2
 800b728:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b732:	b29b      	uxth	r3, r3
 800b734:	1ad3      	subs	r3, r2, r3
 800b736:	b29b      	uxth	r3, r3
 800b738:	4619      	mov	r1, r3
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f000 f8bf 	bl	800b8be <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b740:	e09c      	b.n	800b87c <HAL_UART_IRQHandler+0x518>
 800b742:	bf00      	nop
 800b744:	0800b999 	.word	0x0800b999
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b750:	b29b      	uxth	r3, r3
 800b752:	1ad3      	subs	r3, r2, r3
 800b754:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	2b00      	cmp	r3, #0
 800b760:	f000 808e 	beq.w	800b880 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b764:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b768:	2b00      	cmp	r3, #0
 800b76a:	f000 8089 	beq.w	800b880 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	330c      	adds	r3, #12
 800b774:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b778:	e853 3f00 	ldrex	r3, [r3]
 800b77c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b77e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b780:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b784:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	330c      	adds	r3, #12
 800b78e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b792:	647a      	str	r2, [r7, #68]	; 0x44
 800b794:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b796:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b798:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b79a:	e841 2300 	strex	r3, r2, [r1]
 800b79e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b7a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1e3      	bne.n	800b76e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	3314      	adds	r3, #20
 800b7ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b0:	e853 3f00 	ldrex	r3, [r3]
 800b7b4:	623b      	str	r3, [r7, #32]
   return(result);
 800b7b6:	6a3b      	ldr	r3, [r7, #32]
 800b7b8:	f023 0301 	bic.w	r3, r3, #1
 800b7bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	3314      	adds	r3, #20
 800b7c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b7ca:	633a      	str	r2, [r7, #48]	; 0x30
 800b7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b7d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7d2:	e841 2300 	strex	r3, r2, [r1]
 800b7d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d1e3      	bne.n	800b7a6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2220      	movs	r2, #32
 800b7e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	330c      	adds	r3, #12
 800b7f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	e853 3f00 	ldrex	r3, [r3]
 800b7fa:	60fb      	str	r3, [r7, #12]
   return(result);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f023 0310 	bic.w	r3, r3, #16
 800b802:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	330c      	adds	r3, #12
 800b80c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b810:	61fa      	str	r2, [r7, #28]
 800b812:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b814:	69b9      	ldr	r1, [r7, #24]
 800b816:	69fa      	ldr	r2, [r7, #28]
 800b818:	e841 2300 	strex	r3, r2, [r1]
 800b81c:	617b      	str	r3, [r7, #20]
   return(result);
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d1e3      	bne.n	800b7ec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2202      	movs	r2, #2
 800b828:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b82a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b82e:	4619      	mov	r1, r3
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 f844 	bl	800b8be <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b836:	e023      	b.n	800b880 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b83c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b840:	2b00      	cmp	r3, #0
 800b842:	d009      	beq.n	800b858 <HAL_UART_IRQHandler+0x4f4>
 800b844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d003      	beq.n	800b858 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 f8b5 	bl	800b9c0 <UART_Transmit_IT>
    return;
 800b856:	e014      	b.n	800b882 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b85c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b860:	2b00      	cmp	r3, #0
 800b862:	d00e      	beq.n	800b882 <HAL_UART_IRQHandler+0x51e>
 800b864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d008      	beq.n	800b882 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	f000 f8f4 	bl	800ba5e <UART_EndTransmit_IT>
    return;
 800b876:	e004      	b.n	800b882 <HAL_UART_IRQHandler+0x51e>
    return;
 800b878:	bf00      	nop
 800b87a:	e002      	b.n	800b882 <HAL_UART_IRQHandler+0x51e>
      return;
 800b87c:	bf00      	nop
 800b87e:	e000      	b.n	800b882 <HAL_UART_IRQHandler+0x51e>
      return;
 800b880:	bf00      	nop
  }
}
 800b882:	37e8      	adds	r7, #232	; 0xe8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b888:	b480      	push	{r7}
 800b88a:	b083      	sub	sp, #12
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b890:	bf00      	nop
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	bc80      	pop	{r7}
 800b898:	4770      	bx	lr

0800b89a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b89a:	b480      	push	{r7}
 800b89c:	b083      	sub	sp, #12
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b8a2:	bf00      	nop
 800b8a4:	370c      	adds	r7, #12
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bc80      	pop	{r7}
 800b8aa:	4770      	bx	lr

0800b8ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b8b4:	bf00      	nop
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bc80      	pop	{r7}
 800b8bc:	4770      	bx	lr

0800b8be <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b8be:	b480      	push	{r7}
 800b8c0:	b083      	sub	sp, #12
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b8ca:	bf00      	nop
 800b8cc:	370c      	adds	r7, #12
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bc80      	pop	{r7}
 800b8d2:	4770      	bx	lr

0800b8d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b095      	sub	sp, #84	; 0x54
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	330c      	adds	r3, #12
 800b8e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8e6:	e853 3f00 	ldrex	r3, [r3]
 800b8ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b8ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b8f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	330c      	adds	r3, #12
 800b8fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b8fc:	643a      	str	r2, [r7, #64]	; 0x40
 800b8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b900:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b902:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b904:	e841 2300 	strex	r3, r2, [r1]
 800b908:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d1e5      	bne.n	800b8dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	3314      	adds	r3, #20
 800b916:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b918:	6a3b      	ldr	r3, [r7, #32]
 800b91a:	e853 3f00 	ldrex	r3, [r3]
 800b91e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	f023 0301 	bic.w	r3, r3, #1
 800b926:	64bb      	str	r3, [r7, #72]	; 0x48
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	3314      	adds	r3, #20
 800b92e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b930:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b932:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b938:	e841 2300 	strex	r3, r2, [r1]
 800b93c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b940:	2b00      	cmp	r3, #0
 800b942:	d1e5      	bne.n	800b910 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d119      	bne.n	800b980 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	330c      	adds	r3, #12
 800b952:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	e853 3f00 	ldrex	r3, [r3]
 800b95a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	f023 0310 	bic.w	r3, r3, #16
 800b962:	647b      	str	r3, [r7, #68]	; 0x44
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	330c      	adds	r3, #12
 800b96a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b96c:	61ba      	str	r2, [r7, #24]
 800b96e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b970:	6979      	ldr	r1, [r7, #20]
 800b972:	69ba      	ldr	r2, [r7, #24]
 800b974:	e841 2300 	strex	r3, r2, [r1]
 800b978:	613b      	str	r3, [r7, #16]
   return(result);
 800b97a:	693b      	ldr	r3, [r7, #16]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d1e5      	bne.n	800b94c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2220      	movs	r2, #32
 800b984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2200      	movs	r2, #0
 800b98c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b98e:	bf00      	nop
 800b990:	3754      	adds	r7, #84	; 0x54
 800b992:	46bd      	mov	sp, r7
 800b994:	bc80      	pop	{r7}
 800b996:	4770      	bx	lr

0800b998 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b9b2:	68f8      	ldr	r0, [r7, #12]
 800b9b4:	f7ff ff7a 	bl	800b8ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b9b8:	bf00      	nop
 800b9ba:	3710      	adds	r7, #16
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}

0800b9c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	2b21      	cmp	r3, #33	; 0x21
 800b9d2:	d13e      	bne.n	800ba52 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	689b      	ldr	r3, [r3, #8]
 800b9d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9dc:	d114      	bne.n	800ba08 <UART_Transmit_IT+0x48>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d110      	bne.n	800ba08 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6a1b      	ldr	r3, [r3, #32]
 800b9ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	881b      	ldrh	r3, [r3, #0]
 800b9f0:	461a      	mov	r2, r3
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b9fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6a1b      	ldr	r3, [r3, #32]
 800ba00:	1c9a      	adds	r2, r3, #2
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	621a      	str	r2, [r3, #32]
 800ba06:	e008      	b.n	800ba1a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6a1b      	ldr	r3, [r3, #32]
 800ba0c:	1c59      	adds	r1, r3, #1
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	6211      	str	r1, [r2, #32]
 800ba12:	781a      	ldrb	r2, [r3, #0]
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba1e:	b29b      	uxth	r3, r3
 800ba20:	3b01      	subs	r3, #1
 800ba22:	b29b      	uxth	r3, r3
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	4619      	mov	r1, r3
 800ba28:	84d1      	strh	r1, [r2, #38]	; 0x26
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10f      	bne.n	800ba4e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	68da      	ldr	r2, [r3, #12]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba3c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	68da      	ldr	r2, [r3, #12]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba4c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	e000      	b.n	800ba54 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ba52:	2302      	movs	r3, #2
  }
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3714      	adds	r7, #20
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bc80      	pop	{r7}
 800ba5c:	4770      	bx	lr

0800ba5e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b082      	sub	sp, #8
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	68da      	ldr	r2, [r3, #12]
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba74:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2220      	movs	r2, #32
 800ba7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f7ff ff02 	bl	800b888 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3708      	adds	r7, #8
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ba8e:	b580      	push	{r7, lr}
 800ba90:	b08c      	sub	sp, #48	; 0x30
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	2b22      	cmp	r3, #34	; 0x22
 800baa0:	f040 80ae 	bne.w	800bc00 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	689b      	ldr	r3, [r3, #8]
 800baa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baac:	d117      	bne.n	800bade <UART_Receive_IT+0x50>
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	691b      	ldr	r3, [r3, #16]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d113      	bne.n	800bade <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bab6:	2300      	movs	r3, #0
 800bab8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800babe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	685b      	ldr	r3, [r3, #4]
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bacc:	b29a      	uxth	r2, r3
 800bace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad6:	1c9a      	adds	r2, r3, #2
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	629a      	str	r2, [r3, #40]	; 0x28
 800badc:	e026      	b.n	800bb2c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bae2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bae4:	2300      	movs	r3, #0
 800bae6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baf0:	d007      	beq.n	800bb02 <UART_Receive_IT+0x74>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d10a      	bne.n	800bb10 <UART_Receive_IT+0x82>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	691b      	ldr	r3, [r3, #16]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d106      	bne.n	800bb10 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	b2da      	uxtb	r2, r3
 800bb0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0c:	701a      	strb	r2, [r3, #0]
 800bb0e:	e008      	b.n	800bb22 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	685b      	ldr	r3, [r3, #4]
 800bb16:	b2db      	uxtb	r3, r3
 800bb18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb1c:	b2da      	uxtb	r2, r3
 800bb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb20:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb26:	1c5a      	adds	r2, r3, #1
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	3b01      	subs	r3, #1
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	687a      	ldr	r2, [r7, #4]
 800bb38:	4619      	mov	r1, r3
 800bb3a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d15d      	bne.n	800bbfc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	68da      	ldr	r2, [r3, #12]
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f022 0220 	bic.w	r2, r2, #32
 800bb4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	68da      	ldr	r2, [r3, #12]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	695a      	ldr	r2, [r3, #20]
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f022 0201 	bic.w	r2, r2, #1
 800bb6e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2220      	movs	r2, #32
 800bb74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	d135      	bne.n	800bbf2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	330c      	adds	r3, #12
 800bb92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	e853 3f00 	ldrex	r3, [r3]
 800bb9a:	613b      	str	r3, [r7, #16]
   return(result);
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	f023 0310 	bic.w	r3, r3, #16
 800bba2:	627b      	str	r3, [r7, #36]	; 0x24
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	330c      	adds	r3, #12
 800bbaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bbac:	623a      	str	r2, [r7, #32]
 800bbae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb0:	69f9      	ldr	r1, [r7, #28]
 800bbb2:	6a3a      	ldr	r2, [r7, #32]
 800bbb4:	e841 2300 	strex	r3, r2, [r1]
 800bbb8:	61bb      	str	r3, [r7, #24]
   return(result);
 800bbba:	69bb      	ldr	r3, [r7, #24]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d1e5      	bne.n	800bb8c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f003 0310 	and.w	r3, r3, #16
 800bbca:	2b10      	cmp	r3, #16
 800bbcc:	d10a      	bne.n	800bbe4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bbce:	2300      	movs	r3, #0
 800bbd0:	60fb      	str	r3, [r7, #12]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	60fb      	str	r3, [r7, #12]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	60fb      	str	r3, [r7, #12]
 800bbe2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bbe8:	4619      	mov	r1, r3
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f7ff fe67 	bl	800b8be <HAL_UARTEx_RxEventCallback>
 800bbf0:	e002      	b.n	800bbf8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f7ff fe51 	bl	800b89a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	e002      	b.n	800bc02 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	e000      	b.n	800bc02 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bc00:	2302      	movs	r3, #2
  }
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3730      	adds	r7, #48	; 0x30
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
	...

0800bc0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	691b      	ldr	r3, [r3, #16]
 800bc1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	68da      	ldr	r2, [r3, #12]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	430a      	orrs	r2, r1
 800bc28:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	689a      	ldr	r2, [r3, #8]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	431a      	orrs	r2, r3
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	695b      	ldr	r3, [r3, #20]
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800bc46:	f023 030c 	bic.w	r3, r3, #12
 800bc4a:	687a      	ldr	r2, [r7, #4]
 800bc4c:	6812      	ldr	r2, [r2, #0]
 800bc4e:	68b9      	ldr	r1, [r7, #8]
 800bc50:	430b      	orrs	r3, r1
 800bc52:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	695b      	ldr	r3, [r3, #20]
 800bc5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	699a      	ldr	r2, [r3, #24]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	430a      	orrs	r2, r1
 800bc68:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a2c      	ldr	r2, [pc, #176]	; (800bd20 <UART_SetConfig+0x114>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d103      	bne.n	800bc7c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800bc74:	f7fe fec2 	bl	800a9fc <HAL_RCC_GetPCLK2Freq>
 800bc78:	60f8      	str	r0, [r7, #12]
 800bc7a:	e002      	b.n	800bc82 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800bc7c:	f7fe feaa 	bl	800a9d4 <HAL_RCC_GetPCLK1Freq>
 800bc80:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bc82:	68fa      	ldr	r2, [r7, #12]
 800bc84:	4613      	mov	r3, r2
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	4413      	add	r3, r2
 800bc8a:	009a      	lsls	r2, r3, #2
 800bc8c:	441a      	add	r2, r3
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	009b      	lsls	r3, r3, #2
 800bc94:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc98:	4a22      	ldr	r2, [pc, #136]	; (800bd24 <UART_SetConfig+0x118>)
 800bc9a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc9e:	095b      	lsrs	r3, r3, #5
 800bca0:	0119      	lsls	r1, r3, #4
 800bca2:	68fa      	ldr	r2, [r7, #12]
 800bca4:	4613      	mov	r3, r2
 800bca6:	009b      	lsls	r3, r3, #2
 800bca8:	4413      	add	r3, r2
 800bcaa:	009a      	lsls	r2, r3, #2
 800bcac:	441a      	add	r2, r3
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	fbb2 f2f3 	udiv	r2, r2, r3
 800bcb8:	4b1a      	ldr	r3, [pc, #104]	; (800bd24 <UART_SetConfig+0x118>)
 800bcba:	fba3 0302 	umull	r0, r3, r3, r2
 800bcbe:	095b      	lsrs	r3, r3, #5
 800bcc0:	2064      	movs	r0, #100	; 0x64
 800bcc2:	fb00 f303 	mul.w	r3, r0, r3
 800bcc6:	1ad3      	subs	r3, r2, r3
 800bcc8:	011b      	lsls	r3, r3, #4
 800bcca:	3332      	adds	r3, #50	; 0x32
 800bccc:	4a15      	ldr	r2, [pc, #84]	; (800bd24 <UART_SetConfig+0x118>)
 800bcce:	fba2 2303 	umull	r2, r3, r2, r3
 800bcd2:	095b      	lsrs	r3, r3, #5
 800bcd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bcd8:	4419      	add	r1, r3
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	4613      	mov	r3, r2
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	4413      	add	r3, r2
 800bce2:	009a      	lsls	r2, r3, #2
 800bce4:	441a      	add	r2, r3
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	009b      	lsls	r3, r3, #2
 800bcec:	fbb2 f2f3 	udiv	r2, r2, r3
 800bcf0:	4b0c      	ldr	r3, [pc, #48]	; (800bd24 <UART_SetConfig+0x118>)
 800bcf2:	fba3 0302 	umull	r0, r3, r3, r2
 800bcf6:	095b      	lsrs	r3, r3, #5
 800bcf8:	2064      	movs	r0, #100	; 0x64
 800bcfa:	fb00 f303 	mul.w	r3, r0, r3
 800bcfe:	1ad3      	subs	r3, r2, r3
 800bd00:	011b      	lsls	r3, r3, #4
 800bd02:	3332      	adds	r3, #50	; 0x32
 800bd04:	4a07      	ldr	r2, [pc, #28]	; (800bd24 <UART_SetConfig+0x118>)
 800bd06:	fba2 2303 	umull	r2, r3, r2, r3
 800bd0a:	095b      	lsrs	r3, r3, #5
 800bd0c:	f003 020f 	and.w	r2, r3, #15
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	440a      	add	r2, r1
 800bd16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800bd18:	bf00      	nop
 800bd1a:	3710      	adds	r7, #16
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	40013800 	.word	0x40013800
 800bd24:	51eb851f 	.word	0x51eb851f

0800bd28 <__itoa>:
 800bd28:	1e93      	subs	r3, r2, #2
 800bd2a:	2b22      	cmp	r3, #34	; 0x22
 800bd2c:	b510      	push	{r4, lr}
 800bd2e:	460c      	mov	r4, r1
 800bd30:	d904      	bls.n	800bd3c <__itoa+0x14>
 800bd32:	2300      	movs	r3, #0
 800bd34:	461c      	mov	r4, r3
 800bd36:	700b      	strb	r3, [r1, #0]
 800bd38:	4620      	mov	r0, r4
 800bd3a:	bd10      	pop	{r4, pc}
 800bd3c:	2a0a      	cmp	r2, #10
 800bd3e:	d109      	bne.n	800bd54 <__itoa+0x2c>
 800bd40:	2800      	cmp	r0, #0
 800bd42:	da07      	bge.n	800bd54 <__itoa+0x2c>
 800bd44:	232d      	movs	r3, #45	; 0x2d
 800bd46:	700b      	strb	r3, [r1, #0]
 800bd48:	2101      	movs	r1, #1
 800bd4a:	4240      	negs	r0, r0
 800bd4c:	4421      	add	r1, r4
 800bd4e:	f000 f805 	bl	800bd5c <__utoa>
 800bd52:	e7f1      	b.n	800bd38 <__itoa+0x10>
 800bd54:	2100      	movs	r1, #0
 800bd56:	e7f9      	b.n	800bd4c <__itoa+0x24>

0800bd58 <itoa>:
 800bd58:	f7ff bfe6 	b.w	800bd28 <__itoa>

0800bd5c <__utoa>:
 800bd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd5e:	b08b      	sub	sp, #44	; 0x2c
 800bd60:	4605      	mov	r5, r0
 800bd62:	460b      	mov	r3, r1
 800bd64:	466e      	mov	r6, sp
 800bd66:	4c1d      	ldr	r4, [pc, #116]	; (800bddc <__utoa+0x80>)
 800bd68:	f104 0c20 	add.w	ip, r4, #32
 800bd6c:	4637      	mov	r7, r6
 800bd6e:	6820      	ldr	r0, [r4, #0]
 800bd70:	6861      	ldr	r1, [r4, #4]
 800bd72:	3408      	adds	r4, #8
 800bd74:	c703      	stmia	r7!, {r0, r1}
 800bd76:	4564      	cmp	r4, ip
 800bd78:	463e      	mov	r6, r7
 800bd7a:	d1f7      	bne.n	800bd6c <__utoa+0x10>
 800bd7c:	7921      	ldrb	r1, [r4, #4]
 800bd7e:	6820      	ldr	r0, [r4, #0]
 800bd80:	7139      	strb	r1, [r7, #4]
 800bd82:	1e91      	subs	r1, r2, #2
 800bd84:	2922      	cmp	r1, #34	; 0x22
 800bd86:	6038      	str	r0, [r7, #0]
 800bd88:	f04f 0100 	mov.w	r1, #0
 800bd8c:	d904      	bls.n	800bd98 <__utoa+0x3c>
 800bd8e:	7019      	strb	r1, [r3, #0]
 800bd90:	460b      	mov	r3, r1
 800bd92:	4618      	mov	r0, r3
 800bd94:	b00b      	add	sp, #44	; 0x2c
 800bd96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd98:	1e58      	subs	r0, r3, #1
 800bd9a:	4684      	mov	ip, r0
 800bd9c:	fbb5 f7f2 	udiv	r7, r5, r2
 800bda0:	fb02 5617 	mls	r6, r2, r7, r5
 800bda4:	3628      	adds	r6, #40	; 0x28
 800bda6:	446e      	add	r6, sp
 800bda8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800bdac:	460c      	mov	r4, r1
 800bdae:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800bdb2:	462e      	mov	r6, r5
 800bdb4:	42b2      	cmp	r2, r6
 800bdb6:	463d      	mov	r5, r7
 800bdb8:	f101 0101 	add.w	r1, r1, #1
 800bdbc:	d9ee      	bls.n	800bd9c <__utoa+0x40>
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	545a      	strb	r2, [r3, r1]
 800bdc2:	1919      	adds	r1, r3, r4
 800bdc4:	1aa5      	subs	r5, r4, r2
 800bdc6:	42aa      	cmp	r2, r5
 800bdc8:	dae3      	bge.n	800bd92 <__utoa+0x36>
 800bdca:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800bdce:	780e      	ldrb	r6, [r1, #0]
 800bdd0:	3201      	adds	r2, #1
 800bdd2:	7006      	strb	r6, [r0, #0]
 800bdd4:	f801 5901 	strb.w	r5, [r1], #-1
 800bdd8:	e7f4      	b.n	800bdc4 <__utoa+0x68>
 800bdda:	bf00      	nop
 800bddc:	0800cc0a 	.word	0x0800cc0a

0800bde0 <memset>:
 800bde0:	4603      	mov	r3, r0
 800bde2:	4402      	add	r2, r0
 800bde4:	4293      	cmp	r3, r2
 800bde6:	d100      	bne.n	800bdea <memset+0xa>
 800bde8:	4770      	bx	lr
 800bdea:	f803 1b01 	strb.w	r1, [r3], #1
 800bdee:	e7f9      	b.n	800bde4 <memset+0x4>

0800bdf0 <__libc_init_array>:
 800bdf0:	b570      	push	{r4, r5, r6, lr}
 800bdf2:	2600      	movs	r6, #0
 800bdf4:	4d0c      	ldr	r5, [pc, #48]	; (800be28 <__libc_init_array+0x38>)
 800bdf6:	4c0d      	ldr	r4, [pc, #52]	; (800be2c <__libc_init_array+0x3c>)
 800bdf8:	1b64      	subs	r4, r4, r5
 800bdfa:	10a4      	asrs	r4, r4, #2
 800bdfc:	42a6      	cmp	r6, r4
 800bdfe:	d109      	bne.n	800be14 <__libc_init_array+0x24>
 800be00:	f000 f828 	bl	800be54 <_init>
 800be04:	2600      	movs	r6, #0
 800be06:	4d0a      	ldr	r5, [pc, #40]	; (800be30 <__libc_init_array+0x40>)
 800be08:	4c0a      	ldr	r4, [pc, #40]	; (800be34 <__libc_init_array+0x44>)
 800be0a:	1b64      	subs	r4, r4, r5
 800be0c:	10a4      	asrs	r4, r4, #2
 800be0e:	42a6      	cmp	r6, r4
 800be10:	d105      	bne.n	800be1e <__libc_init_array+0x2e>
 800be12:	bd70      	pop	{r4, r5, r6, pc}
 800be14:	f855 3b04 	ldr.w	r3, [r5], #4
 800be18:	4798      	blx	r3
 800be1a:	3601      	adds	r6, #1
 800be1c:	e7ee      	b.n	800bdfc <__libc_init_array+0xc>
 800be1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800be22:	4798      	blx	r3
 800be24:	3601      	adds	r6, #1
 800be26:	e7f2      	b.n	800be0e <__libc_init_array+0x1e>
 800be28:	0800cc30 	.word	0x0800cc30
 800be2c:	0800cc30 	.word	0x0800cc30
 800be30:	0800cc30 	.word	0x0800cc30
 800be34:	0800cc34 	.word	0x0800cc34

0800be38 <memcpy>:
 800be38:	440a      	add	r2, r1
 800be3a:	4291      	cmp	r1, r2
 800be3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800be40:	d100      	bne.n	800be44 <memcpy+0xc>
 800be42:	4770      	bx	lr
 800be44:	b510      	push	{r4, lr}
 800be46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be4a:	4291      	cmp	r1, r2
 800be4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be50:	d1f9      	bne.n	800be46 <memcpy+0xe>
 800be52:	bd10      	pop	{r4, pc}

0800be54 <_init>:
 800be54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be56:	bf00      	nop
 800be58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be5a:	bc08      	pop	{r3}
 800be5c:	469e      	mov	lr, r3
 800be5e:	4770      	bx	lr

0800be60 <_fini>:
 800be60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be62:	bf00      	nop
 800be64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be66:	bc08      	pop	{r3}
 800be68:	469e      	mov	lr, r3
 800be6a:	4770      	bx	lr
