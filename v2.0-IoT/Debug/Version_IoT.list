
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c960  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fdc  0800cb44  0800cb44  0001cb44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db20  0800db20  00020104  2**0
                  CONTENTS
  4 .ARM          00000000  0800db20  0800db20  00020104  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800db20  0800db20  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db20  0800db20  0001db20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db24  0800db24  0001db24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800db28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000104  0800dc2c  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  0800dc2c  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012d  2**0
                  CONTENTS, READONLY
 13 .debug_info   000166b8  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034ed  00000000  00000000  00036828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00039d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e67  00000000  00000000  0003afb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003be17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c086  00000000  00000000  000584bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009eea9  00000000  00000000  00074542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052d8  00000000  00000000  001133ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001186c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000104 	.word	0x20000104
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cb2c 	.word	0x0800cb2c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000108 	.word	0x20000108
 8000220:	0800cb2c 	.word	0x0800cb2c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 faaa 	bl	80097a8 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 f922 	bl	80084a0 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[102];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000120 	.word	0x20000120
 80004bc:	20000284 	.word	0x20000284
 80004c0:	200001cd 	.word	0x200001cd
 80004c4:	200001f5 	.word	0x200001f5
 80004c8:	200001f8 	.word	0x200001f8
 80004cc:	200001f9 	.word	0x200001f9
 80004d0:	200001fa 	.word	0x200001fa
 80004d4:	200001fb 	.word	0x200001fb
 80004d8:	200001fc 	.word	0x200001fc
 80004dc:	200001fd 	.word	0x200001fd
 80004e0:	2000020d 	.word	0x2000020d
 80004e4:	200001fe 	.word	0x200001fe
 80004e8:	2000020e 	.word	0x2000020e
 80004ec:	200001ff 	.word	0x200001ff
 80004f0:	2000020f 	.word	0x2000020f
 80004f4:	20000202 	.word	0x20000202
 80004f8:	20000203 	.word	0x20000203
 80004fc:	20000204 	.word	0x20000204
 8000500:	20000205 	.word	0x20000205
 8000504:	20000206 	.word	0x20000206
 8000508:	20000207 	.word	0x20000207
 800050c:	20000208 	.word	0x20000208
 8000510:	20000209 	.word	0x20000209
 8000514:	2000020a 	.word	0x2000020a
 8000518:	2000020b 	.word	0x2000020b
 800051c:	2000020c 	.word	0x2000020c
 8000520:	20000210 	.word	0x20000210
 8000524:	20000212 	.word	0x20000212
 8000528:	200001f0 	.word	0x200001f0
 800052c:	200001f1 	.word	0x200001f1
 8000530:	200001f2 	.word	0x200001f2
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	200001f3 	.word	0x200001f3
 8000540:	20000215 	.word	0x20000215
 8000544:	20000213 	.word	0x20000213
 8000548:	20000201 	.word	0x20000201
 800054c:	20000214 	.word	0x20000214
 8000550:	20000200 	.word	0x20000200
 8000554:	20000216 	.word	0x20000216
 8000558:	20000217 	.word	0x20000217
 800055c:	20000218 	.word	0x20000218
 8000560:	20000219 	.word	0x20000219
 8000564:	2000021a 	.word	0x2000021a
 8000568:	2000021b 	.word	0x2000021b
 800056c:	2000021c 	.word	0x2000021c
 8000570:	2000021d 	.word	0x2000021d
 8000574:	2000021e 	.word	0x2000021e
 8000578:	2000021f 	.word	0x2000021f
 800057c:	200001cc 	.word	0x200001cc
	}

	if(kapi1AcSure>5) {
 8000580:	4b53      	ldr	r3, [pc, #332]	; (80006d0 <eepromKontrol+0x49c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b51      	ldr	r3, [pc, #324]	; (80006d0 <eepromKontrol+0x49c>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b51      	ldr	r3, [pc, #324]	; (80006d4 <eepromKontrol+0x4a0>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b4f      	ldr	r3, [pc, #316]	; (80006d4 <eepromKontrol+0x4a0>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b4e      	ldr	r3, [pc, #312]	; (80006d8 <eepromKontrol+0x4a4>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b4c      	ldr	r3, [pc, #304]	; (80006d8 <eepromKontrol+0x4a4>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b4c      	ldr	r3, [pc, #304]	; (80006dc <eepromKontrol+0x4a8>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b4a      	ldr	r3, [pc, #296]	; (80006dc <eepromKontrol+0x4a8>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b49      	ldr	r3, [pc, #292]	; (80006e0 <eepromKontrol+0x4ac>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b47      	ldr	r3, [pc, #284]	; (80006e0 <eepromKontrol+0x4ac>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b47      	ldr	r3, [pc, #284]	; (80006e4 <eepromKontrol+0x4b0>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b45      	ldr	r3, [pc, #276]	; (80006e4 <eepromKontrol+0x4b0>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b44      	ldr	r3, [pc, #272]	; (80006e8 <eepromKontrol+0x4b4>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b42      	ldr	r3, [pc, #264]	; (80006e8 <eepromKontrol+0x4b4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b42      	ldr	r3, [pc, #264]	; (80006ec <eepromKontrol+0x4b8>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b40      	ldr	r3, [pc, #256]	; (80006ec <eepromKontrol+0x4b8>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b3f      	ldr	r3, [pc, #252]	; (80006f0 <eepromKontrol+0x4bc>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b3d      	ldr	r3, [pc, #244]	; (80006f0 <eepromKontrol+0x4bc>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b3d      	ldr	r3, [pc, #244]	; (80006f4 <eepromKontrol+0x4c0>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b3b      	ldr	r3, [pc, #236]	; (80006f4 <eepromKontrol+0x4c0>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b3a      	ldr	r3, [pc, #232]	; (80006f8 <eepromKontrol+0x4c4>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b38      	ldr	r3, [pc, #224]	; (80006f8 <eepromKontrol+0x4c4>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b38      	ldr	r3, [pc, #224]	; (80006fc <eepromKontrol+0x4c8>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b36      	ldr	r3, [pc, #216]	; (80006fc <eepromKontrol+0x4c8>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b35      	ldr	r3, [pc, #212]	; (8000700 <eepromKontrol+0x4cc>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b33      	ldr	r3, [pc, #204]	; (8000700 <eepromKontrol+0x4cc>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b33      	ldr	r3, [pc, #204]	; (8000704 <eepromKontrol+0x4d0>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b31      	ldr	r3, [pc, #196]	; (8000704 <eepromKontrol+0x4d0>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b30      	ldr	r3, [pc, #192]	; (8000708 <eepromKontrol+0x4d4>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b2e      	ldr	r3, [pc, #184]	; (8000708 <eepromKontrol+0x4d4>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b2e      	ldr	r3, [pc, #184]	; (800070c <eepromKontrol+0x4d8>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b2c      	ldr	r3, [pc, #176]	; (800070c <eepromKontrol+0x4d8>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <eepromKontrol+0x4dc>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b29      	ldr	r3, [pc, #164]	; (8000710 <eepromKontrol+0x4dc>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b29      	ldr	r3, [pc, #164]	; (8000714 <eepromKontrol+0x4e0>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b27      	ldr	r3, [pc, #156]	; (8000714 <eepromKontrol+0x4e0>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b26      	ldr	r3, [pc, #152]	; (8000718 <eepromKontrol+0x4e4>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b24      	ldr	r3, [pc, #144]	; (8000718 <eepromKontrol+0x4e4>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b24      	ldr	r3, [pc, #144]	; (800071c <eepromKontrol+0x4e8>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b22      	ldr	r3, [pc, #136]	; (800071c <eepromKontrol+0x4e8>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <eepromKontrol+0x4ec>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b1f      	ldr	r3, [pc, #124]	; (8000720 <eepromKontrol+0x4ec>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <eepromKontrol+0x4f0>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b1d      	ldr	r3, [pc, #116]	; (8000724 <eepromKontrol+0x4f0>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], machineIDCharacterLimit);
 80006b4:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <eepromKontrol+0x4f4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a1c      	ldr	r2, [pc, #112]	; (800072c <eepromKontrol+0x4f8>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <eepromKontrol+0x4fc>)
 80006be:	6810      	ldr	r0, [r2, #0]
 80006c0:	6851      	ldr	r1, [r2, #4]
 80006c2:	6892      	ldr	r2, [r2, #8]
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	6059      	str	r1, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
}
 80006ca:	bf00      	nop
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	2000020d 	.word	0x2000020d
 80006d4:	200001fe 	.word	0x200001fe
 80006d8:	2000020e 	.word	0x2000020e
 80006dc:	200001ff 	.word	0x200001ff
 80006e0:	20000201 	.word	0x20000201
 80006e4:	2000020f 	.word	0x2000020f
 80006e8:	20000202 	.word	0x20000202
 80006ec:	20000203 	.word	0x20000203
 80006f0:	20000204 	.word	0x20000204
 80006f4:	20000205 	.word	0x20000205
 80006f8:	20000206 	.word	0x20000206
 80006fc:	20000207 	.word	0x20000207
 8000700:	20000208 	.word	0x20000208
 8000704:	20000209 	.word	0x20000209
 8000708:	2000020a 	.word	0x2000020a
 800070c:	2000020b 	.word	0x2000020b
 8000710:	2000020c 	.word	0x2000020c
 8000714:	20000210 	.word	0x20000210
 8000718:	20000212 	.word	0x20000212
 800071c:	20000214 	.word	0x20000214
 8000720:	20000215 	.word	0x20000215
 8000724:	20000213 	.word	0x20000213
 8000728:	20000004 	.word	0x20000004
 800072c:	20000120 	.word	0x20000120
 8000730:	20000198 	.word	0x20000198

08000734 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <getCharFromCursorPosition+0x1c>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	781b      	ldrb	r3, [r3, #0]
}
 8000744:	4618      	mov	r0, r3
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	20000024 	.word	0x20000024

08000754 <sendATCommand>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void sendATCommand(UART_HandleTypeDef *huart1, const char *cmd, uint16_t delayAfter) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	4613      	mov	r3, r2
 8000760:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(huart1, (uint8_t*)cmd, strlen(cmd));
 8000762:	68b8      	ldr	r0, [r7, #8]
 8000764:	f7ff fd5e 	bl	8000224 <strlen>
 8000768:	4603      	mov	r3, r0
 800076a:	b29b      	uxth	r3, r3
 800076c:	461a      	mov	r2, r3
 800076e:	68b9      	ldr	r1, [r7, #8]
 8000770:	68f8      	ldr	r0, [r7, #12]
 8000772:	f00a ff61 	bl	800b638 <HAL_UART_Transmit_IT>
    HAL_Delay(delayAfter);
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	4618      	mov	r0, r3
 800077a:	f007 fe91 	bl	80084a0 <HAL_Delay>
}
 800077e:	bf00      	nop
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <sendMachineData>:
    char cmd[100];
    snprintf(cmd, sizeof(cmd), "AT+CWJAP_DEF=\"%s\",\"%s\"\r\n", wifiSS, wifiPA);
    sendATCommand(huart, cmd, 2000);
}

void sendMachineData(UART_HandleTypeDef *huart, const char *machineID, const char *machineData) {
 8000788:	b580      	push	{r7, lr}
 800078a:	b0c6      	sub	sp, #280	; 0x118
 800078c:	af02      	add	r7, sp, #8
 800078e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000792:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000796:	6018      	str	r0, [r3, #0]
 8000798:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800079c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80007a0:	6019      	str	r1, [r3, #0]
 80007a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80007a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80007aa:	601a      	str	r2, [r3, #0]
    char cmd[200];
    snprintf(cmd, sizeof(cmd), "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 80007ac:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80007b0:	4b23      	ldr	r3, [pc, #140]	; (8000840 <sendMachineData+0xb8>)
 80007b2:	4a24      	ldr	r2, [pc, #144]	; (8000844 <sendMachineData+0xbc>)
 80007b4:	21c8      	movs	r1, #200	; 0xc8
 80007b6:	f00b fd19 	bl	800c1ec <sniprintf>
    sendATCommand(huart, cmd, 4000);
 80007ba:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80007be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80007c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80007c6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80007ca:	6818      	ldr	r0, [r3, #0]
 80007cc:	f7ff ffc2 	bl	8000754 <sendATCommand>

    int len = snprintf(cmd, sizeof(cmd),
 80007d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80007d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80007d8:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80007dc:	4a1a      	ldr	r2, [pc, #104]	; (8000848 <sendMachineData+0xc0>)
 80007de:	9201      	str	r2, [sp, #4]
 80007e0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80007e4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80007e8:	6812      	ldr	r2, [r2, #0]
 80007ea:	9200      	str	r2, [sp, #0]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a17      	ldr	r2, [pc, #92]	; (800084c <sendMachineData+0xc4>)
 80007f0:	21c8      	movs	r1, #200	; 0xc8
 80007f2:	f00b fcfb 	bl	800c1ec <sniprintf>
 80007f6:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
        "GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n",
        machineID, machineData, mainServerWithPort);

    char lenCmd[50];
    snprintf(lenCmd, sizeof(lenCmd), "AT+CIPSEND=%d\r\n", len);
 80007fa:	f107 0010 	add.w	r0, r7, #16
 80007fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000802:	4a13      	ldr	r2, [pc, #76]	; (8000850 <sendMachineData+0xc8>)
 8000804:	2132      	movs	r1, #50	; 0x32
 8000806:	f00b fcf1 	bl	800c1ec <sniprintf>
    sendATCommand(huart, lenCmd, 4000);
 800080a:	f107 0110 	add.w	r1, r7, #16
 800080e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000812:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000816:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800081a:	6818      	ldr	r0, [r3, #0]
 800081c:	f7ff ff9a 	bl	8000754 <sendATCommand>
    sendATCommand(huart, cmd, 4000);
 8000820:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000824:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000828:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800082c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000830:	6818      	ldr	r0, [r3, #0]
 8000832:	f7ff ff8f 	bl	8000754 <sendATCommand>
}
 8000836:	bf00      	nop
 8000838:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	0800cb94 	.word	0x0800cb94
 8000844:	0800cba4 	.word	0x0800cba4
 8000848:	0800cc20 	.word	0x0800cc20
 800084c:	0800cbc4 	.word	0x0800cbc4
 8000850:	0800cc34 	.word	0x0800cc34

08000854 <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b089      	sub	sp, #36	; 0x24
 8000858:	af04      	add	r7, sp, #16
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <hata2EEPROM+0xa4>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	1e5a      	subs	r2, r3, #1
 8000864:	4b25      	ldr	r3, [pc, #148]	; (80008fc <hata2EEPROM+0xa8>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4413      	add	r3, r2
 800086a:	4a25      	ldr	r2, [pc, #148]	; (8000900 <hata2EEPROM+0xac>)
 800086c:	5cd3      	ldrb	r3, [r2, r3]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d002      	beq.n	8000878 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000872:	f000 f92b 	bl	8000acc <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000876:	e000      	b.n	800087a <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000878:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	e012      	b.n	80008a6 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000880:	4b1e      	ldr	r3, [pc, #120]	; (80008fc <hata2EEPROM+0xa8>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4413      	add	r3, r2
 8000888:	4a1d      	ldr	r2, [pc, #116]	; (8000900 <hata2EEPROM+0xac>)
 800088a:	5cd3      	ldrb	r3, [r2, r3]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d107      	bne.n	80008a0 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <hata2EEPROM+0xa8>)
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4413      	add	r3, r2
 8000898:	4919      	ldr	r1, [pc, #100]	; (8000900 <hata2EEPROM+0xac>)
 800089a:	79fa      	ldrb	r2, [r7, #7]
 800089c:	54ca      	strb	r2, [r1, r3]
					break;
 800089e:	e007      	b.n	80008b0 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	3301      	adds	r3, #1
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <hata2EEPROM+0xa4>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	dbe7      	blt.n	8000880 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <hata2EEPROM+0xa8>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	b299      	uxth	r1, r3
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <hata2EEPROM+0xa4>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	b298      	uxth	r0, r3
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <hata2EEPROM+0xa8>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a0f      	ldr	r2, [pc, #60]	; (8000900 <hata2EEPROM+0xac>)
 80008c2:	4413      	add	r3, r2
 80008c4:	4a0c      	ldr	r2, [pc, #48]	; (80008f8 <hata2EEPROM+0xa4>)
 80008c6:	6812      	ldr	r2, [r2, #0]
 80008c8:	b292      	uxth	r2, r2
 80008ca:	f640 34b8 	movw	r4, #3000	; 0xbb8
 80008ce:	9402      	str	r4, [sp, #8]
 80008d0:	9201      	str	r2, [sp, #4]
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	4603      	mov	r3, r0
 80008d6:	460a      	mov	r2, r1
 80008d8:	21a0      	movs	r1, #160	; 0xa0
 80008da:	480a      	ldr	r0, [pc, #40]	; (8000904 <hata2EEPROM+0xb0>)
 80008dc:	f008 fe6a 	bl	80095b4 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80008e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008e4:	f007 fddc 	bl	80084a0 <HAL_Delay>
	eepromKontrol(1);
 80008e8:	2001      	movs	r0, #1
 80008ea:	f7ff fca3 	bl	8000234 <eepromKontrol>
}
 80008ee:	bf00      	nop
 80008f0:	3714      	adds	r7, #20
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd90      	pop	{r4, r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200000a0 	.word	0x200000a0
 80008fc:	200000a4 	.word	0x200000a4
 8000900:	20000120 	.word	0x20000120
 8000904:	20000284 	.word	0x20000284

08000908 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b01      	cmp	r3, #1
 8000916:	d11d      	bne.n	8000954 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8000918:	4b62      	ldr	r3, [pc, #392]	; (8000aa4 <hataKoduLcdGoster+0x19c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d105      	bne.n	800092c <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 8000920:	4a61      	ldr	r2, [pc, #388]	; (8000aa8 <hataKoduLcdGoster+0x1a0>)
 8000922:	2101      	movs	r1, #1
 8000924:	2001      	movs	r0, #1
 8000926:	f007 f865 	bl	80079f4 <lcd_print>
 800092a:	e008      	b.n	800093e <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 800092c:	4b5d      	ldr	r3, [pc, #372]	; (8000aa4 <hataKoduLcdGoster+0x19c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d104      	bne.n	800093e <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 8000934:	4a5d      	ldr	r2, [pc, #372]	; (8000aac <hataKoduLcdGoster+0x1a4>)
 8000936:	2101      	movs	r1, #1
 8000938:	2001      	movs	r0, #1
 800093a:	f007 f85b 	bl	80079f4 <lcd_print>
		}
		lcd_print(2, 1, "1");
 800093e:	4a5c      	ldr	r2, [pc, #368]	; (8000ab0 <hataKoduLcdGoster+0x1a8>)
 8000940:	2101      	movs	r1, #1
 8000942:	2002      	movs	r0, #2
 8000944:	f007 f856 	bl	80079f4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000948:	4a5a      	ldr	r2, [pc, #360]	; (8000ab4 <hataKoduLcdGoster+0x1ac>)
 800094a:	2107      	movs	r1, #7
 800094c:	2002      	movs	r0, #2
 800094e:	f007 f851 	bl	80079f4 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000952:	e0a3      	b.n	8000a9c <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d11d      	bne.n	8000996 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 800095a:	4b52      	ldr	r3, [pc, #328]	; (8000aa4 <hataKoduLcdGoster+0x19c>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d105      	bne.n	800096e <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000962:	4a51      	ldr	r2, [pc, #324]	; (8000aa8 <hataKoduLcdGoster+0x1a0>)
 8000964:	2101      	movs	r1, #1
 8000966:	2001      	movs	r0, #1
 8000968:	f007 f844 	bl	80079f4 <lcd_print>
 800096c:	e008      	b.n	8000980 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 800096e:	4b4d      	ldr	r3, [pc, #308]	; (8000aa4 <hataKoduLcdGoster+0x19c>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d104      	bne.n	8000980 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000976:	4a4d      	ldr	r2, [pc, #308]	; (8000aac <hataKoduLcdGoster+0x1a4>)
 8000978:	2101      	movs	r1, #1
 800097a:	2001      	movs	r0, #1
 800097c:	f007 f83a 	bl	80079f4 <lcd_print>
		lcd_print(2, 2, "2");
 8000980:	4a4d      	ldr	r2, [pc, #308]	; (8000ab8 <hataKoduLcdGoster+0x1b0>)
 8000982:	2102      	movs	r1, #2
 8000984:	2002      	movs	r0, #2
 8000986:	f007 f835 	bl	80079f4 <lcd_print>
		lcd_print(2, 7, "          ");
 800098a:	4a4a      	ldr	r2, [pc, #296]	; (8000ab4 <hataKoduLcdGoster+0x1ac>)
 800098c:	2107      	movs	r1, #7
 800098e:	2002      	movs	r0, #2
 8000990:	f007 f830 	bl	80079f4 <lcd_print>
}
 8000994:	e082      	b.n	8000a9c <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b03      	cmp	r3, #3
 800099a:	d11d      	bne.n	80009d8 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 800099c:	4b41      	ldr	r3, [pc, #260]	; (8000aa4 <hataKoduLcdGoster+0x19c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d105      	bne.n	80009b0 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 80009a4:	4a40      	ldr	r2, [pc, #256]	; (8000aa8 <hataKoduLcdGoster+0x1a0>)
 80009a6:	2101      	movs	r1, #1
 80009a8:	2001      	movs	r0, #1
 80009aa:	f007 f823 	bl	80079f4 <lcd_print>
 80009ae:	e008      	b.n	80009c2 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 80009b0:	4b3c      	ldr	r3, [pc, #240]	; (8000aa4 <hataKoduLcdGoster+0x19c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d104      	bne.n	80009c2 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 80009b8:	4a3c      	ldr	r2, [pc, #240]	; (8000aac <hataKoduLcdGoster+0x1a4>)
 80009ba:	2101      	movs	r1, #1
 80009bc:	2001      	movs	r0, #1
 80009be:	f007 f819 	bl	80079f4 <lcd_print>
		lcd_print(2, 3, "3");
 80009c2:	4a3e      	ldr	r2, [pc, #248]	; (8000abc <hataKoduLcdGoster+0x1b4>)
 80009c4:	2103      	movs	r1, #3
 80009c6:	2002      	movs	r0, #2
 80009c8:	f007 f814 	bl	80079f4 <lcd_print>
		lcd_print(2, 7, "          ");
 80009cc:	4a39      	ldr	r2, [pc, #228]	; (8000ab4 <hataKoduLcdGoster+0x1ac>)
 80009ce:	2107      	movs	r1, #7
 80009d0:	2002      	movs	r0, #2
 80009d2:	f007 f80f 	bl	80079f4 <lcd_print>
}
 80009d6:	e061      	b.n	8000a9c <hataKoduLcdGoster+0x194>
	} else if(x==4){
 80009d8:	79fb      	ldrb	r3, [r7, #7]
 80009da:	2b04      	cmp	r3, #4
 80009dc:	d11d      	bne.n	8000a1a <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 80009de:	4b31      	ldr	r3, [pc, #196]	; (8000aa4 <hataKoduLcdGoster+0x19c>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d105      	bne.n	80009f2 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 80009e6:	4a30      	ldr	r2, [pc, #192]	; (8000aa8 <hataKoduLcdGoster+0x1a0>)
 80009e8:	2101      	movs	r1, #1
 80009ea:	2001      	movs	r0, #1
 80009ec:	f007 f802 	bl	80079f4 <lcd_print>
 80009f0:	e008      	b.n	8000a04 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 80009f2:	4b2c      	ldr	r3, [pc, #176]	; (8000aa4 <hataKoduLcdGoster+0x19c>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d104      	bne.n	8000a04 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 80009fa:	4a2c      	ldr	r2, [pc, #176]	; (8000aac <hataKoduLcdGoster+0x1a4>)
 80009fc:	2101      	movs	r1, #1
 80009fe:	2001      	movs	r0, #1
 8000a00:	f006 fff8 	bl	80079f4 <lcd_print>
		lcd_print(2, 4, "4");
 8000a04:	4a2e      	ldr	r2, [pc, #184]	; (8000ac0 <hataKoduLcdGoster+0x1b8>)
 8000a06:	2104      	movs	r1, #4
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f006 fff3 	bl	80079f4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a0e:	4a29      	ldr	r2, [pc, #164]	; (8000ab4 <hataKoduLcdGoster+0x1ac>)
 8000a10:	2107      	movs	r1, #7
 8000a12:	2002      	movs	r0, #2
 8000a14:	f006 ffee 	bl	80079f4 <lcd_print>
}
 8000a18:	e040      	b.n	8000a9c <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	2b05      	cmp	r3, #5
 8000a1e:	d11d      	bne.n	8000a5c <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000a20:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <hataKoduLcdGoster+0x19c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d105      	bne.n	8000a34 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000a28:	4a1f      	ldr	r2, [pc, #124]	; (8000aa8 <hataKoduLcdGoster+0x1a0>)
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f006 ffe1 	bl	80079f4 <lcd_print>
 8000a32:	e008      	b.n	8000a46 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <hataKoduLcdGoster+0x19c>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b01      	cmp	r3, #1
 8000a3a:	d104      	bne.n	8000a46 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000a3c:	4a1b      	ldr	r2, [pc, #108]	; (8000aac <hataKoduLcdGoster+0x1a4>)
 8000a3e:	2101      	movs	r1, #1
 8000a40:	2001      	movs	r0, #1
 8000a42:	f006 ffd7 	bl	80079f4 <lcd_print>
		lcd_print(2, 5, "5");
 8000a46:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <hataKoduLcdGoster+0x1bc>)
 8000a48:	2105      	movs	r1, #5
 8000a4a:	2002      	movs	r0, #2
 8000a4c:	f006 ffd2 	bl	80079f4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a50:	4a18      	ldr	r2, [pc, #96]	; (8000ab4 <hataKoduLcdGoster+0x1ac>)
 8000a52:	2107      	movs	r1, #7
 8000a54:	2002      	movs	r0, #2
 8000a56:	f006 ffcd 	bl	80079f4 <lcd_print>
}
 8000a5a:	e01f      	b.n	8000a9c <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	d11c      	bne.n	8000a9c <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <hataKoduLcdGoster+0x19c>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d105      	bne.n	8000a76 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	; (8000aa8 <hataKoduLcdGoster+0x1a0>)
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f006 ffc0 	bl	80079f4 <lcd_print>
 8000a74:	e008      	b.n	8000a88 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <hataKoduLcdGoster+0x19c>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d104      	bne.n	8000a88 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000a7e:	4a0b      	ldr	r2, [pc, #44]	; (8000aac <hataKoduLcdGoster+0x1a4>)
 8000a80:	2101      	movs	r1, #1
 8000a82:	2001      	movs	r0, #1
 8000a84:	f006 ffb6 	bl	80079f4 <lcd_print>
		lcd_print(2, 6, "6");
 8000a88:	4a0f      	ldr	r2, [pc, #60]	; (8000ac8 <hataKoduLcdGoster+0x1c0>)
 8000a8a:	2106      	movs	r1, #6
 8000a8c:	2002      	movs	r0, #2
 8000a8e:	f006 ffb1 	bl	80079f4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <hataKoduLcdGoster+0x1ac>)
 8000a94:	2107      	movs	r1, #7
 8000a96:	2002      	movs	r0, #2
 8000a98:	f006 ffac 	bl	80079f4 <lcd_print>
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000215 	.word	0x20000215
 8000aa8:	0800ccc0 	.word	0x0800ccc0
 8000aac:	0800ccd0 	.word	0x0800ccd0
 8000ab0:	0800cce0 	.word	0x0800cce0
 8000ab4:	0800cce4 	.word	0x0800cce4
 8000ab8:	0800ccf0 	.word	0x0800ccf0
 8000abc:	0800ccf4 	.word	0x0800ccf4
 8000ac0:	0800ccf8 	.word	0x0800ccf8
 8000ac4:	0800ccfc 	.word	0x0800ccfc
 8000ac8:	0800cd00 	.word	0x0800cd00

08000acc <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	e009      	b.n	8000aec <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <eepromDataFillWithEmpty+0x38>)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae0:	4a09      	ldr	r2, [pc, #36]	; (8000b08 <eepromDataFillWithEmpty+0x3c>)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <eepromDataFillWithEmpty+0x40>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	687a      	ldr	r2, [r7, #4]
 8000af2:	429a      	cmp	r2, r3
 8000af4:	dbf0      	blt.n	8000ad8 <eepromDataFillWithEmpty+0xc>
	}
}
 8000af6:	bf00      	nop
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000078 	.word	0x20000078
 8000b08:	20000120 	.word	0x20000120
 8000b0c:	200000a0 	.word	0x200000a0

08000b10 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000b16:	463b      	mov	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000b22:	4b50      	ldr	r3, [pc, #320]	; (8000c64 <i2cTest+0x154>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b4e      	ldr	r3, [pc, #312]	; (8000c64 <i2cTest+0x154>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f022 0201 	bic.w	r2, r2, #1
 8000b30:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000b32:	484c      	ldr	r0, [pc, #304]	; (8000c64 <i2cTest+0x154>)
 8000b34:	f008 fc10 	bl	8009358 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b38:	23c0      	movs	r3, #192	; 0xc0
 8000b3a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000b3c:	2311      	movs	r3, #17
 8000b3e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000b44:	2303      	movs	r3, #3
 8000b46:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000b48:	463b      	mov	r3, r7
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4846      	ldr	r0, [pc, #280]	; (8000c68 <i2cTest+0x158>)
 8000b4e:	f008 f817 	bl	8008b80 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	2140      	movs	r1, #64	; 0x40
 8000b56:	4844      	ldr	r0, [pc, #272]	; (8000c68 <i2cTest+0x158>)
 8000b58:	f008 fa89 	bl	800906e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2180      	movs	r1, #128	; 0x80
 8000b60:	4841      	ldr	r0, [pc, #260]	; (8000c68 <i2cTest+0x158>)
 8000b62:	f008 fa84 	bl	800906e <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000b66:	200a      	movs	r0, #10
 8000b68:	f007 fc9a 	bl	80084a0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000b6c:	bf00      	nop
 8000b6e:	2140      	movs	r1, #64	; 0x40
 8000b70:	483d      	ldr	r0, [pc, #244]	; (8000c68 <i2cTest+0x158>)
 8000b72:	f008 fa65 	bl	8009040 <HAL_GPIO_ReadPin>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d006      	beq.n	8000b8a <i2cTest+0x7a>
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	483a      	ldr	r0, [pc, #232]	; (8000c68 <i2cTest+0x158>)
 8000b80:	f008 fa5e 	bl	8009040 <HAL_GPIO_ReadPin>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d1f1      	bne.n	8000b6e <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2180      	movs	r1, #128	; 0x80
 8000b8e:	4836      	ldr	r0, [pc, #216]	; (8000c68 <i2cTest+0x158>)
 8000b90:	f008 fa6d 	bl	800906e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000b94:	200a      	movs	r0, #10
 8000b96:	f007 fc83 	bl	80084a0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000b9a:	bf00      	nop
 8000b9c:	2180      	movs	r1, #128	; 0x80
 8000b9e:	4832      	ldr	r0, [pc, #200]	; (8000c68 <i2cTest+0x158>)
 8000ba0:	f008 fa4e 	bl	8009040 <HAL_GPIO_ReadPin>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d0f8      	beq.n	8000b9c <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2140      	movs	r1, #64	; 0x40
 8000bae:	482e      	ldr	r0, [pc, #184]	; (8000c68 <i2cTest+0x158>)
 8000bb0:	f008 fa5d 	bl	800906e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000bb4:	200a      	movs	r0, #10
 8000bb6:	f007 fc73 	bl	80084a0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000bba:	bf00      	nop
 8000bbc:	2140      	movs	r1, #64	; 0x40
 8000bbe:	482a      	ldr	r0, [pc, #168]	; (8000c68 <i2cTest+0x158>)
 8000bc0:	f008 fa3e 	bl	8009040 <HAL_GPIO_ReadPin>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d0f8      	beq.n	8000bbc <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	2140      	movs	r1, #64	; 0x40
 8000bce:	4826      	ldr	r0, [pc, #152]	; (8000c68 <i2cTest+0x158>)
 8000bd0:	f008 fa4d 	bl	800906e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000bd4:	200a      	movs	r0, #10
 8000bd6:	f007 fc63 	bl	80084a0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000bda:	bf00      	nop
 8000bdc:	2140      	movs	r1, #64	; 0x40
 8000bde:	4822      	ldr	r0, [pc, #136]	; (8000c68 <i2cTest+0x158>)
 8000be0:	f008 fa2e 	bl	8009040 <HAL_GPIO_ReadPin>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d1f8      	bne.n	8000bdc <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	2180      	movs	r1, #128	; 0x80
 8000bee:	481e      	ldr	r0, [pc, #120]	; (8000c68 <i2cTest+0x158>)
 8000bf0:	f008 fa3d 	bl	800906e <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000bf4:	200a      	movs	r0, #10
 8000bf6:	f007 fc53 	bl	80084a0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000bfa:	bf00      	nop
 8000bfc:	2180      	movs	r1, #128	; 0x80
 8000bfe:	481a      	ldr	r0, [pc, #104]	; (8000c68 <i2cTest+0x158>)
 8000c00:	f008 fa1e 	bl	8009040 <HAL_GPIO_ReadPin>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d1f8      	bne.n	8000bfc <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c0a:	23c0      	movs	r3, #192	; 0xc0
 8000c0c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000c0e:	2312      	movs	r3, #18
 8000c10:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4812      	ldr	r0, [pc, #72]	; (8000c68 <i2cTest+0x158>)
 8000c20:	f007 ffae 	bl	8008b80 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <i2cTest+0x154>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <i2cTest+0x154>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c32:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000c34:	4b0b      	ldr	r3, [pc, #44]	; (8000c64 <i2cTest+0x154>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <i2cTest+0x154>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c42:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <i2cTest+0x154>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <i2cTest+0x154>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f042 0201 	orr.w	r2, r2, #1
 8000c52:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000c54:	4803      	ldr	r0, [pc, #12]	; (8000c64 <i2cTest+0x154>)
 8000c56:	f008 fa3b 	bl	80090d0 <HAL_I2C_Init>
}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000284 	.word	0x20000284
 8000c68:	40010c00 	.word	0x40010c00

08000c6c <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000c76:	20c8      	movs	r0, #200	; 0xc8
 8000c78:	f007 fc12 	bl	80084a0 <HAL_Delay>
	lcd_clear();
 8000c7c:	f006 fee6 	bl	8007a4c <lcd_clear>
	if(type == 1 && page == 0) {
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d143      	bne.n	8000d0e <printTemplate+0xa2>
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d140      	bne.n	8000d0e <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000c8c:	4a9d      	ldr	r2, [pc, #628]	; (8000f04 <printTemplate+0x298>)
 8000c8e:	2101      	movs	r1, #1
 8000c90:	2001      	movs	r0, #1
 8000c92:	f006 feaf 	bl	80079f4 <lcd_print>
		lcd_print(2, 3, "0");
 8000c96:	4a9c      	ldr	r2, [pc, #624]	; (8000f08 <printTemplate+0x29c>)
 8000c98:	2103      	movs	r1, #3
 8000c9a:	2002      	movs	r0, #2
 8000c9c:	f006 feaa 	bl	80079f4 <lcd_print>
		lcd_print(2, 4, "1");
 8000ca0:	4a9a      	ldr	r2, [pc, #616]	; (8000f0c <printTemplate+0x2a0>)
 8000ca2:	2104      	movs	r1, #4
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	f006 fea5 	bl	80079f4 <lcd_print>
		lcd_print(2, 5, "2");
 8000caa:	4a99      	ldr	r2, [pc, #612]	; (8000f10 <printTemplate+0x2a4>)
 8000cac:	2105      	movs	r1, #5
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f006 fea0 	bl	80079f4 <lcd_print>
		lcd_print(2, 6, "3");
 8000cb4:	4a97      	ldr	r2, [pc, #604]	; (8000f14 <printTemplate+0x2a8>)
 8000cb6:	2106      	movs	r1, #6
 8000cb8:	2002      	movs	r0, #2
 8000cba:	f006 fe9b 	bl	80079f4 <lcd_print>
		lcd_print(2, 7, "4");
 8000cbe:	4a96      	ldr	r2, [pc, #600]	; (8000f18 <printTemplate+0x2ac>)
 8000cc0:	2107      	movs	r1, #7
 8000cc2:	2002      	movs	r0, #2
 8000cc4:	f006 fe96 	bl	80079f4 <lcd_print>
		lcd_print(2, 10, "5");
 8000cc8:	4a94      	ldr	r2, [pc, #592]	; (8000f1c <printTemplate+0x2b0>)
 8000cca:	210a      	movs	r1, #10
 8000ccc:	2002      	movs	r0, #2
 8000cce:	f006 fe91 	bl	80079f4 <lcd_print>
		lcd_print(2, 11, "6");
 8000cd2:	4a93      	ldr	r2, [pc, #588]	; (8000f20 <printTemplate+0x2b4>)
 8000cd4:	210b      	movs	r1, #11
 8000cd6:	2002      	movs	r0, #2
 8000cd8:	f006 fe8c 	bl	80079f4 <lcd_print>
		lcd_print(2, 12, "7");
 8000cdc:	4a91      	ldr	r2, [pc, #580]	; (8000f24 <printTemplate+0x2b8>)
 8000cde:	210c      	movs	r1, #12
 8000ce0:	2002      	movs	r0, #2
 8000ce2:	f006 fe87 	bl	80079f4 <lcd_print>
		lcd_print(2, 13, "8");
 8000ce6:	4a90      	ldr	r2, [pc, #576]	; (8000f28 <printTemplate+0x2bc>)
 8000ce8:	210d      	movs	r1, #13
 8000cea:	2002      	movs	r0, #2
 8000cec:	f006 fe82 	bl	80079f4 <lcd_print>
		lcd_print(2, 14, "9");
 8000cf0:	4a8e      	ldr	r2, [pc, #568]	; (8000f2c <printTemplate+0x2c0>)
 8000cf2:	210e      	movs	r1, #14
 8000cf4:	2002      	movs	r0, #2
 8000cf6:	f006 fe7d 	bl	80079f4 <lcd_print>
		lcd_print(1, 5, machineID);
 8000cfa:	4a8d      	ldr	r2, [pc, #564]	; (8000f30 <printTemplate+0x2c4>)
 8000cfc:	2105      	movs	r1, #5
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f006 fe78 	bl	80079f4 <lcd_print>
		lcd_gotoxy(2, 3);
 8000d04:	2103      	movs	r1, #3
 8000d06:	2002      	movs	r0, #2
 8000d08:	f006 fe55 	bl	80079b6 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000d0c:	e0f5      	b.n	8000efa <printTemplate+0x28e>
	} else if(type == 2) {
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d178      	bne.n	8000e06 <printTemplate+0x19a>
		if(page == 1) {
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d114      	bne.n	8000d44 <printTemplate+0xd8>
			lcd_clear();
 8000d1a:	f006 fe97 	bl	8007a4c <lcd_clear>
			HAL_Delay(100);
 8000d1e:	2064      	movs	r0, #100	; 0x64
 8000d20:	f007 fbbe 	bl	80084a0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000d24:	4a83      	ldr	r2, [pc, #524]	; (8000f34 <printTemplate+0x2c8>)
 8000d26:	2101      	movs	r1, #1
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f006 fe63 	bl	80079f4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000d2e:	4a82      	ldr	r2, [pc, #520]	; (8000f38 <printTemplate+0x2cc>)
 8000d30:	2107      	movs	r1, #7
 8000d32:	2001      	movs	r0, #1
 8000d34:	f006 fe5e 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000d38:	4a80      	ldr	r2, [pc, #512]	; (8000f3c <printTemplate+0x2d0>)
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f006 fe59 	bl	80079f4 <lcd_print>
}
 8000d42:	e0da      	b.n	8000efa <printTemplate+0x28e>
		} else if(page == 2) {
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d114      	bne.n	8000d74 <printTemplate+0x108>
			lcd_clear();
 8000d4a:	f006 fe7f 	bl	8007a4c <lcd_clear>
			HAL_Delay(100);
 8000d4e:	2064      	movs	r0, #100	; 0x64
 8000d50:	f007 fba6 	bl	80084a0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000d54:	4a77      	ldr	r2, [pc, #476]	; (8000f34 <printTemplate+0x2c8>)
 8000d56:	2101      	movs	r1, #1
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f006 fe4b 	bl	80079f4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000d5e:	4a76      	ldr	r2, [pc, #472]	; (8000f38 <printTemplate+0x2cc>)
 8000d60:	2107      	movs	r1, #7
 8000d62:	2001      	movs	r0, #1
 8000d64:	f006 fe46 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000d68:	4a75      	ldr	r2, [pc, #468]	; (8000f40 <printTemplate+0x2d4>)
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	2002      	movs	r0, #2
 8000d6e:	f006 fe41 	bl	80079f4 <lcd_print>
}
 8000d72:	e0c2      	b.n	8000efa <printTemplate+0x28e>
		} else if(page == 3) {
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	2b03      	cmp	r3, #3
 8000d78:	d114      	bne.n	8000da4 <printTemplate+0x138>
			lcd_clear();
 8000d7a:	f006 fe67 	bl	8007a4c <lcd_clear>
			HAL_Delay(100);
 8000d7e:	2064      	movs	r0, #100	; 0x64
 8000d80:	f007 fb8e 	bl	80084a0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000d84:	4a6b      	ldr	r2, [pc, #428]	; (8000f34 <printTemplate+0x2c8>)
 8000d86:	2101      	movs	r1, #1
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f006 fe33 	bl	80079f4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000d8e:	4a6a      	ldr	r2, [pc, #424]	; (8000f38 <printTemplate+0x2cc>)
 8000d90:	2107      	movs	r1, #7
 8000d92:	2001      	movs	r0, #1
 8000d94:	f006 fe2e 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000d98:	4a6a      	ldr	r2, [pc, #424]	; (8000f44 <printTemplate+0x2d8>)
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	f006 fe29 	bl	80079f4 <lcd_print>
}
 8000da2:	e0aa      	b.n	8000efa <printTemplate+0x28e>
		} else if(page == 4) {
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	d114      	bne.n	8000dd4 <printTemplate+0x168>
			lcd_clear();
 8000daa:	f006 fe4f 	bl	8007a4c <lcd_clear>
			HAL_Delay(100);
 8000dae:	2064      	movs	r0, #100	; 0x64
 8000db0:	f007 fb76 	bl	80084a0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000db4:	4a5f      	ldr	r2, [pc, #380]	; (8000f34 <printTemplate+0x2c8>)
 8000db6:	2101      	movs	r1, #1
 8000db8:	2001      	movs	r0, #1
 8000dba:	f006 fe1b 	bl	80079f4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000dbe:	4a5e      	ldr	r2, [pc, #376]	; (8000f38 <printTemplate+0x2cc>)
 8000dc0:	2107      	movs	r1, #7
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	f006 fe16 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000dc8:	4a5f      	ldr	r2, [pc, #380]	; (8000f48 <printTemplate+0x2dc>)
 8000dca:	2101      	movs	r1, #1
 8000dcc:	2002      	movs	r0, #2
 8000dce:	f006 fe11 	bl	80079f4 <lcd_print>
}
 8000dd2:	e092      	b.n	8000efa <printTemplate+0x28e>
		} else if(page == 5) {
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	2b05      	cmp	r3, #5
 8000dd8:	f040 808f 	bne.w	8000efa <printTemplate+0x28e>
			lcd_clear();
 8000ddc:	f006 fe36 	bl	8007a4c <lcd_clear>
			HAL_Delay(100);
 8000de0:	2064      	movs	r0, #100	; 0x64
 8000de2:	f007 fb5d 	bl	80084a0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000de6:	4a53      	ldr	r2, [pc, #332]	; (8000f34 <printTemplate+0x2c8>)
 8000de8:	2101      	movs	r1, #1
 8000dea:	2001      	movs	r0, #1
 8000dec:	f006 fe02 	bl	80079f4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000df0:	4a51      	ldr	r2, [pc, #324]	; (8000f38 <printTemplate+0x2cc>)
 8000df2:	2107      	movs	r1, #7
 8000df4:	2001      	movs	r0, #1
 8000df6:	f006 fdfd 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000dfa:	4a54      	ldr	r2, [pc, #336]	; (8000f4c <printTemplate+0x2e0>)
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	2002      	movs	r0, #2
 8000e00:	f006 fdf8 	bl	80079f4 <lcd_print>
}
 8000e04:	e079      	b.n	8000efa <printTemplate+0x28e>
	} else if(type == 3) {
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d176      	bne.n	8000efa <printTemplate+0x28e>
		if(page == 1) {
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d114      	bne.n	8000e3c <printTemplate+0x1d0>
			lcd_clear();
 8000e12:	f006 fe1b 	bl	8007a4c <lcd_clear>
			HAL_Delay(100);
 8000e16:	2064      	movs	r0, #100	; 0x64
 8000e18:	f007 fb42 	bl	80084a0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000e1c:	4a4c      	ldr	r2, [pc, #304]	; (8000f50 <printTemplate+0x2e4>)
 8000e1e:	2101      	movs	r1, #1
 8000e20:	2001      	movs	r0, #1
 8000e22:	f006 fde7 	bl	80079f4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000e26:	4a4b      	ldr	r2, [pc, #300]	; (8000f54 <printTemplate+0x2e8>)
 8000e28:	2107      	movs	r1, #7
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f006 fde2 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000e30:	4a42      	ldr	r2, [pc, #264]	; (8000f3c <printTemplate+0x2d0>)
 8000e32:	2101      	movs	r1, #1
 8000e34:	2002      	movs	r0, #2
 8000e36:	f006 fddd 	bl	80079f4 <lcd_print>
}
 8000e3a:	e05e      	b.n	8000efa <printTemplate+0x28e>
		} else if(page == 2) {
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d114      	bne.n	8000e6c <printTemplate+0x200>
			lcd_clear();
 8000e42:	f006 fe03 	bl	8007a4c <lcd_clear>
			HAL_Delay(100);
 8000e46:	2064      	movs	r0, #100	; 0x64
 8000e48:	f007 fb2a 	bl	80084a0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000e4c:	4a40      	ldr	r2, [pc, #256]	; (8000f50 <printTemplate+0x2e4>)
 8000e4e:	2101      	movs	r1, #1
 8000e50:	2001      	movs	r0, #1
 8000e52:	f006 fdcf 	bl	80079f4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000e56:	4a3f      	ldr	r2, [pc, #252]	; (8000f54 <printTemplate+0x2e8>)
 8000e58:	2107      	movs	r1, #7
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f006 fdca 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000e60:	4a37      	ldr	r2, [pc, #220]	; (8000f40 <printTemplate+0x2d4>)
 8000e62:	2101      	movs	r1, #1
 8000e64:	2002      	movs	r0, #2
 8000e66:	f006 fdc5 	bl	80079f4 <lcd_print>
}
 8000e6a:	e046      	b.n	8000efa <printTemplate+0x28e>
		} else if(page == 3) {
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	2b03      	cmp	r3, #3
 8000e70:	d114      	bne.n	8000e9c <printTemplate+0x230>
			lcd_clear();
 8000e72:	f006 fdeb 	bl	8007a4c <lcd_clear>
			HAL_Delay(100);
 8000e76:	2064      	movs	r0, #100	; 0x64
 8000e78:	f007 fb12 	bl	80084a0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000e7c:	4a34      	ldr	r2, [pc, #208]	; (8000f50 <printTemplate+0x2e4>)
 8000e7e:	2101      	movs	r1, #1
 8000e80:	2001      	movs	r0, #1
 8000e82:	f006 fdb7 	bl	80079f4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000e86:	4a33      	ldr	r2, [pc, #204]	; (8000f54 <printTemplate+0x2e8>)
 8000e88:	2107      	movs	r1, #7
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f006 fdb2 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000e90:	4a2c      	ldr	r2, [pc, #176]	; (8000f44 <printTemplate+0x2d8>)
 8000e92:	2101      	movs	r1, #1
 8000e94:	2002      	movs	r0, #2
 8000e96:	f006 fdad 	bl	80079f4 <lcd_print>
}
 8000e9a:	e02e      	b.n	8000efa <printTemplate+0x28e>
		} else if(page == 4) {
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d114      	bne.n	8000ecc <printTemplate+0x260>
			lcd_clear();
 8000ea2:	f006 fdd3 	bl	8007a4c <lcd_clear>
			HAL_Delay(100);
 8000ea6:	2064      	movs	r0, #100	; 0x64
 8000ea8:	f007 fafa 	bl	80084a0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000eac:	4a28      	ldr	r2, [pc, #160]	; (8000f50 <printTemplate+0x2e4>)
 8000eae:	2101      	movs	r1, #1
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f006 fd9f 	bl	80079f4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000eb6:	4a27      	ldr	r2, [pc, #156]	; (8000f54 <printTemplate+0x2e8>)
 8000eb8:	2107      	movs	r1, #7
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f006 fd9a 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000ec0:	4a21      	ldr	r2, [pc, #132]	; (8000f48 <printTemplate+0x2dc>)
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	2002      	movs	r0, #2
 8000ec6:	f006 fd95 	bl	80079f4 <lcd_print>
}
 8000eca:	e016      	b.n	8000efa <printTemplate+0x28e>
		} else if(page == 5) {
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	2b05      	cmp	r3, #5
 8000ed0:	d113      	bne.n	8000efa <printTemplate+0x28e>
			lcd_clear();
 8000ed2:	f006 fdbb 	bl	8007a4c <lcd_clear>
			HAL_Delay(100);
 8000ed6:	2064      	movs	r0, #100	; 0x64
 8000ed8:	f007 fae2 	bl	80084a0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000edc:	4a1c      	ldr	r2, [pc, #112]	; (8000f50 <printTemplate+0x2e4>)
 8000ede:	2101      	movs	r1, #1
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f006 fd87 	bl	80079f4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000ee6:	4a1b      	ldr	r2, [pc, #108]	; (8000f54 <printTemplate+0x2e8>)
 8000ee8:	2107      	movs	r1, #7
 8000eea:	2001      	movs	r0, #1
 8000eec:	f006 fd82 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000ef0:	4a16      	ldr	r2, [pc, #88]	; (8000f4c <printTemplate+0x2e0>)
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	2002      	movs	r0, #2
 8000ef6:	f006 fd7d 	bl	80079f4 <lcd_print>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	0800cd04 	.word	0x0800cd04
 8000f08:	0800cd0c 	.word	0x0800cd0c
 8000f0c:	0800cd10 	.word	0x0800cd10
 8000f10:	0800cd14 	.word	0x0800cd14
 8000f14:	0800cd18 	.word	0x0800cd18
 8000f18:	0800cd1c 	.word	0x0800cd1c
 8000f1c:	0800cd20 	.word	0x0800cd20
 8000f20:	0800cd24 	.word	0x0800cd24
 8000f24:	0800cd28 	.word	0x0800cd28
 8000f28:	0800cd2c 	.word	0x0800cd2c
 8000f2c:	0800cd30 	.word	0x0800cd30
 8000f30:	20000198 	.word	0x20000198
 8000f34:	0800cd34 	.word	0x0800cd34
 8000f38:	200001a4 	.word	0x200001a4
 8000f3c:	0800cd3c 	.word	0x0800cd3c
 8000f40:	0800cd50 	.word	0x0800cd50
 8000f44:	0800cd64 	.word	0x0800cd64
 8000f48:	0800cd78 	.word	0x0800cd78
 8000f4c:	0800cd8c 	.word	0x0800cd8c
 8000f50:	0800cda0 	.word	0x0800cda0
 8000f54:	200001b8 	.word	0x200001b8

08000f58 <checkSlideVal>:

int checkSlideVal(int state) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d111      	bne.n	8000f8a <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000f66:	2101      	movs	r1, #1
 8000f68:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <checkSlideVal+0x60>)
 8000f6a:	f008 f869 	bl	8009040 <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d101      	bne.n	8000f78 <checkSlideVal+0x20>
			return 34;
 8000f74:	2322      	movs	r3, #34	; 0x22
 8000f76:	e01b      	b.n	8000fb0 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000f78:	2108      	movs	r1, #8
 8000f7a:	4810      	ldr	r0, [pc, #64]	; (8000fbc <checkSlideVal+0x64>)
 8000f7c:	f008 f860 	bl	8009040 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d113      	bne.n	8000fae <checkSlideVal+0x56>
			return 32;
 8000f86:	2320      	movs	r3, #32
 8000f88:	e012      	b.n	8000fb0 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <checkSlideVal+0x60>)
 8000f8e:	f008 f857 	bl	8009040 <HAL_GPIO_ReadPin>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d101      	bne.n	8000f9c <checkSlideVal+0x44>
			return 35;
 8000f98:	2323      	movs	r3, #35	; 0x23
 8000f9a:	e009      	b.n	8000fb0 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	4807      	ldr	r0, [pc, #28]	; (8000fbc <checkSlideVal+0x64>)
 8000fa0:	f008 f84e 	bl	8009040 <HAL_GPIO_ReadPin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d101      	bne.n	8000fae <checkSlideVal+0x56>
			return 33;
 8000faa:	2321      	movs	r3, #33	; 0x21
 8000fac:	e000      	b.n	8000fb0 <checkSlideVal+0x58>
		}
	}
	return 0;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40010800 	.word	0x40010800
 8000fbc:	40011000 	.word	0x40011000

08000fc0 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f7ff f928 	bl	8000224 <strlen>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8000fdc:	e08a      	b.n	80010f4 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 8000fde:	6838      	ldr	r0, [r7, #0]
 8000fe0:	f7ff ffba 	bl	8000f58 <checkSlideVal>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	dd07      	ble.n	8000ffa <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8000fea:	6838      	ldr	r0, [r7, #0]
 8000fec:	f7ff ffb4 	bl	8000f58 <checkSlideVal>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b44      	ldr	r3, [pc, #272]	; (8001108 <slideText+0x148>)
 8000ff6:	701a      	strb	r2, [r3, #0]
			break;
 8000ff8:	e081      	b.n	80010fe <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	623b      	str	r3, [r7, #32]
 8000ffe:	e075      	b.n	80010ec <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001000:	6838      	ldr	r0, [r7, #0]
 8001002:	f7ff ffa9 	bl	8000f58 <checkSlideVal>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	dd09      	ble.n	8001020 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 800100c:	6838      	ldr	r0, [r7, #0]
 800100e:	f7ff ffa3 	bl	8000f58 <checkSlideVal>
 8001012:	4603      	mov	r3, r0
 8001014:	b2da      	uxtb	r2, r3
 8001016:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <slideText+0x148>)
 8001018:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 800101e:	e069      	b.n	80010f4 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	6a3b      	ldr	r3, [r7, #32]
 8001024:	4413      	add	r3, r2
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	e029      	b.n	800107e <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 800102a:	6838      	ldr	r0, [r7, #0]
 800102c:	f7ff ff94 	bl	8000f58 <checkSlideVal>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	dd0b      	ble.n	800104e <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 8001036:	6838      	ldr	r0, [r7, #0]
 8001038:	f7ff ff8e 	bl	8000f58 <checkSlideVal>
 800103c:	4603      	mov	r3, r0
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b31      	ldr	r3, [pc, #196]	; (8001108 <slideText+0x148>)
 8001042:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800104c:	e01d      	b.n	800108a <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	b2d8      	uxtb	r0, r3
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	b2da      	uxtb	r2, r3
 8001056:	6a3b      	ldr	r3, [r7, #32]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	b2d9      	uxtb	r1, r3
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	461a      	mov	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4413      	add	r3, r2
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	f006 fcd6 	bl	8007a1e <lcd_print_char>
				HAL_Delay(30);
 8001072:	201e      	movs	r0, #30
 8001074:	f007 fa14 	bl	80084a0 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	3301      	adds	r3, #1
 800107c:	61fb      	str	r3, [r7, #28]
 800107e:	7dfa      	ldrb	r2, [r7, #23]
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4413      	add	r3, r2
 8001084:	69fa      	ldr	r2, [r7, #28]
 8001086:	429a      	cmp	r2, r3
 8001088:	dbcf      	blt.n	800102a <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800108a:	7dfb      	ldrb	r3, [r7, #23]
 800108c:	3b01      	subs	r3, #1
 800108e:	61bb      	str	r3, [r7, #24]
 8001090:	e023      	b.n	80010da <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 8001092:	6838      	ldr	r0, [r7, #0]
 8001094:	f7ff ff60 	bl	8000f58 <checkSlideVal>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	dd0b      	ble.n	80010b6 <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 800109e:	6838      	ldr	r0, [r7, #0]
 80010a0:	f7ff ff5a 	bl	8000f58 <checkSlideVal>
 80010a4:	4603      	mov	r3, r0
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <slideText+0x148>)
 80010aa:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80010b4:	e017      	b.n	80010e6 <slideText+0x126>
				}
			     if(j >= startPos) {
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	429a      	cmp	r2, r3
 80010bc:	db0a      	blt.n	80010d4 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	b2d1      	uxtb	r1, r2
 80010c6:	2220      	movs	r2, #32
 80010c8:	4618      	mov	r0, r3
 80010ca:	f006 fca8 	bl	8007a1e <lcd_print_char>
			    	 HAL_Delay(30);
 80010ce:	201e      	movs	r0, #30
 80010d0:	f007 f9e6 	bl	80084a0 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	61bb      	str	r3, [r7, #24]
 80010da:	7dfa      	ldrb	r2, [r7, #23]
 80010dc:	6a3b      	ldr	r3, [r7, #32]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	dad5      	bge.n	8001092 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 80010e6:	6a3b      	ldr	r3, [r7, #32]
 80010e8:	3301      	adds	r3, #1
 80010ea:	623b      	str	r3, [r7, #32]
 80010ec:	7dfb      	ldrb	r3, [r7, #23]
 80010ee:	6a3a      	ldr	r2, [r7, #32]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	db85      	blt.n	8001000 <slideText+0x40>
	while(mainLoopVal == 1) {
 80010f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	f43f af71 	beq.w	8000fde <slideText+0x1e>
			     }
			}
		}
	}
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3728      	adds	r7, #40	; 0x28
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200001f4 	.word	0x200001f4

0800110c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001110:	f3bf 8f4f 	dsb	sy
}
 8001114:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <__NVIC_SystemReset+0x24>)
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800111e:	4904      	ldr	r1, [pc, #16]	; (8001130 <__NVIC_SystemReset+0x24>)
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <__NVIC_SystemReset+0x28>)
 8001122:	4313      	orrs	r3, r2
 8001124:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <__NVIC_SystemReset+0x20>
 8001130:	e000ed00 	.word	0xe000ed00
 8001134:	05fa0004 	.word	0x05fa0004

08001138 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800113e:	2101      	movs	r1, #1
 8001140:	488e      	ldr	r0, [pc, #568]	; (800137c <menu+0x244>)
 8001142:	f007 ff7d 	bl	8009040 <HAL_GPIO_ReadPin>
 8001146:	4603      	mov	r3, r0
 8001148:	2b01      	cmp	r3, #1
 800114a:	f040 808e 	bne.w	800126a <menu+0x132>
 800114e:	4b8c      	ldr	r3, [pc, #560]	; (8001380 <menu+0x248>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	f083 0301 	eor.w	r3, r3, #1
 8001156:	b2db      	uxtb	r3, r3
 8001158:	2b00      	cmp	r3, #0
 800115a:	f000 8086 	beq.w	800126a <menu+0x132>
		menuSayac = menuSayac+1;
 800115e:	4b89      	ldr	r3, [pc, #548]	; (8001384 <menu+0x24c>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	3301      	adds	r3, #1
 8001164:	b2da      	uxtb	r2, r3
 8001166:	4b87      	ldr	r3, [pc, #540]	; (8001384 <menu+0x24c>)
 8001168:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 800116a:	4b86      	ldr	r3, [pc, #536]	; (8001384 <menu+0x24c>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b24      	cmp	r3, #36	; 0x24
 8001170:	d102      	bne.n	8001178 <menu+0x40>
			menuSayac = 1;
 8001172:	4b84      	ldr	r3, [pc, #528]	; (8001384 <menu+0x24c>)
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001178:	4b82      	ldr	r3, [pc, #520]	; (8001384 <menu+0x24c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b12      	cmp	r3, #18
 800117e:	d106      	bne.n	800118e <menu+0x56>
 8001180:	4b81      	ldr	r3, [pc, #516]	; (8001388 <menu+0x250>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <menu+0x56>
			menuSayac = 21;
 8001188:	4b7e      	ldr	r3, [pc, #504]	; (8001384 <menu+0x24c>)
 800118a:	2215      	movs	r2, #21
 800118c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 800118e:	4b7d      	ldr	r3, [pc, #500]	; (8001384 <menu+0x24c>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b08      	cmp	r3, #8
 8001194:	d106      	bne.n	80011a4 <menu+0x6c>
 8001196:	4b7d      	ldr	r3, [pc, #500]	; (800138c <menu+0x254>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d102      	bne.n	80011a4 <menu+0x6c>
			menuSayac = 16;
 800119e:	4b79      	ldr	r3, [pc, #484]	; (8001384 <menu+0x24c>)
 80011a0:	2210      	movs	r2, #16
 80011a2:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80011a4:	4b77      	ldr	r3, [pc, #476]	; (8001384 <menu+0x24c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b0d      	cmp	r3, #13
 80011aa:	d106      	bne.n	80011ba <menu+0x82>
 80011ac:	4b77      	ldr	r3, [pc, #476]	; (800138c <menu+0x254>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d102      	bne.n	80011ba <menu+0x82>
			menuSayac = 16;
 80011b4:	4b73      	ldr	r3, [pc, #460]	; (8001384 <menu+0x24c>)
 80011b6:	2210      	movs	r2, #16
 80011b8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80011ba:	4b72      	ldr	r3, [pc, #456]	; (8001384 <menu+0x24c>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b09      	cmp	r3, #9
 80011c0:	d106      	bne.n	80011d0 <menu+0x98>
 80011c2:	4b72      	ldr	r3, [pc, #456]	; (800138c <menu+0x254>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d102      	bne.n	80011d0 <menu+0x98>
			menuSayac = 13;
 80011ca:	4b6e      	ldr	r3, [pc, #440]	; (8001384 <menu+0x24c>)
 80011cc:	220d      	movs	r2, #13
 80011ce:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80011d0:	4b6c      	ldr	r3, [pc, #432]	; (8001384 <menu+0x24c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b0a      	cmp	r3, #10
 80011d6:	d10a      	bne.n	80011ee <menu+0xb6>
 80011d8:	4b6d      	ldr	r3, [pc, #436]	; (8001390 <menu+0x258>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d003      	beq.n	80011e8 <menu+0xb0>
 80011e0:	4b6b      	ldr	r3, [pc, #428]	; (8001390 <menu+0x258>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d102      	bne.n	80011ee <menu+0xb6>
			menuSayac = 11;
 80011e8:	4b66      	ldr	r3, [pc, #408]	; (8001384 <menu+0x24c>)
 80011ea:	220b      	movs	r2, #11
 80011ec:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80011ee:	4b65      	ldr	r3, [pc, #404]	; (8001384 <menu+0x24c>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b0c      	cmp	r3, #12
 80011f4:	d10e      	bne.n	8001214 <menu+0xdc>
 80011f6:	4b67      	ldr	r3, [pc, #412]	; (8001394 <menu+0x25c>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d003      	beq.n	8001206 <menu+0xce>
 80011fe:	4b65      	ldr	r3, [pc, #404]	; (8001394 <menu+0x25c>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	2b02      	cmp	r3, #2
 8001204:	d106      	bne.n	8001214 <menu+0xdc>
 8001206:	4b61      	ldr	r3, [pc, #388]	; (800138c <menu+0x254>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d102      	bne.n	8001214 <menu+0xdc>
			menuSayac = 16;
 800120e:	4b5d      	ldr	r3, [pc, #372]	; (8001384 <menu+0x24c>)
 8001210:	2210      	movs	r2, #16
 8001212:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001214:	4b5b      	ldr	r3, [pc, #364]	; (8001384 <menu+0x24c>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b0c      	cmp	r3, #12
 800121a:	d10e      	bne.n	800123a <menu+0x102>
 800121c:	4b5d      	ldr	r3, [pc, #372]	; (8001394 <menu+0x25c>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d003      	beq.n	800122c <menu+0xf4>
 8001224:	4b5b      	ldr	r3, [pc, #364]	; (8001394 <menu+0x25c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d106      	bne.n	800123a <menu+0x102>
 800122c:	4b57      	ldr	r3, [pc, #348]	; (800138c <menu+0x254>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b03      	cmp	r3, #3
 8001232:	d102      	bne.n	800123a <menu+0x102>
			menuSayac = 13;
 8001234:	4b53      	ldr	r3, [pc, #332]	; (8001384 <menu+0x24c>)
 8001236:	220d      	movs	r2, #13
 8001238:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800123a:	4b52      	ldr	r3, [pc, #328]	; (8001384 <menu+0x24c>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b0f      	cmp	r3, #15
 8001240:	d106      	bne.n	8001250 <menu+0x118>
 8001242:	4b55      	ldr	r3, [pc, #340]	; (8001398 <menu+0x260>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d102      	bne.n	8001250 <menu+0x118>
			menuSayac = 16;
 800124a:	4b4e      	ldr	r3, [pc, #312]	; (8001384 <menu+0x24c>)
 800124c:	2210      	movs	r2, #16
 800124e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001250:	4b4c      	ldr	r3, [pc, #304]	; (8001384 <menu+0x24c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b18      	cmp	r3, #24
 8001256:	d106      	bne.n	8001266 <menu+0x12e>
 8001258:	4b4b      	ldr	r3, [pc, #300]	; (8001388 <menu+0x250>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <menu+0x12e>
			menuSayac = 26;
 8001260:	4b48      	ldr	r3, [pc, #288]	; (8001384 <menu+0x24c>)
 8001262:	221a      	movs	r2, #26
 8001264:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001266:	f003 fb33 	bl	80048d0 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 800126a:	2108      	movs	r1, #8
 800126c:	484b      	ldr	r0, [pc, #300]	; (800139c <menu+0x264>)
 800126e:	f007 fee7 	bl	8009040 <HAL_GPIO_ReadPin>
 8001272:	4603      	mov	r3, r0
 8001274:	2b01      	cmp	r3, #1
 8001276:	d175      	bne.n	8001364 <menu+0x22c>
 8001278:	4b41      	ldr	r3, [pc, #260]	; (8001380 <menu+0x248>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	f083 0301 	eor.w	r3, r3, #1
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d06e      	beq.n	8001364 <menu+0x22c>
		if (menuSayac <= 1) {
 8001286:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <menu+0x24c>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d802      	bhi.n	8001294 <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 800128e:	4b3d      	ldr	r3, [pc, #244]	; (8001384 <menu+0x24c>)
 8001290:	2224      	movs	r2, #36	; 0x24
 8001292:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001294:	4b3b      	ldr	r3, [pc, #236]	; (8001384 <menu+0x24c>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	3b01      	subs	r3, #1
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b39      	ldr	r3, [pc, #228]	; (8001384 <menu+0x24c>)
 800129e:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80012a0:	4b38      	ldr	r3, [pc, #224]	; (8001384 <menu+0x24c>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b14      	cmp	r3, #20
 80012a6:	d106      	bne.n	80012b6 <menu+0x17e>
 80012a8:	4b37      	ldr	r3, [pc, #220]	; (8001388 <menu+0x250>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <menu+0x17e>
			menuSayac = 17;
 80012b0:	4b34      	ldr	r3, [pc, #208]	; (8001384 <menu+0x24c>)
 80012b2:	2211      	movs	r2, #17
 80012b4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80012b6:	4b33      	ldr	r3, [pc, #204]	; (8001384 <menu+0x24c>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b0f      	cmp	r3, #15
 80012bc:	d106      	bne.n	80012cc <menu+0x194>
 80012be:	4b33      	ldr	r3, [pc, #204]	; (800138c <menu+0x254>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d102      	bne.n	80012cc <menu+0x194>
			menuSayac = 7;
 80012c6:	4b2f      	ldr	r3, [pc, #188]	; (8001384 <menu+0x24c>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80012cc:	4b2d      	ldr	r3, [pc, #180]	; (8001384 <menu+0x24c>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b0f      	cmp	r3, #15
 80012d2:	d106      	bne.n	80012e2 <menu+0x1aa>
 80012d4:	4b2d      	ldr	r3, [pc, #180]	; (800138c <menu+0x254>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d102      	bne.n	80012e2 <menu+0x1aa>
			menuSayac = 12;
 80012dc:	4b29      	ldr	r3, [pc, #164]	; (8001384 <menu+0x24c>)
 80012de:	220c      	movs	r2, #12
 80012e0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80012e2:	4b28      	ldr	r3, [pc, #160]	; (8001384 <menu+0x24c>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b0c      	cmp	r3, #12
 80012e8:	d106      	bne.n	80012f8 <menu+0x1c0>
 80012ea:	4b28      	ldr	r3, [pc, #160]	; (800138c <menu+0x254>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d102      	bne.n	80012f8 <menu+0x1c0>
			menuSayac = 8;
 80012f2:	4b24      	ldr	r3, [pc, #144]	; (8001384 <menu+0x24c>)
 80012f4:	2208      	movs	r2, #8
 80012f6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80012f8:	4b22      	ldr	r3, [pc, #136]	; (8001384 <menu+0x24c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b0a      	cmp	r3, #10
 80012fe:	d10a      	bne.n	8001316 <menu+0x1de>
 8001300:	4b23      	ldr	r3, [pc, #140]	; (8001390 <menu+0x258>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	2b01      	cmp	r3, #1
 8001306:	d003      	beq.n	8001310 <menu+0x1d8>
 8001308:	4b21      	ldr	r3, [pc, #132]	; (8001390 <menu+0x258>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b02      	cmp	r3, #2
 800130e:	d102      	bne.n	8001316 <menu+0x1de>
			menuSayac = 9;
 8001310:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <menu+0x24c>)
 8001312:	2209      	movs	r2, #9
 8001314:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001316:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <menu+0x24c>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b0c      	cmp	r3, #12
 800131c:	d10a      	bne.n	8001334 <menu+0x1fc>
 800131e:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <menu+0x25c>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d003      	beq.n	800132e <menu+0x1f6>
 8001326:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <menu+0x25c>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d102      	bne.n	8001334 <menu+0x1fc>
			menuSayac = 11;
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <menu+0x24c>)
 8001330:	220b      	movs	r2, #11
 8001332:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <menu+0x24c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b0f      	cmp	r3, #15
 800133a:	d106      	bne.n	800134a <menu+0x212>
 800133c:	4b16      	ldr	r3, [pc, #88]	; (8001398 <menu+0x260>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d102      	bne.n	800134a <menu+0x212>
			menuSayac = 14;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <menu+0x24c>)
 8001346:	220e      	movs	r2, #14
 8001348:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <menu+0x24c>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b19      	cmp	r3, #25
 8001350:	d106      	bne.n	8001360 <menu+0x228>
 8001352:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <menu+0x250>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d102      	bne.n	8001360 <menu+0x228>
			menuSayac = 23;
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <menu+0x24c>)
 800135c:	2217      	movs	r2, #23
 800135e:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001360:	f003 fab6 	bl	80048d0 <bekle>
	}

	if (menuSayac == 0) {
 8001364:	4b07      	ldr	r3, [pc, #28]	; (8001384 <menu+0x24c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d133      	bne.n	80013d4 <menu+0x29c>
		if(dilSecim == 0) {
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <menu+0x268>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d121      	bne.n	80013b8 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001374:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <menu+0x26c>)
 8001376:	2101      	movs	r1, #1
 8001378:	2001      	movs	r0, #1
 800137a:	e015      	b.n	80013a8 <menu+0x270>
 800137c:	40010800 	.word	0x40010800
 8001380:	20000223 	.word	0x20000223
 8001384:	200001f4 	.word	0x200001f4
 8001388:	20000203 	.word	0x20000203
 800138c:	200001fc 	.word	0x200001fc
 8001390:	200001fd 	.word	0x200001fd
 8001394:	200001fe 	.word	0x200001fe
 8001398:	200001ff 	.word	0x200001ff
 800139c:	40011000 	.word	0x40011000
 80013a0:	20000215 	.word	0x20000215
 80013a4:	0800cda8 	.word	0x0800cda8
 80013a8:	f006 fb24 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 80013ac:	4a94      	ldr	r2, [pc, #592]	; (8001600 <menu+0x4c8>)
 80013ae:	2101      	movs	r1, #1
 80013b0:	2002      	movs	r0, #2
 80013b2:	f006 fb1f 	bl	80079f4 <lcd_print>
 80013b6:	e00d      	b.n	80013d4 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 80013b8:	4b92      	ldr	r3, [pc, #584]	; (8001604 <menu+0x4cc>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d109      	bne.n	80013d4 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 80013c0:	4a91      	ldr	r2, [pc, #580]	; (8001608 <menu+0x4d0>)
 80013c2:	2101      	movs	r1, #1
 80013c4:	2001      	movs	r0, #1
 80013c6:	f006 fb15 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 80013ca:	4a90      	ldr	r2, [pc, #576]	; (800160c <menu+0x4d4>)
 80013cc:	2101      	movs	r1, #1
 80013ce:	2002      	movs	r0, #2
 80013d0:	f006 fb10 	bl	80079f4 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 80013d4:	4b8e      	ldr	r3, [pc, #568]	; (8001610 <menu+0x4d8>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	f040 82b5 	bne.w	8001948 <menu+0x810>
		if(dilSecim == 0) {
 80013de:	4b89      	ldr	r3, [pc, #548]	; (8001604 <menu+0x4cc>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d105      	bne.n	80013f2 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80013e6:	4a8b      	ldr	r2, [pc, #556]	; (8001614 <menu+0x4dc>)
 80013e8:	2101      	movs	r1, #1
 80013ea:	2001      	movs	r0, #1
 80013ec:	f006 fb02 	bl	80079f4 <lcd_print>
 80013f0:	e008      	b.n	8001404 <menu+0x2cc>
		} else if(dilSecim == 1) {
 80013f2:	4b84      	ldr	r3, [pc, #528]	; (8001604 <menu+0x4cc>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d104      	bne.n	8001404 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 80013fa:	4a87      	ldr	r2, [pc, #540]	; (8001618 <menu+0x4e0>)
 80013fc:	2101      	movs	r1, #1
 80013fe:	2001      	movs	r0, #1
 8001400:	f006 faf8 	bl	80079f4 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001404:	4b85      	ldr	r3, [pc, #532]	; (800161c <menu+0x4e4>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d123      	bne.n	8001454 <menu+0x31c>
			if(dilSecim == 0) {
 800140c:	4b7d      	ldr	r3, [pc, #500]	; (8001604 <menu+0x4cc>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d105      	bne.n	8001420 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001414:	4a82      	ldr	r2, [pc, #520]	; (8001620 <menu+0x4e8>)
 8001416:	2101      	movs	r1, #1
 8001418:	2002      	movs	r0, #2
 800141a:	f006 faeb 	bl	80079f4 <lcd_print>
 800141e:	e008      	b.n	8001432 <menu+0x2fa>

			} else if(dilSecim == 1) {
 8001420:	4b78      	ldr	r3, [pc, #480]	; (8001604 <menu+0x4cc>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d104      	bne.n	8001432 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001428:	4a7e      	ldr	r2, [pc, #504]	; (8001624 <menu+0x4ec>)
 800142a:	2101      	movs	r1, #1
 800142c:	2002      	movs	r0, #2
 800142e:	f006 fae1 	bl	80079f4 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001432:	4a7d      	ldr	r2, [pc, #500]	; (8001628 <menu+0x4f0>)
 8001434:	210f      	movs	r1, #15
 8001436:	2002      	movs	r0, #2
 8001438:	f006 fadc 	bl	80079f4 <lcd_print>
			itoa(hataKayit1, snum, 10);
 800143c:	4b7b      	ldr	r3, [pc, #492]	; (800162c <menu+0x4f4>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	220a      	movs	r2, #10
 8001442:	497b      	ldr	r1, [pc, #492]	; (8001630 <menu+0x4f8>)
 8001444:	4618      	mov	r0, r3
 8001446:	f00a fe27 	bl	800c098 <itoa>
			lcd_print(2, 14, snum);
 800144a:	4a79      	ldr	r2, [pc, #484]	; (8001630 <menu+0x4f8>)
 800144c:	210e      	movs	r1, #14
 800144e:	2002      	movs	r0, #2
 8001450:	f006 fad0 	bl	80079f4 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001454:	4b71      	ldr	r3, [pc, #452]	; (800161c <menu+0x4e4>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d123      	bne.n	80014a4 <menu+0x36c>
			if(dilSecim == 0) {
 800145c:	4b69      	ldr	r3, [pc, #420]	; (8001604 <menu+0x4cc>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d105      	bne.n	8001470 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001464:	4a73      	ldr	r2, [pc, #460]	; (8001634 <menu+0x4fc>)
 8001466:	2101      	movs	r1, #1
 8001468:	2002      	movs	r0, #2
 800146a:	f006 fac3 	bl	80079f4 <lcd_print>
 800146e:	e008      	b.n	8001482 <menu+0x34a>
			} else if(dilSecim == 1) {
 8001470:	4b64      	ldr	r3, [pc, #400]	; (8001604 <menu+0x4cc>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d104      	bne.n	8001482 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001478:	4a6f      	ldr	r2, [pc, #444]	; (8001638 <menu+0x500>)
 800147a:	2101      	movs	r1, #1
 800147c:	2002      	movs	r0, #2
 800147e:	f006 fab9 	bl	80079f4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001482:	4a6e      	ldr	r2, [pc, #440]	; (800163c <menu+0x504>)
 8001484:	210f      	movs	r1, #15
 8001486:	2002      	movs	r0, #2
 8001488:	f006 fab4 	bl	80079f4 <lcd_print>
			itoa(hataKayit2, snum, 10);
 800148c:	4b6c      	ldr	r3, [pc, #432]	; (8001640 <menu+0x508>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	220a      	movs	r2, #10
 8001492:	4967      	ldr	r1, [pc, #412]	; (8001630 <menu+0x4f8>)
 8001494:	4618      	mov	r0, r3
 8001496:	f00a fdff 	bl	800c098 <itoa>
			lcd_print(2, 14, snum);
 800149a:	4a65      	ldr	r2, [pc, #404]	; (8001630 <menu+0x4f8>)
 800149c:	210e      	movs	r1, #14
 800149e:	2002      	movs	r0, #2
 80014a0:	f006 faa8 	bl	80079f4 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80014a4:	4b5d      	ldr	r3, [pc, #372]	; (800161c <menu+0x4e4>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d123      	bne.n	80014f4 <menu+0x3bc>
			if(dilSecim == 0) {
 80014ac:	4b55      	ldr	r3, [pc, #340]	; (8001604 <menu+0x4cc>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d105      	bne.n	80014c0 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 80014b4:	4a63      	ldr	r2, [pc, #396]	; (8001644 <menu+0x50c>)
 80014b6:	2101      	movs	r1, #1
 80014b8:	2002      	movs	r0, #2
 80014ba:	f006 fa9b 	bl	80079f4 <lcd_print>
 80014be:	e008      	b.n	80014d2 <menu+0x39a>
			} else if(dilSecim == 1) {
 80014c0:	4b50      	ldr	r3, [pc, #320]	; (8001604 <menu+0x4cc>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d104      	bne.n	80014d2 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 80014c8:	4a5f      	ldr	r2, [pc, #380]	; (8001648 <menu+0x510>)
 80014ca:	2101      	movs	r1, #1
 80014cc:	2002      	movs	r0, #2
 80014ce:	f006 fa91 	bl	80079f4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80014d2:	4a5a      	ldr	r2, [pc, #360]	; (800163c <menu+0x504>)
 80014d4:	210f      	movs	r1, #15
 80014d6:	2002      	movs	r0, #2
 80014d8:	f006 fa8c 	bl	80079f4 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80014dc:	4b5b      	ldr	r3, [pc, #364]	; (800164c <menu+0x514>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	220a      	movs	r2, #10
 80014e2:	4953      	ldr	r1, [pc, #332]	; (8001630 <menu+0x4f8>)
 80014e4:	4618      	mov	r0, r3
 80014e6:	f00a fdd7 	bl	800c098 <itoa>
			lcd_print(2, 14, snum);
 80014ea:	4a51      	ldr	r2, [pc, #324]	; (8001630 <menu+0x4f8>)
 80014ec:	210e      	movs	r1, #14
 80014ee:	2002      	movs	r0, #2
 80014f0:	f006 fa80 	bl	80079f4 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80014f4:	4b49      	ldr	r3, [pc, #292]	; (800161c <menu+0x4e4>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	d123      	bne.n	8001544 <menu+0x40c>
			if(dilSecim == 0) {
 80014fc:	4b41      	ldr	r3, [pc, #260]	; (8001604 <menu+0x4cc>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d105      	bne.n	8001510 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001504:	4a52      	ldr	r2, [pc, #328]	; (8001650 <menu+0x518>)
 8001506:	2101      	movs	r1, #1
 8001508:	2002      	movs	r0, #2
 800150a:	f006 fa73 	bl	80079f4 <lcd_print>
 800150e:	e008      	b.n	8001522 <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001510:	4b3c      	ldr	r3, [pc, #240]	; (8001604 <menu+0x4cc>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d104      	bne.n	8001522 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001518:	4a4e      	ldr	r2, [pc, #312]	; (8001654 <menu+0x51c>)
 800151a:	2101      	movs	r1, #1
 800151c:	2002      	movs	r0, #2
 800151e:	f006 fa69 	bl	80079f4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001522:	4a46      	ldr	r2, [pc, #280]	; (800163c <menu+0x504>)
 8001524:	210f      	movs	r1, #15
 8001526:	2002      	movs	r0, #2
 8001528:	f006 fa64 	bl	80079f4 <lcd_print>
			itoa(hataKayit4, snum, 10);
 800152c:	4b4a      	ldr	r3, [pc, #296]	; (8001658 <menu+0x520>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	220a      	movs	r2, #10
 8001532:	493f      	ldr	r1, [pc, #252]	; (8001630 <menu+0x4f8>)
 8001534:	4618      	mov	r0, r3
 8001536:	f00a fdaf 	bl	800c098 <itoa>
			lcd_print(2, 14, snum);
 800153a:	4a3d      	ldr	r2, [pc, #244]	; (8001630 <menu+0x4f8>)
 800153c:	210e      	movs	r1, #14
 800153e:	2002      	movs	r0, #2
 8001540:	f006 fa58 	bl	80079f4 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001544:	4b35      	ldr	r3, [pc, #212]	; (800161c <menu+0x4e4>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b04      	cmp	r3, #4
 800154a:	d123      	bne.n	8001594 <menu+0x45c>
			if(dilSecim == 0) {
 800154c:	4b2d      	ldr	r3, [pc, #180]	; (8001604 <menu+0x4cc>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d105      	bne.n	8001560 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001554:	4a41      	ldr	r2, [pc, #260]	; (800165c <menu+0x524>)
 8001556:	2101      	movs	r1, #1
 8001558:	2002      	movs	r0, #2
 800155a:	f006 fa4b 	bl	80079f4 <lcd_print>
 800155e:	e008      	b.n	8001572 <menu+0x43a>
			} else if(dilSecim == 1) {
 8001560:	4b28      	ldr	r3, [pc, #160]	; (8001604 <menu+0x4cc>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d104      	bne.n	8001572 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001568:	4a3d      	ldr	r2, [pc, #244]	; (8001660 <menu+0x528>)
 800156a:	2101      	movs	r1, #1
 800156c:	2002      	movs	r0, #2
 800156e:	f006 fa41 	bl	80079f4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001572:	4a32      	ldr	r2, [pc, #200]	; (800163c <menu+0x504>)
 8001574:	210f      	movs	r1, #15
 8001576:	2002      	movs	r0, #2
 8001578:	f006 fa3c 	bl	80079f4 <lcd_print>
			itoa(hataKayit5, snum, 10);
 800157c:	4b39      	ldr	r3, [pc, #228]	; (8001664 <menu+0x52c>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	220a      	movs	r2, #10
 8001582:	492b      	ldr	r1, [pc, #172]	; (8001630 <menu+0x4f8>)
 8001584:	4618      	mov	r0, r3
 8001586:	f00a fd87 	bl	800c098 <itoa>
			lcd_print(2, 14, snum);
 800158a:	4a29      	ldr	r2, [pc, #164]	; (8001630 <menu+0x4f8>)
 800158c:	210e      	movs	r1, #14
 800158e:	2002      	movs	r0, #2
 8001590:	f006 fa30 	bl	80079f4 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <menu+0x4e4>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b05      	cmp	r3, #5
 800159a:	d123      	bne.n	80015e4 <menu+0x4ac>
			if(dilSecim == 0) {
 800159c:	4b19      	ldr	r3, [pc, #100]	; (8001604 <menu+0x4cc>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d105      	bne.n	80015b0 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80015a4:	4a30      	ldr	r2, [pc, #192]	; (8001668 <menu+0x530>)
 80015a6:	2101      	movs	r1, #1
 80015a8:	2002      	movs	r0, #2
 80015aa:	f006 fa23 	bl	80079f4 <lcd_print>
 80015ae:	e008      	b.n	80015c2 <menu+0x48a>
			} else if(dilSecim == 1) {
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <menu+0x4cc>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d104      	bne.n	80015c2 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 80015b8:	4a2c      	ldr	r2, [pc, #176]	; (800166c <menu+0x534>)
 80015ba:	2101      	movs	r1, #1
 80015bc:	2002      	movs	r0, #2
 80015be:	f006 fa19 	bl	80079f4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80015c2:	4a1e      	ldr	r2, [pc, #120]	; (800163c <menu+0x504>)
 80015c4:	210f      	movs	r1, #15
 80015c6:	2002      	movs	r0, #2
 80015c8:	f006 fa14 	bl	80079f4 <lcd_print>
			itoa(hataKayit6, snum, 10);
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <menu+0x538>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	220a      	movs	r2, #10
 80015d2:	4917      	ldr	r1, [pc, #92]	; (8001630 <menu+0x4f8>)
 80015d4:	4618      	mov	r0, r3
 80015d6:	f00a fd5f 	bl	800c098 <itoa>
			lcd_print(2, 14, snum);
 80015da:	4a15      	ldr	r2, [pc, #84]	; (8001630 <menu+0x4f8>)
 80015dc:	210e      	movs	r1, #14
 80015de:	2002      	movs	r0, #2
 80015e0:	f006 fa08 	bl	80079f4 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80015e4:	4b0d      	ldr	r3, [pc, #52]	; (800161c <menu+0x4e4>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b06      	cmp	r3, #6
 80015ea:	d15f      	bne.n	80016ac <menu+0x574>
			if(dilSecim == 0) {
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <menu+0x4cc>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d141      	bne.n	8001678 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 80015f4:	4a1f      	ldr	r2, [pc, #124]	; (8001674 <menu+0x53c>)
 80015f6:	2101      	movs	r1, #1
 80015f8:	2002      	movs	r0, #2
 80015fa:	f006 f9fb 	bl	80079f4 <lcd_print>
 80015fe:	e044      	b.n	800168a <menu+0x552>
 8001600:	0800cdbc 	.word	0x0800cdbc
 8001604:	20000215 	.word	0x20000215
 8001608:	0800cdd0 	.word	0x0800cdd0
 800160c:	0800cde4 	.word	0x0800cde4
 8001610:	200001f4 	.word	0x200001f4
 8001614:	0800cdf8 	.word	0x0800cdf8
 8001618:	0800ce0c 	.word	0x0800ce0c
 800161c:	200001f6 	.word	0x200001f6
 8001620:	0800ce20 	.word	0x0800ce20
 8001624:	0800ce30 	.word	0x0800ce30
 8001628:	0800ce40 	.word	0x0800ce40
 800162c:	20000216 	.word	0x20000216
 8001630:	20000190 	.word	0x20000190
 8001634:	0800ce44 	.word	0x0800ce44
 8001638:	0800ce54 	.word	0x0800ce54
 800163c:	0800ce64 	.word	0x0800ce64
 8001640:	20000217 	.word	0x20000217
 8001644:	0800ce68 	.word	0x0800ce68
 8001648:	0800ce78 	.word	0x0800ce78
 800164c:	20000218 	.word	0x20000218
 8001650:	0800ce88 	.word	0x0800ce88
 8001654:	0800ce98 	.word	0x0800ce98
 8001658:	20000219 	.word	0x20000219
 800165c:	0800cea8 	.word	0x0800cea8
 8001660:	0800ceb8 	.word	0x0800ceb8
 8001664:	2000021a 	.word	0x2000021a
 8001668:	0800cec8 	.word	0x0800cec8
 800166c:	0800ced8 	.word	0x0800ced8
 8001670:	2000021b 	.word	0x2000021b
 8001674:	0800cee8 	.word	0x0800cee8
			} else if(dilSecim == 1) {
 8001678:	4b4f      	ldr	r3, [pc, #316]	; (80017b8 <menu+0x680>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d104      	bne.n	800168a <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001680:	4a4e      	ldr	r2, [pc, #312]	; (80017bc <menu+0x684>)
 8001682:	2101      	movs	r1, #1
 8001684:	2002      	movs	r0, #2
 8001686:	f006 f9b5 	bl	80079f4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800168a:	4a4d      	ldr	r2, [pc, #308]	; (80017c0 <menu+0x688>)
 800168c:	210f      	movs	r1, #15
 800168e:	2002      	movs	r0, #2
 8001690:	f006 f9b0 	bl	80079f4 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001694:	4b4b      	ldr	r3, [pc, #300]	; (80017c4 <menu+0x68c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	220a      	movs	r2, #10
 800169a:	494b      	ldr	r1, [pc, #300]	; (80017c8 <menu+0x690>)
 800169c:	4618      	mov	r0, r3
 800169e:	f00a fcfb 	bl	800c098 <itoa>
			lcd_print(2, 14, snum);
 80016a2:	4a49      	ldr	r2, [pc, #292]	; (80017c8 <menu+0x690>)
 80016a4:	210e      	movs	r1, #14
 80016a6:	2002      	movs	r0, #2
 80016a8:	f006 f9a4 	bl	80079f4 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80016ac:	4b47      	ldr	r3, [pc, #284]	; (80017cc <menu+0x694>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b07      	cmp	r3, #7
 80016b2:	d123      	bne.n	80016fc <menu+0x5c4>
			if(dilSecim == 0) {
 80016b4:	4b40      	ldr	r3, [pc, #256]	; (80017b8 <menu+0x680>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d105      	bne.n	80016c8 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 80016bc:	4a44      	ldr	r2, [pc, #272]	; (80017d0 <menu+0x698>)
 80016be:	2101      	movs	r1, #1
 80016c0:	2002      	movs	r0, #2
 80016c2:	f006 f997 	bl	80079f4 <lcd_print>
 80016c6:	e008      	b.n	80016da <menu+0x5a2>
			} else if(dilSecim == 1) {
 80016c8:	4b3b      	ldr	r3, [pc, #236]	; (80017b8 <menu+0x680>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d104      	bne.n	80016da <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 80016d0:	4a40      	ldr	r2, [pc, #256]	; (80017d4 <menu+0x69c>)
 80016d2:	2101      	movs	r1, #1
 80016d4:	2002      	movs	r0, #2
 80016d6:	f006 f98d 	bl	80079f4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80016da:	4a39      	ldr	r2, [pc, #228]	; (80017c0 <menu+0x688>)
 80016dc:	210f      	movs	r1, #15
 80016de:	2002      	movs	r0, #2
 80016e0:	f006 f988 	bl	80079f4 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80016e4:	4b3c      	ldr	r3, [pc, #240]	; (80017d8 <menu+0x6a0>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	220a      	movs	r2, #10
 80016ea:	4937      	ldr	r1, [pc, #220]	; (80017c8 <menu+0x690>)
 80016ec:	4618      	mov	r0, r3
 80016ee:	f00a fcd3 	bl	800c098 <itoa>
			lcd_print(2, 14, snum);
 80016f2:	4a35      	ldr	r2, [pc, #212]	; (80017c8 <menu+0x690>)
 80016f4:	210e      	movs	r1, #14
 80016f6:	2002      	movs	r0, #2
 80016f8:	f006 f97c 	bl	80079f4 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80016fc:	4b33      	ldr	r3, [pc, #204]	; (80017cc <menu+0x694>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b08      	cmp	r3, #8
 8001702:	d123      	bne.n	800174c <menu+0x614>
			if(dilSecim == 0) {
 8001704:	4b2c      	ldr	r3, [pc, #176]	; (80017b8 <menu+0x680>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d105      	bne.n	8001718 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 800170c:	4a33      	ldr	r2, [pc, #204]	; (80017dc <menu+0x6a4>)
 800170e:	2101      	movs	r1, #1
 8001710:	2002      	movs	r0, #2
 8001712:	f006 f96f 	bl	80079f4 <lcd_print>
 8001716:	e008      	b.n	800172a <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001718:	4b27      	ldr	r3, [pc, #156]	; (80017b8 <menu+0x680>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d104      	bne.n	800172a <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001720:	4a2f      	ldr	r2, [pc, #188]	; (80017e0 <menu+0x6a8>)
 8001722:	2101      	movs	r1, #1
 8001724:	2002      	movs	r0, #2
 8001726:	f006 f965 	bl	80079f4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800172a:	4a25      	ldr	r2, [pc, #148]	; (80017c0 <menu+0x688>)
 800172c:	210f      	movs	r1, #15
 800172e:	2002      	movs	r0, #2
 8001730:	f006 f960 	bl	80079f4 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001734:	4b2b      	ldr	r3, [pc, #172]	; (80017e4 <menu+0x6ac>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	220a      	movs	r2, #10
 800173a:	4923      	ldr	r1, [pc, #140]	; (80017c8 <menu+0x690>)
 800173c:	4618      	mov	r0, r3
 800173e:	f00a fcab 	bl	800c098 <itoa>
			lcd_print(2, 14, snum);
 8001742:	4a21      	ldr	r2, [pc, #132]	; (80017c8 <menu+0x690>)
 8001744:	210e      	movs	r1, #14
 8001746:	2002      	movs	r0, #2
 8001748:	f006 f954 	bl	80079f4 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 800174c:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <menu+0x694>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b09      	cmp	r3, #9
 8001752:	d123      	bne.n	800179c <menu+0x664>
			if(dilSecim == 0) {
 8001754:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <menu+0x680>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d105      	bne.n	8001768 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 800175c:	4a22      	ldr	r2, [pc, #136]	; (80017e8 <menu+0x6b0>)
 800175e:	2101      	movs	r1, #1
 8001760:	2002      	movs	r0, #2
 8001762:	f006 f947 	bl	80079f4 <lcd_print>
 8001766:	e008      	b.n	800177a <menu+0x642>
			} else if(dilSecim == 1) {
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <menu+0x680>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d104      	bne.n	800177a <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001770:	4a1e      	ldr	r2, [pc, #120]	; (80017ec <menu+0x6b4>)
 8001772:	2101      	movs	r1, #1
 8001774:	2002      	movs	r0, #2
 8001776:	f006 f93d 	bl	80079f4 <lcd_print>
			}
			lcd_print(2, 16, " ");
 800177a:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <menu+0x6b8>)
 800177c:	2110      	movs	r1, #16
 800177e:	2002      	movs	r0, #2
 8001780:	f006 f938 	bl	80079f4 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <menu+0x6bc>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	220a      	movs	r2, #10
 800178a:	490f      	ldr	r1, [pc, #60]	; (80017c8 <menu+0x690>)
 800178c:	4618      	mov	r0, r3
 800178e:	f00a fc83 	bl	800c098 <itoa>
			lcd_print(2, 15, snum);
 8001792:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <menu+0x690>)
 8001794:	210f      	movs	r1, #15
 8001796:	2002      	movs	r0, #2
 8001798:	f006 f92c 	bl	80079f4 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <menu+0x694>)
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b0a      	cmp	r3, #10
 80017a2:	d134      	bne.n	800180e <menu+0x6d6>
			if(dilSecim == 0) {
 80017a4:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <menu+0x680>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d127      	bne.n	80017fc <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 80017ac:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <menu+0x6c0>)
 80017ae:	2101      	movs	r1, #1
 80017b0:	2002      	movs	r0, #2
 80017b2:	f006 f91f 	bl	80079f4 <lcd_print>
 80017b6:	e02a      	b.n	800180e <menu+0x6d6>
 80017b8:	20000215 	.word	0x20000215
 80017bc:	0800cef8 	.word	0x0800cef8
 80017c0:	0800ce64 	.word	0x0800ce64
 80017c4:	2000021c 	.word	0x2000021c
 80017c8:	20000190 	.word	0x20000190
 80017cc:	200001f6 	.word	0x200001f6
 80017d0:	0800cf08 	.word	0x0800cf08
 80017d4:	0800cf18 	.word	0x0800cf18
 80017d8:	2000021d 	.word	0x2000021d
 80017dc:	0800cf28 	.word	0x0800cf28
 80017e0:	0800cf38 	.word	0x0800cf38
 80017e4:	2000021e 	.word	0x2000021e
 80017e8:	0800cf48 	.word	0x0800cf48
 80017ec:	0800cf58 	.word	0x0800cf58
 80017f0:	0800cf68 	.word	0x0800cf68
 80017f4:	2000021f 	.word	0x2000021f
 80017f8:	0800cf6c 	.word	0x0800cf6c
			} else if(dilSecim == 1) {
 80017fc:	4b82      	ldr	r3, [pc, #520]	; (8001a08 <menu+0x8d0>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d104      	bne.n	800180e <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001804:	4a81      	ldr	r2, [pc, #516]	; (8001a0c <menu+0x8d4>)
 8001806:	2101      	movs	r1, #1
 8001808:	2002      	movs	r0, #2
 800180a:	f006 f8f3 	bl	80079f4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800180e:	2102      	movs	r1, #2
 8001810:	487f      	ldr	r0, [pc, #508]	; (8001a10 <menu+0x8d8>)
 8001812:	f007 fc15 	bl	8009040 <HAL_GPIO_ReadPin>
 8001816:	4603      	mov	r3, r0
 8001818:	2b01      	cmp	r3, #1
 800181a:	d119      	bne.n	8001850 <menu+0x718>
 800181c:	4b7d      	ldr	r3, [pc, #500]	; (8001a14 <menu+0x8dc>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	f083 0301 	eor.w	r3, r3, #1
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d012      	beq.n	8001850 <menu+0x718>
 800182a:	4b7b      	ldr	r3, [pc, #492]	; (8001a18 <menu+0x8e0>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10e      	bne.n	8001850 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001832:	4b7a      	ldr	r3, [pc, #488]	; (8001a1c <menu+0x8e4>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	3301      	adds	r3, #1
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4b78      	ldr	r3, [pc, #480]	; (8001a1c <menu+0x8e4>)
 800183c:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 800183e:	4b77      	ldr	r3, [pc, #476]	; (8001a1c <menu+0x8e4>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2b0a      	cmp	r3, #10
 8001844:	d902      	bls.n	800184c <menu+0x714>
				hataGostermeSirasi = 0;
 8001846:	4b75      	ldr	r3, [pc, #468]	; (8001a1c <menu+0x8e4>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800184c:	f003 f840 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001850:	2104      	movs	r1, #4
 8001852:	486f      	ldr	r0, [pc, #444]	; (8001a10 <menu+0x8d8>)
 8001854:	f007 fbf4 	bl	8009040 <HAL_GPIO_ReadPin>
 8001858:	4603      	mov	r3, r0
 800185a:	2b01      	cmp	r3, #1
 800185c:	d119      	bne.n	8001892 <menu+0x75a>
 800185e:	4b6d      	ldr	r3, [pc, #436]	; (8001a14 <menu+0x8dc>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	f083 0301 	eor.w	r3, r3, #1
 8001866:	b2db      	uxtb	r3, r3
 8001868:	2b00      	cmp	r3, #0
 800186a:	d012      	beq.n	8001892 <menu+0x75a>
 800186c:	4b6a      	ldr	r3, [pc, #424]	; (8001a18 <menu+0x8e0>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10e      	bne.n	8001892 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001874:	4b69      	ldr	r3, [pc, #420]	; (8001a1c <menu+0x8e4>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	3b01      	subs	r3, #1
 800187a:	b2da      	uxtb	r2, r3
 800187c:	4b67      	ldr	r3, [pc, #412]	; (8001a1c <menu+0x8e4>)
 800187e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001880:	4b66      	ldr	r3, [pc, #408]	; (8001a1c <menu+0x8e4>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b0b      	cmp	r3, #11
 8001886:	d902      	bls.n	800188e <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001888:	4b64      	ldr	r3, [pc, #400]	; (8001a1c <menu+0x8e4>)
 800188a:	220a      	movs	r2, #10
 800188c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800188e:	f003 f81f 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001892:	2108      	movs	r1, #8
 8001894:	485e      	ldr	r0, [pc, #376]	; (8001a10 <menu+0x8d8>)
 8001896:	f007 fbd3 	bl	8009040 <HAL_GPIO_ReadPin>
 800189a:	4603      	mov	r3, r0
 800189c:	2b01      	cmp	r3, #1
 800189e:	d153      	bne.n	8001948 <menu+0x810>
 80018a0:	4b5c      	ldr	r3, [pc, #368]	; (8001a14 <menu+0x8dc>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	f083 0301 	eor.w	r3, r3, #1
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d04c      	beq.n	8001948 <menu+0x810>
 80018ae:	4b5b      	ldr	r3, [pc, #364]	; (8001a1c <menu+0x8e4>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b0a      	cmp	r3, #10
 80018b4:	d148      	bne.n	8001948 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 80018b6:	4b5a      	ldr	r3, [pc, #360]	; (8001a20 <menu+0x8e8>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	701a      	strb	r2, [r3, #0]
 80018bc:	4b59      	ldr	r3, [pc, #356]	; (8001a24 <menu+0x8ec>)
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 80018c4:	4b58      	ldr	r3, [pc, #352]	; (8001a28 <menu+0x8f0>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
 80018ca:	4b56      	ldr	r3, [pc, #344]	; (8001a24 <menu+0x8ec>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 80018d2:	4b56      	ldr	r3, [pc, #344]	; (8001a2c <menu+0x8f4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	701a      	strb	r2, [r3, #0]
 80018d8:	4b52      	ldr	r3, [pc, #328]	; (8001a24 <menu+0x8ec>)
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 80018e0:	4b53      	ldr	r3, [pc, #332]	; (8001a30 <menu+0x8f8>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
 80018e6:	4b4f      	ldr	r3, [pc, #316]	; (8001a24 <menu+0x8ec>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 80018ee:	4b51      	ldr	r3, [pc, #324]	; (8001a34 <menu+0x8fc>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
 80018f4:	4b4b      	ldr	r3, [pc, #300]	; (8001a24 <menu+0x8ec>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 80018fc:	4b4e      	ldr	r3, [pc, #312]	; (8001a38 <menu+0x900>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
 8001902:	4b48      	ldr	r3, [pc, #288]	; (8001a24 <menu+0x8ec>)
 8001904:	2200      	movs	r2, #0
 8001906:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 800190a:	4b4c      	ldr	r3, [pc, #304]	; (8001a3c <menu+0x904>)
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
 8001910:	4b44      	ldr	r3, [pc, #272]	; (8001a24 <menu+0x8ec>)
 8001912:	2200      	movs	r2, #0
 8001914:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001918:	4b49      	ldr	r3, [pc, #292]	; (8001a40 <menu+0x908>)
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
 800191e:	4b41      	ldr	r3, [pc, #260]	; (8001a24 <menu+0x8ec>)
 8001920:	2200      	movs	r2, #0
 8001922:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001926:	4b47      	ldr	r3, [pc, #284]	; (8001a44 <menu+0x90c>)
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]
 800192c:	4b3d      	ldr	r3, [pc, #244]	; (8001a24 <menu+0x8ec>)
 800192e:	2200      	movs	r2, #0
 8001930:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001934:	4b44      	ldr	r3, [pc, #272]	; (8001a48 <menu+0x910>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
 800193a:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <menu+0x8ec>)
 800193c:	2200      	movs	r2, #0
 800193e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001942:	4b42      	ldr	r3, [pc, #264]	; (8001a4c <menu+0x914>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001948:	4b41      	ldr	r3, [pc, #260]	; (8001a50 <menu+0x918>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b02      	cmp	r3, #2
 800194e:	f040 80fc 	bne.w	8001b4a <menu+0xa12>
		if(dilSecim == 0) {
 8001952:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <menu+0x8d0>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d105      	bne.n	8001966 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 800195a:	4a3e      	ldr	r2, [pc, #248]	; (8001a54 <menu+0x91c>)
 800195c:	2101      	movs	r1, #1
 800195e:	2001      	movs	r0, #1
 8001960:	f006 f848 	bl	80079f4 <lcd_print>
 8001964:	e008      	b.n	8001978 <menu+0x840>
		} else if(dilSecim == 1) {
 8001966:	4b28      	ldr	r3, [pc, #160]	; (8001a08 <menu+0x8d0>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d104      	bne.n	8001978 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 800196e:	4a3a      	ldr	r2, [pc, #232]	; (8001a58 <menu+0x920>)
 8001970:	2101      	movs	r1, #1
 8001972:	2001      	movs	r0, #1
 8001974:	f006 f83e 	bl	80079f4 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001978:	4b27      	ldr	r3, [pc, #156]	; (8001a18 <menu+0x8e0>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d003      	beq.n	8001988 <menu+0x850>
 8001980:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <menu+0x8e0>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b02      	cmp	r3, #2
 8001986:	d112      	bne.n	80019ae <menu+0x876>
			if(dilSecim == 0) {
 8001988:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <menu+0x8d0>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d105      	bne.n	800199c <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001990:	4a32      	ldr	r2, [pc, #200]	; (8001a5c <menu+0x924>)
 8001992:	2101      	movs	r1, #1
 8001994:	2002      	movs	r0, #2
 8001996:	f006 f82d 	bl	80079f4 <lcd_print>
 800199a:	e008      	b.n	80019ae <menu+0x876>
			} else if(dilSecim == 1) {
 800199c:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <menu+0x8d0>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d104      	bne.n	80019ae <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 80019a4:	4a2e      	ldr	r2, [pc, #184]	; (8001a60 <menu+0x928>)
 80019a6:	2101      	movs	r1, #1
 80019a8:	2002      	movs	r0, #2
 80019aa:	f006 f823 	bl	80079f4 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 80019ae:	4b2d      	ldr	r3, [pc, #180]	; (8001a64 <menu+0x92c>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d116      	bne.n	80019e4 <menu+0x8ac>
 80019b6:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <menu+0x8e0>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d112      	bne.n	80019e4 <menu+0x8ac>
			if(dilSecim == 0) {
 80019be:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <menu+0x8d0>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d105      	bne.n	80019d2 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 80019c6:	4a28      	ldr	r2, [pc, #160]	; (8001a68 <menu+0x930>)
 80019c8:	2101      	movs	r1, #1
 80019ca:	2002      	movs	r0, #2
 80019cc:	f006 f812 	bl	80079f4 <lcd_print>
 80019d0:	e008      	b.n	80019e4 <menu+0x8ac>
			} else if(dilSecim == 1) {
 80019d2:	4b0d      	ldr	r3, [pc, #52]	; (8001a08 <menu+0x8d0>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d104      	bne.n	80019e4 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 80019da:	4a24      	ldr	r2, [pc, #144]	; (8001a6c <menu+0x934>)
 80019dc:	2101      	movs	r1, #1
 80019de:	2002      	movs	r0, #2
 80019e0:	f006 f808 	bl	80079f4 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 80019e4:	4b1f      	ldr	r3, [pc, #124]	; (8001a64 <menu+0x92c>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d14c      	bne.n	8001a86 <menu+0x94e>
 80019ec:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <menu+0x8e0>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d148      	bne.n	8001a86 <menu+0x94e>
			if(dilSecim == 0) {
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <menu+0x8d0>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d13b      	bne.n	8001a74 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 80019fc:	4a1c      	ldr	r2, [pc, #112]	; (8001a70 <menu+0x938>)
 80019fe:	2101      	movs	r1, #1
 8001a00:	2002      	movs	r0, #2
 8001a02:	f005 fff7 	bl	80079f4 <lcd_print>
 8001a06:	e03e      	b.n	8001a86 <menu+0x94e>
 8001a08:	20000215 	.word	0x20000215
 8001a0c:	0800cf80 	.word	0x0800cf80
 8001a10:	40010800 	.word	0x40010800
 8001a14:	20000223 	.word	0x20000223
 8001a18:	20000203 	.word	0x20000203
 8001a1c:	200001f6 	.word	0x200001f6
 8001a20:	20000216 	.word	0x20000216
 8001a24:	20000120 	.word	0x20000120
 8001a28:	20000217 	.word	0x20000217
 8001a2c:	20000218 	.word	0x20000218
 8001a30:	20000219 	.word	0x20000219
 8001a34:	2000021a 	.word	0x2000021a
 8001a38:	2000021b 	.word	0x2000021b
 8001a3c:	2000021c 	.word	0x2000021c
 8001a40:	2000021d 	.word	0x2000021d
 8001a44:	2000021e 	.word	0x2000021e
 8001a48:	2000021f 	.word	0x2000021f
 8001a4c:	20000220 	.word	0x20000220
 8001a50:	200001f4 	.word	0x200001f4
 8001a54:	0800cf94 	.word	0x0800cf94
 8001a58:	0800cfa8 	.word	0x0800cfa8
 8001a5c:	0800cfbc 	.word	0x0800cfbc
 8001a60:	0800cfd0 	.word	0x0800cfd0
 8001a64:	200001f5 	.word	0x200001f5
 8001a68:	0800cfe4 	.word	0x0800cfe4
 8001a6c:	0800cff4 	.word	0x0800cff4
 8001a70:	0800d004 	.word	0x0800d004
			} else if(dilSecim == 1) {
 8001a74:	4b98      	ldr	r3, [pc, #608]	; (8001cd8 <menu+0xba0>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d104      	bne.n	8001a86 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001a7c:	4a97      	ldr	r2, [pc, #604]	; (8001cdc <menu+0xba4>)
 8001a7e:	2101      	movs	r1, #1
 8001a80:	2002      	movs	r0, #2
 8001a82:	f005 ffb7 	bl	80079f4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a86:	2102      	movs	r1, #2
 8001a88:	4895      	ldr	r0, [pc, #596]	; (8001ce0 <menu+0xba8>)
 8001a8a:	f007 fad9 	bl	8009040 <HAL_GPIO_ReadPin>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d119      	bne.n	8001ac8 <menu+0x990>
 8001a94:	4b93      	ldr	r3, [pc, #588]	; (8001ce4 <menu+0xbac>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	f083 0301 	eor.w	r3, r3, #1
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d012      	beq.n	8001ac8 <menu+0x990>
 8001aa2:	4b91      	ldr	r3, [pc, #580]	; (8001ce8 <menu+0xbb0>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d10e      	bne.n	8001ac8 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001aaa:	4b90      	ldr	r3, [pc, #576]	; (8001cec <menu+0xbb4>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4b8e      	ldr	r3, [pc, #568]	; (8001cec <menu+0xbb4>)
 8001ab4:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001ab6:	4b8d      	ldr	r3, [pc, #564]	; (8001cec <menu+0xbb4>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d902      	bls.n	8001ac4 <menu+0x98c>
				calismaSekli = 0;
 8001abe:	4b8b      	ldr	r3, [pc, #556]	; (8001cec <menu+0xbb4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ac4:	f002 ff04 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ac8:	2104      	movs	r1, #4
 8001aca:	4885      	ldr	r0, [pc, #532]	; (8001ce0 <menu+0xba8>)
 8001acc:	f007 fab8 	bl	8009040 <HAL_GPIO_ReadPin>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d119      	bne.n	8001b0a <menu+0x9d2>
 8001ad6:	4b83      	ldr	r3, [pc, #524]	; (8001ce4 <menu+0xbac>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	f083 0301 	eor.w	r3, r3, #1
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d012      	beq.n	8001b0a <menu+0x9d2>
 8001ae4:	4b80      	ldr	r3, [pc, #512]	; (8001ce8 <menu+0xbb0>)
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10e      	bne.n	8001b0a <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001aec:	4b7f      	ldr	r3, [pc, #508]	; (8001cec <menu+0xbb4>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	4b7d      	ldr	r3, [pc, #500]	; (8001cec <menu+0xbb4>)
 8001af6:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001af8:	4b7c      	ldr	r3, [pc, #496]	; (8001cec <menu+0xbb4>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <menu+0x9ce>
	    		calismaSekli = 1;
 8001b00:	4b7a      	ldr	r3, [pc, #488]	; (8001cec <menu+0xbb4>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001b06:	f002 fee3 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b0a:	2108      	movs	r1, #8
 8001b0c:	4874      	ldr	r0, [pc, #464]	; (8001ce0 <menu+0xba8>)
 8001b0e:	f007 fa97 	bl	8009040 <HAL_GPIO_ReadPin>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d118      	bne.n	8001b4a <menu+0xa12>
 8001b18:	4b72      	ldr	r3, [pc, #456]	; (8001ce4 <menu+0xbac>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	f083 0301 	eor.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d011      	beq.n	8001b4a <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001b26:	4b71      	ldr	r3, [pc, #452]	; (8001cec <menu+0xbb4>)
 8001b28:	781a      	ldrb	r2, [r3, #0]
 8001b2a:	4b71      	ldr	r3, [pc, #452]	; (8001cf0 <menu+0xbb8>)
 8001b2c:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001b2e:	4b6f      	ldr	r3, [pc, #444]	; (8001cec <menu+0xbb4>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d106      	bne.n	8001b44 <menu+0xa0c>
				altLimit = 1;
 8001b36:	4b6f      	ldr	r3, [pc, #444]	; (8001cf4 <menu+0xbbc>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001b3c:	4b6d      	ldr	r3, [pc, #436]	; (8001cf4 <menu+0xbbc>)
 8001b3e:	781a      	ldrb	r2, [r3, #0]
 8001b40:	4b6b      	ldr	r3, [pc, #428]	; (8001cf0 <menu+0xbb8>)
 8001b42:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001b44:	4b6c      	ldr	r3, [pc, #432]	; (8001cf8 <menu+0xbc0>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001b4a:	4b6c      	ldr	r3, [pc, #432]	; (8001cfc <menu+0xbc4>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	2b03      	cmp	r3, #3
 8001b50:	f040 8083 	bne.w	8001c5a <menu+0xb22>
		if(dilSecim == 0) {
 8001b54:	4b60      	ldr	r3, [pc, #384]	; (8001cd8 <menu+0xba0>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d105      	bne.n	8001b68 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001b5c:	4a68      	ldr	r2, [pc, #416]	; (8001d00 <menu+0xbc8>)
 8001b5e:	2101      	movs	r1, #1
 8001b60:	2001      	movs	r0, #1
 8001b62:	f005 ff47 	bl	80079f4 <lcd_print>
 8001b66:	e008      	b.n	8001b7a <menu+0xa42>
		} else if(dilSecim == 1) {
 8001b68:	4b5b      	ldr	r3, [pc, #364]	; (8001cd8 <menu+0xba0>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d104      	bne.n	8001b7a <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001b70:	4a64      	ldr	r2, [pc, #400]	; (8001d04 <menu+0xbcc>)
 8001b72:	2101      	movs	r1, #1
 8001b74:	2001      	movs	r0, #1
 8001b76:	f005 ff3d 	bl	80079f4 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001b7a:	4b63      	ldr	r3, [pc, #396]	; (8001d08 <menu+0xbd0>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d113      	bne.n	8001baa <menu+0xa72>
			if(dilSecim == 0) {
 8001b82:	4b55      	ldr	r3, [pc, #340]	; (8001cd8 <menu+0xba0>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001b8a:	4a60      	ldr	r2, [pc, #384]	; (8001d0c <menu+0xbd4>)
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	2002      	movs	r0, #2
 8001b90:	f005 ff30 	bl	80079f4 <lcd_print>
 8001b94:	e012      	b.n	8001bbc <menu+0xa84>
			} else if(dilSecim == 1) {
 8001b96:	4b50      	ldr	r3, [pc, #320]	; (8001cd8 <menu+0xba0>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d10e      	bne.n	8001bbc <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001b9e:	4a5c      	ldr	r2, [pc, #368]	; (8001d10 <menu+0xbd8>)
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	2002      	movs	r0, #2
 8001ba4:	f005 ff26 	bl	80079f4 <lcd_print>
 8001ba8:	e008      	b.n	8001bbc <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001baa:	4b57      	ldr	r3, [pc, #348]	; (8001d08 <menu+0xbd0>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d104      	bne.n	8001bbc <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001bb2:	4a58      	ldr	r2, [pc, #352]	; (8001d14 <menu+0xbdc>)
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	2002      	movs	r0, #2
 8001bb8:	f005 ff1c 	bl	80079f4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bbc:	2102      	movs	r1, #2
 8001bbe:	4848      	ldr	r0, [pc, #288]	; (8001ce0 <menu+0xba8>)
 8001bc0:	f007 fa3e 	bl	8009040 <HAL_GPIO_ReadPin>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d115      	bne.n	8001bf6 <menu+0xabe>
 8001bca:	4b46      	ldr	r3, [pc, #280]	; (8001ce4 <menu+0xbac>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	f083 0301 	eor.w	r3, r3, #1
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d00e      	beq.n	8001bf6 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001bd8:	4b4b      	ldr	r3, [pc, #300]	; (8001d08 <menu+0xbd0>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	4b49      	ldr	r3, [pc, #292]	; (8001d08 <menu+0xbd0>)
 8001be2:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001be4:	4b48      	ldr	r3, [pc, #288]	; (8001d08 <menu+0xbd0>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d902      	bls.n	8001bf2 <menu+0xaba>
				emniyetCercevesi = 0;
 8001bec:	4b46      	ldr	r3, [pc, #280]	; (8001d08 <menu+0xbd0>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bf2:	f002 fe6d 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bf6:	2104      	movs	r1, #4
 8001bf8:	4839      	ldr	r0, [pc, #228]	; (8001ce0 <menu+0xba8>)
 8001bfa:	f007 fa21 	bl	8009040 <HAL_GPIO_ReadPin>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d115      	bne.n	8001c30 <menu+0xaf8>
 8001c04:	4b37      	ldr	r3, [pc, #220]	; (8001ce4 <menu+0xbac>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	f083 0301 	eor.w	r3, r3, #1
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00e      	beq.n	8001c30 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001c12:	4b3d      	ldr	r3, [pc, #244]	; (8001d08 <menu+0xbd0>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	3b01      	subs	r3, #1
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4b3b      	ldr	r3, [pc, #236]	; (8001d08 <menu+0xbd0>)
 8001c1c:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001c1e:	4b3a      	ldr	r3, [pc, #232]	; (8001d08 <menu+0xbd0>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001c26:	4b38      	ldr	r3, [pc, #224]	; (8001d08 <menu+0xbd0>)
 8001c28:	2201      	movs	r2, #1
 8001c2a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c2c:	f002 fe50 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001c30:	2108      	movs	r1, #8
 8001c32:	482b      	ldr	r0, [pc, #172]	; (8001ce0 <menu+0xba8>)
 8001c34:	f007 fa04 	bl	8009040 <HAL_GPIO_ReadPin>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d10d      	bne.n	8001c5a <menu+0xb22>
 8001c3e:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <menu+0xbac>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	f083 0301 	eor.w	r3, r3, #1
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d006      	beq.n	8001c5a <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001c4c:	4b2e      	ldr	r3, [pc, #184]	; (8001d08 <menu+0xbd0>)
 8001c4e:	781a      	ldrb	r2, [r3, #0]
 8001c50:	4b27      	ldr	r3, [pc, #156]	; (8001cf0 <menu+0xbb8>)
 8001c52:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001c54:	4b28      	ldr	r3, [pc, #160]	; (8001cf8 <menu+0xbc0>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001c5a:	4b28      	ldr	r3, [pc, #160]	; (8001cfc <menu+0xbc4>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	f040 80ba 	bne.w	8001dd8 <menu+0xca0>
		if(dilSecim == 0) {
 8001c64:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <menu+0xba0>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d105      	bne.n	8001c78 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001c6c:	4a2a      	ldr	r2, [pc, #168]	; (8001d18 <menu+0xbe0>)
 8001c6e:	2101      	movs	r1, #1
 8001c70:	2001      	movs	r0, #1
 8001c72:	f005 febf 	bl	80079f4 <lcd_print>
 8001c76:	e008      	b.n	8001c8a <menu+0xb52>
		} else if(dilSecim == 1) {
 8001c78:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <menu+0xba0>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d104      	bne.n	8001c8a <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001c80:	4a26      	ldr	r2, [pc, #152]	; (8001d1c <menu+0xbe4>)
 8001c82:	2101      	movs	r1, #1
 8001c84:	2001      	movs	r0, #1
 8001c86:	f005 feb5 	bl	80079f4 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001c8a:	4b25      	ldr	r3, [pc, #148]	; (8001d20 <menu+0xbe8>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d113      	bne.n	8001cba <menu+0xb82>
			if(dilSecim == 0) {
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <menu+0xba0>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d105      	bne.n	8001ca6 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001c9a:	4a1c      	ldr	r2, [pc, #112]	; (8001d0c <menu+0xbd4>)
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	2002      	movs	r0, #2
 8001ca0:	f005 fea8 	bl	80079f4 <lcd_print>
 8001ca4:	e049      	b.n	8001d3a <menu+0xc02>
			} else if(dilSecim == 1) {
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <menu+0xba0>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d145      	bne.n	8001d3a <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001cae:	4a18      	ldr	r2, [pc, #96]	; (8001d10 <menu+0xbd8>)
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	2002      	movs	r0, #2
 8001cb4:	f005 fe9e 	bl	80079f4 <lcd_print>
 8001cb8:	e03f      	b.n	8001d3a <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001cba:	4b19      	ldr	r3, [pc, #100]	; (8001d20 <menu+0xbe8>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d13b      	bne.n	8001d3a <menu+0xc02>
			if(dilSecim == 0) {
 8001cc2:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <menu+0xba0>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d12e      	bne.n	8001d28 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001cca:	4a16      	ldr	r2, [pc, #88]	; (8001d24 <menu+0xbec>)
 8001ccc:	2101      	movs	r1, #1
 8001cce:	2002      	movs	r0, #2
 8001cd0:	f005 fe90 	bl	80079f4 <lcd_print>
 8001cd4:	e031      	b.n	8001d3a <menu+0xc02>
 8001cd6:	bf00      	nop
 8001cd8:	20000215 	.word	0x20000215
 8001cdc:	0800d014 	.word	0x0800d014
 8001ce0:	40010800 	.word	0x40010800
 8001ce4:	20000223 	.word	0x20000223
 8001ce8:	20000203 	.word	0x20000203
 8001cec:	200001f5 	.word	0x200001f5
 8001cf0:	20000120 	.word	0x20000120
 8001cf4:	200001fa 	.word	0x200001fa
 8001cf8:	20000220 	.word	0x20000220
 8001cfc:	200001f4 	.word	0x200001f4
 8001d00:	0800d024 	.word	0x0800d024
 8001d04:	0800d038 	.word	0x0800d038
 8001d08:	200001f8 	.word	0x200001f8
 8001d0c:	0800d04c 	.word	0x0800d04c
 8001d10:	0800d060 	.word	0x0800d060
 8001d14:	0800d074 	.word	0x0800d074
 8001d18:	0800d084 	.word	0x0800d084
 8001d1c:	0800d098 	.word	0x0800d098
 8001d20:	200001f9 	.word	0x200001f9
 8001d24:	0800d0ac 	.word	0x0800d0ac
			} else if(dilSecim == 1) {
 8001d28:	4b92      	ldr	r3, [pc, #584]	; (8001f74 <menu+0xe3c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d104      	bne.n	8001d3a <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001d30:	4a91      	ldr	r2, [pc, #580]	; (8001f78 <menu+0xe40>)
 8001d32:	2101      	movs	r1, #1
 8001d34:	2002      	movs	r0, #2
 8001d36:	f005 fe5d 	bl	80079f4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	488f      	ldr	r0, [pc, #572]	; (8001f7c <menu+0xe44>)
 8001d3e:	f007 f97f 	bl	8009040 <HAL_GPIO_ReadPin>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d115      	bne.n	8001d74 <menu+0xc3c>
 8001d48:	4b8d      	ldr	r3, [pc, #564]	; (8001f80 <menu+0xe48>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	f083 0301 	eor.w	r3, r3, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00e      	beq.n	8001d74 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001d56:	4b8b      	ldr	r3, [pc, #556]	; (8001f84 <menu+0xe4c>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4b89      	ldr	r3, [pc, #548]	; (8001f84 <menu+0xe4c>)
 8001d60:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001d62:	4b88      	ldr	r3, [pc, #544]	; (8001f84 <menu+0xe4c>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d902      	bls.n	8001d70 <menu+0xc38>
				yavaslamaLimit = 0;
 8001d6a:	4b86      	ldr	r3, [pc, #536]	; (8001f84 <menu+0xe4c>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d70:	f002 fdae 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d74:	2104      	movs	r1, #4
 8001d76:	4881      	ldr	r0, [pc, #516]	; (8001f7c <menu+0xe44>)
 8001d78:	f007 f962 	bl	8009040 <HAL_GPIO_ReadPin>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d115      	bne.n	8001dae <menu+0xc76>
 8001d82:	4b7f      	ldr	r3, [pc, #508]	; (8001f80 <menu+0xe48>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	f083 0301 	eor.w	r3, r3, #1
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00e      	beq.n	8001dae <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001d90:	4b7c      	ldr	r3, [pc, #496]	; (8001f84 <menu+0xe4c>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	4b7a      	ldr	r3, [pc, #488]	; (8001f84 <menu+0xe4c>)
 8001d9a:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001d9c:	4b79      	ldr	r3, [pc, #484]	; (8001f84 <menu+0xe4c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001da4:	4b77      	ldr	r3, [pc, #476]	; (8001f84 <menu+0xe4c>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001daa:	f002 fd91 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dae:	2108      	movs	r1, #8
 8001db0:	4872      	ldr	r0, [pc, #456]	; (8001f7c <menu+0xe44>)
 8001db2:	f007 f945 	bl	8009040 <HAL_GPIO_ReadPin>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d10d      	bne.n	8001dd8 <menu+0xca0>
 8001dbc:	4b70      	ldr	r3, [pc, #448]	; (8001f80 <menu+0xe48>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	f083 0301 	eor.w	r3, r3, #1
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d006      	beq.n	8001dd8 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001dca:	4b6e      	ldr	r3, [pc, #440]	; (8001f84 <menu+0xe4c>)
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	4b6e      	ldr	r3, [pc, #440]	; (8001f88 <menu+0xe50>)
 8001dd0:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001dd2:	4b6e      	ldr	r3, [pc, #440]	; (8001f8c <menu+0xe54>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001dd8:	4b6d      	ldr	r3, [pc, #436]	; (8001f90 <menu+0xe58>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b05      	cmp	r3, #5
 8001dde:	f040 80b9 	bne.w	8001f54 <menu+0xe1c>
		if(dilSecim == 0) {
 8001de2:	4b64      	ldr	r3, [pc, #400]	; (8001f74 <menu+0xe3c>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d105      	bne.n	8001df6 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001dea:	4a6a      	ldr	r2, [pc, #424]	; (8001f94 <menu+0xe5c>)
 8001dec:	2101      	movs	r1, #1
 8001dee:	2001      	movs	r0, #1
 8001df0:	f005 fe00 	bl	80079f4 <lcd_print>
 8001df4:	e008      	b.n	8001e08 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001df6:	4b5f      	ldr	r3, [pc, #380]	; (8001f74 <menu+0xe3c>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d104      	bne.n	8001e08 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001dfe:	4a66      	ldr	r2, [pc, #408]	; (8001f98 <menu+0xe60>)
 8001e00:	2101      	movs	r1, #1
 8001e02:	2001      	movs	r0, #1
 8001e04:	f005 fdf6 	bl	80079f4 <lcd_print>
		}

		if(altLimit == 0) {
 8001e08:	4b64      	ldr	r3, [pc, #400]	; (8001f9c <menu+0xe64>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d113      	bne.n	8001e38 <menu+0xd00>
			if(dilSecim == 0) {
 8001e10:	4b58      	ldr	r3, [pc, #352]	; (8001f74 <menu+0xe3c>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d105      	bne.n	8001e24 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001e18:	4a61      	ldr	r2, [pc, #388]	; (8001fa0 <menu+0xe68>)
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	2002      	movs	r0, #2
 8001e1e:	f005 fde9 	bl	80079f4 <lcd_print>
 8001e22:	e020      	b.n	8001e66 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001e24:	4b53      	ldr	r3, [pc, #332]	; (8001f74 <menu+0xe3c>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d11c      	bne.n	8001e66 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001e2c:	4a5d      	ldr	r2, [pc, #372]	; (8001fa4 <menu+0xe6c>)
 8001e2e:	2101      	movs	r1, #1
 8001e30:	2002      	movs	r0, #2
 8001e32:	f005 fddf 	bl	80079f4 <lcd_print>
 8001e36:	e016      	b.n	8001e66 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001e38:	4b58      	ldr	r3, [pc, #352]	; (8001f9c <menu+0xe64>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d112      	bne.n	8001e66 <menu+0xd2e>
			if(dilSecim == 0){
 8001e40:	4b4c      	ldr	r3, [pc, #304]	; (8001f74 <menu+0xe3c>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d105      	bne.n	8001e54 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001e48:	4a57      	ldr	r2, [pc, #348]	; (8001fa8 <menu+0xe70>)
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	2002      	movs	r0, #2
 8001e4e:	f005 fdd1 	bl	80079f4 <lcd_print>
 8001e52:	e008      	b.n	8001e66 <menu+0xd2e>
			} else if(dilSecim == 1){
 8001e54:	4b47      	ldr	r3, [pc, #284]	; (8001f74 <menu+0xe3c>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d104      	bne.n	8001e66 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001e5c:	4a46      	ldr	r2, [pc, #280]	; (8001f78 <menu+0xe40>)
 8001e5e:	2101      	movs	r1, #1
 8001e60:	2002      	movs	r0, #2
 8001e62:	f005 fdc7 	bl	80079f4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001e66:	2102      	movs	r1, #2
 8001e68:	4844      	ldr	r0, [pc, #272]	; (8001f7c <menu+0xe44>)
 8001e6a:	f007 f8e9 	bl	8009040 <HAL_GPIO_ReadPin>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d119      	bne.n	8001ea8 <menu+0xd70>
 8001e74:	4b42      	ldr	r3, [pc, #264]	; (8001f80 <menu+0xe48>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	f083 0301 	eor.w	r3, r3, #1
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d012      	beq.n	8001ea8 <menu+0xd70>
 8001e82:	4b4a      	ldr	r3, [pc, #296]	; (8001fac <menu+0xe74>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10e      	bne.n	8001ea8 <menu+0xd70>
			altLimit = altLimit + 1;
 8001e8a:	4b44      	ldr	r3, [pc, #272]	; (8001f9c <menu+0xe64>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4b42      	ldr	r3, [pc, #264]	; (8001f9c <menu+0xe64>)
 8001e94:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001e96:	4b41      	ldr	r3, [pc, #260]	; (8001f9c <menu+0xe64>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d902      	bls.n	8001ea4 <menu+0xd6c>
				altLimit = 0;
 8001e9e:	4b3f      	ldr	r3, [pc, #252]	; (8001f9c <menu+0xe64>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ea4:	f002 fd14 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001ea8:	2104      	movs	r1, #4
 8001eaa:	4834      	ldr	r0, [pc, #208]	; (8001f7c <menu+0xe44>)
 8001eac:	f007 f8c8 	bl	8009040 <HAL_GPIO_ReadPin>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d119      	bne.n	8001eea <menu+0xdb2>
 8001eb6:	4b32      	ldr	r3, [pc, #200]	; (8001f80 <menu+0xe48>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	f083 0301 	eor.w	r3, r3, #1
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d012      	beq.n	8001eea <menu+0xdb2>
 8001ec4:	4b39      	ldr	r3, [pc, #228]	; (8001fac <menu+0xe74>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10e      	bne.n	8001eea <menu+0xdb2>
			altLimit = altLimit - 1;
 8001ecc:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <menu+0xe64>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <menu+0xe64>)
 8001ed6:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001ed8:	4b30      	ldr	r3, [pc, #192]	; (8001f9c <menu+0xe64>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <menu+0xdae>
		   		altLimit = 1;
 8001ee0:	4b2e      	ldr	r3, [pc, #184]	; (8001f9c <menu+0xe64>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001ee6:	f002 fcf3 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001eea:	2108      	movs	r1, #8
 8001eec:	4823      	ldr	r0, [pc, #140]	; (8001f7c <menu+0xe44>)
 8001eee:	f007 f8a7 	bl	8009040 <HAL_GPIO_ReadPin>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d12d      	bne.n	8001f54 <menu+0xe1c>
 8001ef8:	4b21      	ldr	r3, [pc, #132]	; (8001f80 <menu+0xe48>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	f083 0301 	eor.w	r3, r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d026      	beq.n	8001f54 <menu+0xe1c>
			eepromData[5] = altLimit;
 8001f06:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <menu+0xe64>)
 8001f08:	781a      	ldrb	r2, [r3, #0]
 8001f0a:	4b1f      	ldr	r3, [pc, #124]	; (8001f88 <menu+0xe50>)
 8001f0c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001f0e:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <menu+0xe64>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d110      	bne.n	8001f38 <menu+0xe00>
 8001f16:	4b26      	ldr	r3, [pc, #152]	; (8001fb0 <menu+0xe78>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d003      	beq.n	8001f26 <menu+0xdee>
 8001f1e:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <menu+0xe78>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d108      	bne.n	8001f38 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8001f26:	4b22      	ldr	r3, [pc, #136]	; (8001fb0 <menu+0xe78>)
 8001f28:	2203      	movs	r2, #3
 8001f2a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001f2c:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <menu+0xe78>)
 8001f2e:	781a      	ldrb	r2, [r3, #0]
 8001f30:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <menu+0xe50>)
 8001f32:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001f36:	e00a      	b.n	8001f4e <menu+0xe16>
			} else if(altLimit == 0) {
 8001f38:	4b18      	ldr	r3, [pc, #96]	; (8001f9c <menu+0xe64>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d106      	bne.n	8001f4e <menu+0xe16>
				platformSilindirTipi = 0;
 8001f40:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <menu+0xe7c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001f46:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <menu+0xe7c>)
 8001f48:	781a      	ldrb	r2, [r3, #0]
 8001f4a:	4b0f      	ldr	r3, [pc, #60]	; (8001f88 <menu+0xe50>)
 8001f4c:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <menu+0xe54>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001f54:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <menu+0xe58>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b06      	cmp	r3, #6
 8001f5a:	f040 80b6 	bne.w	80020ca <menu+0xf92>
		if(dilSecim == 0) {
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <menu+0xe3c>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d12a      	bne.n	8001fbc <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8001f66:	4a14      	ldr	r2, [pc, #80]	; (8001fb8 <menu+0xe80>)
 8001f68:	2101      	movs	r1, #1
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f005 fd42 	bl	80079f4 <lcd_print>
 8001f70:	e02d      	b.n	8001fce <menu+0xe96>
 8001f72:	bf00      	nop
 8001f74:	20000215 	.word	0x20000215
 8001f78:	0800d0c0 	.word	0x0800d0c0
 8001f7c:	40010800 	.word	0x40010800
 8001f80:	20000223 	.word	0x20000223
 8001f84:	200001f9 	.word	0x200001f9
 8001f88:	20000120 	.word	0x20000120
 8001f8c:	20000220 	.word	0x20000220
 8001f90:	200001f4 	.word	0x200001f4
 8001f94:	0800d0d4 	.word	0x0800d0d4
 8001f98:	0800d0e8 	.word	0x0800d0e8
 8001f9c:	200001fa 	.word	0x200001fa
 8001fa0:	0800d04c 	.word	0x0800d04c
 8001fa4:	0800d060 	.word	0x0800d060
 8001fa8:	0800d0ac 	.word	0x0800d0ac
 8001fac:	200001f5 	.word	0x200001f5
 8001fb0:	20000201 	.word	0x20000201
 8001fb4:	20000207 	.word	0x20000207
 8001fb8:	0800d0fc 	.word	0x0800d0fc
		} else if(dilSecim == 1){
 8001fbc:	4b7a      	ldr	r3, [pc, #488]	; (80021a8 <menu+0x1070>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d104      	bne.n	8001fce <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8001fc4:	4a79      	ldr	r2, [pc, #484]	; (80021ac <menu+0x1074>)
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f005 fd13 	bl	80079f4 <lcd_print>
		}
		if(basincSalteri == 0){
 8001fce:	4b78      	ldr	r3, [pc, #480]	; (80021b0 <menu+0x1078>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d113      	bne.n	8001ffe <menu+0xec6>
			if(dilSecim == 0) {
 8001fd6:	4b74      	ldr	r3, [pc, #464]	; (80021a8 <menu+0x1070>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d105      	bne.n	8001fea <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8001fde:	4a75      	ldr	r2, [pc, #468]	; (80021b4 <menu+0x107c>)
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	2002      	movs	r0, #2
 8001fe4:	f005 fd06 	bl	80079f4 <lcd_print>
 8001fe8:	e020      	b.n	800202c <menu+0xef4>
			} else if(dilSecim == 1){
 8001fea:	4b6f      	ldr	r3, [pc, #444]	; (80021a8 <menu+0x1070>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d11c      	bne.n	800202c <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8001ff2:	4a71      	ldr	r2, [pc, #452]	; (80021b8 <menu+0x1080>)
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	2002      	movs	r0, #2
 8001ff8:	f005 fcfc 	bl	80079f4 <lcd_print>
 8001ffc:	e016      	b.n	800202c <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8001ffe:	4b6c      	ldr	r3, [pc, #432]	; (80021b0 <menu+0x1078>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d112      	bne.n	800202c <menu+0xef4>
			if(dilSecim == 0) {
 8002006:	4b68      	ldr	r3, [pc, #416]	; (80021a8 <menu+0x1070>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d105      	bne.n	800201a <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800200e:	4a6b      	ldr	r2, [pc, #428]	; (80021bc <menu+0x1084>)
 8002010:	2101      	movs	r1, #1
 8002012:	2002      	movs	r0, #2
 8002014:	f005 fcee 	bl	80079f4 <lcd_print>
 8002018:	e008      	b.n	800202c <menu+0xef4>
			} else if(dilSecim == 1) {
 800201a:	4b63      	ldr	r3, [pc, #396]	; (80021a8 <menu+0x1070>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d104      	bne.n	800202c <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 8002022:	4a67      	ldr	r2, [pc, #412]	; (80021c0 <menu+0x1088>)
 8002024:	2101      	movs	r1, #1
 8002026:	2002      	movs	r0, #2
 8002028:	f005 fce4 	bl	80079f4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800202c:	2102      	movs	r1, #2
 800202e:	4865      	ldr	r0, [pc, #404]	; (80021c4 <menu+0x108c>)
 8002030:	f007 f806 	bl	8009040 <HAL_GPIO_ReadPin>
 8002034:	4603      	mov	r3, r0
 8002036:	2b01      	cmp	r3, #1
 8002038:	d115      	bne.n	8002066 <menu+0xf2e>
 800203a:	4b63      	ldr	r3, [pc, #396]	; (80021c8 <menu+0x1090>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	f083 0301 	eor.w	r3, r3, #1
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00e      	beq.n	8002066 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002048:	4b59      	ldr	r3, [pc, #356]	; (80021b0 <menu+0x1078>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	3301      	adds	r3, #1
 800204e:	b2da      	uxtb	r2, r3
 8002050:	4b57      	ldr	r3, [pc, #348]	; (80021b0 <menu+0x1078>)
 8002052:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002054:	4b56      	ldr	r3, [pc, #344]	; (80021b0 <menu+0x1078>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d902      	bls.n	8002062 <menu+0xf2a>
				basincSalteri = 0;
 800205c:	4b54      	ldr	r3, [pc, #336]	; (80021b0 <menu+0x1078>)
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002062:	f002 fc35 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002066:	2104      	movs	r1, #4
 8002068:	4856      	ldr	r0, [pc, #344]	; (80021c4 <menu+0x108c>)
 800206a:	f006 ffe9 	bl	8009040 <HAL_GPIO_ReadPin>
 800206e:	4603      	mov	r3, r0
 8002070:	2b01      	cmp	r3, #1
 8002072:	d115      	bne.n	80020a0 <menu+0xf68>
 8002074:	4b54      	ldr	r3, [pc, #336]	; (80021c8 <menu+0x1090>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	f083 0301 	eor.w	r3, r3, #1
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00e      	beq.n	80020a0 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 8002082:	4b4b      	ldr	r3, [pc, #300]	; (80021b0 <menu+0x1078>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	3b01      	subs	r3, #1
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4b49      	ldr	r3, [pc, #292]	; (80021b0 <menu+0x1078>)
 800208c:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800208e:	4b48      	ldr	r3, [pc, #288]	; (80021b0 <menu+0x1078>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d002      	beq.n	800209c <menu+0xf64>
		   		basincSalteri = 1;
 8002096:	4b46      	ldr	r3, [pc, #280]	; (80021b0 <menu+0x1078>)
 8002098:	2201      	movs	r2, #1
 800209a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800209c:	f002 fc18 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020a0:	2108      	movs	r1, #8
 80020a2:	4848      	ldr	r0, [pc, #288]	; (80021c4 <menu+0x108c>)
 80020a4:	f006 ffcc 	bl	8009040 <HAL_GPIO_ReadPin>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d10d      	bne.n	80020ca <menu+0xf92>
 80020ae:	4b46      	ldr	r3, [pc, #280]	; (80021c8 <menu+0x1090>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	f083 0301 	eor.w	r3, r3, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d006      	beq.n	80020ca <menu+0xf92>
			eepromData[6] = basincSalteri;
 80020bc:	4b3c      	ldr	r3, [pc, #240]	; (80021b0 <menu+0x1078>)
 80020be:	781a      	ldrb	r2, [r3, #0]
 80020c0:	4b42      	ldr	r3, [pc, #264]	; (80021cc <menu+0x1094>)
 80020c2:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80020c4:	4b42      	ldr	r3, [pc, #264]	; (80021d0 <menu+0x1098>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80020ca:	4b42      	ldr	r3, [pc, #264]	; (80021d4 <menu+0x109c>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	2b07      	cmp	r3, #7
 80020d0:	f040 80f5 	bne.w	80022be <menu+0x1186>
		if(dilSecim == 0) {
 80020d4:	4b34      	ldr	r3, [pc, #208]	; (80021a8 <menu+0x1070>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d105      	bne.n	80020e8 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80020dc:	4a3e      	ldr	r2, [pc, #248]	; (80021d8 <menu+0x10a0>)
 80020de:	2101      	movs	r1, #1
 80020e0:	2001      	movs	r0, #1
 80020e2:	f005 fc87 	bl	80079f4 <lcd_print>
 80020e6:	e008      	b.n	80020fa <menu+0xfc2>
		} else if(dilSecim == 1){
 80020e8:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <menu+0x1070>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d104      	bne.n	80020fa <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80020f0:	4a3a      	ldr	r2, [pc, #232]	; (80021dc <menu+0x10a4>)
 80020f2:	2101      	movs	r1, #1
 80020f4:	2001      	movs	r0, #1
 80020f6:	f005 fc7d 	bl	80079f4 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80020fa:	4b39      	ldr	r3, [pc, #228]	; (80021e0 <menu+0x10a8>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d113      	bne.n	800212a <menu+0xff2>
			if(dilSecim == 0) {
 8002102:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <menu+0x1070>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d105      	bne.n	8002116 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 800210a:	4a2a      	ldr	r2, [pc, #168]	; (80021b4 <menu+0x107c>)
 800210c:	2101      	movs	r1, #1
 800210e:	2002      	movs	r0, #2
 8002110:	f005 fc70 	bl	80079f4 <lcd_print>
 8002114:	e079      	b.n	800220a <menu+0x10d2>
			} else if(dilSecim == 1){
 8002116:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <menu+0x1070>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d175      	bne.n	800220a <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800211e:	4a26      	ldr	r2, [pc, #152]	; (80021b8 <menu+0x1080>)
 8002120:	2101      	movs	r1, #1
 8002122:	2002      	movs	r0, #2
 8002124:	f005 fc66 	bl	80079f4 <lcd_print>
 8002128:	e06f      	b.n	800220a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 800212a:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <menu+0x10a8>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d113      	bne.n	800215a <menu+0x1022>
			if(dilSecim == 0) {
 8002132:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <menu+0x1070>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d105      	bne.n	8002146 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 800213a:	4a2a      	ldr	r2, [pc, #168]	; (80021e4 <menu+0x10ac>)
 800213c:	2101      	movs	r1, #1
 800213e:	2002      	movs	r0, #2
 8002140:	f005 fc58 	bl	80079f4 <lcd_print>
 8002144:	e061      	b.n	800220a <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002146:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <menu+0x1070>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b01      	cmp	r3, #1
 800214c:	d15d      	bne.n	800220a <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 800214e:	4a26      	ldr	r2, [pc, #152]	; (80021e8 <menu+0x10b0>)
 8002150:	2101      	movs	r1, #1
 8002152:	2002      	movs	r0, #2
 8002154:	f005 fc4e 	bl	80079f4 <lcd_print>
 8002158:	e057      	b.n	800220a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 800215a:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <menu+0x10a8>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d113      	bne.n	800218a <menu+0x1052>
			if(dilSecim == 0) {
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <menu+0x1070>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d105      	bne.n	8002176 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 800216a:	4a20      	ldr	r2, [pc, #128]	; (80021ec <menu+0x10b4>)
 800216c:	2101      	movs	r1, #1
 800216e:	2002      	movs	r0, #2
 8002170:	f005 fc40 	bl	80079f4 <lcd_print>
 8002174:	e049      	b.n	800220a <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002176:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <menu+0x1070>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d145      	bne.n	800220a <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 800217e:	4a1c      	ldr	r2, [pc, #112]	; (80021f0 <menu+0x10b8>)
 8002180:	2101      	movs	r1, #1
 8002182:	2002      	movs	r0, #2
 8002184:	f005 fc36 	bl	80079f4 <lcd_print>
 8002188:	e03f      	b.n	800220a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 800218a:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <menu+0x10a8>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d13b      	bne.n	800220a <menu+0x10d2>
			if(dilSecim == 0) {
 8002192:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <menu+0x1070>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d12e      	bne.n	80021f8 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 800219a:	4a16      	ldr	r2, [pc, #88]	; (80021f4 <menu+0x10bc>)
 800219c:	2101      	movs	r1, #1
 800219e:	2002      	movs	r0, #2
 80021a0:	f005 fc28 	bl	80079f4 <lcd_print>
 80021a4:	e031      	b.n	800220a <menu+0x10d2>
 80021a6:	bf00      	nop
 80021a8:	20000215 	.word	0x20000215
 80021ac:	0800d10c 	.word	0x0800d10c
 80021b0:	200001fb 	.word	0x200001fb
 80021b4:	0800d04c 	.word	0x0800d04c
 80021b8:	0800d060 	.word	0x0800d060
 80021bc:	0800d0ac 	.word	0x0800d0ac
 80021c0:	0800d0c0 	.word	0x0800d0c0
 80021c4:	40010800 	.word	0x40010800
 80021c8:	20000223 	.word	0x20000223
 80021cc:	20000120 	.word	0x20000120
 80021d0:	20000220 	.word	0x20000220
 80021d4:	200001f4 	.word	0x200001f4
 80021d8:	0800d11c 	.word	0x0800d11c
 80021dc:	0800d130 	.word	0x0800d130
 80021e0:	200001fc 	.word	0x200001fc
 80021e4:	0800d144 	.word	0x0800d144
 80021e8:	0800d158 	.word	0x0800d158
 80021ec:	0800d16c 	.word	0x0800d16c
 80021f0:	0800d180 	.word	0x0800d180
 80021f4:	0800d194 	.word	0x0800d194
			} else if(dilSecim == 1){
 80021f8:	4b99      	ldr	r3, [pc, #612]	; (8002460 <menu+0x1328>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d104      	bne.n	800220a <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002200:	4a98      	ldr	r2, [pc, #608]	; (8002464 <menu+0x132c>)
 8002202:	2101      	movs	r1, #1
 8002204:	2002      	movs	r0, #2
 8002206:	f005 fbf5 	bl	80079f4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800220a:	2102      	movs	r1, #2
 800220c:	4896      	ldr	r0, [pc, #600]	; (8002468 <menu+0x1330>)
 800220e:	f006 ff17 	bl	8009040 <HAL_GPIO_ReadPin>
 8002212:	4603      	mov	r3, r0
 8002214:	2b01      	cmp	r3, #1
 8002216:	d115      	bne.n	8002244 <menu+0x110c>
 8002218:	4b94      	ldr	r3, [pc, #592]	; (800246c <menu+0x1334>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	f083 0301 	eor.w	r3, r3, #1
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00e      	beq.n	8002244 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8002226:	4b92      	ldr	r3, [pc, #584]	; (8002470 <menu+0x1338>)
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	3301      	adds	r3, #1
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4b90      	ldr	r3, [pc, #576]	; (8002470 <menu+0x1338>)
 8002230:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002232:	4b8f      	ldr	r3, [pc, #572]	; (8002470 <menu+0x1338>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	2b03      	cmp	r3, #3
 8002238:	d902      	bls.n	8002240 <menu+0x1108>
				kapiSecimleri = 0;
 800223a:	4b8d      	ldr	r3, [pc, #564]	; (8002470 <menu+0x1338>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002240:	f002 fb46 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002244:	2104      	movs	r1, #4
 8002246:	4888      	ldr	r0, [pc, #544]	; (8002468 <menu+0x1330>)
 8002248:	f006 fefa 	bl	8009040 <HAL_GPIO_ReadPin>
 800224c:	4603      	mov	r3, r0
 800224e:	2b01      	cmp	r3, #1
 8002250:	d115      	bne.n	800227e <menu+0x1146>
 8002252:	4b86      	ldr	r3, [pc, #536]	; (800246c <menu+0x1334>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	f083 0301 	eor.w	r3, r3, #1
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00e      	beq.n	800227e <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8002260:	4b83      	ldr	r3, [pc, #524]	; (8002470 <menu+0x1338>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	3b01      	subs	r3, #1
 8002266:	b2da      	uxtb	r2, r3
 8002268:	4b81      	ldr	r3, [pc, #516]	; (8002470 <menu+0x1338>)
 800226a:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 800226c:	4b80      	ldr	r3, [pc, #512]	; (8002470 <menu+0x1338>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b04      	cmp	r3, #4
 8002272:	d902      	bls.n	800227a <menu+0x1142>
		   		kapiSecimleri = 3;
 8002274:	4b7e      	ldr	r3, [pc, #504]	; (8002470 <menu+0x1338>)
 8002276:	2203      	movs	r2, #3
 8002278:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800227a:	f002 fb29 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800227e:	2108      	movs	r1, #8
 8002280:	4879      	ldr	r0, [pc, #484]	; (8002468 <menu+0x1330>)
 8002282:	f006 fedd 	bl	8009040 <HAL_GPIO_ReadPin>
 8002286:	4603      	mov	r3, r0
 8002288:	2b01      	cmp	r3, #1
 800228a:	d118      	bne.n	80022be <menu+0x1186>
 800228c:	4b77      	ldr	r3, [pc, #476]	; (800246c <menu+0x1334>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	f083 0301 	eor.w	r3, r3, #1
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d011      	beq.n	80022be <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 800229a:	4b75      	ldr	r3, [pc, #468]	; (8002470 <menu+0x1338>)
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	4b75      	ldr	r3, [pc, #468]	; (8002474 <menu+0x133c>)
 80022a0:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80022a2:	4b73      	ldr	r3, [pc, #460]	; (8002470 <menu+0x1338>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d006      	beq.n	80022b8 <menu+0x1180>
				altLimit = 1;
 80022aa:	4b73      	ldr	r3, [pc, #460]	; (8002478 <menu+0x1340>)
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80022b0:	4b71      	ldr	r3, [pc, #452]	; (8002478 <menu+0x1340>)
 80022b2:	781a      	ldrb	r2, [r3, #0]
 80022b4:	4b6f      	ldr	r3, [pc, #444]	; (8002474 <menu+0x133c>)
 80022b6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80022b8:	4b70      	ldr	r3, [pc, #448]	; (800247c <menu+0x1344>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80022be:	4b70      	ldr	r3, [pc, #448]	; (8002480 <menu+0x1348>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	f040 8092 	bne.w	80023ec <menu+0x12b4>
		if(dilSecim == 0) {
 80022c8:	4b65      	ldr	r3, [pc, #404]	; (8002460 <menu+0x1328>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d105      	bne.n	80022dc <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80022d0:	4a6c      	ldr	r2, [pc, #432]	; (8002484 <menu+0x134c>)
 80022d2:	2101      	movs	r1, #1
 80022d4:	2001      	movs	r0, #1
 80022d6:	f005 fb8d 	bl	80079f4 <lcd_print>
 80022da:	e008      	b.n	80022ee <menu+0x11b6>
		} else if(dilSecim == 1) {
 80022dc:	4b60      	ldr	r3, [pc, #384]	; (8002460 <menu+0x1328>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d104      	bne.n	80022ee <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80022e4:	4a68      	ldr	r2, [pc, #416]	; (8002488 <menu+0x1350>)
 80022e6:	2101      	movs	r1, #1
 80022e8:	2001      	movs	r0, #1
 80022ea:	f005 fb83 	bl	80079f4 <lcd_print>
		}

		if(kapiAcTipi == 0){
 80022ee:	4b67      	ldr	r3, [pc, #412]	; (800248c <menu+0x1354>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d113      	bne.n	800231e <menu+0x11e6>
			if(dilSecim == 0) {
 80022f6:	4b5a      	ldr	r3, [pc, #360]	; (8002460 <menu+0x1328>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d105      	bne.n	800230a <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 80022fe:	4a64      	ldr	r2, [pc, #400]	; (8002490 <menu+0x1358>)
 8002300:	2101      	movs	r1, #1
 8002302:	2002      	movs	r0, #2
 8002304:	f005 fb76 	bl	80079f4 <lcd_print>
 8002308:	e020      	b.n	800234c <menu+0x1214>
			} else if(dilSecim == 1) {
 800230a:	4b55      	ldr	r3, [pc, #340]	; (8002460 <menu+0x1328>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d11c      	bne.n	800234c <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 8002312:	4a60      	ldr	r2, [pc, #384]	; (8002494 <menu+0x135c>)
 8002314:	2101      	movs	r1, #1
 8002316:	2002      	movs	r0, #2
 8002318:	f005 fb6c 	bl	80079f4 <lcd_print>
 800231c:	e016      	b.n	800234c <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 800231e:	4b5b      	ldr	r3, [pc, #364]	; (800248c <menu+0x1354>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d112      	bne.n	800234c <menu+0x1214>
			if(dilSecim == 0){
 8002326:	4b4e      	ldr	r3, [pc, #312]	; (8002460 <menu+0x1328>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d105      	bne.n	800233a <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800232e:	4a5a      	ldr	r2, [pc, #360]	; (8002498 <menu+0x1360>)
 8002330:	2101      	movs	r1, #1
 8002332:	2002      	movs	r0, #2
 8002334:	f005 fb5e 	bl	80079f4 <lcd_print>
 8002338:	e008      	b.n	800234c <menu+0x1214>
			} else if(dilSecim == 1){
 800233a:	4b49      	ldr	r3, [pc, #292]	; (8002460 <menu+0x1328>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d104      	bne.n	800234c <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 8002342:	4a56      	ldr	r2, [pc, #344]	; (800249c <menu+0x1364>)
 8002344:	2101      	movs	r1, #1
 8002346:	2002      	movs	r0, #2
 8002348:	f005 fb54 	bl	80079f4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800234c:	2102      	movs	r1, #2
 800234e:	4846      	ldr	r0, [pc, #280]	; (8002468 <menu+0x1330>)
 8002350:	f006 fe76 	bl	8009040 <HAL_GPIO_ReadPin>
 8002354:	4603      	mov	r3, r0
 8002356:	2b01      	cmp	r3, #1
 8002358:	d115      	bne.n	8002386 <menu+0x124e>
 800235a:	4b44      	ldr	r3, [pc, #272]	; (800246c <menu+0x1334>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	f083 0301 	eor.w	r3, r3, #1
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00e      	beq.n	8002386 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002368:	4b48      	ldr	r3, [pc, #288]	; (800248c <menu+0x1354>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	3301      	adds	r3, #1
 800236e:	b2da      	uxtb	r2, r3
 8002370:	4b46      	ldr	r3, [pc, #280]	; (800248c <menu+0x1354>)
 8002372:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002374:	4b45      	ldr	r3, [pc, #276]	; (800248c <menu+0x1354>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d902      	bls.n	8002382 <menu+0x124a>
				kapiAcTipi = 0;
 800237c:	4b43      	ldr	r3, [pc, #268]	; (800248c <menu+0x1354>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002382:	f002 faa5 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002386:	2104      	movs	r1, #4
 8002388:	4837      	ldr	r0, [pc, #220]	; (8002468 <menu+0x1330>)
 800238a:	f006 fe59 	bl	8009040 <HAL_GPIO_ReadPin>
 800238e:	4603      	mov	r3, r0
 8002390:	2b01      	cmp	r3, #1
 8002392:	d115      	bne.n	80023c0 <menu+0x1288>
 8002394:	4b35      	ldr	r3, [pc, #212]	; (800246c <menu+0x1334>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	f083 0301 	eor.w	r3, r3, #1
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d00e      	beq.n	80023c0 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 80023a2:	4b3a      	ldr	r3, [pc, #232]	; (800248c <menu+0x1354>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4b38      	ldr	r3, [pc, #224]	; (800248c <menu+0x1354>)
 80023ac:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80023ae:	4b37      	ldr	r3, [pc, #220]	; (800248c <menu+0x1354>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d002      	beq.n	80023bc <menu+0x1284>
		   		kapiAcTipi = 1;
 80023b6:	4b35      	ldr	r3, [pc, #212]	; (800248c <menu+0x1354>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023bc:	f002 fa88 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023c0:	2108      	movs	r1, #8
 80023c2:	4829      	ldr	r0, [pc, #164]	; (8002468 <menu+0x1330>)
 80023c4:	f006 fe3c 	bl	8009040 <HAL_GPIO_ReadPin>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d10e      	bne.n	80023ec <menu+0x12b4>
 80023ce:	4b27      	ldr	r3, [pc, #156]	; (800246c <menu+0x1334>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	f083 0301 	eor.w	r3, r3, #1
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d007      	beq.n	80023ec <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80023dc:	4b2b      	ldr	r3, [pc, #172]	; (800248c <menu+0x1354>)
 80023de:	781a      	ldrb	r2, [r3, #0]
 80023e0:	4b24      	ldr	r3, [pc, #144]	; (8002474 <menu+0x133c>)
 80023e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80023e6:	4b25      	ldr	r3, [pc, #148]	; (800247c <menu+0x1344>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80023ec:	4b24      	ldr	r3, [pc, #144]	; (8002480 <menu+0x1348>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b09      	cmp	r3, #9
 80023f2:	f040 80b9 	bne.w	8002568 <menu+0x1430>
		if(dilSecim == 0){
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <menu+0x1328>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d105      	bne.n	800240a <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80023fe:	4a28      	ldr	r2, [pc, #160]	; (80024a0 <menu+0x1368>)
 8002400:	2101      	movs	r1, #1
 8002402:	2001      	movs	r0, #1
 8002404:	f005 faf6 	bl	80079f4 <lcd_print>
 8002408:	e008      	b.n	800241c <menu+0x12e4>
		} else if(dilSecim == 1) {
 800240a:	4b15      	ldr	r3, [pc, #84]	; (8002460 <menu+0x1328>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d104      	bne.n	800241c <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002412:	4a24      	ldr	r2, [pc, #144]	; (80024a4 <menu+0x136c>)
 8002414:	2101      	movs	r1, #1
 8002416:	2001      	movs	r0, #1
 8002418:	f005 faec 	bl	80079f4 <lcd_print>
		}

		if(kapi1Tip == 0) {
 800241c:	4b22      	ldr	r3, [pc, #136]	; (80024a8 <menu+0x1370>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d105      	bne.n	8002430 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002424:	4a21      	ldr	r2, [pc, #132]	; (80024ac <menu+0x1374>)
 8002426:	2101      	movs	r1, #1
 8002428:	2002      	movs	r0, #2
 800242a:	f005 fae3 	bl	80079f4 <lcd_print>
 800242e:	e04c      	b.n	80024ca <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8002430:	4b1d      	ldr	r3, [pc, #116]	; (80024a8 <menu+0x1370>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d13f      	bne.n	80024b8 <menu+0x1380>
			if(dilSecim == 0){
 8002438:	4b09      	ldr	r3, [pc, #36]	; (8002460 <menu+0x1328>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002440:	4a1b      	ldr	r2, [pc, #108]	; (80024b0 <menu+0x1378>)
 8002442:	2101      	movs	r1, #1
 8002444:	2002      	movs	r0, #2
 8002446:	f005 fad5 	bl	80079f4 <lcd_print>
 800244a:	e03e      	b.n	80024ca <menu+0x1392>
			} else if(dilSecim == 1) {
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <menu+0x1328>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d13a      	bne.n	80024ca <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8002454:	4a17      	ldr	r2, [pc, #92]	; (80024b4 <menu+0x137c>)
 8002456:	2101      	movs	r1, #1
 8002458:	2002      	movs	r0, #2
 800245a:	f005 facb 	bl	80079f4 <lcd_print>
 800245e:	e034      	b.n	80024ca <menu+0x1392>
 8002460:	20000215 	.word	0x20000215
 8002464:	0800d1a8 	.word	0x0800d1a8
 8002468:	40010800 	.word	0x40010800
 800246c:	20000223 	.word	0x20000223
 8002470:	200001fc 	.word	0x200001fc
 8002474:	20000120 	.word	0x20000120
 8002478:	200001fa 	.word	0x200001fa
 800247c:	20000220 	.word	0x20000220
 8002480:	200001f4 	.word	0x200001f4
 8002484:	0800d1bc 	.word	0x0800d1bc
 8002488:	0800d1d0 	.word	0x0800d1d0
 800248c:	20000200 	.word	0x20000200
 8002490:	0800d1e4 	.word	0x0800d1e4
 8002494:	0800d1f4 	.word	0x0800d1f4
 8002498:	0800d204 	.word	0x0800d204
 800249c:	0800d218 	.word	0x0800d218
 80024a0:	0800d22c 	.word	0x0800d22c
 80024a4:	0800d240 	.word	0x0800d240
 80024a8:	200001fd 	.word	0x200001fd
 80024ac:	0800d254 	.word	0x0800d254
 80024b0:	0800d268 	.word	0x0800d268
 80024b4:	0800d278 	.word	0x0800d278
			}
		} else if(kapi1Tip == 2) {
 80024b8:	4b8a      	ldr	r3, [pc, #552]	; (80026e4 <menu+0x15ac>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d104      	bne.n	80024ca <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 80024c0:	4a89      	ldr	r2, [pc, #548]	; (80026e8 <menu+0x15b0>)
 80024c2:	2101      	movs	r1, #1
 80024c4:	2002      	movs	r0, #2
 80024c6:	f005 fa95 	bl	80079f4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024ca:	2102      	movs	r1, #2
 80024cc:	4887      	ldr	r0, [pc, #540]	; (80026ec <menu+0x15b4>)
 80024ce:	f006 fdb7 	bl	8009040 <HAL_GPIO_ReadPin>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d115      	bne.n	8002504 <menu+0x13cc>
 80024d8:	4b85      	ldr	r3, [pc, #532]	; (80026f0 <menu+0x15b8>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	f083 0301 	eor.w	r3, r3, #1
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00e      	beq.n	8002504 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 80024e6:	4b7f      	ldr	r3, [pc, #508]	; (80026e4 <menu+0x15ac>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	3301      	adds	r3, #1
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4b7d      	ldr	r3, [pc, #500]	; (80026e4 <menu+0x15ac>)
 80024f0:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80024f2:	4b7c      	ldr	r3, [pc, #496]	; (80026e4 <menu+0x15ac>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d902      	bls.n	8002500 <menu+0x13c8>
				kapi1Tip = 0;
 80024fa:	4b7a      	ldr	r3, [pc, #488]	; (80026e4 <menu+0x15ac>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002500:	f002 f9e6 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002504:	2104      	movs	r1, #4
 8002506:	4879      	ldr	r0, [pc, #484]	; (80026ec <menu+0x15b4>)
 8002508:	f006 fd9a 	bl	8009040 <HAL_GPIO_ReadPin>
 800250c:	4603      	mov	r3, r0
 800250e:	2b01      	cmp	r3, #1
 8002510:	d115      	bne.n	800253e <menu+0x1406>
 8002512:	4b77      	ldr	r3, [pc, #476]	; (80026f0 <menu+0x15b8>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	f083 0301 	eor.w	r3, r3, #1
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00e      	beq.n	800253e <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002520:	4b70      	ldr	r3, [pc, #448]	; (80026e4 <menu+0x15ac>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	3b01      	subs	r3, #1
 8002526:	b2da      	uxtb	r2, r3
 8002528:	4b6e      	ldr	r3, [pc, #440]	; (80026e4 <menu+0x15ac>)
 800252a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 800252c:	4b6d      	ldr	r3, [pc, #436]	; (80026e4 <menu+0x15ac>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b03      	cmp	r3, #3
 8002532:	d902      	bls.n	800253a <menu+0x1402>
		   		kapi1Tip = 2;
 8002534:	4b6b      	ldr	r3, [pc, #428]	; (80026e4 <menu+0x15ac>)
 8002536:	2202      	movs	r2, #2
 8002538:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800253a:	f002 f9c9 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800253e:	2108      	movs	r1, #8
 8002540:	486a      	ldr	r0, [pc, #424]	; (80026ec <menu+0x15b4>)
 8002542:	f006 fd7d 	bl	8009040 <HAL_GPIO_ReadPin>
 8002546:	4603      	mov	r3, r0
 8002548:	2b01      	cmp	r3, #1
 800254a:	d10d      	bne.n	8002568 <menu+0x1430>
 800254c:	4b68      	ldr	r3, [pc, #416]	; (80026f0 <menu+0x15b8>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	f083 0301 	eor.w	r3, r3, #1
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d006      	beq.n	8002568 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 800255a:	4b62      	ldr	r3, [pc, #392]	; (80026e4 <menu+0x15ac>)
 800255c:	781a      	ldrb	r2, [r3, #0]
 800255e:	4b65      	ldr	r3, [pc, #404]	; (80026f4 <menu+0x15bc>)
 8002560:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002562:	4b65      	ldr	r3, [pc, #404]	; (80026f8 <menu+0x15c0>)
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002568:	4b64      	ldr	r3, [pc, #400]	; (80026fc <menu+0x15c4>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b0a      	cmp	r3, #10
 800256e:	d17f      	bne.n	8002670 <menu+0x1538>
		if(dilSecim == 0) {
 8002570:	4b63      	ldr	r3, [pc, #396]	; (8002700 <menu+0x15c8>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002578:	4a62      	ldr	r2, [pc, #392]	; (8002704 <menu+0x15cc>)
 800257a:	2101      	movs	r1, #1
 800257c:	2001      	movs	r0, #1
 800257e:	f005 fa39 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002582:	4a61      	ldr	r2, [pc, #388]	; (8002708 <menu+0x15d0>)
 8002584:	2101      	movs	r1, #1
 8002586:	2002      	movs	r0, #2
 8002588:	f005 fa34 	bl	80079f4 <lcd_print>
 800258c:	e00d      	b.n	80025aa <menu+0x1472>
		} else if(dilSecim == 1) {
 800258e:	4b5c      	ldr	r3, [pc, #368]	; (8002700 <menu+0x15c8>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d109      	bne.n	80025aa <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002596:	4a5d      	ldr	r2, [pc, #372]	; (800270c <menu+0x15d4>)
 8002598:	2101      	movs	r1, #1
 800259a:	2001      	movs	r0, #1
 800259c:	f005 fa2a 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80025a0:	4a5b      	ldr	r2, [pc, #364]	; (8002710 <menu+0x15d8>)
 80025a2:	2101      	movs	r1, #1
 80025a4:	2002      	movs	r0, #2
 80025a6:	f005 fa25 	bl	80079f4 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80025aa:	4b5a      	ldr	r3, [pc, #360]	; (8002714 <menu+0x15dc>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	220a      	movs	r2, #10
 80025b0:	4959      	ldr	r1, [pc, #356]	; (8002718 <menu+0x15e0>)
 80025b2:	4618      	mov	r0, r3
 80025b4:	f009 fd70 	bl	800c098 <itoa>
		lcd_print(2,16,snum);
 80025b8:	4a57      	ldr	r2, [pc, #348]	; (8002718 <menu+0x15e0>)
 80025ba:	2110      	movs	r1, #16
 80025bc:	2002      	movs	r0, #2
 80025be:	f005 fa19 	bl	80079f4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80025c2:	2102      	movs	r1, #2
 80025c4:	4849      	ldr	r0, [pc, #292]	; (80026ec <menu+0x15b4>)
 80025c6:	f006 fd3b 	bl	8009040 <HAL_GPIO_ReadPin>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d119      	bne.n	8002604 <menu+0x14cc>
 80025d0:	4b47      	ldr	r3, [pc, #284]	; (80026f0 <menu+0x15b8>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	f083 0301 	eor.w	r3, r3, #1
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d012      	beq.n	8002604 <menu+0x14cc>
 80025de:	4b41      	ldr	r3, [pc, #260]	; (80026e4 <menu+0x15ac>)
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10e      	bne.n	8002604 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 80025e6:	4b4b      	ldr	r3, [pc, #300]	; (8002714 <menu+0x15dc>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	3301      	adds	r3, #1
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4b49      	ldr	r3, [pc, #292]	; (8002714 <menu+0x15dc>)
 80025f0:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80025f2:	4b48      	ldr	r3, [pc, #288]	; (8002714 <menu+0x15dc>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b05      	cmp	r3, #5
 80025f8:	d902      	bls.n	8002600 <menu+0x14c8>
				kapi1AcSure = 0;
 80025fa:	4b46      	ldr	r3, [pc, #280]	; (8002714 <menu+0x15dc>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002600:	f002 f966 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002604:	2104      	movs	r1, #4
 8002606:	4839      	ldr	r0, [pc, #228]	; (80026ec <menu+0x15b4>)
 8002608:	f006 fd1a 	bl	8009040 <HAL_GPIO_ReadPin>
 800260c:	4603      	mov	r3, r0
 800260e:	2b01      	cmp	r3, #1
 8002610:	d119      	bne.n	8002646 <menu+0x150e>
 8002612:	4b37      	ldr	r3, [pc, #220]	; (80026f0 <menu+0x15b8>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	f083 0301 	eor.w	r3, r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d012      	beq.n	8002646 <menu+0x150e>
 8002620:	4b30      	ldr	r3, [pc, #192]	; (80026e4 <menu+0x15ac>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10e      	bne.n	8002646 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002628:	4b3a      	ldr	r3, [pc, #232]	; (8002714 <menu+0x15dc>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	3b01      	subs	r3, #1
 800262e:	b2da      	uxtb	r2, r3
 8002630:	4b38      	ldr	r3, [pc, #224]	; (8002714 <menu+0x15dc>)
 8002632:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002634:	4b37      	ldr	r3, [pc, #220]	; (8002714 <menu+0x15dc>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b06      	cmp	r3, #6
 800263a:	d902      	bls.n	8002642 <menu+0x150a>
		   		kapi1AcSure = 5;
 800263c:	4b35      	ldr	r3, [pc, #212]	; (8002714 <menu+0x15dc>)
 800263e:	2205      	movs	r2, #5
 8002640:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002642:	f002 f945 	bl	80048d0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002646:	2108      	movs	r1, #8
 8002648:	4828      	ldr	r0, [pc, #160]	; (80026ec <menu+0x15b4>)
 800264a:	f006 fcf9 	bl	8009040 <HAL_GPIO_ReadPin>
 800264e:	4603      	mov	r3, r0
 8002650:	2b01      	cmp	r3, #1
 8002652:	d10d      	bne.n	8002670 <menu+0x1538>
 8002654:	4b26      	ldr	r3, [pc, #152]	; (80026f0 <menu+0x15b8>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	f083 0301 	eor.w	r3, r3, #1
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d006      	beq.n	8002670 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8002662:	4b2c      	ldr	r3, [pc, #176]	; (8002714 <menu+0x15dc>)
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	4b23      	ldr	r3, [pc, #140]	; (80026f4 <menu+0x15bc>)
 8002668:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 800266a:	4b23      	ldr	r3, [pc, #140]	; (80026f8 <menu+0x15c0>)
 800266c:	2201      	movs	r2, #1
 800266e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002670:	4b22      	ldr	r3, [pc, #136]	; (80026fc <menu+0x15c4>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b0b      	cmp	r3, #11
 8002676:	f040 80b5 	bne.w	80027e4 <menu+0x16ac>
		if(dilSecim == 0) {
 800267a:	4b21      	ldr	r3, [pc, #132]	; (8002700 <menu+0x15c8>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d105      	bne.n	800268e <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002682:	4a26      	ldr	r2, [pc, #152]	; (800271c <menu+0x15e4>)
 8002684:	2101      	movs	r1, #1
 8002686:	2001      	movs	r0, #1
 8002688:	f005 f9b4 	bl	80079f4 <lcd_print>
 800268c:	e008      	b.n	80026a0 <menu+0x1568>
		} else if(dilSecim == 1) {
 800268e:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <menu+0x15c8>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d104      	bne.n	80026a0 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002696:	4a22      	ldr	r2, [pc, #136]	; (8002720 <menu+0x15e8>)
 8002698:	2101      	movs	r1, #1
 800269a:	2001      	movs	r0, #1
 800269c:	f005 f9aa 	bl	80079f4 <lcd_print>
		}

		if(kapi2Tip == 0) {
 80026a0:	4b20      	ldr	r3, [pc, #128]	; (8002724 <menu+0x15ec>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d105      	bne.n	80026b4 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 80026a8:	4a1f      	ldr	r2, [pc, #124]	; (8002728 <menu+0x15f0>)
 80026aa:	2101      	movs	r1, #1
 80026ac:	2002      	movs	r0, #2
 80026ae:	f005 f9a1 	bl	80079f4 <lcd_print>
 80026b2:	e048      	b.n	8002746 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 80026b4:	4b1b      	ldr	r3, [pc, #108]	; (8002724 <menu+0x15ec>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d13b      	bne.n	8002734 <menu+0x15fc>
			if(dilSecim == 0) {
 80026bc:	4b10      	ldr	r3, [pc, #64]	; (8002700 <menu+0x15c8>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d105      	bne.n	80026d0 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 80026c4:	4a19      	ldr	r2, [pc, #100]	; (800272c <menu+0x15f4>)
 80026c6:	2101      	movs	r1, #1
 80026c8:	2002      	movs	r0, #2
 80026ca:	f005 f993 	bl	80079f4 <lcd_print>
 80026ce:	e03a      	b.n	8002746 <menu+0x160e>
			} else if(dilSecim == 1) {
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <menu+0x15c8>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d136      	bne.n	8002746 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 80026d8:	4a15      	ldr	r2, [pc, #84]	; (8002730 <menu+0x15f8>)
 80026da:	2101      	movs	r1, #1
 80026dc:	2002      	movs	r0, #2
 80026de:	f005 f989 	bl	80079f4 <lcd_print>
 80026e2:	e030      	b.n	8002746 <menu+0x160e>
 80026e4:	200001fd 	.word	0x200001fd
 80026e8:	0800d28c 	.word	0x0800d28c
 80026ec:	40010800 	.word	0x40010800
 80026f0:	20000223 	.word	0x20000223
 80026f4:	20000120 	.word	0x20000120
 80026f8:	20000220 	.word	0x20000220
 80026fc:	200001f4 	.word	0x200001f4
 8002700:	20000215 	.word	0x20000215
 8002704:	0800d29c 	.word	0x0800d29c
 8002708:	0800d2b0 	.word	0x0800d2b0
 800270c:	0800d2c0 	.word	0x0800d2c0
 8002710:	0800d2d4 	.word	0x0800d2d4
 8002714:	2000020d 	.word	0x2000020d
 8002718:	20000190 	.word	0x20000190
 800271c:	0800d2e4 	.word	0x0800d2e4
 8002720:	0800d2f8 	.word	0x0800d2f8
 8002724:	200001fe 	.word	0x200001fe
 8002728:	0800d254 	.word	0x0800d254
 800272c:	0800d268 	.word	0x0800d268
 8002730:	0800d278 	.word	0x0800d278
			}
		} else if(kapi2Tip == 2) {
 8002734:	4b8a      	ldr	r3, [pc, #552]	; (8002960 <menu+0x1828>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b02      	cmp	r3, #2
 800273a:	d104      	bne.n	8002746 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 800273c:	4a89      	ldr	r2, [pc, #548]	; (8002964 <menu+0x182c>)
 800273e:	2101      	movs	r1, #1
 8002740:	2002      	movs	r0, #2
 8002742:	f005 f957 	bl	80079f4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002746:	2102      	movs	r1, #2
 8002748:	4887      	ldr	r0, [pc, #540]	; (8002968 <menu+0x1830>)
 800274a:	f006 fc79 	bl	8009040 <HAL_GPIO_ReadPin>
 800274e:	4603      	mov	r3, r0
 8002750:	2b01      	cmp	r3, #1
 8002752:	d115      	bne.n	8002780 <menu+0x1648>
 8002754:	4b85      	ldr	r3, [pc, #532]	; (800296c <menu+0x1834>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	f083 0301 	eor.w	r3, r3, #1
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00e      	beq.n	8002780 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002762:	4b7f      	ldr	r3, [pc, #508]	; (8002960 <menu+0x1828>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	3301      	adds	r3, #1
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4b7d      	ldr	r3, [pc, #500]	; (8002960 <menu+0x1828>)
 800276c:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 800276e:	4b7c      	ldr	r3, [pc, #496]	; (8002960 <menu+0x1828>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b02      	cmp	r3, #2
 8002774:	d902      	bls.n	800277c <menu+0x1644>
				kapi2Tip = 0;
 8002776:	4b7a      	ldr	r3, [pc, #488]	; (8002960 <menu+0x1828>)
 8002778:	2200      	movs	r2, #0
 800277a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800277c:	f002 f8a8 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002780:	2104      	movs	r1, #4
 8002782:	4879      	ldr	r0, [pc, #484]	; (8002968 <menu+0x1830>)
 8002784:	f006 fc5c 	bl	8009040 <HAL_GPIO_ReadPin>
 8002788:	4603      	mov	r3, r0
 800278a:	2b01      	cmp	r3, #1
 800278c:	d115      	bne.n	80027ba <menu+0x1682>
 800278e:	4b77      	ldr	r3, [pc, #476]	; (800296c <menu+0x1834>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	f083 0301 	eor.w	r3, r3, #1
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00e      	beq.n	80027ba <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 800279c:	4b70      	ldr	r3, [pc, #448]	; (8002960 <menu+0x1828>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	4b6e      	ldr	r3, [pc, #440]	; (8002960 <menu+0x1828>)
 80027a6:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80027a8:	4b6d      	ldr	r3, [pc, #436]	; (8002960 <menu+0x1828>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d902      	bls.n	80027b6 <menu+0x167e>
		   		kapi2Tip = 2;
 80027b0:	4b6b      	ldr	r3, [pc, #428]	; (8002960 <menu+0x1828>)
 80027b2:	2202      	movs	r2, #2
 80027b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027b6:	f002 f88b 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027ba:	2108      	movs	r1, #8
 80027bc:	486a      	ldr	r0, [pc, #424]	; (8002968 <menu+0x1830>)
 80027be:	f006 fc3f 	bl	8009040 <HAL_GPIO_ReadPin>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d10d      	bne.n	80027e4 <menu+0x16ac>
 80027c8:	4b68      	ldr	r3, [pc, #416]	; (800296c <menu+0x1834>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	f083 0301 	eor.w	r3, r3, #1
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d006      	beq.n	80027e4 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 80027d6:	4b62      	ldr	r3, [pc, #392]	; (8002960 <menu+0x1828>)
 80027d8:	781a      	ldrb	r2, [r3, #0]
 80027da:	4b65      	ldr	r3, [pc, #404]	; (8002970 <menu+0x1838>)
 80027dc:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80027de:	4b65      	ldr	r3, [pc, #404]	; (8002974 <menu+0x183c>)
 80027e0:	2201      	movs	r2, #1
 80027e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80027e4:	4b64      	ldr	r3, [pc, #400]	; (8002978 <menu+0x1840>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b0c      	cmp	r3, #12
 80027ea:	d17f      	bne.n	80028ec <menu+0x17b4>
		if(dilSecim == 0) {
 80027ec:	4b63      	ldr	r3, [pc, #396]	; (800297c <menu+0x1844>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10a      	bne.n	800280a <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 80027f4:	4a62      	ldr	r2, [pc, #392]	; (8002980 <menu+0x1848>)
 80027f6:	2101      	movs	r1, #1
 80027f8:	2001      	movs	r0, #1
 80027fa:	f005 f8fb 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80027fe:	4a61      	ldr	r2, [pc, #388]	; (8002984 <menu+0x184c>)
 8002800:	2101      	movs	r1, #1
 8002802:	2002      	movs	r0, #2
 8002804:	f005 f8f6 	bl	80079f4 <lcd_print>
 8002808:	e00d      	b.n	8002826 <menu+0x16ee>
		} else if(dilSecim == 1) {
 800280a:	4b5c      	ldr	r3, [pc, #368]	; (800297c <menu+0x1844>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d109      	bne.n	8002826 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002812:	4a5d      	ldr	r2, [pc, #372]	; (8002988 <menu+0x1850>)
 8002814:	2101      	movs	r1, #1
 8002816:	2001      	movs	r0, #1
 8002818:	f005 f8ec 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800281c:	4a5b      	ldr	r2, [pc, #364]	; (800298c <menu+0x1854>)
 800281e:	2101      	movs	r1, #1
 8002820:	2002      	movs	r0, #2
 8002822:	f005 f8e7 	bl	80079f4 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002826:	4b5a      	ldr	r3, [pc, #360]	; (8002990 <menu+0x1858>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	220a      	movs	r2, #10
 800282c:	4959      	ldr	r1, [pc, #356]	; (8002994 <menu+0x185c>)
 800282e:	4618      	mov	r0, r3
 8002830:	f009 fc32 	bl	800c098 <itoa>
		lcd_print(2,16,snum);
 8002834:	4a57      	ldr	r2, [pc, #348]	; (8002994 <menu+0x185c>)
 8002836:	2110      	movs	r1, #16
 8002838:	2002      	movs	r0, #2
 800283a:	f005 f8db 	bl	80079f4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800283e:	2102      	movs	r1, #2
 8002840:	4849      	ldr	r0, [pc, #292]	; (8002968 <menu+0x1830>)
 8002842:	f006 fbfd 	bl	8009040 <HAL_GPIO_ReadPin>
 8002846:	4603      	mov	r3, r0
 8002848:	2b01      	cmp	r3, #1
 800284a:	d119      	bne.n	8002880 <menu+0x1748>
 800284c:	4b47      	ldr	r3, [pc, #284]	; (800296c <menu+0x1834>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	f083 0301 	eor.w	r3, r3, #1
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d012      	beq.n	8002880 <menu+0x1748>
 800285a:	4b41      	ldr	r3, [pc, #260]	; (8002960 <menu+0x1828>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10e      	bne.n	8002880 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002862:	4b4b      	ldr	r3, [pc, #300]	; (8002990 <menu+0x1858>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	3301      	adds	r3, #1
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4b49      	ldr	r3, [pc, #292]	; (8002990 <menu+0x1858>)
 800286c:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 800286e:	4b48      	ldr	r3, [pc, #288]	; (8002990 <menu+0x1858>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2b05      	cmp	r3, #5
 8002874:	d902      	bls.n	800287c <menu+0x1744>
				kapi2AcSure = 0;
 8002876:	4b46      	ldr	r3, [pc, #280]	; (8002990 <menu+0x1858>)
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800287c:	f002 f828 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002880:	2104      	movs	r1, #4
 8002882:	4839      	ldr	r0, [pc, #228]	; (8002968 <menu+0x1830>)
 8002884:	f006 fbdc 	bl	8009040 <HAL_GPIO_ReadPin>
 8002888:	4603      	mov	r3, r0
 800288a:	2b01      	cmp	r3, #1
 800288c:	d119      	bne.n	80028c2 <menu+0x178a>
 800288e:	4b37      	ldr	r3, [pc, #220]	; (800296c <menu+0x1834>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	f083 0301 	eor.w	r3, r3, #1
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d012      	beq.n	80028c2 <menu+0x178a>
 800289c:	4b30      	ldr	r3, [pc, #192]	; (8002960 <menu+0x1828>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d10e      	bne.n	80028c2 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 80028a4:	4b3a      	ldr	r3, [pc, #232]	; (8002990 <menu+0x1858>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	4b38      	ldr	r3, [pc, #224]	; (8002990 <menu+0x1858>)
 80028ae:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 80028b0:	4b37      	ldr	r3, [pc, #220]	; (8002990 <menu+0x1858>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b06      	cmp	r3, #6
 80028b6:	d902      	bls.n	80028be <menu+0x1786>
		   		kapi2AcSure = 5;
 80028b8:	4b35      	ldr	r3, [pc, #212]	; (8002990 <menu+0x1858>)
 80028ba:	2205      	movs	r2, #5
 80028bc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028be:	f002 f807 	bl	80048d0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028c2:	2108      	movs	r1, #8
 80028c4:	4828      	ldr	r0, [pc, #160]	; (8002968 <menu+0x1830>)
 80028c6:	f006 fbbb 	bl	8009040 <HAL_GPIO_ReadPin>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d10d      	bne.n	80028ec <menu+0x17b4>
 80028d0:	4b26      	ldr	r3, [pc, #152]	; (800296c <menu+0x1834>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	f083 0301 	eor.w	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d006      	beq.n	80028ec <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 80028de:	4b2c      	ldr	r3, [pc, #176]	; (8002990 <menu+0x1858>)
 80028e0:	781a      	ldrb	r2, [r3, #0]
 80028e2:	4b23      	ldr	r3, [pc, #140]	; (8002970 <menu+0x1838>)
 80028e4:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80028e6:	4b23      	ldr	r3, [pc, #140]	; (8002974 <menu+0x183c>)
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80028ec:	4b22      	ldr	r3, [pc, #136]	; (8002978 <menu+0x1840>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b0d      	cmp	r3, #13
 80028f2:	f040 80b5 	bne.w	8002a60 <menu+0x1928>
		if(dilSecim == 0) {
 80028f6:	4b21      	ldr	r3, [pc, #132]	; (800297c <menu+0x1844>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d105      	bne.n	800290a <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 80028fe:	4a26      	ldr	r2, [pc, #152]	; (8002998 <menu+0x1860>)
 8002900:	2101      	movs	r1, #1
 8002902:	2001      	movs	r0, #1
 8002904:	f005 f876 	bl	80079f4 <lcd_print>
 8002908:	e008      	b.n	800291c <menu+0x17e4>
		} else if(dilSecim == 1){
 800290a:	4b1c      	ldr	r3, [pc, #112]	; (800297c <menu+0x1844>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d104      	bne.n	800291c <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002912:	4a22      	ldr	r2, [pc, #136]	; (800299c <menu+0x1864>)
 8002914:	2101      	movs	r1, #1
 8002916:	2001      	movs	r0, #1
 8002918:	f005 f86c 	bl	80079f4 <lcd_print>
		}

		if(kapitablaTip == 0) {
 800291c:	4b20      	ldr	r3, [pc, #128]	; (80029a0 <menu+0x1868>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d105      	bne.n	8002930 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002924:	4a1f      	ldr	r2, [pc, #124]	; (80029a4 <menu+0x186c>)
 8002926:	2101      	movs	r1, #1
 8002928:	2002      	movs	r0, #2
 800292a:	f005 f863 	bl	80079f4 <lcd_print>
 800292e:	e048      	b.n	80029c2 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002930:	4b1b      	ldr	r3, [pc, #108]	; (80029a0 <menu+0x1868>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d13b      	bne.n	80029b0 <menu+0x1878>
			if(dilSecim == 0) {
 8002938:	4b10      	ldr	r3, [pc, #64]	; (800297c <menu+0x1844>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d105      	bne.n	800294c <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002940:	4a19      	ldr	r2, [pc, #100]	; (80029a8 <menu+0x1870>)
 8002942:	2101      	movs	r1, #1
 8002944:	2002      	movs	r0, #2
 8002946:	f005 f855 	bl	80079f4 <lcd_print>
 800294a:	e03a      	b.n	80029c2 <menu+0x188a>
			} else if(dilSecim == 1) {
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <menu+0x1844>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d136      	bne.n	80029c2 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002954:	4a15      	ldr	r2, [pc, #84]	; (80029ac <menu+0x1874>)
 8002956:	2101      	movs	r1, #1
 8002958:	2002      	movs	r0, #2
 800295a:	f005 f84b 	bl	80079f4 <lcd_print>
 800295e:	e030      	b.n	80029c2 <menu+0x188a>
 8002960:	200001fe 	.word	0x200001fe
 8002964:	0800d28c 	.word	0x0800d28c
 8002968:	40010800 	.word	0x40010800
 800296c:	20000223 	.word	0x20000223
 8002970:	20000120 	.word	0x20000120
 8002974:	20000220 	.word	0x20000220
 8002978:	200001f4 	.word	0x200001f4
 800297c:	20000215 	.word	0x20000215
 8002980:	0800d30c 	.word	0x0800d30c
 8002984:	0800d2b0 	.word	0x0800d2b0
 8002988:	0800d320 	.word	0x0800d320
 800298c:	0800d2d4 	.word	0x0800d2d4
 8002990:	2000020e 	.word	0x2000020e
 8002994:	20000190 	.word	0x20000190
 8002998:	0800d334 	.word	0x0800d334
 800299c:	0800d348 	.word	0x0800d348
 80029a0:	200001ff 	.word	0x200001ff
 80029a4:	0800d254 	.word	0x0800d254
 80029a8:	0800d268 	.word	0x0800d268
 80029ac:	0800d278 	.word	0x0800d278
			}
		} else if(kapitablaTip == 2) {
 80029b0:	4b5b      	ldr	r3, [pc, #364]	; (8002b20 <menu+0x19e8>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d104      	bne.n	80029c2 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 80029b8:	4a5a      	ldr	r2, [pc, #360]	; (8002b24 <menu+0x19ec>)
 80029ba:	2101      	movs	r1, #1
 80029bc:	2002      	movs	r0, #2
 80029be:	f005 f819 	bl	80079f4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029c2:	2102      	movs	r1, #2
 80029c4:	4858      	ldr	r0, [pc, #352]	; (8002b28 <menu+0x19f0>)
 80029c6:	f006 fb3b 	bl	8009040 <HAL_GPIO_ReadPin>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d115      	bne.n	80029fc <menu+0x18c4>
 80029d0:	4b56      	ldr	r3, [pc, #344]	; (8002b2c <menu+0x19f4>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	f083 0301 	eor.w	r3, r3, #1
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00e      	beq.n	80029fc <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 80029de:	4b50      	ldr	r3, [pc, #320]	; (8002b20 <menu+0x19e8>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	3301      	adds	r3, #1
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	4b4e      	ldr	r3, [pc, #312]	; (8002b20 <menu+0x19e8>)
 80029e8:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 80029ea:	4b4d      	ldr	r3, [pc, #308]	; (8002b20 <menu+0x19e8>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d902      	bls.n	80029f8 <menu+0x18c0>
				kapitablaTip = 0;
 80029f2:	4b4b      	ldr	r3, [pc, #300]	; (8002b20 <menu+0x19e8>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029f8:	f001 ff6a 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029fc:	2104      	movs	r1, #4
 80029fe:	484a      	ldr	r0, [pc, #296]	; (8002b28 <menu+0x19f0>)
 8002a00:	f006 fb1e 	bl	8009040 <HAL_GPIO_ReadPin>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d115      	bne.n	8002a36 <menu+0x18fe>
 8002a0a:	4b48      	ldr	r3, [pc, #288]	; (8002b2c <menu+0x19f4>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	f083 0301 	eor.w	r3, r3, #1
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00e      	beq.n	8002a36 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002a18:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <menu+0x19e8>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	4b3f      	ldr	r3, [pc, #252]	; (8002b20 <menu+0x19e8>)
 8002a22:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002a24:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <menu+0x19e8>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d902      	bls.n	8002a32 <menu+0x18fa>
		   		kapitablaTip = 2;
 8002a2c:	4b3c      	ldr	r3, [pc, #240]	; (8002b20 <menu+0x19e8>)
 8002a2e:	2202      	movs	r2, #2
 8002a30:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a32:	f001 ff4d 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a36:	2108      	movs	r1, #8
 8002a38:	483b      	ldr	r0, [pc, #236]	; (8002b28 <menu+0x19f0>)
 8002a3a:	f006 fb01 	bl	8009040 <HAL_GPIO_ReadPin>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d10d      	bne.n	8002a60 <menu+0x1928>
 8002a44:	4b39      	ldr	r3, [pc, #228]	; (8002b2c <menu+0x19f4>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	f083 0301 	eor.w	r3, r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d006      	beq.n	8002a60 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002a52:	4b33      	ldr	r3, [pc, #204]	; (8002b20 <menu+0x19e8>)
 8002a54:	781a      	ldrb	r2, [r3, #0]
 8002a56:	4b36      	ldr	r3, [pc, #216]	; (8002b30 <menu+0x19f8>)
 8002a58:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002a5a:	4b36      	ldr	r3, [pc, #216]	; (8002b34 <menu+0x19fc>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002a60:	4b35      	ldr	r3, [pc, #212]	; (8002b38 <menu+0x1a00>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b0e      	cmp	r3, #14
 8002a66:	f040 80f2 	bne.w	8002c4e <menu+0x1b16>
		if(dilSecim == 0) {
 8002a6a:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <menu+0x1a04>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d105      	bne.n	8002a7e <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002a72:	4a33      	ldr	r2, [pc, #204]	; (8002b40 <menu+0x1a08>)
 8002a74:	2101      	movs	r1, #1
 8002a76:	2001      	movs	r0, #1
 8002a78:	f004 ffbc 	bl	80079f4 <lcd_print>
 8002a7c:	e008      	b.n	8002a90 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002a7e:	4b2f      	ldr	r3, [pc, #188]	; (8002b3c <menu+0x1a04>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d104      	bne.n	8002a90 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002a86:	4a2f      	ldr	r2, [pc, #188]	; (8002b44 <menu+0x1a0c>)
 8002a88:	2101      	movs	r1, #1
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	f004 ffb2 	bl	80079f4 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002a90:	4b2d      	ldr	r3, [pc, #180]	; (8002b48 <menu+0x1a10>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d113      	bne.n	8002ac0 <menu+0x1988>
			if(dilSecim == 0){
 8002a98:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <menu+0x1a04>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d105      	bne.n	8002aac <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002aa0:	4a2a      	ldr	r2, [pc, #168]	; (8002b4c <menu+0x1a14>)
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	2002      	movs	r0, #2
 8002aa6:	f004 ffa5 	bl	80079f4 <lcd_print>
 8002aaa:	e071      	b.n	8002b90 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002aac:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <menu+0x1a04>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d16d      	bne.n	8002b90 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002ab4:	4a26      	ldr	r2, [pc, #152]	; (8002b50 <menu+0x1a18>)
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	2002      	movs	r0, #2
 8002aba:	f004 ff9b 	bl	80079f4 <lcd_print>
 8002abe:	e067      	b.n	8002b90 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002ac0:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <menu+0x1a10>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d112      	bne.n	8002aee <menu+0x19b6>
			if(dilSecim == 0){
 8002ac8:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <menu+0x1a04>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d104      	bne.n	8002ada <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002ad0:	4a20      	ldr	r2, [pc, #128]	; (8002b54 <menu+0x1a1c>)
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	2002      	movs	r0, #2
 8002ad6:	f004 ff8d 	bl	80079f4 <lcd_print>
			}
			if(dilSecim == 1){
 8002ada:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <menu+0x1a04>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d156      	bne.n	8002b90 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002ae2:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <menu+0x1a20>)
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	2002      	movs	r0, #2
 8002ae8:	f004 ff84 	bl	80079f4 <lcd_print>
 8002aec:	e050      	b.n	8002b90 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002aee:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <menu+0x1a10>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d136      	bne.n	8002b64 <menu+0x1a2c>
			if(dilSecim == 0){
 8002af6:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <menu+0x1a04>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d105      	bne.n	8002b0a <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002afe:	4a17      	ldr	r2, [pc, #92]	; (8002b5c <menu+0x1a24>)
 8002b00:	2101      	movs	r1, #1
 8002b02:	2002      	movs	r0, #2
 8002b04:	f004 ff76 	bl	80079f4 <lcd_print>
 8002b08:	e042      	b.n	8002b90 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <menu+0x1a04>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d13e      	bne.n	8002b90 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002b12:	4a13      	ldr	r2, [pc, #76]	; (8002b60 <menu+0x1a28>)
 8002b14:	2101      	movs	r1, #1
 8002b16:	2002      	movs	r0, #2
 8002b18:	f004 ff6c 	bl	80079f4 <lcd_print>
 8002b1c:	e038      	b.n	8002b90 <menu+0x1a58>
 8002b1e:	bf00      	nop
 8002b20:	200001ff 	.word	0x200001ff
 8002b24:	0800d28c 	.word	0x0800d28c
 8002b28:	40010800 	.word	0x40010800
 8002b2c:	20000223 	.word	0x20000223
 8002b30:	20000120 	.word	0x20000120
 8002b34:	20000220 	.word	0x20000220
 8002b38:	200001f4 	.word	0x200001f4
 8002b3c:	20000215 	.word	0x20000215
 8002b40:	0800d35c 	.word	0x0800d35c
 8002b44:	0800d370 	.word	0x0800d370
 8002b48:	20000201 	.word	0x20000201
 8002b4c:	0800d384 	.word	0x0800d384
 8002b50:	0800d394 	.word	0x0800d394
 8002b54:	0800d3a4 	.word	0x0800d3a4
 8002b58:	0800d3b4 	.word	0x0800d3b4
 8002b5c:	0800d3c4 	.word	0x0800d3c4
 8002b60:	0800d3d8 	.word	0x0800d3d8
			}
		} else if(kapiTablaAcKonum == 3) {
 8002b64:	4b9b      	ldr	r3, [pc, #620]	; (8002dd4 <menu+0x1c9c>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d111      	bne.n	8002b90 <menu+0x1a58>
			if(dilSecim == 0) {
 8002b6c:	4b9a      	ldr	r3, [pc, #616]	; (8002dd8 <menu+0x1ca0>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d104      	bne.n	8002b7e <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002b74:	4a99      	ldr	r2, [pc, #612]	; (8002ddc <menu+0x1ca4>)
 8002b76:	2101      	movs	r1, #1
 8002b78:	2002      	movs	r0, #2
 8002b7a:	f004 ff3b 	bl	80079f4 <lcd_print>
			}
			if(dilSecim == 1) {
 8002b7e:	4b96      	ldr	r3, [pc, #600]	; (8002dd8 <menu+0x1ca0>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d104      	bne.n	8002b90 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002b86:	4a96      	ldr	r2, [pc, #600]	; (8002de0 <menu+0x1ca8>)
 8002b88:	2101      	movs	r1, #1
 8002b8a:	2002      	movs	r0, #2
 8002b8c:	f004 ff32 	bl	80079f4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b90:	2102      	movs	r1, #2
 8002b92:	4894      	ldr	r0, [pc, #592]	; (8002de4 <menu+0x1cac>)
 8002b94:	f006 fa54 	bl	8009040 <HAL_GPIO_ReadPin>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d115      	bne.n	8002bca <menu+0x1a92>
 8002b9e:	4b92      	ldr	r3, [pc, #584]	; (8002de8 <menu+0x1cb0>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	f083 0301 	eor.w	r3, r3, #1
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00e      	beq.n	8002bca <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002bac:	4b89      	ldr	r3, [pc, #548]	; (8002dd4 <menu+0x1c9c>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	4b87      	ldr	r3, [pc, #540]	; (8002dd4 <menu+0x1c9c>)
 8002bb6:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002bb8:	4b86      	ldr	r3, [pc, #536]	; (8002dd4 <menu+0x1c9c>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d902      	bls.n	8002bc6 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002bc0:	4b84      	ldr	r3, [pc, #528]	; (8002dd4 <menu+0x1c9c>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bc6:	f001 fe83 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bca:	2104      	movs	r1, #4
 8002bcc:	4885      	ldr	r0, [pc, #532]	; (8002de4 <menu+0x1cac>)
 8002bce:	f006 fa37 	bl	8009040 <HAL_GPIO_ReadPin>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d115      	bne.n	8002c04 <menu+0x1acc>
 8002bd8:	4b83      	ldr	r3, [pc, #524]	; (8002de8 <menu+0x1cb0>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	f083 0301 	eor.w	r3, r3, #1
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00e      	beq.n	8002c04 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002be6:	4b7b      	ldr	r3, [pc, #492]	; (8002dd4 <menu+0x1c9c>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b2da      	uxtb	r2, r3
 8002bee:	4b79      	ldr	r3, [pc, #484]	; (8002dd4 <menu+0x1c9c>)
 8002bf0:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002bf2:	4b78      	ldr	r3, [pc, #480]	; (8002dd4 <menu+0x1c9c>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d902      	bls.n	8002c00 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002bfa:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <menu+0x1c9c>)
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c00:	f001 fe66 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c04:	2108      	movs	r1, #8
 8002c06:	4877      	ldr	r0, [pc, #476]	; (8002de4 <menu+0x1cac>)
 8002c08:	f006 fa1a 	bl	8009040 <HAL_GPIO_ReadPin>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d11d      	bne.n	8002c4e <menu+0x1b16>
 8002c12:	4b75      	ldr	r3, [pc, #468]	; (8002de8 <menu+0x1cb0>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	f083 0301 	eor.w	r3, r3, #1
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d016      	beq.n	8002c4e <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002c20:	4b6c      	ldr	r3, [pc, #432]	; (8002dd4 <menu+0x1c9c>)
 8002c22:	781a      	ldrb	r2, [r3, #0]
 8002c24:	4b71      	ldr	r3, [pc, #452]	; (8002dec <menu+0x1cb4>)
 8002c26:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002c2a:	4b6a      	ldr	r3, [pc, #424]	; (8002dd4 <menu+0x1c9c>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <menu+0x1b02>
 8002c32:	4b68      	ldr	r3, [pc, #416]	; (8002dd4 <menu+0x1c9c>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d106      	bne.n	8002c48 <menu+0x1b10>
				altLimit = 1;
 8002c3a:	4b6d      	ldr	r3, [pc, #436]	; (8002df0 <menu+0x1cb8>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002c40:	4b6b      	ldr	r3, [pc, #428]	; (8002df0 <menu+0x1cb8>)
 8002c42:	781a      	ldrb	r2, [r3, #0]
 8002c44:	4b69      	ldr	r3, [pc, #420]	; (8002dec <menu+0x1cb4>)
 8002c46:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002c48:	4b6a      	ldr	r3, [pc, #424]	; (8002df4 <menu+0x1cbc>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002c4e:	4b6a      	ldr	r3, [pc, #424]	; (8002df8 <menu+0x1cc0>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b0f      	cmp	r3, #15
 8002c54:	d17f      	bne.n	8002d56 <menu+0x1c1e>
		if(dilSecim == 0) {
 8002c56:	4b60      	ldr	r3, [pc, #384]	; (8002dd8 <menu+0x1ca0>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10a      	bne.n	8002c74 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002c5e:	4a67      	ldr	r2, [pc, #412]	; (8002dfc <menu+0x1cc4>)
 8002c60:	2101      	movs	r1, #1
 8002c62:	2001      	movs	r0, #1
 8002c64:	f004 fec6 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002c68:	4a65      	ldr	r2, [pc, #404]	; (8002e00 <menu+0x1cc8>)
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	2002      	movs	r0, #2
 8002c6e:	f004 fec1 	bl	80079f4 <lcd_print>
 8002c72:	e00d      	b.n	8002c90 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002c74:	4b58      	ldr	r3, [pc, #352]	; (8002dd8 <menu+0x1ca0>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d109      	bne.n	8002c90 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002c7c:	4a61      	ldr	r2, [pc, #388]	; (8002e04 <menu+0x1ccc>)
 8002c7e:	2101      	movs	r1, #1
 8002c80:	2001      	movs	r0, #1
 8002c82:	f004 feb7 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002c86:	4a60      	ldr	r2, [pc, #384]	; (8002e08 <menu+0x1cd0>)
 8002c88:	2101      	movs	r1, #1
 8002c8a:	2002      	movs	r0, #2
 8002c8c:	f004 feb2 	bl	80079f4 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002c90:	4b5e      	ldr	r3, [pc, #376]	; (8002e0c <menu+0x1cd4>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	220a      	movs	r2, #10
 8002c96:	495e      	ldr	r1, [pc, #376]	; (8002e10 <menu+0x1cd8>)
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f009 f9fd 	bl	800c098 <itoa>
		lcd_print(2,16,snum);
 8002c9e:	4a5c      	ldr	r2, [pc, #368]	; (8002e10 <menu+0x1cd8>)
 8002ca0:	2110      	movs	r1, #16
 8002ca2:	2002      	movs	r0, #2
 8002ca4:	f004 fea6 	bl	80079f4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002ca8:	2102      	movs	r1, #2
 8002caa:	484e      	ldr	r0, [pc, #312]	; (8002de4 <menu+0x1cac>)
 8002cac:	f006 f9c8 	bl	8009040 <HAL_GPIO_ReadPin>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d119      	bne.n	8002cea <menu+0x1bb2>
 8002cb6:	4b4c      	ldr	r3, [pc, #304]	; (8002de8 <menu+0x1cb0>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	f083 0301 	eor.w	r3, r3, #1
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d012      	beq.n	8002cea <menu+0x1bb2>
 8002cc4:	4b53      	ldr	r3, [pc, #332]	; (8002e14 <menu+0x1cdc>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10e      	bne.n	8002cea <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002ccc:	4b4f      	ldr	r3, [pc, #316]	; (8002e0c <menu+0x1cd4>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	4b4d      	ldr	r3, [pc, #308]	; (8002e0c <menu+0x1cd4>)
 8002cd6:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002cd8:	4b4c      	ldr	r3, [pc, #304]	; (8002e0c <menu+0x1cd4>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b05      	cmp	r3, #5
 8002cde:	d902      	bls.n	8002ce6 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002ce0:	4b4a      	ldr	r3, [pc, #296]	; (8002e0c <menu+0x1cd4>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ce6:	f001 fdf3 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002cea:	2104      	movs	r1, #4
 8002cec:	483d      	ldr	r0, [pc, #244]	; (8002de4 <menu+0x1cac>)
 8002cee:	f006 f9a7 	bl	8009040 <HAL_GPIO_ReadPin>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d119      	bne.n	8002d2c <menu+0x1bf4>
 8002cf8:	4b3b      	ldr	r3, [pc, #236]	; (8002de8 <menu+0x1cb0>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	f083 0301 	eor.w	r3, r3, #1
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d012      	beq.n	8002d2c <menu+0x1bf4>
 8002d06:	4b43      	ldr	r3, [pc, #268]	; (8002e14 <menu+0x1cdc>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10e      	bne.n	8002d2c <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002d0e:	4b3f      	ldr	r3, [pc, #252]	; (8002e0c <menu+0x1cd4>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	4b3d      	ldr	r3, [pc, #244]	; (8002e0c <menu+0x1cd4>)
 8002d18:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002d1a:	4b3c      	ldr	r3, [pc, #240]	; (8002e0c <menu+0x1cd4>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b06      	cmp	r3, #6
 8002d20:	d902      	bls.n	8002d28 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002d22:	4b3a      	ldr	r3, [pc, #232]	; (8002e0c <menu+0x1cd4>)
 8002d24:	2205      	movs	r2, #5
 8002d26:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002d28:	f001 fdd2 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d2c:	2108      	movs	r1, #8
 8002d2e:	482d      	ldr	r0, [pc, #180]	; (8002de4 <menu+0x1cac>)
 8002d30:	f006 f986 	bl	8009040 <HAL_GPIO_ReadPin>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d10d      	bne.n	8002d56 <menu+0x1c1e>
 8002d3a:	4b2b      	ldr	r3, [pc, #172]	; (8002de8 <menu+0x1cb0>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	f083 0301 	eor.w	r3, r3, #1
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d006      	beq.n	8002d56 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002d48:	4b30      	ldr	r3, [pc, #192]	; (8002e0c <menu+0x1cd4>)
 8002d4a:	781a      	ldrb	r2, [r3, #0]
 8002d4c:	4b27      	ldr	r3, [pc, #156]	; (8002dec <menu+0x1cb4>)
 8002d4e:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002d50:	4b28      	ldr	r3, [pc, #160]	; (8002df4 <menu+0x1cbc>)
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002d56:	4b28      	ldr	r3, [pc, #160]	; (8002df8 <menu+0x1cc0>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	f040 80bc 	bne.w	8002ed8 <menu+0x1da0>
		if(dilSecim == 0) {
 8002d60:	4b1d      	ldr	r3, [pc, #116]	; (8002dd8 <menu+0x1ca0>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d105      	bne.n	8002d74 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002d68:	4a2b      	ldr	r2, [pc, #172]	; (8002e18 <menu+0x1ce0>)
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	f004 fe41 	bl	80079f4 <lcd_print>
 8002d72:	e008      	b.n	8002d86 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002d74:	4b18      	ldr	r3, [pc, #96]	; (8002dd8 <menu+0x1ca0>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d104      	bne.n	8002d86 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002d7c:	4a27      	ldr	r2, [pc, #156]	; (8002e1c <menu+0x1ce4>)
 8002d7e:	2101      	movs	r1, #1
 8002d80:	2001      	movs	r0, #1
 8002d82:	f004 fe37 	bl	80079f4 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002d86:	4b26      	ldr	r3, [pc, #152]	; (8002e20 <menu+0x1ce8>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d113      	bne.n	8002db6 <menu+0x1c7e>
			if(dilSecim == 0) {
 8002d8e:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <menu+0x1ca0>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d105      	bne.n	8002da2 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002d96:	4a11      	ldr	r2, [pc, #68]	; (8002ddc <menu+0x1ca4>)
 8002d98:	2101      	movs	r1, #1
 8002d9a:	2002      	movs	r0, #2
 8002d9c:	f004 fe2a 	bl	80079f4 <lcd_print>
 8002da0:	e04b      	b.n	8002e3a <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002da2:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <menu+0x1ca0>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d147      	bne.n	8002e3a <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002daa:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <menu+0x1ca8>)
 8002dac:	2101      	movs	r1, #1
 8002dae:	2002      	movs	r0, #2
 8002db0:	f004 fe20 	bl	80079f4 <lcd_print>
 8002db4:	e041      	b.n	8002e3a <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002db6:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <menu+0x1ce8>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d13d      	bne.n	8002e3a <menu+0x1d02>
			if(dilSecim == 0) {
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <menu+0x1ca0>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d130      	bne.n	8002e28 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002dc6:	4a17      	ldr	r2, [pc, #92]	; (8002e24 <menu+0x1cec>)
 8002dc8:	2101      	movs	r1, #1
 8002dca:	2002      	movs	r0, #2
 8002dcc:	f004 fe12 	bl	80079f4 <lcd_print>
 8002dd0:	e033      	b.n	8002e3a <menu+0x1d02>
 8002dd2:	bf00      	nop
 8002dd4:	20000201 	.word	0x20000201
 8002dd8:	20000215 	.word	0x20000215
 8002ddc:	0800d04c 	.word	0x0800d04c
 8002de0:	0800d060 	.word	0x0800d060
 8002de4:	40010800 	.word	0x40010800
 8002de8:	20000223 	.word	0x20000223
 8002dec:	20000120 	.word	0x20000120
 8002df0:	200001fa 	.word	0x200001fa
 8002df4:	20000220 	.word	0x20000220
 8002df8:	200001f4 	.word	0x200001f4
 8002dfc:	0800d3ec 	.word	0x0800d3ec
 8002e00:	0800d2b0 	.word	0x0800d2b0
 8002e04:	0800d400 	.word	0x0800d400
 8002e08:	0800d2d4 	.word	0x0800d2d4
 8002e0c:	2000020f 	.word	0x2000020f
 8002e10:	20000190 	.word	0x20000190
 8002e14:	200001ff 	.word	0x200001ff
 8002e18:	0800d414 	.word	0x0800d414
 8002e1c:	0800d428 	.word	0x0800d428
 8002e20:	20000202 	.word	0x20000202
 8002e24:	0800d0ac 	.word	0x0800d0ac
			} else if(dilSecim == 1) {
 8002e28:	4b99      	ldr	r3, [pc, #612]	; (8003090 <menu+0x1f58>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d104      	bne.n	8002e3a <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002e30:	4a98      	ldr	r2, [pc, #608]	; (8003094 <menu+0x1f5c>)
 8002e32:	2101      	movs	r1, #1
 8002e34:	2002      	movs	r0, #2
 8002e36:	f004 fddd 	bl	80079f4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e3a:	2102      	movs	r1, #2
 8002e3c:	4896      	ldr	r0, [pc, #600]	; (8003098 <menu+0x1f60>)
 8002e3e:	f006 f8ff 	bl	8009040 <HAL_GPIO_ReadPin>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d115      	bne.n	8002e74 <menu+0x1d3c>
 8002e48:	4b94      	ldr	r3, [pc, #592]	; (800309c <menu+0x1f64>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	f083 0301 	eor.w	r3, r3, #1
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00e      	beq.n	8002e74 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002e56:	4b92      	ldr	r3, [pc, #584]	; (80030a0 <menu+0x1f68>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4b90      	ldr	r3, [pc, #576]	; (80030a0 <menu+0x1f68>)
 8002e60:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002e62:	4b8f      	ldr	r3, [pc, #572]	; (80030a0 <menu+0x1f68>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d902      	bls.n	8002e70 <menu+0x1d38>
				yukariYavasLimit = 0;
 8002e6a:	4b8d      	ldr	r3, [pc, #564]	; (80030a0 <menu+0x1f68>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e70:	f001 fd2e 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e74:	2104      	movs	r1, #4
 8002e76:	4888      	ldr	r0, [pc, #544]	; (8003098 <menu+0x1f60>)
 8002e78:	f006 f8e2 	bl	8009040 <HAL_GPIO_ReadPin>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d115      	bne.n	8002eae <menu+0x1d76>
 8002e82:	4b86      	ldr	r3, [pc, #536]	; (800309c <menu+0x1f64>)
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	f083 0301 	eor.w	r3, r3, #1
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00e      	beq.n	8002eae <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002e90:	4b83      	ldr	r3, [pc, #524]	; (80030a0 <menu+0x1f68>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	4b81      	ldr	r3, [pc, #516]	; (80030a0 <menu+0x1f68>)
 8002e9a:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002e9c:	4b80      	ldr	r3, [pc, #512]	; (80030a0 <menu+0x1f68>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8002ea4:	4b7e      	ldr	r3, [pc, #504]	; (80030a0 <menu+0x1f68>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002eaa:	f001 fd11 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002eae:	2108      	movs	r1, #8
 8002eb0:	4879      	ldr	r0, [pc, #484]	; (8003098 <menu+0x1f60>)
 8002eb2:	f006 f8c5 	bl	8009040 <HAL_GPIO_ReadPin>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d10d      	bne.n	8002ed8 <menu+0x1da0>
 8002ebc:	4b77      	ldr	r3, [pc, #476]	; (800309c <menu+0x1f64>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	f083 0301 	eor.w	r3, r3, #1
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d006      	beq.n	8002ed8 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002eca:	4b75      	ldr	r3, [pc, #468]	; (80030a0 <menu+0x1f68>)
 8002ecc:	781a      	ldrb	r2, [r3, #0]
 8002ece:	4b75      	ldr	r3, [pc, #468]	; (80030a4 <menu+0x1f6c>)
 8002ed0:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002ed2:	4b75      	ldr	r3, [pc, #468]	; (80030a8 <menu+0x1f70>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002ed8:	4b74      	ldr	r3, [pc, #464]	; (80030ac <menu+0x1f74>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	2b11      	cmp	r3, #17
 8002ede:	f040 80c3 	bne.w	8003068 <menu+0x1f30>
		if(dilSecim == 0) {
 8002ee2:	4b6b      	ldr	r3, [pc, #428]	; (8003090 <menu+0x1f58>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d105      	bne.n	8002ef6 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002eea:	4a71      	ldr	r2, [pc, #452]	; (80030b0 <menu+0x1f78>)
 8002eec:	2101      	movs	r1, #1
 8002eee:	2001      	movs	r0, #1
 8002ef0:	f004 fd80 	bl	80079f4 <lcd_print>
 8002ef4:	e008      	b.n	8002f08 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8002ef6:	4b66      	ldr	r3, [pc, #408]	; (8003090 <menu+0x1f58>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d104      	bne.n	8002f08 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002efe:	4a6d      	ldr	r2, [pc, #436]	; (80030b4 <menu+0x1f7c>)
 8002f00:	2101      	movs	r1, #1
 8002f02:	2001      	movs	r0, #1
 8002f04:	f004 fd76 	bl	80079f4 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002f08:	4b6b      	ldr	r3, [pc, #428]	; (80030b8 <menu+0x1f80>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d113      	bne.n	8002f38 <menu+0x1e00>
			if(dilSecim == 0){
 8002f10:	4b5f      	ldr	r3, [pc, #380]	; (8003090 <menu+0x1f58>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d105      	bne.n	8002f24 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002f18:	4a68      	ldr	r2, [pc, #416]	; (80030bc <menu+0x1f84>)
 8002f1a:	2101      	movs	r1, #1
 8002f1c:	2002      	movs	r0, #2
 8002f1e:	f004 fd69 	bl	80079f4 <lcd_print>
 8002f22:	e038      	b.n	8002f96 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8002f24:	4b5a      	ldr	r3, [pc, #360]	; (8003090 <menu+0x1f58>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d134      	bne.n	8002f96 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002f2c:	4a64      	ldr	r2, [pc, #400]	; (80030c0 <menu+0x1f88>)
 8002f2e:	2101      	movs	r1, #1
 8002f30:	2002      	movs	r0, #2
 8002f32:	f004 fd5f 	bl	80079f4 <lcd_print>
 8002f36:	e02e      	b.n	8002f96 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002f38:	4b5f      	ldr	r3, [pc, #380]	; (80030b8 <menu+0x1f80>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d113      	bne.n	8002f68 <menu+0x1e30>
			if(dilSecim == 0){
 8002f40:	4b53      	ldr	r3, [pc, #332]	; (8003090 <menu+0x1f58>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d105      	bne.n	8002f54 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8002f48:	4a5e      	ldr	r2, [pc, #376]	; (80030c4 <menu+0x1f8c>)
 8002f4a:	2101      	movs	r1, #1
 8002f4c:	2002      	movs	r0, #2
 8002f4e:	f004 fd51 	bl	80079f4 <lcd_print>
 8002f52:	e020      	b.n	8002f96 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002f54:	4b4e      	ldr	r3, [pc, #312]	; (8003090 <menu+0x1f58>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d11c      	bne.n	8002f96 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8002f5c:	4a5a      	ldr	r2, [pc, #360]	; (80030c8 <menu+0x1f90>)
 8002f5e:	2101      	movs	r1, #1
 8002f60:	2002      	movs	r0, #2
 8002f62:	f004 fd47 	bl	80079f4 <lcd_print>
 8002f66:	e016      	b.n	8002f96 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8002f68:	4b53      	ldr	r3, [pc, #332]	; (80030b8 <menu+0x1f80>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d112      	bne.n	8002f96 <menu+0x1e5e>
			if(dilSecim == 0) {
 8002f70:	4b47      	ldr	r3, [pc, #284]	; (8003090 <menu+0x1f58>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d105      	bne.n	8002f84 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8002f78:	4a54      	ldr	r2, [pc, #336]	; (80030cc <menu+0x1f94>)
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	2002      	movs	r0, #2
 8002f7e:	f004 fd39 	bl	80079f4 <lcd_print>
 8002f82:	e008      	b.n	8002f96 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002f84:	4b42      	ldr	r3, [pc, #264]	; (8003090 <menu+0x1f58>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d104      	bne.n	8002f96 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8002f8c:	4a50      	ldr	r2, [pc, #320]	; (80030d0 <menu+0x1f98>)
 8002f8e:	2101      	movs	r1, #1
 8002f90:	2002      	movs	r0, #2
 8002f92:	f004 fd2f 	bl	80079f4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f96:	2102      	movs	r1, #2
 8002f98:	483f      	ldr	r0, [pc, #252]	; (8003098 <menu+0x1f60>)
 8002f9a:	f006 f851 	bl	8009040 <HAL_GPIO_ReadPin>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d115      	bne.n	8002fd0 <menu+0x1e98>
 8002fa4:	4b3d      	ldr	r3, [pc, #244]	; (800309c <menu+0x1f64>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	f083 0301 	eor.w	r3, r3, #1
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00e      	beq.n	8002fd0 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002fb2:	4b41      	ldr	r3, [pc, #260]	; (80030b8 <menu+0x1f80>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4b3f      	ldr	r3, [pc, #252]	; (80030b8 <menu+0x1f80>)
 8002fbc:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002fbe:	4b3e      	ldr	r3, [pc, #248]	; (80030b8 <menu+0x1f80>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d902      	bls.n	8002fcc <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8002fc6:	4b3c      	ldr	r3, [pc, #240]	; (80030b8 <menu+0x1f80>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002fcc:	f001 fc80 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fd0:	2104      	movs	r1, #4
 8002fd2:	4831      	ldr	r0, [pc, #196]	; (8003098 <menu+0x1f60>)
 8002fd4:	f006 f834 	bl	8009040 <HAL_GPIO_ReadPin>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d115      	bne.n	800300a <menu+0x1ed2>
 8002fde:	4b2f      	ldr	r3, [pc, #188]	; (800309c <menu+0x1f64>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	f083 0301 	eor.w	r3, r3, #1
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00e      	beq.n	800300a <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002fec:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <menu+0x1f80>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	4b30      	ldr	r3, [pc, #192]	; (80030b8 <menu+0x1f80>)
 8002ff6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002ff8:	4b2f      	ldr	r3, [pc, #188]	; (80030b8 <menu+0x1f80>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b03      	cmp	r3, #3
 8002ffe:	d902      	bls.n	8003006 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003000:	4b2d      	ldr	r3, [pc, #180]	; (80030b8 <menu+0x1f80>)
 8003002:	2202      	movs	r2, #2
 8003004:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003006:	f001 fc63 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800300a:	2108      	movs	r1, #8
 800300c:	4822      	ldr	r0, [pc, #136]	; (8003098 <menu+0x1f60>)
 800300e:	f006 f817 	bl	8009040 <HAL_GPIO_ReadPin>
 8003012:	4603      	mov	r3, r0
 8003014:	2b01      	cmp	r3, #1
 8003016:	d127      	bne.n	8003068 <menu+0x1f30>
 8003018:	4b20      	ldr	r3, [pc, #128]	; (800309c <menu+0x1f64>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	f083 0301 	eor.w	r3, r3, #1
 8003020:	b2db      	uxtb	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d020      	beq.n	8003068 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8003026:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <menu+0x1f80>)
 8003028:	781a      	ldrb	r2, [r3, #0]
 800302a:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <menu+0x1f6c>)
 800302c:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800302e:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <menu+0x1f80>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d003      	beq.n	800303e <menu+0x1f06>
 8003036:	4b20      	ldr	r3, [pc, #128]	; (80030b8 <menu+0x1f80>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d106      	bne.n	800304c <menu+0x1f14>
				calismaSekli = 0;
 800303e:	4b25      	ldr	r3, [pc, #148]	; (80030d4 <menu+0x1f9c>)
 8003040:	2200      	movs	r2, #0
 8003042:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003044:	4b23      	ldr	r3, [pc, #140]	; (80030d4 <menu+0x1f9c>)
 8003046:	781a      	ldrb	r2, [r3, #0]
 8003048:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <menu+0x1f6c>)
 800304a:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 800304c:	4b1a      	ldr	r3, [pc, #104]	; (80030b8 <menu+0x1f80>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d106      	bne.n	8003062 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8003054:	4b20      	ldr	r3, [pc, #128]	; (80030d8 <menu+0x1fa0>)
 8003056:	2201      	movs	r2, #1
 8003058:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800305a:	4b1f      	ldr	r3, [pc, #124]	; (80030d8 <menu+0x1fa0>)
 800305c:	781a      	ldrb	r2, [r3, #0]
 800305e:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <menu+0x1f6c>)
 8003060:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8003062:	4b11      	ldr	r3, [pc, #68]	; (80030a8 <menu+0x1f70>)
 8003064:	2201      	movs	r2, #1
 8003066:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003068:	4b10      	ldr	r3, [pc, #64]	; (80030ac <menu+0x1f74>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b12      	cmp	r3, #18
 800306e:	f040 80d5 	bne.w	800321c <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 8003072:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <menu+0x1f80>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d13c      	bne.n	80030f4 <menu+0x1fbc>
			if(dilSecim == 0) {
 800307a:	4b05      	ldr	r3, [pc, #20]	; (8003090 <menu+0x1f58>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d12e      	bne.n	80030e0 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8003082:	4a16      	ldr	r2, [pc, #88]	; (80030dc <menu+0x1fa4>)
 8003084:	2101      	movs	r1, #1
 8003086:	2001      	movs	r0, #1
 8003088:	f004 fcb4 	bl	80079f4 <lcd_print>
 800308c:	e048      	b.n	8003120 <menu+0x1fe8>
 800308e:	bf00      	nop
 8003090:	20000215 	.word	0x20000215
 8003094:	0800d0c0 	.word	0x0800d0c0
 8003098:	40010800 	.word	0x40010800
 800309c:	20000223 	.word	0x20000223
 80030a0:	20000202 	.word	0x20000202
 80030a4:	20000120 	.word	0x20000120
 80030a8:	20000220 	.word	0x20000220
 80030ac:	200001f4 	.word	0x200001f4
 80030b0:	0800d43c 	.word	0x0800d43c
 80030b4:	0800d450 	.word	0x0800d450
 80030b8:	20000203 	.word	0x20000203
 80030bc:	0800d464 	.word	0x0800d464
 80030c0:	0800d474 	.word	0x0800d474
 80030c4:	0800d484 	.word	0x0800d484
 80030c8:	0800d494 	.word	0x0800d494
 80030cc:	0800d04c 	.word	0x0800d04c
 80030d0:	0800d060 	.word	0x0800d060
 80030d4:	200001f5 	.word	0x200001f5
 80030d8:	20000206 	.word	0x20000206
 80030dc:	0800d4a4 	.word	0x0800d4a4
			} else if(dilSecim == 1) {
 80030e0:	4b7b      	ldr	r3, [pc, #492]	; (80032d0 <menu+0x2198>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d11b      	bne.n	8003120 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80030e8:	4a7a      	ldr	r2, [pc, #488]	; (80032d4 <menu+0x219c>)
 80030ea:	2101      	movs	r1, #1
 80030ec:	2001      	movs	r0, #1
 80030ee:	f004 fc81 	bl	80079f4 <lcd_print>
 80030f2:	e015      	b.n	8003120 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80030f4:	4b78      	ldr	r3, [pc, #480]	; (80032d8 <menu+0x21a0>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d111      	bne.n	8003120 <menu+0x1fe8>
			if(dilSecim == 0){
 80030fc:	4b74      	ldr	r3, [pc, #464]	; (80032d0 <menu+0x2198>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d104      	bne.n	800310e <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003104:	4a75      	ldr	r2, [pc, #468]	; (80032dc <menu+0x21a4>)
 8003106:	2101      	movs	r1, #1
 8003108:	2001      	movs	r0, #1
 800310a:	f004 fc73 	bl	80079f4 <lcd_print>
			}
			if(dilSecim == 1){
 800310e:	4b70      	ldr	r3, [pc, #448]	; (80032d0 <menu+0x2198>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d104      	bne.n	8003120 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003116:	4a72      	ldr	r2, [pc, #456]	; (80032e0 <menu+0x21a8>)
 8003118:	2101      	movs	r1, #1
 800311a:	2001      	movs	r0, #1
 800311c:	f004 fc6a 	bl	80079f4 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003120:	4b70      	ldr	r3, [pc, #448]	; (80032e4 <menu+0x21ac>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d113      	bne.n	8003150 <menu+0x2018>
			if(dilSecim == 0) {
 8003128:	4b69      	ldr	r3, [pc, #420]	; (80032d0 <menu+0x2198>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 8003130:	4a6d      	ldr	r2, [pc, #436]	; (80032e8 <menu+0x21b0>)
 8003132:	2101      	movs	r1, #1
 8003134:	2002      	movs	r0, #2
 8003136:	f004 fc5d 	bl	80079f4 <lcd_print>
 800313a:	e020      	b.n	800317e <menu+0x2046>
			} else if(dilSecim == 1){
 800313c:	4b64      	ldr	r3, [pc, #400]	; (80032d0 <menu+0x2198>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d11c      	bne.n	800317e <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 8003144:	4a69      	ldr	r2, [pc, #420]	; (80032ec <menu+0x21b4>)
 8003146:	2101      	movs	r1, #1
 8003148:	2002      	movs	r0, #2
 800314a:	f004 fc53 	bl	80079f4 <lcd_print>
 800314e:	e016      	b.n	800317e <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003150:	4b64      	ldr	r3, [pc, #400]	; (80032e4 <menu+0x21ac>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d112      	bne.n	800317e <menu+0x2046>
			if(dilSecim == 0){
 8003158:	4b5d      	ldr	r3, [pc, #372]	; (80032d0 <menu+0x2198>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d105      	bne.n	800316c <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8003160:	4a63      	ldr	r2, [pc, #396]	; (80032f0 <menu+0x21b8>)
 8003162:	2101      	movs	r1, #1
 8003164:	2002      	movs	r0, #2
 8003166:	f004 fc45 	bl	80079f4 <lcd_print>
 800316a:	e008      	b.n	800317e <menu+0x2046>
			} else if(dilSecim == 1){
 800316c:	4b58      	ldr	r3, [pc, #352]	; (80032d0 <menu+0x2198>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d104      	bne.n	800317e <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8003174:	4a5f      	ldr	r2, [pc, #380]	; (80032f4 <menu+0x21bc>)
 8003176:	2101      	movs	r1, #1
 8003178:	2002      	movs	r0, #2
 800317a:	f004 fc3b 	bl	80079f4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800317e:	2102      	movs	r1, #2
 8003180:	485d      	ldr	r0, [pc, #372]	; (80032f8 <menu+0x21c0>)
 8003182:	f005 ff5d 	bl	8009040 <HAL_GPIO_ReadPin>
 8003186:	4603      	mov	r3, r0
 8003188:	2b01      	cmp	r3, #1
 800318a:	d115      	bne.n	80031b8 <menu+0x2080>
 800318c:	4b5b      	ldr	r3, [pc, #364]	; (80032fc <menu+0x21c4>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	f083 0301 	eor.w	r3, r3, #1
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00e      	beq.n	80031b8 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800319a:	4b52      	ldr	r3, [pc, #328]	; (80032e4 <menu+0x21ac>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	3301      	adds	r3, #1
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	4b50      	ldr	r3, [pc, #320]	; (80032e4 <menu+0x21ac>)
 80031a4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80031a6:	4b4f      	ldr	r3, [pc, #316]	; (80032e4 <menu+0x21ac>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d902      	bls.n	80031b4 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 80031ae:	4b4d      	ldr	r3, [pc, #308]	; (80032e4 <menu+0x21ac>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031b4:	f001 fb8c 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031b8:	2104      	movs	r1, #4
 80031ba:	484f      	ldr	r0, [pc, #316]	; (80032f8 <menu+0x21c0>)
 80031bc:	f005 ff40 	bl	8009040 <HAL_GPIO_ReadPin>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d115      	bne.n	80031f2 <menu+0x20ba>
 80031c6:	4b4d      	ldr	r3, [pc, #308]	; (80032fc <menu+0x21c4>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	f083 0301 	eor.w	r3, r3, #1
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00e      	beq.n	80031f2 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80031d4:	4b43      	ldr	r3, [pc, #268]	; (80032e4 <menu+0x21ac>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	3b01      	subs	r3, #1
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	4b41      	ldr	r3, [pc, #260]	; (80032e4 <menu+0x21ac>)
 80031de:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80031e0:	4b40      	ldr	r3, [pc, #256]	; (80032e4 <menu+0x21ac>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 80031e8:	4b3e      	ldr	r3, [pc, #248]	; (80032e4 <menu+0x21ac>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031ee:	f001 fb6f 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031f2:	2108      	movs	r1, #8
 80031f4:	4840      	ldr	r0, [pc, #256]	; (80032f8 <menu+0x21c0>)
 80031f6:	f005 ff23 	bl	8009040 <HAL_GPIO_ReadPin>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d10d      	bne.n	800321c <menu+0x20e4>
 8003200:	4b3e      	ldr	r3, [pc, #248]	; (80032fc <menu+0x21c4>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	f083 0301 	eor.w	r3, r3, #1
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d006      	beq.n	800321c <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800320e:	4b35      	ldr	r3, [pc, #212]	; (80032e4 <menu+0x21ac>)
 8003210:	781a      	ldrb	r2, [r3, #0]
 8003212:	4b3b      	ldr	r3, [pc, #236]	; (8003300 <menu+0x21c8>)
 8003214:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003216:	4b3b      	ldr	r3, [pc, #236]	; (8003304 <menu+0x21cc>)
 8003218:	2201      	movs	r2, #1
 800321a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 800321c:	4b3a      	ldr	r3, [pc, #232]	; (8003308 <menu+0x21d0>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b13      	cmp	r3, #19
 8003222:	f040 80d5 	bne.w	80033d0 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8003226:	4b2c      	ldr	r3, [pc, #176]	; (80032d8 <menu+0x21a0>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d113      	bne.n	8003256 <menu+0x211e>
			if(dilSecim == 0) {
 800322e:	4b28      	ldr	r3, [pc, #160]	; (80032d0 <menu+0x2198>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d105      	bne.n	8003242 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003236:	4a35      	ldr	r2, [pc, #212]	; (800330c <menu+0x21d4>)
 8003238:	2101      	movs	r1, #1
 800323a:	2001      	movs	r0, #1
 800323c:	f004 fbda 	bl	80079f4 <lcd_print>
 8003240:	e01f      	b.n	8003282 <menu+0x214a>
			} else if(dilSecim == 1) {
 8003242:	4b23      	ldr	r3, [pc, #140]	; (80032d0 <menu+0x2198>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d11b      	bne.n	8003282 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 800324a:	4a31      	ldr	r2, [pc, #196]	; (8003310 <menu+0x21d8>)
 800324c:	2101      	movs	r1, #1
 800324e:	2001      	movs	r0, #1
 8003250:	f004 fbd0 	bl	80079f4 <lcd_print>
 8003254:	e015      	b.n	8003282 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003256:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <menu+0x21a0>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d111      	bne.n	8003282 <menu+0x214a>
			if(dilSecim == 0) {
 800325e:	4b1c      	ldr	r3, [pc, #112]	; (80032d0 <menu+0x2198>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d104      	bne.n	8003270 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8003266:	4a2b      	ldr	r2, [pc, #172]	; (8003314 <menu+0x21dc>)
 8003268:	2101      	movs	r1, #1
 800326a:	2001      	movs	r0, #1
 800326c:	f004 fbc2 	bl	80079f4 <lcd_print>
			}
			if(dilSecim == 1) {
 8003270:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <menu+0x2198>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d104      	bne.n	8003282 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003278:	4a27      	ldr	r2, [pc, #156]	; (8003318 <menu+0x21e0>)
 800327a:	2101      	movs	r1, #1
 800327c:	2001      	movs	r0, #1
 800327e:	f004 fbb9 	bl	80079f4 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8003282:	4b26      	ldr	r3, [pc, #152]	; (800331c <menu+0x21e4>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d113      	bne.n	80032b2 <menu+0x217a>
			if(dilSecim == 0) {
 800328a:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <menu+0x2198>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d105      	bne.n	800329e <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 8003292:	4a15      	ldr	r2, [pc, #84]	; (80032e8 <menu+0x21b0>)
 8003294:	2101      	movs	r1, #1
 8003296:	2002      	movs	r0, #2
 8003298:	f004 fbac 	bl	80079f4 <lcd_print>
 800329c:	e049      	b.n	8003332 <menu+0x21fa>
			} else if(dilSecim == 1) {
 800329e:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <menu+0x2198>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d145      	bne.n	8003332 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80032a6:	4a11      	ldr	r2, [pc, #68]	; (80032ec <menu+0x21b4>)
 80032a8:	2101      	movs	r1, #1
 80032aa:	2002      	movs	r0, #2
 80032ac:	f004 fba2 	bl	80079f4 <lcd_print>
 80032b0:	e03f      	b.n	8003332 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80032b2:	4b1a      	ldr	r3, [pc, #104]	; (800331c <menu+0x21e4>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d13b      	bne.n	8003332 <menu+0x21fa>
			if(dilSecim == 0) {
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <menu+0x2198>)
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d12e      	bne.n	8003320 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 80032c2:	4a0b      	ldr	r2, [pc, #44]	; (80032f0 <menu+0x21b8>)
 80032c4:	2101      	movs	r1, #1
 80032c6:	2002      	movs	r0, #2
 80032c8:	f004 fb94 	bl	80079f4 <lcd_print>
 80032cc:	e031      	b.n	8003332 <menu+0x21fa>
 80032ce:	bf00      	nop
 80032d0:	20000215 	.word	0x20000215
 80032d4:	0800d4b8 	.word	0x0800d4b8
 80032d8:	20000203 	.word	0x20000203
 80032dc:	0800d4c8 	.word	0x0800d4c8
 80032e0:	0800d4dc 	.word	0x0800d4dc
 80032e4:	20000204 	.word	0x20000204
 80032e8:	0800d04c 	.word	0x0800d04c
 80032ec:	0800d060 	.word	0x0800d060
 80032f0:	0800d0ac 	.word	0x0800d0ac
 80032f4:	0800d0c0 	.word	0x0800d0c0
 80032f8:	40010800 	.word	0x40010800
 80032fc:	20000223 	.word	0x20000223
 8003300:	20000120 	.word	0x20000120
 8003304:	20000220 	.word	0x20000220
 8003308:	200001f4 	.word	0x200001f4
 800330c:	0800d4f0 	.word	0x0800d4f0
 8003310:	0800d504 	.word	0x0800d504
 8003314:	0800d518 	.word	0x0800d518
 8003318:	0800d52c 	.word	0x0800d52c
 800331c:	20000205 	.word	0x20000205
			} else if(dilSecim == 1) {
 8003320:	4b90      	ldr	r3, [pc, #576]	; (8003564 <menu+0x242c>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d104      	bne.n	8003332 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003328:	4a8f      	ldr	r2, [pc, #572]	; (8003568 <menu+0x2430>)
 800332a:	2101      	movs	r1, #1
 800332c:	2002      	movs	r0, #2
 800332e:	f004 fb61 	bl	80079f4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003332:	2102      	movs	r1, #2
 8003334:	488d      	ldr	r0, [pc, #564]	; (800356c <menu+0x2434>)
 8003336:	f005 fe83 	bl	8009040 <HAL_GPIO_ReadPin>
 800333a:	4603      	mov	r3, r0
 800333c:	2b01      	cmp	r3, #1
 800333e:	d115      	bne.n	800336c <menu+0x2234>
 8003340:	4b8b      	ldr	r3, [pc, #556]	; (8003570 <menu+0x2438>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	f083 0301 	eor.w	r3, r3, #1
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00e      	beq.n	800336c <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 800334e:	4b89      	ldr	r3, [pc, #548]	; (8003574 <menu+0x243c>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	3301      	adds	r3, #1
 8003354:	b2da      	uxtb	r2, r3
 8003356:	4b87      	ldr	r3, [pc, #540]	; (8003574 <menu+0x243c>)
 8003358:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 800335a:	4b86      	ldr	r3, [pc, #536]	; (8003574 <menu+0x243c>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b01      	cmp	r3, #1
 8003360:	d902      	bls.n	8003368 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 8003362:	4b84      	ldr	r3, [pc, #528]	; (8003574 <menu+0x243c>)
 8003364:	2200      	movs	r2, #0
 8003366:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003368:	f001 fab2 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800336c:	2104      	movs	r1, #4
 800336e:	487f      	ldr	r0, [pc, #508]	; (800356c <menu+0x2434>)
 8003370:	f005 fe66 	bl	8009040 <HAL_GPIO_ReadPin>
 8003374:	4603      	mov	r3, r0
 8003376:	2b01      	cmp	r3, #1
 8003378:	d115      	bne.n	80033a6 <menu+0x226e>
 800337a:	4b7d      	ldr	r3, [pc, #500]	; (8003570 <menu+0x2438>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	f083 0301 	eor.w	r3, r3, #1
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00e      	beq.n	80033a6 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003388:	4b7a      	ldr	r3, [pc, #488]	; (8003574 <menu+0x243c>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	3b01      	subs	r3, #1
 800338e:	b2da      	uxtb	r2, r3
 8003390:	4b78      	ldr	r3, [pc, #480]	; (8003574 <menu+0x243c>)
 8003392:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003394:	4b77      	ldr	r3, [pc, #476]	; (8003574 <menu+0x243c>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 800339c:	4b75      	ldr	r3, [pc, #468]	; (8003574 <menu+0x243c>)
 800339e:	2201      	movs	r2, #1
 80033a0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033a2:	f001 fa95 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033a6:	2108      	movs	r1, #8
 80033a8:	4870      	ldr	r0, [pc, #448]	; (800356c <menu+0x2434>)
 80033aa:	f005 fe49 	bl	8009040 <HAL_GPIO_ReadPin>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d10d      	bne.n	80033d0 <menu+0x2298>
 80033b4:	4b6e      	ldr	r3, [pc, #440]	; (8003570 <menu+0x2438>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	f083 0301 	eor.w	r3, r3, #1
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d006      	beq.n	80033d0 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 80033c2:	4b6c      	ldr	r3, [pc, #432]	; (8003574 <menu+0x243c>)
 80033c4:	781a      	ldrb	r2, [r3, #0]
 80033c6:	4b6c      	ldr	r3, [pc, #432]	; (8003578 <menu+0x2440>)
 80033c8:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80033ca:	4b6c      	ldr	r3, [pc, #432]	; (800357c <menu+0x2444>)
 80033cc:	2201      	movs	r2, #1
 80033ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80033d0:	4b6b      	ldr	r3, [pc, #428]	; (8003580 <menu+0x2448>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b14      	cmp	r3, #20
 80033d6:	f040 80b5 	bne.w	8003544 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 80033da:	4b6a      	ldr	r3, [pc, #424]	; (8003584 <menu+0x244c>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d113      	bne.n	800340a <menu+0x22d2>
			if(dilSecim == 0) {
 80033e2:	4b60      	ldr	r3, [pc, #384]	; (8003564 <menu+0x242c>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d105      	bne.n	80033f6 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80033ea:	4a67      	ldr	r2, [pc, #412]	; (8003588 <menu+0x2450>)
 80033ec:	2101      	movs	r1, #1
 80033ee:	2001      	movs	r0, #1
 80033f0:	f004 fb00 	bl	80079f4 <lcd_print>
 80033f4:	e020      	b.n	8003438 <menu+0x2300>
			} else if(dilSecim == 1) {
 80033f6:	4b5b      	ldr	r3, [pc, #364]	; (8003564 <menu+0x242c>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d11c      	bne.n	8003438 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80033fe:	4a63      	ldr	r2, [pc, #396]	; (800358c <menu+0x2454>)
 8003400:	2101      	movs	r1, #1
 8003402:	2001      	movs	r0, #1
 8003404:	f004 faf6 	bl	80079f4 <lcd_print>
 8003408:	e016      	b.n	8003438 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 800340a:	4b5e      	ldr	r3, [pc, #376]	; (8003584 <menu+0x244c>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d112      	bne.n	8003438 <menu+0x2300>
			if(dilSecim == 0) {
 8003412:	4b54      	ldr	r3, [pc, #336]	; (8003564 <menu+0x242c>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d105      	bne.n	8003426 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 800341a:	4a5d      	ldr	r2, [pc, #372]	; (8003590 <menu+0x2458>)
 800341c:	2101      	movs	r1, #1
 800341e:	2001      	movs	r0, #1
 8003420:	f004 fae8 	bl	80079f4 <lcd_print>
 8003424:	e008      	b.n	8003438 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003426:	4b4f      	ldr	r3, [pc, #316]	; (8003564 <menu+0x242c>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d104      	bne.n	8003438 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 800342e:	4a59      	ldr	r2, [pc, #356]	; (8003594 <menu+0x245c>)
 8003430:	2101      	movs	r1, #1
 8003432:	2001      	movs	r0, #1
 8003434:	f004 fade 	bl	80079f4 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003438:	4b57      	ldr	r3, [pc, #348]	; (8003598 <menu+0x2460>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d113      	bne.n	8003468 <menu+0x2330>
			if(dilSecim == 0) {
 8003440:	4b48      	ldr	r3, [pc, #288]	; (8003564 <menu+0x242c>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d105      	bne.n	8003454 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003448:	4a54      	ldr	r2, [pc, #336]	; (800359c <menu+0x2464>)
 800344a:	2101      	movs	r1, #1
 800344c:	2002      	movs	r0, #2
 800344e:	f004 fad1 	bl	80079f4 <lcd_print>
 8003452:	e020      	b.n	8003496 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003454:	4b43      	ldr	r3, [pc, #268]	; (8003564 <menu+0x242c>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d11c      	bne.n	8003496 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 800345c:	4a50      	ldr	r2, [pc, #320]	; (80035a0 <menu+0x2468>)
 800345e:	2101      	movs	r1, #1
 8003460:	2002      	movs	r0, #2
 8003462:	f004 fac7 	bl	80079f4 <lcd_print>
 8003466:	e016      	b.n	8003496 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003468:	4b4b      	ldr	r3, [pc, #300]	; (8003598 <menu+0x2460>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d112      	bne.n	8003496 <menu+0x235e>
			if(dilSecim == 0) {
 8003470:	4b3c      	ldr	r3, [pc, #240]	; (8003564 <menu+0x242c>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d105      	bne.n	8003484 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003478:	4a4a      	ldr	r2, [pc, #296]	; (80035a4 <menu+0x246c>)
 800347a:	2101      	movs	r1, #1
 800347c:	2002      	movs	r0, #2
 800347e:	f004 fab9 	bl	80079f4 <lcd_print>
 8003482:	e008      	b.n	8003496 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003484:	4b37      	ldr	r3, [pc, #220]	; (8003564 <menu+0x242c>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d104      	bne.n	8003496 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 800348c:	4a46      	ldr	r2, [pc, #280]	; (80035a8 <menu+0x2470>)
 800348e:	2101      	movs	r1, #1
 8003490:	2002      	movs	r0, #2
 8003492:	f004 faaf 	bl	80079f4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003496:	2102      	movs	r1, #2
 8003498:	4834      	ldr	r0, [pc, #208]	; (800356c <menu+0x2434>)
 800349a:	f005 fdd1 	bl	8009040 <HAL_GPIO_ReadPin>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d119      	bne.n	80034d8 <menu+0x23a0>
 80034a4:	4b32      	ldr	r3, [pc, #200]	; (8003570 <menu+0x2438>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	f083 0301 	eor.w	r3, r3, #1
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d012      	beq.n	80034d8 <menu+0x23a0>
 80034b2:	4b34      	ldr	r3, [pc, #208]	; (8003584 <menu+0x244c>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d10e      	bne.n	80034d8 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80034ba:	4b37      	ldr	r3, [pc, #220]	; (8003598 <menu+0x2460>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	3301      	adds	r3, #1
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	4b35      	ldr	r3, [pc, #212]	; (8003598 <menu+0x2460>)
 80034c4:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80034c6:	4b34      	ldr	r3, [pc, #208]	; (8003598 <menu+0x2460>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d902      	bls.n	80034d4 <menu+0x239c>
				devirmeSilindirTipi = 0;
 80034ce:	4b32      	ldr	r3, [pc, #200]	; (8003598 <menu+0x2460>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034d4:	f001 f9fc 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80034d8:	2104      	movs	r1, #4
 80034da:	4824      	ldr	r0, [pc, #144]	; (800356c <menu+0x2434>)
 80034dc:	f005 fdb0 	bl	8009040 <HAL_GPIO_ReadPin>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d119      	bne.n	800351a <menu+0x23e2>
 80034e6:	4b22      	ldr	r3, [pc, #136]	; (8003570 <menu+0x2438>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	f083 0301 	eor.w	r3, r3, #1
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d012      	beq.n	800351a <menu+0x23e2>
 80034f4:	4b23      	ldr	r3, [pc, #140]	; (8003584 <menu+0x244c>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d10e      	bne.n	800351a <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80034fc:	4b26      	ldr	r3, [pc, #152]	; (8003598 <menu+0x2460>)
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	3b01      	subs	r3, #1
 8003502:	b2da      	uxtb	r2, r3
 8003504:	4b24      	ldr	r3, [pc, #144]	; (8003598 <menu+0x2460>)
 8003506:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003508:	4b23      	ldr	r3, [pc, #140]	; (8003598 <menu+0x2460>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003510:	4b21      	ldr	r3, [pc, #132]	; (8003598 <menu+0x2460>)
 8003512:	2201      	movs	r2, #1
 8003514:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003516:	f001 f9db 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800351a:	2108      	movs	r1, #8
 800351c:	4813      	ldr	r0, [pc, #76]	; (800356c <menu+0x2434>)
 800351e:	f005 fd8f 	bl	8009040 <HAL_GPIO_ReadPin>
 8003522:	4603      	mov	r3, r0
 8003524:	2b01      	cmp	r3, #1
 8003526:	d10d      	bne.n	8003544 <menu+0x240c>
 8003528:	4b11      	ldr	r3, [pc, #68]	; (8003570 <menu+0x2438>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	f083 0301 	eor.w	r3, r3, #1
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d006      	beq.n	8003544 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8003536:	4b18      	ldr	r3, [pc, #96]	; (8003598 <menu+0x2460>)
 8003538:	781a      	ldrb	r2, [r3, #0]
 800353a:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <menu+0x2440>)
 800353c:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 800353e:	4b0f      	ldr	r3, [pc, #60]	; (800357c <menu+0x2444>)
 8003540:	2201      	movs	r2, #1
 8003542:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003544:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <menu+0x2448>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b15      	cmp	r3, #21
 800354a:	f040 80c2 	bne.w	80036d2 <menu+0x259a>
		if(dilSecim == 0) {
 800354e:	4b05      	ldr	r3, [pc, #20]	; (8003564 <menu+0x242c>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d12c      	bne.n	80035b0 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8003556:	4a15      	ldr	r2, [pc, #84]	; (80035ac <menu+0x2474>)
 8003558:	2101      	movs	r1, #1
 800355a:	2001      	movs	r0, #1
 800355c:	f004 fa4a 	bl	80079f4 <lcd_print>
 8003560:	e02f      	b.n	80035c2 <menu+0x248a>
 8003562:	bf00      	nop
 8003564:	20000215 	.word	0x20000215
 8003568:	0800d0c0 	.word	0x0800d0c0
 800356c:	40010800 	.word	0x40010800
 8003570:	20000223 	.word	0x20000223
 8003574:	20000205 	.word	0x20000205
 8003578:	20000120 	.word	0x20000120
 800357c:	20000220 	.word	0x20000220
 8003580:	200001f4 	.word	0x200001f4
 8003584:	20000203 	.word	0x20000203
 8003588:	0800d540 	.word	0x0800d540
 800358c:	0800d554 	.word	0x0800d554
 8003590:	0800d568 	.word	0x0800d568
 8003594:	0800d57c 	.word	0x0800d57c
 8003598:	20000206 	.word	0x20000206
 800359c:	0800d590 	.word	0x0800d590
 80035a0:	0800d5a4 	.word	0x0800d5a4
 80035a4:	0800d5b4 	.word	0x0800d5b4
 80035a8:	0800d5c8 	.word	0x0800d5c8
 80035ac:	0800d5d8 	.word	0x0800d5d8
		} else if(dilSecim == 1) {
 80035b0:	4b9c      	ldr	r3, [pc, #624]	; (8003824 <menu+0x26ec>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d104      	bne.n	80035c2 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 80035b8:	4a9b      	ldr	r2, [pc, #620]	; (8003828 <menu+0x26f0>)
 80035ba:	2101      	movs	r1, #1
 80035bc:	2001      	movs	r0, #1
 80035be:	f004 fa19 	bl	80079f4 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 80035c2:	4b9a      	ldr	r3, [pc, #616]	; (800382c <menu+0x26f4>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d112      	bne.n	80035f0 <menu+0x24b8>
			if(dilSecim == 0) {
 80035ca:	4b96      	ldr	r3, [pc, #600]	; (8003824 <menu+0x26ec>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d104      	bne.n	80035dc <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 80035d2:	4a97      	ldr	r2, [pc, #604]	; (8003830 <menu+0x26f8>)
 80035d4:	2101      	movs	r1, #1
 80035d6:	2002      	movs	r0, #2
 80035d8:	f004 fa0c 	bl	80079f4 <lcd_print>
			}
			if(dilSecim == 1) {
 80035dc:	4b91      	ldr	r3, [pc, #580]	; (8003824 <menu+0x26ec>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d11c      	bne.n	800361e <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 80035e4:	4a93      	ldr	r2, [pc, #588]	; (8003834 <menu+0x26fc>)
 80035e6:	2101      	movs	r1, #1
 80035e8:	2002      	movs	r0, #2
 80035ea:	f004 fa03 	bl	80079f4 <lcd_print>
 80035ee:	e016      	b.n	800361e <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 80035f0:	4b8e      	ldr	r3, [pc, #568]	; (800382c <menu+0x26f4>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d112      	bne.n	800361e <menu+0x24e6>
			if(dilSecim == 0) {
 80035f8:	4b8a      	ldr	r3, [pc, #552]	; (8003824 <menu+0x26ec>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d105      	bne.n	800360c <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003600:	4a8d      	ldr	r2, [pc, #564]	; (8003838 <menu+0x2700>)
 8003602:	2101      	movs	r1, #1
 8003604:	2002      	movs	r0, #2
 8003606:	f004 f9f5 	bl	80079f4 <lcd_print>
 800360a:	e008      	b.n	800361e <menu+0x24e6>
			} else if(dilSecim == 1) {
 800360c:	4b85      	ldr	r3, [pc, #532]	; (8003824 <menu+0x26ec>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d104      	bne.n	800361e <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003614:	4a89      	ldr	r2, [pc, #548]	; (800383c <menu+0x2704>)
 8003616:	2101      	movs	r1, #1
 8003618:	2002      	movs	r0, #2
 800361a:	f004 f9eb 	bl	80079f4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800361e:	2102      	movs	r1, #2
 8003620:	4887      	ldr	r0, [pc, #540]	; (8003840 <menu+0x2708>)
 8003622:	f005 fd0d 	bl	8009040 <HAL_GPIO_ReadPin>
 8003626:	4603      	mov	r3, r0
 8003628:	2b01      	cmp	r3, #1
 800362a:	d115      	bne.n	8003658 <menu+0x2520>
 800362c:	4b85      	ldr	r3, [pc, #532]	; (8003844 <menu+0x270c>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	f083 0301 	eor.w	r3, r3, #1
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00e      	beq.n	8003658 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 800363a:	4b7c      	ldr	r3, [pc, #496]	; (800382c <menu+0x26f4>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	3301      	adds	r3, #1
 8003640:	b2da      	uxtb	r2, r3
 8003642:	4b7a      	ldr	r3, [pc, #488]	; (800382c <menu+0x26f4>)
 8003644:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003646:	4b79      	ldr	r3, [pc, #484]	; (800382c <menu+0x26f4>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d902      	bls.n	8003654 <menu+0x251c>
				platformSilindirTipi = 0;
 800364e:	4b77      	ldr	r3, [pc, #476]	; (800382c <menu+0x26f4>)
 8003650:	2200      	movs	r2, #0
 8003652:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003654:	f001 f93c 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003658:	2104      	movs	r1, #4
 800365a:	4879      	ldr	r0, [pc, #484]	; (8003840 <menu+0x2708>)
 800365c:	f005 fcf0 	bl	8009040 <HAL_GPIO_ReadPin>
 8003660:	4603      	mov	r3, r0
 8003662:	2b01      	cmp	r3, #1
 8003664:	d115      	bne.n	8003692 <menu+0x255a>
 8003666:	4b77      	ldr	r3, [pc, #476]	; (8003844 <menu+0x270c>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	f083 0301 	eor.w	r3, r3, #1
 800366e:	b2db      	uxtb	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00e      	beq.n	8003692 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003674:	4b6d      	ldr	r3, [pc, #436]	; (800382c <menu+0x26f4>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	3b01      	subs	r3, #1
 800367a:	b2da      	uxtb	r2, r3
 800367c:	4b6b      	ldr	r3, [pc, #428]	; (800382c <menu+0x26f4>)
 800367e:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003680:	4b6a      	ldr	r3, [pc, #424]	; (800382c <menu+0x26f4>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003688:	4b68      	ldr	r3, [pc, #416]	; (800382c <menu+0x26f4>)
 800368a:	2201      	movs	r2, #1
 800368c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800368e:	f001 f91f 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003692:	2108      	movs	r1, #8
 8003694:	486a      	ldr	r0, [pc, #424]	; (8003840 <menu+0x2708>)
 8003696:	f005 fcd3 	bl	8009040 <HAL_GPIO_ReadPin>
 800369a:	4603      	mov	r3, r0
 800369c:	2b01      	cmp	r3, #1
 800369e:	d118      	bne.n	80036d2 <menu+0x259a>
 80036a0:	4b68      	ldr	r3, [pc, #416]	; (8003844 <menu+0x270c>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	f083 0301 	eor.w	r3, r3, #1
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d011      	beq.n	80036d2 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 80036ae:	4b5f      	ldr	r3, [pc, #380]	; (800382c <menu+0x26f4>)
 80036b0:	781a      	ldrb	r2, [r3, #0]
 80036b2:	4b65      	ldr	r3, [pc, #404]	; (8003848 <menu+0x2710>)
 80036b4:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 80036b6:	4b5d      	ldr	r3, [pc, #372]	; (800382c <menu+0x26f4>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d106      	bne.n	80036cc <menu+0x2594>
				altLimit = 1;
 80036be:	4b63      	ldr	r3, [pc, #396]	; (800384c <menu+0x2714>)
 80036c0:	2201      	movs	r2, #1
 80036c2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80036c4:	4b61      	ldr	r3, [pc, #388]	; (800384c <menu+0x2714>)
 80036c6:	781a      	ldrb	r2, [r3, #0]
 80036c8:	4b5f      	ldr	r3, [pc, #380]	; (8003848 <menu+0x2710>)
 80036ca:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80036cc:	4b60      	ldr	r3, [pc, #384]	; (8003850 <menu+0x2718>)
 80036ce:	2201      	movs	r2, #1
 80036d0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 80036d2:	4b60      	ldr	r3, [pc, #384]	; (8003854 <menu+0x271c>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b16      	cmp	r3, #22
 80036d8:	f040 8081 	bne.w	80037de <menu+0x26a6>
		if(dilSecim == 0) {
 80036dc:	4b51      	ldr	r3, [pc, #324]	; (8003824 <menu+0x26ec>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d105      	bne.n	80036f0 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 80036e4:	4a5c      	ldr	r2, [pc, #368]	; (8003858 <menu+0x2720>)
 80036e6:	2101      	movs	r1, #1
 80036e8:	2001      	movs	r0, #1
 80036ea:	f004 f983 	bl	80079f4 <lcd_print>
 80036ee:	e008      	b.n	8003702 <menu+0x25ca>
		} else if(dilSecim == 1) {
 80036f0:	4b4c      	ldr	r3, [pc, #304]	; (8003824 <menu+0x26ec>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d104      	bne.n	8003702 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 80036f8:	4a58      	ldr	r2, [pc, #352]	; (800385c <menu+0x2724>)
 80036fa:	2101      	movs	r1, #1
 80036fc:	2001      	movs	r0, #1
 80036fe:	f004 f979 	bl	80079f4 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003702:	4b48      	ldr	r3, [pc, #288]	; (8003824 <menu+0x26ec>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d105      	bne.n	8003716 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 800370a:	4a55      	ldr	r2, [pc, #340]	; (8003860 <menu+0x2728>)
 800370c:	2101      	movs	r1, #1
 800370e:	2002      	movs	r0, #2
 8003710:	f004 f970 	bl	80079f4 <lcd_print>
 8003714:	e008      	b.n	8003728 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003716:	4b43      	ldr	r3, [pc, #268]	; (8003824 <menu+0x26ec>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d104      	bne.n	8003728 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 800371e:	4a51      	ldr	r2, [pc, #324]	; (8003864 <menu+0x272c>)
 8003720:	2101      	movs	r1, #1
 8003722:	2002      	movs	r0, #2
 8003724:	f004 f966 	bl	80079f4 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003728:	4b4f      	ldr	r3, [pc, #316]	; (8003868 <menu+0x2730>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	220a      	movs	r2, #10
 800372e:	494f      	ldr	r1, [pc, #316]	; (800386c <menu+0x2734>)
 8003730:	4618      	mov	r0, r3
 8003732:	f008 fcb1 	bl	800c098 <itoa>
		lcd_print(2,16,snum);
 8003736:	4a4d      	ldr	r2, [pc, #308]	; (800386c <menu+0x2734>)
 8003738:	2110      	movs	r1, #16
 800373a:	2002      	movs	r0, #2
 800373c:	f004 f95a 	bl	80079f4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003740:	2102      	movs	r1, #2
 8003742:	483f      	ldr	r0, [pc, #252]	; (8003840 <menu+0x2708>)
 8003744:	f005 fc7c 	bl	8009040 <HAL_GPIO_ReadPin>
 8003748:	4603      	mov	r3, r0
 800374a:	2b01      	cmp	r3, #1
 800374c:	d115      	bne.n	800377a <menu+0x2642>
 800374e:	4b3d      	ldr	r3, [pc, #244]	; (8003844 <menu+0x270c>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	f083 0301 	eor.w	r3, r3, #1
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00e      	beq.n	800377a <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 800375c:	4b42      	ldr	r3, [pc, #264]	; (8003868 <menu+0x2730>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	3301      	adds	r3, #1
 8003762:	b2da      	uxtb	r2, r3
 8003764:	4b40      	ldr	r3, [pc, #256]	; (8003868 <menu+0x2730>)
 8003766:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003768:	4b3f      	ldr	r3, [pc, #252]	; (8003868 <menu+0x2730>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b05      	cmp	r3, #5
 800376e:	d902      	bls.n	8003776 <menu+0x263e>
				yukariValfTmr = 0;
 8003770:	4b3d      	ldr	r3, [pc, #244]	; (8003868 <menu+0x2730>)
 8003772:	2200      	movs	r2, #0
 8003774:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003776:	f001 f8ab 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800377a:	2104      	movs	r1, #4
 800377c:	4830      	ldr	r0, [pc, #192]	; (8003840 <menu+0x2708>)
 800377e:	f005 fc5f 	bl	8009040 <HAL_GPIO_ReadPin>
 8003782:	4603      	mov	r3, r0
 8003784:	2b01      	cmp	r3, #1
 8003786:	d115      	bne.n	80037b4 <menu+0x267c>
 8003788:	4b2e      	ldr	r3, [pc, #184]	; (8003844 <menu+0x270c>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	f083 0301 	eor.w	r3, r3, #1
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00e      	beq.n	80037b4 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003796:	4b34      	ldr	r3, [pc, #208]	; (8003868 <menu+0x2730>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	3b01      	subs	r3, #1
 800379c:	b2da      	uxtb	r2, r3
 800379e:	4b32      	ldr	r3, [pc, #200]	; (8003868 <menu+0x2730>)
 80037a0:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 80037a2:	4b31      	ldr	r3, [pc, #196]	; (8003868 <menu+0x2730>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d902      	bls.n	80037b0 <menu+0x2678>
		   		yukariValfTmr = 5;
 80037aa:	4b2f      	ldr	r3, [pc, #188]	; (8003868 <menu+0x2730>)
 80037ac:	2205      	movs	r2, #5
 80037ae:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037b0:	f001 f88e 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037b4:	2108      	movs	r1, #8
 80037b6:	4822      	ldr	r0, [pc, #136]	; (8003840 <menu+0x2708>)
 80037b8:	f005 fc42 	bl	8009040 <HAL_GPIO_ReadPin>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d10d      	bne.n	80037de <menu+0x26a6>
 80037c2:	4b20      	ldr	r3, [pc, #128]	; (8003844 <menu+0x270c>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	f083 0301 	eor.w	r3, r3, #1
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d006      	beq.n	80037de <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 80037d0:	4b25      	ldr	r3, [pc, #148]	; (8003868 <menu+0x2730>)
 80037d2:	781a      	ldrb	r2, [r3, #0]
 80037d4:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <menu+0x2710>)
 80037d6:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80037d8:	4b1d      	ldr	r3, [pc, #116]	; (8003850 <menu+0x2718>)
 80037da:	2201      	movs	r2, #1
 80037dc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80037de:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <menu+0x271c>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b17      	cmp	r3, #23
 80037e4:	f040 80ac 	bne.w	8003940 <menu+0x2808>
		if(dilSecim == 0) {
 80037e8:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <menu+0x26ec>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d105      	bne.n	80037fc <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 80037f0:	4a1f      	ldr	r2, [pc, #124]	; (8003870 <menu+0x2738>)
 80037f2:	2101      	movs	r1, #1
 80037f4:	2001      	movs	r0, #1
 80037f6:	f004 f8fd 	bl	80079f4 <lcd_print>
 80037fa:	e008      	b.n	800380e <menu+0x26d6>
		} else if(dilSecim == 1) {
 80037fc:	4b09      	ldr	r3, [pc, #36]	; (8003824 <menu+0x26ec>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d104      	bne.n	800380e <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003804:	4a1b      	ldr	r2, [pc, #108]	; (8003874 <menu+0x273c>)
 8003806:	2101      	movs	r1, #1
 8003808:	2001      	movs	r0, #1
 800380a:	f004 f8f3 	bl	80079f4 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <menu+0x26ec>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d130      	bne.n	8003878 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003816:	4a12      	ldr	r2, [pc, #72]	; (8003860 <menu+0x2728>)
 8003818:	2101      	movs	r1, #1
 800381a:	2002      	movs	r0, #2
 800381c:	f004 f8ea 	bl	80079f4 <lcd_print>
 8003820:	e033      	b.n	800388a <menu+0x2752>
 8003822:	bf00      	nop
 8003824:	20000215 	.word	0x20000215
 8003828:	0800d5ec 	.word	0x0800d5ec
 800382c:	20000207 	.word	0x20000207
 8003830:	0800d590 	.word	0x0800d590
 8003834:	0800d5a4 	.word	0x0800d5a4
 8003838:	0800d5b4 	.word	0x0800d5b4
 800383c:	0800d5c8 	.word	0x0800d5c8
 8003840:	40010800 	.word	0x40010800
 8003844:	20000223 	.word	0x20000223
 8003848:	20000120 	.word	0x20000120
 800384c:	200001fa 	.word	0x200001fa
 8003850:	20000220 	.word	0x20000220
 8003854:	200001f4 	.word	0x200001f4
 8003858:	0800d5fc 	.word	0x0800d5fc
 800385c:	0800d610 	.word	0x0800d610
 8003860:	0800d2b0 	.word	0x0800d2b0
 8003864:	0800d624 	.word	0x0800d624
 8003868:	20000208 	.word	0x20000208
 800386c:	20000190 	.word	0x20000190
 8003870:	0800d634 	.word	0x0800d634
 8003874:	0800d648 	.word	0x0800d648
			} else if(dilSecim == 1) {
 8003878:	4b98      	ldr	r3, [pc, #608]	; (8003adc <menu+0x29a4>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d104      	bne.n	800388a <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003880:	4a97      	ldr	r2, [pc, #604]	; (8003ae0 <menu+0x29a8>)
 8003882:	2101      	movs	r1, #1
 8003884:	2002      	movs	r0, #2
 8003886:	f004 f8b5 	bl	80079f4 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 800388a:	4b96      	ldr	r3, [pc, #600]	; (8003ae4 <menu+0x29ac>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	220a      	movs	r2, #10
 8003890:	4995      	ldr	r1, [pc, #596]	; (8003ae8 <menu+0x29b0>)
 8003892:	4618      	mov	r0, r3
 8003894:	f008 fc00 	bl	800c098 <itoa>
		lcd_print(2,16,snum);
 8003898:	4a93      	ldr	r2, [pc, #588]	; (8003ae8 <menu+0x29b0>)
 800389a:	2110      	movs	r1, #16
 800389c:	2002      	movs	r0, #2
 800389e:	f004 f8a9 	bl	80079f4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80038a2:	2102      	movs	r1, #2
 80038a4:	4891      	ldr	r0, [pc, #580]	; (8003aec <menu+0x29b4>)
 80038a6:	f005 fbcb 	bl	8009040 <HAL_GPIO_ReadPin>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d115      	bne.n	80038dc <menu+0x27a4>
 80038b0:	4b8f      	ldr	r3, [pc, #572]	; (8003af0 <menu+0x29b8>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	f083 0301 	eor.w	r3, r3, #1
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00e      	beq.n	80038dc <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 80038be:	4b89      	ldr	r3, [pc, #548]	; (8003ae4 <menu+0x29ac>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	3301      	adds	r3, #1
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	4b87      	ldr	r3, [pc, #540]	; (8003ae4 <menu+0x29ac>)
 80038c8:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 80038ca:	4b86      	ldr	r3, [pc, #536]	; (8003ae4 <menu+0x29ac>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b05      	cmp	r3, #5
 80038d0:	d902      	bls.n	80038d8 <menu+0x27a0>
				asagiValfTmr = 0;
 80038d2:	4b84      	ldr	r3, [pc, #528]	; (8003ae4 <menu+0x29ac>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038d8:	f000 fffa 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038dc:	2104      	movs	r1, #4
 80038de:	4883      	ldr	r0, [pc, #524]	; (8003aec <menu+0x29b4>)
 80038e0:	f005 fbae 	bl	8009040 <HAL_GPIO_ReadPin>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d115      	bne.n	8003916 <menu+0x27de>
 80038ea:	4b81      	ldr	r3, [pc, #516]	; (8003af0 <menu+0x29b8>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	f083 0301 	eor.w	r3, r3, #1
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00e      	beq.n	8003916 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 80038f8:	4b7a      	ldr	r3, [pc, #488]	; (8003ae4 <menu+0x29ac>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	4b78      	ldr	r3, [pc, #480]	; (8003ae4 <menu+0x29ac>)
 8003902:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003904:	4b77      	ldr	r3, [pc, #476]	; (8003ae4 <menu+0x29ac>)
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	2b06      	cmp	r3, #6
 800390a:	d902      	bls.n	8003912 <menu+0x27da>
		   		asagiValfTmr = 5;
 800390c:	4b75      	ldr	r3, [pc, #468]	; (8003ae4 <menu+0x29ac>)
 800390e:	2205      	movs	r2, #5
 8003910:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003912:	f000 ffdd 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003916:	2108      	movs	r1, #8
 8003918:	4874      	ldr	r0, [pc, #464]	; (8003aec <menu+0x29b4>)
 800391a:	f005 fb91 	bl	8009040 <HAL_GPIO_ReadPin>
 800391e:	4603      	mov	r3, r0
 8003920:	2b01      	cmp	r3, #1
 8003922:	d10d      	bne.n	8003940 <menu+0x2808>
 8003924:	4b72      	ldr	r3, [pc, #456]	; (8003af0 <menu+0x29b8>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	f083 0301 	eor.w	r3, r3, #1
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	d006      	beq.n	8003940 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003932:	4b6c      	ldr	r3, [pc, #432]	; (8003ae4 <menu+0x29ac>)
 8003934:	781a      	ldrb	r2, [r3, #0]
 8003936:	4b6f      	ldr	r3, [pc, #444]	; (8003af4 <menu+0x29bc>)
 8003938:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 800393a:	4b6f      	ldr	r3, [pc, #444]	; (8003af8 <menu+0x29c0>)
 800393c:	2201      	movs	r2, #1
 800393e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003940:	4b6e      	ldr	r3, [pc, #440]	; (8003afc <menu+0x29c4>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b18      	cmp	r3, #24
 8003946:	f040 809d 	bne.w	8003a84 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 800394a:	4b6d      	ldr	r3, [pc, #436]	; (8003b00 <menu+0x29c8>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d113      	bne.n	800397a <menu+0x2842>
			if(dilSecim == 0) {
 8003952:	4b62      	ldr	r3, [pc, #392]	; (8003adc <menu+0x29a4>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d105      	bne.n	8003966 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 800395a:	4a6a      	ldr	r2, [pc, #424]	; (8003b04 <menu+0x29cc>)
 800395c:	2101      	movs	r1, #1
 800395e:	2001      	movs	r0, #1
 8003960:	f004 f848 	bl	80079f4 <lcd_print>
 8003964:	e020      	b.n	80039a8 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003966:	4b5d      	ldr	r3, [pc, #372]	; (8003adc <menu+0x29a4>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d11c      	bne.n	80039a8 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 800396e:	4a66      	ldr	r2, [pc, #408]	; (8003b08 <menu+0x29d0>)
 8003970:	2101      	movs	r1, #1
 8003972:	2001      	movs	r0, #1
 8003974:	f004 f83e 	bl	80079f4 <lcd_print>
 8003978:	e016      	b.n	80039a8 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800397a:	4b61      	ldr	r3, [pc, #388]	; (8003b00 <menu+0x29c8>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d112      	bne.n	80039a8 <menu+0x2870>
			if(dilSecim == 0) {
 8003982:	4b56      	ldr	r3, [pc, #344]	; (8003adc <menu+0x29a4>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d105      	bne.n	8003996 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 800398a:	4a60      	ldr	r2, [pc, #384]	; (8003b0c <menu+0x29d4>)
 800398c:	2101      	movs	r1, #1
 800398e:	2001      	movs	r0, #1
 8003990:	f004 f830 	bl	80079f4 <lcd_print>
 8003994:	e008      	b.n	80039a8 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003996:	4b51      	ldr	r3, [pc, #324]	; (8003adc <menu+0x29a4>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d104      	bne.n	80039a8 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 800399e:	4a5c      	ldr	r2, [pc, #368]	; (8003b10 <menu+0x29d8>)
 80039a0:	2101      	movs	r1, #1
 80039a2:	2001      	movs	r0, #1
 80039a4:	f004 f826 	bl	80079f4 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 80039a8:	4b4c      	ldr	r3, [pc, #304]	; (8003adc <menu+0x29a4>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d105      	bne.n	80039bc <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 80039b0:	4a58      	ldr	r2, [pc, #352]	; (8003b14 <menu+0x29dc>)
 80039b2:	2101      	movs	r1, #1
 80039b4:	2002      	movs	r0, #2
 80039b6:	f004 f81d 	bl	80079f4 <lcd_print>
 80039ba:	e008      	b.n	80039ce <menu+0x2896>
			} else if(dilSecim == 1) {
 80039bc:	4b47      	ldr	r3, [pc, #284]	; (8003adc <menu+0x29a4>)
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d104      	bne.n	80039ce <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 80039c4:	4a46      	ldr	r2, [pc, #280]	; (8003ae0 <menu+0x29a8>)
 80039c6:	2101      	movs	r1, #1
 80039c8:	2002      	movs	r0, #2
 80039ca:	f004 f813 	bl	80079f4 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 80039ce:	4b52      	ldr	r3, [pc, #328]	; (8003b18 <menu+0x29e0>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	220a      	movs	r2, #10
 80039d4:	4944      	ldr	r1, [pc, #272]	; (8003ae8 <menu+0x29b0>)
 80039d6:	4618      	mov	r0, r3
 80039d8:	f008 fb5e 	bl	800c098 <itoa>
		lcd_print(2, 16, snum);
 80039dc:	4a42      	ldr	r2, [pc, #264]	; (8003ae8 <menu+0x29b0>)
 80039de:	2110      	movs	r1, #16
 80039e0:	2002      	movs	r0, #2
 80039e2:	f004 f807 	bl	80079f4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039e6:	2102      	movs	r1, #2
 80039e8:	4840      	ldr	r0, [pc, #256]	; (8003aec <menu+0x29b4>)
 80039ea:	f005 fb29 	bl	8009040 <HAL_GPIO_ReadPin>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d115      	bne.n	8003a20 <menu+0x28e8>
 80039f4:	4b3e      	ldr	r3, [pc, #248]	; (8003af0 <menu+0x29b8>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	f083 0301 	eor.w	r3, r3, #1
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00e      	beq.n	8003a20 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003a02:	4b45      	ldr	r3, [pc, #276]	; (8003b18 <menu+0x29e0>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	3301      	adds	r3, #1
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	4b43      	ldr	r3, [pc, #268]	; (8003b18 <menu+0x29e0>)
 8003a0c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003a0e:	4b42      	ldr	r3, [pc, #264]	; (8003b18 <menu+0x29e0>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b05      	cmp	r3, #5
 8003a14:	d902      	bls.n	8003a1c <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003a16:	4b40      	ldr	r3, [pc, #256]	; (8003b18 <menu+0x29e0>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a1c:	f000 ff58 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a20:	2104      	movs	r1, #4
 8003a22:	4832      	ldr	r0, [pc, #200]	; (8003aec <menu+0x29b4>)
 8003a24:	f005 fb0c 	bl	8009040 <HAL_GPIO_ReadPin>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d115      	bne.n	8003a5a <menu+0x2922>
 8003a2e:	4b30      	ldr	r3, [pc, #192]	; (8003af0 <menu+0x29b8>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	f083 0301 	eor.w	r3, r3, #1
 8003a36:	b2db      	uxtb	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00e      	beq.n	8003a5a <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003a3c:	4b36      	ldr	r3, [pc, #216]	; (8003b18 <menu+0x29e0>)
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	4b34      	ldr	r3, [pc, #208]	; (8003b18 <menu+0x29e0>)
 8003a46:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003a48:	4b33      	ldr	r3, [pc, #204]	; (8003b18 <menu+0x29e0>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b06      	cmp	r3, #6
 8003a4e:	d902      	bls.n	8003a56 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003a50:	4b31      	ldr	r3, [pc, #196]	; (8003b18 <menu+0x29e0>)
 8003a52:	2205      	movs	r2, #5
 8003a54:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a56:	f000 ff3b 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a5a:	2108      	movs	r1, #8
 8003a5c:	4823      	ldr	r0, [pc, #140]	; (8003aec <menu+0x29b4>)
 8003a5e:	f005 faef 	bl	8009040 <HAL_GPIO_ReadPin>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d10d      	bne.n	8003a84 <menu+0x294c>
 8003a68:	4b21      	ldr	r3, [pc, #132]	; (8003af0 <menu+0x29b8>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	f083 0301 	eor.w	r3, r3, #1
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d006      	beq.n	8003a84 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003a76:	4b28      	ldr	r3, [pc, #160]	; (8003b18 <menu+0x29e0>)
 8003a78:	781a      	ldrb	r2, [r3, #0]
 8003a7a:	4b1e      	ldr	r3, [pc, #120]	; (8003af4 <menu+0x29bc>)
 8003a7c:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003a7e:	4b1e      	ldr	r3, [pc, #120]	; (8003af8 <menu+0x29c0>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003a84:	4b1d      	ldr	r3, [pc, #116]	; (8003afc <menu+0x29c4>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b19      	cmp	r3, #25
 8003a8a:	f040 80c4 	bne.w	8003c16 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003a8e:	4b1c      	ldr	r3, [pc, #112]	; (8003b00 <menu+0x29c8>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d113      	bne.n	8003abe <menu+0x2986>
			if(dilSecim == 0) {
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <menu+0x29a4>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d105      	bne.n	8003aaa <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003a9e:	4a1f      	ldr	r2, [pc, #124]	; (8003b1c <menu+0x29e4>)
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	2001      	movs	r0, #1
 8003aa4:	f003 ffa6 	bl	80079f4 <lcd_print>
 8003aa8:	e047      	b.n	8003b3a <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <menu+0x29a4>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d143      	bne.n	8003b3a <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003ab2:	4a1b      	ldr	r2, [pc, #108]	; (8003b20 <menu+0x29e8>)
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	2001      	movs	r0, #1
 8003ab8:	f003 ff9c 	bl	80079f4 <lcd_print>
 8003abc:	e03d      	b.n	8003b3a <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003abe:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <menu+0x29c8>)
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d139      	bne.n	8003b3a <menu+0x2a02>
			if(dilSecim == 0) {
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <menu+0x29a4>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d12c      	bne.n	8003b28 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003ace:	4a15      	ldr	r2, [pc, #84]	; (8003b24 <menu+0x29ec>)
 8003ad0:	2101      	movs	r1, #1
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f003 ff8e 	bl	80079f4 <lcd_print>
 8003ad8:	e02f      	b.n	8003b3a <menu+0x2a02>
 8003ada:	bf00      	nop
 8003adc:	20000215 	.word	0x20000215
 8003ae0:	0800d624 	.word	0x0800d624
 8003ae4:	20000209 	.word	0x20000209
 8003ae8:	20000190 	.word	0x20000190
 8003aec:	40010800 	.word	0x40010800
 8003af0:	20000223 	.word	0x20000223
 8003af4:	20000120 	.word	0x20000120
 8003af8:	20000220 	.word	0x20000220
 8003afc:	200001f4 	.word	0x200001f4
 8003b00:	20000203 	.word	0x20000203
 8003b04:	0800d65c 	.word	0x0800d65c
 8003b08:	0800d670 	.word	0x0800d670
 8003b0c:	0800d684 	.word	0x0800d684
 8003b10:	0800d698 	.word	0x0800d698
 8003b14:	0800d2b0 	.word	0x0800d2b0
 8003b18:	2000020a 	.word	0x2000020a
 8003b1c:	0800d6ac 	.word	0x0800d6ac
 8003b20:	0800d6c0 	.word	0x0800d6c0
 8003b24:	0800d6d4 	.word	0x0800d6d4
			} else if(dilSecim == 1) {
 8003b28:	4b73      	ldr	r3, [pc, #460]	; (8003cf8 <menu+0x2bc0>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d104      	bne.n	8003b3a <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003b30:	4a72      	ldr	r2, [pc, #456]	; (8003cfc <menu+0x2bc4>)
 8003b32:	2101      	movs	r1, #1
 8003b34:	2001      	movs	r0, #1
 8003b36:	f003 ff5d 	bl	80079f4 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003b3a:	4b6f      	ldr	r3, [pc, #444]	; (8003cf8 <menu+0x2bc0>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d105      	bne.n	8003b4e <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b42:	4a6f      	ldr	r2, [pc, #444]	; (8003d00 <menu+0x2bc8>)
 8003b44:	2101      	movs	r1, #1
 8003b46:	2002      	movs	r0, #2
 8003b48:	f003 ff54 	bl	80079f4 <lcd_print>
 8003b4c:	e008      	b.n	8003b60 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003b4e:	4b6a      	ldr	r3, [pc, #424]	; (8003cf8 <menu+0x2bc0>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d104      	bne.n	8003b60 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003b56:	4a6b      	ldr	r2, [pc, #428]	; (8003d04 <menu+0x2bcc>)
 8003b58:	2101      	movs	r1, #1
 8003b5a:	2002      	movs	r0, #2
 8003b5c:	f003 ff4a 	bl	80079f4 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003b60:	4b69      	ldr	r3, [pc, #420]	; (8003d08 <menu+0x2bd0>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	220a      	movs	r2, #10
 8003b66:	4969      	ldr	r1, [pc, #420]	; (8003d0c <menu+0x2bd4>)
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f008 fa95 	bl	800c098 <itoa>
		lcd_print(2,16,snum);
 8003b6e:	4a67      	ldr	r2, [pc, #412]	; (8003d0c <menu+0x2bd4>)
 8003b70:	2110      	movs	r1, #16
 8003b72:	2002      	movs	r0, #2
 8003b74:	f003 ff3e 	bl	80079f4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b78:	2102      	movs	r1, #2
 8003b7a:	4865      	ldr	r0, [pc, #404]	; (8003d10 <menu+0x2bd8>)
 8003b7c:	f005 fa60 	bl	8009040 <HAL_GPIO_ReadPin>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d115      	bne.n	8003bb2 <menu+0x2a7a>
 8003b86:	4b63      	ldr	r3, [pc, #396]	; (8003d14 <menu+0x2bdc>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	f083 0301 	eor.w	r3, r3, #1
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00e      	beq.n	8003bb2 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003b94:	4b5c      	ldr	r3, [pc, #368]	; (8003d08 <menu+0x2bd0>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	4b5a      	ldr	r3, [pc, #360]	; (8003d08 <menu+0x2bd0>)
 8003b9e:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003ba0:	4b59      	ldr	r3, [pc, #356]	; (8003d08 <menu+0x2bd0>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b05      	cmp	r3, #5
 8003ba6:	d902      	bls.n	8003bae <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003ba8:	4b57      	ldr	r3, [pc, #348]	; (8003d08 <menu+0x2bd0>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003bae:	f000 fe8f 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bb2:	2104      	movs	r1, #4
 8003bb4:	4856      	ldr	r0, [pc, #344]	; (8003d10 <menu+0x2bd8>)
 8003bb6:	f005 fa43 	bl	8009040 <HAL_GPIO_ReadPin>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d115      	bne.n	8003bec <menu+0x2ab4>
 8003bc0:	4b54      	ldr	r3, [pc, #336]	; (8003d14 <menu+0x2bdc>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	f083 0301 	eor.w	r3, r3, #1
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00e      	beq.n	8003bec <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003bce:	4b4e      	ldr	r3, [pc, #312]	; (8003d08 <menu+0x2bd0>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	4b4c      	ldr	r3, [pc, #304]	; (8003d08 <menu+0x2bd0>)
 8003bd8:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003bda:	4b4b      	ldr	r3, [pc, #300]	; (8003d08 <menu+0x2bd0>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2b06      	cmp	r3, #6
 8003be0:	d902      	bls.n	8003be8 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003be2:	4b49      	ldr	r3, [pc, #292]	; (8003d08 <menu+0x2bd0>)
 8003be4:	2205      	movs	r2, #5
 8003be6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003be8:	f000 fe72 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bec:	2108      	movs	r1, #8
 8003bee:	4848      	ldr	r0, [pc, #288]	; (8003d10 <menu+0x2bd8>)
 8003bf0:	f005 fa26 	bl	8009040 <HAL_GPIO_ReadPin>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d10d      	bne.n	8003c16 <menu+0x2ade>
 8003bfa:	4b46      	ldr	r3, [pc, #280]	; (8003d14 <menu+0x2bdc>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	f083 0301 	eor.w	r3, r3, #1
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d006      	beq.n	8003c16 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003c08:	4b3f      	ldr	r3, [pc, #252]	; (8003d08 <menu+0x2bd0>)
 8003c0a:	781a      	ldrb	r2, [r3, #0]
 8003c0c:	4b42      	ldr	r3, [pc, #264]	; (8003d18 <menu+0x2be0>)
 8003c0e:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003c10:	4b42      	ldr	r3, [pc, #264]	; (8003d1c <menu+0x2be4>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003c16:	4b42      	ldr	r3, [pc, #264]	; (8003d20 <menu+0x2be8>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b1a      	cmp	r3, #26
 8003c1c:	f040 80ec 	bne.w	8003df8 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003c20:	4b35      	ldr	r3, [pc, #212]	; (8003cf8 <menu+0x2bc0>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d105      	bne.n	8003c34 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003c28:	4a3e      	ldr	r2, [pc, #248]	; (8003d24 <menu+0x2bec>)
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	2001      	movs	r0, #1
 8003c2e:	f003 fee1 	bl	80079f4 <lcd_print>
 8003c32:	e008      	b.n	8003c46 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003c34:	4b30      	ldr	r3, [pc, #192]	; (8003cf8 <menu+0x2bc0>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d104      	bne.n	8003c46 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003c3c:	4a3a      	ldr	r2, [pc, #232]	; (8003d28 <menu+0x2bf0>)
 8003c3e:	2101      	movs	r1, #1
 8003c40:	2001      	movs	r0, #1
 8003c42:	f003 fed7 	bl	80079f4 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003c46:	4b39      	ldr	r3, [pc, #228]	; (8003d2c <menu+0x2bf4>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b63      	cmp	r3, #99	; 0x63
 8003c4c:	d91e      	bls.n	8003c8c <menu+0x2b54>
			if(dilSecim == 0) {
 8003c4e:	4b2a      	ldr	r3, [pc, #168]	; (8003cf8 <menu+0x2bc0>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d104      	bne.n	8003c60 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c56:	4a2a      	ldr	r2, [pc, #168]	; (8003d00 <menu+0x2bc8>)
 8003c58:	2101      	movs	r1, #1
 8003c5a:	2002      	movs	r0, #2
 8003c5c:	f003 feca 	bl	80079f4 <lcd_print>
			}
			if(dilSecim == 1) {
 8003c60:	4b25      	ldr	r3, [pc, #148]	; (8003cf8 <menu+0x2bc0>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d104      	bne.n	8003c72 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003c68:	4a26      	ldr	r2, [pc, #152]	; (8003d04 <menu+0x2bcc>)
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	2002      	movs	r0, #2
 8003c6e:	f003 fec1 	bl	80079f4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003c72:	4b2e      	ldr	r3, [pc, #184]	; (8003d2c <menu+0x2bf4>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	220a      	movs	r2, #10
 8003c78:	4924      	ldr	r1, [pc, #144]	; (8003d0c <menu+0x2bd4>)
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f008 fa0c 	bl	800c098 <itoa>
			lcd_print(2,14,snum);
 8003c80:	4a22      	ldr	r2, [pc, #136]	; (8003d0c <menu+0x2bd4>)
 8003c82:	210e      	movs	r1, #14
 8003c84:	2002      	movs	r0, #2
 8003c86:	f003 feb5 	bl	80079f4 <lcd_print>
 8003c8a:	e066      	b.n	8003d5a <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003c8c:	4b27      	ldr	r3, [pc, #156]	; (8003d2c <menu+0x2bf4>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b09      	cmp	r3, #9
 8003c92:	d923      	bls.n	8003cdc <menu+0x2ba4>
 8003c94:	4b25      	ldr	r3, [pc, #148]	; (8003d2c <menu+0x2bf4>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b63      	cmp	r3, #99	; 0x63
 8003c9a:	d81f      	bhi.n	8003cdc <menu+0x2ba4>
			if(dilSecim == 0) {
 8003c9c:	4b16      	ldr	r3, [pc, #88]	; (8003cf8 <menu+0x2bc0>)
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d105      	bne.n	8003cb0 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ca4:	4a16      	ldr	r2, [pc, #88]	; (8003d00 <menu+0x2bc8>)
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	2002      	movs	r0, #2
 8003caa:	f003 fea3 	bl	80079f4 <lcd_print>
 8003cae:	e008      	b.n	8003cc2 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003cb0:	4b11      	ldr	r3, [pc, #68]	; (8003cf8 <menu+0x2bc0>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d104      	bne.n	8003cc2 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003cb8:	4a12      	ldr	r2, [pc, #72]	; (8003d04 <menu+0x2bcc>)
 8003cba:	2101      	movs	r1, #1
 8003cbc:	2002      	movs	r0, #2
 8003cbe:	f003 fe99 	bl	80079f4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003cc2:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <menu+0x2bf4>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	220a      	movs	r2, #10
 8003cc8:	4910      	ldr	r1, [pc, #64]	; (8003d0c <menu+0x2bd4>)
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f008 f9e4 	bl	800c098 <itoa>
			lcd_print(2, 15, snum);
 8003cd0:	4a0e      	ldr	r2, [pc, #56]	; (8003d0c <menu+0x2bd4>)
 8003cd2:	210f      	movs	r1, #15
 8003cd4:	2002      	movs	r0, #2
 8003cd6:	f003 fe8d 	bl	80079f4 <lcd_print>
 8003cda:	e03e      	b.n	8003d5a <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003cdc:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <menu+0x2bf4>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2b09      	cmp	r3, #9
 8003ce2:	d83a      	bhi.n	8003d5a <menu+0x2c22>
			if(dilSecim == 0) {
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <menu+0x2bc0>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d121      	bne.n	8003d30 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003cec:	4a04      	ldr	r2, [pc, #16]	; (8003d00 <menu+0x2bc8>)
 8003cee:	2101      	movs	r1, #1
 8003cf0:	2002      	movs	r0, #2
 8003cf2:	f003 fe7f 	bl	80079f4 <lcd_print>
 8003cf6:	e024      	b.n	8003d42 <menu+0x2c0a>
 8003cf8:	20000215 	.word	0x20000215
 8003cfc:	0800d6e8 	.word	0x0800d6e8
 8003d00:	0800d2b0 	.word	0x0800d2b0
 8003d04:	0800d624 	.word	0x0800d624
 8003d08:	2000020b 	.word	0x2000020b
 8003d0c:	20000190 	.word	0x20000190
 8003d10:	40010800 	.word	0x40010800
 8003d14:	20000223 	.word	0x20000223
 8003d18:	20000120 	.word	0x20000120
 8003d1c:	20000220 	.word	0x20000220
 8003d20:	200001f4 	.word	0x200001f4
 8003d24:	0800d6fc 	.word	0x0800d6fc
 8003d28:	0800d710 	.word	0x0800d710
 8003d2c:	2000020c 	.word	0x2000020c
			} else if(dilSecim == 1) {
 8003d30:	4b8f      	ldr	r3, [pc, #572]	; (8003f70 <menu+0x2e38>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d104      	bne.n	8003d42 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003d38:	4a8e      	ldr	r2, [pc, #568]	; (8003f74 <menu+0x2e3c>)
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	2002      	movs	r0, #2
 8003d3e:	f003 fe59 	bl	80079f4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003d42:	4b8d      	ldr	r3, [pc, #564]	; (8003f78 <menu+0x2e40>)
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	220a      	movs	r2, #10
 8003d48:	498c      	ldr	r1, [pc, #560]	; (8003f7c <menu+0x2e44>)
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f008 f9a4 	bl	800c098 <itoa>
			lcd_print(2, 16, snum);
 8003d50:	4a8a      	ldr	r2, [pc, #552]	; (8003f7c <menu+0x2e44>)
 8003d52:	2110      	movs	r1, #16
 8003d54:	2002      	movs	r0, #2
 8003d56:	f003 fe4d 	bl	80079f4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d5a:	2102      	movs	r1, #2
 8003d5c:	4888      	ldr	r0, [pc, #544]	; (8003f80 <menu+0x2e48>)
 8003d5e:	f005 f96f 	bl	8009040 <HAL_GPIO_ReadPin>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d115      	bne.n	8003d94 <menu+0x2c5c>
 8003d68:	4b86      	ldr	r3, [pc, #536]	; (8003f84 <menu+0x2e4c>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	f083 0301 	eor.w	r3, r3, #1
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00e      	beq.n	8003d94 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003d76:	4b80      	ldr	r3, [pc, #512]	; (8003f78 <menu+0x2e40>)
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	4b7e      	ldr	r3, [pc, #504]	; (8003f78 <menu+0x2e40>)
 8003d80:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003d82:	4b7d      	ldr	r3, [pc, #500]	; (8003f78 <menu+0x2e40>)
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	2bb4      	cmp	r3, #180	; 0xb4
 8003d88:	d902      	bls.n	8003d90 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003d8a:	4b7b      	ldr	r3, [pc, #492]	; (8003f78 <menu+0x2e40>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d90:	f000 fd9e 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d94:	2104      	movs	r1, #4
 8003d96:	487a      	ldr	r0, [pc, #488]	; (8003f80 <menu+0x2e48>)
 8003d98:	f005 f952 	bl	8009040 <HAL_GPIO_ReadPin>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d115      	bne.n	8003dce <menu+0x2c96>
 8003da2:	4b78      	ldr	r3, [pc, #480]	; (8003f84 <menu+0x2e4c>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	f083 0301 	eor.w	r3, r3, #1
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00e      	beq.n	8003dce <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003db0:	4b71      	ldr	r3, [pc, #452]	; (8003f78 <menu+0x2e40>)
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	4b6f      	ldr	r3, [pc, #444]	; (8003f78 <menu+0x2e40>)
 8003dba:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003dbc:	4b6e      	ldr	r3, [pc, #440]	; (8003f78 <menu+0x2e40>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2bb5      	cmp	r3, #181	; 0xb5
 8003dc2:	d902      	bls.n	8003dca <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003dc4:	4b6c      	ldr	r3, [pc, #432]	; (8003f78 <menu+0x2e40>)
 8003dc6:	22b4      	movs	r2, #180	; 0xb4
 8003dc8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003dca:	f000 fd81 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dce:	2108      	movs	r1, #8
 8003dd0:	486b      	ldr	r0, [pc, #428]	; (8003f80 <menu+0x2e48>)
 8003dd2:	f005 f935 	bl	8009040 <HAL_GPIO_ReadPin>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d10d      	bne.n	8003df8 <menu+0x2cc0>
 8003ddc:	4b69      	ldr	r3, [pc, #420]	; (8003f84 <menu+0x2e4c>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	f083 0301 	eor.w	r3, r3, #1
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d006      	beq.n	8003df8 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003dea:	4b63      	ldr	r3, [pc, #396]	; (8003f78 <menu+0x2e40>)
 8003dec:	781a      	ldrb	r2, [r3, #0]
 8003dee:	4b66      	ldr	r3, [pc, #408]	; (8003f88 <menu+0x2e50>)
 8003df0:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003df2:	4b66      	ldr	r3, [pc, #408]	; (8003f8c <menu+0x2e54>)
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003df8:	4b65      	ldr	r3, [pc, #404]	; (8003f90 <menu+0x2e58>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b1b      	cmp	r3, #27
 8003dfe:	f040 8083 	bne.w	8003f08 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003e02:	4a64      	ldr	r2, [pc, #400]	; (8003f94 <menu+0x2e5c>)
 8003e04:	2101      	movs	r1, #1
 8003e06:	2001      	movs	r0, #1
 8003e08:	f003 fdf4 	bl	80079f4 <lcd_print>

		if(buzzer == 0) {
 8003e0c:	4b62      	ldr	r3, [pc, #392]	; (8003f98 <menu+0x2e60>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d113      	bne.n	8003e3c <menu+0x2d04>
			if(dilSecim == 0) {
 8003e14:	4b56      	ldr	r3, [pc, #344]	; (8003f70 <menu+0x2e38>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d105      	bne.n	8003e28 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003e1c:	4a5f      	ldr	r2, [pc, #380]	; (8003f9c <menu+0x2e64>)
 8003e1e:	2101      	movs	r1, #1
 8003e20:	2002      	movs	r0, #2
 8003e22:	f003 fde7 	bl	80079f4 <lcd_print>
 8003e26:	e020      	b.n	8003e6a <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003e28:	4b51      	ldr	r3, [pc, #324]	; (8003f70 <menu+0x2e38>)
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d11c      	bne.n	8003e6a <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003e30:	4a5b      	ldr	r2, [pc, #364]	; (8003fa0 <menu+0x2e68>)
 8003e32:	2101      	movs	r1, #1
 8003e34:	2002      	movs	r0, #2
 8003e36:	f003 fddd 	bl	80079f4 <lcd_print>
 8003e3a:	e016      	b.n	8003e6a <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003e3c:	4b56      	ldr	r3, [pc, #344]	; (8003f98 <menu+0x2e60>)
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d112      	bne.n	8003e6a <menu+0x2d32>
			if(dilSecim == 0) {
 8003e44:	4b4a      	ldr	r3, [pc, #296]	; (8003f70 <menu+0x2e38>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d105      	bne.n	8003e58 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003e4c:	4a55      	ldr	r2, [pc, #340]	; (8003fa4 <menu+0x2e6c>)
 8003e4e:	2101      	movs	r1, #1
 8003e50:	2002      	movs	r0, #2
 8003e52:	f003 fdcf 	bl	80079f4 <lcd_print>
 8003e56:	e008      	b.n	8003e6a <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003e58:	4b45      	ldr	r3, [pc, #276]	; (8003f70 <menu+0x2e38>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d104      	bne.n	8003e6a <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003e60:	4a51      	ldr	r2, [pc, #324]	; (8003fa8 <menu+0x2e70>)
 8003e62:	2101      	movs	r1, #1
 8003e64:	2002      	movs	r0, #2
 8003e66:	f003 fdc5 	bl	80079f4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	4844      	ldr	r0, [pc, #272]	; (8003f80 <menu+0x2e48>)
 8003e6e:	f005 f8e7 	bl	8009040 <HAL_GPIO_ReadPin>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d115      	bne.n	8003ea4 <menu+0x2d6c>
 8003e78:	4b42      	ldr	r3, [pc, #264]	; (8003f84 <menu+0x2e4c>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	f083 0301 	eor.w	r3, r3, #1
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00e      	beq.n	8003ea4 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003e86:	4b44      	ldr	r3, [pc, #272]	; (8003f98 <menu+0x2e60>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	b2da      	uxtb	r2, r3
 8003e8e:	4b42      	ldr	r3, [pc, #264]	; (8003f98 <menu+0x2e60>)
 8003e90:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003e92:	4b41      	ldr	r3, [pc, #260]	; (8003f98 <menu+0x2e60>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d902      	bls.n	8003ea0 <menu+0x2d68>
				buzzer = 0;
 8003e9a:	4b3f      	ldr	r3, [pc, #252]	; (8003f98 <menu+0x2e60>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ea0:	f000 fd16 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ea4:	2104      	movs	r1, #4
 8003ea6:	4836      	ldr	r0, [pc, #216]	; (8003f80 <menu+0x2e48>)
 8003ea8:	f005 f8ca 	bl	8009040 <HAL_GPIO_ReadPin>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d115      	bne.n	8003ede <menu+0x2da6>
 8003eb2:	4b34      	ldr	r3, [pc, #208]	; (8003f84 <menu+0x2e4c>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	f083 0301 	eor.w	r3, r3, #1
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00e      	beq.n	8003ede <menu+0x2da6>
			buzzer = buzzer - 1;
 8003ec0:	4b35      	ldr	r3, [pc, #212]	; (8003f98 <menu+0x2e60>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	4b33      	ldr	r3, [pc, #204]	; (8003f98 <menu+0x2e60>)
 8003eca:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003ecc:	4b32      	ldr	r3, [pc, #200]	; (8003f98 <menu+0x2e60>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <menu+0x2da2>
		   		buzzer = 1;
 8003ed4:	4b30      	ldr	r3, [pc, #192]	; (8003f98 <menu+0x2e60>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003eda:	f000 fcf9 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ede:	2108      	movs	r1, #8
 8003ee0:	4827      	ldr	r0, [pc, #156]	; (8003f80 <menu+0x2e48>)
 8003ee2:	f005 f8ad 	bl	8009040 <HAL_GPIO_ReadPin>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d10d      	bne.n	8003f08 <menu+0x2dd0>
 8003eec:	4b25      	ldr	r3, [pc, #148]	; (8003f84 <menu+0x2e4c>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	f083 0301 	eor.w	r3, r3, #1
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d006      	beq.n	8003f08 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003efa:	4b27      	ldr	r3, [pc, #156]	; (8003f98 <menu+0x2e60>)
 8003efc:	781a      	ldrb	r2, [r3, #0]
 8003efe:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <menu+0x2e50>)
 8003f00:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003f02:	4b22      	ldr	r3, [pc, #136]	; (8003f8c <menu+0x2e54>)
 8003f04:	2201      	movs	r2, #1
 8003f06:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003f08:	4b21      	ldr	r3, [pc, #132]	; (8003f90 <menu+0x2e58>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b1c      	cmp	r3, #28
 8003f0e:	f040 80ab 	bne.w	8004068 <menu+0x2f30>
		calismaSayModu = 0;
 8003f12:	4b26      	ldr	r3, [pc, #152]	; (8003fac <menu+0x2e74>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003f18:	4a25      	ldr	r2, [pc, #148]	; (8003fb0 <menu+0x2e78>)
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	f003 fd69 	bl	80079f4 <lcd_print>

		if(demoMode == 0) {
 8003f22:	4b24      	ldr	r3, [pc, #144]	; (8003fb4 <menu+0x2e7c>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d113      	bne.n	8003f52 <menu+0x2e1a>
			if(dilSecim == 0) {
 8003f2a:	4b11      	ldr	r3, [pc, #68]	; (8003f70 <menu+0x2e38>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d105      	bne.n	8003f3e <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8003f32:	4a1a      	ldr	r2, [pc, #104]	; (8003f9c <menu+0x2e64>)
 8003f34:	2101      	movs	r1, #1
 8003f36:	2002      	movs	r0, #2
 8003f38:	f003 fd5c 	bl	80079f4 <lcd_print>
 8003f3c:	e045      	b.n	8003fca <menu+0x2e92>
			} else if(dilSecim == 1) {
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <menu+0x2e38>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d141      	bne.n	8003fca <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8003f46:	4a16      	ldr	r2, [pc, #88]	; (8003fa0 <menu+0x2e68>)
 8003f48:	2101      	movs	r1, #1
 8003f4a:	2002      	movs	r0, #2
 8003f4c:	f003 fd52 	bl	80079f4 <lcd_print>
 8003f50:	e03b      	b.n	8003fca <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 8003f52:	4b18      	ldr	r3, [pc, #96]	; (8003fb4 <menu+0x2e7c>)
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d137      	bne.n	8003fca <menu+0x2e92>
			if(dilSecim == 0){
 8003f5a:	4b05      	ldr	r3, [pc, #20]	; (8003f70 <menu+0x2e38>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d12a      	bne.n	8003fb8 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 8003f62:	4a10      	ldr	r2, [pc, #64]	; (8003fa4 <menu+0x2e6c>)
 8003f64:	2101      	movs	r1, #1
 8003f66:	2002      	movs	r0, #2
 8003f68:	f003 fd44 	bl	80079f4 <lcd_print>
 8003f6c:	e02d      	b.n	8003fca <menu+0x2e92>
 8003f6e:	bf00      	nop
 8003f70:	20000215 	.word	0x20000215
 8003f74:	0800d624 	.word	0x0800d624
 8003f78:	2000020c 	.word	0x2000020c
 8003f7c:	20000190 	.word	0x20000190
 8003f80:	40010800 	.word	0x40010800
 8003f84:	20000223 	.word	0x20000223
 8003f88:	20000120 	.word	0x20000120
 8003f8c:	20000220 	.word	0x20000220
 8003f90:	200001f4 	.word	0x200001f4
 8003f94:	0800d724 	.word	0x0800d724
 8003f98:	20000210 	.word	0x20000210
 8003f9c:	0800d04c 	.word	0x0800d04c
 8003fa0:	0800d060 	.word	0x0800d060
 8003fa4:	0800d0ac 	.word	0x0800d0ac
 8003fa8:	0800d0c0 	.word	0x0800d0c0
 8003fac:	20000214 	.word	0x20000214
 8003fb0:	0800d738 	.word	0x0800d738
 8003fb4:	20000212 	.word	0x20000212
			} else if(dilSecim == 1) {
 8003fb8:	4b71      	ldr	r3, [pc, #452]	; (8004180 <menu+0x3048>)
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d104      	bne.n	8003fca <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8003fc0:	4a70      	ldr	r2, [pc, #448]	; (8004184 <menu+0x304c>)
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	2002      	movs	r0, #2
 8003fc6:	f003 fd15 	bl	80079f4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fca:	2102      	movs	r1, #2
 8003fcc:	486e      	ldr	r0, [pc, #440]	; (8004188 <menu+0x3050>)
 8003fce:	f005 f837 	bl	8009040 <HAL_GPIO_ReadPin>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d115      	bne.n	8004004 <menu+0x2ecc>
 8003fd8:	4b6c      	ldr	r3, [pc, #432]	; (800418c <menu+0x3054>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	f083 0301 	eor.w	r3, r3, #1
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00e      	beq.n	8004004 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8003fe6:	4b6a      	ldr	r3, [pc, #424]	; (8004190 <menu+0x3058>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	3301      	adds	r3, #1
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	4b68      	ldr	r3, [pc, #416]	; (8004190 <menu+0x3058>)
 8003ff0:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003ff2:	4b67      	ldr	r3, [pc, #412]	; (8004190 <menu+0x3058>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d902      	bls.n	8004000 <menu+0x2ec8>
				demoMode = 0;
 8003ffa:	4b65      	ldr	r3, [pc, #404]	; (8004190 <menu+0x3058>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004000:	f000 fc66 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004004:	2104      	movs	r1, #4
 8004006:	4860      	ldr	r0, [pc, #384]	; (8004188 <menu+0x3050>)
 8004008:	f005 f81a 	bl	8009040 <HAL_GPIO_ReadPin>
 800400c:	4603      	mov	r3, r0
 800400e:	2b01      	cmp	r3, #1
 8004010:	d115      	bne.n	800403e <menu+0x2f06>
 8004012:	4b5e      	ldr	r3, [pc, #376]	; (800418c <menu+0x3054>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	f083 0301 	eor.w	r3, r3, #1
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00e      	beq.n	800403e <menu+0x2f06>
			demoMode = demoMode - 1;
 8004020:	4b5b      	ldr	r3, [pc, #364]	; (8004190 <menu+0x3058>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	3b01      	subs	r3, #1
 8004026:	b2da      	uxtb	r2, r3
 8004028:	4b59      	ldr	r3, [pc, #356]	; (8004190 <menu+0x3058>)
 800402a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800402c:	4b58      	ldr	r3, [pc, #352]	; (8004190 <menu+0x3058>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d002      	beq.n	800403a <menu+0x2f02>
		   		demoMode = 1;
 8004034:	4b56      	ldr	r3, [pc, #344]	; (8004190 <menu+0x3058>)
 8004036:	2201      	movs	r2, #1
 8004038:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800403a:	f000 fc49 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800403e:	2108      	movs	r1, #8
 8004040:	4851      	ldr	r0, [pc, #324]	; (8004188 <menu+0x3050>)
 8004042:	f004 fffd 	bl	8009040 <HAL_GPIO_ReadPin>
 8004046:	4603      	mov	r3, r0
 8004048:	2b01      	cmp	r3, #1
 800404a:	d10d      	bne.n	8004068 <menu+0x2f30>
 800404c:	4b4f      	ldr	r3, [pc, #316]	; (800418c <menu+0x3054>)
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	f083 0301 	eor.w	r3, r3, #1
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d006      	beq.n	8004068 <menu+0x2f30>
			eepromData[26] = demoMode;
 800405a:	4b4d      	ldr	r3, [pc, #308]	; (8004190 <menu+0x3058>)
 800405c:	781a      	ldrb	r2, [r3, #0]
 800405e:	4b4d      	ldr	r3, [pc, #308]	; (8004194 <menu+0x305c>)
 8004060:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8004062:	4b4d      	ldr	r3, [pc, #308]	; (8004198 <menu+0x3060>)
 8004064:	2201      	movs	r2, #1
 8004066:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004068:	4b4c      	ldr	r3, [pc, #304]	; (800419c <menu+0x3064>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b1d      	cmp	r3, #29
 800406e:	f040 8132 	bne.w	80042d6 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8004072:	4b4b      	ldr	r3, [pc, #300]	; (80041a0 <menu+0x3068>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d113      	bne.n	80040a2 <menu+0x2f6a>
 800407a:	4b4a      	ldr	r3, [pc, #296]	; (80041a4 <menu+0x306c>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10f      	bne.n	80040a2 <menu+0x2f6a>
 8004082:	4b49      	ldr	r3, [pc, #292]	; (80041a8 <menu+0x3070>)
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10b      	bne.n	80040a2 <menu+0x2f6a>
 800408a:	4b48      	ldr	r3, [pc, #288]	; (80041ac <menu+0x3074>)
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d107      	bne.n	80040a2 <menu+0x2f6a>
 8004092:	4b47      	ldr	r3, [pc, #284]	; (80041b0 <menu+0x3078>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d103      	bne.n	80040a2 <menu+0x2f6a>
			calismaSayisiYar = 0;
 800409a:	4b46      	ldr	r3, [pc, #280]	; (80041b4 <menu+0x307c>)
 800409c:	2200      	movs	r2, #0
 800409e:	701a      	strb	r2, [r3, #0]
 80040a0:	e002      	b.n	80040a8 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 80040a2:	4b44      	ldr	r3, [pc, #272]	; (80041b4 <menu+0x307c>)
 80040a4:	2201      	movs	r2, #1
 80040a6:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80040a8:	4b43      	ldr	r3, [pc, #268]	; (80041b8 <menu+0x3080>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d154      	bne.n	800415a <menu+0x3022>
			if(dilSecim == 0) {
 80040b0:	4b33      	ldr	r3, [pc, #204]	; (8004180 <menu+0x3048>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d105      	bne.n	80040c4 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80040b8:	4a40      	ldr	r2, [pc, #256]	; (80041bc <menu+0x3084>)
 80040ba:	2101      	movs	r1, #1
 80040bc:	2001      	movs	r0, #1
 80040be:	f003 fc99 	bl	80079f4 <lcd_print>
 80040c2:	e008      	b.n	80040d6 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 80040c4:	4b2e      	ldr	r3, [pc, #184]	; (8004180 <menu+0x3048>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d104      	bne.n	80040d6 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 80040cc:	4a3c      	ldr	r2, [pc, #240]	; (80041c0 <menu+0x3088>)
 80040ce:	2101      	movs	r1, #1
 80040d0:	2001      	movs	r0, #1
 80040d2:	f003 fc8f 	bl	80079f4 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80040d6:	4b36      	ldr	r3, [pc, #216]	; (80041b0 <menu+0x3078>)
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	220a      	movs	r2, #10
 80040dc:	4939      	ldr	r1, [pc, #228]	; (80041c4 <menu+0x308c>)
 80040de:	4618      	mov	r0, r3
 80040e0:	f007 ffda 	bl	800c098 <itoa>
			lcd_print(2, 12, snum);
 80040e4:	4a37      	ldr	r2, [pc, #220]	; (80041c4 <menu+0x308c>)
 80040e6:	210c      	movs	r1, #12
 80040e8:	2002      	movs	r0, #2
 80040ea:	f003 fc83 	bl	80079f4 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80040ee:	4b2f      	ldr	r3, [pc, #188]	; (80041ac <menu+0x3074>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	220a      	movs	r2, #10
 80040f4:	4933      	ldr	r1, [pc, #204]	; (80041c4 <menu+0x308c>)
 80040f6:	4618      	mov	r0, r3
 80040f8:	f007 ffce 	bl	800c098 <itoa>
			lcd_print(2, 13, snum);
 80040fc:	4a31      	ldr	r2, [pc, #196]	; (80041c4 <menu+0x308c>)
 80040fe:	210d      	movs	r1, #13
 8004100:	2002      	movs	r0, #2
 8004102:	f003 fc77 	bl	80079f4 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004106:	4b28      	ldr	r3, [pc, #160]	; (80041a8 <menu+0x3070>)
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	220a      	movs	r2, #10
 800410c:	492d      	ldr	r1, [pc, #180]	; (80041c4 <menu+0x308c>)
 800410e:	4618      	mov	r0, r3
 8004110:	f007 ffc2 	bl	800c098 <itoa>
			lcd_print(2, 14, snum);
 8004114:	4a2b      	ldr	r2, [pc, #172]	; (80041c4 <menu+0x308c>)
 8004116:	210e      	movs	r1, #14
 8004118:	2002      	movs	r0, #2
 800411a:	f003 fc6b 	bl	80079f4 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800411e:	4b21      	ldr	r3, [pc, #132]	; (80041a4 <menu+0x306c>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	220a      	movs	r2, #10
 8004124:	4927      	ldr	r1, [pc, #156]	; (80041c4 <menu+0x308c>)
 8004126:	4618      	mov	r0, r3
 8004128:	f007 ffb6 	bl	800c098 <itoa>
			lcd_print(2, 15, snum);
 800412c:	4a25      	ldr	r2, [pc, #148]	; (80041c4 <menu+0x308c>)
 800412e:	210f      	movs	r1, #15
 8004130:	2002      	movs	r0, #2
 8004132:	f003 fc5f 	bl	80079f4 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004136:	4b1a      	ldr	r3, [pc, #104]	; (80041a0 <menu+0x3068>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	220a      	movs	r2, #10
 800413c:	4921      	ldr	r1, [pc, #132]	; (80041c4 <menu+0x308c>)
 800413e:	4618      	mov	r0, r3
 8004140:	f007 ffaa 	bl	800c098 <itoa>
			lcd_print(2, 16, snum);
 8004144:	4a1f      	ldr	r2, [pc, #124]	; (80041c4 <menu+0x308c>)
 8004146:	2110      	movs	r1, #16
 8004148:	2002      	movs	r0, #2
 800414a:	f003 fc53 	bl	80079f4 <lcd_print>

			lcd_print(2, 1, "           ");
 800414e:	4a1e      	ldr	r2, [pc, #120]	; (80041c8 <menu+0x3090>)
 8004150:	2101      	movs	r1, #1
 8004152:	2002      	movs	r0, #2
 8004154:	f003 fc4e 	bl	80079f4 <lcd_print>
 8004158:	e048      	b.n	80041ec <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 800415a:	4b17      	ldr	r3, [pc, #92]	; (80041b8 <menu+0x3080>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d144      	bne.n	80041ec <menu+0x30b4>
			if(dilSecim == 0) {
 8004162:	4b07      	ldr	r3, [pc, #28]	; (8004180 <menu+0x3048>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d132      	bne.n	80041d0 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800416a:	4a14      	ldr	r2, [pc, #80]	; (80041bc <menu+0x3084>)
 800416c:	2101      	movs	r1, #1
 800416e:	2001      	movs	r0, #1
 8004170:	f003 fc40 	bl	80079f4 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004174:	4a15      	ldr	r2, [pc, #84]	; (80041cc <menu+0x3094>)
 8004176:	2101      	movs	r1, #1
 8004178:	2002      	movs	r0, #2
 800417a:	f003 fc3b 	bl	80079f4 <lcd_print>
 800417e:	e035      	b.n	80041ec <menu+0x30b4>
 8004180:	20000215 	.word	0x20000215
 8004184:	0800d0c0 	.word	0x0800d0c0
 8004188:	40010800 	.word	0x40010800
 800418c:	20000223 	.word	0x20000223
 8004190:	20000212 	.word	0x20000212
 8004194:	20000120 	.word	0x20000120
 8004198:	20000220 	.word	0x20000220
 800419c:	200001f4 	.word	0x200001f4
 80041a0:	200001f1 	.word	0x200001f1
 80041a4:	200001f2 	.word	0x200001f2
 80041a8:	20000000 	.word	0x20000000
 80041ac:	20000001 	.word	0x20000001
 80041b0:	200001f3 	.word	0x200001f3
 80041b4:	20000235 	.word	0x20000235
 80041b8:	20000214 	.word	0x20000214
 80041bc:	0800d748 	.word	0x0800d748
 80041c0:	0800d75c 	.word	0x0800d75c
 80041c4:	20000190 	.word	0x20000190
 80041c8:	0800d770 	.word	0x0800d770
 80041cc:	0800d77c 	.word	0x0800d77c
			} else if(dilSecim == 1) {
 80041d0:	4b94      	ldr	r3, [pc, #592]	; (8004424 <menu+0x32ec>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d109      	bne.n	80041ec <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80041d8:	4a93      	ldr	r2, [pc, #588]	; (8004428 <menu+0x32f0>)
 80041da:	2101      	movs	r1, #1
 80041dc:	2001      	movs	r0, #1
 80041de:	f003 fc09 	bl	80079f4 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80041e2:	4a92      	ldr	r2, [pc, #584]	; (800442c <menu+0x32f4>)
 80041e4:	2101      	movs	r1, #1
 80041e6:	2002      	movs	r0, #2
 80041e8:	f003 fc04 	bl	80079f4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80041ec:	2102      	movs	r1, #2
 80041ee:	4890      	ldr	r0, [pc, #576]	; (8004430 <menu+0x32f8>)
 80041f0:	f004 ff26 	bl	8009040 <HAL_GPIO_ReadPin>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d119      	bne.n	800422e <menu+0x30f6>
 80041fa:	4b8e      	ldr	r3, [pc, #568]	; (8004434 <menu+0x32fc>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	f083 0301 	eor.w	r3, r3, #1
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d012      	beq.n	800422e <menu+0x30f6>
 8004208:	4b8b      	ldr	r3, [pc, #556]	; (8004438 <menu+0x3300>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00e      	beq.n	800422e <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004210:	4b8a      	ldr	r3, [pc, #552]	; (800443c <menu+0x3304>)
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	3301      	adds	r3, #1
 8004216:	b2da      	uxtb	r2, r3
 8004218:	4b88      	ldr	r3, [pc, #544]	; (800443c <menu+0x3304>)
 800421a:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 800421c:	4b87      	ldr	r3, [pc, #540]	; (800443c <menu+0x3304>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d902      	bls.n	800422a <menu+0x30f2>
				calismaSayModu = 0;
 8004224:	4b85      	ldr	r3, [pc, #532]	; (800443c <menu+0x3304>)
 8004226:	2200      	movs	r2, #0
 8004228:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800422a:	f000 fb51 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800422e:	2104      	movs	r1, #4
 8004230:	487f      	ldr	r0, [pc, #508]	; (8004430 <menu+0x32f8>)
 8004232:	f004 ff05 	bl	8009040 <HAL_GPIO_ReadPin>
 8004236:	4603      	mov	r3, r0
 8004238:	2b01      	cmp	r3, #1
 800423a:	d119      	bne.n	8004270 <menu+0x3138>
 800423c:	4b7d      	ldr	r3, [pc, #500]	; (8004434 <menu+0x32fc>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	f083 0301 	eor.w	r3, r3, #1
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d012      	beq.n	8004270 <menu+0x3138>
 800424a:	4b7b      	ldr	r3, [pc, #492]	; (8004438 <menu+0x3300>)
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00e      	beq.n	8004270 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 8004252:	4b7a      	ldr	r3, [pc, #488]	; (800443c <menu+0x3304>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	3b01      	subs	r3, #1
 8004258:	b2da      	uxtb	r2, r3
 800425a:	4b78      	ldr	r3, [pc, #480]	; (800443c <menu+0x3304>)
 800425c:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800425e:	4b77      	ldr	r3, [pc, #476]	; (800443c <menu+0x3304>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d002      	beq.n	800426c <menu+0x3134>
		   		calismaSayModu = 1;
 8004266:	4b75      	ldr	r3, [pc, #468]	; (800443c <menu+0x3304>)
 8004268:	2201      	movs	r2, #1
 800426a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800426c:	f000 fb30 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004270:	2108      	movs	r1, #8
 8004272:	486f      	ldr	r0, [pc, #444]	; (8004430 <menu+0x32f8>)
 8004274:	f004 fee4 	bl	8009040 <HAL_GPIO_ReadPin>
 8004278:	4603      	mov	r3, r0
 800427a:	2b01      	cmp	r3, #1
 800427c:	d12b      	bne.n	80042d6 <menu+0x319e>
 800427e:	4b6d      	ldr	r3, [pc, #436]	; (8004434 <menu+0x32fc>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	f083 0301 	eor.w	r3, r3, #1
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d024      	beq.n	80042d6 <menu+0x319e>
			eepromData[32] = 0;
 800428c:	4b6c      	ldr	r3, [pc, #432]	; (8004440 <menu+0x3308>)
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004294:	4b6a      	ldr	r3, [pc, #424]	; (8004440 <menu+0x3308>)
 8004296:	2200      	movs	r2, #0
 8004298:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 800429a:	4b69      	ldr	r3, [pc, #420]	; (8004440 <menu+0x3308>)
 800429c:	2200      	movs	r2, #0
 800429e:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80042a0:	4b67      	ldr	r3, [pc, #412]	; (8004440 <menu+0x3308>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80042a6:	4b66      	ldr	r3, [pc, #408]	; (8004440 <menu+0x3308>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80042ac:	4b65      	ldr	r3, [pc, #404]	; (8004444 <menu+0x330c>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80042b2:	4b65      	ldr	r3, [pc, #404]	; (8004448 <menu+0x3310>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80042b8:	4b64      	ldr	r3, [pc, #400]	; (800444c <menu+0x3314>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80042be:	4b64      	ldr	r3, [pc, #400]	; (8004450 <menu+0x3318>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80042c4:	4b63      	ldr	r3, [pc, #396]	; (8004454 <menu+0x331c>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80042ca:	4b5c      	ldr	r3, [pc, #368]	; (800443c <menu+0x3304>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80042d0:	4b61      	ldr	r3, [pc, #388]	; (8004458 <menu+0x3320>)
 80042d2:	2201      	movs	r2, #1
 80042d4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80042d6:	4b61      	ldr	r3, [pc, #388]	; (800445c <menu+0x3324>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b1e      	cmp	r3, #30
 80042dc:	d16f      	bne.n	80043be <menu+0x3286>
		calismaSayModu = 0;
 80042de:	4b57      	ldr	r3, [pc, #348]	; (800443c <menu+0x3304>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80042e4:	4b4f      	ldr	r3, [pc, #316]	; (8004424 <menu+0x32ec>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10a      	bne.n	8004302 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 80042ec:	4a5c      	ldr	r2, [pc, #368]	; (8004460 <menu+0x3328>)
 80042ee:	2101      	movs	r1, #1
 80042f0:	2001      	movs	r0, #1
 80042f2:	f003 fb7f 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80042f6:	4a5b      	ldr	r2, [pc, #364]	; (8004464 <menu+0x332c>)
 80042f8:	2101      	movs	r1, #1
 80042fa:	2002      	movs	r0, #2
 80042fc:	f003 fb7a 	bl	80079f4 <lcd_print>
 8004300:	e00d      	b.n	800431e <menu+0x31e6>
		} else if(dilSecim == 1) {
 8004302:	4b48      	ldr	r3, [pc, #288]	; (8004424 <menu+0x32ec>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d109      	bne.n	800431e <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 800430a:	4a57      	ldr	r2, [pc, #348]	; (8004468 <menu+0x3330>)
 800430c:	2101      	movs	r1, #1
 800430e:	2001      	movs	r0, #1
 8004310:	f003 fb70 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004314:	4a55      	ldr	r2, [pc, #340]	; (800446c <menu+0x3334>)
 8004316:	2101      	movs	r1, #1
 8004318:	2002      	movs	r0, #2
 800431a:	f003 fb6b 	bl	80079f4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800431e:	2102      	movs	r1, #2
 8004320:	4843      	ldr	r0, [pc, #268]	; (8004430 <menu+0x32f8>)
 8004322:	f004 fe8d 	bl	8009040 <HAL_GPIO_ReadPin>
 8004326:	4603      	mov	r3, r0
 8004328:	2b01      	cmp	r3, #1
 800432a:	d115      	bne.n	8004358 <menu+0x3220>
 800432c:	4b41      	ldr	r3, [pc, #260]	; (8004434 <menu+0x32fc>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	f083 0301 	eor.w	r3, r3, #1
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00e      	beq.n	8004358 <menu+0x3220>
			dilSecim = dilSecim + 1;
 800433a:	4b3a      	ldr	r3, [pc, #232]	; (8004424 <menu+0x32ec>)
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	3301      	adds	r3, #1
 8004340:	b2da      	uxtb	r2, r3
 8004342:	4b38      	ldr	r3, [pc, #224]	; (8004424 <menu+0x32ec>)
 8004344:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004346:	4b37      	ldr	r3, [pc, #220]	; (8004424 <menu+0x32ec>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d902      	bls.n	8004354 <menu+0x321c>
				dilSecim = 0;
 800434e:	4b35      	ldr	r3, [pc, #212]	; (8004424 <menu+0x32ec>)
 8004350:	2200      	movs	r2, #0
 8004352:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004354:	f000 fabc 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004358:	2104      	movs	r1, #4
 800435a:	4835      	ldr	r0, [pc, #212]	; (8004430 <menu+0x32f8>)
 800435c:	f004 fe70 	bl	8009040 <HAL_GPIO_ReadPin>
 8004360:	4603      	mov	r3, r0
 8004362:	2b01      	cmp	r3, #1
 8004364:	d115      	bne.n	8004392 <menu+0x325a>
 8004366:	4b33      	ldr	r3, [pc, #204]	; (8004434 <menu+0x32fc>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	f083 0301 	eor.w	r3, r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00e      	beq.n	8004392 <menu+0x325a>
			dilSecim = dilSecim - 1;
 8004374:	4b2b      	ldr	r3, [pc, #172]	; (8004424 <menu+0x32ec>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	3b01      	subs	r3, #1
 800437a:	b2da      	uxtb	r2, r3
 800437c:	4b29      	ldr	r3, [pc, #164]	; (8004424 <menu+0x32ec>)
 800437e:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004380:	4b28      	ldr	r3, [pc, #160]	; (8004424 <menu+0x32ec>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d002      	beq.n	800438e <menu+0x3256>
		   		dilSecim = 1;
 8004388:	4b26      	ldr	r3, [pc, #152]	; (8004424 <menu+0x32ec>)
 800438a:	2201      	movs	r2, #1
 800438c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800438e:	f000 fa9f 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004392:	2108      	movs	r1, #8
 8004394:	4826      	ldr	r0, [pc, #152]	; (8004430 <menu+0x32f8>)
 8004396:	f004 fe53 	bl	8009040 <HAL_GPIO_ReadPin>
 800439a:	4603      	mov	r3, r0
 800439c:	2b01      	cmp	r3, #1
 800439e:	d10e      	bne.n	80043be <menu+0x3286>
 80043a0:	4b24      	ldr	r3, [pc, #144]	; (8004434 <menu+0x32fc>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	f083 0301 	eor.w	r3, r3, #1
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <menu+0x3286>
			eepromData[33] = dilSecim;
 80043ae:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <menu+0x32ec>)
 80043b0:	781a      	ldrb	r2, [r3, #0]
 80043b2:	4b23      	ldr	r3, [pc, #140]	; (8004440 <menu+0x3308>)
 80043b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 80043b8:	4b27      	ldr	r3, [pc, #156]	; (8004458 <menu+0x3320>)
 80043ba:	2201      	movs	r2, #1
 80043bc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80043be:	4b27      	ldr	r3, [pc, #156]	; (800445c <menu+0x3324>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b1f      	cmp	r3, #31
 80043c4:	f040 80b7 	bne.w	8004536 <menu+0x33fe>
		calismaSayModu = 0;
 80043c8:	4b1c      	ldr	r3, [pc, #112]	; (800443c <menu+0x3304>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 80043ce:	4a28      	ldr	r2, [pc, #160]	; (8004470 <menu+0x3338>)
 80043d0:	2101      	movs	r1, #1
 80043d2:	2001      	movs	r0, #1
 80043d4:	f003 fb0e 	bl	80079f4 <lcd_print>

		if(iotMode == 0) {
 80043d8:	4b26      	ldr	r3, [pc, #152]	; (8004474 <menu+0x333c>)
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d113      	bne.n	8004408 <menu+0x32d0>
			if(dilSecim == 0) {
 80043e0:	4b10      	ldr	r3, [pc, #64]	; (8004424 <menu+0x32ec>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d105      	bne.n	80043f4 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 80043e8:	4a23      	ldr	r2, [pc, #140]	; (8004478 <menu+0x3340>)
 80043ea:	2101      	movs	r1, #1
 80043ec:	2002      	movs	r0, #2
 80043ee:	f003 fb01 	bl	80079f4 <lcd_print>
 80043f2:	e050      	b.n	8004496 <menu+0x335e>
			} else if(dilSecim == 1) {
 80043f4:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <menu+0x32ec>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d14c      	bne.n	8004496 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 80043fc:	4a1f      	ldr	r2, [pc, #124]	; (800447c <menu+0x3344>)
 80043fe:	2101      	movs	r1, #1
 8004400:	2002      	movs	r0, #2
 8004402:	f003 faf7 	bl	80079f4 <lcd_print>
 8004406:	e046      	b.n	8004496 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004408:	4b1a      	ldr	r3, [pc, #104]	; (8004474 <menu+0x333c>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d142      	bne.n	8004496 <menu+0x335e>
			if(dilSecim == 0) {
 8004410:	4b04      	ldr	r3, [pc, #16]	; (8004424 <menu+0x32ec>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d135      	bne.n	8004484 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004418:	4a19      	ldr	r2, [pc, #100]	; (8004480 <menu+0x3348>)
 800441a:	2101      	movs	r1, #1
 800441c:	2002      	movs	r0, #2
 800441e:	f003 fae9 	bl	80079f4 <lcd_print>
 8004422:	e038      	b.n	8004496 <menu+0x335e>
 8004424:	20000215 	.word	0x20000215
 8004428:	0800d75c 	.word	0x0800d75c
 800442c:	0800d790 	.word	0x0800d790
 8004430:	40010800 	.word	0x40010800
 8004434:	20000223 	.word	0x20000223
 8004438:	20000235 	.word	0x20000235
 800443c:	20000214 	.word	0x20000214
 8004440:	20000120 	.word	0x20000120
 8004444:	200001f3 	.word	0x200001f3
 8004448:	20000001 	.word	0x20000001
 800444c:	20000000 	.word	0x20000000
 8004450:	200001f2 	.word	0x200001f2
 8004454:	200001f1 	.word	0x200001f1
 8004458:	20000220 	.word	0x20000220
 800445c:	200001f4 	.word	0x200001f4
 8004460:	0800d7a4 	.word	0x0800d7a4
 8004464:	0800d7b8 	.word	0x0800d7b8
 8004468:	0800d7cc 	.word	0x0800d7cc
 800446c:	0800d7e0 	.word	0x0800d7e0
 8004470:	0800d7f4 	.word	0x0800d7f4
 8004474:	20000213 	.word	0x20000213
 8004478:	0800d04c 	.word	0x0800d04c
 800447c:	0800d060 	.word	0x0800d060
 8004480:	0800d0ac 	.word	0x0800d0ac
			} else if(dilSecim == 1) {
 8004484:	4bab      	ldr	r3, [pc, #684]	; (8004734 <menu+0x35fc>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d104      	bne.n	8004496 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 800448c:	4aaa      	ldr	r2, [pc, #680]	; (8004738 <menu+0x3600>)
 800448e:	2101      	movs	r1, #1
 8004490:	2002      	movs	r0, #2
 8004492:	f003 faaf 	bl	80079f4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004496:	2102      	movs	r1, #2
 8004498:	48a8      	ldr	r0, [pc, #672]	; (800473c <menu+0x3604>)
 800449a:	f004 fdd1 	bl	8009040 <HAL_GPIO_ReadPin>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d115      	bne.n	80044d0 <menu+0x3398>
 80044a4:	4ba6      	ldr	r3, [pc, #664]	; (8004740 <menu+0x3608>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	f083 0301 	eor.w	r3, r3, #1
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00e      	beq.n	80044d0 <menu+0x3398>
			iotMode = iotMode + 1;
 80044b2:	4ba4      	ldr	r3, [pc, #656]	; (8004744 <menu+0x360c>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	3301      	adds	r3, #1
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	4ba2      	ldr	r3, [pc, #648]	; (8004744 <menu+0x360c>)
 80044bc:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80044be:	4ba1      	ldr	r3, [pc, #644]	; (8004744 <menu+0x360c>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d902      	bls.n	80044cc <menu+0x3394>
				iotMode = 0;
 80044c6:	4b9f      	ldr	r3, [pc, #636]	; (8004744 <menu+0x360c>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80044cc:	f000 fa00 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80044d0:	2104      	movs	r1, #4
 80044d2:	489a      	ldr	r0, [pc, #616]	; (800473c <menu+0x3604>)
 80044d4:	f004 fdb4 	bl	8009040 <HAL_GPIO_ReadPin>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d115      	bne.n	800450a <menu+0x33d2>
 80044de:	4b98      	ldr	r3, [pc, #608]	; (8004740 <menu+0x3608>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	f083 0301 	eor.w	r3, r3, #1
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00e      	beq.n	800450a <menu+0x33d2>
			iotMode = iotMode - 1;
 80044ec:	4b95      	ldr	r3, [pc, #596]	; (8004744 <menu+0x360c>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	4b93      	ldr	r3, [pc, #588]	; (8004744 <menu+0x360c>)
 80044f6:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 80044f8:	4b92      	ldr	r3, [pc, #584]	; (8004744 <menu+0x360c>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <menu+0x33ce>
		   		iotMode = 1;
 8004500:	4b90      	ldr	r3, [pc, #576]	; (8004744 <menu+0x360c>)
 8004502:	2201      	movs	r2, #1
 8004504:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004506:	f000 f9e3 	bl	80048d0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800450a:	2108      	movs	r1, #8
 800450c:	488b      	ldr	r0, [pc, #556]	; (800473c <menu+0x3604>)
 800450e:	f004 fd97 	bl	8009040 <HAL_GPIO_ReadPin>
 8004512:	4603      	mov	r3, r0
 8004514:	2b01      	cmp	r3, #1
 8004516:	d10e      	bne.n	8004536 <menu+0x33fe>
 8004518:	4b89      	ldr	r3, [pc, #548]	; (8004740 <menu+0x3608>)
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	f083 0301 	eor.w	r3, r3, #1
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d007      	beq.n	8004536 <menu+0x33fe>
			eepromData[48] = iotMode;
 8004526:	4b87      	ldr	r3, [pc, #540]	; (8004744 <menu+0x360c>)
 8004528:	781a      	ldrb	r2, [r3, #0]
 800452a:	4b87      	ldr	r3, [pc, #540]	; (8004748 <menu+0x3610>)
 800452c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004530:	4b86      	ldr	r3, [pc, #536]	; (800474c <menu+0x3614>)
 8004532:	2201      	movs	r2, #1
 8004534:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004536:	4b86      	ldr	r3, [pc, #536]	; (8004750 <menu+0x3618>)
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b20      	cmp	r3, #32
 800453c:	d13f      	bne.n	80045be <menu+0x3486>
		calismaSayModu = 0;
 800453e:	4b85      	ldr	r3, [pc, #532]	; (8004754 <menu+0x361c>)
 8004540:	2200      	movs	r2, #0
 8004542:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004544:	4b7b      	ldr	r3, [pc, #492]	; (8004734 <menu+0x35fc>)
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d105      	bne.n	8004558 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 800454c:	4a82      	ldr	r2, [pc, #520]	; (8004758 <menu+0x3620>)
 800454e:	2101      	movs	r1, #1
 8004550:	2001      	movs	r0, #1
 8004552:	f003 fa4f 	bl	80079f4 <lcd_print>
 8004556:	e004      	b.n	8004562 <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 8004558:	4a80      	ldr	r2, [pc, #512]	; (800475c <menu+0x3624>)
 800455a:	2101      	movs	r1, #1
 800455c:	2001      	movs	r0, #1
 800455e:	f003 fa49 	bl	80079f4 <lcd_print>
		}

		lcd_print(2, 1, machineID);
 8004562:	4a7f      	ldr	r2, [pc, #508]	; (8004760 <menu+0x3628>)
 8004564:	2101      	movs	r1, #1
 8004566:	2002      	movs	r0, #2
 8004568:	f003 fa44 	bl	80079f4 <lcd_print>
		lcd_print(2, 13, "    ");
 800456c:	4a7d      	ldr	r2, [pc, #500]	; (8004764 <menu+0x362c>)
 800456e:	210d      	movs	r1, #13
 8004570:	2002      	movs	r0, #2
 8004572:	f003 fa3f 	bl	80079f4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004576:	2102      	movs	r1, #2
 8004578:	4870      	ldr	r0, [pc, #448]	; (800473c <menu+0x3604>)
 800457a:	f004 fd61 	bl	8009040 <HAL_GPIO_ReadPin>
 800457e:	4603      	mov	r3, r0
 8004580:	2b01      	cmp	r3, #1
 8004582:	d11c      	bne.n	80045be <menu+0x3486>
 8004584:	2104      	movs	r1, #4
 8004586:	486d      	ldr	r0, [pc, #436]	; (800473c <menu+0x3604>)
 8004588:	f004 fd5a 	bl	8009040 <HAL_GPIO_ReadPin>
 800458c:	4603      	mov	r3, r0
 800458e:	2b01      	cmp	r3, #1
 8004590:	d115      	bne.n	80045be <menu+0x3486>
 8004592:	4b6b      	ldr	r3, [pc, #428]	; (8004740 <menu+0x3608>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	f083 0301 	eor.w	r3, r3, #1
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00e      	beq.n	80045be <menu+0x3486>
			takeMachineID();
 80045a0:	f002 faa2 	bl	8006ae8 <takeMachineID>

			HAL_Delay(250);
 80045a4:	20fa      	movs	r0, #250	; 0xfa
 80045a6:	f003 ff7b 	bl	80084a0 <HAL_Delay>
			lcd_print(2, 1, machineID);
 80045aa:	4a6d      	ldr	r2, [pc, #436]	; (8004760 <menu+0x3628>)
 80045ac:	2101      	movs	r1, #1
 80045ae:	2002      	movs	r0, #2
 80045b0:	f003 fa20 	bl	80079f4 <lcd_print>
			lcd_print(2, 13, "    ");
 80045b4:	4a6b      	ldr	r2, [pc, #428]	; (8004764 <menu+0x362c>)
 80045b6:	210d      	movs	r1, #13
 80045b8:	2002      	movs	r0, #2
 80045ba:	f003 fa1b 	bl	80079f4 <lcd_print>
		}
	}

	if (menuSayac == 33) {
 80045be:	4b64      	ldr	r3, [pc, #400]	; (8004750 <menu+0x3618>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b21      	cmp	r3, #33	; 0x21
 80045c4:	d14f      	bne.n	8004666 <menu+0x352e>
		calismaSayModu = 0;
 80045c6:	4b63      	ldr	r3, [pc, #396]	; (8004754 <menu+0x361c>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	701a      	strb	r2, [r3, #0]

		int ssidLength = strlen(wifiSSID);
 80045cc:	4866      	ldr	r0, [pc, #408]	; (8004768 <menu+0x3630>)
 80045ce:	f7fb fe29 	bl	8000224 <strlen>
 80045d2:	4603      	mov	r3, r0
 80045d4:	607b      	str	r3, [r7, #4]

		lcd_print(1, 1, "WIFI SSID       ");
 80045d6:	4a65      	ldr	r2, [pc, #404]	; (800476c <menu+0x3634>)
 80045d8:	2101      	movs	r1, #1
 80045da:	2001      	movs	r0, #1
 80045dc:	f003 fa0a 	bl	80079f4 <lcd_print>

		if(ssidLength <=16) {
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b10      	cmp	r3, #16
 80045e4:	dc0e      	bgt.n	8004604 <menu+0x34cc>
			lcd_print(2, 1, wifiSSID);
 80045e6:	4a60      	ldr	r2, [pc, #384]	; (8004768 <menu+0x3630>)
 80045e8:	2101      	movs	r1, #1
 80045ea:	2002      	movs	r0, #2
 80045ec:	f003 fa02 	bl	80079f4 <lcd_print>
			lcd_print(2, 1+ssidLength, emptyArray);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	3301      	adds	r3, #1
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	4a5d      	ldr	r2, [pc, #372]	; (8004770 <menu+0x3638>)
 80045fa:	4619      	mov	r1, r3
 80045fc:	2002      	movs	r0, #2
 80045fe:	f003 f9f9 	bl	80079f4 <lcd_print>
 8004602:	e005      	b.n	8004610 <menu+0x34d8>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8004604:	2300      	movs	r3, #0
 8004606:	2202      	movs	r2, #2
 8004608:	2101      	movs	r1, #1
 800460a:	4857      	ldr	r0, [pc, #348]	; (8004768 <menu+0x3630>)
 800460c:	f7fc fcd8 	bl	8000fc0 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004610:	2102      	movs	r1, #2
 8004612:	484a      	ldr	r0, [pc, #296]	; (800473c <menu+0x3604>)
 8004614:	f004 fd14 	bl	8009040 <HAL_GPIO_ReadPin>
 8004618:	4603      	mov	r3, r0
 800461a:	2b01      	cmp	r3, #1
 800461c:	d123      	bne.n	8004666 <menu+0x352e>
 800461e:	2104      	movs	r1, #4
 8004620:	4846      	ldr	r0, [pc, #280]	; (800473c <menu+0x3604>)
 8004622:	f004 fd0d 	bl	8009040 <HAL_GPIO_ReadPin>
 8004626:	4603      	mov	r3, r0
 8004628:	2b01      	cmp	r3, #1
 800462a:	d11c      	bne.n	8004666 <menu+0x352e>
 800462c:	4b44      	ldr	r3, [pc, #272]	; (8004740 <menu+0x3608>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	f083 0301 	eor.w	r3, r3, #1
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d015      	beq.n	8004666 <menu+0x352e>
			takeWifiSSID();
 800463a:	f002 fba7 	bl	8006d8c <takeWifiSSID>

			HAL_Delay(250);
 800463e:	20fa      	movs	r0, #250	; 0xfa
 8004640:	f003 ff2e 	bl	80084a0 <HAL_Delay>
			lcd_print(2, 1, wifiSSID);
 8004644:	4a48      	ldr	r2, [pc, #288]	; (8004768 <menu+0x3630>)
 8004646:	2101      	movs	r1, #1
 8004648:	2002      	movs	r0, #2
 800464a:	f003 f9d3 	bl	80079f4 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 800464e:	4846      	ldr	r0, [pc, #280]	; (8004768 <menu+0x3630>)
 8004650:	f7fb fde8 	bl	8000224 <strlen>
 8004654:	4603      	mov	r3, r0
 8004656:	b2db      	uxtb	r3, r3
 8004658:	3301      	adds	r3, #1
 800465a:	b2db      	uxtb	r3, r3
 800465c:	4a44      	ldr	r2, [pc, #272]	; (8004770 <menu+0x3638>)
 800465e:	4619      	mov	r1, r3
 8004660:	2002      	movs	r0, #2
 8004662:	f003 f9c7 	bl	80079f4 <lcd_print>
		}
	}

	if (menuSayac == 34) {
 8004666:	4b3a      	ldr	r3, [pc, #232]	; (8004750 <menu+0x3618>)
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	2b22      	cmp	r3, #34	; 0x22
 800466c:	d14f      	bne.n	800470e <menu+0x35d6>
		calismaSayModu = 0;
 800466e:	4b39      	ldr	r3, [pc, #228]	; (8004754 <menu+0x361c>)
 8004670:	2200      	movs	r2, #0
 8004672:	701a      	strb	r2, [r3, #0]

		int passLength = strlen(wifiPass);
 8004674:	483f      	ldr	r0, [pc, #252]	; (8004774 <menu+0x363c>)
 8004676:	f7fb fdd5 	bl	8000224 <strlen>
 800467a:	4603      	mov	r3, r0
 800467c:	603b      	str	r3, [r7, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 800467e:	4a3e      	ldr	r2, [pc, #248]	; (8004778 <menu+0x3640>)
 8004680:	2101      	movs	r1, #1
 8004682:	2001      	movs	r0, #1
 8004684:	f003 f9b6 	bl	80079f4 <lcd_print>

		if(passLength <= 16) {
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	2b10      	cmp	r3, #16
 800468c:	dc0e      	bgt.n	80046ac <menu+0x3574>
			lcd_print(2, 1, wifiPass);
 800468e:	4a39      	ldr	r2, [pc, #228]	; (8004774 <menu+0x363c>)
 8004690:	2101      	movs	r1, #1
 8004692:	2002      	movs	r0, #2
 8004694:	f003 f9ae 	bl	80079f4 <lcd_print>
			lcd_print(2, 1+passLength, emptyArray);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	b2db      	uxtb	r3, r3
 800469c:	3301      	adds	r3, #1
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	4a33      	ldr	r2, [pc, #204]	; (8004770 <menu+0x3638>)
 80046a2:	4619      	mov	r1, r3
 80046a4:	2002      	movs	r0, #2
 80046a6:	f003 f9a5 	bl	80079f4 <lcd_print>
 80046aa:	e005      	b.n	80046b8 <menu+0x3580>
		} else {
			slideText(wifiPass, 1, 2, 1);
 80046ac:	2301      	movs	r3, #1
 80046ae:	2202      	movs	r2, #2
 80046b0:	2101      	movs	r1, #1
 80046b2:	4830      	ldr	r0, [pc, #192]	; (8004774 <menu+0x363c>)
 80046b4:	f7fc fc84 	bl	8000fc0 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046b8:	2102      	movs	r1, #2
 80046ba:	4820      	ldr	r0, [pc, #128]	; (800473c <menu+0x3604>)
 80046bc:	f004 fcc0 	bl	8009040 <HAL_GPIO_ReadPin>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d123      	bne.n	800470e <menu+0x35d6>
 80046c6:	2104      	movs	r1, #4
 80046c8:	481c      	ldr	r0, [pc, #112]	; (800473c <menu+0x3604>)
 80046ca:	f004 fcb9 	bl	8009040 <HAL_GPIO_ReadPin>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d11c      	bne.n	800470e <menu+0x35d6>
 80046d4:	4b1a      	ldr	r3, [pc, #104]	; (8004740 <menu+0x3608>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	f083 0301 	eor.w	r3, r3, #1
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d015      	beq.n	800470e <menu+0x35d6>
			takeWifiPass();
 80046e2:	f002 fcd5 	bl	8007090 <takeWifiPass>

			HAL_Delay(250);
 80046e6:	20fa      	movs	r0, #250	; 0xfa
 80046e8:	f003 feda 	bl	80084a0 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 80046ec:	4a21      	ldr	r2, [pc, #132]	; (8004774 <menu+0x363c>)
 80046ee:	2101      	movs	r1, #1
 80046f0:	2002      	movs	r0, #2
 80046f2:	f003 f97f 	bl	80079f4 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 80046f6:	481f      	ldr	r0, [pc, #124]	; (8004774 <menu+0x363c>)
 80046f8:	f7fb fd94 	bl	8000224 <strlen>
 80046fc:	4603      	mov	r3, r0
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	3301      	adds	r3, #1
 8004702:	b2db      	uxtb	r3, r3
 8004704:	4a1a      	ldr	r2, [pc, #104]	; (8004770 <menu+0x3638>)
 8004706:	4619      	mov	r1, r3
 8004708:	2002      	movs	r0, #2
 800470a:	f003 f973 	bl	80079f4 <lcd_print>
		}
	}

	if (menuSayac == 35) {
 800470e:	4b10      	ldr	r3, [pc, #64]	; (8004750 <menu+0x3618>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b23      	cmp	r3, #35	; 0x23
 8004714:	d175      	bne.n	8004802 <menu+0x36ca>
		if(dilSecim == 0) {
 8004716:	4b07      	ldr	r3, [pc, #28]	; (8004734 <menu+0x35fc>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d132      	bne.n	8004784 <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 800471e:	4a17      	ldr	r2, [pc, #92]	; (800477c <menu+0x3644>)
 8004720:	2101      	movs	r1, #1
 8004722:	2001      	movs	r0, #1
 8004724:	f003 f966 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004728:	4a15      	ldr	r2, [pc, #84]	; (8004780 <menu+0x3648>)
 800472a:	2101      	movs	r1, #1
 800472c:	2002      	movs	r0, #2
 800472e:	f003 f961 	bl	80079f4 <lcd_print>
 8004732:	e035      	b.n	80047a0 <menu+0x3668>
 8004734:	20000215 	.word	0x20000215
 8004738:	0800d0c0 	.word	0x0800d0c0
 800473c:	40010800 	.word	0x40010800
 8004740:	20000223 	.word	0x20000223
 8004744:	20000213 	.word	0x20000213
 8004748:	20000120 	.word	0x20000120
 800474c:	20000220 	.word	0x20000220
 8004750:	200001f4 	.word	0x200001f4
 8004754:	20000214 	.word	0x20000214
 8004758:	0800d808 	.word	0x0800d808
 800475c:	0800d81c 	.word	0x0800d81c
 8004760:	20000198 	.word	0x20000198
 8004764:	0800d830 	.word	0x0800d830
 8004768:	200001a4 	.word	0x200001a4
 800476c:	0800d838 	.word	0x0800d838
 8004770:	20000010 	.word	0x20000010
 8004774:	200001b8 	.word	0x200001b8
 8004778:	0800d84c 	.word	0x0800d84c
 800477c:	0800d860 	.word	0x0800d860
 8004780:	0800d874 	.word	0x0800d874
		} else if(dilSecim == 1) {
 8004784:	4b21      	ldr	r3, [pc, #132]	; (800480c <menu+0x36d4>)
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d109      	bne.n	80047a0 <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 800478c:	4a20      	ldr	r2, [pc, #128]	; (8004810 <menu+0x36d8>)
 800478e:	2101      	movs	r1, #1
 8004790:	2001      	movs	r0, #1
 8004792:	f003 f92f 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004796:	4a1f      	ldr	r2, [pc, #124]	; (8004814 <menu+0x36dc>)
 8004798:	2101      	movs	r1, #1
 800479a:	2002      	movs	r0, #2
 800479c:	f003 f92a 	bl	80079f4 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80047a0:	2108      	movs	r1, #8
 80047a2:	481d      	ldr	r0, [pc, #116]	; (8004818 <menu+0x36e0>)
 80047a4:	f004 fc4c 	bl	8009040 <HAL_GPIO_ReadPin>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d129      	bne.n	8004802 <menu+0x36ca>
			menuGiris = 0;
 80047ae:	4b1b      	ldr	r3, [pc, #108]	; (800481c <menu+0x36e4>)
 80047b0:	2200      	movs	r2, #0
 80047b2:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80047b4:	bf00      	nop
 80047b6:	481a      	ldr	r0, [pc, #104]	; (8004820 <menu+0x36e8>)
 80047b8:	f005 fa6b 	bl	8009c92 <HAL_I2C_GetError>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d0f9      	beq.n	80047b6 <menu+0x367e>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80047c2:	bf00      	nop
 80047c4:	4816      	ldr	r0, [pc, #88]	; (8004820 <menu+0x36e8>)
 80047c6:	f005 fa57 	bl	8009c78 <HAL_I2C_GetState>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b20      	cmp	r3, #32
 80047ce:	d1f9      	bne.n	80047c4 <menu+0x368c>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80047d0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80047d4:	9302      	str	r3, [sp, #8]
 80047d6:	236e      	movs	r3, #110	; 0x6e
 80047d8:	9301      	str	r3, [sp, #4]
 80047da:	4b12      	ldr	r3, [pc, #72]	; (8004824 <menu+0x36ec>)
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	236e      	movs	r3, #110	; 0x6e
 80047e0:	2200      	movs	r2, #0
 80047e2:	21a0      	movs	r1, #160	; 0xa0
 80047e4:	480e      	ldr	r0, [pc, #56]	; (8004820 <menu+0x36e8>)
 80047e6:	f004 fee5 	bl	80095b4 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 80047ea:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80047ee:	f003 fe57 	bl	80084a0 <HAL_Delay>

			lcd_clear();
 80047f2:	f003 f92b 	bl	8007a4c <lcd_clear>
			HAL_Delay(500);
 80047f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80047fa:	f003 fe51 	bl	80084a0 <HAL_Delay>
			NVIC_SystemReset();
 80047fe:	f7fc fc85 	bl	800110c <__NVIC_SystemReset>
		}
	}
}
 8004802:	bf00      	nop
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000215 	.word	0x20000215
 8004810:	0800d888 	.word	0x0800d888
 8004814:	0800d89c 	.word	0x0800d89c
 8004818:	40010800 	.word	0x40010800
 800481c:	20000211 	.word	0x20000211
 8004820:	20000284 	.word	0x20000284
 8004824:	20000120 	.word	0x20000120

08004828 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	4603      	mov	r3, r0
 8004830:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004832:	79fb      	ldrb	r3, [r7, #7]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d105      	bne.n	8004844 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004838:	4a22      	ldr	r2, [pc, #136]	; (80048c4 <lcdUpdate+0x9c>)
 800483a:	2101      	movs	r1, #1
 800483c:	2002      	movs	r0, #2
 800483e:	f003 f8d9 	bl	80079f4 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 8004842:	e03b      	b.n	80048bc <lcdUpdate+0x94>
	} else if(y==2) {
 8004844:	79fb      	ldrb	r3, [r7, #7]
 8004846:	2b02      	cmp	r3, #2
 8004848:	d105      	bne.n	8004856 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 800484a:	4a1e      	ldr	r2, [pc, #120]	; (80048c4 <lcdUpdate+0x9c>)
 800484c:	2102      	movs	r1, #2
 800484e:	2002      	movs	r0, #2
 8004850:	f003 f8d0 	bl	80079f4 <lcd_print>
}
 8004854:	e032      	b.n	80048bc <lcdUpdate+0x94>
	} else if(y==3) {
 8004856:	79fb      	ldrb	r3, [r7, #7]
 8004858:	2b03      	cmp	r3, #3
 800485a:	d105      	bne.n	8004868 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 800485c:	4a19      	ldr	r2, [pc, #100]	; (80048c4 <lcdUpdate+0x9c>)
 800485e:	2103      	movs	r1, #3
 8004860:	2002      	movs	r0, #2
 8004862:	f003 f8c7 	bl	80079f4 <lcd_print>
}
 8004866:	e029      	b.n	80048bc <lcdUpdate+0x94>
	} else if(y==4) {
 8004868:	79fb      	ldrb	r3, [r7, #7]
 800486a:	2b04      	cmp	r3, #4
 800486c:	d105      	bne.n	800487a <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 800486e:	4a15      	ldr	r2, [pc, #84]	; (80048c4 <lcdUpdate+0x9c>)
 8004870:	2104      	movs	r1, #4
 8004872:	2002      	movs	r0, #2
 8004874:	f003 f8be 	bl	80079f4 <lcd_print>
}
 8004878:	e020      	b.n	80048bc <lcdUpdate+0x94>
	} else if(y==5) {
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	2b05      	cmp	r3, #5
 800487e:	d105      	bne.n	800488c <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004880:	4a10      	ldr	r2, [pc, #64]	; (80048c4 <lcdUpdate+0x9c>)
 8004882:	2105      	movs	r1, #5
 8004884:	2002      	movs	r0, #2
 8004886:	f003 f8b5 	bl	80079f4 <lcd_print>
}
 800488a:	e017      	b.n	80048bc <lcdUpdate+0x94>
	} else if(y==6) {
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	2b06      	cmp	r3, #6
 8004890:	d105      	bne.n	800489e <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8004892:	4a0c      	ldr	r2, [pc, #48]	; (80048c4 <lcdUpdate+0x9c>)
 8004894:	2106      	movs	r1, #6
 8004896:	2002      	movs	r0, #2
 8004898:	f003 f8ac 	bl	80079f4 <lcd_print>
}
 800489c:	e00e      	b.n	80048bc <lcdUpdate+0x94>
	} else if (y==7) {
 800489e:	79fb      	ldrb	r3, [r7, #7]
 80048a0:	2b07      	cmp	r3, #7
 80048a2:	d10b      	bne.n	80048bc <lcdUpdate+0x94>
		lcd_clear();
 80048a4:	f003 f8d2 	bl	8007a4c <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 80048a8:	4a07      	ldr	r2, [pc, #28]	; (80048c8 <lcdUpdate+0xa0>)
 80048aa:	2104      	movs	r1, #4
 80048ac:	2001      	movs	r0, #1
 80048ae:	f003 f8a1 	bl	80079f4 <lcd_print>
		lcd_print(2, 6, "RUN");
 80048b2:	4a06      	ldr	r2, [pc, #24]	; (80048cc <lcdUpdate+0xa4>)
 80048b4:	2106      	movs	r1, #6
 80048b6:	2002      	movs	r0, #2
 80048b8:	f003 f89c 	bl	80079f4 <lcd_print>
}
 80048bc:	bf00      	nop
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	0800d8b0 	.word	0x0800d8b0
 80048c8:	0800d8b4 	.word	0x0800d8b4
 80048cc:	0800d8bc 	.word	0x0800d8bc

080048d0 <bekle>:

void bekle() {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
	timer1=millis;
 80048d4:	4b47      	ldr	r3, [pc, #284]	; (80049f4 <bekle+0x124>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a47      	ldr	r2, [pc, #284]	; (80049f8 <bekle+0x128>)
 80048da:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048dc:	e002      	b.n	80048e4 <bekle+0x14>
    	butonKontrol = 1;
 80048de:	4b47      	ldr	r3, [pc, #284]	; (80049fc <bekle+0x12c>)
 80048e0:	2201      	movs	r2, #1
 80048e2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048e4:	2101      	movs	r1, #1
 80048e6:	4846      	ldr	r0, [pc, #280]	; (8004a00 <bekle+0x130>)
 80048e8:	f004 fbaa 	bl	8009040 <HAL_GPIO_ReadPin>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d109      	bne.n	8004906 <bekle+0x36>
 80048f2:	4b40      	ldr	r3, [pc, #256]	; (80049f4 <bekle+0x124>)
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	4b40      	ldr	r3, [pc, #256]	; (80049f8 <bekle+0x128>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d0ef      	beq.n	80048de <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80048fe:	e002      	b.n	8004906 <bekle+0x36>
    	butonKontrol = 1;
 8004900:	4b3e      	ldr	r3, [pc, #248]	; (80049fc <bekle+0x12c>)
 8004902:	2201      	movs	r2, #1
 8004904:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004906:	2108      	movs	r1, #8
 8004908:	483e      	ldr	r0, [pc, #248]	; (8004a04 <bekle+0x134>)
 800490a:	f004 fb99 	bl	8009040 <HAL_GPIO_ReadPin>
 800490e:	4603      	mov	r3, r0
 8004910:	2b01      	cmp	r3, #1
 8004912:	d109      	bne.n	8004928 <bekle+0x58>
 8004914:	4b37      	ldr	r3, [pc, #220]	; (80049f4 <bekle+0x124>)
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	4b37      	ldr	r3, [pc, #220]	; (80049f8 <bekle+0x128>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	429a      	cmp	r2, r3
 800491e:	d0ef      	beq.n	8004900 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004920:	e002      	b.n	8004928 <bekle+0x58>
    	butonKontrol = 1;
 8004922:	4b36      	ldr	r3, [pc, #216]	; (80049fc <bekle+0x12c>)
 8004924:	2201      	movs	r2, #1
 8004926:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004928:	2102      	movs	r1, #2
 800492a:	4835      	ldr	r0, [pc, #212]	; (8004a00 <bekle+0x130>)
 800492c:	f004 fb88 	bl	8009040 <HAL_GPIO_ReadPin>
 8004930:	4603      	mov	r3, r0
 8004932:	2b01      	cmp	r3, #1
 8004934:	d109      	bne.n	800494a <bekle+0x7a>
 8004936:	4b2f      	ldr	r3, [pc, #188]	; (80049f4 <bekle+0x124>)
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	4b2f      	ldr	r3, [pc, #188]	; (80049f8 <bekle+0x128>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d0ef      	beq.n	8004922 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004942:	e002      	b.n	800494a <bekle+0x7a>
    	butonKontrol = 1;
 8004944:	4b2d      	ldr	r3, [pc, #180]	; (80049fc <bekle+0x12c>)
 8004946:	2201      	movs	r2, #1
 8004948:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800494a:	2104      	movs	r1, #4
 800494c:	482c      	ldr	r0, [pc, #176]	; (8004a00 <bekle+0x130>)
 800494e:	f004 fb77 	bl	8009040 <HAL_GPIO_ReadPin>
 8004952:	4603      	mov	r3, r0
 8004954:	2b01      	cmp	r3, #1
 8004956:	d109      	bne.n	800496c <bekle+0x9c>
 8004958:	4b26      	ldr	r3, [pc, #152]	; (80049f4 <bekle+0x124>)
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	4b26      	ldr	r3, [pc, #152]	; (80049f8 <bekle+0x128>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	429a      	cmp	r2, r3
 8004962:	d0ef      	beq.n	8004944 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004964:	e002      	b.n	800496c <bekle+0x9c>
    	butonKontrol = 1;
 8004966:	4b25      	ldr	r3, [pc, #148]	; (80049fc <bekle+0x12c>)
 8004968:	2201      	movs	r2, #1
 800496a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800496c:	2108      	movs	r1, #8
 800496e:	4824      	ldr	r0, [pc, #144]	; (8004a00 <bekle+0x130>)
 8004970:	f004 fb66 	bl	8009040 <HAL_GPIO_ReadPin>
 8004974:	4603      	mov	r3, r0
 8004976:	2b01      	cmp	r3, #1
 8004978:	d109      	bne.n	800498e <bekle+0xbe>
 800497a:	4b1e      	ldr	r3, [pc, #120]	; (80049f4 <bekle+0x124>)
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	4b1e      	ldr	r3, [pc, #120]	; (80049f8 <bekle+0x128>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d0ef      	beq.n	8004966 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004986:	e002      	b.n	800498e <bekle+0xbe>
    	butonKontrol = 1;
 8004988:	4b1c      	ldr	r3, [pc, #112]	; (80049fc <bekle+0x12c>)
 800498a:	2201      	movs	r2, #1
 800498c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800498e:	2180      	movs	r1, #128	; 0x80
 8004990:	481c      	ldr	r0, [pc, #112]	; (8004a04 <bekle+0x134>)
 8004992:	f004 fb55 	bl	8009040 <HAL_GPIO_ReadPin>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d109      	bne.n	80049b0 <bekle+0xe0>
 800499c:	4b15      	ldr	r3, [pc, #84]	; (80049f4 <bekle+0x124>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	4b15      	ldr	r3, [pc, #84]	; (80049f8 <bekle+0x128>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d0ef      	beq.n	8004988 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80049a8:	e002      	b.n	80049b0 <bekle+0xe0>
    	butonKontrol = 1;
 80049aa:	4b14      	ldr	r3, [pc, #80]	; (80049fc <bekle+0x12c>)
 80049ac:	2201      	movs	r2, #1
 80049ae:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80049b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80049b4:	4813      	ldr	r0, [pc, #76]	; (8004a04 <bekle+0x134>)
 80049b6:	f004 fb43 	bl	8009040 <HAL_GPIO_ReadPin>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d109      	bne.n	80049d4 <bekle+0x104>
 80049c0:	4b0c      	ldr	r3, [pc, #48]	; (80049f4 <bekle+0x124>)
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <bekle+0x128>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d0ee      	beq.n	80049aa <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80049cc:	e002      	b.n	80049d4 <bekle+0x104>
    	butonKontrol = 1;
 80049ce:	4b0b      	ldr	r3, [pc, #44]	; (80049fc <bekle+0x12c>)
 80049d0:	2201      	movs	r2, #1
 80049d2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80049d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80049d8:	480a      	ldr	r0, [pc, #40]	; (8004a04 <bekle+0x134>)
 80049da:	f004 fb31 	bl	8009040 <HAL_GPIO_ReadPin>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d105      	bne.n	80049f0 <bekle+0x120>
 80049e4:	4b03      	ldr	r3, [pc, #12]	; (80049f4 <bekle+0x124>)
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	4b03      	ldr	r3, [pc, #12]	; (80049f8 <bekle+0x128>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d0ee      	beq.n	80049ce <bekle+0xfe>
    }

}
 80049f0:	bf00      	nop
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	200001d0 	.word	0x200001d0
 80049f8:	200001d8 	.word	0x200001d8
 80049fc:	20000223 	.word	0x20000223
 8004a00:	40010800 	.word	0x40010800
 8004a04:	40011000 	.word	0x40011000

08004a08 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004a0c:	4b07      	ldr	r3, [pc, #28]	; (8004a2c <checkLCDBacklight+0x24>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <checkLCDBacklight+0x28>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b3b      	cmp	r3, #59	; 0x3b
 8004a18:	d903      	bls.n	8004a22 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004a1a:	2000      	movs	r0, #0
 8004a1c:	f003 f836 	bl	8007a8c <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004a20:	e002      	b.n	8004a28 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004a22:	2001      	movs	r0, #1
 8004a24:	f003 f832 	bl	8007a8c <lcd_backlight>
}
 8004a28:	bf00      	nop
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	200001d0 	.word	0x200001d0
 8004a30:	200001ec 	.word	0x200001ec

08004a34 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004a38:	4b13      	ldr	r3, [pc, #76]	; (8004a88 <checkBasincSalteri+0x54>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d102      	bne.n	8004a46 <checkBasincSalteri+0x12>
		basincVar=1;
 8004a40:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <checkBasincSalteri+0x58>)
 8004a42:	2201      	movs	r2, #1
 8004a44:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004a46:	4b10      	ldr	r3, [pc, #64]	; (8004a88 <checkBasincSalteri+0x54>)
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d119      	bne.n	8004a82 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004a4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a52:	480f      	ldr	r0, [pc, #60]	; (8004a90 <checkBasincSalteri+0x5c>)
 8004a54:	f004 faf4 	bl	8009040 <HAL_GPIO_ReadPin>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <checkBasincSalteri+0x60>)
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	4b0d      	ldr	r3, [pc, #52]	; (8004a98 <checkBasincSalteri+0x64>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d90a      	bls.n	8004a82 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004a6c:	4b07      	ldr	r3, [pc, #28]	; (8004a8c <checkBasincSalteri+0x58>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004a72:	e006      	b.n	8004a82 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004a74:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <checkBasincSalteri+0x60>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a07      	ldr	r2, [pc, #28]	; (8004a98 <checkBasincSalteri+0x64>)
 8004a7a:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004a7c:	4b03      	ldr	r3, [pc, #12]	; (8004a8c <checkBasincSalteri+0x58>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	701a      	strb	r2, [r3, #0]
}
 8004a82:	bf00      	nop
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	200001fb 	.word	0x200001fb
 8004a8c:	200001f7 	.word	0x200001f7
 8004a90:	40011000 	.word	0x40011000
 8004a94:	200001d0 	.word	0x200001d0
 8004a98:	200001e8 	.word	0x200001e8

08004a9c <checkBasGonder>:

void checkBasGonder() {
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004aa0:	4b1b      	ldr	r3, [pc, #108]	; (8004b10 <checkBasGonder+0x74>)
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d10b      	bne.n	8004ac0 <checkBasGonder+0x24>
 8004aa8:	4b1a      	ldr	r3, [pc, #104]	; (8004b14 <checkBasGonder+0x78>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d007      	beq.n	8004ac0 <checkBasGonder+0x24>
 8004ab0:	4b19      	ldr	r3, [pc, #100]	; (8004b18 <checkBasGonder+0x7c>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d103      	bne.n	8004ac0 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004ab8:	4b18      	ldr	r3, [pc, #96]	; (8004b1c <checkBasGonder+0x80>)
 8004aba:	2201      	movs	r2, #1
 8004abc:	701a      	strb	r2, [r3, #0]
 8004abe:	e009      	b.n	8004ad4 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004ac0:	4b14      	ldr	r3, [pc, #80]	; (8004b14 <checkBasGonder+0x78>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	f083 0301 	eor.w	r3, r3, #1
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004ace:	4b13      	ldr	r3, [pc, #76]	; (8004b1c <checkBasGonder+0x80>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004ad4:	4b0e      	ldr	r3, [pc, #56]	; (8004b10 <checkBasGonder+0x74>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d10b      	bne.n	8004af4 <checkBasGonder+0x58>
 8004adc:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <checkBasGonder+0x84>)
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d007      	beq.n	8004af4 <checkBasGonder+0x58>
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <checkBasGonder+0x7c>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d103      	bne.n	8004af4 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004aec:	4b0d      	ldr	r3, [pc, #52]	; (8004b24 <checkBasGonder+0x88>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004af2:	e009      	b.n	8004b08 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004af4:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <checkBasGonder+0x84>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	f083 0301 	eor.w	r3, r3, #1
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004b02:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <checkBasGonder+0x88>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	701a      	strb	r2, [r3, #0]
}
 8004b08:	bf00      	nop
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bc80      	pop	{r7}
 8004b0e:	4770      	bx	lr
 8004b10:	200001f5 	.word	0x200001f5
 8004b14:	20000229 	.word	0x20000229
 8004b18:	20000203 	.word	0x20000203
 8004b1c:	20000230 	.word	0x20000230
 8004b20:	2000022c 	.word	0x2000022c
 8004b24:	20000231 	.word	0x20000231

08004b28 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004b2c:	4b24      	ldr	r3, [pc, #144]	; (8004bc0 <checkKapiSecimleri+0x98>)
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d102      	bne.n	8004b3a <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004b34:	4b23      	ldr	r3, [pc, #140]	; (8004bc4 <checkKapiSecimleri+0x9c>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004b3a:	4b21      	ldr	r3, [pc, #132]	; (8004bc0 <checkKapiSecimleri+0x98>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d10e      	bne.n	8004b60 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004b42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b46:	4820      	ldr	r0, [pc, #128]	; (8004bc8 <checkKapiSecimleri+0xa0>)
 8004b48:	f004 fa7a 	bl	8009040 <HAL_GPIO_ReadPin>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d103      	bne.n	8004b5a <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004b52:	4b1c      	ldr	r3, [pc, #112]	; (8004bc4 <checkKapiSecimleri+0x9c>)
 8004b54:	2201      	movs	r2, #1
 8004b56:	701a      	strb	r2, [r3, #0]
 8004b58:	e002      	b.n	8004b60 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004b5a:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <checkKapiSecimleri+0x9c>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004b60:	4b17      	ldr	r3, [pc, #92]	; (8004bc0 <checkKapiSecimleri+0x98>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d10e      	bne.n	8004b86 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004b68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b6c:	4816      	ldr	r0, [pc, #88]	; (8004bc8 <checkKapiSecimleri+0xa0>)
 8004b6e:	f004 fa67 	bl	8009040 <HAL_GPIO_ReadPin>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d103      	bne.n	8004b80 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004b78:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <checkKapiSecimleri+0x9c>)
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	701a      	strb	r2, [r3, #0]
 8004b7e:	e002      	b.n	8004b86 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004b80:	4b10      	ldr	r3, [pc, #64]	; (8004bc4 <checkKapiSecimleri+0x9c>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004b86:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <checkKapiSecimleri+0x98>)
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d116      	bne.n	8004bbc <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004b8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b92:	480d      	ldr	r0, [pc, #52]	; (8004bc8 <checkKapiSecimleri+0xa0>)
 8004b94:	f004 fa54 	bl	8009040 <HAL_GPIO_ReadPin>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10b      	bne.n	8004bb6 <checkKapiSecimleri+0x8e>
 8004b9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ba2:	4809      	ldr	r0, [pc, #36]	; (8004bc8 <checkKapiSecimleri+0xa0>)
 8004ba4:	f004 fa4c 	bl	8009040 <HAL_GPIO_ReadPin>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d103      	bne.n	8004bb6 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004bae:	4b05      	ldr	r3, [pc, #20]	; (8004bc4 <checkKapiSecimleri+0x9c>)
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004bb4:	e002      	b.n	8004bbc <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004bb6:	4b03      	ldr	r3, [pc, #12]	; (8004bc4 <checkKapiSecimleri+0x9c>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	701a      	strb	r2, [r3, #0]
}
 8004bbc:	bf00      	nop
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	200001fc 	.word	0x200001fc
 8004bc4:	20000247 	.word	0x20000247
 8004bc8:	40010800 	.word	0x40010800

08004bcc <checkAktifCalisma>:

void checkAktifCalisma() {
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004bd0:	4b62      	ldr	r3, [pc, #392]	; (8004d5c <checkAktifCalisma+0x190>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f041 833e 	bne.w	8006256 <checkAktifCalisma+0x168a>
 8004bda:	4b61      	ldr	r3, [pc, #388]	; (8004d60 <checkAktifCalisma+0x194>)
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f041 8339 	bne.w	8006256 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004be4:	4b5f      	ldr	r3, [pc, #380]	; (8004d64 <checkAktifCalisma+0x198>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d11a      	bne.n	8004c22 <checkAktifCalisma+0x56>
 8004bec:	4b5e      	ldr	r3, [pc, #376]	; (8004d68 <checkAktifCalisma+0x19c>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d116      	bne.n	8004c22 <checkAktifCalisma+0x56>
 8004bf4:	4b5d      	ldr	r3, [pc, #372]	; (8004d6c <checkAktifCalisma+0x1a0>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <checkAktifCalisma+0x46>
 8004bfc:	4b5c      	ldr	r3, [pc, #368]	; (8004d70 <checkAktifCalisma+0x1a4>)
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	f083 0301 	eor.w	r3, r3, #1
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <checkAktifCalisma+0x46>
 8004c0a:	4b5a      	ldr	r3, [pc, #360]	; (8004d74 <checkAktifCalisma+0x1a8>)
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d007      	beq.n	8004c22 <checkAktifCalisma+0x56>
 8004c12:	4b59      	ldr	r3, [pc, #356]	; (8004d78 <checkAktifCalisma+0x1ac>)
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d018      	beq.n	8004c4c <checkAktifCalisma+0x80>
 8004c1a:	4b58      	ldr	r3, [pc, #352]	; (8004d7c <checkAktifCalisma+0x1b0>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d114      	bne.n	8004c4c <checkAktifCalisma+0x80>
 8004c22:	4b57      	ldr	r3, [pc, #348]	; (8004d80 <checkAktifCalisma+0x1b4>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d010      	beq.n	8004c4c <checkAktifCalisma+0x80>
 8004c2a:	4b56      	ldr	r3, [pc, #344]	; (8004d84 <checkAktifCalisma+0x1b8>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00c      	beq.n	8004c4c <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004c32:	2201      	movs	r2, #1
 8004c34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c38:	4853      	ldr	r0, [pc, #332]	; (8004d88 <checkAktifCalisma+0x1bc>)
 8004c3a:	f004 fa18 	bl	800906e <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004c3e:	4b53      	ldr	r3, [pc, #332]	; (8004d8c <checkAktifCalisma+0x1c0>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004c44:	4b52      	ldr	r3, [pc, #328]	; (8004d90 <checkAktifCalisma+0x1c4>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	e008      	b.n	8004c5e <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004c52:	484d      	ldr	r0, [pc, #308]	; (8004d88 <checkAktifCalisma+0x1bc>)
 8004c54:	f004 fa0b 	bl	800906e <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004c58:	4b4c      	ldr	r3, [pc, #304]	; (8004d8c <checkAktifCalisma+0x1c0>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004c5e:	4b40      	ldr	r3, [pc, #256]	; (8004d60 <checkAktifCalisma+0x194>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d160      	bne.n	8004d28 <checkAktifCalisma+0x15c>
 8004c66:	4b46      	ldr	r3, [pc, #280]	; (8004d80 <checkAktifCalisma+0x1b4>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d05c      	beq.n	8004d28 <checkAktifCalisma+0x15c>
 8004c6e:	4b45      	ldr	r3, [pc, #276]	; (8004d84 <checkAktifCalisma+0x1b8>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d058      	beq.n	8004d28 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004c76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004c7a:	4843      	ldr	r0, [pc, #268]	; (8004d88 <checkAktifCalisma+0x1bc>)
 8004c7c:	f004 f9e0 	bl	8009040 <HAL_GPIO_ReadPin>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <checkAktifCalisma+0xc2>
 8004c86:	4b43      	ldr	r3, [pc, #268]	; (8004d94 <checkAktifCalisma+0x1c8>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d04c      	beq.n	8004d28 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004c8e:	2102      	movs	r1, #2
 8004c90:	4841      	ldr	r0, [pc, #260]	; (8004d98 <checkAktifCalisma+0x1cc>)
 8004c92:	f004 f9d5 	bl	8009040 <HAL_GPIO_ReadPin>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d145      	bne.n	8004d28 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004c9c:	4b3f      	ldr	r3, [pc, #252]	; (8004d9c <checkAktifCalisma+0x1d0>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d041      	beq.n	8004d28 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004ca4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ca8:	4837      	ldr	r0, [pc, #220]	; (8004d88 <checkAktifCalisma+0x1bc>)
 8004caa:	f004 f9c9 	bl	8009040 <HAL_GPIO_ReadPin>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d10e      	bne.n	8004cd2 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004cb4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cb8:	4833      	ldr	r0, [pc, #204]	; (8004d88 <checkAktifCalisma+0x1bc>)
 8004cba:	f004 f9c1 	bl	8009040 <HAL_GPIO_ReadPin>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d106      	bne.n	8004cd2 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004cc4:	2140      	movs	r1, #64	; 0x40
 8004cc6:	4834      	ldr	r0, [pc, #208]	; (8004d98 <checkAktifCalisma+0x1cc>)
 8004cc8:	f004 f9ba 	bl	8009040 <HAL_GPIO_ReadPin>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d003      	beq.n	8004cda <checkAktifCalisma+0x10e>
 8004cd2:	4b24      	ldr	r3, [pc, #144]	; (8004d64 <checkAktifCalisma+0x198>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d026      	beq.n	8004d28 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004cda:	4b24      	ldr	r3, [pc, #144]	; (8004d6c <checkAktifCalisma+0x1a0>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	f083 0301 	eor.w	r3, r3, #1
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d01f      	beq.n	8004d28 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004ce8:	4b1f      	ldr	r3, [pc, #124]	; (8004d68 <checkAktifCalisma+0x19c>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	f083 0301 	eor.w	r3, r3, #1
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d018      	beq.n	8004d28 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004cf6:	4b20      	ldr	r3, [pc, #128]	; (8004d78 <checkAktifCalisma+0x1ac>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	f083 0301 	eor.w	r3, r3, #1
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d011      	beq.n	8004d28 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004d04:	4b26      	ldr	r3, [pc, #152]	; (8004da0 <checkAktifCalisma+0x1d4>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	f083 0301 	eor.w	r3, r3, #1
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004d12:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <checkAktifCalisma+0x1d8>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	f083 0301 	eor.w	r3, r3, #1
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004d20:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <checkAktifCalisma+0x198>)
 8004d22:	2201      	movs	r2, #1
 8004d24:	701a      	strb	r2, [r3, #0]
 8004d26:	e002      	b.n	8004d2e <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004d28:	4b0e      	ldr	r3, [pc, #56]	; (8004d64 <checkAktifCalisma+0x198>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004d2e:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <checkAktifCalisma+0x198>)
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d03a      	beq.n	8004dac <checkAktifCalisma+0x1e0>
 8004d36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d3a:	4817      	ldr	r0, [pc, #92]	; (8004d98 <checkAktifCalisma+0x1cc>)
 8004d3c:	f004 f980 	bl	8009040 <HAL_GPIO_ReadPin>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d132      	bne.n	8004dac <checkAktifCalisma+0x1e0>
 8004d46:	4b18      	ldr	r3, [pc, #96]	; (8004da8 <checkAktifCalisma+0x1dc>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d02e      	beq.n	8004dac <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004d54:	480c      	ldr	r0, [pc, #48]	; (8004d88 <checkAktifCalisma+0x1bc>)
 8004d56:	f004 f98a 	bl	800906e <HAL_GPIO_WritePin>
 8004d5a:	e02d      	b.n	8004db8 <checkAktifCalisma+0x1ec>
 8004d5c:	20000212 	.word	0x20000212
 8004d60:	20000211 	.word	0x20000211
 8004d64:	20000229 	.word	0x20000229
 8004d68:	2000022a 	.word	0x2000022a
 8004d6c:	2000022c 	.word	0x2000022c
 8004d70:	20000224 	.word	0x20000224
 8004d74:	20000207 	.word	0x20000207
 8004d78:	2000022b 	.word	0x2000022b
 8004d7c:	20000206 	.word	0x20000206
 8004d80:	20000246 	.word	0x20000246
 8004d84:	20000247 	.word	0x20000247
 8004d88:	40010c00 	.word	0x40010c00
 8004d8c:	20000248 	.word	0x20000248
 8004d90:	20000233 	.word	0x20000233
 8004d94:	20000230 	.word	0x20000230
 8004d98:	40011000 	.word	0x40011000
 8004d9c:	200001f7 	.word	0x200001f7
 8004da0:	2000022e 	.word	0x2000022e
 8004da4:	2000022f 	.word	0x2000022f
 8004da8:	20000202 	.word	0x20000202
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004dac:	2200      	movs	r2, #0
 8004dae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004db2:	4860      	ldr	r0, [pc, #384]	; (8004f34 <checkAktifCalisma+0x368>)
 8004db4:	f004 f95b 	bl	800906e <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004db8:	4b5f      	ldr	r3, [pc, #380]	; (8004f38 <checkAktifCalisma+0x36c>)
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d013      	beq.n	8004de8 <checkAktifCalisma+0x21c>
 8004dc0:	4b5e      	ldr	r3, [pc, #376]	; (8004f3c <checkAktifCalisma+0x370>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d007      	beq.n	8004dd8 <checkAktifCalisma+0x20c>
 8004dc8:	4b5c      	ldr	r3, [pc, #368]	; (8004f3c <checkAktifCalisma+0x370>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d003      	beq.n	8004dd8 <checkAktifCalisma+0x20c>
 8004dd0:	4b5b      	ldr	r3, [pc, #364]	; (8004f40 <checkAktifCalisma+0x374>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d107      	bne.n	8004de8 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004dd8:	2201      	movs	r2, #1
 8004dda:	2104      	movs	r1, #4
 8004ddc:	4855      	ldr	r0, [pc, #340]	; (8004f34 <checkAktifCalisma+0x368>)
 8004dde:	f004 f946 	bl	800906e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004de2:	4b58      	ldr	r3, [pc, #352]	; (8004f44 <checkAktifCalisma+0x378>)
 8004de4:	2201      	movs	r2, #1
 8004de6:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004de8:	4b56      	ldr	r3, [pc, #344]	; (8004f44 <checkAktifCalisma+0x378>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d02f      	beq.n	8004e50 <checkAktifCalisma+0x284>
 8004df0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004df4:	484f      	ldr	r0, [pc, #316]	; (8004f34 <checkAktifCalisma+0x368>)
 8004df6:	f004 f923 	bl	8009040 <HAL_GPIO_ReadPin>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d106      	bne.n	8004e0e <checkAktifCalisma+0x242>
 8004e00:	4b51      	ldr	r3, [pc, #324]	; (8004f48 <checkAktifCalisma+0x37c>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	f083 0301 	eor.w	r3, r3, #1
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <checkAktifCalisma+0x250>
 8004e0e:	2102      	movs	r1, #2
 8004e10:	484e      	ldr	r0, [pc, #312]	; (8004f4c <checkAktifCalisma+0x380>)
 8004e12:	f004 f915 	bl	8009040 <HAL_GPIO_ReadPin>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d119      	bne.n	8004e50 <checkAktifCalisma+0x284>
 8004e1c:	4b4c      	ldr	r3, [pc, #304]	; (8004f50 <checkAktifCalisma+0x384>)
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d015      	beq.n	8004e50 <checkAktifCalisma+0x284>
 8004e24:	4b4b      	ldr	r3, [pc, #300]	; (8004f54 <checkAktifCalisma+0x388>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d011      	beq.n	8004e50 <checkAktifCalisma+0x284>
 8004e2c:	4b4a      	ldr	r3, [pc, #296]	; (8004f58 <checkAktifCalisma+0x38c>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00d      	beq.n	8004e50 <checkAktifCalisma+0x284>
 8004e34:	4b49      	ldr	r3, [pc, #292]	; (8004f5c <checkAktifCalisma+0x390>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	f083 0301 	eor.w	r3, r3, #1
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d006      	beq.n	8004e50 <checkAktifCalisma+0x284>
			timer2=millis;
 8004e42:	4b47      	ldr	r3, [pc, #284]	; (8004f60 <checkAktifCalisma+0x394>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a47      	ldr	r2, [pc, #284]	; (8004f64 <checkAktifCalisma+0x398>)
 8004e48:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8004e4a:	4b44      	ldr	r3, [pc, #272]	; (8004f5c <checkAktifCalisma+0x390>)
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004e50:	4b43      	ldr	r3, [pc, #268]	; (8004f60 <checkAktifCalisma+0x394>)
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	4b43      	ldr	r3, [pc, #268]	; (8004f64 <checkAktifCalisma+0x398>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	4a43      	ldr	r2, [pc, #268]	; (8004f68 <checkAktifCalisma+0x39c>)
 8004e5c:	7812      	ldrb	r2, [r2, #0]
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d303      	bcc.n	8004e6a <checkAktifCalisma+0x29e>
 8004e62:	4b3e      	ldr	r3, [pc, #248]	; (8004f5c <checkAktifCalisma+0x390>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d111      	bne.n	8004e8e <checkAktifCalisma+0x2c2>
 8004e6a:	4b39      	ldr	r3, [pc, #228]	; (8004f50 <checkAktifCalisma+0x384>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	f083 0301 	eor.w	r3, r3, #1
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10a      	bne.n	8004e8e <checkAktifCalisma+0x2c2>
 8004e78:	4b36      	ldr	r3, [pc, #216]	; (8004f54 <checkAktifCalisma+0x388>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	f083 0301 	eor.w	r3, r3, #1
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d103      	bne.n	8004e8e <checkAktifCalisma+0x2c2>
 8004e86:	4b34      	ldr	r3, [pc, #208]	; (8004f58 <checkAktifCalisma+0x38c>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10a      	bne.n	8004ea4 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004e8e:	2200      	movs	r2, #0
 8004e90:	2104      	movs	r1, #4
 8004e92:	4828      	ldr	r0, [pc, #160]	; (8004f34 <checkAktifCalisma+0x368>)
 8004e94:	f004 f8eb 	bl	800906e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8004e98:	4b2a      	ldr	r3, [pc, #168]	; (8004f44 <checkAktifCalisma+0x378>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8004e9e:	4b2f      	ldr	r3, [pc, #188]	; (8004f5c <checkAktifCalisma+0x390>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8004ea4:	4b31      	ldr	r3, [pc, #196]	; (8004f6c <checkAktifCalisma+0x3a0>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d102      	bne.n	8004eb2 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8004eac:	4b30      	ldr	r3, [pc, #192]	; (8004f70 <checkAktifCalisma+0x3a4>)
 8004eae:	2201      	movs	r2, #1
 8004eb0:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004eb2:	4b2e      	ldr	r3, [pc, #184]	; (8004f6c <checkAktifCalisma+0x3a0>)
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d116      	bne.n	8004ee8 <checkAktifCalisma+0x31c>
 8004eba:	4b2e      	ldr	r3, [pc, #184]	; (8004f74 <checkAktifCalisma+0x3a8>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d112      	bne.n	8004ee8 <checkAktifCalisma+0x31c>
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	4821      	ldr	r0, [pc, #132]	; (8004f4c <checkAktifCalisma+0x380>)
 8004ec6:	f004 f8bb 	bl	8009040 <HAL_GPIO_ReadPin>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10b      	bne.n	8004ee8 <checkAktifCalisma+0x31c>
 8004ed0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ed4:	4817      	ldr	r0, [pc, #92]	; (8004f34 <checkAktifCalisma+0x368>)
 8004ed6:	f004 f8b3 	bl	8009040 <HAL_GPIO_ReadPin>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d103      	bne.n	8004ee8 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8004ee0:	4b23      	ldr	r3, [pc, #140]	; (8004f70 <checkAktifCalisma+0x3a4>)
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	e011      	b.n	8004f0c <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004ee8:	4b20      	ldr	r3, [pc, #128]	; (8004f6c <checkAktifCalisma+0x3a0>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d10d      	bne.n	8004f0c <checkAktifCalisma+0x340>
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	4816      	ldr	r0, [pc, #88]	; (8004f4c <checkAktifCalisma+0x380>)
 8004ef4:	f004 f8a4 	bl	8009040 <HAL_GPIO_ReadPin>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d106      	bne.n	8004f0c <checkAktifCalisma+0x340>
 8004efe:	4b1d      	ldr	r3, [pc, #116]	; (8004f74 <checkAktifCalisma+0x3a8>)
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d102      	bne.n	8004f0c <checkAktifCalisma+0x340>
			cerceveVar=0;
 8004f06:	4b1a      	ldr	r3, [pc, #104]	; (8004f70 <checkAktifCalisma+0x3a4>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8004f0c:	4b17      	ldr	r3, [pc, #92]	; (8004f6c <checkAktifCalisma+0x3a0>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d134      	bne.n	8004f7e <checkAktifCalisma+0x3b2>
 8004f14:	4b17      	ldr	r3, [pc, #92]	; (8004f74 <checkAktifCalisma+0x3a8>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d130      	bne.n	8004f7e <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	480b      	ldr	r0, [pc, #44]	; (8004f4c <checkAktifCalisma+0x380>)
 8004f20:	f004 f88e 	bl	8009040 <HAL_GPIO_ReadPin>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d126      	bne.n	8004f78 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8004f2a:	4b11      	ldr	r3, [pc, #68]	; (8004f70 <checkAktifCalisma+0x3a4>)
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	e025      	b.n	8004f7e <checkAktifCalisma+0x3b2>
 8004f32:	bf00      	nop
 8004f34:	40010c00 	.word	0x40010c00
 8004f38:	20000229 	.word	0x20000229
 8004f3c:	20000203 	.word	0x20000203
 8004f40:	20000207 	.word	0x20000207
 8004f44:	2000022d 	.word	0x2000022d
 8004f48:	20000230 	.word	0x20000230
 8004f4c:	40011000 	.word	0x40011000
 8004f50:	20000246 	.word	0x20000246
 8004f54:	20000247 	.word	0x20000247
 8004f58:	200001f7 	.word	0x200001f7
 8004f5c:	20000225 	.word	0x20000225
 8004f60:	200001d0 	.word	0x200001d0
 8004f64:	200001dc 	.word	0x200001dc
 8004f68:	20000208 	.word	0x20000208
 8004f6c:	200001f8 	.word	0x200001f8
 8004f70:	2000024b 	.word	0x2000024b
 8004f74:	200001f5 	.word	0x200001f5
			} else {
				cerceveVar=0;
 8004f78:	4b7f      	ldr	r3, [pc, #508]	; (8005178 <checkAktifCalisma+0x5ac>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004f7e:	4b7f      	ldr	r3, [pc, #508]	; (800517c <checkAktifCalisma+0x5b0>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d17c      	bne.n	8005080 <checkAktifCalisma+0x4b4>
 8004f86:	4b7e      	ldr	r3, [pc, #504]	; (8005180 <checkAktifCalisma+0x5b4>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d078      	beq.n	8005080 <checkAktifCalisma+0x4b4>
 8004f8e:	4b7d      	ldr	r3, [pc, #500]	; (8005184 <checkAktifCalisma+0x5b8>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d074      	beq.n	8005080 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004f96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f9a:	487b      	ldr	r0, [pc, #492]	; (8005188 <checkAktifCalisma+0x5bc>)
 8004f9c:	f004 f850 	bl	8009040 <HAL_GPIO_ReadPin>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <checkAktifCalisma+0x3e2>
 8004fa6:	4b79      	ldr	r3, [pc, #484]	; (800518c <checkAktifCalisma+0x5c0>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d068      	beq.n	8005080 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8004fae:	4b72      	ldr	r3, [pc, #456]	; (8005178 <checkAktifCalisma+0x5ac>)
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d064      	beq.n	8005080 <checkAktifCalisma+0x4b4>
 8004fb6:	4b76      	ldr	r3, [pc, #472]	; (8005190 <checkAktifCalisma+0x5c4>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	f083 0301 	eor.w	r3, r3, #1
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d05d      	beq.n	8005080 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004fc4:	2104      	movs	r1, #4
 8004fc6:	4873      	ldr	r0, [pc, #460]	; (8005194 <checkAktifCalisma+0x5c8>)
 8004fc8:	f004 f83a 	bl	8009040 <HAL_GPIO_ReadPin>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <checkAktifCalisma+0x40e>
 8004fd2:	4b71      	ldr	r3, [pc, #452]	; (8005198 <checkAktifCalisma+0x5cc>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d152      	bne.n	8005080 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004fda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004fde:	486a      	ldr	r0, [pc, #424]	; (8005188 <checkAktifCalisma+0x5bc>)
 8004fe0:	f004 f82e 	bl	8009040 <HAL_GPIO_ReadPin>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d10e      	bne.n	8005008 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004fea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fee:	4866      	ldr	r0, [pc, #408]	; (8005188 <checkAktifCalisma+0x5bc>)
 8004ff0:	f004 f826 	bl	8009040 <HAL_GPIO_ReadPin>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d106      	bne.n	8005008 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8004ffa:	2140      	movs	r1, #64	; 0x40
 8004ffc:	4865      	ldr	r0, [pc, #404]	; (8005194 <checkAktifCalisma+0x5c8>)
 8004ffe:	f004 f81f 	bl	8009040 <HAL_GPIO_ReadPin>
 8005002:	4603      	mov	r3, r0
 8005004:	2b01      	cmp	r3, #1
 8005006:	d003      	beq.n	8005010 <checkAktifCalisma+0x444>
 8005008:	4b64      	ldr	r3, [pc, #400]	; (800519c <checkAktifCalisma+0x5d0>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d037      	beq.n	8005080 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8005010:	4b63      	ldr	r3, [pc, #396]	; (80051a0 <checkAktifCalisma+0x5d4>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	f083 0301 	eor.w	r3, r3, #1
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d030      	beq.n	8005080 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800501e:	4b61      	ldr	r3, [pc, #388]	; (80051a4 <checkAktifCalisma+0x5d8>)
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	f083 0301 	eor.w	r3, r3, #1
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d029      	beq.n	8005080 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 800502c:	4b5e      	ldr	r3, [pc, #376]	; (80051a8 <checkAktifCalisma+0x5dc>)
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	f083 0301 	eor.w	r3, r3, #1
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d022      	beq.n	8005080 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 800503a:	4b5c      	ldr	r3, [pc, #368]	; (80051ac <checkAktifCalisma+0x5e0>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	f083 0301 	eor.w	r3, r3, #1
 8005042:	b2db      	uxtb	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01b      	beq.n	8005080 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005048:	4b59      	ldr	r3, [pc, #356]	; (80051b0 <checkAktifCalisma+0x5e4>)
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	f083 0301 	eor.w	r3, r3, #1
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d014      	beq.n	8005080 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8005056:	4b57      	ldr	r3, [pc, #348]	; (80051b4 <checkAktifCalisma+0x5e8>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	f083 0301 	eor.w	r3, r3, #1
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00d      	beq.n	8005080 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005064:	2201      	movs	r2, #1
 8005066:	2102      	movs	r1, #2
 8005068:	4847      	ldr	r0, [pc, #284]	; (8005188 <checkAktifCalisma+0x5bc>)
 800506a:	f004 f800 	bl	800906e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 800506e:	4b4b      	ldr	r3, [pc, #300]	; (800519c <checkAktifCalisma+0x5d0>)
 8005070:	2201      	movs	r2, #1
 8005072:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8005074:	4b50      	ldr	r3, [pc, #320]	; (80051b8 <checkAktifCalisma+0x5ec>)
 8005076:	2201      	movs	r2, #1
 8005078:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 800507a:	4b50      	ldr	r3, [pc, #320]	; (80051bc <checkAktifCalisma+0x5f0>)
 800507c:	2201      	movs	r2, #1
 800507e:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005080:	4b46      	ldr	r3, [pc, #280]	; (800519c <checkAktifCalisma+0x5d0>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d033      	beq.n	80050f0 <checkAktifCalisma+0x524>
 8005088:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800508c:	483e      	ldr	r0, [pc, #248]	; (8005188 <checkAktifCalisma+0x5bc>)
 800508e:	f003 ffd7 	bl	8009040 <HAL_GPIO_ReadPin>
 8005092:	4603      	mov	r3, r0
 8005094:	2b01      	cmp	r3, #1
 8005096:	d106      	bne.n	80050a6 <checkAktifCalisma+0x4da>
 8005098:	4b3c      	ldr	r3, [pc, #240]	; (800518c <checkAktifCalisma+0x5c0>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	f083 0301 	eor.w	r3, r3, #1
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10a      	bne.n	80050bc <checkAktifCalisma+0x4f0>
 80050a6:	2104      	movs	r1, #4
 80050a8:	483a      	ldr	r0, [pc, #232]	; (8005194 <checkAktifCalisma+0x5c8>)
 80050aa:	f003 ffc9 	bl	8009040 <HAL_GPIO_ReadPin>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d11d      	bne.n	80050f0 <checkAktifCalisma+0x524>
 80050b4:	4b38      	ldr	r3, [pc, #224]	; (8005198 <checkAktifCalisma+0x5cc>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d019      	beq.n	80050f0 <checkAktifCalisma+0x524>
 80050bc:	4b30      	ldr	r3, [pc, #192]	; (8005180 <checkAktifCalisma+0x5b4>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d015      	beq.n	80050f0 <checkAktifCalisma+0x524>
 80050c4:	4b2f      	ldr	r3, [pc, #188]	; (8005184 <checkAktifCalisma+0x5b8>)
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d011      	beq.n	80050f0 <checkAktifCalisma+0x524>
 80050cc:	4b2a      	ldr	r3, [pc, #168]	; (8005178 <checkAktifCalisma+0x5ac>)
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00d      	beq.n	80050f0 <checkAktifCalisma+0x524>
 80050d4:	4b3a      	ldr	r3, [pc, #232]	; (80051c0 <checkAktifCalisma+0x5f4>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	f083 0301 	eor.w	r3, r3, #1
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d006      	beq.n	80050f0 <checkAktifCalisma+0x524>
			timer2=millis;
 80050e2:	4b38      	ldr	r3, [pc, #224]	; (80051c4 <checkAktifCalisma+0x5f8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a38      	ldr	r2, [pc, #224]	; (80051c8 <checkAktifCalisma+0x5fc>)
 80050e8:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 80050ea:	4b35      	ldr	r3, [pc, #212]	; (80051c0 <checkAktifCalisma+0x5f4>)
 80050ec:	2201      	movs	r2, #1
 80050ee:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80050f0:	4b34      	ldr	r3, [pc, #208]	; (80051c4 <checkAktifCalisma+0x5f8>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	4b34      	ldr	r3, [pc, #208]	; (80051c8 <checkAktifCalisma+0x5fc>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	4a34      	ldr	r2, [pc, #208]	; (80051cc <checkAktifCalisma+0x600>)
 80050fc:	7812      	ldrb	r2, [r2, #0]
 80050fe:	4293      	cmp	r3, r2
 8005100:	d303      	bcc.n	800510a <checkAktifCalisma+0x53e>
 8005102:	4b2f      	ldr	r3, [pc, #188]	; (80051c0 <checkAktifCalisma+0x5f4>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d114      	bne.n	8005134 <checkAktifCalisma+0x568>
 800510a:	4b1d      	ldr	r3, [pc, #116]	; (8005180 <checkAktifCalisma+0x5b4>)
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	f083 0301 	eor.w	r3, r3, #1
 8005112:	b2db      	uxtb	r3, r3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10d      	bne.n	8005134 <checkAktifCalisma+0x568>
 8005118:	4b1a      	ldr	r3, [pc, #104]	; (8005184 <checkAktifCalisma+0x5b8>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	f083 0301 	eor.w	r3, r3, #1
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <checkAktifCalisma+0x568>
 8005126:	4b14      	ldr	r3, [pc, #80]	; (8005178 <checkAktifCalisma+0x5ac>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	f083 0301 	eor.w	r3, r3, #1
 800512e:	b2db      	uxtb	r3, r3
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005134:	2200      	movs	r2, #0
 8005136:	2102      	movs	r1, #2
 8005138:	4813      	ldr	r0, [pc, #76]	; (8005188 <checkAktifCalisma+0x5bc>)
 800513a:	f003 ff98 	bl	800906e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 800513e:	4b17      	ldr	r3, [pc, #92]	; (800519c <checkAktifCalisma+0x5d0>)
 8005140:	2200      	movs	r2, #0
 8005142:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8005144:	4b1e      	ldr	r3, [pc, #120]	; (80051c0 <checkAktifCalisma+0x5f4>)
 8005146:	2200      	movs	r2, #0
 8005148:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800514a:	4b14      	ldr	r3, [pc, #80]	; (800519c <checkAktifCalisma+0x5d0>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d040      	beq.n	80051d4 <checkAktifCalisma+0x608>
 8005152:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005156:	480f      	ldr	r0, [pc, #60]	; (8005194 <checkAktifCalisma+0x5c8>)
 8005158:	f003 ff72 	bl	8009040 <HAL_GPIO_ReadPin>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d138      	bne.n	80051d4 <checkAktifCalisma+0x608>
 8005162:	4b1b      	ldr	r3, [pc, #108]	; (80051d0 <checkAktifCalisma+0x604>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d034      	beq.n	80051d4 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800516a:	2201      	movs	r2, #1
 800516c:	2101      	movs	r1, #1
 800516e:	4806      	ldr	r0, [pc, #24]	; (8005188 <checkAktifCalisma+0x5bc>)
 8005170:	f003 ff7d 	bl	800906e <HAL_GPIO_WritePin>
 8005174:	e033      	b.n	80051de <checkAktifCalisma+0x612>
 8005176:	bf00      	nop
 8005178:	2000024b 	.word	0x2000024b
 800517c:	20000211 	.word	0x20000211
 8005180:	20000246 	.word	0x20000246
 8005184:	20000247 	.word	0x20000247
 8005188:	40010c00 	.word	0x40010c00
 800518c:	20000231 	.word	0x20000231
 8005190:	20000245 	.word	0x20000245
 8005194:	40011000 	.word	0x40011000
 8005198:	200001fa 	.word	0x200001fa
 800519c:	2000022c 	.word	0x2000022c
 80051a0:	20000229 	.word	0x20000229
 80051a4:	2000022d 	.word	0x2000022d
 80051a8:	2000022a 	.word	0x2000022a
 80051ac:	2000022b 	.word	0x2000022b
 80051b0:	2000022e 	.word	0x2000022e
 80051b4:	2000022f 	.word	0x2000022f
 80051b8:	20000234 	.word	0x20000234
 80051bc:	20000255 	.word	0x20000255
 80051c0:	20000224 	.word	0x20000224
 80051c4:	200001d0 	.word	0x200001d0
 80051c8:	200001dc 	.word	0x200001dc
 80051cc:	20000209 	.word	0x20000209
 80051d0:	200001f9 	.word	0x200001f9
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80051d4:	2200      	movs	r2, #0
 80051d6:	2101      	movs	r1, #1
 80051d8:	4836      	ldr	r0, [pc, #216]	; (80052b4 <checkAktifCalisma+0x6e8>)
 80051da:	f003 ff48 	bl	800906e <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80051de:	4b36      	ldr	r3, [pc, #216]	; (80052b8 <checkAktifCalisma+0x6ec>)
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f040 8080 	bne.w	80052e8 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80051e8:	4b34      	ldr	r3, [pc, #208]	; (80052bc <checkAktifCalisma+0x6f0>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d003      	beq.n	80051f8 <checkAktifCalisma+0x62c>
 80051f0:	4b32      	ldr	r3, [pc, #200]	; (80052bc <checkAktifCalisma+0x6f0>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d177      	bne.n	80052e8 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 80051f8:	4b31      	ldr	r3, [pc, #196]	; (80052c0 <checkAktifCalisma+0x6f4>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d073      	beq.n	80052e8 <checkAktifCalisma+0x71c>
 8005200:	4b30      	ldr	r3, [pc, #192]	; (80052c4 <checkAktifCalisma+0x6f8>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d06f      	beq.n	80052e8 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005208:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800520c:	4829      	ldr	r0, [pc, #164]	; (80052b4 <checkAktifCalisma+0x6e8>)
 800520e:	f003 ff17 	bl	8009040 <HAL_GPIO_ReadPin>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d167      	bne.n	80052e8 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005218:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800521c:	482a      	ldr	r0, [pc, #168]	; (80052c8 <checkAktifCalisma+0x6fc>)
 800521e:	f003 ff0f 	bl	8009040 <HAL_GPIO_ReadPin>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <checkAktifCalisma+0x664>
 8005228:	4b28      	ldr	r3, [pc, #160]	; (80052cc <checkAktifCalisma+0x700>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d15b      	bne.n	80052e8 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005230:	2140      	movs	r1, #64	; 0x40
 8005232:	4825      	ldr	r0, [pc, #148]	; (80052c8 <checkAktifCalisma+0x6fc>)
 8005234:	f003 ff04 	bl	8009040 <HAL_GPIO_ReadPin>
 8005238:	4603      	mov	r3, r0
 800523a:	2b01      	cmp	r3, #1
 800523c:	d10f      	bne.n	800525e <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800523e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005242:	481c      	ldr	r0, [pc, #112]	; (80052b4 <checkAktifCalisma+0x6e8>)
 8005244:	f003 fefc 	bl	8009040 <HAL_GPIO_ReadPin>
 8005248:	4603      	mov	r3, r0
 800524a:	2b01      	cmp	r3, #1
 800524c:	d107      	bne.n	800525e <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 800524e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005252:	4818      	ldr	r0, [pc, #96]	; (80052b4 <checkAktifCalisma+0x6e8>)
 8005254:	f003 fef4 	bl	8009040 <HAL_GPIO_ReadPin>
 8005258:	4603      	mov	r3, r0
 800525a:	2b01      	cmp	r3, #1
 800525c:	d003      	beq.n	8005266 <checkAktifCalisma+0x69a>
 800525e:	4b1c      	ldr	r3, [pc, #112]	; (80052d0 <checkAktifCalisma+0x704>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d040      	beq.n	80052e8 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8005266:	4b1b      	ldr	r3, [pc, #108]	; (80052d4 <checkAktifCalisma+0x708>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	f083 0301 	eor.w	r3, r3, #1
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d039      	beq.n	80052e8 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8005274:	4b18      	ldr	r3, [pc, #96]	; (80052d8 <checkAktifCalisma+0x70c>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	f083 0301 	eor.w	r3, r3, #1
 800527c:	b2db      	uxtb	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	d032      	beq.n	80052e8 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8005282:	4b16      	ldr	r3, [pc, #88]	; (80052dc <checkAktifCalisma+0x710>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	f083 0301 	eor.w	r3, r3, #1
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d02b      	beq.n	80052e8 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005290:	4b13      	ldr	r3, [pc, #76]	; (80052e0 <checkAktifCalisma+0x714>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	f083 0301 	eor.w	r3, r3, #1
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d024      	beq.n	80052e8 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 800529e:	4b11      	ldr	r3, [pc, #68]	; (80052e4 <checkAktifCalisma+0x718>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	f083 0301 	eor.w	r3, r3, #1
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01d      	beq.n	80052e8 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 80052ac:	4b08      	ldr	r3, [pc, #32]	; (80052d0 <checkAktifCalisma+0x704>)
 80052ae:	2201      	movs	r2, #1
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	e01c      	b.n	80052ee <checkAktifCalisma+0x722>
 80052b4:	40010c00 	.word	0x40010c00
 80052b8:	20000211 	.word	0x20000211
 80052bc:	20000203 	.word	0x20000203
 80052c0:	20000246 	.word	0x20000246
 80052c4:	20000247 	.word	0x20000247
 80052c8:	40011000 	.word	0x40011000
 80052cc:	20000204 	.word	0x20000204
 80052d0:	2000022a 	.word	0x2000022a
 80052d4:	20000229 	.word	0x20000229
 80052d8:	2000022d 	.word	0x2000022d
 80052dc:	2000022c 	.word	0x2000022c
 80052e0:	2000022b 	.word	0x2000022b
 80052e4:	2000022f 	.word	0x2000022f
		} else {
			devmotoryukaricalisiyor=0;
 80052e8:	4b64      	ldr	r3, [pc, #400]	; (800547c <checkAktifCalisma+0x8b0>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 80052ee:	4b63      	ldr	r3, [pc, #396]	; (800547c <checkAktifCalisma+0x8b0>)
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d007      	beq.n	8005306 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80052f6:	2201      	movs	r2, #1
 80052f8:	2120      	movs	r1, #32
 80052fa:	4861      	ldr	r0, [pc, #388]	; (8005480 <checkAktifCalisma+0x8b4>)
 80052fc:	f003 feb7 	bl	800906e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8005300:	4b60      	ldr	r3, [pc, #384]	; (8005484 <checkAktifCalisma+0x8b8>)
 8005302:	2201      	movs	r2, #1
 8005304:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005306:	4b5f      	ldr	r3, [pc, #380]	; (8005484 <checkAktifCalisma+0x8b8>)
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d025      	beq.n	800535a <checkAktifCalisma+0x78e>
 800530e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005312:	485d      	ldr	r0, [pc, #372]	; (8005488 <checkAktifCalisma+0x8bc>)
 8005314:	f003 fe94 	bl	8009040 <HAL_GPIO_ReadPin>
 8005318:	4603      	mov	r3, r0
 800531a:	2b01      	cmp	r3, #1
 800531c:	d007      	beq.n	800532e <checkAktifCalisma+0x762>
 800531e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005322:	4857      	ldr	r0, [pc, #348]	; (8005480 <checkAktifCalisma+0x8b4>)
 8005324:	f003 fe8c 	bl	8009040 <HAL_GPIO_ReadPin>
 8005328:	4603      	mov	r3, r0
 800532a:	2b01      	cmp	r3, #1
 800532c:	d115      	bne.n	800535a <checkAktifCalisma+0x78e>
 800532e:	4b57      	ldr	r3, [pc, #348]	; (800548c <checkAktifCalisma+0x8c0>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d011      	beq.n	800535a <checkAktifCalisma+0x78e>
 8005336:	4b56      	ldr	r3, [pc, #344]	; (8005490 <checkAktifCalisma+0x8c4>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00d      	beq.n	800535a <checkAktifCalisma+0x78e>
 800533e:	4b55      	ldr	r3, [pc, #340]	; (8005494 <checkAktifCalisma+0x8c8>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	f083 0301 	eor.w	r3, r3, #1
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d006      	beq.n	800535a <checkAktifCalisma+0x78e>
			timer2=millis;
 800534c:	4b52      	ldr	r3, [pc, #328]	; (8005498 <checkAktifCalisma+0x8cc>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a52      	ldr	r2, [pc, #328]	; (800549c <checkAktifCalisma+0x8d0>)
 8005352:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8005354:	4b4f      	ldr	r3, [pc, #316]	; (8005494 <checkAktifCalisma+0x8c8>)
 8005356:	2201      	movs	r2, #1
 8005358:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800535a:	4b4f      	ldr	r3, [pc, #316]	; (8005498 <checkAktifCalisma+0x8cc>)
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4b4f      	ldr	r3, [pc, #316]	; (800549c <checkAktifCalisma+0x8d0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	4a4e      	ldr	r2, [pc, #312]	; (80054a0 <checkAktifCalisma+0x8d4>)
 8005366:	7812      	ldrb	r2, [r2, #0]
 8005368:	4293      	cmp	r3, r2
 800536a:	d303      	bcc.n	8005374 <checkAktifCalisma+0x7a8>
 800536c:	4b49      	ldr	r3, [pc, #292]	; (8005494 <checkAktifCalisma+0x8c8>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10d      	bne.n	8005390 <checkAktifCalisma+0x7c4>
 8005374:	4b45      	ldr	r3, [pc, #276]	; (800548c <checkAktifCalisma+0x8c0>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	f083 0301 	eor.w	r3, r3, #1
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b00      	cmp	r3, #0
 8005380:	d106      	bne.n	8005390 <checkAktifCalisma+0x7c4>
 8005382:	4b43      	ldr	r3, [pc, #268]	; (8005490 <checkAktifCalisma+0x8c4>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	f083 0301 	eor.w	r3, r3, #1
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00a      	beq.n	80053a6 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005390:	2200      	movs	r2, #0
 8005392:	2120      	movs	r1, #32
 8005394:	483a      	ldr	r0, [pc, #232]	; (8005480 <checkAktifCalisma+0x8b4>)
 8005396:	f003 fe6a 	bl	800906e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 800539a:	4b3a      	ldr	r3, [pc, #232]	; (8005484 <checkAktifCalisma+0x8b8>)
 800539c:	2200      	movs	r2, #0
 800539e:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80053a0:	4b3c      	ldr	r3, [pc, #240]	; (8005494 <checkAktifCalisma+0x8c8>)
 80053a2:	2200      	movs	r2, #0
 80053a4:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80053a6:	4b3f      	ldr	r3, [pc, #252]	; (80054a4 <checkAktifCalisma+0x8d8>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f040 8088 	bne.w	80054c0 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80053b0:	4b3d      	ldr	r3, [pc, #244]	; (80054a8 <checkAktifCalisma+0x8dc>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d003      	beq.n	80053c0 <checkAktifCalisma+0x7f4>
 80053b8:	4b3b      	ldr	r3, [pc, #236]	; (80054a8 <checkAktifCalisma+0x8dc>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d17f      	bne.n	80054c0 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 80053c0:	4b32      	ldr	r3, [pc, #200]	; (800548c <checkAktifCalisma+0x8c0>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d07b      	beq.n	80054c0 <checkAktifCalisma+0x8f4>
 80053c8:	4b31      	ldr	r3, [pc, #196]	; (8005490 <checkAktifCalisma+0x8c4>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d077      	beq.n	80054c0 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80053d0:	2140      	movs	r1, #64	; 0x40
 80053d2:	482b      	ldr	r0, [pc, #172]	; (8005480 <checkAktifCalisma+0x8b4>)
 80053d4:	f003 fe34 	bl	8009040 <HAL_GPIO_ReadPin>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d170      	bne.n	80054c0 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80053de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80053e2:	4827      	ldr	r0, [pc, #156]	; (8005480 <checkAktifCalisma+0x8b4>)
 80053e4:	f003 fe2c 	bl	8009040 <HAL_GPIO_ReadPin>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <checkAktifCalisma+0x82a>
 80053ee:	4b2f      	ldr	r3, [pc, #188]	; (80054ac <checkAktifCalisma+0x8e0>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d164      	bne.n	80054c0 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80053f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053fa:	4823      	ldr	r0, [pc, #140]	; (8005488 <checkAktifCalisma+0x8bc>)
 80053fc:	f003 fe20 	bl	8009040 <HAL_GPIO_ReadPin>
 8005400:	4603      	mov	r3, r0
 8005402:	2b01      	cmp	r3, #1
 8005404:	d10f      	bne.n	8005426 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800540a:	481f      	ldr	r0, [pc, #124]	; (8005488 <checkAktifCalisma+0x8bc>)
 800540c:	f003 fe18 	bl	8009040 <HAL_GPIO_ReadPin>
 8005410:	4603      	mov	r3, r0
 8005412:	2b01      	cmp	r3, #1
 8005414:	d107      	bne.n	8005426 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005416:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800541a:	481b      	ldr	r0, [pc, #108]	; (8005488 <checkAktifCalisma+0x8bc>)
 800541c:	f003 fe10 	bl	8009040 <HAL_GPIO_ReadPin>
 8005420:	4603      	mov	r3, r0
 8005422:	2b01      	cmp	r3, #1
 8005424:	d003      	beq.n	800542e <checkAktifCalisma+0x862>
 8005426:	4b22      	ldr	r3, [pc, #136]	; (80054b0 <checkAktifCalisma+0x8e4>)
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d048      	beq.n	80054c0 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800542e:	4b21      	ldr	r3, [pc, #132]	; (80054b4 <checkAktifCalisma+0x8e8>)
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	f083 0301 	eor.w	r3, r3, #1
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d041      	beq.n	80054c0 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 800543c:	4b1e      	ldr	r3, [pc, #120]	; (80054b8 <checkAktifCalisma+0x8ec>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	f083 0301 	eor.w	r3, r3, #1
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d03a      	beq.n	80054c0 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 800544a:	4b1c      	ldr	r3, [pc, #112]	; (80054bc <checkAktifCalisma+0x8f0>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	f083 0301 	eor.w	r3, r3, #1
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d033      	beq.n	80054c0 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8005458:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <checkAktifCalisma+0x8b8>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	f083 0301 	eor.w	r3, r3, #1
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d02c      	beq.n	80054c0 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8005466:	4b05      	ldr	r3, [pc, #20]	; (800547c <checkAktifCalisma+0x8b0>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	f083 0301 	eor.w	r3, r3, #1
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d025      	beq.n	80054c0 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8005474:	4b0e      	ldr	r3, [pc, #56]	; (80054b0 <checkAktifCalisma+0x8e4>)
 8005476:	2201      	movs	r2, #1
 8005478:	701a      	strb	r2, [r3, #0]
 800547a:	e024      	b.n	80054c6 <checkAktifCalisma+0x8fa>
 800547c:	2000022a 	.word	0x2000022a
 8005480:	40011000 	.word	0x40011000
 8005484:	2000022e 	.word	0x2000022e
 8005488:	40010c00 	.word	0x40010c00
 800548c:	20000246 	.word	0x20000246
 8005490:	20000247 	.word	0x20000247
 8005494:	20000226 	.word	0x20000226
 8005498:	200001d0 	.word	0x200001d0
 800549c:	200001dc 	.word	0x200001dc
 80054a0:	2000020a 	.word	0x2000020a
 80054a4:	20000211 	.word	0x20000211
 80054a8:	20000203 	.word	0x20000203
 80054ac:	20000205 	.word	0x20000205
 80054b0:	2000022b 	.word	0x2000022b
 80054b4:	20000229 	.word	0x20000229
 80054b8:	2000022d 	.word	0x2000022d
 80054bc:	2000022c 	.word	0x2000022c
		} else {
			devmotorasagicalisiyor=0;
 80054c0:	4b96      	ldr	r3, [pc, #600]	; (800571c <checkAktifCalisma+0xb50>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80054c6:	4b95      	ldr	r3, [pc, #596]	; (800571c <checkAktifCalisma+0xb50>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d007      	beq.n	80054de <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80054ce:	2201      	movs	r2, #1
 80054d0:	2110      	movs	r1, #16
 80054d2:	4893      	ldr	r0, [pc, #588]	; (8005720 <checkAktifCalisma+0xb54>)
 80054d4:	f003 fdcb 	bl	800906e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 80054d8:	4b92      	ldr	r3, [pc, #584]	; (8005724 <checkAktifCalisma+0xb58>)
 80054da:	2201      	movs	r2, #1
 80054dc:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80054de:	4b91      	ldr	r3, [pc, #580]	; (8005724 <checkAktifCalisma+0xb58>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d024      	beq.n	8005530 <checkAktifCalisma+0x964>
 80054e6:	2140      	movs	r1, #64	; 0x40
 80054e8:	488d      	ldr	r0, [pc, #564]	; (8005720 <checkAktifCalisma+0xb54>)
 80054ea:	f003 fda9 	bl	8009040 <HAL_GPIO_ReadPin>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d007      	beq.n	8005504 <checkAktifCalisma+0x938>
 80054f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80054f8:	4889      	ldr	r0, [pc, #548]	; (8005720 <checkAktifCalisma+0xb54>)
 80054fa:	f003 fda1 	bl	8009040 <HAL_GPIO_ReadPin>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b01      	cmp	r3, #1
 8005502:	d115      	bne.n	8005530 <checkAktifCalisma+0x964>
 8005504:	4b88      	ldr	r3, [pc, #544]	; (8005728 <checkAktifCalisma+0xb5c>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d011      	beq.n	8005530 <checkAktifCalisma+0x964>
 800550c:	4b87      	ldr	r3, [pc, #540]	; (800572c <checkAktifCalisma+0xb60>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00d      	beq.n	8005530 <checkAktifCalisma+0x964>
 8005514:	4b86      	ldr	r3, [pc, #536]	; (8005730 <checkAktifCalisma+0xb64>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	f083 0301 	eor.w	r3, r3, #1
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d006      	beq.n	8005530 <checkAktifCalisma+0x964>
			timer2=millis;
 8005522:	4b84      	ldr	r3, [pc, #528]	; (8005734 <checkAktifCalisma+0xb68>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a84      	ldr	r2, [pc, #528]	; (8005738 <checkAktifCalisma+0xb6c>)
 8005528:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 800552a:	4b81      	ldr	r3, [pc, #516]	; (8005730 <checkAktifCalisma+0xb64>)
 800552c:	2201      	movs	r2, #1
 800552e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005530:	4b80      	ldr	r3, [pc, #512]	; (8005734 <checkAktifCalisma+0xb68>)
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	4b80      	ldr	r3, [pc, #512]	; (8005738 <checkAktifCalisma+0xb6c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	4a80      	ldr	r2, [pc, #512]	; (800573c <checkAktifCalisma+0xb70>)
 800553c:	7812      	ldrb	r2, [r2, #0]
 800553e:	4293      	cmp	r3, r2
 8005540:	d303      	bcc.n	800554a <checkAktifCalisma+0x97e>
 8005542:	4b7b      	ldr	r3, [pc, #492]	; (8005730 <checkAktifCalisma+0xb64>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10d      	bne.n	8005566 <checkAktifCalisma+0x99a>
 800554a:	4b77      	ldr	r3, [pc, #476]	; (8005728 <checkAktifCalisma+0xb5c>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	f083 0301 	eor.w	r3, r3, #1
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b00      	cmp	r3, #0
 8005556:	d106      	bne.n	8005566 <checkAktifCalisma+0x99a>
 8005558:	4b74      	ldr	r3, [pc, #464]	; (800572c <checkAktifCalisma+0xb60>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	f083 0301 	eor.w	r3, r3, #1
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005566:	2200      	movs	r2, #0
 8005568:	2110      	movs	r1, #16
 800556a:	486d      	ldr	r0, [pc, #436]	; (8005720 <checkAktifCalisma+0xb54>)
 800556c:	f003 fd7f 	bl	800906e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8005570:	4b6c      	ldr	r3, [pc, #432]	; (8005724 <checkAktifCalisma+0xb58>)
 8005572:	2200      	movs	r2, #0
 8005574:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8005576:	4b6e      	ldr	r3, [pc, #440]	; (8005730 <checkAktifCalisma+0xb64>)
 8005578:	2200      	movs	r2, #0
 800557a:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 800557c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005580:	486f      	ldr	r0, [pc, #444]	; (8005740 <checkAktifCalisma+0xb74>)
 8005582:	f003 fd5d 	bl	8009040 <HAL_GPIO_ReadPin>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d120      	bne.n	80055ce <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 800558c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005590:	486b      	ldr	r0, [pc, #428]	; (8005740 <checkAktifCalisma+0xb74>)
 8005592:	f003 fd55 	bl	8009040 <HAL_GPIO_ReadPin>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d118      	bne.n	80055ce <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 800559c:	2104      	movs	r1, #4
 800559e:	4868      	ldr	r0, [pc, #416]	; (8005740 <checkAktifCalisma+0xb74>)
 80055a0:	f003 fd4e 	bl	8009040 <HAL_GPIO_ReadPin>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d111      	bne.n	80055ce <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80055aa:	2102      	movs	r1, #2
 80055ac:	4864      	ldr	r0, [pc, #400]	; (8005740 <checkAktifCalisma+0xb74>)
 80055ae:	f003 fd47 	bl	8009040 <HAL_GPIO_ReadPin>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10a      	bne.n	80055ce <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80055b8:	2101      	movs	r1, #1
 80055ba:	4861      	ldr	r0, [pc, #388]	; (8005740 <checkAktifCalisma+0xb74>)
 80055bc:	f003 fd40 	bl	8009040 <HAL_GPIO_ReadPin>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d103      	bne.n	80055ce <checkAktifCalisma+0xa02>
			makineStop=1;
 80055c6:	4b5f      	ldr	r3, [pc, #380]	; (8005744 <checkAktifCalisma+0xb78>)
 80055c8:	2201      	movs	r2, #1
 80055ca:	701a      	strb	r2, [r3, #0]
 80055cc:	e002      	b.n	80055d4 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80055ce:	4b5d      	ldr	r3, [pc, #372]	; (8005744 <checkAktifCalisma+0xb78>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80055d4:	4b5c      	ldr	r3, [pc, #368]	; (8005748 <checkAktifCalisma+0xb7c>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d144      	bne.n	8005666 <checkAktifCalisma+0xa9a>
 80055dc:	4b5b      	ldr	r3, [pc, #364]	; (800574c <checkAktifCalisma+0xb80>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d003      	beq.n	80055ec <checkAktifCalisma+0xa20>
 80055e4:	4b59      	ldr	r3, [pc, #356]	; (800574c <checkAktifCalisma+0xb80>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b03      	cmp	r3, #3
 80055ea:	d13c      	bne.n	8005666 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80055ec:	2180      	movs	r1, #128	; 0x80
 80055ee:	484c      	ldr	r0, [pc, #304]	; (8005720 <checkAktifCalisma+0xb54>)
 80055f0:	f003 fd26 	bl	8009040 <HAL_GPIO_ReadPin>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d103      	bne.n	8005602 <checkAktifCalisma+0xa36>
 80055fa:	4b55      	ldr	r3, [pc, #340]	; (8005750 <checkAktifCalisma+0xb84>)
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00b      	beq.n	800561a <checkAktifCalisma+0xa4e>
 8005602:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005606:	484e      	ldr	r0, [pc, #312]	; (8005740 <checkAktifCalisma+0xb74>)
 8005608:	f003 fd1a 	bl	8009040 <HAL_GPIO_ReadPin>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d129      	bne.n	8005666 <checkAktifCalisma+0xa9a>
 8005612:	4b4f      	ldr	r3, [pc, #316]	; (8005750 <checkAktifCalisma+0xb84>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d125      	bne.n	8005666 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800561a:	2104      	movs	r1, #4
 800561c:	4840      	ldr	r0, [pc, #256]	; (8005720 <checkAktifCalisma+0xb54>)
 800561e:	f003 fd0f 	bl	8009040 <HAL_GPIO_ReadPin>
 8005622:	4603      	mov	r3, r0
 8005624:	2b01      	cmp	r3, #1
 8005626:	d003      	beq.n	8005630 <checkAktifCalisma+0xa64>
 8005628:	4b4a      	ldr	r3, [pc, #296]	; (8005754 <checkAktifCalisma+0xb88>)
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d11a      	bne.n	8005666 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005630:	2102      	movs	r1, #2
 8005632:	483b      	ldr	r0, [pc, #236]	; (8005720 <checkAktifCalisma+0xb54>)
 8005634:	f003 fd04 	bl	8009040 <HAL_GPIO_ReadPin>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d113      	bne.n	8005666 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 800563e:	4b46      	ldr	r3, [pc, #280]	; (8005758 <checkAktifCalisma+0xb8c>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	f083 0301 	eor.w	r3, r3, #1
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00c      	beq.n	8005666 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 800564c:	4b3d      	ldr	r3, [pc, #244]	; (8005744 <checkAktifCalisma+0xb78>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d008      	beq.n	8005666 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8005654:	4b41      	ldr	r3, [pc, #260]	; (800575c <checkAktifCalisma+0xb90>)
 8005656:	2201      	movs	r2, #1
 8005658:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800565a:	4b36      	ldr	r3, [pc, #216]	; (8005734 <checkAktifCalisma+0xb68>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a40      	ldr	r2, [pc, #256]	; (8005760 <checkAktifCalisma+0xb94>)
 8005660:	6013      	str	r3, [r2, #0]
			bekle();
 8005662:	f7ff f935 	bl	80048d0 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005666:	4b33      	ldr	r3, [pc, #204]	; (8005734 <checkAktifCalisma+0xb68>)
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	4b3d      	ldr	r3, [pc, #244]	; (8005760 <checkAktifCalisma+0xb94>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	4a3c      	ldr	r2, [pc, #240]	; (8005764 <checkAktifCalisma+0xb98>)
 8005672:	7812      	ldrb	r2, [r2, #0]
 8005674:	4293      	cmp	r3, r2
 8005676:	d211      	bcs.n	800569c <checkAktifCalisma+0xad0>
 8005678:	2104      	movs	r1, #4
 800567a:	4829      	ldr	r0, [pc, #164]	; (8005720 <checkAktifCalisma+0xb54>)
 800567c:	f003 fce0 	bl	8009040 <HAL_GPIO_ReadPin>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <checkAktifCalisma+0xad0>
 8005686:	4b33      	ldr	r3, [pc, #204]	; (8005754 <checkAktifCalisma+0xb88>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d006      	beq.n	800569c <checkAktifCalisma+0xad0>
 800568e:	4b2d      	ldr	r3, [pc, #180]	; (8005744 <checkAktifCalisma+0xb78>)
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	f083 0301 	eor.w	r3, r3, #1
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 800569c:	4b2f      	ldr	r3, [pc, #188]	; (800575c <checkAktifCalisma+0xb90>)
 800569e:	2200      	movs	r2, #0
 80056a0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80056a2:	4b29      	ldr	r3, [pc, #164]	; (8005748 <checkAktifCalisma+0xb7c>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d160      	bne.n	800576c <checkAktifCalisma+0xba0>
 80056aa:	4b28      	ldr	r3, [pc, #160]	; (800574c <checkAktifCalisma+0xb80>)
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d003      	beq.n	80056ba <checkAktifCalisma+0xaee>
 80056b2:	4b26      	ldr	r3, [pc, #152]	; (800574c <checkAktifCalisma+0xb80>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b03      	cmp	r3, #3
 80056b8:	d158      	bne.n	800576c <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80056ba:	2104      	movs	r1, #4
 80056bc:	4818      	ldr	r0, [pc, #96]	; (8005720 <checkAktifCalisma+0xb54>)
 80056be:	f003 fcbf 	bl	8009040 <HAL_GPIO_ReadPin>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d003      	beq.n	80056d0 <checkAktifCalisma+0xb04>
 80056c8:	4b22      	ldr	r3, [pc, #136]	; (8005754 <checkAktifCalisma+0xb88>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d14d      	bne.n	800576c <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80056d0:	2102      	movs	r1, #2
 80056d2:	4813      	ldr	r0, [pc, #76]	; (8005720 <checkAktifCalisma+0xb54>)
 80056d4:	f003 fcb4 	bl	8009040 <HAL_GPIO_ReadPin>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d146      	bne.n	800576c <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80056de:	2180      	movs	r1, #128	; 0x80
 80056e0:	480f      	ldr	r0, [pc, #60]	; (8005720 <checkAktifCalisma+0xb54>)
 80056e2:	f003 fcad 	bl	8009040 <HAL_GPIO_ReadPin>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d103      	bne.n	80056f4 <checkAktifCalisma+0xb28>
 80056ec:	4b18      	ldr	r3, [pc, #96]	; (8005750 <checkAktifCalisma+0xb84>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00b      	beq.n	800570c <checkAktifCalisma+0xb40>
 80056f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056f8:	4811      	ldr	r0, [pc, #68]	; (8005740 <checkAktifCalisma+0xb74>)
 80056fa:	f003 fca1 	bl	8009040 <HAL_GPIO_ReadPin>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d133      	bne.n	800576c <checkAktifCalisma+0xba0>
 8005704:	4b12      	ldr	r3, [pc, #72]	; (8005750 <checkAktifCalisma+0xb84>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d12f      	bne.n	800576c <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 800570c:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <checkAktifCalisma+0xb78>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d02b      	beq.n	800576c <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8005714:	4b14      	ldr	r3, [pc, #80]	; (8005768 <checkAktifCalisma+0xb9c>)
 8005716:	2201      	movs	r2, #1
 8005718:	701a      	strb	r2, [r3, #0]
 800571a:	e02a      	b.n	8005772 <checkAktifCalisma+0xba6>
 800571c:	2000022b 	.word	0x2000022b
 8005720:	40011000 	.word	0x40011000
 8005724:	2000022f 	.word	0x2000022f
 8005728:	20000246 	.word	0x20000246
 800572c:	20000247 	.word	0x20000247
 8005730:	20000227 	.word	0x20000227
 8005734:	200001d0 	.word	0x200001d0
 8005738:	200001dc 	.word	0x200001dc
 800573c:	2000020a 	.word	0x2000020a
 8005740:	40010c00 	.word	0x40010c00
 8005744:	20000236 	.word	0x20000236
 8005748:	200001fd 	.word	0x200001fd
 800574c:	200001fc 	.word	0x200001fc
 8005750:	20000200 	.word	0x20000200
 8005754:	200001fa 	.word	0x200001fa
 8005758:	20000223 	.word	0x20000223
 800575c:	20000237 	.word	0x20000237
 8005760:	200001d4 	.word	0x200001d4
 8005764:	2000020d 	.word	0x2000020d
 8005768:	20000238 	.word	0x20000238
		} else {
			kapi1butonkontrol=0;
 800576c:	4b8b      	ldr	r3, [pc, #556]	; (800599c <checkAktifCalisma+0xdd0>)
 800576e:	2200      	movs	r2, #0
 8005770:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005772:	4b8b      	ldr	r3, [pc, #556]	; (80059a0 <checkAktifCalisma+0xdd4>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b02      	cmp	r3, #2
 8005778:	d121      	bne.n	80057be <checkAktifCalisma+0xbf2>
 800577a:	4b8a      	ldr	r3, [pc, #552]	; (80059a4 <checkAktifCalisma+0xdd8>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d003      	beq.n	800578a <checkAktifCalisma+0xbbe>
 8005782:	4b88      	ldr	r3, [pc, #544]	; (80059a4 <checkAktifCalisma+0xdd8>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b03      	cmp	r3, #3
 8005788:	d119      	bne.n	80057be <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800578a:	2104      	movs	r1, #4
 800578c:	4886      	ldr	r0, [pc, #536]	; (80059a8 <checkAktifCalisma+0xddc>)
 800578e:	f003 fc57 	bl	8009040 <HAL_GPIO_ReadPin>
 8005792:	4603      	mov	r3, r0
 8005794:	2b01      	cmp	r3, #1
 8005796:	d003      	beq.n	80057a0 <checkAktifCalisma+0xbd4>
 8005798:	4b84      	ldr	r3, [pc, #528]	; (80059ac <checkAktifCalisma+0xde0>)
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10e      	bne.n	80057be <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80057a0:	2102      	movs	r1, #2
 80057a2:	4881      	ldr	r0, [pc, #516]	; (80059a8 <checkAktifCalisma+0xddc>)
 80057a4:	f003 fc4c 	bl	8009040 <HAL_GPIO_ReadPin>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d107      	bne.n	80057be <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 80057ae:	4b80      	ldr	r3, [pc, #512]	; (80059b0 <checkAktifCalisma+0xde4>)
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 80057b6:	4b7f      	ldr	r3, [pc, #508]	; (80059b4 <checkAktifCalisma+0xde8>)
 80057b8:	2201      	movs	r2, #1
 80057ba:	701a      	strb	r2, [r3, #0]
 80057bc:	e002      	b.n	80057c4 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 80057be:	4b7d      	ldr	r3, [pc, #500]	; (80059b4 <checkAktifCalisma+0xde8>)
 80057c0:	2200      	movs	r2, #0
 80057c2:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80057c4:	4b75      	ldr	r3, [pc, #468]	; (800599c <checkAktifCalisma+0xdd0>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d107      	bne.n	80057dc <checkAktifCalisma+0xc10>
 80057cc:	4b79      	ldr	r3, [pc, #484]	; (80059b4 <checkAktifCalisma+0xde8>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d103      	bne.n	80057dc <checkAktifCalisma+0xc10>
 80057d4:	4b78      	ldr	r3, [pc, #480]	; (80059b8 <checkAktifCalisma+0xdec>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80057dc:	2201      	movs	r2, #1
 80057de:	2180      	movs	r1, #128	; 0x80
 80057e0:	4876      	ldr	r0, [pc, #472]	; (80059bc <checkAktifCalisma+0xdf0>)
 80057e2:	f003 fc44 	bl	800906e <HAL_GPIO_WritePin>
 80057e6:	e004      	b.n	80057f2 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80057e8:	2200      	movs	r2, #0
 80057ea:	2180      	movs	r1, #128	; 0x80
 80057ec:	4873      	ldr	r0, [pc, #460]	; (80059bc <checkAktifCalisma+0xdf0>)
 80057ee:	f003 fc3e 	bl	800906e <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80057f2:	4b73      	ldr	r3, [pc, #460]	; (80059c0 <checkAktifCalisma+0xdf4>)
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d141      	bne.n	800587e <checkAktifCalisma+0xcb2>
 80057fa:	4b6a      	ldr	r3, [pc, #424]	; (80059a4 <checkAktifCalisma+0xdd8>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d003      	beq.n	800580a <checkAktifCalisma+0xc3e>
 8005802:	4b68      	ldr	r3, [pc, #416]	; (80059a4 <checkAktifCalisma+0xdd8>)
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	2b03      	cmp	r3, #3
 8005808:	d139      	bne.n	800587e <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800580a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800580e:	4866      	ldr	r0, [pc, #408]	; (80059a8 <checkAktifCalisma+0xddc>)
 8005810:	f003 fc16 	bl	8009040 <HAL_GPIO_ReadPin>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d103      	bne.n	8005822 <checkAktifCalisma+0xc56>
 800581a:	4b6a      	ldr	r3, [pc, #424]	; (80059c4 <checkAktifCalisma+0xdf8>)
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00b      	beq.n	800583a <checkAktifCalisma+0xc6e>
 8005822:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005826:	4868      	ldr	r0, [pc, #416]	; (80059c8 <checkAktifCalisma+0xdfc>)
 8005828:	f003 fc0a 	bl	8009040 <HAL_GPIO_ReadPin>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d125      	bne.n	800587e <checkAktifCalisma+0xcb2>
 8005832:	4b64      	ldr	r3, [pc, #400]	; (80059c4 <checkAktifCalisma+0xdf8>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d121      	bne.n	800587e <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800583a:	2102      	movs	r1, #2
 800583c:	485a      	ldr	r0, [pc, #360]	; (80059a8 <checkAktifCalisma+0xddc>)
 800583e:	f003 fbff 	bl	8009040 <HAL_GPIO_ReadPin>
 8005842:	4603      	mov	r3, r0
 8005844:	2b01      	cmp	r3, #1
 8005846:	d11a      	bne.n	800587e <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005848:	2104      	movs	r1, #4
 800584a:	4857      	ldr	r0, [pc, #348]	; (80059a8 <checkAktifCalisma+0xddc>)
 800584c:	f003 fbf8 	bl	8009040 <HAL_GPIO_ReadPin>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d113      	bne.n	800587e <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8005856:	4b56      	ldr	r3, [pc, #344]	; (80059b0 <checkAktifCalisma+0xde4>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00f      	beq.n	800587e <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 800585e:	4b5b      	ldr	r3, [pc, #364]	; (80059cc <checkAktifCalisma+0xe00>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	f083 0301 	eor.w	r3, r3, #1
 8005866:	b2db      	uxtb	r3, r3
 8005868:	2b00      	cmp	r3, #0
 800586a:	d008      	beq.n	800587e <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 800586c:	4b58      	ldr	r3, [pc, #352]	; (80059d0 <checkAktifCalisma+0xe04>)
 800586e:	2201      	movs	r2, #1
 8005870:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005872:	4b58      	ldr	r3, [pc, #352]	; (80059d4 <checkAktifCalisma+0xe08>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a58      	ldr	r2, [pc, #352]	; (80059d8 <checkAktifCalisma+0xe0c>)
 8005878:	6013      	str	r3, [r2, #0]
			bekle();
 800587a:	f7ff f829 	bl	80048d0 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 800587e:	4b55      	ldr	r3, [pc, #340]	; (80059d4 <checkAktifCalisma+0xe08>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4b55      	ldr	r3, [pc, #340]	; (80059d8 <checkAktifCalisma+0xe0c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	4a54      	ldr	r2, [pc, #336]	; (80059dc <checkAktifCalisma+0xe10>)
 800588a:	7812      	ldrb	r2, [r2, #0]
 800588c:	4293      	cmp	r3, r2
 800588e:	d20d      	bcs.n	80058ac <checkAktifCalisma+0xce0>
 8005890:	2102      	movs	r1, #2
 8005892:	4845      	ldr	r0, [pc, #276]	; (80059a8 <checkAktifCalisma+0xddc>)
 8005894:	f003 fbd4 	bl	8009040 <HAL_GPIO_ReadPin>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d006      	beq.n	80058ac <checkAktifCalisma+0xce0>
 800589e:	4b44      	ldr	r3, [pc, #272]	; (80059b0 <checkAktifCalisma+0xde4>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	f083 0301 	eor.w	r3, r3, #1
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d002      	beq.n	80058b2 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 80058ac:	4b48      	ldr	r3, [pc, #288]	; (80059d0 <checkAktifCalisma+0xe04>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80058b2:	4b43      	ldr	r3, [pc, #268]	; (80059c0 <checkAktifCalisma+0xdf4>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d135      	bne.n	8005926 <checkAktifCalisma+0xd5a>
 80058ba:	4b3a      	ldr	r3, [pc, #232]	; (80059a4 <checkAktifCalisma+0xdd8>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d003      	beq.n	80058ca <checkAktifCalisma+0xcfe>
 80058c2:	4b38      	ldr	r3, [pc, #224]	; (80059a4 <checkAktifCalisma+0xdd8>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b03      	cmp	r3, #3
 80058c8:	d12d      	bne.n	8005926 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80058ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058ce:	4836      	ldr	r0, [pc, #216]	; (80059a8 <checkAktifCalisma+0xddc>)
 80058d0:	f003 fbb6 	bl	8009040 <HAL_GPIO_ReadPin>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d103      	bne.n	80058e2 <checkAktifCalisma+0xd16>
 80058da:	4b3a      	ldr	r3, [pc, #232]	; (80059c4 <checkAktifCalisma+0xdf8>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00b      	beq.n	80058fa <checkAktifCalisma+0xd2e>
 80058e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058e6:	4838      	ldr	r0, [pc, #224]	; (80059c8 <checkAktifCalisma+0xdfc>)
 80058e8:	f003 fbaa 	bl	8009040 <HAL_GPIO_ReadPin>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d119      	bne.n	8005926 <checkAktifCalisma+0xd5a>
 80058f2:	4b34      	ldr	r3, [pc, #208]	; (80059c4 <checkAktifCalisma+0xdf8>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d115      	bne.n	8005926 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80058fa:	2102      	movs	r1, #2
 80058fc:	482a      	ldr	r0, [pc, #168]	; (80059a8 <checkAktifCalisma+0xddc>)
 80058fe:	f003 fb9f 	bl	8009040 <HAL_GPIO_ReadPin>
 8005902:	4603      	mov	r3, r0
 8005904:	2b01      	cmp	r3, #1
 8005906:	d10e      	bne.n	8005926 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005908:	2104      	movs	r1, #4
 800590a:	4827      	ldr	r0, [pc, #156]	; (80059a8 <checkAktifCalisma+0xddc>)
 800590c:	f003 fb98 	bl	8009040 <HAL_GPIO_ReadPin>
 8005910:	4603      	mov	r3, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	d107      	bne.n	8005926 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8005916:	4b26      	ldr	r3, [pc, #152]	; (80059b0 <checkAktifCalisma+0xde4>)
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 800591e:	4b30      	ldr	r3, [pc, #192]	; (80059e0 <checkAktifCalisma+0xe14>)
 8005920:	2201      	movs	r2, #1
 8005922:	701a      	strb	r2, [r3, #0]
 8005924:	e002      	b.n	800592c <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8005926:	4b2e      	ldr	r3, [pc, #184]	; (80059e0 <checkAktifCalisma+0xe14>)
 8005928:	2200      	movs	r2, #0
 800592a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800592c:	4b24      	ldr	r3, [pc, #144]	; (80059c0 <checkAktifCalisma+0xdf4>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b02      	cmp	r3, #2
 8005932:	d11d      	bne.n	8005970 <checkAktifCalisma+0xda4>
 8005934:	4b1b      	ldr	r3, [pc, #108]	; (80059a4 <checkAktifCalisma+0xdd8>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d003      	beq.n	8005944 <checkAktifCalisma+0xd78>
 800593c:	4b19      	ldr	r3, [pc, #100]	; (80059a4 <checkAktifCalisma+0xdd8>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	2b03      	cmp	r3, #3
 8005942:	d115      	bne.n	8005970 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005944:	2102      	movs	r1, #2
 8005946:	4818      	ldr	r0, [pc, #96]	; (80059a8 <checkAktifCalisma+0xddc>)
 8005948:	f003 fb7a 	bl	8009040 <HAL_GPIO_ReadPin>
 800594c:	4603      	mov	r3, r0
 800594e:	2b01      	cmp	r3, #1
 8005950:	d10e      	bne.n	8005970 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005952:	2104      	movs	r1, #4
 8005954:	4814      	ldr	r0, [pc, #80]	; (80059a8 <checkAktifCalisma+0xddc>)
 8005956:	f003 fb73 	bl	8009040 <HAL_GPIO_ReadPin>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d107      	bne.n	8005970 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005960:	4b13      	ldr	r3, [pc, #76]	; (80059b0 <checkAktifCalisma+0xde4>)
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005968:	4b1e      	ldr	r3, [pc, #120]	; (80059e4 <checkAktifCalisma+0xe18>)
 800596a:	2201      	movs	r2, #1
 800596c:	701a      	strb	r2, [r3, #0]
 800596e:	e002      	b.n	8005976 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005970:	4b1c      	ldr	r3, [pc, #112]	; (80059e4 <checkAktifCalisma+0xe18>)
 8005972:	2200      	movs	r2, #0
 8005974:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005976:	4b1a      	ldr	r3, [pc, #104]	; (80059e0 <checkAktifCalisma+0xe14>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d107      	bne.n	800598e <checkAktifCalisma+0xdc2>
 800597e:	4b19      	ldr	r3, [pc, #100]	; (80059e4 <checkAktifCalisma+0xe18>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d103      	bne.n	800598e <checkAktifCalisma+0xdc2>
 8005986:	4b12      	ldr	r3, [pc, #72]	; (80059d0 <checkAktifCalisma+0xe04>)
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d02c      	beq.n	80059e8 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800598e:	2201      	movs	r2, #1
 8005990:	2140      	movs	r1, #64	; 0x40
 8005992:	480a      	ldr	r0, [pc, #40]	; (80059bc <checkAktifCalisma+0xdf0>)
 8005994:	f003 fb6b 	bl	800906e <HAL_GPIO_WritePin>
 8005998:	e02b      	b.n	80059f2 <checkAktifCalisma+0xe26>
 800599a:	bf00      	nop
 800599c:	20000238 	.word	0x20000238
 80059a0:	200001fd 	.word	0x200001fd
 80059a4:	200001fc 	.word	0x200001fc
 80059a8:	40011000 	.word	0x40011000
 80059ac:	200001fa 	.word	0x200001fa
 80059b0:	20000236 	.word	0x20000236
 80059b4:	20000239 	.word	0x20000239
 80059b8:	20000237 	.word	0x20000237
 80059bc:	40010800 	.word	0x40010800
 80059c0:	200001fe 	.word	0x200001fe
 80059c4:	20000200 	.word	0x20000200
 80059c8:	40010c00 	.word	0x40010c00
 80059cc:	20000223 	.word	0x20000223
 80059d0:	2000023a 	.word	0x2000023a
 80059d4:	200001d0 	.word	0x200001d0
 80059d8:	200001d4 	.word	0x200001d4
 80059dc:	2000020e 	.word	0x2000020e
 80059e0:	2000023b 	.word	0x2000023b
 80059e4:	2000023c 	.word	0x2000023c
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80059e8:	2200      	movs	r2, #0
 80059ea:	2140      	movs	r1, #64	; 0x40
 80059ec:	488d      	ldr	r0, [pc, #564]	; (8005c24 <checkAktifCalisma+0x1058>)
 80059ee:	f003 fb3e 	bl	800906e <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 80059f2:	4b8d      	ldr	r3, [pc, #564]	; (8005c28 <checkAktifCalisma+0x105c>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d003      	beq.n	8005a02 <checkAktifCalisma+0xe36>
 80059fa:	4b8b      	ldr	r3, [pc, #556]	; (8005c28 <checkAktifCalisma+0x105c>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d115      	bne.n	8005a2e <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005a02:	2104      	movs	r1, #4
 8005a04:	4889      	ldr	r0, [pc, #548]	; (8005c2c <checkAktifCalisma+0x1060>)
 8005a06:	f003 fb1b 	bl	8009040 <HAL_GPIO_ReadPin>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d003      	beq.n	8005a18 <checkAktifCalisma+0xe4c>
 8005a10:	4b87      	ldr	r3, [pc, #540]	; (8005c30 <checkAktifCalisma+0x1064>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005a18:	2102      	movs	r1, #2
 8005a1a:	4884      	ldr	r0, [pc, #528]	; (8005c2c <checkAktifCalisma+0x1060>)
 8005a1c:	f003 fb10 	bl	8009040 <HAL_GPIO_ReadPin>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d103      	bne.n	8005a2e <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005a26:	4b83      	ldr	r3, [pc, #524]	; (8005c34 <checkAktifCalisma+0x1068>)
 8005a28:	2201      	movs	r2, #1
 8005a2a:	701a      	strb	r2, [r3, #0]
 8005a2c:	e002      	b.n	8005a34 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005a2e:	4b81      	ldr	r3, [pc, #516]	; (8005c34 <checkAktifCalisma+0x1068>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005a34:	4b7c      	ldr	r3, [pc, #496]	; (8005c28 <checkAktifCalisma+0x105c>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d003      	beq.n	8005a44 <checkAktifCalisma+0xe78>
 8005a3c:	4b7a      	ldr	r3, [pc, #488]	; (8005c28 <checkAktifCalisma+0x105c>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d111      	bne.n	8005a68 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a44:	2102      	movs	r1, #2
 8005a46:	4879      	ldr	r0, [pc, #484]	; (8005c2c <checkAktifCalisma+0x1060>)
 8005a48:	f003 fafa 	bl	8009040 <HAL_GPIO_ReadPin>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d10a      	bne.n	8005a68 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005a52:	2104      	movs	r1, #4
 8005a54:	4875      	ldr	r0, [pc, #468]	; (8005c2c <checkAktifCalisma+0x1060>)
 8005a56:	f003 faf3 	bl	8009040 <HAL_GPIO_ReadPin>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d103      	bne.n	8005a68 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005a60:	4b75      	ldr	r3, [pc, #468]	; (8005c38 <checkAktifCalisma+0x106c>)
 8005a62:	2201      	movs	r2, #1
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	e002      	b.n	8005a6e <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005a68:	4b73      	ldr	r3, [pc, #460]	; (8005c38 <checkAktifCalisma+0x106c>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005a6e:	4b71      	ldr	r3, [pc, #452]	; (8005c34 <checkAktifCalisma+0x1068>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00f      	beq.n	8005a96 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005a76:	4b71      	ldr	r3, [pc, #452]	; (8005c3c <checkAktifCalisma+0x1070>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d10b      	bne.n	8005a96 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005a7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a82:	486f      	ldr	r0, [pc, #444]	; (8005c40 <checkAktifCalisma+0x1074>)
 8005a84:	f003 fadc 	bl	8009040 <HAL_GPIO_ReadPin>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d103      	bne.n	8005a96 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005a8e:	4b6d      	ldr	r3, [pc, #436]	; (8005c44 <checkAktifCalisma+0x1078>)
 8005a90:	2201      	movs	r2, #1
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	e002      	b.n	8005a9c <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005a96:	4b6b      	ldr	r3, [pc, #428]	; (8005c44 <checkAktifCalisma+0x1078>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005a9c:	4b66      	ldr	r3, [pc, #408]	; (8005c38 <checkAktifCalisma+0x106c>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00f      	beq.n	8005ac4 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005aa4:	4b65      	ldr	r3, [pc, #404]	; (8005c3c <checkAktifCalisma+0x1070>)
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d10b      	bne.n	8005ac4 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005aac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005ab0:	4863      	ldr	r0, [pc, #396]	; (8005c40 <checkAktifCalisma+0x1074>)
 8005ab2:	f003 fac5 	bl	8009040 <HAL_GPIO_ReadPin>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d103      	bne.n	8005ac4 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005abc:	4b62      	ldr	r3, [pc, #392]	; (8005c48 <checkAktifCalisma+0x107c>)
 8005abe:	2201      	movs	r2, #1
 8005ac0:	701a      	strb	r2, [r3, #0]
 8005ac2:	e002      	b.n	8005aca <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005ac4:	4b60      	ldr	r3, [pc, #384]	; (8005c48 <checkAktifCalisma+0x107c>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005aca:	4b60      	ldr	r3, [pc, #384]	; (8005c4c <checkAktifCalisma+0x1080>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d137      	bne.n	8005b42 <checkAktifCalisma+0xf76>
 8005ad2:	4b5f      	ldr	r3, [pc, #380]	; (8005c50 <checkAktifCalisma+0x1084>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d003      	beq.n	8005ae2 <checkAktifCalisma+0xf16>
 8005ada:	4b5d      	ldr	r3, [pc, #372]	; (8005c50 <checkAktifCalisma+0x1084>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b03      	cmp	r3, #3
 8005ae0:	d12f      	bne.n	8005b42 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005ae2:	4b54      	ldr	r3, [pc, #336]	; (8005c34 <checkAktifCalisma+0x1068>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d103      	bne.n	8005af2 <checkAktifCalisma+0xf26>
 8005aea:	4b53      	ldr	r3, [pc, #332]	; (8005c38 <checkAktifCalisma+0x106c>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d027      	beq.n	8005b42 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005af2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005af6:	484d      	ldr	r0, [pc, #308]	; (8005c2c <checkAktifCalisma+0x1060>)
 8005af8:	f003 faa2 	bl	8009040 <HAL_GPIO_ReadPin>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d103      	bne.n	8005b0a <checkAktifCalisma+0xf3e>
 8005b02:	4b4e      	ldr	r3, [pc, #312]	; (8005c3c <checkAktifCalisma+0x1070>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d007      	beq.n	8005b1a <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005b0a:	4b4e      	ldr	r3, [pc, #312]	; (8005c44 <checkAktifCalisma+0x1078>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d103      	bne.n	8005b1a <checkAktifCalisma+0xf4e>
 8005b12:	4b4d      	ldr	r3, [pc, #308]	; (8005c48 <checkAktifCalisma+0x107c>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d013      	beq.n	8005b42 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005b1a:	4b4e      	ldr	r3, [pc, #312]	; (8005c54 <checkAktifCalisma+0x1088>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00f      	beq.n	8005b42 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005b22:	4b4d      	ldr	r3, [pc, #308]	; (8005c58 <checkAktifCalisma+0x108c>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	f083 0301 	eor.w	r3, r3, #1
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d008      	beq.n	8005b42 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005b30:	4b4a      	ldr	r3, [pc, #296]	; (8005c5c <checkAktifCalisma+0x1090>)
 8005b32:	2201      	movs	r2, #1
 8005b34:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005b36:	4b4a      	ldr	r3, [pc, #296]	; (8005c60 <checkAktifCalisma+0x1094>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a4a      	ldr	r2, [pc, #296]	; (8005c64 <checkAktifCalisma+0x1098>)
 8005b3c:	6013      	str	r3, [r2, #0]
			bekle();
 8005b3e:	f7fe fec7 	bl	80048d0 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005b42:	4b47      	ldr	r3, [pc, #284]	; (8005c60 <checkAktifCalisma+0x1094>)
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	4b47      	ldr	r3, [pc, #284]	; (8005c64 <checkAktifCalisma+0x1098>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	4a46      	ldr	r2, [pc, #280]	; (8005c68 <checkAktifCalisma+0x109c>)
 8005b4e:	7812      	ldrb	r2, [r2, #0]
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d214      	bcs.n	8005b7e <checkAktifCalisma+0xfb2>
 8005b54:	4b37      	ldr	r3, [pc, #220]	; (8005c34 <checkAktifCalisma+0x1068>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	f083 0301 	eor.w	r3, r3, #1
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d006      	beq.n	8005b70 <checkAktifCalisma+0xfa4>
 8005b62:	4b35      	ldr	r3, [pc, #212]	; (8005c38 <checkAktifCalisma+0x106c>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	f083 0301 	eor.w	r3, r3, #1
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d106      	bne.n	8005b7e <checkAktifCalisma+0xfb2>
 8005b70:	4b38      	ldr	r3, [pc, #224]	; (8005c54 <checkAktifCalisma+0x1088>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	f083 0301 	eor.w	r3, r3, #1
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005b7e:	4b37      	ldr	r3, [pc, #220]	; (8005c5c <checkAktifCalisma+0x1090>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005b84:	4b31      	ldr	r3, [pc, #196]	; (8005c4c <checkAktifCalisma+0x1080>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d12b      	bne.n	8005be4 <checkAktifCalisma+0x1018>
 8005b8c:	4b30      	ldr	r3, [pc, #192]	; (8005c50 <checkAktifCalisma+0x1084>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d003      	beq.n	8005b9c <checkAktifCalisma+0xfd0>
 8005b94:	4b2e      	ldr	r3, [pc, #184]	; (8005c50 <checkAktifCalisma+0x1084>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b03      	cmp	r3, #3
 8005b9a:	d123      	bne.n	8005be4 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005b9c:	4b25      	ldr	r3, [pc, #148]	; (8005c34 <checkAktifCalisma+0x1068>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d103      	bne.n	8005bac <checkAktifCalisma+0xfe0>
 8005ba4:	4b24      	ldr	r3, [pc, #144]	; (8005c38 <checkAktifCalisma+0x106c>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d01b      	beq.n	8005be4 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bb0:	481e      	ldr	r0, [pc, #120]	; (8005c2c <checkAktifCalisma+0x1060>)
 8005bb2:	f003 fa45 	bl	8009040 <HAL_GPIO_ReadPin>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d103      	bne.n	8005bc4 <checkAktifCalisma+0xff8>
 8005bbc:	4b1f      	ldr	r3, [pc, #124]	; (8005c3c <checkAktifCalisma+0x1070>)
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d007      	beq.n	8005bd4 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005bc4:	4b1f      	ldr	r3, [pc, #124]	; (8005c44 <checkAktifCalisma+0x1078>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d103      	bne.n	8005bd4 <checkAktifCalisma+0x1008>
 8005bcc:	4b1e      	ldr	r3, [pc, #120]	; (8005c48 <checkAktifCalisma+0x107c>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d007      	beq.n	8005be4 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005bd4:	4b1f      	ldr	r3, [pc, #124]	; (8005c54 <checkAktifCalisma+0x1088>)
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005bdc:	4b23      	ldr	r3, [pc, #140]	; (8005c6c <checkAktifCalisma+0x10a0>)
 8005bde:	2201      	movs	r2, #1
 8005be0:	701a      	strb	r2, [r3, #0]
 8005be2:	e002      	b.n	8005bea <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005be4:	4b21      	ldr	r3, [pc, #132]	; (8005c6c <checkAktifCalisma+0x10a0>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005bea:	4b18      	ldr	r3, [pc, #96]	; (8005c4c <checkAktifCalisma+0x1080>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d140      	bne.n	8005c74 <checkAktifCalisma+0x10a8>
 8005bf2:	4b17      	ldr	r3, [pc, #92]	; (8005c50 <checkAktifCalisma+0x1084>)
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d003      	beq.n	8005c02 <checkAktifCalisma+0x1036>
 8005bfa:	4b15      	ldr	r3, [pc, #84]	; (8005c50 <checkAktifCalisma+0x1084>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	d138      	bne.n	8005c74 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005c02:	4b0c      	ldr	r3, [pc, #48]	; (8005c34 <checkAktifCalisma+0x1068>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d103      	bne.n	8005c12 <checkAktifCalisma+0x1046>
 8005c0a:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <checkAktifCalisma+0x106c>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d030      	beq.n	8005c74 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005c12:	4b10      	ldr	r3, [pc, #64]	; (8005c54 <checkAktifCalisma+0x1088>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d02c      	beq.n	8005c74 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005c1a:	4b15      	ldr	r3, [pc, #84]	; (8005c70 <checkAktifCalisma+0x10a4>)
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	701a      	strb	r2, [r3, #0]
 8005c20:	e02b      	b.n	8005c7a <checkAktifCalisma+0x10ae>
 8005c22:	bf00      	nop
 8005c24:	40010800 	.word	0x40010800
 8005c28:	20000201 	.word	0x20000201
 8005c2c:	40011000 	.word	0x40011000
 8005c30:	200001fa 	.word	0x200001fa
 8005c34:	20000240 	.word	0x20000240
 8005c38:	20000241 	.word	0x20000241
 8005c3c:	20000200 	.word	0x20000200
 8005c40:	40010c00 	.word	0x40010c00
 8005c44:	20000250 	.word	0x20000250
 8005c48:	20000251 	.word	0x20000251
 8005c4c:	200001ff 	.word	0x200001ff
 8005c50:	200001fc 	.word	0x200001fc
 8005c54:	20000236 	.word	0x20000236
 8005c58:	20000223 	.word	0x20000223
 8005c5c:	2000023d 	.word	0x2000023d
 8005c60:	200001d0 	.word	0x200001d0
 8005c64:	200001d4 	.word	0x200001d4
 8005c68:	2000020f 	.word	0x2000020f
 8005c6c:	2000023e 	.word	0x2000023e
 8005c70:	2000023f 	.word	0x2000023f
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005c74:	4b8b      	ldr	r3, [pc, #556]	; (8005ea4 <checkAktifCalisma+0x12d8>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005c7a:	4b8b      	ldr	r3, [pc, #556]	; (8005ea8 <checkAktifCalisma+0x12dc>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d107      	bne.n	8005c92 <checkAktifCalisma+0x10c6>
 8005c82:	4b8a      	ldr	r3, [pc, #552]	; (8005eac <checkAktifCalisma+0x12e0>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d103      	bne.n	8005c92 <checkAktifCalisma+0x10c6>
 8005c8a:	4b86      	ldr	r3, [pc, #536]	; (8005ea4 <checkAktifCalisma+0x12d8>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d005      	beq.n	8005c9e <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005c92:	2201      	movs	r2, #1
 8005c94:	2120      	movs	r1, #32
 8005c96:	4886      	ldr	r0, [pc, #536]	; (8005eb0 <checkAktifCalisma+0x12e4>)
 8005c98:	f003 f9e9 	bl	800906e <HAL_GPIO_WritePin>
 8005c9c:	e004      	b.n	8005ca8 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	2120      	movs	r1, #32
 8005ca2:	4883      	ldr	r0, [pc, #524]	; (8005eb0 <checkAktifCalisma+0x12e4>)
 8005ca4:	f003 f9e3 	bl	800906e <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005ca8:	4b82      	ldr	r3, [pc, #520]	; (8005eb4 <checkAktifCalisma+0x12e8>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00e      	beq.n	8005cce <checkAktifCalisma+0x1102>
 8005cb0:	2102      	movs	r1, #2
 8005cb2:	4881      	ldr	r0, [pc, #516]	; (8005eb8 <checkAktifCalisma+0x12ec>)
 8005cb4:	f003 f9c4 	bl	8009040 <HAL_GPIO_ReadPin>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d107      	bne.n	8005cce <checkAktifCalisma+0x1102>
 8005cbe:	4b7f      	ldr	r3, [pc, #508]	; (8005ebc <checkAktifCalisma+0x12f0>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d103      	bne.n	8005cce <checkAktifCalisma+0x1102>
 8005cc6:	4b7e      	ldr	r3, [pc, #504]	; (8005ec0 <checkAktifCalisma+0x12f4>)
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d112      	bne.n	8005cf4 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005cce:	4b7d      	ldr	r3, [pc, #500]	; (8005ec4 <checkAktifCalisma+0x12f8>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d066      	beq.n	8005da4 <checkAktifCalisma+0x11d8>
 8005cd6:	2104      	movs	r1, #4
 8005cd8:	4877      	ldr	r0, [pc, #476]	; (8005eb8 <checkAktifCalisma+0x12ec>)
 8005cda:	f003 f9b1 	bl	8009040 <HAL_GPIO_ReadPin>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d15f      	bne.n	8005da4 <checkAktifCalisma+0x11d8>
 8005ce4:	4b75      	ldr	r3, [pc, #468]	; (8005ebc <checkAktifCalisma+0x12f0>)
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d05b      	beq.n	8005da4 <checkAktifCalisma+0x11d8>
 8005cec:	4b74      	ldr	r3, [pc, #464]	; (8005ec0 <checkAktifCalisma+0x12f4>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d057      	beq.n	8005da4 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005cf4:	4b74      	ldr	r3, [pc, #464]	; (8005ec8 <checkAktifCalisma+0x12fc>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	4b72      	ldr	r3, [pc, #456]	; (8005ec8 <checkAktifCalisma+0x12fc>)
 8005cfe:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005d00:	4b71      	ldr	r3, [pc, #452]	; (8005ec8 <checkAktifCalisma+0x12fc>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b09      	cmp	r3, #9
 8005d06:	d908      	bls.n	8005d1a <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005d08:	4b6f      	ldr	r3, [pc, #444]	; (8005ec8 <checkAktifCalisma+0x12fc>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005d0e:	4b6f      	ldr	r3, [pc, #444]	; (8005ecc <checkAktifCalisma+0x1300>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	3301      	adds	r3, #1
 8005d14:	b2da      	uxtb	r2, r3
 8005d16:	4b6d      	ldr	r3, [pc, #436]	; (8005ecc <checkAktifCalisma+0x1300>)
 8005d18:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005d1a:	4b6c      	ldr	r3, [pc, #432]	; (8005ecc <checkAktifCalisma+0x1300>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b09      	cmp	r3, #9
 8005d20:	d908      	bls.n	8005d34 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005d22:	4b6a      	ldr	r3, [pc, #424]	; (8005ecc <checkAktifCalisma+0x1300>)
 8005d24:	2200      	movs	r2, #0
 8005d26:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005d28:	4b69      	ldr	r3, [pc, #420]	; (8005ed0 <checkAktifCalisma+0x1304>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	4b67      	ldr	r3, [pc, #412]	; (8005ed0 <checkAktifCalisma+0x1304>)
 8005d32:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005d34:	4b66      	ldr	r3, [pc, #408]	; (8005ed0 <checkAktifCalisma+0x1304>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b09      	cmp	r3, #9
 8005d3a:	d908      	bls.n	8005d4e <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005d3c:	4b64      	ldr	r3, [pc, #400]	; (8005ed0 <checkAktifCalisma+0x1304>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005d42:	4b64      	ldr	r3, [pc, #400]	; (8005ed4 <checkAktifCalisma+0x1308>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	3301      	adds	r3, #1
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	4b62      	ldr	r3, [pc, #392]	; (8005ed4 <checkAktifCalisma+0x1308>)
 8005d4c:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005d4e:	4b61      	ldr	r3, [pc, #388]	; (8005ed4 <checkAktifCalisma+0x1308>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b09      	cmp	r3, #9
 8005d54:	d908      	bls.n	8005d68 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005d56:	4b5f      	ldr	r3, [pc, #380]	; (8005ed4 <checkAktifCalisma+0x1308>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005d5c:	4b5e      	ldr	r3, [pc, #376]	; (8005ed8 <checkAktifCalisma+0x130c>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	3301      	adds	r3, #1
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	4b5c      	ldr	r3, [pc, #368]	; (8005ed8 <checkAktifCalisma+0x130c>)
 8005d66:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005d68:	4b5b      	ldr	r3, [pc, #364]	; (8005ed8 <checkAktifCalisma+0x130c>)
 8005d6a:	781a      	ldrb	r2, [r3, #0]
 8005d6c:	4b5b      	ldr	r3, [pc, #364]	; (8005edc <checkAktifCalisma+0x1310>)
 8005d6e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005d72:	4b58      	ldr	r3, [pc, #352]	; (8005ed4 <checkAktifCalisma+0x1308>)
 8005d74:	781a      	ldrb	r2, [r3, #0]
 8005d76:	4b59      	ldr	r3, [pc, #356]	; (8005edc <checkAktifCalisma+0x1310>)
 8005d78:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005d7a:	4b55      	ldr	r3, [pc, #340]	; (8005ed0 <checkAktifCalisma+0x1304>)
 8005d7c:	781a      	ldrb	r2, [r3, #0]
 8005d7e:	4b57      	ldr	r3, [pc, #348]	; (8005edc <checkAktifCalisma+0x1310>)
 8005d80:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005d82:	4b52      	ldr	r3, [pc, #328]	; (8005ecc <checkAktifCalisma+0x1300>)
 8005d84:	781a      	ldrb	r2, [r3, #0]
 8005d86:	4b55      	ldr	r3, [pc, #340]	; (8005edc <checkAktifCalisma+0x1310>)
 8005d88:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005d8a:	4b4f      	ldr	r3, [pc, #316]	; (8005ec8 <checkAktifCalisma+0x12fc>)
 8005d8c:	781a      	ldrb	r2, [r3, #0]
 8005d8e:	4b53      	ldr	r3, [pc, #332]	; (8005edc <checkAktifCalisma+0x1310>)
 8005d90:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005d92:	4b53      	ldr	r3, [pc, #332]	; (8005ee0 <checkAktifCalisma+0x1314>)
 8005d94:	2201      	movs	r2, #1
 8005d96:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005d98:	4b46      	ldr	r3, [pc, #280]	; (8005eb4 <checkAktifCalisma+0x12e8>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005d9e:	4b49      	ldr	r3, [pc, #292]	; (8005ec4 <checkAktifCalisma+0x12f8>)
 8005da0:	2200      	movs	r2, #0
 8005da2:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005da4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005da8:	484e      	ldr	r0, [pc, #312]	; (8005ee4 <checkAktifCalisma+0x1318>)
 8005daa:	f003 f949 	bl	8009040 <HAL_GPIO_ReadPin>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d016      	beq.n	8005de2 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005db4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005db8:	484a      	ldr	r0, [pc, #296]	; (8005ee4 <checkAktifCalisma+0x1318>)
 8005dba:	f003 f941 	bl	8009040 <HAL_GPIO_ReadPin>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00e      	beq.n	8005de2 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005dc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005dc8:	4846      	ldr	r0, [pc, #280]	; (8005ee4 <checkAktifCalisma+0x1318>)
 8005dca:	f003 f939 	bl	8009040 <HAL_GPIO_ReadPin>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d006      	beq.n	8005de2 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005dd4:	2140      	movs	r1, #64	; 0x40
 8005dd6:	4838      	ldr	r0, [pc, #224]	; (8005eb8 <checkAktifCalisma+0x12ec>)
 8005dd8:	f003 f932 	bl	8009040 <HAL_GPIO_ReadPin>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d103      	bne.n	8005dea <checkAktifCalisma+0x121e>
			startBasili=1;
 8005de2:	4b41      	ldr	r3, [pc, #260]	; (8005ee8 <checkAktifCalisma+0x131c>)
 8005de4:	2201      	movs	r2, #1
 8005de6:	701a      	strb	r2, [r3, #0]
 8005de8:	e002      	b.n	8005df0 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005dea:	4b3f      	ldr	r3, [pc, #252]	; (8005ee8 <checkAktifCalisma+0x131c>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005df0:	4b3d      	ldr	r3, [pc, #244]	; (8005ee8 <checkAktifCalisma+0x131c>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d016      	beq.n	8005e26 <checkAktifCalisma+0x125a>
 8005df8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005dfc:	4839      	ldr	r0, [pc, #228]	; (8005ee4 <checkAktifCalisma+0x1318>)
 8005dfe:	f003 f91f 	bl	8009040 <HAL_GPIO_ReadPin>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d10e      	bne.n	8005e26 <checkAktifCalisma+0x125a>
			hataVar=1;
 8005e08:	4b38      	ldr	r3, [pc, #224]	; (8005eec <checkAktifCalisma+0x1320>)
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005e0e:	2001      	movs	r0, #1
 8005e10:	f7fa fd7a 	bl	8000908 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005e14:	2001      	movs	r0, #1
 8005e16:	f7fa fd1d 	bl	8000854 <hata2EEPROM>
			convertAndSendData();
 8005e1a:	f001 fbdd 	bl	80075d8 <convertAndSendData>
			acilstophatasi=1;
 8005e1e:	4b34      	ldr	r3, [pc, #208]	; (8005ef0 <checkAktifCalisma+0x1324>)
 8005e20:	2201      	movs	r2, #1
 8005e22:	701a      	strb	r2, [r3, #0]
 8005e24:	e018      	b.n	8005e58 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005e26:	4b32      	ldr	r3, [pc, #200]	; (8005ef0 <checkAktifCalisma+0x1324>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d014      	beq.n	8005e58 <checkAktifCalisma+0x128c>
 8005e2e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e32:	482c      	ldr	r0, [pc, #176]	; (8005ee4 <checkAktifCalisma+0x1318>)
 8005e34:	f003 f904 	bl	8009040 <HAL_GPIO_ReadPin>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10c      	bne.n	8005e58 <checkAktifCalisma+0x128c>
 8005e3e:	4b2a      	ldr	r3, [pc, #168]	; (8005ee8 <checkAktifCalisma+0x131c>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	f083 0301 	eor.w	r3, r3, #1
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d005      	beq.n	8005e58 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005e4c:	4b28      	ldr	r3, [pc, #160]	; (8005ef0 <checkAktifCalisma+0x1324>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8005e52:	2001      	movs	r0, #1
 8005e54:	f7fe fce8 	bl	8004828 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8005e58:	4b26      	ldr	r3, [pc, #152]	; (8005ef4 <checkAktifCalisma+0x1328>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	f083 0301 	eor.w	r3, r3, #1
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d04e      	beq.n	8005f04 <checkAktifCalisma+0x1338>
 8005e66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e6a:	481e      	ldr	r0, [pc, #120]	; (8005ee4 <checkAktifCalisma+0x1318>)
 8005e6c:	f003 f8e8 	bl	8009040 <HAL_GPIO_ReadPin>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <checkAktifCalisma+0x12b2>
 8005e76:	4b20      	ldr	r3, [pc, #128]	; (8005ef8 <checkAktifCalisma+0x132c>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d042      	beq.n	8005f04 <checkAktifCalisma+0x1338>
 8005e7e:	4b1f      	ldr	r3, [pc, #124]	; (8005efc <checkAktifCalisma+0x1330>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d13e      	bne.n	8005f04 <checkAktifCalisma+0x1338>
			hataVar=1;
 8005e86:	4b19      	ldr	r3, [pc, #100]	; (8005eec <checkAktifCalisma+0x1320>)
 8005e88:	2201      	movs	r2, #1
 8005e8a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005e8c:	2002      	movs	r0, #2
 8005e8e:	f7fa fd3b 	bl	8000908 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8005e92:	2002      	movs	r0, #2
 8005e94:	f7fa fcde 	bl	8000854 <hata2EEPROM>
			convertAndSendData();
 8005e98:	f001 fb9e 	bl	80075d8 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005e9c:	4b18      	ldr	r3, [pc, #96]	; (8005f00 <checkAktifCalisma+0x1334>)
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	701a      	strb	r2, [r3, #0]
 8005ea2:	e047      	b.n	8005f34 <checkAktifCalisma+0x1368>
 8005ea4:	2000023f 	.word	0x2000023f
 8005ea8:	2000023e 	.word	0x2000023e
 8005eac:	2000023d 	.word	0x2000023d
 8005eb0:	40010800 	.word	0x40010800
 8005eb4:	20000233 	.word	0x20000233
 8005eb8:	40011000 	.word	0x40011000
 8005ebc:	200001fa 	.word	0x200001fa
 8005ec0:	20000236 	.word	0x20000236
 8005ec4:	20000234 	.word	0x20000234
 8005ec8:	200001f1 	.word	0x200001f1
 8005ecc:	200001f2 	.word	0x200001f2
 8005ed0:	20000000 	.word	0x20000000
 8005ed4:	20000001 	.word	0x20000001
 8005ed8:	200001f3 	.word	0x200001f3
 8005edc:	20000120 	.word	0x20000120
 8005ee0:	20000220 	.word	0x20000220
 8005ee4:	40010c00 	.word	0x40010c00
 8005ee8:	20000242 	.word	0x20000242
 8005eec:	20000249 	.word	0x20000249
 8005ef0:	20000244 	.word	0x20000244
 8005ef4:	2000024b 	.word	0x2000024b
 8005ef8:	20000255 	.word	0x20000255
 8005efc:	200001f8 	.word	0x200001f8
 8005f00:	20000245 	.word	0x20000245
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005f04:	4b9b      	ldr	r3, [pc, #620]	; (8006174 <checkAktifCalisma+0x15a8>)
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d013      	beq.n	8005f34 <checkAktifCalisma+0x1368>
 8005f0c:	4b9a      	ldr	r3, [pc, #616]	; (8006178 <checkAktifCalisma+0x15ac>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00f      	beq.n	8005f34 <checkAktifCalisma+0x1368>
 8005f14:	4b99      	ldr	r3, [pc, #612]	; (800617c <checkAktifCalisma+0x15b0>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	f083 0301 	eor.w	r3, r3, #1
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d008      	beq.n	8005f34 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8005f22:	4b94      	ldr	r3, [pc, #592]	; (8006174 <checkAktifCalisma+0x15a8>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8005f28:	4b95      	ldr	r3, [pc, #596]	; (8006180 <checkAktifCalisma+0x15b4>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8005f2e:	2002      	movs	r0, #2
 8005f30:	f7fe fc7a 	bl	8004828 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8005f34:	4b93      	ldr	r3, [pc, #588]	; (8006184 <checkAktifCalisma+0x15b8>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d11e      	bne.n	8005f7a <checkAktifCalisma+0x13ae>
 8005f3c:	4b92      	ldr	r3, [pc, #584]	; (8006188 <checkAktifCalisma+0x15bc>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d11a      	bne.n	8005f7a <checkAktifCalisma+0x13ae>
 8005f44:	4b91      	ldr	r3, [pc, #580]	; (800618c <checkAktifCalisma+0x15c0>)
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d016      	beq.n	8005f7a <checkAktifCalisma+0x13ae>
 8005f4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f50:	488f      	ldr	r0, [pc, #572]	; (8006190 <checkAktifCalisma+0x15c4>)
 8005f52:	f003 f875 	bl	8009040 <HAL_GPIO_ReadPin>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d10e      	bne.n	8005f7a <checkAktifCalisma+0x13ae>
			hataVar=1;
 8005f5c:	4b8d      	ldr	r3, [pc, #564]	; (8006194 <checkAktifCalisma+0x15c8>)
 8005f5e:	2201      	movs	r2, #1
 8005f60:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8005f62:	2003      	movs	r0, #3
 8005f64:	f7fa fcd0 	bl	8000908 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8005f68:	2003      	movs	r0, #3
 8005f6a:	f7fa fc73 	bl	8000854 <hata2EEPROM>
			convertAndSendData();
 8005f6e:	f001 fb33 	bl	80075d8 <convertAndSendData>
			basinchatasi=1;
 8005f72:	4b89      	ldr	r3, [pc, #548]	; (8006198 <checkAktifCalisma+0x15cc>)
 8005f74:	2201      	movs	r2, #1
 8005f76:	701a      	strb	r2, [r3, #0]
 8005f78:	e015      	b.n	8005fa6 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005f7a:	4b87      	ldr	r3, [pc, #540]	; (8006198 <checkAktifCalisma+0x15cc>)
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d011      	beq.n	8005fa6 <checkAktifCalisma+0x13da>
 8005f82:	4b80      	ldr	r3, [pc, #512]	; (8006184 <checkAktifCalisma+0x15b8>)
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d10d      	bne.n	8005fa6 <checkAktifCalisma+0x13da>
 8005f8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f8e:	4883      	ldr	r0, [pc, #524]	; (800619c <checkAktifCalisma+0x15d0>)
 8005f90:	f003 f856 	bl	8009040 <HAL_GPIO_ReadPin>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d105      	bne.n	8005fa6 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8005f9a:	4b7f      	ldr	r3, [pc, #508]	; (8006198 <checkAktifCalisma+0x15cc>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8005fa0:	2003      	movs	r0, #3
 8005fa2:	f7fe fc41 	bl	8004828 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8005fa6:	4b7e      	ldr	r3, [pc, #504]	; (80061a0 <checkAktifCalisma+0x15d4>)
 8005fa8:	781b      	ldrb	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d103      	bne.n	8005fb6 <checkAktifCalisma+0x13ea>
 8005fae:	4b7d      	ldr	r3, [pc, #500]	; (80061a4 <checkAktifCalisma+0x15d8>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d01e      	beq.n	8005ff4 <checkAktifCalisma+0x1428>
 8005fb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005fba:	487b      	ldr	r0, [pc, #492]	; (80061a8 <checkAktifCalisma+0x15dc>)
 8005fbc:	f003 f840 	bl	8009040 <HAL_GPIO_ReadPin>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d116      	bne.n	8005ff4 <checkAktifCalisma+0x1428>
 8005fc6:	4b79      	ldr	r3, [pc, #484]	; (80061ac <checkAktifCalisma+0x15e0>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d003      	beq.n	8005fd6 <checkAktifCalisma+0x140a>
 8005fce:	4b77      	ldr	r3, [pc, #476]	; (80061ac <checkAktifCalisma+0x15e0>)
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	2b03      	cmp	r3, #3
 8005fd4:	d10e      	bne.n	8005ff4 <checkAktifCalisma+0x1428>
			hataVar=1;
 8005fd6:	4b6f      	ldr	r3, [pc, #444]	; (8006194 <checkAktifCalisma+0x15c8>)
 8005fd8:	2201      	movs	r2, #1
 8005fda:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8005fdc:	2004      	movs	r0, #4
 8005fde:	f7fa fc93 	bl	8000908 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8005fe2:	2004      	movs	r0, #4
 8005fe4:	f7fa fc36 	bl	8000854 <hata2EEPROM>
			convertAndSendData();
 8005fe8:	f001 faf6 	bl	80075d8 <convertAndSendData>
			katkapisivicihatasi=1;
 8005fec:	4b70      	ldr	r3, [pc, #448]	; (80061b0 <checkAktifCalisma+0x15e4>)
 8005fee:	2201      	movs	r2, #1
 8005ff0:	701a      	strb	r2, [r3, #0]
 8005ff2:	e01f      	b.n	8006034 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005ff4:	4b6e      	ldr	r3, [pc, #440]	; (80061b0 <checkAktifCalisma+0x15e4>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d01b      	beq.n	8006034 <checkAktifCalisma+0x1468>
 8005ffc:	4b6d      	ldr	r3, [pc, #436]	; (80061b4 <checkAktifCalisma+0x15e8>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d017      	beq.n	8006034 <checkAktifCalisma+0x1468>
 8006004:	4b66      	ldr	r3, [pc, #408]	; (80061a0 <checkAktifCalisma+0x15d4>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	f083 0301 	eor.w	r3, r3, #1
 800600c:	b2db      	uxtb	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d010      	beq.n	8006034 <checkAktifCalisma+0x1468>
 8006012:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006016:	4864      	ldr	r0, [pc, #400]	; (80061a8 <checkAktifCalisma+0x15dc>)
 8006018:	f003 f812 	bl	8009040 <HAL_GPIO_ReadPin>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d108      	bne.n	8006034 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 8006022:	4b63      	ldr	r3, [pc, #396]	; (80061b0 <checkAktifCalisma+0x15e4>)
 8006024:	2200      	movs	r2, #0
 8006026:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8006028:	4b5e      	ldr	r3, [pc, #376]	; (80061a4 <checkAktifCalisma+0x15d8>)
 800602a:	2200      	movs	r2, #0
 800602c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800602e:	2004      	movs	r0, #4
 8006030:	f7fe fbfa 	bl	8004828 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006034:	4b5a      	ldr	r3, [pc, #360]	; (80061a0 <checkAktifCalisma+0x15d4>)
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d103      	bne.n	8006044 <checkAktifCalisma+0x1478>
 800603c:	4b5e      	ldr	r3, [pc, #376]	; (80061b8 <checkAktifCalisma+0x15ec>)
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01e      	beq.n	8006082 <checkAktifCalisma+0x14b6>
 8006044:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006048:	4857      	ldr	r0, [pc, #348]	; (80061a8 <checkAktifCalisma+0x15dc>)
 800604a:	f002 fff9 	bl	8009040 <HAL_GPIO_ReadPin>
 800604e:	4603      	mov	r3, r0
 8006050:	2b01      	cmp	r3, #1
 8006052:	d116      	bne.n	8006082 <checkAktifCalisma+0x14b6>
 8006054:	4b55      	ldr	r3, [pc, #340]	; (80061ac <checkAktifCalisma+0x15e0>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d003      	beq.n	8006064 <checkAktifCalisma+0x1498>
 800605c:	4b53      	ldr	r3, [pc, #332]	; (80061ac <checkAktifCalisma+0x15e0>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2b03      	cmp	r3, #3
 8006062:	d10e      	bne.n	8006082 <checkAktifCalisma+0x14b6>
			hataVar=1;
 8006064:	4b4b      	ldr	r3, [pc, #300]	; (8006194 <checkAktifCalisma+0x15c8>)
 8006066:	2201      	movs	r2, #1
 8006068:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 800606a:	2005      	movs	r0, #5
 800606c:	f7fa fc4c 	bl	8000908 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8006070:	2005      	movs	r0, #5
 8006072:	f7fa fbef 	bl	8000854 <hata2EEPROM>
			convertAndSendData();
 8006076:	f001 faaf 	bl	80075d8 <convertAndSendData>
			tablakapisivicihatasi=1;
 800607a:	4b50      	ldr	r3, [pc, #320]	; (80061bc <checkAktifCalisma+0x15f0>)
 800607c:	2201      	movs	r2, #1
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	e023      	b.n	80060ca <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006082:	4b4e      	ldr	r3, [pc, #312]	; (80061bc <checkAktifCalisma+0x15f0>)
 8006084:	781b      	ldrb	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d01f      	beq.n	80060ca <checkAktifCalisma+0x14fe>
 800608a:	4b4a      	ldr	r3, [pc, #296]	; (80061b4 <checkAktifCalisma+0x15e8>)
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d01b      	beq.n	80060ca <checkAktifCalisma+0x14fe>
 8006092:	4b43      	ldr	r3, [pc, #268]	; (80061a0 <checkAktifCalisma+0x15d4>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	f083 0301 	eor.w	r3, r3, #1
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d014      	beq.n	80060ca <checkAktifCalisma+0x14fe>
 80060a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80060a4:	4840      	ldr	r0, [pc, #256]	; (80061a8 <checkAktifCalisma+0x15dc>)
 80060a6:	f002 ffcb 	bl	8009040 <HAL_GPIO_ReadPin>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10c      	bne.n	80060ca <checkAktifCalisma+0x14fe>
 80060b0:	4b40      	ldr	r3, [pc, #256]	; (80061b4 <checkAktifCalisma+0x15e8>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d008      	beq.n	80060ca <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 80060b8:	4b40      	ldr	r3, [pc, #256]	; (80061bc <checkAktifCalisma+0x15f0>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80060be:	4b3e      	ldr	r3, [pc, #248]	; (80061b8 <checkAktifCalisma+0x15ec>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80060c4:	2005      	movs	r0, #5
 80060c6:	f7fe fbaf 	bl	8004828 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80060ca:	4b30      	ldr	r3, [pc, #192]	; (800618c <checkAktifCalisma+0x15c0>)
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d107      	bne.n	80060e2 <checkAktifCalisma+0x1516>
 80060d2:	4b2a      	ldr	r3, [pc, #168]	; (800617c <checkAktifCalisma+0x15b0>)
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d103      	bne.n	80060e2 <checkAktifCalisma+0x1516>
 80060da:	4b39      	ldr	r3, [pc, #228]	; (80061c0 <checkAktifCalisma+0x15f4>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d016      	beq.n	8006110 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 80060e2:	4b38      	ldr	r3, [pc, #224]	; (80061c4 <checkAktifCalisma+0x15f8>)
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	4b38      	ldr	r3, [pc, #224]	; (80061c8 <checkAktifCalisma+0x15fc>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	4a37      	ldr	r2, [pc, #220]	; (80061cc <checkAktifCalisma+0x1600>)
 80060ee:	7812      	ldrb	r2, [r2, #0]
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d30d      	bcc.n	8006110 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 80060f4:	4b27      	ldr	r3, [pc, #156]	; (8006194 <checkAktifCalisma+0x15c8>)
 80060f6:	2201      	movs	r2, #1
 80060f8:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 80060fa:	2006      	movs	r0, #6
 80060fc:	f7fa fc04 	bl	8000908 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8006100:	2006      	movs	r0, #6
 8006102:	f7fa fba7 	bl	8000854 <hata2EEPROM>
			  	convertAndSendData();
 8006106:	f001 fa67 	bl	80075d8 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 800610a:	4b31      	ldr	r3, [pc, #196]	; (80061d0 <checkAktifCalisma+0x1604>)
 800610c:	2201      	movs	r2, #1
 800610e:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006110:	4b2f      	ldr	r3, [pc, #188]	; (80061d0 <checkAktifCalisma+0x1604>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d013      	beq.n	8006140 <checkAktifCalisma+0x1574>
 8006118:	2108      	movs	r1, #8
 800611a:	4823      	ldr	r0, [pc, #140]	; (80061a8 <checkAktifCalisma+0x15dc>)
 800611c:	f002 ff90 	bl	8009040 <HAL_GPIO_ReadPin>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00c      	beq.n	8006140 <checkAktifCalisma+0x1574>
 8006126:	4b1e      	ldr	r3, [pc, #120]	; (80061a0 <checkAktifCalisma+0x15d4>)
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	f083 0301 	eor.w	r3, r3, #1
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d005      	beq.n	8006140 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 8006134:	4b26      	ldr	r3, [pc, #152]	; (80061d0 <checkAktifCalisma+0x1604>)
 8006136:	2200      	movs	r2, #0
 8006138:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 800613a:	2006      	movs	r0, #6
 800613c:	f7fe fb74 	bl	8004828 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006140:	4b24      	ldr	r3, [pc, #144]	; (80061d4 <checkAktifCalisma+0x1608>)
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10b      	bne.n	8006160 <checkAktifCalisma+0x1594>
 8006148:	4b0c      	ldr	r3, [pc, #48]	; (800617c <checkAktifCalisma+0x15b0>)
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d107      	bne.n	8006160 <checkAktifCalisma+0x1594>
 8006150:	4b21      	ldr	r3, [pc, #132]	; (80061d8 <checkAktifCalisma+0x160c>)
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d103      	bne.n	8006160 <checkAktifCalisma+0x1594>
 8006158:	4b19      	ldr	r3, [pc, #100]	; (80061c0 <checkAktifCalisma+0x15f4>)
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d03f      	beq.n	80061e0 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8006160:	4b1e      	ldr	r3, [pc, #120]	; (80061dc <checkAktifCalisma+0x1610>)
 8006162:	2200      	movs	r2, #0
 8006164:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8006166:	4b0f      	ldr	r3, [pc, #60]	; (80061a4 <checkAktifCalisma+0x15d8>)
 8006168:	2201      	movs	r2, #1
 800616a:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 800616c:	4b12      	ldr	r3, [pc, #72]	; (80061b8 <checkAktifCalisma+0x15ec>)
 800616e:	2201      	movs	r2, #1
 8006170:	701a      	strb	r2, [r3, #0]
 8006172:	e03c      	b.n	80061ee <checkAktifCalisma+0x1622>
 8006174:	20000245 	.word	0x20000245
 8006178:	2000024b 	.word	0x2000024b
 800617c:	2000022c 	.word	0x2000022c
 8006180:	20000255 	.word	0x20000255
 8006184:	200001f7 	.word	0x200001f7
 8006188:	200001fb 	.word	0x200001fb
 800618c:	20000248 	.word	0x20000248
 8006190:	40011000 	.word	0x40011000
 8006194:	20000249 	.word	0x20000249
 8006198:	20000252 	.word	0x20000252
 800619c:	40010c00 	.word	0x40010c00
 80061a0:	20000242 	.word	0x20000242
 80061a4:	20000256 	.word	0x20000256
 80061a8:	40010800 	.word	0x40010800
 80061ac:	200001fc 	.word	0x200001fc
 80061b0:	20000253 	.word	0x20000253
 80061b4:	20000236 	.word	0x20000236
 80061b8:	20000257 	.word	0x20000257
 80061bc:	20000254 	.word	0x20000254
 80061c0:	2000022b 	.word	0x2000022b
 80061c4:	200001d0 	.word	0x200001d0
 80061c8:	200001e4 	.word	0x200001e4
 80061cc:	2000020c 	.word	0x2000020c
 80061d0:	20000243 	.word	0x20000243
 80061d4:	20000229 	.word	0x20000229
 80061d8:	2000022a 	.word	0x2000022a
 80061dc:	2000024a 	.word	0x2000024a
		} else {
			makineCalisiyor=1;
 80061e0:	4b1e      	ldr	r3, [pc, #120]	; (800625c <checkAktifCalisma+0x1690>)
 80061e2:	2201      	movs	r2, #1
 80061e4:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80061e6:	4b1e      	ldr	r3, [pc, #120]	; (8006260 <checkAktifCalisma+0x1694>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a1e      	ldr	r2, [pc, #120]	; (8006264 <checkAktifCalisma+0x1698>)
 80061ec:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80061ee:	4b1e      	ldr	r3, [pc, #120]	; (8006268 <checkAktifCalisma+0x169c>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d02f      	beq.n	8006256 <checkAktifCalisma+0x168a>
 80061f6:	4b1d      	ldr	r3, [pc, #116]	; (800626c <checkAktifCalisma+0x16a0>)
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	f083 0301 	eor.w	r3, r3, #1
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	d028      	beq.n	8006256 <checkAktifCalisma+0x168a>
 8006204:	4b1a      	ldr	r3, [pc, #104]	; (8006270 <checkAktifCalisma+0x16a4>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	f083 0301 	eor.w	r3, r3, #1
 800620c:	b2db      	uxtb	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d021      	beq.n	8006256 <checkAktifCalisma+0x168a>
 8006212:	4b18      	ldr	r3, [pc, #96]	; (8006274 <checkAktifCalisma+0x16a8>)
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	f083 0301 	eor.w	r3, r3, #1
 800621a:	b2db      	uxtb	r3, r3
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01a      	beq.n	8006256 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006220:	4b15      	ldr	r3, [pc, #84]	; (8006278 <checkAktifCalisma+0x16ac>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	f083 0301 	eor.w	r3, r3, #1
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b00      	cmp	r3, #0
 800622c:	d013      	beq.n	8006256 <checkAktifCalisma+0x168a>
 800622e:	4b13      	ldr	r3, [pc, #76]	; (800627c <checkAktifCalisma+0x16b0>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	f083 0301 	eor.w	r3, r3, #1
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00c      	beq.n	8006256 <checkAktifCalisma+0x168a>
 800623c:	4b10      	ldr	r3, [pc, #64]	; (8006280 <checkAktifCalisma+0x16b4>)
 800623e:	781b      	ldrb	r3, [r3, #0]
 8006240:	f083 0301 	eor.w	r3, r3, #1
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d005      	beq.n	8006256 <checkAktifCalisma+0x168a>
			hataVar=0;
 800624a:	4b07      	ldr	r3, [pc, #28]	; (8006268 <checkAktifCalisma+0x169c>)
 800624c:	2200      	movs	r2, #0
 800624e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006250:	2007      	movs	r0, #7
 8006252:	f7fe fae9 	bl	8004828 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8006256:	bf00      	nop
 8006258:	bd80      	pop	{r7, pc}
 800625a:	bf00      	nop
 800625c:	2000024a 	.word	0x2000024a
 8006260:	200001d0 	.word	0x200001d0
 8006264:	200001e4 	.word	0x200001e4
 8006268:	20000249 	.word	0x20000249
 800626c:	20000244 	.word	0x20000244
 8006270:	20000245 	.word	0x20000245
 8006274:	20000252 	.word	0x20000252
 8006278:	20000253 	.word	0x20000253
 800627c:	20000254 	.word	0x20000254
 8006280:	20000243 	.word	0x20000243

08006284 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006284:	b580      	push	{r7, lr}
 8006286:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006288:	4b8b      	ldr	r3, [pc, #556]	; (80064b8 <checkDemoModCalisma+0x234>)
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b01      	cmp	r3, #1
 800628e:	f040 8229 	bne.w	80066e4 <checkDemoModCalisma+0x460>
 8006292:	4b8a      	ldr	r3, [pc, #552]	; (80064bc <checkDemoModCalisma+0x238>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	f000 8224 	beq.w	80066e4 <checkDemoModCalisma+0x460>
 800629c:	4b88      	ldr	r3, [pc, #544]	; (80064c0 <checkDemoModCalisma+0x23c>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	f040 821f 	bne.w	80066e4 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80062a6:	2102      	movs	r1, #2
 80062a8:	4886      	ldr	r0, [pc, #536]	; (80064c4 <checkDemoModCalisma+0x240>)
 80062aa:	f002 fec9 	bl	8009040 <HAL_GPIO_ReadPin>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d11d      	bne.n	80062f0 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 80062b4:	4b84      	ldr	r3, [pc, #528]	; (80064c8 <checkDemoModCalisma+0x244>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	f083 0301 	eor.w	r3, r3, #1
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d016      	beq.n	80062f0 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 80062c2:	4b82      	ldr	r3, [pc, #520]	; (80064cc <checkDemoModCalisma+0x248>)
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	f083 0301 	eor.w	r3, r3, #1
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00f      	beq.n	80062f0 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 80062d0:	4b7f      	ldr	r3, [pc, #508]	; (80064d0 <checkDemoModCalisma+0x24c>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	f083 0301 	eor.w	r3, r3, #1
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d008      	beq.n	80062f0 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80062de:	2201      	movs	r2, #1
 80062e0:	2104      	movs	r1, #4
 80062e2:	487c      	ldr	r0, [pc, #496]	; (80064d4 <checkDemoModCalisma+0x250>)
 80062e4:	f002 fec3 	bl	800906e <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 80062e8:	4b7b      	ldr	r3, [pc, #492]	; (80064d8 <checkDemoModCalisma+0x254>)
 80062ea:	2201      	movs	r2, #1
 80062ec:	701a      	strb	r2, [r3, #0]
 80062ee:	e00e      	b.n	800630e <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80062f0:	2102      	movs	r1, #2
 80062f2:	4874      	ldr	r0, [pc, #464]	; (80064c4 <checkDemoModCalisma+0x240>)
 80062f4:	f002 fea4 	bl	8009040 <HAL_GPIO_ReadPin>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d107      	bne.n	800630e <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80062fe:	2200      	movs	r2, #0
 8006300:	2104      	movs	r1, #4
 8006302:	4874      	ldr	r0, [pc, #464]	; (80064d4 <checkDemoModCalisma+0x250>)
 8006304:	f002 feb3 	bl	800906e <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8006308:	4b73      	ldr	r3, [pc, #460]	; (80064d8 <checkDemoModCalisma+0x254>)
 800630a:	2200      	movs	r2, #0
 800630c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800630e:	4b72      	ldr	r3, [pc, #456]	; (80064d8 <checkDemoModCalisma+0x254>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10b      	bne.n	800632e <checkDemoModCalisma+0xaa>
 8006316:	4b6d      	ldr	r3, [pc, #436]	; (80064cc <checkDemoModCalisma+0x248>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d107      	bne.n	800632e <checkDemoModCalisma+0xaa>
 800631e:	4b6c      	ldr	r3, [pc, #432]	; (80064d0 <checkDemoModCalisma+0x24c>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d103      	bne.n	800632e <checkDemoModCalisma+0xaa>
 8006326:	4b68      	ldr	r3, [pc, #416]	; (80064c8 <checkDemoModCalisma+0x244>)
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00c      	beq.n	8006348 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800632e:	2201      	movs	r2, #1
 8006330:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006334:	4867      	ldr	r0, [pc, #412]	; (80064d4 <checkDemoModCalisma+0x250>)
 8006336:	f002 fe9a 	bl	800906e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800633a:	2201      	movs	r2, #1
 800633c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006340:	4864      	ldr	r0, [pc, #400]	; (80064d4 <checkDemoModCalisma+0x250>)
 8006342:	f002 fe94 	bl	800906e <HAL_GPIO_WritePin>
 8006346:	e00b      	b.n	8006360 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006348:	2200      	movs	r2, #0
 800634a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800634e:	4861      	ldr	r0, [pc, #388]	; (80064d4 <checkDemoModCalisma+0x250>)
 8006350:	f002 fe8d 	bl	800906e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006354:	2200      	movs	r2, #0
 8006356:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800635a:	485e      	ldr	r0, [pc, #376]	; (80064d4 <checkDemoModCalisma+0x250>)
 800635c:	f002 fe87 	bl	800906e <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006360:	2102      	movs	r1, #2
 8006362:	4858      	ldr	r0, [pc, #352]	; (80064c4 <checkDemoModCalisma+0x240>)
 8006364:	f002 fe6c 	bl	8009040 <HAL_GPIO_ReadPin>
 8006368:	4603      	mov	r3, r0
 800636a:	2b01      	cmp	r3, #1
 800636c:	d10d      	bne.n	800638a <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800636e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006372:	4854      	ldr	r0, [pc, #336]	; (80064c4 <checkDemoModCalisma+0x240>)
 8006374:	f002 fe64 	bl	8009040 <HAL_GPIO_ReadPin>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d105      	bne.n	800638a <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 800637e:	4b56      	ldr	r3, [pc, #344]	; (80064d8 <checkDemoModCalisma+0x254>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	f083 0301 	eor.w	r3, r3, #1
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800638a:	2102      	movs	r1, #2
 800638c:	484d      	ldr	r0, [pc, #308]	; (80064c4 <checkDemoModCalisma+0x240>)
 800638e:	f002 fe57 	bl	8009040 <HAL_GPIO_ReadPin>
 8006392:	4603      	mov	r3, r0
 8006394:	2b01      	cmp	r3, #1
 8006396:	d125      	bne.n	80063e4 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006398:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800639c:	4849      	ldr	r0, [pc, #292]	; (80064c4 <checkDemoModCalisma+0x240>)
 800639e:	f002 fe4f 	bl	8009040 <HAL_GPIO_ReadPin>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d11d      	bne.n	80063e4 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 80063a8:	4b4b      	ldr	r3, [pc, #300]	; (80064d8 <checkDemoModCalisma+0x254>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	f083 0301 	eor.w	r3, r3, #1
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d016      	beq.n	80063e4 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80063b6:	4b44      	ldr	r3, [pc, #272]	; (80064c8 <checkDemoModCalisma+0x244>)
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	f083 0301 	eor.w	r3, r3, #1
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00f      	beq.n	80063e4 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80063c4:	4b42      	ldr	r3, [pc, #264]	; (80064d0 <checkDemoModCalisma+0x24c>)
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	f083 0301 	eor.w	r3, r3, #1
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d008      	beq.n	80063e4 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80063d2:	2201      	movs	r2, #1
 80063d4:	2120      	movs	r1, #32
 80063d6:	483b      	ldr	r0, [pc, #236]	; (80064c4 <checkDemoModCalisma+0x240>)
 80063d8:	f002 fe49 	bl	800906e <HAL_GPIO_WritePin>
			demoDevYukari=1;
 80063dc:	4b3b      	ldr	r3, [pc, #236]	; (80064cc <checkDemoModCalisma+0x248>)
 80063de:	2201      	movs	r2, #1
 80063e0:	701a      	strb	r2, [r3, #0]
 80063e2:	e007      	b.n	80063f4 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80063e4:	2200      	movs	r2, #0
 80063e6:	2120      	movs	r1, #32
 80063e8:	4836      	ldr	r0, [pc, #216]	; (80064c4 <checkDemoModCalisma+0x240>)
 80063ea:	f002 fe40 	bl	800906e <HAL_GPIO_WritePin>
			demoDevYukari=0;
 80063ee:	4b37      	ldr	r3, [pc, #220]	; (80064cc <checkDemoModCalisma+0x248>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80063f4:	2102      	movs	r1, #2
 80063f6:	4833      	ldr	r0, [pc, #204]	; (80064c4 <checkDemoModCalisma+0x240>)
 80063f8:	f002 fe22 	bl	8009040 <HAL_GPIO_ReadPin>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d125      	bne.n	800644e <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006402:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006406:	482f      	ldr	r0, [pc, #188]	; (80064c4 <checkDemoModCalisma+0x240>)
 8006408:	f002 fe1a 	bl	8009040 <HAL_GPIO_ReadPin>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d11d      	bne.n	800644e <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8006412:	4b31      	ldr	r3, [pc, #196]	; (80064d8 <checkDemoModCalisma+0x254>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	f083 0301 	eor.w	r3, r3, #1
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b00      	cmp	r3, #0
 800641e:	d016      	beq.n	800644e <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8006420:	4b2a      	ldr	r3, [pc, #168]	; (80064cc <checkDemoModCalisma+0x248>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	f083 0301 	eor.w	r3, r3, #1
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00f      	beq.n	800644e <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800642e:	4b26      	ldr	r3, [pc, #152]	; (80064c8 <checkDemoModCalisma+0x244>)
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	f083 0301 	eor.w	r3, r3, #1
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b00      	cmp	r3, #0
 800643a:	d008      	beq.n	800644e <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800643c:	2201      	movs	r2, #1
 800643e:	2110      	movs	r1, #16
 8006440:	4820      	ldr	r0, [pc, #128]	; (80064c4 <checkDemoModCalisma+0x240>)
 8006442:	f002 fe14 	bl	800906e <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8006446:	4b22      	ldr	r3, [pc, #136]	; (80064d0 <checkDemoModCalisma+0x24c>)
 8006448:	2201      	movs	r2, #1
 800644a:	701a      	strb	r2, [r3, #0]
 800644c:	e007      	b.n	800645e <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800644e:	2200      	movs	r2, #0
 8006450:	2110      	movs	r1, #16
 8006452:	481c      	ldr	r0, [pc, #112]	; (80064c4 <checkDemoModCalisma+0x240>)
 8006454:	f002 fe0b 	bl	800906e <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8006458:	4b1d      	ldr	r3, [pc, #116]	; (80064d0 <checkDemoModCalisma+0x24c>)
 800645a:	2200      	movs	r2, #0
 800645c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800645e:	2104      	movs	r1, #4
 8006460:	4818      	ldr	r0, [pc, #96]	; (80064c4 <checkDemoModCalisma+0x240>)
 8006462:	f002 fded 	bl	8009040 <HAL_GPIO_ReadPin>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d139      	bne.n	80064e0 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 800646c:	4b1a      	ldr	r3, [pc, #104]	; (80064d8 <checkDemoModCalisma+0x254>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	f083 0301 	eor.w	r3, r3, #1
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d032      	beq.n	80064e0 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 800647a:	4b15      	ldr	r3, [pc, #84]	; (80064d0 <checkDemoModCalisma+0x24c>)
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	f083 0301 	eor.w	r3, r3, #1
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b00      	cmp	r3, #0
 8006486:	d02b      	beq.n	80064e0 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006488:	4b10      	ldr	r3, [pc, #64]	; (80064cc <checkDemoModCalisma+0x248>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	f083 0301 	eor.w	r3, r3, #1
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d024      	beq.n	80064e0 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006496:	2201      	movs	r2, #1
 8006498:	2102      	movs	r1, #2
 800649a:	480e      	ldr	r0, [pc, #56]	; (80064d4 <checkDemoModCalisma+0x250>)
 800649c:	f002 fde7 	bl	800906e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80064a0:	2201      	movs	r2, #1
 80064a2:	2101      	movs	r1, #1
 80064a4:	480b      	ldr	r0, [pc, #44]	; (80064d4 <checkDemoModCalisma+0x250>)
 80064a6:	f002 fde2 	bl	800906e <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 80064aa:	4b07      	ldr	r3, [pc, #28]	; (80064c8 <checkDemoModCalisma+0x244>)
 80064ac:	2201      	movs	r2, #1
 80064ae:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80064b0:	4b0a      	ldr	r3, [pc, #40]	; (80064dc <checkDemoModCalisma+0x258>)
 80064b2:	2201      	movs	r2, #1
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	e027      	b.n	8006508 <checkDemoModCalisma+0x284>
 80064b8:	20000212 	.word	0x20000212
 80064bc:	20000246 	.word	0x20000246
 80064c0:	20000211 	.word	0x20000211
 80064c4:	40011000 	.word	0x40011000
 80064c8:	2000024d 	.word	0x2000024d
 80064cc:	2000024e 	.word	0x2000024e
 80064d0:	2000024f 	.word	0x2000024f
 80064d4:	40010c00 	.word	0x40010c00
 80064d8:	2000024c 	.word	0x2000024c
 80064dc:	20000232 	.word	0x20000232
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80064e0:	2104      	movs	r1, #4
 80064e2:	48a0      	ldr	r0, [pc, #640]	; (8006764 <checkDemoModCalisma+0x4e0>)
 80064e4:	f002 fdac 	bl	8009040 <HAL_GPIO_ReadPin>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d10c      	bne.n	8006508 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80064ee:	2200      	movs	r2, #0
 80064f0:	2102      	movs	r1, #2
 80064f2:	489d      	ldr	r0, [pc, #628]	; (8006768 <checkDemoModCalisma+0x4e4>)
 80064f4:	f002 fdbb 	bl	800906e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80064f8:	2200      	movs	r2, #0
 80064fa:	2101      	movs	r1, #1
 80064fc:	489a      	ldr	r0, [pc, #616]	; (8006768 <checkDemoModCalisma+0x4e4>)
 80064fe:	f002 fdb6 	bl	800906e <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8006502:	4b9a      	ldr	r3, [pc, #616]	; (800676c <checkDemoModCalisma+0x4e8>)
 8006504:	2200      	movs	r2, #0
 8006506:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006508:	2104      	movs	r1, #4
 800650a:	4896      	ldr	r0, [pc, #600]	; (8006764 <checkDemoModCalisma+0x4e0>)
 800650c:	f002 fd98 	bl	8009040 <HAL_GPIO_ReadPin>
 8006510:	4603      	mov	r3, r0
 8006512:	2b01      	cmp	r3, #1
 8006514:	d10d      	bne.n	8006532 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006516:	2201      	movs	r2, #1
 8006518:	2180      	movs	r1, #128	; 0x80
 800651a:	4895      	ldr	r0, [pc, #596]	; (8006770 <checkDemoModCalisma+0x4ec>)
 800651c:	f002 fda7 	bl	800906e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006520:	2201      	movs	r2, #1
 8006522:	2120      	movs	r1, #32
 8006524:	4892      	ldr	r0, [pc, #584]	; (8006770 <checkDemoModCalisma+0x4ec>)
 8006526:	f002 fda2 	bl	800906e <HAL_GPIO_WritePin>
			timer3 = millis;
 800652a:	4b92      	ldr	r3, [pc, #584]	; (8006774 <checkDemoModCalisma+0x4f0>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a92      	ldr	r2, [pc, #584]	; (8006778 <checkDemoModCalisma+0x4f4>)
 8006530:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006532:	4b90      	ldr	r3, [pc, #576]	; (8006774 <checkDemoModCalisma+0x4f0>)
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	4b90      	ldr	r3, [pc, #576]	; (8006778 <checkDemoModCalisma+0x4f4>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	1ad3      	subs	r3, r2, r3
 800653c:	2b04      	cmp	r3, #4
 800653e:	d909      	bls.n	8006554 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006540:	2200      	movs	r2, #0
 8006542:	2180      	movs	r1, #128	; 0x80
 8006544:	488a      	ldr	r0, [pc, #552]	; (8006770 <checkDemoModCalisma+0x4ec>)
 8006546:	f002 fd92 	bl	800906e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800654a:	2200      	movs	r2, #0
 800654c:	2120      	movs	r1, #32
 800654e:	4888      	ldr	r0, [pc, #544]	; (8006770 <checkDemoModCalisma+0x4ec>)
 8006550:	f002 fd8d 	bl	800906e <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006554:	2102      	movs	r1, #2
 8006556:	4883      	ldr	r0, [pc, #524]	; (8006764 <checkDemoModCalisma+0x4e0>)
 8006558:	f002 fd72 	bl	8009040 <HAL_GPIO_ReadPin>
 800655c:	4603      	mov	r3, r0
 800655e:	2b01      	cmp	r3, #1
 8006560:	d108      	bne.n	8006574 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006562:	2201      	movs	r2, #1
 8006564:	2140      	movs	r1, #64	; 0x40
 8006566:	4882      	ldr	r0, [pc, #520]	; (8006770 <checkDemoModCalisma+0x4ec>)
 8006568:	f002 fd81 	bl	800906e <HAL_GPIO_WritePin>
			timer3 = millis;
 800656c:	4b81      	ldr	r3, [pc, #516]	; (8006774 <checkDemoModCalisma+0x4f0>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a81      	ldr	r2, [pc, #516]	; (8006778 <checkDemoModCalisma+0x4f4>)
 8006572:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8006574:	4b7f      	ldr	r3, [pc, #508]	; (8006774 <checkDemoModCalisma+0x4f0>)
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	4b7f      	ldr	r3, [pc, #508]	; (8006778 <checkDemoModCalisma+0x4f4>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	1ad3      	subs	r3, r2, r3
 800657e:	2b04      	cmp	r3, #4
 8006580:	d904      	bls.n	800658c <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006582:	2200      	movs	r2, #0
 8006584:	2140      	movs	r1, #64	; 0x40
 8006586:	487a      	ldr	r0, [pc, #488]	; (8006770 <checkDemoModCalisma+0x4ec>)
 8006588:	f002 fd71 	bl	800906e <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 800658c:	4b7b      	ldr	r3, [pc, #492]	; (800677c <checkDemoModCalisma+0x4f8>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d058      	beq.n	8006646 <checkDemoModCalisma+0x3c2>
 8006594:	4b7a      	ldr	r3, [pc, #488]	; (8006780 <checkDemoModCalisma+0x4fc>)
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d054      	beq.n	8006646 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 800659c:	4b79      	ldr	r3, [pc, #484]	; (8006784 <checkDemoModCalisma+0x500>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	3301      	adds	r3, #1
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	4b77      	ldr	r3, [pc, #476]	; (8006784 <checkDemoModCalisma+0x500>)
 80065a6:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 80065a8:	4b76      	ldr	r3, [pc, #472]	; (8006784 <checkDemoModCalisma+0x500>)
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2b09      	cmp	r3, #9
 80065ae:	d908      	bls.n	80065c2 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 80065b0:	4b74      	ldr	r3, [pc, #464]	; (8006784 <checkDemoModCalisma+0x500>)
 80065b2:	2200      	movs	r2, #0
 80065b4:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 80065b6:	4b74      	ldr	r3, [pc, #464]	; (8006788 <checkDemoModCalisma+0x504>)
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	3301      	adds	r3, #1
 80065bc:	b2da      	uxtb	r2, r3
 80065be:	4b72      	ldr	r3, [pc, #456]	; (8006788 <checkDemoModCalisma+0x504>)
 80065c0:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 80065c2:	4b71      	ldr	r3, [pc, #452]	; (8006788 <checkDemoModCalisma+0x504>)
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b09      	cmp	r3, #9
 80065c8:	d908      	bls.n	80065dc <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80065ca:	4b6f      	ldr	r3, [pc, #444]	; (8006788 <checkDemoModCalisma+0x504>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80065d0:	4b6e      	ldr	r3, [pc, #440]	; (800678c <checkDemoModCalisma+0x508>)
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	3301      	adds	r3, #1
 80065d6:	b2da      	uxtb	r2, r3
 80065d8:	4b6c      	ldr	r3, [pc, #432]	; (800678c <checkDemoModCalisma+0x508>)
 80065da:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 80065dc:	4b6b      	ldr	r3, [pc, #428]	; (800678c <checkDemoModCalisma+0x508>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	2b09      	cmp	r3, #9
 80065e2:	d908      	bls.n	80065f6 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 80065e4:	4b69      	ldr	r3, [pc, #420]	; (800678c <checkDemoModCalisma+0x508>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 80065ea:	4b69      	ldr	r3, [pc, #420]	; (8006790 <checkDemoModCalisma+0x50c>)
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	3301      	adds	r3, #1
 80065f0:	b2da      	uxtb	r2, r3
 80065f2:	4b67      	ldr	r3, [pc, #412]	; (8006790 <checkDemoModCalisma+0x50c>)
 80065f4:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 80065f6:	4b66      	ldr	r3, [pc, #408]	; (8006790 <checkDemoModCalisma+0x50c>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	2b09      	cmp	r3, #9
 80065fc:	d908      	bls.n	8006610 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 80065fe:	4b64      	ldr	r3, [pc, #400]	; (8006790 <checkDemoModCalisma+0x50c>)
 8006600:	2200      	movs	r2, #0
 8006602:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8006604:	4b63      	ldr	r3, [pc, #396]	; (8006794 <checkDemoModCalisma+0x510>)
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	3301      	adds	r3, #1
 800660a:	b2da      	uxtb	r2, r3
 800660c:	4b61      	ldr	r3, [pc, #388]	; (8006794 <checkDemoModCalisma+0x510>)
 800660e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8006610:	4b60      	ldr	r3, [pc, #384]	; (8006794 <checkDemoModCalisma+0x510>)
 8006612:	781a      	ldrb	r2, [r3, #0]
 8006614:	4b60      	ldr	r3, [pc, #384]	; (8006798 <checkDemoModCalisma+0x514>)
 8006616:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800661a:	4b5d      	ldr	r3, [pc, #372]	; (8006790 <checkDemoModCalisma+0x50c>)
 800661c:	781a      	ldrb	r2, [r3, #0]
 800661e:	4b5e      	ldr	r3, [pc, #376]	; (8006798 <checkDemoModCalisma+0x514>)
 8006620:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8006622:	4b5a      	ldr	r3, [pc, #360]	; (800678c <checkDemoModCalisma+0x508>)
 8006624:	781a      	ldrb	r2, [r3, #0]
 8006626:	4b5c      	ldr	r3, [pc, #368]	; (8006798 <checkDemoModCalisma+0x514>)
 8006628:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800662a:	4b57      	ldr	r3, [pc, #348]	; (8006788 <checkDemoModCalisma+0x504>)
 800662c:	781a      	ldrb	r2, [r3, #0]
 800662e:	4b5a      	ldr	r3, [pc, #360]	; (8006798 <checkDemoModCalisma+0x514>)
 8006630:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8006632:	4b54      	ldr	r3, [pc, #336]	; (8006784 <checkDemoModCalisma+0x500>)
 8006634:	781a      	ldrb	r2, [r3, #0]
 8006636:	4b58      	ldr	r3, [pc, #352]	; (8006798 <checkDemoModCalisma+0x514>)
 8006638:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 800663a:	4b58      	ldr	r3, [pc, #352]	; (800679c <checkDemoModCalisma+0x518>)
 800663c:	2201      	movs	r2, #1
 800663e:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8006640:	4b4f      	ldr	r3, [pc, #316]	; (8006780 <checkDemoModCalisma+0x4fc>)
 8006642:	2200      	movs	r2, #0
 8006644:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8006646:	4b56      	ldr	r3, [pc, #344]	; (80067a0 <checkDemoModCalisma+0x51c>)
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f040 8087 	bne.w	800675e <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8006650:	4a54      	ldr	r2, [pc, #336]	; (80067a4 <checkDemoModCalisma+0x520>)
 8006652:	2101      	movs	r1, #1
 8006654:	2002      	movs	r0, #2
 8006656:	f001 f9cd 	bl	80079f4 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 800665a:	4a53      	ldr	r2, [pc, #332]	; (80067a8 <checkDemoModCalisma+0x524>)
 800665c:	2101      	movs	r1, #1
 800665e:	2001      	movs	r0, #1
 8006660:	f001 f9c8 	bl	80079f4 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8006664:	4b4b      	ldr	r3, [pc, #300]	; (8006794 <checkDemoModCalisma+0x510>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	220a      	movs	r2, #10
 800666a:	4950      	ldr	r1, [pc, #320]	; (80067ac <checkDemoModCalisma+0x528>)
 800666c:	4618      	mov	r0, r3
 800666e:	f005 fd13 	bl	800c098 <itoa>
			lcd_print(2,12,snum);
 8006672:	4a4e      	ldr	r2, [pc, #312]	; (80067ac <checkDemoModCalisma+0x528>)
 8006674:	210c      	movs	r1, #12
 8006676:	2002      	movs	r0, #2
 8006678:	f001 f9bc 	bl	80079f4 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 800667c:	4b44      	ldr	r3, [pc, #272]	; (8006790 <checkDemoModCalisma+0x50c>)
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	220a      	movs	r2, #10
 8006682:	494a      	ldr	r1, [pc, #296]	; (80067ac <checkDemoModCalisma+0x528>)
 8006684:	4618      	mov	r0, r3
 8006686:	f005 fd07 	bl	800c098 <itoa>
			lcd_print(2,13,snum);
 800668a:	4a48      	ldr	r2, [pc, #288]	; (80067ac <checkDemoModCalisma+0x528>)
 800668c:	210d      	movs	r1, #13
 800668e:	2002      	movs	r0, #2
 8006690:	f001 f9b0 	bl	80079f4 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8006694:	4b3d      	ldr	r3, [pc, #244]	; (800678c <checkDemoModCalisma+0x508>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	220a      	movs	r2, #10
 800669a:	4944      	ldr	r1, [pc, #272]	; (80067ac <checkDemoModCalisma+0x528>)
 800669c:	4618      	mov	r0, r3
 800669e:	f005 fcfb 	bl	800c098 <itoa>
			lcd_print(2,14,snum);
 80066a2:	4a42      	ldr	r2, [pc, #264]	; (80067ac <checkDemoModCalisma+0x528>)
 80066a4:	210e      	movs	r1, #14
 80066a6:	2002      	movs	r0, #2
 80066a8:	f001 f9a4 	bl	80079f4 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 80066ac:	4b36      	ldr	r3, [pc, #216]	; (8006788 <checkDemoModCalisma+0x504>)
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	220a      	movs	r2, #10
 80066b2:	493e      	ldr	r1, [pc, #248]	; (80067ac <checkDemoModCalisma+0x528>)
 80066b4:	4618      	mov	r0, r3
 80066b6:	f005 fcef 	bl	800c098 <itoa>
			lcd_print(2,15,snum);
 80066ba:	4a3c      	ldr	r2, [pc, #240]	; (80067ac <checkDemoModCalisma+0x528>)
 80066bc:	210f      	movs	r1, #15
 80066be:	2002      	movs	r0, #2
 80066c0:	f001 f998 	bl	80079f4 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 80066c4:	4b2f      	ldr	r3, [pc, #188]	; (8006784 <checkDemoModCalisma+0x500>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	220a      	movs	r2, #10
 80066ca:	4938      	ldr	r1, [pc, #224]	; (80067ac <checkDemoModCalisma+0x528>)
 80066cc:	4618      	mov	r0, r3
 80066ce:	f005 fce3 	bl	800c098 <itoa>
			lcd_print(2,16,snum);
 80066d2:	4a36      	ldr	r2, [pc, #216]	; (80067ac <checkDemoModCalisma+0x528>)
 80066d4:	2110      	movs	r1, #16
 80066d6:	2002      	movs	r0, #2
 80066d8:	f001 f98c 	bl	80079f4 <lcd_print>
			mesajYazildi=1;
 80066dc:	4b34      	ldr	r3, [pc, #208]	; (80067b0 <checkDemoModCalisma+0x52c>)
 80066de:	2201      	movs	r2, #1
 80066e0:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 80066e2:	e03c      	b.n	800675e <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 80066e4:	4b33      	ldr	r3, [pc, #204]	; (80067b4 <checkDemoModCalisma+0x530>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d003      	beq.n	80066f4 <checkDemoModCalisma+0x470>
 80066ec:	4b2c      	ldr	r3, [pc, #176]	; (80067a0 <checkDemoModCalisma+0x51c>)
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d134      	bne.n	800675e <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80066f4:	2200      	movs	r2, #0
 80066f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066fa:	481b      	ldr	r0, [pc, #108]	; (8006768 <checkDemoModCalisma+0x4e4>)
 80066fc:	f002 fcb7 	bl	800906e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006700:	2200      	movs	r2, #0
 8006702:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006706:	4818      	ldr	r0, [pc, #96]	; (8006768 <checkDemoModCalisma+0x4e4>)
 8006708:	f002 fcb1 	bl	800906e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800670c:	2200      	movs	r2, #0
 800670e:	2104      	movs	r1, #4
 8006710:	4815      	ldr	r0, [pc, #84]	; (8006768 <checkDemoModCalisma+0x4e4>)
 8006712:	f002 fcac 	bl	800906e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006716:	2200      	movs	r2, #0
 8006718:	2102      	movs	r1, #2
 800671a:	4813      	ldr	r0, [pc, #76]	; (8006768 <checkDemoModCalisma+0x4e4>)
 800671c:	f002 fca7 	bl	800906e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006720:	2200      	movs	r2, #0
 8006722:	2101      	movs	r1, #1
 8006724:	4810      	ldr	r0, [pc, #64]	; (8006768 <checkDemoModCalisma+0x4e4>)
 8006726:	f002 fca2 	bl	800906e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800672a:	2200      	movs	r2, #0
 800672c:	2120      	movs	r1, #32
 800672e:	480d      	ldr	r0, [pc, #52]	; (8006764 <checkDemoModCalisma+0x4e0>)
 8006730:	f002 fc9d 	bl	800906e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006734:	2200      	movs	r2, #0
 8006736:	2110      	movs	r1, #16
 8006738:	480a      	ldr	r0, [pc, #40]	; (8006764 <checkDemoModCalisma+0x4e0>)
 800673a:	f002 fc98 	bl	800906e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800673e:	2200      	movs	r2, #0
 8006740:	2180      	movs	r1, #128	; 0x80
 8006742:	480b      	ldr	r0, [pc, #44]	; (8006770 <checkDemoModCalisma+0x4ec>)
 8006744:	f002 fc93 	bl	800906e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006748:	2200      	movs	r2, #0
 800674a:	2140      	movs	r1, #64	; 0x40
 800674c:	4808      	ldr	r0, [pc, #32]	; (8006770 <checkDemoModCalisma+0x4ec>)
 800674e:	f002 fc8e 	bl	800906e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006752:	2200      	movs	r2, #0
 8006754:	2120      	movs	r1, #32
 8006756:	4806      	ldr	r0, [pc, #24]	; (8006770 <checkDemoModCalisma+0x4ec>)
 8006758:	f002 fc89 	bl	800906e <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 800675c:	e7ff      	b.n	800675e <checkDemoModCalisma+0x4da>
 800675e:	bf00      	nop
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	40011000 	.word	0x40011000
 8006768:	40010c00 	.word	0x40010c00
 800676c:	2000024d 	.word	0x2000024d
 8006770:	40010800 	.word	0x40010800
 8006774:	200001d0 	.word	0x200001d0
 8006778:	200001e0 	.word	0x200001e0
 800677c:	2000024c 	.word	0x2000024c
 8006780:	20000232 	.word	0x20000232
 8006784:	200001f1 	.word	0x200001f1
 8006788:	200001f2 	.word	0x200001f2
 800678c:	20000000 	.word	0x20000000
 8006790:	20000001 	.word	0x20000001
 8006794:	200001f3 	.word	0x200001f3
 8006798:	20000120 	.word	0x20000120
 800679c:	20000220 	.word	0x20000220
 80067a0:	20000211 	.word	0x20000211
 80067a4:	0800d8c0 	.word	0x0800d8c0
 80067a8:	0800d8cc 	.word	0x0800d8cc
 80067ac:	20000190 	.word	0x20000190
 80067b0:	20000228 	.word	0x20000228
 80067b4:	20000212 	.word	0x20000212

080067b8 <mainLoop>:

void mainLoop() {
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80067be:	f7fe f923 	bl	8004a08 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80067c2:	2101      	movs	r1, #1
 80067c4:	48ac      	ldr	r0, [pc, #688]	; (8006a78 <mainLoop+0x2c0>)
 80067c6:	f002 fc3b 	bl	8009040 <HAL_GPIO_ReadPin>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d136      	bne.n	800683e <mainLoop+0x86>
 80067d0:	2108      	movs	r1, #8
 80067d2:	48aa      	ldr	r0, [pc, #680]	; (8006a7c <mainLoop+0x2c4>)
 80067d4:	f002 fc34 	bl	8009040 <HAL_GPIO_ReadPin>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d12f      	bne.n	800683e <mainLoop+0x86>
 80067de:	2102      	movs	r1, #2
 80067e0:	48a5      	ldr	r0, [pc, #660]	; (8006a78 <mainLoop+0x2c0>)
 80067e2:	f002 fc2d 	bl	8009040 <HAL_GPIO_ReadPin>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d128      	bne.n	800683e <mainLoop+0x86>
 80067ec:	2104      	movs	r1, #4
 80067ee:	48a2      	ldr	r0, [pc, #648]	; (8006a78 <mainLoop+0x2c0>)
 80067f0:	f002 fc26 	bl	8009040 <HAL_GPIO_ReadPin>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d121      	bne.n	800683e <mainLoop+0x86>
 80067fa:	2108      	movs	r1, #8
 80067fc:	489e      	ldr	r0, [pc, #632]	; (8006a78 <mainLoop+0x2c0>)
 80067fe:	f002 fc1f 	bl	8009040 <HAL_GPIO_ReadPin>
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d11a      	bne.n	800683e <mainLoop+0x86>
 8006808:	2180      	movs	r1, #128	; 0x80
 800680a:	489c      	ldr	r0, [pc, #624]	; (8006a7c <mainLoop+0x2c4>)
 800680c:	f002 fc18 	bl	8009040 <HAL_GPIO_ReadPin>
 8006810:	4603      	mov	r3, r0
 8006812:	2b01      	cmp	r3, #1
 8006814:	d113      	bne.n	800683e <mainLoop+0x86>
 8006816:	f44f 7180 	mov.w	r1, #256	; 0x100
 800681a:	4898      	ldr	r0, [pc, #608]	; (8006a7c <mainLoop+0x2c4>)
 800681c:	f002 fc10 	bl	8009040 <HAL_GPIO_ReadPin>
 8006820:	4603      	mov	r3, r0
 8006822:	2b01      	cmp	r3, #1
 8006824:	d10b      	bne.n	800683e <mainLoop+0x86>
 8006826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800682a:	4894      	ldr	r0, [pc, #592]	; (8006a7c <mainLoop+0x2c4>)
 800682c:	f002 fc08 	bl	8009040 <HAL_GPIO_ReadPin>
 8006830:	4603      	mov	r3, r0
 8006832:	2b01      	cmp	r3, #1
 8006834:	d103      	bne.n	800683e <mainLoop+0x86>
			butonKontrol=0;
 8006836:	4b92      	ldr	r3, [pc, #584]	; (8006a80 <mainLoop+0x2c8>)
 8006838:	2200      	movs	r2, #0
 800683a:	701a      	strb	r2, [r3, #0]
 800683c:	e003      	b.n	8006846 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 800683e:	4b91      	ldr	r3, [pc, #580]	; (8006a84 <mainLoop+0x2cc>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a91      	ldr	r2, [pc, #580]	; (8006a88 <mainLoop+0x2d0>)
 8006844:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006846:	4b91      	ldr	r3, [pc, #580]	; (8006a8c <mainLoop+0x2d4>)
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d03a      	beq.n	80068c4 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800684e:	bf00      	nop
 8006850:	488f      	ldr	r0, [pc, #572]	; (8006a90 <mainLoop+0x2d8>)
 8006852:	f003 fa1e 	bl	8009c92 <HAL_I2C_GetError>
 8006856:	4603      	mov	r3, r0
 8006858:	2b04      	cmp	r3, #4
 800685a:	d0f9      	beq.n	8006850 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800685c:	bf00      	nop
 800685e:	488c      	ldr	r0, [pc, #560]	; (8006a90 <mainLoop+0x2d8>)
 8006860:	f003 fa0a 	bl	8009c78 <HAL_I2C_GetState>
 8006864:	4603      	mov	r3, r0
 8006866:	2b20      	cmp	r3, #32
 8006868:	d1f9      	bne.n	800685e <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800686a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800686e:	9302      	str	r3, [sp, #8]
 8006870:	236e      	movs	r3, #110	; 0x6e
 8006872:	9301      	str	r3, [sp, #4]
 8006874:	4b87      	ldr	r3, [pc, #540]	; (8006a94 <mainLoop+0x2dc>)
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	236e      	movs	r3, #110	; 0x6e
 800687a:	2200      	movs	r2, #0
 800687c:	21a0      	movs	r1, #160	; 0xa0
 800687e:	4884      	ldr	r0, [pc, #528]	; (8006a90 <mainLoop+0x2d8>)
 8006880:	f002 fe98 	bl	80095b4 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8006884:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006888:	f001 fe0a 	bl	80084a0 <HAL_Delay>

		  hafizaYaz=0;
 800688c:	4b7f      	ldr	r3, [pc, #508]	; (8006a8c <mainLoop+0x2d4>)
 800688e:	2200      	movs	r2, #0
 8006890:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006892:	4b81      	ldr	r3, [pc, #516]	; (8006a98 <mainLoop+0x2e0>)
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d105      	bne.n	80068a6 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 800689a:	4a80      	ldr	r2, [pc, #512]	; (8006a9c <mainLoop+0x2e4>)
 800689c:	2101      	movs	r1, #1
 800689e:	2002      	movs	r0, #2
 80068a0:	f001 f8a8 	bl	80079f4 <lcd_print>
 80068a4:	e008      	b.n	80068b8 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 80068a6:	4b7c      	ldr	r3, [pc, #496]	; (8006a98 <mainLoop+0x2e0>)
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d104      	bne.n	80068b8 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 80068ae:	4a7c      	ldr	r2, [pc, #496]	; (8006aa0 <mainLoop+0x2e8>)
 80068b0:	2101      	movs	r1, #1
 80068b2:	2002      	movs	r0, #2
 80068b4:	f001 f89e 	bl	80079f4 <lcd_print>
		  }

		  HAL_Delay(1000);
 80068b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80068bc:	f001 fdf0 	bl	80084a0 <HAL_Delay>
		  lcd_clear();
 80068c0:	f001 f8c4 	bl	8007a4c <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 80068c4:	4b77      	ldr	r3, [pc, #476]	; (8006aa4 <mainLoop+0x2ec>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	f083 0301 	eor.w	r3, r3, #1
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d06d      	beq.n	80069ae <mainLoop+0x1f6>
 80068d2:	486f      	ldr	r0, [pc, #444]	; (8006a90 <mainLoop+0x2d8>)
 80068d4:	f003 f9d0 	bl	8009c78 <HAL_I2C_GetState>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b20      	cmp	r3, #32
 80068dc:	d167      	bne.n	80069ae <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 80068de:	4b72      	ldr	r3, [pc, #456]	; (8006aa8 <mainLoop+0x2f0>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	f083 0301 	eor.w	r3, r3, #1
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d044      	beq.n	8006976 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 80068ec:	4a6f      	ldr	r2, [pc, #444]	; (8006aac <mainLoop+0x2f4>)
 80068ee:	2101      	movs	r1, #1
 80068f0:	2001      	movs	r0, #1
 80068f2:	f001 f87f 	bl	80079f4 <lcd_print>
			  if(dilSecim==0) {
 80068f6:	4b68      	ldr	r3, [pc, #416]	; (8006a98 <mainLoop+0x2e0>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d105      	bne.n	800690a <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 80068fe:	4a6c      	ldr	r2, [pc, #432]	; (8006ab0 <mainLoop+0x2f8>)
 8006900:	2101      	movs	r1, #1
 8006902:	2002      	movs	r0, #2
 8006904:	f001 f876 	bl	80079f4 <lcd_print>
 8006908:	e008      	b.n	800691c <mainLoop+0x164>
			  } else if(dilSecim==1) {
 800690a:	4b63      	ldr	r3, [pc, #396]	; (8006a98 <mainLoop+0x2e0>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d104      	bne.n	800691c <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 8006912:	4a68      	ldr	r2, [pc, #416]	; (8006ab4 <mainLoop+0x2fc>)
 8006914:	2101      	movs	r1, #1
 8006916:	2002      	movs	r0, #2
 8006918:	f001 f86c 	bl	80079f4 <lcd_print>
			  }
			  HAL_Delay(1000);
 800691c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006920:	f001 fdbe 	bl	80084a0 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006924:	bf00      	nop
 8006926:	485a      	ldr	r0, [pc, #360]	; (8006a90 <mainLoop+0x2d8>)
 8006928:	f003 f9b3 	bl	8009c92 <HAL_I2C_GetError>
 800692c:	4603      	mov	r3, r0
 800692e:	2b04      	cmp	r3, #4
 8006930:	d0f9      	beq.n	8006926 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006932:	e003      	b.n	800693c <mainLoop+0x184>
				  HAL_Delay(1000);
 8006934:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006938:	f001 fdb2 	bl	80084a0 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800693c:	4854      	ldr	r0, [pc, #336]	; (8006a90 <mainLoop+0x2d8>)
 800693e:	f003 f99b 	bl	8009c78 <HAL_I2C_GetState>
 8006942:	4603      	mov	r3, r0
 8006944:	2b20      	cmp	r3, #32
 8006946:	d1f5      	bne.n	8006934 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006948:	4b53      	ldr	r3, [pc, #332]	; (8006a98 <mainLoop+0x2e0>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d105      	bne.n	800695c <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006950:	4a59      	ldr	r2, [pc, #356]	; (8006ab8 <mainLoop+0x300>)
 8006952:	2101      	movs	r1, #1
 8006954:	2002      	movs	r0, #2
 8006956:	f001 f84d 	bl	80079f4 <lcd_print>
 800695a:	e008      	b.n	800696e <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 800695c:	4b4e      	ldr	r3, [pc, #312]	; (8006a98 <mainLoop+0x2e0>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d104      	bne.n	800696e <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006964:	4a55      	ldr	r2, [pc, #340]	; (8006abc <mainLoop+0x304>)
 8006966:	2101      	movs	r1, #1
 8006968:	2002      	movs	r0, #2
 800696a:	f001 f843 	bl	80079f4 <lcd_print>
			  }

			  ilkOkuma=1;
 800696e:	4b4e      	ldr	r3, [pc, #312]	; (8006aa8 <mainLoop+0x2f0>)
 8006970:	2201      	movs	r2, #1
 8006972:	701a      	strb	r2, [r3, #0]
 8006974:	e014      	b.n	80069a0 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006976:	4b48      	ldr	r3, [pc, #288]	; (8006a98 <mainLoop+0x2e0>)
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d105      	bne.n	800698a <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 800697e:	4a50      	ldr	r2, [pc, #320]	; (8006ac0 <mainLoop+0x308>)
 8006980:	2101      	movs	r1, #1
 8006982:	2002      	movs	r0, #2
 8006984:	f001 f836 	bl	80079f4 <lcd_print>
 8006988:	e008      	b.n	800699c <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 800698a:	4b43      	ldr	r3, [pc, #268]	; (8006a98 <mainLoop+0x2e0>)
 800698c:	781b      	ldrb	r3, [r3, #0]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d104      	bne.n	800699c <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006992:	4a4c      	ldr	r2, [pc, #304]	; (8006ac4 <mainLoop+0x30c>)
 8006994:	2101      	movs	r1, #1
 8006996:	2002      	movs	r0, #2
 8006998:	f001 f82c 	bl	80079f4 <lcd_print>
			  }
			  lcd_clear();
 800699c:	f001 f856 	bl	8007a4c <lcd_clear>
		  }

		  lcd_clear();
 80069a0:	f001 f854 	bl	8007a4c <lcd_clear>

		  eepromKontrol();
 80069a4:	f7f9 fc46 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 80069a8:	4b3e      	ldr	r3, [pc, #248]	; (8006aa4 <mainLoop+0x2ec>)
 80069aa:	2201      	movs	r2, #1
 80069ac:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80069ae:	4b46      	ldr	r3, [pc, #280]	; (8006ac8 <mainLoop+0x310>)
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d11c      	bne.n	80069f0 <mainLoop+0x238>
 80069b6:	4b45      	ldr	r3, [pc, #276]	; (8006acc <mainLoop+0x314>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	f083 0301 	eor.w	r3, r3, #1
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d015      	beq.n	80069f0 <mainLoop+0x238>
 80069c4:	4b42      	ldr	r3, [pc, #264]	; (8006ad0 <mainLoop+0x318>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d111      	bne.n	80069f0 <mainLoop+0x238>
			lcd_clear();
 80069cc:	f001 f83e 	bl	8007a4c <lcd_clear>
			HAL_Delay(10);
 80069d0:	200a      	movs	r0, #10
 80069d2:	f001 fd65 	bl	80084a0 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 80069d6:	4a3f      	ldr	r2, [pc, #252]	; (8006ad4 <mainLoop+0x31c>)
 80069d8:	2101      	movs	r1, #1
 80069da:	2001      	movs	r0, #1
 80069dc:	f001 f80a 	bl	80079f4 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 80069e0:	4a3d      	ldr	r2, [pc, #244]	; (8006ad8 <mainLoop+0x320>)
 80069e2:	2101      	movs	r1, #1
 80069e4:	2002      	movs	r0, #2
 80069e6:	f001 f805 	bl	80079f4 <lcd_print>
			mesajYazildi=1;
 80069ea:	4b38      	ldr	r3, [pc, #224]	; (8006acc <mainLoop+0x314>)
 80069ec:	2201      	movs	r2, #1
 80069ee:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 80069f0:	4b35      	ldr	r3, [pc, #212]	; (8006ac8 <mainLoop+0x310>)
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d112      	bne.n	8006a1e <mainLoop+0x266>
 80069f8:	2102      	movs	r1, #2
 80069fa:	481f      	ldr	r0, [pc, #124]	; (8006a78 <mainLoop+0x2c0>)
 80069fc:	f002 fb20 	bl	8009040 <HAL_GPIO_ReadPin>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d10b      	bne.n	8006a1e <mainLoop+0x266>
 8006a06:	2104      	movs	r1, #4
 8006a08:	481b      	ldr	r0, [pc, #108]	; (8006a78 <mainLoop+0x2c0>)
 8006a0a:	f002 fb19 	bl	8009040 <HAL_GPIO_ReadPin>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b01      	cmp	r3, #1
 8006a12:	d104      	bne.n	8006a1e <mainLoop+0x266>
			menuGiris=1;
 8006a14:	4b2c      	ldr	r3, [pc, #176]	; (8006ac8 <mainLoop+0x310>)
 8006a16:	2201      	movs	r2, #1
 8006a18:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006a1a:	f001 f817 	bl	8007a4c <lcd_clear>
		}

		if(menuGiris==1) {
 8006a1e:	4b2a      	ldr	r3, [pc, #168]	; (8006ac8 <mainLoop+0x310>)
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d101      	bne.n	8006a2a <mainLoop+0x272>
			menu();
 8006a26:	f7fa fb87 	bl	8001138 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006a2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a2e:	4813      	ldr	r0, [pc, #76]	; (8006a7c <mainLoop+0x2c4>)
 8006a30:	f002 fb35 	bl	800909e <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006a34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a38:	4828      	ldr	r0, [pc, #160]	; (8006adc <mainLoop+0x324>)
 8006a3a:	f002 fb01 	bl	8009040 <HAL_GPIO_ReadPin>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10a      	bne.n	8006a5a <mainLoop+0x2a2>
 8006a44:	4b26      	ldr	r3, [pc, #152]	; (8006ae0 <mainLoop+0x328>)
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	f083 0301 	eor.w	r3, r3, #1
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <mainLoop+0x2a2>
			stopVar=1;
 8006a52:	4b24      	ldr	r3, [pc, #144]	; (8006ae4 <mainLoop+0x32c>)
 8006a54:	2201      	movs	r2, #1
 8006a56:	701a      	strb	r2, [r3, #0]
 8006a58:	e002      	b.n	8006a60 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006a5a:	4b22      	ldr	r3, [pc, #136]	; (8006ae4 <mainLoop+0x32c>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006a60:	f7fd ffe8 	bl	8004a34 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006a64:	f7fe f81a 	bl	8004a9c <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006a68:	f7fe f85e 	bl	8004b28 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006a6c:	f7fe f8ae 	bl	8004bcc <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006a70:	f7ff fc08 	bl	8006284 <checkDemoModCalisma>
		checkLCDBacklight();
 8006a74:	e6a3      	b.n	80067be <mainLoop+0x6>
 8006a76:	bf00      	nop
 8006a78:	40010800 	.word	0x40010800
 8006a7c:	40011000 	.word	0x40011000
 8006a80:	20000223 	.word	0x20000223
 8006a84:	200001d0 	.word	0x200001d0
 8006a88:	200001ec 	.word	0x200001ec
 8006a8c:	20000220 	.word	0x20000220
 8006a90:	20000284 	.word	0x20000284
 8006a94:	20000120 	.word	0x20000120
 8006a98:	20000215 	.word	0x20000215
 8006a9c:	0800d8e0 	.word	0x0800d8e0
 8006aa0:	0800d8f4 	.word	0x0800d8f4
 8006aa4:	20000221 	.word	0x20000221
 8006aa8:	20000222 	.word	0x20000222
 8006aac:	0800d908 	.word	0x0800d908
 8006ab0:	0800d91c 	.word	0x0800d91c
 8006ab4:	0800d930 	.word	0x0800d930
 8006ab8:	0800d944 	.word	0x0800d944
 8006abc:	0800d958 	.word	0x0800d958
 8006ac0:	0800d96c 	.word	0x0800d96c
 8006ac4:	0800d980 	.word	0x0800d980
 8006ac8:	20000211 	.word	0x20000211
 8006acc:	20000228 	.word	0x20000228
 8006ad0:	20000212 	.word	0x20000212
 8006ad4:	0800d994 	.word	0x0800d994
 8006ad8:	0800d9a8 	.word	0x0800d9a8
 8006adc:	40010c00 	.word	0x40010c00
 8006ae0:	20000249 	.word	0x20000249
 8006ae4:	20000246 	.word	0x20000246

08006ae8 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "IoTMenu.h"

void takeMachineID() {
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b088      	sub	sp, #32
 8006aec:	af04      	add	r7, sp, #16
	mainSection:
	lcd_cursor(1);
 8006aee:	2001      	movs	r0, #1
 8006af0:	f000 ffde 	bl	8007ab0 <lcd_cursor>

    int cursorPosition = 3;
 8006af4:	2303      	movs	r3, #3
 8006af6:	60fb      	str	r3, [r7, #12]
    int machineIDLoc = 0;
 8006af8:	2300      	movs	r3, #0
 8006afa:	60bb      	str	r3, [r7, #8]
    int writeLoc = 5;
 8006afc:	2305      	movs	r3, #5
 8006afe:	607b      	str	r3, [r7, #4]

    memset(machineID, 0, sizeof(machineID));
 8006b00:	220c      	movs	r2, #12
 8006b02:	2100      	movs	r1, #0
 8006b04:	4899      	ldr	r0, [pc, #612]	; (8006d6c <takeMachineID+0x284>)
 8006b06:	f005 fc22 	bl	800c34e <memset>
    HAL_Delay(100);
 8006b0a:	2064      	movs	r0, #100	; 0x64
 8006b0c:	f001 fcc8 	bl	80084a0 <HAL_Delay>

    printTemplate(1, 0);
 8006b10:	2100      	movs	r1, #0
 8006b12:	2001      	movs	r0, #1
 8006b14:	f7fa f8aa 	bl	8000c6c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006b18:	2108      	movs	r1, #8
 8006b1a:	4895      	ldr	r0, [pc, #596]	; (8006d70 <takeMachineID+0x288>)
 8006b1c:	f002 fa90 	bl	8009040 <HAL_GPIO_ReadPin>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d137      	bne.n	8006b96 <takeMachineID+0xae>
        	lcd_cursor(0);
 8006b26:	2000      	movs	r0, #0
 8006b28:	f000 ffc2 	bl	8007ab0 <lcd_cursor>

        	if(machineID[11] == '\0') {
 8006b2c:	4b8f      	ldr	r3, [pc, #572]	; (8006d6c <takeMachineID+0x284>)
 8006b2e:	7adb      	ldrb	r3, [r3, #11]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d110      	bne.n	8006b56 <takeMachineID+0x6e>
        		lcd_clear();
 8006b34:	f000 ff8a 	bl	8007a4c <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006b38:	4a8e      	ldr	r2, [pc, #568]	; (8006d74 <takeMachineID+0x28c>)
 8006b3a:	2101      	movs	r1, #1
 8006b3c:	2001      	movs	r0, #1
 8006b3e:	f000 ff59 	bl	80079f4 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006b42:	4a8d      	ldr	r2, [pc, #564]	; (8006d78 <takeMachineID+0x290>)
 8006b44:	2101      	movs	r1, #1
 8006b46:	2002      	movs	r0, #2
 8006b48:	f000 ff54 	bl	80079f4 <lcd_print>
        		HAL_Delay(1200);
 8006b4c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006b50:	f001 fca6 	bl	80084a0 <HAL_Delay>
        		goto mainSection;
 8006b54:	e7cb      	b.n	8006aee <takeMachineID+0x6>
        	}

        	memcpy(&eepromData[idStartPos], machineID, 12);
 8006b56:	4b89      	ldr	r3, [pc, #548]	; (8006d7c <takeMachineID+0x294>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a89      	ldr	r2, [pc, #548]	; (8006d80 <takeMachineID+0x298>)
 8006b5c:	4413      	add	r3, r2
 8006b5e:	4a83      	ldr	r2, [pc, #524]	; (8006d6c <takeMachineID+0x284>)
 8006b60:	6810      	ldr	r0, [r2, #0]
 8006b62:	6851      	ldr	r1, [r2, #4]
 8006b64:	6892      	ldr	r2, [r2, #8]
 8006b66:	6018      	str	r0, [r3, #0]
 8006b68:	6059      	str	r1, [r3, #4]
 8006b6a:	609a      	str	r2, [r3, #8]
        	HAL_Delay(200);
 8006b6c:	20c8      	movs	r0, #200	; 0xc8
 8006b6e:	f001 fc97 	bl	80084a0 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006b72:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006b76:	9302      	str	r3, [sp, #8]
 8006b78:	236e      	movs	r3, #110	; 0x6e
 8006b7a:	9301      	str	r3, [sp, #4]
 8006b7c:	4b80      	ldr	r3, [pc, #512]	; (8006d80 <takeMachineID+0x298>)
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	236e      	movs	r3, #110	; 0x6e
 8006b82:	2200      	movs	r2, #0
 8006b84:	21a0      	movs	r1, #160	; 0xa0
 8006b86:	487f      	ldr	r0, [pc, #508]	; (8006d84 <takeMachineID+0x29c>)
 8006b88:	f002 fd14 	bl	80095b4 <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8006b8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b90:	f001 fc86 	bl	80084a0 <HAL_Delay>

            break;
 8006b94:	e0e5      	b.n	8006d62 <takeMachineID+0x27a>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006b96:	2101      	movs	r1, #1
 8006b98:	4875      	ldr	r0, [pc, #468]	; (8006d70 <takeMachineID+0x288>)
 8006b9a:	f002 fa51 	bl	8009040 <HAL_GPIO_ReadPin>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d112      	bne.n	8006bca <takeMachineID+0xe2>
        	if(cursorPosition == 7) {
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b07      	cmp	r3, #7
 8006ba8:	d102      	bne.n	8006bb0 <takeMachineID+0xc8>
        		cursorPosition = 10;
 8006baa:	230a      	movs	r3, #10
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	e008      	b.n	8006bc2 <takeMachineID+0xda>
        	} else if (cursorPosition == 14) {
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b0e      	cmp	r3, #14
 8006bb4:	d102      	bne.n	8006bbc <takeMachineID+0xd4>
                cursorPosition = 3;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	60fb      	str	r3, [r7, #12]
 8006bba:	e002      	b.n	8006bc2 <takeMachineID+0xda>
            } else {
            	cursorPosition++;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	60fb      	str	r3, [r7, #12]
            }

        	HAL_Delay(350);
 8006bc2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006bc6:	f001 fc6b 	bl	80084a0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006bca:	2108      	movs	r1, #8
 8006bcc:	486e      	ldr	r0, [pc, #440]	; (8006d88 <takeMachineID+0x2a0>)
 8006bce:	f002 fa37 	bl	8009040 <HAL_GPIO_ReadPin>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d112      	bne.n	8006bfe <takeMachineID+0x116>
            if (cursorPosition == 3) {
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	d102      	bne.n	8006be4 <takeMachineID+0xfc>
                cursorPosition = 14;
 8006bde:	230e      	movs	r3, #14
 8006be0:	60fb      	str	r3, [r7, #12]
 8006be2:	e008      	b.n	8006bf6 <takeMachineID+0x10e>
            } else if(cursorPosition == 10) {
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2b0a      	cmp	r3, #10
 8006be8:	d102      	bne.n	8006bf0 <takeMachineID+0x108>
            	cursorPosition = 7;
 8006bea:	2307      	movs	r3, #7
 8006bec:	60fb      	str	r3, [r7, #12]
 8006bee:	e002      	b.n	8006bf6 <takeMachineID+0x10e>
            } else {
            	cursorPosition--;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3b01      	subs	r3, #1
 8006bf4:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(350);
 8006bf6:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006bfa:	f001 fc51 	bl	80084a0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006bfe:	2102      	movs	r1, #2
 8006c00:	485b      	ldr	r0, [pc, #364]	; (8006d70 <takeMachineID+0x288>)
 8006c02:	f002 fa1d 	bl	8009040 <HAL_GPIO_ReadPin>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d16c      	bne.n	8006ce6 <takeMachineID+0x1fe>
        	if(cursorPosition == 3) {
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	d105      	bne.n	8006c1e <takeMachineID+0x136>
        		machineID[machineIDLoc] = '0';
 8006c12:	4a56      	ldr	r2, [pc, #344]	; (8006d6c <takeMachineID+0x284>)
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	4413      	add	r3, r2
 8006c18:	2230      	movs	r2, #48	; 0x30
 8006c1a:	701a      	strb	r2, [r3, #0]
 8006c1c:	e04f      	b.n	8006cbe <takeMachineID+0x1d6>
        	} else if(cursorPosition == 4) {
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b04      	cmp	r3, #4
 8006c22:	d105      	bne.n	8006c30 <takeMachineID+0x148>
        		machineID[machineIDLoc] = '1';
 8006c24:	4a51      	ldr	r2, [pc, #324]	; (8006d6c <takeMachineID+0x284>)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	4413      	add	r3, r2
 8006c2a:	2231      	movs	r2, #49	; 0x31
 8006c2c:	701a      	strb	r2, [r3, #0]
 8006c2e:	e046      	b.n	8006cbe <takeMachineID+0x1d6>
        	} else if(cursorPosition == 5) {
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2b05      	cmp	r3, #5
 8006c34:	d105      	bne.n	8006c42 <takeMachineID+0x15a>
        		machineID[machineIDLoc] = '2';
 8006c36:	4a4d      	ldr	r2, [pc, #308]	; (8006d6c <takeMachineID+0x284>)
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	2232      	movs	r2, #50	; 0x32
 8006c3e:	701a      	strb	r2, [r3, #0]
 8006c40:	e03d      	b.n	8006cbe <takeMachineID+0x1d6>
        	} else if(cursorPosition == 6) {
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2b06      	cmp	r3, #6
 8006c46:	d105      	bne.n	8006c54 <takeMachineID+0x16c>
        		machineID[machineIDLoc] = '3';
 8006c48:	4a48      	ldr	r2, [pc, #288]	; (8006d6c <takeMachineID+0x284>)
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	2233      	movs	r2, #51	; 0x33
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	e034      	b.n	8006cbe <takeMachineID+0x1d6>
        	} else if(cursorPosition == 7) {
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b07      	cmp	r3, #7
 8006c58:	d105      	bne.n	8006c66 <takeMachineID+0x17e>
        		machineID[machineIDLoc] = '4';
 8006c5a:	4a44      	ldr	r2, [pc, #272]	; (8006d6c <takeMachineID+0x284>)
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	4413      	add	r3, r2
 8006c60:	2234      	movs	r2, #52	; 0x34
 8006c62:	701a      	strb	r2, [r3, #0]
 8006c64:	e02b      	b.n	8006cbe <takeMachineID+0x1d6>
        	} else if(cursorPosition == 10) {
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2b0a      	cmp	r3, #10
 8006c6a:	d105      	bne.n	8006c78 <takeMachineID+0x190>
        		machineID[machineIDLoc] = '5';
 8006c6c:	4a3f      	ldr	r2, [pc, #252]	; (8006d6c <takeMachineID+0x284>)
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	4413      	add	r3, r2
 8006c72:	2235      	movs	r2, #53	; 0x35
 8006c74:	701a      	strb	r2, [r3, #0]
 8006c76:	e022      	b.n	8006cbe <takeMachineID+0x1d6>
        	} else if(cursorPosition == 11) {
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b0b      	cmp	r3, #11
 8006c7c:	d105      	bne.n	8006c8a <takeMachineID+0x1a2>
        		machineID[machineIDLoc] = '6';
 8006c7e:	4a3b      	ldr	r2, [pc, #236]	; (8006d6c <takeMachineID+0x284>)
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	4413      	add	r3, r2
 8006c84:	2236      	movs	r2, #54	; 0x36
 8006c86:	701a      	strb	r2, [r3, #0]
 8006c88:	e019      	b.n	8006cbe <takeMachineID+0x1d6>
        	} else if(cursorPosition == 12) {
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2b0c      	cmp	r3, #12
 8006c8e:	d105      	bne.n	8006c9c <takeMachineID+0x1b4>
        		machineID[machineIDLoc] = '7';
 8006c90:	4a36      	ldr	r2, [pc, #216]	; (8006d6c <takeMachineID+0x284>)
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	4413      	add	r3, r2
 8006c96:	2237      	movs	r2, #55	; 0x37
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	e010      	b.n	8006cbe <takeMachineID+0x1d6>
        	} else if(cursorPosition == 13) {
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2b0d      	cmp	r3, #13
 8006ca0:	d105      	bne.n	8006cae <takeMachineID+0x1c6>
        		machineID[machineIDLoc] = '8';
 8006ca2:	4a32      	ldr	r2, [pc, #200]	; (8006d6c <takeMachineID+0x284>)
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	4413      	add	r3, r2
 8006ca8:	2238      	movs	r2, #56	; 0x38
 8006caa:	701a      	strb	r2, [r3, #0]
 8006cac:	e007      	b.n	8006cbe <takeMachineID+0x1d6>
        	} else if(cursorPosition == 14) {
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b0e      	cmp	r3, #14
 8006cb2:	d104      	bne.n	8006cbe <takeMachineID+0x1d6>
        		machineID[machineIDLoc] = '9';
 8006cb4:	4a2d      	ldr	r2, [pc, #180]	; (8006d6c <takeMachineID+0x284>)
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	4413      	add	r3, r2
 8006cba:	2239      	movs	r2, #57	; 0x39
 8006cbc:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	b2d9      	uxtb	r1, r3
 8006cc2:	4a2a      	ldr	r2, [pc, #168]	; (8006d6c <takeMachineID+0x284>)
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	2001      	movs	r0, #1
 8006cce:	f000 fea6 	bl	8007a1e <lcd_print_char>

        	writeLoc++;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	607b      	str	r3, [r7, #4]
        	machineIDLoc++;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	60bb      	str	r3, [r7, #8]

        	HAL_Delay(450);
 8006cde:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8006ce2:	f001 fbdd 	bl	80084a0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006ce6:	2104      	movs	r1, #4
 8006ce8:	4821      	ldr	r0, [pc, #132]	; (8006d70 <takeMachineID+0x288>)
 8006cea:	f002 f9a9 	bl	8009040 <HAL_GPIO_ReadPin>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d12f      	bne.n	8006d54 <takeMachineID+0x26c>
            if(strlen(machineID) >= 1) {
 8006cf4:	4b1d      	ldr	r3, [pc, #116]	; (8006d6c <takeMachineID+0x284>)
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d027      	beq.n	8006d4c <takeMachineID+0x264>

                machineID[machineIDLoc] = '\0';
 8006cfc:	4a1b      	ldr	r2, [pc, #108]	; (8006d6c <takeMachineID+0x284>)
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	4413      	add	r3, r2
 8006d02:	2200      	movs	r2, #0
 8006d04:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	4619      	mov	r1, r3
 8006d10:	2001      	movs	r0, #1
 8006d12:	f000 fea5 	bl	8007a60 <lcd_delete_char>
                HAL_Delay(50);
 8006d16:	2032      	movs	r0, #50	; 0x32
 8006d18:	f001 fbc2 	bl	80084a0 <HAL_Delay>

                if(writeLoc > 5) {
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b05      	cmp	r3, #5
 8006d20:	dd03      	ble.n	8006d2a <takeMachineID+0x242>
                	writeLoc--;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	607b      	str	r3, [r7, #4]
 8006d28:	e004      	b.n	8006d34 <takeMachineID+0x24c>
                } else if(writeLoc < 5) {
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b04      	cmp	r3, #4
 8006d2e:	dc01      	bgt.n	8006d34 <takeMachineID+0x24c>
                	writeLoc = 5;
 8006d30:	2305      	movs	r3, #5
 8006d32:	607b      	str	r3, [r7, #4]
                }

                if(machineIDLoc > 0) {
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	dd03      	ble.n	8006d42 <takeMachineID+0x25a>
                	machineIDLoc--;
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	60bb      	str	r3, [r7, #8]
 8006d40:	e004      	b.n	8006d4c <takeMachineID+0x264>
                } else if(machineIDLoc < 0) {
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	da01      	bge.n	8006d4c <takeMachineID+0x264>
                	machineIDLoc = 0;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	60bb      	str	r3, [r7, #8]
                }
            }

            HAL_Delay(350);
 8006d4c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8006d50:	f001 fba6 	bl	80084a0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	4619      	mov	r1, r3
 8006d5a:	2002      	movs	r0, #2
 8006d5c:	f000 fe2b 	bl	80079b6 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006d60:	e6da      	b.n	8006b18 <takeMachineID+0x30>
    }
}
 8006d62:	bf00      	nop
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}
 8006d6a:	bf00      	nop
 8006d6c:	20000198 	.word	0x20000198
 8006d70:	40010800 	.word	0x40010800
 8006d74:	0800d9bc 	.word	0x0800d9bc
 8006d78:	0800d9d0 	.word	0x0800d9d0
 8006d7c:	20000004 	.word	0x20000004
 8006d80:	20000120 	.word	0x20000120
 8006d84:	20000284 	.word	0x20000284
 8006d88:	40011000 	.word	0x40011000

08006d8c <takeWifiSSID>:

void takeWifiSSID() {
 8006d8c:	b590      	push	{r4, r7, lr}
 8006d8e:	b08b      	sub	sp, #44	; 0x2c
 8006d90:	af04      	add	r7, sp, #16
	mainSSIDSection:
    lcd_cursor(1);
 8006d92:	2001      	movs	r0, #1
 8006d94:	f000 fe8c 	bl	8007ab0 <lcd_cursor>

    memset(wifiSSID, 0, sizeof(wifiSSID));
 8006d98:	2214      	movs	r2, #20
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	48a1      	ldr	r0, [pc, #644]	; (8007024 <takeWifiSSID+0x298>)
 8006d9e:	f005 fad6 	bl	800c34e <memset>
    HAL_Delay(100);
 8006da2:	2064      	movs	r0, #100	; 0x64
 8006da4:	f001 fb7c 	bl	80084a0 <HAL_Delay>

    int realCharPos = 1;
 8006da8:	2301      	movs	r3, #1
 8006daa:	617b      	str	r3, [r7, #20]
    int cursorPosition = 1;
 8006dac:	2301      	movs	r3, #1
 8006dae:	613b      	str	r3, [r7, #16]
    int page = 1;
 8006db0:	2301      	movs	r3, #1
 8006db2:	60fb      	str	r3, [r7, #12]
    int wifiNameLoc = 0;
 8006db4:	2300      	movs	r3, #0
 8006db6:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8006db8:	2307      	movs	r3, #7
 8006dba:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	2002      	movs	r0, #2
 8006dc0:	f7f9 ff54 	bl	8000c6c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006dc4:	2108      	movs	r1, #8
 8006dc6:	4898      	ldr	r0, [pc, #608]	; (8007028 <takeWifiSSID+0x29c>)
 8006dc8:	f002 f93a 	bl	8009040 <HAL_GPIO_ReadPin>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b01      	cmp	r3, #1
 8006dd0:	d138      	bne.n	8006e44 <takeWifiSSID+0xb8>
            lcd_cursor(0);
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	f000 fe6c 	bl	8007ab0 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8006dd8:	4892      	ldr	r0, [pc, #584]	; (8007024 <takeWifiSSID+0x298>)
 8006dda:	f7f9 fa23 	bl	8000224 <strlen>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b14      	cmp	r3, #20
 8006de2:	d910      	bls.n	8006e06 <takeWifiSSID+0x7a>
                lcd_clear();
 8006de4:	f000 fe32 	bl	8007a4c <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006de8:	4a90      	ldr	r2, [pc, #576]	; (800702c <takeWifiSSID+0x2a0>)
 8006dea:	2101      	movs	r1, #1
 8006dec:	2001      	movs	r0, #1
 8006dee:	f000 fe01 	bl	80079f4 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8006df2:	4a8f      	ldr	r2, [pc, #572]	; (8007030 <takeWifiSSID+0x2a4>)
 8006df4:	2101      	movs	r1, #1
 8006df6:	2002      	movs	r0, #2
 8006df8:	f000 fdfc 	bl	80079f4 <lcd_print>
                HAL_Delay(1200);
 8006dfc:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006e00:	f001 fb4e 	bl	80084a0 <HAL_Delay>
                goto mainSSIDSection;
 8006e04:	e7c5      	b.n	8006d92 <takeWifiSSID+0x6>
            }

            memcpy(&eepromData[ssidStartPos], (uint8_t *)wifiSSID, strlen(wifiSSID));
 8006e06:	4b8b      	ldr	r3, [pc, #556]	; (8007034 <takeWifiSSID+0x2a8>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a8b      	ldr	r2, [pc, #556]	; (8007038 <takeWifiSSID+0x2ac>)
 8006e0c:	189c      	adds	r4, r3, r2
 8006e0e:	4885      	ldr	r0, [pc, #532]	; (8007024 <takeWifiSSID+0x298>)
 8006e10:	f7f9 fa08 	bl	8000224 <strlen>
 8006e14:	4603      	mov	r3, r0
 8006e16:	461a      	mov	r2, r3
 8006e18:	4982      	ldr	r1, [pc, #520]	; (8007024 <takeWifiSSID+0x298>)
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f005 fadc 	bl	800c3d8 <memcpy>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006e20:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006e24:	9302      	str	r3, [sp, #8]
 8006e26:	236e      	movs	r3, #110	; 0x6e
 8006e28:	9301      	str	r3, [sp, #4]
 8006e2a:	4b83      	ldr	r3, [pc, #524]	; (8007038 <takeWifiSSID+0x2ac>)
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	236e      	movs	r3, #110	; 0x6e
 8006e30:	2200      	movs	r2, #0
 8006e32:	21a0      	movs	r1, #160	; 0xa0
 8006e34:	4881      	ldr	r0, [pc, #516]	; (800703c <takeWifiSSID+0x2b0>)
 8006e36:	f002 fbbd 	bl	80095b4 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8006e3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006e3e:	f001 fb2f 	bl	80084a0 <HAL_Delay>

            break;
 8006e42:	e11e      	b.n	8007082 <takeWifiSSID+0x2f6>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006e44:	2101      	movs	r1, #1
 8006e46:	4878      	ldr	r0, [pc, #480]	; (8007028 <takeWifiSSID+0x29c>)
 8006e48:	f002 f8fa 	bl	8009040 <HAL_GPIO_ReadPin>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d150      	bne.n	8006ef4 <takeWifiSSID+0x168>
        	realCharPos++;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	3301      	adds	r3, #1
 8006e56:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	2b50      	cmp	r3, #80	; 0x50
 8006e5c:	dd01      	ble.n	8006e62 <takeWifiSSID+0xd6>
        		realCharPos = 1;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	2b10      	cmp	r3, #16
 8006e66:	d13f      	bne.n	8006ee8 <takeWifiSSID+0x15c>
            	if(page == 1) {
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d109      	bne.n	8006e82 <takeWifiSSID+0xf6>
            		cursorPosition = 1;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	613b      	str	r3, [r7, #16]
            		page++;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	3301      	adds	r3, #1
 8006e76:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 2);
 8006e78:	2102      	movs	r1, #2
 8006e7a:	2002      	movs	r0, #2
 8006e7c:	f7f9 fef6 	bl	8000c6c <printTemplate>
 8006e80:	e035      	b.n	8006eee <takeWifiSSID+0x162>
            	} else if(page == 2) {
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2b02      	cmp	r3, #2
 8006e86:	d109      	bne.n	8006e9c <takeWifiSSID+0x110>
            		cursorPosition = 1;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	613b      	str	r3, [r7, #16]
            		page++;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 3);
 8006e92:	2103      	movs	r1, #3
 8006e94:	2002      	movs	r0, #2
 8006e96:	f7f9 fee9 	bl	8000c6c <printTemplate>
 8006e9a:	e028      	b.n	8006eee <takeWifiSSID+0x162>
            	} else if(page == 3) {
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d109      	bne.n	8006eb6 <takeWifiSSID+0x12a>
            		cursorPosition = 1;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	613b      	str	r3, [r7, #16]
            		page++;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 4);
 8006eac:	2104      	movs	r1, #4
 8006eae:	2002      	movs	r0, #2
 8006eb0:	f7f9 fedc 	bl	8000c6c <printTemplate>
 8006eb4:	e01b      	b.n	8006eee <takeWifiSSID+0x162>
            	} else if(page == 4) {
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2b04      	cmp	r3, #4
 8006eba:	d109      	bne.n	8006ed0 <takeWifiSSID+0x144>
            		cursorPosition = 1;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	613b      	str	r3, [r7, #16]
            		page++;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 5);
 8006ec6:	2105      	movs	r1, #5
 8006ec8:	2002      	movs	r0, #2
 8006eca:	f7f9 fecf 	bl	8000c6c <printTemplate>
 8006ece:	e00e      	b.n	8006eee <takeWifiSSID+0x162>
            	} else if(page == 5) {
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b05      	cmp	r3, #5
 8006ed4:	d10b      	bne.n	8006eee <takeWifiSSID+0x162>
            		cursorPosition = 1;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	613b      	str	r3, [r7, #16]
            		page = 1;
 8006eda:	2301      	movs	r3, #1
 8006edc:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 1);
 8006ede:	2101      	movs	r1, #1
 8006ee0:	2002      	movs	r0, #2
 8006ee2:	f7f9 fec3 	bl	8000c6c <printTemplate>
 8006ee6:	e002      	b.n	8006eee <takeWifiSSID+0x162>
            	}
            } else {
            	cursorPosition++;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	3301      	adds	r3, #1
 8006eec:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(250);
 8006eee:	20fa      	movs	r0, #250	; 0xfa
 8006ef0:	f001 fad6 	bl	80084a0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006ef4:	2108      	movs	r1, #8
 8006ef6:	4852      	ldr	r0, [pc, #328]	; (8007040 <takeWifiSSID+0x2b4>)
 8006ef8:	f002 f8a2 	bl	8009040 <HAL_GPIO_ReadPin>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d14c      	bne.n	8006f9c <takeWifiSSID+0x210>
        	realCharPos--;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	3b01      	subs	r3, #1
 8006f06:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	dc01      	bgt.n	8006f12 <takeWifiSSID+0x186>
        		realCharPos = 80;
 8006f0e:	2350      	movs	r3, #80	; 0x50
 8006f10:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d13b      	bne.n	8006f90 <takeWifiSSID+0x204>
            	if(page == 1) {
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d108      	bne.n	8006f30 <takeWifiSSID+0x1a4>
            		cursorPosition = 16;
 8006f1e:	2310      	movs	r3, #16
 8006f20:	613b      	str	r3, [r7, #16]
            		page = 5;
 8006f22:	2305      	movs	r3, #5
 8006f24:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 5);
 8006f26:	2105      	movs	r1, #5
 8006f28:	2002      	movs	r0, #2
 8006f2a:	f7f9 fe9f 	bl	8000c6c <printTemplate>
 8006f2e:	e032      	b.n	8006f96 <takeWifiSSID+0x20a>
            	} else if(page == 2) {
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d108      	bne.n	8006f48 <takeWifiSSID+0x1bc>
            		cursorPosition = 16;
 8006f36:	2310      	movs	r3, #16
 8006f38:	613b      	str	r3, [r7, #16]
            		page = 1;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 1);
 8006f3e:	2101      	movs	r1, #1
 8006f40:	2002      	movs	r0, #2
 8006f42:	f7f9 fe93 	bl	8000c6c <printTemplate>
 8006f46:	e026      	b.n	8006f96 <takeWifiSSID+0x20a>
            	} else if(page == 3) {
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2b03      	cmp	r3, #3
 8006f4c:	d108      	bne.n	8006f60 <takeWifiSSID+0x1d4>
            		cursorPosition = 16;
 8006f4e:	2310      	movs	r3, #16
 8006f50:	613b      	str	r3, [r7, #16]
            		page = 2;
 8006f52:	2302      	movs	r3, #2
 8006f54:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 2);
 8006f56:	2102      	movs	r1, #2
 8006f58:	2002      	movs	r0, #2
 8006f5a:	f7f9 fe87 	bl	8000c6c <printTemplate>
 8006f5e:	e01a      	b.n	8006f96 <takeWifiSSID+0x20a>
            	} else if(page == 4) {
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d108      	bne.n	8006f78 <takeWifiSSID+0x1ec>
            		cursorPosition = 16;
 8006f66:	2310      	movs	r3, #16
 8006f68:	613b      	str	r3, [r7, #16]
            		page = 3;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 3);
 8006f6e:	2103      	movs	r1, #3
 8006f70:	2002      	movs	r0, #2
 8006f72:	f7f9 fe7b 	bl	8000c6c <printTemplate>
 8006f76:	e00e      	b.n	8006f96 <takeWifiSSID+0x20a>
            	} else if(page == 5) {
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2b05      	cmp	r3, #5
 8006f7c:	d10b      	bne.n	8006f96 <takeWifiSSID+0x20a>
            		cursorPosition = 16;
 8006f7e:	2310      	movs	r3, #16
 8006f80:	613b      	str	r3, [r7, #16]
            		page = 4;
 8006f82:	2304      	movs	r3, #4
 8006f84:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 4);
 8006f86:	2104      	movs	r1, #4
 8006f88:	2002      	movs	r0, #2
 8006f8a:	f7f9 fe6f 	bl	8000c6c <printTemplate>
 8006f8e:	e002      	b.n	8006f96 <takeWifiSSID+0x20a>
            	}
            } else {
            	cursorPosition--;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(250);
 8006f96:	20fa      	movs	r0, #250	; 0xfa
 8006f98:	f001 fa82 	bl	80084a0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006f9c:	2102      	movs	r1, #2
 8006f9e:	4822      	ldr	r0, [pc, #136]	; (8007028 <takeWifiSSID+0x29c>)
 8006fa0:	f002 f84e 	bl	8009040 <HAL_GPIO_ReadPin>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d11e      	bne.n	8006fe8 <takeWifiSSID+0x25c>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	3b01      	subs	r3, #1
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7f9 fbc0 	bl	8000734 <getCharFromCursorPosition>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	4a1a      	ldr	r2, [pc, #104]	; (8007024 <takeWifiSSID+0x298>)
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	460a      	mov	r2, r1
 8006fc0:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	b2d9      	uxtb	r1, r3
 8006fc6:	4a17      	ldr	r2, [pc, #92]	; (8007024 <takeWifiSSID+0x298>)
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	4413      	add	r3, r2
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	2001      	movs	r0, #1
 8006fd2:	f000 fd24 	bl	8007a1e <lcd_print_char>

            writeLoc++;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	607b      	str	r3, [r7, #4]
            wifiNameLoc++;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	60bb      	str	r3, [r7, #8]

            HAL_Delay(250);
 8006fe2:	20fa      	movs	r0, #250	; 0xfa
 8006fe4:	f001 fa5c 	bl	80084a0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006fe8:	2104      	movs	r1, #4
 8006fea:	480f      	ldr	r0, [pc, #60]	; (8007028 <takeWifiSSID+0x29c>)
 8006fec:	f002 f828 	bl	8009040 <HAL_GPIO_ReadPin>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d13e      	bne.n	8007074 <takeWifiSSID+0x2e8>
        	if(strlen(wifiSSID) >= 1) {
 8006ff6:	4b0b      	ldr	r3, [pc, #44]	; (8007024 <takeWifiSSID+0x298>)
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d037      	beq.n	800706e <takeWifiSSID+0x2e2>
        		if(writeLoc > 7) {
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b07      	cmp	r3, #7
 8007002:	dd03      	ble.n	800700c <takeWifiSSID+0x280>
        			writeLoc--;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	3b01      	subs	r3, #1
 8007008:	607b      	str	r3, [r7, #4]
 800700a:	e004      	b.n	8007016 <takeWifiSSID+0x28a>
        		} else if(writeLoc < 7) {
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b06      	cmp	r3, #6
 8007010:	dc01      	bgt.n	8007016 <takeWifiSSID+0x28a>
        			writeLoc = 7;
 8007012:	2307      	movs	r3, #7
 8007014:	607b      	str	r3, [r7, #4]
        		}

        		if(wifiNameLoc > 0) {
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	2b00      	cmp	r3, #0
 800701a:	dd13      	ble.n	8007044 <takeWifiSSID+0x2b8>
        			wifiNameLoc--;
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	3b01      	subs	r3, #1
 8007020:	60bb      	str	r3, [r7, #8]
 8007022:	e014      	b.n	800704e <takeWifiSSID+0x2c2>
 8007024:	200001a4 	.word	0x200001a4
 8007028:	40010800 	.word	0x40010800
 800702c:	0800d9e4 	.word	0x0800d9e4
 8007030:	0800d9f8 	.word	0x0800d9f8
 8007034:	20000008 	.word	0x20000008
 8007038:	20000120 	.word	0x20000120
 800703c:	20000284 	.word	0x20000284
 8007040:	40011000 	.word	0x40011000
        		} else if(wifiNameLoc < 0) {
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2b00      	cmp	r3, #0
 8007048:	da01      	bge.n	800704e <takeWifiSSID+0x2c2>
        			wifiNameLoc = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	60bb      	str	r3, [r7, #8]
        		}

        		wifiSSID[wifiNameLoc] = '\0';
 800704e:	4a0f      	ldr	r2, [pc, #60]	; (800708c <takeWifiSSID+0x300>)
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	4413      	add	r3, r2
 8007054:	2200      	movs	r2, #0
 8007056:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	b2db      	uxtb	r3, r3
 800705c:	3306      	adds	r3, #6
 800705e:	b2db      	uxtb	r3, r3
 8007060:	4619      	mov	r1, r3
 8007062:	2001      	movs	r0, #1
 8007064:	f000 fcfc 	bl	8007a60 <lcd_delete_char>
        		HAL_Delay(50);
 8007068:	2032      	movs	r0, #50	; 0x32
 800706a:	f001 fa19 	bl	80084a0 <HAL_Delay>
        	}

        	HAL_Delay(250);
 800706e:	20fa      	movs	r0, #250	; 0xfa
 8007070:	f001 fa16 	bl	80084a0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	b2db      	uxtb	r3, r3
 8007078:	4619      	mov	r1, r3
 800707a:	2002      	movs	r0, #2
 800707c:	f000 fc9b 	bl	80079b6 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007080:	e6a0      	b.n	8006dc4 <takeWifiSSID+0x38>
    }
}
 8007082:	bf00      	nop
 8007084:	371c      	adds	r7, #28
 8007086:	46bd      	mov	sp, r7
 8007088:	bd90      	pop	{r4, r7, pc}
 800708a:	bf00      	nop
 800708c:	200001a4 	.word	0x200001a4

08007090 <takeWifiPass>:

void takeWifiPass() {
 8007090:	b590      	push	{r4, r7, lr}
 8007092:	b08b      	sub	sp, #44	; 0x2c
 8007094:	af04      	add	r7, sp, #16
	mainPASSSection:
    lcd_cursor(1);
 8007096:	2001      	movs	r0, #1
 8007098:	f000 fd0a 	bl	8007ab0 <lcd_cursor>

    memset(wifiPass, 0, sizeof(wifiPass));
 800709c:	2214      	movs	r2, #20
 800709e:	2100      	movs	r1, #0
 80070a0:	48a1      	ldr	r0, [pc, #644]	; (8007328 <takeWifiPass+0x298>)
 80070a2:	f005 f954 	bl	800c34e <memset>
    HAL_Delay(100);
 80070a6:	2064      	movs	r0, #100	; 0x64
 80070a8:	f001 f9fa 	bl	80084a0 <HAL_Delay>

    int realCharPos = 1;
 80070ac:	2301      	movs	r3, #1
 80070ae:	617b      	str	r3, [r7, #20]
    int cursorPosition = 1;
 80070b0:	2301      	movs	r3, #1
 80070b2:	613b      	str	r3, [r7, #16]
    int page = 1;
 80070b4:	2301      	movs	r3, #1
 80070b6:	60fb      	str	r3, [r7, #12]
    int wifiPassLoc = 0;
 80070b8:	2300      	movs	r3, #0
 80070ba:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 80070bc:	2307      	movs	r3, #7
 80070be:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 80070c0:	2101      	movs	r1, #1
 80070c2:	2003      	movs	r0, #3
 80070c4:	f7f9 fdd2 	bl	8000c6c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80070c8:	2108      	movs	r1, #8
 80070ca:	4898      	ldr	r0, [pc, #608]	; (800732c <takeWifiPass+0x29c>)
 80070cc:	f001 ffb8 	bl	8009040 <HAL_GPIO_ReadPin>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d138      	bne.n	8007148 <takeWifiPass+0xb8>
            lcd_cursor(0);
 80070d6:	2000      	movs	r0, #0
 80070d8:	f000 fcea 	bl	8007ab0 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 80070dc:	4892      	ldr	r0, [pc, #584]	; (8007328 <takeWifiPass+0x298>)
 80070de:	f7f9 f8a1 	bl	8000224 <strlen>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b14      	cmp	r3, #20
 80070e6:	d910      	bls.n	800710a <takeWifiPass+0x7a>
                lcd_clear();
 80070e8:	f000 fcb0 	bl	8007a4c <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 80070ec:	4a90      	ldr	r2, [pc, #576]	; (8007330 <takeWifiPass+0x2a0>)
 80070ee:	2101      	movs	r1, #1
 80070f0:	2001      	movs	r0, #1
 80070f2:	f000 fc7f 	bl	80079f4 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 80070f6:	4a8f      	ldr	r2, [pc, #572]	; (8007334 <takeWifiPass+0x2a4>)
 80070f8:	2101      	movs	r1, #1
 80070fa:	2002      	movs	r0, #2
 80070fc:	f000 fc7a 	bl	80079f4 <lcd_print>
                HAL_Delay(1200);
 8007100:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8007104:	f001 f9cc 	bl	80084a0 <HAL_Delay>
                goto mainPASSSection;
 8007108:	e7c5      	b.n	8007096 <takeWifiPass+0x6>
            }

            memcpy(&eepromData[passStartPos], (uint8_t *)wifiPass, strlen(wifiPass));
 800710a:	4b8b      	ldr	r3, [pc, #556]	; (8007338 <takeWifiPass+0x2a8>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a8b      	ldr	r2, [pc, #556]	; (800733c <takeWifiPass+0x2ac>)
 8007110:	189c      	adds	r4, r3, r2
 8007112:	4885      	ldr	r0, [pc, #532]	; (8007328 <takeWifiPass+0x298>)
 8007114:	f7f9 f886 	bl	8000224 <strlen>
 8007118:	4603      	mov	r3, r0
 800711a:	461a      	mov	r2, r3
 800711c:	4982      	ldr	r1, [pc, #520]	; (8007328 <takeWifiPass+0x298>)
 800711e:	4620      	mov	r0, r4
 8007120:	f005 f95a 	bl	800c3d8 <memcpy>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007124:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8007128:	9302      	str	r3, [sp, #8]
 800712a:	236e      	movs	r3, #110	; 0x6e
 800712c:	9301      	str	r3, [sp, #4]
 800712e:	4b83      	ldr	r3, [pc, #524]	; (800733c <takeWifiPass+0x2ac>)
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	236e      	movs	r3, #110	; 0x6e
 8007134:	2200      	movs	r2, #0
 8007136:	21a0      	movs	r1, #160	; 0xa0
 8007138:	4881      	ldr	r0, [pc, #516]	; (8007340 <takeWifiPass+0x2b0>)
 800713a:	f002 fa3b 	bl	80095b4 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 800713e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007142:	f001 f9ad 	bl	80084a0 <HAL_Delay>

            break;
 8007146:	e11e      	b.n	8007386 <takeWifiPass+0x2f6>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007148:	2101      	movs	r1, #1
 800714a:	4878      	ldr	r0, [pc, #480]	; (800732c <takeWifiPass+0x29c>)
 800714c:	f001 ff78 	bl	8009040 <HAL_GPIO_ReadPin>
 8007150:	4603      	mov	r3, r0
 8007152:	2b01      	cmp	r3, #1
 8007154:	d150      	bne.n	80071f8 <takeWifiPass+0x168>
        	realCharPos++;
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	3301      	adds	r3, #1
 800715a:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	2b50      	cmp	r3, #80	; 0x50
 8007160:	dd01      	ble.n	8007166 <takeWifiPass+0xd6>
        	    realCharPos = 1;
 8007162:	2301      	movs	r3, #1
 8007164:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	2b10      	cmp	r3, #16
 800716a:	d13f      	bne.n	80071ec <takeWifiPass+0x15c>
            	if(page == 1) {
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d109      	bne.n	8007186 <takeWifiPass+0xf6>
            		cursorPosition = 1;
 8007172:	2301      	movs	r3, #1
 8007174:	613b      	str	r3, [r7, #16]
            		page++;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	3301      	adds	r3, #1
 800717a:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 2);
 800717c:	2102      	movs	r1, #2
 800717e:	2003      	movs	r0, #3
 8007180:	f7f9 fd74 	bl	8000c6c <printTemplate>
 8007184:	e035      	b.n	80071f2 <takeWifiPass+0x162>
            	} else if(page == 2) {
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2b02      	cmp	r3, #2
 800718a:	d109      	bne.n	80071a0 <takeWifiPass+0x110>
            		cursorPosition = 1;
 800718c:	2301      	movs	r3, #1
 800718e:	613b      	str	r3, [r7, #16]
            		page++;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	3301      	adds	r3, #1
 8007194:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 3);
 8007196:	2103      	movs	r1, #3
 8007198:	2003      	movs	r0, #3
 800719a:	f7f9 fd67 	bl	8000c6c <printTemplate>
 800719e:	e028      	b.n	80071f2 <takeWifiPass+0x162>
            	} else if(page == 3) {
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d109      	bne.n	80071ba <takeWifiPass+0x12a>
            		cursorPosition = 1;
 80071a6:	2301      	movs	r3, #1
 80071a8:	613b      	str	r3, [r7, #16]
            		page++;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3301      	adds	r3, #1
 80071ae:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 4);
 80071b0:	2104      	movs	r1, #4
 80071b2:	2003      	movs	r0, #3
 80071b4:	f7f9 fd5a 	bl	8000c6c <printTemplate>
 80071b8:	e01b      	b.n	80071f2 <takeWifiPass+0x162>
            	} else if(page == 4) {
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2b04      	cmp	r3, #4
 80071be:	d109      	bne.n	80071d4 <takeWifiPass+0x144>
            		cursorPosition = 1;
 80071c0:	2301      	movs	r3, #1
 80071c2:	613b      	str	r3, [r7, #16]
            		page++;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3301      	adds	r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 5);
 80071ca:	2105      	movs	r1, #5
 80071cc:	2003      	movs	r0, #3
 80071ce:	f7f9 fd4d 	bl	8000c6c <printTemplate>
 80071d2:	e00e      	b.n	80071f2 <takeWifiPass+0x162>
            	} else if(page == 5) {
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2b05      	cmp	r3, #5
 80071d8:	d10b      	bne.n	80071f2 <takeWifiPass+0x162>
            		cursorPosition = 1;
 80071da:	2301      	movs	r3, #1
 80071dc:	613b      	str	r3, [r7, #16]
            		page = 1;
 80071de:	2301      	movs	r3, #1
 80071e0:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 1);
 80071e2:	2101      	movs	r1, #1
 80071e4:	2003      	movs	r0, #3
 80071e6:	f7f9 fd41 	bl	8000c6c <printTemplate>
 80071ea:	e002      	b.n	80071f2 <takeWifiPass+0x162>
            	}
            } else {
            	cursorPosition++;
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	3301      	adds	r3, #1
 80071f0:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(250);
 80071f2:	20fa      	movs	r0, #250	; 0xfa
 80071f4:	f001 f954 	bl	80084a0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80071f8:	2108      	movs	r1, #8
 80071fa:	4852      	ldr	r0, [pc, #328]	; (8007344 <takeWifiPass+0x2b4>)
 80071fc:	f001 ff20 	bl	8009040 <HAL_GPIO_ReadPin>
 8007200:	4603      	mov	r3, r0
 8007202:	2b01      	cmp	r3, #1
 8007204:	d14c      	bne.n	80072a0 <takeWifiPass+0x210>
        	realCharPos--;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	3b01      	subs	r3, #1
 800720a:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	2b00      	cmp	r3, #0
 8007210:	dc01      	bgt.n	8007216 <takeWifiPass+0x186>
        	    realCharPos = 80;
 8007212:	2350      	movs	r3, #80	; 0x50
 8007214:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d13b      	bne.n	8007294 <takeWifiPass+0x204>
            	if(page == 1) {
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d108      	bne.n	8007234 <takeWifiPass+0x1a4>
            		cursorPosition = 16;
 8007222:	2310      	movs	r3, #16
 8007224:	613b      	str	r3, [r7, #16]
            		page = 5;
 8007226:	2305      	movs	r3, #5
 8007228:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 5);
 800722a:	2105      	movs	r1, #5
 800722c:	2003      	movs	r0, #3
 800722e:	f7f9 fd1d 	bl	8000c6c <printTemplate>
 8007232:	e032      	b.n	800729a <takeWifiPass+0x20a>
            	} else if(page == 2) {
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2b02      	cmp	r3, #2
 8007238:	d108      	bne.n	800724c <takeWifiPass+0x1bc>
            		cursorPosition = 16;
 800723a:	2310      	movs	r3, #16
 800723c:	613b      	str	r3, [r7, #16]
            		page = 1;
 800723e:	2301      	movs	r3, #1
 8007240:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 1);
 8007242:	2101      	movs	r1, #1
 8007244:	2003      	movs	r0, #3
 8007246:	f7f9 fd11 	bl	8000c6c <printTemplate>
 800724a:	e026      	b.n	800729a <takeWifiPass+0x20a>
            	} else if(page == 3) {
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2b03      	cmp	r3, #3
 8007250:	d108      	bne.n	8007264 <takeWifiPass+0x1d4>
            		cursorPosition = 16;
 8007252:	2310      	movs	r3, #16
 8007254:	613b      	str	r3, [r7, #16]
            		page = 2;
 8007256:	2302      	movs	r3, #2
 8007258:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 2);
 800725a:	2102      	movs	r1, #2
 800725c:	2003      	movs	r0, #3
 800725e:	f7f9 fd05 	bl	8000c6c <printTemplate>
 8007262:	e01a      	b.n	800729a <takeWifiPass+0x20a>
            	} else if(page == 4) {
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b04      	cmp	r3, #4
 8007268:	d108      	bne.n	800727c <takeWifiPass+0x1ec>
            		cursorPosition = 16;
 800726a:	2310      	movs	r3, #16
 800726c:	613b      	str	r3, [r7, #16]
            		page = 3;
 800726e:	2303      	movs	r3, #3
 8007270:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 3);
 8007272:	2103      	movs	r1, #3
 8007274:	2003      	movs	r0, #3
 8007276:	f7f9 fcf9 	bl	8000c6c <printTemplate>
 800727a:	e00e      	b.n	800729a <takeWifiPass+0x20a>
            	} else if(page == 5) {
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b05      	cmp	r3, #5
 8007280:	d10b      	bne.n	800729a <takeWifiPass+0x20a>
            		cursorPosition = 16;
 8007282:	2310      	movs	r3, #16
 8007284:	613b      	str	r3, [r7, #16]
            		page = 4;
 8007286:	2304      	movs	r3, #4
 8007288:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 4);
 800728a:	2104      	movs	r1, #4
 800728c:	2003      	movs	r0, #3
 800728e:	f7f9 fced 	bl	8000c6c <printTemplate>
 8007292:	e002      	b.n	800729a <takeWifiPass+0x20a>
            	}
            } else {
            	cursorPosition--;
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	3b01      	subs	r3, #1
 8007298:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(250);
 800729a:	20fa      	movs	r0, #250	; 0xfa
 800729c:	f001 f900 	bl	80084a0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80072a0:	2102      	movs	r1, #2
 80072a2:	4822      	ldr	r0, [pc, #136]	; (800732c <takeWifiPass+0x29c>)
 80072a4:	f001 fecc 	bl	8009040 <HAL_GPIO_ReadPin>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d11e      	bne.n	80072ec <takeWifiPass+0x25c>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	3b01      	subs	r3, #1
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7f9 fa3e 	bl	8000734 <getCharFromCursorPosition>
 80072b8:	4603      	mov	r3, r0
 80072ba:	4619      	mov	r1, r3
 80072bc:	4a1a      	ldr	r2, [pc, #104]	; (8007328 <takeWifiPass+0x298>)
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	4413      	add	r3, r2
 80072c2:	460a      	mov	r2, r1
 80072c4:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	b2d9      	uxtb	r1, r3
 80072ca:	4a17      	ldr	r2, [pc, #92]	; (8007328 <takeWifiPass+0x298>)
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	4413      	add	r3, r2
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	2001      	movs	r0, #1
 80072d6:	f000 fba2 	bl	8007a1e <lcd_print_char>

            writeLoc++;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	3301      	adds	r3, #1
 80072de:	607b      	str	r3, [r7, #4]
            wifiPassLoc++;
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	3301      	adds	r3, #1
 80072e4:	60bb      	str	r3, [r7, #8]

            HAL_Delay(250);
 80072e6:	20fa      	movs	r0, #250	; 0xfa
 80072e8:	f001 f8da 	bl	80084a0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80072ec:	2104      	movs	r1, #4
 80072ee:	480f      	ldr	r0, [pc, #60]	; (800732c <takeWifiPass+0x29c>)
 80072f0:	f001 fea6 	bl	8009040 <HAL_GPIO_ReadPin>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d13e      	bne.n	8007378 <takeWifiPass+0x2e8>
            if(strlen(wifiPass) >= 1) {
 80072fa:	4b0b      	ldr	r3, [pc, #44]	; (8007328 <takeWifiPass+0x298>)
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d037      	beq.n	8007372 <takeWifiPass+0x2e2>
            	if(writeLoc > 7) {
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b07      	cmp	r3, #7
 8007306:	dd03      	ble.n	8007310 <takeWifiPass+0x280>
            		writeLoc--;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	3b01      	subs	r3, #1
 800730c:	607b      	str	r3, [r7, #4]
 800730e:	e004      	b.n	800731a <takeWifiPass+0x28a>
            	} else if(writeLoc < 7) {
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b06      	cmp	r3, #6
 8007314:	dc01      	bgt.n	800731a <takeWifiPass+0x28a>
            		writeLoc = 7;
 8007316:	2307      	movs	r3, #7
 8007318:	607b      	str	r3, [r7, #4]
            	}

            	if(wifiPassLoc > 0) {
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	2b00      	cmp	r3, #0
 800731e:	dd13      	ble.n	8007348 <takeWifiPass+0x2b8>
            		wifiPassLoc--;
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	3b01      	subs	r3, #1
 8007324:	60bb      	str	r3, [r7, #8]
 8007326:	e014      	b.n	8007352 <takeWifiPass+0x2c2>
 8007328:	200001b8 	.word	0x200001b8
 800732c:	40010800 	.word	0x40010800
 8007330:	0800d9e4 	.word	0x0800d9e4
 8007334:	0800da0c 	.word	0x0800da0c
 8007338:	2000000c 	.word	0x2000000c
 800733c:	20000120 	.word	0x20000120
 8007340:	20000284 	.word	0x20000284
 8007344:	40011000 	.word	0x40011000
            	} else if(wifiPassLoc < 0) {
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	da01      	bge.n	8007352 <takeWifiPass+0x2c2>
            		wifiPassLoc = 0;
 800734e:	2300      	movs	r3, #0
 8007350:	60bb      	str	r3, [r7, #8]
            	}

            	wifiPass[wifiPassLoc] = '\0';
 8007352:	4a0f      	ldr	r2, [pc, #60]	; (8007390 <takeWifiPass+0x300>)
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	4413      	add	r3, r2
 8007358:	2200      	movs	r2, #0
 800735a:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	b2db      	uxtb	r3, r3
 8007360:	3306      	adds	r3, #6
 8007362:	b2db      	uxtb	r3, r3
 8007364:	4619      	mov	r1, r3
 8007366:	2001      	movs	r0, #1
 8007368:	f000 fb7a 	bl	8007a60 <lcd_delete_char>
            	HAL_Delay(50);
 800736c:	2032      	movs	r0, #50	; 0x32
 800736e:	f001 f897 	bl	80084a0 <HAL_Delay>
            }

            HAL_Delay(250);
 8007372:	20fa      	movs	r0, #250	; 0xfa
 8007374:	f001 f894 	bl	80084a0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	4619      	mov	r1, r3
 800737e:	2002      	movs	r0, #2
 8007380:	f000 fb19 	bl	80079b6 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007384:	e6a0      	b.n	80070c8 <takeWifiPass+0x38>
    }
}
 8007386:	bf00      	nop
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	bd90      	pop	{r4, r7, pc}
 800738e:	bf00      	nop
 8007390:	200001b8 	.word	0x200001b8

08007394 <mergeData>:

char* mergeData() {
 8007394:	b580      	push	{r7, lr}
 8007396:	b09c      	sub	sp, #112	; 0x70
 8007398:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 800739a:	2300      	movs	r3, #0
 800739c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800739e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80073a2:	2228      	movs	r2, #40	; 0x28
 80073a4:	2100      	movs	r1, #0
 80073a6:	4618      	mov	r0, r3
 80073a8:	f004 ffd1 	bl	800c34e <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80073ac:	4b67      	ldr	r3, [pc, #412]	; (800754c <mergeData+0x1b8>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	713b      	strb	r3, [r7, #4]
 80073b2:	4b67      	ldr	r3, [pc, #412]	; (8007550 <mergeData+0x1bc>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	717b      	strb	r3, [r7, #5]
 80073b8:	4b66      	ldr	r3, [pc, #408]	; (8007554 <mergeData+0x1c0>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	71bb      	strb	r3, [r7, #6]
 80073be:	4b66      	ldr	r3, [pc, #408]	; (8007558 <mergeData+0x1c4>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	71fb      	strb	r3, [r7, #7]
 80073c4:	4b65      	ldr	r3, [pc, #404]	; (800755c <mergeData+0x1c8>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	723b      	strb	r3, [r7, #8]
 80073ca:	4b65      	ldr	r3, [pc, #404]	; (8007560 <mergeData+0x1cc>)
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	727b      	strb	r3, [r7, #9]
 80073d0:	4b64      	ldr	r3, [pc, #400]	; (8007564 <mergeData+0x1d0>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	72bb      	strb	r3, [r7, #10]
 80073d6:	4b64      	ldr	r3, [pc, #400]	; (8007568 <mergeData+0x1d4>)
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	72fb      	strb	r3, [r7, #11]
 80073dc:	4b63      	ldr	r3, [pc, #396]	; (800756c <mergeData+0x1d8>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	733b      	strb	r3, [r7, #12]
 80073e2:	4b63      	ldr	r3, [pc, #396]	; (8007570 <mergeData+0x1dc>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	737b      	strb	r3, [r7, #13]
 80073e8:	4b62      	ldr	r3, [pc, #392]	; (8007574 <mergeData+0x1e0>)
 80073ea:	781b      	ldrb	r3, [r3, #0]
 80073ec:	73bb      	strb	r3, [r7, #14]
 80073ee:	4b62      	ldr	r3, [pc, #392]	; (8007578 <mergeData+0x1e4>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	73fb      	strb	r3, [r7, #15]
 80073f4:	4b61      	ldr	r3, [pc, #388]	; (800757c <mergeData+0x1e8>)
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	743b      	strb	r3, [r7, #16]
 80073fa:	4b61      	ldr	r3, [pc, #388]	; (8007580 <mergeData+0x1ec>)
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	747b      	strb	r3, [r7, #17]
 8007400:	4b60      	ldr	r3, [pc, #384]	; (8007584 <mergeData+0x1f0>)
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	74bb      	strb	r3, [r7, #18]
 8007406:	4b60      	ldr	r3, [pc, #384]	; (8007588 <mergeData+0x1f4>)
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	74fb      	strb	r3, [r7, #19]
 800740c:	4b5f      	ldr	r3, [pc, #380]	; (800758c <mergeData+0x1f8>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	753b      	strb	r3, [r7, #20]
 8007412:	4b5f      	ldr	r3, [pc, #380]	; (8007590 <mergeData+0x1fc>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	757b      	strb	r3, [r7, #21]
 8007418:	4b5e      	ldr	r3, [pc, #376]	; (8007594 <mergeData+0x200>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	75bb      	strb	r3, [r7, #22]
 800741e:	4b5e      	ldr	r3, [pc, #376]	; (8007598 <mergeData+0x204>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	75fb      	strb	r3, [r7, #23]
 8007424:	4b5d      	ldr	r3, [pc, #372]	; (800759c <mergeData+0x208>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	763b      	strb	r3, [r7, #24]
 800742a:	4b5d      	ldr	r3, [pc, #372]	; (80075a0 <mergeData+0x20c>)
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	767b      	strb	r3, [r7, #25]
 8007430:	4b5c      	ldr	r3, [pc, #368]	; (80075a4 <mergeData+0x210>)
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	76bb      	strb	r3, [r7, #26]
 8007436:	4b5c      	ldr	r3, [pc, #368]	; (80075a8 <mergeData+0x214>)
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	76fb      	strb	r3, [r7, #27]
 800743c:	4b5b      	ldr	r3, [pc, #364]	; (80075ac <mergeData+0x218>)
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	773b      	strb	r3, [r7, #28]
 8007442:	4b5b      	ldr	r3, [pc, #364]	; (80075b0 <mergeData+0x21c>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	777b      	strb	r3, [r7, #29]
 8007448:	4b5a      	ldr	r3, [pc, #360]	; (80075b4 <mergeData+0x220>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	77bb      	strb	r3, [r7, #30]
 800744e:	4b5a      	ldr	r3, [pc, #360]	; (80075b8 <mergeData+0x224>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	77fb      	strb	r3, [r7, #31]
 8007454:	4b59      	ldr	r3, [pc, #356]	; (80075bc <mergeData+0x228>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	f887 3020 	strb.w	r3, [r7, #32]
 800745c:	4b58      	ldr	r3, [pc, #352]	; (80075c0 <mergeData+0x22c>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8007464:	4b57      	ldr	r3, [pc, #348]	; (80075c4 <mergeData+0x230>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800746c:	4b56      	ldr	r3, [pc, #344]	; (80075c8 <mergeData+0x234>)
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007474:	4b55      	ldr	r3, [pc, #340]	; (80075cc <mergeData+0x238>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 800747c:	4b54      	ldr	r3, [pc, #336]	; (80075d0 <mergeData+0x23c>)
 800747e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8007482:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 8007486:	4b52      	ldr	r3, [pc, #328]	; (80075d0 <mergeData+0x23c>)
 8007488:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 800748c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 8007490:	4b4f      	ldr	r3, [pc, #316]	; (80075d0 <mergeData+0x23c>)
 8007492:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8007496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 800749a:	4b4d      	ldr	r3, [pc, #308]	; (80075d0 <mergeData+0x23c>)
 800749c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80074a0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 80074a4:	4b4a      	ldr	r3, [pc, #296]	; (80075d0 <mergeData+0x23c>)
 80074a6:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 80074aa:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 80074ae:	4b48      	ldr	r3, [pc, #288]	; (80075d0 <mergeData+0x23c>)
 80074b0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 80074b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 80074b8:	4b45      	ldr	r3, [pc, #276]	; (80075d0 <mergeData+0x23c>)
 80074ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 80074be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 80074c2:	4b43      	ldr	r3, [pc, #268]	; (80075d0 <mergeData+0x23c>)
 80074c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80074c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 80074cc:	4b40      	ldr	r3, [pc, #256]	; (80075d0 <mergeData+0x23c>)
 80074ce:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80074d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 80074d6:	4b3e      	ldr	r3, [pc, #248]	; (80075d0 <mergeData+0x23c>)
 80074d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80074dc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80074e0:	2306      	movs	r3, #6
 80074e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80074e6:	2300      	movs	r3, #0
 80074e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80074ea:	e015      	b.n	8007518 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 80074ec:	1d3a      	adds	r2, r7, #4
 80074ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074f0:	4413      	add	r3, r2
 80074f2:	781b      	ldrb	r3, [r3, #0]
 80074f4:	461a      	mov	r2, r3
 80074f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074fa:	4936      	ldr	r1, [pc, #216]	; (80075d4 <mergeData+0x240>)
 80074fc:	4618      	mov	r0, r3
 80074fe:	f004 feb5 	bl	800c26c <siprintf>
	    strcat(combinedString, temp);
 8007502:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007506:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800750a:	4611      	mov	r1, r2
 800750c:	4618      	mov	r0, r3
 800750e:	f004 ff0f 	bl	800c330 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8007512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007514:	3301      	adds	r3, #1
 8007516:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007518:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800751a:	2b2b      	cmp	r3, #43	; 0x2b
 800751c:	d9e6      	bls.n	80074ec <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 800751e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007522:	4618      	mov	r0, r3
 8007524:	f7f8 fe7e 	bl	8000224 <strlen>
 8007528:	4603      	mov	r3, r0
 800752a:	3301      	adds	r3, #1
 800752c:	4618      	mov	r0, r3
 800752e:	f004 fdb5 	bl	800c09c <malloc>
 8007532:	4603      	mov	r3, r0
 8007534:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 8007536:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800753a:	4619      	mov	r1, r3
 800753c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800753e:	f004 ff59 	bl	800c3f4 <strcpy>
	return result;
 8007542:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 8007544:	4618      	mov	r0, r3
 8007546:	3770      	adds	r7, #112	; 0x70
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	20000203 	.word	0x20000203
 8007550:	200001f5 	.word	0x200001f5
 8007554:	200001f8 	.word	0x200001f8
 8007558:	200001f9 	.word	0x200001f9
 800755c:	200001fa 	.word	0x200001fa
 8007560:	20000201 	.word	0x20000201
 8007564:	200001fb 	.word	0x200001fb
 8007568:	200001fc 	.word	0x200001fc
 800756c:	20000200 	.word	0x20000200
 8007570:	200001fd 	.word	0x200001fd
 8007574:	2000020d 	.word	0x2000020d
 8007578:	200001fe 	.word	0x200001fe
 800757c:	2000020e 	.word	0x2000020e
 8007580:	200001ff 	.word	0x200001ff
 8007584:	2000020f 	.word	0x2000020f
 8007588:	20000202 	.word	0x20000202
 800758c:	20000204 	.word	0x20000204
 8007590:	20000205 	.word	0x20000205
 8007594:	20000206 	.word	0x20000206
 8007598:	20000207 	.word	0x20000207
 800759c:	20000208 	.word	0x20000208
 80075a0:	20000209 	.word	0x20000209
 80075a4:	2000020a 	.word	0x2000020a
 80075a8:	2000020b 	.word	0x2000020b
 80075ac:	2000020c 	.word	0x2000020c
 80075b0:	20000210 	.word	0x20000210
 80075b4:	20000212 	.word	0x20000212
 80075b8:	200001f1 	.word	0x200001f1
 80075bc:	200001f2 	.word	0x200001f2
 80075c0:	20000000 	.word	0x20000000
 80075c4:	20000001 	.word	0x20000001
 80075c8:	200001f3 	.word	0x200001f3
 80075cc:	20000215 	.word	0x20000215
 80075d0:	20000120 	.word	0x20000120
 80075d4:	0800da20 	.word	0x0800da20

080075d8 <convertAndSendData>:

void convertAndSendData() {
 80075d8:	b580      	push	{r7, lr}
 80075da:	b082      	sub	sp, #8
 80075dc:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 80075de:	4b1a      	ldr	r3, [pc, #104]	; (8007648 <convertAndSendData+0x70>)
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10a      	bne.n	80075fc <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 80075e6:	4a19      	ldr	r2, [pc, #100]	; (800764c <convertAndSendData+0x74>)
 80075e8:	2101      	movs	r1, #1
 80075ea:	2001      	movs	r0, #1
 80075ec:	f000 fa02 	bl	80079f4 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 80075f0:	4a17      	ldr	r2, [pc, #92]	; (8007650 <convertAndSendData+0x78>)
 80075f2:	2101      	movs	r1, #1
 80075f4:	2002      	movs	r0, #2
 80075f6:	f000 f9fd 	bl	80079f4 <lcd_print>
 80075fa:	e009      	b.n	8007610 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 80075fc:	4a15      	ldr	r2, [pc, #84]	; (8007654 <convertAndSendData+0x7c>)
 80075fe:	2101      	movs	r1, #1
 8007600:	2001      	movs	r0, #1
 8007602:	f000 f9f7 	bl	80079f4 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 8007606:	4a14      	ldr	r2, [pc, #80]	; (8007658 <convertAndSendData+0x80>)
 8007608:	2101      	movs	r1, #1
 800760a:	2002      	movs	r0, #2
 800760c:	f000 f9f2 	bl	80079f4 <lcd_print>
	}
	for(int i=0; i<2; i++) {
 8007610:	2300      	movs	r3, #0
 8007612:	607b      	str	r3, [r7, #4]
 8007614:	e00a      	b.n	800762c <convertAndSendData+0x54>
		sendMachineData(&huart1, machineID, mergeData());
 8007616:	f7ff febd 	bl	8007394 <mergeData>
 800761a:	4603      	mov	r3, r0
 800761c:	461a      	mov	r2, r3
 800761e:	490f      	ldr	r1, [pc, #60]	; (800765c <convertAndSendData+0x84>)
 8007620:	480f      	ldr	r0, [pc, #60]	; (8007660 <convertAndSendData+0x88>)
 8007622:	f7f9 f8b1 	bl	8000788 <sendMachineData>
	for(int i=0; i<2; i++) {
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	3301      	adds	r3, #1
 800762a:	607b      	str	r3, [r7, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b01      	cmp	r3, #1
 8007630:	ddf1      	ble.n	8007616 <convertAndSendData+0x3e>
	}
	HAL_Delay(500);
 8007632:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007636:	f000 ff33 	bl	80084a0 <HAL_Delay>
	lcd_clear();
 800763a:	f000 fa07 	bl	8007a4c <lcd_clear>
}
 800763e:	bf00      	nop
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20000215 	.word	0x20000215
 800764c:	0800da24 	.word	0x0800da24
 8007650:	0800da38 	.word	0x0800da38
 8007654:	0800da4c 	.word	0x0800da4c
 8007658:	0800da60 	.word	0x0800da60
 800765c:	20000198 	.word	0x20000198
 8007660:	20000320 	.word	0x20000320

08007664 <iotSetup>:

void iotSetup() {
 8007664:	b580      	push	{r7, lr}
 8007666:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8007668:	4b12      	ldr	r3, [pc, #72]	; (80076b4 <iotSetup+0x50>)
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d01f      	beq.n	80076b0 <iotSetup+0x4c>
		if(strlen(machineID) != machineIDCharacterLimit) {
 8007670:	4811      	ldr	r0, [pc, #68]	; (80076b8 <iotSetup+0x54>)
 8007672:	f7f8 fdd7 	bl	8000224 <strlen>
 8007676:	4603      	mov	r3, r0
 8007678:	2b0c      	cmp	r3, #12
 800767a:	d001      	beq.n	8007680 <iotSetup+0x1c>
			takeMachineID();
 800767c:	f7ff fa34 	bl	8006ae8 <takeMachineID>
		}
		HAL_Delay(500);
 8007680:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007684:	f000 ff0c 	bl	80084a0 <HAL_Delay>

		if(wifiSSID[0] == '\0') {
 8007688:	4b0c      	ldr	r3, [pc, #48]	; (80076bc <iotSetup+0x58>)
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <iotSetup+0x30>
			takeWifiSSID();
 8007690:	f7ff fb7c 	bl	8006d8c <takeWifiSSID>
		}
		HAL_Delay(500);
 8007694:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007698:	f000 ff02 	bl	80084a0 <HAL_Delay>

		if(wifiPass[0] == '\0') {
 800769c:	4b08      	ldr	r3, [pc, #32]	; (80076c0 <iotSetup+0x5c>)
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <iotSetup+0x44>
			takeWifiPass();
 80076a4:	f7ff fcf4 	bl	8007090 <takeWifiPass>
		}
		HAL_Delay(500);
 80076a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80076ac:	f000 fef8 	bl	80084a0 <HAL_Delay>
	}

	//ESP8266_Init(&huart1, wifiSSID, wifiPass);
	//HAL_Delay(500);
	//convertAndSendData();
}
 80076b0:	bf00      	nop
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	20000213 	.word	0x20000213
 80076b8:	20000198 	.word	0x20000198
 80076bc:	200001a4 	.word	0x200001a4
 80076c0:	200001b8 	.word	0x200001b8

080076c4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af02      	add	r7, sp, #8
 80076ca:	4603      	mov	r3, r0
 80076cc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80076ce:	79fb      	ldrb	r3, [r7, #7]
 80076d0:	f023 030f 	bic.w	r3, r3, #15
 80076d4:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80076d6:	79fb      	ldrb	r3, [r7, #7]
 80076d8:	011b      	lsls	r3, r3, #4
 80076da:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80076dc:	7b7b      	ldrb	r3, [r7, #13]
 80076de:	f043 030c 	orr.w	r3, r3, #12
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80076e6:	7b7b      	ldrb	r3, [r7, #13]
 80076e8:	f043 0308 	orr.w	r3, r3, #8
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80076f0:	7b3b      	ldrb	r3, [r7, #12]
 80076f2:	f043 030c 	orr.w	r3, r3, #12
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80076fa:	7b3b      	ldrb	r3, [r7, #12]
 80076fc:	f043 0308 	orr.w	r3, r3, #8
 8007700:	b2db      	uxtb	r3, r3
 8007702:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007704:	bf00      	nop
 8007706:	4825      	ldr	r0, [pc, #148]	; (800779c <lcd_send_cmd+0xd8>)
 8007708:	f002 fac3 	bl	8009c92 <HAL_I2C_GetError>
 800770c:	4603      	mov	r3, r0
 800770e:	2b04      	cmp	r3, #4
 8007710:	d0f9      	beq.n	8007706 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007712:	bf00      	nop
 8007714:	4821      	ldr	r0, [pc, #132]	; (800779c <lcd_send_cmd+0xd8>)
 8007716:	f002 faaf 	bl	8009c78 <HAL_I2C_GetState>
 800771a:	4603      	mov	r3, r0
 800771c:	2b20      	cmp	r3, #32
 800771e:	d1f9      	bne.n	8007714 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007720:	4b1f      	ldr	r3, [pc, #124]	; (80077a0 <lcd_send_cmd+0xdc>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d116      	bne.n	8007756 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007728:	2300      	movs	r3, #0
 800772a:	73fb      	strb	r3, [r7, #15]
 800772c:	e00f      	b.n	800774e <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800772e:	7bfb      	ldrb	r3, [r7, #15]
 8007730:	3310      	adds	r3, #16
 8007732:	443b      	add	r3, r7
 8007734:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007738:	7bfb      	ldrb	r3, [r7, #15]
 800773a:	f022 0208 	bic.w	r2, r2, #8
 800773e:	b2d2      	uxtb	r2, r2
 8007740:	3310      	adds	r3, #16
 8007742:	443b      	add	r3, r7
 8007744:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007748:	7bfb      	ldrb	r3, [r7, #15]
 800774a:	3301      	adds	r3, #1
 800774c:	73fb      	strb	r3, [r7, #15]
 800774e:	7bfb      	ldrb	r3, [r7, #15]
 8007750:	2b03      	cmp	r3, #3
 8007752:	d9ec      	bls.n	800772e <lcd_send_cmd+0x6a>
 8007754:	e015      	b.n	8007782 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007756:	2300      	movs	r3, #0
 8007758:	73bb      	strb	r3, [r7, #14]
 800775a:	e00f      	b.n	800777c <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 800775c:	7bbb      	ldrb	r3, [r7, #14]
 800775e:	3310      	adds	r3, #16
 8007760:	443b      	add	r3, r7
 8007762:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007766:	7bbb      	ldrb	r3, [r7, #14]
 8007768:	f042 0208 	orr.w	r2, r2, #8
 800776c:	b2d2      	uxtb	r2, r2
 800776e:	3310      	adds	r3, #16
 8007770:	443b      	add	r3, r7
 8007772:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007776:	7bbb      	ldrb	r3, [r7, #14]
 8007778:	3301      	adds	r3, #1
 800777a:	73bb      	strb	r3, [r7, #14]
 800777c:	7bbb      	ldrb	r3, [r7, #14]
 800777e:	2b03      	cmp	r3, #3
 8007780:	d9ec      	bls.n	800775c <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007782:	f107 0208 	add.w	r2, r7, #8
 8007786:	2364      	movs	r3, #100	; 0x64
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	2304      	movs	r3, #4
 800778c:	214e      	movs	r1, #78	; 0x4e
 800778e:	4803      	ldr	r0, [pc, #12]	; (800779c <lcd_send_cmd+0xd8>)
 8007790:	f001 fe12 	bl	80093b8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007794:	bf00      	nop
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	20000284 	.word	0x20000284
 80077a0:	20000258 	.word	0x20000258

080077a4 <lcd_send_data>:

void lcd_send_data (char data) {
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af02      	add	r7, sp, #8
 80077aa:	4603      	mov	r3, r0
 80077ac:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80077ae:	79fb      	ldrb	r3, [r7, #7]
 80077b0:	f023 030f 	bic.w	r3, r3, #15
 80077b4:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 80077b6:	79fb      	ldrb	r3, [r7, #7]
 80077b8:	011b      	lsls	r3, r3, #4
 80077ba:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80077bc:	7b7b      	ldrb	r3, [r7, #13]
 80077be:	f043 030d 	orr.w	r3, r3, #13
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80077c6:	7b7b      	ldrb	r3, [r7, #13]
 80077c8:	f043 0309 	orr.w	r3, r3, #9
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80077d0:	7b3b      	ldrb	r3, [r7, #12]
 80077d2:	f043 030d 	orr.w	r3, r3, #13
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80077da:	7b3b      	ldrb	r3, [r7, #12]
 80077dc:	f043 0309 	orr.w	r3, r3, #9
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80077e4:	bf00      	nop
 80077e6:	4825      	ldr	r0, [pc, #148]	; (800787c <lcd_send_data+0xd8>)
 80077e8:	f002 fa53 	bl	8009c92 <HAL_I2C_GetError>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b04      	cmp	r3, #4
 80077f0:	d0f9      	beq.n	80077e6 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80077f2:	bf00      	nop
 80077f4:	4821      	ldr	r0, [pc, #132]	; (800787c <lcd_send_data+0xd8>)
 80077f6:	f002 fa3f 	bl	8009c78 <HAL_I2C_GetState>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b20      	cmp	r3, #32
 80077fe:	d1f9      	bne.n	80077f4 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007800:	4b1f      	ldr	r3, [pc, #124]	; (8007880 <lcd_send_data+0xdc>)
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d116      	bne.n	8007836 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8007808:	2300      	movs	r3, #0
 800780a:	73fb      	strb	r3, [r7, #15]
 800780c:	e00f      	b.n	800782e <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 800780e:	7bfb      	ldrb	r3, [r7, #15]
 8007810:	3310      	adds	r3, #16
 8007812:	443b      	add	r3, r7
 8007814:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007818:	7bfb      	ldrb	r3, [r7, #15]
 800781a:	f022 0208 	bic.w	r2, r2, #8
 800781e:	b2d2      	uxtb	r2, r2
 8007820:	3310      	adds	r3, #16
 8007822:	443b      	add	r3, r7
 8007824:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007828:	7bfb      	ldrb	r3, [r7, #15]
 800782a:	3301      	adds	r3, #1
 800782c:	73fb      	strb	r3, [r7, #15]
 800782e:	7bfb      	ldrb	r3, [r7, #15]
 8007830:	2b03      	cmp	r3, #3
 8007832:	d9ec      	bls.n	800780e <lcd_send_data+0x6a>
 8007834:	e015      	b.n	8007862 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8007836:	2300      	movs	r3, #0
 8007838:	73bb      	strb	r3, [r7, #14]
 800783a:	e00f      	b.n	800785c <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 800783c:	7bbb      	ldrb	r3, [r7, #14]
 800783e:	3310      	adds	r3, #16
 8007840:	443b      	add	r3, r7
 8007842:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007846:	7bbb      	ldrb	r3, [r7, #14]
 8007848:	f042 0208 	orr.w	r2, r2, #8
 800784c:	b2d2      	uxtb	r2, r2
 800784e:	3310      	adds	r3, #16
 8007850:	443b      	add	r3, r7
 8007852:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8007856:	7bbb      	ldrb	r3, [r7, #14]
 8007858:	3301      	adds	r3, #1
 800785a:	73bb      	strb	r3, [r7, #14]
 800785c:	7bbb      	ldrb	r3, [r7, #14]
 800785e:	2b03      	cmp	r3, #3
 8007860:	d9ec      	bls.n	800783c <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007862:	f107 0208 	add.w	r2, r7, #8
 8007866:	2364      	movs	r3, #100	; 0x64
 8007868:	9300      	str	r3, [sp, #0]
 800786a:	2304      	movs	r3, #4
 800786c:	214e      	movs	r1, #78	; 0x4e
 800786e:	4803      	ldr	r0, [pc, #12]	; (800787c <lcd_send_data+0xd8>)
 8007870:	f001 fda2 	bl	80093b8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007874:	bf00      	nop
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	20000284 	.word	0x20000284
 8007880:	20000258 	.word	0x20000258

08007884 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
	while (*str) {
 800788c:	e006      	b.n	800789c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	607a      	str	r2, [r7, #4]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff ff84 	bl	80077a4 <lcd_send_data>
	while (*str) {
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1f4      	bne.n	800788e <lcd_send_string+0xa>
	}
}
 80078a4:	bf00      	nop
 80078a6:	bf00      	nop
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
	...

080078b0 <lcd_send_char>:

void lcd_send_char(char ch) {
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af02      	add	r7, sp, #8
 80078b6:	4603      	mov	r3, r0
 80078b8:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 80078ba:	79fb      	ldrb	r3, [r7, #7]
 80078bc:	f023 030f 	bic.w	r3, r3, #15
 80078c0:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 80078c2:	79fb      	ldrb	r3, [r7, #7]
 80078c4:	011b      	lsls	r3, r3, #4
 80078c6:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80078c8:	7b7b      	ldrb	r3, [r7, #13]
 80078ca:	f043 030d 	orr.w	r3, r3, #13
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 80078d2:	7b7b      	ldrb	r3, [r7, #13]
 80078d4:	f043 0309 	orr.w	r3, r3, #9
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80078dc:	7b3b      	ldrb	r3, [r7, #12]
 80078de:	f043 030d 	orr.w	r3, r3, #13
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80078e6:	7b3b      	ldrb	r3, [r7, #12]
 80078e8:	f043 0309 	orr.w	r3, r3, #9
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80078f0:	bf00      	nop
 80078f2:	4825      	ldr	r0, [pc, #148]	; (8007988 <lcd_send_char+0xd8>)
 80078f4:	f002 f9cd 	bl	8009c92 <HAL_I2C_GetError>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b04      	cmp	r3, #4
 80078fc:	d0f9      	beq.n	80078f2 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80078fe:	bf00      	nop
 8007900:	4821      	ldr	r0, [pc, #132]	; (8007988 <lcd_send_char+0xd8>)
 8007902:	f002 f9b9 	bl	8009c78 <HAL_I2C_GetState>
 8007906:	4603      	mov	r3, r0
 8007908:	2b20      	cmp	r3, #32
 800790a:	d1f9      	bne.n	8007900 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 800790c:	4b1f      	ldr	r3, [pc, #124]	; (800798c <lcd_send_char+0xdc>)
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d116      	bne.n	8007942 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007914:	2300      	movs	r3, #0
 8007916:	73fb      	strb	r3, [r7, #15]
 8007918:	e00f      	b.n	800793a <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800791a:	7bfb      	ldrb	r3, [r7, #15]
 800791c:	3310      	adds	r3, #16
 800791e:	443b      	add	r3, r7
 8007920:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007924:	7bfb      	ldrb	r3, [r7, #15]
 8007926:	f022 0208 	bic.w	r2, r2, #8
 800792a:	b2d2      	uxtb	r2, r2
 800792c:	3310      	adds	r3, #16
 800792e:	443b      	add	r3, r7
 8007930:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	3301      	adds	r3, #1
 8007938:	73fb      	strb	r3, [r7, #15]
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	2b03      	cmp	r3, #3
 800793e:	d9ec      	bls.n	800791a <lcd_send_char+0x6a>
 8007940:	e015      	b.n	800796e <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007942:	2300      	movs	r3, #0
 8007944:	73bb      	strb	r3, [r7, #14]
 8007946:	e00f      	b.n	8007968 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	3310      	adds	r3, #16
 800794c:	443b      	add	r3, r7
 800794e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	f042 0208 	orr.w	r2, r2, #8
 8007958:	b2d2      	uxtb	r2, r2
 800795a:	3310      	adds	r3, #16
 800795c:	443b      	add	r3, r7
 800795e:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007962:	7bbb      	ldrb	r3, [r7, #14]
 8007964:	3301      	adds	r3, #1
 8007966:	73bb      	strb	r3, [r7, #14]
 8007968:	7bbb      	ldrb	r3, [r7, #14]
 800796a:	2b03      	cmp	r3, #3
 800796c:	d9ec      	bls.n	8007948 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 800796e:	f107 0208 	add.w	r2, r7, #8
 8007972:	2364      	movs	r3, #100	; 0x64
 8007974:	9300      	str	r3, [sp, #0]
 8007976:	2304      	movs	r3, #4
 8007978:	214e      	movs	r1, #78	; 0x4e
 800797a:	4803      	ldr	r0, [pc, #12]	; (8007988 <lcd_send_char+0xd8>)
 800797c:	f001 fd1c 	bl	80093b8 <HAL_I2C_Master_Transmit>
}
 8007980:	bf00      	nop
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	20000284 	.word	0x20000284
 800798c:	20000258 	.word	0x20000258

08007990 <lcd_init>:

void lcd_init (void) {
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007994:	2002      	movs	r0, #2
 8007996:	f7ff fe95 	bl	80076c4 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800799a:	2028      	movs	r0, #40	; 0x28
 800799c:	f7ff fe92 	bl	80076c4 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80079a0:	200c      	movs	r0, #12
 80079a2:	f7ff fe8f 	bl	80076c4 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80079a6:	2080      	movs	r0, #128	; 0x80
 80079a8:	f7ff fe8c 	bl	80076c4 <lcd_send_cmd>
	lcd_backlight(1);
 80079ac:	2001      	movs	r0, #1
 80079ae:	f000 f86d 	bl	8007a8c <lcd_backlight>
}
 80079b2:	bf00      	nop
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b082      	sub	sp, #8
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	4603      	mov	r3, r0
 80079be:	460a      	mov	r2, r1
 80079c0:	71fb      	strb	r3, [r7, #7]
 80079c2:	4613      	mov	r3, r2
 80079c4:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	d106      	bne.n	80079da <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 80079cc:	79bb      	ldrb	r3, [r7, #6]
 80079ce:	337f      	adds	r3, #127	; 0x7f
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff fe76 	bl	80076c4 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80079d8:	e008      	b.n	80079ec <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80079da:	79fb      	ldrb	r3, [r7, #7]
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d105      	bne.n	80079ec <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80079e0:	79bb      	ldrb	r3, [r7, #6]
 80079e2:	3b41      	subs	r3, #65	; 0x41
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7ff fe6c 	bl	80076c4 <lcd_send_cmd>
}
 80079ec:	bf00      	nop
 80079ee:	3708      	adds	r7, #8
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	603a      	str	r2, [r7, #0]
 80079fe:	71fb      	strb	r3, [r7, #7]
 8007a00:	460b      	mov	r3, r1
 8007a02:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007a04:	79ba      	ldrb	r2, [r7, #6]
 8007a06:	79fb      	ldrb	r3, [r7, #7]
 8007a08:	4611      	mov	r1, r2
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff ffd3 	bl	80079b6 <lcd_gotoxy>
	lcd_send_string(str);
 8007a10:	6838      	ldr	r0, [r7, #0]
 8007a12:	f7ff ff37 	bl	8007884 <lcd_send_string>
}
 8007a16:	bf00      	nop
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b082      	sub	sp, #8
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	4603      	mov	r3, r0
 8007a26:	71fb      	strb	r3, [r7, #7]
 8007a28:	460b      	mov	r3, r1
 8007a2a:	71bb      	strb	r3, [r7, #6]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007a30:	79ba      	ldrb	r2, [r7, #6]
 8007a32:	79fb      	ldrb	r3, [r7, #7]
 8007a34:	4611      	mov	r1, r2
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff ffbd 	bl	80079b6 <lcd_gotoxy>
    lcd_send_char(ch);
 8007a3c:	797b      	ldrb	r3, [r7, #5]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7ff ff36 	bl	80078b0 <lcd_send_char>
}
 8007a44:	bf00      	nop
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <lcd_clear>:

void lcd_clear(void) {
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007a50:	2001      	movs	r0, #1
 8007a52:	f7ff fe37 	bl	80076c4 <lcd_send_cmd>
    HAL_Delay(2);
 8007a56:	2002      	movs	r0, #2
 8007a58:	f000 fd22 	bl	80084a0 <HAL_Delay>
}
 8007a5c:	bf00      	nop
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	4603      	mov	r3, r0
 8007a68:	460a      	mov	r2, r1
 8007a6a:	71fb      	strb	r3, [r7, #7]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007a70:	79ba      	ldrb	r2, [r7, #6]
 8007a72:	79fb      	ldrb	r3, [r7, #7]
 8007a74:	4611      	mov	r1, r2
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff ff9d 	bl	80079b6 <lcd_gotoxy>

    lcd_send_char(' ');
 8007a7c:	2020      	movs	r0, #32
 8007a7e:	f7ff ff17 	bl	80078b0 <lcd_send_char>
}
 8007a82:	bf00      	nop
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
	...

08007a8c <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007a96:	4a05      	ldr	r2, [pc, #20]	; (8007aac <lcd_backlight+0x20>)
 8007a98:	79fb      	ldrb	r3, [r7, #7]
 8007a9a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007a9c:	2000      	movs	r0, #0
 8007a9e:	f7ff fe11 	bl	80076c4 <lcd_send_cmd>
}
 8007aa2:	bf00      	nop
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	20000258 	.word	0x20000258

08007ab0 <lcd_cursor>:

void lcd_cursor(int state) {
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d106      	bne.n	8007acc <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007abe:	200e      	movs	r0, #14
 8007ac0:	f7ff fe00 	bl	80076c4 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007ac4:	200f      	movs	r0, #15
 8007ac6:	f7ff fdfd 	bl	80076c4 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007aca:	e002      	b.n	8007ad2 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007acc:	200c      	movs	r0, #12
 8007ace:	f7ff fdf9 	bl	80076c4 <lcd_send_cmd>
}
 8007ad2:	bf00      	nop
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}
	...

08007adc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007ae4:	4b04      	ldr	r3, [pc, #16]	; (8007af8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	4a03      	ldr	r2, [pc, #12]	; (8007af8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007aec:	6013      	str	r3, [r2, #0]
}
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bc80      	pop	{r7}
 8007af6:	4770      	bx	lr
 8007af8:	200001d0 	.word	0x200001d0

08007afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007b00:	f000 fc6c 	bl	80083dc <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007b04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007b08:	f000 fcca 	bl	80084a0 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007b0c:	f000 f89c 	bl	8007c48 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007b10:	f000 f9be 	bl	8007e90 <MX_GPIO_Init>
  MX_CAN_Init();
 8007b14:	f000 f8de 	bl	8007cd4 <MX_CAN_Init>
  MX_I2C1_Init();
 8007b18:	f000 f910 	bl	8007d3c <MX_I2C1_Init>
  MX_TIM1_Init();
 8007b1c:	f000 f93c 	bl	8007d98 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007b20:	f000 f98c 	bl	8007e3c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007b24:	2201      	movs	r2, #1
 8007b26:	2140      	movs	r1, #64	; 0x40
 8007b28:	483e      	ldr	r0, [pc, #248]	; (8007c24 <main+0x128>)
 8007b2a:	f001 faa0 	bl	800906e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007b2e:	2201      	movs	r2, #1
 8007b30:	2180      	movs	r1, #128	; 0x80
 8007b32:	483c      	ldr	r0, [pc, #240]	; (8007c24 <main+0x128>)
 8007b34:	f001 fa9b 	bl	800906e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007b38:	200a      	movs	r0, #10
 8007b3a:	f000 fcb1 	bl	80084a0 <HAL_Delay>
  lcd_init();
 8007b3e:	f7ff ff27 	bl	8007990 <lcd_init>
  HAL_Delay(10);
 8007b42:	200a      	movs	r0, #10
 8007b44:	f000 fcac 	bl	80084a0 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007b48:	4837      	ldr	r0, [pc, #220]	; (8007c28 <main+0x12c>)
 8007b4a:	f003 f943 	bl	800add4 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007b4e:	bf00      	nop
 8007b50:	4836      	ldr	r0, [pc, #216]	; (8007c2c <main+0x130>)
 8007b52:	f002 f89e 	bl	8009c92 <HAL_I2C_GetError>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b04      	cmp	r3, #4
 8007b5a:	d0f9      	beq.n	8007b50 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007b5c:	bf00      	nop
 8007b5e:	4833      	ldr	r0, [pc, #204]	; (8007c2c <main+0x130>)
 8007b60:	f002 f88a 	bl	8009c78 <HAL_I2C_GetState>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b20      	cmp	r3, #32
 8007b68:	d1f9      	bne.n	8007b5e <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b70:	482c      	ldr	r0, [pc, #176]	; (8007c24 <main+0x128>)
 8007b72:	f001 fa7c 	bl	800906e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007b76:	2200      	movs	r2, #0
 8007b78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b7c:	4829      	ldr	r0, [pc, #164]	; (8007c24 <main+0x128>)
 8007b7e:	f001 fa76 	bl	800906e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007b82:	2200      	movs	r2, #0
 8007b84:	2104      	movs	r1, #4
 8007b86:	4827      	ldr	r0, [pc, #156]	; (8007c24 <main+0x128>)
 8007b88:	f001 fa71 	bl	800906e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	2102      	movs	r1, #2
 8007b90:	4824      	ldr	r0, [pc, #144]	; (8007c24 <main+0x128>)
 8007b92:	f001 fa6c 	bl	800906e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007b96:	2200      	movs	r2, #0
 8007b98:	2101      	movs	r1, #1
 8007b9a:	4822      	ldr	r0, [pc, #136]	; (8007c24 <main+0x128>)
 8007b9c:	f001 fa67 	bl	800906e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	2120      	movs	r1, #32
 8007ba4:	4822      	ldr	r0, [pc, #136]	; (8007c30 <main+0x134>)
 8007ba6:	f001 fa62 	bl	800906e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007baa:	2200      	movs	r2, #0
 8007bac:	2110      	movs	r1, #16
 8007bae:	4820      	ldr	r0, [pc, #128]	; (8007c30 <main+0x134>)
 8007bb0:	f001 fa5d 	bl	800906e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	2180      	movs	r1, #128	; 0x80
 8007bb8:	481e      	ldr	r0, [pc, #120]	; (8007c34 <main+0x138>)
 8007bba:	f001 fa58 	bl	800906e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	2140      	movs	r1, #64	; 0x40
 8007bc2:	481c      	ldr	r0, [pc, #112]	; (8007c34 <main+0x138>)
 8007bc4:	f001 fa53 	bl	800906e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007bc8:	2200      	movs	r2, #0
 8007bca:	2120      	movs	r1, #32
 8007bcc:	4819      	ldr	r0, [pc, #100]	; (8007c34 <main+0x138>)
 8007bce:	f001 fa4e 	bl	800906e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	2110      	movs	r1, #16
 8007bd6:	4817      	ldr	r0, [pc, #92]	; (8007c34 <main+0x138>)
 8007bd8:	f001 fa49 	bl	800906e <HAL_GPIO_WritePin>

  i2cTest();
 8007bdc:	f7f8 ff98 	bl	8000b10 <i2cTest>
  HAL_Delay(100);
 8007be0:	2064      	movs	r0, #100	; 0x64
 8007be2:	f000 fc5d 	bl	80084a0 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007be6:	4a14      	ldr	r2, [pc, #80]	; (8007c38 <main+0x13c>)
 8007be8:	2101      	movs	r1, #1
 8007bea:	2001      	movs	r0, #1
 8007bec:	f7ff ff02 	bl	80079f4 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007bf0:	4a12      	ldr	r2, [pc, #72]	; (8007c3c <main+0x140>)
 8007bf2:	2101      	movs	r1, #1
 8007bf4:	2002      	movs	r0, #2
 8007bf6:	f7ff fefd 	bl	80079f4 <lcd_print>
  HAL_Delay(1000);
 8007bfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007bfe:	f000 fc4f 	bl	80084a0 <HAL_Delay>
  lcd_clear();
 8007c02:	f7ff ff23 	bl	8007a4c <lcd_clear>

  eepromKontrol();
 8007c06:	f7f8 fb15 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007c0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c0e:	f000 fc47 	bl	80084a0 <HAL_Delay>

  backLightTimer = millis;
 8007c12:	4b0b      	ldr	r3, [pc, #44]	; (8007c40 <main+0x144>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a0b      	ldr	r2, [pc, #44]	; (8007c44 <main+0x148>)
 8007c18:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007c1a:	f7ff fd23 	bl	8007664 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007c1e:	f7fe fdcb 	bl	80067b8 <mainLoop>
 8007c22:	e7fc      	b.n	8007c1e <main+0x122>
 8007c24:	40010c00 	.word	0x40010c00
 8007c28:	200002d8 	.word	0x200002d8
 8007c2c:	20000284 	.word	0x20000284
 8007c30:	40011000 	.word	0x40011000
 8007c34:	40010800 	.word	0x40010800
 8007c38:	0800da74 	.word	0x0800da74
 8007c3c:	0800da88 	.word	0x0800da88
 8007c40:	200001d0 	.word	0x200001d0
 8007c44:	200001ec 	.word	0x200001ec

08007c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b090      	sub	sp, #64	; 0x40
 8007c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007c4e:	f107 0318 	add.w	r3, r7, #24
 8007c52:	2228      	movs	r2, #40	; 0x28
 8007c54:	2100      	movs	r1, #0
 8007c56:	4618      	mov	r0, r3
 8007c58:	f004 fb79 	bl	800c34e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007c5c:	1d3b      	adds	r3, r7, #4
 8007c5e:	2200      	movs	r2, #0
 8007c60:	601a      	str	r2, [r3, #0]
 8007c62:	605a      	str	r2, [r3, #4]
 8007c64:	609a      	str	r2, [r3, #8]
 8007c66:	60da      	str	r2, [r3, #12]
 8007c68:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007c6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c72:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007c74:	2300      	movs	r3, #0
 8007c76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007c7c:	2302      	movs	r3, #2
 8007c7e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007c80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007c86:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007c8c:	f107 0318 	add.w	r3, r7, #24
 8007c90:	4618      	mov	r0, r3
 8007c92:	f002 fc3f 	bl	800a514 <HAL_RCC_OscConfig>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d001      	beq.n	8007ca0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007c9c:	f000 f9a2 	bl	8007fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007ca0:	230f      	movs	r3, #15
 8007ca2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007cb6:	1d3b      	adds	r3, r7, #4
 8007cb8:	2102      	movs	r1, #2
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f002 feac 	bl	800aa18 <HAL_RCC_ClockConfig>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d001      	beq.n	8007cca <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007cc6:	f000 f98d 	bl	8007fe4 <Error_Handler>
  }
}
 8007cca:	bf00      	nop
 8007ccc:	3740      	adds	r7, #64	; 0x40
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
	...

08007cd4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007cd8:	4b16      	ldr	r3, [pc, #88]	; (8007d34 <MX_CAN_Init+0x60>)
 8007cda:	4a17      	ldr	r2, [pc, #92]	; (8007d38 <MX_CAN_Init+0x64>)
 8007cdc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007cde:	4b15      	ldr	r3, [pc, #84]	; (8007d34 <MX_CAN_Init+0x60>)
 8007ce0:	2210      	movs	r2, #16
 8007ce2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007ce4:	4b13      	ldr	r3, [pc, #76]	; (8007d34 <MX_CAN_Init+0x60>)
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007cea:	4b12      	ldr	r3, [pc, #72]	; (8007d34 <MX_CAN_Init+0x60>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007cf0:	4b10      	ldr	r3, [pc, #64]	; (8007d34 <MX_CAN_Init+0x60>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007cf6:	4b0f      	ldr	r3, [pc, #60]	; (8007d34 <MX_CAN_Init+0x60>)
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007cfc:	4b0d      	ldr	r3, [pc, #52]	; (8007d34 <MX_CAN_Init+0x60>)
 8007cfe:	2200      	movs	r2, #0
 8007d00:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007d02:	4b0c      	ldr	r3, [pc, #48]	; (8007d34 <MX_CAN_Init+0x60>)
 8007d04:	2200      	movs	r2, #0
 8007d06:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007d08:	4b0a      	ldr	r3, [pc, #40]	; (8007d34 <MX_CAN_Init+0x60>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007d0e:	4b09      	ldr	r3, [pc, #36]	; (8007d34 <MX_CAN_Init+0x60>)
 8007d10:	2200      	movs	r2, #0
 8007d12:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007d14:	4b07      	ldr	r3, [pc, #28]	; (8007d34 <MX_CAN_Init+0x60>)
 8007d16:	2200      	movs	r2, #0
 8007d18:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007d1a:	4b06      	ldr	r3, [pc, #24]	; (8007d34 <MX_CAN_Init+0x60>)
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007d20:	4804      	ldr	r0, [pc, #16]	; (8007d34 <MX_CAN_Init+0x60>)
 8007d22:	f000 fbe1 	bl	80084e8 <HAL_CAN_Init>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d001      	beq.n	8007d30 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007d2c:	f000 f95a 	bl	8007fe4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007d30:	bf00      	nop
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	2000025c 	.word	0x2000025c
 8007d38:	40006400 	.word	0x40006400

08007d3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007d40:	4b12      	ldr	r3, [pc, #72]	; (8007d8c <MX_I2C1_Init+0x50>)
 8007d42:	4a13      	ldr	r2, [pc, #76]	; (8007d90 <MX_I2C1_Init+0x54>)
 8007d44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007d46:	4b11      	ldr	r3, [pc, #68]	; (8007d8c <MX_I2C1_Init+0x50>)
 8007d48:	4a12      	ldr	r2, [pc, #72]	; (8007d94 <MX_I2C1_Init+0x58>)
 8007d4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007d4c:	4b0f      	ldr	r3, [pc, #60]	; (8007d8c <MX_I2C1_Init+0x50>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007d52:	4b0e      	ldr	r3, [pc, #56]	; (8007d8c <MX_I2C1_Init+0x50>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007d58:	4b0c      	ldr	r3, [pc, #48]	; (8007d8c <MX_I2C1_Init+0x50>)
 8007d5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007d5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007d60:	4b0a      	ldr	r3, [pc, #40]	; (8007d8c <MX_I2C1_Init+0x50>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007d66:	4b09      	ldr	r3, [pc, #36]	; (8007d8c <MX_I2C1_Init+0x50>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007d6c:	4b07      	ldr	r3, [pc, #28]	; (8007d8c <MX_I2C1_Init+0x50>)
 8007d6e:	2200      	movs	r2, #0
 8007d70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007d72:	4b06      	ldr	r3, [pc, #24]	; (8007d8c <MX_I2C1_Init+0x50>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007d78:	4804      	ldr	r0, [pc, #16]	; (8007d8c <MX_I2C1_Init+0x50>)
 8007d7a:	f001 f9a9 	bl	80090d0 <HAL_I2C_Init>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007d84:	f000 f92e 	bl	8007fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007d88:	bf00      	nop
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	20000284 	.word	0x20000284
 8007d90:	40005400 	.word	0x40005400
 8007d94:	00061a80 	.word	0x00061a80

08007d98 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007d9e:	f107 0308 	add.w	r3, r7, #8
 8007da2:	2200      	movs	r2, #0
 8007da4:	601a      	str	r2, [r3, #0]
 8007da6:	605a      	str	r2, [r3, #4]
 8007da8:	609a      	str	r2, [r3, #8]
 8007daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007dac:	463b      	mov	r3, r7
 8007dae:	2200      	movs	r2, #0
 8007db0:	601a      	str	r2, [r3, #0]
 8007db2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007db4:	4b1f      	ldr	r3, [pc, #124]	; (8007e34 <MX_TIM1_Init+0x9c>)
 8007db6:	4a20      	ldr	r2, [pc, #128]	; (8007e38 <MX_TIM1_Init+0xa0>)
 8007db8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007dba:	4b1e      	ldr	r3, [pc, #120]	; (8007e34 <MX_TIM1_Init+0x9c>)
 8007dbc:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007dc0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007dc2:	4b1c      	ldr	r3, [pc, #112]	; (8007e34 <MX_TIM1_Init+0x9c>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007dc8:	4b1a      	ldr	r3, [pc, #104]	; (8007e34 <MX_TIM1_Init+0x9c>)
 8007dca:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007dce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007dd0:	4b18      	ldr	r3, [pc, #96]	; (8007e34 <MX_TIM1_Init+0x9c>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007dd6:	4b17      	ldr	r3, [pc, #92]	; (8007e34 <MX_TIM1_Init+0x9c>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ddc:	4b15      	ldr	r3, [pc, #84]	; (8007e34 <MX_TIM1_Init+0x9c>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007de2:	4814      	ldr	r0, [pc, #80]	; (8007e34 <MX_TIM1_Init+0x9c>)
 8007de4:	f002 ffa6 	bl	800ad34 <HAL_TIM_Base_Init>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007dee:	f000 f8f9 	bl	8007fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007df6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007df8:	f107 0308 	add.w	r3, r7, #8
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	480d      	ldr	r0, [pc, #52]	; (8007e34 <MX_TIM1_Init+0x9c>)
 8007e00:	f003 f950 	bl	800b0a4 <HAL_TIM_ConfigClockSource>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007e0a:	f000 f8eb 	bl	8007fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e12:	2300      	movs	r3, #0
 8007e14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007e16:	463b      	mov	r3, r7
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4806      	ldr	r0, [pc, #24]	; (8007e34 <MX_TIM1_Init+0x9c>)
 8007e1c:	f003 fb3e 	bl	800b49c <HAL_TIMEx_MasterConfigSynchronization>
 8007e20:	4603      	mov	r3, r0
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d001      	beq.n	8007e2a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007e26:	f000 f8dd 	bl	8007fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007e2a:	bf00      	nop
 8007e2c:	3718      	adds	r7, #24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	200002d8 	.word	0x200002d8
 8007e38:	40012c00 	.word	0x40012c00

08007e3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007e40:	4b11      	ldr	r3, [pc, #68]	; (8007e88 <MX_USART1_UART_Init+0x4c>)
 8007e42:	4a12      	ldr	r2, [pc, #72]	; (8007e8c <MX_USART1_UART_Init+0x50>)
 8007e44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007e46:	4b10      	ldr	r3, [pc, #64]	; (8007e88 <MX_USART1_UART_Init+0x4c>)
 8007e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007e4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007e4e:	4b0e      	ldr	r3, [pc, #56]	; (8007e88 <MX_USART1_UART_Init+0x4c>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007e54:	4b0c      	ldr	r3, [pc, #48]	; (8007e88 <MX_USART1_UART_Init+0x4c>)
 8007e56:	2200      	movs	r2, #0
 8007e58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007e5a:	4b0b      	ldr	r3, [pc, #44]	; (8007e88 <MX_USART1_UART_Init+0x4c>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007e60:	4b09      	ldr	r3, [pc, #36]	; (8007e88 <MX_USART1_UART_Init+0x4c>)
 8007e62:	220c      	movs	r2, #12
 8007e64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007e66:	4b08      	ldr	r3, [pc, #32]	; (8007e88 <MX_USART1_UART_Init+0x4c>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007e6c:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <MX_USART1_UART_Init+0x4c>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007e72:	4805      	ldr	r0, [pc, #20]	; (8007e88 <MX_USART1_UART_Init+0x4c>)
 8007e74:	f003 fb90 	bl	800b598 <HAL_UART_Init>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d001      	beq.n	8007e82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007e7e:	f000 f8b1 	bl	8007fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007e82:	bf00      	nop
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20000320 	.word	0x20000320
 8007e8c:	40013800 	.word	0x40013800

08007e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b088      	sub	sp, #32
 8007e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e96:	f107 0310 	add.w	r3, r7, #16
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	601a      	str	r2, [r3, #0]
 8007e9e:	605a      	str	r2, [r3, #4]
 8007ea0:	609a      	str	r2, [r3, #8]
 8007ea2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ea4:	4b4b      	ldr	r3, [pc, #300]	; (8007fd4 <MX_GPIO_Init+0x144>)
 8007ea6:	699b      	ldr	r3, [r3, #24]
 8007ea8:	4a4a      	ldr	r2, [pc, #296]	; (8007fd4 <MX_GPIO_Init+0x144>)
 8007eaa:	f043 0310 	orr.w	r3, r3, #16
 8007eae:	6193      	str	r3, [r2, #24]
 8007eb0:	4b48      	ldr	r3, [pc, #288]	; (8007fd4 <MX_GPIO_Init+0x144>)
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	f003 0310 	and.w	r3, r3, #16
 8007eb8:	60fb      	str	r3, [r7, #12]
 8007eba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007ebc:	4b45      	ldr	r3, [pc, #276]	; (8007fd4 <MX_GPIO_Init+0x144>)
 8007ebe:	699b      	ldr	r3, [r3, #24]
 8007ec0:	4a44      	ldr	r2, [pc, #272]	; (8007fd4 <MX_GPIO_Init+0x144>)
 8007ec2:	f043 0320 	orr.w	r3, r3, #32
 8007ec6:	6193      	str	r3, [r2, #24]
 8007ec8:	4b42      	ldr	r3, [pc, #264]	; (8007fd4 <MX_GPIO_Init+0x144>)
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	f003 0320 	and.w	r3, r3, #32
 8007ed0:	60bb      	str	r3, [r7, #8]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ed4:	4b3f      	ldr	r3, [pc, #252]	; (8007fd4 <MX_GPIO_Init+0x144>)
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	4a3e      	ldr	r2, [pc, #248]	; (8007fd4 <MX_GPIO_Init+0x144>)
 8007eda:	f043 0304 	orr.w	r3, r3, #4
 8007ede:	6193      	str	r3, [r2, #24]
 8007ee0:	4b3c      	ldr	r3, [pc, #240]	; (8007fd4 <MX_GPIO_Init+0x144>)
 8007ee2:	699b      	ldr	r3, [r3, #24]
 8007ee4:	f003 0304 	and.w	r3, r3, #4
 8007ee8:	607b      	str	r3, [r7, #4]
 8007eea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007eec:	4b39      	ldr	r3, [pc, #228]	; (8007fd4 <MX_GPIO_Init+0x144>)
 8007eee:	699b      	ldr	r3, [r3, #24]
 8007ef0:	4a38      	ldr	r2, [pc, #224]	; (8007fd4 <MX_GPIO_Init+0x144>)
 8007ef2:	f043 0308 	orr.w	r3, r3, #8
 8007ef6:	6193      	str	r3, [r2, #24]
 8007ef8:	4b36      	ldr	r3, [pc, #216]	; (8007fd4 <MX_GPIO_Init+0x144>)
 8007efa:	699b      	ldr	r3, [r3, #24]
 8007efc:	f003 0308 	and.w	r3, r3, #8
 8007f00:	603b      	str	r3, [r7, #0]
 8007f02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8007f04:	2200      	movs	r2, #0
 8007f06:	21f0      	movs	r1, #240	; 0xf0
 8007f08:	4833      	ldr	r0, [pc, #204]	; (8007fd8 <MX_GPIO_Init+0x148>)
 8007f0a:	f001 f8b0 	bl	800906e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f241 0130 	movw	r1, #4144	; 0x1030
 8007f14:	4831      	ldr	r0, [pc, #196]	; (8007fdc <MX_GPIO_Init+0x14c>)
 8007f16:	f001 f8aa 	bl	800906e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f640 4107 	movw	r1, #3079	; 0xc07
 8007f20:	482f      	ldr	r0, [pc, #188]	; (8007fe0 <MX_GPIO_Init+0x150>)
 8007f22:	f001 f8a4 	bl	800906e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8007f26:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8007f2a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f30:	2300      	movs	r3, #0
 8007f32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f34:	f107 0310 	add.w	r3, r7, #16
 8007f38:	4619      	mov	r1, r3
 8007f3a:	4828      	ldr	r0, [pc, #160]	; (8007fdc <MX_GPIO_Init+0x14c>)
 8007f3c:	f000 fe20 	bl	8008b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007f40:	f248 130f 	movw	r3, #33039	; 0x810f
 8007f44:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f46:	2300      	movs	r3, #0
 8007f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f4e:	f107 0310 	add.w	r3, r7, #16
 8007f52:	4619      	mov	r1, r3
 8007f54:	4820      	ldr	r0, [pc, #128]	; (8007fd8 <MX_GPIO_Init+0x148>)
 8007f56:	f000 fe13 	bl	8008b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8007f5a:	23f0      	movs	r3, #240	; 0xf0
 8007f5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f62:	2300      	movs	r3, #0
 8007f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f66:	2302      	movs	r3, #2
 8007f68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f6a:	f107 0310 	add.w	r3, r7, #16
 8007f6e:	4619      	mov	r1, r3
 8007f70:	4819      	ldr	r0, [pc, #100]	; (8007fd8 <MX_GPIO_Init+0x148>)
 8007f72:	f000 fe05 	bl	8008b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8007f76:	f241 0330 	movw	r3, #4144	; 0x1030
 8007f7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f80:	2300      	movs	r3, #0
 8007f82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f84:	2302      	movs	r3, #2
 8007f86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f88:	f107 0310 	add.w	r3, r7, #16
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	4813      	ldr	r0, [pc, #76]	; (8007fdc <MX_GPIO_Init+0x14c>)
 8007f90:	f000 fdf6 	bl	8008b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007f94:	f640 4307 	movw	r3, #3079	; 0xc07
 8007f98:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007fa2:	2302      	movs	r3, #2
 8007fa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fa6:	f107 0310 	add.w	r3, r7, #16
 8007faa:	4619      	mov	r1, r3
 8007fac:	480c      	ldr	r0, [pc, #48]	; (8007fe0 <MX_GPIO_Init+0x150>)
 8007fae:	f000 fde7 	bl	8008b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8007fb2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007fb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fc0:	f107 0310 	add.w	r3, r7, #16
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	4806      	ldr	r0, [pc, #24]	; (8007fe0 <MX_GPIO_Init+0x150>)
 8007fc8:	f000 fdda 	bl	8008b80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8007fcc:	bf00      	nop
 8007fce:	3720      	adds	r7, #32
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}
 8007fd4:	40021000 	.word	0x40021000
 8007fd8:	40010800 	.word	0x40010800
 8007fdc:	40011000 	.word	0x40011000
 8007fe0:	40010c00 	.word	0x40010c00

08007fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8007fe8:	bf00      	nop
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bc80      	pop	{r7}
 8007fee:	4770      	bx	lr

08007ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007ff6:	4b15      	ldr	r3, [pc, #84]	; (800804c <HAL_MspInit+0x5c>)
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	4a14      	ldr	r2, [pc, #80]	; (800804c <HAL_MspInit+0x5c>)
 8007ffc:	f043 0301 	orr.w	r3, r3, #1
 8008000:	6193      	str	r3, [r2, #24]
 8008002:	4b12      	ldr	r3, [pc, #72]	; (800804c <HAL_MspInit+0x5c>)
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	60bb      	str	r3, [r7, #8]
 800800c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800800e:	4b0f      	ldr	r3, [pc, #60]	; (800804c <HAL_MspInit+0x5c>)
 8008010:	69db      	ldr	r3, [r3, #28]
 8008012:	4a0e      	ldr	r2, [pc, #56]	; (800804c <HAL_MspInit+0x5c>)
 8008014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008018:	61d3      	str	r3, [r2, #28]
 800801a:	4b0c      	ldr	r3, [pc, #48]	; (800804c <HAL_MspInit+0x5c>)
 800801c:	69db      	ldr	r3, [r3, #28]
 800801e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008022:	607b      	str	r3, [r7, #4]
 8008024:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008026:	4b0a      	ldr	r3, [pc, #40]	; (8008050 <HAL_MspInit+0x60>)
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	60fb      	str	r3, [r7, #12]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008032:	60fb      	str	r3, [r7, #12]
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800803a:	60fb      	str	r3, [r7, #12]
 800803c:	4a04      	ldr	r2, [pc, #16]	; (8008050 <HAL_MspInit+0x60>)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008042:	bf00      	nop
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	bc80      	pop	{r7}
 800804a:	4770      	bx	lr
 800804c:	40021000 	.word	0x40021000
 8008050:	40010000 	.word	0x40010000

08008054 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b088      	sub	sp, #32
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800805c:	f107 0310 	add.w	r3, r7, #16
 8008060:	2200      	movs	r2, #0
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	605a      	str	r2, [r3, #4]
 8008066:	609a      	str	r2, [r3, #8]
 8008068:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a1c      	ldr	r2, [pc, #112]	; (80080e0 <HAL_CAN_MspInit+0x8c>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d131      	bne.n	80080d8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008074:	4b1b      	ldr	r3, [pc, #108]	; (80080e4 <HAL_CAN_MspInit+0x90>)
 8008076:	69db      	ldr	r3, [r3, #28]
 8008078:	4a1a      	ldr	r2, [pc, #104]	; (80080e4 <HAL_CAN_MspInit+0x90>)
 800807a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800807e:	61d3      	str	r3, [r2, #28]
 8008080:	4b18      	ldr	r3, [pc, #96]	; (80080e4 <HAL_CAN_MspInit+0x90>)
 8008082:	69db      	ldr	r3, [r3, #28]
 8008084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008088:	60fb      	str	r3, [r7, #12]
 800808a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800808c:	4b15      	ldr	r3, [pc, #84]	; (80080e4 <HAL_CAN_MspInit+0x90>)
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	4a14      	ldr	r2, [pc, #80]	; (80080e4 <HAL_CAN_MspInit+0x90>)
 8008092:	f043 0304 	orr.w	r3, r3, #4
 8008096:	6193      	str	r3, [r2, #24]
 8008098:	4b12      	ldr	r3, [pc, #72]	; (80080e4 <HAL_CAN_MspInit+0x90>)
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	f003 0304 	and.w	r3, r3, #4
 80080a0:	60bb      	str	r3, [r7, #8]
 80080a2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80080a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80080a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80080aa:	2300      	movs	r3, #0
 80080ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080ae:	2300      	movs	r3, #0
 80080b0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080b2:	f107 0310 	add.w	r3, r7, #16
 80080b6:	4619      	mov	r1, r3
 80080b8:	480b      	ldr	r0, [pc, #44]	; (80080e8 <HAL_CAN_MspInit+0x94>)
 80080ba:	f000 fd61 	bl	8008b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80080be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080c4:	2302      	movs	r3, #2
 80080c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80080c8:	2303      	movs	r3, #3
 80080ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080cc:	f107 0310 	add.w	r3, r7, #16
 80080d0:	4619      	mov	r1, r3
 80080d2:	4805      	ldr	r0, [pc, #20]	; (80080e8 <HAL_CAN_MspInit+0x94>)
 80080d4:	f000 fd54 	bl	8008b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80080d8:	bf00      	nop
 80080da:	3720      	adds	r7, #32
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	40006400 	.word	0x40006400
 80080e4:	40021000 	.word	0x40021000
 80080e8:	40010800 	.word	0x40010800

080080ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b088      	sub	sp, #32
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080f4:	f107 0310 	add.w	r3, r7, #16
 80080f8:	2200      	movs	r2, #0
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	605a      	str	r2, [r3, #4]
 80080fe:	609a      	str	r2, [r3, #8]
 8008100:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4a15      	ldr	r2, [pc, #84]	; (800815c <HAL_I2C_MspInit+0x70>)
 8008108:	4293      	cmp	r3, r2
 800810a:	d123      	bne.n	8008154 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800810c:	4b14      	ldr	r3, [pc, #80]	; (8008160 <HAL_I2C_MspInit+0x74>)
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	4a13      	ldr	r2, [pc, #76]	; (8008160 <HAL_I2C_MspInit+0x74>)
 8008112:	f043 0308 	orr.w	r3, r3, #8
 8008116:	6193      	str	r3, [r2, #24]
 8008118:	4b11      	ldr	r3, [pc, #68]	; (8008160 <HAL_I2C_MspInit+0x74>)
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	f003 0308 	and.w	r3, r3, #8
 8008120:	60fb      	str	r3, [r7, #12]
 8008122:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008124:	23c0      	movs	r3, #192	; 0xc0
 8008126:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008128:	2312      	movs	r3, #18
 800812a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800812c:	2303      	movs	r3, #3
 800812e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008130:	f107 0310 	add.w	r3, r7, #16
 8008134:	4619      	mov	r1, r3
 8008136:	480b      	ldr	r0, [pc, #44]	; (8008164 <HAL_I2C_MspInit+0x78>)
 8008138:	f000 fd22 	bl	8008b80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800813c:	4b08      	ldr	r3, [pc, #32]	; (8008160 <HAL_I2C_MspInit+0x74>)
 800813e:	69db      	ldr	r3, [r3, #28]
 8008140:	4a07      	ldr	r2, [pc, #28]	; (8008160 <HAL_I2C_MspInit+0x74>)
 8008142:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008146:	61d3      	str	r3, [r2, #28]
 8008148:	4b05      	ldr	r3, [pc, #20]	; (8008160 <HAL_I2C_MspInit+0x74>)
 800814a:	69db      	ldr	r3, [r3, #28]
 800814c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008150:	60bb      	str	r3, [r7, #8]
 8008152:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008154:	bf00      	nop
 8008156:	3720      	adds	r7, #32
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	40005400 	.word	0x40005400
 8008160:	40021000 	.word	0x40021000
 8008164:	40010c00 	.word	0x40010c00

08008168 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a0a      	ldr	r2, [pc, #40]	; (80081a0 <HAL_I2C_MspDeInit+0x38>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d10d      	bne.n	8008196 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800817a:	4b0a      	ldr	r3, [pc, #40]	; (80081a4 <HAL_I2C_MspDeInit+0x3c>)
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	4a09      	ldr	r2, [pc, #36]	; (80081a4 <HAL_I2C_MspDeInit+0x3c>)
 8008180:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008184:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008186:	2140      	movs	r1, #64	; 0x40
 8008188:	4807      	ldr	r0, [pc, #28]	; (80081a8 <HAL_I2C_MspDeInit+0x40>)
 800818a:	f000 fe8d 	bl	8008ea8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800818e:	2180      	movs	r1, #128	; 0x80
 8008190:	4805      	ldr	r0, [pc, #20]	; (80081a8 <HAL_I2C_MspDeInit+0x40>)
 8008192:	f000 fe89 	bl	8008ea8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008196:	bf00      	nop
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	40005400 	.word	0x40005400
 80081a4:	40021000 	.word	0x40021000
 80081a8:	40010c00 	.word	0x40010c00

080081ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a0d      	ldr	r2, [pc, #52]	; (80081f0 <HAL_TIM_Base_MspInit+0x44>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d113      	bne.n	80081e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80081be:	4b0d      	ldr	r3, [pc, #52]	; (80081f4 <HAL_TIM_Base_MspInit+0x48>)
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	4a0c      	ldr	r2, [pc, #48]	; (80081f4 <HAL_TIM_Base_MspInit+0x48>)
 80081c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80081c8:	6193      	str	r3, [r2, #24]
 80081ca:	4b0a      	ldr	r3, [pc, #40]	; (80081f4 <HAL_TIM_Base_MspInit+0x48>)
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081d2:	60fb      	str	r3, [r7, #12]
 80081d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80081d6:	2200      	movs	r2, #0
 80081d8:	2100      	movs	r1, #0
 80081da:	2019      	movs	r0, #25
 80081dc:	f000 fb57 	bl	800888e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80081e0:	2019      	movs	r0, #25
 80081e2:	f000 fb70 	bl	80088c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80081e6:	bf00      	nop
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	40012c00 	.word	0x40012c00
 80081f4:	40021000 	.word	0x40021000

080081f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b088      	sub	sp, #32
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008200:	f107 0310 	add.w	r3, r7, #16
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]
 8008208:	605a      	str	r2, [r3, #4]
 800820a:	609a      	str	r2, [r3, #8]
 800820c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a20      	ldr	r2, [pc, #128]	; (8008294 <HAL_UART_MspInit+0x9c>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d139      	bne.n	800828c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008218:	4b1f      	ldr	r3, [pc, #124]	; (8008298 <HAL_UART_MspInit+0xa0>)
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	4a1e      	ldr	r2, [pc, #120]	; (8008298 <HAL_UART_MspInit+0xa0>)
 800821e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008222:	6193      	str	r3, [r2, #24]
 8008224:	4b1c      	ldr	r3, [pc, #112]	; (8008298 <HAL_UART_MspInit+0xa0>)
 8008226:	699b      	ldr	r3, [r3, #24]
 8008228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800822c:	60fb      	str	r3, [r7, #12]
 800822e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008230:	4b19      	ldr	r3, [pc, #100]	; (8008298 <HAL_UART_MspInit+0xa0>)
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	4a18      	ldr	r2, [pc, #96]	; (8008298 <HAL_UART_MspInit+0xa0>)
 8008236:	f043 0304 	orr.w	r3, r3, #4
 800823a:	6193      	str	r3, [r2, #24]
 800823c:	4b16      	ldr	r3, [pc, #88]	; (8008298 <HAL_UART_MspInit+0xa0>)
 800823e:	699b      	ldr	r3, [r3, #24]
 8008240:	f003 0304 	and.w	r3, r3, #4
 8008244:	60bb      	str	r3, [r7, #8]
 8008246:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008248:	f44f 7300 	mov.w	r3, #512	; 0x200
 800824c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800824e:	2302      	movs	r3, #2
 8008250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008252:	2303      	movs	r3, #3
 8008254:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008256:	f107 0310 	add.w	r3, r7, #16
 800825a:	4619      	mov	r1, r3
 800825c:	480f      	ldr	r0, [pc, #60]	; (800829c <HAL_UART_MspInit+0xa4>)
 800825e:	f000 fc8f 	bl	8008b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008266:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008268:	2300      	movs	r3, #0
 800826a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800826c:	2300      	movs	r3, #0
 800826e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008270:	f107 0310 	add.w	r3, r7, #16
 8008274:	4619      	mov	r1, r3
 8008276:	4809      	ldr	r0, [pc, #36]	; (800829c <HAL_UART_MspInit+0xa4>)
 8008278:	f000 fc82 	bl	8008b80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800827c:	2200      	movs	r2, #0
 800827e:	2100      	movs	r1, #0
 8008280:	2025      	movs	r0, #37	; 0x25
 8008282:	f000 fb04 	bl	800888e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008286:	2025      	movs	r0, #37	; 0x25
 8008288:	f000 fb1d 	bl	80088c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800828c:	bf00      	nop
 800828e:	3720      	adds	r7, #32
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	40013800 	.word	0x40013800
 8008298:	40021000 	.word	0x40021000
 800829c:	40010800 	.word	0x40010800

080082a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80082a0:	b480      	push	{r7}
 80082a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80082a4:	e7fe      	b.n	80082a4 <NMI_Handler+0x4>

080082a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80082a6:	b480      	push	{r7}
 80082a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80082aa:	e7fe      	b.n	80082aa <HardFault_Handler+0x4>

080082ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80082ac:	b480      	push	{r7}
 80082ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80082b0:	e7fe      	b.n	80082b0 <MemManage_Handler+0x4>

080082b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80082b2:	b480      	push	{r7}
 80082b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80082b6:	e7fe      	b.n	80082b6 <BusFault_Handler+0x4>

080082b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80082b8:	b480      	push	{r7}
 80082ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80082bc:	e7fe      	b.n	80082bc <UsageFault_Handler+0x4>

080082be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80082be:	b480      	push	{r7}
 80082c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80082c2:	bf00      	nop
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bc80      	pop	{r7}
 80082c8:	4770      	bx	lr

080082ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80082ca:	b480      	push	{r7}
 80082cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80082ce:	bf00      	nop
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bc80      	pop	{r7}
 80082d4:	4770      	bx	lr

080082d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80082d6:	b480      	push	{r7}
 80082d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80082da:	bf00      	nop
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc80      	pop	{r7}
 80082e0:	4770      	bx	lr

080082e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80082e6:	f000 f8bf 	bl	8008468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80082ea:	bf00      	nop
 80082ec:	bd80      	pop	{r7, pc}
	...

080082f0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80082f4:	4802      	ldr	r0, [pc, #8]	; (8008300 <TIM1_UP_IRQHandler+0x10>)
 80082f6:	f002 fdcd 	bl	800ae94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80082fa:	bf00      	nop
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	200002d8 	.word	0x200002d8

08008304 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008308:	4802      	ldr	r0, [pc, #8]	; (8008314 <USART1_IRQHandler+0x10>)
 800830a:	f003 f9cb 	bl	800b6a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800830e:	bf00      	nop
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	20000320 	.word	0x20000320

08008318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008320:	4a14      	ldr	r2, [pc, #80]	; (8008374 <_sbrk+0x5c>)
 8008322:	4b15      	ldr	r3, [pc, #84]	; (8008378 <_sbrk+0x60>)
 8008324:	1ad3      	subs	r3, r2, r3
 8008326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800832c:	4b13      	ldr	r3, [pc, #76]	; (800837c <_sbrk+0x64>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d102      	bne.n	800833a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008334:	4b11      	ldr	r3, [pc, #68]	; (800837c <_sbrk+0x64>)
 8008336:	4a12      	ldr	r2, [pc, #72]	; (8008380 <_sbrk+0x68>)
 8008338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800833a:	4b10      	ldr	r3, [pc, #64]	; (800837c <_sbrk+0x64>)
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4413      	add	r3, r2
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	429a      	cmp	r2, r3
 8008346:	d207      	bcs.n	8008358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008348:	f004 f81a 	bl	800c380 <__errno>
 800834c:	4603      	mov	r3, r0
 800834e:	220c      	movs	r2, #12
 8008350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008356:	e009      	b.n	800836c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008358:	4b08      	ldr	r3, [pc, #32]	; (800837c <_sbrk+0x64>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800835e:	4b07      	ldr	r3, [pc, #28]	; (800837c <_sbrk+0x64>)
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4413      	add	r3, r2
 8008366:	4a05      	ldr	r2, [pc, #20]	; (800837c <_sbrk+0x64>)
 8008368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800836a:	68fb      	ldr	r3, [r7, #12]
}
 800836c:	4618      	mov	r0, r3
 800836e:	3718      	adds	r7, #24
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	2000c000 	.word	0x2000c000
 8008378:	00000400 	.word	0x00000400
 800837c:	20000368 	.word	0x20000368
 8008380:	200004b8 	.word	0x200004b8

08008384 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008384:	b480      	push	{r7}
 8008386:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008388:	bf00      	nop
 800838a:	46bd      	mov	sp, r7
 800838c:	bc80      	pop	{r7}
 800838e:	4770      	bx	lr

08008390 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008390:	480c      	ldr	r0, [pc, #48]	; (80083c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008392:	490d      	ldr	r1, [pc, #52]	; (80083c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008394:	4a0d      	ldr	r2, [pc, #52]	; (80083cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008398:	e002      	b.n	80083a0 <LoopCopyDataInit>

0800839a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800839a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800839c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800839e:	3304      	adds	r3, #4

080083a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80083a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80083a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80083a4:	d3f9      	bcc.n	800839a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80083a6:	4a0a      	ldr	r2, [pc, #40]	; (80083d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80083a8:	4c0a      	ldr	r4, [pc, #40]	; (80083d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80083aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80083ac:	e001      	b.n	80083b2 <LoopFillZerobss>

080083ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80083ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80083b0:	3204      	adds	r2, #4

080083b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80083b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80083b4:	d3fb      	bcc.n	80083ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80083b6:	f7ff ffe5 	bl	8008384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80083ba:	f003 ffe7 	bl	800c38c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80083be:	f7ff fb9d 	bl	8007afc <main>
  bx lr
 80083c2:	4770      	bx	lr
  ldr r0, =_sdata
 80083c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80083c8:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 80083cc:	0800db28 	.word	0x0800db28
  ldr r2, =_sbss
 80083d0:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 80083d4:	200004b8 	.word	0x200004b8

080083d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80083d8:	e7fe      	b.n	80083d8 <ADC1_2_IRQHandler>
	...

080083dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80083e0:	4b08      	ldr	r3, [pc, #32]	; (8008404 <HAL_Init+0x28>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a07      	ldr	r2, [pc, #28]	; (8008404 <HAL_Init+0x28>)
 80083e6:	f043 0310 	orr.w	r3, r3, #16
 80083ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80083ec:	2003      	movs	r0, #3
 80083ee:	f000 fa43 	bl	8008878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80083f2:	200f      	movs	r0, #15
 80083f4:	f000 f808 	bl	8008408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80083f8:	f7ff fdfa 	bl	8007ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	40022000 	.word	0x40022000

08008408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008410:	4b12      	ldr	r3, [pc, #72]	; (800845c <HAL_InitTick+0x54>)
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	4b12      	ldr	r3, [pc, #72]	; (8008460 <HAL_InitTick+0x58>)
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	4619      	mov	r1, r3
 800841a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800841e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008422:	fbb2 f3f3 	udiv	r3, r2, r3
 8008426:	4618      	mov	r0, r3
 8008428:	f000 fa5b 	bl	80088e2 <HAL_SYSTICK_Config>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e00e      	b.n	8008454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b0f      	cmp	r3, #15
 800843a:	d80a      	bhi.n	8008452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800843c:	2200      	movs	r2, #0
 800843e:	6879      	ldr	r1, [r7, #4]
 8008440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008444:	f000 fa23 	bl	800888e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008448:	4a06      	ldr	r2, [pc, #24]	; (8008464 <HAL_InitTick+0x5c>)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	e000      	b.n	8008454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
}
 8008454:	4618      	mov	r0, r3
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	200000a8 	.word	0x200000a8
 8008460:	200000b0 	.word	0x200000b0
 8008464:	200000ac 	.word	0x200000ac

08008468 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008468:	b480      	push	{r7}
 800846a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800846c:	4b05      	ldr	r3, [pc, #20]	; (8008484 <HAL_IncTick+0x1c>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	461a      	mov	r2, r3
 8008472:	4b05      	ldr	r3, [pc, #20]	; (8008488 <HAL_IncTick+0x20>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4413      	add	r3, r2
 8008478:	4a03      	ldr	r2, [pc, #12]	; (8008488 <HAL_IncTick+0x20>)
 800847a:	6013      	str	r3, [r2, #0]
}
 800847c:	bf00      	nop
 800847e:	46bd      	mov	sp, r7
 8008480:	bc80      	pop	{r7}
 8008482:	4770      	bx	lr
 8008484:	200000b0 	.word	0x200000b0
 8008488:	2000036c 	.word	0x2000036c

0800848c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800848c:	b480      	push	{r7}
 800848e:	af00      	add	r7, sp, #0
  return uwTick;
 8008490:	4b02      	ldr	r3, [pc, #8]	; (800849c <HAL_GetTick+0x10>)
 8008492:	681b      	ldr	r3, [r3, #0]
}
 8008494:	4618      	mov	r0, r3
 8008496:	46bd      	mov	sp, r7
 8008498:	bc80      	pop	{r7}
 800849a:	4770      	bx	lr
 800849c:	2000036c 	.word	0x2000036c

080084a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80084a8:	f7ff fff0 	bl	800848c <HAL_GetTick>
 80084ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084b8:	d005      	beq.n	80084c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80084ba:	4b0a      	ldr	r3, [pc, #40]	; (80084e4 <HAL_Delay+0x44>)
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	461a      	mov	r2, r3
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	4413      	add	r3, r2
 80084c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80084c6:	bf00      	nop
 80084c8:	f7ff ffe0 	bl	800848c <HAL_GetTick>
 80084cc:	4602      	mov	r2, r0
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d8f7      	bhi.n	80084c8 <HAL_Delay+0x28>
  {
  }
}
 80084d8:	bf00      	nop
 80084da:	bf00      	nop
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	200000b0 	.word	0x200000b0

080084e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d101      	bne.n	80084fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e0ed      	b.n	80086d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d102      	bne.n	800850c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff fda4 	bl	8008054 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f042 0201 	orr.w	r2, r2, #1
 800851a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800851c:	f7ff ffb6 	bl	800848c <HAL_GetTick>
 8008520:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008522:	e012      	b.n	800854a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008524:	f7ff ffb2 	bl	800848c <HAL_GetTick>
 8008528:	4602      	mov	r2, r0
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	2b0a      	cmp	r3, #10
 8008530:	d90b      	bls.n	800854a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008536:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2205      	movs	r2, #5
 8008542:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e0c5      	b.n	80086d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	f003 0301 	and.w	r3, r3, #1
 8008554:	2b00      	cmp	r3, #0
 8008556:	d0e5      	beq.n	8008524 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 0202 	bic.w	r2, r2, #2
 8008566:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008568:	f7ff ff90 	bl	800848c <HAL_GetTick>
 800856c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800856e:	e012      	b.n	8008596 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008570:	f7ff ff8c 	bl	800848c <HAL_GetTick>
 8008574:	4602      	mov	r2, r0
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	2b0a      	cmp	r3, #10
 800857c:	d90b      	bls.n	8008596 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008582:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2205      	movs	r2, #5
 800858e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008592:	2301      	movs	r3, #1
 8008594:	e09f      	b.n	80086d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	f003 0302 	and.w	r3, r3, #2
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d1e5      	bne.n	8008570 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	7e1b      	ldrb	r3, [r3, #24]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d108      	bne.n	80085be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681a      	ldr	r2, [r3, #0]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80085ba:	601a      	str	r2, [r3, #0]
 80085bc:	e007      	b.n	80085ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	7e5b      	ldrb	r3, [r3, #25]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	d108      	bne.n	80085e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	e007      	b.n	80085f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	7e9b      	ldrb	r3, [r3, #26]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d108      	bne.n	8008612 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f042 0220 	orr.w	r2, r2, #32
 800860e:	601a      	str	r2, [r3, #0]
 8008610:	e007      	b.n	8008622 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f022 0220 	bic.w	r2, r2, #32
 8008620:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	7edb      	ldrb	r3, [r3, #27]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d108      	bne.n	800863c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f022 0210 	bic.w	r2, r2, #16
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	e007      	b.n	800864c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f042 0210 	orr.w	r2, r2, #16
 800864a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	7f1b      	ldrb	r3, [r3, #28]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d108      	bne.n	8008666 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f042 0208 	orr.w	r2, r2, #8
 8008662:	601a      	str	r2, [r3, #0]
 8008664:	e007      	b.n	8008676 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f022 0208 	bic.w	r2, r2, #8
 8008674:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	7f5b      	ldrb	r3, [r3, #29]
 800867a:	2b01      	cmp	r3, #1
 800867c:	d108      	bne.n	8008690 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f042 0204 	orr.w	r2, r2, #4
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	e007      	b.n	80086a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f022 0204 	bic.w	r2, r2, #4
 800869e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	689a      	ldr	r2, [r3, #8]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	431a      	orrs	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	431a      	orrs	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	695b      	ldr	r3, [r3, #20]
 80086b4:	ea42 0103 	orr.w	r1, r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	1e5a      	subs	r2, r3, #1
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	430a      	orrs	r2, r1
 80086c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3710      	adds	r7, #16
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
	...

080086e0 <__NVIC_SetPriorityGrouping>:
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f003 0307 	and.w	r3, r3, #7
 80086ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80086f0:	4b0c      	ldr	r3, [pc, #48]	; (8008724 <__NVIC_SetPriorityGrouping+0x44>)
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80086fc:	4013      	ands	r3, r2
 80086fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800870c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008712:	4a04      	ldr	r2, [pc, #16]	; (8008724 <__NVIC_SetPriorityGrouping+0x44>)
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	60d3      	str	r3, [r2, #12]
}
 8008718:	bf00      	nop
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	bc80      	pop	{r7}
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	e000ed00 	.word	0xe000ed00

08008728 <__NVIC_GetPriorityGrouping>:
{
 8008728:	b480      	push	{r7}
 800872a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800872c:	4b04      	ldr	r3, [pc, #16]	; (8008740 <__NVIC_GetPriorityGrouping+0x18>)
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	0a1b      	lsrs	r3, r3, #8
 8008732:	f003 0307 	and.w	r3, r3, #7
}
 8008736:	4618      	mov	r0, r3
 8008738:	46bd      	mov	sp, r7
 800873a:	bc80      	pop	{r7}
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	e000ed00 	.word	0xe000ed00

08008744 <__NVIC_EnableIRQ>:
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	4603      	mov	r3, r0
 800874c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800874e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008752:	2b00      	cmp	r3, #0
 8008754:	db0b      	blt.n	800876e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008756:	79fb      	ldrb	r3, [r7, #7]
 8008758:	f003 021f 	and.w	r2, r3, #31
 800875c:	4906      	ldr	r1, [pc, #24]	; (8008778 <__NVIC_EnableIRQ+0x34>)
 800875e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008762:	095b      	lsrs	r3, r3, #5
 8008764:	2001      	movs	r0, #1
 8008766:	fa00 f202 	lsl.w	r2, r0, r2
 800876a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800876e:	bf00      	nop
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	bc80      	pop	{r7}
 8008776:	4770      	bx	lr
 8008778:	e000e100 	.word	0xe000e100

0800877c <__NVIC_SetPriority>:
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	4603      	mov	r3, r0
 8008784:	6039      	str	r1, [r7, #0]
 8008786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800878c:	2b00      	cmp	r3, #0
 800878e:	db0a      	blt.n	80087a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	b2da      	uxtb	r2, r3
 8008794:	490c      	ldr	r1, [pc, #48]	; (80087c8 <__NVIC_SetPriority+0x4c>)
 8008796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800879a:	0112      	lsls	r2, r2, #4
 800879c:	b2d2      	uxtb	r2, r2
 800879e:	440b      	add	r3, r1
 80087a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80087a4:	e00a      	b.n	80087bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	b2da      	uxtb	r2, r3
 80087aa:	4908      	ldr	r1, [pc, #32]	; (80087cc <__NVIC_SetPriority+0x50>)
 80087ac:	79fb      	ldrb	r3, [r7, #7]
 80087ae:	f003 030f 	and.w	r3, r3, #15
 80087b2:	3b04      	subs	r3, #4
 80087b4:	0112      	lsls	r2, r2, #4
 80087b6:	b2d2      	uxtb	r2, r2
 80087b8:	440b      	add	r3, r1
 80087ba:	761a      	strb	r2, [r3, #24]
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bc80      	pop	{r7}
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	e000e100 	.word	0xe000e100
 80087cc:	e000ed00 	.word	0xe000ed00

080087d0 <NVIC_EncodePriority>:
{
 80087d0:	b480      	push	{r7}
 80087d2:	b089      	sub	sp, #36	; 0x24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f003 0307 	and.w	r3, r3, #7
 80087e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	f1c3 0307 	rsb	r3, r3, #7
 80087ea:	2b04      	cmp	r3, #4
 80087ec:	bf28      	it	cs
 80087ee:	2304      	movcs	r3, #4
 80087f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	3304      	adds	r3, #4
 80087f6:	2b06      	cmp	r3, #6
 80087f8:	d902      	bls.n	8008800 <NVIC_EncodePriority+0x30>
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	3b03      	subs	r3, #3
 80087fe:	e000      	b.n	8008802 <NVIC_EncodePriority+0x32>
 8008800:	2300      	movs	r3, #0
 8008802:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	fa02 f303 	lsl.w	r3, r2, r3
 800880e:	43da      	mvns	r2, r3
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	401a      	ands	r2, r3
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008818:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	fa01 f303 	lsl.w	r3, r1, r3
 8008822:	43d9      	mvns	r1, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008828:	4313      	orrs	r3, r2
}
 800882a:	4618      	mov	r0, r3
 800882c:	3724      	adds	r7, #36	; 0x24
 800882e:	46bd      	mov	sp, r7
 8008830:	bc80      	pop	{r7}
 8008832:	4770      	bx	lr

08008834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	3b01      	subs	r3, #1
 8008840:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008844:	d301      	bcc.n	800884a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008846:	2301      	movs	r3, #1
 8008848:	e00f      	b.n	800886a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800884a:	4a0a      	ldr	r2, [pc, #40]	; (8008874 <SysTick_Config+0x40>)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	3b01      	subs	r3, #1
 8008850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008852:	210f      	movs	r1, #15
 8008854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008858:	f7ff ff90 	bl	800877c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800885c:	4b05      	ldr	r3, [pc, #20]	; (8008874 <SysTick_Config+0x40>)
 800885e:	2200      	movs	r2, #0
 8008860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008862:	4b04      	ldr	r3, [pc, #16]	; (8008874 <SysTick_Config+0x40>)
 8008864:	2207      	movs	r2, #7
 8008866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008868:	2300      	movs	r3, #0
}
 800886a:	4618      	mov	r0, r3
 800886c:	3708      	adds	r7, #8
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	e000e010 	.word	0xe000e010

08008878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f7ff ff2d 	bl	80086e0 <__NVIC_SetPriorityGrouping>
}
 8008886:	bf00      	nop
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800888e:	b580      	push	{r7, lr}
 8008890:	b086      	sub	sp, #24
 8008892:	af00      	add	r7, sp, #0
 8008894:	4603      	mov	r3, r0
 8008896:	60b9      	str	r1, [r7, #8]
 8008898:	607a      	str	r2, [r7, #4]
 800889a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800889c:	2300      	movs	r3, #0
 800889e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80088a0:	f7ff ff42 	bl	8008728 <__NVIC_GetPriorityGrouping>
 80088a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	68b9      	ldr	r1, [r7, #8]
 80088aa:	6978      	ldr	r0, [r7, #20]
 80088ac:	f7ff ff90 	bl	80087d0 <NVIC_EncodePriority>
 80088b0:	4602      	mov	r2, r0
 80088b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088b6:	4611      	mov	r1, r2
 80088b8:	4618      	mov	r0, r3
 80088ba:	f7ff ff5f 	bl	800877c <__NVIC_SetPriority>
}
 80088be:	bf00      	nop
 80088c0:	3718      	adds	r7, #24
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b082      	sub	sp, #8
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	4603      	mov	r3, r0
 80088ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80088d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7ff ff35 	bl	8008744 <__NVIC_EnableIRQ>
}
 80088da:	bf00      	nop
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b082      	sub	sp, #8
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7ff ffa2 	bl	8008834 <SysTick_Config>
 80088f0:	4603      	mov	r3, r0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}

080088fa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80088fa:	b480      	push	{r7}
 80088fc:	b085      	sub	sp, #20
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b02      	cmp	r3, #2
 8008910:	d008      	beq.n	8008924 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2204      	movs	r2, #4
 8008916:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e020      	b.n	8008966 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f022 020e 	bic.w	r2, r2, #14
 8008932:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f022 0201 	bic.w	r2, r2, #1
 8008942:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800894c:	2101      	movs	r1, #1
 800894e:	fa01 f202 	lsl.w	r2, r1, r2
 8008952:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008964:	7bfb      	ldrb	r3, [r7, #15]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	bc80      	pop	{r7}
 800896e:	4770      	bx	lr

08008970 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b02      	cmp	r3, #2
 8008986:	d005      	beq.n	8008994 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2204      	movs	r2, #4
 800898c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	73fb      	strb	r3, [r7, #15]
 8008992:	e0d6      	b.n	8008b42 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f022 020e 	bic.w	r2, r2, #14
 80089a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f022 0201 	bic.w	r2, r2, #1
 80089b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	461a      	mov	r2, r3
 80089ba:	4b64      	ldr	r3, [pc, #400]	; (8008b4c <HAL_DMA_Abort_IT+0x1dc>)
 80089bc:	429a      	cmp	r2, r3
 80089be:	d958      	bls.n	8008a72 <HAL_DMA_Abort_IT+0x102>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a62      	ldr	r2, [pc, #392]	; (8008b50 <HAL_DMA_Abort_IT+0x1e0>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d04f      	beq.n	8008a6a <HAL_DMA_Abort_IT+0xfa>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a61      	ldr	r2, [pc, #388]	; (8008b54 <HAL_DMA_Abort_IT+0x1e4>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d048      	beq.n	8008a66 <HAL_DMA_Abort_IT+0xf6>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a5f      	ldr	r2, [pc, #380]	; (8008b58 <HAL_DMA_Abort_IT+0x1e8>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d040      	beq.n	8008a60 <HAL_DMA_Abort_IT+0xf0>
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a5e      	ldr	r2, [pc, #376]	; (8008b5c <HAL_DMA_Abort_IT+0x1ec>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d038      	beq.n	8008a5a <HAL_DMA_Abort_IT+0xea>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a5c      	ldr	r2, [pc, #368]	; (8008b60 <HAL_DMA_Abort_IT+0x1f0>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d030      	beq.n	8008a54 <HAL_DMA_Abort_IT+0xe4>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a5b      	ldr	r2, [pc, #364]	; (8008b64 <HAL_DMA_Abort_IT+0x1f4>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d028      	beq.n	8008a4e <HAL_DMA_Abort_IT+0xde>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a52      	ldr	r2, [pc, #328]	; (8008b4c <HAL_DMA_Abort_IT+0x1dc>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d020      	beq.n	8008a48 <HAL_DMA_Abort_IT+0xd8>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a57      	ldr	r2, [pc, #348]	; (8008b68 <HAL_DMA_Abort_IT+0x1f8>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d019      	beq.n	8008a44 <HAL_DMA_Abort_IT+0xd4>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a55      	ldr	r2, [pc, #340]	; (8008b6c <HAL_DMA_Abort_IT+0x1fc>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d012      	beq.n	8008a40 <HAL_DMA_Abort_IT+0xd0>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a54      	ldr	r2, [pc, #336]	; (8008b70 <HAL_DMA_Abort_IT+0x200>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d00a      	beq.n	8008a3a <HAL_DMA_Abort_IT+0xca>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a52      	ldr	r2, [pc, #328]	; (8008b74 <HAL_DMA_Abort_IT+0x204>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d102      	bne.n	8008a34 <HAL_DMA_Abort_IT+0xc4>
 8008a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a32:	e01b      	b.n	8008a6c <HAL_DMA_Abort_IT+0xfc>
 8008a34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a38:	e018      	b.n	8008a6c <HAL_DMA_Abort_IT+0xfc>
 8008a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a3e:	e015      	b.n	8008a6c <HAL_DMA_Abort_IT+0xfc>
 8008a40:	2310      	movs	r3, #16
 8008a42:	e013      	b.n	8008a6c <HAL_DMA_Abort_IT+0xfc>
 8008a44:	2301      	movs	r3, #1
 8008a46:	e011      	b.n	8008a6c <HAL_DMA_Abort_IT+0xfc>
 8008a48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a4c:	e00e      	b.n	8008a6c <HAL_DMA_Abort_IT+0xfc>
 8008a4e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008a52:	e00b      	b.n	8008a6c <HAL_DMA_Abort_IT+0xfc>
 8008a54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a58:	e008      	b.n	8008a6c <HAL_DMA_Abort_IT+0xfc>
 8008a5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a5e:	e005      	b.n	8008a6c <HAL_DMA_Abort_IT+0xfc>
 8008a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008a64:	e002      	b.n	8008a6c <HAL_DMA_Abort_IT+0xfc>
 8008a66:	2310      	movs	r3, #16
 8008a68:	e000      	b.n	8008a6c <HAL_DMA_Abort_IT+0xfc>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	4a42      	ldr	r2, [pc, #264]	; (8008b78 <HAL_DMA_Abort_IT+0x208>)
 8008a6e:	6053      	str	r3, [r2, #4]
 8008a70:	e057      	b.n	8008b22 <HAL_DMA_Abort_IT+0x1b2>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a36      	ldr	r2, [pc, #216]	; (8008b50 <HAL_DMA_Abort_IT+0x1e0>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d04f      	beq.n	8008b1c <HAL_DMA_Abort_IT+0x1ac>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a34      	ldr	r2, [pc, #208]	; (8008b54 <HAL_DMA_Abort_IT+0x1e4>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d048      	beq.n	8008b18 <HAL_DMA_Abort_IT+0x1a8>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a33      	ldr	r2, [pc, #204]	; (8008b58 <HAL_DMA_Abort_IT+0x1e8>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d040      	beq.n	8008b12 <HAL_DMA_Abort_IT+0x1a2>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a31      	ldr	r2, [pc, #196]	; (8008b5c <HAL_DMA_Abort_IT+0x1ec>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d038      	beq.n	8008b0c <HAL_DMA_Abort_IT+0x19c>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a30      	ldr	r2, [pc, #192]	; (8008b60 <HAL_DMA_Abort_IT+0x1f0>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d030      	beq.n	8008b06 <HAL_DMA_Abort_IT+0x196>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a2e      	ldr	r2, [pc, #184]	; (8008b64 <HAL_DMA_Abort_IT+0x1f4>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d028      	beq.n	8008b00 <HAL_DMA_Abort_IT+0x190>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a26      	ldr	r2, [pc, #152]	; (8008b4c <HAL_DMA_Abort_IT+0x1dc>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d020      	beq.n	8008afa <HAL_DMA_Abort_IT+0x18a>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a2a      	ldr	r2, [pc, #168]	; (8008b68 <HAL_DMA_Abort_IT+0x1f8>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d019      	beq.n	8008af6 <HAL_DMA_Abort_IT+0x186>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a29      	ldr	r2, [pc, #164]	; (8008b6c <HAL_DMA_Abort_IT+0x1fc>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d012      	beq.n	8008af2 <HAL_DMA_Abort_IT+0x182>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a27      	ldr	r2, [pc, #156]	; (8008b70 <HAL_DMA_Abort_IT+0x200>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d00a      	beq.n	8008aec <HAL_DMA_Abort_IT+0x17c>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a26      	ldr	r2, [pc, #152]	; (8008b74 <HAL_DMA_Abort_IT+0x204>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d102      	bne.n	8008ae6 <HAL_DMA_Abort_IT+0x176>
 8008ae0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ae4:	e01b      	b.n	8008b1e <HAL_DMA_Abort_IT+0x1ae>
 8008ae6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008aea:	e018      	b.n	8008b1e <HAL_DMA_Abort_IT+0x1ae>
 8008aec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008af0:	e015      	b.n	8008b1e <HAL_DMA_Abort_IT+0x1ae>
 8008af2:	2310      	movs	r3, #16
 8008af4:	e013      	b.n	8008b1e <HAL_DMA_Abort_IT+0x1ae>
 8008af6:	2301      	movs	r3, #1
 8008af8:	e011      	b.n	8008b1e <HAL_DMA_Abort_IT+0x1ae>
 8008afa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008afe:	e00e      	b.n	8008b1e <HAL_DMA_Abort_IT+0x1ae>
 8008b00:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b04:	e00b      	b.n	8008b1e <HAL_DMA_Abort_IT+0x1ae>
 8008b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b0a:	e008      	b.n	8008b1e <HAL_DMA_Abort_IT+0x1ae>
 8008b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b10:	e005      	b.n	8008b1e <HAL_DMA_Abort_IT+0x1ae>
 8008b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b16:	e002      	b.n	8008b1e <HAL_DMA_Abort_IT+0x1ae>
 8008b18:	2310      	movs	r3, #16
 8008b1a:	e000      	b.n	8008b1e <HAL_DMA_Abort_IT+0x1ae>
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	4a17      	ldr	r2, [pc, #92]	; (8008b7c <HAL_DMA_Abort_IT+0x20c>)
 8008b20:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2201      	movs	r2, #1
 8008b26:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d003      	beq.n	8008b42 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	4798      	blx	r3
    } 
  }
  return status;
 8008b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	40020080 	.word	0x40020080
 8008b50:	40020008 	.word	0x40020008
 8008b54:	4002001c 	.word	0x4002001c
 8008b58:	40020030 	.word	0x40020030
 8008b5c:	40020044 	.word	0x40020044
 8008b60:	40020058 	.word	0x40020058
 8008b64:	4002006c 	.word	0x4002006c
 8008b68:	40020408 	.word	0x40020408
 8008b6c:	4002041c 	.word	0x4002041c
 8008b70:	40020430 	.word	0x40020430
 8008b74:	40020444 	.word	0x40020444
 8008b78:	40020400 	.word	0x40020400
 8008b7c:	40020000 	.word	0x40020000

08008b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b08b      	sub	sp, #44	; 0x2c
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b92:	e179      	b.n	8008e88 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008b94:	2201      	movs	r2, #1
 8008b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b98:	fa02 f303 	lsl.w	r3, r2, r3
 8008b9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	69fa      	ldr	r2, [r7, #28]
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008ba8:	69ba      	ldr	r2, [r7, #24]
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	f040 8168 	bne.w	8008e82 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	685b      	ldr	r3, [r3, #4]
 8008bb6:	4a96      	ldr	r2, [pc, #600]	; (8008e10 <HAL_GPIO_Init+0x290>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d05e      	beq.n	8008c7a <HAL_GPIO_Init+0xfa>
 8008bbc:	4a94      	ldr	r2, [pc, #592]	; (8008e10 <HAL_GPIO_Init+0x290>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d875      	bhi.n	8008cae <HAL_GPIO_Init+0x12e>
 8008bc2:	4a94      	ldr	r2, [pc, #592]	; (8008e14 <HAL_GPIO_Init+0x294>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d058      	beq.n	8008c7a <HAL_GPIO_Init+0xfa>
 8008bc8:	4a92      	ldr	r2, [pc, #584]	; (8008e14 <HAL_GPIO_Init+0x294>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d86f      	bhi.n	8008cae <HAL_GPIO_Init+0x12e>
 8008bce:	4a92      	ldr	r2, [pc, #584]	; (8008e18 <HAL_GPIO_Init+0x298>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d052      	beq.n	8008c7a <HAL_GPIO_Init+0xfa>
 8008bd4:	4a90      	ldr	r2, [pc, #576]	; (8008e18 <HAL_GPIO_Init+0x298>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d869      	bhi.n	8008cae <HAL_GPIO_Init+0x12e>
 8008bda:	4a90      	ldr	r2, [pc, #576]	; (8008e1c <HAL_GPIO_Init+0x29c>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d04c      	beq.n	8008c7a <HAL_GPIO_Init+0xfa>
 8008be0:	4a8e      	ldr	r2, [pc, #568]	; (8008e1c <HAL_GPIO_Init+0x29c>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d863      	bhi.n	8008cae <HAL_GPIO_Init+0x12e>
 8008be6:	4a8e      	ldr	r2, [pc, #568]	; (8008e20 <HAL_GPIO_Init+0x2a0>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d046      	beq.n	8008c7a <HAL_GPIO_Init+0xfa>
 8008bec:	4a8c      	ldr	r2, [pc, #560]	; (8008e20 <HAL_GPIO_Init+0x2a0>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d85d      	bhi.n	8008cae <HAL_GPIO_Init+0x12e>
 8008bf2:	2b12      	cmp	r3, #18
 8008bf4:	d82a      	bhi.n	8008c4c <HAL_GPIO_Init+0xcc>
 8008bf6:	2b12      	cmp	r3, #18
 8008bf8:	d859      	bhi.n	8008cae <HAL_GPIO_Init+0x12e>
 8008bfa:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <HAL_GPIO_Init+0x80>)
 8008bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c00:	08008c7b 	.word	0x08008c7b
 8008c04:	08008c55 	.word	0x08008c55
 8008c08:	08008c67 	.word	0x08008c67
 8008c0c:	08008ca9 	.word	0x08008ca9
 8008c10:	08008caf 	.word	0x08008caf
 8008c14:	08008caf 	.word	0x08008caf
 8008c18:	08008caf 	.word	0x08008caf
 8008c1c:	08008caf 	.word	0x08008caf
 8008c20:	08008caf 	.word	0x08008caf
 8008c24:	08008caf 	.word	0x08008caf
 8008c28:	08008caf 	.word	0x08008caf
 8008c2c:	08008caf 	.word	0x08008caf
 8008c30:	08008caf 	.word	0x08008caf
 8008c34:	08008caf 	.word	0x08008caf
 8008c38:	08008caf 	.word	0x08008caf
 8008c3c:	08008caf 	.word	0x08008caf
 8008c40:	08008caf 	.word	0x08008caf
 8008c44:	08008c5d 	.word	0x08008c5d
 8008c48:	08008c71 	.word	0x08008c71
 8008c4c:	4a75      	ldr	r2, [pc, #468]	; (8008e24 <HAL_GPIO_Init+0x2a4>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d013      	beq.n	8008c7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008c52:	e02c      	b.n	8008cae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	623b      	str	r3, [r7, #32]
          break;
 8008c5a:	e029      	b.n	8008cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	3304      	adds	r3, #4
 8008c62:	623b      	str	r3, [r7, #32]
          break;
 8008c64:	e024      	b.n	8008cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	3308      	adds	r3, #8
 8008c6c:	623b      	str	r3, [r7, #32]
          break;
 8008c6e:	e01f      	b.n	8008cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	330c      	adds	r3, #12
 8008c76:	623b      	str	r3, [r7, #32]
          break;
 8008c78:	e01a      	b.n	8008cb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d102      	bne.n	8008c88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008c82:	2304      	movs	r3, #4
 8008c84:	623b      	str	r3, [r7, #32]
          break;
 8008c86:	e013      	b.n	8008cb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d105      	bne.n	8008c9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008c90:	2308      	movs	r3, #8
 8008c92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	69fa      	ldr	r2, [r7, #28]
 8008c98:	611a      	str	r2, [r3, #16]
          break;
 8008c9a:	e009      	b.n	8008cb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008c9c:	2308      	movs	r3, #8
 8008c9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	69fa      	ldr	r2, [r7, #28]
 8008ca4:	615a      	str	r2, [r3, #20]
          break;
 8008ca6:	e003      	b.n	8008cb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	623b      	str	r3, [r7, #32]
          break;
 8008cac:	e000      	b.n	8008cb0 <HAL_GPIO_Init+0x130>
          break;
 8008cae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	2bff      	cmp	r3, #255	; 0xff
 8008cb4:	d801      	bhi.n	8008cba <HAL_GPIO_Init+0x13a>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	e001      	b.n	8008cbe <HAL_GPIO_Init+0x13e>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	2bff      	cmp	r3, #255	; 0xff
 8008cc4:	d802      	bhi.n	8008ccc <HAL_GPIO_Init+0x14c>
 8008cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	e002      	b.n	8008cd2 <HAL_GPIO_Init+0x152>
 8008ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cce:	3b08      	subs	r3, #8
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	681a      	ldr	r2, [r3, #0]
 8008cd8:	210f      	movs	r1, #15
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8008ce0:	43db      	mvns	r3, r3
 8008ce2:	401a      	ands	r2, r3
 8008ce4:	6a39      	ldr	r1, [r7, #32]
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8008cec:	431a      	orrs	r2, r3
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f000 80c1 	beq.w	8008e82 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008d00:	4b49      	ldr	r3, [pc, #292]	; (8008e28 <HAL_GPIO_Init+0x2a8>)
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	4a48      	ldr	r2, [pc, #288]	; (8008e28 <HAL_GPIO_Init+0x2a8>)
 8008d06:	f043 0301 	orr.w	r3, r3, #1
 8008d0a:	6193      	str	r3, [r2, #24]
 8008d0c:	4b46      	ldr	r3, [pc, #280]	; (8008e28 <HAL_GPIO_Init+0x2a8>)
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	f003 0301 	and.w	r3, r3, #1
 8008d14:	60bb      	str	r3, [r7, #8]
 8008d16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008d18:	4a44      	ldr	r2, [pc, #272]	; (8008e2c <HAL_GPIO_Init+0x2ac>)
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1c:	089b      	lsrs	r3, r3, #2
 8008d1e:	3302      	adds	r3, #2
 8008d20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d28:	f003 0303 	and.w	r3, r3, #3
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	220f      	movs	r2, #15
 8008d30:	fa02 f303 	lsl.w	r3, r2, r3
 8008d34:	43db      	mvns	r3, r3
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	4013      	ands	r3, r2
 8008d3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a3c      	ldr	r2, [pc, #240]	; (8008e30 <HAL_GPIO_Init+0x2b0>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d01f      	beq.n	8008d84 <HAL_GPIO_Init+0x204>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a3b      	ldr	r2, [pc, #236]	; (8008e34 <HAL_GPIO_Init+0x2b4>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d019      	beq.n	8008d80 <HAL_GPIO_Init+0x200>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a3a      	ldr	r2, [pc, #232]	; (8008e38 <HAL_GPIO_Init+0x2b8>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d013      	beq.n	8008d7c <HAL_GPIO_Init+0x1fc>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a39      	ldr	r2, [pc, #228]	; (8008e3c <HAL_GPIO_Init+0x2bc>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d00d      	beq.n	8008d78 <HAL_GPIO_Init+0x1f8>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a38      	ldr	r2, [pc, #224]	; (8008e40 <HAL_GPIO_Init+0x2c0>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d007      	beq.n	8008d74 <HAL_GPIO_Init+0x1f4>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	4a37      	ldr	r2, [pc, #220]	; (8008e44 <HAL_GPIO_Init+0x2c4>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d101      	bne.n	8008d70 <HAL_GPIO_Init+0x1f0>
 8008d6c:	2305      	movs	r3, #5
 8008d6e:	e00a      	b.n	8008d86 <HAL_GPIO_Init+0x206>
 8008d70:	2306      	movs	r3, #6
 8008d72:	e008      	b.n	8008d86 <HAL_GPIO_Init+0x206>
 8008d74:	2304      	movs	r3, #4
 8008d76:	e006      	b.n	8008d86 <HAL_GPIO_Init+0x206>
 8008d78:	2303      	movs	r3, #3
 8008d7a:	e004      	b.n	8008d86 <HAL_GPIO_Init+0x206>
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	e002      	b.n	8008d86 <HAL_GPIO_Init+0x206>
 8008d80:	2301      	movs	r3, #1
 8008d82:	e000      	b.n	8008d86 <HAL_GPIO_Init+0x206>
 8008d84:	2300      	movs	r3, #0
 8008d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d88:	f002 0203 	and.w	r2, r2, #3
 8008d8c:	0092      	lsls	r2, r2, #2
 8008d8e:	4093      	lsls	r3, r2
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008d96:	4925      	ldr	r1, [pc, #148]	; (8008e2c <HAL_GPIO_Init+0x2ac>)
 8008d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9a:	089b      	lsrs	r3, r3, #2
 8008d9c:	3302      	adds	r3, #2
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d006      	beq.n	8008dbe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008db0:	4b25      	ldr	r3, [pc, #148]	; (8008e48 <HAL_GPIO_Init+0x2c8>)
 8008db2:	689a      	ldr	r2, [r3, #8]
 8008db4:	4924      	ldr	r1, [pc, #144]	; (8008e48 <HAL_GPIO_Init+0x2c8>)
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	608b      	str	r3, [r1, #8]
 8008dbc:	e006      	b.n	8008dcc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008dbe:	4b22      	ldr	r3, [pc, #136]	; (8008e48 <HAL_GPIO_Init+0x2c8>)
 8008dc0:	689a      	ldr	r2, [r3, #8]
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	43db      	mvns	r3, r3
 8008dc6:	4920      	ldr	r1, [pc, #128]	; (8008e48 <HAL_GPIO_Init+0x2c8>)
 8008dc8:	4013      	ands	r3, r2
 8008dca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d006      	beq.n	8008de6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008dd8:	4b1b      	ldr	r3, [pc, #108]	; (8008e48 <HAL_GPIO_Init+0x2c8>)
 8008dda:	68da      	ldr	r2, [r3, #12]
 8008ddc:	491a      	ldr	r1, [pc, #104]	; (8008e48 <HAL_GPIO_Init+0x2c8>)
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	60cb      	str	r3, [r1, #12]
 8008de4:	e006      	b.n	8008df4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008de6:	4b18      	ldr	r3, [pc, #96]	; (8008e48 <HAL_GPIO_Init+0x2c8>)
 8008de8:	68da      	ldr	r2, [r3, #12]
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	43db      	mvns	r3, r3
 8008dee:	4916      	ldr	r1, [pc, #88]	; (8008e48 <HAL_GPIO_Init+0x2c8>)
 8008df0:	4013      	ands	r3, r2
 8008df2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d025      	beq.n	8008e4c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008e00:	4b11      	ldr	r3, [pc, #68]	; (8008e48 <HAL_GPIO_Init+0x2c8>)
 8008e02:	685a      	ldr	r2, [r3, #4]
 8008e04:	4910      	ldr	r1, [pc, #64]	; (8008e48 <HAL_GPIO_Init+0x2c8>)
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	604b      	str	r3, [r1, #4]
 8008e0c:	e025      	b.n	8008e5a <HAL_GPIO_Init+0x2da>
 8008e0e:	bf00      	nop
 8008e10:	10320000 	.word	0x10320000
 8008e14:	10310000 	.word	0x10310000
 8008e18:	10220000 	.word	0x10220000
 8008e1c:	10210000 	.word	0x10210000
 8008e20:	10120000 	.word	0x10120000
 8008e24:	10110000 	.word	0x10110000
 8008e28:	40021000 	.word	0x40021000
 8008e2c:	40010000 	.word	0x40010000
 8008e30:	40010800 	.word	0x40010800
 8008e34:	40010c00 	.word	0x40010c00
 8008e38:	40011000 	.word	0x40011000
 8008e3c:	40011400 	.word	0x40011400
 8008e40:	40011800 	.word	0x40011800
 8008e44:	40011c00 	.word	0x40011c00
 8008e48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008e4c:	4b15      	ldr	r3, [pc, #84]	; (8008ea4 <HAL_GPIO_Init+0x324>)
 8008e4e:	685a      	ldr	r2, [r3, #4]
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	43db      	mvns	r3, r3
 8008e54:	4913      	ldr	r1, [pc, #76]	; (8008ea4 <HAL_GPIO_Init+0x324>)
 8008e56:	4013      	ands	r3, r2
 8008e58:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d006      	beq.n	8008e74 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008e66:	4b0f      	ldr	r3, [pc, #60]	; (8008ea4 <HAL_GPIO_Init+0x324>)
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	490e      	ldr	r1, [pc, #56]	; (8008ea4 <HAL_GPIO_Init+0x324>)
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	600b      	str	r3, [r1, #0]
 8008e72:	e006      	b.n	8008e82 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008e74:	4b0b      	ldr	r3, [pc, #44]	; (8008ea4 <HAL_GPIO_Init+0x324>)
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	43db      	mvns	r3, r3
 8008e7c:	4909      	ldr	r1, [pc, #36]	; (8008ea4 <HAL_GPIO_Init+0x324>)
 8008e7e:	4013      	ands	r3, r2
 8008e80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e84:	3301      	adds	r3, #1
 8008e86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f47f ae7e 	bne.w	8008b94 <HAL_GPIO_Init+0x14>
  }
}
 8008e98:	bf00      	nop
 8008e9a:	bf00      	nop
 8008e9c:	372c      	adds	r7, #44	; 0x2c
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bc80      	pop	{r7}
 8008ea2:	4770      	bx	lr
 8008ea4:	40010400 	.word	0x40010400

08008ea8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b089      	sub	sp, #36	; 0x24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8008eb6:	e0a6      	b.n	8009006 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008eb8:	2201      	movs	r2, #1
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	4013      	ands	r3, r2
 8008ec4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	f000 8099 	beq.w	8009000 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8008ece:	4a54      	ldr	r2, [pc, #336]	; (8009020 <HAL_GPIO_DeInit+0x178>)
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	089b      	lsrs	r3, r3, #2
 8008ed4:	3302      	adds	r3, #2
 8008ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008eda:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	f003 0303 	and.w	r3, r3, #3
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	220f      	movs	r2, #15
 8008ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	4013      	ands	r3, r2
 8008eee:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a4c      	ldr	r2, [pc, #304]	; (8009024 <HAL_GPIO_DeInit+0x17c>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d01f      	beq.n	8008f38 <HAL_GPIO_DeInit+0x90>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a4b      	ldr	r2, [pc, #300]	; (8009028 <HAL_GPIO_DeInit+0x180>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d019      	beq.n	8008f34 <HAL_GPIO_DeInit+0x8c>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a4a      	ldr	r2, [pc, #296]	; (800902c <HAL_GPIO_DeInit+0x184>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d013      	beq.n	8008f30 <HAL_GPIO_DeInit+0x88>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a49      	ldr	r2, [pc, #292]	; (8009030 <HAL_GPIO_DeInit+0x188>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d00d      	beq.n	8008f2c <HAL_GPIO_DeInit+0x84>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a48      	ldr	r2, [pc, #288]	; (8009034 <HAL_GPIO_DeInit+0x18c>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d007      	beq.n	8008f28 <HAL_GPIO_DeInit+0x80>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a47      	ldr	r2, [pc, #284]	; (8009038 <HAL_GPIO_DeInit+0x190>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d101      	bne.n	8008f24 <HAL_GPIO_DeInit+0x7c>
 8008f20:	2305      	movs	r3, #5
 8008f22:	e00a      	b.n	8008f3a <HAL_GPIO_DeInit+0x92>
 8008f24:	2306      	movs	r3, #6
 8008f26:	e008      	b.n	8008f3a <HAL_GPIO_DeInit+0x92>
 8008f28:	2304      	movs	r3, #4
 8008f2a:	e006      	b.n	8008f3a <HAL_GPIO_DeInit+0x92>
 8008f2c:	2303      	movs	r3, #3
 8008f2e:	e004      	b.n	8008f3a <HAL_GPIO_DeInit+0x92>
 8008f30:	2302      	movs	r3, #2
 8008f32:	e002      	b.n	8008f3a <HAL_GPIO_DeInit+0x92>
 8008f34:	2301      	movs	r3, #1
 8008f36:	e000      	b.n	8008f3a <HAL_GPIO_DeInit+0x92>
 8008f38:	2300      	movs	r3, #0
 8008f3a:	69fa      	ldr	r2, [r7, #28]
 8008f3c:	f002 0203 	and.w	r2, r2, #3
 8008f40:	0092      	lsls	r2, r2, #2
 8008f42:	4093      	lsls	r3, r2
 8008f44:	697a      	ldr	r2, [r7, #20]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d132      	bne.n	8008fb0 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8008f4a:	4b3c      	ldr	r3, [pc, #240]	; (800903c <HAL_GPIO_DeInit+0x194>)
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	43db      	mvns	r3, r3
 8008f52:	493a      	ldr	r1, [pc, #232]	; (800903c <HAL_GPIO_DeInit+0x194>)
 8008f54:	4013      	ands	r3, r2
 8008f56:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8008f58:	4b38      	ldr	r3, [pc, #224]	; (800903c <HAL_GPIO_DeInit+0x194>)
 8008f5a:	685a      	ldr	r2, [r3, #4]
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	43db      	mvns	r3, r3
 8008f60:	4936      	ldr	r1, [pc, #216]	; (800903c <HAL_GPIO_DeInit+0x194>)
 8008f62:	4013      	ands	r3, r2
 8008f64:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8008f66:	4b35      	ldr	r3, [pc, #212]	; (800903c <HAL_GPIO_DeInit+0x194>)
 8008f68:	68da      	ldr	r2, [r3, #12]
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	43db      	mvns	r3, r3
 8008f6e:	4933      	ldr	r1, [pc, #204]	; (800903c <HAL_GPIO_DeInit+0x194>)
 8008f70:	4013      	ands	r3, r2
 8008f72:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8008f74:	4b31      	ldr	r3, [pc, #196]	; (800903c <HAL_GPIO_DeInit+0x194>)
 8008f76:	689a      	ldr	r2, [r3, #8]
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	43db      	mvns	r3, r3
 8008f7c:	492f      	ldr	r1, [pc, #188]	; (800903c <HAL_GPIO_DeInit+0x194>)
 8008f7e:	4013      	ands	r3, r2
 8008f80:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	f003 0303 	and.w	r3, r3, #3
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	220f      	movs	r2, #15
 8008f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f90:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8008f92:	4a23      	ldr	r2, [pc, #140]	; (8009020 <HAL_GPIO_DeInit+0x178>)
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	089b      	lsrs	r3, r3, #2
 8008f98:	3302      	adds	r3, #2
 8008f9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	43da      	mvns	r2, r3
 8008fa2:	481f      	ldr	r0, [pc, #124]	; (8009020 <HAL_GPIO_DeInit+0x178>)
 8008fa4:	69fb      	ldr	r3, [r7, #28]
 8008fa6:	089b      	lsrs	r3, r3, #2
 8008fa8:	400a      	ands	r2, r1
 8008faa:	3302      	adds	r3, #2
 8008fac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	2bff      	cmp	r3, #255	; 0xff
 8008fb4:	d801      	bhi.n	8008fba <HAL_GPIO_DeInit+0x112>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	e001      	b.n	8008fbe <HAL_GPIO_DeInit+0x116>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	3304      	adds	r3, #4
 8008fbe:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	2bff      	cmp	r3, #255	; 0xff
 8008fc4:	d802      	bhi.n	8008fcc <HAL_GPIO_DeInit+0x124>
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	e002      	b.n	8008fd2 <HAL_GPIO_DeInit+0x12a>
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	3b08      	subs	r3, #8
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	210f      	movs	r1, #15
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8008fe0:	43db      	mvns	r3, r3
 8008fe2:	401a      	ands	r2, r3
 8008fe4:	2104      	movs	r1, #4
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8008fec:	431a      	orrs	r2, r3
 8008fee:	693b      	ldr	r3, [r7, #16]
 8008ff0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68da      	ldr	r2, [r3, #12]
 8008ff6:	69bb      	ldr	r3, [r7, #24]
 8008ff8:	43db      	mvns	r3, r3
 8008ffa:	401a      	ands	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	3301      	adds	r3, #1
 8009004:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009006:	683a      	ldr	r2, [r7, #0]
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	fa22 f303 	lsr.w	r3, r2, r3
 800900e:	2b00      	cmp	r3, #0
 8009010:	f47f af52 	bne.w	8008eb8 <HAL_GPIO_DeInit+0x10>
  }
}
 8009014:	bf00      	nop
 8009016:	bf00      	nop
 8009018:	3724      	adds	r7, #36	; 0x24
 800901a:	46bd      	mov	sp, r7
 800901c:	bc80      	pop	{r7}
 800901e:	4770      	bx	lr
 8009020:	40010000 	.word	0x40010000
 8009024:	40010800 	.word	0x40010800
 8009028:	40010c00 	.word	0x40010c00
 800902c:	40011000 	.word	0x40011000
 8009030:	40011400 	.word	0x40011400
 8009034:	40011800 	.word	0x40011800
 8009038:	40011c00 	.word	0x40011c00
 800903c:	40010400 	.word	0x40010400

08009040 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
 8009048:	460b      	mov	r3, r1
 800904a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	689a      	ldr	r2, [r3, #8]
 8009050:	887b      	ldrh	r3, [r7, #2]
 8009052:	4013      	ands	r3, r2
 8009054:	2b00      	cmp	r3, #0
 8009056:	d002      	beq.n	800905e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009058:	2301      	movs	r3, #1
 800905a:	73fb      	strb	r3, [r7, #15]
 800905c:	e001      	b.n	8009062 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800905e:	2300      	movs	r3, #0
 8009060:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009062:	7bfb      	ldrb	r3, [r7, #15]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	bc80      	pop	{r7}
 800906c:	4770      	bx	lr

0800906e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800906e:	b480      	push	{r7}
 8009070:	b083      	sub	sp, #12
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
 8009076:	460b      	mov	r3, r1
 8009078:	807b      	strh	r3, [r7, #2]
 800907a:	4613      	mov	r3, r2
 800907c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800907e:	787b      	ldrb	r3, [r7, #1]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d003      	beq.n	800908c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009084:	887a      	ldrh	r2, [r7, #2]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800908a:	e003      	b.n	8009094 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800908c:	887b      	ldrh	r3, [r7, #2]
 800908e:	041a      	lsls	r2, r3, #16
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	611a      	str	r2, [r3, #16]
}
 8009094:	bf00      	nop
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	bc80      	pop	{r7}
 800909c:	4770      	bx	lr

0800909e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800909e:	b480      	push	{r7}
 80090a0:	b085      	sub	sp, #20
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
 80090a6:	460b      	mov	r3, r1
 80090a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80090b0:	887a      	ldrh	r2, [r7, #2]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	4013      	ands	r3, r2
 80090b6:	041a      	lsls	r2, r3, #16
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	43d9      	mvns	r1, r3
 80090bc:	887b      	ldrh	r3, [r7, #2]
 80090be:	400b      	ands	r3, r1
 80090c0:	431a      	orrs	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	611a      	str	r2, [r3, #16]
}
 80090c6:	bf00      	nop
 80090c8:	3714      	adds	r7, #20
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bc80      	pop	{r7}
 80090ce:	4770      	bx	lr

080090d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e12b      	b.n	800933a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d106      	bne.n	80090fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7fe fff8 	bl	80080ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2224      	movs	r2, #36	; 0x24
 8009100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f022 0201 	bic.w	r2, r2, #1
 8009112:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009122:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009132:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009134:	f001 fdb8 	bl	800aca8 <HAL_RCC_GetPCLK1Freq>
 8009138:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	4a81      	ldr	r2, [pc, #516]	; (8009344 <HAL_I2C_Init+0x274>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d807      	bhi.n	8009154 <HAL_I2C_Init+0x84>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	4a80      	ldr	r2, [pc, #512]	; (8009348 <HAL_I2C_Init+0x278>)
 8009148:	4293      	cmp	r3, r2
 800914a:	bf94      	ite	ls
 800914c:	2301      	movls	r3, #1
 800914e:	2300      	movhi	r3, #0
 8009150:	b2db      	uxtb	r3, r3
 8009152:	e006      	b.n	8009162 <HAL_I2C_Init+0x92>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4a7d      	ldr	r2, [pc, #500]	; (800934c <HAL_I2C_Init+0x27c>)
 8009158:	4293      	cmp	r3, r2
 800915a:	bf94      	ite	ls
 800915c:	2301      	movls	r3, #1
 800915e:	2300      	movhi	r3, #0
 8009160:	b2db      	uxtb	r3, r3
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e0e7      	b.n	800933a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	4a78      	ldr	r2, [pc, #480]	; (8009350 <HAL_I2C_Init+0x280>)
 800916e:	fba2 2303 	umull	r2, r3, r2, r3
 8009172:	0c9b      	lsrs	r3, r3, #18
 8009174:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	430a      	orrs	r2, r1
 8009188:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6a1b      	ldr	r3, [r3, #32]
 8009190:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	4a6a      	ldr	r2, [pc, #424]	; (8009344 <HAL_I2C_Init+0x274>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d802      	bhi.n	80091a4 <HAL_I2C_Init+0xd4>
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	3301      	adds	r3, #1
 80091a2:	e009      	b.n	80091b8 <HAL_I2C_Init+0xe8>
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80091aa:	fb02 f303 	mul.w	r3, r2, r3
 80091ae:	4a69      	ldr	r2, [pc, #420]	; (8009354 <HAL_I2C_Init+0x284>)
 80091b0:	fba2 2303 	umull	r2, r3, r2, r3
 80091b4:	099b      	lsrs	r3, r3, #6
 80091b6:	3301      	adds	r3, #1
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	6812      	ldr	r2, [r2, #0]
 80091bc:	430b      	orrs	r3, r1
 80091be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	69db      	ldr	r3, [r3, #28]
 80091c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80091ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	495c      	ldr	r1, [pc, #368]	; (8009344 <HAL_I2C_Init+0x274>)
 80091d4:	428b      	cmp	r3, r1
 80091d6:	d819      	bhi.n	800920c <HAL_I2C_Init+0x13c>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	1e59      	subs	r1, r3, #1
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	005b      	lsls	r3, r3, #1
 80091e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80091e6:	1c59      	adds	r1, r3, #1
 80091e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80091ec:	400b      	ands	r3, r1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00a      	beq.n	8009208 <HAL_I2C_Init+0x138>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	1e59      	subs	r1, r3, #1
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	005b      	lsls	r3, r3, #1
 80091fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8009200:	3301      	adds	r3, #1
 8009202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009206:	e051      	b.n	80092ac <HAL_I2C_Init+0x1dc>
 8009208:	2304      	movs	r3, #4
 800920a:	e04f      	b.n	80092ac <HAL_I2C_Init+0x1dc>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d111      	bne.n	8009238 <HAL_I2C_Init+0x168>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	1e58      	subs	r0, r3, #1
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6859      	ldr	r1, [r3, #4]
 800921c:	460b      	mov	r3, r1
 800921e:	005b      	lsls	r3, r3, #1
 8009220:	440b      	add	r3, r1
 8009222:	fbb0 f3f3 	udiv	r3, r0, r3
 8009226:	3301      	adds	r3, #1
 8009228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800922c:	2b00      	cmp	r3, #0
 800922e:	bf0c      	ite	eq
 8009230:	2301      	moveq	r3, #1
 8009232:	2300      	movne	r3, #0
 8009234:	b2db      	uxtb	r3, r3
 8009236:	e012      	b.n	800925e <HAL_I2C_Init+0x18e>
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	1e58      	subs	r0, r3, #1
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6859      	ldr	r1, [r3, #4]
 8009240:	460b      	mov	r3, r1
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	440b      	add	r3, r1
 8009246:	0099      	lsls	r1, r3, #2
 8009248:	440b      	add	r3, r1
 800924a:	fbb0 f3f3 	udiv	r3, r0, r3
 800924e:	3301      	adds	r3, #1
 8009250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009254:	2b00      	cmp	r3, #0
 8009256:	bf0c      	ite	eq
 8009258:	2301      	moveq	r3, #1
 800925a:	2300      	movne	r3, #0
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <HAL_I2C_Init+0x196>
 8009262:	2301      	movs	r3, #1
 8009264:	e022      	b.n	80092ac <HAL_I2C_Init+0x1dc>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10e      	bne.n	800928c <HAL_I2C_Init+0x1bc>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	1e58      	subs	r0, r3, #1
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6859      	ldr	r1, [r3, #4]
 8009276:	460b      	mov	r3, r1
 8009278:	005b      	lsls	r3, r3, #1
 800927a:	440b      	add	r3, r1
 800927c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009280:	3301      	adds	r3, #1
 8009282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800928a:	e00f      	b.n	80092ac <HAL_I2C_Init+0x1dc>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	1e58      	subs	r0, r3, #1
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6859      	ldr	r1, [r3, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	440b      	add	r3, r1
 800929a:	0099      	lsls	r1, r3, #2
 800929c:	440b      	add	r3, r1
 800929e:	fbb0 f3f3 	udiv	r3, r0, r3
 80092a2:	3301      	adds	r3, #1
 80092a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092ac:	6879      	ldr	r1, [r7, #4]
 80092ae:	6809      	ldr	r1, [r1, #0]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	69da      	ldr	r2, [r3, #28]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	431a      	orrs	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	430a      	orrs	r2, r1
 80092ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80092da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	6911      	ldr	r1, [r2, #16]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	68d2      	ldr	r2, [r2, #12]
 80092e6:	4311      	orrs	r1, r2
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	6812      	ldr	r2, [r2, #0]
 80092ec:	430b      	orrs	r3, r1
 80092ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	695a      	ldr	r2, [r3, #20]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	431a      	orrs	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	430a      	orrs	r2, r1
 800930a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f042 0201 	orr.w	r2, r2, #1
 800931a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2220      	movs	r2, #32
 8009326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	000186a0 	.word	0x000186a0
 8009348:	001e847f 	.word	0x001e847f
 800934c:	003d08ff 	.word	0x003d08ff
 8009350:	431bde83 	.word	0x431bde83
 8009354:	10624dd3 	.word	0x10624dd3

08009358 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d101      	bne.n	800936a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e021      	b.n	80093ae <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2224      	movs	r2, #36	; 0x24
 800936e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f022 0201 	bic.w	r2, r2, #1
 8009380:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7fe fef0 	bl	8008168 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2200      	movs	r2, #0
 800939a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2200      	movs	r2, #0
 80093a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
	...

080093b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b088      	sub	sp, #32
 80093bc:	af02      	add	r7, sp, #8
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	607a      	str	r2, [r7, #4]
 80093c2:	461a      	mov	r2, r3
 80093c4:	460b      	mov	r3, r1
 80093c6:	817b      	strh	r3, [r7, #10]
 80093c8:	4613      	mov	r3, r2
 80093ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80093cc:	f7ff f85e 	bl	800848c <HAL_GetTick>
 80093d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	2b20      	cmp	r3, #32
 80093dc:	f040 80e0 	bne.w	80095a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	2319      	movs	r3, #25
 80093e6:	2201      	movs	r2, #1
 80093e8:	4970      	ldr	r1, [pc, #448]	; (80095ac <HAL_I2C_Master_Transmit+0x1f4>)
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f000 fe5c 	bl	800a0a8 <I2C_WaitOnFlagUntilTimeout>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80093f6:	2302      	movs	r3, #2
 80093f8:	e0d3      	b.n	80095a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009400:	2b01      	cmp	r3, #1
 8009402:	d101      	bne.n	8009408 <HAL_I2C_Master_Transmit+0x50>
 8009404:	2302      	movs	r3, #2
 8009406:	e0cc      	b.n	80095a2 <HAL_I2C_Master_Transmit+0x1ea>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f003 0301 	and.w	r3, r3, #1
 800941a:	2b01      	cmp	r3, #1
 800941c:	d007      	beq.n	800942e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f042 0201 	orr.w	r2, r2, #1
 800942c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800943c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2221      	movs	r2, #33	; 0x21
 8009442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2210      	movs	r2, #16
 800944a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2200      	movs	r2, #0
 8009452:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	893a      	ldrh	r2, [r7, #8]
 800945e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009464:	b29a      	uxth	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	4a50      	ldr	r2, [pc, #320]	; (80095b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800946e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009470:	8979      	ldrh	r1, [r7, #10]
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	6a3a      	ldr	r2, [r7, #32]
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f000 fc16 	bl	8009ca8 <I2C_MasterRequestWrite>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e08d      	b.n	80095a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009486:	2300      	movs	r3, #0
 8009488:	613b      	str	r3, [r7, #16]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	695b      	ldr	r3, [r3, #20]
 8009490:	613b      	str	r3, [r7, #16]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	613b      	str	r3, [r7, #16]
 800949a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800949c:	e066      	b.n	800956c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800949e:	697a      	ldr	r2, [r7, #20]
 80094a0:	6a39      	ldr	r1, [r7, #32]
 80094a2:	68f8      	ldr	r0, [r7, #12]
 80094a4:	f000 ff1a 	bl	800a2dc <I2C_WaitOnTXEFlagUntilTimeout>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00d      	beq.n	80094ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b2:	2b04      	cmp	r3, #4
 80094b4:	d107      	bne.n	80094c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e06b      	b.n	80095a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ce:	781a      	ldrb	r2, [r3, #0]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094da:	1c5a      	adds	r2, r3, #1
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	3b01      	subs	r3, #1
 80094e8:	b29a      	uxth	r2, r3
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094f2:	3b01      	subs	r3, #1
 80094f4:	b29a      	uxth	r2, r3
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	695b      	ldr	r3, [r3, #20]
 8009500:	f003 0304 	and.w	r3, r3, #4
 8009504:	2b04      	cmp	r3, #4
 8009506:	d11b      	bne.n	8009540 <HAL_I2C_Master_Transmit+0x188>
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800950c:	2b00      	cmp	r3, #0
 800950e:	d017      	beq.n	8009540 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009514:	781a      	ldrb	r2, [r3, #0]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009520:	1c5a      	adds	r2, r3, #1
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800952a:	b29b      	uxth	r3, r3
 800952c:	3b01      	subs	r3, #1
 800952e:	b29a      	uxth	r2, r3
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009538:	3b01      	subs	r3, #1
 800953a:	b29a      	uxth	r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009540:	697a      	ldr	r2, [r7, #20]
 8009542:	6a39      	ldr	r1, [r7, #32]
 8009544:	68f8      	ldr	r0, [r7, #12]
 8009546:	f000 ff11 	bl	800a36c <I2C_WaitOnBTFFlagUntilTimeout>
 800954a:	4603      	mov	r3, r0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00d      	beq.n	800956c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009554:	2b04      	cmp	r3, #4
 8009556:	d107      	bne.n	8009568 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009566:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009568:	2301      	movs	r3, #1
 800956a:	e01a      	b.n	80095a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009570:	2b00      	cmp	r3, #0
 8009572:	d194      	bne.n	800949e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2220      	movs	r2, #32
 8009588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	e000      	b.n	80095a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80095a0:	2302      	movs	r3, #2
  }
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3718      	adds	r7, #24
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}
 80095aa:	bf00      	nop
 80095ac:	00100002 	.word	0x00100002
 80095b0:	ffff0000 	.word	0xffff0000

080095b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b088      	sub	sp, #32
 80095b8:	af02      	add	r7, sp, #8
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	4608      	mov	r0, r1
 80095be:	4611      	mov	r1, r2
 80095c0:	461a      	mov	r2, r3
 80095c2:	4603      	mov	r3, r0
 80095c4:	817b      	strh	r3, [r7, #10]
 80095c6:	460b      	mov	r3, r1
 80095c8:	813b      	strh	r3, [r7, #8]
 80095ca:	4613      	mov	r3, r2
 80095cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80095ce:	f7fe ff5d 	bl	800848c <HAL_GetTick>
 80095d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	2b20      	cmp	r3, #32
 80095de:	f040 80d9 	bne.w	8009794 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	9300      	str	r3, [sp, #0]
 80095e6:	2319      	movs	r3, #25
 80095e8:	2201      	movs	r2, #1
 80095ea:	496d      	ldr	r1, [pc, #436]	; (80097a0 <HAL_I2C_Mem_Write+0x1ec>)
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	f000 fd5b 	bl	800a0a8 <I2C_WaitOnFlagUntilTimeout>
 80095f2:	4603      	mov	r3, r0
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80095f8:	2302      	movs	r3, #2
 80095fa:	e0cc      	b.n	8009796 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009602:	2b01      	cmp	r3, #1
 8009604:	d101      	bne.n	800960a <HAL_I2C_Mem_Write+0x56>
 8009606:	2302      	movs	r3, #2
 8009608:	e0c5      	b.n	8009796 <HAL_I2C_Mem_Write+0x1e2>
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2201      	movs	r2, #1
 800960e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	2b01      	cmp	r3, #1
 800961e:	d007      	beq.n	8009630 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f042 0201 	orr.w	r2, r2, #1
 800962e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800963e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	2221      	movs	r2, #33	; 0x21
 8009644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2240      	movs	r2, #64	; 0x40
 800964c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2200      	movs	r2, #0
 8009654:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	6a3a      	ldr	r2, [r7, #32]
 800965a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009660:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009666:	b29a      	uxth	r2, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	4a4d      	ldr	r2, [pc, #308]	; (80097a4 <HAL_I2C_Mem_Write+0x1f0>)
 8009670:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009672:	88f8      	ldrh	r0, [r7, #6]
 8009674:	893a      	ldrh	r2, [r7, #8]
 8009676:	8979      	ldrh	r1, [r7, #10]
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	9301      	str	r3, [sp, #4]
 800967c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	4603      	mov	r3, r0
 8009682:	68f8      	ldr	r0, [r7, #12]
 8009684:	f000 fb92 	bl	8009dac <I2C_RequestMemoryWrite>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d052      	beq.n	8009734 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e081      	b.n	8009796 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009692:	697a      	ldr	r2, [r7, #20]
 8009694:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009696:	68f8      	ldr	r0, [r7, #12]
 8009698:	f000 fe20 	bl	800a2dc <I2C_WaitOnTXEFlagUntilTimeout>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00d      	beq.n	80096be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a6:	2b04      	cmp	r3, #4
 80096a8:	d107      	bne.n	80096ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e06b      	b.n	8009796 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c2:	781a      	ldrb	r2, [r3, #0]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ce:	1c5a      	adds	r2, r3, #1
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096d8:	3b01      	subs	r3, #1
 80096da:	b29a      	uxth	r2, r3
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	3b01      	subs	r3, #1
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	695b      	ldr	r3, [r3, #20]
 80096f4:	f003 0304 	and.w	r3, r3, #4
 80096f8:	2b04      	cmp	r3, #4
 80096fa:	d11b      	bne.n	8009734 <HAL_I2C_Mem_Write+0x180>
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009700:	2b00      	cmp	r3, #0
 8009702:	d017      	beq.n	8009734 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009708:	781a      	ldrb	r2, [r3, #0]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009714:	1c5a      	adds	r2, r3, #1
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800971e:	3b01      	subs	r3, #1
 8009720:	b29a      	uxth	r2, r3
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800972a:	b29b      	uxth	r3, r3
 800972c:	3b01      	subs	r3, #1
 800972e:	b29a      	uxth	r2, r3
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009738:	2b00      	cmp	r3, #0
 800973a:	d1aa      	bne.n	8009692 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800973c:	697a      	ldr	r2, [r7, #20]
 800973e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f000 fe13 	bl	800a36c <I2C_WaitOnBTFFlagUntilTimeout>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00d      	beq.n	8009768 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009750:	2b04      	cmp	r3, #4
 8009752:	d107      	bne.n	8009764 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009762:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e016      	b.n	8009796 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2220      	movs	r2, #32
 800977c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	e000      	b.n	8009796 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009794:	2302      	movs	r3, #2
  }
}
 8009796:	4618      	mov	r0, r3
 8009798:	3718      	adds	r7, #24
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	00100002 	.word	0x00100002
 80097a4:	ffff0000 	.word	0xffff0000

080097a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b08c      	sub	sp, #48	; 0x30
 80097ac:	af02      	add	r7, sp, #8
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	4608      	mov	r0, r1
 80097b2:	4611      	mov	r1, r2
 80097b4:	461a      	mov	r2, r3
 80097b6:	4603      	mov	r3, r0
 80097b8:	817b      	strh	r3, [r7, #10]
 80097ba:	460b      	mov	r3, r1
 80097bc:	813b      	strh	r3, [r7, #8]
 80097be:	4613      	mov	r3, r2
 80097c0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80097c2:	2300      	movs	r3, #0
 80097c4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80097c6:	f7fe fe61 	bl	800848c <HAL_GetTick>
 80097ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	2b20      	cmp	r3, #32
 80097d6:	f040 8244 	bne.w	8009c62 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80097da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	2319      	movs	r3, #25
 80097e0:	2201      	movs	r2, #1
 80097e2:	4982      	ldr	r1, [pc, #520]	; (80099ec <HAL_I2C_Mem_Read+0x244>)
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f000 fc5f 	bl	800a0a8 <I2C_WaitOnFlagUntilTimeout>
 80097ea:	4603      	mov	r3, r0
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d001      	beq.n	80097f4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80097f0:	2302      	movs	r3, #2
 80097f2:	e237      	b.n	8009c64 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d101      	bne.n	8009802 <HAL_I2C_Mem_Read+0x5a>
 80097fe:	2302      	movs	r3, #2
 8009800:	e230      	b.n	8009c64 <HAL_I2C_Mem_Read+0x4bc>
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2201      	movs	r2, #1
 8009806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	2b01      	cmp	r3, #1
 8009816:	d007      	beq.n	8009828 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f042 0201 	orr.w	r2, r2, #1
 8009826:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009836:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2222      	movs	r2, #34	; 0x22
 800983c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2240      	movs	r2, #64	; 0x40
 8009844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2200      	movs	r2, #0
 800984c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009852:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009858:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800985e:	b29a      	uxth	r2, r3
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	4a62      	ldr	r2, [pc, #392]	; (80099f0 <HAL_I2C_Mem_Read+0x248>)
 8009868:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800986a:	88f8      	ldrh	r0, [r7, #6]
 800986c:	893a      	ldrh	r2, [r7, #8]
 800986e:	8979      	ldrh	r1, [r7, #10]
 8009870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009872:	9301      	str	r3, [sp, #4]
 8009874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	4603      	mov	r3, r0
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f000 fb2c 	bl	8009ed8 <I2C_RequestMemoryRead>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d001      	beq.n	800988a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e1ec      	b.n	8009c64 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800988e:	2b00      	cmp	r3, #0
 8009890:	d113      	bne.n	80098ba <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009892:	2300      	movs	r3, #0
 8009894:	61fb      	str	r3, [r7, #28]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	695b      	ldr	r3, [r3, #20]
 800989c:	61fb      	str	r3, [r7, #28]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	699b      	ldr	r3, [r3, #24]
 80098a4:	61fb      	str	r3, [r7, #28]
 80098a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098b6:	601a      	str	r2, [r3, #0]
 80098b8:	e1c0      	b.n	8009c3c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d11e      	bne.n	8009900 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80098d2:	b672      	cpsid	i
}
 80098d4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098d6:	2300      	movs	r3, #0
 80098d8:	61bb      	str	r3, [r7, #24]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	695b      	ldr	r3, [r3, #20]
 80098e0:	61bb      	str	r3, [r7, #24]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	61bb      	str	r3, [r7, #24]
 80098ea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80098fc:	b662      	cpsie	i
}
 80098fe:	e035      	b.n	800996c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009904:	2b02      	cmp	r3, #2
 8009906:	d11e      	bne.n	8009946 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	681a      	ldr	r2, [r3, #0]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009916:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009918:	b672      	cpsid	i
}
 800991a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800991c:	2300      	movs	r3, #0
 800991e:	617b      	str	r3, [r7, #20]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	695b      	ldr	r3, [r3, #20]
 8009926:	617b      	str	r3, [r7, #20]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	617b      	str	r3, [r7, #20]
 8009930:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009940:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009942:	b662      	cpsie	i
}
 8009944:	e012      	b.n	800996c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009954:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009956:	2300      	movs	r3, #0
 8009958:	613b      	str	r3, [r7, #16]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	695b      	ldr	r3, [r3, #20]
 8009960:	613b      	str	r3, [r7, #16]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	699b      	ldr	r3, [r3, #24]
 8009968:	613b      	str	r3, [r7, #16]
 800996a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800996c:	e166      	b.n	8009c3c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009972:	2b03      	cmp	r3, #3
 8009974:	f200 811f 	bhi.w	8009bb6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800997c:	2b01      	cmp	r3, #1
 800997e:	d123      	bne.n	80099c8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009982:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f000 fd39 	bl	800a3fc <I2C_WaitOnRXNEFlagUntilTimeout>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d001      	beq.n	8009994 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	e167      	b.n	8009c64 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	691a      	ldr	r2, [r3, #16]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999e:	b2d2      	uxtb	r2, r2
 80099a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a6:	1c5a      	adds	r2, r3, #1
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099b0:	3b01      	subs	r3, #1
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099bc:	b29b      	uxth	r3, r3
 80099be:	3b01      	subs	r3, #1
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80099c6:	e139      	b.n	8009c3c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d152      	bne.n	8009a76 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80099d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d6:	2200      	movs	r2, #0
 80099d8:	4906      	ldr	r1, [pc, #24]	; (80099f4 <HAL_I2C_Mem_Read+0x24c>)
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f000 fb64 	bl	800a0a8 <I2C_WaitOnFlagUntilTimeout>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d008      	beq.n	80099f8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
 80099e8:	e13c      	b.n	8009c64 <HAL_I2C_Mem_Read+0x4bc>
 80099ea:	bf00      	nop
 80099ec:	00100002 	.word	0x00100002
 80099f0:	ffff0000 	.word	0xffff0000
 80099f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80099f8:	b672      	cpsid	i
}
 80099fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681a      	ldr	r2, [r3, #0]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	691a      	ldr	r2, [r3, #16]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a16:	b2d2      	uxtb	r2, r2
 8009a18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1e:	1c5a      	adds	r2, r3, #1
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	3b01      	subs	r3, #1
 8009a38:	b29a      	uxth	r2, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009a3e:	b662      	cpsie	i
}
 8009a40:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	691a      	ldr	r2, [r3, #16]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4c:	b2d2      	uxtb	r2, r2
 8009a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a54:	1c5a      	adds	r2, r3, #1
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a5e:	3b01      	subs	r3, #1
 8009a60:	b29a      	uxth	r2, r3
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	3b01      	subs	r3, #1
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a74:	e0e2      	b.n	8009c3c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	9300      	str	r3, [sp, #0]
 8009a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	497b      	ldr	r1, [pc, #492]	; (8009c6c <HAL_I2C_Mem_Read+0x4c4>)
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f000 fb11 	bl	800a0a8 <I2C_WaitOnFlagUntilTimeout>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d001      	beq.n	8009a90 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	e0e9      	b.n	8009c64 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009aa0:	b672      	cpsid	i
}
 8009aa2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	691a      	ldr	r2, [r3, #16]
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aae:	b2d2      	uxtb	r2, r2
 8009ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab6:	1c5a      	adds	r2, r3, #1
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ac0:	3b01      	subs	r3, #1
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	b29a      	uxth	r2, r3
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009ad6:	4b66      	ldr	r3, [pc, #408]	; (8009c70 <HAL_I2C_Mem_Read+0x4c8>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	08db      	lsrs	r3, r3, #3
 8009adc:	4a65      	ldr	r2, [pc, #404]	; (8009c74 <HAL_I2C_Mem_Read+0x4cc>)
 8009ade:	fba2 2303 	umull	r2, r3, r2, r3
 8009ae2:	0a1a      	lsrs	r2, r3, #8
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	4413      	add	r3, r2
 8009aea:	00da      	lsls	r2, r3, #3
 8009aec:	1ad3      	subs	r3, r2, r3
 8009aee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009af0:	6a3b      	ldr	r3, [r7, #32]
 8009af2:	3b01      	subs	r3, #1
 8009af4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009af6:	6a3b      	ldr	r3, [r7, #32]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d118      	bne.n	8009b2e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2200      	movs	r2, #0
 8009b00:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2220      	movs	r2, #32
 8009b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b16:	f043 0220 	orr.w	r2, r3, #32
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009b1e:	b662      	cpsie	i
}
 8009b20:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	e09a      	b.n	8009c64 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	f003 0304 	and.w	r3, r3, #4
 8009b38:	2b04      	cmp	r3, #4
 8009b3a:	d1d9      	bne.n	8009af0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	691a      	ldr	r2, [r3, #16]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b56:	b2d2      	uxtb	r2, r2
 8009b58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5e:	1c5a      	adds	r2, r3, #1
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	b29a      	uxth	r2, r3
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b74:	b29b      	uxth	r3, r3
 8009b76:	3b01      	subs	r3, #1
 8009b78:	b29a      	uxth	r2, r3
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009b7e:	b662      	cpsie	i
}
 8009b80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	691a      	ldr	r2, [r3, #16]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8c:	b2d2      	uxtb	r2, r2
 8009b8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b94:	1c5a      	adds	r2, r3, #1
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	3b01      	subs	r3, #1
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009bb4:	e042      	b.n	8009c3c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f000 fc1e 	bl	800a3fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d001      	beq.n	8009bca <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e04c      	b.n	8009c64 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	691a      	ldr	r2, [r3, #16]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd4:	b2d2      	uxtb	r2, r2
 8009bd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bdc:	1c5a      	adds	r2, r3, #1
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009be6:	3b01      	subs	r3, #1
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	695b      	ldr	r3, [r3, #20]
 8009c02:	f003 0304 	and.w	r3, r3, #4
 8009c06:	2b04      	cmp	r3, #4
 8009c08:	d118      	bne.n	8009c3c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	691a      	ldr	r2, [r3, #16]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c14:	b2d2      	uxtb	r2, r2
 8009c16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1c:	1c5a      	adds	r2, r3, #1
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c26:	3b01      	subs	r3, #1
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	3b01      	subs	r3, #1
 8009c36:	b29a      	uxth	r2, r3
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f47f ae94 	bne.w	800996e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2220      	movs	r2, #32
 8009c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	e000      	b.n	8009c64 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009c62:	2302      	movs	r3, #2
  }
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3728      	adds	r7, #40	; 0x28
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	00010004 	.word	0x00010004
 8009c70:	200000a8 	.word	0x200000a8
 8009c74:	14f8b589 	.word	0x14f8b589

08009c78 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c86:	b2db      	uxtb	r3, r3
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	370c      	adds	r7, #12
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bc80      	pop	{r7}
 8009c90:	4770      	bx	lr

08009c92 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b083      	sub	sp, #12
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	370c      	adds	r7, #12
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bc80      	pop	{r7}
 8009ca6:	4770      	bx	lr

08009ca8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b088      	sub	sp, #32
 8009cac:	af02      	add	r7, sp, #8
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	607a      	str	r2, [r7, #4]
 8009cb2:	603b      	str	r3, [r7, #0]
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cbc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009cbe:	697b      	ldr	r3, [r7, #20]
 8009cc0:	2b08      	cmp	r3, #8
 8009cc2:	d006      	beq.n	8009cd2 <I2C_MasterRequestWrite+0x2a>
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d003      	beq.n	8009cd2 <I2C_MasterRequestWrite+0x2a>
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009cd0:	d108      	bne.n	8009ce4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ce0:	601a      	str	r2, [r3, #0]
 8009ce2:	e00b      	b.n	8009cfc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce8:	2b12      	cmp	r3, #18
 8009cea:	d107      	bne.n	8009cfc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cfa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	9300      	str	r3, [sp, #0]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2200      	movs	r2, #0
 8009d04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f000 f9cd 	bl	800a0a8 <I2C_WaitOnFlagUntilTimeout>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00d      	beq.n	8009d30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d22:	d103      	bne.n	8009d2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009d2c:	2303      	movs	r3, #3
 8009d2e:	e035      	b.n	8009d9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	691b      	ldr	r3, [r3, #16]
 8009d34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d38:	d108      	bne.n	8009d4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009d3a:	897b      	ldrh	r3, [r7, #10]
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	461a      	mov	r2, r3
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009d48:	611a      	str	r2, [r3, #16]
 8009d4a:	e01b      	b.n	8009d84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009d4c:	897b      	ldrh	r3, [r7, #10]
 8009d4e:	11db      	asrs	r3, r3, #7
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	f003 0306 	and.w	r3, r3, #6
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	f063 030f 	orn	r3, r3, #15
 8009d5c:	b2da      	uxtb	r2, r3
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	490e      	ldr	r1, [pc, #56]	; (8009da4 <I2C_MasterRequestWrite+0xfc>)
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 fa16 	bl	800a19c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e010      	b.n	8009d9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009d7a:	897b      	ldrh	r3, [r7, #10]
 8009d7c:	b2da      	uxtb	r2, r3
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	687a      	ldr	r2, [r7, #4]
 8009d88:	4907      	ldr	r1, [pc, #28]	; (8009da8 <I2C_MasterRequestWrite+0x100>)
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	f000 fa06 	bl	800a19c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d001      	beq.n	8009d9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	e000      	b.n	8009d9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3718      	adds	r7, #24
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}
 8009da4:	00010008 	.word	0x00010008
 8009da8:	00010002 	.word	0x00010002

08009dac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b088      	sub	sp, #32
 8009db0:	af02      	add	r7, sp, #8
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	4608      	mov	r0, r1
 8009db6:	4611      	mov	r1, r2
 8009db8:	461a      	mov	r2, r3
 8009dba:	4603      	mov	r3, r0
 8009dbc:	817b      	strh	r3, [r7, #10]
 8009dbe:	460b      	mov	r3, r1
 8009dc0:	813b      	strh	r3, [r7, #8]
 8009dc2:	4613      	mov	r3, r2
 8009dc4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	9300      	str	r3, [sp, #0]
 8009dda:	6a3b      	ldr	r3, [r7, #32]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009de2:	68f8      	ldr	r0, [r7, #12]
 8009de4:	f000 f960 	bl	800a0a8 <I2C_WaitOnFlagUntilTimeout>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00d      	beq.n	8009e0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dfc:	d103      	bne.n	8009e06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e04:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009e06:	2303      	movs	r3, #3
 8009e08:	e05f      	b.n	8009eca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009e0a:	897b      	ldrh	r3, [r7, #10]
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	461a      	mov	r2, r3
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009e18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1c:	6a3a      	ldr	r2, [r7, #32]
 8009e1e:	492d      	ldr	r1, [pc, #180]	; (8009ed4 <I2C_RequestMemoryWrite+0x128>)
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f000 f9bb 	bl	800a19c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d001      	beq.n	8009e30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e04c      	b.n	8009eca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e30:	2300      	movs	r3, #0
 8009e32:	617b      	str	r3, [r7, #20]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	695b      	ldr	r3, [r3, #20]
 8009e3a:	617b      	str	r3, [r7, #20]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	699b      	ldr	r3, [r3, #24]
 8009e42:	617b      	str	r3, [r7, #20]
 8009e44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e48:	6a39      	ldr	r1, [r7, #32]
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f000 fa46 	bl	800a2dc <I2C_WaitOnTXEFlagUntilTimeout>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00d      	beq.n	8009e72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5a:	2b04      	cmp	r3, #4
 8009e5c:	d107      	bne.n	8009e6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	e02b      	b.n	8009eca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e72:	88fb      	ldrh	r3, [r7, #6]
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d105      	bne.n	8009e84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009e78:	893b      	ldrh	r3, [r7, #8]
 8009e7a:	b2da      	uxtb	r2, r3
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	611a      	str	r2, [r3, #16]
 8009e82:	e021      	b.n	8009ec8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009e84:	893b      	ldrh	r3, [r7, #8]
 8009e86:	0a1b      	lsrs	r3, r3, #8
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	b2da      	uxtb	r2, r3
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e94:	6a39      	ldr	r1, [r7, #32]
 8009e96:	68f8      	ldr	r0, [r7, #12]
 8009e98:	f000 fa20 	bl	800a2dc <I2C_WaitOnTXEFlagUntilTimeout>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00d      	beq.n	8009ebe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea6:	2b04      	cmp	r3, #4
 8009ea8:	d107      	bne.n	8009eba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009eb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e005      	b.n	8009eca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ebe:	893b      	ldrh	r3, [r7, #8]
 8009ec0:	b2da      	uxtb	r2, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3718      	adds	r7, #24
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	bf00      	nop
 8009ed4:	00010002 	.word	0x00010002

08009ed8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b088      	sub	sp, #32
 8009edc:	af02      	add	r7, sp, #8
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	4608      	mov	r0, r1
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	817b      	strh	r3, [r7, #10]
 8009eea:	460b      	mov	r3, r1
 8009eec:	813b      	strh	r3, [r7, #8]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681a      	ldr	r2, [r3, #0]
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	6a3b      	ldr	r3, [r7, #32]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f000 f8c2 	bl	800a0a8 <I2C_WaitOnFlagUntilTimeout>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00d      	beq.n	8009f46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f38:	d103      	bne.n	8009f42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009f42:	2303      	movs	r3, #3
 8009f44:	e0aa      	b.n	800a09c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009f46:	897b      	ldrh	r3, [r7, #10]
 8009f48:	b2db      	uxtb	r3, r3
 8009f4a:	461a      	mov	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009f54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f58:	6a3a      	ldr	r2, [r7, #32]
 8009f5a:	4952      	ldr	r1, [pc, #328]	; (800a0a4 <I2C_RequestMemoryRead+0x1cc>)
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f000 f91d 	bl	800a19c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f62:	4603      	mov	r3, r0
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d001      	beq.n	8009f6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e097      	b.n	800a09c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	617b      	str	r3, [r7, #20]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	695b      	ldr	r3, [r3, #20]
 8009f76:	617b      	str	r3, [r7, #20]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	699b      	ldr	r3, [r3, #24]
 8009f7e:	617b      	str	r3, [r7, #20]
 8009f80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f84:	6a39      	ldr	r1, [r7, #32]
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f000 f9a8 	bl	800a2dc <I2C_WaitOnTXEFlagUntilTimeout>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00d      	beq.n	8009fae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f96:	2b04      	cmp	r3, #4
 8009f98:	d107      	bne.n	8009faa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fa8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009faa:	2301      	movs	r3, #1
 8009fac:	e076      	b.n	800a09c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009fae:	88fb      	ldrh	r3, [r7, #6]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d105      	bne.n	8009fc0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009fb4:	893b      	ldrh	r3, [r7, #8]
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	611a      	str	r2, [r3, #16]
 8009fbe:	e021      	b.n	800a004 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009fc0:	893b      	ldrh	r3, [r7, #8]
 8009fc2:	0a1b      	lsrs	r3, r3, #8
 8009fc4:	b29b      	uxth	r3, r3
 8009fc6:	b2da      	uxtb	r2, r3
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fd0:	6a39      	ldr	r1, [r7, #32]
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f000 f982 	bl	800a2dc <I2C_WaitOnTXEFlagUntilTimeout>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00d      	beq.n	8009ffa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe2:	2b04      	cmp	r3, #4
 8009fe4:	d107      	bne.n	8009ff6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ff4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e050      	b.n	800a09c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ffa:	893b      	ldrh	r3, [r7, #8]
 8009ffc:	b2da      	uxtb	r2, r3
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a006:	6a39      	ldr	r1, [r7, #32]
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 f967 	bl	800a2dc <I2C_WaitOnTXEFlagUntilTimeout>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d00d      	beq.n	800a030 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a018:	2b04      	cmp	r3, #4
 800a01a:	d107      	bne.n	800a02c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a02a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	e035      	b.n	800a09c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a03e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	6a3b      	ldr	r3, [r7, #32]
 800a046:	2200      	movs	r2, #0
 800a048:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f000 f82b 	bl	800a0a8 <I2C_WaitOnFlagUntilTimeout>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d00d      	beq.n	800a074 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a066:	d103      	bne.n	800a070 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a06e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a070:	2303      	movs	r3, #3
 800a072:	e013      	b.n	800a09c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a074:	897b      	ldrh	r3, [r7, #10]
 800a076:	b2db      	uxtb	r3, r3
 800a078:	f043 0301 	orr.w	r3, r3, #1
 800a07c:	b2da      	uxtb	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a086:	6a3a      	ldr	r2, [r7, #32]
 800a088:	4906      	ldr	r1, [pc, #24]	; (800a0a4 <I2C_RequestMemoryRead+0x1cc>)
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f000 f886 	bl	800a19c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d001      	beq.n	800a09a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e000      	b.n	800a09c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a09a:	2300      	movs	r3, #0
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3718      	adds	r7, #24
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}
 800a0a4:	00010002 	.word	0x00010002

0800a0a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	603b      	str	r3, [r7, #0]
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a0b8:	e048      	b.n	800a14c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0c0:	d044      	beq.n	800a14c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0c2:	f7fe f9e3 	bl	800848c <HAL_GetTick>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	1ad3      	subs	r3, r2, r3
 800a0cc:	683a      	ldr	r2, [r7, #0]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d302      	bcc.n	800a0d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d139      	bne.n	800a14c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	0c1b      	lsrs	r3, r3, #16
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d10d      	bne.n	800a0fe <I2C_WaitOnFlagUntilTimeout+0x56>
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	695b      	ldr	r3, [r3, #20]
 800a0e8:	43da      	mvns	r2, r3
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	4013      	ands	r3, r2
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	bf0c      	ite	eq
 800a0f4:	2301      	moveq	r3, #1
 800a0f6:	2300      	movne	r3, #0
 800a0f8:	b2db      	uxtb	r3, r3
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	e00c      	b.n	800a118 <I2C_WaitOnFlagUntilTimeout+0x70>
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	699b      	ldr	r3, [r3, #24]
 800a104:	43da      	mvns	r2, r3
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	4013      	ands	r3, r2
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	bf0c      	ite	eq
 800a110:	2301      	moveq	r3, #1
 800a112:	2300      	movne	r3, #0
 800a114:	b2db      	uxtb	r3, r3
 800a116:	461a      	mov	r2, r3
 800a118:	79fb      	ldrb	r3, [r7, #7]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d116      	bne.n	800a14c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2200      	movs	r2, #0
 800a122:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2220      	movs	r2, #32
 800a128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a138:	f043 0220 	orr.w	r2, r3, #32
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	e023      	b.n	800a194 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	0c1b      	lsrs	r3, r3, #16
 800a150:	b2db      	uxtb	r3, r3
 800a152:	2b01      	cmp	r3, #1
 800a154:	d10d      	bne.n	800a172 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	695b      	ldr	r3, [r3, #20]
 800a15c:	43da      	mvns	r2, r3
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	4013      	ands	r3, r2
 800a162:	b29b      	uxth	r3, r3
 800a164:	2b00      	cmp	r3, #0
 800a166:	bf0c      	ite	eq
 800a168:	2301      	moveq	r3, #1
 800a16a:	2300      	movne	r3, #0
 800a16c:	b2db      	uxtb	r3, r3
 800a16e:	461a      	mov	r2, r3
 800a170:	e00c      	b.n	800a18c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	699b      	ldr	r3, [r3, #24]
 800a178:	43da      	mvns	r2, r3
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	4013      	ands	r3, r2
 800a17e:	b29b      	uxth	r3, r3
 800a180:	2b00      	cmp	r3, #0
 800a182:	bf0c      	ite	eq
 800a184:	2301      	moveq	r3, #1
 800a186:	2300      	movne	r3, #0
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	461a      	mov	r2, r3
 800a18c:	79fb      	ldrb	r3, [r7, #7]
 800a18e:	429a      	cmp	r2, r3
 800a190:	d093      	beq.n	800a0ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3710      	adds	r7, #16
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}

0800a19c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
 800a1a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a1aa:	e071      	b.n	800a290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	695b      	ldr	r3, [r3, #20]
 800a1b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a1b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1ba:	d123      	bne.n	800a204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a1d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2220      	movs	r2, #32
 800a1e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f0:	f043 0204 	orr.w	r2, r3, #4
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a200:	2301      	movs	r3, #1
 800a202:	e067      	b.n	800a2d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a20a:	d041      	beq.n	800a290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a20c:	f7fe f93e 	bl	800848c <HAL_GetTick>
 800a210:	4602      	mov	r2, r0
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	1ad3      	subs	r3, r2, r3
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	429a      	cmp	r2, r3
 800a21a:	d302      	bcc.n	800a222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d136      	bne.n	800a290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	0c1b      	lsrs	r3, r3, #16
 800a226:	b2db      	uxtb	r3, r3
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d10c      	bne.n	800a246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	695b      	ldr	r3, [r3, #20]
 800a232:	43da      	mvns	r2, r3
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	4013      	ands	r3, r2
 800a238:	b29b      	uxth	r3, r3
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	bf14      	ite	ne
 800a23e:	2301      	movne	r3, #1
 800a240:	2300      	moveq	r3, #0
 800a242:	b2db      	uxtb	r3, r3
 800a244:	e00b      	b.n	800a25e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	43da      	mvns	r2, r3
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	4013      	ands	r3, r2
 800a252:	b29b      	uxth	r3, r3
 800a254:	2b00      	cmp	r3, #0
 800a256:	bf14      	ite	ne
 800a258:	2301      	movne	r3, #1
 800a25a:	2300      	moveq	r3, #0
 800a25c:	b2db      	uxtb	r3, r3
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d016      	beq.n	800a290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	2200      	movs	r2, #0
 800a266:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2220      	movs	r2, #32
 800a26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2200      	movs	r2, #0
 800a274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27c:	f043 0220 	orr.w	r2, r3, #32
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a28c:	2301      	movs	r3, #1
 800a28e:	e021      	b.n	800a2d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	0c1b      	lsrs	r3, r3, #16
 800a294:	b2db      	uxtb	r3, r3
 800a296:	2b01      	cmp	r3, #1
 800a298:	d10c      	bne.n	800a2b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	695b      	ldr	r3, [r3, #20]
 800a2a0:	43da      	mvns	r2, r3
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	bf14      	ite	ne
 800a2ac:	2301      	movne	r3, #1
 800a2ae:	2300      	moveq	r3, #0
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	e00b      	b.n	800a2cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	43da      	mvns	r2, r3
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	4013      	ands	r3, r2
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	bf14      	ite	ne
 800a2c6:	2301      	movne	r3, #1
 800a2c8:	2300      	moveq	r3, #0
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f47f af6d 	bne.w	800a1ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a2e8:	e034      	b.n	800a354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f000 f8e3 	bl	800a4b6 <I2C_IsAcknowledgeFailed>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d001      	beq.n	800a2fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e034      	b.n	800a364 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a300:	d028      	beq.n	800a354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a302:	f7fe f8c3 	bl	800848c <HAL_GetTick>
 800a306:	4602      	mov	r2, r0
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	1ad3      	subs	r3, r2, r3
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d302      	bcc.n	800a318 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d11d      	bne.n	800a354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	695b      	ldr	r3, [r3, #20]
 800a31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a322:	2b80      	cmp	r3, #128	; 0x80
 800a324:	d016      	beq.n	800a354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2200      	movs	r2, #0
 800a32a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2220      	movs	r2, #32
 800a330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a340:	f043 0220 	orr.w	r2, r3, #32
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	e007      	b.n	800a364 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	695b      	ldr	r3, [r3, #20]
 800a35a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a35e:	2b80      	cmp	r3, #128	; 0x80
 800a360:	d1c3      	bne.n	800a2ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	3710      	adds	r7, #16
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b084      	sub	sp, #16
 800a370:	af00      	add	r7, sp, #0
 800a372:	60f8      	str	r0, [r7, #12]
 800a374:	60b9      	str	r1, [r7, #8]
 800a376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a378:	e034      	b.n	800a3e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f000 f89b 	bl	800a4b6 <I2C_IsAcknowledgeFailed>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	e034      	b.n	800a3f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a390:	d028      	beq.n	800a3e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a392:	f7fe f87b 	bl	800848c <HAL_GetTick>
 800a396:	4602      	mov	r2, r0
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	1ad3      	subs	r3, r2, r3
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	429a      	cmp	r2, r3
 800a3a0:	d302      	bcc.n	800a3a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d11d      	bne.n	800a3e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	695b      	ldr	r3, [r3, #20]
 800a3ae:	f003 0304 	and.w	r3, r3, #4
 800a3b2:	2b04      	cmp	r3, #4
 800a3b4:	d016      	beq.n	800a3e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2220      	movs	r2, #32
 800a3c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d0:	f043 0220 	orr.w	r2, r3, #32
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e007      	b.n	800a3f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	695b      	ldr	r3, [r3, #20]
 800a3ea:	f003 0304 	and.w	r3, r3, #4
 800a3ee:	2b04      	cmp	r3, #4
 800a3f0:	d1c3      	bne.n	800a37a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a3f2:	2300      	movs	r3, #0
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3710      	adds	r7, #16
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a408:	e049      	b.n	800a49e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	695b      	ldr	r3, [r3, #20]
 800a410:	f003 0310 	and.w	r3, r3, #16
 800a414:	2b10      	cmp	r3, #16
 800a416:	d119      	bne.n	800a44c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f06f 0210 	mvn.w	r2, #16
 800a420:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	2200      	movs	r2, #0
 800a426:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2220      	movs	r2, #32
 800a42c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	2200      	movs	r2, #0
 800a444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a448:	2301      	movs	r3, #1
 800a44a:	e030      	b.n	800a4ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a44c:	f7fe f81e 	bl	800848c <HAL_GetTick>
 800a450:	4602      	mov	r2, r0
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	68ba      	ldr	r2, [r7, #8]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d302      	bcc.n	800a462 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d11d      	bne.n	800a49e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	695b      	ldr	r3, [r3, #20]
 800a468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a46c:	2b40      	cmp	r3, #64	; 0x40
 800a46e:	d016      	beq.n	800a49e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2200      	movs	r2, #0
 800a474:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2220      	movs	r2, #32
 800a47a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48a:	f043 0220 	orr.w	r2, r3, #32
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a49a:	2301      	movs	r3, #1
 800a49c:	e007      	b.n	800a4ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	695b      	ldr	r3, [r3, #20]
 800a4a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4a8:	2b40      	cmp	r3, #64	; 0x40
 800a4aa:	d1ae      	bne.n	800a40a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b083      	sub	sp, #12
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	695b      	ldr	r3, [r3, #20]
 800a4c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4cc:	d11b      	bne.n	800a506 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a4d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2220      	movs	r2, #32
 800a4e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4f2:	f043 0204 	orr.w	r2, r3, #4
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a502:	2301      	movs	r3, #1
 800a504:	e000      	b.n	800a508 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a506:	2300      	movs	r3, #0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bc80      	pop	{r7}
 800a510:	4770      	bx	lr
	...

0800a514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b086      	sub	sp, #24
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d101      	bne.n	800a526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a522:	2301      	movs	r3, #1
 800a524:	e272      	b.n	800aa0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	f003 0301 	and.w	r3, r3, #1
 800a52e:	2b00      	cmp	r3, #0
 800a530:	f000 8087 	beq.w	800a642 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a534:	4b92      	ldr	r3, [pc, #584]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	f003 030c 	and.w	r3, r3, #12
 800a53c:	2b04      	cmp	r3, #4
 800a53e:	d00c      	beq.n	800a55a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a540:	4b8f      	ldr	r3, [pc, #572]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	f003 030c 	and.w	r3, r3, #12
 800a548:	2b08      	cmp	r3, #8
 800a54a:	d112      	bne.n	800a572 <HAL_RCC_OscConfig+0x5e>
 800a54c:	4b8c      	ldr	r3, [pc, #560]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a558:	d10b      	bne.n	800a572 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a55a:	4b89      	ldr	r3, [pc, #548]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a562:	2b00      	cmp	r3, #0
 800a564:	d06c      	beq.n	800a640 <HAL_RCC_OscConfig+0x12c>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d168      	bne.n	800a640 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	e24c      	b.n	800aa0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a57a:	d106      	bne.n	800a58a <HAL_RCC_OscConfig+0x76>
 800a57c:	4b80      	ldr	r3, [pc, #512]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a7f      	ldr	r2, [pc, #508]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a586:	6013      	str	r3, [r2, #0]
 800a588:	e02e      	b.n	800a5e8 <HAL_RCC_OscConfig+0xd4>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10c      	bne.n	800a5ac <HAL_RCC_OscConfig+0x98>
 800a592:	4b7b      	ldr	r3, [pc, #492]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	4a7a      	ldr	r2, [pc, #488]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a59c:	6013      	str	r3, [r2, #0]
 800a59e:	4b78      	ldr	r3, [pc, #480]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a77      	ldr	r2, [pc, #476]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a5a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5a8:	6013      	str	r3, [r2, #0]
 800a5aa:	e01d      	b.n	800a5e8 <HAL_RCC_OscConfig+0xd4>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a5b4:	d10c      	bne.n	800a5d0 <HAL_RCC_OscConfig+0xbc>
 800a5b6:	4b72      	ldr	r3, [pc, #456]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a71      	ldr	r2, [pc, #452]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a5bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a5c0:	6013      	str	r3, [r2, #0]
 800a5c2:	4b6f      	ldr	r3, [pc, #444]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a6e      	ldr	r2, [pc, #440]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a5c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a5cc:	6013      	str	r3, [r2, #0]
 800a5ce:	e00b      	b.n	800a5e8 <HAL_RCC_OscConfig+0xd4>
 800a5d0:	4b6b      	ldr	r3, [pc, #428]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a6a      	ldr	r2, [pc, #424]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a5d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a5da:	6013      	str	r3, [r2, #0]
 800a5dc:	4b68      	ldr	r3, [pc, #416]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	4a67      	ldr	r2, [pc, #412]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a5e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a5e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d013      	beq.n	800a618 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a5f0:	f7fd ff4c 	bl	800848c <HAL_GetTick>
 800a5f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5f6:	e008      	b.n	800a60a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a5f8:	f7fd ff48 	bl	800848c <HAL_GetTick>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	1ad3      	subs	r3, r2, r3
 800a602:	2b64      	cmp	r3, #100	; 0x64
 800a604:	d901      	bls.n	800a60a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a606:	2303      	movs	r3, #3
 800a608:	e200      	b.n	800aa0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a60a:	4b5d      	ldr	r3, [pc, #372]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a612:	2b00      	cmp	r3, #0
 800a614:	d0f0      	beq.n	800a5f8 <HAL_RCC_OscConfig+0xe4>
 800a616:	e014      	b.n	800a642 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a618:	f7fd ff38 	bl	800848c <HAL_GetTick>
 800a61c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a61e:	e008      	b.n	800a632 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a620:	f7fd ff34 	bl	800848c <HAL_GetTick>
 800a624:	4602      	mov	r2, r0
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	2b64      	cmp	r3, #100	; 0x64
 800a62c:	d901      	bls.n	800a632 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a62e:	2303      	movs	r3, #3
 800a630:	e1ec      	b.n	800aa0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a632:	4b53      	ldr	r3, [pc, #332]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d1f0      	bne.n	800a620 <HAL_RCC_OscConfig+0x10c>
 800a63e:	e000      	b.n	800a642 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 0302 	and.w	r3, r3, #2
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d063      	beq.n	800a716 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a64e:	4b4c      	ldr	r3, [pc, #304]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	f003 030c 	and.w	r3, r3, #12
 800a656:	2b00      	cmp	r3, #0
 800a658:	d00b      	beq.n	800a672 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a65a:	4b49      	ldr	r3, [pc, #292]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	f003 030c 	and.w	r3, r3, #12
 800a662:	2b08      	cmp	r3, #8
 800a664:	d11c      	bne.n	800a6a0 <HAL_RCC_OscConfig+0x18c>
 800a666:	4b46      	ldr	r3, [pc, #280]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d116      	bne.n	800a6a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a672:	4b43      	ldr	r3, [pc, #268]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 0302 	and.w	r3, r3, #2
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d005      	beq.n	800a68a <HAL_RCC_OscConfig+0x176>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	2b01      	cmp	r3, #1
 800a684:	d001      	beq.n	800a68a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a686:	2301      	movs	r3, #1
 800a688:	e1c0      	b.n	800aa0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a68a:	4b3d      	ldr	r3, [pc, #244]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	695b      	ldr	r3, [r3, #20]
 800a696:	00db      	lsls	r3, r3, #3
 800a698:	4939      	ldr	r1, [pc, #228]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a69a:	4313      	orrs	r3, r2
 800a69c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a69e:	e03a      	b.n	800a716 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	691b      	ldr	r3, [r3, #16]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d020      	beq.n	800a6ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a6a8:	4b36      	ldr	r3, [pc, #216]	; (800a784 <HAL_RCC_OscConfig+0x270>)
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6ae:	f7fd feed 	bl	800848c <HAL_GetTick>
 800a6b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6b4:	e008      	b.n	800a6c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6b6:	f7fd fee9 	bl	800848c <HAL_GetTick>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	1ad3      	subs	r3, r2, r3
 800a6c0:	2b02      	cmp	r3, #2
 800a6c2:	d901      	bls.n	800a6c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a6c4:	2303      	movs	r3, #3
 800a6c6:	e1a1      	b.n	800aa0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a6c8:	4b2d      	ldr	r3, [pc, #180]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f003 0302 	and.w	r3, r3, #2
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d0f0      	beq.n	800a6b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a6d4:	4b2a      	ldr	r3, [pc, #168]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	695b      	ldr	r3, [r3, #20]
 800a6e0:	00db      	lsls	r3, r3, #3
 800a6e2:	4927      	ldr	r1, [pc, #156]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	600b      	str	r3, [r1, #0]
 800a6e8:	e015      	b.n	800a716 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a6ea:	4b26      	ldr	r3, [pc, #152]	; (800a784 <HAL_RCC_OscConfig+0x270>)
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6f0:	f7fd fecc 	bl	800848c <HAL_GetTick>
 800a6f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a6f6:	e008      	b.n	800a70a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a6f8:	f7fd fec8 	bl	800848c <HAL_GetTick>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	1ad3      	subs	r3, r2, r3
 800a702:	2b02      	cmp	r3, #2
 800a704:	d901      	bls.n	800a70a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a706:	2303      	movs	r3, #3
 800a708:	e180      	b.n	800aa0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a70a:	4b1d      	ldr	r3, [pc, #116]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 0302 	and.w	r3, r3, #2
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1f0      	bne.n	800a6f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f003 0308 	and.w	r3, r3, #8
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d03a      	beq.n	800a798 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	699b      	ldr	r3, [r3, #24]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d019      	beq.n	800a75e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a72a:	4b17      	ldr	r3, [pc, #92]	; (800a788 <HAL_RCC_OscConfig+0x274>)
 800a72c:	2201      	movs	r2, #1
 800a72e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a730:	f7fd feac 	bl	800848c <HAL_GetTick>
 800a734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a736:	e008      	b.n	800a74a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a738:	f7fd fea8 	bl	800848c <HAL_GetTick>
 800a73c:	4602      	mov	r2, r0
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	1ad3      	subs	r3, r2, r3
 800a742:	2b02      	cmp	r3, #2
 800a744:	d901      	bls.n	800a74a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a746:	2303      	movs	r3, #3
 800a748:	e160      	b.n	800aa0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a74a:	4b0d      	ldr	r3, [pc, #52]	; (800a780 <HAL_RCC_OscConfig+0x26c>)
 800a74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74e:	f003 0302 	and.w	r3, r3, #2
 800a752:	2b00      	cmp	r3, #0
 800a754:	d0f0      	beq.n	800a738 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a756:	2001      	movs	r0, #1
 800a758:	f000 face 	bl	800acf8 <RCC_Delay>
 800a75c:	e01c      	b.n	800a798 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a75e:	4b0a      	ldr	r3, [pc, #40]	; (800a788 <HAL_RCC_OscConfig+0x274>)
 800a760:	2200      	movs	r2, #0
 800a762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a764:	f7fd fe92 	bl	800848c <HAL_GetTick>
 800a768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a76a:	e00f      	b.n	800a78c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a76c:	f7fd fe8e 	bl	800848c <HAL_GetTick>
 800a770:	4602      	mov	r2, r0
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	1ad3      	subs	r3, r2, r3
 800a776:	2b02      	cmp	r3, #2
 800a778:	d908      	bls.n	800a78c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a77a:	2303      	movs	r3, #3
 800a77c:	e146      	b.n	800aa0c <HAL_RCC_OscConfig+0x4f8>
 800a77e:	bf00      	nop
 800a780:	40021000 	.word	0x40021000
 800a784:	42420000 	.word	0x42420000
 800a788:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a78c:	4b92      	ldr	r3, [pc, #584]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a78e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a790:	f003 0302 	and.w	r3, r3, #2
 800a794:	2b00      	cmp	r3, #0
 800a796:	d1e9      	bne.n	800a76c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f003 0304 	and.w	r3, r3, #4
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f000 80a6 	beq.w	800a8f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a7aa:	4b8b      	ldr	r3, [pc, #556]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a7ac:	69db      	ldr	r3, [r3, #28]
 800a7ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d10d      	bne.n	800a7d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a7b6:	4b88      	ldr	r3, [pc, #544]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a7b8:	69db      	ldr	r3, [r3, #28]
 800a7ba:	4a87      	ldr	r2, [pc, #540]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a7bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7c0:	61d3      	str	r3, [r2, #28]
 800a7c2:	4b85      	ldr	r3, [pc, #532]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a7c4:	69db      	ldr	r3, [r3, #28]
 800a7c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7ca:	60bb      	str	r3, [r7, #8]
 800a7cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a7d2:	4b82      	ldr	r3, [pc, #520]	; (800a9dc <HAL_RCC_OscConfig+0x4c8>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d118      	bne.n	800a810 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a7de:	4b7f      	ldr	r3, [pc, #508]	; (800a9dc <HAL_RCC_OscConfig+0x4c8>)
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	4a7e      	ldr	r2, [pc, #504]	; (800a9dc <HAL_RCC_OscConfig+0x4c8>)
 800a7e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a7ea:	f7fd fe4f 	bl	800848c <HAL_GetTick>
 800a7ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a7f0:	e008      	b.n	800a804 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7f2:	f7fd fe4b 	bl	800848c <HAL_GetTick>
 800a7f6:	4602      	mov	r2, r0
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	1ad3      	subs	r3, r2, r3
 800a7fc:	2b64      	cmp	r3, #100	; 0x64
 800a7fe:	d901      	bls.n	800a804 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a800:	2303      	movs	r3, #3
 800a802:	e103      	b.n	800aa0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a804:	4b75      	ldr	r3, [pc, #468]	; (800a9dc <HAL_RCC_OscConfig+0x4c8>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d0f0      	beq.n	800a7f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d106      	bne.n	800a826 <HAL_RCC_OscConfig+0x312>
 800a818:	4b6f      	ldr	r3, [pc, #444]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a81a:	6a1b      	ldr	r3, [r3, #32]
 800a81c:	4a6e      	ldr	r2, [pc, #440]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a81e:	f043 0301 	orr.w	r3, r3, #1
 800a822:	6213      	str	r3, [r2, #32]
 800a824:	e02d      	b.n	800a882 <HAL_RCC_OscConfig+0x36e>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	68db      	ldr	r3, [r3, #12]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d10c      	bne.n	800a848 <HAL_RCC_OscConfig+0x334>
 800a82e:	4b6a      	ldr	r3, [pc, #424]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a830:	6a1b      	ldr	r3, [r3, #32]
 800a832:	4a69      	ldr	r2, [pc, #420]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a834:	f023 0301 	bic.w	r3, r3, #1
 800a838:	6213      	str	r3, [r2, #32]
 800a83a:	4b67      	ldr	r3, [pc, #412]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a83c:	6a1b      	ldr	r3, [r3, #32]
 800a83e:	4a66      	ldr	r2, [pc, #408]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a840:	f023 0304 	bic.w	r3, r3, #4
 800a844:	6213      	str	r3, [r2, #32]
 800a846:	e01c      	b.n	800a882 <HAL_RCC_OscConfig+0x36e>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	68db      	ldr	r3, [r3, #12]
 800a84c:	2b05      	cmp	r3, #5
 800a84e:	d10c      	bne.n	800a86a <HAL_RCC_OscConfig+0x356>
 800a850:	4b61      	ldr	r3, [pc, #388]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a852:	6a1b      	ldr	r3, [r3, #32]
 800a854:	4a60      	ldr	r2, [pc, #384]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a856:	f043 0304 	orr.w	r3, r3, #4
 800a85a:	6213      	str	r3, [r2, #32]
 800a85c:	4b5e      	ldr	r3, [pc, #376]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a85e:	6a1b      	ldr	r3, [r3, #32]
 800a860:	4a5d      	ldr	r2, [pc, #372]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a862:	f043 0301 	orr.w	r3, r3, #1
 800a866:	6213      	str	r3, [r2, #32]
 800a868:	e00b      	b.n	800a882 <HAL_RCC_OscConfig+0x36e>
 800a86a:	4b5b      	ldr	r3, [pc, #364]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a86c:	6a1b      	ldr	r3, [r3, #32]
 800a86e:	4a5a      	ldr	r2, [pc, #360]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a870:	f023 0301 	bic.w	r3, r3, #1
 800a874:	6213      	str	r3, [r2, #32]
 800a876:	4b58      	ldr	r3, [pc, #352]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a878:	6a1b      	ldr	r3, [r3, #32]
 800a87a:	4a57      	ldr	r2, [pc, #348]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a87c:	f023 0304 	bic.w	r3, r3, #4
 800a880:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	68db      	ldr	r3, [r3, #12]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d015      	beq.n	800a8b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a88a:	f7fd fdff 	bl	800848c <HAL_GetTick>
 800a88e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a890:	e00a      	b.n	800a8a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a892:	f7fd fdfb 	bl	800848c <HAL_GetTick>
 800a896:	4602      	mov	r2, r0
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	1ad3      	subs	r3, r2, r3
 800a89c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d901      	bls.n	800a8a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a8a4:	2303      	movs	r3, #3
 800a8a6:	e0b1      	b.n	800aa0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a8a8:	4b4b      	ldr	r3, [pc, #300]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a8aa:	6a1b      	ldr	r3, [r3, #32]
 800a8ac:	f003 0302 	and.w	r3, r3, #2
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d0ee      	beq.n	800a892 <HAL_RCC_OscConfig+0x37e>
 800a8b4:	e014      	b.n	800a8e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a8b6:	f7fd fde9 	bl	800848c <HAL_GetTick>
 800a8ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a8bc:	e00a      	b.n	800a8d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a8be:	f7fd fde5 	bl	800848c <HAL_GetTick>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	1ad3      	subs	r3, r2, r3
 800a8c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d901      	bls.n	800a8d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a8d0:	2303      	movs	r3, #3
 800a8d2:	e09b      	b.n	800aa0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a8d4:	4b40      	ldr	r3, [pc, #256]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a8d6:	6a1b      	ldr	r3, [r3, #32]
 800a8d8:	f003 0302 	and.w	r3, r3, #2
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d1ee      	bne.n	800a8be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a8e0:	7dfb      	ldrb	r3, [r7, #23]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d105      	bne.n	800a8f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a8e6:	4b3c      	ldr	r3, [pc, #240]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a8e8:	69db      	ldr	r3, [r3, #28]
 800a8ea:	4a3b      	ldr	r2, [pc, #236]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a8ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a8f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	69db      	ldr	r3, [r3, #28]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f000 8087 	beq.w	800aa0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a8fc:	4b36      	ldr	r3, [pc, #216]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	f003 030c 	and.w	r3, r3, #12
 800a904:	2b08      	cmp	r3, #8
 800a906:	d061      	beq.n	800a9cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	69db      	ldr	r3, [r3, #28]
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	d146      	bne.n	800a99e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a910:	4b33      	ldr	r3, [pc, #204]	; (800a9e0 <HAL_RCC_OscConfig+0x4cc>)
 800a912:	2200      	movs	r2, #0
 800a914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a916:	f7fd fdb9 	bl	800848c <HAL_GetTick>
 800a91a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a91c:	e008      	b.n	800a930 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a91e:	f7fd fdb5 	bl	800848c <HAL_GetTick>
 800a922:	4602      	mov	r2, r0
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	1ad3      	subs	r3, r2, r3
 800a928:	2b02      	cmp	r3, #2
 800a92a:	d901      	bls.n	800a930 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a92c:	2303      	movs	r3, #3
 800a92e:	e06d      	b.n	800aa0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a930:	4b29      	ldr	r3, [pc, #164]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1f0      	bne.n	800a91e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6a1b      	ldr	r3, [r3, #32]
 800a940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a944:	d108      	bne.n	800a958 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a946:	4b24      	ldr	r3, [pc, #144]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	4921      	ldr	r1, [pc, #132]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a954:	4313      	orrs	r3, r2
 800a956:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a958:	4b1f      	ldr	r3, [pc, #124]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6a19      	ldr	r1, [r3, #32]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a968:	430b      	orrs	r3, r1
 800a96a:	491b      	ldr	r1, [pc, #108]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a96c:	4313      	orrs	r3, r2
 800a96e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a970:	4b1b      	ldr	r3, [pc, #108]	; (800a9e0 <HAL_RCC_OscConfig+0x4cc>)
 800a972:	2201      	movs	r2, #1
 800a974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a976:	f7fd fd89 	bl	800848c <HAL_GetTick>
 800a97a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a97c:	e008      	b.n	800a990 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a97e:	f7fd fd85 	bl	800848c <HAL_GetTick>
 800a982:	4602      	mov	r2, r0
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	1ad3      	subs	r3, r2, r3
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d901      	bls.n	800a990 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a98c:	2303      	movs	r3, #3
 800a98e:	e03d      	b.n	800aa0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a990:	4b11      	ldr	r3, [pc, #68]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d0f0      	beq.n	800a97e <HAL_RCC_OscConfig+0x46a>
 800a99c:	e035      	b.n	800aa0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a99e:	4b10      	ldr	r3, [pc, #64]	; (800a9e0 <HAL_RCC_OscConfig+0x4cc>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a9a4:	f7fd fd72 	bl	800848c <HAL_GetTick>
 800a9a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a9aa:	e008      	b.n	800a9be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9ac:	f7fd fd6e 	bl	800848c <HAL_GetTick>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d901      	bls.n	800a9be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a9ba:	2303      	movs	r3, #3
 800a9bc:	e026      	b.n	800aa0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a9be:	4b06      	ldr	r3, [pc, #24]	; (800a9d8 <HAL_RCC_OscConfig+0x4c4>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1f0      	bne.n	800a9ac <HAL_RCC_OscConfig+0x498>
 800a9ca:	e01e      	b.n	800aa0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	69db      	ldr	r3, [r3, #28]
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d107      	bne.n	800a9e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e019      	b.n	800aa0c <HAL_RCC_OscConfig+0x4f8>
 800a9d8:	40021000 	.word	0x40021000
 800a9dc:	40007000 	.word	0x40007000
 800a9e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a9e4:	4b0b      	ldr	r3, [pc, #44]	; (800aa14 <HAL_RCC_OscConfig+0x500>)
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	6a1b      	ldr	r3, [r3, #32]
 800a9f4:	429a      	cmp	r2, r3
 800a9f6:	d106      	bne.n	800aa06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d001      	beq.n	800aa0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800aa06:	2301      	movs	r3, #1
 800aa08:	e000      	b.n	800aa0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3718      	adds	r7, #24
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	40021000 	.word	0x40021000

0800aa18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d101      	bne.n	800aa2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e0d0      	b.n	800abce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aa2c:	4b6a      	ldr	r3, [pc, #424]	; (800abd8 <HAL_RCC_ClockConfig+0x1c0>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f003 0307 	and.w	r3, r3, #7
 800aa34:	683a      	ldr	r2, [r7, #0]
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d910      	bls.n	800aa5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa3a:	4b67      	ldr	r3, [pc, #412]	; (800abd8 <HAL_RCC_ClockConfig+0x1c0>)
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f023 0207 	bic.w	r2, r3, #7
 800aa42:	4965      	ldr	r1, [pc, #404]	; (800abd8 <HAL_RCC_ClockConfig+0x1c0>)
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	4313      	orrs	r3, r2
 800aa48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa4a:	4b63      	ldr	r3, [pc, #396]	; (800abd8 <HAL_RCC_ClockConfig+0x1c0>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 0307 	and.w	r3, r3, #7
 800aa52:	683a      	ldr	r2, [r7, #0]
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d001      	beq.n	800aa5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e0b8      	b.n	800abce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f003 0302 	and.w	r3, r3, #2
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d020      	beq.n	800aaaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f003 0304 	and.w	r3, r3, #4
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d005      	beq.n	800aa80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aa74:	4b59      	ldr	r3, [pc, #356]	; (800abdc <HAL_RCC_ClockConfig+0x1c4>)
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	4a58      	ldr	r2, [pc, #352]	; (800abdc <HAL_RCC_ClockConfig+0x1c4>)
 800aa7a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800aa7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f003 0308 	and.w	r3, r3, #8
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d005      	beq.n	800aa98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800aa8c:	4b53      	ldr	r3, [pc, #332]	; (800abdc <HAL_RCC_ClockConfig+0x1c4>)
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	4a52      	ldr	r2, [pc, #328]	; (800abdc <HAL_RCC_ClockConfig+0x1c4>)
 800aa92:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800aa96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa98:	4b50      	ldr	r3, [pc, #320]	; (800abdc <HAL_RCC_ClockConfig+0x1c4>)
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	689b      	ldr	r3, [r3, #8]
 800aaa4:	494d      	ldr	r1, [pc, #308]	; (800abdc <HAL_RCC_ClockConfig+0x1c4>)
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f003 0301 	and.w	r3, r3, #1
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d040      	beq.n	800ab38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d107      	bne.n	800aace <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aabe:	4b47      	ldr	r3, [pc, #284]	; (800abdc <HAL_RCC_ClockConfig+0x1c4>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d115      	bne.n	800aaf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aaca:	2301      	movs	r3, #1
 800aacc:	e07f      	b.n	800abce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	2b02      	cmp	r3, #2
 800aad4:	d107      	bne.n	800aae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aad6:	4b41      	ldr	r3, [pc, #260]	; (800abdc <HAL_RCC_ClockConfig+0x1c4>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d109      	bne.n	800aaf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aae2:	2301      	movs	r3, #1
 800aae4:	e073      	b.n	800abce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aae6:	4b3d      	ldr	r3, [pc, #244]	; (800abdc <HAL_RCC_ClockConfig+0x1c4>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f003 0302 	and.w	r3, r3, #2
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d101      	bne.n	800aaf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	e06b      	b.n	800abce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aaf6:	4b39      	ldr	r3, [pc, #228]	; (800abdc <HAL_RCC_ClockConfig+0x1c4>)
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	f023 0203 	bic.w	r2, r3, #3
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	4936      	ldr	r1, [pc, #216]	; (800abdc <HAL_RCC_ClockConfig+0x1c4>)
 800ab04:	4313      	orrs	r3, r2
 800ab06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ab08:	f7fd fcc0 	bl	800848c <HAL_GetTick>
 800ab0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab0e:	e00a      	b.n	800ab26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab10:	f7fd fcbc 	bl	800848c <HAL_GetTick>
 800ab14:	4602      	mov	r2, r0
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	1ad3      	subs	r3, r2, r3
 800ab1a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d901      	bls.n	800ab26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ab22:	2303      	movs	r3, #3
 800ab24:	e053      	b.n	800abce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab26:	4b2d      	ldr	r3, [pc, #180]	; (800abdc <HAL_RCC_ClockConfig+0x1c4>)
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	f003 020c 	and.w	r2, r3, #12
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d1eb      	bne.n	800ab10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ab38:	4b27      	ldr	r3, [pc, #156]	; (800abd8 <HAL_RCC_ClockConfig+0x1c0>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f003 0307 	and.w	r3, r3, #7
 800ab40:	683a      	ldr	r2, [r7, #0]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d210      	bcs.n	800ab68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab46:	4b24      	ldr	r3, [pc, #144]	; (800abd8 <HAL_RCC_ClockConfig+0x1c0>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f023 0207 	bic.w	r2, r3, #7
 800ab4e:	4922      	ldr	r1, [pc, #136]	; (800abd8 <HAL_RCC_ClockConfig+0x1c0>)
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	4313      	orrs	r3, r2
 800ab54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab56:	4b20      	ldr	r3, [pc, #128]	; (800abd8 <HAL_RCC_ClockConfig+0x1c0>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f003 0307 	and.w	r3, r3, #7
 800ab5e:	683a      	ldr	r2, [r7, #0]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d001      	beq.n	800ab68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ab64:	2301      	movs	r3, #1
 800ab66:	e032      	b.n	800abce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f003 0304 	and.w	r3, r3, #4
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d008      	beq.n	800ab86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ab74:	4b19      	ldr	r3, [pc, #100]	; (800abdc <HAL_RCC_ClockConfig+0x1c4>)
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	4916      	ldr	r1, [pc, #88]	; (800abdc <HAL_RCC_ClockConfig+0x1c4>)
 800ab82:	4313      	orrs	r3, r2
 800ab84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f003 0308 	and.w	r3, r3, #8
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d009      	beq.n	800aba6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ab92:	4b12      	ldr	r3, [pc, #72]	; (800abdc <HAL_RCC_ClockConfig+0x1c4>)
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	691b      	ldr	r3, [r3, #16]
 800ab9e:	00db      	lsls	r3, r3, #3
 800aba0:	490e      	ldr	r1, [pc, #56]	; (800abdc <HAL_RCC_ClockConfig+0x1c4>)
 800aba2:	4313      	orrs	r3, r2
 800aba4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aba6:	f000 f821 	bl	800abec <HAL_RCC_GetSysClockFreq>
 800abaa:	4602      	mov	r2, r0
 800abac:	4b0b      	ldr	r3, [pc, #44]	; (800abdc <HAL_RCC_ClockConfig+0x1c4>)
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	091b      	lsrs	r3, r3, #4
 800abb2:	f003 030f 	and.w	r3, r3, #15
 800abb6:	490a      	ldr	r1, [pc, #40]	; (800abe0 <HAL_RCC_ClockConfig+0x1c8>)
 800abb8:	5ccb      	ldrb	r3, [r1, r3]
 800abba:	fa22 f303 	lsr.w	r3, r2, r3
 800abbe:	4a09      	ldr	r2, [pc, #36]	; (800abe4 <HAL_RCC_ClockConfig+0x1cc>)
 800abc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800abc2:	4b09      	ldr	r3, [pc, #36]	; (800abe8 <HAL_RCC_ClockConfig+0x1d0>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fd fc1e 	bl	8008408 <HAL_InitTick>

  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	40022000 	.word	0x40022000
 800abdc:	40021000 	.word	0x40021000
 800abe0:	0800da9c 	.word	0x0800da9c
 800abe4:	200000a8 	.word	0x200000a8
 800abe8:	200000ac 	.word	0x200000ac

0800abec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800abec:	b480      	push	{r7}
 800abee:	b087      	sub	sp, #28
 800abf0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800abf2:	2300      	movs	r3, #0
 800abf4:	60fb      	str	r3, [r7, #12]
 800abf6:	2300      	movs	r3, #0
 800abf8:	60bb      	str	r3, [r7, #8]
 800abfa:	2300      	movs	r3, #0
 800abfc:	617b      	str	r3, [r7, #20]
 800abfe:	2300      	movs	r3, #0
 800ac00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ac02:	2300      	movs	r3, #0
 800ac04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ac06:	4b1e      	ldr	r3, [pc, #120]	; (800ac80 <HAL_RCC_GetSysClockFreq+0x94>)
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	f003 030c 	and.w	r3, r3, #12
 800ac12:	2b04      	cmp	r3, #4
 800ac14:	d002      	beq.n	800ac1c <HAL_RCC_GetSysClockFreq+0x30>
 800ac16:	2b08      	cmp	r3, #8
 800ac18:	d003      	beq.n	800ac22 <HAL_RCC_GetSysClockFreq+0x36>
 800ac1a:	e027      	b.n	800ac6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ac1c:	4b19      	ldr	r3, [pc, #100]	; (800ac84 <HAL_RCC_GetSysClockFreq+0x98>)
 800ac1e:	613b      	str	r3, [r7, #16]
      break;
 800ac20:	e027      	b.n	800ac72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	0c9b      	lsrs	r3, r3, #18
 800ac26:	f003 030f 	and.w	r3, r3, #15
 800ac2a:	4a17      	ldr	r2, [pc, #92]	; (800ac88 <HAL_RCC_GetSysClockFreq+0x9c>)
 800ac2c:	5cd3      	ldrb	r3, [r2, r3]
 800ac2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d010      	beq.n	800ac5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ac3a:	4b11      	ldr	r3, [pc, #68]	; (800ac80 <HAL_RCC_GetSysClockFreq+0x94>)
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	0c5b      	lsrs	r3, r3, #17
 800ac40:	f003 0301 	and.w	r3, r3, #1
 800ac44:	4a11      	ldr	r2, [pc, #68]	; (800ac8c <HAL_RCC_GetSysClockFreq+0xa0>)
 800ac46:	5cd3      	ldrb	r3, [r2, r3]
 800ac48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4a0d      	ldr	r2, [pc, #52]	; (800ac84 <HAL_RCC_GetSysClockFreq+0x98>)
 800ac4e:	fb03 f202 	mul.w	r2, r3, r2
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac58:	617b      	str	r3, [r7, #20]
 800ac5a:	e004      	b.n	800ac66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	4a0c      	ldr	r2, [pc, #48]	; (800ac90 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ac60:	fb02 f303 	mul.w	r3, r2, r3
 800ac64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	613b      	str	r3, [r7, #16]
      break;
 800ac6a:	e002      	b.n	800ac72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ac6c:	4b05      	ldr	r3, [pc, #20]	; (800ac84 <HAL_RCC_GetSysClockFreq+0x98>)
 800ac6e:	613b      	str	r3, [r7, #16]
      break;
 800ac70:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ac72:	693b      	ldr	r3, [r7, #16]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	371c      	adds	r7, #28
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bc80      	pop	{r7}
 800ac7c:	4770      	bx	lr
 800ac7e:	bf00      	nop
 800ac80:	40021000 	.word	0x40021000
 800ac84:	007a1200 	.word	0x007a1200
 800ac88:	0800dab4 	.word	0x0800dab4
 800ac8c:	0800dac4 	.word	0x0800dac4
 800ac90:	003d0900 	.word	0x003d0900

0800ac94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac94:	b480      	push	{r7}
 800ac96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ac98:	4b02      	ldr	r3, [pc, #8]	; (800aca4 <HAL_RCC_GetHCLKFreq+0x10>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bc80      	pop	{r7}
 800aca2:	4770      	bx	lr
 800aca4:	200000a8 	.word	0x200000a8

0800aca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800acac:	f7ff fff2 	bl	800ac94 <HAL_RCC_GetHCLKFreq>
 800acb0:	4602      	mov	r2, r0
 800acb2:	4b05      	ldr	r3, [pc, #20]	; (800acc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	0a1b      	lsrs	r3, r3, #8
 800acb8:	f003 0307 	and.w	r3, r3, #7
 800acbc:	4903      	ldr	r1, [pc, #12]	; (800accc <HAL_RCC_GetPCLK1Freq+0x24>)
 800acbe:	5ccb      	ldrb	r3, [r1, r3]
 800acc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	40021000 	.word	0x40021000
 800accc:	0800daac 	.word	0x0800daac

0800acd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800acd4:	f7ff ffde 	bl	800ac94 <HAL_RCC_GetHCLKFreq>
 800acd8:	4602      	mov	r2, r0
 800acda:	4b05      	ldr	r3, [pc, #20]	; (800acf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	0adb      	lsrs	r3, r3, #11
 800ace0:	f003 0307 	and.w	r3, r3, #7
 800ace4:	4903      	ldr	r1, [pc, #12]	; (800acf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ace6:	5ccb      	ldrb	r3, [r1, r3]
 800ace8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800acec:	4618      	mov	r0, r3
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	40021000 	.word	0x40021000
 800acf4:	0800daac 	.word	0x0800daac

0800acf8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800ad00:	4b0a      	ldr	r3, [pc, #40]	; (800ad2c <RCC_Delay+0x34>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4a0a      	ldr	r2, [pc, #40]	; (800ad30 <RCC_Delay+0x38>)
 800ad06:	fba2 2303 	umull	r2, r3, r2, r3
 800ad0a:	0a5b      	lsrs	r3, r3, #9
 800ad0c:	687a      	ldr	r2, [r7, #4]
 800ad0e:	fb02 f303 	mul.w	r3, r2, r3
 800ad12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800ad14:	bf00      	nop
  }
  while (Delay --);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	1e5a      	subs	r2, r3, #1
 800ad1a:	60fa      	str	r2, [r7, #12]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1f9      	bne.n	800ad14 <RCC_Delay+0x1c>
}
 800ad20:	bf00      	nop
 800ad22:	bf00      	nop
 800ad24:	3714      	adds	r7, #20
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bc80      	pop	{r7}
 800ad2a:	4770      	bx	lr
 800ad2c:	200000a8 	.word	0x200000a8
 800ad30:	10624dd3 	.word	0x10624dd3

0800ad34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d101      	bne.n	800ad46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	e041      	b.n	800adca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad4c:	b2db      	uxtb	r3, r3
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d106      	bne.n	800ad60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f7fd fa26 	bl	80081ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2202      	movs	r2, #2
 800ad64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	3304      	adds	r3, #4
 800ad70:	4619      	mov	r1, r3
 800ad72:	4610      	mov	r0, r2
 800ad74:	f000 fa82 	bl	800b27c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2201      	movs	r2, #1
 800ad84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2201      	movs	r2, #1
 800ada4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2201      	movs	r2, #1
 800adb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2201      	movs	r2, #1
 800adbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2201      	movs	r2, #1
 800adc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800adc8:	2300      	movs	r3, #0
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
	...

0800add4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800add4:	b480      	push	{r7}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	2b01      	cmp	r3, #1
 800ade6:	d001      	beq.n	800adec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ade8:	2301      	movs	r3, #1
 800adea:	e044      	b.n	800ae76 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2202      	movs	r2, #2
 800adf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	68da      	ldr	r2, [r3, #12]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f042 0201 	orr.w	r2, r2, #1
 800ae02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a1d      	ldr	r2, [pc, #116]	; (800ae80 <HAL_TIM_Base_Start_IT+0xac>)
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d018      	beq.n	800ae40 <HAL_TIM_Base_Start_IT+0x6c>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4a1c      	ldr	r2, [pc, #112]	; (800ae84 <HAL_TIM_Base_Start_IT+0xb0>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d013      	beq.n	800ae40 <HAL_TIM_Base_Start_IT+0x6c>
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae20:	d00e      	beq.n	800ae40 <HAL_TIM_Base_Start_IT+0x6c>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	4a18      	ldr	r2, [pc, #96]	; (800ae88 <HAL_TIM_Base_Start_IT+0xb4>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d009      	beq.n	800ae40 <HAL_TIM_Base_Start_IT+0x6c>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a16      	ldr	r2, [pc, #88]	; (800ae8c <HAL_TIM_Base_Start_IT+0xb8>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d004      	beq.n	800ae40 <HAL_TIM_Base_Start_IT+0x6c>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a15      	ldr	r2, [pc, #84]	; (800ae90 <HAL_TIM_Base_Start_IT+0xbc>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d111      	bne.n	800ae64 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	689b      	ldr	r3, [r3, #8]
 800ae46:	f003 0307 	and.w	r3, r3, #7
 800ae4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2b06      	cmp	r3, #6
 800ae50:	d010      	beq.n	800ae74 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f042 0201 	orr.w	r2, r2, #1
 800ae60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae62:	e007      	b.n	800ae74 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f042 0201 	orr.w	r2, r2, #1
 800ae72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ae74:	2300      	movs	r3, #0
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3714      	adds	r7, #20
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bc80      	pop	{r7}
 800ae7e:	4770      	bx	lr
 800ae80:	40012c00 	.word	0x40012c00
 800ae84:	40013400 	.word	0x40013400
 800ae88:	40000400 	.word	0x40000400
 800ae8c:	40000800 	.word	0x40000800
 800ae90:	40000c00 	.word	0x40000c00

0800ae94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b082      	sub	sp, #8
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	691b      	ldr	r3, [r3, #16]
 800aea2:	f003 0302 	and.w	r3, r3, #2
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d122      	bne.n	800aef0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	f003 0302 	and.w	r3, r3, #2
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d11b      	bne.n	800aef0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f06f 0202 	mvn.w	r2, #2
 800aec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	2201      	movs	r2, #1
 800aec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	699b      	ldr	r3, [r3, #24]
 800aece:	f003 0303 	and.w	r3, r3, #3
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d003      	beq.n	800aede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 f9b4 	bl	800b244 <HAL_TIM_IC_CaptureCallback>
 800aedc:	e005      	b.n	800aeea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 f9a7 	bl	800b232 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 f9b6 	bl	800b256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	f003 0304 	and.w	r3, r3, #4
 800aefa:	2b04      	cmp	r3, #4
 800aefc:	d122      	bne.n	800af44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	f003 0304 	and.w	r3, r3, #4
 800af08:	2b04      	cmp	r3, #4
 800af0a:	d11b      	bne.n	800af44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f06f 0204 	mvn.w	r2, #4
 800af14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2202      	movs	r2, #2
 800af1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af26:	2b00      	cmp	r3, #0
 800af28:	d003      	beq.n	800af32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 f98a 	bl	800b244 <HAL_TIM_IC_CaptureCallback>
 800af30:	e005      	b.n	800af3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 f97d 	bl	800b232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 f98c 	bl	800b256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	f003 0308 	and.w	r3, r3, #8
 800af4e:	2b08      	cmp	r3, #8
 800af50:	d122      	bne.n	800af98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	f003 0308 	and.w	r3, r3, #8
 800af5c:	2b08      	cmp	r3, #8
 800af5e:	d11b      	bne.n	800af98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f06f 0208 	mvn.w	r2, #8
 800af68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2204      	movs	r2, #4
 800af6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	69db      	ldr	r3, [r3, #28]
 800af76:	f003 0303 	and.w	r3, r3, #3
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d003      	beq.n	800af86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 f960 	bl	800b244 <HAL_TIM_IC_CaptureCallback>
 800af84:	e005      	b.n	800af92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f953 	bl	800b232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 f962 	bl	800b256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	691b      	ldr	r3, [r3, #16]
 800af9e:	f003 0310 	and.w	r3, r3, #16
 800afa2:	2b10      	cmp	r3, #16
 800afa4:	d122      	bne.n	800afec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	f003 0310 	and.w	r3, r3, #16
 800afb0:	2b10      	cmp	r3, #16
 800afb2:	d11b      	bne.n	800afec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f06f 0210 	mvn.w	r2, #16
 800afbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2208      	movs	r2, #8
 800afc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	69db      	ldr	r3, [r3, #28]
 800afca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d003      	beq.n	800afda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 f936 	bl	800b244 <HAL_TIM_IC_CaptureCallback>
 800afd8:	e005      	b.n	800afe6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 f929 	bl	800b232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 f938 	bl	800b256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	f003 0301 	and.w	r3, r3, #1
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d10e      	bne.n	800b018 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	f003 0301 	and.w	r3, r3, #1
 800b004:	2b01      	cmp	r3, #1
 800b006:	d107      	bne.n	800b018 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f06f 0201 	mvn.w	r2, #1
 800b010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f7fc fd62 	bl	8007adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	691b      	ldr	r3, [r3, #16]
 800b01e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b022:	2b80      	cmp	r3, #128	; 0x80
 800b024:	d10e      	bne.n	800b044 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	68db      	ldr	r3, [r3, #12]
 800b02c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b030:	2b80      	cmp	r3, #128	; 0x80
 800b032:	d107      	bne.n	800b044 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b03c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 faa1 	bl	800b586 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	691b      	ldr	r3, [r3, #16]
 800b04a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b04e:	2b40      	cmp	r3, #64	; 0x40
 800b050:	d10e      	bne.n	800b070 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	68db      	ldr	r3, [r3, #12]
 800b058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b05c:	2b40      	cmp	r3, #64	; 0x40
 800b05e:	d107      	bne.n	800b070 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f8fc 	bl	800b268 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	691b      	ldr	r3, [r3, #16]
 800b076:	f003 0320 	and.w	r3, r3, #32
 800b07a:	2b20      	cmp	r3, #32
 800b07c:	d10e      	bne.n	800b09c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	f003 0320 	and.w	r3, r3, #32
 800b088:	2b20      	cmp	r3, #32
 800b08a:	d107      	bne.n	800b09c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f06f 0220 	mvn.w	r2, #32
 800b094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 fa6c 	bl	800b574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b09c:	bf00      	nop
 800b09e:	3708      	adds	r7, #8
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d101      	bne.n	800b0c0 <HAL_TIM_ConfigClockSource+0x1c>
 800b0bc:	2302      	movs	r3, #2
 800b0be:	e0b4      	b.n	800b22a <HAL_TIM_ConfigClockSource+0x186>
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2202      	movs	r2, #2
 800b0cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b0de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0e0:	68bb      	ldr	r3, [r7, #8]
 800b0e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b0e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	68ba      	ldr	r2, [r7, #8]
 800b0ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0f8:	d03e      	beq.n	800b178 <HAL_TIM_ConfigClockSource+0xd4>
 800b0fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0fe:	f200 8087 	bhi.w	800b210 <HAL_TIM_ConfigClockSource+0x16c>
 800b102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b106:	f000 8086 	beq.w	800b216 <HAL_TIM_ConfigClockSource+0x172>
 800b10a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b10e:	d87f      	bhi.n	800b210 <HAL_TIM_ConfigClockSource+0x16c>
 800b110:	2b70      	cmp	r3, #112	; 0x70
 800b112:	d01a      	beq.n	800b14a <HAL_TIM_ConfigClockSource+0xa6>
 800b114:	2b70      	cmp	r3, #112	; 0x70
 800b116:	d87b      	bhi.n	800b210 <HAL_TIM_ConfigClockSource+0x16c>
 800b118:	2b60      	cmp	r3, #96	; 0x60
 800b11a:	d050      	beq.n	800b1be <HAL_TIM_ConfigClockSource+0x11a>
 800b11c:	2b60      	cmp	r3, #96	; 0x60
 800b11e:	d877      	bhi.n	800b210 <HAL_TIM_ConfigClockSource+0x16c>
 800b120:	2b50      	cmp	r3, #80	; 0x50
 800b122:	d03c      	beq.n	800b19e <HAL_TIM_ConfigClockSource+0xfa>
 800b124:	2b50      	cmp	r3, #80	; 0x50
 800b126:	d873      	bhi.n	800b210 <HAL_TIM_ConfigClockSource+0x16c>
 800b128:	2b40      	cmp	r3, #64	; 0x40
 800b12a:	d058      	beq.n	800b1de <HAL_TIM_ConfigClockSource+0x13a>
 800b12c:	2b40      	cmp	r3, #64	; 0x40
 800b12e:	d86f      	bhi.n	800b210 <HAL_TIM_ConfigClockSource+0x16c>
 800b130:	2b30      	cmp	r3, #48	; 0x30
 800b132:	d064      	beq.n	800b1fe <HAL_TIM_ConfigClockSource+0x15a>
 800b134:	2b30      	cmp	r3, #48	; 0x30
 800b136:	d86b      	bhi.n	800b210 <HAL_TIM_ConfigClockSource+0x16c>
 800b138:	2b20      	cmp	r3, #32
 800b13a:	d060      	beq.n	800b1fe <HAL_TIM_ConfigClockSource+0x15a>
 800b13c:	2b20      	cmp	r3, #32
 800b13e:	d867      	bhi.n	800b210 <HAL_TIM_ConfigClockSource+0x16c>
 800b140:	2b00      	cmp	r3, #0
 800b142:	d05c      	beq.n	800b1fe <HAL_TIM_ConfigClockSource+0x15a>
 800b144:	2b10      	cmp	r3, #16
 800b146:	d05a      	beq.n	800b1fe <HAL_TIM_ConfigClockSource+0x15a>
 800b148:	e062      	b.n	800b210 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b15a:	f000 f980 	bl	800b45e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b16c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	609a      	str	r2, [r3, #8]
      break;
 800b176:	e04f      	b.n	800b218 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b188:	f000 f969 	bl	800b45e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	689a      	ldr	r2, [r3, #8]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b19a:	609a      	str	r2, [r3, #8]
      break;
 800b19c:	e03c      	b.n	800b218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	f000 f8e0 	bl	800b370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	2150      	movs	r1, #80	; 0x50
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f000 f937 	bl	800b42a <TIM_ITRx_SetConfig>
      break;
 800b1bc:	e02c      	b.n	800b218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	f000 f8fe 	bl	800b3cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2160      	movs	r1, #96	; 0x60
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f000 f927 	bl	800b42a <TIM_ITRx_SetConfig>
      break;
 800b1dc:	e01c      	b.n	800b218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b1e6:	683b      	ldr	r3, [r7, #0]
 800b1e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	f000 f8c0 	bl	800b370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2140      	movs	r1, #64	; 0x40
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f000 f917 	bl	800b42a <TIM_ITRx_SetConfig>
      break;
 800b1fc:	e00c      	b.n	800b218 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4619      	mov	r1, r3
 800b208:	4610      	mov	r0, r2
 800b20a:	f000 f90e 	bl	800b42a <TIM_ITRx_SetConfig>
      break;
 800b20e:	e003      	b.n	800b218 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b210:	2301      	movs	r3, #1
 800b212:	73fb      	strb	r3, [r7, #15]
      break;
 800b214:	e000      	b.n	800b218 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b216:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2201      	movs	r2, #1
 800b21c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b228:	7bfb      	ldrb	r3, [r7, #15]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b232:	b480      	push	{r7}
 800b234:	b083      	sub	sp, #12
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b23a:	bf00      	nop
 800b23c:	370c      	adds	r7, #12
 800b23e:	46bd      	mov	sp, r7
 800b240:	bc80      	pop	{r7}
 800b242:	4770      	bx	lr

0800b244 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b24c:	bf00      	nop
 800b24e:	370c      	adds	r7, #12
 800b250:	46bd      	mov	sp, r7
 800b252:	bc80      	pop	{r7}
 800b254:	4770      	bx	lr

0800b256 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b256:	b480      	push	{r7}
 800b258:	b083      	sub	sp, #12
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b25e:	bf00      	nop
 800b260:	370c      	adds	r7, #12
 800b262:	46bd      	mov	sp, r7
 800b264:	bc80      	pop	{r7}
 800b266:	4770      	bx	lr

0800b268 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b270:	bf00      	nop
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	bc80      	pop	{r7}
 800b278:	4770      	bx	lr
	...

0800b27c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a33      	ldr	r2, [pc, #204]	; (800b35c <TIM_Base_SetConfig+0xe0>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d013      	beq.n	800b2bc <TIM_Base_SetConfig+0x40>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4a32      	ldr	r2, [pc, #200]	; (800b360 <TIM_Base_SetConfig+0xe4>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d00f      	beq.n	800b2bc <TIM_Base_SetConfig+0x40>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2a2:	d00b      	beq.n	800b2bc <TIM_Base_SetConfig+0x40>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	4a2f      	ldr	r2, [pc, #188]	; (800b364 <TIM_Base_SetConfig+0xe8>)
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d007      	beq.n	800b2bc <TIM_Base_SetConfig+0x40>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	4a2e      	ldr	r2, [pc, #184]	; (800b368 <TIM_Base_SetConfig+0xec>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d003      	beq.n	800b2bc <TIM_Base_SetConfig+0x40>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	4a2d      	ldr	r2, [pc, #180]	; (800b36c <TIM_Base_SetConfig+0xf0>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d108      	bne.n	800b2ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	685b      	ldr	r3, [r3, #4]
 800b2c8:	68fa      	ldr	r2, [r7, #12]
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a22      	ldr	r2, [pc, #136]	; (800b35c <TIM_Base_SetConfig+0xe0>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d013      	beq.n	800b2fe <TIM_Base_SetConfig+0x82>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a21      	ldr	r2, [pc, #132]	; (800b360 <TIM_Base_SetConfig+0xe4>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d00f      	beq.n	800b2fe <TIM_Base_SetConfig+0x82>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2e4:	d00b      	beq.n	800b2fe <TIM_Base_SetConfig+0x82>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a1e      	ldr	r2, [pc, #120]	; (800b364 <TIM_Base_SetConfig+0xe8>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d007      	beq.n	800b2fe <TIM_Base_SetConfig+0x82>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	4a1d      	ldr	r2, [pc, #116]	; (800b368 <TIM_Base_SetConfig+0xec>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d003      	beq.n	800b2fe <TIM_Base_SetConfig+0x82>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a1c      	ldr	r2, [pc, #112]	; (800b36c <TIM_Base_SetConfig+0xf0>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d108      	bne.n	800b310 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	68fa      	ldr	r2, [r7, #12]
 800b30c:	4313      	orrs	r3, r2
 800b30e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	695b      	ldr	r3, [r3, #20]
 800b31a:	4313      	orrs	r3, r2
 800b31c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	689a      	ldr	r2, [r3, #8]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	681a      	ldr	r2, [r3, #0]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	4a09      	ldr	r2, [pc, #36]	; (800b35c <TIM_Base_SetConfig+0xe0>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d003      	beq.n	800b344 <TIM_Base_SetConfig+0xc8>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	4a08      	ldr	r2, [pc, #32]	; (800b360 <TIM_Base_SetConfig+0xe4>)
 800b340:	4293      	cmp	r3, r2
 800b342:	d103      	bne.n	800b34c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	691a      	ldr	r2, [r3, #16]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	615a      	str	r2, [r3, #20]
}
 800b352:	bf00      	nop
 800b354:	3714      	adds	r7, #20
 800b356:	46bd      	mov	sp, r7
 800b358:	bc80      	pop	{r7}
 800b35a:	4770      	bx	lr
 800b35c:	40012c00 	.word	0x40012c00
 800b360:	40013400 	.word	0x40013400
 800b364:	40000400 	.word	0x40000400
 800b368:	40000800 	.word	0x40000800
 800b36c:	40000c00 	.word	0x40000c00

0800b370 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b370:	b480      	push	{r7}
 800b372:	b087      	sub	sp, #28
 800b374:	af00      	add	r7, sp, #0
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	60b9      	str	r1, [r7, #8]
 800b37a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	6a1b      	ldr	r3, [r3, #32]
 800b380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	6a1b      	ldr	r3, [r3, #32]
 800b386:	f023 0201 	bic.w	r2, r3, #1
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	699b      	ldr	r3, [r3, #24]
 800b392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b39a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	011b      	lsls	r3, r3, #4
 800b3a0:	693a      	ldr	r2, [r7, #16]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	f023 030a 	bic.w	r3, r3, #10
 800b3ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b3ae:	697a      	ldr	r2, [r7, #20]
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	693a      	ldr	r2, [r7, #16]
 800b3ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	697a      	ldr	r2, [r7, #20]
 800b3c0:	621a      	str	r2, [r3, #32]
}
 800b3c2:	bf00      	nop
 800b3c4:	371c      	adds	r7, #28
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bc80      	pop	{r7}
 800b3ca:	4770      	bx	lr

0800b3cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b087      	sub	sp, #28
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	60f8      	str	r0, [r7, #12]
 800b3d4:	60b9      	str	r1, [r7, #8]
 800b3d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6a1b      	ldr	r3, [r3, #32]
 800b3dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6a1b      	ldr	r3, [r3, #32]
 800b3e2:	f023 0210 	bic.w	r2, r3, #16
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	699b      	ldr	r3, [r3, #24]
 800b3ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b3f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	031b      	lsls	r3, r3, #12
 800b3fc:	693a      	ldr	r2, [r7, #16]
 800b3fe:	4313      	orrs	r3, r2
 800b400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b408:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	011b      	lsls	r3, r3, #4
 800b40e:	697a      	ldr	r2, [r7, #20]
 800b410:	4313      	orrs	r3, r2
 800b412:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	693a      	ldr	r2, [r7, #16]
 800b418:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	697a      	ldr	r2, [r7, #20]
 800b41e:	621a      	str	r2, [r3, #32]
}
 800b420:	bf00      	nop
 800b422:	371c      	adds	r7, #28
 800b424:	46bd      	mov	sp, r7
 800b426:	bc80      	pop	{r7}
 800b428:	4770      	bx	lr

0800b42a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b42a:	b480      	push	{r7}
 800b42c:	b085      	sub	sp, #20
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b442:	683a      	ldr	r2, [r7, #0]
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	4313      	orrs	r3, r2
 800b448:	f043 0307 	orr.w	r3, r3, #7
 800b44c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	609a      	str	r2, [r3, #8]
}
 800b454:	bf00      	nop
 800b456:	3714      	adds	r7, #20
 800b458:	46bd      	mov	sp, r7
 800b45a:	bc80      	pop	{r7}
 800b45c:	4770      	bx	lr

0800b45e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b45e:	b480      	push	{r7}
 800b460:	b087      	sub	sp, #28
 800b462:	af00      	add	r7, sp, #0
 800b464:	60f8      	str	r0, [r7, #12]
 800b466:	60b9      	str	r1, [r7, #8]
 800b468:	607a      	str	r2, [r7, #4]
 800b46a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b478:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	021a      	lsls	r2, r3, #8
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	431a      	orrs	r2, r3
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	4313      	orrs	r3, r2
 800b486:	697a      	ldr	r2, [r7, #20]
 800b488:	4313      	orrs	r3, r2
 800b48a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	697a      	ldr	r2, [r7, #20]
 800b490:	609a      	str	r2, [r3, #8]
}
 800b492:	bf00      	nop
 800b494:	371c      	adds	r7, #28
 800b496:	46bd      	mov	sp, r7
 800b498:	bc80      	pop	{r7}
 800b49a:	4770      	bx	lr

0800b49c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b49c:	b480      	push	{r7}
 800b49e:	b085      	sub	sp, #20
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
 800b4a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4ac:	2b01      	cmp	r3, #1
 800b4ae:	d101      	bne.n	800b4b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b4b0:	2302      	movs	r3, #2
 800b4b2:	e050      	b.n	800b556 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2201      	movs	r2, #1
 800b4b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2202      	movs	r2, #2
 800b4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	685b      	ldr	r3, [r3, #4]
 800b4ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	689b      	ldr	r3, [r3, #8]
 800b4d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	68fa      	ldr	r2, [r7, #12]
 800b4ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a1b      	ldr	r2, [pc, #108]	; (800b560 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d018      	beq.n	800b52a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a19      	ldr	r2, [pc, #100]	; (800b564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d013      	beq.n	800b52a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b50a:	d00e      	beq.n	800b52a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a15      	ldr	r2, [pc, #84]	; (800b568 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d009      	beq.n	800b52a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a14      	ldr	r2, [pc, #80]	; (800b56c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d004      	beq.n	800b52a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a12      	ldr	r2, [pc, #72]	; (800b570 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d10c      	bne.n	800b544 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b530:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	68ba      	ldr	r2, [r7, #8]
 800b538:	4313      	orrs	r3, r2
 800b53a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	68ba      	ldr	r2, [r7, #8]
 800b542:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2201      	movs	r2, #1
 800b548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2200      	movs	r2, #0
 800b550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b554:	2300      	movs	r3, #0
}
 800b556:	4618      	mov	r0, r3
 800b558:	3714      	adds	r7, #20
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bc80      	pop	{r7}
 800b55e:	4770      	bx	lr
 800b560:	40012c00 	.word	0x40012c00
 800b564:	40013400 	.word	0x40013400
 800b568:	40000400 	.word	0x40000400
 800b56c:	40000800 	.word	0x40000800
 800b570:	40000c00 	.word	0x40000c00

0800b574 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b57c:	bf00      	nop
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	bc80      	pop	{r7}
 800b584:	4770      	bx	lr

0800b586 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b586:	b480      	push	{r7}
 800b588:	b083      	sub	sp, #12
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b58e:	bf00      	nop
 800b590:	370c      	adds	r7, #12
 800b592:	46bd      	mov	sp, r7
 800b594:	bc80      	pop	{r7}
 800b596:	4770      	bx	lr

0800b598 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b082      	sub	sp, #8
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d101      	bne.n	800b5aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	e042      	b.n	800b630 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d106      	bne.n	800b5c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f7fc fe1a 	bl	80081f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2224      	movs	r2, #36	; 0x24
 800b5c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	68da      	ldr	r2, [r3, #12]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b5da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 fcb5 	bl	800bf4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	691a      	ldr	r2, [r3, #16]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b5f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	695a      	ldr	r2, [r3, #20]
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b600:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	68da      	ldr	r2, [r3, #12]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b610:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2220      	movs	r2, #32
 800b61c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2220      	movs	r2, #32
 800b624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2200      	movs	r2, #0
 800b62c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b62e:	2300      	movs	r3, #0
}
 800b630:	4618      	mov	r0, r3
 800b632:	3708      	adds	r7, #8
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b638:	b480      	push	{r7}
 800b63a:	b085      	sub	sp, #20
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	60f8      	str	r0, [r7, #12]
 800b640:	60b9      	str	r1, [r7, #8]
 800b642:	4613      	mov	r3, r2
 800b644:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b64c:	b2db      	uxtb	r3, r3
 800b64e:	2b20      	cmp	r3, #32
 800b650:	d121      	bne.n	800b696 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d002      	beq.n	800b65e <HAL_UART_Transmit_IT+0x26>
 800b658:	88fb      	ldrh	r3, [r7, #6]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d101      	bne.n	800b662 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	e01a      	b.n	800b698 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	68ba      	ldr	r2, [r7, #8]
 800b666:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	88fa      	ldrh	r2, [r7, #6]
 800b66c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	88fa      	ldrh	r2, [r7, #6]
 800b672:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2200      	movs	r2, #0
 800b678:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2221      	movs	r2, #33	; 0x21
 800b67e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	68da      	ldr	r2, [r3, #12]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b690:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b692:	2300      	movs	r3, #0
 800b694:	e000      	b.n	800b698 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b696:	2302      	movs	r3, #2
  }
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3714      	adds	r7, #20
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bc80      	pop	{r7}
 800b6a0:	4770      	bx	lr
	...

0800b6a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b0ba      	sub	sp, #232	; 0xe8
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	68db      	ldr	r3, [r3, #12]
 800b6bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	695b      	ldr	r3, [r3, #20]
 800b6c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b6d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6da:	f003 030f 	and.w	r3, r3, #15
 800b6de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b6e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d10f      	bne.n	800b70a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b6ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6ee:	f003 0320 	and.w	r3, r3, #32
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d009      	beq.n	800b70a <HAL_UART_IRQHandler+0x66>
 800b6f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6fa:	f003 0320 	and.w	r3, r3, #32
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d003      	beq.n	800b70a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 fb63 	bl	800bdce <UART_Receive_IT>
      return;
 800b708:	e25b      	b.n	800bbc2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b70a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b70e:	2b00      	cmp	r3, #0
 800b710:	f000 80de 	beq.w	800b8d0 <HAL_UART_IRQHandler+0x22c>
 800b714:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b718:	f003 0301 	and.w	r3, r3, #1
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d106      	bne.n	800b72e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b724:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b728:	2b00      	cmp	r3, #0
 800b72a:	f000 80d1 	beq.w	800b8d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b72e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b732:	f003 0301 	and.w	r3, r3, #1
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00b      	beq.n	800b752 <HAL_UART_IRQHandler+0xae>
 800b73a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b73e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b742:	2b00      	cmp	r3, #0
 800b744:	d005      	beq.n	800b752 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b74a:	f043 0201 	orr.w	r2, r3, #1
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b756:	f003 0304 	and.w	r3, r3, #4
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00b      	beq.n	800b776 <HAL_UART_IRQHandler+0xd2>
 800b75e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b762:	f003 0301 	and.w	r3, r3, #1
 800b766:	2b00      	cmp	r3, #0
 800b768:	d005      	beq.n	800b776 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b76e:	f043 0202 	orr.w	r2, r3, #2
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b77a:	f003 0302 	and.w	r3, r3, #2
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d00b      	beq.n	800b79a <HAL_UART_IRQHandler+0xf6>
 800b782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b786:	f003 0301 	and.w	r3, r3, #1
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d005      	beq.n	800b79a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b792:	f043 0204 	orr.w	r2, r3, #4
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b79a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b79e:	f003 0308 	and.w	r3, r3, #8
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d011      	beq.n	800b7ca <HAL_UART_IRQHandler+0x126>
 800b7a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7aa:	f003 0320 	and.w	r3, r3, #32
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d105      	bne.n	800b7be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b7b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b7b6:	f003 0301 	and.w	r3, r3, #1
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d005      	beq.n	800b7ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7c2:	f043 0208 	orr.w	r2, r3, #8
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	f000 81f2 	beq.w	800bbb8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b7d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7d8:	f003 0320 	and.w	r3, r3, #32
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d008      	beq.n	800b7f2 <HAL_UART_IRQHandler+0x14e>
 800b7e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7e4:	f003 0320 	and.w	r3, r3, #32
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d002      	beq.n	800b7f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f000 faee 	bl	800bdce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	695b      	ldr	r3, [r3, #20]
 800b7f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	bf14      	ite	ne
 800b800:	2301      	movne	r3, #1
 800b802:	2300      	moveq	r3, #0
 800b804:	b2db      	uxtb	r3, r3
 800b806:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b80e:	f003 0308 	and.w	r3, r3, #8
 800b812:	2b00      	cmp	r3, #0
 800b814:	d103      	bne.n	800b81e <HAL_UART_IRQHandler+0x17a>
 800b816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d04f      	beq.n	800b8be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 f9f8 	bl	800bc14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	695b      	ldr	r3, [r3, #20]
 800b82a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d041      	beq.n	800b8b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	3314      	adds	r3, #20
 800b838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b83c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b840:	e853 3f00 	ldrex	r3, [r3]
 800b844:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b848:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b84c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b850:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	3314      	adds	r3, #20
 800b85a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b85e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b862:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b866:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b86a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b86e:	e841 2300 	strex	r3, r2, [r1]
 800b872:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b876:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d1d9      	bne.n	800b832 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b882:	2b00      	cmp	r3, #0
 800b884:	d013      	beq.n	800b8ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b88a:	4a7e      	ldr	r2, [pc, #504]	; (800ba84 <HAL_UART_IRQHandler+0x3e0>)
 800b88c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b892:	4618      	mov	r0, r3
 800b894:	f7fd f86c 	bl	8008970 <HAL_DMA_Abort_IT>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d016      	beq.n	800b8cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b8a8:	4610      	mov	r0, r2
 800b8aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8ac:	e00e      	b.n	800b8cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 f99c 	bl	800bbec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8b4:	e00a      	b.n	800b8cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 f998 	bl	800bbec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8bc:	e006      	b.n	800b8cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f994 	bl	800bbec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b8ca:	e175      	b.n	800bbb8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8cc:	bf00      	nop
    return;
 800b8ce:	e173      	b.n	800bbb8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	f040 814f 	bne.w	800bb78 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b8da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8de:	f003 0310 	and.w	r3, r3, #16
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	f000 8148 	beq.w	800bb78 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b8e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8ec:	f003 0310 	and.w	r3, r3, #16
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f000 8141 	beq.w	800bb78 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	60bb      	str	r3, [r7, #8]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	60bb      	str	r3, [r7, #8]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	60bb      	str	r3, [r7, #8]
 800b90a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	695b      	ldr	r3, [r3, #20]
 800b912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b916:	2b00      	cmp	r3, #0
 800b918:	f000 80b6 	beq.w	800ba88 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b928:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	f000 8145 	beq.w	800bbbc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b936:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b93a:	429a      	cmp	r2, r3
 800b93c:	f080 813e 	bcs.w	800bbbc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b946:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b94c:	699b      	ldr	r3, [r3, #24]
 800b94e:	2b20      	cmp	r3, #32
 800b950:	f000 8088 	beq.w	800ba64 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	330c      	adds	r3, #12
 800b95a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b95e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b962:	e853 3f00 	ldrex	r3, [r3]
 800b966:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b96a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b96e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b972:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	330c      	adds	r3, #12
 800b97c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b980:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b984:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b988:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b98c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b990:	e841 2300 	strex	r3, r2, [r1]
 800b994:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b998:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1d9      	bne.n	800b954 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	3314      	adds	r3, #20
 800b9a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9aa:	e853 3f00 	ldrex	r3, [r3]
 800b9ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b9b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b9b2:	f023 0301 	bic.w	r3, r3, #1
 800b9b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	3314      	adds	r3, #20
 800b9c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b9c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b9c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b9cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b9d0:	e841 2300 	strex	r3, r2, [r1]
 800b9d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b9d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1e1      	bne.n	800b9a0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	3314      	adds	r3, #20
 800b9e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9e6:	e853 3f00 	ldrex	r3, [r3]
 800b9ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b9ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	3314      	adds	r3, #20
 800b9fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ba00:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ba02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ba06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ba08:	e841 2300 	strex	r3, r2, [r1]
 800ba0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ba0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d1e3      	bne.n	800b9dc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2220      	movs	r2, #32
 800ba18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	330c      	adds	r3, #12
 800ba28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba2c:	e853 3f00 	ldrex	r3, [r3]
 800ba30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ba32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba34:	f023 0310 	bic.w	r3, r3, #16
 800ba38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	330c      	adds	r3, #12
 800ba42:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ba46:	65ba      	str	r2, [r7, #88]	; 0x58
 800ba48:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ba4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ba4e:	e841 2300 	strex	r3, r2, [r1]
 800ba52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ba54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d1e3      	bne.n	800ba22 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7fc ff4b 	bl	80088fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2202      	movs	r2, #2
 800ba68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	1ad3      	subs	r3, r2, r3
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	4619      	mov	r1, r3
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f000 f8bf 	bl	800bbfe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ba80:	e09c      	b.n	800bbbc <HAL_UART_IRQHandler+0x518>
 800ba82:	bf00      	nop
 800ba84:	0800bcd9 	.word	0x0800bcd9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	1ad3      	subs	r3, r2, r3
 800ba94:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 808e 	beq.w	800bbc0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800baa4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f000 8089 	beq.w	800bbc0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	330c      	adds	r3, #12
 800bab4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab8:	e853 3f00 	ldrex	r3, [r3]
 800babc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800babe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bac0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bac4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	330c      	adds	r3, #12
 800bace:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bad2:	647a      	str	r2, [r7, #68]	; 0x44
 800bad4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bad6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bada:	e841 2300 	strex	r3, r2, [r1]
 800bade:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1e3      	bne.n	800baae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	3314      	adds	r3, #20
 800baec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf0:	e853 3f00 	ldrex	r3, [r3]
 800baf4:	623b      	str	r3, [r7, #32]
   return(result);
 800baf6:	6a3b      	ldr	r3, [r7, #32]
 800baf8:	f023 0301 	bic.w	r3, r3, #1
 800bafc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	3314      	adds	r3, #20
 800bb06:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bb0a:	633a      	str	r2, [r7, #48]	; 0x30
 800bb0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb12:	e841 2300 	strex	r3, r2, [r1]
 800bb16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d1e3      	bne.n	800bae6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2220      	movs	r2, #32
 800bb22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2200      	movs	r2, #0
 800bb2a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	330c      	adds	r3, #12
 800bb32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	e853 3f00 	ldrex	r3, [r3]
 800bb3a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f023 0310 	bic.w	r3, r3, #16
 800bb42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	330c      	adds	r3, #12
 800bb4c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bb50:	61fa      	str	r2, [r7, #28]
 800bb52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb54:	69b9      	ldr	r1, [r7, #24]
 800bb56:	69fa      	ldr	r2, [r7, #28]
 800bb58:	e841 2300 	strex	r3, r2, [r1]
 800bb5c:	617b      	str	r3, [r7, #20]
   return(result);
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1e3      	bne.n	800bb2c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2202      	movs	r2, #2
 800bb68:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bb6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bb6e:	4619      	mov	r1, r3
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 f844 	bl	800bbfe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bb76:	e023      	b.n	800bbc0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bb78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d009      	beq.n	800bb98 <HAL_UART_IRQHandler+0x4f4>
 800bb84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d003      	beq.n	800bb98 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f8b5 	bl	800bd00 <UART_Transmit_IT>
    return;
 800bb96:	e014      	b.n	800bbc2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bb98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d00e      	beq.n	800bbc2 <HAL_UART_IRQHandler+0x51e>
 800bba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d008      	beq.n	800bbc2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bbb0:	6878      	ldr	r0, [r7, #4]
 800bbb2:	f000 f8f4 	bl	800bd9e <UART_EndTransmit_IT>
    return;
 800bbb6:	e004      	b.n	800bbc2 <HAL_UART_IRQHandler+0x51e>
    return;
 800bbb8:	bf00      	nop
 800bbba:	e002      	b.n	800bbc2 <HAL_UART_IRQHandler+0x51e>
      return;
 800bbbc:	bf00      	nop
 800bbbe:	e000      	b.n	800bbc2 <HAL_UART_IRQHandler+0x51e>
      return;
 800bbc0:	bf00      	nop
  }
}
 800bbc2:	37e8      	adds	r7, #232	; 0xe8
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b083      	sub	sp, #12
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bbd0:	bf00      	nop
 800bbd2:	370c      	adds	r7, #12
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bc80      	pop	{r7}
 800bbd8:	4770      	bx	lr

0800bbda <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bbda:	b480      	push	{r7}
 800bbdc:	b083      	sub	sp, #12
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bbe2:	bf00      	nop
 800bbe4:	370c      	adds	r7, #12
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bc80      	pop	{r7}
 800bbea:	4770      	bx	lr

0800bbec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b083      	sub	sp, #12
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bbf4:	bf00      	nop
 800bbf6:	370c      	adds	r7, #12
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bc80      	pop	{r7}
 800bbfc:	4770      	bx	lr

0800bbfe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bbfe:	b480      	push	{r7}
 800bc00:	b083      	sub	sp, #12
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	460b      	mov	r3, r1
 800bc08:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bc0a:	bf00      	nop
 800bc0c:	370c      	adds	r7, #12
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bc80      	pop	{r7}
 800bc12:	4770      	bx	lr

0800bc14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b095      	sub	sp, #84	; 0x54
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	330c      	adds	r3, #12
 800bc22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc26:	e853 3f00 	ldrex	r3, [r3]
 800bc2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc32:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	330c      	adds	r3, #12
 800bc3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc3c:	643a      	str	r2, [r7, #64]	; 0x40
 800bc3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc44:	e841 2300 	strex	r3, r2, [r1]
 800bc48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d1e5      	bne.n	800bc1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	3314      	adds	r3, #20
 800bc56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc58:	6a3b      	ldr	r3, [r7, #32]
 800bc5a:	e853 3f00 	ldrex	r3, [r3]
 800bc5e:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	f023 0301 	bic.w	r3, r3, #1
 800bc66:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	3314      	adds	r3, #20
 800bc6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc70:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bc72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc78:	e841 2300 	strex	r3, r2, [r1]
 800bc7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d1e5      	bne.n	800bc50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d119      	bne.n	800bcc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	330c      	adds	r3, #12
 800bc92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	e853 3f00 	ldrex	r3, [r3]
 800bc9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	f023 0310 	bic.w	r3, r3, #16
 800bca2:	647b      	str	r3, [r7, #68]	; 0x44
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	330c      	adds	r3, #12
 800bcaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcac:	61ba      	str	r2, [r7, #24]
 800bcae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb0:	6979      	ldr	r1, [r7, #20]
 800bcb2:	69ba      	ldr	r2, [r7, #24]
 800bcb4:	e841 2300 	strex	r3, r2, [r1]
 800bcb8:	613b      	str	r3, [r7, #16]
   return(result);
 800bcba:	693b      	ldr	r3, [r7, #16]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d1e5      	bne.n	800bc8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2220      	movs	r2, #32
 800bcc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bcce:	bf00      	nop
 800bcd0:	3754      	adds	r7, #84	; 0x54
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bc80      	pop	{r7}
 800bcd6:	4770      	bx	lr

0800bcd8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2200      	movs	r2, #0
 800bcea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bcf2:	68f8      	ldr	r0, [r7, #12]
 800bcf4:	f7ff ff7a 	bl	800bbec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcf8:	bf00      	nop
 800bcfa:	3710      	adds	r7, #16
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b085      	sub	sp, #20
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bd0e:	b2db      	uxtb	r3, r3
 800bd10:	2b21      	cmp	r3, #33	; 0x21
 800bd12:	d13e      	bne.n	800bd92 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd1c:	d114      	bne.n	800bd48 <UART_Transmit_IT+0x48>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	691b      	ldr	r3, [r3, #16]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d110      	bne.n	800bd48 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6a1b      	ldr	r3, [r3, #32]
 800bd2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	881b      	ldrh	r3, [r3, #0]
 800bd30:	461a      	mov	r2, r3
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd3a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	6a1b      	ldr	r3, [r3, #32]
 800bd40:	1c9a      	adds	r2, r3, #2
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	621a      	str	r2, [r3, #32]
 800bd46:	e008      	b.n	800bd5a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6a1b      	ldr	r3, [r3, #32]
 800bd4c:	1c59      	adds	r1, r3, #1
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	6211      	str	r1, [r2, #32]
 800bd52:	781a      	ldrb	r2, [r3, #0]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	3b01      	subs	r3, #1
 800bd62:	b29b      	uxth	r3, r3
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	4619      	mov	r1, r3
 800bd68:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d10f      	bne.n	800bd8e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	68da      	ldr	r2, [r3, #12]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	68da      	ldr	r2, [r3, #12]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	e000      	b.n	800bd94 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bd92:	2302      	movs	r3, #2
  }
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3714      	adds	r7, #20
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bc80      	pop	{r7}
 800bd9c:	4770      	bx	lr

0800bd9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd9e:	b580      	push	{r7, lr}
 800bda0:	b082      	sub	sp, #8
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	68da      	ldr	r2, [r3, #12]
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2220      	movs	r2, #32
 800bdba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f7ff ff02 	bl	800bbc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}

0800bdce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bdce:	b580      	push	{r7, lr}
 800bdd0:	b08c      	sub	sp, #48	; 0x30
 800bdd2:	af00      	add	r7, sp, #0
 800bdd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bddc:	b2db      	uxtb	r3, r3
 800bdde:	2b22      	cmp	r3, #34	; 0x22
 800bde0:	f040 80ae 	bne.w	800bf40 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdec:	d117      	bne.n	800be1e <UART_Receive_IT+0x50>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	691b      	ldr	r3, [r3, #16]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d113      	bne.n	800be1e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdfe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	b29b      	uxth	r3, r3
 800be08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be0c:	b29a      	uxth	r2, r3
 800be0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be10:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be16:	1c9a      	adds	r2, r3, #2
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	629a      	str	r2, [r3, #40]	; 0x28
 800be1c:	e026      	b.n	800be6c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be22:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800be24:	2300      	movs	r3, #0
 800be26:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	689b      	ldr	r3, [r3, #8]
 800be2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be30:	d007      	beq.n	800be42 <UART_Receive_IT+0x74>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d10a      	bne.n	800be50 <UART_Receive_IT+0x82>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d106      	bne.n	800be50 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	685b      	ldr	r3, [r3, #4]
 800be48:	b2da      	uxtb	r2, r3
 800be4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be4c:	701a      	strb	r2, [r3, #0]
 800be4e:	e008      	b.n	800be62 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	685b      	ldr	r3, [r3, #4]
 800be56:	b2db      	uxtb	r3, r3
 800be58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be5c:	b2da      	uxtb	r2, r3
 800be5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be60:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be66:	1c5a      	adds	r2, r3, #1
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be70:	b29b      	uxth	r3, r3
 800be72:	3b01      	subs	r3, #1
 800be74:	b29b      	uxth	r3, r3
 800be76:	687a      	ldr	r2, [r7, #4]
 800be78:	4619      	mov	r1, r3
 800be7a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d15d      	bne.n	800bf3c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68da      	ldr	r2, [r3, #12]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f022 0220 	bic.w	r2, r2, #32
 800be8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	68da      	ldr	r2, [r3, #12]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800be9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	695a      	ldr	r2, [r3, #20]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f022 0201 	bic.w	r2, r2, #1
 800beae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2220      	movs	r2, #32
 800beb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d135      	bne.n	800bf32 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	330c      	adds	r3, #12
 800bed2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed4:	697b      	ldr	r3, [r7, #20]
 800bed6:	e853 3f00 	ldrex	r3, [r3]
 800beda:	613b      	str	r3, [r7, #16]
   return(result);
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	f023 0310 	bic.w	r3, r3, #16
 800bee2:	627b      	str	r3, [r7, #36]	; 0x24
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	330c      	adds	r3, #12
 800beea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beec:	623a      	str	r2, [r7, #32]
 800beee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef0:	69f9      	ldr	r1, [r7, #28]
 800bef2:	6a3a      	ldr	r2, [r7, #32]
 800bef4:	e841 2300 	strex	r3, r2, [r1]
 800bef8:	61bb      	str	r3, [r7, #24]
   return(result);
 800befa:	69bb      	ldr	r3, [r7, #24]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d1e5      	bne.n	800becc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f003 0310 	and.w	r3, r3, #16
 800bf0a:	2b10      	cmp	r3, #16
 800bf0c:	d10a      	bne.n	800bf24 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bf0e:	2300      	movs	r3, #0
 800bf10:	60fb      	str	r3, [r7, #12]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	60fb      	str	r3, [r7, #12]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	60fb      	str	r3, [r7, #12]
 800bf22:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bf28:	4619      	mov	r1, r3
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f7ff fe67 	bl	800bbfe <HAL_UARTEx_RxEventCallback>
 800bf30:	e002      	b.n	800bf38 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f7ff fe51 	bl	800bbda <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	e002      	b.n	800bf42 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	e000      	b.n	800bf42 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800bf40:	2302      	movs	r3, #2
  }
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3730      	adds	r7, #48	; 0x30
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
	...

0800bf4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b084      	sub	sp, #16
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	691b      	ldr	r3, [r3, #16]
 800bf5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	68da      	ldr	r2, [r3, #12]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	430a      	orrs	r2, r1
 800bf68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	689a      	ldr	r2, [r3, #8]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	691b      	ldr	r3, [r3, #16]
 800bf72:	431a      	orrs	r2, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	695b      	ldr	r3, [r3, #20]
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	68db      	ldr	r3, [r3, #12]
 800bf82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800bf86:	f023 030c 	bic.w	r3, r3, #12
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	6812      	ldr	r2, [r2, #0]
 800bf8e:	68b9      	ldr	r1, [r7, #8]
 800bf90:	430b      	orrs	r3, r1
 800bf92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	695b      	ldr	r3, [r3, #20]
 800bf9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	699a      	ldr	r2, [r3, #24]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	430a      	orrs	r2, r1
 800bfa8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4a2c      	ldr	r2, [pc, #176]	; (800c060 <UART_SetConfig+0x114>)
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d103      	bne.n	800bfbc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800bfb4:	f7fe fe8c 	bl	800acd0 <HAL_RCC_GetPCLK2Freq>
 800bfb8:	60f8      	str	r0, [r7, #12]
 800bfba:	e002      	b.n	800bfc2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800bfbc:	f7fe fe74 	bl	800aca8 <HAL_RCC_GetPCLK1Freq>
 800bfc0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bfc2:	68fa      	ldr	r2, [r7, #12]
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	4413      	add	r3, r2
 800bfca:	009a      	lsls	r2, r3, #2
 800bfcc:	441a      	add	r2, r3
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfd8:	4a22      	ldr	r2, [pc, #136]	; (800c064 <UART_SetConfig+0x118>)
 800bfda:	fba2 2303 	umull	r2, r3, r2, r3
 800bfde:	095b      	lsrs	r3, r3, #5
 800bfe0:	0119      	lsls	r1, r3, #4
 800bfe2:	68fa      	ldr	r2, [r7, #12]
 800bfe4:	4613      	mov	r3, r2
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	4413      	add	r3, r2
 800bfea:	009a      	lsls	r2, r3, #2
 800bfec:	441a      	add	r2, r3
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	fbb2 f2f3 	udiv	r2, r2, r3
 800bff8:	4b1a      	ldr	r3, [pc, #104]	; (800c064 <UART_SetConfig+0x118>)
 800bffa:	fba3 0302 	umull	r0, r3, r3, r2
 800bffe:	095b      	lsrs	r3, r3, #5
 800c000:	2064      	movs	r0, #100	; 0x64
 800c002:	fb00 f303 	mul.w	r3, r0, r3
 800c006:	1ad3      	subs	r3, r2, r3
 800c008:	011b      	lsls	r3, r3, #4
 800c00a:	3332      	adds	r3, #50	; 0x32
 800c00c:	4a15      	ldr	r2, [pc, #84]	; (800c064 <UART_SetConfig+0x118>)
 800c00e:	fba2 2303 	umull	r2, r3, r2, r3
 800c012:	095b      	lsrs	r3, r3, #5
 800c014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c018:	4419      	add	r1, r3
 800c01a:	68fa      	ldr	r2, [r7, #12]
 800c01c:	4613      	mov	r3, r2
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	4413      	add	r3, r2
 800c022:	009a      	lsls	r2, r3, #2
 800c024:	441a      	add	r2, r3
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c030:	4b0c      	ldr	r3, [pc, #48]	; (800c064 <UART_SetConfig+0x118>)
 800c032:	fba3 0302 	umull	r0, r3, r3, r2
 800c036:	095b      	lsrs	r3, r3, #5
 800c038:	2064      	movs	r0, #100	; 0x64
 800c03a:	fb00 f303 	mul.w	r3, r0, r3
 800c03e:	1ad3      	subs	r3, r2, r3
 800c040:	011b      	lsls	r3, r3, #4
 800c042:	3332      	adds	r3, #50	; 0x32
 800c044:	4a07      	ldr	r2, [pc, #28]	; (800c064 <UART_SetConfig+0x118>)
 800c046:	fba2 2303 	umull	r2, r3, r2, r3
 800c04a:	095b      	lsrs	r3, r3, #5
 800c04c:	f003 020f 	and.w	r2, r3, #15
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	440a      	add	r2, r1
 800c056:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c058:	bf00      	nop
 800c05a:	3710      	adds	r7, #16
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	40013800 	.word	0x40013800
 800c064:	51eb851f 	.word	0x51eb851f

0800c068 <__itoa>:
 800c068:	1e93      	subs	r3, r2, #2
 800c06a:	2b22      	cmp	r3, #34	; 0x22
 800c06c:	b510      	push	{r4, lr}
 800c06e:	460c      	mov	r4, r1
 800c070:	d904      	bls.n	800c07c <__itoa+0x14>
 800c072:	2300      	movs	r3, #0
 800c074:	461c      	mov	r4, r3
 800c076:	700b      	strb	r3, [r1, #0]
 800c078:	4620      	mov	r0, r4
 800c07a:	bd10      	pop	{r4, pc}
 800c07c:	2a0a      	cmp	r2, #10
 800c07e:	d109      	bne.n	800c094 <__itoa+0x2c>
 800c080:	2800      	cmp	r0, #0
 800c082:	da07      	bge.n	800c094 <__itoa+0x2c>
 800c084:	232d      	movs	r3, #45	; 0x2d
 800c086:	700b      	strb	r3, [r1, #0]
 800c088:	2101      	movs	r1, #1
 800c08a:	4240      	negs	r0, r0
 800c08c:	4421      	add	r1, r4
 800c08e:	f000 f90d 	bl	800c2ac <__utoa>
 800c092:	e7f1      	b.n	800c078 <__itoa+0x10>
 800c094:	2100      	movs	r1, #0
 800c096:	e7f9      	b.n	800c08c <__itoa+0x24>

0800c098 <itoa>:
 800c098:	f7ff bfe6 	b.w	800c068 <__itoa>

0800c09c <malloc>:
 800c09c:	4b02      	ldr	r3, [pc, #8]	; (800c0a8 <malloc+0xc>)
 800c09e:	4601      	mov	r1, r0
 800c0a0:	6818      	ldr	r0, [r3, #0]
 800c0a2:	f000 b823 	b.w	800c0ec <_malloc_r>
 800c0a6:	bf00      	nop
 800c0a8:	20000100 	.word	0x20000100

0800c0ac <sbrk_aligned>:
 800c0ac:	b570      	push	{r4, r5, r6, lr}
 800c0ae:	4e0e      	ldr	r6, [pc, #56]	; (800c0e8 <sbrk_aligned+0x3c>)
 800c0b0:	460c      	mov	r4, r1
 800c0b2:	6831      	ldr	r1, [r6, #0]
 800c0b4:	4605      	mov	r5, r0
 800c0b6:	b911      	cbnz	r1, 800c0be <sbrk_aligned+0x12>
 800c0b8:	f000 f952 	bl	800c360 <_sbrk_r>
 800c0bc:	6030      	str	r0, [r6, #0]
 800c0be:	4621      	mov	r1, r4
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	f000 f94d 	bl	800c360 <_sbrk_r>
 800c0c6:	1c43      	adds	r3, r0, #1
 800c0c8:	d00a      	beq.n	800c0e0 <sbrk_aligned+0x34>
 800c0ca:	1cc4      	adds	r4, r0, #3
 800c0cc:	f024 0403 	bic.w	r4, r4, #3
 800c0d0:	42a0      	cmp	r0, r4
 800c0d2:	d007      	beq.n	800c0e4 <sbrk_aligned+0x38>
 800c0d4:	1a21      	subs	r1, r4, r0
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	f000 f942 	bl	800c360 <_sbrk_r>
 800c0dc:	3001      	adds	r0, #1
 800c0de:	d101      	bne.n	800c0e4 <sbrk_aligned+0x38>
 800c0e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	bd70      	pop	{r4, r5, r6, pc}
 800c0e8:	20000374 	.word	0x20000374

0800c0ec <_malloc_r>:
 800c0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0f0:	1ccd      	adds	r5, r1, #3
 800c0f2:	f025 0503 	bic.w	r5, r5, #3
 800c0f6:	3508      	adds	r5, #8
 800c0f8:	2d0c      	cmp	r5, #12
 800c0fa:	bf38      	it	cc
 800c0fc:	250c      	movcc	r5, #12
 800c0fe:	2d00      	cmp	r5, #0
 800c100:	4607      	mov	r7, r0
 800c102:	db01      	blt.n	800c108 <_malloc_r+0x1c>
 800c104:	42a9      	cmp	r1, r5
 800c106:	d905      	bls.n	800c114 <_malloc_r+0x28>
 800c108:	230c      	movs	r3, #12
 800c10a:	2600      	movs	r6, #0
 800c10c:	603b      	str	r3, [r7, #0]
 800c10e:	4630      	mov	r0, r6
 800c110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c114:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c1e8 <_malloc_r+0xfc>
 800c118:	f000 f89c 	bl	800c254 <__malloc_lock>
 800c11c:	f8d8 3000 	ldr.w	r3, [r8]
 800c120:	461c      	mov	r4, r3
 800c122:	bb5c      	cbnz	r4, 800c17c <_malloc_r+0x90>
 800c124:	4629      	mov	r1, r5
 800c126:	4638      	mov	r0, r7
 800c128:	f7ff ffc0 	bl	800c0ac <sbrk_aligned>
 800c12c:	1c43      	adds	r3, r0, #1
 800c12e:	4604      	mov	r4, r0
 800c130:	d155      	bne.n	800c1de <_malloc_r+0xf2>
 800c132:	f8d8 4000 	ldr.w	r4, [r8]
 800c136:	4626      	mov	r6, r4
 800c138:	2e00      	cmp	r6, #0
 800c13a:	d145      	bne.n	800c1c8 <_malloc_r+0xdc>
 800c13c:	2c00      	cmp	r4, #0
 800c13e:	d048      	beq.n	800c1d2 <_malloc_r+0xe6>
 800c140:	6823      	ldr	r3, [r4, #0]
 800c142:	4631      	mov	r1, r6
 800c144:	4638      	mov	r0, r7
 800c146:	eb04 0903 	add.w	r9, r4, r3
 800c14a:	f000 f909 	bl	800c360 <_sbrk_r>
 800c14e:	4581      	cmp	r9, r0
 800c150:	d13f      	bne.n	800c1d2 <_malloc_r+0xe6>
 800c152:	6821      	ldr	r1, [r4, #0]
 800c154:	4638      	mov	r0, r7
 800c156:	1a6d      	subs	r5, r5, r1
 800c158:	4629      	mov	r1, r5
 800c15a:	f7ff ffa7 	bl	800c0ac <sbrk_aligned>
 800c15e:	3001      	adds	r0, #1
 800c160:	d037      	beq.n	800c1d2 <_malloc_r+0xe6>
 800c162:	6823      	ldr	r3, [r4, #0]
 800c164:	442b      	add	r3, r5
 800c166:	6023      	str	r3, [r4, #0]
 800c168:	f8d8 3000 	ldr.w	r3, [r8]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d038      	beq.n	800c1e2 <_malloc_r+0xf6>
 800c170:	685a      	ldr	r2, [r3, #4]
 800c172:	42a2      	cmp	r2, r4
 800c174:	d12b      	bne.n	800c1ce <_malloc_r+0xe2>
 800c176:	2200      	movs	r2, #0
 800c178:	605a      	str	r2, [r3, #4]
 800c17a:	e00f      	b.n	800c19c <_malloc_r+0xb0>
 800c17c:	6822      	ldr	r2, [r4, #0]
 800c17e:	1b52      	subs	r2, r2, r5
 800c180:	d41f      	bmi.n	800c1c2 <_malloc_r+0xd6>
 800c182:	2a0b      	cmp	r2, #11
 800c184:	d917      	bls.n	800c1b6 <_malloc_r+0xca>
 800c186:	1961      	adds	r1, r4, r5
 800c188:	42a3      	cmp	r3, r4
 800c18a:	6025      	str	r5, [r4, #0]
 800c18c:	bf18      	it	ne
 800c18e:	6059      	strne	r1, [r3, #4]
 800c190:	6863      	ldr	r3, [r4, #4]
 800c192:	bf08      	it	eq
 800c194:	f8c8 1000 	streq.w	r1, [r8]
 800c198:	5162      	str	r2, [r4, r5]
 800c19a:	604b      	str	r3, [r1, #4]
 800c19c:	4638      	mov	r0, r7
 800c19e:	f104 060b 	add.w	r6, r4, #11
 800c1a2:	f000 f85d 	bl	800c260 <__malloc_unlock>
 800c1a6:	f026 0607 	bic.w	r6, r6, #7
 800c1aa:	1d23      	adds	r3, r4, #4
 800c1ac:	1af2      	subs	r2, r6, r3
 800c1ae:	d0ae      	beq.n	800c10e <_malloc_r+0x22>
 800c1b0:	1b9b      	subs	r3, r3, r6
 800c1b2:	50a3      	str	r3, [r4, r2]
 800c1b4:	e7ab      	b.n	800c10e <_malloc_r+0x22>
 800c1b6:	42a3      	cmp	r3, r4
 800c1b8:	6862      	ldr	r2, [r4, #4]
 800c1ba:	d1dd      	bne.n	800c178 <_malloc_r+0x8c>
 800c1bc:	f8c8 2000 	str.w	r2, [r8]
 800c1c0:	e7ec      	b.n	800c19c <_malloc_r+0xb0>
 800c1c2:	4623      	mov	r3, r4
 800c1c4:	6864      	ldr	r4, [r4, #4]
 800c1c6:	e7ac      	b.n	800c122 <_malloc_r+0x36>
 800c1c8:	4634      	mov	r4, r6
 800c1ca:	6876      	ldr	r6, [r6, #4]
 800c1cc:	e7b4      	b.n	800c138 <_malloc_r+0x4c>
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	e7cc      	b.n	800c16c <_malloc_r+0x80>
 800c1d2:	230c      	movs	r3, #12
 800c1d4:	4638      	mov	r0, r7
 800c1d6:	603b      	str	r3, [r7, #0]
 800c1d8:	f000 f842 	bl	800c260 <__malloc_unlock>
 800c1dc:	e797      	b.n	800c10e <_malloc_r+0x22>
 800c1de:	6025      	str	r5, [r4, #0]
 800c1e0:	e7dc      	b.n	800c19c <_malloc_r+0xb0>
 800c1e2:	605b      	str	r3, [r3, #4]
 800c1e4:	deff      	udf	#255	; 0xff
 800c1e6:	bf00      	nop
 800c1e8:	20000370 	.word	0x20000370

0800c1ec <sniprintf>:
 800c1ec:	b40c      	push	{r2, r3}
 800c1ee:	b530      	push	{r4, r5, lr}
 800c1f0:	4b17      	ldr	r3, [pc, #92]	; (800c250 <sniprintf+0x64>)
 800c1f2:	1e0c      	subs	r4, r1, #0
 800c1f4:	681d      	ldr	r5, [r3, #0]
 800c1f6:	b09d      	sub	sp, #116	; 0x74
 800c1f8:	da08      	bge.n	800c20c <sniprintf+0x20>
 800c1fa:	238b      	movs	r3, #139	; 0x8b
 800c1fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c200:	602b      	str	r3, [r5, #0]
 800c202:	b01d      	add	sp, #116	; 0x74
 800c204:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c208:	b002      	add	sp, #8
 800c20a:	4770      	bx	lr
 800c20c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c210:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c214:	bf0c      	ite	eq
 800c216:	4623      	moveq	r3, r4
 800c218:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c21c:	9304      	str	r3, [sp, #16]
 800c21e:	9307      	str	r3, [sp, #28]
 800c220:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c224:	9002      	str	r0, [sp, #8]
 800c226:	9006      	str	r0, [sp, #24]
 800c228:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c22c:	4628      	mov	r0, r5
 800c22e:	ab21      	add	r3, sp, #132	; 0x84
 800c230:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c232:	a902      	add	r1, sp, #8
 800c234:	9301      	str	r3, [sp, #4]
 800c236:	f000 f987 	bl	800c548 <_svfiprintf_r>
 800c23a:	1c43      	adds	r3, r0, #1
 800c23c:	bfbc      	itt	lt
 800c23e:	238b      	movlt	r3, #139	; 0x8b
 800c240:	602b      	strlt	r3, [r5, #0]
 800c242:	2c00      	cmp	r4, #0
 800c244:	d0dd      	beq.n	800c202 <sniprintf+0x16>
 800c246:	2200      	movs	r2, #0
 800c248:	9b02      	ldr	r3, [sp, #8]
 800c24a:	701a      	strb	r2, [r3, #0]
 800c24c:	e7d9      	b.n	800c202 <sniprintf+0x16>
 800c24e:	bf00      	nop
 800c250:	20000100 	.word	0x20000100

0800c254 <__malloc_lock>:
 800c254:	4801      	ldr	r0, [pc, #4]	; (800c25c <__malloc_lock+0x8>)
 800c256:	f000 b8bd 	b.w	800c3d4 <__retarget_lock_acquire_recursive>
 800c25a:	bf00      	nop
 800c25c:	200004b0 	.word	0x200004b0

0800c260 <__malloc_unlock>:
 800c260:	4801      	ldr	r0, [pc, #4]	; (800c268 <__malloc_unlock+0x8>)
 800c262:	f000 b8b8 	b.w	800c3d6 <__retarget_lock_release_recursive>
 800c266:	bf00      	nop
 800c268:	200004b0 	.word	0x200004b0

0800c26c <siprintf>:
 800c26c:	b40e      	push	{r1, r2, r3}
 800c26e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c272:	b500      	push	{lr}
 800c274:	b09c      	sub	sp, #112	; 0x70
 800c276:	ab1d      	add	r3, sp, #116	; 0x74
 800c278:	9002      	str	r0, [sp, #8]
 800c27a:	9006      	str	r0, [sp, #24]
 800c27c:	9107      	str	r1, [sp, #28]
 800c27e:	9104      	str	r1, [sp, #16]
 800c280:	4808      	ldr	r0, [pc, #32]	; (800c2a4 <siprintf+0x38>)
 800c282:	4909      	ldr	r1, [pc, #36]	; (800c2a8 <siprintf+0x3c>)
 800c284:	f853 2b04 	ldr.w	r2, [r3], #4
 800c288:	9105      	str	r1, [sp, #20]
 800c28a:	6800      	ldr	r0, [r0, #0]
 800c28c:	a902      	add	r1, sp, #8
 800c28e:	9301      	str	r3, [sp, #4]
 800c290:	f000 f95a 	bl	800c548 <_svfiprintf_r>
 800c294:	2200      	movs	r2, #0
 800c296:	9b02      	ldr	r3, [sp, #8]
 800c298:	701a      	strb	r2, [r3, #0]
 800c29a:	b01c      	add	sp, #112	; 0x70
 800c29c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2a0:	b003      	add	sp, #12
 800c2a2:	4770      	bx	lr
 800c2a4:	20000100 	.word	0x20000100
 800c2a8:	ffff0208 	.word	0xffff0208

0800c2ac <__utoa>:
 800c2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2ae:	b08b      	sub	sp, #44	; 0x2c
 800c2b0:	4605      	mov	r5, r0
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	466e      	mov	r6, sp
 800c2b6:	4c1d      	ldr	r4, [pc, #116]	; (800c32c <__utoa+0x80>)
 800c2b8:	f104 0c20 	add.w	ip, r4, #32
 800c2bc:	4637      	mov	r7, r6
 800c2be:	6820      	ldr	r0, [r4, #0]
 800c2c0:	6861      	ldr	r1, [r4, #4]
 800c2c2:	3408      	adds	r4, #8
 800c2c4:	c703      	stmia	r7!, {r0, r1}
 800c2c6:	4564      	cmp	r4, ip
 800c2c8:	463e      	mov	r6, r7
 800c2ca:	d1f7      	bne.n	800c2bc <__utoa+0x10>
 800c2cc:	7921      	ldrb	r1, [r4, #4]
 800c2ce:	6820      	ldr	r0, [r4, #0]
 800c2d0:	7139      	strb	r1, [r7, #4]
 800c2d2:	1e91      	subs	r1, r2, #2
 800c2d4:	2922      	cmp	r1, #34	; 0x22
 800c2d6:	6038      	str	r0, [r7, #0]
 800c2d8:	f04f 0100 	mov.w	r1, #0
 800c2dc:	d904      	bls.n	800c2e8 <__utoa+0x3c>
 800c2de:	7019      	strb	r1, [r3, #0]
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	b00b      	add	sp, #44	; 0x2c
 800c2e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2e8:	1e58      	subs	r0, r3, #1
 800c2ea:	4684      	mov	ip, r0
 800c2ec:	fbb5 f7f2 	udiv	r7, r5, r2
 800c2f0:	fb02 5617 	mls	r6, r2, r7, r5
 800c2f4:	3628      	adds	r6, #40	; 0x28
 800c2f6:	446e      	add	r6, sp
 800c2f8:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c2fc:	460c      	mov	r4, r1
 800c2fe:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c302:	462e      	mov	r6, r5
 800c304:	42b2      	cmp	r2, r6
 800c306:	463d      	mov	r5, r7
 800c308:	f101 0101 	add.w	r1, r1, #1
 800c30c:	d9ee      	bls.n	800c2ec <__utoa+0x40>
 800c30e:	2200      	movs	r2, #0
 800c310:	545a      	strb	r2, [r3, r1]
 800c312:	1919      	adds	r1, r3, r4
 800c314:	1aa5      	subs	r5, r4, r2
 800c316:	42aa      	cmp	r2, r5
 800c318:	dae3      	bge.n	800c2e2 <__utoa+0x36>
 800c31a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c31e:	780e      	ldrb	r6, [r1, #0]
 800c320:	3201      	adds	r2, #1
 800c322:	7006      	strb	r6, [r0, #0]
 800c324:	f801 5901 	strb.w	r5, [r1], #-1
 800c328:	e7f4      	b.n	800c314 <__utoa+0x68>
 800c32a:	bf00      	nop
 800c32c:	0800dac6 	.word	0x0800dac6

0800c330 <strcat>:
 800c330:	4602      	mov	r2, r0
 800c332:	b510      	push	{r4, lr}
 800c334:	7814      	ldrb	r4, [r2, #0]
 800c336:	4613      	mov	r3, r2
 800c338:	3201      	adds	r2, #1
 800c33a:	2c00      	cmp	r4, #0
 800c33c:	d1fa      	bne.n	800c334 <strcat+0x4>
 800c33e:	3b01      	subs	r3, #1
 800c340:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c344:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c348:	2a00      	cmp	r2, #0
 800c34a:	d1f9      	bne.n	800c340 <strcat+0x10>
 800c34c:	bd10      	pop	{r4, pc}

0800c34e <memset>:
 800c34e:	4603      	mov	r3, r0
 800c350:	4402      	add	r2, r0
 800c352:	4293      	cmp	r3, r2
 800c354:	d100      	bne.n	800c358 <memset+0xa>
 800c356:	4770      	bx	lr
 800c358:	f803 1b01 	strb.w	r1, [r3], #1
 800c35c:	e7f9      	b.n	800c352 <memset+0x4>
	...

0800c360 <_sbrk_r>:
 800c360:	b538      	push	{r3, r4, r5, lr}
 800c362:	2300      	movs	r3, #0
 800c364:	4d05      	ldr	r5, [pc, #20]	; (800c37c <_sbrk_r+0x1c>)
 800c366:	4604      	mov	r4, r0
 800c368:	4608      	mov	r0, r1
 800c36a:	602b      	str	r3, [r5, #0]
 800c36c:	f7fb ffd4 	bl	8008318 <_sbrk>
 800c370:	1c43      	adds	r3, r0, #1
 800c372:	d102      	bne.n	800c37a <_sbrk_r+0x1a>
 800c374:	682b      	ldr	r3, [r5, #0]
 800c376:	b103      	cbz	r3, 800c37a <_sbrk_r+0x1a>
 800c378:	6023      	str	r3, [r4, #0]
 800c37a:	bd38      	pop	{r3, r4, r5, pc}
 800c37c:	200004b4 	.word	0x200004b4

0800c380 <__errno>:
 800c380:	4b01      	ldr	r3, [pc, #4]	; (800c388 <__errno+0x8>)
 800c382:	6818      	ldr	r0, [r3, #0]
 800c384:	4770      	bx	lr
 800c386:	bf00      	nop
 800c388:	20000100 	.word	0x20000100

0800c38c <__libc_init_array>:
 800c38c:	b570      	push	{r4, r5, r6, lr}
 800c38e:	2600      	movs	r6, #0
 800c390:	4d0c      	ldr	r5, [pc, #48]	; (800c3c4 <__libc_init_array+0x38>)
 800c392:	4c0d      	ldr	r4, [pc, #52]	; (800c3c8 <__libc_init_array+0x3c>)
 800c394:	1b64      	subs	r4, r4, r5
 800c396:	10a4      	asrs	r4, r4, #2
 800c398:	42a6      	cmp	r6, r4
 800c39a:	d109      	bne.n	800c3b0 <__libc_init_array+0x24>
 800c39c:	f000 fbc6 	bl	800cb2c <_init>
 800c3a0:	2600      	movs	r6, #0
 800c3a2:	4d0a      	ldr	r5, [pc, #40]	; (800c3cc <__libc_init_array+0x40>)
 800c3a4:	4c0a      	ldr	r4, [pc, #40]	; (800c3d0 <__libc_init_array+0x44>)
 800c3a6:	1b64      	subs	r4, r4, r5
 800c3a8:	10a4      	asrs	r4, r4, #2
 800c3aa:	42a6      	cmp	r6, r4
 800c3ac:	d105      	bne.n	800c3ba <__libc_init_array+0x2e>
 800c3ae:	bd70      	pop	{r4, r5, r6, pc}
 800c3b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3b4:	4798      	blx	r3
 800c3b6:	3601      	adds	r6, #1
 800c3b8:	e7ee      	b.n	800c398 <__libc_init_array+0xc>
 800c3ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800c3be:	4798      	blx	r3
 800c3c0:	3601      	adds	r6, #1
 800c3c2:	e7f2      	b.n	800c3aa <__libc_init_array+0x1e>
 800c3c4:	0800db20 	.word	0x0800db20
 800c3c8:	0800db20 	.word	0x0800db20
 800c3cc:	0800db20 	.word	0x0800db20
 800c3d0:	0800db24 	.word	0x0800db24

0800c3d4 <__retarget_lock_acquire_recursive>:
 800c3d4:	4770      	bx	lr

0800c3d6 <__retarget_lock_release_recursive>:
 800c3d6:	4770      	bx	lr

0800c3d8 <memcpy>:
 800c3d8:	440a      	add	r2, r1
 800c3da:	4291      	cmp	r1, r2
 800c3dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c3e0:	d100      	bne.n	800c3e4 <memcpy+0xc>
 800c3e2:	4770      	bx	lr
 800c3e4:	b510      	push	{r4, lr}
 800c3e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3ea:	4291      	cmp	r1, r2
 800c3ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c3f0:	d1f9      	bne.n	800c3e6 <memcpy+0xe>
 800c3f2:	bd10      	pop	{r4, pc}

0800c3f4 <strcpy>:
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c3fa:	f803 2b01 	strb.w	r2, [r3], #1
 800c3fe:	2a00      	cmp	r2, #0
 800c400:	d1f9      	bne.n	800c3f6 <strcpy+0x2>
 800c402:	4770      	bx	lr

0800c404 <_free_r>:
 800c404:	b538      	push	{r3, r4, r5, lr}
 800c406:	4605      	mov	r5, r0
 800c408:	2900      	cmp	r1, #0
 800c40a:	d040      	beq.n	800c48e <_free_r+0x8a>
 800c40c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c410:	1f0c      	subs	r4, r1, #4
 800c412:	2b00      	cmp	r3, #0
 800c414:	bfb8      	it	lt
 800c416:	18e4      	addlt	r4, r4, r3
 800c418:	f7ff ff1c 	bl	800c254 <__malloc_lock>
 800c41c:	4a1c      	ldr	r2, [pc, #112]	; (800c490 <_free_r+0x8c>)
 800c41e:	6813      	ldr	r3, [r2, #0]
 800c420:	b933      	cbnz	r3, 800c430 <_free_r+0x2c>
 800c422:	6063      	str	r3, [r4, #4]
 800c424:	6014      	str	r4, [r2, #0]
 800c426:	4628      	mov	r0, r5
 800c428:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c42c:	f7ff bf18 	b.w	800c260 <__malloc_unlock>
 800c430:	42a3      	cmp	r3, r4
 800c432:	d908      	bls.n	800c446 <_free_r+0x42>
 800c434:	6820      	ldr	r0, [r4, #0]
 800c436:	1821      	adds	r1, r4, r0
 800c438:	428b      	cmp	r3, r1
 800c43a:	bf01      	itttt	eq
 800c43c:	6819      	ldreq	r1, [r3, #0]
 800c43e:	685b      	ldreq	r3, [r3, #4]
 800c440:	1809      	addeq	r1, r1, r0
 800c442:	6021      	streq	r1, [r4, #0]
 800c444:	e7ed      	b.n	800c422 <_free_r+0x1e>
 800c446:	461a      	mov	r2, r3
 800c448:	685b      	ldr	r3, [r3, #4]
 800c44a:	b10b      	cbz	r3, 800c450 <_free_r+0x4c>
 800c44c:	42a3      	cmp	r3, r4
 800c44e:	d9fa      	bls.n	800c446 <_free_r+0x42>
 800c450:	6811      	ldr	r1, [r2, #0]
 800c452:	1850      	adds	r0, r2, r1
 800c454:	42a0      	cmp	r0, r4
 800c456:	d10b      	bne.n	800c470 <_free_r+0x6c>
 800c458:	6820      	ldr	r0, [r4, #0]
 800c45a:	4401      	add	r1, r0
 800c45c:	1850      	adds	r0, r2, r1
 800c45e:	4283      	cmp	r3, r0
 800c460:	6011      	str	r1, [r2, #0]
 800c462:	d1e0      	bne.n	800c426 <_free_r+0x22>
 800c464:	6818      	ldr	r0, [r3, #0]
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	4408      	add	r0, r1
 800c46a:	6010      	str	r0, [r2, #0]
 800c46c:	6053      	str	r3, [r2, #4]
 800c46e:	e7da      	b.n	800c426 <_free_r+0x22>
 800c470:	d902      	bls.n	800c478 <_free_r+0x74>
 800c472:	230c      	movs	r3, #12
 800c474:	602b      	str	r3, [r5, #0]
 800c476:	e7d6      	b.n	800c426 <_free_r+0x22>
 800c478:	6820      	ldr	r0, [r4, #0]
 800c47a:	1821      	adds	r1, r4, r0
 800c47c:	428b      	cmp	r3, r1
 800c47e:	bf01      	itttt	eq
 800c480:	6819      	ldreq	r1, [r3, #0]
 800c482:	685b      	ldreq	r3, [r3, #4]
 800c484:	1809      	addeq	r1, r1, r0
 800c486:	6021      	streq	r1, [r4, #0]
 800c488:	6063      	str	r3, [r4, #4]
 800c48a:	6054      	str	r4, [r2, #4]
 800c48c:	e7cb      	b.n	800c426 <_free_r+0x22>
 800c48e:	bd38      	pop	{r3, r4, r5, pc}
 800c490:	20000370 	.word	0x20000370

0800c494 <__ssputs_r>:
 800c494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c498:	461f      	mov	r7, r3
 800c49a:	688e      	ldr	r6, [r1, #8]
 800c49c:	4682      	mov	sl, r0
 800c49e:	42be      	cmp	r6, r7
 800c4a0:	460c      	mov	r4, r1
 800c4a2:	4690      	mov	r8, r2
 800c4a4:	680b      	ldr	r3, [r1, #0]
 800c4a6:	d82c      	bhi.n	800c502 <__ssputs_r+0x6e>
 800c4a8:	898a      	ldrh	r2, [r1, #12]
 800c4aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c4ae:	d026      	beq.n	800c4fe <__ssputs_r+0x6a>
 800c4b0:	6965      	ldr	r5, [r4, #20]
 800c4b2:	6909      	ldr	r1, [r1, #16]
 800c4b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4b8:	eba3 0901 	sub.w	r9, r3, r1
 800c4bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4c0:	1c7b      	adds	r3, r7, #1
 800c4c2:	444b      	add	r3, r9
 800c4c4:	106d      	asrs	r5, r5, #1
 800c4c6:	429d      	cmp	r5, r3
 800c4c8:	bf38      	it	cc
 800c4ca:	461d      	movcc	r5, r3
 800c4cc:	0553      	lsls	r3, r2, #21
 800c4ce:	d527      	bpl.n	800c520 <__ssputs_r+0x8c>
 800c4d0:	4629      	mov	r1, r5
 800c4d2:	f7ff fe0b 	bl	800c0ec <_malloc_r>
 800c4d6:	4606      	mov	r6, r0
 800c4d8:	b360      	cbz	r0, 800c534 <__ssputs_r+0xa0>
 800c4da:	464a      	mov	r2, r9
 800c4dc:	6921      	ldr	r1, [r4, #16]
 800c4de:	f7ff ff7b 	bl	800c3d8 <memcpy>
 800c4e2:	89a3      	ldrh	r3, [r4, #12]
 800c4e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c4e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4ec:	81a3      	strh	r3, [r4, #12]
 800c4ee:	6126      	str	r6, [r4, #16]
 800c4f0:	444e      	add	r6, r9
 800c4f2:	6026      	str	r6, [r4, #0]
 800c4f4:	463e      	mov	r6, r7
 800c4f6:	6165      	str	r5, [r4, #20]
 800c4f8:	eba5 0509 	sub.w	r5, r5, r9
 800c4fc:	60a5      	str	r5, [r4, #8]
 800c4fe:	42be      	cmp	r6, r7
 800c500:	d900      	bls.n	800c504 <__ssputs_r+0x70>
 800c502:	463e      	mov	r6, r7
 800c504:	4632      	mov	r2, r6
 800c506:	4641      	mov	r1, r8
 800c508:	6820      	ldr	r0, [r4, #0]
 800c50a:	f000 fade 	bl	800caca <memmove>
 800c50e:	2000      	movs	r0, #0
 800c510:	68a3      	ldr	r3, [r4, #8]
 800c512:	1b9b      	subs	r3, r3, r6
 800c514:	60a3      	str	r3, [r4, #8]
 800c516:	6823      	ldr	r3, [r4, #0]
 800c518:	4433      	add	r3, r6
 800c51a:	6023      	str	r3, [r4, #0]
 800c51c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c520:	462a      	mov	r2, r5
 800c522:	f000 faa3 	bl	800ca6c <_realloc_r>
 800c526:	4606      	mov	r6, r0
 800c528:	2800      	cmp	r0, #0
 800c52a:	d1e0      	bne.n	800c4ee <__ssputs_r+0x5a>
 800c52c:	4650      	mov	r0, sl
 800c52e:	6921      	ldr	r1, [r4, #16]
 800c530:	f7ff ff68 	bl	800c404 <_free_r>
 800c534:	230c      	movs	r3, #12
 800c536:	f8ca 3000 	str.w	r3, [sl]
 800c53a:	89a3      	ldrh	r3, [r4, #12]
 800c53c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c544:	81a3      	strh	r3, [r4, #12]
 800c546:	e7e9      	b.n	800c51c <__ssputs_r+0x88>

0800c548 <_svfiprintf_r>:
 800c548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c54c:	4698      	mov	r8, r3
 800c54e:	898b      	ldrh	r3, [r1, #12]
 800c550:	4607      	mov	r7, r0
 800c552:	061b      	lsls	r3, r3, #24
 800c554:	460d      	mov	r5, r1
 800c556:	4614      	mov	r4, r2
 800c558:	b09d      	sub	sp, #116	; 0x74
 800c55a:	d50e      	bpl.n	800c57a <_svfiprintf_r+0x32>
 800c55c:	690b      	ldr	r3, [r1, #16]
 800c55e:	b963      	cbnz	r3, 800c57a <_svfiprintf_r+0x32>
 800c560:	2140      	movs	r1, #64	; 0x40
 800c562:	f7ff fdc3 	bl	800c0ec <_malloc_r>
 800c566:	6028      	str	r0, [r5, #0]
 800c568:	6128      	str	r0, [r5, #16]
 800c56a:	b920      	cbnz	r0, 800c576 <_svfiprintf_r+0x2e>
 800c56c:	230c      	movs	r3, #12
 800c56e:	603b      	str	r3, [r7, #0]
 800c570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c574:	e0d0      	b.n	800c718 <_svfiprintf_r+0x1d0>
 800c576:	2340      	movs	r3, #64	; 0x40
 800c578:	616b      	str	r3, [r5, #20]
 800c57a:	2300      	movs	r3, #0
 800c57c:	9309      	str	r3, [sp, #36]	; 0x24
 800c57e:	2320      	movs	r3, #32
 800c580:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c584:	2330      	movs	r3, #48	; 0x30
 800c586:	f04f 0901 	mov.w	r9, #1
 800c58a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c58e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c730 <_svfiprintf_r+0x1e8>
 800c592:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c596:	4623      	mov	r3, r4
 800c598:	469a      	mov	sl, r3
 800c59a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c59e:	b10a      	cbz	r2, 800c5a4 <_svfiprintf_r+0x5c>
 800c5a0:	2a25      	cmp	r2, #37	; 0x25
 800c5a2:	d1f9      	bne.n	800c598 <_svfiprintf_r+0x50>
 800c5a4:	ebba 0b04 	subs.w	fp, sl, r4
 800c5a8:	d00b      	beq.n	800c5c2 <_svfiprintf_r+0x7a>
 800c5aa:	465b      	mov	r3, fp
 800c5ac:	4622      	mov	r2, r4
 800c5ae:	4629      	mov	r1, r5
 800c5b0:	4638      	mov	r0, r7
 800c5b2:	f7ff ff6f 	bl	800c494 <__ssputs_r>
 800c5b6:	3001      	adds	r0, #1
 800c5b8:	f000 80a9 	beq.w	800c70e <_svfiprintf_r+0x1c6>
 800c5bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5be:	445a      	add	r2, fp
 800c5c0:	9209      	str	r2, [sp, #36]	; 0x24
 800c5c2:	f89a 3000 	ldrb.w	r3, [sl]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	f000 80a1 	beq.w	800c70e <_svfiprintf_r+0x1c6>
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5d6:	f10a 0a01 	add.w	sl, sl, #1
 800c5da:	9304      	str	r3, [sp, #16]
 800c5dc:	9307      	str	r3, [sp, #28]
 800c5de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5e2:	931a      	str	r3, [sp, #104]	; 0x68
 800c5e4:	4654      	mov	r4, sl
 800c5e6:	2205      	movs	r2, #5
 800c5e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ec:	4850      	ldr	r0, [pc, #320]	; (800c730 <_svfiprintf_r+0x1e8>)
 800c5ee:	f000 fa86 	bl	800cafe <memchr>
 800c5f2:	9a04      	ldr	r2, [sp, #16]
 800c5f4:	b9d8      	cbnz	r0, 800c62e <_svfiprintf_r+0xe6>
 800c5f6:	06d0      	lsls	r0, r2, #27
 800c5f8:	bf44      	itt	mi
 800c5fa:	2320      	movmi	r3, #32
 800c5fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c600:	0711      	lsls	r1, r2, #28
 800c602:	bf44      	itt	mi
 800c604:	232b      	movmi	r3, #43	; 0x2b
 800c606:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c60a:	f89a 3000 	ldrb.w	r3, [sl]
 800c60e:	2b2a      	cmp	r3, #42	; 0x2a
 800c610:	d015      	beq.n	800c63e <_svfiprintf_r+0xf6>
 800c612:	4654      	mov	r4, sl
 800c614:	2000      	movs	r0, #0
 800c616:	f04f 0c0a 	mov.w	ip, #10
 800c61a:	9a07      	ldr	r2, [sp, #28]
 800c61c:	4621      	mov	r1, r4
 800c61e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c622:	3b30      	subs	r3, #48	; 0x30
 800c624:	2b09      	cmp	r3, #9
 800c626:	d94d      	bls.n	800c6c4 <_svfiprintf_r+0x17c>
 800c628:	b1b0      	cbz	r0, 800c658 <_svfiprintf_r+0x110>
 800c62a:	9207      	str	r2, [sp, #28]
 800c62c:	e014      	b.n	800c658 <_svfiprintf_r+0x110>
 800c62e:	eba0 0308 	sub.w	r3, r0, r8
 800c632:	fa09 f303 	lsl.w	r3, r9, r3
 800c636:	4313      	orrs	r3, r2
 800c638:	46a2      	mov	sl, r4
 800c63a:	9304      	str	r3, [sp, #16]
 800c63c:	e7d2      	b.n	800c5e4 <_svfiprintf_r+0x9c>
 800c63e:	9b03      	ldr	r3, [sp, #12]
 800c640:	1d19      	adds	r1, r3, #4
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	9103      	str	r1, [sp, #12]
 800c646:	2b00      	cmp	r3, #0
 800c648:	bfbb      	ittet	lt
 800c64a:	425b      	neglt	r3, r3
 800c64c:	f042 0202 	orrlt.w	r2, r2, #2
 800c650:	9307      	strge	r3, [sp, #28]
 800c652:	9307      	strlt	r3, [sp, #28]
 800c654:	bfb8      	it	lt
 800c656:	9204      	strlt	r2, [sp, #16]
 800c658:	7823      	ldrb	r3, [r4, #0]
 800c65a:	2b2e      	cmp	r3, #46	; 0x2e
 800c65c:	d10c      	bne.n	800c678 <_svfiprintf_r+0x130>
 800c65e:	7863      	ldrb	r3, [r4, #1]
 800c660:	2b2a      	cmp	r3, #42	; 0x2a
 800c662:	d134      	bne.n	800c6ce <_svfiprintf_r+0x186>
 800c664:	9b03      	ldr	r3, [sp, #12]
 800c666:	3402      	adds	r4, #2
 800c668:	1d1a      	adds	r2, r3, #4
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	9203      	str	r2, [sp, #12]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	bfb8      	it	lt
 800c672:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c676:	9305      	str	r3, [sp, #20]
 800c678:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c734 <_svfiprintf_r+0x1ec>
 800c67c:	2203      	movs	r2, #3
 800c67e:	4650      	mov	r0, sl
 800c680:	7821      	ldrb	r1, [r4, #0]
 800c682:	f000 fa3c 	bl	800cafe <memchr>
 800c686:	b138      	cbz	r0, 800c698 <_svfiprintf_r+0x150>
 800c688:	2240      	movs	r2, #64	; 0x40
 800c68a:	9b04      	ldr	r3, [sp, #16]
 800c68c:	eba0 000a 	sub.w	r0, r0, sl
 800c690:	4082      	lsls	r2, r0
 800c692:	4313      	orrs	r3, r2
 800c694:	3401      	adds	r4, #1
 800c696:	9304      	str	r3, [sp, #16]
 800c698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c69c:	2206      	movs	r2, #6
 800c69e:	4826      	ldr	r0, [pc, #152]	; (800c738 <_svfiprintf_r+0x1f0>)
 800c6a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6a4:	f000 fa2b 	bl	800cafe <memchr>
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	d038      	beq.n	800c71e <_svfiprintf_r+0x1d6>
 800c6ac:	4b23      	ldr	r3, [pc, #140]	; (800c73c <_svfiprintf_r+0x1f4>)
 800c6ae:	bb1b      	cbnz	r3, 800c6f8 <_svfiprintf_r+0x1b0>
 800c6b0:	9b03      	ldr	r3, [sp, #12]
 800c6b2:	3307      	adds	r3, #7
 800c6b4:	f023 0307 	bic.w	r3, r3, #7
 800c6b8:	3308      	adds	r3, #8
 800c6ba:	9303      	str	r3, [sp, #12]
 800c6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6be:	4433      	add	r3, r6
 800c6c0:	9309      	str	r3, [sp, #36]	; 0x24
 800c6c2:	e768      	b.n	800c596 <_svfiprintf_r+0x4e>
 800c6c4:	460c      	mov	r4, r1
 800c6c6:	2001      	movs	r0, #1
 800c6c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6cc:	e7a6      	b.n	800c61c <_svfiprintf_r+0xd4>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	f04f 0c0a 	mov.w	ip, #10
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	3401      	adds	r4, #1
 800c6d8:	9305      	str	r3, [sp, #20]
 800c6da:	4620      	mov	r0, r4
 800c6dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6e0:	3a30      	subs	r2, #48	; 0x30
 800c6e2:	2a09      	cmp	r2, #9
 800c6e4:	d903      	bls.n	800c6ee <_svfiprintf_r+0x1a6>
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d0c6      	beq.n	800c678 <_svfiprintf_r+0x130>
 800c6ea:	9105      	str	r1, [sp, #20]
 800c6ec:	e7c4      	b.n	800c678 <_svfiprintf_r+0x130>
 800c6ee:	4604      	mov	r4, r0
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800c6f6:	e7f0      	b.n	800c6da <_svfiprintf_r+0x192>
 800c6f8:	ab03      	add	r3, sp, #12
 800c6fa:	9300      	str	r3, [sp, #0]
 800c6fc:	462a      	mov	r2, r5
 800c6fe:	4638      	mov	r0, r7
 800c700:	4b0f      	ldr	r3, [pc, #60]	; (800c740 <_svfiprintf_r+0x1f8>)
 800c702:	a904      	add	r1, sp, #16
 800c704:	f3af 8000 	nop.w
 800c708:	1c42      	adds	r2, r0, #1
 800c70a:	4606      	mov	r6, r0
 800c70c:	d1d6      	bne.n	800c6bc <_svfiprintf_r+0x174>
 800c70e:	89ab      	ldrh	r3, [r5, #12]
 800c710:	065b      	lsls	r3, r3, #25
 800c712:	f53f af2d 	bmi.w	800c570 <_svfiprintf_r+0x28>
 800c716:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c718:	b01d      	add	sp, #116	; 0x74
 800c71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c71e:	ab03      	add	r3, sp, #12
 800c720:	9300      	str	r3, [sp, #0]
 800c722:	462a      	mov	r2, r5
 800c724:	4638      	mov	r0, r7
 800c726:	4b06      	ldr	r3, [pc, #24]	; (800c740 <_svfiprintf_r+0x1f8>)
 800c728:	a904      	add	r1, sp, #16
 800c72a:	f000 f87d 	bl	800c828 <_printf_i>
 800c72e:	e7eb      	b.n	800c708 <_svfiprintf_r+0x1c0>
 800c730:	0800daeb 	.word	0x0800daeb
 800c734:	0800daf1 	.word	0x0800daf1
 800c738:	0800daf5 	.word	0x0800daf5
 800c73c:	00000000 	.word	0x00000000
 800c740:	0800c495 	.word	0x0800c495

0800c744 <_printf_common>:
 800c744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c748:	4616      	mov	r6, r2
 800c74a:	4699      	mov	r9, r3
 800c74c:	688a      	ldr	r2, [r1, #8]
 800c74e:	690b      	ldr	r3, [r1, #16]
 800c750:	4607      	mov	r7, r0
 800c752:	4293      	cmp	r3, r2
 800c754:	bfb8      	it	lt
 800c756:	4613      	movlt	r3, r2
 800c758:	6033      	str	r3, [r6, #0]
 800c75a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c75e:	460c      	mov	r4, r1
 800c760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c764:	b10a      	cbz	r2, 800c76a <_printf_common+0x26>
 800c766:	3301      	adds	r3, #1
 800c768:	6033      	str	r3, [r6, #0]
 800c76a:	6823      	ldr	r3, [r4, #0]
 800c76c:	0699      	lsls	r1, r3, #26
 800c76e:	bf42      	ittt	mi
 800c770:	6833      	ldrmi	r3, [r6, #0]
 800c772:	3302      	addmi	r3, #2
 800c774:	6033      	strmi	r3, [r6, #0]
 800c776:	6825      	ldr	r5, [r4, #0]
 800c778:	f015 0506 	ands.w	r5, r5, #6
 800c77c:	d106      	bne.n	800c78c <_printf_common+0x48>
 800c77e:	f104 0a19 	add.w	sl, r4, #25
 800c782:	68e3      	ldr	r3, [r4, #12]
 800c784:	6832      	ldr	r2, [r6, #0]
 800c786:	1a9b      	subs	r3, r3, r2
 800c788:	42ab      	cmp	r3, r5
 800c78a:	dc2b      	bgt.n	800c7e4 <_printf_common+0xa0>
 800c78c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c790:	1e13      	subs	r3, r2, #0
 800c792:	6822      	ldr	r2, [r4, #0]
 800c794:	bf18      	it	ne
 800c796:	2301      	movne	r3, #1
 800c798:	0692      	lsls	r2, r2, #26
 800c79a:	d430      	bmi.n	800c7fe <_printf_common+0xba>
 800c79c:	4649      	mov	r1, r9
 800c79e:	4638      	mov	r0, r7
 800c7a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c7a4:	47c0      	blx	r8
 800c7a6:	3001      	adds	r0, #1
 800c7a8:	d023      	beq.n	800c7f2 <_printf_common+0xae>
 800c7aa:	6823      	ldr	r3, [r4, #0]
 800c7ac:	6922      	ldr	r2, [r4, #16]
 800c7ae:	f003 0306 	and.w	r3, r3, #6
 800c7b2:	2b04      	cmp	r3, #4
 800c7b4:	bf14      	ite	ne
 800c7b6:	2500      	movne	r5, #0
 800c7b8:	6833      	ldreq	r3, [r6, #0]
 800c7ba:	f04f 0600 	mov.w	r6, #0
 800c7be:	bf08      	it	eq
 800c7c0:	68e5      	ldreq	r5, [r4, #12]
 800c7c2:	f104 041a 	add.w	r4, r4, #26
 800c7c6:	bf08      	it	eq
 800c7c8:	1aed      	subeq	r5, r5, r3
 800c7ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c7ce:	bf08      	it	eq
 800c7d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	bfc4      	itt	gt
 800c7d8:	1a9b      	subgt	r3, r3, r2
 800c7da:	18ed      	addgt	r5, r5, r3
 800c7dc:	42b5      	cmp	r5, r6
 800c7de:	d11a      	bne.n	800c816 <_printf_common+0xd2>
 800c7e0:	2000      	movs	r0, #0
 800c7e2:	e008      	b.n	800c7f6 <_printf_common+0xb2>
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	4652      	mov	r2, sl
 800c7e8:	4649      	mov	r1, r9
 800c7ea:	4638      	mov	r0, r7
 800c7ec:	47c0      	blx	r8
 800c7ee:	3001      	adds	r0, #1
 800c7f0:	d103      	bne.n	800c7fa <_printf_common+0xb6>
 800c7f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7fa:	3501      	adds	r5, #1
 800c7fc:	e7c1      	b.n	800c782 <_printf_common+0x3e>
 800c7fe:	2030      	movs	r0, #48	; 0x30
 800c800:	18e1      	adds	r1, r4, r3
 800c802:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c806:	1c5a      	adds	r2, r3, #1
 800c808:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c80c:	4422      	add	r2, r4
 800c80e:	3302      	adds	r3, #2
 800c810:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c814:	e7c2      	b.n	800c79c <_printf_common+0x58>
 800c816:	2301      	movs	r3, #1
 800c818:	4622      	mov	r2, r4
 800c81a:	4649      	mov	r1, r9
 800c81c:	4638      	mov	r0, r7
 800c81e:	47c0      	blx	r8
 800c820:	3001      	adds	r0, #1
 800c822:	d0e6      	beq.n	800c7f2 <_printf_common+0xae>
 800c824:	3601      	adds	r6, #1
 800c826:	e7d9      	b.n	800c7dc <_printf_common+0x98>

0800c828 <_printf_i>:
 800c828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c82c:	7e0f      	ldrb	r7, [r1, #24]
 800c82e:	4691      	mov	r9, r2
 800c830:	2f78      	cmp	r7, #120	; 0x78
 800c832:	4680      	mov	r8, r0
 800c834:	460c      	mov	r4, r1
 800c836:	469a      	mov	sl, r3
 800c838:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c83a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c83e:	d807      	bhi.n	800c850 <_printf_i+0x28>
 800c840:	2f62      	cmp	r7, #98	; 0x62
 800c842:	d80a      	bhi.n	800c85a <_printf_i+0x32>
 800c844:	2f00      	cmp	r7, #0
 800c846:	f000 80d5 	beq.w	800c9f4 <_printf_i+0x1cc>
 800c84a:	2f58      	cmp	r7, #88	; 0x58
 800c84c:	f000 80c1 	beq.w	800c9d2 <_printf_i+0x1aa>
 800c850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c854:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c858:	e03a      	b.n	800c8d0 <_printf_i+0xa8>
 800c85a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c85e:	2b15      	cmp	r3, #21
 800c860:	d8f6      	bhi.n	800c850 <_printf_i+0x28>
 800c862:	a101      	add	r1, pc, #4	; (adr r1, 800c868 <_printf_i+0x40>)
 800c864:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c868:	0800c8c1 	.word	0x0800c8c1
 800c86c:	0800c8d5 	.word	0x0800c8d5
 800c870:	0800c851 	.word	0x0800c851
 800c874:	0800c851 	.word	0x0800c851
 800c878:	0800c851 	.word	0x0800c851
 800c87c:	0800c851 	.word	0x0800c851
 800c880:	0800c8d5 	.word	0x0800c8d5
 800c884:	0800c851 	.word	0x0800c851
 800c888:	0800c851 	.word	0x0800c851
 800c88c:	0800c851 	.word	0x0800c851
 800c890:	0800c851 	.word	0x0800c851
 800c894:	0800c9db 	.word	0x0800c9db
 800c898:	0800c901 	.word	0x0800c901
 800c89c:	0800c995 	.word	0x0800c995
 800c8a0:	0800c851 	.word	0x0800c851
 800c8a4:	0800c851 	.word	0x0800c851
 800c8a8:	0800c9fd 	.word	0x0800c9fd
 800c8ac:	0800c851 	.word	0x0800c851
 800c8b0:	0800c901 	.word	0x0800c901
 800c8b4:	0800c851 	.word	0x0800c851
 800c8b8:	0800c851 	.word	0x0800c851
 800c8bc:	0800c99d 	.word	0x0800c99d
 800c8c0:	682b      	ldr	r3, [r5, #0]
 800c8c2:	1d1a      	adds	r2, r3, #4
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	602a      	str	r2, [r5, #0]
 800c8c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	e0a0      	b.n	800ca16 <_printf_i+0x1ee>
 800c8d4:	6820      	ldr	r0, [r4, #0]
 800c8d6:	682b      	ldr	r3, [r5, #0]
 800c8d8:	0607      	lsls	r7, r0, #24
 800c8da:	f103 0104 	add.w	r1, r3, #4
 800c8de:	6029      	str	r1, [r5, #0]
 800c8e0:	d501      	bpl.n	800c8e6 <_printf_i+0xbe>
 800c8e2:	681e      	ldr	r6, [r3, #0]
 800c8e4:	e003      	b.n	800c8ee <_printf_i+0xc6>
 800c8e6:	0646      	lsls	r6, r0, #25
 800c8e8:	d5fb      	bpl.n	800c8e2 <_printf_i+0xba>
 800c8ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c8ee:	2e00      	cmp	r6, #0
 800c8f0:	da03      	bge.n	800c8fa <_printf_i+0xd2>
 800c8f2:	232d      	movs	r3, #45	; 0x2d
 800c8f4:	4276      	negs	r6, r6
 800c8f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8fa:	230a      	movs	r3, #10
 800c8fc:	4859      	ldr	r0, [pc, #356]	; (800ca64 <_printf_i+0x23c>)
 800c8fe:	e012      	b.n	800c926 <_printf_i+0xfe>
 800c900:	682b      	ldr	r3, [r5, #0]
 800c902:	6820      	ldr	r0, [r4, #0]
 800c904:	1d19      	adds	r1, r3, #4
 800c906:	6029      	str	r1, [r5, #0]
 800c908:	0605      	lsls	r5, r0, #24
 800c90a:	d501      	bpl.n	800c910 <_printf_i+0xe8>
 800c90c:	681e      	ldr	r6, [r3, #0]
 800c90e:	e002      	b.n	800c916 <_printf_i+0xee>
 800c910:	0641      	lsls	r1, r0, #25
 800c912:	d5fb      	bpl.n	800c90c <_printf_i+0xe4>
 800c914:	881e      	ldrh	r6, [r3, #0]
 800c916:	2f6f      	cmp	r7, #111	; 0x6f
 800c918:	bf0c      	ite	eq
 800c91a:	2308      	moveq	r3, #8
 800c91c:	230a      	movne	r3, #10
 800c91e:	4851      	ldr	r0, [pc, #324]	; (800ca64 <_printf_i+0x23c>)
 800c920:	2100      	movs	r1, #0
 800c922:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c926:	6865      	ldr	r5, [r4, #4]
 800c928:	2d00      	cmp	r5, #0
 800c92a:	bfa8      	it	ge
 800c92c:	6821      	ldrge	r1, [r4, #0]
 800c92e:	60a5      	str	r5, [r4, #8]
 800c930:	bfa4      	itt	ge
 800c932:	f021 0104 	bicge.w	r1, r1, #4
 800c936:	6021      	strge	r1, [r4, #0]
 800c938:	b90e      	cbnz	r6, 800c93e <_printf_i+0x116>
 800c93a:	2d00      	cmp	r5, #0
 800c93c:	d04b      	beq.n	800c9d6 <_printf_i+0x1ae>
 800c93e:	4615      	mov	r5, r2
 800c940:	fbb6 f1f3 	udiv	r1, r6, r3
 800c944:	fb03 6711 	mls	r7, r3, r1, r6
 800c948:	5dc7      	ldrb	r7, [r0, r7]
 800c94a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c94e:	4637      	mov	r7, r6
 800c950:	42bb      	cmp	r3, r7
 800c952:	460e      	mov	r6, r1
 800c954:	d9f4      	bls.n	800c940 <_printf_i+0x118>
 800c956:	2b08      	cmp	r3, #8
 800c958:	d10b      	bne.n	800c972 <_printf_i+0x14a>
 800c95a:	6823      	ldr	r3, [r4, #0]
 800c95c:	07de      	lsls	r6, r3, #31
 800c95e:	d508      	bpl.n	800c972 <_printf_i+0x14a>
 800c960:	6923      	ldr	r3, [r4, #16]
 800c962:	6861      	ldr	r1, [r4, #4]
 800c964:	4299      	cmp	r1, r3
 800c966:	bfde      	ittt	le
 800c968:	2330      	movle	r3, #48	; 0x30
 800c96a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c96e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c972:	1b52      	subs	r2, r2, r5
 800c974:	6122      	str	r2, [r4, #16]
 800c976:	464b      	mov	r3, r9
 800c978:	4621      	mov	r1, r4
 800c97a:	4640      	mov	r0, r8
 800c97c:	f8cd a000 	str.w	sl, [sp]
 800c980:	aa03      	add	r2, sp, #12
 800c982:	f7ff fedf 	bl	800c744 <_printf_common>
 800c986:	3001      	adds	r0, #1
 800c988:	d14a      	bne.n	800ca20 <_printf_i+0x1f8>
 800c98a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c98e:	b004      	add	sp, #16
 800c990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c994:	6823      	ldr	r3, [r4, #0]
 800c996:	f043 0320 	orr.w	r3, r3, #32
 800c99a:	6023      	str	r3, [r4, #0]
 800c99c:	2778      	movs	r7, #120	; 0x78
 800c99e:	4832      	ldr	r0, [pc, #200]	; (800ca68 <_printf_i+0x240>)
 800c9a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c9a4:	6823      	ldr	r3, [r4, #0]
 800c9a6:	6829      	ldr	r1, [r5, #0]
 800c9a8:	061f      	lsls	r7, r3, #24
 800c9aa:	f851 6b04 	ldr.w	r6, [r1], #4
 800c9ae:	d402      	bmi.n	800c9b6 <_printf_i+0x18e>
 800c9b0:	065f      	lsls	r7, r3, #25
 800c9b2:	bf48      	it	mi
 800c9b4:	b2b6      	uxthmi	r6, r6
 800c9b6:	07df      	lsls	r7, r3, #31
 800c9b8:	bf48      	it	mi
 800c9ba:	f043 0320 	orrmi.w	r3, r3, #32
 800c9be:	6029      	str	r1, [r5, #0]
 800c9c0:	bf48      	it	mi
 800c9c2:	6023      	strmi	r3, [r4, #0]
 800c9c4:	b91e      	cbnz	r6, 800c9ce <_printf_i+0x1a6>
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	f023 0320 	bic.w	r3, r3, #32
 800c9cc:	6023      	str	r3, [r4, #0]
 800c9ce:	2310      	movs	r3, #16
 800c9d0:	e7a6      	b.n	800c920 <_printf_i+0xf8>
 800c9d2:	4824      	ldr	r0, [pc, #144]	; (800ca64 <_printf_i+0x23c>)
 800c9d4:	e7e4      	b.n	800c9a0 <_printf_i+0x178>
 800c9d6:	4615      	mov	r5, r2
 800c9d8:	e7bd      	b.n	800c956 <_printf_i+0x12e>
 800c9da:	682b      	ldr	r3, [r5, #0]
 800c9dc:	6826      	ldr	r6, [r4, #0]
 800c9de:	1d18      	adds	r0, r3, #4
 800c9e0:	6961      	ldr	r1, [r4, #20]
 800c9e2:	6028      	str	r0, [r5, #0]
 800c9e4:	0635      	lsls	r5, r6, #24
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	d501      	bpl.n	800c9ee <_printf_i+0x1c6>
 800c9ea:	6019      	str	r1, [r3, #0]
 800c9ec:	e002      	b.n	800c9f4 <_printf_i+0x1cc>
 800c9ee:	0670      	lsls	r0, r6, #25
 800c9f0:	d5fb      	bpl.n	800c9ea <_printf_i+0x1c2>
 800c9f2:	8019      	strh	r1, [r3, #0]
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	4615      	mov	r5, r2
 800c9f8:	6123      	str	r3, [r4, #16]
 800c9fa:	e7bc      	b.n	800c976 <_printf_i+0x14e>
 800c9fc:	682b      	ldr	r3, [r5, #0]
 800c9fe:	2100      	movs	r1, #0
 800ca00:	1d1a      	adds	r2, r3, #4
 800ca02:	602a      	str	r2, [r5, #0]
 800ca04:	681d      	ldr	r5, [r3, #0]
 800ca06:	6862      	ldr	r2, [r4, #4]
 800ca08:	4628      	mov	r0, r5
 800ca0a:	f000 f878 	bl	800cafe <memchr>
 800ca0e:	b108      	cbz	r0, 800ca14 <_printf_i+0x1ec>
 800ca10:	1b40      	subs	r0, r0, r5
 800ca12:	6060      	str	r0, [r4, #4]
 800ca14:	6863      	ldr	r3, [r4, #4]
 800ca16:	6123      	str	r3, [r4, #16]
 800ca18:	2300      	movs	r3, #0
 800ca1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca1e:	e7aa      	b.n	800c976 <_printf_i+0x14e>
 800ca20:	462a      	mov	r2, r5
 800ca22:	4649      	mov	r1, r9
 800ca24:	4640      	mov	r0, r8
 800ca26:	6923      	ldr	r3, [r4, #16]
 800ca28:	47d0      	blx	sl
 800ca2a:	3001      	adds	r0, #1
 800ca2c:	d0ad      	beq.n	800c98a <_printf_i+0x162>
 800ca2e:	6823      	ldr	r3, [r4, #0]
 800ca30:	079b      	lsls	r3, r3, #30
 800ca32:	d413      	bmi.n	800ca5c <_printf_i+0x234>
 800ca34:	68e0      	ldr	r0, [r4, #12]
 800ca36:	9b03      	ldr	r3, [sp, #12]
 800ca38:	4298      	cmp	r0, r3
 800ca3a:	bfb8      	it	lt
 800ca3c:	4618      	movlt	r0, r3
 800ca3e:	e7a6      	b.n	800c98e <_printf_i+0x166>
 800ca40:	2301      	movs	r3, #1
 800ca42:	4632      	mov	r2, r6
 800ca44:	4649      	mov	r1, r9
 800ca46:	4640      	mov	r0, r8
 800ca48:	47d0      	blx	sl
 800ca4a:	3001      	adds	r0, #1
 800ca4c:	d09d      	beq.n	800c98a <_printf_i+0x162>
 800ca4e:	3501      	adds	r5, #1
 800ca50:	68e3      	ldr	r3, [r4, #12]
 800ca52:	9903      	ldr	r1, [sp, #12]
 800ca54:	1a5b      	subs	r3, r3, r1
 800ca56:	42ab      	cmp	r3, r5
 800ca58:	dcf2      	bgt.n	800ca40 <_printf_i+0x218>
 800ca5a:	e7eb      	b.n	800ca34 <_printf_i+0x20c>
 800ca5c:	2500      	movs	r5, #0
 800ca5e:	f104 0619 	add.w	r6, r4, #25
 800ca62:	e7f5      	b.n	800ca50 <_printf_i+0x228>
 800ca64:	0800dafc 	.word	0x0800dafc
 800ca68:	0800db0d 	.word	0x0800db0d

0800ca6c <_realloc_r>:
 800ca6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca70:	4680      	mov	r8, r0
 800ca72:	4614      	mov	r4, r2
 800ca74:	460e      	mov	r6, r1
 800ca76:	b921      	cbnz	r1, 800ca82 <_realloc_r+0x16>
 800ca78:	4611      	mov	r1, r2
 800ca7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca7e:	f7ff bb35 	b.w	800c0ec <_malloc_r>
 800ca82:	b92a      	cbnz	r2, 800ca90 <_realloc_r+0x24>
 800ca84:	f7ff fcbe 	bl	800c404 <_free_r>
 800ca88:	4625      	mov	r5, r4
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca90:	f000 f843 	bl	800cb1a <_malloc_usable_size_r>
 800ca94:	4284      	cmp	r4, r0
 800ca96:	4607      	mov	r7, r0
 800ca98:	d802      	bhi.n	800caa0 <_realloc_r+0x34>
 800ca9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ca9e:	d812      	bhi.n	800cac6 <_realloc_r+0x5a>
 800caa0:	4621      	mov	r1, r4
 800caa2:	4640      	mov	r0, r8
 800caa4:	f7ff fb22 	bl	800c0ec <_malloc_r>
 800caa8:	4605      	mov	r5, r0
 800caaa:	2800      	cmp	r0, #0
 800caac:	d0ed      	beq.n	800ca8a <_realloc_r+0x1e>
 800caae:	42bc      	cmp	r4, r7
 800cab0:	4622      	mov	r2, r4
 800cab2:	4631      	mov	r1, r6
 800cab4:	bf28      	it	cs
 800cab6:	463a      	movcs	r2, r7
 800cab8:	f7ff fc8e 	bl	800c3d8 <memcpy>
 800cabc:	4631      	mov	r1, r6
 800cabe:	4640      	mov	r0, r8
 800cac0:	f7ff fca0 	bl	800c404 <_free_r>
 800cac4:	e7e1      	b.n	800ca8a <_realloc_r+0x1e>
 800cac6:	4635      	mov	r5, r6
 800cac8:	e7df      	b.n	800ca8a <_realloc_r+0x1e>

0800caca <memmove>:
 800caca:	4288      	cmp	r0, r1
 800cacc:	b510      	push	{r4, lr}
 800cace:	eb01 0402 	add.w	r4, r1, r2
 800cad2:	d902      	bls.n	800cada <memmove+0x10>
 800cad4:	4284      	cmp	r4, r0
 800cad6:	4623      	mov	r3, r4
 800cad8:	d807      	bhi.n	800caea <memmove+0x20>
 800cada:	1e43      	subs	r3, r0, #1
 800cadc:	42a1      	cmp	r1, r4
 800cade:	d008      	beq.n	800caf2 <memmove+0x28>
 800cae0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cae4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cae8:	e7f8      	b.n	800cadc <memmove+0x12>
 800caea:	4601      	mov	r1, r0
 800caec:	4402      	add	r2, r0
 800caee:	428a      	cmp	r2, r1
 800caf0:	d100      	bne.n	800caf4 <memmove+0x2a>
 800caf2:	bd10      	pop	{r4, pc}
 800caf4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800caf8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cafc:	e7f7      	b.n	800caee <memmove+0x24>

0800cafe <memchr>:
 800cafe:	4603      	mov	r3, r0
 800cb00:	b510      	push	{r4, lr}
 800cb02:	b2c9      	uxtb	r1, r1
 800cb04:	4402      	add	r2, r0
 800cb06:	4293      	cmp	r3, r2
 800cb08:	4618      	mov	r0, r3
 800cb0a:	d101      	bne.n	800cb10 <memchr+0x12>
 800cb0c:	2000      	movs	r0, #0
 800cb0e:	e003      	b.n	800cb18 <memchr+0x1a>
 800cb10:	7804      	ldrb	r4, [r0, #0]
 800cb12:	3301      	adds	r3, #1
 800cb14:	428c      	cmp	r4, r1
 800cb16:	d1f6      	bne.n	800cb06 <memchr+0x8>
 800cb18:	bd10      	pop	{r4, pc}

0800cb1a <_malloc_usable_size_r>:
 800cb1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb1e:	1f18      	subs	r0, r3, #4
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	bfbc      	itt	lt
 800cb24:	580b      	ldrlt	r3, [r1, r0]
 800cb26:	18c0      	addlt	r0, r0, r3
 800cb28:	4770      	bx	lr
	...

0800cb2c <_init>:
 800cb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb2e:	bf00      	nop
 800cb30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb32:	bc08      	pop	{r3}
 800cb34:	469e      	mov	lr, r3
 800cb36:	4770      	bx	lr

0800cb38 <_fini>:
 800cb38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb3a:	bf00      	nop
 800cb3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb3e:	bc08      	pop	{r3}
 800cb40:	469e      	mov	lr, r3
 800cb42:	4770      	bx	lr
