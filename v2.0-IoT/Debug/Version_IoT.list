
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d830  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  0800da14  0800da14  0000ea14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dd74  0800dd74  0000ffd4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dd74  0800dd74  0000ed74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd7c  0800dd7c  0000ffd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dd7c  0800dd7c  0000ed7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dd80  0800dd80  0000ed80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd4  20000000  0800dd84  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba0  20000fd4  0800ed58  0000ffd4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b74  0800ed58  00010b74  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000ffd4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d0d  00000000  00000000  0000fffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035fa  00000000  00000000  00028d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  0002c308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb0  00000000  00000000  0002d5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8a4  00000000  00000000  0002e4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c8af  00000000  00000000  0004ad44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0472  00000000  00000000  000675f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107a65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005338  00000000  00000000  00107aa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010cde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fd4 	.word	0x20000fd4
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d9fc 	.word	0x0800d9fc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fd8 	.word	0x20000fd8
 8000220:	0800d9fc 	.word	0x0800d9fc

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	@ 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	@ (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	@ 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	@ 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	@ (80004bc <eepromKontrol+0x288>)
 8000250:	f00a fa36 	bl	800a6c0 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000258:	f009 f8ae 	bl	80093b8 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	@ (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	@ (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	@ (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	@ (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	@ (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	@ (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	@ (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	@ (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	@ (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	@ (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	@ (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	@ (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	@ (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	@ (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	@ (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	@ (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	@ (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	@ (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	@ (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	@ (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	@ (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	@ (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	@ (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	@ (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	@ (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	@ (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	@ (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	@ (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	@ (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	@ (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	@ (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	@ (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	@ (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	@ (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	@ (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	@ (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	@ (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	@ (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	@ (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	@ (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	@ (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	@ (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	@ (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	@ (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	@ (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	@ (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	@ (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	@ (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	@ (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	@ (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	@ (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	@ (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	@ (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	@ (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	@ (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	@ (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	@ (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	@ (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	@ (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	@ (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	@ (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	@ (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	@ (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	@ (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	@ (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	@ (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	@ (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	@ (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	@ (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	@ (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	@ (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	@ (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	@ (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	@ (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	@ (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	@ (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	@ (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	@ (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	@ (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	@ (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	@ (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	@ (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	@ (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	@ (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	@ (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	@ (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	@ (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	@ (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	@ (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	@ (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	@ (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	@ (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	@ (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	@ (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	@ (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	@ (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	@ (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	@ (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	@ (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	@ (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	@ (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	@ (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	@ (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	@ (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	@ (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	@ (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	@ (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	@ (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	@ (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	@ (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000ff0 	.word	0x20000ff0
 80004bc:	20001940 	.word	0x20001940
 80004c0:	2000109d 	.word	0x2000109d
 80004c4:	200010c5 	.word	0x200010c5
 80004c8:	200010c8 	.word	0x200010c8
 80004cc:	200010c9 	.word	0x200010c9
 80004d0:	200010ca 	.word	0x200010ca
 80004d4:	200010cb 	.word	0x200010cb
 80004d8:	200010cc 	.word	0x200010cc
 80004dc:	200010cd 	.word	0x200010cd
 80004e0:	200010dd 	.word	0x200010dd
 80004e4:	200010ce 	.word	0x200010ce
 80004e8:	200010de 	.word	0x200010de
 80004ec:	200010cf 	.word	0x200010cf
 80004f0:	200010df 	.word	0x200010df
 80004f4:	200010d2 	.word	0x200010d2
 80004f8:	200010d3 	.word	0x200010d3
 80004fc:	200010d4 	.word	0x200010d4
 8000500:	200010d5 	.word	0x200010d5
 8000504:	200010d6 	.word	0x200010d6
 8000508:	200010d7 	.word	0x200010d7
 800050c:	200010d8 	.word	0x200010d8
 8000510:	200010d9 	.word	0x200010d9
 8000514:	200010da 	.word	0x200010da
 8000518:	200010db 	.word	0x200010db
 800051c:	200010dc 	.word	0x200010dc
 8000520:	200010e0 	.word	0x200010e0
 8000524:	200010e2 	.word	0x200010e2
 8000528:	200010c0 	.word	0x200010c0
 800052c:	200010c1 	.word	0x200010c1
 8000530:	200010c2 	.word	0x200010c2
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	200010c3 	.word	0x200010c3
 8000540:	200010e5 	.word	0x200010e5
 8000544:	200010e3 	.word	0x200010e3
 8000548:	200010d1 	.word	0x200010d1
 800054c:	200010e4 	.word	0x200010e4
 8000550:	200010d0 	.word	0x200010d0
 8000554:	200010e6 	.word	0x200010e6
 8000558:	200010e7 	.word	0x200010e7
 800055c:	200010e8 	.word	0x200010e8
 8000560:	200010e9 	.word	0x200010e9
 8000564:	200010ea 	.word	0x200010ea
 8000568:	200010eb 	.word	0x200010eb
 800056c:	200010ec 	.word	0x200010ec
 8000570:	200010ed 	.word	0x200010ed
 8000574:	200010ee 	.word	0x200010ee
 8000578:	200010ef 	.word	0x200010ef
 800057c:	2000109c 	.word	0x2000109c
	}

	if(kapi1AcSure>5) {
 8000580:	4b59      	ldr	r3, [pc, #356]	@ (80006e8 <eepromKontrol+0x4b4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b57      	ldr	r3, [pc, #348]	@ (80006e8 <eepromKontrol+0x4b4>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b57      	ldr	r3, [pc, #348]	@ (80006ec <eepromKontrol+0x4b8>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b55      	ldr	r3, [pc, #340]	@ (80006ec <eepromKontrol+0x4b8>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b54      	ldr	r3, [pc, #336]	@ (80006f0 <eepromKontrol+0x4bc>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b52      	ldr	r3, [pc, #328]	@ (80006f0 <eepromKontrol+0x4bc>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b52      	ldr	r3, [pc, #328]	@ (80006f4 <eepromKontrol+0x4c0>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b50      	ldr	r3, [pc, #320]	@ (80006f4 <eepromKontrol+0x4c0>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4f      	ldr	r3, [pc, #316]	@ (80006f8 <eepromKontrol+0x4c4>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4d      	ldr	r3, [pc, #308]	@ (80006f8 <eepromKontrol+0x4c4>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4d      	ldr	r3, [pc, #308]	@ (80006fc <eepromKontrol+0x4c8>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b4b      	ldr	r3, [pc, #300]	@ (80006fc <eepromKontrol+0x4c8>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b4a      	ldr	r3, [pc, #296]	@ (8000700 <eepromKontrol+0x4cc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b48      	ldr	r3, [pc, #288]	@ (8000700 <eepromKontrol+0x4cc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b48      	ldr	r3, [pc, #288]	@ (8000704 <eepromKontrol+0x4d0>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b46      	ldr	r3, [pc, #280]	@ (8000704 <eepromKontrol+0x4d0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b45      	ldr	r3, [pc, #276]	@ (8000708 <eepromKontrol+0x4d4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b43      	ldr	r3, [pc, #268]	@ (8000708 <eepromKontrol+0x4d4>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b43      	ldr	r3, [pc, #268]	@ (800070c <eepromKontrol+0x4d8>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b41      	ldr	r3, [pc, #260]	@ (800070c <eepromKontrol+0x4d8>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b40      	ldr	r3, [pc, #256]	@ (8000710 <eepromKontrol+0x4dc>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3e      	ldr	r3, [pc, #248]	@ (8000710 <eepromKontrol+0x4dc>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3e      	ldr	r3, [pc, #248]	@ (8000714 <eepromKontrol+0x4e0>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3c      	ldr	r3, [pc, #240]	@ (8000714 <eepromKontrol+0x4e0>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b3b      	ldr	r3, [pc, #236]	@ (8000718 <eepromKontrol+0x4e4>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b39      	ldr	r3, [pc, #228]	@ (8000718 <eepromKontrol+0x4e4>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b39      	ldr	r3, [pc, #228]	@ (800071c <eepromKontrol+0x4e8>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b37      	ldr	r3, [pc, #220]	@ (800071c <eepromKontrol+0x4e8>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b36      	ldr	r3, [pc, #216]	@ (8000720 <eepromKontrol+0x4ec>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b34      	ldr	r3, [pc, #208]	@ (8000720 <eepromKontrol+0x4ec>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b34      	ldr	r3, [pc, #208]	@ (8000724 <eepromKontrol+0x4f0>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b32      	ldr	r3, [pc, #200]	@ (8000724 <eepromKontrol+0x4f0>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b31      	ldr	r3, [pc, #196]	@ (8000728 <eepromKontrol+0x4f4>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	@ 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2f      	ldr	r3, [pc, #188]	@ (8000728 <eepromKontrol+0x4f4>)
 800066a:	223c      	movs	r2, #60	@ 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2f      	ldr	r3, [pc, #188]	@ (800072c <eepromKontrol+0x4f8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2d      	ldr	r3, [pc, #180]	@ (800072c <eepromKontrol+0x4f8>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2c      	ldr	r3, [pc, #176]	@ (8000730 <eepromKontrol+0x4fc>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b2a      	ldr	r3, [pc, #168]	@ (8000730 <eepromKontrol+0x4fc>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b2a      	ldr	r3, [pc, #168]	@ (8000734 <eepromKontrol+0x500>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <eepromKontrol+0x500>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <eepromKontrol+0x504>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b25      	ldr	r3, [pc, #148]	@ (8000738 <eepromKontrol+0x504>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b25      	ldr	r3, [pc, #148]	@ (800073c <eepromKontrol+0x508>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b23      	ldr	r3, [pc, #140]	@ (800073c <eepromKontrol+0x508>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f843 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006ba:	20fa      	movs	r0, #250	@ 0xfa
 80006bc:	f008 fe7c 	bl	80093b8 <HAL_Delay>

	convertArrays(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 f83d 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006c6:	20fa      	movs	r0, #250	@ 0xfa
 80006c8:	f008 fe76 	bl	80093b8 <HAL_Delay>

	convertArrays(3);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f837 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006d2:	20fa      	movs	r0, #250	@ 0xfa
 80006d4:	f008 fe70 	bl	80093b8 <HAL_Delay>

	loadMenuTexts(dilSecim);
 80006d8:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <eepromKontrol+0x504>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f005 fbff 	bl	8005ee0 <loadMenuTexts>
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200010dd 	.word	0x200010dd
 80006ec:	200010ce 	.word	0x200010ce
 80006f0:	200010de 	.word	0x200010de
 80006f4:	200010cf 	.word	0x200010cf
 80006f8:	200010d1 	.word	0x200010d1
 80006fc:	200010df 	.word	0x200010df
 8000700:	200010d2 	.word	0x200010d2
 8000704:	200010d3 	.word	0x200010d3
 8000708:	200010d4 	.word	0x200010d4
 800070c:	200010d5 	.word	0x200010d5
 8000710:	200010d6 	.word	0x200010d6
 8000714:	200010d7 	.word	0x200010d7
 8000718:	200010d8 	.word	0x200010d8
 800071c:	200010d9 	.word	0x200010d9
 8000720:	200010da 	.word	0x200010da
 8000724:	200010db 	.word	0x200010db
 8000728:	200010dc 	.word	0x200010dc
 800072c:	200010e0 	.word	0x200010e0
 8000730:	200010e2 	.word	0x200010e2
 8000734:	200010e4 	.word	0x200010e4
 8000738:	200010e5 	.word	0x200010e5
 800073c:	200010e3 	.word	0x200010e3

08000740 <convertArrays>:

void convertArrays(int state) {
 8000740:	b480      	push	{r7}
 8000742:	b08b      	sub	sp, #44	@ 0x2c
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d11d      	bne.n	800078a <convertArrays+0x4a>
		int eepromVal = idStartPos;
 800074e:	4b34      	ldr	r3, [pc, #208]	@ (8000820 <convertArrays+0xe0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
 8000758:	e013      	b.n	8000782 <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 800075a:	4a32      	ldr	r2, [pc, #200]	@ (8000824 <convertArrays+0xe4>)
 800075c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 8000764:	4a30      	ldr	r2, [pc, #192]	@ (8000828 <convertArrays+0xe8>)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	7819      	ldrb	r1, [r3, #0]
 800076c:	4a2f      	ldr	r2, [pc, #188]	@ (800082c <convertArrays+0xec>)
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	4413      	add	r3, r2
 8000772:	460a      	mov	r2, r1
 8000774:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 8000776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000778:	3301      	adds	r3, #1
 800077a:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	3301      	adds	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
 8000782:	6a3b      	ldr	r3, [r7, #32]
 8000784:	2b0b      	cmp	r3, #11
 8000786:	dde8      	ble.n	800075a <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000788:	e045      	b.n	8000816 <convertArrays+0xd6>
	} else if(state == 2) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d121      	bne.n	80007d4 <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 8000790:	4b27      	ldr	r3, [pc, #156]	@ (8000830 <convertArrays+0xf0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	e017      	b.n	80007cc <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 800079c:	4a21      	ldr	r2, [pc, #132]	@ (8000824 <convertArrays+0xe4>)
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	4413      	add	r3, r2
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00e      	beq.n	80007c6 <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007a8:	4a1e      	ldr	r2, [pc, #120]	@ (8000824 <convertArrays+0xe4>)
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <convertArrays+0xf4>)
 80007b4:	5c99      	ldrb	r1, [r3, r2]
 80007b6:	4a20      	ldr	r2, [pc, #128]	@ (8000838 <convertArrays+0xf8>)
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	4413      	add	r3, r2
 80007bc:	460a      	mov	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	3301      	adds	r3, #1
 80007c4:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	3301      	adds	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	2b13      	cmp	r3, #19
 80007d0:	dde4      	ble.n	800079c <convertArrays+0x5c>
}
 80007d2:	e020      	b.n	8000816 <convertArrays+0xd6>
		int eepromVal = passStartPos;
 80007d4:	4b19      	ldr	r3, [pc, #100]	@ (800083c <convertArrays+0xfc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	e017      	b.n	8000810 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 80007e0:	4a10      	ldr	r2, [pc, #64]	@ (8000824 <convertArrays+0xe4>)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d00e      	beq.n	800080a <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80007ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000824 <convertArrays+0xe4>)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <convertArrays+0xf4>)
 80007f8:	5c99      	ldrb	r1, [r3, r2]
 80007fa:	4a11      	ldr	r2, [pc, #68]	@ (8000840 <convertArrays+0x100>)
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	4413      	add	r3, r2
 8000800:	460a      	mov	r2, r1
 8000802:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	3301      	adds	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	2b13      	cmp	r3, #19
 8000814:	dde4      	ble.n	80007e0 <convertArrays+0xa0>
}
 8000816:	bf00      	nop
 8000818:	372c      	adds	r7, #44	@ 0x2c
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000004 	.word	0x20000004
 8000824:	20000ff0 	.word	0x20000ff0
 8000828:	20000010 	.word	0x20000010
 800082c:	20001068 	.word	0x20001068
 8000830:	20000008 	.word	0x20000008
 8000834:	2000001c 	.word	0x2000001c
 8000838:	20001074 	.word	0x20001074
 800083c:	2000000c 	.word	0x2000000c
 8000840:	20001088 	.word	0x20001088

08000844 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800084a:	af04      	add	r7, sp, #16
 800084c:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 8000850:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8000854:	6020      	str	r0, [r4, #0]
 8000856:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 800085a:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 800085e:	6001      	str	r1, [r0, #0]
 8000860:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8000864:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8000868:	600a      	str	r2, [r1, #0]
 800086a:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800086e:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8000872:	6013      	str	r3, [r2, #0]
	char local_txA[500];
	char local_txB[50];
	int len;

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 8000874:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000878:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800087c:	f107 0014 	add.w	r0, r7, #20
 8000880:	220c      	movs	r2, #12
 8000882:	6819      	ldr	r1, [r3, #0]
 8000884:	f00c fcbd 	bl	800d202 <strncpy>
	subMachineID[12] = '\0';
 8000888:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800088c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8000890:	2200      	movs	r2, #0
 8000892:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000894:	4a35      	ldr	r2, [pc, #212]	@ (800096c <sendMachineData+0x128>)
 8000896:	4936      	ldr	r1, [pc, #216]	@ (8000970 <sendMachineData+0x12c>)
 8000898:	4836      	ldr	r0, [pc, #216]	@ (8000974 <sendMachineData+0x130>)
 800089a:	f00c fc41 	bl	800d120 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800089e:	4835      	ldr	r0, [pc, #212]	@ (8000974 <sendMachineData+0x130>)
 80008a0:	f7ff fcc0 	bl	8000224 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80008ac:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80008b0:	4930      	ldr	r1, [pc, #192]	@ (8000974 <sendMachineData+0x130>)
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	f00b fe4c 	bl	800c550 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 80008b8:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80008bc:	f008 fd7c 	bl	80093b8 <HAL_Delay>

	sprintf(local_txA,
 80008c0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80008c4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80008c8:	f107 0114 	add.w	r1, r7, #20
 80008cc:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80008d0:	4a29      	ldr	r2, [pc, #164]	@ (8000978 <sendMachineData+0x134>)
 80008d2:	9202      	str	r2, [sp, #8]
 80008d4:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 80008d8:	9201      	str	r2, [sp, #4]
 80008da:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80008de:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 80008e2:	6812      	ldr	r2, [r2, #0]
 80008e4:	9200      	str	r2, [sp, #0]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	460a      	mov	r2, r1
 80008ea:	4924      	ldr	r1, [pc, #144]	@ (800097c <sendMachineData+0x138>)
 80008ec:	f00c fc18 	bl	800d120 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 80008f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fc95 	bl	8000224 <strlen>
 80008fa:	4603      	mov	r3, r0
 80008fc:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000904:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8000908:	491d      	ldr	r1, [pc, #116]	@ (8000980 <sendMachineData+0x13c>)
 800090a:	4618      	mov	r0, r3
 800090c:	f00c fc08 	bl	800d120 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fc85 	bl	8000224 <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	b29a      	uxth	r2, r3
 800091e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000922:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000926:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800092a:	6818      	ldr	r0, [r3, #0]
 800092c:	f00b fe10 	bl	800c550 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000930:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000934:	f008 fd40 	bl	80093b8 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000938:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fc71 	bl	8000224 <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	b29a      	uxth	r2, r3
 8000946:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800094a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800094e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000952:	6818      	ldr	r0, [r3, #0]
 8000954:	f00b fdfc 	bl	800c550 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000958:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800095c:	f008 fd2c 	bl	80093b8 <HAL_Delay>
}
 8000960:	bf00      	nop
 8000962:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8000966:	46bd      	mov	sp, r7
 8000968:	bd90      	pop	{r4, r7, pc}
 800096a:	bf00      	nop
 800096c:	0800da64 	.word	0x0800da64
 8000970:	0800da74 	.word	0x0800da74
 8000974:	20001128 	.word	0x20001128
 8000978:	0800db08 	.word	0x0800db08
 800097c:	0800da94 	.word	0x0800da94
 8000980:	0800db1c 	.word	0x0800db1c

08000984 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b089      	sub	sp, #36	@ 0x24
 8000988:	af04      	add	r7, sp, #16
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 800098e:	4b25      	ldr	r3, [pc, #148]	@ (8000a24 <hata2EEPROM+0xa0>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	1e5a      	subs	r2, r3, #1
 8000994:	4b24      	ldr	r3, [pc, #144]	@ (8000a28 <hata2EEPROM+0xa4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4413      	add	r3, r2
 800099a:	4a24      	ldr	r2, [pc, #144]	@ (8000a2c <hata2EEPROM+0xa8>)
 800099c:	5cd3      	ldrb	r3, [r2, r3]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80009a2:	f000 f8d1 	bl	8000b48 <eepromDataFillWithEmpty>
		goto veriEkleme;
 80009a6:	e000      	b.n	80009aa <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80009a8:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	e012      	b.n	80009d6 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a2c <hata2EEPROM+0xa8>)
 80009ba:	5cd3      	ldrb	r3, [r2, r3]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d107      	bne.n	80009d0 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80009c0:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4413      	add	r3, r2
 80009c8:	4918      	ldr	r1, [pc, #96]	@ (8000a2c <hata2EEPROM+0xa8>)
 80009ca:	79fa      	ldrb	r2, [r7, #7]
 80009cc:	54ca      	strb	r2, [r1, r3]
					break;
 80009ce:	e007      	b.n	80009e0 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3301      	adds	r3, #1
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <hata2EEPROM+0xa0>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	429a      	cmp	r2, r3
 80009de:	dbe7      	blt.n	80009b0 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	b299      	uxth	r1, r3
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <hata2EEPROM+0xa0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	b298      	uxth	r0, r3
 80009ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <hata2EEPROM+0xa8>)
 80009f2:	4413      	add	r3, r2
 80009f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000a24 <hata2EEPROM+0xa0>)
 80009f6:	6812      	ldr	r2, [r2, #0]
 80009f8:	b292      	uxth	r2, r2
 80009fa:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 80009fe:	9402      	str	r4, [sp, #8]
 8000a00:	9201      	str	r2, [sp, #4]
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4603      	mov	r3, r0
 8000a06:	460a      	mov	r2, r1
 8000a08:	21a0      	movs	r1, #160	@ 0xa0
 8000a0a:	4809      	ldr	r0, [pc, #36]	@ (8000a30 <hata2EEPROM+0xac>)
 8000a0c:	f009 fd5e 	bl	800a4cc <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000a10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a14:	f008 fcd0 	bl	80093b8 <HAL_Delay>
	eepromKontrol();
 8000a18:	f7ff fc0c 	bl	8000234 <eepromKontrol>
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd90      	pop	{r4, r7, pc}
 8000a24:	20000098 	.word	0x20000098
 8000a28:	2000009c 	.word	0x2000009c
 8000a2c:	20000ff0 	.word	0x20000ff0
 8000a30:	20001940 	.word	0x20001940

08000a34 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d10f      	bne.n	8000a64 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000a44:	4a38      	ldr	r2, [pc, #224]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000a46:	2101      	movs	r1, #1
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f007 ff5b 	bl	8008904 <lcd_print>
		lcd_print(2, 1, "1");
 8000a4e:	4a37      	ldr	r2, [pc, #220]	@ (8000b2c <hataKoduLcdGoster+0xf8>)
 8000a50:	2101      	movs	r1, #1
 8000a52:	2002      	movs	r0, #2
 8000a54:	f007 ff56 	bl	8008904 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a58:	4a35      	ldr	r2, [pc, #212]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000a5a:	2107      	movs	r1, #7
 8000a5c:	2002      	movs	r0, #2
 8000a5e:	f007 ff51 	bl	8008904 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000a62:	e05d      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d10f      	bne.n	8000a8a <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 8000a6a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f007 ff48 	bl	8008904 <lcd_print>
		lcd_print(2, 2, "2");
 8000a74:	4a2f      	ldr	r2, [pc, #188]	@ (8000b34 <hataKoduLcdGoster+0x100>)
 8000a76:	2102      	movs	r1, #2
 8000a78:	2002      	movs	r0, #2
 8000a7a:	f007 ff43 	bl	8008904 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000a80:	2107      	movs	r1, #7
 8000a82:	2002      	movs	r0, #2
 8000a84:	f007 ff3e 	bl	8008904 <lcd_print>
}
 8000a88:	e04a      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	d10f      	bne.n	8000ab0 <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000a90:	4a25      	ldr	r2, [pc, #148]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000a92:	2101      	movs	r1, #1
 8000a94:	2001      	movs	r0, #1
 8000a96:	f007 ff35 	bl	8008904 <lcd_print>
		lcd_print(2, 3, "3");
 8000a9a:	4a27      	ldr	r2, [pc, #156]	@ (8000b38 <hataKoduLcdGoster+0x104>)
 8000a9c:	2103      	movs	r1, #3
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f007 ff30 	bl	8008904 <lcd_print>
		lcd_print(2, 7, "          ");
 8000aa4:	4a22      	ldr	r2, [pc, #136]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000aa6:	2107      	movs	r1, #7
 8000aa8:	2002      	movs	r0, #2
 8000aaa:	f007 ff2b 	bl	8008904 <lcd_print>
}
 8000aae:	e037      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	d10f      	bne.n	8000ad6 <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000ab8:	2101      	movs	r1, #1
 8000aba:	2001      	movs	r0, #1
 8000abc:	f007 ff22 	bl	8008904 <lcd_print>
		lcd_print(2, 4, "4");
 8000ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8000b3c <hataKoduLcdGoster+0x108>)
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f007 ff1d 	bl	8008904 <lcd_print>
		lcd_print(2, 7, "          ");
 8000aca:	4a19      	ldr	r2, [pc, #100]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000acc:	2107      	movs	r1, #7
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f007 ff18 	bl	8008904 <lcd_print>
}
 8000ad4:	e024      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b05      	cmp	r3, #5
 8000ada:	d10f      	bne.n	8000afc <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8000adc:	4a12      	ldr	r2, [pc, #72]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f007 ff0f 	bl	8008904 <lcd_print>
		lcd_print(2, 5, "5");
 8000ae6:	4a16      	ldr	r2, [pc, #88]	@ (8000b40 <hataKoduLcdGoster+0x10c>)
 8000ae8:	2105      	movs	r1, #5
 8000aea:	2002      	movs	r0, #2
 8000aec:	f007 ff0a 	bl	8008904 <lcd_print>
		lcd_print(2, 7, "          ");
 8000af0:	4a0f      	ldr	r2, [pc, #60]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000af2:	2107      	movs	r1, #7
 8000af4:	2002      	movs	r0, #2
 8000af6:	f007 ff05 	bl	8008904 <lcd_print>
}
 8000afa:	e011      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	2b06      	cmp	r3, #6
 8000b00:	d10e      	bne.n	8000b20 <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8000b02:	4a09      	ldr	r2, [pc, #36]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000b04:	2101      	movs	r1, #1
 8000b06:	2001      	movs	r0, #1
 8000b08:	f007 fefc 	bl	8008904 <lcd_print>
		lcd_print(2, 6, "6");
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <hataKoduLcdGoster+0x110>)
 8000b0e:	2106      	movs	r1, #6
 8000b10:	2002      	movs	r0, #2
 8000b12:	f007 fef7 	bl	8008904 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b16:	4a06      	ldr	r2, [pc, #24]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000b18:	2107      	movs	r1, #7
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f007 fef2 	bl	8008904 <lcd_print>
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200018b4 	.word	0x200018b4
 8000b2c:	0800db90 	.word	0x0800db90
 8000b30:	0800db94 	.word	0x0800db94
 8000b34:	0800dba0 	.word	0x0800dba0
 8000b38:	0800dba4 	.word	0x0800dba4
 8000b3c:	0800dba8 	.word	0x0800dba8
 8000b40:	0800dbac 	.word	0x0800dbac
 8000b44:	0800dbb0 	.word	0x0800dbb0

08000b48 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	e009      	b.n	8000b68 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000b54:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <eepromDataFillWithEmpty+0x38>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5c:	4a09      	ldr	r2, [pc, #36]	@ (8000b84 <eepromDataFillWithEmpty+0x3c>)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3301      	adds	r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <eepromDataFillWithEmpty+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	dbf0      	blt.n	8000b54 <eepromDataFillWithEmpty+0xc>
	}
}
 8000b72:	bf00      	nop
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000070 	.word	0x20000070
 8000b84:	20000ff0 	.word	0x20000ff0
 8000b88:	20000098 	.word	0x20000098

08000b8c <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000b92:	463b      	mov	r3, r7
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000b9e:	4b50      	ldr	r3, [pc, #320]	@ (8000ce0 <i2cTest+0x154>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b4e      	ldr	r3, [pc, #312]	@ (8000ce0 <i2cTest+0x154>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0201 	bic.w	r2, r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000bae:	484c      	ldr	r0, [pc, #304]	@ (8000ce0 <i2cTest+0x154>)
 8000bb0:	f009 fb5e 	bl	800a270 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bb4:	23c0      	movs	r3, #192	@ 0xc0
 8000bb6:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000bb8:	2311      	movs	r3, #17
 8000bba:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4846      	ldr	r0, [pc, #280]	@ (8000ce4 <i2cTest+0x158>)
 8000bca:	f008 ff65 	bl	8009a98 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2140      	movs	r1, #64	@ 0x40
 8000bd2:	4844      	ldr	r0, [pc, #272]	@ (8000ce4 <i2cTest+0x158>)
 8000bd4:	f009 f9d7 	bl	8009f86 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2180      	movs	r1, #128	@ 0x80
 8000bdc:	4841      	ldr	r0, [pc, #260]	@ (8000ce4 <i2cTest+0x158>)
 8000bde:	f009 f9d2 	bl	8009f86 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000be2:	200a      	movs	r0, #10
 8000be4:	f008 fbe8 	bl	80093b8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000be8:	bf00      	nop
 8000bea:	2140      	movs	r1, #64	@ 0x40
 8000bec:	483d      	ldr	r0, [pc, #244]	@ (8000ce4 <i2cTest+0x158>)
 8000bee:	f009 f9b3 	bl	8009f58 <HAL_GPIO_ReadPin>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d006      	beq.n	8000c06 <i2cTest+0x7a>
 8000bf8:	2180      	movs	r1, #128	@ 0x80
 8000bfa:	483a      	ldr	r0, [pc, #232]	@ (8000ce4 <i2cTest+0x158>)
 8000bfc:	f009 f9ac 	bl	8009f58 <HAL_GPIO_ReadPin>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d1f1      	bne.n	8000bea <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2180      	movs	r1, #128	@ 0x80
 8000c0a:	4836      	ldr	r0, [pc, #216]	@ (8000ce4 <i2cTest+0x158>)
 8000c0c:	f009 f9bb 	bl	8009f86 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000c10:	200a      	movs	r0, #10
 8000c12:	f008 fbd1 	bl	80093b8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000c16:	bf00      	nop
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	4832      	ldr	r0, [pc, #200]	@ (8000ce4 <i2cTest+0x158>)
 8000c1c:	f009 f99c 	bl	8009f58 <HAL_GPIO_ReadPin>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d0f8      	beq.n	8000c18 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2140      	movs	r1, #64	@ 0x40
 8000c2a:	482e      	ldr	r0, [pc, #184]	@ (8000ce4 <i2cTest+0x158>)
 8000c2c:	f009 f9ab 	bl	8009f86 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c30:	200a      	movs	r0, #10
 8000c32:	f008 fbc1 	bl	80093b8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000c36:	bf00      	nop
 8000c38:	2140      	movs	r1, #64	@ 0x40
 8000c3a:	482a      	ldr	r0, [pc, #168]	@ (8000ce4 <i2cTest+0x158>)
 8000c3c:	f009 f98c 	bl	8009f58 <HAL_GPIO_ReadPin>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d0f8      	beq.n	8000c38 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	2140      	movs	r1, #64	@ 0x40
 8000c4a:	4826      	ldr	r0, [pc, #152]	@ (8000ce4 <i2cTest+0x158>)
 8000c4c:	f009 f99b 	bl	8009f86 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c50:	200a      	movs	r0, #10
 8000c52:	f008 fbb1 	bl	80093b8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000c56:	bf00      	nop
 8000c58:	2140      	movs	r1, #64	@ 0x40
 8000c5a:	4822      	ldr	r0, [pc, #136]	@ (8000ce4 <i2cTest+0x158>)
 8000c5c:	f009 f97c 	bl	8009f58 <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d1f8      	bne.n	8000c58 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	2180      	movs	r1, #128	@ 0x80
 8000c6a:	481e      	ldr	r0, [pc, #120]	@ (8000ce4 <i2cTest+0x158>)
 8000c6c:	f009 f98b 	bl	8009f86 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c70:	200a      	movs	r0, #10
 8000c72:	f008 fba1 	bl	80093b8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000c76:	bf00      	nop
 8000c78:	2180      	movs	r1, #128	@ 0x80
 8000c7a:	481a      	ldr	r0, [pc, #104]	@ (8000ce4 <i2cTest+0x158>)
 8000c7c:	f009 f96c 	bl	8009f58 <HAL_GPIO_ReadPin>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d1f8      	bne.n	8000c78 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c86:	23c0      	movs	r3, #192	@ 0xc0
 8000c88:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000c8a:	2312      	movs	r3, #18
 8000c8c:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000c96:	463b      	mov	r3, r7
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4812      	ldr	r0, [pc, #72]	@ (8000ce4 <i2cTest+0x158>)
 8000c9c:	f008 fefc 	bl	8009a98 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <i2cTest+0x154>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <i2cTest+0x154>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000cae:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <i2cTest+0x154>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <i2cTest+0x154>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000cbe:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <i2cTest+0x154>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <i2cTest+0x154>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f042 0201 	orr.w	r2, r2, #1
 8000cce:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000cd0:	4803      	ldr	r0, [pc, #12]	@ (8000ce0 <i2cTest+0x154>)
 8000cd2:	f009 f989 	bl	8009fe8 <HAL_I2C_Init>
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20001940 	.word	0x20001940
 8000ce4:	40010c00 	.word	0x40010c00

08000ce8 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000cf2:	20c8      	movs	r0, #200	@ 0xc8
 8000cf4:	f008 fb60 	bl	80093b8 <HAL_Delay>
	lcd_clear();
 8000cf8:	f007 fe30 	bl	800895c <lcd_clear>
	if(type == 1 && page == 0) {
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d13e      	bne.n	8000d80 <printTemplate+0x98>
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d13b      	bne.n	8000d80 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8000d08:	4a9a      	ldr	r2, [pc, #616]	@ (8000f74 <printTemplate+0x28c>)
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f007 fdf9 	bl	8008904 <lcd_print>
		lcd_print(2, 3, "0");
 8000d12:	4a99      	ldr	r2, [pc, #612]	@ (8000f78 <printTemplate+0x290>)
 8000d14:	2103      	movs	r1, #3
 8000d16:	2002      	movs	r0, #2
 8000d18:	f007 fdf4 	bl	8008904 <lcd_print>
		lcd_print(2, 4, "1");
 8000d1c:	4a97      	ldr	r2, [pc, #604]	@ (8000f7c <printTemplate+0x294>)
 8000d1e:	2104      	movs	r1, #4
 8000d20:	2002      	movs	r0, #2
 8000d22:	f007 fdef 	bl	8008904 <lcd_print>
		lcd_print(2, 5, "2");
 8000d26:	4a96      	ldr	r2, [pc, #600]	@ (8000f80 <printTemplate+0x298>)
 8000d28:	2105      	movs	r1, #5
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	f007 fdea 	bl	8008904 <lcd_print>
		lcd_print(2, 6, "3");
 8000d30:	4a94      	ldr	r2, [pc, #592]	@ (8000f84 <printTemplate+0x29c>)
 8000d32:	2106      	movs	r1, #6
 8000d34:	2002      	movs	r0, #2
 8000d36:	f007 fde5 	bl	8008904 <lcd_print>
		lcd_print(2, 7, "4");
 8000d3a:	4a93      	ldr	r2, [pc, #588]	@ (8000f88 <printTemplate+0x2a0>)
 8000d3c:	2107      	movs	r1, #7
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f007 fde0 	bl	8008904 <lcd_print>
		lcd_print(2, 10, "5");
 8000d44:	4a91      	ldr	r2, [pc, #580]	@ (8000f8c <printTemplate+0x2a4>)
 8000d46:	210a      	movs	r1, #10
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f007 fddb 	bl	8008904 <lcd_print>
		lcd_print(2, 11, "6");
 8000d4e:	4a90      	ldr	r2, [pc, #576]	@ (8000f90 <printTemplate+0x2a8>)
 8000d50:	210b      	movs	r1, #11
 8000d52:	2002      	movs	r0, #2
 8000d54:	f007 fdd6 	bl	8008904 <lcd_print>
		lcd_print(2, 12, "7");
 8000d58:	4a8e      	ldr	r2, [pc, #568]	@ (8000f94 <printTemplate+0x2ac>)
 8000d5a:	210c      	movs	r1, #12
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f007 fdd1 	bl	8008904 <lcd_print>
		lcd_print(2, 13, "8");
 8000d62:	4a8d      	ldr	r2, [pc, #564]	@ (8000f98 <printTemplate+0x2b0>)
 8000d64:	210d      	movs	r1, #13
 8000d66:	2002      	movs	r0, #2
 8000d68:	f007 fdcc 	bl	8008904 <lcd_print>
		lcd_print(2, 14, "9");
 8000d6c:	4a8b      	ldr	r2, [pc, #556]	@ (8000f9c <printTemplate+0x2b4>)
 8000d6e:	210e      	movs	r1, #14
 8000d70:	2002      	movs	r0, #2
 8000d72:	f007 fdc7 	bl	8008904 <lcd_print>
		lcd_gotoxy(2, 3);
 8000d76:	2103      	movs	r1, #3
 8000d78:	2002      	movs	r0, #2
 8000d7a:	f007 fda4 	bl	80088c6 <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 8000d7e:	e0f5      	b.n	8000f6c <printTemplate+0x284>
	} else if(type == 2) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d178      	bne.n	8000e78 <printTemplate+0x190>
		if(page == 1) {
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d114      	bne.n	8000db6 <printTemplate+0xce>
			lcd_clear();
 8000d8c:	f007 fde6 	bl	800895c <lcd_clear>
			HAL_Delay(100);
 8000d90:	2064      	movs	r0, #100	@ 0x64
 8000d92:	f008 fb11 	bl	80093b8 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000d96:	4a82      	ldr	r2, [pc, #520]	@ (8000fa0 <printTemplate+0x2b8>)
 8000d98:	2101      	movs	r1, #1
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f007 fdb2 	bl	8008904 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000da0:	4a80      	ldr	r2, [pc, #512]	@ (8000fa4 <printTemplate+0x2bc>)
 8000da2:	2107      	movs	r1, #7
 8000da4:	2001      	movs	r0, #1
 8000da6:	f007 fdad 	bl	8008904 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000daa:	4a7f      	ldr	r2, [pc, #508]	@ (8000fa8 <printTemplate+0x2c0>)
 8000dac:	2101      	movs	r1, #1
 8000dae:	2002      	movs	r0, #2
 8000db0:	f007 fda8 	bl	8008904 <lcd_print>
}
 8000db4:	e0da      	b.n	8000f6c <printTemplate+0x284>
		} else if(page == 2) {
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d114      	bne.n	8000de6 <printTemplate+0xfe>
			lcd_clear();
 8000dbc:	f007 fdce 	bl	800895c <lcd_clear>
			HAL_Delay(100);
 8000dc0:	2064      	movs	r0, #100	@ 0x64
 8000dc2:	f008 faf9 	bl	80093b8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000dc6:	4a79      	ldr	r2, [pc, #484]	@ (8000fac <printTemplate+0x2c4>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f007 fd9a 	bl	8008904 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000dd0:	4a74      	ldr	r2, [pc, #464]	@ (8000fa4 <printTemplate+0x2bc>)
 8000dd2:	2107      	movs	r1, #7
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f007 fd95 	bl	8008904 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000dda:	4a75      	ldr	r2, [pc, #468]	@ (8000fb0 <printTemplate+0x2c8>)
 8000ddc:	2101      	movs	r1, #1
 8000dde:	2002      	movs	r0, #2
 8000de0:	f007 fd90 	bl	8008904 <lcd_print>
}
 8000de4:	e0c2      	b.n	8000f6c <printTemplate+0x284>
		} else if(page == 3) {
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d114      	bne.n	8000e16 <printTemplate+0x12e>
			lcd_clear();
 8000dec:	f007 fdb6 	bl	800895c <lcd_clear>
			HAL_Delay(100);
 8000df0:	2064      	movs	r0, #100	@ 0x64
 8000df2:	f008 fae1 	bl	80093b8 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000df6:	4a6a      	ldr	r2, [pc, #424]	@ (8000fa0 <printTemplate+0x2b8>)
 8000df8:	2101      	movs	r1, #1
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f007 fd82 	bl	8008904 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e00:	4a68      	ldr	r2, [pc, #416]	@ (8000fa4 <printTemplate+0x2bc>)
 8000e02:	2107      	movs	r1, #7
 8000e04:	2001      	movs	r0, #1
 8000e06:	f007 fd7d 	bl	8008904 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000e0a:	4a6a      	ldr	r2, [pc, #424]	@ (8000fb4 <printTemplate+0x2cc>)
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f007 fd78 	bl	8008904 <lcd_print>
}
 8000e14:	e0aa      	b.n	8000f6c <printTemplate+0x284>
		} else if(page == 4) {
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	2b04      	cmp	r3, #4
 8000e1a:	d114      	bne.n	8000e46 <printTemplate+0x15e>
			lcd_clear();
 8000e1c:	f007 fd9e 	bl	800895c <lcd_clear>
			HAL_Delay(100);
 8000e20:	2064      	movs	r0, #100	@ 0x64
 8000e22:	f008 fac9 	bl	80093b8 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000e26:	4a5e      	ldr	r2, [pc, #376]	@ (8000fa0 <printTemplate+0x2b8>)
 8000e28:	2101      	movs	r1, #1
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f007 fd6a 	bl	8008904 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e30:	4a5c      	ldr	r2, [pc, #368]	@ (8000fa4 <printTemplate+0x2bc>)
 8000e32:	2107      	movs	r1, #7
 8000e34:	2001      	movs	r0, #1
 8000e36:	f007 fd65 	bl	8008904 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000e3a:	4a5f      	ldr	r2, [pc, #380]	@ (8000fb8 <printTemplate+0x2d0>)
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	2002      	movs	r0, #2
 8000e40:	f007 fd60 	bl	8008904 <lcd_print>
}
 8000e44:	e092      	b.n	8000f6c <printTemplate+0x284>
		} else if(page == 5) {
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	2b05      	cmp	r3, #5
 8000e4a:	f040 808f 	bne.w	8000f6c <printTemplate+0x284>
			lcd_clear();
 8000e4e:	f007 fd85 	bl	800895c <lcd_clear>
			HAL_Delay(100);
 8000e52:	2064      	movs	r0, #100	@ 0x64
 8000e54:	f008 fab0 	bl	80093b8 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000e58:	4a51      	ldr	r2, [pc, #324]	@ (8000fa0 <printTemplate+0x2b8>)
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	f007 fd51 	bl	8008904 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e62:	4a50      	ldr	r2, [pc, #320]	@ (8000fa4 <printTemplate+0x2bc>)
 8000e64:	2107      	movs	r1, #7
 8000e66:	2001      	movs	r0, #1
 8000e68:	f007 fd4c 	bl	8008904 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000e6c:	4a53      	ldr	r2, [pc, #332]	@ (8000fbc <printTemplate+0x2d4>)
 8000e6e:	2101      	movs	r1, #1
 8000e70:	2002      	movs	r0, #2
 8000e72:	f007 fd47 	bl	8008904 <lcd_print>
}
 8000e76:	e079      	b.n	8000f6c <printTemplate+0x284>
	} else if(type == 3) {
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b03      	cmp	r3, #3
 8000e7c:	d176      	bne.n	8000f6c <printTemplate+0x284>
		if(page == 1) {
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d114      	bne.n	8000eae <printTemplate+0x1c6>
			lcd_clear();
 8000e84:	f007 fd6a 	bl	800895c <lcd_clear>
			HAL_Delay(100);
 8000e88:	2064      	movs	r0, #100	@ 0x64
 8000e8a:	f008 fa95 	bl	80093b8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000e8e:	4a4c      	ldr	r2, [pc, #304]	@ (8000fc0 <printTemplate+0x2d8>)
 8000e90:	2101      	movs	r1, #1
 8000e92:	2001      	movs	r0, #1
 8000e94:	f007 fd36 	bl	8008904 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000e98:	4a4a      	ldr	r2, [pc, #296]	@ (8000fc4 <printTemplate+0x2dc>)
 8000e9a:	2107      	movs	r1, #7
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	f007 fd31 	bl	8008904 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000ea2:	4a41      	ldr	r2, [pc, #260]	@ (8000fa8 <printTemplate+0x2c0>)
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	2002      	movs	r0, #2
 8000ea8:	f007 fd2c 	bl	8008904 <lcd_print>
}
 8000eac:	e05e      	b.n	8000f6c <printTemplate+0x284>
		} else if(page == 2) {
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d114      	bne.n	8000ede <printTemplate+0x1f6>
			lcd_clear();
 8000eb4:	f007 fd52 	bl	800895c <lcd_clear>
			HAL_Delay(100);
 8000eb8:	2064      	movs	r0, #100	@ 0x64
 8000eba:	f008 fa7d 	bl	80093b8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000ebe:	4a40      	ldr	r2, [pc, #256]	@ (8000fc0 <printTemplate+0x2d8>)
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	f007 fd1e 	bl	8008904 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000ec8:	4a3e      	ldr	r2, [pc, #248]	@ (8000fc4 <printTemplate+0x2dc>)
 8000eca:	2107      	movs	r1, #7
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f007 fd19 	bl	8008904 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000ed2:	4a37      	ldr	r2, [pc, #220]	@ (8000fb0 <printTemplate+0x2c8>)
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f007 fd14 	bl	8008904 <lcd_print>
}
 8000edc:	e046      	b.n	8000f6c <printTemplate+0x284>
		} else if(page == 3) {
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	2b03      	cmp	r3, #3
 8000ee2:	d114      	bne.n	8000f0e <printTemplate+0x226>
			lcd_clear();
 8000ee4:	f007 fd3a 	bl	800895c <lcd_clear>
			HAL_Delay(100);
 8000ee8:	2064      	movs	r0, #100	@ 0x64
 8000eea:	f008 fa65 	bl	80093b8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000eee:	4a34      	ldr	r2, [pc, #208]	@ (8000fc0 <printTemplate+0x2d8>)
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f007 fd06 	bl	8008904 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000ef8:	4a32      	ldr	r2, [pc, #200]	@ (8000fc4 <printTemplate+0x2dc>)
 8000efa:	2107      	movs	r1, #7
 8000efc:	2001      	movs	r0, #1
 8000efe:	f007 fd01 	bl	8008904 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000f02:	4a2c      	ldr	r2, [pc, #176]	@ (8000fb4 <printTemplate+0x2cc>)
 8000f04:	2101      	movs	r1, #1
 8000f06:	2002      	movs	r0, #2
 8000f08:	f007 fcfc 	bl	8008904 <lcd_print>
}
 8000f0c:	e02e      	b.n	8000f6c <printTemplate+0x284>
		} else if(page == 4) {
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	2b04      	cmp	r3, #4
 8000f12:	d114      	bne.n	8000f3e <printTemplate+0x256>
			lcd_clear();
 8000f14:	f007 fd22 	bl	800895c <lcd_clear>
			HAL_Delay(100);
 8000f18:	2064      	movs	r0, #100	@ 0x64
 8000f1a:	f008 fa4d 	bl	80093b8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000f1e:	4a28      	ldr	r2, [pc, #160]	@ (8000fc0 <printTemplate+0x2d8>)
 8000f20:	2101      	movs	r1, #1
 8000f22:	2001      	movs	r0, #1
 8000f24:	f007 fcee 	bl	8008904 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f28:	4a26      	ldr	r2, [pc, #152]	@ (8000fc4 <printTemplate+0x2dc>)
 8000f2a:	2107      	movs	r1, #7
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f007 fce9 	bl	8008904 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000f32:	4a21      	ldr	r2, [pc, #132]	@ (8000fb8 <printTemplate+0x2d0>)
 8000f34:	2101      	movs	r1, #1
 8000f36:	2002      	movs	r0, #2
 8000f38:	f007 fce4 	bl	8008904 <lcd_print>
}
 8000f3c:	e016      	b.n	8000f6c <printTemplate+0x284>
		} else if(page == 5) {
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	2b05      	cmp	r3, #5
 8000f42:	d113      	bne.n	8000f6c <printTemplate+0x284>
			lcd_clear();
 8000f44:	f007 fd0a 	bl	800895c <lcd_clear>
			HAL_Delay(100);
 8000f48:	2064      	movs	r0, #100	@ 0x64
 8000f4a:	f008 fa35 	bl	80093b8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc0 <printTemplate+0x2d8>)
 8000f50:	2101      	movs	r1, #1
 8000f52:	2001      	movs	r0, #1
 8000f54:	f007 fcd6 	bl	8008904 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f58:	4a1a      	ldr	r2, [pc, #104]	@ (8000fc4 <printTemplate+0x2dc>)
 8000f5a:	2107      	movs	r1, #7
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f007 fcd1 	bl	8008904 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000f62:	4a16      	ldr	r2, [pc, #88]	@ (8000fbc <printTemplate+0x2d4>)
 8000f64:	2101      	movs	r1, #1
 8000f66:	2002      	movs	r0, #2
 8000f68:	f007 fccc 	bl	8008904 <lcd_print>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	0800dbb4 	.word	0x0800dbb4
 8000f78:	0800dbbc 	.word	0x0800dbbc
 8000f7c:	0800dbc0 	.word	0x0800dbc0
 8000f80:	0800dbc4 	.word	0x0800dbc4
 8000f84:	0800dbc8 	.word	0x0800dbc8
 8000f88:	0800dbcc 	.word	0x0800dbcc
 8000f8c:	0800dbd0 	.word	0x0800dbd0
 8000f90:	0800dbd4 	.word	0x0800dbd4
 8000f94:	0800dbd8 	.word	0x0800dbd8
 8000f98:	0800dbdc 	.word	0x0800dbdc
 8000f9c:	0800dbe0 	.word	0x0800dbe0
 8000fa0:	0800dbe4 	.word	0x0800dbe4
 8000fa4:	20001074 	.word	0x20001074
 8000fa8:	0800dbf8 	.word	0x0800dbf8
 8000fac:	0800dc0c 	.word	0x0800dc0c
 8000fb0:	0800dc14 	.word	0x0800dc14
 8000fb4:	0800dc28 	.word	0x0800dc28
 8000fb8:	0800dc3c 	.word	0x0800dc3c
 8000fbc:	0800dc50 	.word	0x0800dc50
 8000fc0:	0800dc64 	.word	0x0800dc64
 8000fc4:	20001088 	.word	0x20001088

08000fc8 <checkSlideVal>:

int checkSlideVal(int state) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d111      	bne.n	8000ffa <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	4813      	ldr	r0, [pc, #76]	@ (8001028 <checkSlideVal+0x60>)
 8000fda:	f008 ffbd 	bl	8009f58 <HAL_GPIO_ReadPin>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d101      	bne.n	8000fe8 <checkSlideVal+0x20>
			return 34;
 8000fe4:	2322      	movs	r3, #34	@ 0x22
 8000fe6:	e01b      	b.n	8001020 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000fe8:	2108      	movs	r1, #8
 8000fea:	4810      	ldr	r0, [pc, #64]	@ (800102c <checkSlideVal+0x64>)
 8000fec:	f008 ffb4 	bl	8009f58 <HAL_GPIO_ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d113      	bne.n	800101e <checkSlideVal+0x56>
			return 32;
 8000ff6:	2320      	movs	r3, #32
 8000ff8:	e012      	b.n	8001020 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	480a      	ldr	r0, [pc, #40]	@ (8001028 <checkSlideVal+0x60>)
 8000ffe:	f008 ffab 	bl	8009f58 <HAL_GPIO_ReadPin>
 8001002:	4603      	mov	r3, r0
 8001004:	2b01      	cmp	r3, #1
 8001006:	d101      	bne.n	800100c <checkSlideVal+0x44>
			return 35;
 8001008:	2323      	movs	r3, #35	@ 0x23
 800100a:	e009      	b.n	8001020 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800100c:	2108      	movs	r1, #8
 800100e:	4807      	ldr	r0, [pc, #28]	@ (800102c <checkSlideVal+0x64>)
 8001010:	f008 ffa2 	bl	8009f58 <HAL_GPIO_ReadPin>
 8001014:	4603      	mov	r3, r0
 8001016:	2b01      	cmp	r3, #1
 8001018:	d101      	bne.n	800101e <checkSlideVal+0x56>
			return 33;
 800101a:	2321      	movs	r3, #33	@ 0x21
 800101c:	e000      	b.n	8001020 <checkSlideVal+0x58>
		}
	}
	return 0;
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40010800 	.word	0x40010800
 800102c:	40011000 	.word	0x40011000

08001030 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	@ 0x28
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f7ff f8f0 	bl	8000224 <strlen>
 8001044:	4603      	mov	r3, r0
 8001046:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001048:	2301      	movs	r3, #1
 800104a:	627b      	str	r3, [r7, #36]	@ 0x24

	while(mainLoopVal == 1) {
 800104c:	e08a      	b.n	8001164 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 800104e:	6838      	ldr	r0, [r7, #0]
 8001050:	f7ff ffba 	bl	8000fc8 <checkSlideVal>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	dd07      	ble.n	800106a <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 800105a:	6838      	ldr	r0, [r7, #0]
 800105c:	f7ff ffb4 	bl	8000fc8 <checkSlideVal>
 8001060:	4603      	mov	r3, r0
 8001062:	b2da      	uxtb	r2, r3
 8001064:	4b44      	ldr	r3, [pc, #272]	@ (8001178 <slideText+0x148>)
 8001066:	701a      	strb	r2, [r3, #0]
			break;
 8001068:	e081      	b.n	800116e <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
 800106e:	e075      	b.n	800115c <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001070:	6838      	ldr	r0, [r7, #0]
 8001072:	f7ff ffa9 	bl	8000fc8 <checkSlideVal>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	dd09      	ble.n	8001090 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 800107c:	6838      	ldr	r0, [r7, #0]
 800107e:	f7ff ffa3 	bl	8000fc8 <checkSlideVal>
 8001082:	4603      	mov	r3, r0
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b3c      	ldr	r3, [pc, #240]	@ (8001178 <slideText+0x148>)
 8001088:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
				break;
 800108e:	e069      	b.n	8001164 <slideText+0x134>
			}

			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001090:	68ba      	ldr	r2, [r7, #8]
 8001092:	6a3b      	ldr	r3, [r7, #32]
 8001094:	4413      	add	r3, r2
 8001096:	61fb      	str	r3, [r7, #28]
 8001098:	e029      	b.n	80010ee <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 800109a:	6838      	ldr	r0, [r7, #0]
 800109c:	f7ff ff94 	bl	8000fc8 <checkSlideVal>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	dd0b      	ble.n	80010be <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 80010a6:	6838      	ldr	r0, [r7, #0]
 80010a8:	f7ff ff8e 	bl	8000fc8 <checkSlideVal>
 80010ac:	4603      	mov	r3, r0
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	4b31      	ldr	r3, [pc, #196]	@ (8001178 <slideText+0x148>)
 80010b2:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80010bc:	e01d      	b.n	80010fa <slideText+0xca>
				}

				lcd_print_char(startLine, i-z, text[i-startPos]);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	b2d8      	uxtb	r0, r3
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	6a3b      	ldr	r3, [r7, #32]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	b2d9      	uxtb	r1, r3
 80010ce:	69fa      	ldr	r2, [r7, #28]
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	461a      	mov	r2, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4413      	add	r3, r2
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	f007 fc26 	bl	800892e <lcd_print_char>
				HAL_Delay(30);
 80010e2:	201e      	movs	r0, #30
 80010e4:	f008 f968 	bl	80093b8 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	3301      	adds	r3, #1
 80010ec:	61fb      	str	r3, [r7, #28]
 80010ee:	7dfa      	ldrb	r2, [r7, #23]
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4413      	add	r3, r2
 80010f4:	69fa      	ldr	r2, [r7, #28]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	dbcf      	blt.n	800109a <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80010fa:	7dfb      	ldrb	r3, [r7, #23]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	61bb      	str	r3, [r7, #24]
 8001100:	e023      	b.n	800114a <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 8001102:	6838      	ldr	r0, [r7, #0]
 8001104:	f7ff ff60 	bl	8000fc8 <checkSlideVal>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	dd0b      	ble.n	8001126 <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 800110e:	6838      	ldr	r0, [r7, #0]
 8001110:	f7ff ff5a 	bl	8000fc8 <checkSlideVal>
 8001114:	4603      	mov	r3, r0
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <slideText+0x148>)
 800111a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8001124:	e017      	b.n	8001156 <slideText+0x126>
				}

			    if(j >= startPos) {
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	429a      	cmp	r2, r3
 800112c:	db0a      	blt.n	8001144 <slideText+0x114>
			    	lcd_print_char(startLine, j, ' ');
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	b2d1      	uxtb	r1, r2
 8001136:	2220      	movs	r2, #32
 8001138:	4618      	mov	r0, r3
 800113a:	f007 fbf8 	bl	800892e <lcd_print_char>
			    	HAL_Delay(30);
 800113e:	201e      	movs	r0, #30
 8001140:	f008 f93a 	bl	80093b8 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001144:	69bb      	ldr	r3, [r7, #24]
 8001146:	3b01      	subs	r3, #1
 8001148:	61bb      	str	r3, [r7, #24]
 800114a:	7dfa      	ldrb	r2, [r7, #23]
 800114c:	6a3b      	ldr	r3, [r7, #32]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	429a      	cmp	r2, r3
 8001154:	dad5      	bge.n	8001102 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	3301      	adds	r3, #1
 800115a:	623b      	str	r3, [r7, #32]
 800115c:	7dfb      	ldrb	r3, [r7, #23]
 800115e:	6a3a      	ldr	r2, [r7, #32]
 8001160:	429a      	cmp	r2, r3
 8001162:	db85      	blt.n	8001070 <slideText+0x40>
	while(mainLoopVal == 1) {
 8001164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001166:	2b01      	cmp	r3, #1
 8001168:	f43f af71 	beq.w	800104e <slideText+0x1e>
			    }
			}
		}
	}
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	@ 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200010c4 	.word	0x200010c4

0800117c <printCredentials>:

void printCredentials(int type) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b01      	cmp	r3, #1
 8001188:	d10f      	bne.n	80011aa <printCredentials+0x2e>
		//machine id yazdır
		lcd_print(1, 1, machineIDText);
 800118a:	4a33      	ldr	r2, [pc, #204]	@ (8001258 <printCredentials+0xdc>)
 800118c:	2101      	movs	r1, #1
 800118e:	2001      	movs	r0, #1
 8001190:	f007 fbb8 	bl	8008904 <lcd_print>
		lcd_print(2, 1, machineID);
 8001194:	4a31      	ldr	r2, [pc, #196]	@ (800125c <printCredentials+0xe0>)
 8001196:	2101      	movs	r1, #1
 8001198:	2002      	movs	r0, #2
 800119a:	f007 fbb3 	bl	8008904 <lcd_print>
		lcd_print(2, 13, "    ");
 800119e:	4a30      	ldr	r2, [pc, #192]	@ (8001260 <printCredentials+0xe4>)
 80011a0:	210d      	movs	r1, #13
 80011a2:	2002      	movs	r0, #2
 80011a4:	f007 fbae 	bl	8008904 <lcd_print>
		} else {
			//Eğer pass 16'dan büyükse kayarak yazdır
			slideText(wifiPass, 1, 2, 1);
		}
	}
}
 80011a8:	e051      	b.n	800124e <printCredentials+0xd2>
	} else if(type == 2) {
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d127      	bne.n	8001200 <printCredentials+0x84>
		int ssidLength = strlen(wifiSSID);
 80011b0:	482c      	ldr	r0, [pc, #176]	@ (8001264 <printCredentials+0xe8>)
 80011b2:	f7ff f837 	bl	8000224 <strlen>
 80011b6:	4603      	mov	r3, r0
 80011b8:	60bb      	str	r3, [r7, #8]
		lcd_print(1, 1, "WIFI SSID       ");
 80011ba:	4a2b      	ldr	r2, [pc, #172]	@ (8001268 <printCredentials+0xec>)
 80011bc:	2101      	movs	r1, #1
 80011be:	2001      	movs	r0, #1
 80011c0:	f007 fba0 	bl	8008904 <lcd_print>
		if(ssidLength == 16) {
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	2b10      	cmp	r3, #16
 80011c8:	d105      	bne.n	80011d6 <printCredentials+0x5a>
			lcd_print(2, 1, wifiSSID);
 80011ca:	4a26      	ldr	r2, [pc, #152]	@ (8001264 <printCredentials+0xe8>)
 80011cc:	2101      	movs	r1, #1
 80011ce:	2002      	movs	r0, #2
 80011d0:	f007 fb98 	bl	8008904 <lcd_print>
}
 80011d4:	e03b      	b.n	800124e <printCredentials+0xd2>
		} else if(ssidLength < 16) {
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2b0f      	cmp	r3, #15
 80011da:	dc0a      	bgt.n	80011f2 <printCredentials+0x76>
			lcd_print(2, 1, "                ");
 80011dc:	4a23      	ldr	r2, [pc, #140]	@ (800126c <printCredentials+0xf0>)
 80011de:	2101      	movs	r1, #1
 80011e0:	2002      	movs	r0, #2
 80011e2:	f007 fb8f 	bl	8008904 <lcd_print>
			lcd_print(2, 1, wifiSSID);
 80011e6:	4a1f      	ldr	r2, [pc, #124]	@ (8001264 <printCredentials+0xe8>)
 80011e8:	2101      	movs	r1, #1
 80011ea:	2002      	movs	r0, #2
 80011ec:	f007 fb8a 	bl	8008904 <lcd_print>
}
 80011f0:	e02d      	b.n	800124e <printCredentials+0xd2>
			slideText(wifiSSID, 1, 2, 0);
 80011f2:	2300      	movs	r3, #0
 80011f4:	2202      	movs	r2, #2
 80011f6:	2101      	movs	r1, #1
 80011f8:	481a      	ldr	r0, [pc, #104]	@ (8001264 <printCredentials+0xe8>)
 80011fa:	f7ff ff19 	bl	8001030 <slideText>
}
 80011fe:	e026      	b.n	800124e <printCredentials+0xd2>
		int passLength = strlen(wifiPass);
 8001200:	481b      	ldr	r0, [pc, #108]	@ (8001270 <printCredentials+0xf4>)
 8001202:	f7ff f80f 	bl	8000224 <strlen>
 8001206:	4603      	mov	r3, r0
 8001208:	60fb      	str	r3, [r7, #12]
		lcd_print(1, 1, "WIFI PASS       ");
 800120a:	4a1a      	ldr	r2, [pc, #104]	@ (8001274 <printCredentials+0xf8>)
 800120c:	2101      	movs	r1, #1
 800120e:	2001      	movs	r0, #1
 8001210:	f007 fb78 	bl	8008904 <lcd_print>
		if(passLength == 16) {
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	2b10      	cmp	r3, #16
 8001218:	d105      	bne.n	8001226 <printCredentials+0xaa>
			lcd_print(2, 1, wifiPass);
 800121a:	4a15      	ldr	r2, [pc, #84]	@ (8001270 <printCredentials+0xf4>)
 800121c:	2101      	movs	r1, #1
 800121e:	2002      	movs	r0, #2
 8001220:	f007 fb70 	bl	8008904 <lcd_print>
}
 8001224:	e013      	b.n	800124e <printCredentials+0xd2>
		} else if(passLength < 16) {
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	dc0a      	bgt.n	8001242 <printCredentials+0xc6>
			lcd_print(2, 1, "                ");
 800122c:	4a0f      	ldr	r2, [pc, #60]	@ (800126c <printCredentials+0xf0>)
 800122e:	2101      	movs	r1, #1
 8001230:	2002      	movs	r0, #2
 8001232:	f007 fb67 	bl	8008904 <lcd_print>
			lcd_print(2, 1, wifiPass);
 8001236:	4a0e      	ldr	r2, [pc, #56]	@ (8001270 <printCredentials+0xf4>)
 8001238:	2101      	movs	r1, #1
 800123a:	2002      	movs	r0, #2
 800123c:	f007 fb62 	bl	8008904 <lcd_print>
}
 8001240:	e005      	b.n	800124e <printCredentials+0xd2>
			slideText(wifiPass, 1, 2, 1);
 8001242:	2301      	movs	r3, #1
 8001244:	2202      	movs	r2, #2
 8001246:	2101      	movs	r1, #1
 8001248:	4809      	ldr	r0, [pc, #36]	@ (8001270 <printCredentials+0xf4>)
 800124a:	f7ff fef1 	bl	8001030 <slideText>
}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200018c8 	.word	0x200018c8
 800125c:	20001068 	.word	0x20001068
 8001260:	0800dc78 	.word	0x0800dc78
 8001264:	20001074 	.word	0x20001074
 8001268:	0800dc80 	.word	0x0800dc80
 800126c:	0800dc94 	.word	0x0800dc94
 8001270:	20001088 	.word	0x20001088
 8001274:	0800dca8 	.word	0x0800dca8

08001278 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800127c:	f3bf 8f4f 	dsb	sy
}
 8001280:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001282:	4b06      	ldr	r3, [pc, #24]	@ (800129c <__NVIC_SystemReset+0x24>)
 8001284:	68db      	ldr	r3, [r3, #12]
 8001286:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800128a:	4904      	ldr	r1, [pc, #16]	@ (800129c <__NVIC_SystemReset+0x24>)
 800128c:	4b04      	ldr	r3, [pc, #16]	@ (80012a0 <__NVIC_SystemReset+0x28>)
 800128e:	4313      	orrs	r3, r2
 8001290:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001292:	f3bf 8f4f 	dsb	sy
}
 8001296:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <__NVIC_SystemReset+0x20>
 800129c:	e000ed00 	.word	0xe000ed00
 80012a0:	05fa0004 	.word	0x05fa0004

080012a4 <menu>:
#include "WifiProcess.h"
#include "IoTMenu.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80012aa:	2101      	movs	r1, #1
 80012ac:	488e      	ldr	r0, [pc, #568]	@ (80014e8 <menu+0x244>)
 80012ae:	f008 fe53 	bl	8009f58 <HAL_GPIO_ReadPin>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	f040 8099 	bne.w	80013ec <menu+0x148>
 80012ba:	4b8c      	ldr	r3, [pc, #560]	@ (80014ec <menu+0x248>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	f083 0301 	eor.w	r3, r3, #1
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 8091 	beq.w	80013ec <menu+0x148>
		menuSayac = menuSayac+1;
 80012ca:	4b89      	ldr	r3, [pc, #548]	@ (80014f0 <menu+0x24c>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4b87      	ldr	r3, [pc, #540]	@ (80014f0 <menu+0x24c>)
 80012d4:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80012d6:	4b86      	ldr	r3, [pc, #536]	@ (80014f0 <menu+0x24c>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b24      	cmp	r3, #36	@ 0x24
 80012dc:	d102      	bne.n	80012e4 <menu+0x40>
			menuSayac = 1;
 80012de:	4b84      	ldr	r3, [pc, #528]	@ (80014f0 <menu+0x24c>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80012e4:	4b82      	ldr	r3, [pc, #520]	@ (80014f0 <menu+0x24c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b12      	cmp	r3, #18
 80012ea:	d106      	bne.n	80012fa <menu+0x56>
 80012ec:	4b81      	ldr	r3, [pc, #516]	@ (80014f4 <menu+0x250>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d102      	bne.n	80012fa <menu+0x56>
			menuSayac = 21;
 80012f4:	4b7e      	ldr	r3, [pc, #504]	@ (80014f0 <menu+0x24c>)
 80012f6:	2215      	movs	r2, #21
 80012f8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80012fa:	4b7d      	ldr	r3, [pc, #500]	@ (80014f0 <menu+0x24c>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d106      	bne.n	8001310 <menu+0x6c>
 8001302:	4b7d      	ldr	r3, [pc, #500]	@ (80014f8 <menu+0x254>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d102      	bne.n	8001310 <menu+0x6c>
			menuSayac = 16;
 800130a:	4b79      	ldr	r3, [pc, #484]	@ (80014f0 <menu+0x24c>)
 800130c:	2210      	movs	r2, #16
 800130e:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001310:	4b77      	ldr	r3, [pc, #476]	@ (80014f0 <menu+0x24c>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b0d      	cmp	r3, #13
 8001316:	d106      	bne.n	8001326 <menu+0x82>
 8001318:	4b77      	ldr	r3, [pc, #476]	@ (80014f8 <menu+0x254>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d102      	bne.n	8001326 <menu+0x82>
			menuSayac = 16;
 8001320:	4b73      	ldr	r3, [pc, #460]	@ (80014f0 <menu+0x24c>)
 8001322:	2210      	movs	r2, #16
 8001324:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001326:	4b72      	ldr	r3, [pc, #456]	@ (80014f0 <menu+0x24c>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b09      	cmp	r3, #9
 800132c:	d106      	bne.n	800133c <menu+0x98>
 800132e:	4b72      	ldr	r3, [pc, #456]	@ (80014f8 <menu+0x254>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b02      	cmp	r3, #2
 8001334:	d102      	bne.n	800133c <menu+0x98>
			menuSayac = 13;
 8001336:	4b6e      	ldr	r3, [pc, #440]	@ (80014f0 <menu+0x24c>)
 8001338:	220d      	movs	r2, #13
 800133a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800133c:	4b6c      	ldr	r3, [pc, #432]	@ (80014f0 <menu+0x24c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b0a      	cmp	r3, #10
 8001342:	d10a      	bne.n	800135a <menu+0xb6>
 8001344:	4b6d      	ldr	r3, [pc, #436]	@ (80014fc <menu+0x258>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d003      	beq.n	8001354 <menu+0xb0>
 800134c:	4b6b      	ldr	r3, [pc, #428]	@ (80014fc <menu+0x258>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b02      	cmp	r3, #2
 8001352:	d102      	bne.n	800135a <menu+0xb6>
			menuSayac = 11;
 8001354:	4b66      	ldr	r3, [pc, #408]	@ (80014f0 <menu+0x24c>)
 8001356:	220b      	movs	r2, #11
 8001358:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800135a:	4b65      	ldr	r3, [pc, #404]	@ (80014f0 <menu+0x24c>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b0c      	cmp	r3, #12
 8001360:	d10e      	bne.n	8001380 <menu+0xdc>
 8001362:	4b67      	ldr	r3, [pc, #412]	@ (8001500 <menu+0x25c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d003      	beq.n	8001372 <menu+0xce>
 800136a:	4b65      	ldr	r3, [pc, #404]	@ (8001500 <menu+0x25c>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d106      	bne.n	8001380 <menu+0xdc>
 8001372:	4b61      	ldr	r3, [pc, #388]	@ (80014f8 <menu+0x254>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d102      	bne.n	8001380 <menu+0xdc>
			menuSayac = 16;
 800137a:	4b5d      	ldr	r3, [pc, #372]	@ (80014f0 <menu+0x24c>)
 800137c:	2210      	movs	r2, #16
 800137e:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001380:	4b5b      	ldr	r3, [pc, #364]	@ (80014f0 <menu+0x24c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b0c      	cmp	r3, #12
 8001386:	d10e      	bne.n	80013a6 <menu+0x102>
 8001388:	4b5d      	ldr	r3, [pc, #372]	@ (8001500 <menu+0x25c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d003      	beq.n	8001398 <menu+0xf4>
 8001390:	4b5b      	ldr	r3, [pc, #364]	@ (8001500 <menu+0x25c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d106      	bne.n	80013a6 <menu+0x102>
 8001398:	4b57      	ldr	r3, [pc, #348]	@ (80014f8 <menu+0x254>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b03      	cmp	r3, #3
 800139e:	d102      	bne.n	80013a6 <menu+0x102>
			menuSayac = 13;
 80013a0:	4b53      	ldr	r3, [pc, #332]	@ (80014f0 <menu+0x24c>)
 80013a2:	220d      	movs	r2, #13
 80013a4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80013a6:	4b52      	ldr	r3, [pc, #328]	@ (80014f0 <menu+0x24c>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b0f      	cmp	r3, #15
 80013ac:	d106      	bne.n	80013bc <menu+0x118>
 80013ae:	4b55      	ldr	r3, [pc, #340]	@ (8001504 <menu+0x260>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d102      	bne.n	80013bc <menu+0x118>
			menuSayac = 16;
 80013b6:	4b4e      	ldr	r3, [pc, #312]	@ (80014f0 <menu+0x24c>)
 80013b8:	2210      	movs	r2, #16
 80013ba:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80013bc:	4b4c      	ldr	r3, [pc, #304]	@ (80014f0 <menu+0x24c>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b18      	cmp	r3, #24
 80013c2:	d106      	bne.n	80013d2 <menu+0x12e>
 80013c4:	4b4b      	ldr	r3, [pc, #300]	@ (80014f4 <menu+0x250>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d102      	bne.n	80013d2 <menu+0x12e>
			menuSayac = 26;
 80013cc:	4b48      	ldr	r3, [pc, #288]	@ (80014f0 <menu+0x24c>)
 80013ce:	221a      	movs	r2, #26
 80013d0:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 80013d2:	4b47      	ldr	r3, [pc, #284]	@ (80014f0 <menu+0x24c>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b21      	cmp	r3, #33	@ 0x21
 80013d8:	d106      	bne.n	80013e8 <menu+0x144>
 80013da:	4b4b      	ldr	r3, [pc, #300]	@ (8001508 <menu+0x264>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d102      	bne.n	80013e8 <menu+0x144>
			menuSayac = 35;
 80013e2:	4b43      	ldr	r3, [pc, #268]	@ (80014f0 <menu+0x24c>)
 80013e4:	2223      	movs	r2, #35	@ 0x23
 80013e6:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80013e8:	f002 fc8a 	bl	8003d00 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80013ec:	2108      	movs	r1, #8
 80013ee:	4847      	ldr	r0, [pc, #284]	@ (800150c <menu+0x268>)
 80013f0:	f008 fdb2 	bl	8009f58 <HAL_GPIO_ReadPin>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	f040 8097 	bne.w	800152a <menu+0x286>
 80013fc:	4b3b      	ldr	r3, [pc, #236]	@ (80014ec <menu+0x248>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	f083 0301 	eor.w	r3, r3, #1
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 808f 	beq.w	800152a <menu+0x286>
		if (menuSayac <= 1) {
 800140c:	4b38      	ldr	r3, [pc, #224]	@ (80014f0 <menu+0x24c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d802      	bhi.n	800141a <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001414:	4b36      	ldr	r3, [pc, #216]	@ (80014f0 <menu+0x24c>)
 8001416:	2224      	movs	r2, #36	@ 0x24
 8001418:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800141a:	4b35      	ldr	r3, [pc, #212]	@ (80014f0 <menu+0x24c>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	3b01      	subs	r3, #1
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4b33      	ldr	r3, [pc, #204]	@ (80014f0 <menu+0x24c>)
 8001424:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001426:	4b32      	ldr	r3, [pc, #200]	@ (80014f0 <menu+0x24c>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b14      	cmp	r3, #20
 800142c:	d106      	bne.n	800143c <menu+0x198>
 800142e:	4b31      	ldr	r3, [pc, #196]	@ (80014f4 <menu+0x250>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d102      	bne.n	800143c <menu+0x198>
			menuSayac = 17;
 8001436:	4b2e      	ldr	r3, [pc, #184]	@ (80014f0 <menu+0x24c>)
 8001438:	2211      	movs	r2, #17
 800143a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800143c:	4b2c      	ldr	r3, [pc, #176]	@ (80014f0 <menu+0x24c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b0f      	cmp	r3, #15
 8001442:	d106      	bne.n	8001452 <menu+0x1ae>
 8001444:	4b2c      	ldr	r3, [pc, #176]	@ (80014f8 <menu+0x254>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <menu+0x1ae>
			menuSayac = 7;
 800144c:	4b28      	ldr	r3, [pc, #160]	@ (80014f0 <menu+0x24c>)
 800144e:	2207      	movs	r2, #7
 8001450:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001452:	4b27      	ldr	r3, [pc, #156]	@ (80014f0 <menu+0x24c>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b0f      	cmp	r3, #15
 8001458:	d106      	bne.n	8001468 <menu+0x1c4>
 800145a:	4b27      	ldr	r3, [pc, #156]	@ (80014f8 <menu+0x254>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d102      	bne.n	8001468 <menu+0x1c4>
			menuSayac = 12;
 8001462:	4b23      	ldr	r3, [pc, #140]	@ (80014f0 <menu+0x24c>)
 8001464:	220c      	movs	r2, #12
 8001466:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001468:	4b21      	ldr	r3, [pc, #132]	@ (80014f0 <menu+0x24c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b0c      	cmp	r3, #12
 800146e:	d106      	bne.n	800147e <menu+0x1da>
 8001470:	4b21      	ldr	r3, [pc, #132]	@ (80014f8 <menu+0x254>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d102      	bne.n	800147e <menu+0x1da>
			menuSayac = 8;
 8001478:	4b1d      	ldr	r3, [pc, #116]	@ (80014f0 <menu+0x24c>)
 800147a:	2208      	movs	r2, #8
 800147c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800147e:	4b1c      	ldr	r3, [pc, #112]	@ (80014f0 <menu+0x24c>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b0a      	cmp	r3, #10
 8001484:	d10a      	bne.n	800149c <menu+0x1f8>
 8001486:	4b1d      	ldr	r3, [pc, #116]	@ (80014fc <menu+0x258>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d003      	beq.n	8001496 <menu+0x1f2>
 800148e:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <menu+0x258>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b02      	cmp	r3, #2
 8001494:	d102      	bne.n	800149c <menu+0x1f8>
			menuSayac = 9;
 8001496:	4b16      	ldr	r3, [pc, #88]	@ (80014f0 <menu+0x24c>)
 8001498:	2209      	movs	r2, #9
 800149a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800149c:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <menu+0x24c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b0c      	cmp	r3, #12
 80014a2:	d10a      	bne.n	80014ba <menu+0x216>
 80014a4:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <menu+0x25c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d003      	beq.n	80014b4 <menu+0x210>
 80014ac:	4b14      	ldr	r3, [pc, #80]	@ (8001500 <menu+0x25c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d102      	bne.n	80014ba <menu+0x216>
			menuSayac = 11;
 80014b4:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <menu+0x24c>)
 80014b6:	220b      	movs	r2, #11
 80014b8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80014ba:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <menu+0x24c>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b0f      	cmp	r3, #15
 80014c0:	d106      	bne.n	80014d0 <menu+0x22c>
 80014c2:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <menu+0x260>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d102      	bne.n	80014d0 <menu+0x22c>
			menuSayac = 14;
 80014ca:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <menu+0x24c>)
 80014cc:	220e      	movs	r2, #14
 80014ce:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80014d0:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <menu+0x24c>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b19      	cmp	r3, #25
 80014d6:	d11b      	bne.n	8001510 <menu+0x26c>
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <menu+0x250>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d117      	bne.n	8001510 <menu+0x26c>
			menuSayac = 23;
 80014e0:	4b03      	ldr	r3, [pc, #12]	@ (80014f0 <menu+0x24c>)
 80014e2:	2217      	movs	r2, #23
 80014e4:	701a      	strb	r2, [r3, #0]
 80014e6:	e013      	b.n	8001510 <menu+0x26c>
 80014e8:	40010800 	.word	0x40010800
 80014ec:	200010f3 	.word	0x200010f3
 80014f0:	200010c4 	.word	0x200010c4
 80014f4:	200010d3 	.word	0x200010d3
 80014f8:	200010cc 	.word	0x200010cc
 80014fc:	200010cd 	.word	0x200010cd
 8001500:	200010ce 	.word	0x200010ce
 8001504:	200010cf 	.word	0x200010cf
 8001508:	200010e3 	.word	0x200010e3
 800150c:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 8001510:	4bb0      	ldr	r3, [pc, #704]	@ (80017d4 <menu+0x530>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b22      	cmp	r3, #34	@ 0x22
 8001516:	d106      	bne.n	8001526 <menu+0x282>
 8001518:	4baf      	ldr	r3, [pc, #700]	@ (80017d8 <menu+0x534>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d102      	bne.n	8001526 <menu+0x282>
			menuSayac = 32;
 8001520:	4bac      	ldr	r3, [pc, #688]	@ (80017d4 <menu+0x530>)
 8001522:	2220      	movs	r2, #32
 8001524:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001526:	f002 fbeb 	bl	8003d00 <bekle>
	}

	if (menuSayac == 0) {
 800152a:	4baa      	ldr	r3, [pc, #680]	@ (80017d4 <menu+0x530>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d109      	bne.n	8001546 <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 8001532:	4aaa      	ldr	r2, [pc, #680]	@ (80017dc <menu+0x538>)
 8001534:	2101      	movs	r1, #1
 8001536:	2001      	movs	r0, #1
 8001538:	f007 f9e4 	bl	8008904 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 800153c:	4aa8      	ldr	r2, [pc, #672]	@ (80017e0 <menu+0x53c>)
 800153e:	2101      	movs	r1, #1
 8001540:	2002      	movs	r0, #2
 8001542:	f007 f9df 	bl	8008904 <lcd_print>
	}

	if (menuSayac == 1) {
 8001546:	4ba3      	ldr	r3, [pc, #652]	@ (80017d4 <menu+0x530>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b01      	cmp	r3, #1
 800154c:	f040 81f4 	bne.w	8001938 <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 8001550:	4aa4      	ldr	r2, [pc, #656]	@ (80017e4 <menu+0x540>)
 8001552:	2101      	movs	r1, #1
 8001554:	2001      	movs	r0, #1
 8001556:	f007 f9d5 	bl	8008904 <lcd_print>

		if(hataGostermeSirasi == 0) {
 800155a:	4ba3      	ldr	r3, [pc, #652]	@ (80017e8 <menu+0x544>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d115      	bne.n	800158e <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 8001562:	4aa2      	ldr	r2, [pc, #648]	@ (80017ec <menu+0x548>)
 8001564:	2101      	movs	r1, #1
 8001566:	2002      	movs	r0, #2
 8001568:	f007 f9cc 	bl	8008904 <lcd_print>
			lcd_print(2, 15, "   ");
 800156c:	4aa0      	ldr	r2, [pc, #640]	@ (80017f0 <menu+0x54c>)
 800156e:	210f      	movs	r1, #15
 8001570:	2002      	movs	r0, #2
 8001572:	f007 f9c7 	bl	8008904 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001576:	4b9f      	ldr	r3, [pc, #636]	@ (80017f4 <menu+0x550>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	220a      	movs	r2, #10
 800157c:	499e      	ldr	r1, [pc, #632]	@ (80017f8 <menu+0x554>)
 800157e:	4618      	mov	r0, r3
 8001580:	f00b fd16 	bl	800cfb0 <itoa>
			lcd_print(2, 14, snum);
 8001584:	4a9c      	ldr	r2, [pc, #624]	@ (80017f8 <menu+0x554>)
 8001586:	210e      	movs	r1, #14
 8001588:	2002      	movs	r0, #2
 800158a:	f007 f9bb 	bl	8008904 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800158e:	4b96      	ldr	r3, [pc, #600]	@ (80017e8 <menu+0x544>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d115      	bne.n	80015c2 <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 8001596:	4a99      	ldr	r2, [pc, #612]	@ (80017fc <menu+0x558>)
 8001598:	2101      	movs	r1, #1
 800159a:	2002      	movs	r0, #2
 800159c:	f007 f9b2 	bl	8008904 <lcd_print>
			lcd_print(2, 15, "  ");
 80015a0:	4a97      	ldr	r2, [pc, #604]	@ (8001800 <menu+0x55c>)
 80015a2:	210f      	movs	r1, #15
 80015a4:	2002      	movs	r0, #2
 80015a6:	f007 f9ad 	bl	8008904 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80015aa:	4b96      	ldr	r3, [pc, #600]	@ (8001804 <menu+0x560>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	220a      	movs	r2, #10
 80015b0:	4991      	ldr	r1, [pc, #580]	@ (80017f8 <menu+0x554>)
 80015b2:	4618      	mov	r0, r3
 80015b4:	f00b fcfc 	bl	800cfb0 <itoa>
			lcd_print(2, 14, snum);
 80015b8:	4a8f      	ldr	r2, [pc, #572]	@ (80017f8 <menu+0x554>)
 80015ba:	210e      	movs	r1, #14
 80015bc:	2002      	movs	r0, #2
 80015be:	f007 f9a1 	bl	8008904 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80015c2:	4b89      	ldr	r3, [pc, #548]	@ (80017e8 <menu+0x544>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d115      	bne.n	80015f6 <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 80015ca:	4a8f      	ldr	r2, [pc, #572]	@ (8001808 <menu+0x564>)
 80015cc:	2101      	movs	r1, #1
 80015ce:	2002      	movs	r0, #2
 80015d0:	f007 f998 	bl	8008904 <lcd_print>
			lcd_print(2, 15, "  ");
 80015d4:	4a8a      	ldr	r2, [pc, #552]	@ (8001800 <menu+0x55c>)
 80015d6:	210f      	movs	r1, #15
 80015d8:	2002      	movs	r0, #2
 80015da:	f007 f993 	bl	8008904 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80015de:	4b8b      	ldr	r3, [pc, #556]	@ (800180c <menu+0x568>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	220a      	movs	r2, #10
 80015e4:	4984      	ldr	r1, [pc, #528]	@ (80017f8 <menu+0x554>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f00b fce2 	bl	800cfb0 <itoa>
			lcd_print(2, 14, snum);
 80015ec:	4a82      	ldr	r2, [pc, #520]	@ (80017f8 <menu+0x554>)
 80015ee:	210e      	movs	r1, #14
 80015f0:	2002      	movs	r0, #2
 80015f2:	f007 f987 	bl	8008904 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80015f6:	4b7c      	ldr	r3, [pc, #496]	@ (80017e8 <menu+0x544>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b03      	cmp	r3, #3
 80015fc:	d115      	bne.n	800162a <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 80015fe:	4a84      	ldr	r2, [pc, #528]	@ (8001810 <menu+0x56c>)
 8001600:	2101      	movs	r1, #1
 8001602:	2002      	movs	r0, #2
 8001604:	f007 f97e 	bl	8008904 <lcd_print>
			lcd_print(2, 15, "  ");
 8001608:	4a7d      	ldr	r2, [pc, #500]	@ (8001800 <menu+0x55c>)
 800160a:	210f      	movs	r1, #15
 800160c:	2002      	movs	r0, #2
 800160e:	f007 f979 	bl	8008904 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001612:	4b80      	ldr	r3, [pc, #512]	@ (8001814 <menu+0x570>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	220a      	movs	r2, #10
 8001618:	4977      	ldr	r1, [pc, #476]	@ (80017f8 <menu+0x554>)
 800161a:	4618      	mov	r0, r3
 800161c:	f00b fcc8 	bl	800cfb0 <itoa>
			lcd_print(2, 14, snum);
 8001620:	4a75      	ldr	r2, [pc, #468]	@ (80017f8 <menu+0x554>)
 8001622:	210e      	movs	r1, #14
 8001624:	2002      	movs	r0, #2
 8001626:	f007 f96d 	bl	8008904 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800162a:	4b6f      	ldr	r3, [pc, #444]	@ (80017e8 <menu+0x544>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b04      	cmp	r3, #4
 8001630:	d115      	bne.n	800165e <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 8001632:	4a79      	ldr	r2, [pc, #484]	@ (8001818 <menu+0x574>)
 8001634:	2101      	movs	r1, #1
 8001636:	2002      	movs	r0, #2
 8001638:	f007 f964 	bl	8008904 <lcd_print>
			lcd_print(2, 15, "  ");
 800163c:	4a70      	ldr	r2, [pc, #448]	@ (8001800 <menu+0x55c>)
 800163e:	210f      	movs	r1, #15
 8001640:	2002      	movs	r0, #2
 8001642:	f007 f95f 	bl	8008904 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001646:	4b75      	ldr	r3, [pc, #468]	@ (800181c <menu+0x578>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	220a      	movs	r2, #10
 800164c:	496a      	ldr	r1, [pc, #424]	@ (80017f8 <menu+0x554>)
 800164e:	4618      	mov	r0, r3
 8001650:	f00b fcae 	bl	800cfb0 <itoa>
			lcd_print(2, 14, snum);
 8001654:	4a68      	ldr	r2, [pc, #416]	@ (80017f8 <menu+0x554>)
 8001656:	210e      	movs	r1, #14
 8001658:	2002      	movs	r0, #2
 800165a:	f007 f953 	bl	8008904 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800165e:	4b62      	ldr	r3, [pc, #392]	@ (80017e8 <menu+0x544>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b05      	cmp	r3, #5
 8001664:	d115      	bne.n	8001692 <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 8001666:	4a6e      	ldr	r2, [pc, #440]	@ (8001820 <menu+0x57c>)
 8001668:	2101      	movs	r1, #1
 800166a:	2002      	movs	r0, #2
 800166c:	f007 f94a 	bl	8008904 <lcd_print>
			lcd_print(2, 15, "  ");
 8001670:	4a63      	ldr	r2, [pc, #396]	@ (8001800 <menu+0x55c>)
 8001672:	210f      	movs	r1, #15
 8001674:	2002      	movs	r0, #2
 8001676:	f007 f945 	bl	8008904 <lcd_print>
			itoa(hataKayit6, snum, 10);
 800167a:	4b6a      	ldr	r3, [pc, #424]	@ (8001824 <menu+0x580>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	220a      	movs	r2, #10
 8001680:	495d      	ldr	r1, [pc, #372]	@ (80017f8 <menu+0x554>)
 8001682:	4618      	mov	r0, r3
 8001684:	f00b fc94 	bl	800cfb0 <itoa>
			lcd_print(2, 14, snum);
 8001688:	4a5b      	ldr	r2, [pc, #364]	@ (80017f8 <menu+0x554>)
 800168a:	210e      	movs	r1, #14
 800168c:	2002      	movs	r0, #2
 800168e:	f007 f939 	bl	8008904 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001692:	4b55      	ldr	r3, [pc, #340]	@ (80017e8 <menu+0x544>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b06      	cmp	r3, #6
 8001698:	d115      	bne.n	80016c6 <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 800169a:	4a63      	ldr	r2, [pc, #396]	@ (8001828 <menu+0x584>)
 800169c:	2101      	movs	r1, #1
 800169e:	2002      	movs	r0, #2
 80016a0:	f007 f930 	bl	8008904 <lcd_print>
			lcd_print(2, 15, "  ");
 80016a4:	4a56      	ldr	r2, [pc, #344]	@ (8001800 <menu+0x55c>)
 80016a6:	210f      	movs	r1, #15
 80016a8:	2002      	movs	r0, #2
 80016aa:	f007 f92b 	bl	8008904 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80016ae:	4b5f      	ldr	r3, [pc, #380]	@ (800182c <menu+0x588>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	220a      	movs	r2, #10
 80016b4:	4950      	ldr	r1, [pc, #320]	@ (80017f8 <menu+0x554>)
 80016b6:	4618      	mov	r0, r3
 80016b8:	f00b fc7a 	bl	800cfb0 <itoa>
			lcd_print(2, 14, snum);
 80016bc:	4a4e      	ldr	r2, [pc, #312]	@ (80017f8 <menu+0x554>)
 80016be:	210e      	movs	r1, #14
 80016c0:	2002      	movs	r0, #2
 80016c2:	f007 f91f 	bl	8008904 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80016c6:	4b48      	ldr	r3, [pc, #288]	@ (80017e8 <menu+0x544>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b07      	cmp	r3, #7
 80016cc:	d115      	bne.n	80016fa <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 80016ce:	4a58      	ldr	r2, [pc, #352]	@ (8001830 <menu+0x58c>)
 80016d0:	2101      	movs	r1, #1
 80016d2:	2002      	movs	r0, #2
 80016d4:	f007 f916 	bl	8008904 <lcd_print>
			lcd_print(2, 15, "  ");
 80016d8:	4a49      	ldr	r2, [pc, #292]	@ (8001800 <menu+0x55c>)
 80016da:	210f      	movs	r1, #15
 80016dc:	2002      	movs	r0, #2
 80016de:	f007 f911 	bl	8008904 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80016e2:	4b54      	ldr	r3, [pc, #336]	@ (8001834 <menu+0x590>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	220a      	movs	r2, #10
 80016e8:	4943      	ldr	r1, [pc, #268]	@ (80017f8 <menu+0x554>)
 80016ea:	4618      	mov	r0, r3
 80016ec:	f00b fc60 	bl	800cfb0 <itoa>
			lcd_print(2, 14, snum);
 80016f0:	4a41      	ldr	r2, [pc, #260]	@ (80017f8 <menu+0x554>)
 80016f2:	210e      	movs	r1, #14
 80016f4:	2002      	movs	r0, #2
 80016f6:	f007 f905 	bl	8008904 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80016fa:	4b3b      	ldr	r3, [pc, #236]	@ (80017e8 <menu+0x544>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d115      	bne.n	800172e <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 8001702:	4a4d      	ldr	r2, [pc, #308]	@ (8001838 <menu+0x594>)
 8001704:	2101      	movs	r1, #1
 8001706:	2002      	movs	r0, #2
 8001708:	f007 f8fc 	bl	8008904 <lcd_print>
			lcd_print(2, 15, "  ");
 800170c:	4a3c      	ldr	r2, [pc, #240]	@ (8001800 <menu+0x55c>)
 800170e:	210f      	movs	r1, #15
 8001710:	2002      	movs	r0, #2
 8001712:	f007 f8f7 	bl	8008904 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001716:	4b49      	ldr	r3, [pc, #292]	@ (800183c <menu+0x598>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	220a      	movs	r2, #10
 800171c:	4936      	ldr	r1, [pc, #216]	@ (80017f8 <menu+0x554>)
 800171e:	4618      	mov	r0, r3
 8001720:	f00b fc46 	bl	800cfb0 <itoa>
			lcd_print(2, 14, snum);
 8001724:	4a34      	ldr	r2, [pc, #208]	@ (80017f8 <menu+0x554>)
 8001726:	210e      	movs	r1, #14
 8001728:	2002      	movs	r0, #2
 800172a:	f007 f8eb 	bl	8008904 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 800172e:	4b2e      	ldr	r3, [pc, #184]	@ (80017e8 <menu+0x544>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b09      	cmp	r3, #9
 8001734:	d115      	bne.n	8001762 <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 8001736:	4a42      	ldr	r2, [pc, #264]	@ (8001840 <menu+0x59c>)
 8001738:	2101      	movs	r1, #1
 800173a:	2002      	movs	r0, #2
 800173c:	f007 f8e2 	bl	8008904 <lcd_print>
			lcd_print(2, 16, " ");
 8001740:	4a40      	ldr	r2, [pc, #256]	@ (8001844 <menu+0x5a0>)
 8001742:	2110      	movs	r1, #16
 8001744:	2002      	movs	r0, #2
 8001746:	f007 f8dd 	bl	8008904 <lcd_print>
			itoa(hataKayit10, snum, 10);
 800174a:	4b3f      	ldr	r3, [pc, #252]	@ (8001848 <menu+0x5a4>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	220a      	movs	r2, #10
 8001750:	4929      	ldr	r1, [pc, #164]	@ (80017f8 <menu+0x554>)
 8001752:	4618      	mov	r0, r3
 8001754:	f00b fc2c 	bl	800cfb0 <itoa>
			lcd_print(2, 15, snum);
 8001758:	4a27      	ldr	r2, [pc, #156]	@ (80017f8 <menu+0x554>)
 800175a:	210f      	movs	r1, #15
 800175c:	2002      	movs	r0, #2
 800175e:	f007 f8d1 	bl	8008904 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001762:	4b21      	ldr	r3, [pc, #132]	@ (80017e8 <menu+0x544>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b0a      	cmp	r3, #10
 8001768:	d104      	bne.n	8001774 <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 800176a:	4a38      	ldr	r2, [pc, #224]	@ (800184c <menu+0x5a8>)
 800176c:	2101      	movs	r1, #1
 800176e:	2002      	movs	r0, #2
 8001770:	f007 f8c8 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001774:	2102      	movs	r1, #2
 8001776:	4836      	ldr	r0, [pc, #216]	@ (8001850 <menu+0x5ac>)
 8001778:	f008 fbee 	bl	8009f58 <HAL_GPIO_ReadPin>
 800177c:	4603      	mov	r3, r0
 800177e:	2b01      	cmp	r3, #1
 8001780:	d119      	bne.n	80017b6 <menu+0x512>
 8001782:	4b34      	ldr	r3, [pc, #208]	@ (8001854 <menu+0x5b0>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	f083 0301 	eor.w	r3, r3, #1
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d012      	beq.n	80017b6 <menu+0x512>
 8001790:	4b31      	ldr	r3, [pc, #196]	@ (8001858 <menu+0x5b4>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10e      	bne.n	80017b6 <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001798:	4b13      	ldr	r3, [pc, #76]	@ (80017e8 <menu+0x544>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	b2da      	uxtb	r2, r3
 80017a0:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <menu+0x544>)
 80017a2:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 80017a4:	4b10      	ldr	r3, [pc, #64]	@ (80017e8 <menu+0x544>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b0a      	cmp	r3, #10
 80017aa:	d902      	bls.n	80017b2 <menu+0x50e>
				hataGostermeSirasi = 0;
 80017ac:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <menu+0x544>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80017b2:	f002 faa5 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80017b6:	2104      	movs	r1, #4
 80017b8:	4825      	ldr	r0, [pc, #148]	@ (8001850 <menu+0x5ac>)
 80017ba:	f008 fbcd 	bl	8009f58 <HAL_GPIO_ReadPin>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d15e      	bne.n	8001882 <menu+0x5de>
 80017c4:	4b23      	ldr	r3, [pc, #140]	@ (8001854 <menu+0x5b0>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	f083 0301 	eor.w	r3, r3, #1
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d057      	beq.n	8001882 <menu+0x5de>
 80017d2:	e043      	b.n	800185c <menu+0x5b8>
 80017d4:	200010c4 	.word	0x200010c4
 80017d8:	200010e3 	.word	0x200010e3
 80017dc:	20001224 	.word	0x20001224
 80017e0:	20001238 	.word	0x20001238
 80017e4:	2000124c 	.word	0x2000124c
 80017e8:	200010c6 	.word	0x200010c6
 80017ec:	20001260 	.word	0x20001260
 80017f0:	0800dcbc 	.word	0x0800dcbc
 80017f4:	200010e6 	.word	0x200010e6
 80017f8:	20001060 	.word	0x20001060
 80017fc:	20001274 	.word	0x20001274
 8001800:	0800dcc0 	.word	0x0800dcc0
 8001804:	200010e7 	.word	0x200010e7
 8001808:	20001288 	.word	0x20001288
 800180c:	200010e8 	.word	0x200010e8
 8001810:	2000129c 	.word	0x2000129c
 8001814:	200010e9 	.word	0x200010e9
 8001818:	200012b0 	.word	0x200012b0
 800181c:	200010ea 	.word	0x200010ea
 8001820:	200012c4 	.word	0x200012c4
 8001824:	200010eb 	.word	0x200010eb
 8001828:	200012d8 	.word	0x200012d8
 800182c:	200010ec 	.word	0x200010ec
 8001830:	200012ec 	.word	0x200012ec
 8001834:	200010ed 	.word	0x200010ed
 8001838:	20001300 	.word	0x20001300
 800183c:	200010ee 	.word	0x200010ee
 8001840:	20001314 	.word	0x20001314
 8001844:	0800dcc4 	.word	0x0800dcc4
 8001848:	200010ef 	.word	0x200010ef
 800184c:	20001328 	.word	0x20001328
 8001850:	40010800 	.word	0x40010800
 8001854:	200010f3 	.word	0x200010f3
 8001858:	200010d3 	.word	0x200010d3
 800185c:	4b8a      	ldr	r3, [pc, #552]	@ (8001a88 <menu+0x7e4>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10e      	bne.n	8001882 <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001864:	4b89      	ldr	r3, [pc, #548]	@ (8001a8c <menu+0x7e8>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	3b01      	subs	r3, #1
 800186a:	b2da      	uxtb	r2, r3
 800186c:	4b87      	ldr	r3, [pc, #540]	@ (8001a8c <menu+0x7e8>)
 800186e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001870:	4b86      	ldr	r3, [pc, #536]	@ (8001a8c <menu+0x7e8>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b0b      	cmp	r3, #11
 8001876:	d902      	bls.n	800187e <menu+0x5da>
	    		hataGostermeSirasi = 10;
 8001878:	4b84      	ldr	r3, [pc, #528]	@ (8001a8c <menu+0x7e8>)
 800187a:	220a      	movs	r2, #10
 800187c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800187e:	f002 fa3f 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001882:	2108      	movs	r1, #8
 8001884:	4882      	ldr	r0, [pc, #520]	@ (8001a90 <menu+0x7ec>)
 8001886:	f008 fb67 	bl	8009f58 <HAL_GPIO_ReadPin>
 800188a:	4603      	mov	r3, r0
 800188c:	2b01      	cmp	r3, #1
 800188e:	d153      	bne.n	8001938 <menu+0x694>
 8001890:	4b80      	ldr	r3, [pc, #512]	@ (8001a94 <menu+0x7f0>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	f083 0301 	eor.w	r3, r3, #1
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d04c      	beq.n	8001938 <menu+0x694>
 800189e:	4b7b      	ldr	r3, [pc, #492]	@ (8001a8c <menu+0x7e8>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b0a      	cmp	r3, #10
 80018a4:	d148      	bne.n	8001938 <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 80018a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001a98 <menu+0x7f4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
 80018ac:	4b7b      	ldr	r3, [pc, #492]	@ (8001a9c <menu+0x7f8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 80018b4:	4b7a      	ldr	r3, [pc, #488]	@ (8001aa0 <menu+0x7fc>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
 80018ba:	4b78      	ldr	r3, [pc, #480]	@ (8001a9c <menu+0x7f8>)
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 80018c2:	4b78      	ldr	r3, [pc, #480]	@ (8001aa4 <menu+0x800>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	4b74      	ldr	r3, [pc, #464]	@ (8001a9c <menu+0x7f8>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 80018d0:	4b75      	ldr	r3, [pc, #468]	@ (8001aa8 <menu+0x804>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	4b71      	ldr	r3, [pc, #452]	@ (8001a9c <menu+0x7f8>)
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 80018de:	4b73      	ldr	r3, [pc, #460]	@ (8001aac <menu+0x808>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
 80018e4:	4b6d      	ldr	r3, [pc, #436]	@ (8001a9c <menu+0x7f8>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 80018ec:	4b70      	ldr	r3, [pc, #448]	@ (8001ab0 <menu+0x80c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	4b6a      	ldr	r3, [pc, #424]	@ (8001a9c <menu+0x7f8>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 80018fa:	4b6e      	ldr	r3, [pc, #440]	@ (8001ab4 <menu+0x810>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	701a      	strb	r2, [r3, #0]
 8001900:	4b66      	ldr	r3, [pc, #408]	@ (8001a9c <menu+0x7f8>)
 8001902:	2200      	movs	r2, #0
 8001904:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001908:	4b6b      	ldr	r3, [pc, #428]	@ (8001ab8 <menu+0x814>)
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
 800190e:	4b63      	ldr	r3, [pc, #396]	@ (8001a9c <menu+0x7f8>)
 8001910:	2200      	movs	r2, #0
 8001912:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001916:	4b69      	ldr	r3, [pc, #420]	@ (8001abc <menu+0x818>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
 800191c:	4b5f      	ldr	r3, [pc, #380]	@ (8001a9c <menu+0x7f8>)
 800191e:	2200      	movs	r2, #0
 8001920:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001924:	4b66      	ldr	r3, [pc, #408]	@ (8001ac0 <menu+0x81c>)
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	4b5c      	ldr	r3, [pc, #368]	@ (8001a9c <menu+0x7f8>)
 800192c:	2200      	movs	r2, #0
 800192e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8001932:	4b64      	ldr	r3, [pc, #400]	@ (8001ac4 <menu+0x820>)
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001938:	4b63      	ldr	r3, [pc, #396]	@ (8001ac8 <menu+0x824>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b02      	cmp	r3, #2
 800193e:	f040 808e 	bne.w	8001a5e <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 8001942:	4a62      	ldr	r2, [pc, #392]	@ (8001acc <menu+0x828>)
 8001944:	2101      	movs	r1, #1
 8001946:	2001      	movs	r0, #1
 8001948:	f006 ffdc 	bl	8008904 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 800194c:	4b4e      	ldr	r3, [pc, #312]	@ (8001a88 <menu+0x7e4>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d003      	beq.n	800195c <menu+0x6b8>
 8001954:	4b4c      	ldr	r3, [pc, #304]	@ (8001a88 <menu+0x7e4>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b02      	cmp	r3, #2
 800195a:	d104      	bne.n	8001966 <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 800195c:	4a5c      	ldr	r2, [pc, #368]	@ (8001ad0 <menu+0x82c>)
 800195e:	2101      	movs	r1, #1
 8001960:	2002      	movs	r0, #2
 8001962:	f006 ffcf 	bl	8008904 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001966:	4b5b      	ldr	r3, [pc, #364]	@ (8001ad4 <menu+0x830>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d108      	bne.n	8001980 <menu+0x6dc>
 800196e:	4b46      	ldr	r3, [pc, #280]	@ (8001a88 <menu+0x7e4>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d104      	bne.n	8001980 <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 8001976:	4a58      	ldr	r2, [pc, #352]	@ (8001ad8 <menu+0x834>)
 8001978:	2101      	movs	r1, #1
 800197a:	2002      	movs	r0, #2
 800197c:	f006 ffc2 	bl	8008904 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001980:	4b54      	ldr	r3, [pc, #336]	@ (8001ad4 <menu+0x830>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d108      	bne.n	800199a <menu+0x6f6>
 8001988:	4b3f      	ldr	r3, [pc, #252]	@ (8001a88 <menu+0x7e4>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d104      	bne.n	800199a <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001990:	4a52      	ldr	r2, [pc, #328]	@ (8001adc <menu+0x838>)
 8001992:	2101      	movs	r1, #1
 8001994:	2002      	movs	r0, #2
 8001996:	f006 ffb5 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800199a:	2102      	movs	r1, #2
 800199c:	483c      	ldr	r0, [pc, #240]	@ (8001a90 <menu+0x7ec>)
 800199e:	f008 fadb 	bl	8009f58 <HAL_GPIO_ReadPin>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d119      	bne.n	80019dc <menu+0x738>
 80019a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001a94 <menu+0x7f0>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	f083 0301 	eor.w	r3, r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d012      	beq.n	80019dc <menu+0x738>
 80019b6:	4b34      	ldr	r3, [pc, #208]	@ (8001a88 <menu+0x7e4>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d10e      	bne.n	80019dc <menu+0x738>
			calismaSekli = calismaSekli + 1;
 80019be:	4b45      	ldr	r3, [pc, #276]	@ (8001ad4 <menu+0x830>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	3301      	adds	r3, #1
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4b43      	ldr	r3, [pc, #268]	@ (8001ad4 <menu+0x830>)
 80019c8:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 80019ca:	4b42      	ldr	r3, [pc, #264]	@ (8001ad4 <menu+0x830>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d902      	bls.n	80019d8 <menu+0x734>
				calismaSekli = 0;
 80019d2:	4b40      	ldr	r3, [pc, #256]	@ (8001ad4 <menu+0x830>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80019d8:	f002 f992 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80019dc:	2104      	movs	r1, #4
 80019de:	482c      	ldr	r0, [pc, #176]	@ (8001a90 <menu+0x7ec>)
 80019e0:	f008 faba 	bl	8009f58 <HAL_GPIO_ReadPin>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d119      	bne.n	8001a1e <menu+0x77a>
 80019ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001a94 <menu+0x7f0>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	f083 0301 	eor.w	r3, r3, #1
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d012      	beq.n	8001a1e <menu+0x77a>
 80019f8:	4b23      	ldr	r3, [pc, #140]	@ (8001a88 <menu+0x7e4>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d10e      	bne.n	8001a1e <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 8001a00:	4b34      	ldr	r3, [pc, #208]	@ (8001ad4 <menu+0x830>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	b2da      	uxtb	r2, r3
 8001a08:	4b32      	ldr	r3, [pc, #200]	@ (8001ad4 <menu+0x830>)
 8001a0a:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001a0c:	4b31      	ldr	r3, [pc, #196]	@ (8001ad4 <menu+0x830>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d002      	beq.n	8001a1a <menu+0x776>
	    		calismaSekli = 1;
 8001a14:	4b2f      	ldr	r3, [pc, #188]	@ (8001ad4 <menu+0x830>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001a1a:	f002 f971 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a1e:	2108      	movs	r1, #8
 8001a20:	481b      	ldr	r0, [pc, #108]	@ (8001a90 <menu+0x7ec>)
 8001a22:	f008 fa99 	bl	8009f58 <HAL_GPIO_ReadPin>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d118      	bne.n	8001a5e <menu+0x7ba>
 8001a2c:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <menu+0x7f0>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	f083 0301 	eor.w	r3, r3, #1
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d011      	beq.n	8001a5e <menu+0x7ba>
			eepromData[1] = calismaSekli;
 8001a3a:	4b26      	ldr	r3, [pc, #152]	@ (8001ad4 <menu+0x830>)
 8001a3c:	781a      	ldrb	r2, [r3, #0]
 8001a3e:	4b17      	ldr	r3, [pc, #92]	@ (8001a9c <menu+0x7f8>)
 8001a40:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001a42:	4b24      	ldr	r3, [pc, #144]	@ (8001ad4 <menu+0x830>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d106      	bne.n	8001a58 <menu+0x7b4>
				altLimit = 1;
 8001a4a:	4b25      	ldr	r3, [pc, #148]	@ (8001ae0 <menu+0x83c>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001a50:	4b23      	ldr	r3, [pc, #140]	@ (8001ae0 <menu+0x83c>)
 8001a52:	781a      	ldrb	r2, [r3, #0]
 8001a54:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <menu+0x7f8>)
 8001a56:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001a58:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac4 <menu+0x820>)
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac8 <menu+0x824>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b03      	cmp	r3, #3
 8001a64:	f040 809c 	bne.w	8001ba0 <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 8001a68:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae4 <menu+0x840>)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	f006 ff49 	bl	8008904 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001a72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ae8 <menu+0x844>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d13a      	bne.n	8001af0 <menu+0x84c>
			lcd_print(2, 1, pasifText);
 8001a7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001aec <menu+0x848>)
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	2002      	movs	r0, #2
 8001a80:	f006 ff40 	bl	8008904 <lcd_print>
 8001a84:	e03d      	b.n	8001b02 <menu+0x85e>
 8001a86:	bf00      	nop
 8001a88:	200010d3 	.word	0x200010d3
 8001a8c:	200010c6 	.word	0x200010c6
 8001a90:	40010800 	.word	0x40010800
 8001a94:	200010f3 	.word	0x200010f3
 8001a98:	200010e6 	.word	0x200010e6
 8001a9c:	20000ff0 	.word	0x20000ff0
 8001aa0:	200010e7 	.word	0x200010e7
 8001aa4:	200010e8 	.word	0x200010e8
 8001aa8:	200010e9 	.word	0x200010e9
 8001aac:	200010ea 	.word	0x200010ea
 8001ab0:	200010eb 	.word	0x200010eb
 8001ab4:	200010ec 	.word	0x200010ec
 8001ab8:	200010ed 	.word	0x200010ed
 8001abc:	200010ee 	.word	0x200010ee
 8001ac0:	200010ef 	.word	0x200010ef
 8001ac4:	200010f0 	.word	0x200010f0
 8001ac8:	200010c4 	.word	0x200010c4
 8001acc:	2000133c 	.word	0x2000133c
 8001ad0:	20001350 	.word	0x20001350
 8001ad4:	200010c5 	.word	0x200010c5
 8001ad8:	20001364 	.word	0x20001364
 8001adc:	20001378 	.word	0x20001378
 8001ae0:	200010ca 	.word	0x200010ca
 8001ae4:	2000138c 	.word	0x2000138c
 8001ae8:	200010c8 	.word	0x200010c8
 8001aec:	200013a0 	.word	0x200013a0
		} else if(emniyetCercevesi == 1) {
 8001af0:	4b6b      	ldr	r3, [pc, #428]	@ (8001ca0 <menu+0x9fc>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d104      	bne.n	8001b02 <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 8001af8:	4a6a      	ldr	r2, [pc, #424]	@ (8001ca4 <menu+0xa00>)
 8001afa:	2101      	movs	r1, #1
 8001afc:	2002      	movs	r0, #2
 8001afe:	f006 ff01 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b02:	2102      	movs	r1, #2
 8001b04:	4868      	ldr	r0, [pc, #416]	@ (8001ca8 <menu+0xa04>)
 8001b06:	f008 fa27 	bl	8009f58 <HAL_GPIO_ReadPin>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d115      	bne.n	8001b3c <menu+0x898>
 8001b10:	4b66      	ldr	r3, [pc, #408]	@ (8001cac <menu+0xa08>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	f083 0301 	eor.w	r3, r3, #1
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00e      	beq.n	8001b3c <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001b1e:	4b60      	ldr	r3, [pc, #384]	@ (8001ca0 <menu+0x9fc>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	3301      	adds	r3, #1
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4b5e      	ldr	r3, [pc, #376]	@ (8001ca0 <menu+0x9fc>)
 8001b28:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001b2a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ca0 <menu+0x9fc>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d902      	bls.n	8001b38 <menu+0x894>
				emniyetCercevesi = 0;
 8001b32:	4b5b      	ldr	r3, [pc, #364]	@ (8001ca0 <menu+0x9fc>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b38:	f002 f8e2 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b3c:	2104      	movs	r1, #4
 8001b3e:	485a      	ldr	r0, [pc, #360]	@ (8001ca8 <menu+0xa04>)
 8001b40:	f008 fa0a 	bl	8009f58 <HAL_GPIO_ReadPin>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d115      	bne.n	8001b76 <menu+0x8d2>
 8001b4a:	4b58      	ldr	r3, [pc, #352]	@ (8001cac <menu+0xa08>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	f083 0301 	eor.w	r3, r3, #1
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00e      	beq.n	8001b76 <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001b58:	4b51      	ldr	r3, [pc, #324]	@ (8001ca0 <menu+0x9fc>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	4b4f      	ldr	r3, [pc, #316]	@ (8001ca0 <menu+0x9fc>)
 8001b62:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001b64:	4b4e      	ldr	r3, [pc, #312]	@ (8001ca0 <menu+0x9fc>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d002      	beq.n	8001b72 <menu+0x8ce>
		   		emniyetCercevesi = 1;
 8001b6c:	4b4c      	ldr	r3, [pc, #304]	@ (8001ca0 <menu+0x9fc>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001b72:	f002 f8c5 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001b76:	2108      	movs	r1, #8
 8001b78:	484b      	ldr	r0, [pc, #300]	@ (8001ca8 <menu+0xa04>)
 8001b7a:	f008 f9ed 	bl	8009f58 <HAL_GPIO_ReadPin>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d10d      	bne.n	8001ba0 <menu+0x8fc>
 8001b84:	4b49      	ldr	r3, [pc, #292]	@ (8001cac <menu+0xa08>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	f083 0301 	eor.w	r3, r3, #1
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d006      	beq.n	8001ba0 <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8001b92:	4b43      	ldr	r3, [pc, #268]	@ (8001ca0 <menu+0x9fc>)
 8001b94:	781a      	ldrb	r2, [r3, #0]
 8001b96:	4b46      	ldr	r3, [pc, #280]	@ (8001cb0 <menu+0xa0c>)
 8001b98:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001b9a:	4b46      	ldr	r3, [pc, #280]	@ (8001cb4 <menu+0xa10>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001ba0:	4b45      	ldr	r3, [pc, #276]	@ (8001cb8 <menu+0xa14>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d166      	bne.n	8001c76 <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 8001ba8:	4a44      	ldr	r2, [pc, #272]	@ (8001cbc <menu+0xa18>)
 8001baa:	2101      	movs	r1, #1
 8001bac:	2001      	movs	r0, #1
 8001bae:	f006 fea9 	bl	8008904 <lcd_print>

		if(yavaslamaLimit == 0) {
 8001bb2:	4b43      	ldr	r3, [pc, #268]	@ (8001cc0 <menu+0xa1c>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d105      	bne.n	8001bc6 <menu+0x922>
			lcd_print(2, 1, pasifText);
 8001bba:	4a42      	ldr	r2, [pc, #264]	@ (8001cc4 <menu+0xa20>)
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	f006 fea0 	bl	8008904 <lcd_print>
 8001bc4:	e008      	b.n	8001bd8 <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8001bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc0 <menu+0xa1c>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d104      	bne.n	8001bd8 <menu+0x934>
			lcd_print(2, 1, aktifText);
 8001bce:	4a3e      	ldr	r2, [pc, #248]	@ (8001cc8 <menu+0xa24>)
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	2002      	movs	r0, #2
 8001bd4:	f006 fe96 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bd8:	2102      	movs	r1, #2
 8001bda:	4833      	ldr	r0, [pc, #204]	@ (8001ca8 <menu+0xa04>)
 8001bdc:	f008 f9bc 	bl	8009f58 <HAL_GPIO_ReadPin>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d115      	bne.n	8001c12 <menu+0x96e>
 8001be6:	4b31      	ldr	r3, [pc, #196]	@ (8001cac <menu+0xa08>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	f083 0301 	eor.w	r3, r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00e      	beq.n	8001c12 <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001bf4:	4b32      	ldr	r3, [pc, #200]	@ (8001cc0 <menu+0xa1c>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	4b30      	ldr	r3, [pc, #192]	@ (8001cc0 <menu+0xa1c>)
 8001bfe:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001c00:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc0 <menu+0xa1c>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d902      	bls.n	8001c0e <menu+0x96a>
				yavaslamaLimit = 0;
 8001c08:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc0 <menu+0xa1c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c0e:	f002 f877 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c12:	2104      	movs	r1, #4
 8001c14:	4824      	ldr	r0, [pc, #144]	@ (8001ca8 <menu+0xa04>)
 8001c16:	f008 f99f 	bl	8009f58 <HAL_GPIO_ReadPin>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d115      	bne.n	8001c4c <menu+0x9a8>
 8001c20:	4b22      	ldr	r3, [pc, #136]	@ (8001cac <menu+0xa08>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	f083 0301 	eor.w	r3, r3, #1
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00e      	beq.n	8001c4c <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001c2e:	4b24      	ldr	r3, [pc, #144]	@ (8001cc0 <menu+0xa1c>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4b22      	ldr	r3, [pc, #136]	@ (8001cc0 <menu+0xa1c>)
 8001c38:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001c3a:	4b21      	ldr	r3, [pc, #132]	@ (8001cc0 <menu+0xa1c>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <menu+0x9a4>
		   		yavaslamaLimit = 1;
 8001c42:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc0 <menu+0xa1c>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c48:	f002 f85a 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c4c:	2108      	movs	r1, #8
 8001c4e:	4816      	ldr	r0, [pc, #88]	@ (8001ca8 <menu+0xa04>)
 8001c50:	f008 f982 	bl	8009f58 <HAL_GPIO_ReadPin>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d10d      	bne.n	8001c76 <menu+0x9d2>
 8001c5a:	4b14      	ldr	r3, [pc, #80]	@ (8001cac <menu+0xa08>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	f083 0301 	eor.w	r3, r3, #1
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d006      	beq.n	8001c76 <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 8001c68:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <menu+0xa1c>)
 8001c6a:	781a      	ldrb	r2, [r3, #0]
 8001c6c:	4b10      	ldr	r3, [pc, #64]	@ (8001cb0 <menu+0xa0c>)
 8001c6e:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001c70:	4b10      	ldr	r3, [pc, #64]	@ (8001cb4 <menu+0xa10>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001c76:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <menu+0xa14>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b05      	cmp	r3, #5
 8001c7c:	f040 80aa 	bne.w	8001dd4 <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 8001c80:	4a12      	ldr	r2, [pc, #72]	@ (8001ccc <menu+0xa28>)
 8001c82:	2101      	movs	r1, #1
 8001c84:	2001      	movs	r0, #1
 8001c86:	f006 fe3d 	bl	8008904 <lcd_print>

		if(altLimit == 0) {
 8001c8a:	4b11      	ldr	r3, [pc, #68]	@ (8001cd0 <menu+0xa2c>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d120      	bne.n	8001cd4 <menu+0xa30>
			lcd_print(2, 1, pasifText);
 8001c92:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc4 <menu+0xa20>)
 8001c94:	2101      	movs	r1, #1
 8001c96:	2002      	movs	r0, #2
 8001c98:	f006 fe34 	bl	8008904 <lcd_print>
 8001c9c:	e023      	b.n	8001ce6 <menu+0xa42>
 8001c9e:	bf00      	nop
 8001ca0:	200010c8 	.word	0x200010c8
 8001ca4:	200000f0 	.word	0x200000f0
 8001ca8:	40010800 	.word	0x40010800
 8001cac:	200010f3 	.word	0x200010f3
 8001cb0:	20000ff0 	.word	0x20000ff0
 8001cb4:	200010f0 	.word	0x200010f0
 8001cb8:	200010c4 	.word	0x200010c4
 8001cbc:	200013c8 	.word	0x200013c8
 8001cc0:	200010c9 	.word	0x200010c9
 8001cc4:	200013a0 	.word	0x200013a0
 8001cc8:	200013b4 	.word	0x200013b4
 8001ccc:	200013dc 	.word	0x200013dc
 8001cd0:	200010ca 	.word	0x200010ca
		} else if(altLimit == 1) {
 8001cd4:	4b89      	ldr	r3, [pc, #548]	@ (8001efc <menu+0xc58>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d104      	bne.n	8001ce6 <menu+0xa42>
			lcd_print(2, 1, aktifText);
 8001cdc:	4a88      	ldr	r2, [pc, #544]	@ (8001f00 <menu+0xc5c>)
 8001cde:	2101      	movs	r1, #1
 8001ce0:	2002      	movs	r0, #2
 8001ce2:	f006 fe0f 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001ce6:	2102      	movs	r1, #2
 8001ce8:	4886      	ldr	r0, [pc, #536]	@ (8001f04 <menu+0xc60>)
 8001cea:	f008 f935 	bl	8009f58 <HAL_GPIO_ReadPin>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d119      	bne.n	8001d28 <menu+0xa84>
 8001cf4:	4b84      	ldr	r3, [pc, #528]	@ (8001f08 <menu+0xc64>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	f083 0301 	eor.w	r3, r3, #1
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d012      	beq.n	8001d28 <menu+0xa84>
 8001d02:	4b82      	ldr	r3, [pc, #520]	@ (8001f0c <menu+0xc68>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10e      	bne.n	8001d28 <menu+0xa84>
			altLimit = altLimit + 1;
 8001d0a:	4b7c      	ldr	r3, [pc, #496]	@ (8001efc <menu+0xc58>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4b7a      	ldr	r3, [pc, #488]	@ (8001efc <menu+0xc58>)
 8001d14:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001d16:	4b79      	ldr	r3, [pc, #484]	@ (8001efc <menu+0xc58>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d902      	bls.n	8001d24 <menu+0xa80>
				altLimit = 0;
 8001d1e:	4b77      	ldr	r3, [pc, #476]	@ (8001efc <menu+0xc58>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d24:	f001 ffec 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001d28:	2104      	movs	r1, #4
 8001d2a:	4876      	ldr	r0, [pc, #472]	@ (8001f04 <menu+0xc60>)
 8001d2c:	f008 f914 	bl	8009f58 <HAL_GPIO_ReadPin>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d119      	bne.n	8001d6a <menu+0xac6>
 8001d36:	4b74      	ldr	r3, [pc, #464]	@ (8001f08 <menu+0xc64>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	f083 0301 	eor.w	r3, r3, #1
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d012      	beq.n	8001d6a <menu+0xac6>
 8001d44:	4b71      	ldr	r3, [pc, #452]	@ (8001f0c <menu+0xc68>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d10e      	bne.n	8001d6a <menu+0xac6>
			altLimit = altLimit - 1;
 8001d4c:	4b6b      	ldr	r3, [pc, #428]	@ (8001efc <menu+0xc58>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	3b01      	subs	r3, #1
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	4b69      	ldr	r3, [pc, #420]	@ (8001efc <menu+0xc58>)
 8001d56:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001d58:	4b68      	ldr	r3, [pc, #416]	@ (8001efc <menu+0xc58>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d002      	beq.n	8001d66 <menu+0xac2>
		   		altLimit = 1;
 8001d60:	4b66      	ldr	r3, [pc, #408]	@ (8001efc <menu+0xc58>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d66:	f001 ffcb 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d6a:	2108      	movs	r1, #8
 8001d6c:	4865      	ldr	r0, [pc, #404]	@ (8001f04 <menu+0xc60>)
 8001d6e:	f008 f8f3 	bl	8009f58 <HAL_GPIO_ReadPin>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d12d      	bne.n	8001dd4 <menu+0xb30>
 8001d78:	4b63      	ldr	r3, [pc, #396]	@ (8001f08 <menu+0xc64>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	f083 0301 	eor.w	r3, r3, #1
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d026      	beq.n	8001dd4 <menu+0xb30>
			eepromData[5] = altLimit;
 8001d86:	4b5d      	ldr	r3, [pc, #372]	@ (8001efc <menu+0xc58>)
 8001d88:	781a      	ldrb	r2, [r3, #0]
 8001d8a:	4b61      	ldr	r3, [pc, #388]	@ (8001f10 <menu+0xc6c>)
 8001d8c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001d8e:	4b5b      	ldr	r3, [pc, #364]	@ (8001efc <menu+0xc58>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d110      	bne.n	8001db8 <menu+0xb14>
 8001d96:	4b5f      	ldr	r3, [pc, #380]	@ (8001f14 <menu+0xc70>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <menu+0xb02>
 8001d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8001f14 <menu+0xc70>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d108      	bne.n	8001db8 <menu+0xb14>
				kapiTablaAcKonum = 3;
 8001da6:	4b5b      	ldr	r3, [pc, #364]	@ (8001f14 <menu+0xc70>)
 8001da8:	2203      	movs	r2, #3
 8001daa:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001dac:	4b59      	ldr	r3, [pc, #356]	@ (8001f14 <menu+0xc70>)
 8001dae:	781a      	ldrb	r2, [r3, #0]
 8001db0:	4b57      	ldr	r3, [pc, #348]	@ (8001f10 <menu+0xc6c>)
 8001db2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001db6:	e00a      	b.n	8001dce <menu+0xb2a>
			} else if(altLimit == 0) {
 8001db8:	4b50      	ldr	r3, [pc, #320]	@ (8001efc <menu+0xc58>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d106      	bne.n	8001dce <menu+0xb2a>
				platformSilindirTipi = 0;
 8001dc0:	4b55      	ldr	r3, [pc, #340]	@ (8001f18 <menu+0xc74>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001dc6:	4b54      	ldr	r3, [pc, #336]	@ (8001f18 <menu+0xc74>)
 8001dc8:	781a      	ldrb	r2, [r3, #0]
 8001dca:	4b51      	ldr	r3, [pc, #324]	@ (8001f10 <menu+0xc6c>)
 8001dcc:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001dce:	4b53      	ldr	r3, [pc, #332]	@ (8001f1c <menu+0xc78>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001dd4:	4b52      	ldr	r3, [pc, #328]	@ (8001f20 <menu+0xc7c>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b06      	cmp	r3, #6
 8001dda:	d166      	bne.n	8001eaa <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 8001ddc:	4a51      	ldr	r2, [pc, #324]	@ (8001f24 <menu+0xc80>)
 8001dde:	2101      	movs	r1, #1
 8001de0:	2001      	movs	r0, #1
 8001de2:	f006 fd8f 	bl	8008904 <lcd_print>

		if(basincSalteri == 0) {
 8001de6:	4b50      	ldr	r3, [pc, #320]	@ (8001f28 <menu+0xc84>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d105      	bne.n	8001dfa <menu+0xb56>
			lcd_print(2, 1, pasifText);
 8001dee:	4a4f      	ldr	r2, [pc, #316]	@ (8001f2c <menu+0xc88>)
 8001df0:	2101      	movs	r1, #1
 8001df2:	2002      	movs	r0, #2
 8001df4:	f006 fd86 	bl	8008904 <lcd_print>
 8001df8:	e008      	b.n	8001e0c <menu+0xb68>
		} else if(basincSalteri == 1) {
 8001dfa:	4b4b      	ldr	r3, [pc, #300]	@ (8001f28 <menu+0xc84>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d104      	bne.n	8001e0c <menu+0xb68>
			lcd_print(2, 1, aktifText);
 8001e02:	4a3f      	ldr	r2, [pc, #252]	@ (8001f00 <menu+0xc5c>)
 8001e04:	2101      	movs	r1, #1
 8001e06:	2002      	movs	r0, #2
 8001e08:	f006 fd7c 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e0c:	2102      	movs	r1, #2
 8001e0e:	483d      	ldr	r0, [pc, #244]	@ (8001f04 <menu+0xc60>)
 8001e10:	f008 f8a2 	bl	8009f58 <HAL_GPIO_ReadPin>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d115      	bne.n	8001e46 <menu+0xba2>
 8001e1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f08 <menu+0xc64>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	f083 0301 	eor.w	r3, r3, #1
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00e      	beq.n	8001e46 <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 8001e28:	4b3f      	ldr	r3, [pc, #252]	@ (8001f28 <menu+0xc84>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	4b3d      	ldr	r3, [pc, #244]	@ (8001f28 <menu+0xc84>)
 8001e32:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001e34:	4b3c      	ldr	r3, [pc, #240]	@ (8001f28 <menu+0xc84>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d902      	bls.n	8001e42 <menu+0xb9e>
				basincSalteri = 0;
 8001e3c:	4b3a      	ldr	r3, [pc, #232]	@ (8001f28 <menu+0xc84>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e42:	f001 ff5d 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e46:	2104      	movs	r1, #4
 8001e48:	482e      	ldr	r0, [pc, #184]	@ (8001f04 <menu+0xc60>)
 8001e4a:	f008 f885 	bl	8009f58 <HAL_GPIO_ReadPin>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d115      	bne.n	8001e80 <menu+0xbdc>
 8001e54:	4b2c      	ldr	r3, [pc, #176]	@ (8001f08 <menu+0xc64>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	f083 0301 	eor.w	r3, r3, #1
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00e      	beq.n	8001e80 <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 8001e62:	4b31      	ldr	r3, [pc, #196]	@ (8001f28 <menu+0xc84>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b2da      	uxtb	r2, r3
 8001e6a:	4b2f      	ldr	r3, [pc, #188]	@ (8001f28 <menu+0xc84>)
 8001e6c:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001e6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001f28 <menu+0xc84>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <menu+0xbd8>
		   		basincSalteri = 1;
 8001e76:	4b2c      	ldr	r3, [pc, #176]	@ (8001f28 <menu+0xc84>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e7c:	f001 ff40 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e80:	2108      	movs	r1, #8
 8001e82:	4820      	ldr	r0, [pc, #128]	@ (8001f04 <menu+0xc60>)
 8001e84:	f008 f868 	bl	8009f58 <HAL_GPIO_ReadPin>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d10d      	bne.n	8001eaa <menu+0xc06>
 8001e8e:	4b1e      	ldr	r3, [pc, #120]	@ (8001f08 <menu+0xc64>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	f083 0301 	eor.w	r3, r3, #1
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d006      	beq.n	8001eaa <menu+0xc06>
			eepromData[6] = basincSalteri;
 8001e9c:	4b22      	ldr	r3, [pc, #136]	@ (8001f28 <menu+0xc84>)
 8001e9e:	781a      	ldrb	r2, [r3, #0]
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <menu+0xc6c>)
 8001ea2:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8001ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f1c <menu+0xc78>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8001f20 <menu+0xc7c>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b07      	cmp	r3, #7
 8001eb0:	f040 80a9 	bne.w	8002006 <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 8001eb4:	4a1e      	ldr	r2, [pc, #120]	@ (8001f30 <menu+0xc8c>)
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f006 fd23 	bl	8008904 <lcd_print>

		if(kapiSecimleri == 0) {
 8001ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8001f34 <menu+0xc90>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d105      	bne.n	8001ed2 <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 8001ec6:	4a19      	ldr	r2, [pc, #100]	@ (8001f2c <menu+0xc88>)
 8001ec8:	2101      	movs	r1, #1
 8001eca:	2002      	movs	r0, #2
 8001ecc:	f006 fd1a 	bl	8008904 <lcd_print>
 8001ed0:	e03f      	b.n	8001f52 <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 8001ed2:	4b18      	ldr	r3, [pc, #96]	@ (8001f34 <menu+0xc90>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d105      	bne.n	8001ee6 <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 8001eda:	4a17      	ldr	r2, [pc, #92]	@ (8001f38 <menu+0xc94>)
 8001edc:	2101      	movs	r1, #1
 8001ede:	2002      	movs	r0, #2
 8001ee0:	f006 fd10 	bl	8008904 <lcd_print>
 8001ee4:	e035      	b.n	8001f52 <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 8001ee6:	4b13      	ldr	r3, [pc, #76]	@ (8001f34 <menu+0xc90>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d128      	bne.n	8001f40 <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 8001eee:	4a13      	ldr	r2, [pc, #76]	@ (8001f3c <menu+0xc98>)
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	2002      	movs	r0, #2
 8001ef4:	f006 fd06 	bl	8008904 <lcd_print>
 8001ef8:	e02b      	b.n	8001f52 <menu+0xcae>
 8001efa:	bf00      	nop
 8001efc:	200010ca 	.word	0x200010ca
 8001f00:	200013b4 	.word	0x200013b4
 8001f04:	40010800 	.word	0x40010800
 8001f08:	200010f3 	.word	0x200010f3
 8001f0c:	200010c5 	.word	0x200010c5
 8001f10:	20000ff0 	.word	0x20000ff0
 8001f14:	200010d1 	.word	0x200010d1
 8001f18:	200010d7 	.word	0x200010d7
 8001f1c:	200010f0 	.word	0x200010f0
 8001f20:	200010c4 	.word	0x200010c4
 8001f24:	200013f0 	.word	0x200013f0
 8001f28:	200010cb 	.word	0x200010cb
 8001f2c:	200013a0 	.word	0x200013a0
 8001f30:	20001404 	.word	0x20001404
 8001f34:	200010cc 	.word	0x200010cc
 8001f38:	20001418 	.word	0x20001418
 8001f3c:	2000142c 	.word	0x2000142c
		} else if(kapiSecimleri == 3) {
 8001f40:	4b76      	ldr	r3, [pc, #472]	@ (800211c <menu+0xe78>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d104      	bne.n	8001f52 <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 8001f48:	4a75      	ldr	r2, [pc, #468]	@ (8002120 <menu+0xe7c>)
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	2002      	movs	r0, #2
 8001f4e:	f006 fcd9 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f52:	2102      	movs	r1, #2
 8001f54:	4873      	ldr	r0, [pc, #460]	@ (8002124 <menu+0xe80>)
 8001f56:	f007 ffff 	bl	8009f58 <HAL_GPIO_ReadPin>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d115      	bne.n	8001f8c <menu+0xce8>
 8001f60:	4b71      	ldr	r3, [pc, #452]	@ (8002128 <menu+0xe84>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	f083 0301 	eor.w	r3, r3, #1
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00e      	beq.n	8001f8c <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 8001f6e:	4b6b      	ldr	r3, [pc, #428]	@ (800211c <menu+0xe78>)
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	3301      	adds	r3, #1
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4b69      	ldr	r3, [pc, #420]	@ (800211c <menu+0xe78>)
 8001f78:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8001f7a:	4b68      	ldr	r3, [pc, #416]	@ (800211c <menu+0xe78>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d902      	bls.n	8001f88 <menu+0xce4>
				kapiSecimleri = 0;
 8001f82:	4b66      	ldr	r3, [pc, #408]	@ (800211c <menu+0xe78>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f88:	f001 feba 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f8c:	2104      	movs	r1, #4
 8001f8e:	4865      	ldr	r0, [pc, #404]	@ (8002124 <menu+0xe80>)
 8001f90:	f007 ffe2 	bl	8009f58 <HAL_GPIO_ReadPin>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d115      	bne.n	8001fc6 <menu+0xd22>
 8001f9a:	4b63      	ldr	r3, [pc, #396]	@ (8002128 <menu+0xe84>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	f083 0301 	eor.w	r3, r3, #1
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00e      	beq.n	8001fc6 <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 8001fa8:	4b5c      	ldr	r3, [pc, #368]	@ (800211c <menu+0xe78>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	4b5a      	ldr	r3, [pc, #360]	@ (800211c <menu+0xe78>)
 8001fb2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8001fb4:	4b59      	ldr	r3, [pc, #356]	@ (800211c <menu+0xe78>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d902      	bls.n	8001fc2 <menu+0xd1e>
		   		kapiSecimleri = 3;
 8001fbc:	4b57      	ldr	r3, [pc, #348]	@ (800211c <menu+0xe78>)
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001fc2:	f001 fe9d 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fc6:	2108      	movs	r1, #8
 8001fc8:	4856      	ldr	r0, [pc, #344]	@ (8002124 <menu+0xe80>)
 8001fca:	f007 ffc5 	bl	8009f58 <HAL_GPIO_ReadPin>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d118      	bne.n	8002006 <menu+0xd62>
 8001fd4:	4b54      	ldr	r3, [pc, #336]	@ (8002128 <menu+0xe84>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	f083 0301 	eor.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d011      	beq.n	8002006 <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 8001fe2:	4b4e      	ldr	r3, [pc, #312]	@ (800211c <menu+0xe78>)
 8001fe4:	781a      	ldrb	r2, [r3, #0]
 8001fe6:	4b51      	ldr	r3, [pc, #324]	@ (800212c <menu+0xe88>)
 8001fe8:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8001fea:	4b4c      	ldr	r3, [pc, #304]	@ (800211c <menu+0xe78>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d006      	beq.n	8002000 <menu+0xd5c>
				altLimit = 1;
 8001ff2:	4b4f      	ldr	r3, [pc, #316]	@ (8002130 <menu+0xe8c>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001ff8:	4b4d      	ldr	r3, [pc, #308]	@ (8002130 <menu+0xe8c>)
 8001ffa:	781a      	ldrb	r2, [r3, #0]
 8001ffc:	4b4b      	ldr	r3, [pc, #300]	@ (800212c <menu+0xe88>)
 8001ffe:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002000:	4b4c      	ldr	r3, [pc, #304]	@ (8002134 <menu+0xe90>)
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002006:	4b4c      	ldr	r3, [pc, #304]	@ (8002138 <menu+0xe94>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b08      	cmp	r3, #8
 800200c:	d167      	bne.n	80020de <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 800200e:	4a4b      	ldr	r2, [pc, #300]	@ (800213c <menu+0xe98>)
 8002010:	2101      	movs	r1, #1
 8002012:	2001      	movs	r0, #1
 8002014:	f006 fc76 	bl	8008904 <lcd_print>

		if(kapiAcTipi == 0) {
 8002018:	4b49      	ldr	r3, [pc, #292]	@ (8002140 <menu+0xe9c>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d105      	bne.n	800202c <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 8002020:	4a48      	ldr	r2, [pc, #288]	@ (8002144 <menu+0xea0>)
 8002022:	2101      	movs	r1, #1
 8002024:	2002      	movs	r0, #2
 8002026:	f006 fc6d 	bl	8008904 <lcd_print>
 800202a:	e008      	b.n	800203e <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 800202c:	4b44      	ldr	r3, [pc, #272]	@ (8002140 <menu+0xe9c>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d104      	bne.n	800203e <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 8002034:	4a44      	ldr	r2, [pc, #272]	@ (8002148 <menu+0xea4>)
 8002036:	2101      	movs	r1, #1
 8002038:	2002      	movs	r0, #2
 800203a:	f006 fc63 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800203e:	2102      	movs	r1, #2
 8002040:	4838      	ldr	r0, [pc, #224]	@ (8002124 <menu+0xe80>)
 8002042:	f007 ff89 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002046:	4603      	mov	r3, r0
 8002048:	2b01      	cmp	r3, #1
 800204a:	d115      	bne.n	8002078 <menu+0xdd4>
 800204c:	4b36      	ldr	r3, [pc, #216]	@ (8002128 <menu+0xe84>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	f083 0301 	eor.w	r3, r3, #1
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00e      	beq.n	8002078 <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 800205a:	4b39      	ldr	r3, [pc, #228]	@ (8002140 <menu+0xe9c>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	3301      	adds	r3, #1
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4b37      	ldr	r3, [pc, #220]	@ (8002140 <menu+0xe9c>)
 8002064:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002066:	4b36      	ldr	r3, [pc, #216]	@ (8002140 <menu+0xe9c>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d902      	bls.n	8002074 <menu+0xdd0>
				kapiAcTipi = 0;
 800206e:	4b34      	ldr	r3, [pc, #208]	@ (8002140 <menu+0xe9c>)
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002074:	f001 fe44 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002078:	2104      	movs	r1, #4
 800207a:	482a      	ldr	r0, [pc, #168]	@ (8002124 <menu+0xe80>)
 800207c:	f007 ff6c 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002080:	4603      	mov	r3, r0
 8002082:	2b01      	cmp	r3, #1
 8002084:	d115      	bne.n	80020b2 <menu+0xe0e>
 8002086:	4b28      	ldr	r3, [pc, #160]	@ (8002128 <menu+0xe84>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	f083 0301 	eor.w	r3, r3, #1
 800208e:	b2db      	uxtb	r3, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	d00e      	beq.n	80020b2 <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 8002094:	4b2a      	ldr	r3, [pc, #168]	@ (8002140 <menu+0xe9c>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	3b01      	subs	r3, #1
 800209a:	b2da      	uxtb	r2, r3
 800209c:	4b28      	ldr	r3, [pc, #160]	@ (8002140 <menu+0xe9c>)
 800209e:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80020a0:	4b27      	ldr	r3, [pc, #156]	@ (8002140 <menu+0xe9c>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <menu+0xe0a>
		   		kapiAcTipi = 1;
 80020a8:	4b25      	ldr	r3, [pc, #148]	@ (8002140 <menu+0xe9c>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020ae:	f001 fe27 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020b2:	2108      	movs	r1, #8
 80020b4:	481b      	ldr	r0, [pc, #108]	@ (8002124 <menu+0xe80>)
 80020b6:	f007 ff4f 	bl	8009f58 <HAL_GPIO_ReadPin>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d10e      	bne.n	80020de <menu+0xe3a>
 80020c0:	4b19      	ldr	r3, [pc, #100]	@ (8002128 <menu+0xe84>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	f083 0301 	eor.w	r3, r3, #1
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 80020ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002140 <menu+0xe9c>)
 80020d0:	781a      	ldrb	r2, [r3, #0]
 80020d2:	4b16      	ldr	r3, [pc, #88]	@ (800212c <menu+0xe88>)
 80020d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 80020d8:	4b16      	ldr	r3, [pc, #88]	@ (8002134 <menu+0xe90>)
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80020de:	4b16      	ldr	r3, [pc, #88]	@ (8002138 <menu+0xe94>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	2b09      	cmp	r3, #9
 80020e4:	f040 8092 	bne.w	800220c <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 80020e8:	4a18      	ldr	r2, [pc, #96]	@ (800214c <menu+0xea8>)
 80020ea:	2101      	movs	r1, #1
 80020ec:	2001      	movs	r0, #1
 80020ee:	f006 fc09 	bl	8008904 <lcd_print>

		if(kapi1Tip == 0) {
 80020f2:	4b17      	ldr	r3, [pc, #92]	@ (8002150 <menu+0xeac>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d105      	bne.n	8002106 <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 80020fa:	4a16      	ldr	r2, [pc, #88]	@ (8002154 <menu+0xeb0>)
 80020fc:	2101      	movs	r1, #1
 80020fe:	2002      	movs	r0, #2
 8002100:	f006 fc00 	bl	8008904 <lcd_print>
 8002104:	e033      	b.n	800216e <menu+0xeca>
		} else if(kapi1Tip == 1) {
 8002106:	4b12      	ldr	r3, [pc, #72]	@ (8002150 <menu+0xeac>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d126      	bne.n	800215c <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 800210e:	4a12      	ldr	r2, [pc, #72]	@ (8002158 <menu+0xeb4>)
 8002110:	2101      	movs	r1, #1
 8002112:	2002      	movs	r0, #2
 8002114:	f006 fbf6 	bl	8008904 <lcd_print>
 8002118:	e029      	b.n	800216e <menu+0xeca>
 800211a:	bf00      	nop
 800211c:	200010cc 	.word	0x200010cc
 8002120:	20001440 	.word	0x20001440
 8002124:	40010800 	.word	0x40010800
 8002128:	200010f3 	.word	0x200010f3
 800212c:	20000ff0 	.word	0x20000ff0
 8002130:	200010ca 	.word	0x200010ca
 8002134:	200010f0 	.word	0x200010f0
 8002138:	200010c4 	.word	0x200010c4
 800213c:	20001454 	.word	0x20001454
 8002140:	200010d0 	.word	0x200010d0
 8002144:	20001468 	.word	0x20001468
 8002148:	2000147c 	.word	0x2000147c
 800214c:	20001490 	.word	0x20001490
 8002150:	200010cd 	.word	0x200010cd
 8002154:	20000104 	.word	0x20000104
 8002158:	200014a4 	.word	0x200014a4
		} else if(kapi1Tip == 2) {
 800215c:	4b73      	ldr	r3, [pc, #460]	@ (800232c <menu+0x1088>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d104      	bne.n	800216e <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 8002164:	4a72      	ldr	r2, [pc, #456]	@ (8002330 <menu+0x108c>)
 8002166:	2101      	movs	r1, #1
 8002168:	2002      	movs	r0, #2
 800216a:	f006 fbcb 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800216e:	2102      	movs	r1, #2
 8002170:	4870      	ldr	r0, [pc, #448]	@ (8002334 <menu+0x1090>)
 8002172:	f007 fef1 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002176:	4603      	mov	r3, r0
 8002178:	2b01      	cmp	r3, #1
 800217a:	d115      	bne.n	80021a8 <menu+0xf04>
 800217c:	4b6e      	ldr	r3, [pc, #440]	@ (8002338 <menu+0x1094>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	f083 0301 	eor.w	r3, r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00e      	beq.n	80021a8 <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 800218a:	4b68      	ldr	r3, [pc, #416]	@ (800232c <menu+0x1088>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	3301      	adds	r3, #1
 8002190:	b2da      	uxtb	r2, r3
 8002192:	4b66      	ldr	r3, [pc, #408]	@ (800232c <menu+0x1088>)
 8002194:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002196:	4b65      	ldr	r3, [pc, #404]	@ (800232c <menu+0x1088>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d902      	bls.n	80021a4 <menu+0xf00>
				kapi1Tip = 0;
 800219e:	4b63      	ldr	r3, [pc, #396]	@ (800232c <menu+0x1088>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021a4:	f001 fdac 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021a8:	2104      	movs	r1, #4
 80021aa:	4862      	ldr	r0, [pc, #392]	@ (8002334 <menu+0x1090>)
 80021ac:	f007 fed4 	bl	8009f58 <HAL_GPIO_ReadPin>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d115      	bne.n	80021e2 <menu+0xf3e>
 80021b6:	4b60      	ldr	r3, [pc, #384]	@ (8002338 <menu+0x1094>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	f083 0301 	eor.w	r3, r3, #1
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00e      	beq.n	80021e2 <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 80021c4:	4b59      	ldr	r3, [pc, #356]	@ (800232c <menu+0x1088>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	3b01      	subs	r3, #1
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	4b57      	ldr	r3, [pc, #348]	@ (800232c <menu+0x1088>)
 80021ce:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80021d0:	4b56      	ldr	r3, [pc, #344]	@ (800232c <menu+0x1088>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d902      	bls.n	80021de <menu+0xf3a>
		   		kapi1Tip = 2;
 80021d8:	4b54      	ldr	r3, [pc, #336]	@ (800232c <menu+0x1088>)
 80021da:	2202      	movs	r2, #2
 80021dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021de:	f001 fd8f 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021e2:	2108      	movs	r1, #8
 80021e4:	4853      	ldr	r0, [pc, #332]	@ (8002334 <menu+0x1090>)
 80021e6:	f007 feb7 	bl	8009f58 <HAL_GPIO_ReadPin>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d10d      	bne.n	800220c <menu+0xf68>
 80021f0:	4b51      	ldr	r3, [pc, #324]	@ (8002338 <menu+0x1094>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	f083 0301 	eor.w	r3, r3, #1
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d006      	beq.n	800220c <menu+0xf68>
			eepromData[8] = kapi1Tip;
 80021fe:	4b4b      	ldr	r3, [pc, #300]	@ (800232c <menu+0x1088>)
 8002200:	781a      	ldrb	r2, [r3, #0]
 8002202:	4b4e      	ldr	r3, [pc, #312]	@ (800233c <menu+0x1098>)
 8002204:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002206:	4b4e      	ldr	r3, [pc, #312]	@ (8002340 <menu+0x109c>)
 8002208:	2201      	movs	r2, #1
 800220a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 800220c:	4b4d      	ldr	r3, [pc, #308]	@ (8002344 <menu+0x10a0>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b0a      	cmp	r3, #10
 8002212:	d16c      	bne.n	80022ee <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 8002214:	4a4c      	ldr	r2, [pc, #304]	@ (8002348 <menu+0x10a4>)
 8002216:	2101      	movs	r1, #1
 8002218:	2001      	movs	r0, #1
 800221a:	f006 fb73 	bl	8008904 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 800221e:	4a4b      	ldr	r2, [pc, #300]	@ (800234c <menu+0x10a8>)
 8002220:	2101      	movs	r1, #1
 8002222:	2002      	movs	r0, #2
 8002224:	f006 fb6e 	bl	8008904 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 8002228:	4b49      	ldr	r3, [pc, #292]	@ (8002350 <menu+0x10ac>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	220a      	movs	r2, #10
 800222e:	4949      	ldr	r1, [pc, #292]	@ (8002354 <menu+0x10b0>)
 8002230:	4618      	mov	r0, r3
 8002232:	f00a febd 	bl	800cfb0 <itoa>
		lcd_print(2,16,snum);
 8002236:	4a47      	ldr	r2, [pc, #284]	@ (8002354 <menu+0x10b0>)
 8002238:	2110      	movs	r1, #16
 800223a:	2002      	movs	r0, #2
 800223c:	f006 fb62 	bl	8008904 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002240:	2102      	movs	r1, #2
 8002242:	483c      	ldr	r0, [pc, #240]	@ (8002334 <menu+0x1090>)
 8002244:	f007 fe88 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002248:	4603      	mov	r3, r0
 800224a:	2b01      	cmp	r3, #1
 800224c:	d119      	bne.n	8002282 <menu+0xfde>
 800224e:	4b3a      	ldr	r3, [pc, #232]	@ (8002338 <menu+0x1094>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	f083 0301 	eor.w	r3, r3, #1
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b00      	cmp	r3, #0
 800225a:	d012      	beq.n	8002282 <menu+0xfde>
 800225c:	4b33      	ldr	r3, [pc, #204]	@ (800232c <menu+0x1088>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10e      	bne.n	8002282 <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 8002264:	4b3a      	ldr	r3, [pc, #232]	@ (8002350 <menu+0x10ac>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	3301      	adds	r3, #1
 800226a:	b2da      	uxtb	r2, r3
 800226c:	4b38      	ldr	r3, [pc, #224]	@ (8002350 <menu+0x10ac>)
 800226e:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002270:	4b37      	ldr	r3, [pc, #220]	@ (8002350 <menu+0x10ac>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b05      	cmp	r3, #5
 8002276:	d902      	bls.n	800227e <menu+0xfda>
				kapi1AcSure = 0;
 8002278:	4b35      	ldr	r3, [pc, #212]	@ (8002350 <menu+0x10ac>)
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800227e:	f001 fd3f 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002282:	2104      	movs	r1, #4
 8002284:	482b      	ldr	r0, [pc, #172]	@ (8002334 <menu+0x1090>)
 8002286:	f007 fe67 	bl	8009f58 <HAL_GPIO_ReadPin>
 800228a:	4603      	mov	r3, r0
 800228c:	2b01      	cmp	r3, #1
 800228e:	d119      	bne.n	80022c4 <menu+0x1020>
 8002290:	4b29      	ldr	r3, [pc, #164]	@ (8002338 <menu+0x1094>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	f083 0301 	eor.w	r3, r3, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d012      	beq.n	80022c4 <menu+0x1020>
 800229e:	4b23      	ldr	r3, [pc, #140]	@ (800232c <menu+0x1088>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10e      	bne.n	80022c4 <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 80022a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002350 <menu+0x10ac>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4b28      	ldr	r3, [pc, #160]	@ (8002350 <menu+0x10ac>)
 80022b0:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80022b2:	4b27      	ldr	r3, [pc, #156]	@ (8002350 <menu+0x10ac>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b06      	cmp	r3, #6
 80022b8:	d902      	bls.n	80022c0 <menu+0x101c>
		   		kapi1AcSure = 5;
 80022ba:	4b25      	ldr	r3, [pc, #148]	@ (8002350 <menu+0x10ac>)
 80022bc:	2205      	movs	r2, #5
 80022be:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022c0:	f001 fd1e 	bl	8003d00 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022c4:	2108      	movs	r1, #8
 80022c6:	481b      	ldr	r0, [pc, #108]	@ (8002334 <menu+0x1090>)
 80022c8:	f007 fe46 	bl	8009f58 <HAL_GPIO_ReadPin>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d10d      	bne.n	80022ee <menu+0x104a>
 80022d2:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <menu+0x1094>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	f083 0301 	eor.w	r3, r3, #1
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d006      	beq.n	80022ee <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 80022e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002350 <menu+0x10ac>)
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	4b15      	ldr	r3, [pc, #84]	@ (800233c <menu+0x1098>)
 80022e6:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80022e8:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <menu+0x109c>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80022ee:	4b15      	ldr	r3, [pc, #84]	@ (8002344 <menu+0x10a0>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b0b      	cmp	r3, #11
 80022f4:	f040 8090 	bne.w	8002418 <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 80022f8:	4a17      	ldr	r2, [pc, #92]	@ (8002358 <menu+0x10b4>)
 80022fa:	2101      	movs	r1, #1
 80022fc:	2001      	movs	r0, #1
 80022fe:	f006 fb01 	bl	8008904 <lcd_print>

		if(kapi2Tip == 0) {
 8002302:	4b16      	ldr	r3, [pc, #88]	@ (800235c <menu+0x10b8>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d105      	bne.n	8002316 <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 800230a:	4a15      	ldr	r2, [pc, #84]	@ (8002360 <menu+0x10bc>)
 800230c:	2101      	movs	r1, #1
 800230e:	2002      	movs	r0, #2
 8002310:	f006 faf8 	bl	8008904 <lcd_print>
 8002314:	e031      	b.n	800237a <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 8002316:	4b11      	ldr	r3, [pc, #68]	@ (800235c <menu+0x10b8>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d124      	bne.n	8002368 <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 800231e:	4a11      	ldr	r2, [pc, #68]	@ (8002364 <menu+0x10c0>)
 8002320:	2101      	movs	r1, #1
 8002322:	2002      	movs	r0, #2
 8002324:	f006 faee 	bl	8008904 <lcd_print>
 8002328:	e027      	b.n	800237a <menu+0x10d6>
 800232a:	bf00      	nop
 800232c:	200010cd 	.word	0x200010cd
 8002330:	20000118 	.word	0x20000118
 8002334:	40010800 	.word	0x40010800
 8002338:	200010f3 	.word	0x200010f3
 800233c:	20000ff0 	.word	0x20000ff0
 8002340:	200010f0 	.word	0x200010f0
 8002344:	200010c4 	.word	0x200010c4
 8002348:	200014b8 	.word	0x200014b8
 800234c:	200014cc 	.word	0x200014cc
 8002350:	200010dd 	.word	0x200010dd
 8002354:	20001060 	.word	0x20001060
 8002358:	200014e0 	.word	0x200014e0
 800235c:	200010ce 	.word	0x200010ce
 8002360:	20000104 	.word	0x20000104
 8002364:	200014a4 	.word	0x200014a4
		} else if(kapi2Tip == 2) {
 8002368:	4b73      	ldr	r3, [pc, #460]	@ (8002538 <menu+0x1294>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d104      	bne.n	800237a <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 8002370:	4a72      	ldr	r2, [pc, #456]	@ (800253c <menu+0x1298>)
 8002372:	2101      	movs	r1, #1
 8002374:	2002      	movs	r0, #2
 8002376:	f006 fac5 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800237a:	2102      	movs	r1, #2
 800237c:	4870      	ldr	r0, [pc, #448]	@ (8002540 <menu+0x129c>)
 800237e:	f007 fdeb 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002382:	4603      	mov	r3, r0
 8002384:	2b01      	cmp	r3, #1
 8002386:	d115      	bne.n	80023b4 <menu+0x1110>
 8002388:	4b6e      	ldr	r3, [pc, #440]	@ (8002544 <menu+0x12a0>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	f083 0301 	eor.w	r3, r3, #1
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00e      	beq.n	80023b4 <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 8002396:	4b68      	ldr	r3, [pc, #416]	@ (8002538 <menu+0x1294>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	3301      	adds	r3, #1
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4b66      	ldr	r3, [pc, #408]	@ (8002538 <menu+0x1294>)
 80023a0:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80023a2:	4b65      	ldr	r3, [pc, #404]	@ (8002538 <menu+0x1294>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d902      	bls.n	80023b0 <menu+0x110c>
				kapi2Tip = 0;
 80023aa:	4b63      	ldr	r3, [pc, #396]	@ (8002538 <menu+0x1294>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023b0:	f001 fca6 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023b4:	2104      	movs	r1, #4
 80023b6:	4862      	ldr	r0, [pc, #392]	@ (8002540 <menu+0x129c>)
 80023b8:	f007 fdce 	bl	8009f58 <HAL_GPIO_ReadPin>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d115      	bne.n	80023ee <menu+0x114a>
 80023c2:	4b60      	ldr	r3, [pc, #384]	@ (8002544 <menu+0x12a0>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	f083 0301 	eor.w	r3, r3, #1
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00e      	beq.n	80023ee <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 80023d0:	4b59      	ldr	r3, [pc, #356]	@ (8002538 <menu+0x1294>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	4b57      	ldr	r3, [pc, #348]	@ (8002538 <menu+0x1294>)
 80023da:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80023dc:	4b56      	ldr	r3, [pc, #344]	@ (8002538 <menu+0x1294>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d902      	bls.n	80023ea <menu+0x1146>
		   		kapi2Tip = 2;
 80023e4:	4b54      	ldr	r3, [pc, #336]	@ (8002538 <menu+0x1294>)
 80023e6:	2202      	movs	r2, #2
 80023e8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023ea:	f001 fc89 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023ee:	2108      	movs	r1, #8
 80023f0:	4853      	ldr	r0, [pc, #332]	@ (8002540 <menu+0x129c>)
 80023f2:	f007 fdb1 	bl	8009f58 <HAL_GPIO_ReadPin>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d10d      	bne.n	8002418 <menu+0x1174>
 80023fc:	4b51      	ldr	r3, [pc, #324]	@ (8002544 <menu+0x12a0>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	f083 0301 	eor.w	r3, r3, #1
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d006      	beq.n	8002418 <menu+0x1174>
			eepromData[10] = kapi2Tip;
 800240a:	4b4b      	ldr	r3, [pc, #300]	@ (8002538 <menu+0x1294>)
 800240c:	781a      	ldrb	r2, [r3, #0]
 800240e:	4b4e      	ldr	r3, [pc, #312]	@ (8002548 <menu+0x12a4>)
 8002410:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002412:	4b4e      	ldr	r3, [pc, #312]	@ (800254c <menu+0x12a8>)
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002418:	4b4d      	ldr	r3, [pc, #308]	@ (8002550 <menu+0x12ac>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b0c      	cmp	r3, #12
 800241e:	d16c      	bne.n	80024fa <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 8002420:	4a4c      	ldr	r2, [pc, #304]	@ (8002554 <menu+0x12b0>)
 8002422:	2101      	movs	r1, #1
 8002424:	2001      	movs	r0, #1
 8002426:	f006 fa6d 	bl	8008904 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 800242a:	4a4b      	ldr	r2, [pc, #300]	@ (8002558 <menu+0x12b4>)
 800242c:	2101      	movs	r1, #1
 800242e:	2002      	movs	r0, #2
 8002430:	f006 fa68 	bl	8008904 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 8002434:	4b49      	ldr	r3, [pc, #292]	@ (800255c <menu+0x12b8>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	220a      	movs	r2, #10
 800243a:	4949      	ldr	r1, [pc, #292]	@ (8002560 <menu+0x12bc>)
 800243c:	4618      	mov	r0, r3
 800243e:	f00a fdb7 	bl	800cfb0 <itoa>
		lcd_print(2,16,snum);
 8002442:	4a47      	ldr	r2, [pc, #284]	@ (8002560 <menu+0x12bc>)
 8002444:	2110      	movs	r1, #16
 8002446:	2002      	movs	r0, #2
 8002448:	f006 fa5c 	bl	8008904 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800244c:	2102      	movs	r1, #2
 800244e:	483c      	ldr	r0, [pc, #240]	@ (8002540 <menu+0x129c>)
 8002450:	f007 fd82 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002454:	4603      	mov	r3, r0
 8002456:	2b01      	cmp	r3, #1
 8002458:	d119      	bne.n	800248e <menu+0x11ea>
 800245a:	4b3a      	ldr	r3, [pc, #232]	@ (8002544 <menu+0x12a0>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	f083 0301 	eor.w	r3, r3, #1
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	d012      	beq.n	800248e <menu+0x11ea>
 8002468:	4b33      	ldr	r3, [pc, #204]	@ (8002538 <menu+0x1294>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d10e      	bne.n	800248e <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 8002470:	4b3a      	ldr	r3, [pc, #232]	@ (800255c <menu+0x12b8>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	3301      	adds	r3, #1
 8002476:	b2da      	uxtb	r2, r3
 8002478:	4b38      	ldr	r3, [pc, #224]	@ (800255c <menu+0x12b8>)
 800247a:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 800247c:	4b37      	ldr	r3, [pc, #220]	@ (800255c <menu+0x12b8>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b05      	cmp	r3, #5
 8002482:	d902      	bls.n	800248a <menu+0x11e6>
				kapi2AcSure = 0;
 8002484:	4b35      	ldr	r3, [pc, #212]	@ (800255c <menu+0x12b8>)
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800248a:	f001 fc39 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800248e:	2104      	movs	r1, #4
 8002490:	482b      	ldr	r0, [pc, #172]	@ (8002540 <menu+0x129c>)
 8002492:	f007 fd61 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002496:	4603      	mov	r3, r0
 8002498:	2b01      	cmp	r3, #1
 800249a:	d119      	bne.n	80024d0 <menu+0x122c>
 800249c:	4b29      	ldr	r3, [pc, #164]	@ (8002544 <menu+0x12a0>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	f083 0301 	eor.w	r3, r3, #1
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d012      	beq.n	80024d0 <menu+0x122c>
 80024aa:	4b23      	ldr	r3, [pc, #140]	@ (8002538 <menu+0x1294>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10e      	bne.n	80024d0 <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 80024b2:	4b2a      	ldr	r3, [pc, #168]	@ (800255c <menu+0x12b8>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b28      	ldr	r3, [pc, #160]	@ (800255c <menu+0x12b8>)
 80024bc:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 80024be:	4b27      	ldr	r3, [pc, #156]	@ (800255c <menu+0x12b8>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d902      	bls.n	80024cc <menu+0x1228>
		   		kapi2AcSure = 5;
 80024c6:	4b25      	ldr	r3, [pc, #148]	@ (800255c <menu+0x12b8>)
 80024c8:	2205      	movs	r2, #5
 80024ca:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024cc:	f001 fc18 	bl	8003d00 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024d0:	2108      	movs	r1, #8
 80024d2:	481b      	ldr	r0, [pc, #108]	@ (8002540 <menu+0x129c>)
 80024d4:	f007 fd40 	bl	8009f58 <HAL_GPIO_ReadPin>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d10d      	bne.n	80024fa <menu+0x1256>
 80024de:	4b19      	ldr	r3, [pc, #100]	@ (8002544 <menu+0x12a0>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	f083 0301 	eor.w	r3, r3, #1
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d006      	beq.n	80024fa <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 80024ec:	4b1b      	ldr	r3, [pc, #108]	@ (800255c <menu+0x12b8>)
 80024ee:	781a      	ldrb	r2, [r3, #0]
 80024f0:	4b15      	ldr	r3, [pc, #84]	@ (8002548 <menu+0x12a4>)
 80024f2:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80024f4:	4b15      	ldr	r3, [pc, #84]	@ (800254c <menu+0x12a8>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80024fa:	4b15      	ldr	r3, [pc, #84]	@ (8002550 <menu+0x12ac>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b0d      	cmp	r3, #13
 8002500:	f040 8090 	bne.w	8002624 <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 8002504:	4a17      	ldr	r2, [pc, #92]	@ (8002564 <menu+0x12c0>)
 8002506:	2101      	movs	r1, #1
 8002508:	2001      	movs	r0, #1
 800250a:	f006 f9fb 	bl	8008904 <lcd_print>

		if(kapitablaTip == 0) {
 800250e:	4b16      	ldr	r3, [pc, #88]	@ (8002568 <menu+0x12c4>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d105      	bne.n	8002522 <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 8002516:	4a15      	ldr	r2, [pc, #84]	@ (800256c <menu+0x12c8>)
 8002518:	2101      	movs	r1, #1
 800251a:	2002      	movs	r0, #2
 800251c:	f006 f9f2 	bl	8008904 <lcd_print>
 8002520:	e031      	b.n	8002586 <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 8002522:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <menu+0x12c4>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d124      	bne.n	8002574 <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 800252a:	4a11      	ldr	r2, [pc, #68]	@ (8002570 <menu+0x12cc>)
 800252c:	2101      	movs	r1, #1
 800252e:	2002      	movs	r0, #2
 8002530:	f006 f9e8 	bl	8008904 <lcd_print>
 8002534:	e027      	b.n	8002586 <menu+0x12e2>
 8002536:	bf00      	nop
 8002538:	200010ce 	.word	0x200010ce
 800253c:	20000118 	.word	0x20000118
 8002540:	40010800 	.word	0x40010800
 8002544:	200010f3 	.word	0x200010f3
 8002548:	20000ff0 	.word	0x20000ff0
 800254c:	200010f0 	.word	0x200010f0
 8002550:	200010c4 	.word	0x200010c4
 8002554:	200014f4 	.word	0x200014f4
 8002558:	200014cc 	.word	0x200014cc
 800255c:	200010de 	.word	0x200010de
 8002560:	20001060 	.word	0x20001060
 8002564:	20001508 	.word	0x20001508
 8002568:	200010cf 	.word	0x200010cf
 800256c:	20000104 	.word	0x20000104
 8002570:	200014a4 	.word	0x200014a4
		} else if(kapitablaTip == 2) {
 8002574:	4b3f      	ldr	r3, [pc, #252]	@ (8002674 <menu+0x13d0>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d104      	bne.n	8002586 <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 800257c:	4a3e      	ldr	r2, [pc, #248]	@ (8002678 <menu+0x13d4>)
 800257e:	2101      	movs	r1, #1
 8002580:	2002      	movs	r0, #2
 8002582:	f006 f9bf 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002586:	2102      	movs	r1, #2
 8002588:	483c      	ldr	r0, [pc, #240]	@ (800267c <menu+0x13d8>)
 800258a:	f007 fce5 	bl	8009f58 <HAL_GPIO_ReadPin>
 800258e:	4603      	mov	r3, r0
 8002590:	2b01      	cmp	r3, #1
 8002592:	d115      	bne.n	80025c0 <menu+0x131c>
 8002594:	4b3a      	ldr	r3, [pc, #232]	@ (8002680 <menu+0x13dc>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	f083 0301 	eor.w	r3, r3, #1
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00e      	beq.n	80025c0 <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 80025a2:	4b34      	ldr	r3, [pc, #208]	@ (8002674 <menu+0x13d0>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	3301      	adds	r3, #1
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4b32      	ldr	r3, [pc, #200]	@ (8002674 <menu+0x13d0>)
 80025ac:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 80025ae:	4b31      	ldr	r3, [pc, #196]	@ (8002674 <menu+0x13d0>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d902      	bls.n	80025bc <menu+0x1318>
				kapitablaTip = 0;
 80025b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002674 <menu+0x13d0>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025bc:	f001 fba0 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025c0:	2104      	movs	r1, #4
 80025c2:	482e      	ldr	r0, [pc, #184]	@ (800267c <menu+0x13d8>)
 80025c4:	f007 fcc8 	bl	8009f58 <HAL_GPIO_ReadPin>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d115      	bne.n	80025fa <menu+0x1356>
 80025ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002680 <menu+0x13dc>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	f083 0301 	eor.w	r3, r3, #1
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00e      	beq.n	80025fa <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 80025dc:	4b25      	ldr	r3, [pc, #148]	@ (8002674 <menu+0x13d0>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	4b23      	ldr	r3, [pc, #140]	@ (8002674 <menu+0x13d0>)
 80025e6:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 80025e8:	4b22      	ldr	r3, [pc, #136]	@ (8002674 <menu+0x13d0>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d902      	bls.n	80025f6 <menu+0x1352>
		   		kapitablaTip = 2;
 80025f0:	4b20      	ldr	r3, [pc, #128]	@ (8002674 <menu+0x13d0>)
 80025f2:	2202      	movs	r2, #2
 80025f4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025f6:	f001 fb83 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025fa:	2108      	movs	r1, #8
 80025fc:	481f      	ldr	r0, [pc, #124]	@ (800267c <menu+0x13d8>)
 80025fe:	f007 fcab 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002602:	4603      	mov	r3, r0
 8002604:	2b01      	cmp	r3, #1
 8002606:	d10d      	bne.n	8002624 <menu+0x1380>
 8002608:	4b1d      	ldr	r3, [pc, #116]	@ (8002680 <menu+0x13dc>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	f083 0301 	eor.w	r3, r3, #1
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d006      	beq.n	8002624 <menu+0x1380>
			eepromData[12] = kapitablaTip;
 8002616:	4b17      	ldr	r3, [pc, #92]	@ (8002674 <menu+0x13d0>)
 8002618:	781a      	ldrb	r2, [r3, #0]
 800261a:	4b1a      	ldr	r3, [pc, #104]	@ (8002684 <menu+0x13e0>)
 800261c:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 800261e:	4b1a      	ldr	r3, [pc, #104]	@ (8002688 <menu+0x13e4>)
 8002620:	2201      	movs	r2, #1
 8002622:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002624:	4b19      	ldr	r3, [pc, #100]	@ (800268c <menu+0x13e8>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b0e      	cmp	r3, #14
 800262a:	f040 80a3 	bne.w	8002774 <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 800262e:	4a18      	ldr	r2, [pc, #96]	@ (8002690 <menu+0x13ec>)
 8002630:	2101      	movs	r1, #1
 8002632:	2001      	movs	r0, #1
 8002634:	f006 f966 	bl	8008904 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 8002638:	4b16      	ldr	r3, [pc, #88]	@ (8002694 <menu+0x13f0>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d105      	bne.n	800264c <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 8002640:	4a15      	ldr	r2, [pc, #84]	@ (8002698 <menu+0x13f4>)
 8002642:	2101      	movs	r1, #1
 8002644:	2002      	movs	r0, #2
 8002646:	f006 f95d 	bl	8008904 <lcd_print>
 800264a:	e034      	b.n	80026b6 <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 800264c:	4b11      	ldr	r3, [pc, #68]	@ (8002694 <menu+0x13f0>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d105      	bne.n	8002660 <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 8002654:	4a11      	ldr	r2, [pc, #68]	@ (800269c <menu+0x13f8>)
 8002656:	2101      	movs	r1, #1
 8002658:	2002      	movs	r0, #2
 800265a:	f006 f953 	bl	8008904 <lcd_print>
 800265e:	e02a      	b.n	80026b6 <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 8002660:	4b0c      	ldr	r3, [pc, #48]	@ (8002694 <menu+0x13f0>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b02      	cmp	r3, #2
 8002666:	d11d      	bne.n	80026a4 <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8002668:	4a0d      	ldr	r2, [pc, #52]	@ (80026a0 <menu+0x13fc>)
 800266a:	2101      	movs	r1, #1
 800266c:	2002      	movs	r0, #2
 800266e:	f006 f949 	bl	8008904 <lcd_print>
 8002672:	e020      	b.n	80026b6 <menu+0x1412>
 8002674:	200010cf 	.word	0x200010cf
 8002678:	20000118 	.word	0x20000118
 800267c:	40010800 	.word	0x40010800
 8002680:	200010f3 	.word	0x200010f3
 8002684:	20000ff0 	.word	0x20000ff0
 8002688:	200010f0 	.word	0x200010f0
 800268c:	200010c4 	.word	0x200010c4
 8002690:	2000151c 	.word	0x2000151c
 8002694:	200010d1 	.word	0x200010d1
 8002698:	20001530 	.word	0x20001530
 800269c:	20001544 	.word	0x20001544
 80026a0:	20001558 	.word	0x20001558
		} else if(kapiTablaAcKonum == 3) {
 80026a4:	4b76      	ldr	r3, [pc, #472]	@ (8002880 <menu+0x15dc>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d104      	bne.n	80026b6 <menu+0x1412>
			lcd_print(2, 1, pasifText);
 80026ac:	4a75      	ldr	r2, [pc, #468]	@ (8002884 <menu+0x15e0>)
 80026ae:	2101      	movs	r1, #1
 80026b0:	2002      	movs	r0, #2
 80026b2:	f006 f927 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026b6:	2102      	movs	r1, #2
 80026b8:	4873      	ldr	r0, [pc, #460]	@ (8002888 <menu+0x15e4>)
 80026ba:	f007 fc4d 	bl	8009f58 <HAL_GPIO_ReadPin>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d115      	bne.n	80026f0 <menu+0x144c>
 80026c4:	4b71      	ldr	r3, [pc, #452]	@ (800288c <menu+0x15e8>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	f083 0301 	eor.w	r3, r3, #1
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00e      	beq.n	80026f0 <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 80026d2:	4b6b      	ldr	r3, [pc, #428]	@ (8002880 <menu+0x15dc>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	3301      	adds	r3, #1
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4b69      	ldr	r3, [pc, #420]	@ (8002880 <menu+0x15dc>)
 80026dc:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 80026de:	4b68      	ldr	r3, [pc, #416]	@ (8002880 <menu+0x15dc>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d902      	bls.n	80026ec <menu+0x1448>
				kapiTablaAcKonum = 0;
 80026e6:	4b66      	ldr	r3, [pc, #408]	@ (8002880 <menu+0x15dc>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026ec:	f001 fb08 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026f0:	2104      	movs	r1, #4
 80026f2:	4865      	ldr	r0, [pc, #404]	@ (8002888 <menu+0x15e4>)
 80026f4:	f007 fc30 	bl	8009f58 <HAL_GPIO_ReadPin>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d115      	bne.n	800272a <menu+0x1486>
 80026fe:	4b63      	ldr	r3, [pc, #396]	@ (800288c <menu+0x15e8>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	f083 0301 	eor.w	r3, r3, #1
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00e      	beq.n	800272a <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 800270c:	4b5c      	ldr	r3, [pc, #368]	@ (8002880 <menu+0x15dc>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	3b01      	subs	r3, #1
 8002712:	b2da      	uxtb	r2, r3
 8002714:	4b5a      	ldr	r3, [pc, #360]	@ (8002880 <menu+0x15dc>)
 8002716:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002718:	4b59      	ldr	r3, [pc, #356]	@ (8002880 <menu+0x15dc>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b03      	cmp	r3, #3
 800271e:	d902      	bls.n	8002726 <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 8002720:	4b57      	ldr	r3, [pc, #348]	@ (8002880 <menu+0x15dc>)
 8002722:	2202      	movs	r2, #2
 8002724:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002726:	f001 faeb 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800272a:	2108      	movs	r1, #8
 800272c:	4856      	ldr	r0, [pc, #344]	@ (8002888 <menu+0x15e4>)
 800272e:	f007 fc13 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002732:	4603      	mov	r3, r0
 8002734:	2b01      	cmp	r3, #1
 8002736:	d11d      	bne.n	8002774 <menu+0x14d0>
 8002738:	4b54      	ldr	r3, [pc, #336]	@ (800288c <menu+0x15e8>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	f083 0301 	eor.w	r3, r3, #1
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d016      	beq.n	8002774 <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 8002746:	4b4e      	ldr	r3, [pc, #312]	@ (8002880 <menu+0x15dc>)
 8002748:	781a      	ldrb	r2, [r3, #0]
 800274a:	4b51      	ldr	r3, [pc, #324]	@ (8002890 <menu+0x15ec>)
 800274c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002750:	4b4b      	ldr	r3, [pc, #300]	@ (8002880 <menu+0x15dc>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <menu+0x14bc>
 8002758:	4b49      	ldr	r3, [pc, #292]	@ (8002880 <menu+0x15dc>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b02      	cmp	r3, #2
 800275e:	d106      	bne.n	800276e <menu+0x14ca>
				altLimit = 1;
 8002760:	4b4c      	ldr	r3, [pc, #304]	@ (8002894 <menu+0x15f0>)
 8002762:	2201      	movs	r2, #1
 8002764:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002766:	4b4b      	ldr	r3, [pc, #300]	@ (8002894 <menu+0x15f0>)
 8002768:	781a      	ldrb	r2, [r3, #0]
 800276a:	4b49      	ldr	r3, [pc, #292]	@ (8002890 <menu+0x15ec>)
 800276c:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 800276e:	4b4a      	ldr	r3, [pc, #296]	@ (8002898 <menu+0x15f4>)
 8002770:	2201      	movs	r2, #1
 8002772:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002774:	4b49      	ldr	r3, [pc, #292]	@ (800289c <menu+0x15f8>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b0f      	cmp	r3, #15
 800277a:	d16c      	bne.n	8002856 <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 800277c:	4a48      	ldr	r2, [pc, #288]	@ (80028a0 <menu+0x15fc>)
 800277e:	2101      	movs	r1, #1
 8002780:	2001      	movs	r0, #1
 8002782:	f006 f8bf 	bl	8008904 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002786:	4a47      	ldr	r2, [pc, #284]	@ (80028a4 <menu+0x1600>)
 8002788:	2101      	movs	r1, #1
 800278a:	2002      	movs	r0, #2
 800278c:	f006 f8ba 	bl	8008904 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002790:	4b45      	ldr	r3, [pc, #276]	@ (80028a8 <menu+0x1604>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	220a      	movs	r2, #10
 8002796:	4945      	ldr	r1, [pc, #276]	@ (80028ac <menu+0x1608>)
 8002798:	4618      	mov	r0, r3
 800279a:	f00a fc09 	bl	800cfb0 <itoa>
		lcd_print(2,16,snum);
 800279e:	4a43      	ldr	r2, [pc, #268]	@ (80028ac <menu+0x1608>)
 80027a0:	2110      	movs	r1, #16
 80027a2:	2002      	movs	r0, #2
 80027a4:	f006 f8ae 	bl	8008904 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80027a8:	2102      	movs	r1, #2
 80027aa:	4837      	ldr	r0, [pc, #220]	@ (8002888 <menu+0x15e4>)
 80027ac:	f007 fbd4 	bl	8009f58 <HAL_GPIO_ReadPin>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d119      	bne.n	80027ea <menu+0x1546>
 80027b6:	4b35      	ldr	r3, [pc, #212]	@ (800288c <menu+0x15e8>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	f083 0301 	eor.w	r3, r3, #1
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d012      	beq.n	80027ea <menu+0x1546>
 80027c4:	4b3a      	ldr	r3, [pc, #232]	@ (80028b0 <menu+0x160c>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10e      	bne.n	80027ea <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80027cc:	4b36      	ldr	r3, [pc, #216]	@ (80028a8 <menu+0x1604>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	3301      	adds	r3, #1
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	4b34      	ldr	r3, [pc, #208]	@ (80028a8 <menu+0x1604>)
 80027d6:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 80027d8:	4b33      	ldr	r3, [pc, #204]	@ (80028a8 <menu+0x1604>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b05      	cmp	r3, #5
 80027de:	d902      	bls.n	80027e6 <menu+0x1542>
				kapiTablaAcSure = 0;
 80027e0:	4b31      	ldr	r3, [pc, #196]	@ (80028a8 <menu+0x1604>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027e6:	f001 fa8b 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80027ea:	2104      	movs	r1, #4
 80027ec:	4826      	ldr	r0, [pc, #152]	@ (8002888 <menu+0x15e4>)
 80027ee:	f007 fbb3 	bl	8009f58 <HAL_GPIO_ReadPin>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d119      	bne.n	800282c <menu+0x1588>
 80027f8:	4b24      	ldr	r3, [pc, #144]	@ (800288c <menu+0x15e8>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	f083 0301 	eor.w	r3, r3, #1
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d012      	beq.n	800282c <menu+0x1588>
 8002806:	4b2a      	ldr	r3, [pc, #168]	@ (80028b0 <menu+0x160c>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10e      	bne.n	800282c <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 800280e:	4b26      	ldr	r3, [pc, #152]	@ (80028a8 <menu+0x1604>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	3b01      	subs	r3, #1
 8002814:	b2da      	uxtb	r2, r3
 8002816:	4b24      	ldr	r3, [pc, #144]	@ (80028a8 <menu+0x1604>)
 8002818:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 800281a:	4b23      	ldr	r3, [pc, #140]	@ (80028a8 <menu+0x1604>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b06      	cmp	r3, #6
 8002820:	d902      	bls.n	8002828 <menu+0x1584>
		   		kapiTablaAcSure = 5;
 8002822:	4b21      	ldr	r3, [pc, #132]	@ (80028a8 <menu+0x1604>)
 8002824:	2205      	movs	r2, #5
 8002826:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002828:	f001 fa6a 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800282c:	2108      	movs	r1, #8
 800282e:	4816      	ldr	r0, [pc, #88]	@ (8002888 <menu+0x15e4>)
 8002830:	f007 fb92 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002834:	4603      	mov	r3, r0
 8002836:	2b01      	cmp	r3, #1
 8002838:	d10d      	bne.n	8002856 <menu+0x15b2>
 800283a:	4b14      	ldr	r3, [pc, #80]	@ (800288c <menu+0x15e8>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	f083 0301 	eor.w	r3, r3, #1
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b00      	cmp	r3, #0
 8002846:	d006      	beq.n	8002856 <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 8002848:	4b17      	ldr	r3, [pc, #92]	@ (80028a8 <menu+0x1604>)
 800284a:	781a      	ldrb	r2, [r3, #0]
 800284c:	4b10      	ldr	r3, [pc, #64]	@ (8002890 <menu+0x15ec>)
 800284e:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002850:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <menu+0x15f4>)
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002856:	4b11      	ldr	r3, [pc, #68]	@ (800289c <menu+0x15f8>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b10      	cmp	r3, #16
 800285c:	f040 8086 	bne.w	800296c <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002860:	4a14      	ldr	r2, [pc, #80]	@ (80028b4 <menu+0x1610>)
 8002862:	2101      	movs	r1, #1
 8002864:	2001      	movs	r0, #1
 8002866:	f006 f84d 	bl	8008904 <lcd_print>

		if(yukariYavasLimit == 0) {
 800286a:	4b13      	ldr	r3, [pc, #76]	@ (80028b8 <menu+0x1614>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d124      	bne.n	80028bc <menu+0x1618>
			lcd_print(2, 1, pasifText);
 8002872:	4a04      	ldr	r2, [pc, #16]	@ (8002884 <menu+0x15e0>)
 8002874:	2101      	movs	r1, #1
 8002876:	2002      	movs	r0, #2
 8002878:	f006 f844 	bl	8008904 <lcd_print>
 800287c:	e027      	b.n	80028ce <menu+0x162a>
 800287e:	bf00      	nop
 8002880:	200010d1 	.word	0x200010d1
 8002884:	200013a0 	.word	0x200013a0
 8002888:	40010800 	.word	0x40010800
 800288c:	200010f3 	.word	0x200010f3
 8002890:	20000ff0 	.word	0x20000ff0
 8002894:	200010ca 	.word	0x200010ca
 8002898:	200010f0 	.word	0x200010f0
 800289c:	200010c4 	.word	0x200010c4
 80028a0:	2000156c 	.word	0x2000156c
 80028a4:	200014cc 	.word	0x200014cc
 80028a8:	200010df 	.word	0x200010df
 80028ac:	20001060 	.word	0x20001060
 80028b0:	200010cf 	.word	0x200010cf
 80028b4:	20001580 	.word	0x20001580
 80028b8:	200010d2 	.word	0x200010d2
		} else if(yukariYavasLimit == 1) {
 80028bc:	4b84      	ldr	r3, [pc, #528]	@ (8002ad0 <menu+0x182c>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d104      	bne.n	80028ce <menu+0x162a>
			lcd_print(2, 1, aktifText);
 80028c4:	4a83      	ldr	r2, [pc, #524]	@ (8002ad4 <menu+0x1830>)
 80028c6:	2101      	movs	r1, #1
 80028c8:	2002      	movs	r0, #2
 80028ca:	f006 f81b 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80028ce:	2102      	movs	r1, #2
 80028d0:	4881      	ldr	r0, [pc, #516]	@ (8002ad8 <menu+0x1834>)
 80028d2:	f007 fb41 	bl	8009f58 <HAL_GPIO_ReadPin>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d115      	bne.n	8002908 <menu+0x1664>
 80028dc:	4b7f      	ldr	r3, [pc, #508]	@ (8002adc <menu+0x1838>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	f083 0301 	eor.w	r3, r3, #1
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00e      	beq.n	8002908 <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 80028ea:	4b79      	ldr	r3, [pc, #484]	@ (8002ad0 <menu+0x182c>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	3301      	adds	r3, #1
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	4b77      	ldr	r3, [pc, #476]	@ (8002ad0 <menu+0x182c>)
 80028f4:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80028f6:	4b76      	ldr	r3, [pc, #472]	@ (8002ad0 <menu+0x182c>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d902      	bls.n	8002904 <menu+0x1660>
				yukariYavasLimit = 0;
 80028fe:	4b74      	ldr	r3, [pc, #464]	@ (8002ad0 <menu+0x182c>)
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002904:	f001 f9fc 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002908:	2104      	movs	r1, #4
 800290a:	4873      	ldr	r0, [pc, #460]	@ (8002ad8 <menu+0x1834>)
 800290c:	f007 fb24 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002910:	4603      	mov	r3, r0
 8002912:	2b01      	cmp	r3, #1
 8002914:	d115      	bne.n	8002942 <menu+0x169e>
 8002916:	4b71      	ldr	r3, [pc, #452]	@ (8002adc <menu+0x1838>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	f083 0301 	eor.w	r3, r3, #1
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00e      	beq.n	8002942 <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002924:	4b6a      	ldr	r3, [pc, #424]	@ (8002ad0 <menu+0x182c>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	3b01      	subs	r3, #1
 800292a:	b2da      	uxtb	r2, r3
 800292c:	4b68      	ldr	r3, [pc, #416]	@ (8002ad0 <menu+0x182c>)
 800292e:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002930:	4b67      	ldr	r3, [pc, #412]	@ (8002ad0 <menu+0x182c>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d002      	beq.n	800293e <menu+0x169a>
		   		yukariYavasLimit = 1;
 8002938:	4b65      	ldr	r3, [pc, #404]	@ (8002ad0 <menu+0x182c>)
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800293e:	f001 f9df 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002942:	2108      	movs	r1, #8
 8002944:	4864      	ldr	r0, [pc, #400]	@ (8002ad8 <menu+0x1834>)
 8002946:	f007 fb07 	bl	8009f58 <HAL_GPIO_ReadPin>
 800294a:	4603      	mov	r3, r0
 800294c:	2b01      	cmp	r3, #1
 800294e:	d10d      	bne.n	800296c <menu+0x16c8>
 8002950:	4b62      	ldr	r3, [pc, #392]	@ (8002adc <menu+0x1838>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	f083 0301 	eor.w	r3, r3, #1
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d006      	beq.n	800296c <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 800295e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ad0 <menu+0x182c>)
 8002960:	781a      	ldrb	r2, [r3, #0]
 8002962:	4b5f      	ldr	r3, [pc, #380]	@ (8002ae0 <menu+0x183c>)
 8002964:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002966:	4b5f      	ldr	r3, [pc, #380]	@ (8002ae4 <menu+0x1840>)
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 800296c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ae8 <menu+0x1844>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b11      	cmp	r3, #17
 8002972:	f040 808b 	bne.w	8002a8c <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002976:	4a5d      	ldr	r2, [pc, #372]	@ (8002aec <menu+0x1848>)
 8002978:	2101      	movs	r1, #1
 800297a:	2001      	movs	r0, #1
 800297c:	f005 ffc2 	bl	8008904 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002980:	4b5b      	ldr	r3, [pc, #364]	@ (8002af0 <menu+0x184c>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d105      	bne.n	8002994 <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 8002988:	4a5a      	ldr	r2, [pc, #360]	@ (8002af4 <menu+0x1850>)
 800298a:	2101      	movs	r1, #1
 800298c:	2002      	movs	r0, #2
 800298e:	f005 ffb9 	bl	8008904 <lcd_print>
 8002992:	e012      	b.n	80029ba <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 8002994:	4b56      	ldr	r3, [pc, #344]	@ (8002af0 <menu+0x184c>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d105      	bne.n	80029a8 <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 800299c:	4a56      	ldr	r2, [pc, #344]	@ (8002af8 <menu+0x1854>)
 800299e:	2101      	movs	r1, #1
 80029a0:	2002      	movs	r0, #2
 80029a2:	f005 ffaf 	bl	8008904 <lcd_print>
 80029a6:	e008      	b.n	80029ba <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 80029a8:	4b51      	ldr	r3, [pc, #324]	@ (8002af0 <menu+0x184c>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d104      	bne.n	80029ba <menu+0x1716>
			lcd_print(2, 1, pasifText);
 80029b0:	4a52      	ldr	r2, [pc, #328]	@ (8002afc <menu+0x1858>)
 80029b2:	2101      	movs	r1, #1
 80029b4:	2002      	movs	r0, #2
 80029b6:	f005 ffa5 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ba:	2102      	movs	r1, #2
 80029bc:	4846      	ldr	r0, [pc, #280]	@ (8002ad8 <menu+0x1834>)
 80029be:	f007 facb 	bl	8009f58 <HAL_GPIO_ReadPin>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d115      	bne.n	80029f4 <menu+0x1750>
 80029c8:	4b44      	ldr	r3, [pc, #272]	@ (8002adc <menu+0x1838>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	f083 0301 	eor.w	r3, r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00e      	beq.n	80029f4 <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80029d6:	4b46      	ldr	r3, [pc, #280]	@ (8002af0 <menu+0x184c>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	3301      	adds	r3, #1
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	4b44      	ldr	r3, [pc, #272]	@ (8002af0 <menu+0x184c>)
 80029e0:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80029e2:	4b43      	ldr	r3, [pc, #268]	@ (8002af0 <menu+0x184c>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d902      	bls.n	80029f0 <menu+0x174c>
				devirmeYuruyusSecim = 0;
 80029ea:	4b41      	ldr	r3, [pc, #260]	@ (8002af0 <menu+0x184c>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029f0:	f001 f986 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029f4:	2104      	movs	r1, #4
 80029f6:	4838      	ldr	r0, [pc, #224]	@ (8002ad8 <menu+0x1834>)
 80029f8:	f007 faae 	bl	8009f58 <HAL_GPIO_ReadPin>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d115      	bne.n	8002a2e <menu+0x178a>
 8002a02:	4b36      	ldr	r3, [pc, #216]	@ (8002adc <menu+0x1838>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	f083 0301 	eor.w	r3, r3, #1
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00e      	beq.n	8002a2e <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002a10:	4b37      	ldr	r3, [pc, #220]	@ (8002af0 <menu+0x184c>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	4b35      	ldr	r3, [pc, #212]	@ (8002af0 <menu+0x184c>)
 8002a1a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002a1c:	4b34      	ldr	r3, [pc, #208]	@ (8002af0 <menu+0x184c>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d902      	bls.n	8002a2a <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 8002a24:	4b32      	ldr	r3, [pc, #200]	@ (8002af0 <menu+0x184c>)
 8002a26:	2202      	movs	r2, #2
 8002a28:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a2a:	f001 f969 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a2e:	2108      	movs	r1, #8
 8002a30:	4829      	ldr	r0, [pc, #164]	@ (8002ad8 <menu+0x1834>)
 8002a32:	f007 fa91 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d127      	bne.n	8002a8c <menu+0x17e8>
 8002a3c:	4b27      	ldr	r3, [pc, #156]	@ (8002adc <menu+0x1838>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	f083 0301 	eor.w	r3, r3, #1
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d020      	beq.n	8002a8c <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 8002a4a:	4b29      	ldr	r3, [pc, #164]	@ (8002af0 <menu+0x184c>)
 8002a4c:	781a      	ldrb	r2, [r3, #0]
 8002a4e:	4b24      	ldr	r3, [pc, #144]	@ (8002ae0 <menu+0x183c>)
 8002a50:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002a52:	4b27      	ldr	r3, [pc, #156]	@ (8002af0 <menu+0x184c>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d003      	beq.n	8002a62 <menu+0x17be>
 8002a5a:	4b25      	ldr	r3, [pc, #148]	@ (8002af0 <menu+0x184c>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d106      	bne.n	8002a70 <menu+0x17cc>
				calismaSekli = 0;
 8002a62:	4b27      	ldr	r3, [pc, #156]	@ (8002b00 <menu+0x185c>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002a68:	4b25      	ldr	r3, [pc, #148]	@ (8002b00 <menu+0x185c>)
 8002a6a:	781a      	ldrb	r2, [r3, #0]
 8002a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ae0 <menu+0x183c>)
 8002a6e:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002a70:	4b1f      	ldr	r3, [pc, #124]	@ (8002af0 <menu+0x184c>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d106      	bne.n	8002a86 <menu+0x17e2>
				devirmeSilindirTipi = 1;
 8002a78:	4b22      	ldr	r3, [pc, #136]	@ (8002b04 <menu+0x1860>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002a7e:	4b21      	ldr	r3, [pc, #132]	@ (8002b04 <menu+0x1860>)
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	4b17      	ldr	r3, [pc, #92]	@ (8002ae0 <menu+0x183c>)
 8002a84:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002a86:	4b17      	ldr	r3, [pc, #92]	@ (8002ae4 <menu+0x1840>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002a8c:	4b16      	ldr	r3, [pc, #88]	@ (8002ae8 <menu+0x1844>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b12      	cmp	r3, #18
 8002a92:	f040 8097 	bne.w	8002bc4 <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 8002a96:	4b16      	ldr	r3, [pc, #88]	@ (8002af0 <menu+0x184c>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d105      	bne.n	8002aaa <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 8002a9e:	4a1a      	ldr	r2, [pc, #104]	@ (8002b08 <menu+0x1864>)
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	2001      	movs	r0, #1
 8002aa4:	f005 ff2e 	bl	8008904 <lcd_print>
 8002aa8:	e008      	b.n	8002abc <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 8002aaa:	4b11      	ldr	r3, [pc, #68]	@ (8002af0 <menu+0x184c>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d104      	bne.n	8002abc <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 8002ab2:	4a16      	ldr	r2, [pc, #88]	@ (8002b0c <menu+0x1868>)
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	f005 ff24 	bl	8008904 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002abc:	4b14      	ldr	r3, [pc, #80]	@ (8002b10 <menu+0x186c>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d127      	bne.n	8002b14 <menu+0x1870>
			lcd_print(2, 1, pasifText);
 8002ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8002afc <menu+0x1858>)
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	2002      	movs	r0, #2
 8002aca:	f005 ff1b 	bl	8008904 <lcd_print>
 8002ace:	e02a      	b.n	8002b26 <menu+0x1882>
 8002ad0:	200010d2 	.word	0x200010d2
 8002ad4:	200013b4 	.word	0x200013b4
 8002ad8:	40010800 	.word	0x40010800
 8002adc:	200010f3 	.word	0x200010f3
 8002ae0:	20000ff0 	.word	0x20000ff0
 8002ae4:	200010f0 	.word	0x200010f0
 8002ae8:	200010c4 	.word	0x200010c4
 8002aec:	20001594 	.word	0x20001594
 8002af0:	200010d3 	.word	0x200010d3
 8002af4:	200015a8 	.word	0x200015a8
 8002af8:	200015bc 	.word	0x200015bc
 8002afc:	200013a0 	.word	0x200013a0
 8002b00:	200010c5 	.word	0x200010c5
 8002b04:	200010d6 	.word	0x200010d6
 8002b08:	200015d0 	.word	0x200015d0
 8002b0c:	200015e4 	.word	0x200015e4
 8002b10:	200010d4 	.word	0x200010d4
		} else if(devirmeYukariIleriLimit == 1){
 8002b14:	4b79      	ldr	r3, [pc, #484]	@ (8002cfc <menu+0x1a58>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d104      	bne.n	8002b26 <menu+0x1882>
			lcd_print(2, 1, aktifText);
 8002b1c:	4a78      	ldr	r2, [pc, #480]	@ (8002d00 <menu+0x1a5c>)
 8002b1e:	2101      	movs	r1, #1
 8002b20:	2002      	movs	r0, #2
 8002b22:	f005 feef 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b26:	2102      	movs	r1, #2
 8002b28:	4876      	ldr	r0, [pc, #472]	@ (8002d04 <menu+0x1a60>)
 8002b2a:	f007 fa15 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d115      	bne.n	8002b60 <menu+0x18bc>
 8002b34:	4b74      	ldr	r3, [pc, #464]	@ (8002d08 <menu+0x1a64>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	f083 0301 	eor.w	r3, r3, #1
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00e      	beq.n	8002b60 <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002b42:	4b6e      	ldr	r3, [pc, #440]	@ (8002cfc <menu+0x1a58>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	3301      	adds	r3, #1
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	4b6c      	ldr	r3, [pc, #432]	@ (8002cfc <menu+0x1a58>)
 8002b4c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002b4e:	4b6b      	ldr	r3, [pc, #428]	@ (8002cfc <menu+0x1a58>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d902      	bls.n	8002b5c <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 8002b56:	4b69      	ldr	r3, [pc, #420]	@ (8002cfc <menu+0x1a58>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b5c:	f001 f8d0 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b60:	2104      	movs	r1, #4
 8002b62:	4868      	ldr	r0, [pc, #416]	@ (8002d04 <menu+0x1a60>)
 8002b64:	f007 f9f8 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d115      	bne.n	8002b9a <menu+0x18f6>
 8002b6e:	4b66      	ldr	r3, [pc, #408]	@ (8002d08 <menu+0x1a64>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	f083 0301 	eor.w	r3, r3, #1
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00e      	beq.n	8002b9a <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002b7c:	4b5f      	ldr	r3, [pc, #380]	@ (8002cfc <menu+0x1a58>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	4b5d      	ldr	r3, [pc, #372]	@ (8002cfc <menu+0x1a58>)
 8002b86:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002b88:	4b5c      	ldr	r3, [pc, #368]	@ (8002cfc <menu+0x1a58>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8002b90:	4b5a      	ldr	r3, [pc, #360]	@ (8002cfc <menu+0x1a58>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b96:	f001 f8b3 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b9a:	2108      	movs	r1, #8
 8002b9c:	4859      	ldr	r0, [pc, #356]	@ (8002d04 <menu+0x1a60>)
 8002b9e:	f007 f9db 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d10d      	bne.n	8002bc4 <menu+0x1920>
 8002ba8:	4b57      	ldr	r3, [pc, #348]	@ (8002d08 <menu+0x1a64>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	f083 0301 	eor.w	r3, r3, #1
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d006      	beq.n	8002bc4 <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8002bb6:	4b51      	ldr	r3, [pc, #324]	@ (8002cfc <menu+0x1a58>)
 8002bb8:	781a      	ldrb	r2, [r3, #0]
 8002bba:	4b54      	ldr	r3, [pc, #336]	@ (8002d0c <menu+0x1a68>)
 8002bbc:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002bbe:	4b54      	ldr	r3, [pc, #336]	@ (8002d10 <menu+0x1a6c>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002bc4:	4b53      	ldr	r3, [pc, #332]	@ (8002d14 <menu+0x1a70>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b13      	cmp	r3, #19
 8002bca:	d174      	bne.n	8002cb6 <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 8002bcc:	4b52      	ldr	r3, [pc, #328]	@ (8002d18 <menu+0x1a74>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d105      	bne.n	8002be0 <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002bd4:	4a51      	ldr	r2, [pc, #324]	@ (8002d1c <menu+0x1a78>)
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	2001      	movs	r0, #1
 8002bda:	f005 fe93 	bl	8008904 <lcd_print>
 8002bde:	e008      	b.n	8002bf2 <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 8002be0:	4b4d      	ldr	r3, [pc, #308]	@ (8002d18 <menu+0x1a74>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d104      	bne.n	8002bf2 <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002be8:	4a4d      	ldr	r2, [pc, #308]	@ (8002d20 <menu+0x1a7c>)
 8002bea:	2101      	movs	r1, #1
 8002bec:	2001      	movs	r0, #1
 8002bee:	f005 fe89 	bl	8008904 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002bf2:	4b4c      	ldr	r3, [pc, #304]	@ (8002d24 <menu+0x1a80>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d105      	bne.n	8002c06 <menu+0x1962>
			lcd_print(2, 1, pasifText);
 8002bfa:	4a4b      	ldr	r2, [pc, #300]	@ (8002d28 <menu+0x1a84>)
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	2002      	movs	r0, #2
 8002c00:	f005 fe80 	bl	8008904 <lcd_print>
 8002c04:	e008      	b.n	8002c18 <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002c06:	4b47      	ldr	r3, [pc, #284]	@ (8002d24 <menu+0x1a80>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d104      	bne.n	8002c18 <menu+0x1974>
			lcd_print(2, 1, aktifText);
 8002c0e:	4a3c      	ldr	r2, [pc, #240]	@ (8002d00 <menu+0x1a5c>)
 8002c10:	2101      	movs	r1, #1
 8002c12:	2002      	movs	r0, #2
 8002c14:	f005 fe76 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c18:	2102      	movs	r1, #2
 8002c1a:	483a      	ldr	r0, [pc, #232]	@ (8002d04 <menu+0x1a60>)
 8002c1c:	f007 f99c 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d115      	bne.n	8002c52 <menu+0x19ae>
 8002c26:	4b38      	ldr	r3, [pc, #224]	@ (8002d08 <menu+0x1a64>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	f083 0301 	eor.w	r3, r3, #1
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00e      	beq.n	8002c52 <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002c34:	4b3b      	ldr	r3, [pc, #236]	@ (8002d24 <menu+0x1a80>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	4b39      	ldr	r3, [pc, #228]	@ (8002d24 <menu+0x1a80>)
 8002c3e:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002c40:	4b38      	ldr	r3, [pc, #224]	@ (8002d24 <menu+0x1a80>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d902      	bls.n	8002c4e <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 8002c48:	4b36      	ldr	r3, [pc, #216]	@ (8002d24 <menu+0x1a80>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c4e:	f001 f857 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c52:	2104      	movs	r1, #4
 8002c54:	482b      	ldr	r0, [pc, #172]	@ (8002d04 <menu+0x1a60>)
 8002c56:	f007 f97f 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d115      	bne.n	8002c8c <menu+0x19e8>
 8002c60:	4b29      	ldr	r3, [pc, #164]	@ (8002d08 <menu+0x1a64>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	f083 0301 	eor.w	r3, r3, #1
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00e      	beq.n	8002c8c <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002c6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002d24 <menu+0x1a80>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	4b2b      	ldr	r3, [pc, #172]	@ (8002d24 <menu+0x1a80>)
 8002c78:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002d24 <menu+0x1a80>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 8002c82:	4b28      	ldr	r3, [pc, #160]	@ (8002d24 <menu+0x1a80>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c88:	f001 f83a 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c8c:	2108      	movs	r1, #8
 8002c8e:	481d      	ldr	r0, [pc, #116]	@ (8002d04 <menu+0x1a60>)
 8002c90:	f007 f962 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d10d      	bne.n	8002cb6 <menu+0x1a12>
 8002c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d08 <menu+0x1a64>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	f083 0301 	eor.w	r3, r3, #1
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d006      	beq.n	8002cb6 <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002ca8:	4b1e      	ldr	r3, [pc, #120]	@ (8002d24 <menu+0x1a80>)
 8002caa:	781a      	ldrb	r2, [r3, #0]
 8002cac:	4b17      	ldr	r3, [pc, #92]	@ (8002d0c <menu+0x1a68>)
 8002cae:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002cb0:	4b17      	ldr	r3, [pc, #92]	@ (8002d10 <menu+0x1a6c>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002cb6:	4b17      	ldr	r3, [pc, #92]	@ (8002d14 <menu+0x1a70>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b14      	cmp	r3, #20
 8002cbc:	f040 809e 	bne.w	8002dfc <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 8002cc0:	4b15      	ldr	r3, [pc, #84]	@ (8002d18 <menu+0x1a74>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d105      	bne.n	8002cd4 <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 8002cc8:	4a18      	ldr	r2, [pc, #96]	@ (8002d2c <menu+0x1a88>)
 8002cca:	2101      	movs	r1, #1
 8002ccc:	2001      	movs	r0, #1
 8002cce:	f005 fe19 	bl	8008904 <lcd_print>
 8002cd2:	e008      	b.n	8002ce6 <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 8002cd4:	4b10      	ldr	r3, [pc, #64]	@ (8002d18 <menu+0x1a74>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d104      	bne.n	8002ce6 <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8002cdc:	4a14      	ldr	r2, [pc, #80]	@ (8002d30 <menu+0x1a8c>)
 8002cde:	2101      	movs	r1, #1
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	f005 fe0f 	bl	8008904 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002ce6:	4b13      	ldr	r3, [pc, #76]	@ (8002d34 <menu+0x1a90>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d126      	bne.n	8002d3c <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 8002cee:	4a12      	ldr	r2, [pc, #72]	@ (8002d38 <menu+0x1a94>)
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	2002      	movs	r0, #2
 8002cf4:	f005 fe06 	bl	8008904 <lcd_print>
 8002cf8:	e029      	b.n	8002d4e <menu+0x1aaa>
 8002cfa:	bf00      	nop
 8002cfc:	200010d4 	.word	0x200010d4
 8002d00:	200013b4 	.word	0x200013b4
 8002d04:	40010800 	.word	0x40010800
 8002d08:	200010f3 	.word	0x200010f3
 8002d0c:	20000ff0 	.word	0x20000ff0
 8002d10:	200010f0 	.word	0x200010f0
 8002d14:	200010c4 	.word	0x200010c4
 8002d18:	200010d3 	.word	0x200010d3
 8002d1c:	200015f8 	.word	0x200015f8
 8002d20:	2000160c 	.word	0x2000160c
 8002d24:	200010d5 	.word	0x200010d5
 8002d28:	200013a0 	.word	0x200013a0
 8002d2c:	20001620 	.word	0x20001620
 8002d30:	20001634 	.word	0x20001634
 8002d34:	200010d6 	.word	0x200010d6
 8002d38:	20001648 	.word	0x20001648
		} else if(devirmeSilindirTipi == 1) {
 8002d3c:	4b39      	ldr	r3, [pc, #228]	@ (8002e24 <menu+0x1b80>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d104      	bne.n	8002d4e <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 8002d44:	4a38      	ldr	r2, [pc, #224]	@ (8002e28 <menu+0x1b84>)
 8002d46:	2101      	movs	r1, #1
 8002d48:	2002      	movs	r0, #2
 8002d4a:	f005 fddb 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002d4e:	2102      	movs	r1, #2
 8002d50:	4836      	ldr	r0, [pc, #216]	@ (8002e2c <menu+0x1b88>)
 8002d52:	f007 f901 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d119      	bne.n	8002d90 <menu+0x1aec>
 8002d5c:	4b34      	ldr	r3, [pc, #208]	@ (8002e30 <menu+0x1b8c>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	f083 0301 	eor.w	r3, r3, #1
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d012      	beq.n	8002d90 <menu+0x1aec>
 8002d6a:	4b32      	ldr	r3, [pc, #200]	@ (8002e34 <menu+0x1b90>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d10e      	bne.n	8002d90 <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002d72:	4b2c      	ldr	r3, [pc, #176]	@ (8002e24 <menu+0x1b80>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	3301      	adds	r3, #1
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4b2a      	ldr	r3, [pc, #168]	@ (8002e24 <menu+0x1b80>)
 8002d7c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002d7e:	4b29      	ldr	r3, [pc, #164]	@ (8002e24 <menu+0x1b80>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d902      	bls.n	8002d8c <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 8002d86:	4b27      	ldr	r3, [pc, #156]	@ (8002e24 <menu+0x1b80>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d8c:	f000 ffb8 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002d90:	2104      	movs	r1, #4
 8002d92:	4826      	ldr	r0, [pc, #152]	@ (8002e2c <menu+0x1b88>)
 8002d94:	f007 f8e0 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d119      	bne.n	8002dd2 <menu+0x1b2e>
 8002d9e:	4b24      	ldr	r3, [pc, #144]	@ (8002e30 <menu+0x1b8c>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	f083 0301 	eor.w	r3, r3, #1
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d012      	beq.n	8002dd2 <menu+0x1b2e>
 8002dac:	4b21      	ldr	r3, [pc, #132]	@ (8002e34 <menu+0x1b90>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d10e      	bne.n	8002dd2 <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002db4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e24 <menu+0x1b80>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	4b19      	ldr	r3, [pc, #100]	@ (8002e24 <menu+0x1b80>)
 8002dbe:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002dc0:	4b18      	ldr	r3, [pc, #96]	@ (8002e24 <menu+0x1b80>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 8002dc8:	4b16      	ldr	r3, [pc, #88]	@ (8002e24 <menu+0x1b80>)
 8002dca:	2201      	movs	r2, #1
 8002dcc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002dce:	f000 ff97 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dd2:	2108      	movs	r1, #8
 8002dd4:	4815      	ldr	r0, [pc, #84]	@ (8002e2c <menu+0x1b88>)
 8002dd6:	f007 f8bf 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d10d      	bne.n	8002dfc <menu+0x1b58>
 8002de0:	4b13      	ldr	r3, [pc, #76]	@ (8002e30 <menu+0x1b8c>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	f083 0301 	eor.w	r3, r3, #1
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d006      	beq.n	8002dfc <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 8002dee:	4b0d      	ldr	r3, [pc, #52]	@ (8002e24 <menu+0x1b80>)
 8002df0:	781a      	ldrb	r2, [r3, #0]
 8002df2:	4b11      	ldr	r3, [pc, #68]	@ (8002e38 <menu+0x1b94>)
 8002df4:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002df6:	4b11      	ldr	r3, [pc, #68]	@ (8002e3c <menu+0x1b98>)
 8002df8:	2201      	movs	r2, #1
 8002dfa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002dfc:	4b10      	ldr	r3, [pc, #64]	@ (8002e40 <menu+0x1b9c>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b15      	cmp	r3, #21
 8002e02:	f040 8088 	bne.w	8002f16 <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 8002e06:	4a0f      	ldr	r2, [pc, #60]	@ (8002e44 <menu+0x1ba0>)
 8002e08:	2101      	movs	r1, #1
 8002e0a:	2001      	movs	r0, #1
 8002e0c:	f005 fd7a 	bl	8008904 <lcd_print>

		if(platformSilindirTipi == 0) {
 8002e10:	4b0d      	ldr	r3, [pc, #52]	@ (8002e48 <menu+0x1ba4>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d11b      	bne.n	8002e50 <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 8002e18:	4a0c      	ldr	r2, [pc, #48]	@ (8002e4c <menu+0x1ba8>)
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	2002      	movs	r0, #2
 8002e1e:	f005 fd71 	bl	8008904 <lcd_print>
 8002e22:	e01e      	b.n	8002e62 <menu+0x1bbe>
 8002e24:	200010d6 	.word	0x200010d6
 8002e28:	2000165c 	.word	0x2000165c
 8002e2c:	40010800 	.word	0x40010800
 8002e30:	200010f3 	.word	0x200010f3
 8002e34:	200010d3 	.word	0x200010d3
 8002e38:	20000ff0 	.word	0x20000ff0
 8002e3c:	200010f0 	.word	0x200010f0
 8002e40:	200010c4 	.word	0x200010c4
 8002e44:	20001670 	.word	0x20001670
 8002e48:	200010d7 	.word	0x200010d7
 8002e4c:	20001648 	.word	0x20001648
		} else if(platformSilindirTipi == 1) {
 8002e50:	4ba1      	ldr	r3, [pc, #644]	@ (80030d8 <menu+0x1e34>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d104      	bne.n	8002e62 <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 8002e58:	4aa0      	ldr	r2, [pc, #640]	@ (80030dc <menu+0x1e38>)
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	2002      	movs	r0, #2
 8002e5e:	f005 fd51 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e62:	2102      	movs	r1, #2
 8002e64:	489e      	ldr	r0, [pc, #632]	@ (80030e0 <menu+0x1e3c>)
 8002e66:	f007 f877 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d115      	bne.n	8002e9c <menu+0x1bf8>
 8002e70:	4b9c      	ldr	r3, [pc, #624]	@ (80030e4 <menu+0x1e40>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	f083 0301 	eor.w	r3, r3, #1
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00e      	beq.n	8002e9c <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002e7e:	4b96      	ldr	r3, [pc, #600]	@ (80030d8 <menu+0x1e34>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	3301      	adds	r3, #1
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	4b94      	ldr	r3, [pc, #592]	@ (80030d8 <menu+0x1e34>)
 8002e88:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002e8a:	4b93      	ldr	r3, [pc, #588]	@ (80030d8 <menu+0x1e34>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d902      	bls.n	8002e98 <menu+0x1bf4>
				platformSilindirTipi = 0;
 8002e92:	4b91      	ldr	r3, [pc, #580]	@ (80030d8 <menu+0x1e34>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e98:	f000 ff32 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e9c:	2104      	movs	r1, #4
 8002e9e:	4890      	ldr	r0, [pc, #576]	@ (80030e0 <menu+0x1e3c>)
 8002ea0:	f007 f85a 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d115      	bne.n	8002ed6 <menu+0x1c32>
 8002eaa:	4b8e      	ldr	r3, [pc, #568]	@ (80030e4 <menu+0x1e40>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	f083 0301 	eor.w	r3, r3, #1
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00e      	beq.n	8002ed6 <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002eb8:	4b87      	ldr	r3, [pc, #540]	@ (80030d8 <menu+0x1e34>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	4b85      	ldr	r3, [pc, #532]	@ (80030d8 <menu+0x1e34>)
 8002ec2:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002ec4:	4b84      	ldr	r3, [pc, #528]	@ (80030d8 <menu+0x1e34>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d002      	beq.n	8002ed2 <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 8002ecc:	4b82      	ldr	r3, [pc, #520]	@ (80030d8 <menu+0x1e34>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ed2:	f000 ff15 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ed6:	2108      	movs	r1, #8
 8002ed8:	4881      	ldr	r0, [pc, #516]	@ (80030e0 <menu+0x1e3c>)
 8002eda:	f007 f83d 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d118      	bne.n	8002f16 <menu+0x1c72>
 8002ee4:	4b7f      	ldr	r3, [pc, #508]	@ (80030e4 <menu+0x1e40>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	f083 0301 	eor.w	r3, r3, #1
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d011      	beq.n	8002f16 <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 8002ef2:	4b79      	ldr	r3, [pc, #484]	@ (80030d8 <menu+0x1e34>)
 8002ef4:	781a      	ldrb	r2, [r3, #0]
 8002ef6:	4b7c      	ldr	r3, [pc, #496]	@ (80030e8 <menu+0x1e44>)
 8002ef8:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002efa:	4b77      	ldr	r3, [pc, #476]	@ (80030d8 <menu+0x1e34>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d106      	bne.n	8002f10 <menu+0x1c6c>
				altLimit = 1;
 8002f02:	4b7a      	ldr	r3, [pc, #488]	@ (80030ec <menu+0x1e48>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002f08:	4b78      	ldr	r3, [pc, #480]	@ (80030ec <menu+0x1e48>)
 8002f0a:	781a      	ldrb	r2, [r3, #0]
 8002f0c:	4b76      	ldr	r3, [pc, #472]	@ (80030e8 <menu+0x1e44>)
 8002f0e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002f10:	4b77      	ldr	r3, [pc, #476]	@ (80030f0 <menu+0x1e4c>)
 8002f12:	2201      	movs	r2, #1
 8002f14:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002f16:	4b77      	ldr	r3, [pc, #476]	@ (80030f4 <menu+0x1e50>)
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b16      	cmp	r3, #22
 8002f1c:	d164      	bne.n	8002fe8 <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 8002f1e:	4a76      	ldr	r2, [pc, #472]	@ (80030f8 <menu+0x1e54>)
 8002f20:	2101      	movs	r1, #1
 8002f22:	2001      	movs	r0, #1
 8002f24:	f005 fcee 	bl	8008904 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002f28:	4a74      	ldr	r2, [pc, #464]	@ (80030fc <menu+0x1e58>)
 8002f2a:	2101      	movs	r1, #1
 8002f2c:	2002      	movs	r0, #2
 8002f2e:	f005 fce9 	bl	8008904 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 8002f32:	4b73      	ldr	r3, [pc, #460]	@ (8003100 <menu+0x1e5c>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	220a      	movs	r2, #10
 8002f38:	4972      	ldr	r1, [pc, #456]	@ (8003104 <menu+0x1e60>)
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f00a f838 	bl	800cfb0 <itoa>
		lcd_print(2,16,snum);
 8002f40:	4a70      	ldr	r2, [pc, #448]	@ (8003104 <menu+0x1e60>)
 8002f42:	2110      	movs	r1, #16
 8002f44:	2002      	movs	r0, #2
 8002f46:	f005 fcdd 	bl	8008904 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f4a:	2102      	movs	r1, #2
 8002f4c:	4864      	ldr	r0, [pc, #400]	@ (80030e0 <menu+0x1e3c>)
 8002f4e:	f007 f803 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d115      	bne.n	8002f84 <menu+0x1ce0>
 8002f58:	4b62      	ldr	r3, [pc, #392]	@ (80030e4 <menu+0x1e40>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	f083 0301 	eor.w	r3, r3, #1
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00e      	beq.n	8002f84 <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 8002f66:	4b66      	ldr	r3, [pc, #408]	@ (8003100 <menu+0x1e5c>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	4b64      	ldr	r3, [pc, #400]	@ (8003100 <menu+0x1e5c>)
 8002f70:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002f72:	4b63      	ldr	r3, [pc, #396]	@ (8003100 <menu+0x1e5c>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b05      	cmp	r3, #5
 8002f78:	d902      	bls.n	8002f80 <menu+0x1cdc>
				yukariValfTmr = 0;
 8002f7a:	4b61      	ldr	r3, [pc, #388]	@ (8003100 <menu+0x1e5c>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f80:	f000 febe 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f84:	2104      	movs	r1, #4
 8002f86:	4856      	ldr	r0, [pc, #344]	@ (80030e0 <menu+0x1e3c>)
 8002f88:	f006 ffe6 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d115      	bne.n	8002fbe <menu+0x1d1a>
 8002f92:	4b54      	ldr	r3, [pc, #336]	@ (80030e4 <menu+0x1e40>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	f083 0301 	eor.w	r3, r3, #1
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00e      	beq.n	8002fbe <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 8002fa0:	4b57      	ldr	r3, [pc, #348]	@ (8003100 <menu+0x1e5c>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	4b55      	ldr	r3, [pc, #340]	@ (8003100 <menu+0x1e5c>)
 8002faa:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002fac:	4b54      	ldr	r3, [pc, #336]	@ (8003100 <menu+0x1e5c>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b06      	cmp	r3, #6
 8002fb2:	d902      	bls.n	8002fba <menu+0x1d16>
		   		yukariValfTmr = 5;
 8002fb4:	4b52      	ldr	r3, [pc, #328]	@ (8003100 <menu+0x1e5c>)
 8002fb6:	2205      	movs	r2, #5
 8002fb8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002fba:	f000 fea1 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fbe:	2108      	movs	r1, #8
 8002fc0:	4847      	ldr	r0, [pc, #284]	@ (80030e0 <menu+0x1e3c>)
 8002fc2:	f006 ffc9 	bl	8009f58 <HAL_GPIO_ReadPin>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d10d      	bne.n	8002fe8 <menu+0x1d44>
 8002fcc:	4b45      	ldr	r3, [pc, #276]	@ (80030e4 <menu+0x1e40>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	f083 0301 	eor.w	r3, r3, #1
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d006      	beq.n	8002fe8 <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 8002fda:	4b49      	ldr	r3, [pc, #292]	@ (8003100 <menu+0x1e5c>)
 8002fdc:	781a      	ldrb	r2, [r3, #0]
 8002fde:	4b42      	ldr	r3, [pc, #264]	@ (80030e8 <menu+0x1e44>)
 8002fe0:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002fe2:	4b43      	ldr	r3, [pc, #268]	@ (80030f0 <menu+0x1e4c>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002fe8:	4b42      	ldr	r3, [pc, #264]	@ (80030f4 <menu+0x1e50>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b17      	cmp	r3, #23
 8002fee:	d164      	bne.n	80030ba <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 8002ff0:	4a45      	ldr	r2, [pc, #276]	@ (8003108 <menu+0x1e64>)
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	f005 fc85 	bl	8008904 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002ffa:	4a40      	ldr	r2, [pc, #256]	@ (80030fc <menu+0x1e58>)
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	2002      	movs	r0, #2
 8003000:	f005 fc80 	bl	8008904 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 8003004:	4b41      	ldr	r3, [pc, #260]	@ (800310c <menu+0x1e68>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	220a      	movs	r2, #10
 800300a:	493e      	ldr	r1, [pc, #248]	@ (8003104 <menu+0x1e60>)
 800300c:	4618      	mov	r0, r3
 800300e:	f009 ffcf 	bl	800cfb0 <itoa>
		lcd_print(2,16,snum);
 8003012:	4a3c      	ldr	r2, [pc, #240]	@ (8003104 <menu+0x1e60>)
 8003014:	2110      	movs	r1, #16
 8003016:	2002      	movs	r0, #2
 8003018:	f005 fc74 	bl	8008904 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800301c:	2102      	movs	r1, #2
 800301e:	4830      	ldr	r0, [pc, #192]	@ (80030e0 <menu+0x1e3c>)
 8003020:	f006 ff9a 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003024:	4603      	mov	r3, r0
 8003026:	2b01      	cmp	r3, #1
 8003028:	d115      	bne.n	8003056 <menu+0x1db2>
 800302a:	4b2e      	ldr	r3, [pc, #184]	@ (80030e4 <menu+0x1e40>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	f083 0301 	eor.w	r3, r3, #1
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00e      	beq.n	8003056 <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 8003038:	4b34      	ldr	r3, [pc, #208]	@ (800310c <menu+0x1e68>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	3301      	adds	r3, #1
 800303e:	b2da      	uxtb	r2, r3
 8003040:	4b32      	ldr	r3, [pc, #200]	@ (800310c <menu+0x1e68>)
 8003042:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003044:	4b31      	ldr	r3, [pc, #196]	@ (800310c <menu+0x1e68>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b05      	cmp	r3, #5
 800304a:	d902      	bls.n	8003052 <menu+0x1dae>
				asagiValfTmr = 0;
 800304c:	4b2f      	ldr	r3, [pc, #188]	@ (800310c <menu+0x1e68>)
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003052:	f000 fe55 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003056:	2104      	movs	r1, #4
 8003058:	4821      	ldr	r0, [pc, #132]	@ (80030e0 <menu+0x1e3c>)
 800305a:	f006 ff7d 	bl	8009f58 <HAL_GPIO_ReadPin>
 800305e:	4603      	mov	r3, r0
 8003060:	2b01      	cmp	r3, #1
 8003062:	d115      	bne.n	8003090 <menu+0x1dec>
 8003064:	4b1f      	ldr	r3, [pc, #124]	@ (80030e4 <menu+0x1e40>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	f083 0301 	eor.w	r3, r3, #1
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00e      	beq.n	8003090 <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 8003072:	4b26      	ldr	r3, [pc, #152]	@ (800310c <menu+0x1e68>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	3b01      	subs	r3, #1
 8003078:	b2da      	uxtb	r2, r3
 800307a:	4b24      	ldr	r3, [pc, #144]	@ (800310c <menu+0x1e68>)
 800307c:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 800307e:	4b23      	ldr	r3, [pc, #140]	@ (800310c <menu+0x1e68>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	2b06      	cmp	r3, #6
 8003084:	d902      	bls.n	800308c <menu+0x1de8>
		   		asagiValfTmr = 5;
 8003086:	4b21      	ldr	r3, [pc, #132]	@ (800310c <menu+0x1e68>)
 8003088:	2205      	movs	r2, #5
 800308a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800308c:	f000 fe38 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003090:	2108      	movs	r1, #8
 8003092:	4813      	ldr	r0, [pc, #76]	@ (80030e0 <menu+0x1e3c>)
 8003094:	f006 ff60 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003098:	4603      	mov	r3, r0
 800309a:	2b01      	cmp	r3, #1
 800309c:	d10d      	bne.n	80030ba <menu+0x1e16>
 800309e:	4b11      	ldr	r3, [pc, #68]	@ (80030e4 <menu+0x1e40>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	f083 0301 	eor.w	r3, r3, #1
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d006      	beq.n	80030ba <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 80030ac:	4b17      	ldr	r3, [pc, #92]	@ (800310c <menu+0x1e68>)
 80030ae:	781a      	ldrb	r2, [r3, #0]
 80030b0:	4b0d      	ldr	r3, [pc, #52]	@ (80030e8 <menu+0x1e44>)
 80030b2:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 80030b4:	4b0e      	ldr	r3, [pc, #56]	@ (80030f0 <menu+0x1e4c>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 80030ba:	4b0e      	ldr	r3, [pc, #56]	@ (80030f4 <menu+0x1e50>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b18      	cmp	r3, #24
 80030c0:	f040 8093 	bne.w	80031ea <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 80030c4:	4b12      	ldr	r3, [pc, #72]	@ (8003110 <menu+0x1e6c>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d125      	bne.n	8003118 <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 80030cc:	4a11      	ldr	r2, [pc, #68]	@ (8003114 <menu+0x1e70>)
 80030ce:	2101      	movs	r1, #1
 80030d0:	2001      	movs	r0, #1
 80030d2:	f005 fc17 	bl	8008904 <lcd_print>
 80030d6:	e028      	b.n	800312a <menu+0x1e86>
 80030d8:	200010d7 	.word	0x200010d7
 80030dc:	2000165c 	.word	0x2000165c
 80030e0:	40010800 	.word	0x40010800
 80030e4:	200010f3 	.word	0x200010f3
 80030e8:	20000ff0 	.word	0x20000ff0
 80030ec:	200010ca 	.word	0x200010ca
 80030f0:	200010f0 	.word	0x200010f0
 80030f4:	200010c4 	.word	0x200010c4
 80030f8:	20001684 	.word	0x20001684
 80030fc:	200014cc 	.word	0x200014cc
 8003100:	200010d8 	.word	0x200010d8
 8003104:	20001060 	.word	0x20001060
 8003108:	20001698 	.word	0x20001698
 800310c:	200010d9 	.word	0x200010d9
 8003110:	200010d3 	.word	0x200010d3
 8003114:	200016ac 	.word	0x200016ac
		} else if(devirmeYuruyusSecim == 1) {
 8003118:	4b8c      	ldr	r3, [pc, #560]	@ (800334c <menu+0x20a8>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d104      	bne.n	800312a <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 8003120:	4a8b      	ldr	r2, [pc, #556]	@ (8003350 <menu+0x20ac>)
 8003122:	2101      	movs	r1, #1
 8003124:	2001      	movs	r0, #1
 8003126:	f005 fbed 	bl	8008904 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 800312a:	4a8a      	ldr	r2, [pc, #552]	@ (8003354 <menu+0x20b0>)
 800312c:	2101      	movs	r1, #1
 800312e:	2002      	movs	r0, #2
 8003130:	f005 fbe8 	bl	8008904 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003134:	4b88      	ldr	r3, [pc, #544]	@ (8003358 <menu+0x20b4>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	220a      	movs	r2, #10
 800313a:	4988      	ldr	r1, [pc, #544]	@ (800335c <menu+0x20b8>)
 800313c:	4618      	mov	r0, r3
 800313e:	f009 ff37 	bl	800cfb0 <itoa>
		lcd_print(2, 16, snum);
 8003142:	4a86      	ldr	r2, [pc, #536]	@ (800335c <menu+0x20b8>)
 8003144:	2110      	movs	r1, #16
 8003146:	2002      	movs	r0, #2
 8003148:	f005 fbdc 	bl	8008904 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800314c:	2102      	movs	r1, #2
 800314e:	4884      	ldr	r0, [pc, #528]	@ (8003360 <menu+0x20bc>)
 8003150:	f006 ff02 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003154:	4603      	mov	r3, r0
 8003156:	2b01      	cmp	r3, #1
 8003158:	d115      	bne.n	8003186 <menu+0x1ee2>
 800315a:	4b82      	ldr	r3, [pc, #520]	@ (8003364 <menu+0x20c0>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	f083 0301 	eor.w	r3, r3, #1
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00e      	beq.n	8003186 <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003168:	4b7b      	ldr	r3, [pc, #492]	@ (8003358 <menu+0x20b4>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	3301      	adds	r3, #1
 800316e:	b2da      	uxtb	r2, r3
 8003170:	4b79      	ldr	r3, [pc, #484]	@ (8003358 <menu+0x20b4>)
 8003172:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003174:	4b78      	ldr	r3, [pc, #480]	@ (8003358 <menu+0x20b4>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b05      	cmp	r3, #5
 800317a:	d902      	bls.n	8003182 <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 800317c:	4b76      	ldr	r3, [pc, #472]	@ (8003358 <menu+0x20b4>)
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003182:	f000 fdbd 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003186:	2104      	movs	r1, #4
 8003188:	4875      	ldr	r0, [pc, #468]	@ (8003360 <menu+0x20bc>)
 800318a:	f006 fee5 	bl	8009f58 <HAL_GPIO_ReadPin>
 800318e:	4603      	mov	r3, r0
 8003190:	2b01      	cmp	r3, #1
 8003192:	d115      	bne.n	80031c0 <menu+0x1f1c>
 8003194:	4b73      	ldr	r3, [pc, #460]	@ (8003364 <menu+0x20c0>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	f083 0301 	eor.w	r3, r3, #1
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00e      	beq.n	80031c0 <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 80031a2:	4b6d      	ldr	r3, [pc, #436]	@ (8003358 <menu+0x20b4>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	4b6b      	ldr	r3, [pc, #428]	@ (8003358 <menu+0x20b4>)
 80031ac:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 80031ae:	4b6a      	ldr	r3, [pc, #424]	@ (8003358 <menu+0x20b4>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b06      	cmp	r3, #6
 80031b4:	d902      	bls.n	80031bc <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 80031b6:	4b68      	ldr	r3, [pc, #416]	@ (8003358 <menu+0x20b4>)
 80031b8:	2205      	movs	r2, #5
 80031ba:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031bc:	f000 fda0 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031c0:	2108      	movs	r1, #8
 80031c2:	4867      	ldr	r0, [pc, #412]	@ (8003360 <menu+0x20bc>)
 80031c4:	f006 fec8 	bl	8009f58 <HAL_GPIO_ReadPin>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d10d      	bne.n	80031ea <menu+0x1f46>
 80031ce:	4b65      	ldr	r3, [pc, #404]	@ (8003364 <menu+0x20c0>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	f083 0301 	eor.w	r3, r3, #1
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d006      	beq.n	80031ea <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 80031dc:	4b5e      	ldr	r3, [pc, #376]	@ (8003358 <menu+0x20b4>)
 80031de:	781a      	ldrb	r2, [r3, #0]
 80031e0:	4b61      	ldr	r3, [pc, #388]	@ (8003368 <menu+0x20c4>)
 80031e2:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 80031e4:	4b61      	ldr	r3, [pc, #388]	@ (800336c <menu+0x20c8>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 80031ea:	4b61      	ldr	r3, [pc, #388]	@ (8003370 <menu+0x20cc>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b19      	cmp	r3, #25
 80031f0:	d172      	bne.n	80032d8 <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 80031f2:	4b56      	ldr	r3, [pc, #344]	@ (800334c <menu+0x20a8>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d105      	bne.n	8003206 <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 80031fa:	4a5e      	ldr	r2, [pc, #376]	@ (8003374 <menu+0x20d0>)
 80031fc:	2101      	movs	r1, #1
 80031fe:	2001      	movs	r0, #1
 8003200:	f005 fb80 	bl	8008904 <lcd_print>
 8003204:	e008      	b.n	8003218 <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 8003206:	4b51      	ldr	r3, [pc, #324]	@ (800334c <menu+0x20a8>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d104      	bne.n	8003218 <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 800320e:	4a5a      	ldr	r2, [pc, #360]	@ (8003378 <menu+0x20d4>)
 8003210:	2101      	movs	r1, #1
 8003212:	2001      	movs	r0, #1
 8003214:	f005 fb76 	bl	8008904 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003218:	4a4e      	ldr	r2, [pc, #312]	@ (8003354 <menu+0x20b0>)
 800321a:	2101      	movs	r1, #1
 800321c:	2002      	movs	r0, #2
 800321e:	f005 fb71 	bl	8008904 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003222:	4b56      	ldr	r3, [pc, #344]	@ (800337c <menu+0x20d8>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	220a      	movs	r2, #10
 8003228:	494c      	ldr	r1, [pc, #304]	@ (800335c <menu+0x20b8>)
 800322a:	4618      	mov	r0, r3
 800322c:	f009 fec0 	bl	800cfb0 <itoa>
		lcd_print(2,16,snum);
 8003230:	4a4a      	ldr	r2, [pc, #296]	@ (800335c <menu+0x20b8>)
 8003232:	2110      	movs	r1, #16
 8003234:	2002      	movs	r0, #2
 8003236:	f005 fb65 	bl	8008904 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800323a:	2102      	movs	r1, #2
 800323c:	4848      	ldr	r0, [pc, #288]	@ (8003360 <menu+0x20bc>)
 800323e:	f006 fe8b 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003242:	4603      	mov	r3, r0
 8003244:	2b01      	cmp	r3, #1
 8003246:	d115      	bne.n	8003274 <menu+0x1fd0>
 8003248:	4b46      	ldr	r3, [pc, #280]	@ (8003364 <menu+0x20c0>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	f083 0301 	eor.w	r3, r3, #1
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00e      	beq.n	8003274 <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003256:	4b49      	ldr	r3, [pc, #292]	@ (800337c <menu+0x20d8>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	3301      	adds	r3, #1
 800325c:	b2da      	uxtb	r2, r3
 800325e:	4b47      	ldr	r3, [pc, #284]	@ (800337c <menu+0x20d8>)
 8003260:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003262:	4b46      	ldr	r3, [pc, #280]	@ (800337c <menu+0x20d8>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	2b05      	cmp	r3, #5
 8003268:	d902      	bls.n	8003270 <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 800326a:	4b44      	ldr	r3, [pc, #272]	@ (800337c <menu+0x20d8>)
 800326c:	2200      	movs	r2, #0
 800326e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003270:	f000 fd46 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003274:	2104      	movs	r1, #4
 8003276:	483a      	ldr	r0, [pc, #232]	@ (8003360 <menu+0x20bc>)
 8003278:	f006 fe6e 	bl	8009f58 <HAL_GPIO_ReadPin>
 800327c:	4603      	mov	r3, r0
 800327e:	2b01      	cmp	r3, #1
 8003280:	d115      	bne.n	80032ae <menu+0x200a>
 8003282:	4b38      	ldr	r3, [pc, #224]	@ (8003364 <menu+0x20c0>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	f083 0301 	eor.w	r3, r3, #1
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00e      	beq.n	80032ae <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003290:	4b3a      	ldr	r3, [pc, #232]	@ (800337c <menu+0x20d8>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	3b01      	subs	r3, #1
 8003296:	b2da      	uxtb	r2, r3
 8003298:	4b38      	ldr	r3, [pc, #224]	@ (800337c <menu+0x20d8>)
 800329a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 800329c:	4b37      	ldr	r3, [pc, #220]	@ (800337c <menu+0x20d8>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b06      	cmp	r3, #6
 80032a2:	d902      	bls.n	80032aa <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 80032a4:	4b35      	ldr	r3, [pc, #212]	@ (800337c <menu+0x20d8>)
 80032a6:	2205      	movs	r2, #5
 80032a8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032aa:	f000 fd29 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ae:	2108      	movs	r1, #8
 80032b0:	482b      	ldr	r0, [pc, #172]	@ (8003360 <menu+0x20bc>)
 80032b2:	f006 fe51 	bl	8009f58 <HAL_GPIO_ReadPin>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d10d      	bne.n	80032d8 <menu+0x2034>
 80032bc:	4b29      	ldr	r3, [pc, #164]	@ (8003364 <menu+0x20c0>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	f083 0301 	eor.w	r3, r3, #1
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d006      	beq.n	80032d8 <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 80032ca:	4b2c      	ldr	r3, [pc, #176]	@ (800337c <menu+0x20d8>)
 80032cc:	781a      	ldrb	r2, [r3, #0]
 80032ce:	4b26      	ldr	r3, [pc, #152]	@ (8003368 <menu+0x20c4>)
 80032d0:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 80032d2:	4b26      	ldr	r3, [pc, #152]	@ (800336c <menu+0x20c8>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 80032d8:	4b25      	ldr	r3, [pc, #148]	@ (8003370 <menu+0x20cc>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b1a      	cmp	r3, #26
 80032de:	f040 80b7 	bne.w	8003450 <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 80032e2:	4a27      	ldr	r2, [pc, #156]	@ (8003380 <menu+0x20dc>)
 80032e4:	2101      	movs	r1, #1
 80032e6:	2001      	movs	r0, #1
 80032e8:	f005 fb0c 	bl	8008904 <lcd_print>

		if(makineCalismaTmr > 99) {
 80032ec:	4b25      	ldr	r3, [pc, #148]	@ (8003384 <menu+0x20e0>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b63      	cmp	r3, #99	@ 0x63
 80032f2:	d911      	bls.n	8003318 <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 80032f4:	4a17      	ldr	r2, [pc, #92]	@ (8003354 <menu+0x20b0>)
 80032f6:	2101      	movs	r1, #1
 80032f8:	2002      	movs	r0, #2
 80032fa:	f005 fb03 	bl	8008904 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80032fe:	4b21      	ldr	r3, [pc, #132]	@ (8003384 <menu+0x20e0>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	220a      	movs	r2, #10
 8003304:	4915      	ldr	r1, [pc, #84]	@ (800335c <menu+0x20b8>)
 8003306:	4618      	mov	r0, r3
 8003308:	f009 fe52 	bl	800cfb0 <itoa>
			lcd_print(2,14,snum);
 800330c:	4a13      	ldr	r2, [pc, #76]	@ (800335c <menu+0x20b8>)
 800330e:	210e      	movs	r1, #14
 8003310:	2002      	movs	r0, #2
 8003312:	f005 faf7 	bl	8008904 <lcd_print>
 8003316:	e04c      	b.n	80033b2 <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003318:	4b1a      	ldr	r3, [pc, #104]	@ (8003384 <menu+0x20e0>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b09      	cmp	r3, #9
 800331e:	d933      	bls.n	8003388 <menu+0x20e4>
 8003320:	4b18      	ldr	r3, [pc, #96]	@ (8003384 <menu+0x20e0>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b63      	cmp	r3, #99	@ 0x63
 8003326:	d82f      	bhi.n	8003388 <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 8003328:	4a0a      	ldr	r2, [pc, #40]	@ (8003354 <menu+0x20b0>)
 800332a:	2101      	movs	r1, #1
 800332c:	2002      	movs	r0, #2
 800332e:	f005 fae9 	bl	8008904 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003332:	4b14      	ldr	r3, [pc, #80]	@ (8003384 <menu+0x20e0>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	220a      	movs	r2, #10
 8003338:	4908      	ldr	r1, [pc, #32]	@ (800335c <menu+0x20b8>)
 800333a:	4618      	mov	r0, r3
 800333c:	f009 fe38 	bl	800cfb0 <itoa>
			lcd_print(2, 15, snum);
 8003340:	4a06      	ldr	r2, [pc, #24]	@ (800335c <menu+0x20b8>)
 8003342:	210f      	movs	r1, #15
 8003344:	2002      	movs	r0, #2
 8003346:	f005 fadd 	bl	8008904 <lcd_print>
 800334a:	e032      	b.n	80033b2 <menu+0x210e>
 800334c:	200010d3 	.word	0x200010d3
 8003350:	200016c0 	.word	0x200016c0
 8003354:	200014cc 	.word	0x200014cc
 8003358:	200010da 	.word	0x200010da
 800335c:	20001060 	.word	0x20001060
 8003360:	40010800 	.word	0x40010800
 8003364:	200010f3 	.word	0x200010f3
 8003368:	20000ff0 	.word	0x20000ff0
 800336c:	200010f0 	.word	0x200010f0
 8003370:	200010c4 	.word	0x200010c4
 8003374:	200016d4 	.word	0x200016d4
 8003378:	200016e8 	.word	0x200016e8
 800337c:	200010db 	.word	0x200010db
 8003380:	200016fc 	.word	0x200016fc
 8003384:	200010dc 	.word	0x200010dc
		} else if(makineCalismaTmr <=  9) {
 8003388:	4b72      	ldr	r3, [pc, #456]	@ (8003554 <menu+0x22b0>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b09      	cmp	r3, #9
 800338e:	d810      	bhi.n	80033b2 <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 8003390:	4a71      	ldr	r2, [pc, #452]	@ (8003558 <menu+0x22b4>)
 8003392:	2101      	movs	r1, #1
 8003394:	2002      	movs	r0, #2
 8003396:	f005 fab5 	bl	8008904 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800339a:	4b6e      	ldr	r3, [pc, #440]	@ (8003554 <menu+0x22b0>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	220a      	movs	r2, #10
 80033a0:	496e      	ldr	r1, [pc, #440]	@ (800355c <menu+0x22b8>)
 80033a2:	4618      	mov	r0, r3
 80033a4:	f009 fe04 	bl	800cfb0 <itoa>
			lcd_print(2, 16, snum);
 80033a8:	4a6c      	ldr	r2, [pc, #432]	@ (800355c <menu+0x22b8>)
 80033aa:	2110      	movs	r1, #16
 80033ac:	2002      	movs	r0, #2
 80033ae:	f005 faa9 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033b2:	2102      	movs	r1, #2
 80033b4:	486a      	ldr	r0, [pc, #424]	@ (8003560 <menu+0x22bc>)
 80033b6:	f006 fdcf 	bl	8009f58 <HAL_GPIO_ReadPin>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d115      	bne.n	80033ec <menu+0x2148>
 80033c0:	4b68      	ldr	r3, [pc, #416]	@ (8003564 <menu+0x22c0>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	f083 0301 	eor.w	r3, r3, #1
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00e      	beq.n	80033ec <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 80033ce:	4b61      	ldr	r3, [pc, #388]	@ (8003554 <menu+0x22b0>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	3301      	adds	r3, #1
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4b5f      	ldr	r3, [pc, #380]	@ (8003554 <menu+0x22b0>)
 80033d8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80033da:	4b5e      	ldr	r3, [pc, #376]	@ (8003554 <menu+0x22b0>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2bb4      	cmp	r3, #180	@ 0xb4
 80033e0:	d902      	bls.n	80033e8 <menu+0x2144>
				makineCalismaTmr = 0;
 80033e2:	4b5c      	ldr	r3, [pc, #368]	@ (8003554 <menu+0x22b0>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033e8:	f000 fc8a 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033ec:	2104      	movs	r1, #4
 80033ee:	485c      	ldr	r0, [pc, #368]	@ (8003560 <menu+0x22bc>)
 80033f0:	f006 fdb2 	bl	8009f58 <HAL_GPIO_ReadPin>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d115      	bne.n	8003426 <menu+0x2182>
 80033fa:	4b5a      	ldr	r3, [pc, #360]	@ (8003564 <menu+0x22c0>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	f083 0301 	eor.w	r3, r3, #1
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00e      	beq.n	8003426 <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003408:	4b52      	ldr	r3, [pc, #328]	@ (8003554 <menu+0x22b0>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	3b01      	subs	r3, #1
 800340e:	b2da      	uxtb	r2, r3
 8003410:	4b50      	ldr	r3, [pc, #320]	@ (8003554 <menu+0x22b0>)
 8003412:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003414:	4b4f      	ldr	r3, [pc, #316]	@ (8003554 <menu+0x22b0>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2bb5      	cmp	r3, #181	@ 0xb5
 800341a:	d902      	bls.n	8003422 <menu+0x217e>
		   		makineCalismaTmr = 180;
 800341c:	4b4d      	ldr	r3, [pc, #308]	@ (8003554 <menu+0x22b0>)
 800341e:	22b4      	movs	r2, #180	@ 0xb4
 8003420:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003422:	f000 fc6d 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003426:	2108      	movs	r1, #8
 8003428:	484d      	ldr	r0, [pc, #308]	@ (8003560 <menu+0x22bc>)
 800342a:	f006 fd95 	bl	8009f58 <HAL_GPIO_ReadPin>
 800342e:	4603      	mov	r3, r0
 8003430:	2b01      	cmp	r3, #1
 8003432:	d10d      	bne.n	8003450 <menu+0x21ac>
 8003434:	4b4b      	ldr	r3, [pc, #300]	@ (8003564 <menu+0x22c0>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	f083 0301 	eor.w	r3, r3, #1
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d006      	beq.n	8003450 <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 8003442:	4b44      	ldr	r3, [pc, #272]	@ (8003554 <menu+0x22b0>)
 8003444:	781a      	ldrb	r2, [r3, #0]
 8003446:	4b48      	ldr	r3, [pc, #288]	@ (8003568 <menu+0x22c4>)
 8003448:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800344a:	4b48      	ldr	r3, [pc, #288]	@ (800356c <menu+0x22c8>)
 800344c:	2201      	movs	r2, #1
 800344e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003450:	4b47      	ldr	r3, [pc, #284]	@ (8003570 <menu+0x22cc>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b1b      	cmp	r3, #27
 8003456:	d166      	bne.n	8003526 <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 8003458:	4a46      	ldr	r2, [pc, #280]	@ (8003574 <menu+0x22d0>)
 800345a:	2101      	movs	r1, #1
 800345c:	2001      	movs	r0, #1
 800345e:	f005 fa51 	bl	8008904 <lcd_print>

		if(buzzer == 0) {
 8003462:	4b45      	ldr	r3, [pc, #276]	@ (8003578 <menu+0x22d4>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d105      	bne.n	8003476 <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 800346a:	4a44      	ldr	r2, [pc, #272]	@ (800357c <menu+0x22d8>)
 800346c:	2101      	movs	r1, #1
 800346e:	2002      	movs	r0, #2
 8003470:	f005 fa48 	bl	8008904 <lcd_print>
 8003474:	e008      	b.n	8003488 <menu+0x21e4>
		} else if(buzzer == 1) {
 8003476:	4b40      	ldr	r3, [pc, #256]	@ (8003578 <menu+0x22d4>)
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d104      	bne.n	8003488 <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 800347e:	4a40      	ldr	r2, [pc, #256]	@ (8003580 <menu+0x22dc>)
 8003480:	2101      	movs	r1, #1
 8003482:	2002      	movs	r0, #2
 8003484:	f005 fa3e 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003488:	2102      	movs	r1, #2
 800348a:	4835      	ldr	r0, [pc, #212]	@ (8003560 <menu+0x22bc>)
 800348c:	f006 fd64 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003490:	4603      	mov	r3, r0
 8003492:	2b01      	cmp	r3, #1
 8003494:	d115      	bne.n	80034c2 <menu+0x221e>
 8003496:	4b33      	ldr	r3, [pc, #204]	@ (8003564 <menu+0x22c0>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	f083 0301 	eor.w	r3, r3, #1
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00e      	beq.n	80034c2 <menu+0x221e>
			buzzer = buzzer + 1;
 80034a4:	4b34      	ldr	r3, [pc, #208]	@ (8003578 <menu+0x22d4>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	3301      	adds	r3, #1
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	4b32      	ldr	r3, [pc, #200]	@ (8003578 <menu+0x22d4>)
 80034ae:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80034b0:	4b31      	ldr	r3, [pc, #196]	@ (8003578 <menu+0x22d4>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d902      	bls.n	80034be <menu+0x221a>
				buzzer = 0;
 80034b8:	4b2f      	ldr	r3, [pc, #188]	@ (8003578 <menu+0x22d4>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034be:	f000 fc1f 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80034c2:	2104      	movs	r1, #4
 80034c4:	4826      	ldr	r0, [pc, #152]	@ (8003560 <menu+0x22bc>)
 80034c6:	f006 fd47 	bl	8009f58 <HAL_GPIO_ReadPin>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d115      	bne.n	80034fc <menu+0x2258>
 80034d0:	4b24      	ldr	r3, [pc, #144]	@ (8003564 <menu+0x22c0>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	f083 0301 	eor.w	r3, r3, #1
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00e      	beq.n	80034fc <menu+0x2258>
			buzzer = buzzer - 1;
 80034de:	4b26      	ldr	r3, [pc, #152]	@ (8003578 <menu+0x22d4>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4b24      	ldr	r3, [pc, #144]	@ (8003578 <menu+0x22d4>)
 80034e8:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80034ea:	4b23      	ldr	r3, [pc, #140]	@ (8003578 <menu+0x22d4>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d002      	beq.n	80034f8 <menu+0x2254>
		   		buzzer = 1;
 80034f2:	4b21      	ldr	r3, [pc, #132]	@ (8003578 <menu+0x22d4>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80034f8:	f000 fc02 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80034fc:	2108      	movs	r1, #8
 80034fe:	4818      	ldr	r0, [pc, #96]	@ (8003560 <menu+0x22bc>)
 8003500:	f006 fd2a 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003504:	4603      	mov	r3, r0
 8003506:	2b01      	cmp	r3, #1
 8003508:	d10d      	bne.n	8003526 <menu+0x2282>
 800350a:	4b16      	ldr	r3, [pc, #88]	@ (8003564 <menu+0x22c0>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	f083 0301 	eor.w	r3, r3, #1
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b00      	cmp	r3, #0
 8003516:	d006      	beq.n	8003526 <menu+0x2282>
			eepromData[25] = buzzer;
 8003518:	4b17      	ldr	r3, [pc, #92]	@ (8003578 <menu+0x22d4>)
 800351a:	781a      	ldrb	r2, [r3, #0]
 800351c:	4b12      	ldr	r3, [pc, #72]	@ (8003568 <menu+0x22c4>)
 800351e:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003520:	4b12      	ldr	r3, [pc, #72]	@ (800356c <menu+0x22c8>)
 8003522:	2201      	movs	r2, #1
 8003524:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003526:	4b12      	ldr	r3, [pc, #72]	@ (8003570 <menu+0x22cc>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b1c      	cmp	r3, #28
 800352c:	f040 8088 	bne.w	8003640 <menu+0x239c>
		calismaSayModu = 0;
 8003530:	4b14      	ldr	r3, [pc, #80]	@ (8003584 <menu+0x22e0>)
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 8003536:	4a14      	ldr	r2, [pc, #80]	@ (8003588 <menu+0x22e4>)
 8003538:	2101      	movs	r1, #1
 800353a:	2001      	movs	r0, #1
 800353c:	f005 f9e2 	bl	8008904 <lcd_print>

		if(demoMode == 0) {
 8003540:	4b12      	ldr	r3, [pc, #72]	@ (800358c <menu+0x22e8>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d123      	bne.n	8003590 <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 8003548:	4a0c      	ldr	r2, [pc, #48]	@ (800357c <menu+0x22d8>)
 800354a:	2101      	movs	r1, #1
 800354c:	2002      	movs	r0, #2
 800354e:	f005 f9d9 	bl	8008904 <lcd_print>
 8003552:	e026      	b.n	80035a2 <menu+0x22fe>
 8003554:	200010dc 	.word	0x200010dc
 8003558:	200014cc 	.word	0x200014cc
 800355c:	20001060 	.word	0x20001060
 8003560:	40010800 	.word	0x40010800
 8003564:	200010f3 	.word	0x200010f3
 8003568:	20000ff0 	.word	0x20000ff0
 800356c:	200010f0 	.word	0x200010f0
 8003570:	200010c4 	.word	0x200010c4
 8003574:	2000012c 	.word	0x2000012c
 8003578:	200010e0 	.word	0x200010e0
 800357c:	200013a0 	.word	0x200013a0
 8003580:	200013b4 	.word	0x200013b4
 8003584:	200010e4 	.word	0x200010e4
 8003588:	20000140 	.word	0x20000140
 800358c:	200010e2 	.word	0x200010e2
		} else if(demoMode == 1) {
 8003590:	4b61      	ldr	r3, [pc, #388]	@ (8003718 <menu+0x2474>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d104      	bne.n	80035a2 <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 8003598:	4a60      	ldr	r2, [pc, #384]	@ (800371c <menu+0x2478>)
 800359a:	2101      	movs	r1, #1
 800359c:	2002      	movs	r0, #2
 800359e:	f005 f9b1 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035a2:	2102      	movs	r1, #2
 80035a4:	485e      	ldr	r0, [pc, #376]	@ (8003720 <menu+0x247c>)
 80035a6:	f006 fcd7 	bl	8009f58 <HAL_GPIO_ReadPin>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d115      	bne.n	80035dc <menu+0x2338>
 80035b0:	4b5c      	ldr	r3, [pc, #368]	@ (8003724 <menu+0x2480>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	f083 0301 	eor.w	r3, r3, #1
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00e      	beq.n	80035dc <menu+0x2338>
			demoMode = demoMode + 1;
 80035be:	4b56      	ldr	r3, [pc, #344]	@ (8003718 <menu+0x2474>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	3301      	adds	r3, #1
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	4b54      	ldr	r3, [pc, #336]	@ (8003718 <menu+0x2474>)
 80035c8:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80035ca:	4b53      	ldr	r3, [pc, #332]	@ (8003718 <menu+0x2474>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d902      	bls.n	80035d8 <menu+0x2334>
				demoMode = 0;
 80035d2:	4b51      	ldr	r3, [pc, #324]	@ (8003718 <menu+0x2474>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035d8:	f000 fb92 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035dc:	2104      	movs	r1, #4
 80035de:	4850      	ldr	r0, [pc, #320]	@ (8003720 <menu+0x247c>)
 80035e0:	f006 fcba 	bl	8009f58 <HAL_GPIO_ReadPin>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d115      	bne.n	8003616 <menu+0x2372>
 80035ea:	4b4e      	ldr	r3, [pc, #312]	@ (8003724 <menu+0x2480>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	f083 0301 	eor.w	r3, r3, #1
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00e      	beq.n	8003616 <menu+0x2372>
			demoMode = demoMode - 1;
 80035f8:	4b47      	ldr	r3, [pc, #284]	@ (8003718 <menu+0x2474>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	4b45      	ldr	r3, [pc, #276]	@ (8003718 <menu+0x2474>)
 8003602:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003604:	4b44      	ldr	r3, [pc, #272]	@ (8003718 <menu+0x2474>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <menu+0x236e>
		   		demoMode = 1;
 800360c:	4b42      	ldr	r3, [pc, #264]	@ (8003718 <menu+0x2474>)
 800360e:	2201      	movs	r2, #1
 8003610:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003612:	f000 fb75 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003616:	2108      	movs	r1, #8
 8003618:	4841      	ldr	r0, [pc, #260]	@ (8003720 <menu+0x247c>)
 800361a:	f006 fc9d 	bl	8009f58 <HAL_GPIO_ReadPin>
 800361e:	4603      	mov	r3, r0
 8003620:	2b01      	cmp	r3, #1
 8003622:	d10d      	bne.n	8003640 <menu+0x239c>
 8003624:	4b3f      	ldr	r3, [pc, #252]	@ (8003724 <menu+0x2480>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	f083 0301 	eor.w	r3, r3, #1
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d006      	beq.n	8003640 <menu+0x239c>
			eepromData[26] = demoMode;
 8003632:	4b39      	ldr	r3, [pc, #228]	@ (8003718 <menu+0x2474>)
 8003634:	781a      	ldrb	r2, [r3, #0]
 8003636:	4b3c      	ldr	r3, [pc, #240]	@ (8003728 <menu+0x2484>)
 8003638:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800363a:	4b3c      	ldr	r3, [pc, #240]	@ (800372c <menu+0x2488>)
 800363c:	2201      	movs	r2, #1
 800363e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003640:	4b3b      	ldr	r3, [pc, #236]	@ (8003730 <menu+0x248c>)
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b1d      	cmp	r3, #29
 8003646:	f040 810c 	bne.w	8003862 <menu+0x25be>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800364a:	4b3a      	ldr	r3, [pc, #232]	@ (8003734 <menu+0x2490>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d113      	bne.n	800367a <menu+0x23d6>
 8003652:	4b39      	ldr	r3, [pc, #228]	@ (8003738 <menu+0x2494>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10f      	bne.n	800367a <menu+0x23d6>
 800365a:	4b38      	ldr	r3, [pc, #224]	@ (800373c <menu+0x2498>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10b      	bne.n	800367a <menu+0x23d6>
 8003662:	4b37      	ldr	r3, [pc, #220]	@ (8003740 <menu+0x249c>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d107      	bne.n	800367a <menu+0x23d6>
 800366a:	4b36      	ldr	r3, [pc, #216]	@ (8003744 <menu+0x24a0>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d103      	bne.n	800367a <menu+0x23d6>
			calismaSayisiYar = 0;
 8003672:	4b35      	ldr	r3, [pc, #212]	@ (8003748 <menu+0x24a4>)
 8003674:	2200      	movs	r2, #0
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	e002      	b.n	8003680 <menu+0x23dc>
		} else {
			calismaSayisiYar = 1;
 800367a:	4b33      	ldr	r3, [pc, #204]	@ (8003748 <menu+0x24a4>)
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8003680:	4b32      	ldr	r3, [pc, #200]	@ (800374c <menu+0x24a8>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d169      	bne.n	800375c <menu+0x24b8>
			lcd_print(1, 1, calismaSayisiText);
 8003688:	4a31      	ldr	r2, [pc, #196]	@ (8003750 <menu+0x24ac>)
 800368a:	2101      	movs	r1, #1
 800368c:	2001      	movs	r0, #1
 800368e:	f005 f939 	bl	8008904 <lcd_print>

			itoa(calismaSayisi10000, snum, 10);
 8003692:	4b2c      	ldr	r3, [pc, #176]	@ (8003744 <menu+0x24a0>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	220a      	movs	r2, #10
 8003698:	492e      	ldr	r1, [pc, #184]	@ (8003754 <menu+0x24b0>)
 800369a:	4618      	mov	r0, r3
 800369c:	f009 fc88 	bl	800cfb0 <itoa>
			lcd_print(2, 12, snum);
 80036a0:	4a2c      	ldr	r2, [pc, #176]	@ (8003754 <menu+0x24b0>)
 80036a2:	210c      	movs	r1, #12
 80036a4:	2002      	movs	r0, #2
 80036a6:	f005 f92d 	bl	8008904 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80036aa:	4b25      	ldr	r3, [pc, #148]	@ (8003740 <menu+0x249c>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	220a      	movs	r2, #10
 80036b0:	4928      	ldr	r1, [pc, #160]	@ (8003754 <menu+0x24b0>)
 80036b2:	4618      	mov	r0, r3
 80036b4:	f009 fc7c 	bl	800cfb0 <itoa>
			lcd_print(2, 13, snum);
 80036b8:	4a26      	ldr	r2, [pc, #152]	@ (8003754 <menu+0x24b0>)
 80036ba:	210d      	movs	r1, #13
 80036bc:	2002      	movs	r0, #2
 80036be:	f005 f921 	bl	8008904 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80036c2:	4b1e      	ldr	r3, [pc, #120]	@ (800373c <menu+0x2498>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	220a      	movs	r2, #10
 80036c8:	4922      	ldr	r1, [pc, #136]	@ (8003754 <menu+0x24b0>)
 80036ca:	4618      	mov	r0, r3
 80036cc:	f009 fc70 	bl	800cfb0 <itoa>
			lcd_print(2, 14, snum);
 80036d0:	4a20      	ldr	r2, [pc, #128]	@ (8003754 <menu+0x24b0>)
 80036d2:	210e      	movs	r1, #14
 80036d4:	2002      	movs	r0, #2
 80036d6:	f005 f915 	bl	8008904 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80036da:	4b17      	ldr	r3, [pc, #92]	@ (8003738 <menu+0x2494>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	220a      	movs	r2, #10
 80036e0:	491c      	ldr	r1, [pc, #112]	@ (8003754 <menu+0x24b0>)
 80036e2:	4618      	mov	r0, r3
 80036e4:	f009 fc64 	bl	800cfb0 <itoa>
			lcd_print(2, 15, snum);
 80036e8:	4a1a      	ldr	r2, [pc, #104]	@ (8003754 <menu+0x24b0>)
 80036ea:	210f      	movs	r1, #15
 80036ec:	2002      	movs	r0, #2
 80036ee:	f005 f909 	bl	8008904 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80036f2:	4b10      	ldr	r3, [pc, #64]	@ (8003734 <menu+0x2490>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	220a      	movs	r2, #10
 80036f8:	4916      	ldr	r1, [pc, #88]	@ (8003754 <menu+0x24b0>)
 80036fa:	4618      	mov	r0, r3
 80036fc:	f009 fc58 	bl	800cfb0 <itoa>
			lcd_print(2, 16, snum);
 8003700:	4a14      	ldr	r2, [pc, #80]	@ (8003754 <menu+0x24b0>)
 8003702:	2110      	movs	r1, #16
 8003704:	2002      	movs	r0, #2
 8003706:	f005 f8fd 	bl	8008904 <lcd_print>

			lcd_print(2, 1, "           ");
 800370a:	4a13      	ldr	r2, [pc, #76]	@ (8003758 <menu+0x24b4>)
 800370c:	2101      	movs	r1, #1
 800370e:	2002      	movs	r0, #2
 8003710:	f005 f8f8 	bl	8008904 <lcd_print>
 8003714:	e030      	b.n	8003778 <menu+0x24d4>
 8003716:	bf00      	nop
 8003718:	200010e2 	.word	0x200010e2
 800371c:	200013b4 	.word	0x200013b4
 8003720:	40010800 	.word	0x40010800
 8003724:	200010f3 	.word	0x200010f3
 8003728:	20000ff0 	.word	0x20000ff0
 800372c:	200010f0 	.word	0x200010f0
 8003730:	200010c4 	.word	0x200010c4
 8003734:	200010c1 	.word	0x200010c1
 8003738:	200010c2 	.word	0x200010c2
 800373c:	20000000 	.word	0x20000000
 8003740:	20000001 	.word	0x20000001
 8003744:	200010c3 	.word	0x200010c3
 8003748:	20001105 	.word	0x20001105
 800374c:	200010e4 	.word	0x200010e4
 8003750:	20001710 	.word	0x20001710
 8003754:	20001060 	.word	0x20001060
 8003758:	0800dcc8 	.word	0x0800dcc8
		} else if(calismaSayModu == 1) {
 800375c:	4b82      	ldr	r3, [pc, #520]	@ (8003968 <menu+0x26c4>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d109      	bne.n	8003778 <menu+0x24d4>
			lcd_print(1, 1, calismaSayisiText);
 8003764:	4a81      	ldr	r2, [pc, #516]	@ (800396c <menu+0x26c8>)
 8003766:	2101      	movs	r1, #1
 8003768:	2001      	movs	r0, #1
 800376a:	f005 f8cb 	bl	8008904 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 800376e:	4a80      	ldr	r2, [pc, #512]	@ (8003970 <menu+0x26cc>)
 8003770:	2101      	movs	r1, #1
 8003772:	2002      	movs	r0, #2
 8003774:	f005 f8c6 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003778:	2102      	movs	r1, #2
 800377a:	487e      	ldr	r0, [pc, #504]	@ (8003974 <menu+0x26d0>)
 800377c:	f006 fbec 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003780:	4603      	mov	r3, r0
 8003782:	2b01      	cmp	r3, #1
 8003784:	d119      	bne.n	80037ba <menu+0x2516>
 8003786:	4b7c      	ldr	r3, [pc, #496]	@ (8003978 <menu+0x26d4>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	f083 0301 	eor.w	r3, r3, #1
 800378e:	b2db      	uxtb	r3, r3
 8003790:	2b00      	cmp	r3, #0
 8003792:	d012      	beq.n	80037ba <menu+0x2516>
 8003794:	4b79      	ldr	r3, [pc, #484]	@ (800397c <menu+0x26d8>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00e      	beq.n	80037ba <menu+0x2516>
			calismaSayModu = calismaSayModu + 1;
 800379c:	4b72      	ldr	r3, [pc, #456]	@ (8003968 <menu+0x26c4>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	3301      	adds	r3, #1
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	4b70      	ldr	r3, [pc, #448]	@ (8003968 <menu+0x26c4>)
 80037a6:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80037a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003968 <menu+0x26c4>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d902      	bls.n	80037b6 <menu+0x2512>
				calismaSayModu = 0;
 80037b0:	4b6d      	ldr	r3, [pc, #436]	@ (8003968 <menu+0x26c4>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037b6:	f000 faa3 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80037ba:	2104      	movs	r1, #4
 80037bc:	486d      	ldr	r0, [pc, #436]	@ (8003974 <menu+0x26d0>)
 80037be:	f006 fbcb 	bl	8009f58 <HAL_GPIO_ReadPin>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d119      	bne.n	80037fc <menu+0x2558>
 80037c8:	4b6b      	ldr	r3, [pc, #428]	@ (8003978 <menu+0x26d4>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	f083 0301 	eor.w	r3, r3, #1
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d012      	beq.n	80037fc <menu+0x2558>
 80037d6:	4b69      	ldr	r3, [pc, #420]	@ (800397c <menu+0x26d8>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00e      	beq.n	80037fc <menu+0x2558>
			calismaSayModu = calismaSayModu - 1;
 80037de:	4b62      	ldr	r3, [pc, #392]	@ (8003968 <menu+0x26c4>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	4b60      	ldr	r3, [pc, #384]	@ (8003968 <menu+0x26c4>)
 80037e8:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80037ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003968 <menu+0x26c4>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <menu+0x2554>
		   		calismaSayModu = 1;
 80037f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003968 <menu+0x26c4>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037f8:	f000 fa82 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037fc:	2108      	movs	r1, #8
 80037fe:	485d      	ldr	r0, [pc, #372]	@ (8003974 <menu+0x26d0>)
 8003800:	f006 fbaa 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003804:	4603      	mov	r3, r0
 8003806:	2b01      	cmp	r3, #1
 8003808:	d12b      	bne.n	8003862 <menu+0x25be>
 800380a:	4b5b      	ldr	r3, [pc, #364]	@ (8003978 <menu+0x26d4>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	f083 0301 	eor.w	r3, r3, #1
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d024      	beq.n	8003862 <menu+0x25be>
			eepromData[32] = 0;
 8003818:	4b59      	ldr	r3, [pc, #356]	@ (8003980 <menu+0x26dc>)
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8003820:	4b57      	ldr	r3, [pc, #348]	@ (8003980 <menu+0x26dc>)
 8003822:	2200      	movs	r2, #0
 8003824:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8003826:	4b56      	ldr	r3, [pc, #344]	@ (8003980 <menu+0x26dc>)
 8003828:	2200      	movs	r2, #0
 800382a:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 800382c:	4b54      	ldr	r3, [pc, #336]	@ (8003980 <menu+0x26dc>)
 800382e:	2200      	movs	r2, #0
 8003830:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8003832:	4b53      	ldr	r3, [pc, #332]	@ (8003980 <menu+0x26dc>)
 8003834:	2200      	movs	r2, #0
 8003836:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8003838:	4b52      	ldr	r3, [pc, #328]	@ (8003984 <menu+0x26e0>)
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800383e:	4b52      	ldr	r3, [pc, #328]	@ (8003988 <menu+0x26e4>)
 8003840:	2200      	movs	r2, #0
 8003842:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8003844:	4b51      	ldr	r3, [pc, #324]	@ (800398c <menu+0x26e8>)
 8003846:	2200      	movs	r2, #0
 8003848:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800384a:	4b51      	ldr	r3, [pc, #324]	@ (8003990 <menu+0x26ec>)
 800384c:	2200      	movs	r2, #0
 800384e:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8003850:	4b50      	ldr	r3, [pc, #320]	@ (8003994 <menu+0x26f0>)
 8003852:	2200      	movs	r2, #0
 8003854:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8003856:	4b44      	ldr	r3, [pc, #272]	@ (8003968 <menu+0x26c4>)
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 800385c:	4b4e      	ldr	r3, [pc, #312]	@ (8003998 <menu+0x26f4>)
 800385e:	2201      	movs	r2, #1
 8003860:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003862:	4b4e      	ldr	r3, [pc, #312]	@ (800399c <menu+0x26f8>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b1e      	cmp	r3, #30
 8003868:	d166      	bne.n	8003938 <menu+0x2694>
		calismaSayModu = 0;
 800386a:	4b3f      	ldr	r3, [pc, #252]	@ (8003968 <menu+0x26c4>)
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 8003870:	4a4b      	ldr	r2, [pc, #300]	@ (80039a0 <menu+0x26fc>)
 8003872:	2101      	movs	r1, #1
 8003874:	2001      	movs	r0, #1
 8003876:	f005 f845 	bl	8008904 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 800387a:	4a4a      	ldr	r2, [pc, #296]	@ (80039a4 <menu+0x2700>)
 800387c:	2101      	movs	r1, #1
 800387e:	2002      	movs	r0, #2
 8003880:	f005 f840 	bl	8008904 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003884:	2102      	movs	r1, #2
 8003886:	483b      	ldr	r0, [pc, #236]	@ (8003974 <menu+0x26d0>)
 8003888:	f006 fb66 	bl	8009f58 <HAL_GPIO_ReadPin>
 800388c:	4603      	mov	r3, r0
 800388e:	2b01      	cmp	r3, #1
 8003890:	d11a      	bne.n	80038c8 <menu+0x2624>
 8003892:	4b39      	ldr	r3, [pc, #228]	@ (8003978 <menu+0x26d4>)
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	f083 0301 	eor.w	r3, r3, #1
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d013      	beq.n	80038c8 <menu+0x2624>
			dilSecim = dilSecim + 1;
 80038a0:	4b41      	ldr	r3, [pc, #260]	@ (80039a8 <menu+0x2704>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	3301      	adds	r3, #1
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	4b3f      	ldr	r3, [pc, #252]	@ (80039a8 <menu+0x2704>)
 80038aa:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80038ac:	4b3e      	ldr	r3, [pc, #248]	@ (80039a8 <menu+0x2704>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d902      	bls.n	80038ba <menu+0x2616>
				dilSecim = 0;
 80038b4:	4b3c      	ldr	r3, [pc, #240]	@ (80039a8 <menu+0x2704>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	701a      	strb	r2, [r3, #0]
			}
			loadMenuTexts(dilSecim);
 80038ba:	4b3b      	ldr	r3, [pc, #236]	@ (80039a8 <menu+0x2704>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f002 fb0e 	bl	8005ee0 <loadMenuTexts>

			bekle();
 80038c4:	f000 fa1c 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038c8:	2104      	movs	r1, #4
 80038ca:	482a      	ldr	r0, [pc, #168]	@ (8003974 <menu+0x26d0>)
 80038cc:	f006 fb44 	bl	8009f58 <HAL_GPIO_ReadPin>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d11a      	bne.n	800390c <menu+0x2668>
 80038d6:	4b28      	ldr	r3, [pc, #160]	@ (8003978 <menu+0x26d4>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	f083 0301 	eor.w	r3, r3, #1
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d013      	beq.n	800390c <menu+0x2668>
			dilSecim = dilSecim - 1;
 80038e4:	4b30      	ldr	r3, [pc, #192]	@ (80039a8 <menu+0x2704>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b2da      	uxtb	r2, r3
 80038ec:	4b2e      	ldr	r3, [pc, #184]	@ (80039a8 <menu+0x2704>)
 80038ee:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80038f0:	4b2d      	ldr	r3, [pc, #180]	@ (80039a8 <menu+0x2704>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <menu+0x265a>
		   		dilSecim = 1;
 80038f8:	4b2b      	ldr	r3, [pc, #172]	@ (80039a8 <menu+0x2704>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	701a      	strb	r2, [r3, #0]
		   	}
		   	loadMenuTexts(dilSecim);
 80038fe:	4b2a      	ldr	r3, [pc, #168]	@ (80039a8 <menu+0x2704>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f002 faec 	bl	8005ee0 <loadMenuTexts>

			bekle();
 8003908:	f000 f9fa 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800390c:	2108      	movs	r1, #8
 800390e:	4819      	ldr	r0, [pc, #100]	@ (8003974 <menu+0x26d0>)
 8003910:	f006 fb22 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003914:	4603      	mov	r3, r0
 8003916:	2b01      	cmp	r3, #1
 8003918:	d10e      	bne.n	8003938 <menu+0x2694>
 800391a:	4b17      	ldr	r3, [pc, #92]	@ (8003978 <menu+0x26d4>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	f083 0301 	eor.w	r3, r3, #1
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d007      	beq.n	8003938 <menu+0x2694>
			eepromData[33] = dilSecim;
 8003928:	4b1f      	ldr	r3, [pc, #124]	@ (80039a8 <menu+0x2704>)
 800392a:	781a      	ldrb	r2, [r3, #0]
 800392c:	4b14      	ldr	r3, [pc, #80]	@ (8003980 <menu+0x26dc>)
 800392e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 8003932:	4b19      	ldr	r3, [pc, #100]	@ (8003998 <menu+0x26f4>)
 8003934:	2201      	movs	r2, #1
 8003936:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003938:	4b18      	ldr	r3, [pc, #96]	@ (800399c <menu+0x26f8>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b1f      	cmp	r3, #31
 800393e:	f040 8094 	bne.w	8003a6a <menu+0x27c6>
		calismaSayModu = 0;
 8003942:	4b09      	ldr	r3, [pc, #36]	@ (8003968 <menu+0x26c4>)
 8003944:	2200      	movs	r2, #0
 8003946:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 8003948:	4a18      	ldr	r2, [pc, #96]	@ (80039ac <menu+0x2708>)
 800394a:	2101      	movs	r1, #1
 800394c:	2001      	movs	r0, #1
 800394e:	f004 ffd9 	bl	8008904 <lcd_print>

		if(iotMode == 0) {
 8003952:	4b17      	ldr	r3, [pc, #92]	@ (80039b0 <menu+0x270c>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d12e      	bne.n	80039b8 <menu+0x2714>
			lcd_print(2, 1, pasifText);
 800395a:	4a16      	ldr	r2, [pc, #88]	@ (80039b4 <menu+0x2710>)
 800395c:	2101      	movs	r1, #1
 800395e:	2002      	movs	r0, #2
 8003960:	f004 ffd0 	bl	8008904 <lcd_print>
 8003964:	e031      	b.n	80039ca <menu+0x2726>
 8003966:	bf00      	nop
 8003968:	200010e4 	.word	0x200010e4
 800396c:	20001710 	.word	0x20001710
 8003970:	20001724 	.word	0x20001724
 8003974:	40010800 	.word	0x40010800
 8003978:	200010f3 	.word	0x200010f3
 800397c:	20001105 	.word	0x20001105
 8003980:	20000ff0 	.word	0x20000ff0
 8003984:	200010c3 	.word	0x200010c3
 8003988:	20000001 	.word	0x20000001
 800398c:	20000000 	.word	0x20000000
 8003990:	200010c2 	.word	0x200010c2
 8003994:	200010c1 	.word	0x200010c1
 8003998:	200010f0 	.word	0x200010f0
 800399c:	200010c4 	.word	0x200010c4
 80039a0:	20001738 	.word	0x20001738
 80039a4:	2000174c 	.word	0x2000174c
 80039a8:	200010e5 	.word	0x200010e5
 80039ac:	20000154 	.word	0x20000154
 80039b0:	200010e3 	.word	0x200010e3
 80039b4:	200013a0 	.word	0x200013a0
		} else if(iotMode == 1) {
 80039b8:	4b90      	ldr	r3, [pc, #576]	@ (8003bfc <menu+0x2958>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d104      	bne.n	80039ca <menu+0x2726>
			lcd_print(2, 1, aktifText);
 80039c0:	4a8f      	ldr	r2, [pc, #572]	@ (8003c00 <menu+0x295c>)
 80039c2:	2101      	movs	r1, #1
 80039c4:	2002      	movs	r0, #2
 80039c6:	f004 ff9d 	bl	8008904 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039ca:	2102      	movs	r1, #2
 80039cc:	488d      	ldr	r0, [pc, #564]	@ (8003c04 <menu+0x2960>)
 80039ce:	f006 fac3 	bl	8009f58 <HAL_GPIO_ReadPin>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d115      	bne.n	8003a04 <menu+0x2760>
 80039d8:	4b8b      	ldr	r3, [pc, #556]	@ (8003c08 <menu+0x2964>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	f083 0301 	eor.w	r3, r3, #1
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00e      	beq.n	8003a04 <menu+0x2760>
			iotMode = iotMode + 1;
 80039e6:	4b85      	ldr	r3, [pc, #532]	@ (8003bfc <menu+0x2958>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	3301      	adds	r3, #1
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	4b83      	ldr	r3, [pc, #524]	@ (8003bfc <menu+0x2958>)
 80039f0:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80039f2:	4b82      	ldr	r3, [pc, #520]	@ (8003bfc <menu+0x2958>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d902      	bls.n	8003a00 <menu+0x275c>
				iotMode = 0;
 80039fa:	4b80      	ldr	r3, [pc, #512]	@ (8003bfc <menu+0x2958>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003a00:	f000 f97e 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a04:	2104      	movs	r1, #4
 8003a06:	487f      	ldr	r0, [pc, #508]	@ (8003c04 <menu+0x2960>)
 8003a08:	f006 faa6 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d115      	bne.n	8003a3e <menu+0x279a>
 8003a12:	4b7d      	ldr	r3, [pc, #500]	@ (8003c08 <menu+0x2964>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	f083 0301 	eor.w	r3, r3, #1
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00e      	beq.n	8003a3e <menu+0x279a>
			iotMode = iotMode - 1;
 8003a20:	4b76      	ldr	r3, [pc, #472]	@ (8003bfc <menu+0x2958>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	3b01      	subs	r3, #1
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	4b74      	ldr	r3, [pc, #464]	@ (8003bfc <menu+0x2958>)
 8003a2a:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003a2c:	4b73      	ldr	r3, [pc, #460]	@ (8003bfc <menu+0x2958>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d002      	beq.n	8003a3a <menu+0x2796>
		   		iotMode = 1;
 8003a34:	4b71      	ldr	r3, [pc, #452]	@ (8003bfc <menu+0x2958>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003a3a:	f000 f961 	bl	8003d00 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a3e:	2108      	movs	r1, #8
 8003a40:	4870      	ldr	r0, [pc, #448]	@ (8003c04 <menu+0x2960>)
 8003a42:	f006 fa89 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d10e      	bne.n	8003a6a <menu+0x27c6>
 8003a4c:	4b6e      	ldr	r3, [pc, #440]	@ (8003c08 <menu+0x2964>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	f083 0301 	eor.w	r3, r3, #1
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d007      	beq.n	8003a6a <menu+0x27c6>
			eepromData[48] = iotMode;
 8003a5a:	4b68      	ldr	r3, [pc, #416]	@ (8003bfc <menu+0x2958>)
 8003a5c:	781a      	ldrb	r2, [r3, #0]
 8003a5e:	4b6b      	ldr	r3, [pc, #428]	@ (8003c0c <menu+0x2968>)
 8003a60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003a64:	4b6a      	ldr	r3, [pc, #424]	@ (8003c10 <menu+0x296c>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003a6a:	4b6a      	ldr	r3, [pc, #424]	@ (8003c14 <menu+0x2970>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b20      	cmp	r3, #32
 8003a70:	d122      	bne.n	8003ab8 <menu+0x2814>
		calismaSayModu = 0;
 8003a72:	4b69      	ldr	r3, [pc, #420]	@ (8003c18 <menu+0x2974>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 8003a78:	2001      	movs	r0, #1
 8003a7a:	f7fc fe61 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003a7e:	2032      	movs	r0, #50	@ 0x32
 8003a80:	f005 fc9a 	bl	80093b8 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003a84:	2001      	movs	r0, #1
 8003a86:	f7fd fb79 	bl	800117c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a8a:	2102      	movs	r1, #2
 8003a8c:	485d      	ldr	r0, [pc, #372]	@ (8003c04 <menu+0x2960>)
 8003a8e:	f006 fa63 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d10f      	bne.n	8003ab8 <menu+0x2814>
 8003a98:	2104      	movs	r1, #4
 8003a9a:	485a      	ldr	r0, [pc, #360]	@ (8003c04 <menu+0x2960>)
 8003a9c:	f006 fa5c 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d108      	bne.n	8003ab8 <menu+0x2814>
 8003aa6:	4b58      	ldr	r3, [pc, #352]	@ (8003c08 <menu+0x2964>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	f083 0301 	eor.w	r3, r3, #1
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <menu+0x2814>
			takeMachineIDWithConfirmation();
 8003ab4:	f003 fe9a 	bl	80077ec <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 8003ab8:	4b56      	ldr	r3, [pc, #344]	@ (8003c14 <menu+0x2970>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b21      	cmp	r3, #33	@ 0x21
 8003abe:	d12b      	bne.n	8003b18 <menu+0x2874>
		calismaSayModu = 0;
 8003ac0:	4b55      	ldr	r3, [pc, #340]	@ (8003c18 <menu+0x2974>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 8003ac6:	2002      	movs	r0, #2
 8003ac8:	f7fc fe3a 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003acc:	2032      	movs	r0, #50	@ 0x32
 8003ace:	f005 fc73 	bl	80093b8 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003ad2:	2002      	movs	r0, #2
 8003ad4:	f7fd fb52 	bl	800117c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ad8:	2102      	movs	r1, #2
 8003ada:	484a      	ldr	r0, [pc, #296]	@ (8003c04 <menu+0x2960>)
 8003adc:	f006 fa3c 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d118      	bne.n	8003b18 <menu+0x2874>
 8003ae6:	2104      	movs	r1, #4
 8003ae8:	4846      	ldr	r0, [pc, #280]	@ (8003c04 <menu+0x2960>)
 8003aea:	f006 fa35 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d111      	bne.n	8003b18 <menu+0x2874>
 8003af4:	4b44      	ldr	r3, [pc, #272]	@ (8003c08 <menu+0x2964>)
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	f083 0301 	eor.w	r3, r3, #1
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <menu+0x2874>
			takeWifiSSID();
 8003b02:	f004 f899 	bl	8007c38 <takeWifiSSID>

			convertArrays(2);
 8003b06:	2002      	movs	r0, #2
 8003b08:	f7fc fe1a 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8003b0c:	2032      	movs	r0, #50	@ 0x32
 8003b0e:	f005 fc53 	bl	80093b8 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003b12:	2002      	movs	r0, #2
 8003b14:	f7fd fb32 	bl	800117c <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003b18:	4b3e      	ldr	r3, [pc, #248]	@ (8003c14 <menu+0x2970>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b22      	cmp	r3, #34	@ 0x22
 8003b1e:	d12b      	bne.n	8003b78 <menu+0x28d4>
		calismaSayModu = 0;
 8003b20:	4b3d      	ldr	r3, [pc, #244]	@ (8003c18 <menu+0x2974>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003b26:	2003      	movs	r0, #3
 8003b28:	f7fc fe0a 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003b2c:	2032      	movs	r0, #50	@ 0x32
 8003b2e:	f005 fc43 	bl	80093b8 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003b32:	2003      	movs	r0, #3
 8003b34:	f7fd fb22 	bl	800117c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b38:	2102      	movs	r1, #2
 8003b3a:	4832      	ldr	r0, [pc, #200]	@ (8003c04 <menu+0x2960>)
 8003b3c:	f006 fa0c 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d118      	bne.n	8003b78 <menu+0x28d4>
 8003b46:	2104      	movs	r1, #4
 8003b48:	482e      	ldr	r0, [pc, #184]	@ (8003c04 <menu+0x2960>)
 8003b4a:	f006 fa05 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d111      	bne.n	8003b78 <menu+0x28d4>
 8003b54:	4b2c      	ldr	r3, [pc, #176]	@ (8003c08 <menu+0x2964>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	f083 0301 	eor.w	r3, r3, #1
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <menu+0x28d4>
			takeWifiPass();
 8003b62:	f004 fa35 	bl	8007fd0 <takeWifiPass>

			convertArrays(3);
 8003b66:	2003      	movs	r0, #3
 8003b68:	f7fc fdea 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8003b6c:	2032      	movs	r0, #50	@ 0x32
 8003b6e:	f005 fc23 	bl	80093b8 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8003b72:	2003      	movs	r0, #3
 8003b74:	f7fd fb02 	bl	800117c <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8003b78:	4b26      	ldr	r3, [pc, #152]	@ (8003c14 <menu+0x2970>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b23      	cmp	r3, #35	@ 0x23
 8003b7e:	d13a      	bne.n	8003bf6 <menu+0x2952>
		lcd_print(1, 1, menudenCikisText);
 8003b80:	4a26      	ldr	r2, [pc, #152]	@ (8003c1c <menu+0x2978>)
 8003b82:	2101      	movs	r1, #1
 8003b84:	2001      	movs	r0, #1
 8003b86:	f004 febd 	bl	8008904 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003b8a:	4a25      	ldr	r2, [pc, #148]	@ (8003c20 <menu+0x297c>)
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	2002      	movs	r0, #2
 8003b90:	f004 feb8 	bl	8008904 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003b94:	2108      	movs	r1, #8
 8003b96:	481b      	ldr	r0, [pc, #108]	@ (8003c04 <menu+0x2960>)
 8003b98:	f006 f9de 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d129      	bne.n	8003bf6 <menu+0x2952>
			menuGiris = 0;
 8003ba2:	4b20      	ldr	r3, [pc, #128]	@ (8003c24 <menu+0x2980>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8003ba8:	bf00      	nop
 8003baa:	481f      	ldr	r0, [pc, #124]	@ (8003c28 <menu+0x2984>)
 8003bac:	f006 fffd 	bl	800abaa <HAL_I2C_GetError>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d0f9      	beq.n	8003baa <menu+0x2906>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8003bb6:	bf00      	nop
 8003bb8:	481b      	ldr	r0, [pc, #108]	@ (8003c28 <menu+0x2984>)
 8003bba:	f006 ffe9 	bl	800ab90 <HAL_I2C_GetState>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d1f9      	bne.n	8003bb8 <menu+0x2914>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8003bc4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003bc8:	9302      	str	r3, [sp, #8]
 8003bca:	236e      	movs	r3, #110	@ 0x6e
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	4b0f      	ldr	r3, [pc, #60]	@ (8003c0c <menu+0x2968>)
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	236e      	movs	r3, #110	@ 0x6e
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	21a0      	movs	r1, #160	@ 0xa0
 8003bd8:	4813      	ldr	r0, [pc, #76]	@ (8003c28 <menu+0x2984>)
 8003bda:	f006 fc77 	bl	800a4cc <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8003bde:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8003be2:	f005 fbe9 	bl	80093b8 <HAL_Delay>

			lcd_clear();
 8003be6:	f004 feb9 	bl	800895c <lcd_clear>
			HAL_Delay(500);
 8003bea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003bee:	f005 fbe3 	bl	80093b8 <HAL_Delay>
			NVIC_SystemReset();
 8003bf2:	f7fd fb41 	bl	8001278 <__NVIC_SystemReset>
		}
	}
}
 8003bf6:	bf00      	nop
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	200010e3 	.word	0x200010e3
 8003c00:	200013b4 	.word	0x200013b4
 8003c04:	40010800 	.word	0x40010800
 8003c08:	200010f3 	.word	0x200010f3
 8003c0c:	20000ff0 	.word	0x20000ff0
 8003c10:	200010f0 	.word	0x200010f0
 8003c14:	200010c4 	.word	0x200010c4
 8003c18:	200010e4 	.word	0x200010e4
 8003c1c:	20001760 	.word	0x20001760
 8003c20:	20001774 	.word	0x20001774
 8003c24:	200010e1 	.word	0x200010e1
 8003c28:	20001940 	.word	0x20001940

08003c2c <lcdUpdate>:
#include "WifiProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003c36:	79fb      	ldrb	r3, [r7, #7]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d105      	bne.n	8003c48 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003c3c:	4a22      	ldr	r2, [pc, #136]	@ (8003cc8 <lcdUpdate+0x9c>)
 8003c3e:	2101      	movs	r1, #1
 8003c40:	2002      	movs	r0, #2
 8003c42:	f004 fe5f 	bl	8008904 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
	}
}
 8003c46:	e03b      	b.n	8003cc0 <lcdUpdate+0x94>
	} else if(y==2) {
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d105      	bne.n	8003c5a <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8003cc8 <lcdUpdate+0x9c>)
 8003c50:	2102      	movs	r1, #2
 8003c52:	2002      	movs	r0, #2
 8003c54:	f004 fe56 	bl	8008904 <lcd_print>
}
 8003c58:	e032      	b.n	8003cc0 <lcdUpdate+0x94>
	} else if(y==3) {
 8003c5a:	79fb      	ldrb	r3, [r7, #7]
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d105      	bne.n	8003c6c <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003c60:	4a19      	ldr	r2, [pc, #100]	@ (8003cc8 <lcdUpdate+0x9c>)
 8003c62:	2103      	movs	r1, #3
 8003c64:	2002      	movs	r0, #2
 8003c66:	f004 fe4d 	bl	8008904 <lcd_print>
}
 8003c6a:	e029      	b.n	8003cc0 <lcdUpdate+0x94>
	} else if(y==4) {
 8003c6c:	79fb      	ldrb	r3, [r7, #7]
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d105      	bne.n	8003c7e <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003c72:	4a15      	ldr	r2, [pc, #84]	@ (8003cc8 <lcdUpdate+0x9c>)
 8003c74:	2104      	movs	r1, #4
 8003c76:	2002      	movs	r0, #2
 8003c78:	f004 fe44 	bl	8008904 <lcd_print>
}
 8003c7c:	e020      	b.n	8003cc0 <lcdUpdate+0x94>
	} else if(y==5) {
 8003c7e:	79fb      	ldrb	r3, [r7, #7]
 8003c80:	2b05      	cmp	r3, #5
 8003c82:	d105      	bne.n	8003c90 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003c84:	4a10      	ldr	r2, [pc, #64]	@ (8003cc8 <lcdUpdate+0x9c>)
 8003c86:	2105      	movs	r1, #5
 8003c88:	2002      	movs	r0, #2
 8003c8a:	f004 fe3b 	bl	8008904 <lcd_print>
}
 8003c8e:	e017      	b.n	8003cc0 <lcdUpdate+0x94>
	} else if(y==6) {
 8003c90:	79fb      	ldrb	r3, [r7, #7]
 8003c92:	2b06      	cmp	r3, #6
 8003c94:	d105      	bne.n	8003ca2 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8003c96:	4a0c      	ldr	r2, [pc, #48]	@ (8003cc8 <lcdUpdate+0x9c>)
 8003c98:	2106      	movs	r1, #6
 8003c9a:	2002      	movs	r0, #2
 8003c9c:	f004 fe32 	bl	8008904 <lcd_print>
}
 8003ca0:	e00e      	b.n	8003cc0 <lcdUpdate+0x94>
	} else if (y==7) {
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	2b07      	cmp	r3, #7
 8003ca6:	d10b      	bne.n	8003cc0 <lcdUpdate+0x94>
		lcd_clear();
 8003ca8:	f004 fe58 	bl	800895c <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8003cac:	4a07      	ldr	r2, [pc, #28]	@ (8003ccc <lcdUpdate+0xa0>)
 8003cae:	2101      	movs	r1, #1
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	f004 fe27 	bl	8008904 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8003cb6:	4a06      	ldr	r2, [pc, #24]	@ (8003cd0 <lcdUpdate+0xa4>)
 8003cb8:	2101      	movs	r1, #1
 8003cba:	2002      	movs	r0, #2
 8003cbc:	f004 fe22 	bl	8008904 <lcd_print>
}
 8003cc0:	bf00      	nop
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	0800dcd4 	.word	0x0800dcd4
 8003ccc:	200000c8 	.word	0x200000c8
 8003cd0:	200000dc 	.word	0x200000dc

08003cd4 <checkLCDBacklight>:

void checkLCDBacklight() {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8003cd8:	4b07      	ldr	r3, [pc, #28]	@ (8003cf8 <checkLCDBacklight+0x24>)
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	4b07      	ldr	r3, [pc, #28]	@ (8003cfc <checkLCDBacklight+0x28>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b3b      	cmp	r3, #59	@ 0x3b
 8003ce4:	d903      	bls.n	8003cee <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8003ce6:	2000      	movs	r0, #0
 8003ce8:	f004 fe58 	bl	800899c <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8003cec:	e002      	b.n	8003cf4 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8003cee:	2001      	movs	r0, #1
 8003cf0:	f004 fe54 	bl	800899c <lcd_backlight>
}
 8003cf4:	bf00      	nop
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	200010a0 	.word	0x200010a0
 8003cfc:	200010bc 	.word	0x200010bc

08003d00 <bekle>:

void bekle() {
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
	timer1=millis;
 8003d04:	4b47      	ldr	r3, [pc, #284]	@ (8003e24 <bekle+0x124>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a47      	ldr	r2, [pc, #284]	@ (8003e28 <bekle+0x128>)
 8003d0a:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d0c:	e002      	b.n	8003d14 <bekle+0x14>
    	butonKontrol = 1;
 8003d0e:	4b47      	ldr	r3, [pc, #284]	@ (8003e2c <bekle+0x12c>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d14:	2101      	movs	r1, #1
 8003d16:	4846      	ldr	r0, [pc, #280]	@ (8003e30 <bekle+0x130>)
 8003d18:	f006 f91e 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d109      	bne.n	8003d36 <bekle+0x36>
 8003d22:	4b40      	ldr	r3, [pc, #256]	@ (8003e24 <bekle+0x124>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	4b40      	ldr	r3, [pc, #256]	@ (8003e28 <bekle+0x128>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d0ef      	beq.n	8003d0e <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d2e:	e002      	b.n	8003d36 <bekle+0x36>
    	butonKontrol = 1;
 8003d30:	4b3e      	ldr	r3, [pc, #248]	@ (8003e2c <bekle+0x12c>)
 8003d32:	2201      	movs	r2, #1
 8003d34:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d36:	2108      	movs	r1, #8
 8003d38:	483e      	ldr	r0, [pc, #248]	@ (8003e34 <bekle+0x134>)
 8003d3a:	f006 f90d 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d109      	bne.n	8003d58 <bekle+0x58>
 8003d44:	4b37      	ldr	r3, [pc, #220]	@ (8003e24 <bekle+0x124>)
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	4b37      	ldr	r3, [pc, #220]	@ (8003e28 <bekle+0x128>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d0ef      	beq.n	8003d30 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d50:	e002      	b.n	8003d58 <bekle+0x58>
    	butonKontrol = 1;
 8003d52:	4b36      	ldr	r3, [pc, #216]	@ (8003e2c <bekle+0x12c>)
 8003d54:	2201      	movs	r2, #1
 8003d56:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d58:	2102      	movs	r1, #2
 8003d5a:	4835      	ldr	r0, [pc, #212]	@ (8003e30 <bekle+0x130>)
 8003d5c:	f006 f8fc 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d109      	bne.n	8003d7a <bekle+0x7a>
 8003d66:	4b2f      	ldr	r3, [pc, #188]	@ (8003e24 <bekle+0x124>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8003e28 <bekle+0x128>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d0ef      	beq.n	8003d52 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d72:	e002      	b.n	8003d7a <bekle+0x7a>
    	butonKontrol = 1;
 8003d74:	4b2d      	ldr	r3, [pc, #180]	@ (8003e2c <bekle+0x12c>)
 8003d76:	2201      	movs	r2, #1
 8003d78:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d7a:	2104      	movs	r1, #4
 8003d7c:	482c      	ldr	r0, [pc, #176]	@ (8003e30 <bekle+0x130>)
 8003d7e:	f006 f8eb 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d109      	bne.n	8003d9c <bekle+0x9c>
 8003d88:	4b26      	ldr	r3, [pc, #152]	@ (8003e24 <bekle+0x124>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	4b26      	ldr	r3, [pc, #152]	@ (8003e28 <bekle+0x128>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d0ef      	beq.n	8003d74 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d94:	e002      	b.n	8003d9c <bekle+0x9c>
    	butonKontrol = 1;
 8003d96:	4b25      	ldr	r3, [pc, #148]	@ (8003e2c <bekle+0x12c>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d9c:	2108      	movs	r1, #8
 8003d9e:	4824      	ldr	r0, [pc, #144]	@ (8003e30 <bekle+0x130>)
 8003da0:	f006 f8da 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d109      	bne.n	8003dbe <bekle+0xbe>
 8003daa:	4b1e      	ldr	r3, [pc, #120]	@ (8003e24 <bekle+0x124>)
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	4b1e      	ldr	r3, [pc, #120]	@ (8003e28 <bekle+0x128>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d0ef      	beq.n	8003d96 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003db6:	e002      	b.n	8003dbe <bekle+0xbe>
    	butonKontrol = 1;
 8003db8:	4b1c      	ldr	r3, [pc, #112]	@ (8003e2c <bekle+0x12c>)
 8003dba:	2201      	movs	r2, #1
 8003dbc:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003dbe:	2180      	movs	r1, #128	@ 0x80
 8003dc0:	481c      	ldr	r0, [pc, #112]	@ (8003e34 <bekle+0x134>)
 8003dc2:	f006 f8c9 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d109      	bne.n	8003de0 <bekle+0xe0>
 8003dcc:	4b15      	ldr	r3, [pc, #84]	@ (8003e24 <bekle+0x124>)
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	4b15      	ldr	r3, [pc, #84]	@ (8003e28 <bekle+0x128>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d0ef      	beq.n	8003db8 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003dd8:	e002      	b.n	8003de0 <bekle+0xe0>
    	butonKontrol = 1;
 8003dda:	4b14      	ldr	r3, [pc, #80]	@ (8003e2c <bekle+0x12c>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003de0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003de4:	4813      	ldr	r0, [pc, #76]	@ (8003e34 <bekle+0x134>)
 8003de6:	f006 f8b7 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d109      	bne.n	8003e04 <bekle+0x104>
 8003df0:	4b0c      	ldr	r3, [pc, #48]	@ (8003e24 <bekle+0x124>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e28 <bekle+0x128>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d0ee      	beq.n	8003dda <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003dfc:	e002      	b.n	8003e04 <bekle+0x104>
    	butonKontrol = 1;
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <bekle+0x12c>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e08:	480a      	ldr	r0, [pc, #40]	@ (8003e34 <bekle+0x134>)
 8003e0a:	f006 f8a5 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d105      	bne.n	8003e20 <bekle+0x120>
 8003e14:	4b03      	ldr	r3, [pc, #12]	@ (8003e24 <bekle+0x124>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4b03      	ldr	r3, [pc, #12]	@ (8003e28 <bekle+0x128>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d0ee      	beq.n	8003dfe <bekle+0xfe>
    }

}
 8003e20:	bf00      	nop
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	200010a0 	.word	0x200010a0
 8003e28:	200010a8 	.word	0x200010a8
 8003e2c:	200010f3 	.word	0x200010f3
 8003e30:	40010800 	.word	0x40010800
 8003e34:	40011000 	.word	0x40011000

08003e38 <buttonCheck>:

uint8_t buttonCheck(void) {
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	4815      	ldr	r0, [pc, #84]	@ (8003e94 <buttonCheck+0x5c>)
 8003e40:	f006 f88a 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d01b      	beq.n	8003e82 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8003e4a:	2108      	movs	r1, #8
 8003e4c:	4812      	ldr	r0, [pc, #72]	@ (8003e98 <buttonCheck+0x60>)
 8003e4e:	f006 f883 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d014      	beq.n	8003e82 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8003e58:	2102      	movs	r1, #2
 8003e5a:	480e      	ldr	r0, [pc, #56]	@ (8003e94 <buttonCheck+0x5c>)
 8003e5c:	f006 f87c 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d00d      	beq.n	8003e82 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8003e66:	2104      	movs	r1, #4
 8003e68:	480a      	ldr	r0, [pc, #40]	@ (8003e94 <buttonCheck+0x5c>)
 8003e6a:	f006 f875 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d006      	beq.n	8003e82 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8003e74:	2108      	movs	r1, #8
 8003e76:	4807      	ldr	r0, [pc, #28]	@ (8003e94 <buttonCheck+0x5c>)
 8003e78:	f006 f86e 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d104      	bne.n	8003e8c <buttonCheck+0x54>
		backLightTimer = 0;
 8003e82:	4b06      	ldr	r3, [pc, #24]	@ (8003e9c <buttonCheck+0x64>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]
		return 1;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e000      	b.n	8003e8e <buttonCheck+0x56>
	}
	return 0;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40010800 	.word	0x40010800
 8003e98:	40011000 	.word	0x40011000
 8003e9c:	200010bc 	.word	0x200010bc

08003ea0 <checkBasincSalteri>:

void checkBasincSalteri() {
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8003ea4:	4b13      	ldr	r3, [pc, #76]	@ (8003ef4 <checkBasincSalteri+0x54>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d102      	bne.n	8003eb2 <checkBasincSalteri+0x12>
		basincVar=1;
 8003eac:	4b12      	ldr	r3, [pc, #72]	@ (8003ef8 <checkBasincSalteri+0x58>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8003eb2:	4b10      	ldr	r3, [pc, #64]	@ (8003ef4 <checkBasincSalteri+0x54>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d119      	bne.n	8003eee <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8003eba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ebe:	480f      	ldr	r0, [pc, #60]	@ (8003efc <checkBasincSalteri+0x5c>)
 8003ec0:	f006 f84a 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8003eca:	4b0d      	ldr	r3, [pc, #52]	@ (8003f00 <checkBasincSalteri+0x60>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4b0d      	ldr	r3, [pc, #52]	@ (8003f04 <checkBasincSalteri+0x64>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d90a      	bls.n	8003eee <checkBasincSalteri+0x4e>
				basincVar=1;
 8003ed8:	4b07      	ldr	r3, [pc, #28]	@ (8003ef8 <checkBasincSalteri+0x58>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8003ede:	e006      	b.n	8003eee <checkBasincSalteri+0x4e>
			timer5=millis;
 8003ee0:	4b07      	ldr	r3, [pc, #28]	@ (8003f00 <checkBasincSalteri+0x60>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a07      	ldr	r2, [pc, #28]	@ (8003f04 <checkBasincSalteri+0x64>)
 8003ee6:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8003ee8:	4b03      	ldr	r3, [pc, #12]	@ (8003ef8 <checkBasincSalteri+0x58>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	701a      	strb	r2, [r3, #0]
}
 8003eee:	bf00      	nop
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	200010cb 	.word	0x200010cb
 8003ef8:	200010c7 	.word	0x200010c7
 8003efc:	40011000 	.word	0x40011000
 8003f00:	200010a0 	.word	0x200010a0
 8003f04:	200010b8 	.word	0x200010b8

08003f08 <checkBasGonder>:

void checkBasGonder() {
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f7c <checkBasGonder+0x74>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d10b      	bne.n	8003f2c <checkBasGonder+0x24>
 8003f14:	4b1a      	ldr	r3, [pc, #104]	@ (8003f80 <checkBasGonder+0x78>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d007      	beq.n	8003f2c <checkBasGonder+0x24>
 8003f1c:	4b19      	ldr	r3, [pc, #100]	@ (8003f84 <checkBasGonder+0x7c>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d103      	bne.n	8003f2c <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8003f24:	4b18      	ldr	r3, [pc, #96]	@ (8003f88 <checkBasGonder+0x80>)
 8003f26:	2201      	movs	r2, #1
 8003f28:	701a      	strb	r2, [r3, #0]
 8003f2a:	e009      	b.n	8003f40 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8003f2c:	4b14      	ldr	r3, [pc, #80]	@ (8003f80 <checkBasGonder+0x78>)
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	f083 0301 	eor.w	r3, r3, #1
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8003f3a:	4b13      	ldr	r3, [pc, #76]	@ (8003f88 <checkBasGonder+0x80>)
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003f40:	4b0e      	ldr	r3, [pc, #56]	@ (8003f7c <checkBasGonder+0x74>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d10b      	bne.n	8003f60 <checkBasGonder+0x58>
 8003f48:	4b10      	ldr	r3, [pc, #64]	@ (8003f8c <checkBasGonder+0x84>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d007      	beq.n	8003f60 <checkBasGonder+0x58>
 8003f50:	4b0c      	ldr	r3, [pc, #48]	@ (8003f84 <checkBasGonder+0x7c>)
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d103      	bne.n	8003f60 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8003f58:	4b0d      	ldr	r3, [pc, #52]	@ (8003f90 <checkBasGonder+0x88>)
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8003f5e:	e009      	b.n	8003f74 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8003f60:	4b0a      	ldr	r3, [pc, #40]	@ (8003f8c <checkBasGonder+0x84>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	f083 0301 	eor.w	r3, r3, #1
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8003f6e:	4b08      	ldr	r3, [pc, #32]	@ (8003f90 <checkBasGonder+0x88>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	701a      	strb	r2, [r3, #0]
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr
 8003f7c:	200010c5 	.word	0x200010c5
 8003f80:	200010f9 	.word	0x200010f9
 8003f84:	200010d3 	.word	0x200010d3
 8003f88:	20001100 	.word	0x20001100
 8003f8c:	200010fc 	.word	0x200010fc
 8003f90:	20001101 	.word	0x20001101

08003f94 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8003f98:	4b24      	ldr	r3, [pc, #144]	@ (800402c <checkKapiSecimleri+0x98>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d102      	bne.n	8003fa6 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8003fa0:	4b23      	ldr	r3, [pc, #140]	@ (8004030 <checkKapiSecimleri+0x9c>)
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8003fa6:	4b21      	ldr	r3, [pc, #132]	@ (800402c <checkKapiSecimleri+0x98>)
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d10e      	bne.n	8003fcc <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8003fae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fb2:	4820      	ldr	r0, [pc, #128]	@ (8004034 <checkKapiSecimleri+0xa0>)
 8003fb4:	f005 ffd0 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d103      	bne.n	8003fc6 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8003fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8004030 <checkKapiSecimleri+0x9c>)
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	701a      	strb	r2, [r3, #0]
 8003fc4:	e002      	b.n	8003fcc <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8003fc6:	4b1a      	ldr	r3, [pc, #104]	@ (8004030 <checkKapiSecimleri+0x9c>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8003fcc:	4b17      	ldr	r3, [pc, #92]	@ (800402c <checkKapiSecimleri+0x98>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d10e      	bne.n	8003ff2 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8003fd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003fd8:	4816      	ldr	r0, [pc, #88]	@ (8004034 <checkKapiSecimleri+0xa0>)
 8003fda:	f005 ffbd 	bl	8009f58 <HAL_GPIO_ReadPin>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d103      	bne.n	8003fec <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8003fe4:	4b12      	ldr	r3, [pc, #72]	@ (8004030 <checkKapiSecimleri+0x9c>)
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	701a      	strb	r2, [r3, #0]
 8003fea:	e002      	b.n	8003ff2 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8003fec:	4b10      	ldr	r3, [pc, #64]	@ (8004030 <checkKapiSecimleri+0x9c>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8003ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800402c <checkKapiSecimleri+0x98>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d116      	bne.n	8004028 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8003ffa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ffe:	480d      	ldr	r0, [pc, #52]	@ (8004034 <checkKapiSecimleri+0xa0>)
 8004000:	f005 ffaa 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10b      	bne.n	8004022 <checkKapiSecimleri+0x8e>
 800400a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800400e:	4809      	ldr	r0, [pc, #36]	@ (8004034 <checkKapiSecimleri+0xa0>)
 8004010:	f005 ffa2 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d103      	bne.n	8004022 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 800401a:	4b05      	ldr	r3, [pc, #20]	@ (8004030 <checkKapiSecimleri+0x9c>)
 800401c:	2201      	movs	r2, #1
 800401e:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004020:	e002      	b.n	8004028 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004022:	4b03      	ldr	r3, [pc, #12]	@ (8004030 <checkKapiSecimleri+0x9c>)
 8004024:	2200      	movs	r2, #0
 8004026:	701a      	strb	r2, [r3, #0]
}
 8004028:	bf00      	nop
 800402a:	bd80      	pop	{r7, pc}
 800402c:	200010cc 	.word	0x200010cc
 8004030:	20001117 	.word	0x20001117
 8004034:	40010800 	.word	0x40010800

08004038 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 800403c:	4b62      	ldr	r3, [pc, #392]	@ (80041c8 <checkAktifCalisma+0x190>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	f041 833e 	bne.w	80056c2 <checkAktifCalisma+0x168a>
 8004046:	4b61      	ldr	r3, [pc, #388]	@ (80041cc <checkAktifCalisma+0x194>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	f041 8339 	bne.w	80056c2 <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004050:	4b5f      	ldr	r3, [pc, #380]	@ (80041d0 <checkAktifCalisma+0x198>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d11a      	bne.n	800408e <checkAktifCalisma+0x56>
 8004058:	4b5e      	ldr	r3, [pc, #376]	@ (80041d4 <checkAktifCalisma+0x19c>)
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d116      	bne.n	800408e <checkAktifCalisma+0x56>
 8004060:	4b5d      	ldr	r3, [pc, #372]	@ (80041d8 <checkAktifCalisma+0x1a0>)
 8004062:	781b      	ldrb	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00a      	beq.n	800407e <checkAktifCalisma+0x46>
 8004068:	4b5c      	ldr	r3, [pc, #368]	@ (80041dc <checkAktifCalisma+0x1a4>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	f083 0301 	eor.w	r3, r3, #1
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d003      	beq.n	800407e <checkAktifCalisma+0x46>
 8004076:	4b5a      	ldr	r3, [pc, #360]	@ (80041e0 <checkAktifCalisma+0x1a8>)
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d007      	beq.n	800408e <checkAktifCalisma+0x56>
 800407e:	4b59      	ldr	r3, [pc, #356]	@ (80041e4 <checkAktifCalisma+0x1ac>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d018      	beq.n	80040b8 <checkAktifCalisma+0x80>
 8004086:	4b58      	ldr	r3, [pc, #352]	@ (80041e8 <checkAktifCalisma+0x1b0>)
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d114      	bne.n	80040b8 <checkAktifCalisma+0x80>
 800408e:	4b57      	ldr	r3, [pc, #348]	@ (80041ec <checkAktifCalisma+0x1b4>)
 8004090:	781b      	ldrb	r3, [r3, #0]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d010      	beq.n	80040b8 <checkAktifCalisma+0x80>
 8004096:	4b56      	ldr	r3, [pc, #344]	@ (80041f0 <checkAktifCalisma+0x1b8>)
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00c      	beq.n	80040b8 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800409e:	2201      	movs	r2, #1
 80040a0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80040a4:	4853      	ldr	r0, [pc, #332]	@ (80041f4 <checkAktifCalisma+0x1bc>)
 80040a6:	f005 ff6e 	bl	8009f86 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 80040aa:	4b53      	ldr	r3, [pc, #332]	@ (80041f8 <checkAktifCalisma+0x1c0>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 80040b0:	4b52      	ldr	r3, [pc, #328]	@ (80041fc <checkAktifCalisma+0x1c4>)
 80040b2:	2201      	movs	r2, #1
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	e008      	b.n	80040ca <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80040b8:	2200      	movs	r2, #0
 80040ba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80040be:	484d      	ldr	r0, [pc, #308]	@ (80041f4 <checkAktifCalisma+0x1bc>)
 80040c0:	f005 ff61 	bl	8009f86 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 80040c4:	4b4c      	ldr	r3, [pc, #304]	@ (80041f8 <checkAktifCalisma+0x1c0>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 80040ca:	4b40      	ldr	r3, [pc, #256]	@ (80041cc <checkAktifCalisma+0x194>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d160      	bne.n	8004194 <checkAktifCalisma+0x15c>
 80040d2:	4b46      	ldr	r3, [pc, #280]	@ (80041ec <checkAktifCalisma+0x1b4>)
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d05c      	beq.n	8004194 <checkAktifCalisma+0x15c>
 80040da:	4b45      	ldr	r3, [pc, #276]	@ (80041f0 <checkAktifCalisma+0x1b8>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d058      	beq.n	8004194 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80040e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80040e6:	4843      	ldr	r0, [pc, #268]	@ (80041f4 <checkAktifCalisma+0x1bc>)
 80040e8:	f005 ff36 	bl	8009f58 <HAL_GPIO_ReadPin>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <checkAktifCalisma+0xc2>
 80040f2:	4b43      	ldr	r3, [pc, #268]	@ (8004200 <checkAktifCalisma+0x1c8>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d04c      	beq.n	8004194 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80040fa:	2102      	movs	r1, #2
 80040fc:	4841      	ldr	r0, [pc, #260]	@ (8004204 <checkAktifCalisma+0x1cc>)
 80040fe:	f005 ff2b 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d145      	bne.n	8004194 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004108:	4b3f      	ldr	r3, [pc, #252]	@ (8004208 <checkAktifCalisma+0x1d0>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d041      	beq.n	8004194 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004110:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004114:	4837      	ldr	r0, [pc, #220]	@ (80041f4 <checkAktifCalisma+0x1bc>)
 8004116:	f005 ff1f 	bl	8009f58 <HAL_GPIO_ReadPin>
 800411a:	4603      	mov	r3, r0
 800411c:	2b01      	cmp	r3, #1
 800411e:	d10e      	bne.n	800413e <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004120:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004124:	4833      	ldr	r0, [pc, #204]	@ (80041f4 <checkAktifCalisma+0x1bc>)
 8004126:	f005 ff17 	bl	8009f58 <HAL_GPIO_ReadPin>
 800412a:	4603      	mov	r3, r0
 800412c:	2b01      	cmp	r3, #1
 800412e:	d106      	bne.n	800413e <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004130:	2140      	movs	r1, #64	@ 0x40
 8004132:	4834      	ldr	r0, [pc, #208]	@ (8004204 <checkAktifCalisma+0x1cc>)
 8004134:	f005 ff10 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004138:	4603      	mov	r3, r0
 800413a:	2b01      	cmp	r3, #1
 800413c:	d003      	beq.n	8004146 <checkAktifCalisma+0x10e>
 800413e:	4b24      	ldr	r3, [pc, #144]	@ (80041d0 <checkAktifCalisma+0x198>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d026      	beq.n	8004194 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004146:	4b24      	ldr	r3, [pc, #144]	@ (80041d8 <checkAktifCalisma+0x1a0>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	f083 0301 	eor.w	r3, r3, #1
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01f      	beq.n	8004194 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004154:	4b1f      	ldr	r3, [pc, #124]	@ (80041d4 <checkAktifCalisma+0x19c>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	f083 0301 	eor.w	r3, r3, #1
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d018      	beq.n	8004194 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004162:	4b20      	ldr	r3, [pc, #128]	@ (80041e4 <checkAktifCalisma+0x1ac>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	f083 0301 	eor.w	r3, r3, #1
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d011      	beq.n	8004194 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004170:	4b26      	ldr	r3, [pc, #152]	@ (800420c <checkAktifCalisma+0x1d4>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	f083 0301 	eor.w	r3, r3, #1
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 800417e:	4b24      	ldr	r3, [pc, #144]	@ (8004210 <checkAktifCalisma+0x1d8>)
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	f083 0301 	eor.w	r3, r3, #1
 8004186:	b2db      	uxtb	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 800418c:	4b10      	ldr	r3, [pc, #64]	@ (80041d0 <checkAktifCalisma+0x198>)
 800418e:	2201      	movs	r2, #1
 8004190:	701a      	strb	r2, [r3, #0]
 8004192:	e002      	b.n	800419a <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004194:	4b0e      	ldr	r3, [pc, #56]	@ (80041d0 <checkAktifCalisma+0x198>)
 8004196:	2200      	movs	r2, #0
 8004198:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800419a:	4b0d      	ldr	r3, [pc, #52]	@ (80041d0 <checkAktifCalisma+0x198>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d03a      	beq.n	8004218 <checkAktifCalisma+0x1e0>
 80041a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80041a6:	4817      	ldr	r0, [pc, #92]	@ (8004204 <checkAktifCalisma+0x1cc>)
 80041a8:	f005 fed6 	bl	8009f58 <HAL_GPIO_ReadPin>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d132      	bne.n	8004218 <checkAktifCalisma+0x1e0>
 80041b2:	4b18      	ldr	r3, [pc, #96]	@ (8004214 <checkAktifCalisma+0x1dc>)
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d02e      	beq.n	8004218 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80041ba:	2201      	movs	r2, #1
 80041bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80041c0:	480c      	ldr	r0, [pc, #48]	@ (80041f4 <checkAktifCalisma+0x1bc>)
 80041c2:	f005 fee0 	bl	8009f86 <HAL_GPIO_WritePin>
 80041c6:	e02d      	b.n	8004224 <checkAktifCalisma+0x1ec>
 80041c8:	200010e2 	.word	0x200010e2
 80041cc:	200010e1 	.word	0x200010e1
 80041d0:	200010f9 	.word	0x200010f9
 80041d4:	200010fa 	.word	0x200010fa
 80041d8:	200010fc 	.word	0x200010fc
 80041dc:	200010f4 	.word	0x200010f4
 80041e0:	200010d7 	.word	0x200010d7
 80041e4:	200010fb 	.word	0x200010fb
 80041e8:	200010d6 	.word	0x200010d6
 80041ec:	20001116 	.word	0x20001116
 80041f0:	20001117 	.word	0x20001117
 80041f4:	40010c00 	.word	0x40010c00
 80041f8:	20001118 	.word	0x20001118
 80041fc:	20001103 	.word	0x20001103
 8004200:	20001100 	.word	0x20001100
 8004204:	40011000 	.word	0x40011000
 8004208:	200010c7 	.word	0x200010c7
 800420c:	200010fe 	.word	0x200010fe
 8004210:	200010ff 	.word	0x200010ff
 8004214:	200010d2 	.word	0x200010d2
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004218:	2200      	movs	r2, #0
 800421a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800421e:	4860      	ldr	r0, [pc, #384]	@ (80043a0 <checkAktifCalisma+0x368>)
 8004220:	f005 feb1 	bl	8009f86 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004224:	4b5f      	ldr	r3, [pc, #380]	@ (80043a4 <checkAktifCalisma+0x36c>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d013      	beq.n	8004254 <checkAktifCalisma+0x21c>
 800422c:	4b5e      	ldr	r3, [pc, #376]	@ (80043a8 <checkAktifCalisma+0x370>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d007      	beq.n	8004244 <checkAktifCalisma+0x20c>
 8004234:	4b5c      	ldr	r3, [pc, #368]	@ (80043a8 <checkAktifCalisma+0x370>)
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b02      	cmp	r3, #2
 800423a:	d003      	beq.n	8004244 <checkAktifCalisma+0x20c>
 800423c:	4b5b      	ldr	r3, [pc, #364]	@ (80043ac <checkAktifCalisma+0x374>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d107      	bne.n	8004254 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004244:	2201      	movs	r2, #1
 8004246:	2104      	movs	r1, #4
 8004248:	4855      	ldr	r0, [pc, #340]	@ (80043a0 <checkAktifCalisma+0x368>)
 800424a:	f005 fe9c 	bl	8009f86 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 800424e:	4b58      	ldr	r3, [pc, #352]	@ (80043b0 <checkAktifCalisma+0x378>)
 8004250:	2201      	movs	r2, #1
 8004252:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004254:	4b56      	ldr	r3, [pc, #344]	@ (80043b0 <checkAktifCalisma+0x378>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d02f      	beq.n	80042bc <checkAktifCalisma+0x284>
 800425c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004260:	484f      	ldr	r0, [pc, #316]	@ (80043a0 <checkAktifCalisma+0x368>)
 8004262:	f005 fe79 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004266:	4603      	mov	r3, r0
 8004268:	2b01      	cmp	r3, #1
 800426a:	d106      	bne.n	800427a <checkAktifCalisma+0x242>
 800426c:	4b51      	ldr	r3, [pc, #324]	@ (80043b4 <checkAktifCalisma+0x37c>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	f083 0301 	eor.w	r3, r3, #1
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <checkAktifCalisma+0x250>
 800427a:	2102      	movs	r1, #2
 800427c:	484e      	ldr	r0, [pc, #312]	@ (80043b8 <checkAktifCalisma+0x380>)
 800427e:	f005 fe6b 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004282:	4603      	mov	r3, r0
 8004284:	2b01      	cmp	r3, #1
 8004286:	d119      	bne.n	80042bc <checkAktifCalisma+0x284>
 8004288:	4b4c      	ldr	r3, [pc, #304]	@ (80043bc <checkAktifCalisma+0x384>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d015      	beq.n	80042bc <checkAktifCalisma+0x284>
 8004290:	4b4b      	ldr	r3, [pc, #300]	@ (80043c0 <checkAktifCalisma+0x388>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d011      	beq.n	80042bc <checkAktifCalisma+0x284>
 8004298:	4b4a      	ldr	r3, [pc, #296]	@ (80043c4 <checkAktifCalisma+0x38c>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00d      	beq.n	80042bc <checkAktifCalisma+0x284>
 80042a0:	4b49      	ldr	r3, [pc, #292]	@ (80043c8 <checkAktifCalisma+0x390>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	f083 0301 	eor.w	r3, r3, #1
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d006      	beq.n	80042bc <checkAktifCalisma+0x284>
			timer2=millis;
 80042ae:	4b47      	ldr	r3, [pc, #284]	@ (80043cc <checkAktifCalisma+0x394>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a47      	ldr	r2, [pc, #284]	@ (80043d0 <checkAktifCalisma+0x398>)
 80042b4:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80042b6:	4b44      	ldr	r3, [pc, #272]	@ (80043c8 <checkAktifCalisma+0x390>)
 80042b8:	2201      	movs	r2, #1
 80042ba:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 80042bc:	4b43      	ldr	r3, [pc, #268]	@ (80043cc <checkAktifCalisma+0x394>)
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	4b43      	ldr	r3, [pc, #268]	@ (80043d0 <checkAktifCalisma+0x398>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	4a43      	ldr	r2, [pc, #268]	@ (80043d4 <checkAktifCalisma+0x39c>)
 80042c8:	7812      	ldrb	r2, [r2, #0]
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d303      	bcc.n	80042d6 <checkAktifCalisma+0x29e>
 80042ce:	4b3e      	ldr	r3, [pc, #248]	@ (80043c8 <checkAktifCalisma+0x390>)
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d111      	bne.n	80042fa <checkAktifCalisma+0x2c2>
 80042d6:	4b39      	ldr	r3, [pc, #228]	@ (80043bc <checkAktifCalisma+0x384>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	f083 0301 	eor.w	r3, r3, #1
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10a      	bne.n	80042fa <checkAktifCalisma+0x2c2>
 80042e4:	4b36      	ldr	r3, [pc, #216]	@ (80043c0 <checkAktifCalisma+0x388>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	f083 0301 	eor.w	r3, r3, #1
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d103      	bne.n	80042fa <checkAktifCalisma+0x2c2>
 80042f2:	4b34      	ldr	r3, [pc, #208]	@ (80043c4 <checkAktifCalisma+0x38c>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10a      	bne.n	8004310 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80042fa:	2200      	movs	r2, #0
 80042fc:	2104      	movs	r1, #4
 80042fe:	4828      	ldr	r0, [pc, #160]	@ (80043a0 <checkAktifCalisma+0x368>)
 8004300:	f005 fe41 	bl	8009f86 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8004304:	4b2a      	ldr	r3, [pc, #168]	@ (80043b0 <checkAktifCalisma+0x378>)
 8004306:	2200      	movs	r2, #0
 8004308:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 800430a:	4b2f      	ldr	r3, [pc, #188]	@ (80043c8 <checkAktifCalisma+0x390>)
 800430c:	2200      	movs	r2, #0
 800430e:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8004310:	4b31      	ldr	r3, [pc, #196]	@ (80043d8 <checkAktifCalisma+0x3a0>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d102      	bne.n	800431e <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8004318:	4b30      	ldr	r3, [pc, #192]	@ (80043dc <checkAktifCalisma+0x3a4>)
 800431a:	2201      	movs	r2, #1
 800431c:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 800431e:	4b2e      	ldr	r3, [pc, #184]	@ (80043d8 <checkAktifCalisma+0x3a0>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d116      	bne.n	8004354 <checkAktifCalisma+0x31c>
 8004326:	4b2e      	ldr	r3, [pc, #184]	@ (80043e0 <checkAktifCalisma+0x3a8>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d112      	bne.n	8004354 <checkAktifCalisma+0x31c>
 800432e:	2101      	movs	r1, #1
 8004330:	4821      	ldr	r0, [pc, #132]	@ (80043b8 <checkAktifCalisma+0x380>)
 8004332:	f005 fe11 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10b      	bne.n	8004354 <checkAktifCalisma+0x31c>
 800433c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004340:	4817      	ldr	r0, [pc, #92]	@ (80043a0 <checkAktifCalisma+0x368>)
 8004342:	f005 fe09 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d103      	bne.n	8004354 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 800434c:	4b23      	ldr	r3, [pc, #140]	@ (80043dc <checkAktifCalisma+0x3a4>)
 800434e:	2201      	movs	r2, #1
 8004350:	701a      	strb	r2, [r3, #0]
 8004352:	e011      	b.n	8004378 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004354:	4b20      	ldr	r3, [pc, #128]	@ (80043d8 <checkAktifCalisma+0x3a0>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d10d      	bne.n	8004378 <checkAktifCalisma+0x340>
 800435c:	2101      	movs	r1, #1
 800435e:	4816      	ldr	r0, [pc, #88]	@ (80043b8 <checkAktifCalisma+0x380>)
 8004360:	f005 fdfa 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004364:	4603      	mov	r3, r0
 8004366:	2b01      	cmp	r3, #1
 8004368:	d106      	bne.n	8004378 <checkAktifCalisma+0x340>
 800436a:	4b1d      	ldr	r3, [pc, #116]	@ (80043e0 <checkAktifCalisma+0x3a8>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d102      	bne.n	8004378 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8004372:	4b1a      	ldr	r3, [pc, #104]	@ (80043dc <checkAktifCalisma+0x3a4>)
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8004378:	4b17      	ldr	r3, [pc, #92]	@ (80043d8 <checkAktifCalisma+0x3a0>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d134      	bne.n	80043ea <checkAktifCalisma+0x3b2>
 8004380:	4b17      	ldr	r3, [pc, #92]	@ (80043e0 <checkAktifCalisma+0x3a8>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d130      	bne.n	80043ea <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004388:	2101      	movs	r1, #1
 800438a:	480b      	ldr	r0, [pc, #44]	@ (80043b8 <checkAktifCalisma+0x380>)
 800438c:	f005 fde4 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d126      	bne.n	80043e4 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8004396:	4b11      	ldr	r3, [pc, #68]	@ (80043dc <checkAktifCalisma+0x3a4>)
 8004398:	2201      	movs	r2, #1
 800439a:	701a      	strb	r2, [r3, #0]
 800439c:	e025      	b.n	80043ea <checkAktifCalisma+0x3b2>
 800439e:	bf00      	nop
 80043a0:	40010c00 	.word	0x40010c00
 80043a4:	200010f9 	.word	0x200010f9
 80043a8:	200010d3 	.word	0x200010d3
 80043ac:	200010d7 	.word	0x200010d7
 80043b0:	200010fd 	.word	0x200010fd
 80043b4:	20001100 	.word	0x20001100
 80043b8:	40011000 	.word	0x40011000
 80043bc:	20001116 	.word	0x20001116
 80043c0:	20001117 	.word	0x20001117
 80043c4:	200010c7 	.word	0x200010c7
 80043c8:	200010f5 	.word	0x200010f5
 80043cc:	200010a0 	.word	0x200010a0
 80043d0:	200010ac 	.word	0x200010ac
 80043d4:	200010d8 	.word	0x200010d8
 80043d8:	200010c8 	.word	0x200010c8
 80043dc:	2000111b 	.word	0x2000111b
 80043e0:	200010c5 	.word	0x200010c5
			} else {
				cerceveVar=0;
 80043e4:	4b7f      	ldr	r3, [pc, #508]	@ (80045e4 <checkAktifCalisma+0x5ac>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80043ea:	4b7f      	ldr	r3, [pc, #508]	@ (80045e8 <checkAktifCalisma+0x5b0>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d17c      	bne.n	80044ec <checkAktifCalisma+0x4b4>
 80043f2:	4b7e      	ldr	r3, [pc, #504]	@ (80045ec <checkAktifCalisma+0x5b4>)
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d078      	beq.n	80044ec <checkAktifCalisma+0x4b4>
 80043fa:	4b7d      	ldr	r3, [pc, #500]	@ (80045f0 <checkAktifCalisma+0x5b8>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d074      	beq.n	80044ec <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004402:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004406:	487b      	ldr	r0, [pc, #492]	@ (80045f4 <checkAktifCalisma+0x5bc>)
 8004408:	f005 fda6 	bl	8009f58 <HAL_GPIO_ReadPin>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <checkAktifCalisma+0x3e2>
 8004412:	4b79      	ldr	r3, [pc, #484]	@ (80045f8 <checkAktifCalisma+0x5c0>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d068      	beq.n	80044ec <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800441a:	4b72      	ldr	r3, [pc, #456]	@ (80045e4 <checkAktifCalisma+0x5ac>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d064      	beq.n	80044ec <checkAktifCalisma+0x4b4>
 8004422:	4b76      	ldr	r3, [pc, #472]	@ (80045fc <checkAktifCalisma+0x5c4>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	f083 0301 	eor.w	r3, r3, #1
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d05d      	beq.n	80044ec <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004430:	2104      	movs	r1, #4
 8004432:	4873      	ldr	r0, [pc, #460]	@ (8004600 <checkAktifCalisma+0x5c8>)
 8004434:	f005 fd90 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <checkAktifCalisma+0x40e>
 800443e:	4b71      	ldr	r3, [pc, #452]	@ (8004604 <checkAktifCalisma+0x5cc>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d152      	bne.n	80044ec <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004446:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800444a:	486a      	ldr	r0, [pc, #424]	@ (80045f4 <checkAktifCalisma+0x5bc>)
 800444c:	f005 fd84 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004450:	4603      	mov	r3, r0
 8004452:	2b01      	cmp	r3, #1
 8004454:	d10e      	bne.n	8004474 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004456:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800445a:	4866      	ldr	r0, [pc, #408]	@ (80045f4 <checkAktifCalisma+0x5bc>)
 800445c:	f005 fd7c 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004460:	4603      	mov	r3, r0
 8004462:	2b01      	cmp	r3, #1
 8004464:	d106      	bne.n	8004474 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8004466:	2140      	movs	r1, #64	@ 0x40
 8004468:	4865      	ldr	r0, [pc, #404]	@ (8004600 <checkAktifCalisma+0x5c8>)
 800446a:	f005 fd75 	bl	8009f58 <HAL_GPIO_ReadPin>
 800446e:	4603      	mov	r3, r0
 8004470:	2b01      	cmp	r3, #1
 8004472:	d003      	beq.n	800447c <checkAktifCalisma+0x444>
 8004474:	4b64      	ldr	r3, [pc, #400]	@ (8004608 <checkAktifCalisma+0x5d0>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d037      	beq.n	80044ec <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 800447c:	4b63      	ldr	r3, [pc, #396]	@ (800460c <checkAktifCalisma+0x5d4>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	f083 0301 	eor.w	r3, r3, #1
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d030      	beq.n	80044ec <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800448a:	4b61      	ldr	r3, [pc, #388]	@ (8004610 <checkAktifCalisma+0x5d8>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	f083 0301 	eor.w	r3, r3, #1
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d029      	beq.n	80044ec <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8004498:	4b5e      	ldr	r3, [pc, #376]	@ (8004614 <checkAktifCalisma+0x5dc>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	f083 0301 	eor.w	r3, r3, #1
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d022      	beq.n	80044ec <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 80044a6:	4b5c      	ldr	r3, [pc, #368]	@ (8004618 <checkAktifCalisma+0x5e0>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	f083 0301 	eor.w	r3, r3, #1
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01b      	beq.n	80044ec <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80044b4:	4b59      	ldr	r3, [pc, #356]	@ (800461c <checkAktifCalisma+0x5e4>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	f083 0301 	eor.w	r3, r3, #1
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d014      	beq.n	80044ec <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80044c2:	4b57      	ldr	r3, [pc, #348]	@ (8004620 <checkAktifCalisma+0x5e8>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	f083 0301 	eor.w	r3, r3, #1
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00d      	beq.n	80044ec <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80044d0:	2201      	movs	r2, #1
 80044d2:	2102      	movs	r1, #2
 80044d4:	4847      	ldr	r0, [pc, #284]	@ (80045f4 <checkAktifCalisma+0x5bc>)
 80044d6:	f005 fd56 	bl	8009f86 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80044da:	4b4b      	ldr	r3, [pc, #300]	@ (8004608 <checkAktifCalisma+0x5d0>)
 80044dc:	2201      	movs	r2, #1
 80044de:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80044e0:	4b50      	ldr	r3, [pc, #320]	@ (8004624 <checkAktifCalisma+0x5ec>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80044e6:	4b50      	ldr	r3, [pc, #320]	@ (8004628 <checkAktifCalisma+0x5f0>)
 80044e8:	2201      	movs	r2, #1
 80044ea:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80044ec:	4b46      	ldr	r3, [pc, #280]	@ (8004608 <checkAktifCalisma+0x5d0>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d033      	beq.n	800455c <checkAktifCalisma+0x524>
 80044f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80044f8:	483e      	ldr	r0, [pc, #248]	@ (80045f4 <checkAktifCalisma+0x5bc>)
 80044fa:	f005 fd2d 	bl	8009f58 <HAL_GPIO_ReadPin>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b01      	cmp	r3, #1
 8004502:	d106      	bne.n	8004512 <checkAktifCalisma+0x4da>
 8004504:	4b3c      	ldr	r3, [pc, #240]	@ (80045f8 <checkAktifCalisma+0x5c0>)
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	f083 0301 	eor.w	r3, r3, #1
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10a      	bne.n	8004528 <checkAktifCalisma+0x4f0>
 8004512:	2104      	movs	r1, #4
 8004514:	483a      	ldr	r0, [pc, #232]	@ (8004600 <checkAktifCalisma+0x5c8>)
 8004516:	f005 fd1f 	bl	8009f58 <HAL_GPIO_ReadPin>
 800451a:	4603      	mov	r3, r0
 800451c:	2b01      	cmp	r3, #1
 800451e:	d11d      	bne.n	800455c <checkAktifCalisma+0x524>
 8004520:	4b38      	ldr	r3, [pc, #224]	@ (8004604 <checkAktifCalisma+0x5cc>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d019      	beq.n	800455c <checkAktifCalisma+0x524>
 8004528:	4b30      	ldr	r3, [pc, #192]	@ (80045ec <checkAktifCalisma+0x5b4>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d015      	beq.n	800455c <checkAktifCalisma+0x524>
 8004530:	4b2f      	ldr	r3, [pc, #188]	@ (80045f0 <checkAktifCalisma+0x5b8>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d011      	beq.n	800455c <checkAktifCalisma+0x524>
 8004538:	4b2a      	ldr	r3, [pc, #168]	@ (80045e4 <checkAktifCalisma+0x5ac>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00d      	beq.n	800455c <checkAktifCalisma+0x524>
 8004540:	4b3a      	ldr	r3, [pc, #232]	@ (800462c <checkAktifCalisma+0x5f4>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	f083 0301 	eor.w	r3, r3, #1
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d006      	beq.n	800455c <checkAktifCalisma+0x524>
			timer2=millis;
 800454e:	4b38      	ldr	r3, [pc, #224]	@ (8004630 <checkAktifCalisma+0x5f8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a38      	ldr	r2, [pc, #224]	@ (8004634 <checkAktifCalisma+0x5fc>)
 8004554:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8004556:	4b35      	ldr	r3, [pc, #212]	@ (800462c <checkAktifCalisma+0x5f4>)
 8004558:	2201      	movs	r2, #1
 800455a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 800455c:	4b34      	ldr	r3, [pc, #208]	@ (8004630 <checkAktifCalisma+0x5f8>)
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	4b34      	ldr	r3, [pc, #208]	@ (8004634 <checkAktifCalisma+0x5fc>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	4a34      	ldr	r2, [pc, #208]	@ (8004638 <checkAktifCalisma+0x600>)
 8004568:	7812      	ldrb	r2, [r2, #0]
 800456a:	4293      	cmp	r3, r2
 800456c:	d303      	bcc.n	8004576 <checkAktifCalisma+0x53e>
 800456e:	4b2f      	ldr	r3, [pc, #188]	@ (800462c <checkAktifCalisma+0x5f4>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d114      	bne.n	80045a0 <checkAktifCalisma+0x568>
 8004576:	4b1d      	ldr	r3, [pc, #116]	@ (80045ec <checkAktifCalisma+0x5b4>)
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	f083 0301 	eor.w	r3, r3, #1
 800457e:	b2db      	uxtb	r3, r3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10d      	bne.n	80045a0 <checkAktifCalisma+0x568>
 8004584:	4b1a      	ldr	r3, [pc, #104]	@ (80045f0 <checkAktifCalisma+0x5b8>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	f083 0301 	eor.w	r3, r3, #1
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <checkAktifCalisma+0x568>
 8004592:	4b14      	ldr	r3, [pc, #80]	@ (80045e4 <checkAktifCalisma+0x5ac>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	f083 0301 	eor.w	r3, r3, #1
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80045a0:	2200      	movs	r2, #0
 80045a2:	2102      	movs	r1, #2
 80045a4:	4813      	ldr	r0, [pc, #76]	@ (80045f4 <checkAktifCalisma+0x5bc>)
 80045a6:	f005 fcee 	bl	8009f86 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80045aa:	4b17      	ldr	r3, [pc, #92]	@ (8004608 <checkAktifCalisma+0x5d0>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80045b0:	4b1e      	ldr	r3, [pc, #120]	@ (800462c <checkAktifCalisma+0x5f4>)
 80045b2:	2200      	movs	r2, #0
 80045b4:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80045b6:	4b14      	ldr	r3, [pc, #80]	@ (8004608 <checkAktifCalisma+0x5d0>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d040      	beq.n	8004640 <checkAktifCalisma+0x608>
 80045be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80045c2:	480f      	ldr	r0, [pc, #60]	@ (8004600 <checkAktifCalisma+0x5c8>)
 80045c4:	f005 fcc8 	bl	8009f58 <HAL_GPIO_ReadPin>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d138      	bne.n	8004640 <checkAktifCalisma+0x608>
 80045ce:	4b1b      	ldr	r3, [pc, #108]	@ (800463c <checkAktifCalisma+0x604>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d034      	beq.n	8004640 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80045d6:	2201      	movs	r2, #1
 80045d8:	2101      	movs	r1, #1
 80045da:	4806      	ldr	r0, [pc, #24]	@ (80045f4 <checkAktifCalisma+0x5bc>)
 80045dc:	f005 fcd3 	bl	8009f86 <HAL_GPIO_WritePin>
 80045e0:	e033      	b.n	800464a <checkAktifCalisma+0x612>
 80045e2:	bf00      	nop
 80045e4:	2000111b 	.word	0x2000111b
 80045e8:	200010e1 	.word	0x200010e1
 80045ec:	20001116 	.word	0x20001116
 80045f0:	20001117 	.word	0x20001117
 80045f4:	40010c00 	.word	0x40010c00
 80045f8:	20001101 	.word	0x20001101
 80045fc:	20001115 	.word	0x20001115
 8004600:	40011000 	.word	0x40011000
 8004604:	200010ca 	.word	0x200010ca
 8004608:	200010fc 	.word	0x200010fc
 800460c:	200010f9 	.word	0x200010f9
 8004610:	200010fd 	.word	0x200010fd
 8004614:	200010fa 	.word	0x200010fa
 8004618:	200010fb 	.word	0x200010fb
 800461c:	200010fe 	.word	0x200010fe
 8004620:	200010ff 	.word	0x200010ff
 8004624:	20001104 	.word	0x20001104
 8004628:	20001125 	.word	0x20001125
 800462c:	200010f4 	.word	0x200010f4
 8004630:	200010a0 	.word	0x200010a0
 8004634:	200010ac 	.word	0x200010ac
 8004638:	200010d9 	.word	0x200010d9
 800463c:	200010c9 	.word	0x200010c9
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004640:	2200      	movs	r2, #0
 8004642:	2101      	movs	r1, #1
 8004644:	4836      	ldr	r0, [pc, #216]	@ (8004720 <checkAktifCalisma+0x6e8>)
 8004646:	f005 fc9e 	bl	8009f86 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 800464a:	4b36      	ldr	r3, [pc, #216]	@ (8004724 <checkAktifCalisma+0x6ec>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	f040 8080 	bne.w	8004754 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004654:	4b34      	ldr	r3, [pc, #208]	@ (8004728 <checkAktifCalisma+0x6f0>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d003      	beq.n	8004664 <checkAktifCalisma+0x62c>
 800465c:	4b32      	ldr	r3, [pc, #200]	@ (8004728 <checkAktifCalisma+0x6f0>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b02      	cmp	r3, #2
 8004662:	d177      	bne.n	8004754 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8004664:	4b31      	ldr	r3, [pc, #196]	@ (800472c <checkAktifCalisma+0x6f4>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d073      	beq.n	8004754 <checkAktifCalisma+0x71c>
 800466c:	4b30      	ldr	r3, [pc, #192]	@ (8004730 <checkAktifCalisma+0x6f8>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d06f      	beq.n	8004754 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8004674:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004678:	4829      	ldr	r0, [pc, #164]	@ (8004720 <checkAktifCalisma+0x6e8>)
 800467a:	f005 fc6d 	bl	8009f58 <HAL_GPIO_ReadPin>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d167      	bne.n	8004754 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8004684:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004688:	482a      	ldr	r0, [pc, #168]	@ (8004734 <checkAktifCalisma+0x6fc>)
 800468a:	f005 fc65 	bl	8009f58 <HAL_GPIO_ReadPin>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d003      	beq.n	800469c <checkAktifCalisma+0x664>
 8004694:	4b28      	ldr	r3, [pc, #160]	@ (8004738 <checkAktifCalisma+0x700>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d15b      	bne.n	8004754 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 800469c:	2140      	movs	r1, #64	@ 0x40
 800469e:	4825      	ldr	r0, [pc, #148]	@ (8004734 <checkAktifCalisma+0x6fc>)
 80046a0:	f005 fc5a 	bl	8009f58 <HAL_GPIO_ReadPin>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d10f      	bne.n	80046ca <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80046aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80046ae:	481c      	ldr	r0, [pc, #112]	@ (8004720 <checkAktifCalisma+0x6e8>)
 80046b0:	f005 fc52 	bl	8009f58 <HAL_GPIO_ReadPin>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d107      	bne.n	80046ca <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80046ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80046be:	4818      	ldr	r0, [pc, #96]	@ (8004720 <checkAktifCalisma+0x6e8>)
 80046c0:	f005 fc4a 	bl	8009f58 <HAL_GPIO_ReadPin>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d003      	beq.n	80046d2 <checkAktifCalisma+0x69a>
 80046ca:	4b1c      	ldr	r3, [pc, #112]	@ (800473c <checkAktifCalisma+0x704>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d040      	beq.n	8004754 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80046d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004740 <checkAktifCalisma+0x708>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	f083 0301 	eor.w	r3, r3, #1
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d039      	beq.n	8004754 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 80046e0:	4b18      	ldr	r3, [pc, #96]	@ (8004744 <checkAktifCalisma+0x70c>)
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	f083 0301 	eor.w	r3, r3, #1
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d032      	beq.n	8004754 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 80046ee:	4b16      	ldr	r3, [pc, #88]	@ (8004748 <checkAktifCalisma+0x710>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	f083 0301 	eor.w	r3, r3, #1
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d02b      	beq.n	8004754 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 80046fc:	4b13      	ldr	r3, [pc, #76]	@ (800474c <checkAktifCalisma+0x714>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	f083 0301 	eor.w	r3, r3, #1
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d024      	beq.n	8004754 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 800470a:	4b11      	ldr	r3, [pc, #68]	@ (8004750 <checkAktifCalisma+0x718>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	f083 0301 	eor.w	r3, r3, #1
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d01d      	beq.n	8004754 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8004718:	4b08      	ldr	r3, [pc, #32]	@ (800473c <checkAktifCalisma+0x704>)
 800471a:	2201      	movs	r2, #1
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	e01c      	b.n	800475a <checkAktifCalisma+0x722>
 8004720:	40010c00 	.word	0x40010c00
 8004724:	200010e1 	.word	0x200010e1
 8004728:	200010d3 	.word	0x200010d3
 800472c:	20001116 	.word	0x20001116
 8004730:	20001117 	.word	0x20001117
 8004734:	40011000 	.word	0x40011000
 8004738:	200010d4 	.word	0x200010d4
 800473c:	200010fa 	.word	0x200010fa
 8004740:	200010f9 	.word	0x200010f9
 8004744:	200010fd 	.word	0x200010fd
 8004748:	200010fc 	.word	0x200010fc
 800474c:	200010fb 	.word	0x200010fb
 8004750:	200010ff 	.word	0x200010ff
		} else {
			devmotoryukaricalisiyor=0;
 8004754:	4b64      	ldr	r3, [pc, #400]	@ (80048e8 <checkAktifCalisma+0x8b0>)
 8004756:	2200      	movs	r2, #0
 8004758:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 800475a:	4b63      	ldr	r3, [pc, #396]	@ (80048e8 <checkAktifCalisma+0x8b0>)
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d007      	beq.n	8004772 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8004762:	2201      	movs	r2, #1
 8004764:	2120      	movs	r1, #32
 8004766:	4861      	ldr	r0, [pc, #388]	@ (80048ec <checkAktifCalisma+0x8b4>)
 8004768:	f005 fc0d 	bl	8009f86 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 800476c:	4b60      	ldr	r3, [pc, #384]	@ (80048f0 <checkAktifCalisma+0x8b8>)
 800476e:	2201      	movs	r2, #1
 8004770:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8004772:	4b5f      	ldr	r3, [pc, #380]	@ (80048f0 <checkAktifCalisma+0x8b8>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d025      	beq.n	80047c6 <checkAktifCalisma+0x78e>
 800477a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800477e:	485d      	ldr	r0, [pc, #372]	@ (80048f4 <checkAktifCalisma+0x8bc>)
 8004780:	f005 fbea 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004784:	4603      	mov	r3, r0
 8004786:	2b01      	cmp	r3, #1
 8004788:	d007      	beq.n	800479a <checkAktifCalisma+0x762>
 800478a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800478e:	4857      	ldr	r0, [pc, #348]	@ (80048ec <checkAktifCalisma+0x8b4>)
 8004790:	f005 fbe2 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004794:	4603      	mov	r3, r0
 8004796:	2b01      	cmp	r3, #1
 8004798:	d115      	bne.n	80047c6 <checkAktifCalisma+0x78e>
 800479a:	4b57      	ldr	r3, [pc, #348]	@ (80048f8 <checkAktifCalisma+0x8c0>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d011      	beq.n	80047c6 <checkAktifCalisma+0x78e>
 80047a2:	4b56      	ldr	r3, [pc, #344]	@ (80048fc <checkAktifCalisma+0x8c4>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00d      	beq.n	80047c6 <checkAktifCalisma+0x78e>
 80047aa:	4b55      	ldr	r3, [pc, #340]	@ (8004900 <checkAktifCalisma+0x8c8>)
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	f083 0301 	eor.w	r3, r3, #1
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d006      	beq.n	80047c6 <checkAktifCalisma+0x78e>
			timer2=millis;
 80047b8:	4b52      	ldr	r3, [pc, #328]	@ (8004904 <checkAktifCalisma+0x8cc>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a52      	ldr	r2, [pc, #328]	@ (8004908 <checkAktifCalisma+0x8d0>)
 80047be:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80047c0:	4b4f      	ldr	r3, [pc, #316]	@ (8004900 <checkAktifCalisma+0x8c8>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80047c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004904 <checkAktifCalisma+0x8cc>)
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	4b4f      	ldr	r3, [pc, #316]	@ (8004908 <checkAktifCalisma+0x8d0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	4a4e      	ldr	r2, [pc, #312]	@ (800490c <checkAktifCalisma+0x8d4>)
 80047d2:	7812      	ldrb	r2, [r2, #0]
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d303      	bcc.n	80047e0 <checkAktifCalisma+0x7a8>
 80047d8:	4b49      	ldr	r3, [pc, #292]	@ (8004900 <checkAktifCalisma+0x8c8>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10d      	bne.n	80047fc <checkAktifCalisma+0x7c4>
 80047e0:	4b45      	ldr	r3, [pc, #276]	@ (80048f8 <checkAktifCalisma+0x8c0>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	f083 0301 	eor.w	r3, r3, #1
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <checkAktifCalisma+0x7c4>
 80047ee:	4b43      	ldr	r3, [pc, #268]	@ (80048fc <checkAktifCalisma+0x8c4>)
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	f083 0301 	eor.w	r3, r3, #1
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80047fc:	2200      	movs	r2, #0
 80047fe:	2120      	movs	r1, #32
 8004800:	483a      	ldr	r0, [pc, #232]	@ (80048ec <checkAktifCalisma+0x8b4>)
 8004802:	f005 fbc0 	bl	8009f86 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8004806:	4b3a      	ldr	r3, [pc, #232]	@ (80048f0 <checkAktifCalisma+0x8b8>)
 8004808:	2200      	movs	r2, #0
 800480a:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 800480c:	4b3c      	ldr	r3, [pc, #240]	@ (8004900 <checkAktifCalisma+0x8c8>)
 800480e:	2200      	movs	r2, #0
 8004810:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8004812:	4b3f      	ldr	r3, [pc, #252]	@ (8004910 <checkAktifCalisma+0x8d8>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	f040 8088 	bne.w	800492c <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 800481c:	4b3d      	ldr	r3, [pc, #244]	@ (8004914 <checkAktifCalisma+0x8dc>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b01      	cmp	r3, #1
 8004822:	d003      	beq.n	800482c <checkAktifCalisma+0x7f4>
 8004824:	4b3b      	ldr	r3, [pc, #236]	@ (8004914 <checkAktifCalisma+0x8dc>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	2b02      	cmp	r3, #2
 800482a:	d17f      	bne.n	800492c <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 800482c:	4b32      	ldr	r3, [pc, #200]	@ (80048f8 <checkAktifCalisma+0x8c0>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d07b      	beq.n	800492c <checkAktifCalisma+0x8f4>
 8004834:	4b31      	ldr	r3, [pc, #196]	@ (80048fc <checkAktifCalisma+0x8c4>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d077      	beq.n	800492c <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 800483c:	2140      	movs	r1, #64	@ 0x40
 800483e:	482b      	ldr	r0, [pc, #172]	@ (80048ec <checkAktifCalisma+0x8b4>)
 8004840:	f005 fb8a 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d170      	bne.n	800492c <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 800484a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800484e:	4827      	ldr	r0, [pc, #156]	@ (80048ec <checkAktifCalisma+0x8b4>)
 8004850:	f005 fb82 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <checkAktifCalisma+0x82a>
 800485a:	4b2f      	ldr	r3, [pc, #188]	@ (8004918 <checkAktifCalisma+0x8e0>)
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d164      	bne.n	800492c <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004862:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004866:	4823      	ldr	r0, [pc, #140]	@ (80048f4 <checkAktifCalisma+0x8bc>)
 8004868:	f005 fb76 	bl	8009f58 <HAL_GPIO_ReadPin>
 800486c:	4603      	mov	r3, r0
 800486e:	2b01      	cmp	r3, #1
 8004870:	d10f      	bne.n	8004892 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004872:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004876:	481f      	ldr	r0, [pc, #124]	@ (80048f4 <checkAktifCalisma+0x8bc>)
 8004878:	f005 fb6e 	bl	8009f58 <HAL_GPIO_ReadPin>
 800487c:	4603      	mov	r3, r0
 800487e:	2b01      	cmp	r3, #1
 8004880:	d107      	bne.n	8004892 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8004882:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004886:	481b      	ldr	r0, [pc, #108]	@ (80048f4 <checkAktifCalisma+0x8bc>)
 8004888:	f005 fb66 	bl	8009f58 <HAL_GPIO_ReadPin>
 800488c:	4603      	mov	r3, r0
 800488e:	2b01      	cmp	r3, #1
 8004890:	d003      	beq.n	800489a <checkAktifCalisma+0x862>
 8004892:	4b22      	ldr	r3, [pc, #136]	@ (800491c <checkAktifCalisma+0x8e4>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d048      	beq.n	800492c <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800489a:	4b21      	ldr	r3, [pc, #132]	@ (8004920 <checkAktifCalisma+0x8e8>)
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	f083 0301 	eor.w	r3, r3, #1
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d041      	beq.n	800492c <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 80048a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004924 <checkAktifCalisma+0x8ec>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	f083 0301 	eor.w	r3, r3, #1
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d03a      	beq.n	800492c <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80048b6:	4b1c      	ldr	r3, [pc, #112]	@ (8004928 <checkAktifCalisma+0x8f0>)
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	f083 0301 	eor.w	r3, r3, #1
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d033      	beq.n	800492c <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80048c4:	4b0a      	ldr	r3, [pc, #40]	@ (80048f0 <checkAktifCalisma+0x8b8>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	f083 0301 	eor.w	r3, r3, #1
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d02c      	beq.n	800492c <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80048d2:	4b05      	ldr	r3, [pc, #20]	@ (80048e8 <checkAktifCalisma+0x8b0>)
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	f083 0301 	eor.w	r3, r3, #1
 80048da:	b2db      	uxtb	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d025      	beq.n	800492c <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 80048e0:	4b0e      	ldr	r3, [pc, #56]	@ (800491c <checkAktifCalisma+0x8e4>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	701a      	strb	r2, [r3, #0]
 80048e6:	e024      	b.n	8004932 <checkAktifCalisma+0x8fa>
 80048e8:	200010fa 	.word	0x200010fa
 80048ec:	40011000 	.word	0x40011000
 80048f0:	200010fe 	.word	0x200010fe
 80048f4:	40010c00 	.word	0x40010c00
 80048f8:	20001116 	.word	0x20001116
 80048fc:	20001117 	.word	0x20001117
 8004900:	200010f6 	.word	0x200010f6
 8004904:	200010a0 	.word	0x200010a0
 8004908:	200010ac 	.word	0x200010ac
 800490c:	200010da 	.word	0x200010da
 8004910:	200010e1 	.word	0x200010e1
 8004914:	200010d3 	.word	0x200010d3
 8004918:	200010d5 	.word	0x200010d5
 800491c:	200010fb 	.word	0x200010fb
 8004920:	200010f9 	.word	0x200010f9
 8004924:	200010fd 	.word	0x200010fd
 8004928:	200010fc 	.word	0x200010fc
		} else {
			devmotorasagicalisiyor=0;
 800492c:	4b96      	ldr	r3, [pc, #600]	@ (8004b88 <checkAktifCalisma+0xb50>)
 800492e:	2200      	movs	r2, #0
 8004930:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8004932:	4b95      	ldr	r3, [pc, #596]	@ (8004b88 <checkAktifCalisma+0xb50>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800493a:	2201      	movs	r2, #1
 800493c:	2110      	movs	r1, #16
 800493e:	4893      	ldr	r0, [pc, #588]	@ (8004b8c <checkAktifCalisma+0xb54>)
 8004940:	f005 fb21 	bl	8009f86 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8004944:	4b92      	ldr	r3, [pc, #584]	@ (8004b90 <checkAktifCalisma+0xb58>)
 8004946:	2201      	movs	r2, #1
 8004948:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 800494a:	4b91      	ldr	r3, [pc, #580]	@ (8004b90 <checkAktifCalisma+0xb58>)
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d024      	beq.n	800499c <checkAktifCalisma+0x964>
 8004952:	2140      	movs	r1, #64	@ 0x40
 8004954:	488d      	ldr	r0, [pc, #564]	@ (8004b8c <checkAktifCalisma+0xb54>)
 8004956:	f005 faff 	bl	8009f58 <HAL_GPIO_ReadPin>
 800495a:	4603      	mov	r3, r0
 800495c:	2b01      	cmp	r3, #1
 800495e:	d007      	beq.n	8004970 <checkAktifCalisma+0x938>
 8004960:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004964:	4889      	ldr	r0, [pc, #548]	@ (8004b8c <checkAktifCalisma+0xb54>)
 8004966:	f005 faf7 	bl	8009f58 <HAL_GPIO_ReadPin>
 800496a:	4603      	mov	r3, r0
 800496c:	2b01      	cmp	r3, #1
 800496e:	d115      	bne.n	800499c <checkAktifCalisma+0x964>
 8004970:	4b88      	ldr	r3, [pc, #544]	@ (8004b94 <checkAktifCalisma+0xb5c>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d011      	beq.n	800499c <checkAktifCalisma+0x964>
 8004978:	4b87      	ldr	r3, [pc, #540]	@ (8004b98 <checkAktifCalisma+0xb60>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00d      	beq.n	800499c <checkAktifCalisma+0x964>
 8004980:	4b86      	ldr	r3, [pc, #536]	@ (8004b9c <checkAktifCalisma+0xb64>)
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	f083 0301 	eor.w	r3, r3, #1
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d006      	beq.n	800499c <checkAktifCalisma+0x964>
			timer2=millis;
 800498e:	4b84      	ldr	r3, [pc, #528]	@ (8004ba0 <checkAktifCalisma+0xb68>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a84      	ldr	r2, [pc, #528]	@ (8004ba4 <checkAktifCalisma+0xb6c>)
 8004994:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8004996:	4b81      	ldr	r3, [pc, #516]	@ (8004b9c <checkAktifCalisma+0xb64>)
 8004998:	2201      	movs	r2, #1
 800499a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800499c:	4b80      	ldr	r3, [pc, #512]	@ (8004ba0 <checkAktifCalisma+0xb68>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	4b80      	ldr	r3, [pc, #512]	@ (8004ba4 <checkAktifCalisma+0xb6c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	4a80      	ldr	r2, [pc, #512]	@ (8004ba8 <checkAktifCalisma+0xb70>)
 80049a8:	7812      	ldrb	r2, [r2, #0]
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d303      	bcc.n	80049b6 <checkAktifCalisma+0x97e>
 80049ae:	4b7b      	ldr	r3, [pc, #492]	@ (8004b9c <checkAktifCalisma+0xb64>)
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10d      	bne.n	80049d2 <checkAktifCalisma+0x99a>
 80049b6:	4b77      	ldr	r3, [pc, #476]	@ (8004b94 <checkAktifCalisma+0xb5c>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	f083 0301 	eor.w	r3, r3, #1
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d106      	bne.n	80049d2 <checkAktifCalisma+0x99a>
 80049c4:	4b74      	ldr	r3, [pc, #464]	@ (8004b98 <checkAktifCalisma+0xb60>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	f083 0301 	eor.w	r3, r3, #1
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00a      	beq.n	80049e8 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80049d2:	2200      	movs	r2, #0
 80049d4:	2110      	movs	r1, #16
 80049d6:	486d      	ldr	r0, [pc, #436]	@ (8004b8c <checkAktifCalisma+0xb54>)
 80049d8:	f005 fad5 	bl	8009f86 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 80049dc:	4b6c      	ldr	r3, [pc, #432]	@ (8004b90 <checkAktifCalisma+0xb58>)
 80049de:	2200      	movs	r2, #0
 80049e0:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 80049e2:	4b6e      	ldr	r3, [pc, #440]	@ (8004b9c <checkAktifCalisma+0xb64>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80049e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80049ec:	486f      	ldr	r0, [pc, #444]	@ (8004bac <checkAktifCalisma+0xb74>)
 80049ee:	f005 fab3 	bl	8009f58 <HAL_GPIO_ReadPin>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d120      	bne.n	8004a3a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80049f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80049fc:	486b      	ldr	r0, [pc, #428]	@ (8004bac <checkAktifCalisma+0xb74>)
 80049fe:	f005 faab 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d118      	bne.n	8004a3a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004a08:	2104      	movs	r1, #4
 8004a0a:	4868      	ldr	r0, [pc, #416]	@ (8004bac <checkAktifCalisma+0xb74>)
 8004a0c:	f005 faa4 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d111      	bne.n	8004a3a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004a16:	2102      	movs	r1, #2
 8004a18:	4864      	ldr	r0, [pc, #400]	@ (8004bac <checkAktifCalisma+0xb74>)
 8004a1a:	f005 fa9d 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004a24:	2101      	movs	r1, #1
 8004a26:	4861      	ldr	r0, [pc, #388]	@ (8004bac <checkAktifCalisma+0xb74>)
 8004a28:	f005 fa96 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d103      	bne.n	8004a3a <checkAktifCalisma+0xa02>
			makineStop=1;
 8004a32:	4b5f      	ldr	r3, [pc, #380]	@ (8004bb0 <checkAktifCalisma+0xb78>)
 8004a34:	2201      	movs	r2, #1
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	e002      	b.n	8004a40 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8004a3a:	4b5d      	ldr	r3, [pc, #372]	@ (8004bb0 <checkAktifCalisma+0xb78>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004a40:	4b5c      	ldr	r3, [pc, #368]	@ (8004bb4 <checkAktifCalisma+0xb7c>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d144      	bne.n	8004ad2 <checkAktifCalisma+0xa9a>
 8004a48:	4b5b      	ldr	r3, [pc, #364]	@ (8004bb8 <checkAktifCalisma+0xb80>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d003      	beq.n	8004a58 <checkAktifCalisma+0xa20>
 8004a50:	4b59      	ldr	r3, [pc, #356]	@ (8004bb8 <checkAktifCalisma+0xb80>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b03      	cmp	r3, #3
 8004a56:	d13c      	bne.n	8004ad2 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004a58:	2180      	movs	r1, #128	@ 0x80
 8004a5a:	484c      	ldr	r0, [pc, #304]	@ (8004b8c <checkAktifCalisma+0xb54>)
 8004a5c:	f005 fa7c 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d103      	bne.n	8004a6e <checkAktifCalisma+0xa36>
 8004a66:	4b55      	ldr	r3, [pc, #340]	@ (8004bbc <checkAktifCalisma+0xb84>)
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00b      	beq.n	8004a86 <checkAktifCalisma+0xa4e>
 8004a6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a72:	484e      	ldr	r0, [pc, #312]	@ (8004bac <checkAktifCalisma+0xb74>)
 8004a74:	f005 fa70 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d129      	bne.n	8004ad2 <checkAktifCalisma+0xa9a>
 8004a7e:	4b4f      	ldr	r3, [pc, #316]	@ (8004bbc <checkAktifCalisma+0xb84>)
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d125      	bne.n	8004ad2 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004a86:	2104      	movs	r1, #4
 8004a88:	4840      	ldr	r0, [pc, #256]	@ (8004b8c <checkAktifCalisma+0xb54>)
 8004a8a:	f005 fa65 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d003      	beq.n	8004a9c <checkAktifCalisma+0xa64>
 8004a94:	4b4a      	ldr	r3, [pc, #296]	@ (8004bc0 <checkAktifCalisma+0xb88>)
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d11a      	bne.n	8004ad2 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004a9c:	2102      	movs	r1, #2
 8004a9e:	483b      	ldr	r0, [pc, #236]	@ (8004b8c <checkAktifCalisma+0xb54>)
 8004aa0:	f005 fa5a 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d113      	bne.n	8004ad2 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8004aaa:	4b46      	ldr	r3, [pc, #280]	@ (8004bc4 <checkAktifCalisma+0xb8c>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	f083 0301 	eor.w	r3, r3, #1
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00c      	beq.n	8004ad2 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8004ab8:	4b3d      	ldr	r3, [pc, #244]	@ (8004bb0 <checkAktifCalisma+0xb78>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d008      	beq.n	8004ad2 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8004ac0:	4b41      	ldr	r3, [pc, #260]	@ (8004bc8 <checkAktifCalisma+0xb90>)
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8004ac6:	4b36      	ldr	r3, [pc, #216]	@ (8004ba0 <checkAktifCalisma+0xb68>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a40      	ldr	r2, [pc, #256]	@ (8004bcc <checkAktifCalisma+0xb94>)
 8004acc:	6013      	str	r3, [r2, #0]
			bekle();
 8004ace:	f7ff f917 	bl	8003d00 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004ad2:	4b33      	ldr	r3, [pc, #204]	@ (8004ba0 <checkAktifCalisma+0xb68>)
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4b3d      	ldr	r3, [pc, #244]	@ (8004bcc <checkAktifCalisma+0xb94>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	4a3c      	ldr	r2, [pc, #240]	@ (8004bd0 <checkAktifCalisma+0xb98>)
 8004ade:	7812      	ldrb	r2, [r2, #0]
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d211      	bcs.n	8004b08 <checkAktifCalisma+0xad0>
 8004ae4:	2104      	movs	r1, #4
 8004ae6:	4829      	ldr	r0, [pc, #164]	@ (8004b8c <checkAktifCalisma+0xb54>)
 8004ae8:	f005 fa36 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00a      	beq.n	8004b08 <checkAktifCalisma+0xad0>
 8004af2:	4b33      	ldr	r3, [pc, #204]	@ (8004bc0 <checkAktifCalisma+0xb88>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d006      	beq.n	8004b08 <checkAktifCalisma+0xad0>
 8004afa:	4b2d      	ldr	r3, [pc, #180]	@ (8004bb0 <checkAktifCalisma+0xb78>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	f083 0301 	eor.w	r3, r3, #1
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8004b08:	4b2f      	ldr	r3, [pc, #188]	@ (8004bc8 <checkAktifCalisma+0xb90>)
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004b0e:	4b29      	ldr	r3, [pc, #164]	@ (8004bb4 <checkAktifCalisma+0xb7c>)
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d160      	bne.n	8004bd8 <checkAktifCalisma+0xba0>
 8004b16:	4b28      	ldr	r3, [pc, #160]	@ (8004bb8 <checkAktifCalisma+0xb80>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d003      	beq.n	8004b26 <checkAktifCalisma+0xaee>
 8004b1e:	4b26      	ldr	r3, [pc, #152]	@ (8004bb8 <checkAktifCalisma+0xb80>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	2b03      	cmp	r3, #3
 8004b24:	d158      	bne.n	8004bd8 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004b26:	2104      	movs	r1, #4
 8004b28:	4818      	ldr	r0, [pc, #96]	@ (8004b8c <checkAktifCalisma+0xb54>)
 8004b2a:	f005 fa15 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d003      	beq.n	8004b3c <checkAktifCalisma+0xb04>
 8004b34:	4b22      	ldr	r3, [pc, #136]	@ (8004bc0 <checkAktifCalisma+0xb88>)
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d14d      	bne.n	8004bd8 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004b3c:	2102      	movs	r1, #2
 8004b3e:	4813      	ldr	r0, [pc, #76]	@ (8004b8c <checkAktifCalisma+0xb54>)
 8004b40:	f005 fa0a 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d146      	bne.n	8004bd8 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004b4a:	2180      	movs	r1, #128	@ 0x80
 8004b4c:	480f      	ldr	r0, [pc, #60]	@ (8004b8c <checkAktifCalisma+0xb54>)
 8004b4e:	f005 fa03 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d103      	bne.n	8004b60 <checkAktifCalisma+0xb28>
 8004b58:	4b18      	ldr	r3, [pc, #96]	@ (8004bbc <checkAktifCalisma+0xb84>)
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d00b      	beq.n	8004b78 <checkAktifCalisma+0xb40>
 8004b60:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004b64:	4811      	ldr	r0, [pc, #68]	@ (8004bac <checkAktifCalisma+0xb74>)
 8004b66:	f005 f9f7 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d133      	bne.n	8004bd8 <checkAktifCalisma+0xba0>
 8004b70:	4b12      	ldr	r3, [pc, #72]	@ (8004bbc <checkAktifCalisma+0xb84>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d12f      	bne.n	8004bd8 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8004b78:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb0 <checkAktifCalisma+0xb78>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d02b      	beq.n	8004bd8 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8004b80:	4b14      	ldr	r3, [pc, #80]	@ (8004bd4 <checkAktifCalisma+0xb9c>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	701a      	strb	r2, [r3, #0]
 8004b86:	e02a      	b.n	8004bde <checkAktifCalisma+0xba6>
 8004b88:	200010fb 	.word	0x200010fb
 8004b8c:	40011000 	.word	0x40011000
 8004b90:	200010ff 	.word	0x200010ff
 8004b94:	20001116 	.word	0x20001116
 8004b98:	20001117 	.word	0x20001117
 8004b9c:	200010f7 	.word	0x200010f7
 8004ba0:	200010a0 	.word	0x200010a0
 8004ba4:	200010ac 	.word	0x200010ac
 8004ba8:	200010da 	.word	0x200010da
 8004bac:	40010c00 	.word	0x40010c00
 8004bb0:	20001106 	.word	0x20001106
 8004bb4:	200010cd 	.word	0x200010cd
 8004bb8:	200010cc 	.word	0x200010cc
 8004bbc:	200010d0 	.word	0x200010d0
 8004bc0:	200010ca 	.word	0x200010ca
 8004bc4:	200010f3 	.word	0x200010f3
 8004bc8:	20001107 	.word	0x20001107
 8004bcc:	200010a4 	.word	0x200010a4
 8004bd0:	200010dd 	.word	0x200010dd
 8004bd4:	20001108 	.word	0x20001108
		} else {
			kapi1butonkontrol=0;
 8004bd8:	4b8b      	ldr	r3, [pc, #556]	@ (8004e08 <checkAktifCalisma+0xdd0>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004bde:	4b8b      	ldr	r3, [pc, #556]	@ (8004e0c <checkAktifCalisma+0xdd4>)
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d121      	bne.n	8004c2a <checkAktifCalisma+0xbf2>
 8004be6:	4b8a      	ldr	r3, [pc, #552]	@ (8004e10 <checkAktifCalisma+0xdd8>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d003      	beq.n	8004bf6 <checkAktifCalisma+0xbbe>
 8004bee:	4b88      	ldr	r3, [pc, #544]	@ (8004e10 <checkAktifCalisma+0xdd8>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d119      	bne.n	8004c2a <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004bf6:	2104      	movs	r1, #4
 8004bf8:	4886      	ldr	r0, [pc, #536]	@ (8004e14 <checkAktifCalisma+0xddc>)
 8004bfa:	f005 f9ad 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d003      	beq.n	8004c0c <checkAktifCalisma+0xbd4>
 8004c04:	4b84      	ldr	r3, [pc, #528]	@ (8004e18 <checkAktifCalisma+0xde0>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10e      	bne.n	8004c2a <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004c0c:	2102      	movs	r1, #2
 8004c0e:	4881      	ldr	r0, [pc, #516]	@ (8004e14 <checkAktifCalisma+0xddc>)
 8004c10:	f005 f9a2 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d107      	bne.n	8004c2a <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8004c1a:	4b80      	ldr	r3, [pc, #512]	@ (8004e1c <checkAktifCalisma+0xde4>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8004c22:	4b7f      	ldr	r3, [pc, #508]	@ (8004e20 <checkAktifCalisma+0xde8>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	701a      	strb	r2, [r3, #0]
 8004c28:	e002      	b.n	8004c30 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8004c2a:	4b7d      	ldr	r3, [pc, #500]	@ (8004e20 <checkAktifCalisma+0xde8>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004c30:	4b75      	ldr	r3, [pc, #468]	@ (8004e08 <checkAktifCalisma+0xdd0>)
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d107      	bne.n	8004c48 <checkAktifCalisma+0xc10>
 8004c38:	4b79      	ldr	r3, [pc, #484]	@ (8004e20 <checkAktifCalisma+0xde8>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d103      	bne.n	8004c48 <checkAktifCalisma+0xc10>
 8004c40:	4b78      	ldr	r3, [pc, #480]	@ (8004e24 <checkAktifCalisma+0xdec>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004c48:	2201      	movs	r2, #1
 8004c4a:	2180      	movs	r1, #128	@ 0x80
 8004c4c:	4876      	ldr	r0, [pc, #472]	@ (8004e28 <checkAktifCalisma+0xdf0>)
 8004c4e:	f005 f99a 	bl	8009f86 <HAL_GPIO_WritePin>
 8004c52:	e004      	b.n	8004c5e <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004c54:	2200      	movs	r2, #0
 8004c56:	2180      	movs	r1, #128	@ 0x80
 8004c58:	4873      	ldr	r0, [pc, #460]	@ (8004e28 <checkAktifCalisma+0xdf0>)
 8004c5a:	f005 f994 	bl	8009f86 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004c5e:	4b73      	ldr	r3, [pc, #460]	@ (8004e2c <checkAktifCalisma+0xdf4>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d141      	bne.n	8004cea <checkAktifCalisma+0xcb2>
 8004c66:	4b6a      	ldr	r3, [pc, #424]	@ (8004e10 <checkAktifCalisma+0xdd8>)
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d003      	beq.n	8004c76 <checkAktifCalisma+0xc3e>
 8004c6e:	4b68      	ldr	r3, [pc, #416]	@ (8004e10 <checkAktifCalisma+0xdd8>)
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d139      	bne.n	8004cea <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004c76:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c7a:	4866      	ldr	r0, [pc, #408]	@ (8004e14 <checkAktifCalisma+0xddc>)
 8004c7c:	f005 f96c 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d103      	bne.n	8004c8e <checkAktifCalisma+0xc56>
 8004c86:	4b6a      	ldr	r3, [pc, #424]	@ (8004e30 <checkAktifCalisma+0xdf8>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00b      	beq.n	8004ca6 <checkAktifCalisma+0xc6e>
 8004c8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004c92:	4868      	ldr	r0, [pc, #416]	@ (8004e34 <checkAktifCalisma+0xdfc>)
 8004c94:	f005 f960 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d125      	bne.n	8004cea <checkAktifCalisma+0xcb2>
 8004c9e:	4b64      	ldr	r3, [pc, #400]	@ (8004e30 <checkAktifCalisma+0xdf8>)
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d121      	bne.n	8004cea <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004ca6:	2102      	movs	r1, #2
 8004ca8:	485a      	ldr	r0, [pc, #360]	@ (8004e14 <checkAktifCalisma+0xddc>)
 8004caa:	f005 f955 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d11a      	bne.n	8004cea <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004cb4:	2104      	movs	r1, #4
 8004cb6:	4857      	ldr	r0, [pc, #348]	@ (8004e14 <checkAktifCalisma+0xddc>)
 8004cb8:	f005 f94e 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d113      	bne.n	8004cea <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8004cc2:	4b56      	ldr	r3, [pc, #344]	@ (8004e1c <checkAktifCalisma+0xde4>)
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00f      	beq.n	8004cea <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8004cca:	4b5b      	ldr	r3, [pc, #364]	@ (8004e38 <checkAktifCalisma+0xe00>)
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	f083 0301 	eor.w	r3, r3, #1
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8004cd8:	4b58      	ldr	r3, [pc, #352]	@ (8004e3c <checkAktifCalisma+0xe04>)
 8004cda:	2201      	movs	r2, #1
 8004cdc:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8004cde:	4b58      	ldr	r3, [pc, #352]	@ (8004e40 <checkAktifCalisma+0xe08>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a58      	ldr	r2, [pc, #352]	@ (8004e44 <checkAktifCalisma+0xe0c>)
 8004ce4:	6013      	str	r3, [r2, #0]
			bekle();
 8004ce6:	f7ff f80b 	bl	8003d00 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8004cea:	4b55      	ldr	r3, [pc, #340]	@ (8004e40 <checkAktifCalisma+0xe08>)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4b55      	ldr	r3, [pc, #340]	@ (8004e44 <checkAktifCalisma+0xe0c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	4a54      	ldr	r2, [pc, #336]	@ (8004e48 <checkAktifCalisma+0xe10>)
 8004cf6:	7812      	ldrb	r2, [r2, #0]
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d20d      	bcs.n	8004d18 <checkAktifCalisma+0xce0>
 8004cfc:	2102      	movs	r1, #2
 8004cfe:	4845      	ldr	r0, [pc, #276]	@ (8004e14 <checkAktifCalisma+0xddc>)
 8004d00:	f005 f92a 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d006      	beq.n	8004d18 <checkAktifCalisma+0xce0>
 8004d0a:	4b44      	ldr	r3, [pc, #272]	@ (8004e1c <checkAktifCalisma+0xde4>)
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	f083 0301 	eor.w	r3, r3, #1
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8004d18:	4b48      	ldr	r3, [pc, #288]	@ (8004e3c <checkAktifCalisma+0xe04>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004d1e:	4b43      	ldr	r3, [pc, #268]	@ (8004e2c <checkAktifCalisma+0xdf4>)
 8004d20:	781b      	ldrb	r3, [r3, #0]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d135      	bne.n	8004d92 <checkAktifCalisma+0xd5a>
 8004d26:	4b3a      	ldr	r3, [pc, #232]	@ (8004e10 <checkAktifCalisma+0xdd8>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d003      	beq.n	8004d36 <checkAktifCalisma+0xcfe>
 8004d2e:	4b38      	ldr	r3, [pc, #224]	@ (8004e10 <checkAktifCalisma+0xdd8>)
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	2b03      	cmp	r3, #3
 8004d34:	d12d      	bne.n	8004d92 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004d36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d3a:	4836      	ldr	r0, [pc, #216]	@ (8004e14 <checkAktifCalisma+0xddc>)
 8004d3c:	f005 f90c 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d103      	bne.n	8004d4e <checkAktifCalisma+0xd16>
 8004d46:	4b3a      	ldr	r3, [pc, #232]	@ (8004e30 <checkAktifCalisma+0xdf8>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00b      	beq.n	8004d66 <checkAktifCalisma+0xd2e>
 8004d4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004d52:	4838      	ldr	r0, [pc, #224]	@ (8004e34 <checkAktifCalisma+0xdfc>)
 8004d54:	f005 f900 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d119      	bne.n	8004d92 <checkAktifCalisma+0xd5a>
 8004d5e:	4b34      	ldr	r3, [pc, #208]	@ (8004e30 <checkAktifCalisma+0xdf8>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d115      	bne.n	8004d92 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004d66:	2102      	movs	r1, #2
 8004d68:	482a      	ldr	r0, [pc, #168]	@ (8004e14 <checkAktifCalisma+0xddc>)
 8004d6a:	f005 f8f5 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d10e      	bne.n	8004d92 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004d74:	2104      	movs	r1, #4
 8004d76:	4827      	ldr	r0, [pc, #156]	@ (8004e14 <checkAktifCalisma+0xddc>)
 8004d78:	f005 f8ee 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d107      	bne.n	8004d92 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8004d82:	4b26      	ldr	r3, [pc, #152]	@ (8004e1c <checkAktifCalisma+0xde4>)
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8004d8a:	4b30      	ldr	r3, [pc, #192]	@ (8004e4c <checkAktifCalisma+0xe14>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	701a      	strb	r2, [r3, #0]
 8004d90:	e002      	b.n	8004d98 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8004d92:	4b2e      	ldr	r3, [pc, #184]	@ (8004e4c <checkAktifCalisma+0xe14>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004d98:	4b24      	ldr	r3, [pc, #144]	@ (8004e2c <checkAktifCalisma+0xdf4>)
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d11d      	bne.n	8004ddc <checkAktifCalisma+0xda4>
 8004da0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e10 <checkAktifCalisma+0xdd8>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d003      	beq.n	8004db0 <checkAktifCalisma+0xd78>
 8004da8:	4b19      	ldr	r3, [pc, #100]	@ (8004e10 <checkAktifCalisma+0xdd8>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d115      	bne.n	8004ddc <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004db0:	2102      	movs	r1, #2
 8004db2:	4818      	ldr	r0, [pc, #96]	@ (8004e14 <checkAktifCalisma+0xddc>)
 8004db4:	f005 f8d0 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d10e      	bne.n	8004ddc <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004dbe:	2104      	movs	r1, #4
 8004dc0:	4814      	ldr	r0, [pc, #80]	@ (8004e14 <checkAktifCalisma+0xddc>)
 8004dc2:	f005 f8c9 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d107      	bne.n	8004ddc <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8004dcc:	4b13      	ldr	r3, [pc, #76]	@ (8004e1c <checkAktifCalisma+0xde4>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8004dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8004e50 <checkAktifCalisma+0xe18>)
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	e002      	b.n	8004de2 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8004ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8004e50 <checkAktifCalisma+0xe18>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8004de2:	4b1a      	ldr	r3, [pc, #104]	@ (8004e4c <checkAktifCalisma+0xe14>)
 8004de4:	781b      	ldrb	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d107      	bne.n	8004dfa <checkAktifCalisma+0xdc2>
 8004dea:	4b19      	ldr	r3, [pc, #100]	@ (8004e50 <checkAktifCalisma+0xe18>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d103      	bne.n	8004dfa <checkAktifCalisma+0xdc2>
 8004df2:	4b12      	ldr	r3, [pc, #72]	@ (8004e3c <checkAktifCalisma+0xe04>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d02c      	beq.n	8004e54 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	2140      	movs	r1, #64	@ 0x40
 8004dfe:	480a      	ldr	r0, [pc, #40]	@ (8004e28 <checkAktifCalisma+0xdf0>)
 8004e00:	f005 f8c1 	bl	8009f86 <HAL_GPIO_WritePin>
 8004e04:	e02b      	b.n	8004e5e <checkAktifCalisma+0xe26>
 8004e06:	bf00      	nop
 8004e08:	20001108 	.word	0x20001108
 8004e0c:	200010cd 	.word	0x200010cd
 8004e10:	200010cc 	.word	0x200010cc
 8004e14:	40011000 	.word	0x40011000
 8004e18:	200010ca 	.word	0x200010ca
 8004e1c:	20001106 	.word	0x20001106
 8004e20:	20001109 	.word	0x20001109
 8004e24:	20001107 	.word	0x20001107
 8004e28:	40010800 	.word	0x40010800
 8004e2c:	200010ce 	.word	0x200010ce
 8004e30:	200010d0 	.word	0x200010d0
 8004e34:	40010c00 	.word	0x40010c00
 8004e38:	200010f3 	.word	0x200010f3
 8004e3c:	2000110a 	.word	0x2000110a
 8004e40:	200010a0 	.word	0x200010a0
 8004e44:	200010a4 	.word	0x200010a4
 8004e48:	200010de 	.word	0x200010de
 8004e4c:	2000110b 	.word	0x2000110b
 8004e50:	2000110c 	.word	0x2000110c
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004e54:	2200      	movs	r2, #0
 8004e56:	2140      	movs	r1, #64	@ 0x40
 8004e58:	488d      	ldr	r0, [pc, #564]	@ (8005090 <checkAktifCalisma+0x1058>)
 8004e5a:	f005 f894 	bl	8009f86 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8004e5e:	4b8d      	ldr	r3, [pc, #564]	@ (8005094 <checkAktifCalisma+0x105c>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <checkAktifCalisma+0xe36>
 8004e66:	4b8b      	ldr	r3, [pc, #556]	@ (8005094 <checkAktifCalisma+0x105c>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d115      	bne.n	8004e9a <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004e6e:	2104      	movs	r1, #4
 8004e70:	4889      	ldr	r0, [pc, #548]	@ (8005098 <checkAktifCalisma+0x1060>)
 8004e72:	f005 f871 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d003      	beq.n	8004e84 <checkAktifCalisma+0xe4c>
 8004e7c:	4b87      	ldr	r3, [pc, #540]	@ (800509c <checkAktifCalisma+0x1064>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10a      	bne.n	8004e9a <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8004e84:	2102      	movs	r1, #2
 8004e86:	4884      	ldr	r0, [pc, #528]	@ (8005098 <checkAktifCalisma+0x1060>)
 8004e88:	f005 f866 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d103      	bne.n	8004e9a <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8004e92:	4b83      	ldr	r3, [pc, #524]	@ (80050a0 <checkAktifCalisma+0x1068>)
 8004e94:	2201      	movs	r2, #1
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	e002      	b.n	8004ea0 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8004e9a:	4b81      	ldr	r3, [pc, #516]	@ (80050a0 <checkAktifCalisma+0x1068>)
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8004ea0:	4b7c      	ldr	r3, [pc, #496]	@ (8005094 <checkAktifCalisma+0x105c>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d003      	beq.n	8004eb0 <checkAktifCalisma+0xe78>
 8004ea8:	4b7a      	ldr	r3, [pc, #488]	@ (8005094 <checkAktifCalisma+0x105c>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d111      	bne.n	8004ed4 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004eb0:	2102      	movs	r1, #2
 8004eb2:	4879      	ldr	r0, [pc, #484]	@ (8005098 <checkAktifCalisma+0x1060>)
 8004eb4:	f005 f850 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d10a      	bne.n	8004ed4 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8004ebe:	2104      	movs	r1, #4
 8004ec0:	4875      	ldr	r0, [pc, #468]	@ (8005098 <checkAktifCalisma+0x1060>)
 8004ec2:	f005 f849 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d103      	bne.n	8004ed4 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8004ecc:	4b75      	ldr	r3, [pc, #468]	@ (80050a4 <checkAktifCalisma+0x106c>)
 8004ece:	2201      	movs	r2, #1
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	e002      	b.n	8004eda <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8004ed4:	4b73      	ldr	r3, [pc, #460]	@ (80050a4 <checkAktifCalisma+0x106c>)
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8004eda:	4b71      	ldr	r3, [pc, #452]	@ (80050a0 <checkAktifCalisma+0x1068>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00f      	beq.n	8004f02 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8004ee2:	4b71      	ldr	r3, [pc, #452]	@ (80050a8 <checkAktifCalisma+0x1070>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d10b      	bne.n	8004f02 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8004eea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004eee:	486f      	ldr	r0, [pc, #444]	@ (80050ac <checkAktifCalisma+0x1074>)
 8004ef0:	f005 f832 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d103      	bne.n	8004f02 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8004efa:	4b6d      	ldr	r3, [pc, #436]	@ (80050b0 <checkAktifCalisma+0x1078>)
 8004efc:	2201      	movs	r2, #1
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	e002      	b.n	8004f08 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8004f02:	4b6b      	ldr	r3, [pc, #428]	@ (80050b0 <checkAktifCalisma+0x1078>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8004f08:	4b66      	ldr	r3, [pc, #408]	@ (80050a4 <checkAktifCalisma+0x106c>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00f      	beq.n	8004f30 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8004f10:	4b65      	ldr	r3, [pc, #404]	@ (80050a8 <checkAktifCalisma+0x1070>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d10b      	bne.n	8004f30 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8004f18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004f1c:	4863      	ldr	r0, [pc, #396]	@ (80050ac <checkAktifCalisma+0x1074>)
 8004f1e:	f005 f81b 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d103      	bne.n	8004f30 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8004f28:	4b62      	ldr	r3, [pc, #392]	@ (80050b4 <checkAktifCalisma+0x107c>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	e002      	b.n	8004f36 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8004f30:	4b60      	ldr	r3, [pc, #384]	@ (80050b4 <checkAktifCalisma+0x107c>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004f36:	4b60      	ldr	r3, [pc, #384]	@ (80050b8 <checkAktifCalisma+0x1080>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d137      	bne.n	8004fae <checkAktifCalisma+0xf76>
 8004f3e:	4b5f      	ldr	r3, [pc, #380]	@ (80050bc <checkAktifCalisma+0x1084>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d003      	beq.n	8004f4e <checkAktifCalisma+0xf16>
 8004f46:	4b5d      	ldr	r3, [pc, #372]	@ (80050bc <checkAktifCalisma+0x1084>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b03      	cmp	r3, #3
 8004f4c:	d12f      	bne.n	8004fae <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004f4e:	4b54      	ldr	r3, [pc, #336]	@ (80050a0 <checkAktifCalisma+0x1068>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d103      	bne.n	8004f5e <checkAktifCalisma+0xf26>
 8004f56:	4b53      	ldr	r3, [pc, #332]	@ (80050a4 <checkAktifCalisma+0x106c>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d027      	beq.n	8004fae <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8004f5e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004f62:	484d      	ldr	r0, [pc, #308]	@ (8005098 <checkAktifCalisma+0x1060>)
 8004f64:	f004 fff8 	bl	8009f58 <HAL_GPIO_ReadPin>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d103      	bne.n	8004f76 <checkAktifCalisma+0xf3e>
 8004f6e:	4b4e      	ldr	r3, [pc, #312]	@ (80050a8 <checkAktifCalisma+0x1070>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d007      	beq.n	8004f86 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8004f76:	4b4e      	ldr	r3, [pc, #312]	@ (80050b0 <checkAktifCalisma+0x1078>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d103      	bne.n	8004f86 <checkAktifCalisma+0xf4e>
 8004f7e:	4b4d      	ldr	r3, [pc, #308]	@ (80050b4 <checkAktifCalisma+0x107c>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d013      	beq.n	8004fae <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8004f86:	4b4e      	ldr	r3, [pc, #312]	@ (80050c0 <checkAktifCalisma+0x1088>)
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00f      	beq.n	8004fae <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8004f8e:	4b4d      	ldr	r3, [pc, #308]	@ (80050c4 <checkAktifCalisma+0x108c>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	f083 0301 	eor.w	r3, r3, #1
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d008      	beq.n	8004fae <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8004f9c:	4b4a      	ldr	r3, [pc, #296]	@ (80050c8 <checkAktifCalisma+0x1090>)
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8004fa2:	4b4a      	ldr	r3, [pc, #296]	@ (80050cc <checkAktifCalisma+0x1094>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a4a      	ldr	r2, [pc, #296]	@ (80050d0 <checkAktifCalisma+0x1098>)
 8004fa8:	6013      	str	r3, [r2, #0]
			bekle();
 8004faa:	f7fe fea9 	bl	8003d00 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8004fae:	4b47      	ldr	r3, [pc, #284]	@ (80050cc <checkAktifCalisma+0x1094>)
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	4b47      	ldr	r3, [pc, #284]	@ (80050d0 <checkAktifCalisma+0x1098>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	4a46      	ldr	r2, [pc, #280]	@ (80050d4 <checkAktifCalisma+0x109c>)
 8004fba:	7812      	ldrb	r2, [r2, #0]
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d214      	bcs.n	8004fea <checkAktifCalisma+0xfb2>
 8004fc0:	4b37      	ldr	r3, [pc, #220]	@ (80050a0 <checkAktifCalisma+0x1068>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	f083 0301 	eor.w	r3, r3, #1
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d006      	beq.n	8004fdc <checkAktifCalisma+0xfa4>
 8004fce:	4b35      	ldr	r3, [pc, #212]	@ (80050a4 <checkAktifCalisma+0x106c>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	f083 0301 	eor.w	r3, r3, #1
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d106      	bne.n	8004fea <checkAktifCalisma+0xfb2>
 8004fdc:	4b38      	ldr	r3, [pc, #224]	@ (80050c0 <checkAktifCalisma+0x1088>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	f083 0301 	eor.w	r3, r3, #1
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8004fea:	4b37      	ldr	r3, [pc, #220]	@ (80050c8 <checkAktifCalisma+0x1090>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004ff0:	4b31      	ldr	r3, [pc, #196]	@ (80050b8 <checkAktifCalisma+0x1080>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d12b      	bne.n	8005050 <checkAktifCalisma+0x1018>
 8004ff8:	4b30      	ldr	r3, [pc, #192]	@ (80050bc <checkAktifCalisma+0x1084>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d003      	beq.n	8005008 <checkAktifCalisma+0xfd0>
 8005000:	4b2e      	ldr	r3, [pc, #184]	@ (80050bc <checkAktifCalisma+0x1084>)
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b03      	cmp	r3, #3
 8005006:	d123      	bne.n	8005050 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005008:	4b25      	ldr	r3, [pc, #148]	@ (80050a0 <checkAktifCalisma+0x1068>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d103      	bne.n	8005018 <checkAktifCalisma+0xfe0>
 8005010:	4b24      	ldr	r3, [pc, #144]	@ (80050a4 <checkAktifCalisma+0x106c>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d01b      	beq.n	8005050 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005018:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800501c:	481e      	ldr	r0, [pc, #120]	@ (8005098 <checkAktifCalisma+0x1060>)
 800501e:	f004 ff9b 	bl	8009f58 <HAL_GPIO_ReadPin>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d103      	bne.n	8005030 <checkAktifCalisma+0xff8>
 8005028:	4b1f      	ldr	r3, [pc, #124]	@ (80050a8 <checkAktifCalisma+0x1070>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d007      	beq.n	8005040 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005030:	4b1f      	ldr	r3, [pc, #124]	@ (80050b0 <checkAktifCalisma+0x1078>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d103      	bne.n	8005040 <checkAktifCalisma+0x1008>
 8005038:	4b1e      	ldr	r3, [pc, #120]	@ (80050b4 <checkAktifCalisma+0x107c>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d007      	beq.n	8005050 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005040:	4b1f      	ldr	r3, [pc, #124]	@ (80050c0 <checkAktifCalisma+0x1088>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d003      	beq.n	8005050 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005048:	4b23      	ldr	r3, [pc, #140]	@ (80050d8 <checkAktifCalisma+0x10a0>)
 800504a:	2201      	movs	r2, #1
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	e002      	b.n	8005056 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005050:	4b21      	ldr	r3, [pc, #132]	@ (80050d8 <checkAktifCalisma+0x10a0>)
 8005052:	2200      	movs	r2, #0
 8005054:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005056:	4b18      	ldr	r3, [pc, #96]	@ (80050b8 <checkAktifCalisma+0x1080>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	2b02      	cmp	r3, #2
 800505c:	d140      	bne.n	80050e0 <checkAktifCalisma+0x10a8>
 800505e:	4b17      	ldr	r3, [pc, #92]	@ (80050bc <checkAktifCalisma+0x1084>)
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b02      	cmp	r3, #2
 8005064:	d003      	beq.n	800506e <checkAktifCalisma+0x1036>
 8005066:	4b15      	ldr	r3, [pc, #84]	@ (80050bc <checkAktifCalisma+0x1084>)
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	2b03      	cmp	r3, #3
 800506c:	d138      	bne.n	80050e0 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800506e:	4b0c      	ldr	r3, [pc, #48]	@ (80050a0 <checkAktifCalisma+0x1068>)
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d103      	bne.n	800507e <checkAktifCalisma+0x1046>
 8005076:	4b0b      	ldr	r3, [pc, #44]	@ (80050a4 <checkAktifCalisma+0x106c>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d030      	beq.n	80050e0 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 800507e:	4b10      	ldr	r3, [pc, #64]	@ (80050c0 <checkAktifCalisma+0x1088>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d02c      	beq.n	80050e0 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005086:	4b15      	ldr	r3, [pc, #84]	@ (80050dc <checkAktifCalisma+0x10a4>)
 8005088:	2201      	movs	r2, #1
 800508a:	701a      	strb	r2, [r3, #0]
 800508c:	e02b      	b.n	80050e6 <checkAktifCalisma+0x10ae>
 800508e:	bf00      	nop
 8005090:	40010800 	.word	0x40010800
 8005094:	200010d1 	.word	0x200010d1
 8005098:	40011000 	.word	0x40011000
 800509c:	200010ca 	.word	0x200010ca
 80050a0:	20001110 	.word	0x20001110
 80050a4:	20001111 	.word	0x20001111
 80050a8:	200010d0 	.word	0x200010d0
 80050ac:	40010c00 	.word	0x40010c00
 80050b0:	20001120 	.word	0x20001120
 80050b4:	20001121 	.word	0x20001121
 80050b8:	200010cf 	.word	0x200010cf
 80050bc:	200010cc 	.word	0x200010cc
 80050c0:	20001106 	.word	0x20001106
 80050c4:	200010f3 	.word	0x200010f3
 80050c8:	2000110d 	.word	0x2000110d
 80050cc:	200010a0 	.word	0x200010a0
 80050d0:	200010a4 	.word	0x200010a4
 80050d4:	200010df 	.word	0x200010df
 80050d8:	2000110e 	.word	0x2000110e
 80050dc:	2000110f 	.word	0x2000110f
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 80050e0:	4b8b      	ldr	r3, [pc, #556]	@ (8005310 <checkAktifCalisma+0x12d8>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80050e6:	4b8b      	ldr	r3, [pc, #556]	@ (8005314 <checkAktifCalisma+0x12dc>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d107      	bne.n	80050fe <checkAktifCalisma+0x10c6>
 80050ee:	4b8a      	ldr	r3, [pc, #552]	@ (8005318 <checkAktifCalisma+0x12e0>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d103      	bne.n	80050fe <checkAktifCalisma+0x10c6>
 80050f6:	4b86      	ldr	r3, [pc, #536]	@ (8005310 <checkAktifCalisma+0x12d8>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d005      	beq.n	800510a <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80050fe:	2201      	movs	r2, #1
 8005100:	2120      	movs	r1, #32
 8005102:	4886      	ldr	r0, [pc, #536]	@ (800531c <checkAktifCalisma+0x12e4>)
 8005104:	f004 ff3f 	bl	8009f86 <HAL_GPIO_WritePin>
 8005108:	e004      	b.n	8005114 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800510a:	2200      	movs	r2, #0
 800510c:	2120      	movs	r1, #32
 800510e:	4883      	ldr	r0, [pc, #524]	@ (800531c <checkAktifCalisma+0x12e4>)
 8005110:	f004 ff39 	bl	8009f86 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005114:	4b82      	ldr	r3, [pc, #520]	@ (8005320 <checkAktifCalisma+0x12e8>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00e      	beq.n	800513a <checkAktifCalisma+0x1102>
 800511c:	2102      	movs	r1, #2
 800511e:	4881      	ldr	r0, [pc, #516]	@ (8005324 <checkAktifCalisma+0x12ec>)
 8005120:	f004 ff1a 	bl	8009f58 <HAL_GPIO_ReadPin>
 8005124:	4603      	mov	r3, r0
 8005126:	2b01      	cmp	r3, #1
 8005128:	d107      	bne.n	800513a <checkAktifCalisma+0x1102>
 800512a:	4b7f      	ldr	r3, [pc, #508]	@ (8005328 <checkAktifCalisma+0x12f0>)
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d103      	bne.n	800513a <checkAktifCalisma+0x1102>
 8005132:	4b7e      	ldr	r3, [pc, #504]	@ (800532c <checkAktifCalisma+0x12f4>)
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d112      	bne.n	8005160 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 800513a:	4b7d      	ldr	r3, [pc, #500]	@ (8005330 <checkAktifCalisma+0x12f8>)
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d066      	beq.n	8005210 <checkAktifCalisma+0x11d8>
 8005142:	2104      	movs	r1, #4
 8005144:	4877      	ldr	r0, [pc, #476]	@ (8005324 <checkAktifCalisma+0x12ec>)
 8005146:	f004 ff07 	bl	8009f58 <HAL_GPIO_ReadPin>
 800514a:	4603      	mov	r3, r0
 800514c:	2b01      	cmp	r3, #1
 800514e:	d15f      	bne.n	8005210 <checkAktifCalisma+0x11d8>
 8005150:	4b75      	ldr	r3, [pc, #468]	@ (8005328 <checkAktifCalisma+0x12f0>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d05b      	beq.n	8005210 <checkAktifCalisma+0x11d8>
 8005158:	4b74      	ldr	r3, [pc, #464]	@ (800532c <checkAktifCalisma+0x12f4>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d057      	beq.n	8005210 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005160:	4b74      	ldr	r3, [pc, #464]	@ (8005334 <checkAktifCalisma+0x12fc>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	3301      	adds	r3, #1
 8005166:	b2da      	uxtb	r2, r3
 8005168:	4b72      	ldr	r3, [pc, #456]	@ (8005334 <checkAktifCalisma+0x12fc>)
 800516a:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 800516c:	4b71      	ldr	r3, [pc, #452]	@ (8005334 <checkAktifCalisma+0x12fc>)
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b09      	cmp	r3, #9
 8005172:	d908      	bls.n	8005186 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005174:	4b6f      	ldr	r3, [pc, #444]	@ (8005334 <checkAktifCalisma+0x12fc>)
 8005176:	2200      	movs	r2, #0
 8005178:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 800517a:	4b6f      	ldr	r3, [pc, #444]	@ (8005338 <checkAktifCalisma+0x1300>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	3301      	adds	r3, #1
 8005180:	b2da      	uxtb	r2, r3
 8005182:	4b6d      	ldr	r3, [pc, #436]	@ (8005338 <checkAktifCalisma+0x1300>)
 8005184:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005186:	4b6c      	ldr	r3, [pc, #432]	@ (8005338 <checkAktifCalisma+0x1300>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b09      	cmp	r3, #9
 800518c:	d908      	bls.n	80051a0 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 800518e:	4b6a      	ldr	r3, [pc, #424]	@ (8005338 <checkAktifCalisma+0x1300>)
 8005190:	2200      	movs	r2, #0
 8005192:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005194:	4b69      	ldr	r3, [pc, #420]	@ (800533c <checkAktifCalisma+0x1304>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	3301      	adds	r3, #1
 800519a:	b2da      	uxtb	r2, r3
 800519c:	4b67      	ldr	r3, [pc, #412]	@ (800533c <checkAktifCalisma+0x1304>)
 800519e:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 80051a0:	4b66      	ldr	r3, [pc, #408]	@ (800533c <checkAktifCalisma+0x1304>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b09      	cmp	r3, #9
 80051a6:	d908      	bls.n	80051ba <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 80051a8:	4b64      	ldr	r3, [pc, #400]	@ (800533c <checkAktifCalisma+0x1304>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 80051ae:	4b64      	ldr	r3, [pc, #400]	@ (8005340 <checkAktifCalisma+0x1308>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	3301      	adds	r3, #1
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	4b62      	ldr	r3, [pc, #392]	@ (8005340 <checkAktifCalisma+0x1308>)
 80051b8:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 80051ba:	4b61      	ldr	r3, [pc, #388]	@ (8005340 <checkAktifCalisma+0x1308>)
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	2b09      	cmp	r3, #9
 80051c0:	d908      	bls.n	80051d4 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 80051c2:	4b5f      	ldr	r3, [pc, #380]	@ (8005340 <checkAktifCalisma+0x1308>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 80051c8:	4b5e      	ldr	r3, [pc, #376]	@ (8005344 <checkAktifCalisma+0x130c>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	3301      	adds	r3, #1
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	4b5c      	ldr	r3, [pc, #368]	@ (8005344 <checkAktifCalisma+0x130c>)
 80051d2:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80051d4:	4b5b      	ldr	r3, [pc, #364]	@ (8005344 <checkAktifCalisma+0x130c>)
 80051d6:	781a      	ldrb	r2, [r3, #0]
 80051d8:	4b5b      	ldr	r3, [pc, #364]	@ (8005348 <checkAktifCalisma+0x1310>)
 80051da:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80051de:	4b58      	ldr	r3, [pc, #352]	@ (8005340 <checkAktifCalisma+0x1308>)
 80051e0:	781a      	ldrb	r2, [r3, #0]
 80051e2:	4b59      	ldr	r3, [pc, #356]	@ (8005348 <checkAktifCalisma+0x1310>)
 80051e4:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80051e6:	4b55      	ldr	r3, [pc, #340]	@ (800533c <checkAktifCalisma+0x1304>)
 80051e8:	781a      	ldrb	r2, [r3, #0]
 80051ea:	4b57      	ldr	r3, [pc, #348]	@ (8005348 <checkAktifCalisma+0x1310>)
 80051ec:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80051ee:	4b52      	ldr	r3, [pc, #328]	@ (8005338 <checkAktifCalisma+0x1300>)
 80051f0:	781a      	ldrb	r2, [r3, #0]
 80051f2:	4b55      	ldr	r3, [pc, #340]	@ (8005348 <checkAktifCalisma+0x1310>)
 80051f4:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80051f6:	4b4f      	ldr	r3, [pc, #316]	@ (8005334 <checkAktifCalisma+0x12fc>)
 80051f8:	781a      	ldrb	r2, [r3, #0]
 80051fa:	4b53      	ldr	r3, [pc, #332]	@ (8005348 <checkAktifCalisma+0x1310>)
 80051fc:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 80051fe:	4b53      	ldr	r3, [pc, #332]	@ (800534c <checkAktifCalisma+0x1314>)
 8005200:	2201      	movs	r2, #1
 8005202:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005204:	4b46      	ldr	r3, [pc, #280]	@ (8005320 <checkAktifCalisma+0x12e8>)
 8005206:	2200      	movs	r2, #0
 8005208:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 800520a:	4b49      	ldr	r3, [pc, #292]	@ (8005330 <checkAktifCalisma+0x12f8>)
 800520c:	2200      	movs	r2, #0
 800520e:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005210:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005214:	484e      	ldr	r0, [pc, #312]	@ (8005350 <checkAktifCalisma+0x1318>)
 8005216:	f004 fe9f 	bl	8009f58 <HAL_GPIO_ReadPin>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d016      	beq.n	800524e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005220:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005224:	484a      	ldr	r0, [pc, #296]	@ (8005350 <checkAktifCalisma+0x1318>)
 8005226:	f004 fe97 	bl	8009f58 <HAL_GPIO_ReadPin>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00e      	beq.n	800524e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005230:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005234:	4846      	ldr	r0, [pc, #280]	@ (8005350 <checkAktifCalisma+0x1318>)
 8005236:	f004 fe8f 	bl	8009f58 <HAL_GPIO_ReadPin>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d006      	beq.n	800524e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005240:	2140      	movs	r1, #64	@ 0x40
 8005242:	4838      	ldr	r0, [pc, #224]	@ (8005324 <checkAktifCalisma+0x12ec>)
 8005244:	f004 fe88 	bl	8009f58 <HAL_GPIO_ReadPin>
 8005248:	4603      	mov	r3, r0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d103      	bne.n	8005256 <checkAktifCalisma+0x121e>
			startBasili=1;
 800524e:	4b41      	ldr	r3, [pc, #260]	@ (8005354 <checkAktifCalisma+0x131c>)
 8005250:	2201      	movs	r2, #1
 8005252:	701a      	strb	r2, [r3, #0]
 8005254:	e002      	b.n	800525c <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005256:	4b3f      	ldr	r3, [pc, #252]	@ (8005354 <checkAktifCalisma+0x131c>)
 8005258:	2200      	movs	r2, #0
 800525a:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 800525c:	4b3d      	ldr	r3, [pc, #244]	@ (8005354 <checkAktifCalisma+0x131c>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d016      	beq.n	8005292 <checkAktifCalisma+0x125a>
 8005264:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005268:	4839      	ldr	r0, [pc, #228]	@ (8005350 <checkAktifCalisma+0x1318>)
 800526a:	f004 fe75 	bl	8009f58 <HAL_GPIO_ReadPin>
 800526e:	4603      	mov	r3, r0
 8005270:	2b01      	cmp	r3, #1
 8005272:	d10e      	bne.n	8005292 <checkAktifCalisma+0x125a>
			hataVar=1;
 8005274:	4b38      	ldr	r3, [pc, #224]	@ (8005358 <checkAktifCalisma+0x1320>)
 8005276:	2201      	movs	r2, #1
 8005278:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 800527a:	2001      	movs	r0, #1
 800527c:	f7fb fbda 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005280:	2001      	movs	r0, #1
 8005282:	f7fb fb7f 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 8005286:	f003 f91f 	bl	80084c8 <convertAndSendData>
			acilstophatasi=1;
 800528a:	4b34      	ldr	r3, [pc, #208]	@ (800535c <checkAktifCalisma+0x1324>)
 800528c:	2201      	movs	r2, #1
 800528e:	701a      	strb	r2, [r3, #0]
 8005290:	e018      	b.n	80052c4 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005292:	4b32      	ldr	r3, [pc, #200]	@ (800535c <checkAktifCalisma+0x1324>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d014      	beq.n	80052c4 <checkAktifCalisma+0x128c>
 800529a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800529e:	482c      	ldr	r0, [pc, #176]	@ (8005350 <checkAktifCalisma+0x1318>)
 80052a0:	f004 fe5a 	bl	8009f58 <HAL_GPIO_ReadPin>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10c      	bne.n	80052c4 <checkAktifCalisma+0x128c>
 80052aa:	4b2a      	ldr	r3, [pc, #168]	@ (8005354 <checkAktifCalisma+0x131c>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	f083 0301 	eor.w	r3, r3, #1
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d005      	beq.n	80052c4 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 80052b8:	4b28      	ldr	r3, [pc, #160]	@ (800535c <checkAktifCalisma+0x1324>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 80052be:	2001      	movs	r0, #1
 80052c0:	f7fe fcb4 	bl	8003c2c <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80052c4:	4b26      	ldr	r3, [pc, #152]	@ (8005360 <checkAktifCalisma+0x1328>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	f083 0301 	eor.w	r3, r3, #1
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d04e      	beq.n	8005370 <checkAktifCalisma+0x1338>
 80052d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80052d6:	481e      	ldr	r0, [pc, #120]	@ (8005350 <checkAktifCalisma+0x1318>)
 80052d8:	f004 fe3e 	bl	8009f58 <HAL_GPIO_ReadPin>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <checkAktifCalisma+0x12b2>
 80052e2:	4b20      	ldr	r3, [pc, #128]	@ (8005364 <checkAktifCalisma+0x132c>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d042      	beq.n	8005370 <checkAktifCalisma+0x1338>
 80052ea:	4b1f      	ldr	r3, [pc, #124]	@ (8005368 <checkAktifCalisma+0x1330>)
 80052ec:	781b      	ldrb	r3, [r3, #0]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d13e      	bne.n	8005370 <checkAktifCalisma+0x1338>
			hataVar=1;
 80052f2:	4b19      	ldr	r3, [pc, #100]	@ (8005358 <checkAktifCalisma+0x1320>)
 80052f4:	2201      	movs	r2, #1
 80052f6:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 80052f8:	2002      	movs	r0, #2
 80052fa:	f7fb fb9b 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(2);
 80052fe:	2002      	movs	r0, #2
 8005300:	f7fb fb40 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 8005304:	f003 f8e0 	bl	80084c8 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005308:	4b18      	ldr	r3, [pc, #96]	@ (800536c <checkAktifCalisma+0x1334>)
 800530a:	2201      	movs	r2, #1
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	e047      	b.n	80053a0 <checkAktifCalisma+0x1368>
 8005310:	2000110f 	.word	0x2000110f
 8005314:	2000110e 	.word	0x2000110e
 8005318:	2000110d 	.word	0x2000110d
 800531c:	40010800 	.word	0x40010800
 8005320:	20001103 	.word	0x20001103
 8005324:	40011000 	.word	0x40011000
 8005328:	200010ca 	.word	0x200010ca
 800532c:	20001106 	.word	0x20001106
 8005330:	20001104 	.word	0x20001104
 8005334:	200010c1 	.word	0x200010c1
 8005338:	200010c2 	.word	0x200010c2
 800533c:	20000000 	.word	0x20000000
 8005340:	20000001 	.word	0x20000001
 8005344:	200010c3 	.word	0x200010c3
 8005348:	20000ff0 	.word	0x20000ff0
 800534c:	200010f0 	.word	0x200010f0
 8005350:	40010c00 	.word	0x40010c00
 8005354:	20001112 	.word	0x20001112
 8005358:	20001119 	.word	0x20001119
 800535c:	20001114 	.word	0x20001114
 8005360:	2000111b 	.word	0x2000111b
 8005364:	20001125 	.word	0x20001125
 8005368:	200010c8 	.word	0x200010c8
 800536c:	20001115 	.word	0x20001115
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005370:	4b9b      	ldr	r3, [pc, #620]	@ (80055e0 <checkAktifCalisma+0x15a8>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d013      	beq.n	80053a0 <checkAktifCalisma+0x1368>
 8005378:	4b9a      	ldr	r3, [pc, #616]	@ (80055e4 <checkAktifCalisma+0x15ac>)
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00f      	beq.n	80053a0 <checkAktifCalisma+0x1368>
 8005380:	4b99      	ldr	r3, [pc, #612]	@ (80055e8 <checkAktifCalisma+0x15b0>)
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	f083 0301 	eor.w	r3, r3, #1
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d008      	beq.n	80053a0 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 800538e:	4b94      	ldr	r3, [pc, #592]	@ (80055e0 <checkAktifCalisma+0x15a8>)
 8005390:	2200      	movs	r2, #0
 8005392:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8005394:	4b95      	ldr	r3, [pc, #596]	@ (80055ec <checkAktifCalisma+0x15b4>)
 8005396:	2200      	movs	r2, #0
 8005398:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 800539a:	2002      	movs	r0, #2
 800539c:	f7fe fc46 	bl	8003c2c <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80053a0:	4b93      	ldr	r3, [pc, #588]	@ (80055f0 <checkAktifCalisma+0x15b8>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d11e      	bne.n	80053e6 <checkAktifCalisma+0x13ae>
 80053a8:	4b92      	ldr	r3, [pc, #584]	@ (80055f4 <checkAktifCalisma+0x15bc>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d11a      	bne.n	80053e6 <checkAktifCalisma+0x13ae>
 80053b0:	4b91      	ldr	r3, [pc, #580]	@ (80055f8 <checkAktifCalisma+0x15c0>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d016      	beq.n	80053e6 <checkAktifCalisma+0x13ae>
 80053b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80053bc:	488f      	ldr	r0, [pc, #572]	@ (80055fc <checkAktifCalisma+0x15c4>)
 80053be:	f004 fdcb 	bl	8009f58 <HAL_GPIO_ReadPin>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d10e      	bne.n	80053e6 <checkAktifCalisma+0x13ae>
			hataVar=1;
 80053c8:	4b8d      	ldr	r3, [pc, #564]	@ (8005600 <checkAktifCalisma+0x15c8>)
 80053ca:	2201      	movs	r2, #1
 80053cc:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80053ce:	2003      	movs	r0, #3
 80053d0:	f7fb fb30 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(3);
 80053d4:	2003      	movs	r0, #3
 80053d6:	f7fb fad5 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 80053da:	f003 f875 	bl	80084c8 <convertAndSendData>
			basinchatasi=1;
 80053de:	4b89      	ldr	r3, [pc, #548]	@ (8005604 <checkAktifCalisma+0x15cc>)
 80053e0:	2201      	movs	r2, #1
 80053e2:	701a      	strb	r2, [r3, #0]
 80053e4:	e015      	b.n	8005412 <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80053e6:	4b87      	ldr	r3, [pc, #540]	@ (8005604 <checkAktifCalisma+0x15cc>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d011      	beq.n	8005412 <checkAktifCalisma+0x13da>
 80053ee:	4b80      	ldr	r3, [pc, #512]	@ (80055f0 <checkAktifCalisma+0x15b8>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d10d      	bne.n	8005412 <checkAktifCalisma+0x13da>
 80053f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80053fa:	4883      	ldr	r0, [pc, #524]	@ (8005608 <checkAktifCalisma+0x15d0>)
 80053fc:	f004 fdac 	bl	8009f58 <HAL_GPIO_ReadPin>
 8005400:	4603      	mov	r3, r0
 8005402:	2b01      	cmp	r3, #1
 8005404:	d105      	bne.n	8005412 <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8005406:	4b7f      	ldr	r3, [pc, #508]	@ (8005604 <checkAktifCalisma+0x15cc>)
 8005408:	2200      	movs	r2, #0
 800540a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 800540c:	2003      	movs	r0, #3
 800540e:	f7fe fc0d 	bl	8003c2c <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8005412:	4b7e      	ldr	r3, [pc, #504]	@ (800560c <checkAktifCalisma+0x15d4>)
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d103      	bne.n	8005422 <checkAktifCalisma+0x13ea>
 800541a:	4b7d      	ldr	r3, [pc, #500]	@ (8005610 <checkAktifCalisma+0x15d8>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d01e      	beq.n	8005460 <checkAktifCalisma+0x1428>
 8005422:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005426:	487b      	ldr	r0, [pc, #492]	@ (8005614 <checkAktifCalisma+0x15dc>)
 8005428:	f004 fd96 	bl	8009f58 <HAL_GPIO_ReadPin>
 800542c:	4603      	mov	r3, r0
 800542e:	2b01      	cmp	r3, #1
 8005430:	d116      	bne.n	8005460 <checkAktifCalisma+0x1428>
 8005432:	4b79      	ldr	r3, [pc, #484]	@ (8005618 <checkAktifCalisma+0x15e0>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	2b01      	cmp	r3, #1
 8005438:	d003      	beq.n	8005442 <checkAktifCalisma+0x140a>
 800543a:	4b77      	ldr	r3, [pc, #476]	@ (8005618 <checkAktifCalisma+0x15e0>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b03      	cmp	r3, #3
 8005440:	d10e      	bne.n	8005460 <checkAktifCalisma+0x1428>
			hataVar=1;
 8005442:	4b6f      	ldr	r3, [pc, #444]	@ (8005600 <checkAktifCalisma+0x15c8>)
 8005444:	2201      	movs	r2, #1
 8005446:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8005448:	2004      	movs	r0, #4
 800544a:	f7fb faf3 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(4);
 800544e:	2004      	movs	r0, #4
 8005450:	f7fb fa98 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 8005454:	f003 f838 	bl	80084c8 <convertAndSendData>
			katkapisivicihatasi=1;
 8005458:	4b70      	ldr	r3, [pc, #448]	@ (800561c <checkAktifCalisma+0x15e4>)
 800545a:	2201      	movs	r2, #1
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	e01f      	b.n	80054a0 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005460:	4b6e      	ldr	r3, [pc, #440]	@ (800561c <checkAktifCalisma+0x15e4>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d01b      	beq.n	80054a0 <checkAktifCalisma+0x1468>
 8005468:	4b6d      	ldr	r3, [pc, #436]	@ (8005620 <checkAktifCalisma+0x15e8>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d017      	beq.n	80054a0 <checkAktifCalisma+0x1468>
 8005470:	4b66      	ldr	r3, [pc, #408]	@ (800560c <checkAktifCalisma+0x15d4>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	f083 0301 	eor.w	r3, r3, #1
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d010      	beq.n	80054a0 <checkAktifCalisma+0x1468>
 800547e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005482:	4864      	ldr	r0, [pc, #400]	@ (8005614 <checkAktifCalisma+0x15dc>)
 8005484:	f004 fd68 	bl	8009f58 <HAL_GPIO_ReadPin>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d108      	bne.n	80054a0 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 800548e:	4b63      	ldr	r3, [pc, #396]	@ (800561c <checkAktifCalisma+0x15e4>)
 8005490:	2200      	movs	r2, #0
 8005492:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8005494:	4b5e      	ldr	r3, [pc, #376]	@ (8005610 <checkAktifCalisma+0x15d8>)
 8005496:	2200      	movs	r2, #0
 8005498:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800549a:	2004      	movs	r0, #4
 800549c:	f7fe fbc6 	bl	8003c2c <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80054a0:	4b5a      	ldr	r3, [pc, #360]	@ (800560c <checkAktifCalisma+0x15d4>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d103      	bne.n	80054b0 <checkAktifCalisma+0x1478>
 80054a8:	4b5e      	ldr	r3, [pc, #376]	@ (8005624 <checkAktifCalisma+0x15ec>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01e      	beq.n	80054ee <checkAktifCalisma+0x14b6>
 80054b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80054b4:	4857      	ldr	r0, [pc, #348]	@ (8005614 <checkAktifCalisma+0x15dc>)
 80054b6:	f004 fd4f 	bl	8009f58 <HAL_GPIO_ReadPin>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d116      	bne.n	80054ee <checkAktifCalisma+0x14b6>
 80054c0:	4b55      	ldr	r3, [pc, #340]	@ (8005618 <checkAktifCalisma+0x15e0>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d003      	beq.n	80054d0 <checkAktifCalisma+0x1498>
 80054c8:	4b53      	ldr	r3, [pc, #332]	@ (8005618 <checkAktifCalisma+0x15e0>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b03      	cmp	r3, #3
 80054ce:	d10e      	bne.n	80054ee <checkAktifCalisma+0x14b6>
			hataVar=1;
 80054d0:	4b4b      	ldr	r3, [pc, #300]	@ (8005600 <checkAktifCalisma+0x15c8>)
 80054d2:	2201      	movs	r2, #1
 80054d4:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80054d6:	2005      	movs	r0, #5
 80054d8:	f7fb faac 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80054dc:	2005      	movs	r0, #5
 80054de:	f7fb fa51 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 80054e2:	f002 fff1 	bl	80084c8 <convertAndSendData>
			tablakapisivicihatasi=1;
 80054e6:	4b50      	ldr	r3, [pc, #320]	@ (8005628 <checkAktifCalisma+0x15f0>)
 80054e8:	2201      	movs	r2, #1
 80054ea:	701a      	strb	r2, [r3, #0]
 80054ec:	e023      	b.n	8005536 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80054ee:	4b4e      	ldr	r3, [pc, #312]	@ (8005628 <checkAktifCalisma+0x15f0>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d01f      	beq.n	8005536 <checkAktifCalisma+0x14fe>
 80054f6:	4b4a      	ldr	r3, [pc, #296]	@ (8005620 <checkAktifCalisma+0x15e8>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d01b      	beq.n	8005536 <checkAktifCalisma+0x14fe>
 80054fe:	4b43      	ldr	r3, [pc, #268]	@ (800560c <checkAktifCalisma+0x15d4>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	f083 0301 	eor.w	r3, r3, #1
 8005506:	b2db      	uxtb	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d014      	beq.n	8005536 <checkAktifCalisma+0x14fe>
 800550c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005510:	4840      	ldr	r0, [pc, #256]	@ (8005614 <checkAktifCalisma+0x15dc>)
 8005512:	f004 fd21 	bl	8009f58 <HAL_GPIO_ReadPin>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10c      	bne.n	8005536 <checkAktifCalisma+0x14fe>
 800551c:	4b40      	ldr	r3, [pc, #256]	@ (8005620 <checkAktifCalisma+0x15e8>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d008      	beq.n	8005536 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8005524:	4b40      	ldr	r3, [pc, #256]	@ (8005628 <checkAktifCalisma+0x15f0>)
 8005526:	2200      	movs	r2, #0
 8005528:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 800552a:	4b3e      	ldr	r3, [pc, #248]	@ (8005624 <checkAktifCalisma+0x15ec>)
 800552c:	2200      	movs	r2, #0
 800552e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8005530:	2005      	movs	r0, #5
 8005532:	f7fe fb7b 	bl	8003c2c <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8005536:	4b30      	ldr	r3, [pc, #192]	@ (80055f8 <checkAktifCalisma+0x15c0>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d107      	bne.n	800554e <checkAktifCalisma+0x1516>
 800553e:	4b2a      	ldr	r3, [pc, #168]	@ (80055e8 <checkAktifCalisma+0x15b0>)
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d103      	bne.n	800554e <checkAktifCalisma+0x1516>
 8005546:	4b39      	ldr	r3, [pc, #228]	@ (800562c <checkAktifCalisma+0x15f4>)
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d016      	beq.n	800557c <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 800554e:	4b38      	ldr	r3, [pc, #224]	@ (8005630 <checkAktifCalisma+0x15f8>)
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4b38      	ldr	r3, [pc, #224]	@ (8005634 <checkAktifCalisma+0x15fc>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	4a37      	ldr	r2, [pc, #220]	@ (8005638 <checkAktifCalisma+0x1600>)
 800555a:	7812      	ldrb	r2, [r2, #0]
 800555c:	4293      	cmp	r3, r2
 800555e:	d30d      	bcc.n	800557c <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8005560:	4b27      	ldr	r3, [pc, #156]	@ (8005600 <checkAktifCalisma+0x15c8>)
 8005562:	2201      	movs	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8005566:	2006      	movs	r0, #6
 8005568:	f7fb fa64 	bl	8000a34 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 800556c:	2006      	movs	r0, #6
 800556e:	f7fb fa09 	bl	8000984 <hata2EEPROM>
			  	convertAndSendData();
 8005572:	f002 ffa9 	bl	80084c8 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 8005576:	4b31      	ldr	r3, [pc, #196]	@ (800563c <checkAktifCalisma+0x1604>)
 8005578:	2201      	movs	r2, #1
 800557a:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 800557c:	4b2f      	ldr	r3, [pc, #188]	@ (800563c <checkAktifCalisma+0x1604>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d013      	beq.n	80055ac <checkAktifCalisma+0x1574>
 8005584:	2108      	movs	r1, #8
 8005586:	4823      	ldr	r0, [pc, #140]	@ (8005614 <checkAktifCalisma+0x15dc>)
 8005588:	f004 fce6 	bl	8009f58 <HAL_GPIO_ReadPin>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00c      	beq.n	80055ac <checkAktifCalisma+0x1574>
 8005592:	4b1e      	ldr	r3, [pc, #120]	@ (800560c <checkAktifCalisma+0x15d4>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	f083 0301 	eor.w	r3, r3, #1
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d005      	beq.n	80055ac <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 80055a0:	4b26      	ldr	r3, [pc, #152]	@ (800563c <checkAktifCalisma+0x1604>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80055a6:	2006      	movs	r0, #6
 80055a8:	f7fe fb40 	bl	8003c2c <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80055ac:	4b24      	ldr	r3, [pc, #144]	@ (8005640 <checkAktifCalisma+0x1608>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10b      	bne.n	80055cc <checkAktifCalisma+0x1594>
 80055b4:	4b0c      	ldr	r3, [pc, #48]	@ (80055e8 <checkAktifCalisma+0x15b0>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d107      	bne.n	80055cc <checkAktifCalisma+0x1594>
 80055bc:	4b21      	ldr	r3, [pc, #132]	@ (8005644 <checkAktifCalisma+0x160c>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d103      	bne.n	80055cc <checkAktifCalisma+0x1594>
 80055c4:	4b19      	ldr	r3, [pc, #100]	@ (800562c <checkAktifCalisma+0x15f4>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d03f      	beq.n	800564c <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80055cc:	4b1e      	ldr	r3, [pc, #120]	@ (8005648 <checkAktifCalisma+0x1610>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80055d2:	4b0f      	ldr	r3, [pc, #60]	@ (8005610 <checkAktifCalisma+0x15d8>)
 80055d4:	2201      	movs	r2, #1
 80055d6:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80055d8:	4b12      	ldr	r3, [pc, #72]	@ (8005624 <checkAktifCalisma+0x15ec>)
 80055da:	2201      	movs	r2, #1
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	e03c      	b.n	800565a <checkAktifCalisma+0x1622>
 80055e0:	20001115 	.word	0x20001115
 80055e4:	2000111b 	.word	0x2000111b
 80055e8:	200010fc 	.word	0x200010fc
 80055ec:	20001125 	.word	0x20001125
 80055f0:	200010c7 	.word	0x200010c7
 80055f4:	200010cb 	.word	0x200010cb
 80055f8:	20001118 	.word	0x20001118
 80055fc:	40011000 	.word	0x40011000
 8005600:	20001119 	.word	0x20001119
 8005604:	20001122 	.word	0x20001122
 8005608:	40010c00 	.word	0x40010c00
 800560c:	20001112 	.word	0x20001112
 8005610:	20001126 	.word	0x20001126
 8005614:	40010800 	.word	0x40010800
 8005618:	200010cc 	.word	0x200010cc
 800561c:	20001123 	.word	0x20001123
 8005620:	20001106 	.word	0x20001106
 8005624:	20001127 	.word	0x20001127
 8005628:	20001124 	.word	0x20001124
 800562c:	200010fb 	.word	0x200010fb
 8005630:	200010a0 	.word	0x200010a0
 8005634:	200010b4 	.word	0x200010b4
 8005638:	200010dc 	.word	0x200010dc
 800563c:	20001113 	.word	0x20001113
 8005640:	200010f9 	.word	0x200010f9
 8005644:	200010fa 	.word	0x200010fa
 8005648:	2000111a 	.word	0x2000111a
		} else {
			makineCalisiyor=1;
 800564c:	4b1e      	ldr	r3, [pc, #120]	@ (80056c8 <checkAktifCalisma+0x1690>)
 800564e:	2201      	movs	r2, #1
 8005650:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8005652:	4b1e      	ldr	r3, [pc, #120]	@ (80056cc <checkAktifCalisma+0x1694>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a1e      	ldr	r2, [pc, #120]	@ (80056d0 <checkAktifCalisma+0x1698>)
 8005658:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800565a:	4b1e      	ldr	r3, [pc, #120]	@ (80056d4 <checkAktifCalisma+0x169c>)
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d02f      	beq.n	80056c2 <checkAktifCalisma+0x168a>
 8005662:	4b1d      	ldr	r3, [pc, #116]	@ (80056d8 <checkAktifCalisma+0x16a0>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	f083 0301 	eor.w	r3, r3, #1
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d028      	beq.n	80056c2 <checkAktifCalisma+0x168a>
 8005670:	4b1a      	ldr	r3, [pc, #104]	@ (80056dc <checkAktifCalisma+0x16a4>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	f083 0301 	eor.w	r3, r3, #1
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d021      	beq.n	80056c2 <checkAktifCalisma+0x168a>
 800567e:	4b18      	ldr	r3, [pc, #96]	@ (80056e0 <checkAktifCalisma+0x16a8>)
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	f083 0301 	eor.w	r3, r3, #1
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	d01a      	beq.n	80056c2 <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 800568c:	4b15      	ldr	r3, [pc, #84]	@ (80056e4 <checkAktifCalisma+0x16ac>)
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	f083 0301 	eor.w	r3, r3, #1
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d013      	beq.n	80056c2 <checkAktifCalisma+0x168a>
 800569a:	4b13      	ldr	r3, [pc, #76]	@ (80056e8 <checkAktifCalisma+0x16b0>)
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	f083 0301 	eor.w	r3, r3, #1
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d00c      	beq.n	80056c2 <checkAktifCalisma+0x168a>
 80056a8:	4b10      	ldr	r3, [pc, #64]	@ (80056ec <checkAktifCalisma+0x16b4>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	f083 0301 	eor.w	r3, r3, #1
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d005      	beq.n	80056c2 <checkAktifCalisma+0x168a>
			hataVar=0;
 80056b6:	4b07      	ldr	r3, [pc, #28]	@ (80056d4 <checkAktifCalisma+0x169c>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80056bc:	2007      	movs	r0, #7
 80056be:	f7fe fab5 	bl	8003c2c <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80056c2:	bf00      	nop
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	2000111a 	.word	0x2000111a
 80056cc:	200010a0 	.word	0x200010a0
 80056d0:	200010b4 	.word	0x200010b4
 80056d4:	20001119 	.word	0x20001119
 80056d8:	20001114 	.word	0x20001114
 80056dc:	20001115 	.word	0x20001115
 80056e0:	20001122 	.word	0x20001122
 80056e4:	20001123 	.word	0x20001123
 80056e8:	20001124 	.word	0x20001124
 80056ec:	20001113 	.word	0x20001113

080056f0 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80056f4:	4b8b      	ldr	r3, [pc, #556]	@ (8005924 <checkDemoModCalisma+0x234>)
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	f040 8229 	bne.w	8005b50 <checkDemoModCalisma+0x460>
 80056fe:	4b8a      	ldr	r3, [pc, #552]	@ (8005928 <checkDemoModCalisma+0x238>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 8224 	beq.w	8005b50 <checkDemoModCalisma+0x460>
 8005708:	4b88      	ldr	r3, [pc, #544]	@ (800592c <checkDemoModCalisma+0x23c>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	f040 821f 	bne.w	8005b50 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005712:	2102      	movs	r1, #2
 8005714:	4886      	ldr	r0, [pc, #536]	@ (8005930 <checkDemoModCalisma+0x240>)
 8005716:	f004 fc1f 	bl	8009f58 <HAL_GPIO_ReadPin>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d11d      	bne.n	800575c <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8005720:	4b84      	ldr	r3, [pc, #528]	@ (8005934 <checkDemoModCalisma+0x244>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	f083 0301 	eor.w	r3, r3, #1
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d016      	beq.n	800575c <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 800572e:	4b82      	ldr	r3, [pc, #520]	@ (8005938 <checkDemoModCalisma+0x248>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	f083 0301 	eor.w	r3, r3, #1
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00f      	beq.n	800575c <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 800573c:	4b7f      	ldr	r3, [pc, #508]	@ (800593c <checkDemoModCalisma+0x24c>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	f083 0301 	eor.w	r3, r3, #1
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d008      	beq.n	800575c <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800574a:	2201      	movs	r2, #1
 800574c:	2104      	movs	r1, #4
 800574e:	487c      	ldr	r0, [pc, #496]	@ (8005940 <checkDemoModCalisma+0x250>)
 8005750:	f004 fc19 	bl	8009f86 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8005754:	4b7b      	ldr	r3, [pc, #492]	@ (8005944 <checkDemoModCalisma+0x254>)
 8005756:	2201      	movs	r2, #1
 8005758:	701a      	strb	r2, [r3, #0]
 800575a:	e00e      	b.n	800577a <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800575c:	2102      	movs	r1, #2
 800575e:	4874      	ldr	r0, [pc, #464]	@ (8005930 <checkDemoModCalisma+0x240>)
 8005760:	f004 fbfa 	bl	8009f58 <HAL_GPIO_ReadPin>
 8005764:	4603      	mov	r3, r0
 8005766:	2b01      	cmp	r3, #1
 8005768:	d107      	bne.n	800577a <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800576a:	2200      	movs	r2, #0
 800576c:	2104      	movs	r1, #4
 800576e:	4874      	ldr	r0, [pc, #464]	@ (8005940 <checkDemoModCalisma+0x250>)
 8005770:	f004 fc09 	bl	8009f86 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8005774:	4b73      	ldr	r3, [pc, #460]	@ (8005944 <checkDemoModCalisma+0x254>)
 8005776:	2200      	movs	r2, #0
 8005778:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 800577a:	4b72      	ldr	r3, [pc, #456]	@ (8005944 <checkDemoModCalisma+0x254>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10b      	bne.n	800579a <checkDemoModCalisma+0xaa>
 8005782:	4b6d      	ldr	r3, [pc, #436]	@ (8005938 <checkDemoModCalisma+0x248>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d107      	bne.n	800579a <checkDemoModCalisma+0xaa>
 800578a:	4b6c      	ldr	r3, [pc, #432]	@ (800593c <checkDemoModCalisma+0x24c>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d103      	bne.n	800579a <checkDemoModCalisma+0xaa>
 8005792:	4b68      	ldr	r3, [pc, #416]	@ (8005934 <checkDemoModCalisma+0x244>)
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00c      	beq.n	80057b4 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800579a:	2201      	movs	r2, #1
 800579c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057a0:	4867      	ldr	r0, [pc, #412]	@ (8005940 <checkDemoModCalisma+0x250>)
 80057a2:	f004 fbf0 	bl	8009f86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80057a6:	2201      	movs	r2, #1
 80057a8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057ac:	4864      	ldr	r0, [pc, #400]	@ (8005940 <checkDemoModCalisma+0x250>)
 80057ae:	f004 fbea 	bl	8009f86 <HAL_GPIO_WritePin>
 80057b2:	e00b      	b.n	80057cc <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80057b4:	2200      	movs	r2, #0
 80057b6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057ba:	4861      	ldr	r0, [pc, #388]	@ (8005940 <checkDemoModCalisma+0x250>)
 80057bc:	f004 fbe3 	bl	8009f86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80057c0:	2200      	movs	r2, #0
 80057c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057c6:	485e      	ldr	r0, [pc, #376]	@ (8005940 <checkDemoModCalisma+0x250>)
 80057c8:	f004 fbdd 	bl	8009f86 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80057cc:	2102      	movs	r1, #2
 80057ce:	4858      	ldr	r0, [pc, #352]	@ (8005930 <checkDemoModCalisma+0x240>)
 80057d0:	f004 fbc2 	bl	8009f58 <HAL_GPIO_ReadPin>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d10d      	bne.n	80057f6 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80057da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057de:	4854      	ldr	r0, [pc, #336]	@ (8005930 <checkDemoModCalisma+0x240>)
 80057e0:	f004 fbba 	bl	8009f58 <HAL_GPIO_ReadPin>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d105      	bne.n	80057f6 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 80057ea:	4b56      	ldr	r3, [pc, #344]	@ (8005944 <checkDemoModCalisma+0x254>)
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	f083 0301 	eor.w	r3, r3, #1
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80057f6:	2102      	movs	r1, #2
 80057f8:	484d      	ldr	r0, [pc, #308]	@ (8005930 <checkDemoModCalisma+0x240>)
 80057fa:	f004 fbad 	bl	8009f58 <HAL_GPIO_ReadPin>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b01      	cmp	r3, #1
 8005802:	d125      	bne.n	8005850 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005804:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005808:	4849      	ldr	r0, [pc, #292]	@ (8005930 <checkDemoModCalisma+0x240>)
 800580a:	f004 fba5 	bl	8009f58 <HAL_GPIO_ReadPin>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d11d      	bne.n	8005850 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8005814:	4b4b      	ldr	r3, [pc, #300]	@ (8005944 <checkDemoModCalisma+0x254>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	f083 0301 	eor.w	r3, r3, #1
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d016      	beq.n	8005850 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8005822:	4b44      	ldr	r3, [pc, #272]	@ (8005934 <checkDemoModCalisma+0x244>)
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	f083 0301 	eor.w	r3, r3, #1
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00f      	beq.n	8005850 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8005830:	4b42      	ldr	r3, [pc, #264]	@ (800593c <checkDemoModCalisma+0x24c>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	f083 0301 	eor.w	r3, r3, #1
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d008      	beq.n	8005850 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800583e:	2201      	movs	r2, #1
 8005840:	2120      	movs	r1, #32
 8005842:	483b      	ldr	r0, [pc, #236]	@ (8005930 <checkDemoModCalisma+0x240>)
 8005844:	f004 fb9f 	bl	8009f86 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8005848:	4b3b      	ldr	r3, [pc, #236]	@ (8005938 <checkDemoModCalisma+0x248>)
 800584a:	2201      	movs	r2, #1
 800584c:	701a      	strb	r2, [r3, #0]
 800584e:	e007      	b.n	8005860 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005850:	2200      	movs	r2, #0
 8005852:	2120      	movs	r1, #32
 8005854:	4836      	ldr	r0, [pc, #216]	@ (8005930 <checkDemoModCalisma+0x240>)
 8005856:	f004 fb96 	bl	8009f86 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 800585a:	4b37      	ldr	r3, [pc, #220]	@ (8005938 <checkDemoModCalisma+0x248>)
 800585c:	2200      	movs	r2, #0
 800585e:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005860:	2102      	movs	r1, #2
 8005862:	4833      	ldr	r0, [pc, #204]	@ (8005930 <checkDemoModCalisma+0x240>)
 8005864:	f004 fb78 	bl	8009f58 <HAL_GPIO_ReadPin>
 8005868:	4603      	mov	r3, r0
 800586a:	2b01      	cmp	r3, #1
 800586c:	d125      	bne.n	80058ba <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800586e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005872:	482f      	ldr	r0, [pc, #188]	@ (8005930 <checkDemoModCalisma+0x240>)
 8005874:	f004 fb70 	bl	8009f58 <HAL_GPIO_ReadPin>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d11d      	bne.n	80058ba <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 800587e:	4b31      	ldr	r3, [pc, #196]	@ (8005944 <checkDemoModCalisma+0x254>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	f083 0301 	eor.w	r3, r3, #1
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d016      	beq.n	80058ba <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 800588c:	4b2a      	ldr	r3, [pc, #168]	@ (8005938 <checkDemoModCalisma+0x248>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	f083 0301 	eor.w	r3, r3, #1
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00f      	beq.n	80058ba <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800589a:	4b26      	ldr	r3, [pc, #152]	@ (8005934 <checkDemoModCalisma+0x244>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	f083 0301 	eor.w	r3, r3, #1
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d008      	beq.n	80058ba <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80058a8:	2201      	movs	r2, #1
 80058aa:	2110      	movs	r1, #16
 80058ac:	4820      	ldr	r0, [pc, #128]	@ (8005930 <checkDemoModCalisma+0x240>)
 80058ae:	f004 fb6a 	bl	8009f86 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80058b2:	4b22      	ldr	r3, [pc, #136]	@ (800593c <checkDemoModCalisma+0x24c>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	701a      	strb	r2, [r3, #0]
 80058b8:	e007      	b.n	80058ca <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80058ba:	2200      	movs	r2, #0
 80058bc:	2110      	movs	r1, #16
 80058be:	481c      	ldr	r0, [pc, #112]	@ (8005930 <checkDemoModCalisma+0x240>)
 80058c0:	f004 fb61 	bl	8009f86 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80058c4:	4b1d      	ldr	r3, [pc, #116]	@ (800593c <checkDemoModCalisma+0x24c>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80058ca:	2104      	movs	r1, #4
 80058cc:	4818      	ldr	r0, [pc, #96]	@ (8005930 <checkDemoModCalisma+0x240>)
 80058ce:	f004 fb43 	bl	8009f58 <HAL_GPIO_ReadPin>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d139      	bne.n	800594c <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 80058d8:	4b1a      	ldr	r3, [pc, #104]	@ (8005944 <checkDemoModCalisma+0x254>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	f083 0301 	eor.w	r3, r3, #1
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d032      	beq.n	800594c <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 80058e6:	4b15      	ldr	r3, [pc, #84]	@ (800593c <checkDemoModCalisma+0x24c>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	f083 0301 	eor.w	r3, r3, #1
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d02b      	beq.n	800594c <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 80058f4:	4b10      	ldr	r3, [pc, #64]	@ (8005938 <checkDemoModCalisma+0x248>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	f083 0301 	eor.w	r3, r3, #1
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d024      	beq.n	800594c <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005902:	2201      	movs	r2, #1
 8005904:	2102      	movs	r1, #2
 8005906:	480e      	ldr	r0, [pc, #56]	@ (8005940 <checkDemoModCalisma+0x250>)
 8005908:	f004 fb3d 	bl	8009f86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800590c:	2201      	movs	r2, #1
 800590e:	2101      	movs	r1, #1
 8005910:	480b      	ldr	r0, [pc, #44]	@ (8005940 <checkDemoModCalisma+0x250>)
 8005912:	f004 fb38 	bl	8009f86 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8005916:	4b07      	ldr	r3, [pc, #28]	@ (8005934 <checkDemoModCalisma+0x244>)
 8005918:	2201      	movs	r2, #1
 800591a:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 800591c:	4b0a      	ldr	r3, [pc, #40]	@ (8005948 <checkDemoModCalisma+0x258>)
 800591e:	2201      	movs	r2, #1
 8005920:	701a      	strb	r2, [r3, #0]
 8005922:	e027      	b.n	8005974 <checkDemoModCalisma+0x284>
 8005924:	200010e2 	.word	0x200010e2
 8005928:	20001116 	.word	0x20001116
 800592c:	200010e1 	.word	0x200010e1
 8005930:	40011000 	.word	0x40011000
 8005934:	2000111d 	.word	0x2000111d
 8005938:	2000111e 	.word	0x2000111e
 800593c:	2000111f 	.word	0x2000111f
 8005940:	40010c00 	.word	0x40010c00
 8005944:	2000111c 	.word	0x2000111c
 8005948:	20001102 	.word	0x20001102
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 800594c:	2104      	movs	r1, #4
 800594e:	48a0      	ldr	r0, [pc, #640]	@ (8005bd0 <checkDemoModCalisma+0x4e0>)
 8005950:	f004 fb02 	bl	8009f58 <HAL_GPIO_ReadPin>
 8005954:	4603      	mov	r3, r0
 8005956:	2b01      	cmp	r3, #1
 8005958:	d10c      	bne.n	8005974 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800595a:	2200      	movs	r2, #0
 800595c:	2102      	movs	r1, #2
 800595e:	489d      	ldr	r0, [pc, #628]	@ (8005bd4 <checkDemoModCalisma+0x4e4>)
 8005960:	f004 fb11 	bl	8009f86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005964:	2200      	movs	r2, #0
 8005966:	2101      	movs	r1, #1
 8005968:	489a      	ldr	r0, [pc, #616]	@ (8005bd4 <checkDemoModCalisma+0x4e4>)
 800596a:	f004 fb0c 	bl	8009f86 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 800596e:	4b9a      	ldr	r3, [pc, #616]	@ (8005bd8 <checkDemoModCalisma+0x4e8>)
 8005970:	2200      	movs	r2, #0
 8005972:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8005974:	2104      	movs	r1, #4
 8005976:	4896      	ldr	r0, [pc, #600]	@ (8005bd0 <checkDemoModCalisma+0x4e0>)
 8005978:	f004 faee 	bl	8009f58 <HAL_GPIO_ReadPin>
 800597c:	4603      	mov	r3, r0
 800597e:	2b01      	cmp	r3, #1
 8005980:	d10d      	bne.n	800599e <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005982:	2201      	movs	r2, #1
 8005984:	2180      	movs	r1, #128	@ 0x80
 8005986:	4895      	ldr	r0, [pc, #596]	@ (8005bdc <checkDemoModCalisma+0x4ec>)
 8005988:	f004 fafd 	bl	8009f86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800598c:	2201      	movs	r2, #1
 800598e:	2120      	movs	r1, #32
 8005990:	4892      	ldr	r0, [pc, #584]	@ (8005bdc <checkDemoModCalisma+0x4ec>)
 8005992:	f004 faf8 	bl	8009f86 <HAL_GPIO_WritePin>
			timer3 = millis;
 8005996:	4b92      	ldr	r3, [pc, #584]	@ (8005be0 <checkDemoModCalisma+0x4f0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a92      	ldr	r2, [pc, #584]	@ (8005be4 <checkDemoModCalisma+0x4f4>)
 800599c:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800599e:	4b90      	ldr	r3, [pc, #576]	@ (8005be0 <checkDemoModCalisma+0x4f0>)
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	4b90      	ldr	r3, [pc, #576]	@ (8005be4 <checkDemoModCalisma+0x4f4>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d909      	bls.n	80059c0 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80059ac:	2200      	movs	r2, #0
 80059ae:	2180      	movs	r1, #128	@ 0x80
 80059b0:	488a      	ldr	r0, [pc, #552]	@ (8005bdc <checkDemoModCalisma+0x4ec>)
 80059b2:	f004 fae8 	bl	8009f86 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80059b6:	2200      	movs	r2, #0
 80059b8:	2120      	movs	r1, #32
 80059ba:	4888      	ldr	r0, [pc, #544]	@ (8005bdc <checkDemoModCalisma+0x4ec>)
 80059bc:	f004 fae3 	bl	8009f86 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80059c0:	2102      	movs	r1, #2
 80059c2:	4883      	ldr	r0, [pc, #524]	@ (8005bd0 <checkDemoModCalisma+0x4e0>)
 80059c4:	f004 fac8 	bl	8009f58 <HAL_GPIO_ReadPin>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d108      	bne.n	80059e0 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80059ce:	2201      	movs	r2, #1
 80059d0:	2140      	movs	r1, #64	@ 0x40
 80059d2:	4882      	ldr	r0, [pc, #520]	@ (8005bdc <checkDemoModCalisma+0x4ec>)
 80059d4:	f004 fad7 	bl	8009f86 <HAL_GPIO_WritePin>
			timer3 = millis;
 80059d8:	4b81      	ldr	r3, [pc, #516]	@ (8005be0 <checkDemoModCalisma+0x4f0>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a81      	ldr	r2, [pc, #516]	@ (8005be4 <checkDemoModCalisma+0x4f4>)
 80059de:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80059e0:	4b7f      	ldr	r3, [pc, #508]	@ (8005be0 <checkDemoModCalisma+0x4f0>)
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	4b7f      	ldr	r3, [pc, #508]	@ (8005be4 <checkDemoModCalisma+0x4f4>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b04      	cmp	r3, #4
 80059ec:	d904      	bls.n	80059f8 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80059ee:	2200      	movs	r2, #0
 80059f0:	2140      	movs	r1, #64	@ 0x40
 80059f2:	487a      	ldr	r0, [pc, #488]	@ (8005bdc <checkDemoModCalisma+0x4ec>)
 80059f4:	f004 fac7 	bl	8009f86 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80059f8:	4b7b      	ldr	r3, [pc, #492]	@ (8005be8 <checkDemoModCalisma+0x4f8>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d058      	beq.n	8005ab2 <checkDemoModCalisma+0x3c2>
 8005a00:	4b7a      	ldr	r3, [pc, #488]	@ (8005bec <checkDemoModCalisma+0x4fc>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d054      	beq.n	8005ab2 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8005a08:	4b79      	ldr	r3, [pc, #484]	@ (8005bf0 <checkDemoModCalisma+0x500>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	4b77      	ldr	r3, [pc, #476]	@ (8005bf0 <checkDemoModCalisma+0x500>)
 8005a12:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8005a14:	4b76      	ldr	r3, [pc, #472]	@ (8005bf0 <checkDemoModCalisma+0x500>)
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	2b09      	cmp	r3, #9
 8005a1a:	d908      	bls.n	8005a2e <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8005a1c:	4b74      	ldr	r3, [pc, #464]	@ (8005bf0 <checkDemoModCalisma+0x500>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8005a22:	4b74      	ldr	r3, [pc, #464]	@ (8005bf4 <checkDemoModCalisma+0x504>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	3301      	adds	r3, #1
 8005a28:	b2da      	uxtb	r2, r3
 8005a2a:	4b72      	ldr	r3, [pc, #456]	@ (8005bf4 <checkDemoModCalisma+0x504>)
 8005a2c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8005a2e:	4b71      	ldr	r3, [pc, #452]	@ (8005bf4 <checkDemoModCalisma+0x504>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	2b09      	cmp	r3, #9
 8005a34:	d908      	bls.n	8005a48 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8005a36:	4b6f      	ldr	r3, [pc, #444]	@ (8005bf4 <checkDemoModCalisma+0x504>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8005a3c:	4b6e      	ldr	r3, [pc, #440]	@ (8005bf8 <checkDemoModCalisma+0x508>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	3301      	adds	r3, #1
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	4b6c      	ldr	r3, [pc, #432]	@ (8005bf8 <checkDemoModCalisma+0x508>)
 8005a46:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8005a48:	4b6b      	ldr	r3, [pc, #428]	@ (8005bf8 <checkDemoModCalisma+0x508>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b09      	cmp	r3, #9
 8005a4e:	d908      	bls.n	8005a62 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8005a50:	4b69      	ldr	r3, [pc, #420]	@ (8005bf8 <checkDemoModCalisma+0x508>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8005a56:	4b69      	ldr	r3, [pc, #420]	@ (8005bfc <checkDemoModCalisma+0x50c>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	b2da      	uxtb	r2, r3
 8005a5e:	4b67      	ldr	r3, [pc, #412]	@ (8005bfc <checkDemoModCalisma+0x50c>)
 8005a60:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8005a62:	4b66      	ldr	r3, [pc, #408]	@ (8005bfc <checkDemoModCalisma+0x50c>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b09      	cmp	r3, #9
 8005a68:	d908      	bls.n	8005a7c <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8005a6a:	4b64      	ldr	r3, [pc, #400]	@ (8005bfc <checkDemoModCalisma+0x50c>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8005a70:	4b63      	ldr	r3, [pc, #396]	@ (8005c00 <checkDemoModCalisma+0x510>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	3301      	adds	r3, #1
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	4b61      	ldr	r3, [pc, #388]	@ (8005c00 <checkDemoModCalisma+0x510>)
 8005a7a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005a7c:	4b60      	ldr	r3, [pc, #384]	@ (8005c00 <checkDemoModCalisma+0x510>)
 8005a7e:	781a      	ldrb	r2, [r3, #0]
 8005a80:	4b60      	ldr	r3, [pc, #384]	@ (8005c04 <checkDemoModCalisma+0x514>)
 8005a82:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005a86:	4b5d      	ldr	r3, [pc, #372]	@ (8005bfc <checkDemoModCalisma+0x50c>)
 8005a88:	781a      	ldrb	r2, [r3, #0]
 8005a8a:	4b5e      	ldr	r3, [pc, #376]	@ (8005c04 <checkDemoModCalisma+0x514>)
 8005a8c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005a8e:	4b5a      	ldr	r3, [pc, #360]	@ (8005bf8 <checkDemoModCalisma+0x508>)
 8005a90:	781a      	ldrb	r2, [r3, #0]
 8005a92:	4b5c      	ldr	r3, [pc, #368]	@ (8005c04 <checkDemoModCalisma+0x514>)
 8005a94:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005a96:	4b57      	ldr	r3, [pc, #348]	@ (8005bf4 <checkDemoModCalisma+0x504>)
 8005a98:	781a      	ldrb	r2, [r3, #0]
 8005a9a:	4b5a      	ldr	r3, [pc, #360]	@ (8005c04 <checkDemoModCalisma+0x514>)
 8005a9c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005a9e:	4b54      	ldr	r3, [pc, #336]	@ (8005bf0 <checkDemoModCalisma+0x500>)
 8005aa0:	781a      	ldrb	r2, [r3, #0]
 8005aa2:	4b58      	ldr	r3, [pc, #352]	@ (8005c04 <checkDemoModCalisma+0x514>)
 8005aa4:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8005aa6:	4b58      	ldr	r3, [pc, #352]	@ (8005c08 <checkDemoModCalisma+0x518>)
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8005aac:	4b4f      	ldr	r3, [pc, #316]	@ (8005bec <checkDemoModCalisma+0x4fc>)
 8005aae:	2200      	movs	r2, #0
 8005ab0:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8005ab2:	4b56      	ldr	r3, [pc, #344]	@ (8005c0c <checkDemoModCalisma+0x51c>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	f040 8087 	bne.w	8005bca <checkDemoModCalisma+0x4da>
			lcd_print(1, 1, demoModTextGN);
 8005abc:	4a54      	ldr	r2, [pc, #336]	@ (8005c10 <checkDemoModCalisma+0x520>)
 8005abe:	2101      	movs	r1, #1
 8005ac0:	2001      	movs	r0, #1
 8005ac2:	f002 ff1f 	bl	8008904 <lcd_print>
			lcd_print(2, 1, cycleTextGN);
 8005ac6:	4a53      	ldr	r2, [pc, #332]	@ (8005c14 <checkDemoModCalisma+0x524>)
 8005ac8:	2101      	movs	r1, #1
 8005aca:	2002      	movs	r0, #2
 8005acc:	f002 ff1a 	bl	8008904 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8005ad0:	4b4b      	ldr	r3, [pc, #300]	@ (8005c00 <checkDemoModCalisma+0x510>)
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	220a      	movs	r2, #10
 8005ad6:	4950      	ldr	r1, [pc, #320]	@ (8005c18 <checkDemoModCalisma+0x528>)
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f007 fa69 	bl	800cfb0 <itoa>
			lcd_print(2,12,snum);
 8005ade:	4a4e      	ldr	r2, [pc, #312]	@ (8005c18 <checkDemoModCalisma+0x528>)
 8005ae0:	210c      	movs	r1, #12
 8005ae2:	2002      	movs	r0, #2
 8005ae4:	f002 ff0e 	bl	8008904 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8005ae8:	4b44      	ldr	r3, [pc, #272]	@ (8005bfc <checkDemoModCalisma+0x50c>)
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	220a      	movs	r2, #10
 8005aee:	494a      	ldr	r1, [pc, #296]	@ (8005c18 <checkDemoModCalisma+0x528>)
 8005af0:	4618      	mov	r0, r3
 8005af2:	f007 fa5d 	bl	800cfb0 <itoa>
			lcd_print(2,13,snum);
 8005af6:	4a48      	ldr	r2, [pc, #288]	@ (8005c18 <checkDemoModCalisma+0x528>)
 8005af8:	210d      	movs	r1, #13
 8005afa:	2002      	movs	r0, #2
 8005afc:	f002 ff02 	bl	8008904 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8005b00:	4b3d      	ldr	r3, [pc, #244]	@ (8005bf8 <checkDemoModCalisma+0x508>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	220a      	movs	r2, #10
 8005b06:	4944      	ldr	r1, [pc, #272]	@ (8005c18 <checkDemoModCalisma+0x528>)
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f007 fa51 	bl	800cfb0 <itoa>
			lcd_print(2,14,snum);
 8005b0e:	4a42      	ldr	r2, [pc, #264]	@ (8005c18 <checkDemoModCalisma+0x528>)
 8005b10:	210e      	movs	r1, #14
 8005b12:	2002      	movs	r0, #2
 8005b14:	f002 fef6 	bl	8008904 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8005b18:	4b36      	ldr	r3, [pc, #216]	@ (8005bf4 <checkDemoModCalisma+0x504>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	220a      	movs	r2, #10
 8005b1e:	493e      	ldr	r1, [pc, #248]	@ (8005c18 <checkDemoModCalisma+0x528>)
 8005b20:	4618      	mov	r0, r3
 8005b22:	f007 fa45 	bl	800cfb0 <itoa>
			lcd_print(2,15,snum);
 8005b26:	4a3c      	ldr	r2, [pc, #240]	@ (8005c18 <checkDemoModCalisma+0x528>)
 8005b28:	210f      	movs	r1, #15
 8005b2a:	2002      	movs	r0, #2
 8005b2c:	f002 feea 	bl	8008904 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8005b30:	4b2f      	ldr	r3, [pc, #188]	@ (8005bf0 <checkDemoModCalisma+0x500>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	220a      	movs	r2, #10
 8005b36:	4938      	ldr	r1, [pc, #224]	@ (8005c18 <checkDemoModCalisma+0x528>)
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f007 fa39 	bl	800cfb0 <itoa>
			lcd_print(2,16,snum);
 8005b3e:	4a36      	ldr	r2, [pc, #216]	@ (8005c18 <checkDemoModCalisma+0x528>)
 8005b40:	2110      	movs	r1, #16
 8005b42:	2002      	movs	r0, #2
 8005b44:	f002 fede 	bl	8008904 <lcd_print>
			mesajYazildi=1;
 8005b48:	4b34      	ldr	r3, [pc, #208]	@ (8005c1c <checkDemoModCalisma+0x52c>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8005b4e:	e03c      	b.n	8005bca <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8005b50:	4b33      	ldr	r3, [pc, #204]	@ (8005c20 <checkDemoModCalisma+0x530>)
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d003      	beq.n	8005b60 <checkDemoModCalisma+0x470>
 8005b58:	4b2c      	ldr	r3, [pc, #176]	@ (8005c0c <checkDemoModCalisma+0x51c>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d134      	bne.n	8005bca <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005b60:	2200      	movs	r2, #0
 8005b62:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b66:	481b      	ldr	r0, [pc, #108]	@ (8005bd4 <checkDemoModCalisma+0x4e4>)
 8005b68:	f004 fa0d 	bl	8009f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b72:	4818      	ldr	r0, [pc, #96]	@ (8005bd4 <checkDemoModCalisma+0x4e4>)
 8005b74:	f004 fa07 	bl	8009f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2104      	movs	r1, #4
 8005b7c:	4815      	ldr	r0, [pc, #84]	@ (8005bd4 <checkDemoModCalisma+0x4e4>)
 8005b7e:	f004 fa02 	bl	8009f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005b82:	2200      	movs	r2, #0
 8005b84:	2102      	movs	r1, #2
 8005b86:	4813      	ldr	r0, [pc, #76]	@ (8005bd4 <checkDemoModCalisma+0x4e4>)
 8005b88:	f004 f9fd 	bl	8009f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	2101      	movs	r1, #1
 8005b90:	4810      	ldr	r0, [pc, #64]	@ (8005bd4 <checkDemoModCalisma+0x4e4>)
 8005b92:	f004 f9f8 	bl	8009f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005b96:	2200      	movs	r2, #0
 8005b98:	2120      	movs	r1, #32
 8005b9a:	480d      	ldr	r0, [pc, #52]	@ (8005bd0 <checkDemoModCalisma+0x4e0>)
 8005b9c:	f004 f9f3 	bl	8009f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2110      	movs	r1, #16
 8005ba4:	480a      	ldr	r0, [pc, #40]	@ (8005bd0 <checkDemoModCalisma+0x4e0>)
 8005ba6:	f004 f9ee 	bl	8009f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005baa:	2200      	movs	r2, #0
 8005bac:	2180      	movs	r1, #128	@ 0x80
 8005bae:	480b      	ldr	r0, [pc, #44]	@ (8005bdc <checkDemoModCalisma+0x4ec>)
 8005bb0:	f004 f9e9 	bl	8009f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2140      	movs	r1, #64	@ 0x40
 8005bb8:	4808      	ldr	r0, [pc, #32]	@ (8005bdc <checkDemoModCalisma+0x4ec>)
 8005bba:	f004 f9e4 	bl	8009f86 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2120      	movs	r1, #32
 8005bc2:	4806      	ldr	r0, [pc, #24]	@ (8005bdc <checkDemoModCalisma+0x4ec>)
 8005bc4:	f004 f9df 	bl	8009f86 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8005bc8:	e7ff      	b.n	8005bca <checkDemoModCalisma+0x4da>
 8005bca:	bf00      	nop
 8005bcc:	bd80      	pop	{r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	40011000 	.word	0x40011000
 8005bd4:	40010c00 	.word	0x40010c00
 8005bd8:	2000111d 	.word	0x2000111d
 8005bdc:	40010800 	.word	0x40010800
 8005be0:	200010a0 	.word	0x200010a0
 8005be4:	200010b0 	.word	0x200010b0
 8005be8:	2000111c 	.word	0x2000111c
 8005bec:	20001102 	.word	0x20001102
 8005bf0:	200010c1 	.word	0x200010c1
 8005bf4:	200010c2 	.word	0x200010c2
 8005bf8:	20000000 	.word	0x20000000
 8005bfc:	20000001 	.word	0x20000001
 8005c00:	200010c3 	.word	0x200010c3
 8005c04:	20000ff0 	.word	0x20000ff0
 8005c08:	200010f0 	.word	0x200010f0
 8005c0c:	200010e1 	.word	0x200010e1
 8005c10:	20000140 	.word	0x20000140
 8005c14:	20000168 	.word	0x20000168
 8005c18:	20001060 	.word	0x20001060
 8005c1c:	200010f8 	.word	0x200010f8
 8005c20:	200010e2 	.word	0x200010e2

08005c24 <mainLoop>:

void mainLoop() {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8005c2a:	f7fe f853 	bl	8003cd4 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8005c2e:	2101      	movs	r1, #1
 8005c30:	4894      	ldr	r0, [pc, #592]	@ (8005e84 <mainLoop+0x260>)
 8005c32:	f004 f991 	bl	8009f58 <HAL_GPIO_ReadPin>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d136      	bne.n	8005caa <mainLoop+0x86>
 8005c3c:	2108      	movs	r1, #8
 8005c3e:	4892      	ldr	r0, [pc, #584]	@ (8005e88 <mainLoop+0x264>)
 8005c40:	f004 f98a 	bl	8009f58 <HAL_GPIO_ReadPin>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d12f      	bne.n	8005caa <mainLoop+0x86>
 8005c4a:	2102      	movs	r1, #2
 8005c4c:	488d      	ldr	r0, [pc, #564]	@ (8005e84 <mainLoop+0x260>)
 8005c4e:	f004 f983 	bl	8009f58 <HAL_GPIO_ReadPin>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d128      	bne.n	8005caa <mainLoop+0x86>
 8005c58:	2104      	movs	r1, #4
 8005c5a:	488a      	ldr	r0, [pc, #552]	@ (8005e84 <mainLoop+0x260>)
 8005c5c:	f004 f97c 	bl	8009f58 <HAL_GPIO_ReadPin>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d121      	bne.n	8005caa <mainLoop+0x86>
 8005c66:	2108      	movs	r1, #8
 8005c68:	4886      	ldr	r0, [pc, #536]	@ (8005e84 <mainLoop+0x260>)
 8005c6a:	f004 f975 	bl	8009f58 <HAL_GPIO_ReadPin>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d11a      	bne.n	8005caa <mainLoop+0x86>
 8005c74:	2180      	movs	r1, #128	@ 0x80
 8005c76:	4884      	ldr	r0, [pc, #528]	@ (8005e88 <mainLoop+0x264>)
 8005c78:	f004 f96e 	bl	8009f58 <HAL_GPIO_ReadPin>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d113      	bne.n	8005caa <mainLoop+0x86>
 8005c82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005c86:	4880      	ldr	r0, [pc, #512]	@ (8005e88 <mainLoop+0x264>)
 8005c88:	f004 f966 	bl	8009f58 <HAL_GPIO_ReadPin>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d10b      	bne.n	8005caa <mainLoop+0x86>
 8005c92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005c96:	487c      	ldr	r0, [pc, #496]	@ (8005e88 <mainLoop+0x264>)
 8005c98:	f004 f95e 	bl	8009f58 <HAL_GPIO_ReadPin>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d103      	bne.n	8005caa <mainLoop+0x86>
			butonKontrol=0;
 8005ca2:	4b7a      	ldr	r3, [pc, #488]	@ (8005e8c <mainLoop+0x268>)
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	701a      	strb	r2, [r3, #0]
 8005ca8:	e003      	b.n	8005cb2 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8005caa:	4b79      	ldr	r3, [pc, #484]	@ (8005e90 <mainLoop+0x26c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a79      	ldr	r2, [pc, #484]	@ (8005e94 <mainLoop+0x270>)
 8005cb0:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8005cb2:	f7fe f8c1 	bl	8003e38 <buttonCheck>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d103      	bne.n	8005cc4 <mainLoop+0xa0>
			backLightTimer = millis;
 8005cbc:	4b74      	ldr	r3, [pc, #464]	@ (8005e90 <mainLoop+0x26c>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a74      	ldr	r2, [pc, #464]	@ (8005e94 <mainLoop+0x270>)
 8005cc2:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8005cc4:	4b74      	ldr	r3, [pc, #464]	@ (8005e98 <mainLoop+0x274>)
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d02c      	beq.n	8005d26 <mainLoop+0x102>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005ccc:	bf00      	nop
 8005cce:	4873      	ldr	r0, [pc, #460]	@ (8005e9c <mainLoop+0x278>)
 8005cd0:	f004 ff6b 	bl	800abaa <HAL_I2C_GetError>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d0f9      	beq.n	8005cce <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8005cda:	bf00      	nop
 8005cdc:	486f      	ldr	r0, [pc, #444]	@ (8005e9c <mainLoop+0x278>)
 8005cde:	f004 ff57 	bl	800ab90 <HAL_I2C_GetState>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b20      	cmp	r3, #32
 8005ce6:	d1f9      	bne.n	8005cdc <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8005ce8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005cec:	9302      	str	r3, [sp, #8]
 8005cee:	236e      	movs	r3, #110	@ 0x6e
 8005cf0:	9301      	str	r3, [sp, #4]
 8005cf2:	4b6b      	ldr	r3, [pc, #428]	@ (8005ea0 <mainLoop+0x27c>)
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	236e      	movs	r3, #110	@ 0x6e
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	21a0      	movs	r1, #160	@ 0xa0
 8005cfc:	4867      	ldr	r0, [pc, #412]	@ (8005e9c <mainLoop+0x278>)
 8005cfe:	f004 fbe5 	bl	800a4cc <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8005d02:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005d06:	f003 fb57 	bl	80093b8 <HAL_Delay>

		  hafizaYaz=0;
 8005d0a:	4b63      	ldr	r3, [pc, #396]	@ (8005e98 <mainLoop+0x274>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	701a      	strb	r2, [r3, #0]
		  lcd_print(2, 1, dataYazildiText);
 8005d10:	4a64      	ldr	r2, [pc, #400]	@ (8005ea4 <mainLoop+0x280>)
 8005d12:	2101      	movs	r1, #1
 8005d14:	2002      	movs	r0, #2
 8005d16:	f002 fdf5 	bl	8008904 <lcd_print>

		  HAL_Delay(1000);
 8005d1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005d1e:	f003 fb4b 	bl	80093b8 <HAL_Delay>
		  lcd_clear();
 8005d22:	f002 fe1b 	bl	800895c <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8005d26:	4b60      	ldr	r3, [pc, #384]	@ (8005ea8 <mainLoop+0x284>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	f083 0301 	eor.w	r3, r3, #1
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d043      	beq.n	8005dbc <mainLoop+0x198>
 8005d34:	4859      	ldr	r0, [pc, #356]	@ (8005e9c <mainLoop+0x278>)
 8005d36:	f004 ff2b 	bl	800ab90 <HAL_I2C_GetState>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b20      	cmp	r3, #32
 8005d3e:	d13d      	bne.n	8005dbc <mainLoop+0x198>
		  if(ilkOkuma==0) {
 8005d40:	4b5a      	ldr	r3, [pc, #360]	@ (8005eac <mainLoop+0x288>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	f083 0301 	eor.w	r3, r3, #1
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d028      	beq.n	8005da0 <mainLoop+0x17c>
			  lcd_print(1, 1, eepromTextGN);
 8005d4e:	4a58      	ldr	r2, [pc, #352]	@ (8005eb0 <mainLoop+0x28c>)
 8005d50:	2101      	movs	r1, #1
 8005d52:	2001      	movs	r0, #1
 8005d54:	f002 fdd6 	bl	8008904 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8005d58:	4a56      	ldr	r2, [pc, #344]	@ (8005eb4 <mainLoop+0x290>)
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	2002      	movs	r0, #2
 8005d5e:	f002 fdd1 	bl	8008904 <lcd_print>
			  HAL_Delay(1000);
 8005d62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005d66:	f003 fb27 	bl	80093b8 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005d6a:	bf00      	nop
 8005d6c:	484b      	ldr	r0, [pc, #300]	@ (8005e9c <mainLoop+0x278>)
 8005d6e:	f004 ff1c 	bl	800abaa <HAL_I2C_GetError>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b04      	cmp	r3, #4
 8005d76:	d0f9      	beq.n	8005d6c <mainLoop+0x148>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005d78:	e003      	b.n	8005d82 <mainLoop+0x15e>
				  HAL_Delay(1000);
 8005d7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005d7e:	f003 fb1b 	bl	80093b8 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005d82:	4846      	ldr	r0, [pc, #280]	@ (8005e9c <mainLoop+0x278>)
 8005d84:	f004 ff04 	bl	800ab90 <HAL_I2C_GetState>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b20      	cmp	r3, #32
 8005d8c:	d1f5      	bne.n	8005d7a <mainLoop+0x156>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8005d8e:	4a4a      	ldr	r2, [pc, #296]	@ (8005eb8 <mainLoop+0x294>)
 8005d90:	2101      	movs	r1, #1
 8005d92:	2002      	movs	r0, #2
 8005d94:	f002 fdb6 	bl	8008904 <lcd_print>

			  ilkOkuma=1;
 8005d98:	4b44      	ldr	r3, [pc, #272]	@ (8005eac <mainLoop+0x288>)
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	e006      	b.n	8005dae <mainLoop+0x18a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8005da0:	4a46      	ldr	r2, [pc, #280]	@ (8005ebc <mainLoop+0x298>)
 8005da2:	2101      	movs	r1, #1
 8005da4:	2002      	movs	r0, #2
 8005da6:	f002 fdad 	bl	8008904 <lcd_print>
			  lcd_clear();
 8005daa:	f002 fdd7 	bl	800895c <lcd_clear>
		  }

		  lcd_clear();
 8005dae:	f002 fdd5 	bl	800895c <lcd_clear>

		  eepromKontrol();
 8005db2:	f7fa fa3f 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8005db6:	4b3c      	ldr	r3, [pc, #240]	@ (8005ea8 <mainLoop+0x284>)
 8005db8:	2201      	movs	r2, #1
 8005dba:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8005dbc:	4b40      	ldr	r3, [pc, #256]	@ (8005ec0 <mainLoop+0x29c>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d11c      	bne.n	8005dfe <mainLoop+0x1da>
 8005dc4:	4b3f      	ldr	r3, [pc, #252]	@ (8005ec4 <mainLoop+0x2a0>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	f083 0301 	eor.w	r3, r3, #1
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d015      	beq.n	8005dfe <mainLoop+0x1da>
 8005dd2:	4b3d      	ldr	r3, [pc, #244]	@ (8005ec8 <mainLoop+0x2a4>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d111      	bne.n	8005dfe <mainLoop+0x1da>
			lcd_clear();
 8005dda:	f002 fdbf 	bl	800895c <lcd_clear>
			HAL_Delay(10);
 8005dde:	200a      	movs	r0, #10
 8005de0:	f003 faea 	bl	80093b8 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8005de4:	4a39      	ldr	r2, [pc, #228]	@ (8005ecc <mainLoop+0x2a8>)
 8005de6:	2101      	movs	r1, #1
 8005de8:	2001      	movs	r0, #1
 8005dea:	f002 fd8b 	bl	8008904 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8005dee:	4a38      	ldr	r2, [pc, #224]	@ (8005ed0 <mainLoop+0x2ac>)
 8005df0:	2101      	movs	r1, #1
 8005df2:	2002      	movs	r0, #2
 8005df4:	f002 fd86 	bl	8008904 <lcd_print>
			mesajYazildi=1;
 8005df8:	4b32      	ldr	r3, [pc, #200]	@ (8005ec4 <mainLoop+0x2a0>)
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8005dfe:	4b30      	ldr	r3, [pc, #192]	@ (8005ec0 <mainLoop+0x29c>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d112      	bne.n	8005e2c <mainLoop+0x208>
 8005e06:	2102      	movs	r1, #2
 8005e08:	481e      	ldr	r0, [pc, #120]	@ (8005e84 <mainLoop+0x260>)
 8005e0a:	f004 f8a5 	bl	8009f58 <HAL_GPIO_ReadPin>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d10b      	bne.n	8005e2c <mainLoop+0x208>
 8005e14:	2104      	movs	r1, #4
 8005e16:	481b      	ldr	r0, [pc, #108]	@ (8005e84 <mainLoop+0x260>)
 8005e18:	f004 f89e 	bl	8009f58 <HAL_GPIO_ReadPin>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d104      	bne.n	8005e2c <mainLoop+0x208>
			menuGiris=1;
 8005e22:	4b27      	ldr	r3, [pc, #156]	@ (8005ec0 <mainLoop+0x29c>)
 8005e24:	2201      	movs	r2, #1
 8005e26:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8005e28:	f002 fd98 	bl	800895c <lcd_clear>
		}

		if(menuGiris==1) {
 8005e2c:	4b24      	ldr	r3, [pc, #144]	@ (8005ec0 <mainLoop+0x29c>)
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <mainLoop+0x214>
			menu();
 8005e34:	f7fb fa36 	bl	80012a4 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8005e38:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005e3c:	4812      	ldr	r0, [pc, #72]	@ (8005e88 <mainLoop+0x264>)
 8005e3e:	f004 f8ba 	bl	8009fb6 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8005e42:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005e46:	4823      	ldr	r0, [pc, #140]	@ (8005ed4 <mainLoop+0x2b0>)
 8005e48:	f004 f886 	bl	8009f58 <HAL_GPIO_ReadPin>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10a      	bne.n	8005e68 <mainLoop+0x244>
 8005e52:	4b21      	ldr	r3, [pc, #132]	@ (8005ed8 <mainLoop+0x2b4>)
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	f083 0301 	eor.w	r3, r3, #1
 8005e5a:	b2db      	uxtb	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <mainLoop+0x244>
			stopVar=1;
 8005e60:	4b1e      	ldr	r3, [pc, #120]	@ (8005edc <mainLoop+0x2b8>)
 8005e62:	2201      	movs	r2, #1
 8005e64:	701a      	strb	r2, [r3, #0]
 8005e66:	e002      	b.n	8005e6e <mainLoop+0x24a>
		} else {
			stopVar=0;
 8005e68:	4b1c      	ldr	r3, [pc, #112]	@ (8005edc <mainLoop+0x2b8>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8005e6e:	f7fe f817 	bl	8003ea0 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8005e72:	f7fe f849 	bl	8003f08 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8005e76:	f7fe f88d 	bl	8003f94 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8005e7a:	f7fe f8dd 	bl	8004038 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8005e7e:	f7ff fc37 	bl	80056f0 <checkDemoModCalisma>
		checkLCDBacklight();
 8005e82:	e6d2      	b.n	8005c2a <mainLoop+0x6>
 8005e84:	40010800 	.word	0x40010800
 8005e88:	40011000 	.word	0x40011000
 8005e8c:	200010f3 	.word	0x200010f3
 8005e90:	200010a0 	.word	0x200010a0
 8005e94:	200010bc 	.word	0x200010bc
 8005e98:	200010f0 	.word	0x200010f0
 8005e9c:	20001940 	.word	0x20001940
 8005ea0:	20000ff0 	.word	0x20000ff0
 8005ea4:	20001864 	.word	0x20001864
 8005ea8:	200010f1 	.word	0x200010f1
 8005eac:	200010f2 	.word	0x200010f2
 8005eb0:	2000017c 	.word	0x2000017c
 8005eb4:	20001878 	.word	0x20001878
 8005eb8:	2000188c 	.word	0x2000188c
 8005ebc:	200018a0 	.word	0x200018a0
 8005ec0:	200010e1 	.word	0x200010e1
 8005ec4:	200010f8 	.word	0x200010f8
 8005ec8:	200010e2 	.word	0x200010e2
 8005ecc:	200000c8 	.word	0x200000c8
 8005ed0:	200000dc 	.word	0x200000dc
 8005ed4:	40010c00 	.word	0x40010c00
 8005ed8:	20001119 	.word	0x20001119
 8005edc:	20001116 	.word	0x20001116

08005ee0 <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8005ee0:	b5b0      	push	{r4, r5, r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8005eea:	79fb      	ldrb	r3, [r7, #7]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	f040 853d 	bne.w	800696c <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 8005ef2:	4ac7      	ldr	r2, [pc, #796]	@ (8006210 <loadMenuTexts+0x330>)
 8005ef4:	4bc7      	ldr	r3, [pc, #796]	@ (8006214 <loadMenuTexts+0x334>)
 8005ef6:	4614      	mov	r4, r2
 8005ef8:	461d      	mov	r5, r3
 8005efa:	6828      	ldr	r0, [r5, #0]
 8005efc:	6869      	ldr	r1, [r5, #4]
 8005efe:	68aa      	ldr	r2, [r5, #8]
 8005f00:	68eb      	ldr	r3, [r5, #12]
 8005f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f04:	7c2b      	ldrb	r3, [r5, #16]
 8005f06:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8005f08:	4ac3      	ldr	r2, [pc, #780]	@ (8006218 <loadMenuTexts+0x338>)
 8005f0a:	4bc4      	ldr	r3, [pc, #784]	@ (800621c <loadMenuTexts+0x33c>)
 8005f0c:	4614      	mov	r4, r2
 8005f0e:	461d      	mov	r5, r3
 8005f10:	6828      	ldr	r0, [r5, #0]
 8005f12:	6869      	ldr	r1, [r5, #4]
 8005f14:	68aa      	ldr	r2, [r5, #8]
 8005f16:	68eb      	ldr	r3, [r5, #12]
 8005f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f1a:	7c2b      	ldrb	r3, [r5, #16]
 8005f1c:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8005f1e:	4ac0      	ldr	r2, [pc, #768]	@ (8006220 <loadMenuTexts+0x340>)
 8005f20:	4bc0      	ldr	r3, [pc, #768]	@ (8006224 <loadMenuTexts+0x344>)
 8005f22:	4614      	mov	r4, r2
 8005f24:	461d      	mov	r5, r3
 8005f26:	6828      	ldr	r0, [r5, #0]
 8005f28:	6869      	ldr	r1, [r5, #4]
 8005f2a:	68aa      	ldr	r2, [r5, #8]
 8005f2c:	68eb      	ldr	r3, [r5, #12]
 8005f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f30:	7c2b      	ldrb	r3, [r5, #16]
 8005f32:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8005f34:	4abc      	ldr	r2, [pc, #752]	@ (8006228 <loadMenuTexts+0x348>)
 8005f36:	4bbd      	ldr	r3, [pc, #756]	@ (800622c <loadMenuTexts+0x34c>)
 8005f38:	4614      	mov	r4, r2
 8005f3a:	461d      	mov	r5, r3
 8005f3c:	6828      	ldr	r0, [r5, #0]
 8005f3e:	6869      	ldr	r1, [r5, #4]
 8005f40:	68aa      	ldr	r2, [r5, #8]
 8005f42:	68eb      	ldr	r3, [r5, #12]
 8005f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f46:	7c2b      	ldrb	r3, [r5, #16]
 8005f48:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 8005f4a:	4ab9      	ldr	r2, [pc, #740]	@ (8006230 <loadMenuTexts+0x350>)
 8005f4c:	4bb9      	ldr	r3, [pc, #740]	@ (8006234 <loadMenuTexts+0x354>)
 8005f4e:	4614      	mov	r4, r2
 8005f50:	461d      	mov	r5, r3
 8005f52:	6828      	ldr	r0, [r5, #0]
 8005f54:	6869      	ldr	r1, [r5, #4]
 8005f56:	68aa      	ldr	r2, [r5, #8]
 8005f58:	68eb      	ldr	r3, [r5, #12]
 8005f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f5c:	7c2b      	ldrb	r3, [r5, #16]
 8005f5e:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8005f60:	4ab5      	ldr	r2, [pc, #724]	@ (8006238 <loadMenuTexts+0x358>)
 8005f62:	4bb6      	ldr	r3, [pc, #728]	@ (800623c <loadMenuTexts+0x35c>)
 8005f64:	4614      	mov	r4, r2
 8005f66:	461d      	mov	r5, r3
 8005f68:	6828      	ldr	r0, [r5, #0]
 8005f6a:	6869      	ldr	r1, [r5, #4]
 8005f6c:	68aa      	ldr	r2, [r5, #8]
 8005f6e:	68eb      	ldr	r3, [r5, #12]
 8005f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f72:	7c2b      	ldrb	r3, [r5, #16]
 8005f74:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 8005f76:	4ab2      	ldr	r2, [pc, #712]	@ (8006240 <loadMenuTexts+0x360>)
 8005f78:	4bb2      	ldr	r3, [pc, #712]	@ (8006244 <loadMenuTexts+0x364>)
 8005f7a:	4614      	mov	r4, r2
 8005f7c:	461d      	mov	r5, r3
 8005f7e:	6828      	ldr	r0, [r5, #0]
 8005f80:	6869      	ldr	r1, [r5, #4]
 8005f82:	68aa      	ldr	r2, [r5, #8]
 8005f84:	68eb      	ldr	r3, [r5, #12]
 8005f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f88:	7c2b      	ldrb	r3, [r5, #16]
 8005f8a:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8005f8c:	4aae      	ldr	r2, [pc, #696]	@ (8006248 <loadMenuTexts+0x368>)
 8005f8e:	4baf      	ldr	r3, [pc, #700]	@ (800624c <loadMenuTexts+0x36c>)
 8005f90:	4614      	mov	r4, r2
 8005f92:	461d      	mov	r5, r3
 8005f94:	6828      	ldr	r0, [r5, #0]
 8005f96:	6869      	ldr	r1, [r5, #4]
 8005f98:	68aa      	ldr	r2, [r5, #8]
 8005f9a:	68eb      	ldr	r3, [r5, #12]
 8005f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f9e:	7c2b      	ldrb	r3, [r5, #16]
 8005fa0:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 8005fa2:	4aab      	ldr	r2, [pc, #684]	@ (8006250 <loadMenuTexts+0x370>)
 8005fa4:	4bab      	ldr	r3, [pc, #684]	@ (8006254 <loadMenuTexts+0x374>)
 8005fa6:	4614      	mov	r4, r2
 8005fa8:	461d      	mov	r5, r3
 8005faa:	6828      	ldr	r0, [r5, #0]
 8005fac:	6869      	ldr	r1, [r5, #4]
 8005fae:	68aa      	ldr	r2, [r5, #8]
 8005fb0:	68eb      	ldr	r3, [r5, #12]
 8005fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fb4:	7c2b      	ldrb	r3, [r5, #16]
 8005fb6:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8005fb8:	4aa7      	ldr	r2, [pc, #668]	@ (8006258 <loadMenuTexts+0x378>)
 8005fba:	4ba8      	ldr	r3, [pc, #672]	@ (800625c <loadMenuTexts+0x37c>)
 8005fbc:	4614      	mov	r4, r2
 8005fbe:	461d      	mov	r5, r3
 8005fc0:	6828      	ldr	r0, [r5, #0]
 8005fc2:	6869      	ldr	r1, [r5, #4]
 8005fc4:	68aa      	ldr	r2, [r5, #8]
 8005fc6:	68eb      	ldr	r3, [r5, #12]
 8005fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fca:	7c2b      	ldrb	r3, [r5, #16]
 8005fcc:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 8005fce:	4aa4      	ldr	r2, [pc, #656]	@ (8006260 <loadMenuTexts+0x380>)
 8005fd0:	4ba4      	ldr	r3, [pc, #656]	@ (8006264 <loadMenuTexts+0x384>)
 8005fd2:	4614      	mov	r4, r2
 8005fd4:	461d      	mov	r5, r3
 8005fd6:	6828      	ldr	r0, [r5, #0]
 8005fd8:	6869      	ldr	r1, [r5, #4]
 8005fda:	68aa      	ldr	r2, [r5, #8]
 8005fdc:	68eb      	ldr	r3, [r5, #12]
 8005fde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fe0:	7c2b      	ldrb	r3, [r5, #16]
 8005fe2:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8005fe4:	4aa0      	ldr	r2, [pc, #640]	@ (8006268 <loadMenuTexts+0x388>)
 8005fe6:	4ba1      	ldr	r3, [pc, #644]	@ (800626c <loadMenuTexts+0x38c>)
 8005fe8:	4614      	mov	r4, r2
 8005fea:	461d      	mov	r5, r3
 8005fec:	6828      	ldr	r0, [r5, #0]
 8005fee:	6869      	ldr	r1, [r5, #4]
 8005ff0:	68aa      	ldr	r2, [r5, #8]
 8005ff2:	68eb      	ldr	r3, [r5, #12]
 8005ff4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ff6:	7c2b      	ldrb	r3, [r5, #16]
 8005ff8:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8005ffa:	4a9d      	ldr	r2, [pc, #628]	@ (8006270 <loadMenuTexts+0x390>)
 8005ffc:	4b9d      	ldr	r3, [pc, #628]	@ (8006274 <loadMenuTexts+0x394>)
 8005ffe:	4614      	mov	r4, r2
 8006000:	461d      	mov	r5, r3
 8006002:	6828      	ldr	r0, [r5, #0]
 8006004:	6869      	ldr	r1, [r5, #4]
 8006006:	68aa      	ldr	r2, [r5, #8]
 8006008:	68eb      	ldr	r3, [r5, #12]
 800600a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800600c:	7c2b      	ldrb	r3, [r5, #16]
 800600e:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 8006010:	4a99      	ldr	r2, [pc, #612]	@ (8006278 <loadMenuTexts+0x398>)
 8006012:	4b9a      	ldr	r3, [pc, #616]	@ (800627c <loadMenuTexts+0x39c>)
 8006014:	4614      	mov	r4, r2
 8006016:	461d      	mov	r5, r3
 8006018:	6828      	ldr	r0, [r5, #0]
 800601a:	6869      	ldr	r1, [r5, #4]
 800601c:	68aa      	ldr	r2, [r5, #8]
 800601e:	68eb      	ldr	r3, [r5, #12]
 8006020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006022:	7c2b      	ldrb	r3, [r5, #16]
 8006024:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 8006026:	4a96      	ldr	r2, [pc, #600]	@ (8006280 <loadMenuTexts+0x3a0>)
 8006028:	4b96      	ldr	r3, [pc, #600]	@ (8006284 <loadMenuTexts+0x3a4>)
 800602a:	4614      	mov	r4, r2
 800602c:	461d      	mov	r5, r3
 800602e:	6828      	ldr	r0, [r5, #0]
 8006030:	6869      	ldr	r1, [r5, #4]
 8006032:	68aa      	ldr	r2, [r5, #8]
 8006034:	68eb      	ldr	r3, [r5, #12]
 8006036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006038:	7c2b      	ldrb	r3, [r5, #16]
 800603a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 800603c:	4a92      	ldr	r2, [pc, #584]	@ (8006288 <loadMenuTexts+0x3a8>)
 800603e:	4b93      	ldr	r3, [pc, #588]	@ (800628c <loadMenuTexts+0x3ac>)
 8006040:	4614      	mov	r4, r2
 8006042:	461d      	mov	r5, r3
 8006044:	6828      	ldr	r0, [r5, #0]
 8006046:	6869      	ldr	r1, [r5, #4]
 8006048:	68aa      	ldr	r2, [r5, #8]
 800604a:	68eb      	ldr	r3, [r5, #12]
 800604c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800604e:	7c2b      	ldrb	r3, [r5, #16]
 8006050:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 8006052:	4a8f      	ldr	r2, [pc, #572]	@ (8006290 <loadMenuTexts+0x3b0>)
 8006054:	4b8f      	ldr	r3, [pc, #572]	@ (8006294 <loadMenuTexts+0x3b4>)
 8006056:	4614      	mov	r4, r2
 8006058:	461d      	mov	r5, r3
 800605a:	6828      	ldr	r0, [r5, #0]
 800605c:	6869      	ldr	r1, [r5, #4]
 800605e:	68aa      	ldr	r2, [r5, #8]
 8006060:	68eb      	ldr	r3, [r5, #12]
 8006062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006064:	7c2b      	ldrb	r3, [r5, #16]
 8006066:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 8006068:	4a8b      	ldr	r2, [pc, #556]	@ (8006298 <loadMenuTexts+0x3b8>)
 800606a:	4b8c      	ldr	r3, [pc, #560]	@ (800629c <loadMenuTexts+0x3bc>)
 800606c:	4614      	mov	r4, r2
 800606e:	461d      	mov	r5, r3
 8006070:	6828      	ldr	r0, [r5, #0]
 8006072:	6869      	ldr	r1, [r5, #4]
 8006074:	68aa      	ldr	r2, [r5, #8]
 8006076:	68eb      	ldr	r3, [r5, #12]
 8006078:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800607a:	7c2b      	ldrb	r3, [r5, #16]
 800607c:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 800607e:	4a88      	ldr	r2, [pc, #544]	@ (80062a0 <loadMenuTexts+0x3c0>)
 8006080:	4b88      	ldr	r3, [pc, #544]	@ (80062a4 <loadMenuTexts+0x3c4>)
 8006082:	4614      	mov	r4, r2
 8006084:	461d      	mov	r5, r3
 8006086:	6828      	ldr	r0, [r5, #0]
 8006088:	6869      	ldr	r1, [r5, #4]
 800608a:	68aa      	ldr	r2, [r5, #8]
 800608c:	68eb      	ldr	r3, [r5, #12]
 800608e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006090:	7c2b      	ldrb	r3, [r5, #16]
 8006092:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 8006094:	4a84      	ldr	r2, [pc, #528]	@ (80062a8 <loadMenuTexts+0x3c8>)
 8006096:	4b85      	ldr	r3, [pc, #532]	@ (80062ac <loadMenuTexts+0x3cc>)
 8006098:	4614      	mov	r4, r2
 800609a:	461d      	mov	r5, r3
 800609c:	6828      	ldr	r0, [r5, #0]
 800609e:	6869      	ldr	r1, [r5, #4]
 80060a0:	68aa      	ldr	r2, [r5, #8]
 80060a2:	68eb      	ldr	r3, [r5, #12]
 80060a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060a6:	7c2b      	ldrb	r3, [r5, #16]
 80060a8:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 80060aa:	4a81      	ldr	r2, [pc, #516]	@ (80062b0 <loadMenuTexts+0x3d0>)
 80060ac:	4b81      	ldr	r3, [pc, #516]	@ (80062b4 <loadMenuTexts+0x3d4>)
 80060ae:	4614      	mov	r4, r2
 80060b0:	461d      	mov	r5, r3
 80060b2:	6828      	ldr	r0, [r5, #0]
 80060b4:	6869      	ldr	r1, [r5, #4]
 80060b6:	68aa      	ldr	r2, [r5, #8]
 80060b8:	68eb      	ldr	r3, [r5, #12]
 80060ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060bc:	7c2b      	ldrb	r3, [r5, #16]
 80060be:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 80060c0:	4a7d      	ldr	r2, [pc, #500]	@ (80062b8 <loadMenuTexts+0x3d8>)
 80060c2:	4b7e      	ldr	r3, [pc, #504]	@ (80062bc <loadMenuTexts+0x3dc>)
 80060c4:	4614      	mov	r4, r2
 80060c6:	461d      	mov	r5, r3
 80060c8:	6828      	ldr	r0, [r5, #0]
 80060ca:	6869      	ldr	r1, [r5, #4]
 80060cc:	68aa      	ldr	r2, [r5, #8]
 80060ce:	68eb      	ldr	r3, [r5, #12]
 80060d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060d2:	7c2b      	ldrb	r3, [r5, #16]
 80060d4:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 80060d6:	4a7a      	ldr	r2, [pc, #488]	@ (80062c0 <loadMenuTexts+0x3e0>)
 80060d8:	4b7a      	ldr	r3, [pc, #488]	@ (80062c4 <loadMenuTexts+0x3e4>)
 80060da:	4614      	mov	r4, r2
 80060dc:	461d      	mov	r5, r3
 80060de:	6828      	ldr	r0, [r5, #0]
 80060e0:	6869      	ldr	r1, [r5, #4]
 80060e2:	68aa      	ldr	r2, [r5, #8]
 80060e4:	68eb      	ldr	r3, [r5, #12]
 80060e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060e8:	7c2b      	ldrb	r3, [r5, #16]
 80060ea:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 80060ec:	4a76      	ldr	r2, [pc, #472]	@ (80062c8 <loadMenuTexts+0x3e8>)
 80060ee:	4b77      	ldr	r3, [pc, #476]	@ (80062cc <loadMenuTexts+0x3ec>)
 80060f0:	4614      	mov	r4, r2
 80060f2:	461d      	mov	r5, r3
 80060f4:	6828      	ldr	r0, [r5, #0]
 80060f6:	6869      	ldr	r1, [r5, #4]
 80060f8:	68aa      	ldr	r2, [r5, #8]
 80060fa:	68eb      	ldr	r3, [r5, #12]
 80060fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060fe:	7c2b      	ldrb	r3, [r5, #16]
 8006100:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 8006102:	4a73      	ldr	r2, [pc, #460]	@ (80062d0 <loadMenuTexts+0x3f0>)
 8006104:	4b73      	ldr	r3, [pc, #460]	@ (80062d4 <loadMenuTexts+0x3f4>)
 8006106:	4614      	mov	r4, r2
 8006108:	461d      	mov	r5, r3
 800610a:	6828      	ldr	r0, [r5, #0]
 800610c:	6869      	ldr	r1, [r5, #4]
 800610e:	68aa      	ldr	r2, [r5, #8]
 8006110:	68eb      	ldr	r3, [r5, #12]
 8006112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006114:	7c2b      	ldrb	r3, [r5, #16]
 8006116:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 8006118:	4a6f      	ldr	r2, [pc, #444]	@ (80062d8 <loadMenuTexts+0x3f8>)
 800611a:	4b70      	ldr	r3, [pc, #448]	@ (80062dc <loadMenuTexts+0x3fc>)
 800611c:	4614      	mov	r4, r2
 800611e:	461d      	mov	r5, r3
 8006120:	6828      	ldr	r0, [r5, #0]
 8006122:	6869      	ldr	r1, [r5, #4]
 8006124:	68aa      	ldr	r2, [r5, #8]
 8006126:	68eb      	ldr	r3, [r5, #12]
 8006128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800612a:	7c2b      	ldrb	r3, [r5, #16]
 800612c:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 800612e:	4a6c      	ldr	r2, [pc, #432]	@ (80062e0 <loadMenuTexts+0x400>)
 8006130:	4b6c      	ldr	r3, [pc, #432]	@ (80062e4 <loadMenuTexts+0x404>)
 8006132:	4614      	mov	r4, r2
 8006134:	461d      	mov	r5, r3
 8006136:	6828      	ldr	r0, [r5, #0]
 8006138:	6869      	ldr	r1, [r5, #4]
 800613a:	68aa      	ldr	r2, [r5, #8]
 800613c:	68eb      	ldr	r3, [r5, #12]
 800613e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006140:	7c2b      	ldrb	r3, [r5, #16]
 8006142:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 8006144:	4a68      	ldr	r2, [pc, #416]	@ (80062e8 <loadMenuTexts+0x408>)
 8006146:	4b69      	ldr	r3, [pc, #420]	@ (80062ec <loadMenuTexts+0x40c>)
 8006148:	4614      	mov	r4, r2
 800614a:	461d      	mov	r5, r3
 800614c:	6828      	ldr	r0, [r5, #0]
 800614e:	6869      	ldr	r1, [r5, #4]
 8006150:	68aa      	ldr	r2, [r5, #8]
 8006152:	68eb      	ldr	r3, [r5, #12]
 8006154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006156:	7c2b      	ldrb	r3, [r5, #16]
 8006158:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 800615a:	4a65      	ldr	r2, [pc, #404]	@ (80062f0 <loadMenuTexts+0x410>)
 800615c:	4b65      	ldr	r3, [pc, #404]	@ (80062f4 <loadMenuTexts+0x414>)
 800615e:	4614      	mov	r4, r2
 8006160:	461d      	mov	r5, r3
 8006162:	6828      	ldr	r0, [r5, #0]
 8006164:	6869      	ldr	r1, [r5, #4]
 8006166:	68aa      	ldr	r2, [r5, #8]
 8006168:	68eb      	ldr	r3, [r5, #12]
 800616a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800616c:	7c2b      	ldrb	r3, [r5, #16]
 800616e:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 8006170:	4a61      	ldr	r2, [pc, #388]	@ (80062f8 <loadMenuTexts+0x418>)
 8006172:	4b62      	ldr	r3, [pc, #392]	@ (80062fc <loadMenuTexts+0x41c>)
 8006174:	4614      	mov	r4, r2
 8006176:	461d      	mov	r5, r3
 8006178:	6828      	ldr	r0, [r5, #0]
 800617a:	6869      	ldr	r1, [r5, #4]
 800617c:	68aa      	ldr	r2, [r5, #8]
 800617e:	68eb      	ldr	r3, [r5, #12]
 8006180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006182:	7c2b      	ldrb	r3, [r5, #16]
 8006184:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 8006186:	4a5e      	ldr	r2, [pc, #376]	@ (8006300 <loadMenuTexts+0x420>)
 8006188:	4b5e      	ldr	r3, [pc, #376]	@ (8006304 <loadMenuTexts+0x424>)
 800618a:	4614      	mov	r4, r2
 800618c:	461d      	mov	r5, r3
 800618e:	6828      	ldr	r0, [r5, #0]
 8006190:	6869      	ldr	r1, [r5, #4]
 8006192:	68aa      	ldr	r2, [r5, #8]
 8006194:	68eb      	ldr	r3, [r5, #12]
 8006196:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006198:	7c2b      	ldrb	r3, [r5, #16]
 800619a:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 800619c:	4a5a      	ldr	r2, [pc, #360]	@ (8006308 <loadMenuTexts+0x428>)
 800619e:	4b5b      	ldr	r3, [pc, #364]	@ (800630c <loadMenuTexts+0x42c>)
 80061a0:	4614      	mov	r4, r2
 80061a2:	461d      	mov	r5, r3
 80061a4:	6828      	ldr	r0, [r5, #0]
 80061a6:	6869      	ldr	r1, [r5, #4]
 80061a8:	68aa      	ldr	r2, [r5, #8]
 80061aa:	68eb      	ldr	r3, [r5, #12]
 80061ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ae:	7c2b      	ldrb	r3, [r5, #16]
 80061b0:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 80061b2:	4a57      	ldr	r2, [pc, #348]	@ (8006310 <loadMenuTexts+0x430>)
 80061b4:	4b57      	ldr	r3, [pc, #348]	@ (8006314 <loadMenuTexts+0x434>)
 80061b6:	4614      	mov	r4, r2
 80061b8:	461d      	mov	r5, r3
 80061ba:	6828      	ldr	r0, [r5, #0]
 80061bc:	6869      	ldr	r1, [r5, #4]
 80061be:	68aa      	ldr	r2, [r5, #8]
 80061c0:	68eb      	ldr	r3, [r5, #12]
 80061c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061c4:	7c2b      	ldrb	r3, [r5, #16]
 80061c6:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 80061c8:	4a53      	ldr	r2, [pc, #332]	@ (8006318 <loadMenuTexts+0x438>)
 80061ca:	4b54      	ldr	r3, [pc, #336]	@ (800631c <loadMenuTexts+0x43c>)
 80061cc:	4614      	mov	r4, r2
 80061ce:	461d      	mov	r5, r3
 80061d0:	6828      	ldr	r0, [r5, #0]
 80061d2:	6869      	ldr	r1, [r5, #4]
 80061d4:	68aa      	ldr	r2, [r5, #8]
 80061d6:	68eb      	ldr	r3, [r5, #12]
 80061d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061da:	7c2b      	ldrb	r3, [r5, #16]
 80061dc:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 80061de:	4a50      	ldr	r2, [pc, #320]	@ (8006320 <loadMenuTexts+0x440>)
 80061e0:	4b50      	ldr	r3, [pc, #320]	@ (8006324 <loadMenuTexts+0x444>)
 80061e2:	4614      	mov	r4, r2
 80061e4:	461d      	mov	r5, r3
 80061e6:	6828      	ldr	r0, [r5, #0]
 80061e8:	6869      	ldr	r1, [r5, #4]
 80061ea:	68aa      	ldr	r2, [r5, #8]
 80061ec:	68eb      	ldr	r3, [r5, #12]
 80061ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061f0:	7c2b      	ldrb	r3, [r5, #16]
 80061f2:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 80061f4:	4a4c      	ldr	r2, [pc, #304]	@ (8006328 <loadMenuTexts+0x448>)
 80061f6:	4b4d      	ldr	r3, [pc, #308]	@ (800632c <loadMenuTexts+0x44c>)
 80061f8:	4614      	mov	r4, r2
 80061fa:	461d      	mov	r5, r3
 80061fc:	6828      	ldr	r0, [r5, #0]
 80061fe:	6869      	ldr	r1, [r5, #4]
 8006200:	68aa      	ldr	r2, [r5, #8]
 8006202:	68eb      	ldr	r3, [r5, #12]
 8006204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006206:	7c2b      	ldrb	r3, [r5, #16]
 8006208:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 800620a:	4a49      	ldr	r2, [pc, #292]	@ (8006330 <loadMenuTexts+0x450>)
 800620c:	e092      	b.n	8006334 <loadMenuTexts+0x454>
 800620e:	bf00      	nop
 8006210:	20001224 	.word	0x20001224
 8006214:	20000190 	.word	0x20000190
 8006218:	20001238 	.word	0x20001238
 800621c:	200001a4 	.word	0x200001a4
 8006220:	2000124c 	.word	0x2000124c
 8006224:	200001b8 	.word	0x200001b8
 8006228:	20001260 	.word	0x20001260
 800622c:	200001cc 	.word	0x200001cc
 8006230:	20001274 	.word	0x20001274
 8006234:	200001e0 	.word	0x200001e0
 8006238:	20001288 	.word	0x20001288
 800623c:	200001f4 	.word	0x200001f4
 8006240:	2000129c 	.word	0x2000129c
 8006244:	20000208 	.word	0x20000208
 8006248:	200012b0 	.word	0x200012b0
 800624c:	2000021c 	.word	0x2000021c
 8006250:	200012c4 	.word	0x200012c4
 8006254:	20000230 	.word	0x20000230
 8006258:	200012d8 	.word	0x200012d8
 800625c:	20000244 	.word	0x20000244
 8006260:	200012ec 	.word	0x200012ec
 8006264:	20000258 	.word	0x20000258
 8006268:	20001300 	.word	0x20001300
 800626c:	2000026c 	.word	0x2000026c
 8006270:	20001314 	.word	0x20001314
 8006274:	20000280 	.word	0x20000280
 8006278:	20001328 	.word	0x20001328
 800627c:	20000294 	.word	0x20000294
 8006280:	2000133c 	.word	0x2000133c
 8006284:	200002a8 	.word	0x200002a8
 8006288:	20001350 	.word	0x20001350
 800628c:	200002bc 	.word	0x200002bc
 8006290:	20001364 	.word	0x20001364
 8006294:	200002d0 	.word	0x200002d0
 8006298:	20001378 	.word	0x20001378
 800629c:	200002e4 	.word	0x200002e4
 80062a0:	2000138c 	.word	0x2000138c
 80062a4:	200002f8 	.word	0x200002f8
 80062a8:	200013a0 	.word	0x200013a0
 80062ac:	2000030c 	.word	0x2000030c
 80062b0:	200013b4 	.word	0x200013b4
 80062b4:	20000320 	.word	0x20000320
 80062b8:	200013c8 	.word	0x200013c8
 80062bc:	20000334 	.word	0x20000334
 80062c0:	200013dc 	.word	0x200013dc
 80062c4:	20000348 	.word	0x20000348
 80062c8:	200013f0 	.word	0x200013f0
 80062cc:	2000035c 	.word	0x2000035c
 80062d0:	20001404 	.word	0x20001404
 80062d4:	20000370 	.word	0x20000370
 80062d8:	20001418 	.word	0x20001418
 80062dc:	20000384 	.word	0x20000384
 80062e0:	2000142c 	.word	0x2000142c
 80062e4:	20000398 	.word	0x20000398
 80062e8:	20001440 	.word	0x20001440
 80062ec:	200003ac 	.word	0x200003ac
 80062f0:	20001454 	.word	0x20001454
 80062f4:	200003c0 	.word	0x200003c0
 80062f8:	20001468 	.word	0x20001468
 80062fc:	200003d4 	.word	0x200003d4
 8006300:	2000147c 	.word	0x2000147c
 8006304:	200003e8 	.word	0x200003e8
 8006308:	20001490 	.word	0x20001490
 800630c:	200003fc 	.word	0x200003fc
 8006310:	200014a4 	.word	0x200014a4
 8006314:	20000410 	.word	0x20000410
 8006318:	200014b8 	.word	0x200014b8
 800631c:	20000424 	.word	0x20000424
 8006320:	200014cc 	.word	0x200014cc
 8006324:	20000438 	.word	0x20000438
 8006328:	200014e0 	.word	0x200014e0
 800632c:	2000044c 	.word	0x2000044c
 8006330:	200014f4 	.word	0x200014f4
 8006334:	4bc7      	ldr	r3, [pc, #796]	@ (8006654 <loadMenuTexts+0x774>)
 8006336:	4614      	mov	r4, r2
 8006338:	461d      	mov	r5, r3
 800633a:	6828      	ldr	r0, [r5, #0]
 800633c:	6869      	ldr	r1, [r5, #4]
 800633e:	68aa      	ldr	r2, [r5, #8]
 8006340:	68eb      	ldr	r3, [r5, #12]
 8006342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006344:	7c2b      	ldrb	r3, [r5, #16]
 8006346:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 8006348:	4ac3      	ldr	r2, [pc, #780]	@ (8006658 <loadMenuTexts+0x778>)
 800634a:	4bc4      	ldr	r3, [pc, #784]	@ (800665c <loadMenuTexts+0x77c>)
 800634c:	4614      	mov	r4, r2
 800634e:	461d      	mov	r5, r3
 8006350:	6828      	ldr	r0, [r5, #0]
 8006352:	6869      	ldr	r1, [r5, #4]
 8006354:	68aa      	ldr	r2, [r5, #8]
 8006356:	68eb      	ldr	r3, [r5, #12]
 8006358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800635a:	7c2b      	ldrb	r3, [r5, #16]
 800635c:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 800635e:	4ac0      	ldr	r2, [pc, #768]	@ (8006660 <loadMenuTexts+0x780>)
 8006360:	4bc0      	ldr	r3, [pc, #768]	@ (8006664 <loadMenuTexts+0x784>)
 8006362:	4614      	mov	r4, r2
 8006364:	461d      	mov	r5, r3
 8006366:	6828      	ldr	r0, [r5, #0]
 8006368:	6869      	ldr	r1, [r5, #4]
 800636a:	68aa      	ldr	r2, [r5, #8]
 800636c:	68eb      	ldr	r3, [r5, #12]
 800636e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006370:	7c2b      	ldrb	r3, [r5, #16]
 8006372:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 8006374:	4abc      	ldr	r2, [pc, #752]	@ (8006668 <loadMenuTexts+0x788>)
 8006376:	4bbd      	ldr	r3, [pc, #756]	@ (800666c <loadMenuTexts+0x78c>)
 8006378:	4614      	mov	r4, r2
 800637a:	461d      	mov	r5, r3
 800637c:	6828      	ldr	r0, [r5, #0]
 800637e:	6869      	ldr	r1, [r5, #4]
 8006380:	68aa      	ldr	r2, [r5, #8]
 8006382:	68eb      	ldr	r3, [r5, #12]
 8006384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006386:	7c2b      	ldrb	r3, [r5, #16]
 8006388:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 800638a:	4ab9      	ldr	r2, [pc, #740]	@ (8006670 <loadMenuTexts+0x790>)
 800638c:	4bb9      	ldr	r3, [pc, #740]	@ (8006674 <loadMenuTexts+0x794>)
 800638e:	4614      	mov	r4, r2
 8006390:	461d      	mov	r5, r3
 8006392:	6828      	ldr	r0, [r5, #0]
 8006394:	6869      	ldr	r1, [r5, #4]
 8006396:	68aa      	ldr	r2, [r5, #8]
 8006398:	68eb      	ldr	r3, [r5, #12]
 800639a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800639c:	7c2b      	ldrb	r3, [r5, #16]
 800639e:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 80063a0:	4ab5      	ldr	r2, [pc, #724]	@ (8006678 <loadMenuTexts+0x798>)
 80063a2:	4bb6      	ldr	r3, [pc, #728]	@ (800667c <loadMenuTexts+0x79c>)
 80063a4:	4614      	mov	r4, r2
 80063a6:	461d      	mov	r5, r3
 80063a8:	6828      	ldr	r0, [r5, #0]
 80063aa:	6869      	ldr	r1, [r5, #4]
 80063ac:	68aa      	ldr	r2, [r5, #8]
 80063ae:	68eb      	ldr	r3, [r5, #12]
 80063b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063b2:	7c2b      	ldrb	r3, [r5, #16]
 80063b4:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 80063b6:	4ab2      	ldr	r2, [pc, #712]	@ (8006680 <loadMenuTexts+0x7a0>)
 80063b8:	4bb2      	ldr	r3, [pc, #712]	@ (8006684 <loadMenuTexts+0x7a4>)
 80063ba:	4614      	mov	r4, r2
 80063bc:	461d      	mov	r5, r3
 80063be:	6828      	ldr	r0, [r5, #0]
 80063c0:	6869      	ldr	r1, [r5, #4]
 80063c2:	68aa      	ldr	r2, [r5, #8]
 80063c4:	68eb      	ldr	r3, [r5, #12]
 80063c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c8:	7c2b      	ldrb	r3, [r5, #16]
 80063ca:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 80063cc:	4aae      	ldr	r2, [pc, #696]	@ (8006688 <loadMenuTexts+0x7a8>)
 80063ce:	4baf      	ldr	r3, [pc, #700]	@ (800668c <loadMenuTexts+0x7ac>)
 80063d0:	4614      	mov	r4, r2
 80063d2:	461d      	mov	r5, r3
 80063d4:	6828      	ldr	r0, [r5, #0]
 80063d6:	6869      	ldr	r1, [r5, #4]
 80063d8:	68aa      	ldr	r2, [r5, #8]
 80063da:	68eb      	ldr	r3, [r5, #12]
 80063dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063de:	7c2b      	ldrb	r3, [r5, #16]
 80063e0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 80063e2:	4aab      	ldr	r2, [pc, #684]	@ (8006690 <loadMenuTexts+0x7b0>)
 80063e4:	4bab      	ldr	r3, [pc, #684]	@ (8006694 <loadMenuTexts+0x7b4>)
 80063e6:	4614      	mov	r4, r2
 80063e8:	461d      	mov	r5, r3
 80063ea:	6828      	ldr	r0, [r5, #0]
 80063ec:	6869      	ldr	r1, [r5, #4]
 80063ee:	68aa      	ldr	r2, [r5, #8]
 80063f0:	68eb      	ldr	r3, [r5, #12]
 80063f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063f4:	7c2b      	ldrb	r3, [r5, #16]
 80063f6:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 80063f8:	4aa7      	ldr	r2, [pc, #668]	@ (8006698 <loadMenuTexts+0x7b8>)
 80063fa:	4ba8      	ldr	r3, [pc, #672]	@ (800669c <loadMenuTexts+0x7bc>)
 80063fc:	4614      	mov	r4, r2
 80063fe:	461d      	mov	r5, r3
 8006400:	6828      	ldr	r0, [r5, #0]
 8006402:	6869      	ldr	r1, [r5, #4]
 8006404:	68aa      	ldr	r2, [r5, #8]
 8006406:	68eb      	ldr	r3, [r5, #12]
 8006408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800640a:	7c2b      	ldrb	r3, [r5, #16]
 800640c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 800640e:	4aa4      	ldr	r2, [pc, #656]	@ (80066a0 <loadMenuTexts+0x7c0>)
 8006410:	4ba4      	ldr	r3, [pc, #656]	@ (80066a4 <loadMenuTexts+0x7c4>)
 8006412:	4614      	mov	r4, r2
 8006414:	461d      	mov	r5, r3
 8006416:	6828      	ldr	r0, [r5, #0]
 8006418:	6869      	ldr	r1, [r5, #4]
 800641a:	68aa      	ldr	r2, [r5, #8]
 800641c:	68eb      	ldr	r3, [r5, #12]
 800641e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006420:	7c2b      	ldrb	r3, [r5, #16]
 8006422:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 8006424:	4aa0      	ldr	r2, [pc, #640]	@ (80066a8 <loadMenuTexts+0x7c8>)
 8006426:	4ba1      	ldr	r3, [pc, #644]	@ (80066ac <loadMenuTexts+0x7cc>)
 8006428:	4614      	mov	r4, r2
 800642a:	461d      	mov	r5, r3
 800642c:	6828      	ldr	r0, [r5, #0]
 800642e:	6869      	ldr	r1, [r5, #4]
 8006430:	68aa      	ldr	r2, [r5, #8]
 8006432:	68eb      	ldr	r3, [r5, #12]
 8006434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006436:	7c2b      	ldrb	r3, [r5, #16]
 8006438:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 800643a:	4a9d      	ldr	r2, [pc, #628]	@ (80066b0 <loadMenuTexts+0x7d0>)
 800643c:	4b9d      	ldr	r3, [pc, #628]	@ (80066b4 <loadMenuTexts+0x7d4>)
 800643e:	4614      	mov	r4, r2
 8006440:	461d      	mov	r5, r3
 8006442:	6828      	ldr	r0, [r5, #0]
 8006444:	6869      	ldr	r1, [r5, #4]
 8006446:	68aa      	ldr	r2, [r5, #8]
 8006448:	68eb      	ldr	r3, [r5, #12]
 800644a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800644c:	7c2b      	ldrb	r3, [r5, #16]
 800644e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 8006450:	4a99      	ldr	r2, [pc, #612]	@ (80066b8 <loadMenuTexts+0x7d8>)
 8006452:	4b9a      	ldr	r3, [pc, #616]	@ (80066bc <loadMenuTexts+0x7dc>)
 8006454:	4614      	mov	r4, r2
 8006456:	461d      	mov	r5, r3
 8006458:	6828      	ldr	r0, [r5, #0]
 800645a:	6869      	ldr	r1, [r5, #4]
 800645c:	68aa      	ldr	r2, [r5, #8]
 800645e:	68eb      	ldr	r3, [r5, #12]
 8006460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006462:	7c2b      	ldrb	r3, [r5, #16]
 8006464:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 8006466:	4a96      	ldr	r2, [pc, #600]	@ (80066c0 <loadMenuTexts+0x7e0>)
 8006468:	4b96      	ldr	r3, [pc, #600]	@ (80066c4 <loadMenuTexts+0x7e4>)
 800646a:	4614      	mov	r4, r2
 800646c:	461d      	mov	r5, r3
 800646e:	6828      	ldr	r0, [r5, #0]
 8006470:	6869      	ldr	r1, [r5, #4]
 8006472:	68aa      	ldr	r2, [r5, #8]
 8006474:	68eb      	ldr	r3, [r5, #12]
 8006476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006478:	7c2b      	ldrb	r3, [r5, #16]
 800647a:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 800647c:	4a92      	ldr	r2, [pc, #584]	@ (80066c8 <loadMenuTexts+0x7e8>)
 800647e:	4b93      	ldr	r3, [pc, #588]	@ (80066cc <loadMenuTexts+0x7ec>)
 8006480:	4614      	mov	r4, r2
 8006482:	461d      	mov	r5, r3
 8006484:	6828      	ldr	r0, [r5, #0]
 8006486:	6869      	ldr	r1, [r5, #4]
 8006488:	68aa      	ldr	r2, [r5, #8]
 800648a:	68eb      	ldr	r3, [r5, #12]
 800648c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800648e:	7c2b      	ldrb	r3, [r5, #16]
 8006490:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 8006492:	4a8f      	ldr	r2, [pc, #572]	@ (80066d0 <loadMenuTexts+0x7f0>)
 8006494:	4b8f      	ldr	r3, [pc, #572]	@ (80066d4 <loadMenuTexts+0x7f4>)
 8006496:	4614      	mov	r4, r2
 8006498:	461d      	mov	r5, r3
 800649a:	6828      	ldr	r0, [r5, #0]
 800649c:	6869      	ldr	r1, [r5, #4]
 800649e:	68aa      	ldr	r2, [r5, #8]
 80064a0:	68eb      	ldr	r3, [r5, #12]
 80064a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064a4:	7c2b      	ldrb	r3, [r5, #16]
 80064a6:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 80064a8:	4a8b      	ldr	r2, [pc, #556]	@ (80066d8 <loadMenuTexts+0x7f8>)
 80064aa:	4b8c      	ldr	r3, [pc, #560]	@ (80066dc <loadMenuTexts+0x7fc>)
 80064ac:	4614      	mov	r4, r2
 80064ae:	461d      	mov	r5, r3
 80064b0:	6828      	ldr	r0, [r5, #0]
 80064b2:	6869      	ldr	r1, [r5, #4]
 80064b4:	68aa      	ldr	r2, [r5, #8]
 80064b6:	68eb      	ldr	r3, [r5, #12]
 80064b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064ba:	7c2b      	ldrb	r3, [r5, #16]
 80064bc:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 80064be:	4a88      	ldr	r2, [pc, #544]	@ (80066e0 <loadMenuTexts+0x800>)
 80064c0:	4b88      	ldr	r3, [pc, #544]	@ (80066e4 <loadMenuTexts+0x804>)
 80064c2:	4614      	mov	r4, r2
 80064c4:	461d      	mov	r5, r3
 80064c6:	6828      	ldr	r0, [r5, #0]
 80064c8:	6869      	ldr	r1, [r5, #4]
 80064ca:	68aa      	ldr	r2, [r5, #8]
 80064cc:	68eb      	ldr	r3, [r5, #12]
 80064ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064d0:	7c2b      	ldrb	r3, [r5, #16]
 80064d2:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 80064d4:	4a84      	ldr	r2, [pc, #528]	@ (80066e8 <loadMenuTexts+0x808>)
 80064d6:	4b85      	ldr	r3, [pc, #532]	@ (80066ec <loadMenuTexts+0x80c>)
 80064d8:	4614      	mov	r4, r2
 80064da:	461d      	mov	r5, r3
 80064dc:	6828      	ldr	r0, [r5, #0]
 80064de:	6869      	ldr	r1, [r5, #4]
 80064e0:	68aa      	ldr	r2, [r5, #8]
 80064e2:	68eb      	ldr	r3, [r5, #12]
 80064e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064e6:	7c2b      	ldrb	r3, [r5, #16]
 80064e8:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 80064ea:	4a81      	ldr	r2, [pc, #516]	@ (80066f0 <loadMenuTexts+0x810>)
 80064ec:	4b81      	ldr	r3, [pc, #516]	@ (80066f4 <loadMenuTexts+0x814>)
 80064ee:	4614      	mov	r4, r2
 80064f0:	461d      	mov	r5, r3
 80064f2:	6828      	ldr	r0, [r5, #0]
 80064f4:	6869      	ldr	r1, [r5, #4]
 80064f6:	68aa      	ldr	r2, [r5, #8]
 80064f8:	68eb      	ldr	r3, [r5, #12]
 80064fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064fc:	7c2b      	ldrb	r3, [r5, #16]
 80064fe:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 8006500:	4a7d      	ldr	r2, [pc, #500]	@ (80066f8 <loadMenuTexts+0x818>)
 8006502:	4b7e      	ldr	r3, [pc, #504]	@ (80066fc <loadMenuTexts+0x81c>)
 8006504:	4614      	mov	r4, r2
 8006506:	461d      	mov	r5, r3
 8006508:	6828      	ldr	r0, [r5, #0]
 800650a:	6869      	ldr	r1, [r5, #4]
 800650c:	68aa      	ldr	r2, [r5, #8]
 800650e:	68eb      	ldr	r3, [r5, #12]
 8006510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006512:	7c2b      	ldrb	r3, [r5, #16]
 8006514:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 8006516:	4a7a      	ldr	r2, [pc, #488]	@ (8006700 <loadMenuTexts+0x820>)
 8006518:	4b7a      	ldr	r3, [pc, #488]	@ (8006704 <loadMenuTexts+0x824>)
 800651a:	4614      	mov	r4, r2
 800651c:	461d      	mov	r5, r3
 800651e:	6828      	ldr	r0, [r5, #0]
 8006520:	6869      	ldr	r1, [r5, #4]
 8006522:	68aa      	ldr	r2, [r5, #8]
 8006524:	68eb      	ldr	r3, [r5, #12]
 8006526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006528:	7c2b      	ldrb	r3, [r5, #16]
 800652a:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 800652c:	4a76      	ldr	r2, [pc, #472]	@ (8006708 <loadMenuTexts+0x828>)
 800652e:	4b77      	ldr	r3, [pc, #476]	@ (800670c <loadMenuTexts+0x82c>)
 8006530:	4614      	mov	r4, r2
 8006532:	461d      	mov	r5, r3
 8006534:	6828      	ldr	r0, [r5, #0]
 8006536:	6869      	ldr	r1, [r5, #4]
 8006538:	68aa      	ldr	r2, [r5, #8]
 800653a:	68eb      	ldr	r3, [r5, #12]
 800653c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800653e:	7c2b      	ldrb	r3, [r5, #16]
 8006540:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 8006542:	4a73      	ldr	r2, [pc, #460]	@ (8006710 <loadMenuTexts+0x830>)
 8006544:	4b73      	ldr	r3, [pc, #460]	@ (8006714 <loadMenuTexts+0x834>)
 8006546:	4614      	mov	r4, r2
 8006548:	461d      	mov	r5, r3
 800654a:	6828      	ldr	r0, [r5, #0]
 800654c:	6869      	ldr	r1, [r5, #4]
 800654e:	68aa      	ldr	r2, [r5, #8]
 8006550:	68eb      	ldr	r3, [r5, #12]
 8006552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006554:	7c2b      	ldrb	r3, [r5, #16]
 8006556:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 8006558:	4a6f      	ldr	r2, [pc, #444]	@ (8006718 <loadMenuTexts+0x838>)
 800655a:	4b70      	ldr	r3, [pc, #448]	@ (800671c <loadMenuTexts+0x83c>)
 800655c:	4614      	mov	r4, r2
 800655e:	461d      	mov	r5, r3
 8006560:	6828      	ldr	r0, [r5, #0]
 8006562:	6869      	ldr	r1, [r5, #4]
 8006564:	68aa      	ldr	r2, [r5, #8]
 8006566:	68eb      	ldr	r3, [r5, #12]
 8006568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800656a:	7c2b      	ldrb	r3, [r5, #16]
 800656c:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 800656e:	4a6c      	ldr	r2, [pc, #432]	@ (8006720 <loadMenuTexts+0x840>)
 8006570:	4b6c      	ldr	r3, [pc, #432]	@ (8006724 <loadMenuTexts+0x844>)
 8006572:	4614      	mov	r4, r2
 8006574:	461d      	mov	r5, r3
 8006576:	6828      	ldr	r0, [r5, #0]
 8006578:	6869      	ldr	r1, [r5, #4]
 800657a:	68aa      	ldr	r2, [r5, #8]
 800657c:	68eb      	ldr	r3, [r5, #12]
 800657e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006580:	7c2b      	ldrb	r3, [r5, #16]
 8006582:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 8006584:	4a68      	ldr	r2, [pc, #416]	@ (8006728 <loadMenuTexts+0x848>)
 8006586:	4b69      	ldr	r3, [pc, #420]	@ (800672c <loadMenuTexts+0x84c>)
 8006588:	4614      	mov	r4, r2
 800658a:	461d      	mov	r5, r3
 800658c:	6828      	ldr	r0, [r5, #0]
 800658e:	6869      	ldr	r1, [r5, #4]
 8006590:	68aa      	ldr	r2, [r5, #8]
 8006592:	68eb      	ldr	r3, [r5, #12]
 8006594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006596:	7c2b      	ldrb	r3, [r5, #16]
 8006598:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 800659a:	4a65      	ldr	r2, [pc, #404]	@ (8006730 <loadMenuTexts+0x850>)
 800659c:	4b65      	ldr	r3, [pc, #404]	@ (8006734 <loadMenuTexts+0x854>)
 800659e:	4614      	mov	r4, r2
 80065a0:	461d      	mov	r5, r3
 80065a2:	6828      	ldr	r0, [r5, #0]
 80065a4:	6869      	ldr	r1, [r5, #4]
 80065a6:	68aa      	ldr	r2, [r5, #8]
 80065a8:	68eb      	ldr	r3, [r5, #12]
 80065aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065ac:	7c2b      	ldrb	r3, [r5, #16]
 80065ae:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 80065b0:	4a61      	ldr	r2, [pc, #388]	@ (8006738 <loadMenuTexts+0x858>)
 80065b2:	4b62      	ldr	r3, [pc, #392]	@ (800673c <loadMenuTexts+0x85c>)
 80065b4:	4614      	mov	r4, r2
 80065b6:	461d      	mov	r5, r3
 80065b8:	6828      	ldr	r0, [r5, #0]
 80065ba:	6869      	ldr	r1, [r5, #4]
 80065bc:	68aa      	ldr	r2, [r5, #8]
 80065be:	68eb      	ldr	r3, [r5, #12]
 80065c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065c2:	7c2b      	ldrb	r3, [r5, #16]
 80065c4:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 80065c6:	4a5e      	ldr	r2, [pc, #376]	@ (8006740 <loadMenuTexts+0x860>)
 80065c8:	4b5e      	ldr	r3, [pc, #376]	@ (8006744 <loadMenuTexts+0x864>)
 80065ca:	4614      	mov	r4, r2
 80065cc:	461d      	mov	r5, r3
 80065ce:	6828      	ldr	r0, [r5, #0]
 80065d0:	6869      	ldr	r1, [r5, #4]
 80065d2:	68aa      	ldr	r2, [r5, #8]
 80065d4:	68eb      	ldr	r3, [r5, #12]
 80065d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065d8:	7c2b      	ldrb	r3, [r5, #16]
 80065da:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 80065dc:	4a5a      	ldr	r2, [pc, #360]	@ (8006748 <loadMenuTexts+0x868>)
 80065de:	4b5b      	ldr	r3, [pc, #364]	@ (800674c <loadMenuTexts+0x86c>)
 80065e0:	4614      	mov	r4, r2
 80065e2:	461d      	mov	r5, r3
 80065e4:	6828      	ldr	r0, [r5, #0]
 80065e6:	6869      	ldr	r1, [r5, #4]
 80065e8:	68aa      	ldr	r2, [r5, #8]
 80065ea:	68eb      	ldr	r3, [r5, #12]
 80065ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065ee:	7c2b      	ldrb	r3, [r5, #16]
 80065f0:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 80065f2:	4a57      	ldr	r2, [pc, #348]	@ (8006750 <loadMenuTexts+0x870>)
 80065f4:	4b57      	ldr	r3, [pc, #348]	@ (8006754 <loadMenuTexts+0x874>)
 80065f6:	4614      	mov	r4, r2
 80065f8:	461d      	mov	r5, r3
 80065fa:	6828      	ldr	r0, [r5, #0]
 80065fc:	6869      	ldr	r1, [r5, #4]
 80065fe:	68aa      	ldr	r2, [r5, #8]
 8006600:	68eb      	ldr	r3, [r5, #12]
 8006602:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006604:	7c2b      	ldrb	r3, [r5, #16]
 8006606:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 8006608:	4a53      	ldr	r2, [pc, #332]	@ (8006758 <loadMenuTexts+0x878>)
 800660a:	4b54      	ldr	r3, [pc, #336]	@ (800675c <loadMenuTexts+0x87c>)
 800660c:	4614      	mov	r4, r2
 800660e:	461d      	mov	r5, r3
 8006610:	6828      	ldr	r0, [r5, #0]
 8006612:	6869      	ldr	r1, [r5, #4]
 8006614:	68aa      	ldr	r2, [r5, #8]
 8006616:	68eb      	ldr	r3, [r5, #12]
 8006618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800661a:	7c2b      	ldrb	r3, [r5, #16]
 800661c:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 800661e:	4a50      	ldr	r2, [pc, #320]	@ (8006760 <loadMenuTexts+0x880>)
 8006620:	4b50      	ldr	r3, [pc, #320]	@ (8006764 <loadMenuTexts+0x884>)
 8006622:	4614      	mov	r4, r2
 8006624:	461d      	mov	r5, r3
 8006626:	6828      	ldr	r0, [r5, #0]
 8006628:	6869      	ldr	r1, [r5, #4]
 800662a:	68aa      	ldr	r2, [r5, #8]
 800662c:	68eb      	ldr	r3, [r5, #12]
 800662e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006630:	7c2b      	ldrb	r3, [r5, #16]
 8006632:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 8006634:	4a4c      	ldr	r2, [pc, #304]	@ (8006768 <loadMenuTexts+0x888>)
 8006636:	4b4d      	ldr	r3, [pc, #308]	@ (800676c <loadMenuTexts+0x88c>)
 8006638:	4614      	mov	r4, r2
 800663a:	461d      	mov	r5, r3
 800663c:	6828      	ldr	r0, [r5, #0]
 800663e:	6869      	ldr	r1, [r5, #4]
 8006640:	68aa      	ldr	r2, [r5, #8]
 8006642:	68eb      	ldr	r3, [r5, #12]
 8006644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006646:	7c2b      	ldrb	r3, [r5, #16]
 8006648:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 800664a:	4a49      	ldr	r2, [pc, #292]	@ (8006770 <loadMenuTexts+0x890>)
 800664c:	4b49      	ldr	r3, [pc, #292]	@ (8006774 <loadMenuTexts+0x894>)
 800664e:	4614      	mov	r4, r2
 8006650:	461d      	mov	r5, r3
 8006652:	e091      	b.n	8006778 <loadMenuTexts+0x898>
 8006654:	20000460 	.word	0x20000460
 8006658:	20001508 	.word	0x20001508
 800665c:	20000474 	.word	0x20000474
 8006660:	2000151c 	.word	0x2000151c
 8006664:	20000488 	.word	0x20000488
 8006668:	20001530 	.word	0x20001530
 800666c:	2000049c 	.word	0x2000049c
 8006670:	20001544 	.word	0x20001544
 8006674:	200004b0 	.word	0x200004b0
 8006678:	20001558 	.word	0x20001558
 800667c:	200004c4 	.word	0x200004c4
 8006680:	2000156c 	.word	0x2000156c
 8006684:	200004d8 	.word	0x200004d8
 8006688:	20001580 	.word	0x20001580
 800668c:	200004ec 	.word	0x200004ec
 8006690:	20001594 	.word	0x20001594
 8006694:	20000500 	.word	0x20000500
 8006698:	200015a8 	.word	0x200015a8
 800669c:	20000514 	.word	0x20000514
 80066a0:	200015bc 	.word	0x200015bc
 80066a4:	20000528 	.word	0x20000528
 80066a8:	200015d0 	.word	0x200015d0
 80066ac:	2000053c 	.word	0x2000053c
 80066b0:	200015e4 	.word	0x200015e4
 80066b4:	20000550 	.word	0x20000550
 80066b8:	200015f8 	.word	0x200015f8
 80066bc:	20000564 	.word	0x20000564
 80066c0:	2000160c 	.word	0x2000160c
 80066c4:	20000578 	.word	0x20000578
 80066c8:	20001620 	.word	0x20001620
 80066cc:	2000058c 	.word	0x2000058c
 80066d0:	20001634 	.word	0x20001634
 80066d4:	200005a0 	.word	0x200005a0
 80066d8:	20001648 	.word	0x20001648
 80066dc:	200005b4 	.word	0x200005b4
 80066e0:	2000165c 	.word	0x2000165c
 80066e4:	200005c8 	.word	0x200005c8
 80066e8:	20001670 	.word	0x20001670
 80066ec:	200005dc 	.word	0x200005dc
 80066f0:	20001684 	.word	0x20001684
 80066f4:	200005f0 	.word	0x200005f0
 80066f8:	20001698 	.word	0x20001698
 80066fc:	20000604 	.word	0x20000604
 8006700:	200016ac 	.word	0x200016ac
 8006704:	20000618 	.word	0x20000618
 8006708:	200016c0 	.word	0x200016c0
 800670c:	2000062c 	.word	0x2000062c
 8006710:	200016d4 	.word	0x200016d4
 8006714:	20000640 	.word	0x20000640
 8006718:	200016e8 	.word	0x200016e8
 800671c:	20000654 	.word	0x20000654
 8006720:	200016fc 	.word	0x200016fc
 8006724:	20000668 	.word	0x20000668
 8006728:	20001710 	.word	0x20001710
 800672c:	2000067c 	.word	0x2000067c
 8006730:	20001724 	.word	0x20001724
 8006734:	20000690 	.word	0x20000690
 8006738:	20001738 	.word	0x20001738
 800673c:	200006a4 	.word	0x200006a4
 8006740:	2000174c 	.word	0x2000174c
 8006744:	200006b8 	.word	0x200006b8
 8006748:	20001760 	.word	0x20001760
 800674c:	200006cc 	.word	0x200006cc
 8006750:	20001774 	.word	0x20001774
 8006754:	200006e0 	.word	0x200006e0
 8006758:	20001788 	.word	0x20001788
 800675c:	200006f4 	.word	0x200006f4
 8006760:	2000179c 	.word	0x2000179c
 8006764:	20000c80 	.word	0x20000c80
 8006768:	200017b0 	.word	0x200017b0
 800676c:	20000c94 	.word	0x20000c94
 8006770:	200017c4 	.word	0x200017c4
 8006774:	20000ca8 	.word	0x20000ca8
 8006778:	6828      	ldr	r0, [r5, #0]
 800677a:	6869      	ldr	r1, [r5, #4]
 800677c:	68aa      	ldr	r2, [r5, #8]
 800677e:	68eb      	ldr	r3, [r5, #12]
 8006780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006782:	7c2b      	ldrb	r3, [r5, #16]
 8006784:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 8006786:	4a59      	ldr	r2, [pc, #356]	@ (80068ec <loadMenuTexts+0xa0c>)
 8006788:	4b59      	ldr	r3, [pc, #356]	@ (80068f0 <loadMenuTexts+0xa10>)
 800678a:	4614      	mov	r4, r2
 800678c:	461d      	mov	r5, r3
 800678e:	6828      	ldr	r0, [r5, #0]
 8006790:	6869      	ldr	r1, [r5, #4]
 8006792:	68aa      	ldr	r2, [r5, #8]
 8006794:	68eb      	ldr	r3, [r5, #12]
 8006796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006798:	7c2b      	ldrb	r3, [r5, #16]
 800679a:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 800679c:	4a55      	ldr	r2, [pc, #340]	@ (80068f4 <loadMenuTexts+0xa14>)
 800679e:	4b56      	ldr	r3, [pc, #344]	@ (80068f8 <loadMenuTexts+0xa18>)
 80067a0:	4614      	mov	r4, r2
 80067a2:	461d      	mov	r5, r3
 80067a4:	6828      	ldr	r0, [r5, #0]
 80067a6:	6869      	ldr	r1, [r5, #4]
 80067a8:	68aa      	ldr	r2, [r5, #8]
 80067aa:	68eb      	ldr	r3, [r5, #12]
 80067ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067ae:	7c2b      	ldrb	r3, [r5, #16]
 80067b0:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 80067b2:	4a52      	ldr	r2, [pc, #328]	@ (80068fc <loadMenuTexts+0xa1c>)
 80067b4:	4b52      	ldr	r3, [pc, #328]	@ (8006900 <loadMenuTexts+0xa20>)
 80067b6:	4614      	mov	r4, r2
 80067b8:	461d      	mov	r5, r3
 80067ba:	6828      	ldr	r0, [r5, #0]
 80067bc:	6869      	ldr	r1, [r5, #4]
 80067be:	68aa      	ldr	r2, [r5, #8]
 80067c0:	68eb      	ldr	r3, [r5, #12]
 80067c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067c4:	7c2b      	ldrb	r3, [r5, #16]
 80067c6:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 80067c8:	4a4e      	ldr	r2, [pc, #312]	@ (8006904 <loadMenuTexts+0xa24>)
 80067ca:	4b4f      	ldr	r3, [pc, #316]	@ (8006908 <loadMenuTexts+0xa28>)
 80067cc:	4614      	mov	r4, r2
 80067ce:	461d      	mov	r5, r3
 80067d0:	6828      	ldr	r0, [r5, #0]
 80067d2:	6869      	ldr	r1, [r5, #4]
 80067d4:	68aa      	ldr	r2, [r5, #8]
 80067d6:	68eb      	ldr	r3, [r5, #12]
 80067d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067da:	7c2b      	ldrb	r3, [r5, #16]
 80067dc:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 80067de:	4a4b      	ldr	r2, [pc, #300]	@ (800690c <loadMenuTexts+0xa2c>)
 80067e0:	4b4b      	ldr	r3, [pc, #300]	@ (8006910 <loadMenuTexts+0xa30>)
 80067e2:	4614      	mov	r4, r2
 80067e4:	461d      	mov	r5, r3
 80067e6:	6828      	ldr	r0, [r5, #0]
 80067e8:	6869      	ldr	r1, [r5, #4]
 80067ea:	68aa      	ldr	r2, [r5, #8]
 80067ec:	68eb      	ldr	r3, [r5, #12]
 80067ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067f0:	7c2b      	ldrb	r3, [r5, #16]
 80067f2:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 80067f4:	4a47      	ldr	r2, [pc, #284]	@ (8006914 <loadMenuTexts+0xa34>)
 80067f6:	4b48      	ldr	r3, [pc, #288]	@ (8006918 <loadMenuTexts+0xa38>)
 80067f8:	4614      	mov	r4, r2
 80067fa:	461d      	mov	r5, r3
 80067fc:	6828      	ldr	r0, [r5, #0]
 80067fe:	6869      	ldr	r1, [r5, #4]
 8006800:	68aa      	ldr	r2, [r5, #8]
 8006802:	68eb      	ldr	r3, [r5, #12]
 8006804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006806:	7c2b      	ldrb	r3, [r5, #16]
 8006808:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 800680a:	4a44      	ldr	r2, [pc, #272]	@ (800691c <loadMenuTexts+0xa3c>)
 800680c:	4b44      	ldr	r3, [pc, #272]	@ (8006920 <loadMenuTexts+0xa40>)
 800680e:	4614      	mov	r4, r2
 8006810:	461d      	mov	r5, r3
 8006812:	6828      	ldr	r0, [r5, #0]
 8006814:	6869      	ldr	r1, [r5, #4]
 8006816:	68aa      	ldr	r2, [r5, #8]
 8006818:	68eb      	ldr	r3, [r5, #12]
 800681a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800681c:	7c2b      	ldrb	r3, [r5, #16]
 800681e:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8006820:	4a40      	ldr	r2, [pc, #256]	@ (8006924 <loadMenuTexts+0xa44>)
 8006822:	4b41      	ldr	r3, [pc, #260]	@ (8006928 <loadMenuTexts+0xa48>)
 8006824:	4614      	mov	r4, r2
 8006826:	461d      	mov	r5, r3
 8006828:	6828      	ldr	r0, [r5, #0]
 800682a:	6869      	ldr	r1, [r5, #4]
 800682c:	68aa      	ldr	r2, [r5, #8]
 800682e:	68eb      	ldr	r3, [r5, #12]
 8006830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006832:	7c2b      	ldrb	r3, [r5, #16]
 8006834:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 8006836:	4a3d      	ldr	r2, [pc, #244]	@ (800692c <loadMenuTexts+0xa4c>)
 8006838:	4b3d      	ldr	r3, [pc, #244]	@ (8006930 <loadMenuTexts+0xa50>)
 800683a:	4614      	mov	r4, r2
 800683c:	461d      	mov	r5, r3
 800683e:	6828      	ldr	r0, [r5, #0]
 8006840:	6869      	ldr	r1, [r5, #4]
 8006842:	68aa      	ldr	r2, [r5, #8]
 8006844:	68eb      	ldr	r3, [r5, #12]
 8006846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006848:	7c2b      	ldrb	r3, [r5, #16]
 800684a:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 800684c:	4a39      	ldr	r2, [pc, #228]	@ (8006934 <loadMenuTexts+0xa54>)
 800684e:	4b3a      	ldr	r3, [pc, #232]	@ (8006938 <loadMenuTexts+0xa58>)
 8006850:	4614      	mov	r4, r2
 8006852:	461d      	mov	r5, r3
 8006854:	6828      	ldr	r0, [r5, #0]
 8006856:	6869      	ldr	r1, [r5, #4]
 8006858:	68aa      	ldr	r2, [r5, #8]
 800685a:	68eb      	ldr	r3, [r5, #12]
 800685c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800685e:	7c2b      	ldrb	r3, [r5, #16]
 8006860:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 8006862:	4a36      	ldr	r2, [pc, #216]	@ (800693c <loadMenuTexts+0xa5c>)
 8006864:	4b36      	ldr	r3, [pc, #216]	@ (8006940 <loadMenuTexts+0xa60>)
 8006866:	4614      	mov	r4, r2
 8006868:	461d      	mov	r5, r3
 800686a:	6828      	ldr	r0, [r5, #0]
 800686c:	6869      	ldr	r1, [r5, #4]
 800686e:	68aa      	ldr	r2, [r5, #8]
 8006870:	68eb      	ldr	r3, [r5, #12]
 8006872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006874:	7c2b      	ldrb	r3, [r5, #16]
 8006876:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8006878:	4a32      	ldr	r2, [pc, #200]	@ (8006944 <loadMenuTexts+0xa64>)
 800687a:	4b33      	ldr	r3, [pc, #204]	@ (8006948 <loadMenuTexts+0xa68>)
 800687c:	4614      	mov	r4, r2
 800687e:	461d      	mov	r5, r3
 8006880:	6828      	ldr	r0, [r5, #0]
 8006882:	6869      	ldr	r1, [r5, #4]
 8006884:	68aa      	ldr	r2, [r5, #8]
 8006886:	68eb      	ldr	r3, [r5, #12]
 8006888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800688a:	7c2b      	ldrb	r3, [r5, #16]
 800688c:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 800688e:	4a2f      	ldr	r2, [pc, #188]	@ (800694c <loadMenuTexts+0xa6c>)
 8006890:	4b2f      	ldr	r3, [pc, #188]	@ (8006950 <loadMenuTexts+0xa70>)
 8006892:	4614      	mov	r4, r2
 8006894:	461d      	mov	r5, r3
 8006896:	6828      	ldr	r0, [r5, #0]
 8006898:	6869      	ldr	r1, [r5, #4]
 800689a:	68aa      	ldr	r2, [r5, #8]
 800689c:	68eb      	ldr	r3, [r5, #12]
 800689e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068a0:	7c2b      	ldrb	r3, [r5, #16]
 80068a2:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 80068a4:	4a2b      	ldr	r2, [pc, #172]	@ (8006954 <loadMenuTexts+0xa74>)
 80068a6:	4b2c      	ldr	r3, [pc, #176]	@ (8006958 <loadMenuTexts+0xa78>)
 80068a8:	4614      	mov	r4, r2
 80068aa:	461d      	mov	r5, r3
 80068ac:	6828      	ldr	r0, [r5, #0]
 80068ae:	6869      	ldr	r1, [r5, #4]
 80068b0:	68aa      	ldr	r2, [r5, #8]
 80068b2:	68eb      	ldr	r3, [r5, #12]
 80068b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068b6:	7c2b      	ldrb	r3, [r5, #16]
 80068b8:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 80068ba:	4a28      	ldr	r2, [pc, #160]	@ (800695c <loadMenuTexts+0xa7c>)
 80068bc:	4b28      	ldr	r3, [pc, #160]	@ (8006960 <loadMenuTexts+0xa80>)
 80068be:	4614      	mov	r4, r2
 80068c0:	461d      	mov	r5, r3
 80068c2:	6828      	ldr	r0, [r5, #0]
 80068c4:	6869      	ldr	r1, [r5, #4]
 80068c6:	68aa      	ldr	r2, [r5, #8]
 80068c8:	68eb      	ldr	r3, [r5, #12]
 80068ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068cc:	7c2b      	ldrb	r3, [r5, #16]
 80068ce:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 80068d0:	4a24      	ldr	r2, [pc, #144]	@ (8006964 <loadMenuTexts+0xa84>)
 80068d2:	4b25      	ldr	r3, [pc, #148]	@ (8006968 <loadMenuTexts+0xa88>)
 80068d4:	4614      	mov	r4, r2
 80068d6:	461d      	mov	r5, r3
 80068d8:	6828      	ldr	r0, [r5, #0]
 80068da:	6869      	ldr	r1, [r5, #4]
 80068dc:	68aa      	ldr	r2, [r5, #8]
 80068de:	68eb      	ldr	r3, [r5, #12]
 80068e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068e2:	7c2b      	ldrb	r3, [r5, #16]
 80068e4:	7023      	strb	r3, [r4, #0]
 80068e6:	f000 bd3a 	b.w	800735e <loadMenuTexts+0x147e>
 80068ea:	bf00      	nop
 80068ec:	200017d8 	.word	0x200017d8
 80068f0:	20000cbc 	.word	0x20000cbc
 80068f4:	200017ec 	.word	0x200017ec
 80068f8:	20000d20 	.word	0x20000d20
 80068fc:	20001800 	.word	0x20001800
 8006900:	20000d34 	.word	0x20000d34
 8006904:	20001814 	.word	0x20001814
 8006908:	20000d70 	.word	0x20000d70
 800690c:	20001828 	.word	0x20001828
 8006910:	20000d84 	.word	0x20000d84
 8006914:	2000183c 	.word	0x2000183c
 8006918:	20000dc0 	.word	0x20000dc0
 800691c:	20001850 	.word	0x20001850
 8006920:	20000dd4 	.word	0x20000dd4
 8006924:	20001864 	.word	0x20001864
 8006928:	20000e10 	.word	0x20000e10
 800692c:	20001878 	.word	0x20001878
 8006930:	20000e38 	.word	0x20000e38
 8006934:	2000188c 	.word	0x2000188c
 8006938:	20000e60 	.word	0x20000e60
 800693c:	200018a0 	.word	0x200018a0
 8006940:	20000e88 	.word	0x20000e88
 8006944:	200018b4 	.word	0x200018b4
 8006948:	20000eb0 	.word	0x20000eb0
 800694c:	200018c8 	.word	0x200018c8
 8006950:	20000ed8 	.word	0x20000ed8
 8006954:	200018dc 	.word	0x200018dc
 8006958:	20000f00 	.word	0x20000f00
 800695c:	200018f0 	.word	0x200018f0
 8006960:	20000f28 	.word	0x20000f28
 8006964:	20001904 	.word	0x20001904
 8006968:	20000f50 	.word	0x20000f50
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 800696c:	4ac6      	ldr	r2, [pc, #792]	@ (8006c88 <loadMenuTexts+0xda8>)
 800696e:	4bc7      	ldr	r3, [pc, #796]	@ (8006c8c <loadMenuTexts+0xdac>)
 8006970:	4614      	mov	r4, r2
 8006972:	461d      	mov	r5, r3
 8006974:	6828      	ldr	r0, [r5, #0]
 8006976:	6869      	ldr	r1, [r5, #4]
 8006978:	68aa      	ldr	r2, [r5, #8]
 800697a:	68eb      	ldr	r3, [r5, #12]
 800697c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800697e:	7c2b      	ldrb	r3, [r5, #16]
 8006980:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8006982:	4ac3      	ldr	r2, [pc, #780]	@ (8006c90 <loadMenuTexts+0xdb0>)
 8006984:	4bc3      	ldr	r3, [pc, #780]	@ (8006c94 <loadMenuTexts+0xdb4>)
 8006986:	4614      	mov	r4, r2
 8006988:	461d      	mov	r5, r3
 800698a:	6828      	ldr	r0, [r5, #0]
 800698c:	6869      	ldr	r1, [r5, #4]
 800698e:	68aa      	ldr	r2, [r5, #8]
 8006990:	68eb      	ldr	r3, [r5, #12]
 8006992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006994:	7c2b      	ldrb	r3, [r5, #16]
 8006996:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8006998:	4abf      	ldr	r2, [pc, #764]	@ (8006c98 <loadMenuTexts+0xdb8>)
 800699a:	4bc0      	ldr	r3, [pc, #768]	@ (8006c9c <loadMenuTexts+0xdbc>)
 800699c:	4614      	mov	r4, r2
 800699e:	461d      	mov	r5, r3
 80069a0:	6828      	ldr	r0, [r5, #0]
 80069a2:	6869      	ldr	r1, [r5, #4]
 80069a4:	68aa      	ldr	r2, [r5, #8]
 80069a6:	68eb      	ldr	r3, [r5, #12]
 80069a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069aa:	7c2b      	ldrb	r3, [r5, #16]
 80069ac:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 80069ae:	4abc      	ldr	r2, [pc, #752]	@ (8006ca0 <loadMenuTexts+0xdc0>)
 80069b0:	4bbc      	ldr	r3, [pc, #752]	@ (8006ca4 <loadMenuTexts+0xdc4>)
 80069b2:	4614      	mov	r4, r2
 80069b4:	461d      	mov	r5, r3
 80069b6:	6828      	ldr	r0, [r5, #0]
 80069b8:	6869      	ldr	r1, [r5, #4]
 80069ba:	68aa      	ldr	r2, [r5, #8]
 80069bc:	68eb      	ldr	r3, [r5, #12]
 80069be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069c0:	7c2b      	ldrb	r3, [r5, #16]
 80069c2:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 80069c4:	4ab8      	ldr	r2, [pc, #736]	@ (8006ca8 <loadMenuTexts+0xdc8>)
 80069c6:	4bb9      	ldr	r3, [pc, #740]	@ (8006cac <loadMenuTexts+0xdcc>)
 80069c8:	4614      	mov	r4, r2
 80069ca:	461d      	mov	r5, r3
 80069cc:	6828      	ldr	r0, [r5, #0]
 80069ce:	6869      	ldr	r1, [r5, #4]
 80069d0:	68aa      	ldr	r2, [r5, #8]
 80069d2:	68eb      	ldr	r3, [r5, #12]
 80069d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069d6:	7c2b      	ldrb	r3, [r5, #16]
 80069d8:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 80069da:	4ab5      	ldr	r2, [pc, #724]	@ (8006cb0 <loadMenuTexts+0xdd0>)
 80069dc:	4bb5      	ldr	r3, [pc, #724]	@ (8006cb4 <loadMenuTexts+0xdd4>)
 80069de:	4614      	mov	r4, r2
 80069e0:	461d      	mov	r5, r3
 80069e2:	6828      	ldr	r0, [r5, #0]
 80069e4:	6869      	ldr	r1, [r5, #4]
 80069e6:	68aa      	ldr	r2, [r5, #8]
 80069e8:	68eb      	ldr	r3, [r5, #12]
 80069ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069ec:	7c2b      	ldrb	r3, [r5, #16]
 80069ee:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 80069f0:	4ab1      	ldr	r2, [pc, #708]	@ (8006cb8 <loadMenuTexts+0xdd8>)
 80069f2:	4bb2      	ldr	r3, [pc, #712]	@ (8006cbc <loadMenuTexts+0xddc>)
 80069f4:	4614      	mov	r4, r2
 80069f6:	461d      	mov	r5, r3
 80069f8:	6828      	ldr	r0, [r5, #0]
 80069fa:	6869      	ldr	r1, [r5, #4]
 80069fc:	68aa      	ldr	r2, [r5, #8]
 80069fe:	68eb      	ldr	r3, [r5, #12]
 8006a00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a02:	7c2b      	ldrb	r3, [r5, #16]
 8006a04:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8006a06:	4aae      	ldr	r2, [pc, #696]	@ (8006cc0 <loadMenuTexts+0xde0>)
 8006a08:	4bae      	ldr	r3, [pc, #696]	@ (8006cc4 <loadMenuTexts+0xde4>)
 8006a0a:	4614      	mov	r4, r2
 8006a0c:	461d      	mov	r5, r3
 8006a0e:	6828      	ldr	r0, [r5, #0]
 8006a10:	6869      	ldr	r1, [r5, #4]
 8006a12:	68aa      	ldr	r2, [r5, #8]
 8006a14:	68eb      	ldr	r3, [r5, #12]
 8006a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a18:	7c2b      	ldrb	r3, [r5, #16]
 8006a1a:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8006a1c:	4aaa      	ldr	r2, [pc, #680]	@ (8006cc8 <loadMenuTexts+0xde8>)
 8006a1e:	4bab      	ldr	r3, [pc, #684]	@ (8006ccc <loadMenuTexts+0xdec>)
 8006a20:	4614      	mov	r4, r2
 8006a22:	461d      	mov	r5, r3
 8006a24:	6828      	ldr	r0, [r5, #0]
 8006a26:	6869      	ldr	r1, [r5, #4]
 8006a28:	68aa      	ldr	r2, [r5, #8]
 8006a2a:	68eb      	ldr	r3, [r5, #12]
 8006a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a2e:	7c2b      	ldrb	r3, [r5, #16]
 8006a30:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8006a32:	4aa7      	ldr	r2, [pc, #668]	@ (8006cd0 <loadMenuTexts+0xdf0>)
 8006a34:	4ba7      	ldr	r3, [pc, #668]	@ (8006cd4 <loadMenuTexts+0xdf4>)
 8006a36:	4614      	mov	r4, r2
 8006a38:	461d      	mov	r5, r3
 8006a3a:	6828      	ldr	r0, [r5, #0]
 8006a3c:	6869      	ldr	r1, [r5, #4]
 8006a3e:	68aa      	ldr	r2, [r5, #8]
 8006a40:	68eb      	ldr	r3, [r5, #12]
 8006a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a44:	7c2b      	ldrb	r3, [r5, #16]
 8006a46:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8006a48:	4aa3      	ldr	r2, [pc, #652]	@ (8006cd8 <loadMenuTexts+0xdf8>)
 8006a4a:	4ba4      	ldr	r3, [pc, #656]	@ (8006cdc <loadMenuTexts+0xdfc>)
 8006a4c:	4614      	mov	r4, r2
 8006a4e:	461d      	mov	r5, r3
 8006a50:	6828      	ldr	r0, [r5, #0]
 8006a52:	6869      	ldr	r1, [r5, #4]
 8006a54:	68aa      	ldr	r2, [r5, #8]
 8006a56:	68eb      	ldr	r3, [r5, #12]
 8006a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a5a:	7c2b      	ldrb	r3, [r5, #16]
 8006a5c:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8006a5e:	4aa0      	ldr	r2, [pc, #640]	@ (8006ce0 <loadMenuTexts+0xe00>)
 8006a60:	4ba0      	ldr	r3, [pc, #640]	@ (8006ce4 <loadMenuTexts+0xe04>)
 8006a62:	4614      	mov	r4, r2
 8006a64:	461d      	mov	r5, r3
 8006a66:	6828      	ldr	r0, [r5, #0]
 8006a68:	6869      	ldr	r1, [r5, #4]
 8006a6a:	68aa      	ldr	r2, [r5, #8]
 8006a6c:	68eb      	ldr	r3, [r5, #12]
 8006a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a70:	7c2b      	ldrb	r3, [r5, #16]
 8006a72:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8006a74:	4a9c      	ldr	r2, [pc, #624]	@ (8006ce8 <loadMenuTexts+0xe08>)
 8006a76:	4b9d      	ldr	r3, [pc, #628]	@ (8006cec <loadMenuTexts+0xe0c>)
 8006a78:	4614      	mov	r4, r2
 8006a7a:	461d      	mov	r5, r3
 8006a7c:	6828      	ldr	r0, [r5, #0]
 8006a7e:	6869      	ldr	r1, [r5, #4]
 8006a80:	68aa      	ldr	r2, [r5, #8]
 8006a82:	68eb      	ldr	r3, [r5, #12]
 8006a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a86:	7c2b      	ldrb	r3, [r5, #16]
 8006a88:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8006a8a:	4a99      	ldr	r2, [pc, #612]	@ (8006cf0 <loadMenuTexts+0xe10>)
 8006a8c:	4b99      	ldr	r3, [pc, #612]	@ (8006cf4 <loadMenuTexts+0xe14>)
 8006a8e:	4614      	mov	r4, r2
 8006a90:	461d      	mov	r5, r3
 8006a92:	6828      	ldr	r0, [r5, #0]
 8006a94:	6869      	ldr	r1, [r5, #4]
 8006a96:	68aa      	ldr	r2, [r5, #8]
 8006a98:	68eb      	ldr	r3, [r5, #12]
 8006a9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a9c:	7c2b      	ldrb	r3, [r5, #16]
 8006a9e:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8006aa0:	4a95      	ldr	r2, [pc, #596]	@ (8006cf8 <loadMenuTexts+0xe18>)
 8006aa2:	4b96      	ldr	r3, [pc, #600]	@ (8006cfc <loadMenuTexts+0xe1c>)
 8006aa4:	4614      	mov	r4, r2
 8006aa6:	461d      	mov	r5, r3
 8006aa8:	6828      	ldr	r0, [r5, #0]
 8006aaa:	6869      	ldr	r1, [r5, #4]
 8006aac:	68aa      	ldr	r2, [r5, #8]
 8006aae:	68eb      	ldr	r3, [r5, #12]
 8006ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ab2:	7c2b      	ldrb	r3, [r5, #16]
 8006ab4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8006ab6:	4a92      	ldr	r2, [pc, #584]	@ (8006d00 <loadMenuTexts+0xe20>)
 8006ab8:	4b92      	ldr	r3, [pc, #584]	@ (8006d04 <loadMenuTexts+0xe24>)
 8006aba:	4614      	mov	r4, r2
 8006abc:	461d      	mov	r5, r3
 8006abe:	6828      	ldr	r0, [r5, #0]
 8006ac0:	6869      	ldr	r1, [r5, #4]
 8006ac2:	68aa      	ldr	r2, [r5, #8]
 8006ac4:	68eb      	ldr	r3, [r5, #12]
 8006ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ac8:	7c2b      	ldrb	r3, [r5, #16]
 8006aca:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8006acc:	4a8e      	ldr	r2, [pc, #568]	@ (8006d08 <loadMenuTexts+0xe28>)
 8006ace:	4b8f      	ldr	r3, [pc, #572]	@ (8006d0c <loadMenuTexts+0xe2c>)
 8006ad0:	4614      	mov	r4, r2
 8006ad2:	461d      	mov	r5, r3
 8006ad4:	6828      	ldr	r0, [r5, #0]
 8006ad6:	6869      	ldr	r1, [r5, #4]
 8006ad8:	68aa      	ldr	r2, [r5, #8]
 8006ada:	68eb      	ldr	r3, [r5, #12]
 8006adc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ade:	7c2b      	ldrb	r3, [r5, #16]
 8006ae0:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8006ae2:	4a8b      	ldr	r2, [pc, #556]	@ (8006d10 <loadMenuTexts+0xe30>)
 8006ae4:	4b8b      	ldr	r3, [pc, #556]	@ (8006d14 <loadMenuTexts+0xe34>)
 8006ae6:	4614      	mov	r4, r2
 8006ae8:	461d      	mov	r5, r3
 8006aea:	6828      	ldr	r0, [r5, #0]
 8006aec:	6869      	ldr	r1, [r5, #4]
 8006aee:	68aa      	ldr	r2, [r5, #8]
 8006af0:	68eb      	ldr	r3, [r5, #12]
 8006af2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006af4:	7c2b      	ldrb	r3, [r5, #16]
 8006af6:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8006af8:	4a87      	ldr	r2, [pc, #540]	@ (8006d18 <loadMenuTexts+0xe38>)
 8006afa:	4b88      	ldr	r3, [pc, #544]	@ (8006d1c <loadMenuTexts+0xe3c>)
 8006afc:	4614      	mov	r4, r2
 8006afe:	461d      	mov	r5, r3
 8006b00:	6828      	ldr	r0, [r5, #0]
 8006b02:	6869      	ldr	r1, [r5, #4]
 8006b04:	68aa      	ldr	r2, [r5, #8]
 8006b06:	68eb      	ldr	r3, [r5, #12]
 8006b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b0a:	7c2b      	ldrb	r3, [r5, #16]
 8006b0c:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8006b0e:	4a84      	ldr	r2, [pc, #528]	@ (8006d20 <loadMenuTexts+0xe40>)
 8006b10:	4b84      	ldr	r3, [pc, #528]	@ (8006d24 <loadMenuTexts+0xe44>)
 8006b12:	4614      	mov	r4, r2
 8006b14:	461d      	mov	r5, r3
 8006b16:	6828      	ldr	r0, [r5, #0]
 8006b18:	6869      	ldr	r1, [r5, #4]
 8006b1a:	68aa      	ldr	r2, [r5, #8]
 8006b1c:	68eb      	ldr	r3, [r5, #12]
 8006b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b20:	7c2b      	ldrb	r3, [r5, #16]
 8006b22:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8006b24:	4a80      	ldr	r2, [pc, #512]	@ (8006d28 <loadMenuTexts+0xe48>)
 8006b26:	4b81      	ldr	r3, [pc, #516]	@ (8006d2c <loadMenuTexts+0xe4c>)
 8006b28:	4614      	mov	r4, r2
 8006b2a:	461d      	mov	r5, r3
 8006b2c:	6828      	ldr	r0, [r5, #0]
 8006b2e:	6869      	ldr	r1, [r5, #4]
 8006b30:	68aa      	ldr	r2, [r5, #8]
 8006b32:	68eb      	ldr	r3, [r5, #12]
 8006b34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b36:	7c2b      	ldrb	r3, [r5, #16]
 8006b38:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8006b3a:	4a7d      	ldr	r2, [pc, #500]	@ (8006d30 <loadMenuTexts+0xe50>)
 8006b3c:	4b7d      	ldr	r3, [pc, #500]	@ (8006d34 <loadMenuTexts+0xe54>)
 8006b3e:	4614      	mov	r4, r2
 8006b40:	461d      	mov	r5, r3
 8006b42:	6828      	ldr	r0, [r5, #0]
 8006b44:	6869      	ldr	r1, [r5, #4]
 8006b46:	68aa      	ldr	r2, [r5, #8]
 8006b48:	68eb      	ldr	r3, [r5, #12]
 8006b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b4c:	7c2b      	ldrb	r3, [r5, #16]
 8006b4e:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8006b50:	4a79      	ldr	r2, [pc, #484]	@ (8006d38 <loadMenuTexts+0xe58>)
 8006b52:	4b7a      	ldr	r3, [pc, #488]	@ (8006d3c <loadMenuTexts+0xe5c>)
 8006b54:	4614      	mov	r4, r2
 8006b56:	461d      	mov	r5, r3
 8006b58:	6828      	ldr	r0, [r5, #0]
 8006b5a:	6869      	ldr	r1, [r5, #4]
 8006b5c:	68aa      	ldr	r2, [r5, #8]
 8006b5e:	68eb      	ldr	r3, [r5, #12]
 8006b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b62:	7c2b      	ldrb	r3, [r5, #16]
 8006b64:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8006b66:	4a76      	ldr	r2, [pc, #472]	@ (8006d40 <loadMenuTexts+0xe60>)
 8006b68:	4b76      	ldr	r3, [pc, #472]	@ (8006d44 <loadMenuTexts+0xe64>)
 8006b6a:	4614      	mov	r4, r2
 8006b6c:	461d      	mov	r5, r3
 8006b6e:	6828      	ldr	r0, [r5, #0]
 8006b70:	6869      	ldr	r1, [r5, #4]
 8006b72:	68aa      	ldr	r2, [r5, #8]
 8006b74:	68eb      	ldr	r3, [r5, #12]
 8006b76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b78:	7c2b      	ldrb	r3, [r5, #16]
 8006b7a:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8006b7c:	4a72      	ldr	r2, [pc, #456]	@ (8006d48 <loadMenuTexts+0xe68>)
 8006b7e:	4b73      	ldr	r3, [pc, #460]	@ (8006d4c <loadMenuTexts+0xe6c>)
 8006b80:	4614      	mov	r4, r2
 8006b82:	461d      	mov	r5, r3
 8006b84:	6828      	ldr	r0, [r5, #0]
 8006b86:	6869      	ldr	r1, [r5, #4]
 8006b88:	68aa      	ldr	r2, [r5, #8]
 8006b8a:	68eb      	ldr	r3, [r5, #12]
 8006b8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b8e:	7c2b      	ldrb	r3, [r5, #16]
 8006b90:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8006b92:	4a6f      	ldr	r2, [pc, #444]	@ (8006d50 <loadMenuTexts+0xe70>)
 8006b94:	4b6f      	ldr	r3, [pc, #444]	@ (8006d54 <loadMenuTexts+0xe74>)
 8006b96:	4614      	mov	r4, r2
 8006b98:	461d      	mov	r5, r3
 8006b9a:	6828      	ldr	r0, [r5, #0]
 8006b9c:	6869      	ldr	r1, [r5, #4]
 8006b9e:	68aa      	ldr	r2, [r5, #8]
 8006ba0:	68eb      	ldr	r3, [r5, #12]
 8006ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ba4:	7c2b      	ldrb	r3, [r5, #16]
 8006ba6:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8006ba8:	4a6b      	ldr	r2, [pc, #428]	@ (8006d58 <loadMenuTexts+0xe78>)
 8006baa:	4b6c      	ldr	r3, [pc, #432]	@ (8006d5c <loadMenuTexts+0xe7c>)
 8006bac:	4614      	mov	r4, r2
 8006bae:	461d      	mov	r5, r3
 8006bb0:	6828      	ldr	r0, [r5, #0]
 8006bb2:	6869      	ldr	r1, [r5, #4]
 8006bb4:	68aa      	ldr	r2, [r5, #8]
 8006bb6:	68eb      	ldr	r3, [r5, #12]
 8006bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bba:	7c2b      	ldrb	r3, [r5, #16]
 8006bbc:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8006bbe:	4a68      	ldr	r2, [pc, #416]	@ (8006d60 <loadMenuTexts+0xe80>)
 8006bc0:	4b68      	ldr	r3, [pc, #416]	@ (8006d64 <loadMenuTexts+0xe84>)
 8006bc2:	4614      	mov	r4, r2
 8006bc4:	461d      	mov	r5, r3
 8006bc6:	6828      	ldr	r0, [r5, #0]
 8006bc8:	6869      	ldr	r1, [r5, #4]
 8006bca:	68aa      	ldr	r2, [r5, #8]
 8006bcc:	68eb      	ldr	r3, [r5, #12]
 8006bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bd0:	7c2b      	ldrb	r3, [r5, #16]
 8006bd2:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8006bd4:	4a64      	ldr	r2, [pc, #400]	@ (8006d68 <loadMenuTexts+0xe88>)
 8006bd6:	4b65      	ldr	r3, [pc, #404]	@ (8006d6c <loadMenuTexts+0xe8c>)
 8006bd8:	4614      	mov	r4, r2
 8006bda:	461d      	mov	r5, r3
 8006bdc:	6828      	ldr	r0, [r5, #0]
 8006bde:	6869      	ldr	r1, [r5, #4]
 8006be0:	68aa      	ldr	r2, [r5, #8]
 8006be2:	68eb      	ldr	r3, [r5, #12]
 8006be4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006be6:	7c2b      	ldrb	r3, [r5, #16]
 8006be8:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8006bea:	4a61      	ldr	r2, [pc, #388]	@ (8006d70 <loadMenuTexts+0xe90>)
 8006bec:	4b61      	ldr	r3, [pc, #388]	@ (8006d74 <loadMenuTexts+0xe94>)
 8006bee:	4614      	mov	r4, r2
 8006bf0:	461d      	mov	r5, r3
 8006bf2:	6828      	ldr	r0, [r5, #0]
 8006bf4:	6869      	ldr	r1, [r5, #4]
 8006bf6:	68aa      	ldr	r2, [r5, #8]
 8006bf8:	68eb      	ldr	r3, [r5, #12]
 8006bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bfc:	7c2b      	ldrb	r3, [r5, #16]
 8006bfe:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8006c00:	4a5d      	ldr	r2, [pc, #372]	@ (8006d78 <loadMenuTexts+0xe98>)
 8006c02:	4b5e      	ldr	r3, [pc, #376]	@ (8006d7c <loadMenuTexts+0xe9c>)
 8006c04:	4614      	mov	r4, r2
 8006c06:	461d      	mov	r5, r3
 8006c08:	6828      	ldr	r0, [r5, #0]
 8006c0a:	6869      	ldr	r1, [r5, #4]
 8006c0c:	68aa      	ldr	r2, [r5, #8]
 8006c0e:	68eb      	ldr	r3, [r5, #12]
 8006c10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c12:	7c2b      	ldrb	r3, [r5, #16]
 8006c14:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8006c16:	4a5a      	ldr	r2, [pc, #360]	@ (8006d80 <loadMenuTexts+0xea0>)
 8006c18:	4b5a      	ldr	r3, [pc, #360]	@ (8006d84 <loadMenuTexts+0xea4>)
 8006c1a:	4614      	mov	r4, r2
 8006c1c:	461d      	mov	r5, r3
 8006c1e:	6828      	ldr	r0, [r5, #0]
 8006c20:	6869      	ldr	r1, [r5, #4]
 8006c22:	68aa      	ldr	r2, [r5, #8]
 8006c24:	68eb      	ldr	r3, [r5, #12]
 8006c26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c28:	7c2b      	ldrb	r3, [r5, #16]
 8006c2a:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8006c2c:	4a56      	ldr	r2, [pc, #344]	@ (8006d88 <loadMenuTexts+0xea8>)
 8006c2e:	4b57      	ldr	r3, [pc, #348]	@ (8006d8c <loadMenuTexts+0xeac>)
 8006c30:	4614      	mov	r4, r2
 8006c32:	461d      	mov	r5, r3
 8006c34:	6828      	ldr	r0, [r5, #0]
 8006c36:	6869      	ldr	r1, [r5, #4]
 8006c38:	68aa      	ldr	r2, [r5, #8]
 8006c3a:	68eb      	ldr	r3, [r5, #12]
 8006c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c3e:	7c2b      	ldrb	r3, [r5, #16]
 8006c40:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8006c42:	4a53      	ldr	r2, [pc, #332]	@ (8006d90 <loadMenuTexts+0xeb0>)
 8006c44:	4b53      	ldr	r3, [pc, #332]	@ (8006d94 <loadMenuTexts+0xeb4>)
 8006c46:	4614      	mov	r4, r2
 8006c48:	461d      	mov	r5, r3
 8006c4a:	6828      	ldr	r0, [r5, #0]
 8006c4c:	6869      	ldr	r1, [r5, #4]
 8006c4e:	68aa      	ldr	r2, [r5, #8]
 8006c50:	68eb      	ldr	r3, [r5, #12]
 8006c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c54:	7c2b      	ldrb	r3, [r5, #16]
 8006c56:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8006c58:	4a4f      	ldr	r2, [pc, #316]	@ (8006d98 <loadMenuTexts+0xeb8>)
 8006c5a:	4b50      	ldr	r3, [pc, #320]	@ (8006d9c <loadMenuTexts+0xebc>)
 8006c5c:	4614      	mov	r4, r2
 8006c5e:	461d      	mov	r5, r3
 8006c60:	6828      	ldr	r0, [r5, #0]
 8006c62:	6869      	ldr	r1, [r5, #4]
 8006c64:	68aa      	ldr	r2, [r5, #8]
 8006c66:	68eb      	ldr	r3, [r5, #12]
 8006c68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c6a:	7c2b      	ldrb	r3, [r5, #16]
 8006c6c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8006c6e:	4a4c      	ldr	r2, [pc, #304]	@ (8006da0 <loadMenuTexts+0xec0>)
 8006c70:	4b4c      	ldr	r3, [pc, #304]	@ (8006da4 <loadMenuTexts+0xec4>)
 8006c72:	4614      	mov	r4, r2
 8006c74:	461d      	mov	r5, r3
 8006c76:	6828      	ldr	r0, [r5, #0]
 8006c78:	6869      	ldr	r1, [r5, #4]
 8006c7a:	68aa      	ldr	r2, [r5, #8]
 8006c7c:	68eb      	ldr	r3, [r5, #12]
 8006c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c80:	7c2b      	ldrb	r3, [r5, #16]
 8006c82:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8006c84:	4a48      	ldr	r2, [pc, #288]	@ (8006da8 <loadMenuTexts+0xec8>)
 8006c86:	e091      	b.n	8006dac <loadMenuTexts+0xecc>
 8006c88:	20001224 	.word	0x20001224
 8006c8c:	20000708 	.word	0x20000708
 8006c90:	20001238 	.word	0x20001238
 8006c94:	2000071c 	.word	0x2000071c
 8006c98:	2000124c 	.word	0x2000124c
 8006c9c:	20000730 	.word	0x20000730
 8006ca0:	20001260 	.word	0x20001260
 8006ca4:	20000744 	.word	0x20000744
 8006ca8:	20001274 	.word	0x20001274
 8006cac:	20000758 	.word	0x20000758
 8006cb0:	20001288 	.word	0x20001288
 8006cb4:	2000076c 	.word	0x2000076c
 8006cb8:	2000129c 	.word	0x2000129c
 8006cbc:	20000780 	.word	0x20000780
 8006cc0:	200012b0 	.word	0x200012b0
 8006cc4:	20000794 	.word	0x20000794
 8006cc8:	200012c4 	.word	0x200012c4
 8006ccc:	200007a8 	.word	0x200007a8
 8006cd0:	200012d8 	.word	0x200012d8
 8006cd4:	200007bc 	.word	0x200007bc
 8006cd8:	200012ec 	.word	0x200012ec
 8006cdc:	200007d0 	.word	0x200007d0
 8006ce0:	20001300 	.word	0x20001300
 8006ce4:	200007e4 	.word	0x200007e4
 8006ce8:	20001314 	.word	0x20001314
 8006cec:	200007f8 	.word	0x200007f8
 8006cf0:	20001328 	.word	0x20001328
 8006cf4:	2000080c 	.word	0x2000080c
 8006cf8:	2000133c 	.word	0x2000133c
 8006cfc:	20000820 	.word	0x20000820
 8006d00:	20001350 	.word	0x20001350
 8006d04:	20000834 	.word	0x20000834
 8006d08:	20001364 	.word	0x20001364
 8006d0c:	20000848 	.word	0x20000848
 8006d10:	20001378 	.word	0x20001378
 8006d14:	2000085c 	.word	0x2000085c
 8006d18:	2000138c 	.word	0x2000138c
 8006d1c:	20000870 	.word	0x20000870
 8006d20:	200013a0 	.word	0x200013a0
 8006d24:	20000884 	.word	0x20000884
 8006d28:	200013b4 	.word	0x200013b4
 8006d2c:	20000898 	.word	0x20000898
 8006d30:	200013c8 	.word	0x200013c8
 8006d34:	200008ac 	.word	0x200008ac
 8006d38:	200013dc 	.word	0x200013dc
 8006d3c:	200008c0 	.word	0x200008c0
 8006d40:	200013f0 	.word	0x200013f0
 8006d44:	200008d4 	.word	0x200008d4
 8006d48:	20001404 	.word	0x20001404
 8006d4c:	200008e8 	.word	0x200008e8
 8006d50:	20001418 	.word	0x20001418
 8006d54:	200008fc 	.word	0x200008fc
 8006d58:	2000142c 	.word	0x2000142c
 8006d5c:	20000910 	.word	0x20000910
 8006d60:	20001440 	.word	0x20001440
 8006d64:	20000924 	.word	0x20000924
 8006d68:	20001454 	.word	0x20001454
 8006d6c:	20000938 	.word	0x20000938
 8006d70:	20001468 	.word	0x20001468
 8006d74:	2000094c 	.word	0x2000094c
 8006d78:	2000147c 	.word	0x2000147c
 8006d7c:	20000960 	.word	0x20000960
 8006d80:	20001490 	.word	0x20001490
 8006d84:	20000974 	.word	0x20000974
 8006d88:	200014a4 	.word	0x200014a4
 8006d8c:	20000988 	.word	0x20000988
 8006d90:	200014b8 	.word	0x200014b8
 8006d94:	2000099c 	.word	0x2000099c
 8006d98:	200014cc 	.word	0x200014cc
 8006d9c:	200009b0 	.word	0x200009b0
 8006da0:	200014e0 	.word	0x200014e0
 8006da4:	200009c4 	.word	0x200009c4
 8006da8:	200014f4 	.word	0x200014f4
 8006dac:	4bc7      	ldr	r3, [pc, #796]	@ (80070cc <loadMenuTexts+0x11ec>)
 8006dae:	4614      	mov	r4, r2
 8006db0:	461d      	mov	r5, r3
 8006db2:	6828      	ldr	r0, [r5, #0]
 8006db4:	6869      	ldr	r1, [r5, #4]
 8006db6:	68aa      	ldr	r2, [r5, #8]
 8006db8:	68eb      	ldr	r3, [r5, #12]
 8006dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dbc:	7c2b      	ldrb	r3, [r5, #16]
 8006dbe:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8006dc0:	4ac3      	ldr	r2, [pc, #780]	@ (80070d0 <loadMenuTexts+0x11f0>)
 8006dc2:	4bc4      	ldr	r3, [pc, #784]	@ (80070d4 <loadMenuTexts+0x11f4>)
 8006dc4:	4614      	mov	r4, r2
 8006dc6:	461d      	mov	r5, r3
 8006dc8:	6828      	ldr	r0, [r5, #0]
 8006dca:	6869      	ldr	r1, [r5, #4]
 8006dcc:	68aa      	ldr	r2, [r5, #8]
 8006dce:	68eb      	ldr	r3, [r5, #12]
 8006dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dd2:	7c2b      	ldrb	r3, [r5, #16]
 8006dd4:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8006dd6:	4ac0      	ldr	r2, [pc, #768]	@ (80070d8 <loadMenuTexts+0x11f8>)
 8006dd8:	4bc0      	ldr	r3, [pc, #768]	@ (80070dc <loadMenuTexts+0x11fc>)
 8006dda:	4614      	mov	r4, r2
 8006ddc:	461d      	mov	r5, r3
 8006dde:	6828      	ldr	r0, [r5, #0]
 8006de0:	6869      	ldr	r1, [r5, #4]
 8006de2:	68aa      	ldr	r2, [r5, #8]
 8006de4:	68eb      	ldr	r3, [r5, #12]
 8006de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006de8:	7c2b      	ldrb	r3, [r5, #16]
 8006dea:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8006dec:	4abc      	ldr	r2, [pc, #752]	@ (80070e0 <loadMenuTexts+0x1200>)
 8006dee:	4bbd      	ldr	r3, [pc, #756]	@ (80070e4 <loadMenuTexts+0x1204>)
 8006df0:	4614      	mov	r4, r2
 8006df2:	461d      	mov	r5, r3
 8006df4:	6828      	ldr	r0, [r5, #0]
 8006df6:	6869      	ldr	r1, [r5, #4]
 8006df8:	68aa      	ldr	r2, [r5, #8]
 8006dfa:	68eb      	ldr	r3, [r5, #12]
 8006dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dfe:	7c2b      	ldrb	r3, [r5, #16]
 8006e00:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 8006e02:	4ab9      	ldr	r2, [pc, #740]	@ (80070e8 <loadMenuTexts+0x1208>)
 8006e04:	4bb9      	ldr	r3, [pc, #740]	@ (80070ec <loadMenuTexts+0x120c>)
 8006e06:	4614      	mov	r4, r2
 8006e08:	461d      	mov	r5, r3
 8006e0a:	6828      	ldr	r0, [r5, #0]
 8006e0c:	6869      	ldr	r1, [r5, #4]
 8006e0e:	68aa      	ldr	r2, [r5, #8]
 8006e10:	68eb      	ldr	r3, [r5, #12]
 8006e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e14:	7c2b      	ldrb	r3, [r5, #16]
 8006e16:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8006e18:	4ab5      	ldr	r2, [pc, #724]	@ (80070f0 <loadMenuTexts+0x1210>)
 8006e1a:	4bb6      	ldr	r3, [pc, #728]	@ (80070f4 <loadMenuTexts+0x1214>)
 8006e1c:	4614      	mov	r4, r2
 8006e1e:	461d      	mov	r5, r3
 8006e20:	6828      	ldr	r0, [r5, #0]
 8006e22:	6869      	ldr	r1, [r5, #4]
 8006e24:	68aa      	ldr	r2, [r5, #8]
 8006e26:	68eb      	ldr	r3, [r5, #12]
 8006e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e2a:	7c2b      	ldrb	r3, [r5, #16]
 8006e2c:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 8006e2e:	4ab2      	ldr	r2, [pc, #712]	@ (80070f8 <loadMenuTexts+0x1218>)
 8006e30:	4bb2      	ldr	r3, [pc, #712]	@ (80070fc <loadMenuTexts+0x121c>)
 8006e32:	4614      	mov	r4, r2
 8006e34:	461d      	mov	r5, r3
 8006e36:	6828      	ldr	r0, [r5, #0]
 8006e38:	6869      	ldr	r1, [r5, #4]
 8006e3a:	68aa      	ldr	r2, [r5, #8]
 8006e3c:	68eb      	ldr	r3, [r5, #12]
 8006e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e40:	7c2b      	ldrb	r3, [r5, #16]
 8006e42:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8006e44:	4aae      	ldr	r2, [pc, #696]	@ (8007100 <loadMenuTexts+0x1220>)
 8006e46:	4baf      	ldr	r3, [pc, #700]	@ (8007104 <loadMenuTexts+0x1224>)
 8006e48:	4614      	mov	r4, r2
 8006e4a:	461d      	mov	r5, r3
 8006e4c:	6828      	ldr	r0, [r5, #0]
 8006e4e:	6869      	ldr	r1, [r5, #4]
 8006e50:	68aa      	ldr	r2, [r5, #8]
 8006e52:	68eb      	ldr	r3, [r5, #12]
 8006e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e56:	7c2b      	ldrb	r3, [r5, #16]
 8006e58:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 8006e5a:	4aab      	ldr	r2, [pc, #684]	@ (8007108 <loadMenuTexts+0x1228>)
 8006e5c:	4bab      	ldr	r3, [pc, #684]	@ (800710c <loadMenuTexts+0x122c>)
 8006e5e:	4614      	mov	r4, r2
 8006e60:	461d      	mov	r5, r3
 8006e62:	6828      	ldr	r0, [r5, #0]
 8006e64:	6869      	ldr	r1, [r5, #4]
 8006e66:	68aa      	ldr	r2, [r5, #8]
 8006e68:	68eb      	ldr	r3, [r5, #12]
 8006e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e6c:	7c2b      	ldrb	r3, [r5, #16]
 8006e6e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8006e70:	4aa7      	ldr	r2, [pc, #668]	@ (8007110 <loadMenuTexts+0x1230>)
 8006e72:	4ba8      	ldr	r3, [pc, #672]	@ (8007114 <loadMenuTexts+0x1234>)
 8006e74:	4614      	mov	r4, r2
 8006e76:	461d      	mov	r5, r3
 8006e78:	6828      	ldr	r0, [r5, #0]
 8006e7a:	6869      	ldr	r1, [r5, #4]
 8006e7c:	68aa      	ldr	r2, [r5, #8]
 8006e7e:	68eb      	ldr	r3, [r5, #12]
 8006e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e82:	7c2b      	ldrb	r3, [r5, #16]
 8006e84:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 8006e86:	4aa4      	ldr	r2, [pc, #656]	@ (8007118 <loadMenuTexts+0x1238>)
 8006e88:	4ba4      	ldr	r3, [pc, #656]	@ (800711c <loadMenuTexts+0x123c>)
 8006e8a:	4614      	mov	r4, r2
 8006e8c:	461d      	mov	r5, r3
 8006e8e:	6828      	ldr	r0, [r5, #0]
 8006e90:	6869      	ldr	r1, [r5, #4]
 8006e92:	68aa      	ldr	r2, [r5, #8]
 8006e94:	68eb      	ldr	r3, [r5, #12]
 8006e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e98:	7c2b      	ldrb	r3, [r5, #16]
 8006e9a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8006e9c:	4aa0      	ldr	r2, [pc, #640]	@ (8007120 <loadMenuTexts+0x1240>)
 8006e9e:	4ba1      	ldr	r3, [pc, #644]	@ (8007124 <loadMenuTexts+0x1244>)
 8006ea0:	4614      	mov	r4, r2
 8006ea2:	461d      	mov	r5, r3
 8006ea4:	6828      	ldr	r0, [r5, #0]
 8006ea6:	6869      	ldr	r1, [r5, #4]
 8006ea8:	68aa      	ldr	r2, [r5, #8]
 8006eaa:	68eb      	ldr	r3, [r5, #12]
 8006eac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eae:	7c2b      	ldrb	r3, [r5, #16]
 8006eb0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8006eb2:	4a9d      	ldr	r2, [pc, #628]	@ (8007128 <loadMenuTexts+0x1248>)
 8006eb4:	4b9d      	ldr	r3, [pc, #628]	@ (800712c <loadMenuTexts+0x124c>)
 8006eb6:	4614      	mov	r4, r2
 8006eb8:	461d      	mov	r5, r3
 8006eba:	6828      	ldr	r0, [r5, #0]
 8006ebc:	6869      	ldr	r1, [r5, #4]
 8006ebe:	68aa      	ldr	r2, [r5, #8]
 8006ec0:	68eb      	ldr	r3, [r5, #12]
 8006ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ec4:	7c2b      	ldrb	r3, [r5, #16]
 8006ec6:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8006ec8:	4a99      	ldr	r2, [pc, #612]	@ (8007130 <loadMenuTexts+0x1250>)
 8006eca:	4b9a      	ldr	r3, [pc, #616]	@ (8007134 <loadMenuTexts+0x1254>)
 8006ecc:	4614      	mov	r4, r2
 8006ece:	461d      	mov	r5, r3
 8006ed0:	6828      	ldr	r0, [r5, #0]
 8006ed2:	6869      	ldr	r1, [r5, #4]
 8006ed4:	68aa      	ldr	r2, [r5, #8]
 8006ed6:	68eb      	ldr	r3, [r5, #12]
 8006ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eda:	7c2b      	ldrb	r3, [r5, #16]
 8006edc:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8006ede:	4a96      	ldr	r2, [pc, #600]	@ (8007138 <loadMenuTexts+0x1258>)
 8006ee0:	4b96      	ldr	r3, [pc, #600]	@ (800713c <loadMenuTexts+0x125c>)
 8006ee2:	4614      	mov	r4, r2
 8006ee4:	461d      	mov	r5, r3
 8006ee6:	6828      	ldr	r0, [r5, #0]
 8006ee8:	6869      	ldr	r1, [r5, #4]
 8006eea:	68aa      	ldr	r2, [r5, #8]
 8006eec:	68eb      	ldr	r3, [r5, #12]
 8006eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ef0:	7c2b      	ldrb	r3, [r5, #16]
 8006ef2:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8006ef4:	4a92      	ldr	r2, [pc, #584]	@ (8007140 <loadMenuTexts+0x1260>)
 8006ef6:	4b93      	ldr	r3, [pc, #588]	@ (8007144 <loadMenuTexts+0x1264>)
 8006ef8:	4614      	mov	r4, r2
 8006efa:	461d      	mov	r5, r3
 8006efc:	6828      	ldr	r0, [r5, #0]
 8006efe:	6869      	ldr	r1, [r5, #4]
 8006f00:	68aa      	ldr	r2, [r5, #8]
 8006f02:	68eb      	ldr	r3, [r5, #12]
 8006f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f06:	7c2b      	ldrb	r3, [r5, #16]
 8006f08:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8006f0a:	4a8f      	ldr	r2, [pc, #572]	@ (8007148 <loadMenuTexts+0x1268>)
 8006f0c:	4b8f      	ldr	r3, [pc, #572]	@ (800714c <loadMenuTexts+0x126c>)
 8006f0e:	4614      	mov	r4, r2
 8006f10:	461d      	mov	r5, r3
 8006f12:	6828      	ldr	r0, [r5, #0]
 8006f14:	6869      	ldr	r1, [r5, #4]
 8006f16:	68aa      	ldr	r2, [r5, #8]
 8006f18:	68eb      	ldr	r3, [r5, #12]
 8006f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f1c:	7c2b      	ldrb	r3, [r5, #16]
 8006f1e:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8006f20:	4a8b      	ldr	r2, [pc, #556]	@ (8007150 <loadMenuTexts+0x1270>)
 8006f22:	4b8c      	ldr	r3, [pc, #560]	@ (8007154 <loadMenuTexts+0x1274>)
 8006f24:	4614      	mov	r4, r2
 8006f26:	461d      	mov	r5, r3
 8006f28:	6828      	ldr	r0, [r5, #0]
 8006f2a:	6869      	ldr	r1, [r5, #4]
 8006f2c:	68aa      	ldr	r2, [r5, #8]
 8006f2e:	68eb      	ldr	r3, [r5, #12]
 8006f30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f32:	7c2b      	ldrb	r3, [r5, #16]
 8006f34:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 8006f36:	4a88      	ldr	r2, [pc, #544]	@ (8007158 <loadMenuTexts+0x1278>)
 8006f38:	4b88      	ldr	r3, [pc, #544]	@ (800715c <loadMenuTexts+0x127c>)
 8006f3a:	4614      	mov	r4, r2
 8006f3c:	461d      	mov	r5, r3
 8006f3e:	6828      	ldr	r0, [r5, #0]
 8006f40:	6869      	ldr	r1, [r5, #4]
 8006f42:	68aa      	ldr	r2, [r5, #8]
 8006f44:	68eb      	ldr	r3, [r5, #12]
 8006f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f48:	7c2b      	ldrb	r3, [r5, #16]
 8006f4a:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8006f4c:	4a84      	ldr	r2, [pc, #528]	@ (8007160 <loadMenuTexts+0x1280>)
 8006f4e:	4b85      	ldr	r3, [pc, #532]	@ (8007164 <loadMenuTexts+0x1284>)
 8006f50:	4614      	mov	r4, r2
 8006f52:	461d      	mov	r5, r3
 8006f54:	6828      	ldr	r0, [r5, #0]
 8006f56:	6869      	ldr	r1, [r5, #4]
 8006f58:	68aa      	ldr	r2, [r5, #8]
 8006f5a:	68eb      	ldr	r3, [r5, #12]
 8006f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f5e:	7c2b      	ldrb	r3, [r5, #16]
 8006f60:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 8006f62:	4a81      	ldr	r2, [pc, #516]	@ (8007168 <loadMenuTexts+0x1288>)
 8006f64:	4b81      	ldr	r3, [pc, #516]	@ (800716c <loadMenuTexts+0x128c>)
 8006f66:	4614      	mov	r4, r2
 8006f68:	461d      	mov	r5, r3
 8006f6a:	6828      	ldr	r0, [r5, #0]
 8006f6c:	6869      	ldr	r1, [r5, #4]
 8006f6e:	68aa      	ldr	r2, [r5, #8]
 8006f70:	68eb      	ldr	r3, [r5, #12]
 8006f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f74:	7c2b      	ldrb	r3, [r5, #16]
 8006f76:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 8006f78:	4a7d      	ldr	r2, [pc, #500]	@ (8007170 <loadMenuTexts+0x1290>)
 8006f7a:	4b7e      	ldr	r3, [pc, #504]	@ (8007174 <loadMenuTexts+0x1294>)
 8006f7c:	4614      	mov	r4, r2
 8006f7e:	461d      	mov	r5, r3
 8006f80:	6828      	ldr	r0, [r5, #0]
 8006f82:	6869      	ldr	r1, [r5, #4]
 8006f84:	68aa      	ldr	r2, [r5, #8]
 8006f86:	68eb      	ldr	r3, [r5, #12]
 8006f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f8a:	7c2b      	ldrb	r3, [r5, #16]
 8006f8c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 8006f8e:	4a7a      	ldr	r2, [pc, #488]	@ (8007178 <loadMenuTexts+0x1298>)
 8006f90:	4b7a      	ldr	r3, [pc, #488]	@ (800717c <loadMenuTexts+0x129c>)
 8006f92:	4614      	mov	r4, r2
 8006f94:	461d      	mov	r5, r3
 8006f96:	6828      	ldr	r0, [r5, #0]
 8006f98:	6869      	ldr	r1, [r5, #4]
 8006f9a:	68aa      	ldr	r2, [r5, #8]
 8006f9c:	68eb      	ldr	r3, [r5, #12]
 8006f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fa0:	7c2b      	ldrb	r3, [r5, #16]
 8006fa2:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8006fa4:	4a76      	ldr	r2, [pc, #472]	@ (8007180 <loadMenuTexts+0x12a0>)
 8006fa6:	4b77      	ldr	r3, [pc, #476]	@ (8007184 <loadMenuTexts+0x12a4>)
 8006fa8:	4614      	mov	r4, r2
 8006faa:	461d      	mov	r5, r3
 8006fac:	6828      	ldr	r0, [r5, #0]
 8006fae:	6869      	ldr	r1, [r5, #4]
 8006fb0:	68aa      	ldr	r2, [r5, #8]
 8006fb2:	68eb      	ldr	r3, [r5, #12]
 8006fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fb6:	7c2b      	ldrb	r3, [r5, #16]
 8006fb8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8006fba:	4a73      	ldr	r2, [pc, #460]	@ (8007188 <loadMenuTexts+0x12a8>)
 8006fbc:	4b73      	ldr	r3, [pc, #460]	@ (800718c <loadMenuTexts+0x12ac>)
 8006fbe:	4614      	mov	r4, r2
 8006fc0:	461d      	mov	r5, r3
 8006fc2:	6828      	ldr	r0, [r5, #0]
 8006fc4:	6869      	ldr	r1, [r5, #4]
 8006fc6:	68aa      	ldr	r2, [r5, #8]
 8006fc8:	68eb      	ldr	r3, [r5, #12]
 8006fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fcc:	7c2b      	ldrb	r3, [r5, #16]
 8006fce:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8006fd0:	4a6f      	ldr	r2, [pc, #444]	@ (8007190 <loadMenuTexts+0x12b0>)
 8006fd2:	4b70      	ldr	r3, [pc, #448]	@ (8007194 <loadMenuTexts+0x12b4>)
 8006fd4:	4614      	mov	r4, r2
 8006fd6:	461d      	mov	r5, r3
 8006fd8:	6828      	ldr	r0, [r5, #0]
 8006fda:	6869      	ldr	r1, [r5, #4]
 8006fdc:	68aa      	ldr	r2, [r5, #8]
 8006fde:	68eb      	ldr	r3, [r5, #12]
 8006fe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fe2:	7c2b      	ldrb	r3, [r5, #16]
 8006fe4:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 8006fe6:	4a6c      	ldr	r2, [pc, #432]	@ (8007198 <loadMenuTexts+0x12b8>)
 8006fe8:	4b6c      	ldr	r3, [pc, #432]	@ (800719c <loadMenuTexts+0x12bc>)
 8006fea:	4614      	mov	r4, r2
 8006fec:	461d      	mov	r5, r3
 8006fee:	6828      	ldr	r0, [r5, #0]
 8006ff0:	6869      	ldr	r1, [r5, #4]
 8006ff2:	68aa      	ldr	r2, [r5, #8]
 8006ff4:	68eb      	ldr	r3, [r5, #12]
 8006ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ff8:	7c2b      	ldrb	r3, [r5, #16]
 8006ffa:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8006ffc:	4a68      	ldr	r2, [pc, #416]	@ (80071a0 <loadMenuTexts+0x12c0>)
 8006ffe:	4b69      	ldr	r3, [pc, #420]	@ (80071a4 <loadMenuTexts+0x12c4>)
 8007000:	4614      	mov	r4, r2
 8007002:	461d      	mov	r5, r3
 8007004:	6828      	ldr	r0, [r5, #0]
 8007006:	6869      	ldr	r1, [r5, #4]
 8007008:	68aa      	ldr	r2, [r5, #8]
 800700a:	68eb      	ldr	r3, [r5, #12]
 800700c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800700e:	7c2b      	ldrb	r3, [r5, #16]
 8007010:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 8007012:	4a65      	ldr	r2, [pc, #404]	@ (80071a8 <loadMenuTexts+0x12c8>)
 8007014:	4b65      	ldr	r3, [pc, #404]	@ (80071ac <loadMenuTexts+0x12cc>)
 8007016:	4614      	mov	r4, r2
 8007018:	461d      	mov	r5, r3
 800701a:	6828      	ldr	r0, [r5, #0]
 800701c:	6869      	ldr	r1, [r5, #4]
 800701e:	68aa      	ldr	r2, [r5, #8]
 8007020:	68eb      	ldr	r3, [r5, #12]
 8007022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007024:	7c2b      	ldrb	r3, [r5, #16]
 8007026:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 8007028:	4a61      	ldr	r2, [pc, #388]	@ (80071b0 <loadMenuTexts+0x12d0>)
 800702a:	4b62      	ldr	r3, [pc, #392]	@ (80071b4 <loadMenuTexts+0x12d4>)
 800702c:	4614      	mov	r4, r2
 800702e:	461d      	mov	r5, r3
 8007030:	6828      	ldr	r0, [r5, #0]
 8007032:	6869      	ldr	r1, [r5, #4]
 8007034:	68aa      	ldr	r2, [r5, #8]
 8007036:	68eb      	ldr	r3, [r5, #12]
 8007038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800703a:	7c2b      	ldrb	r3, [r5, #16]
 800703c:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 800703e:	4a5e      	ldr	r2, [pc, #376]	@ (80071b8 <loadMenuTexts+0x12d8>)
 8007040:	4b5e      	ldr	r3, [pc, #376]	@ (80071bc <loadMenuTexts+0x12dc>)
 8007042:	4614      	mov	r4, r2
 8007044:	461d      	mov	r5, r3
 8007046:	6828      	ldr	r0, [r5, #0]
 8007048:	6869      	ldr	r1, [r5, #4]
 800704a:	68aa      	ldr	r2, [r5, #8]
 800704c:	68eb      	ldr	r3, [r5, #12]
 800704e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007050:	7c2b      	ldrb	r3, [r5, #16]
 8007052:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 8007054:	4a5a      	ldr	r2, [pc, #360]	@ (80071c0 <loadMenuTexts+0x12e0>)
 8007056:	4b5b      	ldr	r3, [pc, #364]	@ (80071c4 <loadMenuTexts+0x12e4>)
 8007058:	4614      	mov	r4, r2
 800705a:	461d      	mov	r5, r3
 800705c:	6828      	ldr	r0, [r5, #0]
 800705e:	6869      	ldr	r1, [r5, #4]
 8007060:	68aa      	ldr	r2, [r5, #8]
 8007062:	68eb      	ldr	r3, [r5, #12]
 8007064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007066:	7c2b      	ldrb	r3, [r5, #16]
 8007068:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 800706a:	4a57      	ldr	r2, [pc, #348]	@ (80071c8 <loadMenuTexts+0x12e8>)
 800706c:	4b57      	ldr	r3, [pc, #348]	@ (80071cc <loadMenuTexts+0x12ec>)
 800706e:	4614      	mov	r4, r2
 8007070:	461d      	mov	r5, r3
 8007072:	6828      	ldr	r0, [r5, #0]
 8007074:	6869      	ldr	r1, [r5, #4]
 8007076:	68aa      	ldr	r2, [r5, #8]
 8007078:	68eb      	ldr	r3, [r5, #12]
 800707a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800707c:	7c2b      	ldrb	r3, [r5, #16]
 800707e:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 8007080:	4a53      	ldr	r2, [pc, #332]	@ (80071d0 <loadMenuTexts+0x12f0>)
 8007082:	4b54      	ldr	r3, [pc, #336]	@ (80071d4 <loadMenuTexts+0x12f4>)
 8007084:	4614      	mov	r4, r2
 8007086:	461d      	mov	r5, r3
 8007088:	6828      	ldr	r0, [r5, #0]
 800708a:	6869      	ldr	r1, [r5, #4]
 800708c:	68aa      	ldr	r2, [r5, #8]
 800708e:	68eb      	ldr	r3, [r5, #12]
 8007090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007092:	7c2b      	ldrb	r3, [r5, #16]
 8007094:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 8007096:	4a50      	ldr	r2, [pc, #320]	@ (80071d8 <loadMenuTexts+0x12f8>)
 8007098:	4b50      	ldr	r3, [pc, #320]	@ (80071dc <loadMenuTexts+0x12fc>)
 800709a:	4614      	mov	r4, r2
 800709c:	461d      	mov	r5, r3
 800709e:	6828      	ldr	r0, [r5, #0]
 80070a0:	6869      	ldr	r1, [r5, #4]
 80070a2:	68aa      	ldr	r2, [r5, #8]
 80070a4:	68eb      	ldr	r3, [r5, #12]
 80070a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070a8:	7c2b      	ldrb	r3, [r5, #16]
 80070aa:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 80070ac:	4a4c      	ldr	r2, [pc, #304]	@ (80071e0 <loadMenuTexts+0x1300>)
 80070ae:	4b4d      	ldr	r3, [pc, #308]	@ (80071e4 <loadMenuTexts+0x1304>)
 80070b0:	4614      	mov	r4, r2
 80070b2:	461d      	mov	r5, r3
 80070b4:	6828      	ldr	r0, [r5, #0]
 80070b6:	6869      	ldr	r1, [r5, #4]
 80070b8:	68aa      	ldr	r2, [r5, #8]
 80070ba:	68eb      	ldr	r3, [r5, #12]
 80070bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070be:	7c2b      	ldrb	r3, [r5, #16]
 80070c0:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 80070c2:	4a49      	ldr	r2, [pc, #292]	@ (80071e8 <loadMenuTexts+0x1308>)
 80070c4:	4b49      	ldr	r3, [pc, #292]	@ (80071ec <loadMenuTexts+0x130c>)
 80070c6:	4614      	mov	r4, r2
 80070c8:	461d      	mov	r5, r3
 80070ca:	e091      	b.n	80071f0 <loadMenuTexts+0x1310>
 80070cc:	200009d8 	.word	0x200009d8
 80070d0:	20001508 	.word	0x20001508
 80070d4:	200009ec 	.word	0x200009ec
 80070d8:	2000151c 	.word	0x2000151c
 80070dc:	20000a00 	.word	0x20000a00
 80070e0:	20001530 	.word	0x20001530
 80070e4:	20000a14 	.word	0x20000a14
 80070e8:	20001544 	.word	0x20001544
 80070ec:	20000a28 	.word	0x20000a28
 80070f0:	20001558 	.word	0x20001558
 80070f4:	20000a3c 	.word	0x20000a3c
 80070f8:	2000156c 	.word	0x2000156c
 80070fc:	20000a50 	.word	0x20000a50
 8007100:	20001580 	.word	0x20001580
 8007104:	20000a64 	.word	0x20000a64
 8007108:	20001594 	.word	0x20001594
 800710c:	20000a78 	.word	0x20000a78
 8007110:	200015a8 	.word	0x200015a8
 8007114:	20000a8c 	.word	0x20000a8c
 8007118:	200015bc 	.word	0x200015bc
 800711c:	20000aa0 	.word	0x20000aa0
 8007120:	200015d0 	.word	0x200015d0
 8007124:	20000ab4 	.word	0x20000ab4
 8007128:	200015e4 	.word	0x200015e4
 800712c:	20000ac8 	.word	0x20000ac8
 8007130:	200015f8 	.word	0x200015f8
 8007134:	20000adc 	.word	0x20000adc
 8007138:	2000160c 	.word	0x2000160c
 800713c:	20000af0 	.word	0x20000af0
 8007140:	20001620 	.word	0x20001620
 8007144:	20000b04 	.word	0x20000b04
 8007148:	20001634 	.word	0x20001634
 800714c:	20000b18 	.word	0x20000b18
 8007150:	20001648 	.word	0x20001648
 8007154:	20000b2c 	.word	0x20000b2c
 8007158:	2000165c 	.word	0x2000165c
 800715c:	20000b40 	.word	0x20000b40
 8007160:	20001670 	.word	0x20001670
 8007164:	20000b54 	.word	0x20000b54
 8007168:	20001684 	.word	0x20001684
 800716c:	20000b68 	.word	0x20000b68
 8007170:	20001698 	.word	0x20001698
 8007174:	20000b7c 	.word	0x20000b7c
 8007178:	200016ac 	.word	0x200016ac
 800717c:	20000b90 	.word	0x20000b90
 8007180:	200016c0 	.word	0x200016c0
 8007184:	20000ba4 	.word	0x20000ba4
 8007188:	200016d4 	.word	0x200016d4
 800718c:	20000bb8 	.word	0x20000bb8
 8007190:	200016e8 	.word	0x200016e8
 8007194:	20000bcc 	.word	0x20000bcc
 8007198:	200016fc 	.word	0x200016fc
 800719c:	20000be0 	.word	0x20000be0
 80071a0:	20001710 	.word	0x20001710
 80071a4:	20000bf4 	.word	0x20000bf4
 80071a8:	20001724 	.word	0x20001724
 80071ac:	20000c08 	.word	0x20000c08
 80071b0:	20001738 	.word	0x20001738
 80071b4:	20000c1c 	.word	0x20000c1c
 80071b8:	2000174c 	.word	0x2000174c
 80071bc:	20000c30 	.word	0x20000c30
 80071c0:	20001760 	.word	0x20001760
 80071c4:	20000c44 	.word	0x20000c44
 80071c8:	20001774 	.word	0x20001774
 80071cc:	20000c58 	.word	0x20000c58
 80071d0:	20001788 	.word	0x20001788
 80071d4:	20000c6c 	.word	0x20000c6c
 80071d8:	2000179c 	.word	0x2000179c
 80071dc:	20000cf8 	.word	0x20000cf8
 80071e0:	200017b0 	.word	0x200017b0
 80071e4:	20000d0c 	.word	0x20000d0c
 80071e8:	200017c4 	.word	0x200017c4
 80071ec:	20000cd0 	.word	0x20000cd0
 80071f0:	6828      	ldr	r0, [r5, #0]
 80071f2:	6869      	ldr	r1, [r5, #4]
 80071f4:	68aa      	ldr	r2, [r5, #8]
 80071f6:	68eb      	ldr	r3, [r5, #12]
 80071f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071fa:	7c2b      	ldrb	r3, [r5, #16]
 80071fc:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 80071fe:	4a5b      	ldr	r2, [pc, #364]	@ (800736c <loadMenuTexts+0x148c>)
 8007200:	4b5b      	ldr	r3, [pc, #364]	@ (8007370 <loadMenuTexts+0x1490>)
 8007202:	4614      	mov	r4, r2
 8007204:	461d      	mov	r5, r3
 8007206:	6828      	ldr	r0, [r5, #0]
 8007208:	6869      	ldr	r1, [r5, #4]
 800720a:	68aa      	ldr	r2, [r5, #8]
 800720c:	68eb      	ldr	r3, [r5, #12]
 800720e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007210:	7c2b      	ldrb	r3, [r5, #16]
 8007212:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 8007214:	4a57      	ldr	r2, [pc, #348]	@ (8007374 <loadMenuTexts+0x1494>)
 8007216:	4b58      	ldr	r3, [pc, #352]	@ (8007378 <loadMenuTexts+0x1498>)
 8007218:	4614      	mov	r4, r2
 800721a:	461d      	mov	r5, r3
 800721c:	6828      	ldr	r0, [r5, #0]
 800721e:	6869      	ldr	r1, [r5, #4]
 8007220:	68aa      	ldr	r2, [r5, #8]
 8007222:	68eb      	ldr	r3, [r5, #12]
 8007224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007226:	7c2b      	ldrb	r3, [r5, #16]
 8007228:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 800722a:	4a54      	ldr	r2, [pc, #336]	@ (800737c <loadMenuTexts+0x149c>)
 800722c:	4b54      	ldr	r3, [pc, #336]	@ (8007380 <loadMenuTexts+0x14a0>)
 800722e:	4614      	mov	r4, r2
 8007230:	461d      	mov	r5, r3
 8007232:	6828      	ldr	r0, [r5, #0]
 8007234:	6869      	ldr	r1, [r5, #4]
 8007236:	68aa      	ldr	r2, [r5, #8]
 8007238:	68eb      	ldr	r3, [r5, #12]
 800723a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800723c:	7c2b      	ldrb	r3, [r5, #16]
 800723e:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 8007240:	4a50      	ldr	r2, [pc, #320]	@ (8007384 <loadMenuTexts+0x14a4>)
 8007242:	4b51      	ldr	r3, [pc, #324]	@ (8007388 <loadMenuTexts+0x14a8>)
 8007244:	4614      	mov	r4, r2
 8007246:	461d      	mov	r5, r3
 8007248:	6828      	ldr	r0, [r5, #0]
 800724a:	6869      	ldr	r1, [r5, #4]
 800724c:	68aa      	ldr	r2, [r5, #8]
 800724e:	68eb      	ldr	r3, [r5, #12]
 8007250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007252:	7c2b      	ldrb	r3, [r5, #16]
 8007254:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 8007256:	4a4d      	ldr	r2, [pc, #308]	@ (800738c <loadMenuTexts+0x14ac>)
 8007258:	4b4d      	ldr	r3, [pc, #308]	@ (8007390 <loadMenuTexts+0x14b0>)
 800725a:	4614      	mov	r4, r2
 800725c:	461d      	mov	r5, r3
 800725e:	6828      	ldr	r0, [r5, #0]
 8007260:	6869      	ldr	r1, [r5, #4]
 8007262:	68aa      	ldr	r2, [r5, #8]
 8007264:	68eb      	ldr	r3, [r5, #12]
 8007266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007268:	7c2b      	ldrb	r3, [r5, #16]
 800726a:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 800726c:	4a49      	ldr	r2, [pc, #292]	@ (8007394 <loadMenuTexts+0x14b4>)
 800726e:	4b4a      	ldr	r3, [pc, #296]	@ (8007398 <loadMenuTexts+0x14b8>)
 8007270:	4614      	mov	r4, r2
 8007272:	461d      	mov	r5, r3
 8007274:	6828      	ldr	r0, [r5, #0]
 8007276:	6869      	ldr	r1, [r5, #4]
 8007278:	68aa      	ldr	r2, [r5, #8]
 800727a:	68eb      	ldr	r3, [r5, #12]
 800727c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800727e:	7c2b      	ldrb	r3, [r5, #16]
 8007280:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 8007282:	4a46      	ldr	r2, [pc, #280]	@ (800739c <loadMenuTexts+0x14bc>)
 8007284:	4b46      	ldr	r3, [pc, #280]	@ (80073a0 <loadMenuTexts+0x14c0>)
 8007286:	4614      	mov	r4, r2
 8007288:	461d      	mov	r5, r3
 800728a:	6828      	ldr	r0, [r5, #0]
 800728c:	6869      	ldr	r1, [r5, #4]
 800728e:	68aa      	ldr	r2, [r5, #8]
 8007290:	68eb      	ldr	r3, [r5, #12]
 8007292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007294:	7c2b      	ldrb	r3, [r5, #16]
 8007296:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 8007298:	4a42      	ldr	r2, [pc, #264]	@ (80073a4 <loadMenuTexts+0x14c4>)
 800729a:	4b43      	ldr	r3, [pc, #268]	@ (80073a8 <loadMenuTexts+0x14c8>)
 800729c:	4614      	mov	r4, r2
 800729e:	461d      	mov	r5, r3
 80072a0:	6828      	ldr	r0, [r5, #0]
 80072a2:	6869      	ldr	r1, [r5, #4]
 80072a4:	68aa      	ldr	r2, [r5, #8]
 80072a6:	68eb      	ldr	r3, [r5, #12]
 80072a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072aa:	7c2b      	ldrb	r3, [r5, #16]
 80072ac:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 80072ae:	4a3f      	ldr	r2, [pc, #252]	@ (80073ac <loadMenuTexts+0x14cc>)
 80072b0:	4b3f      	ldr	r3, [pc, #252]	@ (80073b0 <loadMenuTexts+0x14d0>)
 80072b2:	4614      	mov	r4, r2
 80072b4:	461d      	mov	r5, r3
 80072b6:	6828      	ldr	r0, [r5, #0]
 80072b8:	6869      	ldr	r1, [r5, #4]
 80072ba:	68aa      	ldr	r2, [r5, #8]
 80072bc:	68eb      	ldr	r3, [r5, #12]
 80072be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072c0:	7c2b      	ldrb	r3, [r5, #16]
 80072c2:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 80072c4:	4a3b      	ldr	r2, [pc, #236]	@ (80073b4 <loadMenuTexts+0x14d4>)
 80072c6:	4b3c      	ldr	r3, [pc, #240]	@ (80073b8 <loadMenuTexts+0x14d8>)
 80072c8:	4614      	mov	r4, r2
 80072ca:	461d      	mov	r5, r3
 80072cc:	6828      	ldr	r0, [r5, #0]
 80072ce:	6869      	ldr	r1, [r5, #4]
 80072d0:	68aa      	ldr	r2, [r5, #8]
 80072d2:	68eb      	ldr	r3, [r5, #12]
 80072d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072d6:	7c2b      	ldrb	r3, [r5, #16]
 80072d8:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 80072da:	4a38      	ldr	r2, [pc, #224]	@ (80073bc <loadMenuTexts+0x14dc>)
 80072dc:	4b38      	ldr	r3, [pc, #224]	@ (80073c0 <loadMenuTexts+0x14e0>)
 80072de:	4614      	mov	r4, r2
 80072e0:	461d      	mov	r5, r3
 80072e2:	6828      	ldr	r0, [r5, #0]
 80072e4:	6869      	ldr	r1, [r5, #4]
 80072e6:	68aa      	ldr	r2, [r5, #8]
 80072e8:	68eb      	ldr	r3, [r5, #12]
 80072ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ec:	7c2b      	ldrb	r3, [r5, #16]
 80072ee:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 80072f0:	4a34      	ldr	r2, [pc, #208]	@ (80073c4 <loadMenuTexts+0x14e4>)
 80072f2:	4b35      	ldr	r3, [pc, #212]	@ (80073c8 <loadMenuTexts+0x14e8>)
 80072f4:	4614      	mov	r4, r2
 80072f6:	461d      	mov	r5, r3
 80072f8:	6828      	ldr	r0, [r5, #0]
 80072fa:	6869      	ldr	r1, [r5, #4]
 80072fc:	68aa      	ldr	r2, [r5, #8]
 80072fe:	68eb      	ldr	r3, [r5, #12]
 8007300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007302:	7c2b      	ldrb	r3, [r5, #16]
 8007304:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 8007306:	4a31      	ldr	r2, [pc, #196]	@ (80073cc <loadMenuTexts+0x14ec>)
 8007308:	4b31      	ldr	r3, [pc, #196]	@ (80073d0 <loadMenuTexts+0x14f0>)
 800730a:	4614      	mov	r4, r2
 800730c:	461d      	mov	r5, r3
 800730e:	6828      	ldr	r0, [r5, #0]
 8007310:	6869      	ldr	r1, [r5, #4]
 8007312:	68aa      	ldr	r2, [r5, #8]
 8007314:	68eb      	ldr	r3, [r5, #12]
 8007316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007318:	7c2b      	ldrb	r3, [r5, #16]
 800731a:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 800731c:	4a2d      	ldr	r2, [pc, #180]	@ (80073d4 <loadMenuTexts+0x14f4>)
 800731e:	4b2e      	ldr	r3, [pc, #184]	@ (80073d8 <loadMenuTexts+0x14f8>)
 8007320:	4614      	mov	r4, r2
 8007322:	461d      	mov	r5, r3
 8007324:	6828      	ldr	r0, [r5, #0]
 8007326:	6869      	ldr	r1, [r5, #4]
 8007328:	68aa      	ldr	r2, [r5, #8]
 800732a:	68eb      	ldr	r3, [r5, #12]
 800732c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800732e:	7c2b      	ldrb	r3, [r5, #16]
 8007330:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 8007332:	4a2a      	ldr	r2, [pc, #168]	@ (80073dc <loadMenuTexts+0x14fc>)
 8007334:	4b2a      	ldr	r3, [pc, #168]	@ (80073e0 <loadMenuTexts+0x1500>)
 8007336:	4614      	mov	r4, r2
 8007338:	461d      	mov	r5, r3
 800733a:	6828      	ldr	r0, [r5, #0]
 800733c:	6869      	ldr	r1, [r5, #4]
 800733e:	68aa      	ldr	r2, [r5, #8]
 8007340:	68eb      	ldr	r3, [r5, #12]
 8007342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007344:	7c2b      	ldrb	r3, [r5, #16]
 8007346:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 8007348:	4a26      	ldr	r2, [pc, #152]	@ (80073e4 <loadMenuTexts+0x1504>)
 800734a:	4b27      	ldr	r3, [pc, #156]	@ (80073e8 <loadMenuTexts+0x1508>)
 800734c:	4614      	mov	r4, r2
 800734e:	461d      	mov	r5, r3
 8007350:	6828      	ldr	r0, [r5, #0]
 8007352:	6869      	ldr	r1, [r5, #4]
 8007354:	68aa      	ldr	r2, [r5, #8]
 8007356:	68eb      	ldr	r3, [r5, #12]
 8007358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800735a:	7c2b      	ldrb	r3, [r5, #16]
 800735c:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 800735e:	f000 f845 	bl	80073ec <menuVariableFinisher>
}
 8007362:	bf00      	nop
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bdb0      	pop	{r4, r5, r7, pc}
 800736a:	bf00      	nop
 800736c:	200017d8 	.word	0x200017d8
 8007370:	20000ce4 	.word	0x20000ce4
 8007374:	200017ec 	.word	0x200017ec
 8007378:	20000d48 	.word	0x20000d48
 800737c:	20001800 	.word	0x20001800
 8007380:	20000d5c 	.word	0x20000d5c
 8007384:	20001814 	.word	0x20001814
 8007388:	20000d98 	.word	0x20000d98
 800738c:	20001828 	.word	0x20001828
 8007390:	20000dac 	.word	0x20000dac
 8007394:	2000183c 	.word	0x2000183c
 8007398:	20000de8 	.word	0x20000de8
 800739c:	20001850 	.word	0x20001850
 80073a0:	20000dfc 	.word	0x20000dfc
 80073a4:	20001864 	.word	0x20001864
 80073a8:	20000e24 	.word	0x20000e24
 80073ac:	20001878 	.word	0x20001878
 80073b0:	20000e4c 	.word	0x20000e4c
 80073b4:	2000188c 	.word	0x2000188c
 80073b8:	20000e74 	.word	0x20000e74
 80073bc:	200018a0 	.word	0x200018a0
 80073c0:	20000e9c 	.word	0x20000e9c
 80073c4:	200018b4 	.word	0x200018b4
 80073c8:	20000ec4 	.word	0x20000ec4
 80073cc:	200018c8 	.word	0x200018c8
 80073d0:	20000eec 	.word	0x20000eec
 80073d4:	200018dc 	.word	0x200018dc
 80073d8:	20000f14 	.word	0x20000f14
 80073dc:	200018f0 	.word	0x200018f0
 80073e0:	20000f3c 	.word	0x20000f3c
 80073e4:	20001904 	.word	0x20001904
 80073e8:	20000f64 	.word	0x20000f64

080073ec <menuVariableFinisher>:

void menuVariableFinisher(void) {
 80073ec:	b480      	push	{r7}
 80073ee:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 80073f0:	4b99      	ldr	r3, [pc, #612]	@ (8007658 <menuVariableFinisher+0x26c>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 80073f6:	4b99      	ldr	r3, [pc, #612]	@ (800765c <menuVariableFinisher+0x270>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 80073fc:	4b98      	ldr	r3, [pc, #608]	@ (8007660 <menuVariableFinisher+0x274>)
 80073fe:	2200      	movs	r2, #0
 8007400:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 8007402:	4b98      	ldr	r3, [pc, #608]	@ (8007664 <menuVariableFinisher+0x278>)
 8007404:	2200      	movs	r2, #0
 8007406:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 8007408:	4b97      	ldr	r3, [pc, #604]	@ (8007668 <menuVariableFinisher+0x27c>)
 800740a:	2200      	movs	r2, #0
 800740c:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 800740e:	4b97      	ldr	r3, [pc, #604]	@ (800766c <menuVariableFinisher+0x280>)
 8007410:	2200      	movs	r2, #0
 8007412:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 8007414:	4b96      	ldr	r3, [pc, #600]	@ (8007670 <menuVariableFinisher+0x284>)
 8007416:	2200      	movs	r2, #0
 8007418:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 800741a:	4b96      	ldr	r3, [pc, #600]	@ (8007674 <menuVariableFinisher+0x288>)
 800741c:	2200      	movs	r2, #0
 800741e:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 8007420:	4b95      	ldr	r3, [pc, #596]	@ (8007678 <menuVariableFinisher+0x28c>)
 8007422:	2200      	movs	r2, #0
 8007424:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 8007426:	4b95      	ldr	r3, [pc, #596]	@ (800767c <menuVariableFinisher+0x290>)
 8007428:	2200      	movs	r2, #0
 800742a:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 800742c:	4b94      	ldr	r3, [pc, #592]	@ (8007680 <menuVariableFinisher+0x294>)
 800742e:	2200      	movs	r2, #0
 8007430:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 8007432:	4b94      	ldr	r3, [pc, #592]	@ (8007684 <menuVariableFinisher+0x298>)
 8007434:	2200      	movs	r2, #0
 8007436:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 8007438:	4b93      	ldr	r3, [pc, #588]	@ (8007688 <menuVariableFinisher+0x29c>)
 800743a:	2200      	movs	r2, #0
 800743c:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 800743e:	4b93      	ldr	r3, [pc, #588]	@ (800768c <menuVariableFinisher+0x2a0>)
 8007440:	2200      	movs	r2, #0
 8007442:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 8007444:	4b92      	ldr	r3, [pc, #584]	@ (8007690 <menuVariableFinisher+0x2a4>)
 8007446:	2200      	movs	r2, #0
 8007448:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 800744a:	4b92      	ldr	r3, [pc, #584]	@ (8007694 <menuVariableFinisher+0x2a8>)
 800744c:	2200      	movs	r2, #0
 800744e:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 8007450:	4b91      	ldr	r3, [pc, #580]	@ (8007698 <menuVariableFinisher+0x2ac>)
 8007452:	2200      	movs	r2, #0
 8007454:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 8007456:	4b91      	ldr	r3, [pc, #580]	@ (800769c <menuVariableFinisher+0x2b0>)
 8007458:	2200      	movs	r2, #0
 800745a:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 800745c:	4b90      	ldr	r3, [pc, #576]	@ (80076a0 <menuVariableFinisher+0x2b4>)
 800745e:	2200      	movs	r2, #0
 8007460:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 8007462:	4b90      	ldr	r3, [pc, #576]	@ (80076a4 <menuVariableFinisher+0x2b8>)
 8007464:	2200      	movs	r2, #0
 8007466:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 8007468:	4b8f      	ldr	r3, [pc, #572]	@ (80076a8 <menuVariableFinisher+0x2bc>)
 800746a:	2200      	movs	r2, #0
 800746c:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 800746e:	4b8f      	ldr	r3, [pc, #572]	@ (80076ac <menuVariableFinisher+0x2c0>)
 8007470:	2200      	movs	r2, #0
 8007472:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 8007474:	4b8e      	ldr	r3, [pc, #568]	@ (80076b0 <menuVariableFinisher+0x2c4>)
 8007476:	2200      	movs	r2, #0
 8007478:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 800747a:	4b8e      	ldr	r3, [pc, #568]	@ (80076b4 <menuVariableFinisher+0x2c8>)
 800747c:	2200      	movs	r2, #0
 800747e:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 8007480:	4b8d      	ldr	r3, [pc, #564]	@ (80076b8 <menuVariableFinisher+0x2cc>)
 8007482:	2200      	movs	r2, #0
 8007484:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 8007486:	4b8d      	ldr	r3, [pc, #564]	@ (80076bc <menuVariableFinisher+0x2d0>)
 8007488:	2200      	movs	r2, #0
 800748a:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 800748c:	4b8c      	ldr	r3, [pc, #560]	@ (80076c0 <menuVariableFinisher+0x2d4>)
 800748e:	2200      	movs	r2, #0
 8007490:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 8007492:	4b8c      	ldr	r3, [pc, #560]	@ (80076c4 <menuVariableFinisher+0x2d8>)
 8007494:	2200      	movs	r2, #0
 8007496:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 8007498:	4b8b      	ldr	r3, [pc, #556]	@ (80076c8 <menuVariableFinisher+0x2dc>)
 800749a:	2200      	movs	r2, #0
 800749c:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 800749e:	4b8b      	ldr	r3, [pc, #556]	@ (80076cc <menuVariableFinisher+0x2e0>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 80074a4:	4b8a      	ldr	r3, [pc, #552]	@ (80076d0 <menuVariableFinisher+0x2e4>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 80074aa:	4b8a      	ldr	r3, [pc, #552]	@ (80076d4 <menuVariableFinisher+0x2e8>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 80074b0:	4b89      	ldr	r3, [pc, #548]	@ (80076d8 <menuVariableFinisher+0x2ec>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 80074b6:	4b89      	ldr	r3, [pc, #548]	@ (80076dc <menuVariableFinisher+0x2f0>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 80074bc:	4b88      	ldr	r3, [pc, #544]	@ (80076e0 <menuVariableFinisher+0x2f4>)
 80074be:	2200      	movs	r2, #0
 80074c0:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 80074c2:	4b88      	ldr	r3, [pc, #544]	@ (80076e4 <menuVariableFinisher+0x2f8>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 80074c8:	4b87      	ldr	r3, [pc, #540]	@ (80076e8 <menuVariableFinisher+0x2fc>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 80074ce:	4b87      	ldr	r3, [pc, #540]	@ (80076ec <menuVariableFinisher+0x300>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 80074d4:	4b86      	ldr	r3, [pc, #536]	@ (80076f0 <menuVariableFinisher+0x304>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 80074da:	4b86      	ldr	r3, [pc, #536]	@ (80076f4 <menuVariableFinisher+0x308>)
 80074dc:	2200      	movs	r2, #0
 80074de:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 80074e0:	4b85      	ldr	r3, [pc, #532]	@ (80076f8 <menuVariableFinisher+0x30c>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 80074e6:	4b85      	ldr	r3, [pc, #532]	@ (80076fc <menuVariableFinisher+0x310>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 80074ec:	4b84      	ldr	r3, [pc, #528]	@ (8007700 <menuVariableFinisher+0x314>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 80074f2:	4b84      	ldr	r3, [pc, #528]	@ (8007704 <menuVariableFinisher+0x318>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 80074f8:	4b83      	ldr	r3, [pc, #524]	@ (8007708 <menuVariableFinisher+0x31c>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 80074fe:	4b83      	ldr	r3, [pc, #524]	@ (800770c <menuVariableFinisher+0x320>)
 8007500:	2200      	movs	r2, #0
 8007502:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 8007504:	4b82      	ldr	r3, [pc, #520]	@ (8007710 <menuVariableFinisher+0x324>)
 8007506:	2200      	movs	r2, #0
 8007508:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 800750a:	4b82      	ldr	r3, [pc, #520]	@ (8007714 <menuVariableFinisher+0x328>)
 800750c:	2200      	movs	r2, #0
 800750e:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 8007510:	4b81      	ldr	r3, [pc, #516]	@ (8007718 <menuVariableFinisher+0x32c>)
 8007512:	2200      	movs	r2, #0
 8007514:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 8007516:	4b81      	ldr	r3, [pc, #516]	@ (800771c <menuVariableFinisher+0x330>)
 8007518:	2200      	movs	r2, #0
 800751a:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 800751c:	4b80      	ldr	r3, [pc, #512]	@ (8007720 <menuVariableFinisher+0x334>)
 800751e:	2200      	movs	r2, #0
 8007520:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 8007522:	4b80      	ldr	r3, [pc, #512]	@ (8007724 <menuVariableFinisher+0x338>)
 8007524:	2200      	movs	r2, #0
 8007526:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 8007528:	4b7f      	ldr	r3, [pc, #508]	@ (8007728 <menuVariableFinisher+0x33c>)
 800752a:	2200      	movs	r2, #0
 800752c:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 800752e:	4b7f      	ldr	r3, [pc, #508]	@ (800772c <menuVariableFinisher+0x340>)
 8007530:	2200      	movs	r2, #0
 8007532:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 8007534:	4b7e      	ldr	r3, [pc, #504]	@ (8007730 <menuVariableFinisher+0x344>)
 8007536:	2200      	movs	r2, #0
 8007538:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 800753a:	4b7e      	ldr	r3, [pc, #504]	@ (8007734 <menuVariableFinisher+0x348>)
 800753c:	2200      	movs	r2, #0
 800753e:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 8007540:	4b7d      	ldr	r3, [pc, #500]	@ (8007738 <menuVariableFinisher+0x34c>)
 8007542:	2200      	movs	r2, #0
 8007544:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 8007546:	4b7d      	ldr	r3, [pc, #500]	@ (800773c <menuVariableFinisher+0x350>)
 8007548:	2200      	movs	r2, #0
 800754a:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 800754c:	4b7c      	ldr	r3, [pc, #496]	@ (8007740 <menuVariableFinisher+0x354>)
 800754e:	2200      	movs	r2, #0
 8007550:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 8007552:	4b7c      	ldr	r3, [pc, #496]	@ (8007744 <menuVariableFinisher+0x358>)
 8007554:	2200      	movs	r2, #0
 8007556:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 8007558:	4b7b      	ldr	r3, [pc, #492]	@ (8007748 <menuVariableFinisher+0x35c>)
 800755a:	2200      	movs	r2, #0
 800755c:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 800755e:	4b7b      	ldr	r3, [pc, #492]	@ (800774c <menuVariableFinisher+0x360>)
 8007560:	2200      	movs	r2, #0
 8007562:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 8007564:	4b7a      	ldr	r3, [pc, #488]	@ (8007750 <menuVariableFinisher+0x364>)
 8007566:	2200      	movs	r2, #0
 8007568:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 800756a:	4b7a      	ldr	r3, [pc, #488]	@ (8007754 <menuVariableFinisher+0x368>)
 800756c:	2200      	movs	r2, #0
 800756e:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 8007570:	4b79      	ldr	r3, [pc, #484]	@ (8007758 <menuVariableFinisher+0x36c>)
 8007572:	2200      	movs	r2, #0
 8007574:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 8007576:	4b79      	ldr	r3, [pc, #484]	@ (800775c <menuVariableFinisher+0x370>)
 8007578:	2200      	movs	r2, #0
 800757a:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 800757c:	4b78      	ldr	r3, [pc, #480]	@ (8007760 <menuVariableFinisher+0x374>)
 800757e:	2200      	movs	r2, #0
 8007580:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 8007582:	4b78      	ldr	r3, [pc, #480]	@ (8007764 <menuVariableFinisher+0x378>)
 8007584:	2200      	movs	r2, #0
 8007586:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 8007588:	4b77      	ldr	r3, [pc, #476]	@ (8007768 <menuVariableFinisher+0x37c>)
 800758a:	2200      	movs	r2, #0
 800758c:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 800758e:	4b77      	ldr	r3, [pc, #476]	@ (800776c <menuVariableFinisher+0x380>)
 8007590:	2200      	movs	r2, #0
 8007592:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 8007594:	4b76      	ldr	r3, [pc, #472]	@ (8007770 <menuVariableFinisher+0x384>)
 8007596:	2200      	movs	r2, #0
 8007598:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 800759a:	4b76      	ldr	r3, [pc, #472]	@ (8007774 <menuVariableFinisher+0x388>)
 800759c:	2200      	movs	r2, #0
 800759e:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 80075a0:	4b75      	ldr	r3, [pc, #468]	@ (8007778 <menuVariableFinisher+0x38c>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 80075a6:	4b75      	ldr	r3, [pc, #468]	@ (800777c <menuVariableFinisher+0x390>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 80075ac:	4b74      	ldr	r3, [pc, #464]	@ (8007780 <menuVariableFinisher+0x394>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 80075b2:	4b74      	ldr	r3, [pc, #464]	@ (8007784 <menuVariableFinisher+0x398>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 80075b8:	4b73      	ldr	r3, [pc, #460]	@ (8007788 <menuVariableFinisher+0x39c>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 80075be:	4b73      	ldr	r3, [pc, #460]	@ (800778c <menuVariableFinisher+0x3a0>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 80075c4:	4b72      	ldr	r3, [pc, #456]	@ (8007790 <menuVariableFinisher+0x3a4>)
 80075c6:	2200      	movs	r2, #0
 80075c8:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 80075ca:	4b72      	ldr	r3, [pc, #456]	@ (8007794 <menuVariableFinisher+0x3a8>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 80075d0:	4b71      	ldr	r3, [pc, #452]	@ (8007798 <menuVariableFinisher+0x3ac>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 80075d6:	4b71      	ldr	r3, [pc, #452]	@ (800779c <menuVariableFinisher+0x3b0>)
 80075d8:	2200      	movs	r2, #0
 80075da:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 80075dc:	4b70      	ldr	r3, [pc, #448]	@ (80077a0 <menuVariableFinisher+0x3b4>)
 80075de:	2200      	movs	r2, #0
 80075e0:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 80075e2:	4b70      	ldr	r3, [pc, #448]	@ (80077a4 <menuVariableFinisher+0x3b8>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 80075e8:	4b6f      	ldr	r3, [pc, #444]	@ (80077a8 <menuVariableFinisher+0x3bc>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 80075ee:	4b6f      	ldr	r3, [pc, #444]	@ (80077ac <menuVariableFinisher+0x3c0>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 80075f4:	4b6e      	ldr	r3, [pc, #440]	@ (80077b0 <menuVariableFinisher+0x3c4>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 80075fa:	4b6e      	ldr	r3, [pc, #440]	@ (80077b4 <menuVariableFinisher+0x3c8>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 8007600:	4b6d      	ldr	r3, [pc, #436]	@ (80077b8 <menuVariableFinisher+0x3cc>)
 8007602:	2200      	movs	r2, #0
 8007604:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 8007606:	4b6d      	ldr	r3, [pc, #436]	@ (80077bc <menuVariableFinisher+0x3d0>)
 8007608:	2200      	movs	r2, #0
 800760a:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 800760c:	4b6c      	ldr	r3, [pc, #432]	@ (80077c0 <menuVariableFinisher+0x3d4>)
 800760e:	2200      	movs	r2, #0
 8007610:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 8007612:	4b6c      	ldr	r3, [pc, #432]	@ (80077c4 <menuVariableFinisher+0x3d8>)
 8007614:	2200      	movs	r2, #0
 8007616:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8007618:	4b6b      	ldr	r3, [pc, #428]	@ (80077c8 <menuVariableFinisher+0x3dc>)
 800761a:	2200      	movs	r2, #0
 800761c:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 800761e:	4b6b      	ldr	r3, [pc, #428]	@ (80077cc <menuVariableFinisher+0x3e0>)
 8007620:	2200      	movs	r2, #0
 8007622:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8007624:	4b6a      	ldr	r3, [pc, #424]	@ (80077d0 <menuVariableFinisher+0x3e4>)
 8007626:	2200      	movs	r2, #0
 8007628:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 800762a:	4b6a      	ldr	r3, [pc, #424]	@ (80077d4 <menuVariableFinisher+0x3e8>)
 800762c:	2200      	movs	r2, #0
 800762e:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 8007630:	4b69      	ldr	r3, [pc, #420]	@ (80077d8 <menuVariableFinisher+0x3ec>)
 8007632:	2200      	movs	r2, #0
 8007634:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 8007636:	4b69      	ldr	r3, [pc, #420]	@ (80077dc <menuVariableFinisher+0x3f0>)
 8007638:	2200      	movs	r2, #0
 800763a:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 800763c:	4b68      	ldr	r3, [pc, #416]	@ (80077e0 <menuVariableFinisher+0x3f4>)
 800763e:	2200      	movs	r2, #0
 8007640:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 8007642:	4b68      	ldr	r3, [pc, #416]	@ (80077e4 <menuVariableFinisher+0x3f8>)
 8007644:	2200      	movs	r2, #0
 8007646:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 8007648:	4b67      	ldr	r3, [pc, #412]	@ (80077e8 <menuVariableFinisher+0x3fc>)
 800764a:	2200      	movs	r2, #0
 800764c:	741a      	strb	r2, [r3, #16]
}
 800764e:	bf00      	nop
 8007650:	46bd      	mov	sp, r7
 8007652:	bc80      	pop	{r7}
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	200000a0 	.word	0x200000a0
 800765c:	200000b4 	.word	0x200000b4
 8007660:	200000c8 	.word	0x200000c8
 8007664:	200000dc 	.word	0x200000dc
 8007668:	200000f0 	.word	0x200000f0
 800766c:	20000104 	.word	0x20000104
 8007670:	20000118 	.word	0x20000118
 8007674:	2000012c 	.word	0x2000012c
 8007678:	20000140 	.word	0x20000140
 800767c:	20000154 	.word	0x20000154
 8007680:	20000168 	.word	0x20000168
 8007684:	2000017c 	.word	0x2000017c
 8007688:	20001224 	.word	0x20001224
 800768c:	20001238 	.word	0x20001238
 8007690:	2000124c 	.word	0x2000124c
 8007694:	20001260 	.word	0x20001260
 8007698:	20001274 	.word	0x20001274
 800769c:	20001288 	.word	0x20001288
 80076a0:	2000129c 	.word	0x2000129c
 80076a4:	200012b0 	.word	0x200012b0
 80076a8:	200012c4 	.word	0x200012c4
 80076ac:	200012d8 	.word	0x200012d8
 80076b0:	200012ec 	.word	0x200012ec
 80076b4:	20001300 	.word	0x20001300
 80076b8:	20001314 	.word	0x20001314
 80076bc:	20001328 	.word	0x20001328
 80076c0:	2000133c 	.word	0x2000133c
 80076c4:	20001350 	.word	0x20001350
 80076c8:	20001364 	.word	0x20001364
 80076cc:	20001378 	.word	0x20001378
 80076d0:	2000138c 	.word	0x2000138c
 80076d4:	200013a0 	.word	0x200013a0
 80076d8:	200013b4 	.word	0x200013b4
 80076dc:	200013c8 	.word	0x200013c8
 80076e0:	200013dc 	.word	0x200013dc
 80076e4:	200013f0 	.word	0x200013f0
 80076e8:	20001404 	.word	0x20001404
 80076ec:	20001418 	.word	0x20001418
 80076f0:	2000142c 	.word	0x2000142c
 80076f4:	20001440 	.word	0x20001440
 80076f8:	20001454 	.word	0x20001454
 80076fc:	20001468 	.word	0x20001468
 8007700:	2000147c 	.word	0x2000147c
 8007704:	20001490 	.word	0x20001490
 8007708:	200014a4 	.word	0x200014a4
 800770c:	200014b8 	.word	0x200014b8
 8007710:	200014cc 	.word	0x200014cc
 8007714:	200014e0 	.word	0x200014e0
 8007718:	200014f4 	.word	0x200014f4
 800771c:	20001508 	.word	0x20001508
 8007720:	2000151c 	.word	0x2000151c
 8007724:	20001530 	.word	0x20001530
 8007728:	20001544 	.word	0x20001544
 800772c:	20001558 	.word	0x20001558
 8007730:	2000156c 	.word	0x2000156c
 8007734:	20001580 	.word	0x20001580
 8007738:	20001594 	.word	0x20001594
 800773c:	200015a8 	.word	0x200015a8
 8007740:	200015bc 	.word	0x200015bc
 8007744:	200015d0 	.word	0x200015d0
 8007748:	200015e4 	.word	0x200015e4
 800774c:	200015f8 	.word	0x200015f8
 8007750:	2000160c 	.word	0x2000160c
 8007754:	20001620 	.word	0x20001620
 8007758:	20001634 	.word	0x20001634
 800775c:	20001648 	.word	0x20001648
 8007760:	2000165c 	.word	0x2000165c
 8007764:	20001670 	.word	0x20001670
 8007768:	20001684 	.word	0x20001684
 800776c:	20001698 	.word	0x20001698
 8007770:	200016ac 	.word	0x200016ac
 8007774:	200016c0 	.word	0x200016c0
 8007778:	200016d4 	.word	0x200016d4
 800777c:	200016e8 	.word	0x200016e8
 8007780:	200016fc 	.word	0x200016fc
 8007784:	20001710 	.word	0x20001710
 8007788:	20001724 	.word	0x20001724
 800778c:	20001738 	.word	0x20001738
 8007790:	2000174c 	.word	0x2000174c
 8007794:	20001760 	.word	0x20001760
 8007798:	20001774 	.word	0x20001774
 800779c:	20001788 	.word	0x20001788
 80077a0:	2000179c 	.word	0x2000179c
 80077a4:	200017b0 	.word	0x200017b0
 80077a8:	200017c4 	.word	0x200017c4
 80077ac:	200017d8 	.word	0x200017d8
 80077b0:	200017ec 	.word	0x200017ec
 80077b4:	20001800 	.word	0x20001800
 80077b8:	20001814 	.word	0x20001814
 80077bc:	20001828 	.word	0x20001828
 80077c0:	2000183c 	.word	0x2000183c
 80077c4:	20001850 	.word	0x20001850
 80077c8:	20001864 	.word	0x20001864
 80077cc:	20001878 	.word	0x20001878
 80077d0:	2000188c 	.word	0x2000188c
 80077d4:	200018a0 	.word	0x200018a0
 80077d8:	200018b4 	.word	0x200018b4
 80077dc:	200018c8 	.word	0x200018c8
 80077e0:	200018dc 	.word	0x200018dc
 80077e4:	200018f0 	.word	0x200018f0
 80077e8:	20001904 	.word	0x20001904

080077ec <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 80077f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80077f6:	f001 fddf 	bl	80093b8 <HAL_Delay>
	int confirmationVal = 0;
 80077fa:	2300      	movs	r3, #0
 80077fc:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 80077fe:	e012      	b.n	8007826 <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 8007800:	4a12      	ldr	r2, [pc, #72]	@ (800784c <takeMachineIDWithConfirmation+0x60>)
 8007802:	2101      	movs	r1, #1
 8007804:	2001      	movs	r0, #1
 8007806:	f001 f87d 	bl	8008904 <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 800780a:	4a11      	ldr	r2, [pc, #68]	@ (8007850 <takeMachineIDWithConfirmation+0x64>)
 800780c:	2101      	movs	r1, #1
 800780e:	2002      	movs	r0, #2
 8007810:	f001 f878 	bl	8008904 <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 8007814:	2102      	movs	r1, #2
 8007816:	480f      	ldr	r0, [pc, #60]	@ (8007854 <takeMachineIDWithConfirmation+0x68>)
 8007818:	f002 fb9e 	bl	8009f58 <HAL_GPIO_ReadPin>
 800781c:	4603      	mov	r3, r0
 800781e:	2b01      	cmp	r3, #1
 8007820:	d101      	bne.n	8007826 <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 8007822:	2301      	movs	r3, #1
 8007824:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d0e9      	beq.n	8007800 <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 800782c:	f000 f814 	bl	8007858 <takeMachineID>

	convertArrays(1);
 8007830:	2001      	movs	r0, #1
 8007832:	f7f8 ff85 	bl	8000740 <convertArrays>
	HAL_Delay(50);
 8007836:	2032      	movs	r0, #50	@ 0x32
 8007838:	f001 fdbe 	bl	80093b8 <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 800783c:	2001      	movs	r0, #1
 800783e:	f7f9 fc9d 	bl	800117c <printCredentials>
}
 8007842:	bf00      	nop
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	200018dc 	.word	0x200018dc
 8007850:	200018f0 	.word	0x200018f0
 8007854:	40010800 	.word	0x40010800

08007858 <takeMachineID>:

void takeMachineID() {
 8007858:	b580      	push	{r7, lr}
 800785a:	b088      	sub	sp, #32
 800785c:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 800785e:	2001      	movs	r0, #1
 8007860:	f001 f8ae 	bl	80089c0 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8007864:	220c      	movs	r2, #12
 8007866:	2100      	movs	r1, #0
 8007868:	48a2      	ldr	r0, [pc, #648]	@ (8007af4 <takeMachineID+0x29c>)
 800786a:	f005 fcdd 	bl	800d228 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 800786e:	2305      	movs	r3, #5
 8007870:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8007872:	2303      	movs	r3, #3
 8007874:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8007876:	2300      	movs	r3, #0
 8007878:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 800787a:	4b9f      	ldr	r3, [pc, #636]	@ (8007af8 <takeMachineID+0x2a0>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8007880:	2100      	movs	r1, #0
 8007882:	2001      	movs	r0, #1
 8007884:	f7f9 fa30 	bl	8000ce8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007888:	2108      	movs	r1, #8
 800788a:	489c      	ldr	r0, [pc, #624]	@ (8007afc <takeMachineID+0x2a4>)
 800788c:	f002 fb64 	bl	8009f58 <HAL_GPIO_ReadPin>
 8007890:	4603      	mov	r3, r0
 8007892:	2b01      	cmp	r3, #1
 8007894:	d128      	bne.n	80078e8 <takeMachineID+0x90>
        	lcd_cursor(0);
 8007896:	2000      	movs	r0, #0
 8007898:	f001 f892 	bl	80089c0 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 800789c:	f000 fe74 	bl	8008588 <checkEEPROM4ID>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d00e      	beq.n	80078c4 <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 80078a6:	4a96      	ldr	r2, [pc, #600]	@ (8007b00 <takeMachineID+0x2a8>)
 80078a8:	2101      	movs	r1, #1
 80078aa:	2001      	movs	r0, #1
 80078ac:	f001 f82a 	bl	8008904 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 80078b0:	4a94      	ldr	r2, [pc, #592]	@ (8007b04 <takeMachineID+0x2ac>)
 80078b2:	2101      	movs	r1, #1
 80078b4:	2002      	movs	r0, #2
 80078b6:	f001 f825 	bl	8008904 <lcd_print>
        		HAL_Delay(1250);
 80078ba:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80078be:	f001 fd7b 	bl	80093b8 <HAL_Delay>

        		goto mainSection;
 80078c2:	e7cc      	b.n	800785e <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80078c4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80078c8:	9302      	str	r3, [sp, #8]
 80078ca:	236e      	movs	r3, #110	@ 0x6e
 80078cc:	9301      	str	r3, [sp, #4]
 80078ce:	4b8e      	ldr	r3, [pc, #568]	@ (8007b08 <takeMachineID+0x2b0>)
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	236e      	movs	r3, #110	@ 0x6e
 80078d4:	2200      	movs	r2, #0
 80078d6:	21a0      	movs	r1, #160	@ 0xa0
 80078d8:	488c      	ldr	r0, [pc, #560]	@ (8007b0c <takeMachineID+0x2b4>)
 80078da:	f002 fdf7 	bl	800a4cc <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 80078de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80078e2:	f001 fd69 	bl	80093b8 <HAL_Delay>

            	break;
 80078e6:	e132      	b.n	8007b4e <takeMachineID+0x2f6>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80078e8:	2101      	movs	r1, #1
 80078ea:	4884      	ldr	r0, [pc, #528]	@ (8007afc <takeMachineID+0x2a4>)
 80078ec:	f002 fb34 	bl	8009f58 <HAL_GPIO_ReadPin>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d111      	bne.n	800791a <takeMachineID+0xc2>
        	if(cursorPosition == 7) {
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	2b07      	cmp	r3, #7
 80078fa:	d102      	bne.n	8007902 <takeMachineID+0xaa>
        		cursorPosition = 10;
 80078fc:	230a      	movs	r3, #10
 80078fe:	60bb      	str	r3, [r7, #8]
 8007900:	e008      	b.n	8007914 <takeMachineID+0xbc>
        	} else if (cursorPosition == 14) {
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	2b0e      	cmp	r3, #14
 8007906:	d102      	bne.n	800790e <takeMachineID+0xb6>
                cursorPosition = 3;
 8007908:	2303      	movs	r3, #3
 800790a:	60bb      	str	r3, [r7, #8]
 800790c:	e002      	b.n	8007914 <takeMachineID+0xbc>
            } else {
            	cursorPosition++;
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	3301      	adds	r3, #1
 8007912:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8007914:	2096      	movs	r0, #150	@ 0x96
 8007916:	f001 fd4f 	bl	80093b8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800791a:	2108      	movs	r1, #8
 800791c:	487c      	ldr	r0, [pc, #496]	@ (8007b10 <takeMachineID+0x2b8>)
 800791e:	f002 fb1b 	bl	8009f58 <HAL_GPIO_ReadPin>
 8007922:	4603      	mov	r3, r0
 8007924:	2b01      	cmp	r3, #1
 8007926:	d111      	bne.n	800794c <takeMachineID+0xf4>
            if (cursorPosition == 3) {
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2b03      	cmp	r3, #3
 800792c:	d102      	bne.n	8007934 <takeMachineID+0xdc>
                cursorPosition = 14;
 800792e:	230e      	movs	r3, #14
 8007930:	60bb      	str	r3, [r7, #8]
 8007932:	e008      	b.n	8007946 <takeMachineID+0xee>
            } else if(cursorPosition == 10) {
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2b0a      	cmp	r3, #10
 8007938:	d102      	bne.n	8007940 <takeMachineID+0xe8>
            	cursorPosition = 7;
 800793a:	2307      	movs	r3, #7
 800793c:	60bb      	str	r3, [r7, #8]
 800793e:	e002      	b.n	8007946 <takeMachineID+0xee>
            } else {
            	cursorPosition--;
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	3b01      	subs	r3, #1
 8007944:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 8007946:	20fa      	movs	r0, #250	@ 0xfa
 8007948:	f001 fd36 	bl	80093b8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800794c:	2102      	movs	r1, #2
 800794e:	486b      	ldr	r0, [pc, #428]	@ (8007afc <takeMachineID+0x2a4>)
 8007950:	f002 fb02 	bl	8009f58 <HAL_GPIO_ReadPin>
 8007954:	4603      	mov	r3, r0
 8007956:	2b01      	cmp	r3, #1
 8007958:	f040 80a1 	bne.w	8007a9e <takeMachineID+0x246>
        	if(cursorPosition == 3) {
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	2b03      	cmp	r3, #3
 8007960:	d10a      	bne.n	8007978 <takeMachineID+0x120>
        		machineID[arrayPos] = '0';
 8007962:	4a64      	ldr	r2, [pc, #400]	@ (8007af4 <takeMachineID+0x29c>)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4413      	add	r3, r2
 8007968:	2230      	movs	r2, #48	@ 0x30
 800796a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 800796c:	4a66      	ldr	r2, [pc, #408]	@ (8007b08 <takeMachineID+0x2b0>)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	4413      	add	r3, r2
 8007972:	2200      	movs	r2, #0
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	e07c      	b.n	8007a72 <takeMachineID+0x21a>
        	} else if(cursorPosition == 4) {
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	2b04      	cmp	r3, #4
 800797c:	d10a      	bne.n	8007994 <takeMachineID+0x13c>
        		machineID[arrayPos] = '1';
 800797e:	4a5d      	ldr	r2, [pc, #372]	@ (8007af4 <takeMachineID+0x29c>)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4413      	add	r3, r2
 8007984:	2231      	movs	r2, #49	@ 0x31
 8007986:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8007988:	4a5f      	ldr	r2, [pc, #380]	@ (8007b08 <takeMachineID+0x2b0>)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	4413      	add	r3, r2
 800798e:	2201      	movs	r2, #1
 8007990:	701a      	strb	r2, [r3, #0]
 8007992:	e06e      	b.n	8007a72 <takeMachineID+0x21a>
        	} else if(cursorPosition == 5) {
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2b05      	cmp	r3, #5
 8007998:	d10a      	bne.n	80079b0 <takeMachineID+0x158>
        		machineID[arrayPos] = '2';
 800799a:	4a56      	ldr	r2, [pc, #344]	@ (8007af4 <takeMachineID+0x29c>)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4413      	add	r3, r2
 80079a0:	2232      	movs	r2, #50	@ 0x32
 80079a2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 80079a4:	4a58      	ldr	r2, [pc, #352]	@ (8007b08 <takeMachineID+0x2b0>)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	4413      	add	r3, r2
 80079aa:	2202      	movs	r2, #2
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	e060      	b.n	8007a72 <takeMachineID+0x21a>
        	} else if(cursorPosition == 6) {
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b06      	cmp	r3, #6
 80079b4:	d10a      	bne.n	80079cc <takeMachineID+0x174>
        		machineID[arrayPos] = '3';
 80079b6:	4a4f      	ldr	r2, [pc, #316]	@ (8007af4 <takeMachineID+0x29c>)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	4413      	add	r3, r2
 80079bc:	2233      	movs	r2, #51	@ 0x33
 80079be:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 80079c0:	4a51      	ldr	r2, [pc, #324]	@ (8007b08 <takeMachineID+0x2b0>)
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	4413      	add	r3, r2
 80079c6:	2203      	movs	r2, #3
 80079c8:	701a      	strb	r2, [r3, #0]
 80079ca:	e052      	b.n	8007a72 <takeMachineID+0x21a>
        	} else if(cursorPosition == 7) {
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	2b07      	cmp	r3, #7
 80079d0:	d10a      	bne.n	80079e8 <takeMachineID+0x190>
        		machineID[arrayPos] = '4';
 80079d2:	4a48      	ldr	r2, [pc, #288]	@ (8007af4 <takeMachineID+0x29c>)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4413      	add	r3, r2
 80079d8:	2234      	movs	r2, #52	@ 0x34
 80079da:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 80079dc:	4a4a      	ldr	r2, [pc, #296]	@ (8007b08 <takeMachineID+0x2b0>)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	4413      	add	r3, r2
 80079e2:	2204      	movs	r2, #4
 80079e4:	701a      	strb	r2, [r3, #0]
 80079e6:	e044      	b.n	8007a72 <takeMachineID+0x21a>
        	} else if(cursorPosition == 10) {
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2b0a      	cmp	r3, #10
 80079ec:	d10a      	bne.n	8007a04 <takeMachineID+0x1ac>
        		machineID[arrayPos] = '5';
 80079ee:	4a41      	ldr	r2, [pc, #260]	@ (8007af4 <takeMachineID+0x29c>)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4413      	add	r3, r2
 80079f4:	2235      	movs	r2, #53	@ 0x35
 80079f6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 80079f8:	4a43      	ldr	r2, [pc, #268]	@ (8007b08 <takeMachineID+0x2b0>)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	4413      	add	r3, r2
 80079fe:	2205      	movs	r2, #5
 8007a00:	701a      	strb	r2, [r3, #0]
 8007a02:	e036      	b.n	8007a72 <takeMachineID+0x21a>
        	} else if(cursorPosition == 11) {
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	2b0b      	cmp	r3, #11
 8007a08:	d10a      	bne.n	8007a20 <takeMachineID+0x1c8>
        		machineID[arrayPos] = '6';
 8007a0a:	4a3a      	ldr	r2, [pc, #232]	@ (8007af4 <takeMachineID+0x29c>)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4413      	add	r3, r2
 8007a10:	2236      	movs	r2, #54	@ 0x36
 8007a12:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8007a14:	4a3c      	ldr	r2, [pc, #240]	@ (8007b08 <takeMachineID+0x2b0>)
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	4413      	add	r3, r2
 8007a1a:	2206      	movs	r2, #6
 8007a1c:	701a      	strb	r2, [r3, #0]
 8007a1e:	e028      	b.n	8007a72 <takeMachineID+0x21a>
        	} else if(cursorPosition == 12) {
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	2b0c      	cmp	r3, #12
 8007a24:	d10a      	bne.n	8007a3c <takeMachineID+0x1e4>
        		machineID[arrayPos] = '7';
 8007a26:	4a33      	ldr	r2, [pc, #204]	@ (8007af4 <takeMachineID+0x29c>)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	2237      	movs	r2, #55	@ 0x37
 8007a2e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8007a30:	4a35      	ldr	r2, [pc, #212]	@ (8007b08 <takeMachineID+0x2b0>)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	4413      	add	r3, r2
 8007a36:	2207      	movs	r2, #7
 8007a38:	701a      	strb	r2, [r3, #0]
 8007a3a:	e01a      	b.n	8007a72 <takeMachineID+0x21a>
        	} else if(cursorPosition == 13) {
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	2b0d      	cmp	r3, #13
 8007a40:	d10a      	bne.n	8007a58 <takeMachineID+0x200>
        		machineID[arrayPos] = '8';
 8007a42:	4a2c      	ldr	r2, [pc, #176]	@ (8007af4 <takeMachineID+0x29c>)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4413      	add	r3, r2
 8007a48:	2238      	movs	r2, #56	@ 0x38
 8007a4a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8007a4c:	4a2e      	ldr	r2, [pc, #184]	@ (8007b08 <takeMachineID+0x2b0>)
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	4413      	add	r3, r2
 8007a52:	2208      	movs	r2, #8
 8007a54:	701a      	strb	r2, [r3, #0]
 8007a56:	e00c      	b.n	8007a72 <takeMachineID+0x21a>
        	} else if(cursorPosition == 14) {
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2b0e      	cmp	r3, #14
 8007a5c:	d109      	bne.n	8007a72 <takeMachineID+0x21a>
        		machineID[arrayPos] = '9';
 8007a5e:	4a25      	ldr	r2, [pc, #148]	@ (8007af4 <takeMachineID+0x29c>)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4413      	add	r3, r2
 8007a64:	2239      	movs	r2, #57	@ 0x39
 8007a66:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8007a68:	4a27      	ldr	r2, [pc, #156]	@ (8007b08 <takeMachineID+0x2b0>)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	2209      	movs	r2, #9
 8007a70:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	b2d9      	uxtb	r1, r3
 8007a76:	4a1f      	ldr	r2, [pc, #124]	@ (8007af4 <takeMachineID+0x29c>)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	2001      	movs	r0, #1
 8007a82:	f000 ff54 	bl	800892e <lcd_print_char>

        	writeLoc++;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	3301      	adds	r3, #1
 8007a96:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8007a98:	2096      	movs	r0, #150	@ 0x96
 8007a9a:	f001 fc8d 	bl	80093b8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007a9e:	2104      	movs	r1, #4
 8007aa0:	4816      	ldr	r0, [pc, #88]	@ (8007afc <takeMachineID+0x2a4>)
 8007aa2:	f002 fa59 	bl	8009f58 <HAL_GPIO_ReadPin>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d149      	bne.n	8007b40 <takeMachineID+0x2e8>
            if(strlen(machineID) >= 1) {
 8007aac:	4b11      	ldr	r3, [pc, #68]	@ (8007af4 <takeMachineID+0x29c>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d042      	beq.n	8007b3a <takeMachineID+0x2e2>
                machineID[arrayPos] = '\0';
 8007ab4:	4a0f      	ldr	r2, [pc, #60]	@ (8007af4 <takeMachineID+0x29c>)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4413      	add	r3, r2
 8007aba:	2200      	movs	r2, #0
 8007abc:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8007abe:	4a12      	ldr	r2, [pc, #72]	@ (8007b08 <takeMachineID+0x2b0>)
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2b05      	cmp	r3, #5
 8007acc:	dd03      	ble.n	8007ad6 <takeMachineID+0x27e>
                	writeLoc--;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	e004      	b.n	8007ae0 <takeMachineID+0x288>
                } else if(writeLoc < 5) {
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2b04      	cmp	r3, #4
 8007ada:	dc01      	bgt.n	8007ae0 <takeMachineID+0x288>
                	writeLoc = 5;
 8007adc:	2305      	movs	r3, #5
 8007ade:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	dd16      	ble.n	8007b14 <takeMachineID+0x2bc>
                	arrayPos--;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	3b01      	subs	r3, #1
 8007af0:	603b      	str	r3, [r7, #0]
 8007af2:	e017      	b.n	8007b24 <takeMachineID+0x2cc>
 8007af4:	20001068 	.word	0x20001068
 8007af8:	20000004 	.word	0x20000004
 8007afc:	40010800 	.word	0x40010800
 8007b00:	200017ec 	.word	0x200017ec
 8007b04:	20001800 	.word	0x20001800
 8007b08:	20000ff0 	.word	0x20000ff0
 8007b0c:	20001940 	.word	0x20001940
 8007b10:	40011000 	.word	0x40011000
                } else if(arrayPos < 0) {
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	da04      	bge.n	8007b24 <takeMachineID+0x2cc>
                	arrayPos = 0;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8007b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b58 <takeMachineID+0x300>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	b2db      	uxtb	r3, r3
 8007b28:	3305      	adds	r3, #5
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	2001      	movs	r0, #1
 8007b30:	f000 ff1e 	bl	8008970 <lcd_delete_char>
                HAL_Delay(50);
 8007b34:	2032      	movs	r0, #50	@ 0x32
 8007b36:	f001 fc3f 	bl	80093b8 <HAL_Delay>
            }

            HAL_Delay(150);
 8007b3a:	2096      	movs	r0, #150	@ 0x96
 8007b3c:	f001 fc3c 	bl	80093b8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	4619      	mov	r1, r3
 8007b46:	2002      	movs	r0, #2
 8007b48:	f000 febd 	bl	80088c6 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007b4c:	e69c      	b.n	8007888 <takeMachineID+0x30>
    }
}
 8007b4e:	bf00      	nop
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	20000004 	.word	0x20000004

08007b5c <ssidConfirmation>:

uint8_t ssidConfirmation() {
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af04      	add	r7, sp, #16
	int loopVal = 1;
 8007b62:	2301      	movs	r3, #1
 8007b64:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8007b66:	4a2c      	ldr	r2, [pc, #176]	@ (8007c18 <ssidConfirmation+0xbc>)
 8007b68:	2101      	movs	r1, #1
 8007b6a:	2001      	movs	r0, #1
 8007b6c:	f000 feca 	bl	8008904 <lcd_print>

	while(loopVal == 1) {
 8007b70:	e01f      	b.n	8007bb2 <ssidConfirmation+0x56>
		lcd_print(2, 1, wifiConfirmationText);
 8007b72:	4a2a      	ldr	r2, [pc, #168]	@ (8007c1c <ssidConfirmation+0xc0>)
 8007b74:	2101      	movs	r1, #1
 8007b76:	2002      	movs	r0, #2
 8007b78:	f000 fec4 	bl	8008904 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007b7c:	2102      	movs	r1, #2
 8007b7e:	4828      	ldr	r0, [pc, #160]	@ (8007c20 <ssidConfirmation+0xc4>)
 8007b80:	f002 f9ea 	bl	8009f58 <HAL_GPIO_ReadPin>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d101      	bne.n	8007b8e <ssidConfirmation+0x32>
			loopVal = 0;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	607b      	str	r3, [r7, #4]
		}

		if(strlen(wifiSSID) > 16) {
 8007b8e:	4825      	ldr	r0, [pc, #148]	@ (8007c24 <ssidConfirmation+0xc8>)
 8007b90:	f7f8 fb48 	bl	8000224 <strlen>
 8007b94:	4603      	mov	r3, r0
 8007b96:	2b10      	cmp	r3, #16
 8007b98:	d906      	bls.n	8007ba8 <ssidConfirmation+0x4c>
			slideText(wifiSSID, 1, 1, 1);
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	4820      	ldr	r0, [pc, #128]	@ (8007c24 <ssidConfirmation+0xc8>)
 8007ba2:	f7f9 fa45 	bl	8001030 <slideText>
 8007ba6:	e004      	b.n	8007bb2 <ssidConfirmation+0x56>
		} else {
			lcd_print(1, 1, wifiSSID);
 8007ba8:	4a1e      	ldr	r2, [pc, #120]	@ (8007c24 <ssidConfirmation+0xc8>)
 8007baa:	2101      	movs	r1, #1
 8007bac:	2001      	movs	r0, #1
 8007bae:	f000 fea9 	bl	8008904 <lcd_print>
	while(loopVal == 1) {
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	d0dc      	beq.n	8007b72 <ssidConfirmation+0x16>
		}
	}

    lcd_cursor(0);
 8007bb8:	2000      	movs	r0, #0
 8007bba:	f000 ff01 	bl	80089c0 <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 8007bbe:	4819      	ldr	r0, [pc, #100]	@ (8007c24 <ssidConfirmation+0xc8>)
 8007bc0:	f7f8 fb30 	bl	8000224 <strlen>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b14      	cmp	r3, #20
 8007bc8:	d90f      	bls.n	8007bea <ssidConfirmation+0x8e>
    	lcd_print(1, 1, ssidExceedErrorText);
 8007bca:	4a17      	ldr	r2, [pc, #92]	@ (8007c28 <ssidConfirmation+0xcc>)
 8007bcc:	2101      	movs	r1, #1
 8007bce:	2001      	movs	r0, #1
 8007bd0:	f000 fe98 	bl	8008904 <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 8007bd4:	4a15      	ldr	r2, [pc, #84]	@ (8007c2c <ssidConfirmation+0xd0>)
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	2002      	movs	r0, #2
 8007bda:	f000 fe93 	bl	8008904 <lcd_print>
        HAL_Delay(1250);
 8007bde:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007be2:	f001 fbe9 	bl	80093b8 <HAL_Delay>

        return 0;
 8007be6:	2300      	movs	r3, #0
 8007be8:	e011      	b.n	8007c0e <ssidConfirmation+0xb2>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007bea:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007bee:	9302      	str	r3, [sp, #8]
 8007bf0:	236e      	movs	r3, #110	@ 0x6e
 8007bf2:	9301      	str	r3, [sp, #4]
 8007bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8007c30 <ssidConfirmation+0xd4>)
 8007bf6:	9300      	str	r3, [sp, #0]
 8007bf8:	236e      	movs	r3, #110	@ 0x6e
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	21a0      	movs	r1, #160	@ 0xa0
 8007bfe:	480d      	ldr	r0, [pc, #52]	@ (8007c34 <ssidConfirmation+0xd8>)
 8007c00:	f002 fc64 	bl	800a4cc <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 8007c04:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007c08:	f001 fbd6 	bl	80093b8 <HAL_Delay>

    	return 1;
 8007c0c:	2301      	movs	r3, #1
    }
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	0800dcd8 	.word	0x0800dcd8
 8007c1c:	20001904 	.word	0x20001904
 8007c20:	40010800 	.word	0x40010800
 8007c24:	20001074 	.word	0x20001074
 8007c28:	20001814 	.word	0x20001814
 8007c2c:	20001828 	.word	0x20001828
 8007c30:	20000ff0 	.word	0x20000ff0
 8007c34:	20001940 	.word	0x20001940

08007c38 <takeWifiSSID>:

void takeWifiSSID() {
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 8007c3e:	2001      	movs	r0, #1
 8007c40:	f000 febe 	bl	80089c0 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 8007c44:	2214      	movs	r2, #20
 8007c46:	2100      	movs	r1, #0
 8007c48:	48a4      	ldr	r0, [pc, #656]	@ (8007edc <takeWifiSSID+0x2a4>)
 8007c4a:	f005 faed 	bl	800d228 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007c4e:	2301      	movs	r3, #1
 8007c50:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8007c52:	2307      	movs	r3, #7
 8007c54:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007c56:	2301      	movs	r3, #1
 8007c58:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007c5e:	4ba0      	ldr	r3, [pc, #640]	@ (8007ee0 <takeWifiSSID+0x2a8>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8007c64:	2101      	movs	r1, #1
 8007c66:	2002      	movs	r0, #2
 8007c68:	f7f9 f83e 	bl	8000ce8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007c6c:	2108      	movs	r1, #8
 8007c6e:	489d      	ldr	r0, [pc, #628]	@ (8007ee4 <takeWifiSSID+0x2ac>)
 8007c70:	f002 f972 	bl	8009f58 <HAL_GPIO_ReadPin>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d106      	bne.n	8007c88 <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 8007c7a:	f7ff ff6f 	bl	8007b5c <ssidConfirmation>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f040 8126 	bne.w	8007ed2 <takeWifiSSID+0x29a>
        		goto mainSSIDSection;
 8007c86:	e7da      	b.n	8007c3e <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007c88:	2101      	movs	r1, #1
 8007c8a:	4896      	ldr	r0, [pc, #600]	@ (8007ee4 <takeWifiSSID+0x2ac>)
 8007c8c:	f002 f964 	bl	8009f58 <HAL_GPIO_ReadPin>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d14d      	bne.n	8007d32 <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2b50      	cmp	r3, #80	@ 0x50
 8007c9a:	dd01      	ble.n	8007ca0 <takeWifiSSID+0x68>
        		cursorPosition = 1;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2b10      	cmp	r3, #16
 8007ca4:	d13f      	bne.n	8007d26 <takeWifiSSID+0xee>
            	if(page == 1) {
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d109      	bne.n	8007cc0 <takeWifiSSID+0x88>
            		cursorPosition = 1;
 8007cac:	2301      	movs	r3, #1
 8007cae:	60fb      	str	r3, [r7, #12]
            		page++;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	3301      	adds	r3, #1
 8007cb4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007cb6:	2102      	movs	r1, #2
 8007cb8:	2002      	movs	r0, #2
 8007cba:	f7f9 f815 	bl	8000ce8 <printTemplate>
 8007cbe:	e035      	b.n	8007d2c <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d109      	bne.n	8007cda <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	60fb      	str	r3, [r7, #12]
            		page++;
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007cd0:	2103      	movs	r1, #3
 8007cd2:	2002      	movs	r0, #2
 8007cd4:	f7f9 f808 	bl	8000ce8 <printTemplate>
 8007cd8:	e028      	b.n	8007d2c <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	2b03      	cmp	r3, #3
 8007cde:	d109      	bne.n	8007cf4 <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	60fb      	str	r3, [r7, #12]
            		page++;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	3301      	adds	r3, #1
 8007ce8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007cea:	2104      	movs	r1, #4
 8007cec:	2002      	movs	r0, #2
 8007cee:	f7f8 fffb 	bl	8000ce8 <printTemplate>
 8007cf2:	e01b      	b.n	8007d2c <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	2b04      	cmp	r3, #4
 8007cf8:	d109      	bne.n	8007d0e <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	60fb      	str	r3, [r7, #12]
            		page++;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	3301      	adds	r3, #1
 8007d02:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007d04:	2105      	movs	r1, #5
 8007d06:	2002      	movs	r0, #2
 8007d08:	f7f8 ffee 	bl	8000ce8 <printTemplate>
 8007d0c:	e00e      	b.n	8007d2c <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	2b05      	cmp	r3, #5
 8007d12:	d10b      	bne.n	8007d2c <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 8007d14:	2301      	movs	r3, #1
 8007d16:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	2002      	movs	r0, #2
 8007d20:	f7f8 ffe2 	bl	8000ce8 <printTemplate>
 8007d24:	e002      	b.n	8007d2c <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007d2c:	2096      	movs	r0, #150	@ 0x96
 8007d2e:	f001 fb43 	bl	80093b8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007d32:	2108      	movs	r1, #8
 8007d34:	486c      	ldr	r0, [pc, #432]	@ (8007ee8 <takeWifiSSID+0x2b0>)
 8007d36:	f002 f90f 	bl	8009f58 <HAL_GPIO_ReadPin>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d149      	bne.n	8007dd4 <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	dc01      	bgt.n	8007d4a <takeWifiSSID+0x112>
        		cursorPosition = 80;
 8007d46:	2350      	movs	r3, #80	@ 0x50
 8007d48:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d13b      	bne.n	8007dc8 <takeWifiSSID+0x190>
            	if(page == 1) {
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d108      	bne.n	8007d68 <takeWifiSSID+0x130>
            		cursorPosition = 16;
 8007d56:	2310      	movs	r3, #16
 8007d58:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8007d5a:	2305      	movs	r3, #5
 8007d5c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007d5e:	2105      	movs	r1, #5
 8007d60:	2002      	movs	r0, #2
 8007d62:	f7f8 ffc1 	bl	8000ce8 <printTemplate>
 8007d66:	e032      	b.n	8007dce <takeWifiSSID+0x196>
            	} else if(page == 2) {
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d108      	bne.n	8007d80 <takeWifiSSID+0x148>
            		cursorPosition = 16;
 8007d6e:	2310      	movs	r3, #16
 8007d70:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007d72:	2301      	movs	r3, #1
 8007d74:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007d76:	2101      	movs	r1, #1
 8007d78:	2002      	movs	r0, #2
 8007d7a:	f7f8 ffb5 	bl	8000ce8 <printTemplate>
 8007d7e:	e026      	b.n	8007dce <takeWifiSSID+0x196>
            	} else if(page == 3) {
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d108      	bne.n	8007d98 <takeWifiSSID+0x160>
            		cursorPosition = 16;
 8007d86:	2310      	movs	r3, #16
 8007d88:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8007d8a:	2302      	movs	r3, #2
 8007d8c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007d8e:	2102      	movs	r1, #2
 8007d90:	2002      	movs	r0, #2
 8007d92:	f7f8 ffa9 	bl	8000ce8 <printTemplate>
 8007d96:	e01a      	b.n	8007dce <takeWifiSSID+0x196>
            	} else if(page == 4) {
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	2b04      	cmp	r3, #4
 8007d9c:	d108      	bne.n	8007db0 <takeWifiSSID+0x178>
            		cursorPosition = 16;
 8007d9e:	2310      	movs	r3, #16
 8007da0:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007da2:	2303      	movs	r3, #3
 8007da4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007da6:	2103      	movs	r1, #3
 8007da8:	2002      	movs	r0, #2
 8007daa:	f7f8 ff9d 	bl	8000ce8 <printTemplate>
 8007dae:	e00e      	b.n	8007dce <takeWifiSSID+0x196>
            	} else if(page == 5) {
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	2b05      	cmp	r3, #5
 8007db4:	d10b      	bne.n	8007dce <takeWifiSSID+0x196>
            		cursorPosition = 16;
 8007db6:	2310      	movs	r3, #16
 8007db8:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8007dba:	2304      	movs	r3, #4
 8007dbc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007dbe:	2104      	movs	r1, #4
 8007dc0:	2002      	movs	r0, #2
 8007dc2:	f7f8 ff91 	bl	8000ce8 <printTemplate>
 8007dc6:	e002      	b.n	8007dce <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007dce:	2096      	movs	r0, #150	@ 0x96
 8007dd0:	f001 faf2 	bl	80093b8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007dd4:	2102      	movs	r1, #2
 8007dd6:	4843      	ldr	r0, [pc, #268]	@ (8007ee4 <takeWifiSSID+0x2ac>)
 8007dd8:	f002 f8be 	bl	8009f58 <HAL_GPIO_ReadPin>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d12f      	bne.n	8007e42 <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	b2d9      	uxtb	r1, r3
 8007de6:	4a41      	ldr	r2, [pc, #260]	@ (8007eec <takeWifiSSID+0x2b4>)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4413      	add	r3, r2
 8007dec:	460a      	mov	r2, r1
 8007dee:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8007df0:	4a3f      	ldr	r2, [pc, #252]	@ (8007ef0 <takeWifiSSID+0x2b8>)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	4413      	add	r3, r2
 8007df6:	7819      	ldrb	r1, [r3, #0]
 8007df8:	4a38      	ldr	r2, [pc, #224]	@ (8007edc <takeWifiSSID+0x2a4>)
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	460a      	mov	r2, r1
 8007e00:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	b2d9      	uxtb	r1, r3
 8007e06:	4a3a      	ldr	r2, [pc, #232]	@ (8007ef0 <takeWifiSSID+0x2b8>)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	2001      	movs	r0, #1
 8007e12:	f000 fd8c 	bl	800892e <lcd_print_char>

            writeLoc++;
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	3301      	adds	r3, #1
 8007e26:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8007e28:	4a30      	ldr	r2, [pc, #192]	@ (8007eec <takeWifiSSID+0x2b4>)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	2200      	movs	r2, #0
 8007e30:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 8007e32:	4a2a      	ldr	r2, [pc, #168]	@ (8007edc <takeWifiSSID+0x2a4>)
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	4413      	add	r3, r2
 8007e38:	2200      	movs	r2, #0
 8007e3a:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007e3c:	2096      	movs	r0, #150	@ 0x96
 8007e3e:	f001 fabb 	bl	80093b8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007e42:	2104      	movs	r1, #4
 8007e44:	4827      	ldr	r0, [pc, #156]	@ (8007ee4 <takeWifiSSID+0x2ac>)
 8007e46:	f002 f887 	bl	8009f58 <HAL_GPIO_ReadPin>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d139      	bne.n	8007ec4 <takeWifiSSID+0x28c>
        	if(strlen(wifiSSID) >= 1) {
 8007e50:	4b22      	ldr	r3, [pc, #136]	@ (8007edc <takeWifiSSID+0x2a4>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d032      	beq.n	8007ebe <takeWifiSSID+0x286>
        		eepromData[eepromVal] = '\0';
 8007e58:	4a24      	ldr	r2, [pc, #144]	@ (8007eec <takeWifiSSID+0x2b4>)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	2200      	movs	r2, #0
 8007e60:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 8007e62:	4a1e      	ldr	r2, [pc, #120]	@ (8007edc <takeWifiSSID+0x2a4>)
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	4413      	add	r3, r2
 8007e68:	2200      	movs	r2, #0
 8007e6a:	701a      	strb	r2, [r3, #0]

        		//if(strlen(wifiSSID) > 10) {
        		    //slideTextInput(wifiSSID, 7, 1, 1);
        		//}

        		if(writeLoc > 7) {
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	2b07      	cmp	r3, #7
 8007e70:	dd03      	ble.n	8007e7a <takeWifiSSID+0x242>
        			writeLoc--;
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	613b      	str	r3, [r7, #16]
 8007e78:	e004      	b.n	8007e84 <takeWifiSSID+0x24c>
        		} else if(writeLoc < 7) {
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	2b06      	cmp	r3, #6
 8007e7e:	dc01      	bgt.n	8007e84 <takeWifiSSID+0x24c>
        			writeLoc = 7;
 8007e80:	2307      	movs	r3, #7
 8007e82:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	dd06      	ble.n	8007e98 <takeWifiSSID+0x260>
        			arrayPosition--;
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	3b01      	subs	r3, #1
 8007e94:	607b      	str	r3, [r7, #4]
 8007e96:	e007      	b.n	8007ea8 <takeWifiSSID+0x270>
        		} else if(arrayPosition < 0) {
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	da04      	bge.n	8007ea8 <takeWifiSSID+0x270>
        			arrayPosition = 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8007ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8007ee0 <takeWifiSSID+0x2a8>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	3307      	adds	r3, #7
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	2001      	movs	r0, #1
 8007eb4:	f000 fd5c 	bl	8008970 <lcd_delete_char>
        		HAL_Delay(50);
 8007eb8:	2032      	movs	r0, #50	@ 0x32
 8007eba:	f001 fa7d 	bl	80093b8 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8007ebe:	2096      	movs	r0, #150	@ 0x96
 8007ec0:	f001 fa7a 	bl	80093b8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	4619      	mov	r1, r3
 8007eca:	2002      	movs	r0, #2
 8007ecc:	f000 fcfb 	bl	80088c6 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007ed0:	e6cc      	b.n	8007c6c <takeWifiSSID+0x34>
        		break;
 8007ed2:	bf00      	nop
    }
}
 8007ed4:	bf00      	nop
 8007ed6:	3718      	adds	r7, #24
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}
 8007edc:	20001074 	.word	0x20001074
 8007ee0:	20000008 	.word	0x20000008
 8007ee4:	40010800 	.word	0x40010800
 8007ee8:	40011000 	.word	0x40011000
 8007eec:	20000ff0 	.word	0x20000ff0
 8007ef0:	2000001c 	.word	0x2000001c

08007ef4 <passConfirmation>:

uint8_t passConfirmation() {
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af04      	add	r7, sp, #16
	int loopVal = 1;
 8007efa:	2301      	movs	r3, #1
 8007efc:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8007efe:	4a2c      	ldr	r2, [pc, #176]	@ (8007fb0 <passConfirmation+0xbc>)
 8007f00:	2101      	movs	r1, #1
 8007f02:	2001      	movs	r0, #1
 8007f04:	f000 fcfe 	bl	8008904 <lcd_print>

	while(loopVal == 1) {
 8007f08:	e01f      	b.n	8007f4a <passConfirmation+0x56>
		lcd_print(2, 1, wifiConfirmationText);
 8007f0a:	4a2a      	ldr	r2, [pc, #168]	@ (8007fb4 <passConfirmation+0xc0>)
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	2002      	movs	r0, #2
 8007f10:	f000 fcf8 	bl	8008904 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007f14:	2102      	movs	r1, #2
 8007f16:	4828      	ldr	r0, [pc, #160]	@ (8007fb8 <passConfirmation+0xc4>)
 8007f18:	f002 f81e 	bl	8009f58 <HAL_GPIO_ReadPin>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d101      	bne.n	8007f26 <passConfirmation+0x32>
			loopVal = 0;
 8007f22:	2300      	movs	r3, #0
 8007f24:	607b      	str	r3, [r7, #4]
		}

		if(strlen(wifiPass) > 16) {
 8007f26:	4825      	ldr	r0, [pc, #148]	@ (8007fbc <passConfirmation+0xc8>)
 8007f28:	f7f8 f97c 	bl	8000224 <strlen>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b10      	cmp	r3, #16
 8007f30:	d906      	bls.n	8007f40 <passConfirmation+0x4c>
			slideText(wifiPass, 1, 1, 1);
 8007f32:	2301      	movs	r3, #1
 8007f34:	2201      	movs	r2, #1
 8007f36:	2101      	movs	r1, #1
 8007f38:	4820      	ldr	r0, [pc, #128]	@ (8007fbc <passConfirmation+0xc8>)
 8007f3a:	f7f9 f879 	bl	8001030 <slideText>
 8007f3e:	e004      	b.n	8007f4a <passConfirmation+0x56>
		} else {
			lcd_print(1, 1, wifiPass);
 8007f40:	4a1e      	ldr	r2, [pc, #120]	@ (8007fbc <passConfirmation+0xc8>)
 8007f42:	2101      	movs	r1, #1
 8007f44:	2001      	movs	r0, #1
 8007f46:	f000 fcdd 	bl	8008904 <lcd_print>
	while(loopVal == 1) {
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d0dc      	beq.n	8007f0a <passConfirmation+0x16>
		}
	}

    lcd_cursor(0);
 8007f50:	2000      	movs	r0, #0
 8007f52:	f000 fd35 	bl	80089c0 <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 8007f56:	4819      	ldr	r0, [pc, #100]	@ (8007fbc <passConfirmation+0xc8>)
 8007f58:	f7f8 f964 	bl	8000224 <strlen>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b14      	cmp	r3, #20
 8007f60:	d90f      	bls.n	8007f82 <passConfirmation+0x8e>
    	lcd_print(1, 1, passExceedErrorText);
 8007f62:	4a17      	ldr	r2, [pc, #92]	@ (8007fc0 <passConfirmation+0xcc>)
 8007f64:	2101      	movs	r1, #1
 8007f66:	2001      	movs	r0, #1
 8007f68:	f000 fccc 	bl	8008904 <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 8007f6c:	4a15      	ldr	r2, [pc, #84]	@ (8007fc4 <passConfirmation+0xd0>)
 8007f6e:	2101      	movs	r1, #1
 8007f70:	2002      	movs	r0, #2
 8007f72:	f000 fcc7 	bl	8008904 <lcd_print>
        HAL_Delay(1250);
 8007f76:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007f7a:	f001 fa1d 	bl	80093b8 <HAL_Delay>

        return 0;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	e011      	b.n	8007fa6 <passConfirmation+0xb2>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007f82:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007f86:	9302      	str	r3, [sp, #8]
 8007f88:	236e      	movs	r3, #110	@ 0x6e
 8007f8a:	9301      	str	r3, [sp, #4]
 8007f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8007fc8 <passConfirmation+0xd4>)
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	236e      	movs	r3, #110	@ 0x6e
 8007f92:	2200      	movs	r2, #0
 8007f94:	21a0      	movs	r1, #160	@ 0xa0
 8007f96:	480d      	ldr	r0, [pc, #52]	@ (8007fcc <passConfirmation+0xd8>)
 8007f98:	f002 fa98 	bl	800a4cc <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 8007f9c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007fa0:	f001 fa0a 	bl	80093b8 <HAL_Delay>

    	return 1;
 8007fa4:	2301      	movs	r3, #1
    }
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	3708      	adds	r7, #8
 8007faa:	46bd      	mov	sp, r7
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	0800dcd8 	.word	0x0800dcd8
 8007fb4:	20001904 	.word	0x20001904
 8007fb8:	40010800 	.word	0x40010800
 8007fbc:	20001088 	.word	0x20001088
 8007fc0:	2000183c 	.word	0x2000183c
 8007fc4:	20001850 	.word	0x20001850
 8007fc8:	20000ff0 	.word	0x20000ff0
 8007fcc:	20001940 	.word	0x20001940

08007fd0 <takeWifiPass>:

void takeWifiPass() {
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 8007fd6:	2001      	movs	r0, #1
 8007fd8:	f000 fcf2 	bl	80089c0 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 8007fdc:	2214      	movs	r2, #20
 8007fde:	2100      	movs	r1, #0
 8007fe0:	48a4      	ldr	r0, [pc, #656]	@ (8008274 <takeWifiPass+0x2a4>)
 8007fe2:	f005 f921 	bl	800d228 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8007fea:	2307      	movs	r3, #7
 8007fec:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007fee:	2301      	movs	r3, #1
 8007ff0:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007ff6:	4ba0      	ldr	r3, [pc, #640]	@ (8008278 <takeWifiPass+0x2a8>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	2003      	movs	r0, #3
 8008000:	f7f8 fe72 	bl	8000ce8 <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008004:	2108      	movs	r1, #8
 8008006:	489d      	ldr	r0, [pc, #628]	@ (800827c <takeWifiPass+0x2ac>)
 8008008:	f001 ffa6 	bl	8009f58 <HAL_GPIO_ReadPin>
 800800c:	4603      	mov	r3, r0
 800800e:	2b01      	cmp	r3, #1
 8008010:	d106      	bne.n	8008020 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 8008012:	f7ff ff6f 	bl	8007ef4 <passConfirmation>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	f040 8126 	bne.w	800826a <takeWifiPass+0x29a>
    	        goto mainPassSection;
 800801e:	e7da      	b.n	8007fd6 <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008020:	2101      	movs	r1, #1
 8008022:	4896      	ldr	r0, [pc, #600]	@ (800827c <takeWifiPass+0x2ac>)
 8008024:	f001 ff98 	bl	8009f58 <HAL_GPIO_ReadPin>
 8008028:	4603      	mov	r3, r0
 800802a:	2b01      	cmp	r3, #1
 800802c:	d14d      	bne.n	80080ca <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2b50      	cmp	r3, #80	@ 0x50
 8008032:	dd01      	ble.n	8008038 <takeWifiPass+0x68>
        		cursorPosition = 1;
 8008034:	2301      	movs	r3, #1
 8008036:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2b10      	cmp	r3, #16
 800803c:	d13f      	bne.n	80080be <takeWifiPass+0xee>
            	if(page == 1) {
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d109      	bne.n	8008058 <takeWifiPass+0x88>
            		cursorPosition = 1;
 8008044:	2301      	movs	r3, #1
 8008046:	60fb      	str	r3, [r7, #12]
            		page++;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	3301      	adds	r3, #1
 800804c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800804e:	2102      	movs	r1, #2
 8008050:	2003      	movs	r0, #3
 8008052:	f7f8 fe49 	bl	8000ce8 <printTemplate>
 8008056:	e035      	b.n	80080c4 <takeWifiPass+0xf4>
            	} else if(page == 2) {
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	2b02      	cmp	r3, #2
 800805c:	d109      	bne.n	8008072 <takeWifiPass+0xa2>
            		cursorPosition = 1;
 800805e:	2301      	movs	r3, #1
 8008060:	60fb      	str	r3, [r7, #12]
            		page++;
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	3301      	adds	r3, #1
 8008066:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8008068:	2103      	movs	r1, #3
 800806a:	2003      	movs	r0, #3
 800806c:	f7f8 fe3c 	bl	8000ce8 <printTemplate>
 8008070:	e028      	b.n	80080c4 <takeWifiPass+0xf4>
            	} else if(page == 3) {
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	2b03      	cmp	r3, #3
 8008076:	d109      	bne.n	800808c <takeWifiPass+0xbc>
            		cursorPosition = 1;
 8008078:	2301      	movs	r3, #1
 800807a:	60fb      	str	r3, [r7, #12]
            		page++;
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	3301      	adds	r3, #1
 8008080:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8008082:	2104      	movs	r1, #4
 8008084:	2003      	movs	r0, #3
 8008086:	f7f8 fe2f 	bl	8000ce8 <printTemplate>
 800808a:	e01b      	b.n	80080c4 <takeWifiPass+0xf4>
            	} else if(page == 4) {
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	2b04      	cmp	r3, #4
 8008090:	d109      	bne.n	80080a6 <takeWifiPass+0xd6>
            		cursorPosition = 1;
 8008092:	2301      	movs	r3, #1
 8008094:	60fb      	str	r3, [r7, #12]
            		page++;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	3301      	adds	r3, #1
 800809a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 800809c:	2105      	movs	r1, #5
 800809e:	2003      	movs	r0, #3
 80080a0:	f7f8 fe22 	bl	8000ce8 <printTemplate>
 80080a4:	e00e      	b.n	80080c4 <takeWifiPass+0xf4>
            	} else if(page == 5) {
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	2b05      	cmp	r3, #5
 80080aa:	d10b      	bne.n	80080c4 <takeWifiPass+0xf4>
            		cursorPosition = 1;
 80080ac:	2301      	movs	r3, #1
 80080ae:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80080b0:	2301      	movs	r3, #1
 80080b2:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80080b4:	2101      	movs	r1, #1
 80080b6:	2003      	movs	r0, #3
 80080b8:	f7f8 fe16 	bl	8000ce8 <printTemplate>
 80080bc:	e002      	b.n	80080c4 <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	3301      	adds	r3, #1
 80080c2:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80080c4:	2096      	movs	r0, #150	@ 0x96
 80080c6:	f001 f977 	bl	80093b8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80080ca:	2108      	movs	r1, #8
 80080cc:	486c      	ldr	r0, [pc, #432]	@ (8008280 <takeWifiPass+0x2b0>)
 80080ce:	f001 ff43 	bl	8009f58 <HAL_GPIO_ReadPin>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d149      	bne.n	800816c <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	dc01      	bgt.n	80080e2 <takeWifiPass+0x112>
        		cursorPosition = 80;
 80080de:	2350      	movs	r3, #80	@ 0x50
 80080e0:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d13b      	bne.n	8008160 <takeWifiPass+0x190>
            	if(page == 1) {
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d108      	bne.n	8008100 <takeWifiPass+0x130>
            		cursorPosition = 16;
 80080ee:	2310      	movs	r3, #16
 80080f0:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80080f2:	2305      	movs	r3, #5
 80080f4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80080f6:	2105      	movs	r1, #5
 80080f8:	2003      	movs	r0, #3
 80080fa:	f7f8 fdf5 	bl	8000ce8 <printTemplate>
 80080fe:	e032      	b.n	8008166 <takeWifiPass+0x196>
            	} else if(page == 2) {
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	2b02      	cmp	r3, #2
 8008104:	d108      	bne.n	8008118 <takeWifiPass+0x148>
            		cursorPosition = 16;
 8008106:	2310      	movs	r3, #16
 8008108:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800810a:	2301      	movs	r3, #1
 800810c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800810e:	2101      	movs	r1, #1
 8008110:	2003      	movs	r0, #3
 8008112:	f7f8 fde9 	bl	8000ce8 <printTemplate>
 8008116:	e026      	b.n	8008166 <takeWifiPass+0x196>
            	} else if(page == 3) {
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	2b03      	cmp	r3, #3
 800811c:	d108      	bne.n	8008130 <takeWifiPass+0x160>
            		cursorPosition = 16;
 800811e:	2310      	movs	r3, #16
 8008120:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8008122:	2302      	movs	r3, #2
 8008124:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8008126:	2102      	movs	r1, #2
 8008128:	2003      	movs	r0, #3
 800812a:	f7f8 fddd 	bl	8000ce8 <printTemplate>
 800812e:	e01a      	b.n	8008166 <takeWifiPass+0x196>
            	} else if(page == 4) {
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	2b04      	cmp	r3, #4
 8008134:	d108      	bne.n	8008148 <takeWifiPass+0x178>
            		cursorPosition = 16;
 8008136:	2310      	movs	r3, #16
 8008138:	60fb      	str	r3, [r7, #12]
            		page = 3;
 800813a:	2303      	movs	r3, #3
 800813c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 800813e:	2103      	movs	r1, #3
 8008140:	2003      	movs	r0, #3
 8008142:	f7f8 fdd1 	bl	8000ce8 <printTemplate>
 8008146:	e00e      	b.n	8008166 <takeWifiPass+0x196>
            	} else if(page == 5) {
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	2b05      	cmp	r3, #5
 800814c:	d10b      	bne.n	8008166 <takeWifiPass+0x196>
            		cursorPosition = 16;
 800814e:	2310      	movs	r3, #16
 8008150:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8008152:	2304      	movs	r3, #4
 8008154:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8008156:	2104      	movs	r1, #4
 8008158:	2003      	movs	r0, #3
 800815a:	f7f8 fdc5 	bl	8000ce8 <printTemplate>
 800815e:	e002      	b.n	8008166 <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	3b01      	subs	r3, #1
 8008164:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008166:	2096      	movs	r0, #150	@ 0x96
 8008168:	f001 f926 	bl	80093b8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800816c:	2102      	movs	r1, #2
 800816e:	4843      	ldr	r0, [pc, #268]	@ (800827c <takeWifiPass+0x2ac>)
 8008170:	f001 fef2 	bl	8009f58 <HAL_GPIO_ReadPin>
 8008174:	4603      	mov	r3, r0
 8008176:	2b01      	cmp	r3, #1
 8008178:	d12f      	bne.n	80081da <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	b2d9      	uxtb	r1, r3
 800817e:	4a41      	ldr	r2, [pc, #260]	@ (8008284 <takeWifiPass+0x2b4>)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	4413      	add	r3, r2
 8008184:	460a      	mov	r2, r1
 8008186:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 8008188:	4a3f      	ldr	r2, [pc, #252]	@ (8008288 <takeWifiPass+0x2b8>)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	4413      	add	r3, r2
 800818e:	7819      	ldrb	r1, [r3, #0]
 8008190:	4a38      	ldr	r2, [pc, #224]	@ (8008274 <takeWifiPass+0x2a4>)
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	4413      	add	r3, r2
 8008196:	460a      	mov	r2, r1
 8008198:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	b2d9      	uxtb	r1, r3
 800819e:	4a3a      	ldr	r2, [pc, #232]	@ (8008288 <takeWifiPass+0x2b8>)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4413      	add	r3, r2
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	461a      	mov	r2, r3
 80081a8:	2001      	movs	r0, #1
 80081aa:	f000 fbc0 	bl	800892e <lcd_print_char>

            writeLoc++;
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	3301      	adds	r3, #1
 80081b2:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	3301      	adds	r3, #1
 80081b8:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	3301      	adds	r3, #1
 80081be:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80081c0:	4a30      	ldr	r2, [pc, #192]	@ (8008284 <takeWifiPass+0x2b4>)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4413      	add	r3, r2
 80081c6:	2200      	movs	r2, #0
 80081c8:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 80081ca:	4a2a      	ldr	r2, [pc, #168]	@ (8008274 <takeWifiPass+0x2a4>)
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	4413      	add	r3, r2
 80081d0:	2200      	movs	r2, #0
 80081d2:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80081d4:	2096      	movs	r0, #150	@ 0x96
 80081d6:	f001 f8ef 	bl	80093b8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80081da:	2104      	movs	r1, #4
 80081dc:	4827      	ldr	r0, [pc, #156]	@ (800827c <takeWifiPass+0x2ac>)
 80081de:	f001 febb 	bl	8009f58 <HAL_GPIO_ReadPin>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d139      	bne.n	800825c <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 80081e8:	4b22      	ldr	r3, [pc, #136]	@ (8008274 <takeWifiPass+0x2a4>)
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d032      	beq.n	8008256 <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 80081f0:	4a24      	ldr	r2, [pc, #144]	@ (8008284 <takeWifiPass+0x2b4>)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4413      	add	r3, r2
 80081f6:	2200      	movs	r2, #0
 80081f8:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 80081fa:	4a1e      	ldr	r2, [pc, #120]	@ (8008274 <takeWifiPass+0x2a4>)
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	4413      	add	r3, r2
 8008200:	2200      	movs	r2, #0
 8008202:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	2b07      	cmp	r3, #7
 8008208:	dd03      	ble.n	8008212 <takeWifiPass+0x242>
        			writeLoc--;
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	3b01      	subs	r3, #1
 800820e:	613b      	str	r3, [r7, #16]
 8008210:	e004      	b.n	800821c <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	2b06      	cmp	r3, #6
 8008216:	dc01      	bgt.n	800821c <takeWifiPass+0x24c>
        			writeLoc = 7;
 8008218:	2307      	movs	r3, #7
 800821a:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	2b00      	cmp	r3, #0
 8008220:	dd06      	ble.n	8008230 <takeWifiPass+0x260>
        			arrayPosition--;
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	3b01      	subs	r3, #1
 8008226:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	3b01      	subs	r3, #1
 800822c:	607b      	str	r3, [r7, #4]
 800822e:	e007      	b.n	8008240 <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2b00      	cmp	r3, #0
 8008234:	da04      	bge.n	8008240 <takeWifiPass+0x270>
        			arrayPosition = 0;
 8008236:	2300      	movs	r3, #0
 8008238:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 800823a:	4b0f      	ldr	r3, [pc, #60]	@ (8008278 <takeWifiPass+0x2a8>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	b2db      	uxtb	r3, r3
 8008244:	3307      	adds	r3, #7
 8008246:	b2db      	uxtb	r3, r3
 8008248:	4619      	mov	r1, r3
 800824a:	2001      	movs	r0, #1
 800824c:	f000 fb90 	bl	8008970 <lcd_delete_char>
        		HAL_Delay(50);
 8008250:	2032      	movs	r0, #50	@ 0x32
 8008252:	f001 f8b1 	bl	80093b8 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8008256:	2096      	movs	r0, #150	@ 0x96
 8008258:	f001 f8ae 	bl	80093b8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	b2db      	uxtb	r3, r3
 8008260:	4619      	mov	r1, r3
 8008262:	2002      	movs	r0, #2
 8008264:	f000 fb2f 	bl	80088c6 <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008268:	e6cc      	b.n	8008004 <takeWifiPass+0x34>
    	        break;
 800826a:	bf00      	nop
    }
}
 800826c:	bf00      	nop
 800826e:	3718      	adds	r7, #24
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	20001088 	.word	0x20001088
 8008278:	2000000c 	.word	0x2000000c
 800827c:	40010800 	.word	0x40010800
 8008280:	40011000 	.word	0x40011000
 8008284:	20000ff0 	.word	0x20000ff0
 8008288:	2000001c 	.word	0x2000001c

0800828c <mergeData>:

char* mergeData() {
 800828c:	b580      	push	{r7, lr}
 800828e:	b09c      	sub	sp, #112	@ 0x70
 8008290:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8008292:	2300      	movs	r3, #0
 8008294:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008296:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800829a:	2229      	movs	r2, #41	@ 0x29
 800829c:	2100      	movs	r1, #0
 800829e:	4618      	mov	r0, r3
 80082a0:	f004 ffc2 	bl	800d228 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80082a4:	4b65      	ldr	r3, [pc, #404]	@ (800843c <mergeData+0x1b0>)
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	703b      	strb	r3, [r7, #0]
 80082aa:	4b65      	ldr	r3, [pc, #404]	@ (8008440 <mergeData+0x1b4>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	707b      	strb	r3, [r7, #1]
 80082b0:	4b64      	ldr	r3, [pc, #400]	@ (8008444 <mergeData+0x1b8>)
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	70bb      	strb	r3, [r7, #2]
 80082b6:	4b64      	ldr	r3, [pc, #400]	@ (8008448 <mergeData+0x1bc>)
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	70fb      	strb	r3, [r7, #3]
 80082bc:	4b63      	ldr	r3, [pc, #396]	@ (800844c <mergeData+0x1c0>)
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	713b      	strb	r3, [r7, #4]
 80082c2:	4b63      	ldr	r3, [pc, #396]	@ (8008450 <mergeData+0x1c4>)
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	717b      	strb	r3, [r7, #5]
 80082c8:	4b62      	ldr	r3, [pc, #392]	@ (8008454 <mergeData+0x1c8>)
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	71bb      	strb	r3, [r7, #6]
 80082ce:	4b62      	ldr	r3, [pc, #392]	@ (8008458 <mergeData+0x1cc>)
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	71fb      	strb	r3, [r7, #7]
 80082d4:	4b61      	ldr	r3, [pc, #388]	@ (800845c <mergeData+0x1d0>)
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	723b      	strb	r3, [r7, #8]
 80082da:	4b61      	ldr	r3, [pc, #388]	@ (8008460 <mergeData+0x1d4>)
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	727b      	strb	r3, [r7, #9]
 80082e0:	4b60      	ldr	r3, [pc, #384]	@ (8008464 <mergeData+0x1d8>)
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	72bb      	strb	r3, [r7, #10]
 80082e6:	4b60      	ldr	r3, [pc, #384]	@ (8008468 <mergeData+0x1dc>)
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	72fb      	strb	r3, [r7, #11]
 80082ec:	4b5f      	ldr	r3, [pc, #380]	@ (800846c <mergeData+0x1e0>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	733b      	strb	r3, [r7, #12]
 80082f2:	4b5f      	ldr	r3, [pc, #380]	@ (8008470 <mergeData+0x1e4>)
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	737b      	strb	r3, [r7, #13]
 80082f8:	4b5e      	ldr	r3, [pc, #376]	@ (8008474 <mergeData+0x1e8>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	73bb      	strb	r3, [r7, #14]
 80082fe:	4b5e      	ldr	r3, [pc, #376]	@ (8008478 <mergeData+0x1ec>)
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	73fb      	strb	r3, [r7, #15]
 8008304:	4b5d      	ldr	r3, [pc, #372]	@ (800847c <mergeData+0x1f0>)
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	743b      	strb	r3, [r7, #16]
 800830a:	4b5d      	ldr	r3, [pc, #372]	@ (8008480 <mergeData+0x1f4>)
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	747b      	strb	r3, [r7, #17]
 8008310:	4b5c      	ldr	r3, [pc, #368]	@ (8008484 <mergeData+0x1f8>)
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	74bb      	strb	r3, [r7, #18]
 8008316:	4b5c      	ldr	r3, [pc, #368]	@ (8008488 <mergeData+0x1fc>)
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	74fb      	strb	r3, [r7, #19]
 800831c:	4b5b      	ldr	r3, [pc, #364]	@ (800848c <mergeData+0x200>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	753b      	strb	r3, [r7, #20]
 8008322:	4b5b      	ldr	r3, [pc, #364]	@ (8008490 <mergeData+0x204>)
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	757b      	strb	r3, [r7, #21]
 8008328:	4b5a      	ldr	r3, [pc, #360]	@ (8008494 <mergeData+0x208>)
 800832a:	781b      	ldrb	r3, [r3, #0]
 800832c:	75bb      	strb	r3, [r7, #22]
 800832e:	4b5a      	ldr	r3, [pc, #360]	@ (8008498 <mergeData+0x20c>)
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	75fb      	strb	r3, [r7, #23]
 8008334:	4b59      	ldr	r3, [pc, #356]	@ (800849c <mergeData+0x210>)
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	763b      	strb	r3, [r7, #24]
 800833a:	4b59      	ldr	r3, [pc, #356]	@ (80084a0 <mergeData+0x214>)
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	767b      	strb	r3, [r7, #25]
 8008340:	4b58      	ldr	r3, [pc, #352]	@ (80084a4 <mergeData+0x218>)
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	76bb      	strb	r3, [r7, #26]
 8008346:	4b58      	ldr	r3, [pc, #352]	@ (80084a8 <mergeData+0x21c>)
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	76fb      	strb	r3, [r7, #27]
 800834c:	4b57      	ldr	r3, [pc, #348]	@ (80084ac <mergeData+0x220>)
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	773b      	strb	r3, [r7, #28]
 8008352:	4b57      	ldr	r3, [pc, #348]	@ (80084b0 <mergeData+0x224>)
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	777b      	strb	r3, [r7, #29]
 8008358:	4b56      	ldr	r3, [pc, #344]	@ (80084b4 <mergeData+0x228>)
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	77bb      	strb	r3, [r7, #30]
 800835e:	4b56      	ldr	r3, [pc, #344]	@ (80084b8 <mergeData+0x22c>)
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	77fb      	strb	r3, [r7, #31]
 8008364:	4b55      	ldr	r3, [pc, #340]	@ (80084bc <mergeData+0x230>)
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	f887 3020 	strb.w	r3, [r7, #32]
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 800836c:	4b54      	ldr	r3, [pc, #336]	@ (80084c0 <mergeData+0x234>)
 800836e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	uint8_t uintVariables[] = {
 8008372:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[39],
 8008376:	4b52      	ldr	r3, [pc, #328]	@ (80084c0 <mergeData+0x234>)
 8008378:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	uint8_t uintVariables[] = {
 800837c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[40],
 8008380:	4b4f      	ldr	r3, [pc, #316]	@ (80084c0 <mergeData+0x234>)
 8008382:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	uint8_t uintVariables[] = {
 8008386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[41],
 800838a:	4b4d      	ldr	r3, [pc, #308]	@ (80084c0 <mergeData+0x234>)
 800838c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	uint8_t uintVariables[] = {
 8008390:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[42],
 8008394:	4b4a      	ldr	r3, [pc, #296]	@ (80084c0 <mergeData+0x234>)
 8008396:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	uint8_t uintVariables[] = {
 800839a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[43],
 800839e:	4b48      	ldr	r3, [pc, #288]	@ (80084c0 <mergeData+0x234>)
 80083a0:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	uint8_t uintVariables[] = {
 80083a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[44],
 80083a8:	4b45      	ldr	r3, [pc, #276]	@ (80084c0 <mergeData+0x234>)
 80083aa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t uintVariables[] = {
 80083ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			eepromData[45],
 80083b2:	4b43      	ldr	r3, [pc, #268]	@ (80084c0 <mergeData+0x234>)
 80083b4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t uintVariables[] = {
 80083b8:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			eepromData[46],
 80083bc:	4b40      	ldr	r3, [pc, #256]	@ (80084c0 <mergeData+0x234>)
 80083be:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	uint8_t uintVariables[] = {
 80083c2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
			eepromData[47],
 80083c6:	4b3e      	ldr	r3, [pc, #248]	@ (80084c0 <mergeData+0x234>)
 80083c8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	uint8_t uintVariables[] = {
 80083cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80083d0:	2306      	movs	r3, #6
 80083d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80083d6:	2300      	movs	r3, #0
 80083d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80083da:	e015      	b.n	8008408 <mergeData+0x17c>
	    sprintf(temp, "%u", uintVariables[i]);
 80083dc:	463a      	mov	r2, r7
 80083de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80083e0:	4413      	add	r3, r2
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	461a      	mov	r2, r3
 80083e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80083ea:	4936      	ldr	r1, [pc, #216]	@ (80084c4 <mergeData+0x238>)
 80083ec:	4618      	mov	r0, r3
 80083ee:	f004 fe97 	bl	800d120 <siprintf>
	    strcat(combinedString, temp);
 80083f2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80083f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80083fa:	4611      	mov	r1, r2
 80083fc:	4618      	mov	r0, r3
 80083fe:	f004 fef1 	bl	800d1e4 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008404:	3301      	adds	r3, #1
 8008406:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008408:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800840a:	2b2b      	cmp	r3, #43	@ 0x2b
 800840c:	d9e6      	bls.n	80083dc <mergeData+0x150>
	}

	char* result = malloc(strlen(combinedString) + 1);
 800840e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008412:	4618      	mov	r0, r3
 8008414:	f7f7 ff06 	bl	8000224 <strlen>
 8008418:	4603      	mov	r3, r0
 800841a:	3301      	adds	r3, #1
 800841c:	4618      	mov	r0, r3
 800841e:	f004 fdc9 	bl	800cfb4 <malloc>
 8008422:	4603      	mov	r3, r0
 8008424:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 8008426:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800842a:	4619      	mov	r1, r3
 800842c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800842e:	f004 ff3f 	bl	800d2b0 <strcpy>
	return result;
 8008432:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 8008434:	4618      	mov	r0, r3
 8008436:	3770      	adds	r7, #112	@ 0x70
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	200010d3 	.word	0x200010d3
 8008440:	200010c5 	.word	0x200010c5
 8008444:	200010c8 	.word	0x200010c8
 8008448:	200010c9 	.word	0x200010c9
 800844c:	200010ca 	.word	0x200010ca
 8008450:	200010d1 	.word	0x200010d1
 8008454:	200010cb 	.word	0x200010cb
 8008458:	200010cc 	.word	0x200010cc
 800845c:	200010d0 	.word	0x200010d0
 8008460:	200010cd 	.word	0x200010cd
 8008464:	200010dd 	.word	0x200010dd
 8008468:	200010ce 	.word	0x200010ce
 800846c:	200010de 	.word	0x200010de
 8008470:	200010cf 	.word	0x200010cf
 8008474:	200010df 	.word	0x200010df
 8008478:	200010d2 	.word	0x200010d2
 800847c:	200010d4 	.word	0x200010d4
 8008480:	200010d5 	.word	0x200010d5
 8008484:	200010d6 	.word	0x200010d6
 8008488:	200010d7 	.word	0x200010d7
 800848c:	200010d8 	.word	0x200010d8
 8008490:	200010d9 	.word	0x200010d9
 8008494:	200010da 	.word	0x200010da
 8008498:	200010db 	.word	0x200010db
 800849c:	200010dc 	.word	0x200010dc
 80084a0:	200010e0 	.word	0x200010e0
 80084a4:	200010e2 	.word	0x200010e2
 80084a8:	200010c1 	.word	0x200010c1
 80084ac:	200010c2 	.word	0x200010c2
 80084b0:	20000000 	.word	0x20000000
 80084b4:	20000001 	.word	0x20000001
 80084b8:	200010c3 	.word	0x200010c3
 80084bc:	200010e5 	.word	0x200010e5
 80084c0:	20000ff0 	.word	0x20000ff0
 80084c4:	0800dcec 	.word	0x0800dcec

080084c8 <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 80084ce:	4a13      	ldr	r2, [pc, #76]	@ (800851c <convertAndSendData+0x54>)
 80084d0:	2101      	movs	r1, #1
 80084d2:	2001      	movs	r0, #1
 80084d4:	f000 fa16 	bl	8008904 <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 80084d8:	4a11      	ldr	r2, [pc, #68]	@ (8008520 <convertAndSendData+0x58>)
 80084da:	2101      	movs	r1, #1
 80084dc:	2002      	movs	r0, #2
 80084de:	f000 fa11 	bl	8008904 <lcd_print>

	for(int i=0; i<2; i++) {
 80084e2:	2300      	movs	r3, #0
 80084e4:	607b      	str	r3, [r7, #4]
 80084e6:	e00c      	b.n	8008502 <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 80084e8:	f7ff fed0 	bl	800828c <mergeData>
 80084ec:	4603      	mov	r3, r0
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	4b0c      	ldr	r3, [pc, #48]	@ (8008524 <convertAndSendData+0x5c>)
 80084f2:	4a0d      	ldr	r2, [pc, #52]	@ (8008528 <convertAndSendData+0x60>)
 80084f4:	490d      	ldr	r1, [pc, #52]	@ (800852c <convertAndSendData+0x64>)
 80084f6:	480e      	ldr	r0, [pc, #56]	@ (8008530 <convertAndSendData+0x68>)
 80084f8:	f7f8 f9a4 	bl	8000844 <sendMachineData>
	for(int i=0; i<2; i++) {
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	3301      	adds	r3, #1
 8008500:	607b      	str	r3, [r7, #4]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2b01      	cmp	r3, #1
 8008506:	ddef      	ble.n	80084e8 <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 8008508:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800850c:	f000 ff54 	bl	80093b8 <HAL_Delay>
	lcd_clear();
 8008510:	f000 fa24 	bl	800895c <lcd_clear>
}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	2000179c 	.word	0x2000179c
 8008520:	200017b0 	.word	0x200017b0
 8008524:	20001088 	.word	0x20001088
 8008528:	20001074 	.word	0x20001074
 800852c:	20001068 	.word	0x20001068
 8008530:	200019dc 	.word	0x200019dc

08008534 <iotSetup>:

void iotSetup() {
 8008534:	b580      	push	{r7, lr}
 8008536:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8008538:	4b10      	ldr	r3, [pc, #64]	@ (800857c <iotSetup+0x48>)
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d016      	beq.n	800856e <iotSetup+0x3a>
		if(checkEEPROM4ID() != 1) {
 8008540:	f000 f822 	bl	8008588 <checkEEPROM4ID>
 8008544:	4603      	mov	r3, r0
 8008546:	2b01      	cmp	r3, #1
 8008548:	d001      	beq.n	800854e <iotSetup+0x1a>
			takeMachineID();
 800854a:	f7ff f985 	bl	8007858 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 800854e:	480c      	ldr	r0, [pc, #48]	@ (8008580 <iotSetup+0x4c>)
 8008550:	f7f7 fe68 	bl	8000224 <strlen>
 8008554:	4603      	mov	r3, r0
 8008556:	2b01      	cmp	r3, #1
 8008558:	d801      	bhi.n	800855e <iotSetup+0x2a>
			takeWifiSSID();
 800855a:	f7ff fb6d 	bl	8007c38 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 800855e:	4809      	ldr	r0, [pc, #36]	@ (8008584 <iotSetup+0x50>)
 8008560:	f7f7 fe60 	bl	8000224 <strlen>
 8008564:	4603      	mov	r3, r0
 8008566:	2b01      	cmp	r3, #1
 8008568:	d801      	bhi.n	800856e <iotSetup+0x3a>
			takeWifiPass();
 800856a:	f7ff fd31 	bl	8007fd0 <takeWifiPass>
			//goto takeIDSection;
		//}
	//}

	//ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
	HAL_Delay(500);
 800856e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008572:	f000 ff21 	bl	80093b8 <HAL_Delay>
	//convertAndSendData();
}
 8008576:	bf00      	nop
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	200010e3 	.word	0x200010e3
 8008580:	20001074 	.word	0x20001074
 8008584:	20001088 	.word	0x20001088

08008588 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 800858e:	4b0f      	ldr	r3, [pc, #60]	@ (80085cc <checkEEPROM4ID+0x44>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8008594:	2301      	movs	r3, #1
 8008596:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008598:	2300      	movs	r3, #0
 800859a:	607b      	str	r3, [r7, #4]
 800859c:	e00d      	b.n	80085ba <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 800859e:	4a0c      	ldr	r2, [pc, #48]	@ (80085d0 <checkEEPROM4ID+0x48>)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	4413      	add	r3, r2
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d101      	bne.n	80085ae <checkEEPROM4ID+0x26>
			returnVal = 0;
 80085aa:	2300      	movs	r3, #0
 80085ac:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3301      	adds	r3, #1
 80085b2:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	3301      	adds	r3, #1
 80085b8:	607b      	str	r3, [r7, #4]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2b0b      	cmp	r3, #11
 80085be:	ddee      	ble.n	800859e <checkEEPROM4ID+0x16>
	}

	return returnVal;
 80085c0:	68bb      	ldr	r3, [r7, #8]
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3714      	adds	r7, #20
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bc80      	pop	{r7}
 80085ca:	4770      	bx	lr
 80085cc:	20000004 	.word	0x20000004
 80085d0:	20000ff0 	.word	0x20000ff0

080085d4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af02      	add	r7, sp, #8
 80085da:	4603      	mov	r3, r0
 80085dc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80085de:	79fb      	ldrb	r3, [r7, #7]
 80085e0:	f023 030f 	bic.w	r3, r3, #15
 80085e4:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80085e6:	79fb      	ldrb	r3, [r7, #7]
 80085e8:	011b      	lsls	r3, r3, #4
 80085ea:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80085ec:	7b7b      	ldrb	r3, [r7, #13]
 80085ee:	f043 030c 	orr.w	r3, r3, #12
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80085f6:	7b7b      	ldrb	r3, [r7, #13]
 80085f8:	f043 0308 	orr.w	r3, r3, #8
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8008600:	7b3b      	ldrb	r3, [r7, #12]
 8008602:	f043 030c 	orr.w	r3, r3, #12
 8008606:	b2db      	uxtb	r3, r3
 8008608:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800860a:	7b3b      	ldrb	r3, [r7, #12]
 800860c:	f043 0308 	orr.w	r3, r3, #8
 8008610:	b2db      	uxtb	r3, r3
 8008612:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008614:	bf00      	nop
 8008616:	4825      	ldr	r0, [pc, #148]	@ (80086ac <lcd_send_cmd+0xd8>)
 8008618:	f002 fac7 	bl	800abaa <HAL_I2C_GetError>
 800861c:	4603      	mov	r3, r0
 800861e:	2b04      	cmp	r3, #4
 8008620:	d0f9      	beq.n	8008616 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008622:	bf00      	nop
 8008624:	4821      	ldr	r0, [pc, #132]	@ (80086ac <lcd_send_cmd+0xd8>)
 8008626:	f002 fab3 	bl	800ab90 <HAL_I2C_GetState>
 800862a:	4603      	mov	r3, r0
 800862c:	2b20      	cmp	r3, #32
 800862e:	d1f9      	bne.n	8008624 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008630:	4b1f      	ldr	r3, [pc, #124]	@ (80086b0 <lcd_send_cmd+0xdc>)
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d116      	bne.n	8008666 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008638:	2300      	movs	r3, #0
 800863a:	73fb      	strb	r3, [r7, #15]
 800863c:	e00f      	b.n	800865e <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800863e:	7bfb      	ldrb	r3, [r7, #15]
 8008640:	3310      	adds	r3, #16
 8008642:	443b      	add	r3, r7
 8008644:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008648:	7bfb      	ldrb	r3, [r7, #15]
 800864a:	f022 0208 	bic.w	r2, r2, #8
 800864e:	b2d2      	uxtb	r2, r2
 8008650:	3310      	adds	r3, #16
 8008652:	443b      	add	r3, r7
 8008654:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008658:	7bfb      	ldrb	r3, [r7, #15]
 800865a:	3301      	adds	r3, #1
 800865c:	73fb      	strb	r3, [r7, #15]
 800865e:	7bfb      	ldrb	r3, [r7, #15]
 8008660:	2b03      	cmp	r3, #3
 8008662:	d9ec      	bls.n	800863e <lcd_send_cmd+0x6a>
 8008664:	e015      	b.n	8008692 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008666:	2300      	movs	r3, #0
 8008668:	73bb      	strb	r3, [r7, #14]
 800866a:	e00f      	b.n	800868c <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 800866c:	7bbb      	ldrb	r3, [r7, #14]
 800866e:	3310      	adds	r3, #16
 8008670:	443b      	add	r3, r7
 8008672:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008676:	7bbb      	ldrb	r3, [r7, #14]
 8008678:	f042 0208 	orr.w	r2, r2, #8
 800867c:	b2d2      	uxtb	r2, r2
 800867e:	3310      	adds	r3, #16
 8008680:	443b      	add	r3, r7
 8008682:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	3301      	adds	r3, #1
 800868a:	73bb      	strb	r3, [r7, #14]
 800868c:	7bbb      	ldrb	r3, [r7, #14]
 800868e:	2b03      	cmp	r3, #3
 8008690:	d9ec      	bls.n	800866c <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008692:	f107 0208 	add.w	r2, r7, #8
 8008696:	2364      	movs	r3, #100	@ 0x64
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	2304      	movs	r3, #4
 800869c:	214e      	movs	r1, #78	@ 0x4e
 800869e:	4803      	ldr	r0, [pc, #12]	@ (80086ac <lcd_send_cmd+0xd8>)
 80086a0:	f001 fe16 	bl	800a2d0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80086a4:	bf00      	nop
 80086a6:	3710      	adds	r7, #16
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	20001940 	.word	0x20001940
 80086b0:	20001915 	.word	0x20001915

080086b4 <lcd_send_data>:

void lcd_send_data (char data) {
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b086      	sub	sp, #24
 80086b8:	af02      	add	r7, sp, #8
 80086ba:	4603      	mov	r3, r0
 80086bc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80086be:	79fb      	ldrb	r3, [r7, #7]
 80086c0:	f023 030f 	bic.w	r3, r3, #15
 80086c4:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 80086c6:	79fb      	ldrb	r3, [r7, #7]
 80086c8:	011b      	lsls	r3, r3, #4
 80086ca:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80086cc:	7b7b      	ldrb	r3, [r7, #13]
 80086ce:	f043 030d 	orr.w	r3, r3, #13
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80086d6:	7b7b      	ldrb	r3, [r7, #13]
 80086d8:	f043 0309 	orr.w	r3, r3, #9
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80086e0:	7b3b      	ldrb	r3, [r7, #12]
 80086e2:	f043 030d 	orr.w	r3, r3, #13
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80086ea:	7b3b      	ldrb	r3, [r7, #12]
 80086ec:	f043 0309 	orr.w	r3, r3, #9
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80086f4:	bf00      	nop
 80086f6:	4825      	ldr	r0, [pc, #148]	@ (800878c <lcd_send_data+0xd8>)
 80086f8:	f002 fa57 	bl	800abaa <HAL_I2C_GetError>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b04      	cmp	r3, #4
 8008700:	d0f9      	beq.n	80086f6 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008702:	bf00      	nop
 8008704:	4821      	ldr	r0, [pc, #132]	@ (800878c <lcd_send_data+0xd8>)
 8008706:	f002 fa43 	bl	800ab90 <HAL_I2C_GetState>
 800870a:	4603      	mov	r3, r0
 800870c:	2b20      	cmp	r3, #32
 800870e:	d1f9      	bne.n	8008704 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008710:	4b1f      	ldr	r3, [pc, #124]	@ (8008790 <lcd_send_data+0xdc>)
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d116      	bne.n	8008746 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008718:	2300      	movs	r3, #0
 800871a:	73fb      	strb	r3, [r7, #15]
 800871c:	e00f      	b.n	800873e <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 800871e:	7bfb      	ldrb	r3, [r7, #15]
 8008720:	3310      	adds	r3, #16
 8008722:	443b      	add	r3, r7
 8008724:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008728:	7bfb      	ldrb	r3, [r7, #15]
 800872a:	f022 0208 	bic.w	r2, r2, #8
 800872e:	b2d2      	uxtb	r2, r2
 8008730:	3310      	adds	r3, #16
 8008732:	443b      	add	r3, r7
 8008734:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008738:	7bfb      	ldrb	r3, [r7, #15]
 800873a:	3301      	adds	r3, #1
 800873c:	73fb      	strb	r3, [r7, #15]
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	2b03      	cmp	r3, #3
 8008742:	d9ec      	bls.n	800871e <lcd_send_data+0x6a>
 8008744:	e015      	b.n	8008772 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008746:	2300      	movs	r3, #0
 8008748:	73bb      	strb	r3, [r7, #14]
 800874a:	e00f      	b.n	800876c <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 800874c:	7bbb      	ldrb	r3, [r7, #14]
 800874e:	3310      	adds	r3, #16
 8008750:	443b      	add	r3, r7
 8008752:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008756:	7bbb      	ldrb	r3, [r7, #14]
 8008758:	f042 0208 	orr.w	r2, r2, #8
 800875c:	b2d2      	uxtb	r2, r2
 800875e:	3310      	adds	r3, #16
 8008760:	443b      	add	r3, r7
 8008762:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008766:	7bbb      	ldrb	r3, [r7, #14]
 8008768:	3301      	adds	r3, #1
 800876a:	73bb      	strb	r3, [r7, #14]
 800876c:	7bbb      	ldrb	r3, [r7, #14]
 800876e:	2b03      	cmp	r3, #3
 8008770:	d9ec      	bls.n	800874c <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008772:	f107 0208 	add.w	r2, r7, #8
 8008776:	2364      	movs	r3, #100	@ 0x64
 8008778:	9300      	str	r3, [sp, #0]
 800877a:	2304      	movs	r3, #4
 800877c:	214e      	movs	r1, #78	@ 0x4e
 800877e:	4803      	ldr	r0, [pc, #12]	@ (800878c <lcd_send_data+0xd8>)
 8008780:	f001 fda6 	bl	800a2d0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008784:	bf00      	nop
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	20001940 	.word	0x20001940
 8008790:	20001915 	.word	0x20001915

08008794 <lcd_send_string>:

void lcd_send_string (char *str) {
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
	while (*str) {
 800879c:	e006      	b.n	80087ac <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	1c5a      	adds	r2, r3, #1
 80087a2:	607a      	str	r2, [r7, #4]
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7ff ff84 	bl	80086b4 <lcd_send_data>
	while (*str) {
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d1f4      	bne.n	800879e <lcd_send_string+0xa>
	}
}
 80087b4:	bf00      	nop
 80087b6:	bf00      	nop
 80087b8:	3708      	adds	r7, #8
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
	...

080087c0 <lcd_send_char>:

void lcd_send_char(char ch) {
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b086      	sub	sp, #24
 80087c4:	af02      	add	r7, sp, #8
 80087c6:	4603      	mov	r3, r0
 80087c8:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 80087ca:	79fb      	ldrb	r3, [r7, #7]
 80087cc:	f023 030f 	bic.w	r3, r3, #15
 80087d0:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	011b      	lsls	r3, r3, #4
 80087d6:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80087d8:	7b7b      	ldrb	r3, [r7, #13]
 80087da:	f043 030d 	orr.w	r3, r3, #13
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 80087e2:	7b7b      	ldrb	r3, [r7, #13]
 80087e4:	f043 0309 	orr.w	r3, r3, #9
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80087ec:	7b3b      	ldrb	r3, [r7, #12]
 80087ee:	f043 030d 	orr.w	r3, r3, #13
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80087f6:	7b3b      	ldrb	r3, [r7, #12]
 80087f8:	f043 0309 	orr.w	r3, r3, #9
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008800:	bf00      	nop
 8008802:	4825      	ldr	r0, [pc, #148]	@ (8008898 <lcd_send_char+0xd8>)
 8008804:	f002 f9d1 	bl	800abaa <HAL_I2C_GetError>
 8008808:	4603      	mov	r3, r0
 800880a:	2b04      	cmp	r3, #4
 800880c:	d0f9      	beq.n	8008802 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800880e:	bf00      	nop
 8008810:	4821      	ldr	r0, [pc, #132]	@ (8008898 <lcd_send_char+0xd8>)
 8008812:	f002 f9bd 	bl	800ab90 <HAL_I2C_GetState>
 8008816:	4603      	mov	r3, r0
 8008818:	2b20      	cmp	r3, #32
 800881a:	d1f9      	bne.n	8008810 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 800881c:	4b1f      	ldr	r3, [pc, #124]	@ (800889c <lcd_send_char+0xdc>)
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d116      	bne.n	8008852 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8008824:	2300      	movs	r3, #0
 8008826:	73fb      	strb	r3, [r7, #15]
 8008828:	e00f      	b.n	800884a <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800882a:	7bfb      	ldrb	r3, [r7, #15]
 800882c:	3310      	adds	r3, #16
 800882e:	443b      	add	r3, r7
 8008830:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008834:	7bfb      	ldrb	r3, [r7, #15]
 8008836:	f022 0208 	bic.w	r2, r2, #8
 800883a:	b2d2      	uxtb	r2, r2
 800883c:	3310      	adds	r3, #16
 800883e:	443b      	add	r3, r7
 8008840:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008844:	7bfb      	ldrb	r3, [r7, #15]
 8008846:	3301      	adds	r3, #1
 8008848:	73fb      	strb	r3, [r7, #15]
 800884a:	7bfb      	ldrb	r3, [r7, #15]
 800884c:	2b03      	cmp	r3, #3
 800884e:	d9ec      	bls.n	800882a <lcd_send_char+0x6a>
 8008850:	e015      	b.n	800887e <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8008852:	2300      	movs	r3, #0
 8008854:	73bb      	strb	r3, [r7, #14]
 8008856:	e00f      	b.n	8008878 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8008858:	7bbb      	ldrb	r3, [r7, #14]
 800885a:	3310      	adds	r3, #16
 800885c:	443b      	add	r3, r7
 800885e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008862:	7bbb      	ldrb	r3, [r7, #14]
 8008864:	f042 0208 	orr.w	r2, r2, #8
 8008868:	b2d2      	uxtb	r2, r2
 800886a:	3310      	adds	r3, #16
 800886c:	443b      	add	r3, r7
 800886e:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008872:	7bbb      	ldrb	r3, [r7, #14]
 8008874:	3301      	adds	r3, #1
 8008876:	73bb      	strb	r3, [r7, #14]
 8008878:	7bbb      	ldrb	r3, [r7, #14]
 800887a:	2b03      	cmp	r3, #3
 800887c:	d9ec      	bls.n	8008858 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 800887e:	f107 0208 	add.w	r2, r7, #8
 8008882:	2364      	movs	r3, #100	@ 0x64
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	2304      	movs	r3, #4
 8008888:	214e      	movs	r1, #78	@ 0x4e
 800888a:	4803      	ldr	r0, [pc, #12]	@ (8008898 <lcd_send_char+0xd8>)
 800888c:	f001 fd20 	bl	800a2d0 <HAL_I2C_Master_Transmit>
}
 8008890:	bf00      	nop
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	20001940 	.word	0x20001940
 800889c:	20001915 	.word	0x20001915

080088a0 <lcd_init>:

void lcd_init (void) {
 80088a0:	b580      	push	{r7, lr}
 80088a2:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 80088a4:	2002      	movs	r0, #2
 80088a6:	f7ff fe95 	bl	80085d4 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80088aa:	2028      	movs	r0, #40	@ 0x28
 80088ac:	f7ff fe92 	bl	80085d4 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80088b0:	200c      	movs	r0, #12
 80088b2:	f7ff fe8f 	bl	80085d4 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80088b6:	2080      	movs	r0, #128	@ 0x80
 80088b8:	f7ff fe8c 	bl	80085d4 <lcd_send_cmd>
	lcd_backlight(1);
 80088bc:	2001      	movs	r0, #1
 80088be:	f000 f86d 	bl	800899c <lcd_backlight>
}
 80088c2:	bf00      	nop
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b082      	sub	sp, #8
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	4603      	mov	r3, r0
 80088ce:	460a      	mov	r2, r1
 80088d0:	71fb      	strb	r3, [r7, #7]
 80088d2:	4613      	mov	r3, r2
 80088d4:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 80088d6:	79fb      	ldrb	r3, [r7, #7]
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d106      	bne.n	80088ea <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 80088dc:	79bb      	ldrb	r3, [r7, #6]
 80088de:	337f      	adds	r3, #127	@ 0x7f
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7ff fe76 	bl	80085d4 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80088e8:	e008      	b.n	80088fc <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d105      	bne.n	80088fc <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80088f0:	79bb      	ldrb	r3, [r7, #6]
 80088f2:	3b41      	subs	r3, #65	@ 0x41
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7ff fe6c 	bl	80085d4 <lcd_send_cmd>
}
 80088fc:	bf00      	nop
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	4603      	mov	r3, r0
 800890c:	603a      	str	r2, [r7, #0]
 800890e:	71fb      	strb	r3, [r7, #7]
 8008910:	460b      	mov	r3, r1
 8008912:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8008914:	79ba      	ldrb	r2, [r7, #6]
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	4611      	mov	r1, r2
 800891a:	4618      	mov	r0, r3
 800891c:	f7ff ffd3 	bl	80088c6 <lcd_gotoxy>
	lcd_send_string(str);
 8008920:	6838      	ldr	r0, [r7, #0]
 8008922:	f7ff ff37 	bl	8008794 <lcd_send_string>
}
 8008926:	bf00      	nop
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 800892e:	b580      	push	{r7, lr}
 8008930:	b082      	sub	sp, #8
 8008932:	af00      	add	r7, sp, #0
 8008934:	4603      	mov	r3, r0
 8008936:	71fb      	strb	r3, [r7, #7]
 8008938:	460b      	mov	r3, r1
 800893a:	71bb      	strb	r3, [r7, #6]
 800893c:	4613      	mov	r3, r2
 800893e:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8008940:	79ba      	ldrb	r2, [r7, #6]
 8008942:	79fb      	ldrb	r3, [r7, #7]
 8008944:	4611      	mov	r1, r2
 8008946:	4618      	mov	r0, r3
 8008948:	f7ff ffbd 	bl	80088c6 <lcd_gotoxy>
    lcd_send_char(ch);
 800894c:	797b      	ldrb	r3, [r7, #5]
 800894e:	4618      	mov	r0, r3
 8008950:	f7ff ff36 	bl	80087c0 <lcd_send_char>
}
 8008954:	bf00      	nop
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <lcd_clear>:

void lcd_clear(void) {
 800895c:	b580      	push	{r7, lr}
 800895e:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8008960:	2001      	movs	r0, #1
 8008962:	f7ff fe37 	bl	80085d4 <lcd_send_cmd>
    HAL_Delay(2);
 8008966:	2002      	movs	r0, #2
 8008968:	f000 fd26 	bl	80093b8 <HAL_Delay>
}
 800896c:	bf00      	nop
 800896e:	bd80      	pop	{r7, pc}

08008970 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	4603      	mov	r3, r0
 8008978:	460a      	mov	r2, r1
 800897a:	71fb      	strb	r3, [r7, #7]
 800897c:	4613      	mov	r3, r2
 800897e:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8008980:	79ba      	ldrb	r2, [r7, #6]
 8008982:	79fb      	ldrb	r3, [r7, #7]
 8008984:	4611      	mov	r1, r2
 8008986:	4618      	mov	r0, r3
 8008988:	f7ff ff9d 	bl	80088c6 <lcd_gotoxy>

    lcd_send_char(' ');
 800898c:	2020      	movs	r0, #32
 800898e:	f7ff ff17 	bl	80087c0 <lcd_send_char>
}
 8008992:	bf00      	nop
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
	...

0800899c <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	4603      	mov	r3, r0
 80089a4:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 80089a6:	4a05      	ldr	r2, [pc, #20]	@ (80089bc <lcd_backlight+0x20>)
 80089a8:	79fb      	ldrb	r3, [r7, #7]
 80089aa:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 80089ac:	2000      	movs	r0, #0
 80089ae:	f7ff fe11 	bl	80085d4 <lcd_send_cmd>
}
 80089b2:	bf00      	nop
 80089b4:	3708      	adds	r7, #8
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	20001915 	.word	0x20001915

080089c0 <lcd_cursor>:

void lcd_cursor(int state) {
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b082      	sub	sp, #8
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d106      	bne.n	80089dc <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 80089ce:	200e      	movs	r0, #14
 80089d0:	f7ff fe00 	bl	80085d4 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 80089d4:	200f      	movs	r0, #15
 80089d6:	f7ff fdfd 	bl	80085d4 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 80089da:	e002      	b.n	80089e2 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 80089dc:	200c      	movs	r0, #12
 80089de:	f7ff fdf9 	bl	80085d4 <lcd_send_cmd>
}
 80089e2:	bf00      	nop
 80089e4:	3708      	adds	r7, #8
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
	...

080089ec <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80089f4:	4b04      	ldr	r3, [pc, #16]	@ (8008a08 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	3301      	adds	r3, #1
 80089fa:	4a03      	ldr	r2, [pc, #12]	@ (8008a08 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80089fc:	6013      	str	r3, [r2, #0]
}
 80089fe:	bf00      	nop
 8008a00:	370c      	adds	r7, #12
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bc80      	pop	{r7}
 8008a06:	4770      	bx	lr
 8008a08:	200010a0 	.word	0x200010a0

08008a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008a10:	f000 fc70 	bl	80092f4 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008a14:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008a18:	f000 fcce 	bl	80093b8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008a1c:	f000 f89c 	bl	8008b58 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008a20:	f000 f9be 	bl	8008da0 <MX_GPIO_Init>
  MX_CAN_Init();
 8008a24:	f000 f8de 	bl	8008be4 <MX_CAN_Init>
  MX_I2C1_Init();
 8008a28:	f000 f910 	bl	8008c4c <MX_I2C1_Init>
  MX_TIM1_Init();
 8008a2c:	f000 f93c 	bl	8008ca8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008a30:	f000 f98c 	bl	8008d4c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008a34:	2201      	movs	r2, #1
 8008a36:	2140      	movs	r1, #64	@ 0x40
 8008a38:	483e      	ldr	r0, [pc, #248]	@ (8008b34 <main+0x128>)
 8008a3a:	f001 faa4 	bl	8009f86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008a3e:	2201      	movs	r2, #1
 8008a40:	2180      	movs	r1, #128	@ 0x80
 8008a42:	483c      	ldr	r0, [pc, #240]	@ (8008b34 <main+0x128>)
 8008a44:	f001 fa9f 	bl	8009f86 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008a48:	200a      	movs	r0, #10
 8008a4a:	f000 fcb5 	bl	80093b8 <HAL_Delay>
  lcd_init();
 8008a4e:	f7ff ff27 	bl	80088a0 <lcd_init>
  HAL_Delay(10);
 8008a52:	200a      	movs	r0, #10
 8008a54:	f000 fcb0 	bl	80093b8 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 8008a58:	4837      	ldr	r0, [pc, #220]	@ (8008b38 <main+0x12c>)
 8008a5a:	f003 f947 	bl	800bcec <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008a5e:	bf00      	nop
 8008a60:	4836      	ldr	r0, [pc, #216]	@ (8008b3c <main+0x130>)
 8008a62:	f002 f8a2 	bl	800abaa <HAL_I2C_GetError>
 8008a66:	4603      	mov	r3, r0
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	d0f9      	beq.n	8008a60 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008a6c:	bf00      	nop
 8008a6e:	4833      	ldr	r0, [pc, #204]	@ (8008b3c <main+0x130>)
 8008a70:	f002 f88e 	bl	800ab90 <HAL_I2C_GetState>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b20      	cmp	r3, #32
 8008a78:	d1f9      	bne.n	8008a6e <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008a80:	482c      	ldr	r0, [pc, #176]	@ (8008b34 <main+0x128>)
 8008a82:	f001 fa80 	bl	8009f86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008a86:	2200      	movs	r2, #0
 8008a88:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008a8c:	4829      	ldr	r0, [pc, #164]	@ (8008b34 <main+0x128>)
 8008a8e:	f001 fa7a 	bl	8009f86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008a92:	2200      	movs	r2, #0
 8008a94:	2104      	movs	r1, #4
 8008a96:	4827      	ldr	r0, [pc, #156]	@ (8008b34 <main+0x128>)
 8008a98:	f001 fa75 	bl	8009f86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	2102      	movs	r1, #2
 8008aa0:	4824      	ldr	r0, [pc, #144]	@ (8008b34 <main+0x128>)
 8008aa2:	f001 fa70 	bl	8009f86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	4822      	ldr	r0, [pc, #136]	@ (8008b34 <main+0x128>)
 8008aac:	f001 fa6b 	bl	8009f86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2120      	movs	r1, #32
 8008ab4:	4822      	ldr	r0, [pc, #136]	@ (8008b40 <main+0x134>)
 8008ab6:	f001 fa66 	bl	8009f86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008aba:	2200      	movs	r2, #0
 8008abc:	2110      	movs	r1, #16
 8008abe:	4820      	ldr	r0, [pc, #128]	@ (8008b40 <main+0x134>)
 8008ac0:	f001 fa61 	bl	8009f86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	2180      	movs	r1, #128	@ 0x80
 8008ac8:	481e      	ldr	r0, [pc, #120]	@ (8008b44 <main+0x138>)
 8008aca:	f001 fa5c 	bl	8009f86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008ace:	2200      	movs	r2, #0
 8008ad0:	2140      	movs	r1, #64	@ 0x40
 8008ad2:	481c      	ldr	r0, [pc, #112]	@ (8008b44 <main+0x138>)
 8008ad4:	f001 fa57 	bl	8009f86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2120      	movs	r1, #32
 8008adc:	4819      	ldr	r0, [pc, #100]	@ (8008b44 <main+0x138>)
 8008ade:	f001 fa52 	bl	8009f86 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	2110      	movs	r1, #16
 8008ae6:	4817      	ldr	r0, [pc, #92]	@ (8008b44 <main+0x138>)
 8008ae8:	f001 fa4d 	bl	8009f86 <HAL_GPIO_WritePin>

  i2cTest();
 8008aec:	f7f8 f84e 	bl	8000b8c <i2cTest>
  HAL_Delay(100);
 8008af0:	2064      	movs	r0, #100	@ 0x64
 8008af2:	f000 fc61 	bl	80093b8 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 8008af6:	4a14      	ldr	r2, [pc, #80]	@ (8008b48 <main+0x13c>)
 8008af8:	2101      	movs	r1, #1
 8008afa:	2001      	movs	r0, #1
 8008afc:	f7ff ff02 	bl	8008904 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8008b00:	4a12      	ldr	r2, [pc, #72]	@ (8008b4c <main+0x140>)
 8008b02:	2101      	movs	r1, #1
 8008b04:	2002      	movs	r0, #2
 8008b06:	f7ff fefd 	bl	8008904 <lcd_print>
  HAL_Delay(1000);
 8008b0a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008b0e:	f000 fc53 	bl	80093b8 <HAL_Delay>
  lcd_clear();
 8008b12:	f7ff ff23 	bl	800895c <lcd_clear>

  eepromKontrol();
 8008b16:	f7f7 fb8d 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8008b1a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008b1e:	f000 fc4b 	bl	80093b8 <HAL_Delay>

  backLightTimer = millis;
 8008b22:	4b0b      	ldr	r3, [pc, #44]	@ (8008b50 <main+0x144>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a0b      	ldr	r2, [pc, #44]	@ (8008b54 <main+0x148>)
 8008b28:	6013      	str	r3, [r2, #0]

  iotSetup();
 8008b2a:	f7ff fd03 	bl	8008534 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008b2e:	f7fd f879 	bl	8005c24 <mainLoop>
 8008b32:	e7fc      	b.n	8008b2e <main+0x122>
 8008b34:	40010c00 	.word	0x40010c00
 8008b38:	20001994 	.word	0x20001994
 8008b3c:	20001940 	.word	0x20001940
 8008b40:	40011000 	.word	0x40011000
 8008b44:	40010800 	.word	0x40010800
 8008b48:	200000a0 	.word	0x200000a0
 8008b4c:	200000b4 	.word	0x200000b4
 8008b50:	200010a0 	.word	0x200010a0
 8008b54:	200010bc 	.word	0x200010bc

08008b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b090      	sub	sp, #64	@ 0x40
 8008b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008b5e:	f107 0318 	add.w	r3, r7, #24
 8008b62:	2228      	movs	r2, #40	@ 0x28
 8008b64:	2100      	movs	r1, #0
 8008b66:	4618      	mov	r0, r3
 8008b68:	f004 fb5e 	bl	800d228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008b6c:	1d3b      	adds	r3, r7, #4
 8008b6e:	2200      	movs	r2, #0
 8008b70:	601a      	str	r2, [r3, #0]
 8008b72:	605a      	str	r2, [r3, #4]
 8008b74:	609a      	str	r2, [r3, #8]
 8008b76:	60da      	str	r2, [r3, #12]
 8008b78:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008b7e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008b82:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008b84:	2300      	movs	r3, #0
 8008b86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008b90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008b94:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008b96:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8008b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008b9c:	f107 0318 	add.w	r3, r7, #24
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	f002 fc43 	bl	800b42c <HAL_RCC_OscConfig>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008bac:	f000 f9a2 	bl	8008ef4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008bb0:	230f      	movs	r3, #15
 8008bb2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008bb4:	2302      	movs	r3, #2
 8008bb6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008bbc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008bc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008bc6:	1d3b      	adds	r3, r7, #4
 8008bc8:	2102      	movs	r1, #2
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f002 feb0 	bl	800b930 <HAL_RCC_ClockConfig>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008bd6:	f000 f98d 	bl	8008ef4 <Error_Handler>
  }
}
 8008bda:	bf00      	nop
 8008bdc:	3740      	adds	r7, #64	@ 0x40
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
	...

08008be4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008be8:	4b16      	ldr	r3, [pc, #88]	@ (8008c44 <MX_CAN_Init+0x60>)
 8008bea:	4a17      	ldr	r2, [pc, #92]	@ (8008c48 <MX_CAN_Init+0x64>)
 8008bec:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008bee:	4b15      	ldr	r3, [pc, #84]	@ (8008c44 <MX_CAN_Init+0x60>)
 8008bf0:	2210      	movs	r2, #16
 8008bf2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008bf4:	4b13      	ldr	r3, [pc, #76]	@ (8008c44 <MX_CAN_Init+0x60>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008bfa:	4b12      	ldr	r3, [pc, #72]	@ (8008c44 <MX_CAN_Init+0x60>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008c00:	4b10      	ldr	r3, [pc, #64]	@ (8008c44 <MX_CAN_Init+0x60>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008c06:	4b0f      	ldr	r3, [pc, #60]	@ (8008c44 <MX_CAN_Init+0x60>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8008c44 <MX_CAN_Init+0x60>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008c12:	4b0c      	ldr	r3, [pc, #48]	@ (8008c44 <MX_CAN_Init+0x60>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008c18:	4b0a      	ldr	r3, [pc, #40]	@ (8008c44 <MX_CAN_Init+0x60>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008c1e:	4b09      	ldr	r3, [pc, #36]	@ (8008c44 <MX_CAN_Init+0x60>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008c24:	4b07      	ldr	r3, [pc, #28]	@ (8008c44 <MX_CAN_Init+0x60>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008c2a:	4b06      	ldr	r3, [pc, #24]	@ (8008c44 <MX_CAN_Init+0x60>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008c30:	4804      	ldr	r0, [pc, #16]	@ (8008c44 <MX_CAN_Init+0x60>)
 8008c32:	f000 fbe5 	bl	8009400 <HAL_CAN_Init>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008c3c:	f000 f95a 	bl	8008ef4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008c40:	bf00      	nop
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	20001918 	.word	0x20001918
 8008c48:	40006400 	.word	0x40006400

08008c4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008c50:	4b12      	ldr	r3, [pc, #72]	@ (8008c9c <MX_I2C1_Init+0x50>)
 8008c52:	4a13      	ldr	r2, [pc, #76]	@ (8008ca0 <MX_I2C1_Init+0x54>)
 8008c54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008c56:	4b11      	ldr	r3, [pc, #68]	@ (8008c9c <MX_I2C1_Init+0x50>)
 8008c58:	4a12      	ldr	r2, [pc, #72]	@ (8008ca4 <MX_I2C1_Init+0x58>)
 8008c5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8008c9c <MX_I2C1_Init+0x50>)
 8008c5e:	2200      	movs	r2, #0
 8008c60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008c62:	4b0e      	ldr	r3, [pc, #56]	@ (8008c9c <MX_I2C1_Init+0x50>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008c68:	4b0c      	ldr	r3, [pc, #48]	@ (8008c9c <MX_I2C1_Init+0x50>)
 8008c6a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008c6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008c70:	4b0a      	ldr	r3, [pc, #40]	@ (8008c9c <MX_I2C1_Init+0x50>)
 8008c72:	2200      	movs	r2, #0
 8008c74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008c76:	4b09      	ldr	r3, [pc, #36]	@ (8008c9c <MX_I2C1_Init+0x50>)
 8008c78:	2200      	movs	r2, #0
 8008c7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008c7c:	4b07      	ldr	r3, [pc, #28]	@ (8008c9c <MX_I2C1_Init+0x50>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008c82:	4b06      	ldr	r3, [pc, #24]	@ (8008c9c <MX_I2C1_Init+0x50>)
 8008c84:	2200      	movs	r2, #0
 8008c86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008c88:	4804      	ldr	r0, [pc, #16]	@ (8008c9c <MX_I2C1_Init+0x50>)
 8008c8a:	f001 f9ad 	bl	8009fe8 <HAL_I2C_Init>
 8008c8e:	4603      	mov	r3, r0
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d001      	beq.n	8008c98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008c94:	f000 f92e 	bl	8008ef4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008c98:	bf00      	nop
 8008c9a:	bd80      	pop	{r7, pc}
 8008c9c:	20001940 	.word	0x20001940
 8008ca0:	40005400 	.word	0x40005400
 8008ca4:	00061a80 	.word	0x00061a80

08008ca8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008cae:	f107 0308 	add.w	r3, r7, #8
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	601a      	str	r2, [r3, #0]
 8008cb6:	605a      	str	r2, [r3, #4]
 8008cb8:	609a      	str	r2, [r3, #8]
 8008cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008cbc:	463b      	mov	r3, r7
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	601a      	str	r2, [r3, #0]
 8008cc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8008d44 <MX_TIM1_Init+0x9c>)
 8008cc6:	4a20      	ldr	r2, [pc, #128]	@ (8008d48 <MX_TIM1_Init+0xa0>)
 8008cc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008cca:	4b1e      	ldr	r3, [pc, #120]	@ (8008d44 <MX_TIM1_Init+0x9c>)
 8008ccc:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8008cd0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8008d44 <MX_TIM1_Init+0x9c>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8008d44 <MX_TIM1_Init+0x9c>)
 8008cda:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8008cde:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ce0:	4b18      	ldr	r3, [pc, #96]	@ (8008d44 <MX_TIM1_Init+0x9c>)
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008ce6:	4b17      	ldr	r3, [pc, #92]	@ (8008d44 <MX_TIM1_Init+0x9c>)
 8008ce8:	2200      	movs	r2, #0
 8008cea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008cec:	4b15      	ldr	r3, [pc, #84]	@ (8008d44 <MX_TIM1_Init+0x9c>)
 8008cee:	2200      	movs	r2, #0
 8008cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008cf2:	4814      	ldr	r0, [pc, #80]	@ (8008d44 <MX_TIM1_Init+0x9c>)
 8008cf4:	f002 ffaa 	bl	800bc4c <HAL_TIM_Base_Init>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d001      	beq.n	8008d02 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008cfe:	f000 f8f9 	bl	8008ef4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008d02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008d06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008d08:	f107 0308 	add.w	r3, r7, #8
 8008d0c:	4619      	mov	r1, r3
 8008d0e:	480d      	ldr	r0, [pc, #52]	@ (8008d44 <MX_TIM1_Init+0x9c>)
 8008d10:	f003 f954 	bl	800bfbc <HAL_TIM_ConfigClockSource>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d001      	beq.n	8008d1e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008d1a:	f000 f8eb 	bl	8008ef4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008d22:	2300      	movs	r3, #0
 8008d24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008d26:	463b      	mov	r3, r7
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4806      	ldr	r0, [pc, #24]	@ (8008d44 <MX_TIM1_Init+0x9c>)
 8008d2c:	f003 fb42 	bl	800c3b4 <HAL_TIMEx_MasterConfigSynchronization>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d001      	beq.n	8008d3a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008d36:	f000 f8dd 	bl	8008ef4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008d3a:	bf00      	nop
 8008d3c:	3718      	adds	r7, #24
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	20001994 	.word	0x20001994
 8008d48:	40012c00 	.word	0x40012c00

08008d4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008d50:	4b11      	ldr	r3, [pc, #68]	@ (8008d98 <MX_USART1_UART_Init+0x4c>)
 8008d52:	4a12      	ldr	r2, [pc, #72]	@ (8008d9c <MX_USART1_UART_Init+0x50>)
 8008d54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008d56:	4b10      	ldr	r3, [pc, #64]	@ (8008d98 <MX_USART1_UART_Init+0x4c>)
 8008d58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008d5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8008d98 <MX_USART1_UART_Init+0x4c>)
 8008d60:	2200      	movs	r2, #0
 8008d62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008d64:	4b0c      	ldr	r3, [pc, #48]	@ (8008d98 <MX_USART1_UART_Init+0x4c>)
 8008d66:	2200      	movs	r2, #0
 8008d68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8008d98 <MX_USART1_UART_Init+0x4c>)
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008d70:	4b09      	ldr	r3, [pc, #36]	@ (8008d98 <MX_USART1_UART_Init+0x4c>)
 8008d72:	220c      	movs	r2, #12
 8008d74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008d76:	4b08      	ldr	r3, [pc, #32]	@ (8008d98 <MX_USART1_UART_Init+0x4c>)
 8008d78:	2200      	movs	r2, #0
 8008d7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008d7c:	4b06      	ldr	r3, [pc, #24]	@ (8008d98 <MX_USART1_UART_Init+0x4c>)
 8008d7e:	2200      	movs	r2, #0
 8008d80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008d82:	4805      	ldr	r0, [pc, #20]	@ (8008d98 <MX_USART1_UART_Init+0x4c>)
 8008d84:	f003 fb94 	bl	800c4b0 <HAL_UART_Init>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d001      	beq.n	8008d92 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008d8e:	f000 f8b1 	bl	8008ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008d92:	bf00      	nop
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	200019dc 	.word	0x200019dc
 8008d9c:	40013800 	.word	0x40013800

08008da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b088      	sub	sp, #32
 8008da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008da6:	f107 0310 	add.w	r3, r7, #16
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]
 8008dae:	605a      	str	r2, [r3, #4]
 8008db0:	609a      	str	r2, [r3, #8]
 8008db2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008db4:	4b4b      	ldr	r3, [pc, #300]	@ (8008ee4 <MX_GPIO_Init+0x144>)
 8008db6:	699b      	ldr	r3, [r3, #24]
 8008db8:	4a4a      	ldr	r2, [pc, #296]	@ (8008ee4 <MX_GPIO_Init+0x144>)
 8008dba:	f043 0310 	orr.w	r3, r3, #16
 8008dbe:	6193      	str	r3, [r2, #24]
 8008dc0:	4b48      	ldr	r3, [pc, #288]	@ (8008ee4 <MX_GPIO_Init+0x144>)
 8008dc2:	699b      	ldr	r3, [r3, #24]
 8008dc4:	f003 0310 	and.w	r3, r3, #16
 8008dc8:	60fb      	str	r3, [r7, #12]
 8008dca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008dcc:	4b45      	ldr	r3, [pc, #276]	@ (8008ee4 <MX_GPIO_Init+0x144>)
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	4a44      	ldr	r2, [pc, #272]	@ (8008ee4 <MX_GPIO_Init+0x144>)
 8008dd2:	f043 0320 	orr.w	r3, r3, #32
 8008dd6:	6193      	str	r3, [r2, #24]
 8008dd8:	4b42      	ldr	r3, [pc, #264]	@ (8008ee4 <MX_GPIO_Init+0x144>)
 8008dda:	699b      	ldr	r3, [r3, #24]
 8008ddc:	f003 0320 	and.w	r3, r3, #32
 8008de0:	60bb      	str	r3, [r7, #8]
 8008de2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008de4:	4b3f      	ldr	r3, [pc, #252]	@ (8008ee4 <MX_GPIO_Init+0x144>)
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	4a3e      	ldr	r2, [pc, #248]	@ (8008ee4 <MX_GPIO_Init+0x144>)
 8008dea:	f043 0304 	orr.w	r3, r3, #4
 8008dee:	6193      	str	r3, [r2, #24]
 8008df0:	4b3c      	ldr	r3, [pc, #240]	@ (8008ee4 <MX_GPIO_Init+0x144>)
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	f003 0304 	and.w	r3, r3, #4
 8008df8:	607b      	str	r3, [r7, #4]
 8008dfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008dfc:	4b39      	ldr	r3, [pc, #228]	@ (8008ee4 <MX_GPIO_Init+0x144>)
 8008dfe:	699b      	ldr	r3, [r3, #24]
 8008e00:	4a38      	ldr	r2, [pc, #224]	@ (8008ee4 <MX_GPIO_Init+0x144>)
 8008e02:	f043 0308 	orr.w	r3, r3, #8
 8008e06:	6193      	str	r3, [r2, #24]
 8008e08:	4b36      	ldr	r3, [pc, #216]	@ (8008ee4 <MX_GPIO_Init+0x144>)
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	f003 0308 	and.w	r3, r3, #8
 8008e10:	603b      	str	r3, [r7, #0]
 8008e12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008e14:	2200      	movs	r2, #0
 8008e16:	21f0      	movs	r1, #240	@ 0xf0
 8008e18:	4833      	ldr	r0, [pc, #204]	@ (8008ee8 <MX_GPIO_Init+0x148>)
 8008e1a:	f001 f8b4 	bl	8009f86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f241 0130 	movw	r1, #4144	@ 0x1030
 8008e24:	4831      	ldr	r0, [pc, #196]	@ (8008eec <MX_GPIO_Init+0x14c>)
 8008e26:	f001 f8ae 	bl	8009f86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f640 4107 	movw	r1, #3079	@ 0xc07
 8008e30:	482f      	ldr	r0, [pc, #188]	@ (8008ef0 <MX_GPIO_Init+0x150>)
 8008e32:	f001 f8a8 	bl	8009f86 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008e36:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 8008e3a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e40:	2300      	movs	r3, #0
 8008e42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e44:	f107 0310 	add.w	r3, r7, #16
 8008e48:	4619      	mov	r1, r3
 8008e4a:	4828      	ldr	r0, [pc, #160]	@ (8008eec <MX_GPIO_Init+0x14c>)
 8008e4c:	f000 fe24 	bl	8009a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008e50:	f248 130f 	movw	r3, #33039	@ 0x810f
 8008e54:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e56:	2300      	movs	r3, #0
 8008e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e5e:	f107 0310 	add.w	r3, r7, #16
 8008e62:	4619      	mov	r1, r3
 8008e64:	4820      	ldr	r0, [pc, #128]	@ (8008ee8 <MX_GPIO_Init+0x148>)
 8008e66:	f000 fe17 	bl	8009a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008e6a:	23f0      	movs	r3, #240	@ 0xf0
 8008e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e72:	2300      	movs	r3, #0
 8008e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e76:	2302      	movs	r3, #2
 8008e78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e7a:	f107 0310 	add.w	r3, r7, #16
 8008e7e:	4619      	mov	r1, r3
 8008e80:	4819      	ldr	r0, [pc, #100]	@ (8008ee8 <MX_GPIO_Init+0x148>)
 8008e82:	f000 fe09 	bl	8009a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008e86:	f241 0330 	movw	r3, #4144	@ 0x1030
 8008e8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e90:	2300      	movs	r3, #0
 8008e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e94:	2302      	movs	r3, #2
 8008e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e98:	f107 0310 	add.w	r3, r7, #16
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	4813      	ldr	r0, [pc, #76]	@ (8008eec <MX_GPIO_Init+0x14c>)
 8008ea0:	f000 fdfa 	bl	8009a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008ea4:	f640 4307 	movw	r3, #3079	@ 0xc07
 8008ea8:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008eb2:	2302      	movs	r3, #2
 8008eb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008eb6:	f107 0310 	add.w	r3, r7, #16
 8008eba:	4619      	mov	r1, r3
 8008ebc:	480c      	ldr	r0, [pc, #48]	@ (8008ef0 <MX_GPIO_Init+0x150>)
 8008ebe:	f000 fdeb 	bl	8009a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008ec2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8008ec6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ed0:	f107 0310 	add.w	r3, r7, #16
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	4806      	ldr	r0, [pc, #24]	@ (8008ef0 <MX_GPIO_Init+0x150>)
 8008ed8:	f000 fdde 	bl	8009a98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008edc:	bf00      	nop
 8008ede:	3720      	adds	r7, #32
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	40021000 	.word	0x40021000
 8008ee8:	40010800 	.word	0x40010800
 8008eec:	40011000 	.word	0x40011000
 8008ef0:	40010c00 	.word	0x40010c00

08008ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008ef8:	bf00      	nop
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bc80      	pop	{r7}
 8008efe:	4770      	bx	lr

08008f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008f06:	4b15      	ldr	r3, [pc, #84]	@ (8008f5c <HAL_MspInit+0x5c>)
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	4a14      	ldr	r2, [pc, #80]	@ (8008f5c <HAL_MspInit+0x5c>)
 8008f0c:	f043 0301 	orr.w	r3, r3, #1
 8008f10:	6193      	str	r3, [r2, #24]
 8008f12:	4b12      	ldr	r3, [pc, #72]	@ (8008f5c <HAL_MspInit+0x5c>)
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	f003 0301 	and.w	r3, r3, #1
 8008f1a:	60bb      	str	r3, [r7, #8]
 8008f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8008f5c <HAL_MspInit+0x5c>)
 8008f20:	69db      	ldr	r3, [r3, #28]
 8008f22:	4a0e      	ldr	r2, [pc, #56]	@ (8008f5c <HAL_MspInit+0x5c>)
 8008f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f28:	61d3      	str	r3, [r2, #28]
 8008f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8008f5c <HAL_MspInit+0x5c>)
 8008f2c:	69db      	ldr	r3, [r3, #28]
 8008f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008f32:	607b      	str	r3, [r7, #4]
 8008f34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008f36:	4b0a      	ldr	r3, [pc, #40]	@ (8008f60 <HAL_MspInit+0x60>)
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	60fb      	str	r3, [r7, #12]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8008f42:	60fb      	str	r3, [r7, #12]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008f4a:	60fb      	str	r3, [r7, #12]
 8008f4c:	4a04      	ldr	r2, [pc, #16]	@ (8008f60 <HAL_MspInit+0x60>)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008f52:	bf00      	nop
 8008f54:	3714      	adds	r7, #20
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bc80      	pop	{r7}
 8008f5a:	4770      	bx	lr
 8008f5c:	40021000 	.word	0x40021000
 8008f60:	40010000 	.word	0x40010000

08008f64 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b088      	sub	sp, #32
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f6c:	f107 0310 	add.w	r3, r7, #16
 8008f70:	2200      	movs	r2, #0
 8008f72:	601a      	str	r2, [r3, #0]
 8008f74:	605a      	str	r2, [r3, #4]
 8008f76:	609a      	str	r2, [r3, #8]
 8008f78:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8008ff0 <HAL_CAN_MspInit+0x8c>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d131      	bne.n	8008fe8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008f84:	4b1b      	ldr	r3, [pc, #108]	@ (8008ff4 <HAL_CAN_MspInit+0x90>)
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	4a1a      	ldr	r2, [pc, #104]	@ (8008ff4 <HAL_CAN_MspInit+0x90>)
 8008f8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008f8e:	61d3      	str	r3, [r2, #28]
 8008f90:	4b18      	ldr	r3, [pc, #96]	@ (8008ff4 <HAL_CAN_MspInit+0x90>)
 8008f92:	69db      	ldr	r3, [r3, #28]
 8008f94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f98:	60fb      	str	r3, [r7, #12]
 8008f9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f9c:	4b15      	ldr	r3, [pc, #84]	@ (8008ff4 <HAL_CAN_MspInit+0x90>)
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	4a14      	ldr	r2, [pc, #80]	@ (8008ff4 <HAL_CAN_MspInit+0x90>)
 8008fa2:	f043 0304 	orr.w	r3, r3, #4
 8008fa6:	6193      	str	r3, [r2, #24]
 8008fa8:	4b12      	ldr	r3, [pc, #72]	@ (8008ff4 <HAL_CAN_MspInit+0x90>)
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	f003 0304 	and.w	r3, r3, #4
 8008fb0:	60bb      	str	r3, [r7, #8]
 8008fb2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008fb4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008fb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fc2:	f107 0310 	add.w	r3, r7, #16
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	480b      	ldr	r0, [pc, #44]	@ (8008ff8 <HAL_CAN_MspInit+0x94>)
 8008fca:	f000 fd65 	bl	8009a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008fce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008fd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008fdc:	f107 0310 	add.w	r3, r7, #16
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	4805      	ldr	r0, [pc, #20]	@ (8008ff8 <HAL_CAN_MspInit+0x94>)
 8008fe4:	f000 fd58 	bl	8009a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008fe8:	bf00      	nop
 8008fea:	3720      	adds	r7, #32
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	40006400 	.word	0x40006400
 8008ff4:	40021000 	.word	0x40021000
 8008ff8:	40010800 	.word	0x40010800

08008ffc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b088      	sub	sp, #32
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009004:	f107 0310 	add.w	r3, r7, #16
 8009008:	2200      	movs	r2, #0
 800900a:	601a      	str	r2, [r3, #0]
 800900c:	605a      	str	r2, [r3, #4]
 800900e:	609a      	str	r2, [r3, #8]
 8009010:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4a15      	ldr	r2, [pc, #84]	@ (800906c <HAL_I2C_MspInit+0x70>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d123      	bne.n	8009064 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800901c:	4b14      	ldr	r3, [pc, #80]	@ (8009070 <HAL_I2C_MspInit+0x74>)
 800901e:	699b      	ldr	r3, [r3, #24]
 8009020:	4a13      	ldr	r2, [pc, #76]	@ (8009070 <HAL_I2C_MspInit+0x74>)
 8009022:	f043 0308 	orr.w	r3, r3, #8
 8009026:	6193      	str	r3, [r2, #24]
 8009028:	4b11      	ldr	r3, [pc, #68]	@ (8009070 <HAL_I2C_MspInit+0x74>)
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	f003 0308 	and.w	r3, r3, #8
 8009030:	60fb      	str	r3, [r7, #12]
 8009032:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009034:	23c0      	movs	r3, #192	@ 0xc0
 8009036:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009038:	2312      	movs	r3, #18
 800903a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800903c:	2303      	movs	r3, #3
 800903e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009040:	f107 0310 	add.w	r3, r7, #16
 8009044:	4619      	mov	r1, r3
 8009046:	480b      	ldr	r0, [pc, #44]	@ (8009074 <HAL_I2C_MspInit+0x78>)
 8009048:	f000 fd26 	bl	8009a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800904c:	4b08      	ldr	r3, [pc, #32]	@ (8009070 <HAL_I2C_MspInit+0x74>)
 800904e:	69db      	ldr	r3, [r3, #28]
 8009050:	4a07      	ldr	r2, [pc, #28]	@ (8009070 <HAL_I2C_MspInit+0x74>)
 8009052:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009056:	61d3      	str	r3, [r2, #28]
 8009058:	4b05      	ldr	r3, [pc, #20]	@ (8009070 <HAL_I2C_MspInit+0x74>)
 800905a:	69db      	ldr	r3, [r3, #28]
 800905c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009060:	60bb      	str	r3, [r7, #8]
 8009062:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009064:	bf00      	nop
 8009066:	3720      	adds	r7, #32
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	40005400 	.word	0x40005400
 8009070:	40021000 	.word	0x40021000
 8009074:	40010c00 	.word	0x40010c00

08009078 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a0a      	ldr	r2, [pc, #40]	@ (80090b0 <HAL_I2C_MspDeInit+0x38>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d10d      	bne.n	80090a6 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800908a:	4b0a      	ldr	r3, [pc, #40]	@ (80090b4 <HAL_I2C_MspDeInit+0x3c>)
 800908c:	69db      	ldr	r3, [r3, #28]
 800908e:	4a09      	ldr	r2, [pc, #36]	@ (80090b4 <HAL_I2C_MspDeInit+0x3c>)
 8009090:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009094:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8009096:	2140      	movs	r1, #64	@ 0x40
 8009098:	4807      	ldr	r0, [pc, #28]	@ (80090b8 <HAL_I2C_MspDeInit+0x40>)
 800909a:	f000 fe91 	bl	8009dc0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800909e:	2180      	movs	r1, #128	@ 0x80
 80090a0:	4805      	ldr	r0, [pc, #20]	@ (80090b8 <HAL_I2C_MspDeInit+0x40>)
 80090a2:	f000 fe8d 	bl	8009dc0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80090a6:	bf00      	nop
 80090a8:	3708      	adds	r7, #8
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}
 80090ae:	bf00      	nop
 80090b0:	40005400 	.word	0x40005400
 80090b4:	40021000 	.word	0x40021000
 80090b8:	40010c00 	.word	0x40010c00

080090bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a0d      	ldr	r2, [pc, #52]	@ (8009100 <HAL_TIM_Base_MspInit+0x44>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d113      	bne.n	80090f6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80090ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009104 <HAL_TIM_Base_MspInit+0x48>)
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	4a0c      	ldr	r2, [pc, #48]	@ (8009104 <HAL_TIM_Base_MspInit+0x48>)
 80090d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80090d8:	6193      	str	r3, [r2, #24]
 80090da:	4b0a      	ldr	r3, [pc, #40]	@ (8009104 <HAL_TIM_Base_MspInit+0x48>)
 80090dc:	699b      	ldr	r3, [r3, #24]
 80090de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090e2:	60fb      	str	r3, [r7, #12]
 80090e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80090e6:	2200      	movs	r2, #0
 80090e8:	2100      	movs	r1, #0
 80090ea:	2019      	movs	r0, #25
 80090ec:	f000 fb5b 	bl	80097a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80090f0:	2019      	movs	r0, #25
 80090f2:	f000 fb74 	bl	80097de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80090f6:	bf00      	nop
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	40012c00 	.word	0x40012c00
 8009104:	40021000 	.word	0x40021000

08009108 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b088      	sub	sp, #32
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009110:	f107 0310 	add.w	r3, r7, #16
 8009114:	2200      	movs	r2, #0
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	605a      	str	r2, [r3, #4]
 800911a:	609a      	str	r2, [r3, #8]
 800911c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a20      	ldr	r2, [pc, #128]	@ (80091a4 <HAL_UART_MspInit+0x9c>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d139      	bne.n	800919c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009128:	4b1f      	ldr	r3, [pc, #124]	@ (80091a8 <HAL_UART_MspInit+0xa0>)
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	4a1e      	ldr	r2, [pc, #120]	@ (80091a8 <HAL_UART_MspInit+0xa0>)
 800912e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009132:	6193      	str	r3, [r2, #24]
 8009134:	4b1c      	ldr	r3, [pc, #112]	@ (80091a8 <HAL_UART_MspInit+0xa0>)
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800913c:	60fb      	str	r3, [r7, #12]
 800913e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009140:	4b19      	ldr	r3, [pc, #100]	@ (80091a8 <HAL_UART_MspInit+0xa0>)
 8009142:	699b      	ldr	r3, [r3, #24]
 8009144:	4a18      	ldr	r2, [pc, #96]	@ (80091a8 <HAL_UART_MspInit+0xa0>)
 8009146:	f043 0304 	orr.w	r3, r3, #4
 800914a:	6193      	str	r3, [r2, #24]
 800914c:	4b16      	ldr	r3, [pc, #88]	@ (80091a8 <HAL_UART_MspInit+0xa0>)
 800914e:	699b      	ldr	r3, [r3, #24]
 8009150:	f003 0304 	and.w	r3, r3, #4
 8009154:	60bb      	str	r3, [r7, #8]
 8009156:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009158:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800915c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800915e:	2302      	movs	r3, #2
 8009160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009162:	2303      	movs	r3, #3
 8009164:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009166:	f107 0310 	add.w	r3, r7, #16
 800916a:	4619      	mov	r1, r3
 800916c:	480f      	ldr	r0, [pc, #60]	@ (80091ac <HAL_UART_MspInit+0xa4>)
 800916e:	f000 fc93 	bl	8009a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009172:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009176:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009178:	2300      	movs	r3, #0
 800917a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800917c:	2300      	movs	r3, #0
 800917e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009180:	f107 0310 	add.w	r3, r7, #16
 8009184:	4619      	mov	r1, r3
 8009186:	4809      	ldr	r0, [pc, #36]	@ (80091ac <HAL_UART_MspInit+0xa4>)
 8009188:	f000 fc86 	bl	8009a98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800918c:	2200      	movs	r2, #0
 800918e:	2100      	movs	r1, #0
 8009190:	2025      	movs	r0, #37	@ 0x25
 8009192:	f000 fb08 	bl	80097a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009196:	2025      	movs	r0, #37	@ 0x25
 8009198:	f000 fb21 	bl	80097de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800919c:	bf00      	nop
 800919e:	3720      	adds	r7, #32
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	40013800 	.word	0x40013800
 80091a8:	40021000 	.word	0x40021000
 80091ac:	40010800 	.word	0x40010800

080091b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80091b0:	b480      	push	{r7}
 80091b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80091b4:	bf00      	nop
 80091b6:	e7fd      	b.n	80091b4 <NMI_Handler+0x4>

080091b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80091b8:	b480      	push	{r7}
 80091ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80091bc:	bf00      	nop
 80091be:	e7fd      	b.n	80091bc <HardFault_Handler+0x4>

080091c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80091c0:	b480      	push	{r7}
 80091c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80091c4:	bf00      	nop
 80091c6:	e7fd      	b.n	80091c4 <MemManage_Handler+0x4>

080091c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80091c8:	b480      	push	{r7}
 80091ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80091cc:	bf00      	nop
 80091ce:	e7fd      	b.n	80091cc <BusFault_Handler+0x4>

080091d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80091d0:	b480      	push	{r7}
 80091d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80091d4:	bf00      	nop
 80091d6:	e7fd      	b.n	80091d4 <UsageFault_Handler+0x4>

080091d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80091d8:	b480      	push	{r7}
 80091da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80091dc:	bf00      	nop
 80091de:	46bd      	mov	sp, r7
 80091e0:	bc80      	pop	{r7}
 80091e2:	4770      	bx	lr

080091e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80091e4:	b480      	push	{r7}
 80091e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80091e8:	bf00      	nop
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bc80      	pop	{r7}
 80091ee:	4770      	bx	lr

080091f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80091f0:	b480      	push	{r7}
 80091f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80091f4:	bf00      	nop
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bc80      	pop	{r7}
 80091fa:	4770      	bx	lr

080091fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009200:	f000 f8be 	bl	8009380 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009204:	bf00      	nop
 8009206:	bd80      	pop	{r7, pc}

08009208 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800920c:	4802      	ldr	r0, [pc, #8]	@ (8009218 <TIM1_UP_IRQHandler+0x10>)
 800920e:	f002 fdcd 	bl	800bdac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009212:	bf00      	nop
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	20001994 	.word	0x20001994

0800921c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009220:	4802      	ldr	r0, [pc, #8]	@ (800922c <USART1_IRQHandler+0x10>)
 8009222:	f003 f9cb 	bl	800c5bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009226:	bf00      	nop
 8009228:	bd80      	pop	{r7, pc}
 800922a:	bf00      	nop
 800922c:	200019dc 	.word	0x200019dc

08009230 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009238:	4a14      	ldr	r2, [pc, #80]	@ (800928c <_sbrk+0x5c>)
 800923a:	4b15      	ldr	r3, [pc, #84]	@ (8009290 <_sbrk+0x60>)
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009244:	4b13      	ldr	r3, [pc, #76]	@ (8009294 <_sbrk+0x64>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d102      	bne.n	8009252 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800924c:	4b11      	ldr	r3, [pc, #68]	@ (8009294 <_sbrk+0x64>)
 800924e:	4a12      	ldr	r2, [pc, #72]	@ (8009298 <_sbrk+0x68>)
 8009250:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009252:	4b10      	ldr	r3, [pc, #64]	@ (8009294 <_sbrk+0x64>)
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4413      	add	r3, r2
 800925a:	693a      	ldr	r2, [r7, #16]
 800925c:	429a      	cmp	r2, r3
 800925e:	d207      	bcs.n	8009270 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009260:	f003 fffa 	bl	800d258 <__errno>
 8009264:	4603      	mov	r3, r0
 8009266:	220c      	movs	r2, #12
 8009268:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800926a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800926e:	e009      	b.n	8009284 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009270:	4b08      	ldr	r3, [pc, #32]	@ (8009294 <_sbrk+0x64>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009276:	4b07      	ldr	r3, [pc, #28]	@ (8009294 <_sbrk+0x64>)
 8009278:	681a      	ldr	r2, [r3, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4413      	add	r3, r2
 800927e:	4a05      	ldr	r2, [pc, #20]	@ (8009294 <_sbrk+0x64>)
 8009280:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009282:	68fb      	ldr	r3, [r7, #12]
}
 8009284:	4618      	mov	r0, r3
 8009286:	3718      	adds	r7, #24
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	2000c000 	.word	0x2000c000
 8009290:	00000400 	.word	0x00000400
 8009294:	20001a24 	.word	0x20001a24
 8009298:	20001b78 	.word	0x20001b78

0800929c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800929c:	b480      	push	{r7}
 800929e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80092a0:	bf00      	nop
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bc80      	pop	{r7}
 80092a6:	4770      	bx	lr

080092a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80092a8:	480c      	ldr	r0, [pc, #48]	@ (80092dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80092aa:	490d      	ldr	r1, [pc, #52]	@ (80092e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80092ac:	4a0d      	ldr	r2, [pc, #52]	@ (80092e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80092ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80092b0:	e002      	b.n	80092b8 <LoopCopyDataInit>

080092b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80092b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80092b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80092b6:	3304      	adds	r3, #4

080092b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80092b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80092ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80092bc:	d3f9      	bcc.n	80092b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80092be:	4a0a      	ldr	r2, [pc, #40]	@ (80092e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80092c0:	4c0a      	ldr	r4, [pc, #40]	@ (80092ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80092c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80092c4:	e001      	b.n	80092ca <LoopFillZerobss>

080092c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80092c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80092c8:	3204      	adds	r2, #4

080092ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80092ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80092cc:	d3fb      	bcc.n	80092c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80092ce:	f7ff ffe5 	bl	800929c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80092d2:	f003 ffc7 	bl	800d264 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80092d6:	f7ff fb99 	bl	8008a0c <main>
  bx lr
 80092da:	4770      	bx	lr
  ldr r0, =_sdata
 80092dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80092e0:	20000fd4 	.word	0x20000fd4
  ldr r2, =_sidata
 80092e4:	0800dd84 	.word	0x0800dd84
  ldr r2, =_sbss
 80092e8:	20000fd4 	.word	0x20000fd4
  ldr r4, =_ebss
 80092ec:	20001b74 	.word	0x20001b74

080092f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80092f0:	e7fe      	b.n	80092f0 <ADC1_2_IRQHandler>
	...

080092f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80092f8:	4b08      	ldr	r3, [pc, #32]	@ (800931c <HAL_Init+0x28>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a07      	ldr	r2, [pc, #28]	@ (800931c <HAL_Init+0x28>)
 80092fe:	f043 0310 	orr.w	r3, r3, #16
 8009302:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009304:	2003      	movs	r0, #3
 8009306:	f000 fa43 	bl	8009790 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800930a:	200f      	movs	r0, #15
 800930c:	f000 f808 	bl	8009320 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009310:	f7ff fdf6 	bl	8008f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	bd80      	pop	{r7, pc}
 800931a:	bf00      	nop
 800931c:	40022000 	.word	0x40022000

08009320 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009328:	4b12      	ldr	r3, [pc, #72]	@ (8009374 <HAL_InitTick+0x54>)
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	4b12      	ldr	r3, [pc, #72]	@ (8009378 <HAL_InitTick+0x58>)
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	4619      	mov	r1, r3
 8009332:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009336:	fbb3 f3f1 	udiv	r3, r3, r1
 800933a:	fbb2 f3f3 	udiv	r3, r2, r3
 800933e:	4618      	mov	r0, r3
 8009340:	f000 fa5b 	bl	80097fa <HAL_SYSTICK_Config>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d001      	beq.n	800934e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e00e      	b.n	800936c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2b0f      	cmp	r3, #15
 8009352:	d80a      	bhi.n	800936a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009354:	2200      	movs	r2, #0
 8009356:	6879      	ldr	r1, [r7, #4]
 8009358:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800935c:	f000 fa23 	bl	80097a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009360:	4a06      	ldr	r2, [pc, #24]	@ (800937c <HAL_InitTick+0x5c>)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	e000      	b.n	800936c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
}
 800936c:	4618      	mov	r0, r3
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}
 8009374:	20000f78 	.word	0x20000f78
 8009378:	20000f80 	.word	0x20000f80
 800937c:	20000f7c 	.word	0x20000f7c

08009380 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009380:	b480      	push	{r7}
 8009382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009384:	4b05      	ldr	r3, [pc, #20]	@ (800939c <HAL_IncTick+0x1c>)
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	461a      	mov	r2, r3
 800938a:	4b05      	ldr	r3, [pc, #20]	@ (80093a0 <HAL_IncTick+0x20>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4413      	add	r3, r2
 8009390:	4a03      	ldr	r2, [pc, #12]	@ (80093a0 <HAL_IncTick+0x20>)
 8009392:	6013      	str	r3, [r2, #0]
}
 8009394:	bf00      	nop
 8009396:	46bd      	mov	sp, r7
 8009398:	bc80      	pop	{r7}
 800939a:	4770      	bx	lr
 800939c:	20000f80 	.word	0x20000f80
 80093a0:	20001a28 	.word	0x20001a28

080093a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80093a4:	b480      	push	{r7}
 80093a6:	af00      	add	r7, sp, #0
  return uwTick;
 80093a8:	4b02      	ldr	r3, [pc, #8]	@ (80093b4 <HAL_GetTick+0x10>)
 80093aa:	681b      	ldr	r3, [r3, #0]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bc80      	pop	{r7}
 80093b2:	4770      	bx	lr
 80093b4:	20001a28 	.word	0x20001a28

080093b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80093c0:	f7ff fff0 	bl	80093a4 <HAL_GetTick>
 80093c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093d0:	d005      	beq.n	80093de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80093d2:	4b0a      	ldr	r3, [pc, #40]	@ (80093fc <HAL_Delay+0x44>)
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	461a      	mov	r2, r3
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	4413      	add	r3, r2
 80093dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80093de:	bf00      	nop
 80093e0:	f7ff ffe0 	bl	80093a4 <HAL_GetTick>
 80093e4:	4602      	mov	r2, r0
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	68fa      	ldr	r2, [r7, #12]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d8f7      	bhi.n	80093e0 <HAL_Delay+0x28>
  {
  }
}
 80093f0:	bf00      	nop
 80093f2:	bf00      	nop
 80093f4:	3710      	adds	r7, #16
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	20000f80 	.word	0x20000f80

08009400 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d101      	bne.n	8009412 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	e0ed      	b.n	80095ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009418:	b2db      	uxtb	r3, r3
 800941a:	2b00      	cmp	r3, #0
 800941c:	d102      	bne.n	8009424 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f7ff fda0 	bl	8008f64 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f042 0201 	orr.w	r2, r2, #1
 8009432:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009434:	f7ff ffb6 	bl	80093a4 <HAL_GetTick>
 8009438:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800943a:	e012      	b.n	8009462 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800943c:	f7ff ffb2 	bl	80093a4 <HAL_GetTick>
 8009440:	4602      	mov	r2, r0
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	2b0a      	cmp	r3, #10
 8009448:	d90b      	bls.n	8009462 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800944e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2205      	movs	r2, #5
 800945a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	e0c5      	b.n	80095ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	f003 0301 	and.w	r3, r3, #1
 800946c:	2b00      	cmp	r3, #0
 800946e:	d0e5      	beq.n	800943c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f022 0202 	bic.w	r2, r2, #2
 800947e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009480:	f7ff ff90 	bl	80093a4 <HAL_GetTick>
 8009484:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009486:	e012      	b.n	80094ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009488:	f7ff ff8c 	bl	80093a4 <HAL_GetTick>
 800948c:	4602      	mov	r2, r0
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	2b0a      	cmp	r3, #10
 8009494:	d90b      	bls.n	80094ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800949a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2205      	movs	r2, #5
 80094a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	e09f      	b.n	80095ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	f003 0302 	and.w	r3, r3, #2
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1e5      	bne.n	8009488 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	7e1b      	ldrb	r3, [r3, #24]
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d108      	bne.n	80094d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	e007      	b.n	80094e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80094e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	7e5b      	ldrb	r3, [r3, #25]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d108      	bne.n	8009500 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80094fc:	601a      	str	r2, [r3, #0]
 80094fe:	e007      	b.n	8009510 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800950e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	7e9b      	ldrb	r3, [r3, #26]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d108      	bne.n	800952a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f042 0220 	orr.w	r2, r2, #32
 8009526:	601a      	str	r2, [r3, #0]
 8009528:	e007      	b.n	800953a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f022 0220 	bic.w	r2, r2, #32
 8009538:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	7edb      	ldrb	r3, [r3, #27]
 800953e:	2b01      	cmp	r3, #1
 8009540:	d108      	bne.n	8009554 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f022 0210 	bic.w	r2, r2, #16
 8009550:	601a      	str	r2, [r3, #0]
 8009552:	e007      	b.n	8009564 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f042 0210 	orr.w	r2, r2, #16
 8009562:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	7f1b      	ldrb	r3, [r3, #28]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d108      	bne.n	800957e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f042 0208 	orr.w	r2, r2, #8
 800957a:	601a      	str	r2, [r3, #0]
 800957c:	e007      	b.n	800958e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f022 0208 	bic.w	r2, r2, #8
 800958c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	7f5b      	ldrb	r3, [r3, #29]
 8009592:	2b01      	cmp	r3, #1
 8009594:	d108      	bne.n	80095a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f042 0204 	orr.w	r2, r2, #4
 80095a4:	601a      	str	r2, [r3, #0]
 80095a6:	e007      	b.n	80095b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	681a      	ldr	r2, [r3, #0]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f022 0204 	bic.w	r2, r2, #4
 80095b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	689a      	ldr	r2, [r3, #8]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	431a      	orrs	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	691b      	ldr	r3, [r3, #16]
 80095c6:	431a      	orrs	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	695b      	ldr	r3, [r3, #20]
 80095cc:	ea42 0103 	orr.w	r1, r2, r3
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	1e5a      	subs	r2, r3, #1
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	430a      	orrs	r2, r1
 80095dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3710      	adds	r7, #16
 80095f2:	46bd      	mov	sp, r7
 80095f4:	bd80      	pop	{r7, pc}
	...

080095f8 <__NVIC_SetPriorityGrouping>:
{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f003 0307 	and.w	r3, r3, #7
 8009606:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009608:	4b0c      	ldr	r3, [pc, #48]	@ (800963c <__NVIC_SetPriorityGrouping+0x44>)
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800960e:	68ba      	ldr	r2, [r7, #8]
 8009610:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009614:	4013      	ands	r3, r2
 8009616:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009620:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800962a:	4a04      	ldr	r2, [pc, #16]	@ (800963c <__NVIC_SetPriorityGrouping+0x44>)
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	60d3      	str	r3, [r2, #12]
}
 8009630:	bf00      	nop
 8009632:	3714      	adds	r7, #20
 8009634:	46bd      	mov	sp, r7
 8009636:	bc80      	pop	{r7}
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	e000ed00 	.word	0xe000ed00

08009640 <__NVIC_GetPriorityGrouping>:
{
 8009640:	b480      	push	{r7}
 8009642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009644:	4b04      	ldr	r3, [pc, #16]	@ (8009658 <__NVIC_GetPriorityGrouping+0x18>)
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	0a1b      	lsrs	r3, r3, #8
 800964a:	f003 0307 	and.w	r3, r3, #7
}
 800964e:	4618      	mov	r0, r3
 8009650:	46bd      	mov	sp, r7
 8009652:	bc80      	pop	{r7}
 8009654:	4770      	bx	lr
 8009656:	bf00      	nop
 8009658:	e000ed00 	.word	0xe000ed00

0800965c <__NVIC_EnableIRQ>:
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	4603      	mov	r3, r0
 8009664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800966a:	2b00      	cmp	r3, #0
 800966c:	db0b      	blt.n	8009686 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800966e:	79fb      	ldrb	r3, [r7, #7]
 8009670:	f003 021f 	and.w	r2, r3, #31
 8009674:	4906      	ldr	r1, [pc, #24]	@ (8009690 <__NVIC_EnableIRQ+0x34>)
 8009676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800967a:	095b      	lsrs	r3, r3, #5
 800967c:	2001      	movs	r0, #1
 800967e:	fa00 f202 	lsl.w	r2, r0, r2
 8009682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009686:	bf00      	nop
 8009688:	370c      	adds	r7, #12
 800968a:	46bd      	mov	sp, r7
 800968c:	bc80      	pop	{r7}
 800968e:	4770      	bx	lr
 8009690:	e000e100 	.word	0xe000e100

08009694 <__NVIC_SetPriority>:
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	4603      	mov	r3, r0
 800969c:	6039      	str	r1, [r7, #0]
 800969e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80096a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	db0a      	blt.n	80096be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	b2da      	uxtb	r2, r3
 80096ac:	490c      	ldr	r1, [pc, #48]	@ (80096e0 <__NVIC_SetPriority+0x4c>)
 80096ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096b2:	0112      	lsls	r2, r2, #4
 80096b4:	b2d2      	uxtb	r2, r2
 80096b6:	440b      	add	r3, r1
 80096b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80096bc:	e00a      	b.n	80096d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	b2da      	uxtb	r2, r3
 80096c2:	4908      	ldr	r1, [pc, #32]	@ (80096e4 <__NVIC_SetPriority+0x50>)
 80096c4:	79fb      	ldrb	r3, [r7, #7]
 80096c6:	f003 030f 	and.w	r3, r3, #15
 80096ca:	3b04      	subs	r3, #4
 80096cc:	0112      	lsls	r2, r2, #4
 80096ce:	b2d2      	uxtb	r2, r2
 80096d0:	440b      	add	r3, r1
 80096d2:	761a      	strb	r2, [r3, #24]
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	bc80      	pop	{r7}
 80096dc:	4770      	bx	lr
 80096de:	bf00      	nop
 80096e0:	e000e100 	.word	0xe000e100
 80096e4:	e000ed00 	.word	0xe000ed00

080096e8 <NVIC_EncodePriority>:
{
 80096e8:	b480      	push	{r7}
 80096ea:	b089      	sub	sp, #36	@ 0x24
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	f003 0307 	and.w	r3, r3, #7
 80096fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	f1c3 0307 	rsb	r3, r3, #7
 8009702:	2b04      	cmp	r3, #4
 8009704:	bf28      	it	cs
 8009706:	2304      	movcs	r3, #4
 8009708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	3304      	adds	r3, #4
 800970e:	2b06      	cmp	r3, #6
 8009710:	d902      	bls.n	8009718 <NVIC_EncodePriority+0x30>
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	3b03      	subs	r3, #3
 8009716:	e000      	b.n	800971a <NVIC_EncodePriority+0x32>
 8009718:	2300      	movs	r3, #0
 800971a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800971c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	fa02 f303 	lsl.w	r3, r2, r3
 8009726:	43da      	mvns	r2, r3
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	401a      	ands	r2, r3
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009730:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	fa01 f303 	lsl.w	r3, r1, r3
 800973a:	43d9      	mvns	r1, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009740:	4313      	orrs	r3, r2
}
 8009742:	4618      	mov	r0, r3
 8009744:	3724      	adds	r7, #36	@ 0x24
 8009746:	46bd      	mov	sp, r7
 8009748:	bc80      	pop	{r7}
 800974a:	4770      	bx	lr

0800974c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b082      	sub	sp, #8
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	3b01      	subs	r3, #1
 8009758:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800975c:	d301      	bcc.n	8009762 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800975e:	2301      	movs	r3, #1
 8009760:	e00f      	b.n	8009782 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009762:	4a0a      	ldr	r2, [pc, #40]	@ (800978c <SysTick_Config+0x40>)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	3b01      	subs	r3, #1
 8009768:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800976a:	210f      	movs	r1, #15
 800976c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009770:	f7ff ff90 	bl	8009694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009774:	4b05      	ldr	r3, [pc, #20]	@ (800978c <SysTick_Config+0x40>)
 8009776:	2200      	movs	r2, #0
 8009778:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800977a:	4b04      	ldr	r3, [pc, #16]	@ (800978c <SysTick_Config+0x40>)
 800977c:	2207      	movs	r2, #7
 800977e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	e000e010 	.word	0xe000e010

08009790 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f7ff ff2d 	bl	80095f8 <__NVIC_SetPriorityGrouping>
}
 800979e:	bf00      	nop
 80097a0:	3708      	adds	r7, #8
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b086      	sub	sp, #24
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	4603      	mov	r3, r0
 80097ae:	60b9      	str	r1, [r7, #8]
 80097b0:	607a      	str	r2, [r7, #4]
 80097b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80097b4:	2300      	movs	r3, #0
 80097b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80097b8:	f7ff ff42 	bl	8009640 <__NVIC_GetPriorityGrouping>
 80097bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80097be:	687a      	ldr	r2, [r7, #4]
 80097c0:	68b9      	ldr	r1, [r7, #8]
 80097c2:	6978      	ldr	r0, [r7, #20]
 80097c4:	f7ff ff90 	bl	80096e8 <NVIC_EncodePriority>
 80097c8:	4602      	mov	r2, r0
 80097ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097ce:	4611      	mov	r1, r2
 80097d0:	4618      	mov	r0, r3
 80097d2:	f7ff ff5f 	bl	8009694 <__NVIC_SetPriority>
}
 80097d6:	bf00      	nop
 80097d8:	3718      	adds	r7, #24
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b082      	sub	sp, #8
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	4603      	mov	r3, r0
 80097e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80097e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7ff ff35 	bl	800965c <__NVIC_EnableIRQ>
}
 80097f2:	bf00      	nop
 80097f4:	3708      	adds	r7, #8
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}

080097fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b082      	sub	sp, #8
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f7ff ffa2 	bl	800974c <SysTick_Config>
 8009808:	4603      	mov	r3, r0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3708      	adds	r7, #8
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}

08009812 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009812:	b480      	push	{r7}
 8009814:	b085      	sub	sp, #20
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009824:	b2db      	uxtb	r3, r3
 8009826:	2b02      	cmp	r3, #2
 8009828:	d008      	beq.n	800983c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2204      	movs	r2, #4
 800982e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e020      	b.n	800987e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f022 020e 	bic.w	r2, r2, #14
 800984a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f022 0201 	bic.w	r2, r2, #1
 800985a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009864:	2101      	movs	r1, #1
 8009866:	fa01 f202 	lsl.w	r2, r1, r2
 800986a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800987c:	7bfb      	ldrb	r3, [r7, #15]
}
 800987e:	4618      	mov	r0, r3
 8009880:	3714      	adds	r7, #20
 8009882:	46bd      	mov	sp, r7
 8009884:	bc80      	pop	{r7}
 8009886:	4770      	bx	lr

08009888 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009890:	2300      	movs	r3, #0
 8009892:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b02      	cmp	r3, #2
 800989e:	d005      	beq.n	80098ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2204      	movs	r2, #4
 80098a4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	73fb      	strb	r3, [r7, #15]
 80098aa:	e0d6      	b.n	8009a5a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f022 020e 	bic.w	r2, r2, #14
 80098ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f022 0201 	bic.w	r2, r2, #1
 80098ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	461a      	mov	r2, r3
 80098d2:	4b64      	ldr	r3, [pc, #400]	@ (8009a64 <HAL_DMA_Abort_IT+0x1dc>)
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d958      	bls.n	800998a <HAL_DMA_Abort_IT+0x102>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a62      	ldr	r2, [pc, #392]	@ (8009a68 <HAL_DMA_Abort_IT+0x1e0>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d04f      	beq.n	8009982 <HAL_DMA_Abort_IT+0xfa>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a61      	ldr	r2, [pc, #388]	@ (8009a6c <HAL_DMA_Abort_IT+0x1e4>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d048      	beq.n	800997e <HAL_DMA_Abort_IT+0xf6>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a5f      	ldr	r2, [pc, #380]	@ (8009a70 <HAL_DMA_Abort_IT+0x1e8>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d040      	beq.n	8009978 <HAL_DMA_Abort_IT+0xf0>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a5e      	ldr	r2, [pc, #376]	@ (8009a74 <HAL_DMA_Abort_IT+0x1ec>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d038      	beq.n	8009972 <HAL_DMA_Abort_IT+0xea>
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	4a5c      	ldr	r2, [pc, #368]	@ (8009a78 <HAL_DMA_Abort_IT+0x1f0>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d030      	beq.n	800996c <HAL_DMA_Abort_IT+0xe4>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a5b      	ldr	r2, [pc, #364]	@ (8009a7c <HAL_DMA_Abort_IT+0x1f4>)
 8009910:	4293      	cmp	r3, r2
 8009912:	d028      	beq.n	8009966 <HAL_DMA_Abort_IT+0xde>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4a52      	ldr	r2, [pc, #328]	@ (8009a64 <HAL_DMA_Abort_IT+0x1dc>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d020      	beq.n	8009960 <HAL_DMA_Abort_IT+0xd8>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	4a57      	ldr	r2, [pc, #348]	@ (8009a80 <HAL_DMA_Abort_IT+0x1f8>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d019      	beq.n	800995c <HAL_DMA_Abort_IT+0xd4>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a55      	ldr	r2, [pc, #340]	@ (8009a84 <HAL_DMA_Abort_IT+0x1fc>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d012      	beq.n	8009958 <HAL_DMA_Abort_IT+0xd0>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	4a54      	ldr	r2, [pc, #336]	@ (8009a88 <HAL_DMA_Abort_IT+0x200>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d00a      	beq.n	8009952 <HAL_DMA_Abort_IT+0xca>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a52      	ldr	r2, [pc, #328]	@ (8009a8c <HAL_DMA_Abort_IT+0x204>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d102      	bne.n	800994c <HAL_DMA_Abort_IT+0xc4>
 8009946:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800994a:	e01b      	b.n	8009984 <HAL_DMA_Abort_IT+0xfc>
 800994c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009950:	e018      	b.n	8009984 <HAL_DMA_Abort_IT+0xfc>
 8009952:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009956:	e015      	b.n	8009984 <HAL_DMA_Abort_IT+0xfc>
 8009958:	2310      	movs	r3, #16
 800995a:	e013      	b.n	8009984 <HAL_DMA_Abort_IT+0xfc>
 800995c:	2301      	movs	r3, #1
 800995e:	e011      	b.n	8009984 <HAL_DMA_Abort_IT+0xfc>
 8009960:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009964:	e00e      	b.n	8009984 <HAL_DMA_Abort_IT+0xfc>
 8009966:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800996a:	e00b      	b.n	8009984 <HAL_DMA_Abort_IT+0xfc>
 800996c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009970:	e008      	b.n	8009984 <HAL_DMA_Abort_IT+0xfc>
 8009972:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009976:	e005      	b.n	8009984 <HAL_DMA_Abort_IT+0xfc>
 8009978:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800997c:	e002      	b.n	8009984 <HAL_DMA_Abort_IT+0xfc>
 800997e:	2310      	movs	r3, #16
 8009980:	e000      	b.n	8009984 <HAL_DMA_Abort_IT+0xfc>
 8009982:	2301      	movs	r3, #1
 8009984:	4a42      	ldr	r2, [pc, #264]	@ (8009a90 <HAL_DMA_Abort_IT+0x208>)
 8009986:	6053      	str	r3, [r2, #4]
 8009988:	e057      	b.n	8009a3a <HAL_DMA_Abort_IT+0x1b2>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a36      	ldr	r2, [pc, #216]	@ (8009a68 <HAL_DMA_Abort_IT+0x1e0>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d04f      	beq.n	8009a34 <HAL_DMA_Abort_IT+0x1ac>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a34      	ldr	r2, [pc, #208]	@ (8009a6c <HAL_DMA_Abort_IT+0x1e4>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d048      	beq.n	8009a30 <HAL_DMA_Abort_IT+0x1a8>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a33      	ldr	r2, [pc, #204]	@ (8009a70 <HAL_DMA_Abort_IT+0x1e8>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d040      	beq.n	8009a2a <HAL_DMA_Abort_IT+0x1a2>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a31      	ldr	r2, [pc, #196]	@ (8009a74 <HAL_DMA_Abort_IT+0x1ec>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d038      	beq.n	8009a24 <HAL_DMA_Abort_IT+0x19c>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a30      	ldr	r2, [pc, #192]	@ (8009a78 <HAL_DMA_Abort_IT+0x1f0>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d030      	beq.n	8009a1e <HAL_DMA_Abort_IT+0x196>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a2e      	ldr	r2, [pc, #184]	@ (8009a7c <HAL_DMA_Abort_IT+0x1f4>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d028      	beq.n	8009a18 <HAL_DMA_Abort_IT+0x190>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a26      	ldr	r2, [pc, #152]	@ (8009a64 <HAL_DMA_Abort_IT+0x1dc>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d020      	beq.n	8009a12 <HAL_DMA_Abort_IT+0x18a>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a2a      	ldr	r2, [pc, #168]	@ (8009a80 <HAL_DMA_Abort_IT+0x1f8>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d019      	beq.n	8009a0e <HAL_DMA_Abort_IT+0x186>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a29      	ldr	r2, [pc, #164]	@ (8009a84 <HAL_DMA_Abort_IT+0x1fc>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d012      	beq.n	8009a0a <HAL_DMA_Abort_IT+0x182>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a27      	ldr	r2, [pc, #156]	@ (8009a88 <HAL_DMA_Abort_IT+0x200>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d00a      	beq.n	8009a04 <HAL_DMA_Abort_IT+0x17c>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a26      	ldr	r2, [pc, #152]	@ (8009a8c <HAL_DMA_Abort_IT+0x204>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d102      	bne.n	80099fe <HAL_DMA_Abort_IT+0x176>
 80099f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80099fc:	e01b      	b.n	8009a36 <HAL_DMA_Abort_IT+0x1ae>
 80099fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009a02:	e018      	b.n	8009a36 <HAL_DMA_Abort_IT+0x1ae>
 8009a04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009a08:	e015      	b.n	8009a36 <HAL_DMA_Abort_IT+0x1ae>
 8009a0a:	2310      	movs	r3, #16
 8009a0c:	e013      	b.n	8009a36 <HAL_DMA_Abort_IT+0x1ae>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e011      	b.n	8009a36 <HAL_DMA_Abort_IT+0x1ae>
 8009a12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009a16:	e00e      	b.n	8009a36 <HAL_DMA_Abort_IT+0x1ae>
 8009a18:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009a1c:	e00b      	b.n	8009a36 <HAL_DMA_Abort_IT+0x1ae>
 8009a1e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009a22:	e008      	b.n	8009a36 <HAL_DMA_Abort_IT+0x1ae>
 8009a24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009a28:	e005      	b.n	8009a36 <HAL_DMA_Abort_IT+0x1ae>
 8009a2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009a2e:	e002      	b.n	8009a36 <HAL_DMA_Abort_IT+0x1ae>
 8009a30:	2310      	movs	r3, #16
 8009a32:	e000      	b.n	8009a36 <HAL_DMA_Abort_IT+0x1ae>
 8009a34:	2301      	movs	r3, #1
 8009a36:	4a17      	ldr	r2, [pc, #92]	@ (8009a94 <HAL_DMA_Abort_IT+0x20c>)
 8009a38:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d003      	beq.n	8009a5a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	4798      	blx	r3
    } 
  }
  return status;
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	40020080 	.word	0x40020080
 8009a68:	40020008 	.word	0x40020008
 8009a6c:	4002001c 	.word	0x4002001c
 8009a70:	40020030 	.word	0x40020030
 8009a74:	40020044 	.word	0x40020044
 8009a78:	40020058 	.word	0x40020058
 8009a7c:	4002006c 	.word	0x4002006c
 8009a80:	40020408 	.word	0x40020408
 8009a84:	4002041c 	.word	0x4002041c
 8009a88:	40020430 	.word	0x40020430
 8009a8c:	40020444 	.word	0x40020444
 8009a90:	40020400 	.word	0x40020400
 8009a94:	40020000 	.word	0x40020000

08009a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b08b      	sub	sp, #44	@ 0x2c
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009aaa:	e179      	b.n	8009da0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009aac:	2201      	movs	r2, #1
 8009aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	69fa      	ldr	r2, [r7, #28]
 8009abc:	4013      	ands	r3, r2
 8009abe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009ac0:	69ba      	ldr	r2, [r7, #24]
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	f040 8168 	bne.w	8009d9a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	4a96      	ldr	r2, [pc, #600]	@ (8009d28 <HAL_GPIO_Init+0x290>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d05e      	beq.n	8009b92 <HAL_GPIO_Init+0xfa>
 8009ad4:	4a94      	ldr	r2, [pc, #592]	@ (8009d28 <HAL_GPIO_Init+0x290>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d875      	bhi.n	8009bc6 <HAL_GPIO_Init+0x12e>
 8009ada:	4a94      	ldr	r2, [pc, #592]	@ (8009d2c <HAL_GPIO_Init+0x294>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d058      	beq.n	8009b92 <HAL_GPIO_Init+0xfa>
 8009ae0:	4a92      	ldr	r2, [pc, #584]	@ (8009d2c <HAL_GPIO_Init+0x294>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d86f      	bhi.n	8009bc6 <HAL_GPIO_Init+0x12e>
 8009ae6:	4a92      	ldr	r2, [pc, #584]	@ (8009d30 <HAL_GPIO_Init+0x298>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d052      	beq.n	8009b92 <HAL_GPIO_Init+0xfa>
 8009aec:	4a90      	ldr	r2, [pc, #576]	@ (8009d30 <HAL_GPIO_Init+0x298>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d869      	bhi.n	8009bc6 <HAL_GPIO_Init+0x12e>
 8009af2:	4a90      	ldr	r2, [pc, #576]	@ (8009d34 <HAL_GPIO_Init+0x29c>)
 8009af4:	4293      	cmp	r3, r2
 8009af6:	d04c      	beq.n	8009b92 <HAL_GPIO_Init+0xfa>
 8009af8:	4a8e      	ldr	r2, [pc, #568]	@ (8009d34 <HAL_GPIO_Init+0x29c>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d863      	bhi.n	8009bc6 <HAL_GPIO_Init+0x12e>
 8009afe:	4a8e      	ldr	r2, [pc, #568]	@ (8009d38 <HAL_GPIO_Init+0x2a0>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d046      	beq.n	8009b92 <HAL_GPIO_Init+0xfa>
 8009b04:	4a8c      	ldr	r2, [pc, #560]	@ (8009d38 <HAL_GPIO_Init+0x2a0>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d85d      	bhi.n	8009bc6 <HAL_GPIO_Init+0x12e>
 8009b0a:	2b12      	cmp	r3, #18
 8009b0c:	d82a      	bhi.n	8009b64 <HAL_GPIO_Init+0xcc>
 8009b0e:	2b12      	cmp	r3, #18
 8009b10:	d859      	bhi.n	8009bc6 <HAL_GPIO_Init+0x12e>
 8009b12:	a201      	add	r2, pc, #4	@ (adr r2, 8009b18 <HAL_GPIO_Init+0x80>)
 8009b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b18:	08009b93 	.word	0x08009b93
 8009b1c:	08009b6d 	.word	0x08009b6d
 8009b20:	08009b7f 	.word	0x08009b7f
 8009b24:	08009bc1 	.word	0x08009bc1
 8009b28:	08009bc7 	.word	0x08009bc7
 8009b2c:	08009bc7 	.word	0x08009bc7
 8009b30:	08009bc7 	.word	0x08009bc7
 8009b34:	08009bc7 	.word	0x08009bc7
 8009b38:	08009bc7 	.word	0x08009bc7
 8009b3c:	08009bc7 	.word	0x08009bc7
 8009b40:	08009bc7 	.word	0x08009bc7
 8009b44:	08009bc7 	.word	0x08009bc7
 8009b48:	08009bc7 	.word	0x08009bc7
 8009b4c:	08009bc7 	.word	0x08009bc7
 8009b50:	08009bc7 	.word	0x08009bc7
 8009b54:	08009bc7 	.word	0x08009bc7
 8009b58:	08009bc7 	.word	0x08009bc7
 8009b5c:	08009b75 	.word	0x08009b75
 8009b60:	08009b89 	.word	0x08009b89
 8009b64:	4a75      	ldr	r2, [pc, #468]	@ (8009d3c <HAL_GPIO_Init+0x2a4>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d013      	beq.n	8009b92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009b6a:	e02c      	b.n	8009bc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	623b      	str	r3, [r7, #32]
          break;
 8009b72:	e029      	b.n	8009bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	3304      	adds	r3, #4
 8009b7a:	623b      	str	r3, [r7, #32]
          break;
 8009b7c:	e024      	b.n	8009bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	68db      	ldr	r3, [r3, #12]
 8009b82:	3308      	adds	r3, #8
 8009b84:	623b      	str	r3, [r7, #32]
          break;
 8009b86:	e01f      	b.n	8009bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	330c      	adds	r3, #12
 8009b8e:	623b      	str	r3, [r7, #32]
          break;
 8009b90:	e01a      	b.n	8009bc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d102      	bne.n	8009ba0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009b9a:	2304      	movs	r3, #4
 8009b9c:	623b      	str	r3, [r7, #32]
          break;
 8009b9e:	e013      	b.n	8009bc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d105      	bne.n	8009bb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009ba8:	2308      	movs	r3, #8
 8009baa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	69fa      	ldr	r2, [r7, #28]
 8009bb0:	611a      	str	r2, [r3, #16]
          break;
 8009bb2:	e009      	b.n	8009bc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009bb4:	2308      	movs	r3, #8
 8009bb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	69fa      	ldr	r2, [r7, #28]
 8009bbc:	615a      	str	r2, [r3, #20]
          break;
 8009bbe:	e003      	b.n	8009bc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	623b      	str	r3, [r7, #32]
          break;
 8009bc4:	e000      	b.n	8009bc8 <HAL_GPIO_Init+0x130>
          break;
 8009bc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	2bff      	cmp	r3, #255	@ 0xff
 8009bcc:	d801      	bhi.n	8009bd2 <HAL_GPIO_Init+0x13a>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	e001      	b.n	8009bd6 <HAL_GPIO_Init+0x13e>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	2bff      	cmp	r3, #255	@ 0xff
 8009bdc:	d802      	bhi.n	8009be4 <HAL_GPIO_Init+0x14c>
 8009bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	e002      	b.n	8009bea <HAL_GPIO_Init+0x152>
 8009be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be6:	3b08      	subs	r3, #8
 8009be8:	009b      	lsls	r3, r3, #2
 8009bea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	210f      	movs	r1, #15
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8009bf8:	43db      	mvns	r3, r3
 8009bfa:	401a      	ands	r2, r3
 8009bfc:	6a39      	ldr	r1, [r7, #32]
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	fa01 f303 	lsl.w	r3, r1, r3
 8009c04:	431a      	orrs	r2, r3
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f000 80c1 	beq.w	8009d9a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009c18:	4b49      	ldr	r3, [pc, #292]	@ (8009d40 <HAL_GPIO_Init+0x2a8>)
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	4a48      	ldr	r2, [pc, #288]	@ (8009d40 <HAL_GPIO_Init+0x2a8>)
 8009c1e:	f043 0301 	orr.w	r3, r3, #1
 8009c22:	6193      	str	r3, [r2, #24]
 8009c24:	4b46      	ldr	r3, [pc, #280]	@ (8009d40 <HAL_GPIO_Init+0x2a8>)
 8009c26:	699b      	ldr	r3, [r3, #24]
 8009c28:	f003 0301 	and.w	r3, r3, #1
 8009c2c:	60bb      	str	r3, [r7, #8]
 8009c2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009c30:	4a44      	ldr	r2, [pc, #272]	@ (8009d44 <HAL_GPIO_Init+0x2ac>)
 8009c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c34:	089b      	lsrs	r3, r3, #2
 8009c36:	3302      	adds	r3, #2
 8009c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c40:	f003 0303 	and.w	r3, r3, #3
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	220f      	movs	r2, #15
 8009c48:	fa02 f303 	lsl.w	r3, r2, r3
 8009c4c:	43db      	mvns	r3, r3
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	4013      	ands	r3, r2
 8009c52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4a3c      	ldr	r2, [pc, #240]	@ (8009d48 <HAL_GPIO_Init+0x2b0>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d01f      	beq.n	8009c9c <HAL_GPIO_Init+0x204>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4a3b      	ldr	r2, [pc, #236]	@ (8009d4c <HAL_GPIO_Init+0x2b4>)
 8009c60:	4293      	cmp	r3, r2
 8009c62:	d019      	beq.n	8009c98 <HAL_GPIO_Init+0x200>
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	4a3a      	ldr	r2, [pc, #232]	@ (8009d50 <HAL_GPIO_Init+0x2b8>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d013      	beq.n	8009c94 <HAL_GPIO_Init+0x1fc>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	4a39      	ldr	r2, [pc, #228]	@ (8009d54 <HAL_GPIO_Init+0x2bc>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d00d      	beq.n	8009c90 <HAL_GPIO_Init+0x1f8>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	4a38      	ldr	r2, [pc, #224]	@ (8009d58 <HAL_GPIO_Init+0x2c0>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d007      	beq.n	8009c8c <HAL_GPIO_Init+0x1f4>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a37      	ldr	r2, [pc, #220]	@ (8009d5c <HAL_GPIO_Init+0x2c4>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d101      	bne.n	8009c88 <HAL_GPIO_Init+0x1f0>
 8009c84:	2305      	movs	r3, #5
 8009c86:	e00a      	b.n	8009c9e <HAL_GPIO_Init+0x206>
 8009c88:	2306      	movs	r3, #6
 8009c8a:	e008      	b.n	8009c9e <HAL_GPIO_Init+0x206>
 8009c8c:	2304      	movs	r3, #4
 8009c8e:	e006      	b.n	8009c9e <HAL_GPIO_Init+0x206>
 8009c90:	2303      	movs	r3, #3
 8009c92:	e004      	b.n	8009c9e <HAL_GPIO_Init+0x206>
 8009c94:	2302      	movs	r3, #2
 8009c96:	e002      	b.n	8009c9e <HAL_GPIO_Init+0x206>
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e000      	b.n	8009c9e <HAL_GPIO_Init+0x206>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ca0:	f002 0203 	and.w	r2, r2, #3
 8009ca4:	0092      	lsls	r2, r2, #2
 8009ca6:	4093      	lsls	r3, r2
 8009ca8:	68fa      	ldr	r2, [r7, #12]
 8009caa:	4313      	orrs	r3, r2
 8009cac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009cae:	4925      	ldr	r1, [pc, #148]	@ (8009d44 <HAL_GPIO_Init+0x2ac>)
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb2:	089b      	lsrs	r3, r3, #2
 8009cb4:	3302      	adds	r3, #2
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d006      	beq.n	8009cd6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009cc8:	4b25      	ldr	r3, [pc, #148]	@ (8009d60 <HAL_GPIO_Init+0x2c8>)
 8009cca:	689a      	ldr	r2, [r3, #8]
 8009ccc:	4924      	ldr	r1, [pc, #144]	@ (8009d60 <HAL_GPIO_Init+0x2c8>)
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	608b      	str	r3, [r1, #8]
 8009cd4:	e006      	b.n	8009ce4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009cd6:	4b22      	ldr	r3, [pc, #136]	@ (8009d60 <HAL_GPIO_Init+0x2c8>)
 8009cd8:	689a      	ldr	r2, [r3, #8]
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	43db      	mvns	r3, r3
 8009cde:	4920      	ldr	r1, [pc, #128]	@ (8009d60 <HAL_GPIO_Init+0x2c8>)
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d006      	beq.n	8009cfe <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8009d60 <HAL_GPIO_Init+0x2c8>)
 8009cf2:	68da      	ldr	r2, [r3, #12]
 8009cf4:	491a      	ldr	r1, [pc, #104]	@ (8009d60 <HAL_GPIO_Init+0x2c8>)
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	60cb      	str	r3, [r1, #12]
 8009cfc:	e006      	b.n	8009d0c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009cfe:	4b18      	ldr	r3, [pc, #96]	@ (8009d60 <HAL_GPIO_Init+0x2c8>)
 8009d00:	68da      	ldr	r2, [r3, #12]
 8009d02:	69bb      	ldr	r3, [r7, #24]
 8009d04:	43db      	mvns	r3, r3
 8009d06:	4916      	ldr	r1, [pc, #88]	@ (8009d60 <HAL_GPIO_Init+0x2c8>)
 8009d08:	4013      	ands	r3, r2
 8009d0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d025      	beq.n	8009d64 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009d18:	4b11      	ldr	r3, [pc, #68]	@ (8009d60 <HAL_GPIO_Init+0x2c8>)
 8009d1a:	685a      	ldr	r2, [r3, #4]
 8009d1c:	4910      	ldr	r1, [pc, #64]	@ (8009d60 <HAL_GPIO_Init+0x2c8>)
 8009d1e:	69bb      	ldr	r3, [r7, #24]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	604b      	str	r3, [r1, #4]
 8009d24:	e025      	b.n	8009d72 <HAL_GPIO_Init+0x2da>
 8009d26:	bf00      	nop
 8009d28:	10320000 	.word	0x10320000
 8009d2c:	10310000 	.word	0x10310000
 8009d30:	10220000 	.word	0x10220000
 8009d34:	10210000 	.word	0x10210000
 8009d38:	10120000 	.word	0x10120000
 8009d3c:	10110000 	.word	0x10110000
 8009d40:	40021000 	.word	0x40021000
 8009d44:	40010000 	.word	0x40010000
 8009d48:	40010800 	.word	0x40010800
 8009d4c:	40010c00 	.word	0x40010c00
 8009d50:	40011000 	.word	0x40011000
 8009d54:	40011400 	.word	0x40011400
 8009d58:	40011800 	.word	0x40011800
 8009d5c:	40011c00 	.word	0x40011c00
 8009d60:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009d64:	4b15      	ldr	r3, [pc, #84]	@ (8009dbc <HAL_GPIO_Init+0x324>)
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	69bb      	ldr	r3, [r7, #24]
 8009d6a:	43db      	mvns	r3, r3
 8009d6c:	4913      	ldr	r1, [pc, #76]	@ (8009dbc <HAL_GPIO_Init+0x324>)
 8009d6e:	4013      	ands	r3, r2
 8009d70:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d006      	beq.n	8009d8c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8009dbc <HAL_GPIO_Init+0x324>)
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	490e      	ldr	r1, [pc, #56]	@ (8009dbc <HAL_GPIO_Init+0x324>)
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	600b      	str	r3, [r1, #0]
 8009d8a:	e006      	b.n	8009d9a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8009dbc <HAL_GPIO_Init+0x324>)
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	43db      	mvns	r3, r3
 8009d94:	4909      	ldr	r1, [pc, #36]	@ (8009dbc <HAL_GPIO_Init+0x324>)
 8009d96:	4013      	ands	r3, r2
 8009d98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da6:	fa22 f303 	lsr.w	r3, r2, r3
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f47f ae7e 	bne.w	8009aac <HAL_GPIO_Init+0x14>
  }
}
 8009db0:	bf00      	nop
 8009db2:	bf00      	nop
 8009db4:	372c      	adds	r7, #44	@ 0x2c
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bc80      	pop	{r7}
 8009dba:	4770      	bx	lr
 8009dbc:	40010400 	.word	0x40010400

08009dc0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b089      	sub	sp, #36	@ 0x24
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009dce:	e0a6      	b.n	8009f1e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	69fb      	ldr	r3, [r7, #28]
 8009dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8009dd8:	683a      	ldr	r2, [r7, #0]
 8009dda:	4013      	ands	r3, r2
 8009ddc:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f000 8099 	beq.w	8009f18 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009de6:	4a54      	ldr	r2, [pc, #336]	@ (8009f38 <HAL_GPIO_DeInit+0x178>)
 8009de8:	69fb      	ldr	r3, [r7, #28]
 8009dea:	089b      	lsrs	r3, r3, #2
 8009dec:	3302      	adds	r3, #2
 8009dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009df2:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	f003 0303 	and.w	r3, r3, #3
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	220f      	movs	r2, #15
 8009dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8009e02:	697a      	ldr	r2, [r7, #20]
 8009e04:	4013      	ands	r3, r2
 8009e06:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a4c      	ldr	r2, [pc, #304]	@ (8009f3c <HAL_GPIO_DeInit+0x17c>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d01f      	beq.n	8009e50 <HAL_GPIO_DeInit+0x90>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a4b      	ldr	r2, [pc, #300]	@ (8009f40 <HAL_GPIO_DeInit+0x180>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d019      	beq.n	8009e4c <HAL_GPIO_DeInit+0x8c>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	4a4a      	ldr	r2, [pc, #296]	@ (8009f44 <HAL_GPIO_DeInit+0x184>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d013      	beq.n	8009e48 <HAL_GPIO_DeInit+0x88>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4a49      	ldr	r2, [pc, #292]	@ (8009f48 <HAL_GPIO_DeInit+0x188>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d00d      	beq.n	8009e44 <HAL_GPIO_DeInit+0x84>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a48      	ldr	r2, [pc, #288]	@ (8009f4c <HAL_GPIO_DeInit+0x18c>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d007      	beq.n	8009e40 <HAL_GPIO_DeInit+0x80>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a47      	ldr	r2, [pc, #284]	@ (8009f50 <HAL_GPIO_DeInit+0x190>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d101      	bne.n	8009e3c <HAL_GPIO_DeInit+0x7c>
 8009e38:	2305      	movs	r3, #5
 8009e3a:	e00a      	b.n	8009e52 <HAL_GPIO_DeInit+0x92>
 8009e3c:	2306      	movs	r3, #6
 8009e3e:	e008      	b.n	8009e52 <HAL_GPIO_DeInit+0x92>
 8009e40:	2304      	movs	r3, #4
 8009e42:	e006      	b.n	8009e52 <HAL_GPIO_DeInit+0x92>
 8009e44:	2303      	movs	r3, #3
 8009e46:	e004      	b.n	8009e52 <HAL_GPIO_DeInit+0x92>
 8009e48:	2302      	movs	r3, #2
 8009e4a:	e002      	b.n	8009e52 <HAL_GPIO_DeInit+0x92>
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e000      	b.n	8009e52 <HAL_GPIO_DeInit+0x92>
 8009e50:	2300      	movs	r3, #0
 8009e52:	69fa      	ldr	r2, [r7, #28]
 8009e54:	f002 0203 	and.w	r2, r2, #3
 8009e58:	0092      	lsls	r2, r2, #2
 8009e5a:	4093      	lsls	r3, r2
 8009e5c:	697a      	ldr	r2, [r7, #20]
 8009e5e:	429a      	cmp	r2, r3
 8009e60:	d132      	bne.n	8009ec8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009e62:	4b3c      	ldr	r3, [pc, #240]	@ (8009f54 <HAL_GPIO_DeInit+0x194>)
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	43db      	mvns	r3, r3
 8009e6a:	493a      	ldr	r1, [pc, #232]	@ (8009f54 <HAL_GPIO_DeInit+0x194>)
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009e70:	4b38      	ldr	r3, [pc, #224]	@ (8009f54 <HAL_GPIO_DeInit+0x194>)
 8009e72:	685a      	ldr	r2, [r3, #4]
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	43db      	mvns	r3, r3
 8009e78:	4936      	ldr	r1, [pc, #216]	@ (8009f54 <HAL_GPIO_DeInit+0x194>)
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009e7e:	4b35      	ldr	r3, [pc, #212]	@ (8009f54 <HAL_GPIO_DeInit+0x194>)
 8009e80:	68da      	ldr	r2, [r3, #12]
 8009e82:	69bb      	ldr	r3, [r7, #24]
 8009e84:	43db      	mvns	r3, r3
 8009e86:	4933      	ldr	r1, [pc, #204]	@ (8009f54 <HAL_GPIO_DeInit+0x194>)
 8009e88:	4013      	ands	r3, r2
 8009e8a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009e8c:	4b31      	ldr	r3, [pc, #196]	@ (8009f54 <HAL_GPIO_DeInit+0x194>)
 8009e8e:	689a      	ldr	r2, [r3, #8]
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	43db      	mvns	r3, r3
 8009e94:	492f      	ldr	r1, [pc, #188]	@ (8009f54 <HAL_GPIO_DeInit+0x194>)
 8009e96:	4013      	ands	r3, r2
 8009e98:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	f003 0303 	and.w	r3, r3, #3
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	220f      	movs	r2, #15
 8009ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ea8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009eaa:	4a23      	ldr	r2, [pc, #140]	@ (8009f38 <HAL_GPIO_DeInit+0x178>)
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	089b      	lsrs	r3, r3, #2
 8009eb0:	3302      	adds	r3, #2
 8009eb2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	43da      	mvns	r2, r3
 8009eba:	481f      	ldr	r0, [pc, #124]	@ (8009f38 <HAL_GPIO_DeInit+0x178>)
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	089b      	lsrs	r3, r3, #2
 8009ec0:	400a      	ands	r2, r1
 8009ec2:	3302      	adds	r3, #2
 8009ec4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	2bff      	cmp	r3, #255	@ 0xff
 8009ecc:	d801      	bhi.n	8009ed2 <HAL_GPIO_DeInit+0x112>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	e001      	b.n	8009ed6 <HAL_GPIO_DeInit+0x116>
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	3304      	adds	r3, #4
 8009ed6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009ed8:	69bb      	ldr	r3, [r7, #24]
 8009eda:	2bff      	cmp	r3, #255	@ 0xff
 8009edc:	d802      	bhi.n	8009ee4 <HAL_GPIO_DeInit+0x124>
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	e002      	b.n	8009eea <HAL_GPIO_DeInit+0x12a>
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	3b08      	subs	r3, #8
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	210f      	movs	r1, #15
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ef8:	43db      	mvns	r3, r3
 8009efa:	401a      	ands	r2, r3
 8009efc:	2104      	movs	r1, #4
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	fa01 f303 	lsl.w	r3, r1, r3
 8009f04:	431a      	orrs	r2, r3
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	68da      	ldr	r2, [r3, #12]
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	43db      	mvns	r3, r3
 8009f12:	401a      	ands	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009f1e:	683a      	ldr	r2, [r7, #0]
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	fa22 f303 	lsr.w	r3, r2, r3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	f47f af52 	bne.w	8009dd0 <HAL_GPIO_DeInit+0x10>
  }
}
 8009f2c:	bf00      	nop
 8009f2e:	bf00      	nop
 8009f30:	3724      	adds	r7, #36	@ 0x24
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bc80      	pop	{r7}
 8009f36:	4770      	bx	lr
 8009f38:	40010000 	.word	0x40010000
 8009f3c:	40010800 	.word	0x40010800
 8009f40:	40010c00 	.word	0x40010c00
 8009f44:	40011000 	.word	0x40011000
 8009f48:	40011400 	.word	0x40011400
 8009f4c:	40011800 	.word	0x40011800
 8009f50:	40011c00 	.word	0x40011c00
 8009f54:	40010400 	.word	0x40010400

08009f58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	460b      	mov	r3, r1
 8009f62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	689a      	ldr	r2, [r3, #8]
 8009f68:	887b      	ldrh	r3, [r7, #2]
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d002      	beq.n	8009f76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009f70:	2301      	movs	r3, #1
 8009f72:	73fb      	strb	r3, [r7, #15]
 8009f74:	e001      	b.n	8009f7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009f76:	2300      	movs	r3, #0
 8009f78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3714      	adds	r7, #20
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bc80      	pop	{r7}
 8009f84:	4770      	bx	lr

08009f86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009f86:	b480      	push	{r7}
 8009f88:	b083      	sub	sp, #12
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
 8009f8e:	460b      	mov	r3, r1
 8009f90:	807b      	strh	r3, [r7, #2]
 8009f92:	4613      	mov	r3, r2
 8009f94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009f96:	787b      	ldrb	r3, [r7, #1]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d003      	beq.n	8009fa4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009f9c:	887a      	ldrh	r2, [r7, #2]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009fa2:	e003      	b.n	8009fac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009fa4:	887b      	ldrh	r3, [r7, #2]
 8009fa6:	041a      	lsls	r2, r3, #16
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	611a      	str	r2, [r3, #16]
}
 8009fac:	bf00      	nop
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bc80      	pop	{r7}
 8009fb4:	4770      	bx	lr

08009fb6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009fb6:	b480      	push	{r7}
 8009fb8:	b085      	sub	sp, #20
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	68db      	ldr	r3, [r3, #12]
 8009fc6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009fc8:	887a      	ldrh	r2, [r7, #2]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	4013      	ands	r3, r2
 8009fce:	041a      	lsls	r2, r3, #16
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	43d9      	mvns	r1, r3
 8009fd4:	887b      	ldrh	r3, [r7, #2]
 8009fd6:	400b      	ands	r3, r1
 8009fd8:	431a      	orrs	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	611a      	str	r2, [r3, #16]
}
 8009fde:	bf00      	nop
 8009fe0:	3714      	adds	r7, #20
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bc80      	pop	{r7}
 8009fe6:	4770      	bx	lr

08009fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d101      	bne.n	8009ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e12b      	b.n	800a252 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b00      	cmp	r3, #0
 800a004:	d106      	bne.n	800a014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7fe fff4 	bl	8008ffc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2224      	movs	r2, #36	@ 0x24
 800a018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f022 0201 	bic.w	r2, r2, #1
 800a02a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	681a      	ldr	r2, [r3, #0]
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a03a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a04a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a04c:	f001 fdb8 	bl	800bbc0 <HAL_RCC_GetPCLK1Freq>
 800a050:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	4a81      	ldr	r2, [pc, #516]	@ (800a25c <HAL_I2C_Init+0x274>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d807      	bhi.n	800a06c <HAL_I2C_Init+0x84>
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	4a80      	ldr	r2, [pc, #512]	@ (800a260 <HAL_I2C_Init+0x278>)
 800a060:	4293      	cmp	r3, r2
 800a062:	bf94      	ite	ls
 800a064:	2301      	movls	r3, #1
 800a066:	2300      	movhi	r3, #0
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	e006      	b.n	800a07a <HAL_I2C_Init+0x92>
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	4a7d      	ldr	r2, [pc, #500]	@ (800a264 <HAL_I2C_Init+0x27c>)
 800a070:	4293      	cmp	r3, r2
 800a072:	bf94      	ite	ls
 800a074:	2301      	movls	r3, #1
 800a076:	2300      	movhi	r3, #0
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d001      	beq.n	800a082 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a07e:	2301      	movs	r3, #1
 800a080:	e0e7      	b.n	800a252 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	4a78      	ldr	r2, [pc, #480]	@ (800a268 <HAL_I2C_Init+0x280>)
 800a086:	fba2 2303 	umull	r2, r3, r2, r3
 800a08a:	0c9b      	lsrs	r3, r3, #18
 800a08c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	68ba      	ldr	r2, [r7, #8]
 800a09e:	430a      	orrs	r2, r1
 800a0a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	6a1b      	ldr	r3, [r3, #32]
 800a0a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	4a6a      	ldr	r2, [pc, #424]	@ (800a25c <HAL_I2C_Init+0x274>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d802      	bhi.n	800a0bc <HAL_I2C_Init+0xd4>
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	e009      	b.n	800a0d0 <HAL_I2C_Init+0xe8>
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a0c2:	fb02 f303 	mul.w	r3, r2, r3
 800a0c6:	4a69      	ldr	r2, [pc, #420]	@ (800a26c <HAL_I2C_Init+0x284>)
 800a0c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a0cc:	099b      	lsrs	r3, r3, #6
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	6812      	ldr	r2, [r2, #0]
 800a0d4:	430b      	orrs	r3, r1
 800a0d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	69db      	ldr	r3, [r3, #28]
 800a0de:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a0e2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	495c      	ldr	r1, [pc, #368]	@ (800a25c <HAL_I2C_Init+0x274>)
 800a0ec:	428b      	cmp	r3, r1
 800a0ee:	d819      	bhi.n	800a124 <HAL_I2C_Init+0x13c>
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	1e59      	subs	r1, r3, #1
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	005b      	lsls	r3, r3, #1
 800a0fa:	fbb1 f3f3 	udiv	r3, r1, r3
 800a0fe:	1c59      	adds	r1, r3, #1
 800a100:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a104:	400b      	ands	r3, r1
 800a106:	2b00      	cmp	r3, #0
 800a108:	d00a      	beq.n	800a120 <HAL_I2C_Init+0x138>
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	1e59      	subs	r1, r3, #1
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	005b      	lsls	r3, r3, #1
 800a114:	fbb1 f3f3 	udiv	r3, r1, r3
 800a118:	3301      	adds	r3, #1
 800a11a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a11e:	e051      	b.n	800a1c4 <HAL_I2C_Init+0x1dc>
 800a120:	2304      	movs	r3, #4
 800a122:	e04f      	b.n	800a1c4 <HAL_I2C_Init+0x1dc>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d111      	bne.n	800a150 <HAL_I2C_Init+0x168>
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	1e58      	subs	r0, r3, #1
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6859      	ldr	r1, [r3, #4]
 800a134:	460b      	mov	r3, r1
 800a136:	005b      	lsls	r3, r3, #1
 800a138:	440b      	add	r3, r1
 800a13a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a13e:	3301      	adds	r3, #1
 800a140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a144:	2b00      	cmp	r3, #0
 800a146:	bf0c      	ite	eq
 800a148:	2301      	moveq	r3, #1
 800a14a:	2300      	movne	r3, #0
 800a14c:	b2db      	uxtb	r3, r3
 800a14e:	e012      	b.n	800a176 <HAL_I2C_Init+0x18e>
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	1e58      	subs	r0, r3, #1
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	6859      	ldr	r1, [r3, #4]
 800a158:	460b      	mov	r3, r1
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	440b      	add	r3, r1
 800a15e:	0099      	lsls	r1, r3, #2
 800a160:	440b      	add	r3, r1
 800a162:	fbb0 f3f3 	udiv	r3, r0, r3
 800a166:	3301      	adds	r3, #1
 800a168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	bf0c      	ite	eq
 800a170:	2301      	moveq	r3, #1
 800a172:	2300      	movne	r3, #0
 800a174:	b2db      	uxtb	r3, r3
 800a176:	2b00      	cmp	r3, #0
 800a178:	d001      	beq.n	800a17e <HAL_I2C_Init+0x196>
 800a17a:	2301      	movs	r3, #1
 800a17c:	e022      	b.n	800a1c4 <HAL_I2C_Init+0x1dc>
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10e      	bne.n	800a1a4 <HAL_I2C_Init+0x1bc>
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	1e58      	subs	r0, r3, #1
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6859      	ldr	r1, [r3, #4]
 800a18e:	460b      	mov	r3, r1
 800a190:	005b      	lsls	r3, r3, #1
 800a192:	440b      	add	r3, r1
 800a194:	fbb0 f3f3 	udiv	r3, r0, r3
 800a198:	3301      	adds	r3, #1
 800a19a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a19e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1a2:	e00f      	b.n	800a1c4 <HAL_I2C_Init+0x1dc>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	1e58      	subs	r0, r3, #1
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6859      	ldr	r1, [r3, #4]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	440b      	add	r3, r1
 800a1b2:	0099      	lsls	r1, r3, #2
 800a1b4:	440b      	add	r3, r1
 800a1b6:	fbb0 f3f3 	udiv	r3, r0, r3
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a1c4:	6879      	ldr	r1, [r7, #4]
 800a1c6:	6809      	ldr	r1, [r1, #0]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	69da      	ldr	r2, [r3, #28]
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	431a      	orrs	r2, r3
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	430a      	orrs	r2, r1
 800a1e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	689b      	ldr	r3, [r3, #8]
 800a1ee:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a1f2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	6911      	ldr	r1, [r2, #16]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	68d2      	ldr	r2, [r2, #12]
 800a1fe:	4311      	orrs	r1, r2
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	6812      	ldr	r2, [r2, #0]
 800a204:	430b      	orrs	r3, r1
 800a206:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	68db      	ldr	r3, [r3, #12]
 800a20e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	695a      	ldr	r2, [r3, #20]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	699b      	ldr	r3, [r3, #24]
 800a21a:	431a      	orrs	r2, r3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	430a      	orrs	r2, r1
 800a222:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	681a      	ldr	r2, [r3, #0]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f042 0201 	orr.w	r2, r2, #1
 800a232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2220      	movs	r2, #32
 800a23e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2200      	movs	r2, #0
 800a246:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3710      	adds	r7, #16
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}
 800a25a:	bf00      	nop
 800a25c:	000186a0 	.word	0x000186a0
 800a260:	001e847f 	.word	0x001e847f
 800a264:	003d08ff 	.word	0x003d08ff
 800a268:	431bde83 	.word	0x431bde83
 800a26c:	10624dd3 	.word	0x10624dd3

0800a270 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d101      	bne.n	800a282 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e021      	b.n	800a2c6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2224      	movs	r2, #36	@ 0x24
 800a286:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f022 0201 	bic.w	r2, r2, #1
 800a298:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f7fe feec 	bl	8009078 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
	...

0800a2d0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b088      	sub	sp, #32
 800a2d4:	af02      	add	r7, sp, #8
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	607a      	str	r2, [r7, #4]
 800a2da:	461a      	mov	r2, r3
 800a2dc:	460b      	mov	r3, r1
 800a2de:	817b      	strh	r3, [r7, #10]
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a2e4:	f7ff f85e 	bl	80093a4 <HAL_GetTick>
 800a2e8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2f0:	b2db      	uxtb	r3, r3
 800a2f2:	2b20      	cmp	r3, #32
 800a2f4:	f040 80e0 	bne.w	800a4b8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	9300      	str	r3, [sp, #0]
 800a2fc:	2319      	movs	r3, #25
 800a2fe:	2201      	movs	r2, #1
 800a300:	4970      	ldr	r1, [pc, #448]	@ (800a4c4 <HAL_I2C_Master_Transmit+0x1f4>)
 800a302:	68f8      	ldr	r0, [r7, #12]
 800a304:	f000 fe5c 	bl	800afc0 <I2C_WaitOnFlagUntilTimeout>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a30e:	2302      	movs	r3, #2
 800a310:	e0d3      	b.n	800a4ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a318:	2b01      	cmp	r3, #1
 800a31a:	d101      	bne.n	800a320 <HAL_I2C_Master_Transmit+0x50>
 800a31c:	2302      	movs	r3, #2
 800a31e:	e0cc      	b.n	800a4ba <HAL_I2C_Master_Transmit+0x1ea>
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f003 0301 	and.w	r3, r3, #1
 800a332:	2b01      	cmp	r3, #1
 800a334:	d007      	beq.n	800a346 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f042 0201 	orr.w	r2, r2, #1
 800a344:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a354:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2221      	movs	r2, #33	@ 0x21
 800a35a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2210      	movs	r2, #16
 800a362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2200      	movs	r2, #0
 800a36a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	893a      	ldrh	r2, [r7, #8]
 800a376:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	4a50      	ldr	r2, [pc, #320]	@ (800a4c8 <HAL_I2C_Master_Transmit+0x1f8>)
 800a386:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a388:	8979      	ldrh	r1, [r7, #10]
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	6a3a      	ldr	r2, [r7, #32]
 800a38e:	68f8      	ldr	r0, [r7, #12]
 800a390:	f000 fc16 	bl	800abc0 <I2C_MasterRequestWrite>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d001      	beq.n	800a39e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a39a:	2301      	movs	r3, #1
 800a39c:	e08d      	b.n	800a4ba <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a39e:	2300      	movs	r3, #0
 800a3a0:	613b      	str	r3, [r7, #16]
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	695b      	ldr	r3, [r3, #20]
 800a3a8:	613b      	str	r3, [r7, #16]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	699b      	ldr	r3, [r3, #24]
 800a3b0:	613b      	str	r3, [r7, #16]
 800a3b2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a3b4:	e066      	b.n	800a484 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	6a39      	ldr	r1, [r7, #32]
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f000 ff1a 	bl	800b1f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00d      	beq.n	800a3e2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a3ca:	2b04      	cmp	r3, #4
 800a3cc:	d107      	bne.n	800a3de <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	681a      	ldr	r2, [r3, #0]
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a3dc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e06b      	b.n	800a4ba <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3e6:	781a      	ldrb	r2, [r3, #0]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3f2:	1c5a      	adds	r2, r3, #1
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	3b01      	subs	r3, #1
 800a400:	b29a      	uxth	r2, r3
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a40a:	3b01      	subs	r3, #1
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	695b      	ldr	r3, [r3, #20]
 800a418:	f003 0304 	and.w	r3, r3, #4
 800a41c:	2b04      	cmp	r3, #4
 800a41e:	d11b      	bne.n	800a458 <HAL_I2C_Master_Transmit+0x188>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a424:	2b00      	cmp	r3, #0
 800a426:	d017      	beq.n	800a458 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a42c:	781a      	ldrb	r2, [r3, #0]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a438:	1c5a      	adds	r2, r3, #1
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a442:	b29b      	uxth	r3, r3
 800a444:	3b01      	subs	r3, #1
 800a446:	b29a      	uxth	r2, r3
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a450:	3b01      	subs	r3, #1
 800a452:	b29a      	uxth	r2, r3
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a458:	697a      	ldr	r2, [r7, #20]
 800a45a:	6a39      	ldr	r1, [r7, #32]
 800a45c:	68f8      	ldr	r0, [r7, #12]
 800a45e:	f000 ff11 	bl	800b284 <I2C_WaitOnBTFFlagUntilTimeout>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d00d      	beq.n	800a484 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a46c:	2b04      	cmp	r3, #4
 800a46e:	d107      	bne.n	800a480 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a47e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	e01a      	b.n	800a4ba <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d194      	bne.n	800a3b6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a49a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2220      	movs	r2, #32
 800a4a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	e000      	b.n	800a4ba <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a4b8:	2302      	movs	r3, #2
  }
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3718      	adds	r7, #24
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	00100002 	.word	0x00100002
 800a4c8:	ffff0000 	.word	0xffff0000

0800a4cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b088      	sub	sp, #32
 800a4d0:	af02      	add	r7, sp, #8
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	4608      	mov	r0, r1
 800a4d6:	4611      	mov	r1, r2
 800a4d8:	461a      	mov	r2, r3
 800a4da:	4603      	mov	r3, r0
 800a4dc:	817b      	strh	r3, [r7, #10]
 800a4de:	460b      	mov	r3, r1
 800a4e0:	813b      	strh	r3, [r7, #8]
 800a4e2:	4613      	mov	r3, r2
 800a4e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a4e6:	f7fe ff5d 	bl	80093a4 <HAL_GetTick>
 800a4ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	2b20      	cmp	r3, #32
 800a4f6:	f040 80d9 	bne.w	800a6ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	2319      	movs	r3, #25
 800a500:	2201      	movs	r2, #1
 800a502:	496d      	ldr	r1, [pc, #436]	@ (800a6b8 <HAL_I2C_Mem_Write+0x1ec>)
 800a504:	68f8      	ldr	r0, [r7, #12]
 800a506:	f000 fd5b 	bl	800afc0 <I2C_WaitOnFlagUntilTimeout>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d001      	beq.n	800a514 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a510:	2302      	movs	r3, #2
 800a512:	e0cc      	b.n	800a6ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a51a:	2b01      	cmp	r3, #1
 800a51c:	d101      	bne.n	800a522 <HAL_I2C_Mem_Write+0x56>
 800a51e:	2302      	movs	r3, #2
 800a520:	e0c5      	b.n	800a6ae <HAL_I2C_Mem_Write+0x1e2>
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2201      	movs	r2, #1
 800a526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f003 0301 	and.w	r3, r3, #1
 800a534:	2b01      	cmp	r3, #1
 800a536:	d007      	beq.n	800a548 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f042 0201 	orr.w	r2, r2, #1
 800a546:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	681a      	ldr	r2, [r3, #0]
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a556:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2221      	movs	r2, #33	@ 0x21
 800a55c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2240      	movs	r2, #64	@ 0x40
 800a564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	2200      	movs	r2, #0
 800a56c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6a3a      	ldr	r2, [r7, #32]
 800a572:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a578:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a57e:	b29a      	uxth	r2, r3
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	4a4d      	ldr	r2, [pc, #308]	@ (800a6bc <HAL_I2C_Mem_Write+0x1f0>)
 800a588:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a58a:	88f8      	ldrh	r0, [r7, #6]
 800a58c:	893a      	ldrh	r2, [r7, #8]
 800a58e:	8979      	ldrh	r1, [r7, #10]
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	9301      	str	r3, [sp, #4]
 800a594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	4603      	mov	r3, r0
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f000 fb92 	bl	800acc4 <I2C_RequestMemoryWrite>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d052      	beq.n	800a64c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e081      	b.n	800a6ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5aa:	697a      	ldr	r2, [r7, #20]
 800a5ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a5ae:	68f8      	ldr	r0, [r7, #12]
 800a5b0:	f000 fe20 	bl	800b1f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00d      	beq.n	800a5d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5be:	2b04      	cmp	r3, #4
 800a5c0:	d107      	bne.n	800a5d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a5d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e06b      	b.n	800a6ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5da:	781a      	ldrb	r2, [r3, #0]
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5e6:	1c5a      	adds	r2, r3, #1
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5f0:	3b01      	subs	r3, #1
 800a5f2:	b29a      	uxth	r2, r3
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	3b01      	subs	r3, #1
 800a600:	b29a      	uxth	r2, r3
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	695b      	ldr	r3, [r3, #20]
 800a60c:	f003 0304 	and.w	r3, r3, #4
 800a610:	2b04      	cmp	r3, #4
 800a612:	d11b      	bne.n	800a64c <HAL_I2C_Mem_Write+0x180>
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d017      	beq.n	800a64c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a620:	781a      	ldrb	r2, [r3, #0]
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a62c:	1c5a      	adds	r2, r3, #1
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a636:	3b01      	subs	r3, #1
 800a638:	b29a      	uxth	r2, r3
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a642:	b29b      	uxth	r3, r3
 800a644:	3b01      	subs	r3, #1
 800a646:	b29a      	uxth	r2, r3
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a650:	2b00      	cmp	r3, #0
 800a652:	d1aa      	bne.n	800a5aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a654:	697a      	ldr	r2, [r7, #20]
 800a656:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f000 fe13 	bl	800b284 <I2C_WaitOnBTFFlagUntilTimeout>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00d      	beq.n	800a680 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a668:	2b04      	cmp	r3, #4
 800a66a:	d107      	bne.n	800a67c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a67a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	e016      	b.n	800a6ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a68e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	2220      	movs	r2, #32
 800a694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	e000      	b.n	800a6ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a6ac:	2302      	movs	r3, #2
  }
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3718      	adds	r7, #24
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
 800a6b6:	bf00      	nop
 800a6b8:	00100002 	.word	0x00100002
 800a6bc:	ffff0000 	.word	0xffff0000

0800a6c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b08c      	sub	sp, #48	@ 0x30
 800a6c4:	af02      	add	r7, sp, #8
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	4608      	mov	r0, r1
 800a6ca:	4611      	mov	r1, r2
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	817b      	strh	r3, [r7, #10]
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	813b      	strh	r3, [r7, #8]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a6de:	f7fe fe61 	bl	80093a4 <HAL_GetTick>
 800a6e2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	2b20      	cmp	r3, #32
 800a6ee:	f040 8244 	bne.w	800ab7a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f4:	9300      	str	r3, [sp, #0]
 800a6f6:	2319      	movs	r3, #25
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	4982      	ldr	r1, [pc, #520]	@ (800a904 <HAL_I2C_Mem_Read+0x244>)
 800a6fc:	68f8      	ldr	r0, [r7, #12]
 800a6fe:	f000 fc5f 	bl	800afc0 <I2C_WaitOnFlagUntilTimeout>
 800a702:	4603      	mov	r3, r0
 800a704:	2b00      	cmp	r3, #0
 800a706:	d001      	beq.n	800a70c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a708:	2302      	movs	r3, #2
 800a70a:	e237      	b.n	800ab7c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a712:	2b01      	cmp	r3, #1
 800a714:	d101      	bne.n	800a71a <HAL_I2C_Mem_Read+0x5a>
 800a716:	2302      	movs	r3, #2
 800a718:	e230      	b.n	800ab7c <HAL_I2C_Mem_Read+0x4bc>
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f003 0301 	and.w	r3, r3, #1
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d007      	beq.n	800a740 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f042 0201 	orr.w	r2, r2, #1
 800a73e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a74e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2222      	movs	r2, #34	@ 0x22
 800a754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2240      	movs	r2, #64	@ 0x40
 800a75c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a76a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a770:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a776:	b29a      	uxth	r2, r3
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	4a62      	ldr	r2, [pc, #392]	@ (800a908 <HAL_I2C_Mem_Read+0x248>)
 800a780:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a782:	88f8      	ldrh	r0, [r7, #6]
 800a784:	893a      	ldrh	r2, [r7, #8]
 800a786:	8979      	ldrh	r1, [r7, #10]
 800a788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a78a:	9301      	str	r3, [sp, #4]
 800a78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78e:	9300      	str	r3, [sp, #0]
 800a790:	4603      	mov	r3, r0
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f000 fb2c 	bl	800adf0 <I2C_RequestMemoryRead>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e1ec      	b.n	800ab7c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d113      	bne.n	800a7d2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	61fb      	str	r3, [r7, #28]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	695b      	ldr	r3, [r3, #20]
 800a7b4:	61fb      	str	r3, [r7, #28]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	699b      	ldr	r3, [r3, #24]
 800a7bc:	61fb      	str	r3, [r7, #28]
 800a7be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	681a      	ldr	r2, [r3, #0]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7ce:	601a      	str	r2, [r3, #0]
 800a7d0:	e1c0      	b.n	800ab54 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d11e      	bne.n	800a818 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a7e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7ea:	b672      	cpsid	i
}
 800a7ec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	61bb      	str	r3, [r7, #24]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	695b      	ldr	r3, [r3, #20]
 800a7f8:	61bb      	str	r3, [r7, #24]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	699b      	ldr	r3, [r3, #24]
 800a800:	61bb      	str	r3, [r7, #24]
 800a802:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a812:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a814:	b662      	cpsie	i
}
 800a816:	e035      	b.n	800a884 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	d11e      	bne.n	800a85e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a82e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a830:	b672      	cpsid	i
}
 800a832:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a834:	2300      	movs	r3, #0
 800a836:	617b      	str	r3, [r7, #20]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	617b      	str	r3, [r7, #20]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	699b      	ldr	r3, [r3, #24]
 800a846:	617b      	str	r3, [r7, #20]
 800a848:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	681a      	ldr	r2, [r3, #0]
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a858:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a85a:	b662      	cpsie	i
}
 800a85c:	e012      	b.n	800a884 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681a      	ldr	r2, [r3, #0]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a86c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a86e:	2300      	movs	r3, #0
 800a870:	613b      	str	r3, [r7, #16]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	695b      	ldr	r3, [r3, #20]
 800a878:	613b      	str	r3, [r7, #16]
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	699b      	ldr	r3, [r3, #24]
 800a880:	613b      	str	r3, [r7, #16]
 800a882:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a884:	e166      	b.n	800ab54 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a88a:	2b03      	cmp	r3, #3
 800a88c:	f200 811f 	bhi.w	800aace <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a894:	2b01      	cmp	r3, #1
 800a896:	d123      	bne.n	800a8e0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a89a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a89c:	68f8      	ldr	r0, [r7, #12]
 800a89e:	f000 fd39 	bl	800b314 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d001      	beq.n	800a8ac <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e167      	b.n	800ab7c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	691a      	ldr	r2, [r3, #16]
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8b6:	b2d2      	uxtb	r2, r2
 800a8b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8be:	1c5a      	adds	r2, r3, #1
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	3b01      	subs	r3, #1
 800a8d8:	b29a      	uxth	r2, r3
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a8de:	e139      	b.n	800ab54 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d152      	bne.n	800a98e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	4906      	ldr	r1, [pc, #24]	@ (800a90c <HAL_I2C_Mem_Read+0x24c>)
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f000 fb64 	bl	800afc0 <I2C_WaitOnFlagUntilTimeout>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d008      	beq.n	800a910 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a8fe:	2301      	movs	r3, #1
 800a900:	e13c      	b.n	800ab7c <HAL_I2C_Mem_Read+0x4bc>
 800a902:	bf00      	nop
 800a904:	00100002 	.word	0x00100002
 800a908:	ffff0000 	.word	0xffff0000
 800a90c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a910:	b672      	cpsid	i
}
 800a912:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a922:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	691a      	ldr	r2, [r3, #16]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a92e:	b2d2      	uxtb	r2, r2
 800a930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a936:	1c5a      	adds	r2, r3, #1
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a940:	3b01      	subs	r3, #1
 800a942:	b29a      	uxth	r2, r3
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	3b01      	subs	r3, #1
 800a950:	b29a      	uxth	r2, r3
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a956:	b662      	cpsie	i
}
 800a958:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	691a      	ldr	r2, [r3, #16]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a964:	b2d2      	uxtb	r2, r2
 800a966:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a96c:	1c5a      	adds	r2, r3, #1
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a976:	3b01      	subs	r3, #1
 800a978:	b29a      	uxth	r2, r3
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a982:	b29b      	uxth	r3, r3
 800a984:	3b01      	subs	r3, #1
 800a986:	b29a      	uxth	r2, r3
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a98c:	e0e2      	b.n	800ab54 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a98e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a990:	9300      	str	r3, [sp, #0]
 800a992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a994:	2200      	movs	r2, #0
 800a996:	497b      	ldr	r1, [pc, #492]	@ (800ab84 <HAL_I2C_Mem_Read+0x4c4>)
 800a998:	68f8      	ldr	r0, [r7, #12]
 800a99a:	f000 fb11 	bl	800afc0 <I2C_WaitOnFlagUntilTimeout>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d001      	beq.n	800a9a8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	e0e9      	b.n	800ab7c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a9b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a9b8:	b672      	cpsid	i
}
 800a9ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	691a      	ldr	r2, [r3, #16]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c6:	b2d2      	uxtb	r2, r2
 800a9c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ce:	1c5a      	adds	r2, r3, #1
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	3b01      	subs	r3, #1
 800a9e8:	b29a      	uxth	r2, r3
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a9ee:	4b66      	ldr	r3, [pc, #408]	@ (800ab88 <HAL_I2C_Mem_Read+0x4c8>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	08db      	lsrs	r3, r3, #3
 800a9f4:	4a65      	ldr	r2, [pc, #404]	@ (800ab8c <HAL_I2C_Mem_Read+0x4cc>)
 800a9f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9fa:	0a1a      	lsrs	r2, r3, #8
 800a9fc:	4613      	mov	r3, r2
 800a9fe:	009b      	lsls	r3, r3, #2
 800aa00:	4413      	add	r3, r2
 800aa02:	00da      	lsls	r2, r3, #3
 800aa04:	1ad3      	subs	r3, r2, r3
 800aa06:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800aa08:	6a3b      	ldr	r3, [r7, #32]
 800aa0a:	3b01      	subs	r3, #1
 800aa0c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800aa0e:	6a3b      	ldr	r3, [r7, #32]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d118      	bne.n	800aa46 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2200      	movs	r2, #0
 800aa18:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2220      	movs	r2, #32
 800aa1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa2e:	f043 0220 	orr.w	r2, r3, #32
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800aa36:	b662      	cpsie	i
}
 800aa38:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	e09a      	b.n	800ab7c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	695b      	ldr	r3, [r3, #20]
 800aa4c:	f003 0304 	and.w	r3, r3, #4
 800aa50:	2b04      	cmp	r3, #4
 800aa52:	d1d9      	bne.n	800aa08 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	681a      	ldr	r2, [r3, #0]
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	691a      	ldr	r2, [r3, #16]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa6e:	b2d2      	uxtb	r2, r2
 800aa70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa76:	1c5a      	adds	r2, r3, #1
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa80:	3b01      	subs	r3, #1
 800aa82:	b29a      	uxth	r2, r3
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	b29a      	uxth	r2, r3
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800aa96:	b662      	cpsie	i
}
 800aa98:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	691a      	ldr	r2, [r3, #16]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaa4:	b2d2      	uxtb	r2, r2
 800aaa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaac:	1c5a      	adds	r2, r3, #1
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aab6:	3b01      	subs	r3, #1
 800aab8:	b29a      	uxth	r2, r3
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aac2:	b29b      	uxth	r3, r3
 800aac4:	3b01      	subs	r3, #1
 800aac6:	b29a      	uxth	r2, r3
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800aacc:	e042      	b.n	800ab54 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aad0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f000 fc1e 	bl	800b314 <I2C_WaitOnRXNEFlagUntilTimeout>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d001      	beq.n	800aae2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800aade:	2301      	movs	r3, #1
 800aae0:	e04c      	b.n	800ab7c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	691a      	ldr	r2, [r3, #16]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaec:	b2d2      	uxtb	r2, r2
 800aaee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaf4:	1c5a      	adds	r2, r3, #1
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aafe:	3b01      	subs	r3, #1
 800ab00:	b29a      	uxth	r2, r3
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	3b01      	subs	r3, #1
 800ab0e:	b29a      	uxth	r2, r3
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	695b      	ldr	r3, [r3, #20]
 800ab1a:	f003 0304 	and.w	r3, r3, #4
 800ab1e:	2b04      	cmp	r3, #4
 800ab20:	d118      	bne.n	800ab54 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	691a      	ldr	r2, [r3, #16]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab2c:	b2d2      	uxtb	r2, r2
 800ab2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab34:	1c5a      	adds	r2, r3, #1
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	b29a      	uxth	r2, r3
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	3b01      	subs	r3, #1
 800ab4e:	b29a      	uxth	r2, r3
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f47f ae94 	bne.w	800a886 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2220      	movs	r2, #32
 800ab62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2200      	movs	r2, #0
 800ab72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ab76:	2300      	movs	r3, #0
 800ab78:	e000      	b.n	800ab7c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800ab7a:	2302      	movs	r3, #2
  }
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3728      	adds	r7, #40	@ 0x28
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	00010004 	.word	0x00010004
 800ab88:	20000f78 	.word	0x20000f78
 800ab8c:	14f8b589 	.word	0x14f8b589

0800ab90 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b083      	sub	sp, #12
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab9e:	b2db      	uxtb	r3, r3
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bc80      	pop	{r7}
 800aba8:	4770      	bx	lr

0800abaa <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800abaa:	b480      	push	{r7}
 800abac:	b083      	sub	sp, #12
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	370c      	adds	r7, #12
 800abba:	46bd      	mov	sp, r7
 800abbc:	bc80      	pop	{r7}
 800abbe:	4770      	bx	lr

0800abc0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b088      	sub	sp, #32
 800abc4:	af02      	add	r7, sp, #8
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	607a      	str	r2, [r7, #4]
 800abca:	603b      	str	r3, [r7, #0]
 800abcc:	460b      	mov	r3, r1
 800abce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abd4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	2b08      	cmp	r3, #8
 800abda:	d006      	beq.n	800abea <I2C_MasterRequestWrite+0x2a>
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d003      	beq.n	800abea <I2C_MasterRequestWrite+0x2a>
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800abe8:	d108      	bne.n	800abfc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800abf8:	601a      	str	r2, [r3, #0]
 800abfa:	e00b      	b.n	800ac14 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac00:	2b12      	cmp	r3, #18
 800ac02:	d107      	bne.n	800ac14 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	681a      	ldr	r2, [r3, #0]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ac12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	9300      	str	r3, [sp, #0]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	f000 f9cd 	bl	800afc0 <I2C_WaitOnFlagUntilTimeout>
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d00d      	beq.n	800ac48 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac3a:	d103      	bne.n	800ac44 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ac42:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ac44:	2303      	movs	r3, #3
 800ac46:	e035      	b.n	800acb4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	691b      	ldr	r3, [r3, #16]
 800ac4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac50:	d108      	bne.n	800ac64 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ac52:	897b      	ldrh	r3, [r7, #10]
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	461a      	mov	r2, r3
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ac60:	611a      	str	r2, [r3, #16]
 800ac62:	e01b      	b.n	800ac9c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ac64:	897b      	ldrh	r3, [r7, #10]
 800ac66:	11db      	asrs	r3, r3, #7
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	f003 0306 	and.w	r3, r3, #6
 800ac6e:	b2db      	uxtb	r3, r3
 800ac70:	f063 030f 	orn	r3, r3, #15
 800ac74:	b2da      	uxtb	r2, r3
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	490e      	ldr	r1, [pc, #56]	@ (800acbc <I2C_MasterRequestWrite+0xfc>)
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	f000 fa16 	bl	800b0b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d001      	beq.n	800ac92 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e010      	b.n	800acb4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ac92:	897b      	ldrh	r3, [r7, #10]
 800ac94:	b2da      	uxtb	r2, r3
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	4907      	ldr	r1, [pc, #28]	@ (800acc0 <I2C_MasterRequestWrite+0x100>)
 800aca2:	68f8      	ldr	r0, [r7, #12]
 800aca4:	f000 fa06 	bl	800b0b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d001      	beq.n	800acb2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800acae:	2301      	movs	r3, #1
 800acb0:	e000      	b.n	800acb4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800acb2:	2300      	movs	r3, #0
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	3718      	adds	r7, #24
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	00010008 	.word	0x00010008
 800acc0:	00010002 	.word	0x00010002

0800acc4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b088      	sub	sp, #32
 800acc8:	af02      	add	r7, sp, #8
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	4608      	mov	r0, r1
 800acce:	4611      	mov	r1, r2
 800acd0:	461a      	mov	r2, r3
 800acd2:	4603      	mov	r3, r0
 800acd4:	817b      	strh	r3, [r7, #10]
 800acd6:	460b      	mov	r3, r1
 800acd8:	813b      	strh	r3, [r7, #8]
 800acda:	4613      	mov	r3, r2
 800acdc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800acec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800acee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf0:	9300      	str	r3, [sp, #0]
 800acf2:	6a3b      	ldr	r3, [r7, #32]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f000 f960 	bl	800afc0 <I2C_WaitOnFlagUntilTimeout>
 800ad00:	4603      	mov	r3, r0
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00d      	beq.n	800ad22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad14:	d103      	bne.n	800ad1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ad1c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ad1e:	2303      	movs	r3, #3
 800ad20:	e05f      	b.n	800ade2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ad22:	897b      	ldrh	r3, [r7, #10]
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	461a      	mov	r2, r3
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ad30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ad32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad34:	6a3a      	ldr	r2, [r7, #32]
 800ad36:	492d      	ldr	r1, [pc, #180]	@ (800adec <I2C_RequestMemoryWrite+0x128>)
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f000 f9bb 	bl	800b0b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d001      	beq.n	800ad48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	e04c      	b.n	800ade2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad48:	2300      	movs	r3, #0
 800ad4a:	617b      	str	r3, [r7, #20]
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	695b      	ldr	r3, [r3, #20]
 800ad52:	617b      	str	r3, [r7, #20]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	699b      	ldr	r3, [r3, #24]
 800ad5a:	617b      	str	r3, [r7, #20]
 800ad5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad60:	6a39      	ldr	r1, [r7, #32]
 800ad62:	68f8      	ldr	r0, [r7, #12]
 800ad64:	f000 fa46 	bl	800b1f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00d      	beq.n	800ad8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad72:	2b04      	cmp	r3, #4
 800ad74:	d107      	bne.n	800ad86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681a      	ldr	r2, [r3, #0]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e02b      	b.n	800ade2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ad8a:	88fb      	ldrh	r3, [r7, #6]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d105      	bne.n	800ad9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ad90:	893b      	ldrh	r3, [r7, #8]
 800ad92:	b2da      	uxtb	r2, r3
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	611a      	str	r2, [r3, #16]
 800ad9a:	e021      	b.n	800ade0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ad9c:	893b      	ldrh	r3, [r7, #8]
 800ad9e:	0a1b      	lsrs	r3, r3, #8
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	b2da      	uxtb	r2, r3
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800adaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adac:	6a39      	ldr	r1, [r7, #32]
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f000 fa20 	bl	800b1f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00d      	beq.n	800add6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adbe:	2b04      	cmp	r3, #4
 800adc0:	d107      	bne.n	800add2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800add0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	e005      	b.n	800ade2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800add6:	893b      	ldrh	r3, [r7, #8]
 800add8:	b2da      	uxtb	r2, r3
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ade0:	2300      	movs	r3, #0
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3718      	adds	r7, #24
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	00010002 	.word	0x00010002

0800adf0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800adf0:	b580      	push	{r7, lr}
 800adf2:	b088      	sub	sp, #32
 800adf4:	af02      	add	r7, sp, #8
 800adf6:	60f8      	str	r0, [r7, #12]
 800adf8:	4608      	mov	r0, r1
 800adfa:	4611      	mov	r1, r2
 800adfc:	461a      	mov	r2, r3
 800adfe:	4603      	mov	r3, r0
 800ae00:	817b      	strh	r3, [r7, #10]
 800ae02:	460b      	mov	r3, r1
 800ae04:	813b      	strh	r3, [r7, #8]
 800ae06:	4613      	mov	r3, r2
 800ae08:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ae18:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	681a      	ldr	r2, [r3, #0]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2c:	9300      	str	r3, [sp, #0]
 800ae2e:	6a3b      	ldr	r3, [r7, #32]
 800ae30:	2200      	movs	r2, #0
 800ae32:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f000 f8c2 	bl	800afc0 <I2C_WaitOnFlagUntilTimeout>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00d      	beq.n	800ae5e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae50:	d103      	bne.n	800ae5a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae58:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ae5a:	2303      	movs	r3, #3
 800ae5c:	e0aa      	b.n	800afb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ae5e:	897b      	ldrh	r3, [r7, #10]
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	461a      	mov	r2, r3
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ae6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ae6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae70:	6a3a      	ldr	r2, [r7, #32]
 800ae72:	4952      	ldr	r1, [pc, #328]	@ (800afbc <I2C_RequestMemoryRead+0x1cc>)
 800ae74:	68f8      	ldr	r0, [r7, #12]
 800ae76:	f000 f91d 	bl	800b0b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d001      	beq.n	800ae84 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	e097      	b.n	800afb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae84:	2300      	movs	r3, #0
 800ae86:	617b      	str	r3, [r7, #20]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	695b      	ldr	r3, [r3, #20]
 800ae8e:	617b      	str	r3, [r7, #20]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	699b      	ldr	r3, [r3, #24]
 800ae96:	617b      	str	r3, [r7, #20]
 800ae98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae9c:	6a39      	ldr	r1, [r7, #32]
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f000 f9a8 	bl	800b1f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d00d      	beq.n	800aec6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeae:	2b04      	cmp	r3, #4
 800aeb0:	d107      	bne.n	800aec2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aec0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aec2:	2301      	movs	r3, #1
 800aec4:	e076      	b.n	800afb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aec6:	88fb      	ldrh	r3, [r7, #6]
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d105      	bne.n	800aed8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aecc:	893b      	ldrh	r3, [r7, #8]
 800aece:	b2da      	uxtb	r2, r3
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	611a      	str	r2, [r3, #16]
 800aed6:	e021      	b.n	800af1c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aed8:	893b      	ldrh	r3, [r7, #8]
 800aeda:	0a1b      	lsrs	r3, r3, #8
 800aedc:	b29b      	uxth	r3, r3
 800aede:	b2da      	uxtb	r2, r3
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aee8:	6a39      	ldr	r1, [r7, #32]
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f000 f982 	bl	800b1f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00d      	beq.n	800af12 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aefa:	2b04      	cmp	r3, #4
 800aefc:	d107      	bne.n	800af0e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800af0e:	2301      	movs	r3, #1
 800af10:	e050      	b.n	800afb4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800af12:	893b      	ldrh	r3, [r7, #8]
 800af14:	b2da      	uxtb	r2, r3
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af1e:	6a39      	ldr	r1, [r7, #32]
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f000 f967 	bl	800b1f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00d      	beq.n	800af48 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af30:	2b04      	cmp	r3, #4
 800af32:	d107      	bne.n	800af44 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af42:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800af44:	2301      	movs	r3, #1
 800af46:	e035      	b.n	800afb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800af56:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800af58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	6a3b      	ldr	r3, [r7, #32]
 800af5e:	2200      	movs	r2, #0
 800af60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f000 f82b 	bl	800afc0 <I2C_WaitOnFlagUntilTimeout>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d00d      	beq.n	800af8c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af7e:	d103      	bne.n	800af88 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800af86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800af88:	2303      	movs	r3, #3
 800af8a:	e013      	b.n	800afb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800af8c:	897b      	ldrh	r3, [r7, #10]
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	f043 0301 	orr.w	r3, r3, #1
 800af94:	b2da      	uxtb	r2, r3
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800af9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af9e:	6a3a      	ldr	r2, [r7, #32]
 800afa0:	4906      	ldr	r1, [pc, #24]	@ (800afbc <I2C_RequestMemoryRead+0x1cc>)
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f000 f886 	bl	800b0b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d001      	beq.n	800afb2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	e000      	b.n	800afb4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3718      	adds	r7, #24
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	00010002 	.word	0x00010002

0800afc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b084      	sub	sp, #16
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	603b      	str	r3, [r7, #0]
 800afcc:	4613      	mov	r3, r2
 800afce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800afd0:	e048      	b.n	800b064 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afd8:	d044      	beq.n	800b064 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afda:	f7fe f9e3 	bl	80093a4 <HAL_GetTick>
 800afde:	4602      	mov	r2, r0
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	683a      	ldr	r2, [r7, #0]
 800afe6:	429a      	cmp	r2, r3
 800afe8:	d302      	bcc.n	800aff0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d139      	bne.n	800b064 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	0c1b      	lsrs	r3, r3, #16
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d10d      	bne.n	800b016 <I2C_WaitOnFlagUntilTimeout+0x56>
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	695b      	ldr	r3, [r3, #20]
 800b000:	43da      	mvns	r2, r3
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	4013      	ands	r3, r2
 800b006:	b29b      	uxth	r3, r3
 800b008:	2b00      	cmp	r3, #0
 800b00a:	bf0c      	ite	eq
 800b00c:	2301      	moveq	r3, #1
 800b00e:	2300      	movne	r3, #0
 800b010:	b2db      	uxtb	r3, r3
 800b012:	461a      	mov	r2, r3
 800b014:	e00c      	b.n	800b030 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	699b      	ldr	r3, [r3, #24]
 800b01c:	43da      	mvns	r2, r3
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	4013      	ands	r3, r2
 800b022:	b29b      	uxth	r3, r3
 800b024:	2b00      	cmp	r3, #0
 800b026:	bf0c      	ite	eq
 800b028:	2301      	moveq	r3, #1
 800b02a:	2300      	movne	r3, #0
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	461a      	mov	r2, r3
 800b030:	79fb      	ldrb	r3, [r7, #7]
 800b032:	429a      	cmp	r2, r3
 800b034:	d116      	bne.n	800b064 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2200      	movs	r2, #0
 800b03a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2220      	movs	r2, #32
 800b040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2200      	movs	r2, #0
 800b048:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b050:	f043 0220 	orr.w	r2, r3, #32
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2200      	movs	r2, #0
 800b05c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b060:	2301      	movs	r3, #1
 800b062:	e023      	b.n	800b0ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	0c1b      	lsrs	r3, r3, #16
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	2b01      	cmp	r3, #1
 800b06c:	d10d      	bne.n	800b08a <I2C_WaitOnFlagUntilTimeout+0xca>
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	695b      	ldr	r3, [r3, #20]
 800b074:	43da      	mvns	r2, r3
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	4013      	ands	r3, r2
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	bf0c      	ite	eq
 800b080:	2301      	moveq	r3, #1
 800b082:	2300      	movne	r3, #0
 800b084:	b2db      	uxtb	r3, r3
 800b086:	461a      	mov	r2, r3
 800b088:	e00c      	b.n	800b0a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	43da      	mvns	r2, r3
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	4013      	ands	r3, r2
 800b096:	b29b      	uxth	r3, r3
 800b098:	2b00      	cmp	r3, #0
 800b09a:	bf0c      	ite	eq
 800b09c:	2301      	moveq	r3, #1
 800b09e:	2300      	movne	r3, #0
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	79fb      	ldrb	r3, [r7, #7]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d093      	beq.n	800afd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
 800b0c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b0c2:	e071      	b.n	800b1a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	695b      	ldr	r3, [r3, #20]
 800b0ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b0ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b0d2:	d123      	bne.n	800b11c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b0ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2220      	movs	r2, #32
 800b0f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2200      	movs	r2, #0
 800b100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b108:	f043 0204 	orr.w	r2, r3, #4
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2200      	movs	r2, #0
 800b114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b118:	2301      	movs	r3, #1
 800b11a:	e067      	b.n	800b1ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b122:	d041      	beq.n	800b1a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b124:	f7fe f93e 	bl	80093a4 <HAL_GetTick>
 800b128:	4602      	mov	r2, r0
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	1ad3      	subs	r3, r2, r3
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	429a      	cmp	r2, r3
 800b132:	d302      	bcc.n	800b13a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d136      	bne.n	800b1a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	0c1b      	lsrs	r3, r3, #16
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	2b01      	cmp	r3, #1
 800b142:	d10c      	bne.n	800b15e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	695b      	ldr	r3, [r3, #20]
 800b14a:	43da      	mvns	r2, r3
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	4013      	ands	r3, r2
 800b150:	b29b      	uxth	r3, r3
 800b152:	2b00      	cmp	r3, #0
 800b154:	bf14      	ite	ne
 800b156:	2301      	movne	r3, #1
 800b158:	2300      	moveq	r3, #0
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	e00b      	b.n	800b176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	699b      	ldr	r3, [r3, #24]
 800b164:	43da      	mvns	r2, r3
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	4013      	ands	r3, r2
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	bf14      	ite	ne
 800b170:	2301      	movne	r3, #1
 800b172:	2300      	moveq	r3, #0
 800b174:	b2db      	uxtb	r3, r3
 800b176:	2b00      	cmp	r3, #0
 800b178:	d016      	beq.n	800b1a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2200      	movs	r2, #0
 800b17e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2220      	movs	r2, #32
 800b184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b194:	f043 0220 	orr.w	r2, r3, #32
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	e021      	b.n	800b1ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	0c1b      	lsrs	r3, r3, #16
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d10c      	bne.n	800b1cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	695b      	ldr	r3, [r3, #20]
 800b1b8:	43da      	mvns	r2, r3
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	4013      	ands	r3, r2
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	bf14      	ite	ne
 800b1c4:	2301      	movne	r3, #1
 800b1c6:	2300      	moveq	r3, #0
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	e00b      	b.n	800b1e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	699b      	ldr	r3, [r3, #24]
 800b1d2:	43da      	mvns	r2, r3
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	4013      	ands	r3, r2
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	bf14      	ite	ne
 800b1de:	2301      	movne	r3, #1
 800b1e0:	2300      	moveq	r3, #0
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f47f af6d 	bne.w	800b0c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b1ea:	2300      	movs	r3, #0
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3710      	adds	r7, #16
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b200:	e034      	b.n	800b26c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b202:	68f8      	ldr	r0, [r7, #12]
 800b204:	f000 f8e3 	bl	800b3ce <I2C_IsAcknowledgeFailed>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d001      	beq.n	800b212 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	e034      	b.n	800b27c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b218:	d028      	beq.n	800b26c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b21a:	f7fe f8c3 	bl	80093a4 <HAL_GetTick>
 800b21e:	4602      	mov	r2, r0
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	1ad3      	subs	r3, r2, r3
 800b224:	68ba      	ldr	r2, [r7, #8]
 800b226:	429a      	cmp	r2, r3
 800b228:	d302      	bcc.n	800b230 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d11d      	bne.n	800b26c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	695b      	ldr	r3, [r3, #20]
 800b236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b23a:	2b80      	cmp	r3, #128	@ 0x80
 800b23c:	d016      	beq.n	800b26c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2200      	movs	r2, #0
 800b242:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2220      	movs	r2, #32
 800b248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2200      	movs	r2, #0
 800b250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b258:	f043 0220 	orr.w	r2, r3, #32
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2200      	movs	r2, #0
 800b264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b268:	2301      	movs	r3, #1
 800b26a:	e007      	b.n	800b27c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	695b      	ldr	r3, [r3, #20]
 800b272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b276:	2b80      	cmp	r3, #128	@ 0x80
 800b278:	d1c3      	bne.n	800b202 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b27a:	2300      	movs	r3, #0
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b084      	sub	sp, #16
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b290:	e034      	b.n	800b2fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	f000 f89b 	bl	800b3ce <I2C_IsAcknowledgeFailed>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d001      	beq.n	800b2a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e034      	b.n	800b30c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b2a8:	d028      	beq.n	800b2fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2aa:	f7fe f87b 	bl	80093a4 <HAL_GetTick>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d302      	bcc.n	800b2c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d11d      	bne.n	800b2fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	695b      	ldr	r3, [r3, #20]
 800b2c6:	f003 0304 	and.w	r3, r3, #4
 800b2ca:	2b04      	cmp	r3, #4
 800b2cc:	d016      	beq.n	800b2fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2220      	movs	r2, #32
 800b2d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2e8:	f043 0220 	orr.w	r2, r3, #32
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b2f8:	2301      	movs	r3, #1
 800b2fa:	e007      	b.n	800b30c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	695b      	ldr	r3, [r3, #20]
 800b302:	f003 0304 	and.w	r3, r3, #4
 800b306:	2b04      	cmp	r3, #4
 800b308:	d1c3      	bne.n	800b292 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3710      	adds	r7, #16
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	60f8      	str	r0, [r7, #12]
 800b31c:	60b9      	str	r1, [r7, #8]
 800b31e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b320:	e049      	b.n	800b3b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	695b      	ldr	r3, [r3, #20]
 800b328:	f003 0310 	and.w	r3, r3, #16
 800b32c:	2b10      	cmp	r3, #16
 800b32e:	d119      	bne.n	800b364 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	f06f 0210 	mvn.w	r2, #16
 800b338:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	2200      	movs	r2, #0
 800b33e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2220      	movs	r2, #32
 800b344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	e030      	b.n	800b3c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b364:	f7fe f81e 	bl	80093a4 <HAL_GetTick>
 800b368:	4602      	mov	r2, r0
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	1ad3      	subs	r3, r2, r3
 800b36e:	68ba      	ldr	r2, [r7, #8]
 800b370:	429a      	cmp	r2, r3
 800b372:	d302      	bcc.n	800b37a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d11d      	bne.n	800b3b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	695b      	ldr	r3, [r3, #20]
 800b380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b384:	2b40      	cmp	r3, #64	@ 0x40
 800b386:	d016      	beq.n	800b3b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2200      	movs	r2, #0
 800b38c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2220      	movs	r2, #32
 800b392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3a2:	f043 0220 	orr.w	r2, r3, #32
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e007      	b.n	800b3c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	695b      	ldr	r3, [r3, #20]
 800b3bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b3c0:	2b40      	cmp	r3, #64	@ 0x40
 800b3c2:	d1ae      	bne.n	800b322 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b3c4:	2300      	movs	r3, #0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3710      	adds	r7, #16
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b3ce:	b480      	push	{r7}
 800b3d0:	b083      	sub	sp, #12
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	695b      	ldr	r3, [r3, #20]
 800b3dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b3e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3e4:	d11b      	bne.n	800b41e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b3ee:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2220      	movs	r2, #32
 800b3fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b40a:	f043 0204 	orr.w	r2, r3, #4
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b41a:	2301      	movs	r3, #1
 800b41c:	e000      	b.n	800b420 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b41e:	2300      	movs	r3, #0
}
 800b420:	4618      	mov	r0, r3
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	bc80      	pop	{r7}
 800b428:	4770      	bx	lr
	...

0800b42c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b086      	sub	sp, #24
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d101      	bne.n	800b43e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	e272      	b.n	800b924 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f003 0301 	and.w	r3, r3, #1
 800b446:	2b00      	cmp	r3, #0
 800b448:	f000 8087 	beq.w	800b55a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b44c:	4b92      	ldr	r3, [pc, #584]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	f003 030c 	and.w	r3, r3, #12
 800b454:	2b04      	cmp	r3, #4
 800b456:	d00c      	beq.n	800b472 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b458:	4b8f      	ldr	r3, [pc, #572]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	f003 030c 	and.w	r3, r3, #12
 800b460:	2b08      	cmp	r3, #8
 800b462:	d112      	bne.n	800b48a <HAL_RCC_OscConfig+0x5e>
 800b464:	4b8c      	ldr	r3, [pc, #560]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b46c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b470:	d10b      	bne.n	800b48a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b472:	4b89      	ldr	r3, [pc, #548]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d06c      	beq.n	800b558 <HAL_RCC_OscConfig+0x12c>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d168      	bne.n	800b558 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b486:	2301      	movs	r3, #1
 800b488:	e24c      	b.n	800b924 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b492:	d106      	bne.n	800b4a2 <HAL_RCC_OscConfig+0x76>
 800b494:	4b80      	ldr	r3, [pc, #512]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a7f      	ldr	r2, [pc, #508]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b49a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b49e:	6013      	str	r3, [r2, #0]
 800b4a0:	e02e      	b.n	800b500 <HAL_RCC_OscConfig+0xd4>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d10c      	bne.n	800b4c4 <HAL_RCC_OscConfig+0x98>
 800b4aa:	4b7b      	ldr	r3, [pc, #492]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a7a      	ldr	r2, [pc, #488]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b4b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b4b4:	6013      	str	r3, [r2, #0]
 800b4b6:	4b78      	ldr	r3, [pc, #480]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a77      	ldr	r2, [pc, #476]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b4bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b4c0:	6013      	str	r3, [r2, #0]
 800b4c2:	e01d      	b.n	800b500 <HAL_RCC_OscConfig+0xd4>
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b4cc:	d10c      	bne.n	800b4e8 <HAL_RCC_OscConfig+0xbc>
 800b4ce:	4b72      	ldr	r3, [pc, #456]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	4a71      	ldr	r2, [pc, #452]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b4d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b4d8:	6013      	str	r3, [r2, #0]
 800b4da:	4b6f      	ldr	r3, [pc, #444]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a6e      	ldr	r2, [pc, #440]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b4e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b4e4:	6013      	str	r3, [r2, #0]
 800b4e6:	e00b      	b.n	800b500 <HAL_RCC_OscConfig+0xd4>
 800b4e8:	4b6b      	ldr	r3, [pc, #428]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a6a      	ldr	r2, [pc, #424]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b4ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b4f2:	6013      	str	r3, [r2, #0]
 800b4f4:	4b68      	ldr	r3, [pc, #416]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a67      	ldr	r2, [pc, #412]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b4fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b4fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d013      	beq.n	800b530 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b508:	f7fd ff4c 	bl	80093a4 <HAL_GetTick>
 800b50c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b50e:	e008      	b.n	800b522 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b510:	f7fd ff48 	bl	80093a4 <HAL_GetTick>
 800b514:	4602      	mov	r2, r0
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	2b64      	cmp	r3, #100	@ 0x64
 800b51c:	d901      	bls.n	800b522 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b51e:	2303      	movs	r3, #3
 800b520:	e200      	b.n	800b924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b522:	4b5d      	ldr	r3, [pc, #372]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d0f0      	beq.n	800b510 <HAL_RCC_OscConfig+0xe4>
 800b52e:	e014      	b.n	800b55a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b530:	f7fd ff38 	bl	80093a4 <HAL_GetTick>
 800b534:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b536:	e008      	b.n	800b54a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b538:	f7fd ff34 	bl	80093a4 <HAL_GetTick>
 800b53c:	4602      	mov	r2, r0
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	1ad3      	subs	r3, r2, r3
 800b542:	2b64      	cmp	r3, #100	@ 0x64
 800b544:	d901      	bls.n	800b54a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b546:	2303      	movs	r3, #3
 800b548:	e1ec      	b.n	800b924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b54a:	4b53      	ldr	r3, [pc, #332]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b552:	2b00      	cmp	r3, #0
 800b554:	d1f0      	bne.n	800b538 <HAL_RCC_OscConfig+0x10c>
 800b556:	e000      	b.n	800b55a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f003 0302 	and.w	r3, r3, #2
 800b562:	2b00      	cmp	r3, #0
 800b564:	d063      	beq.n	800b62e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b566:	4b4c      	ldr	r3, [pc, #304]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	f003 030c 	and.w	r3, r3, #12
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d00b      	beq.n	800b58a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b572:	4b49      	ldr	r3, [pc, #292]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	f003 030c 	and.w	r3, r3, #12
 800b57a:	2b08      	cmp	r3, #8
 800b57c:	d11c      	bne.n	800b5b8 <HAL_RCC_OscConfig+0x18c>
 800b57e:	4b46      	ldr	r3, [pc, #280]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b586:	2b00      	cmp	r3, #0
 800b588:	d116      	bne.n	800b5b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b58a:	4b43      	ldr	r3, [pc, #268]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f003 0302 	and.w	r3, r3, #2
 800b592:	2b00      	cmp	r3, #0
 800b594:	d005      	beq.n	800b5a2 <HAL_RCC_OscConfig+0x176>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	691b      	ldr	r3, [r3, #16]
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d001      	beq.n	800b5a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	e1c0      	b.n	800b924 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b5a2:	4b3d      	ldr	r3, [pc, #244]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	695b      	ldr	r3, [r3, #20]
 800b5ae:	00db      	lsls	r3, r3, #3
 800b5b0:	4939      	ldr	r1, [pc, #228]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b5b6:	e03a      	b.n	800b62e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d020      	beq.n	800b602 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b5c0:	4b36      	ldr	r3, [pc, #216]	@ (800b69c <HAL_RCC_OscConfig+0x270>)
 800b5c2:	2201      	movs	r2, #1
 800b5c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5c6:	f7fd feed 	bl	80093a4 <HAL_GetTick>
 800b5ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b5cc:	e008      	b.n	800b5e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b5ce:	f7fd fee9 	bl	80093a4 <HAL_GetTick>
 800b5d2:	4602      	mov	r2, r0
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	1ad3      	subs	r3, r2, r3
 800b5d8:	2b02      	cmp	r3, #2
 800b5da:	d901      	bls.n	800b5e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b5dc:	2303      	movs	r3, #3
 800b5de:	e1a1      	b.n	800b924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b5e0:	4b2d      	ldr	r3, [pc, #180]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f003 0302 	and.w	r3, r3, #2
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d0f0      	beq.n	800b5ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b5ec:	4b2a      	ldr	r3, [pc, #168]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	695b      	ldr	r3, [r3, #20]
 800b5f8:	00db      	lsls	r3, r3, #3
 800b5fa:	4927      	ldr	r1, [pc, #156]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	600b      	str	r3, [r1, #0]
 800b600:	e015      	b.n	800b62e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b602:	4b26      	ldr	r3, [pc, #152]	@ (800b69c <HAL_RCC_OscConfig+0x270>)
 800b604:	2200      	movs	r2, #0
 800b606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b608:	f7fd fecc 	bl	80093a4 <HAL_GetTick>
 800b60c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b60e:	e008      	b.n	800b622 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b610:	f7fd fec8 	bl	80093a4 <HAL_GetTick>
 800b614:	4602      	mov	r2, r0
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	1ad3      	subs	r3, r2, r3
 800b61a:	2b02      	cmp	r3, #2
 800b61c:	d901      	bls.n	800b622 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b61e:	2303      	movs	r3, #3
 800b620:	e180      	b.n	800b924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b622:	4b1d      	ldr	r3, [pc, #116]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f003 0302 	and.w	r3, r3, #2
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d1f0      	bne.n	800b610 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f003 0308 	and.w	r3, r3, #8
 800b636:	2b00      	cmp	r3, #0
 800b638:	d03a      	beq.n	800b6b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	699b      	ldr	r3, [r3, #24]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d019      	beq.n	800b676 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b642:	4b17      	ldr	r3, [pc, #92]	@ (800b6a0 <HAL_RCC_OscConfig+0x274>)
 800b644:	2201      	movs	r2, #1
 800b646:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b648:	f7fd feac 	bl	80093a4 <HAL_GetTick>
 800b64c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b64e:	e008      	b.n	800b662 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b650:	f7fd fea8 	bl	80093a4 <HAL_GetTick>
 800b654:	4602      	mov	r2, r0
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	1ad3      	subs	r3, r2, r3
 800b65a:	2b02      	cmp	r3, #2
 800b65c:	d901      	bls.n	800b662 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b65e:	2303      	movs	r3, #3
 800b660:	e160      	b.n	800b924 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b662:	4b0d      	ldr	r3, [pc, #52]	@ (800b698 <HAL_RCC_OscConfig+0x26c>)
 800b664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b666:	f003 0302 	and.w	r3, r3, #2
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d0f0      	beq.n	800b650 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b66e:	2001      	movs	r0, #1
 800b670:	f000 face 	bl	800bc10 <RCC_Delay>
 800b674:	e01c      	b.n	800b6b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b676:	4b0a      	ldr	r3, [pc, #40]	@ (800b6a0 <HAL_RCC_OscConfig+0x274>)
 800b678:	2200      	movs	r2, #0
 800b67a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b67c:	f7fd fe92 	bl	80093a4 <HAL_GetTick>
 800b680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b682:	e00f      	b.n	800b6a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b684:	f7fd fe8e 	bl	80093a4 <HAL_GetTick>
 800b688:	4602      	mov	r2, r0
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	1ad3      	subs	r3, r2, r3
 800b68e:	2b02      	cmp	r3, #2
 800b690:	d908      	bls.n	800b6a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b692:	2303      	movs	r3, #3
 800b694:	e146      	b.n	800b924 <HAL_RCC_OscConfig+0x4f8>
 800b696:	bf00      	nop
 800b698:	40021000 	.word	0x40021000
 800b69c:	42420000 	.word	0x42420000
 800b6a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b6a4:	4b92      	ldr	r3, [pc, #584]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b6a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6a8:	f003 0302 	and.w	r3, r3, #2
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1e9      	bne.n	800b684 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f003 0304 	and.w	r3, r3, #4
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f000 80a6 	beq.w	800b80a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b6be:	2300      	movs	r3, #0
 800b6c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b6c2:	4b8b      	ldr	r3, [pc, #556]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b6c4:	69db      	ldr	r3, [r3, #28]
 800b6c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d10d      	bne.n	800b6ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b6ce:	4b88      	ldr	r3, [pc, #544]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b6d0:	69db      	ldr	r3, [r3, #28]
 800b6d2:	4a87      	ldr	r2, [pc, #540]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b6d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b6d8:	61d3      	str	r3, [r2, #28]
 800b6da:	4b85      	ldr	r3, [pc, #532]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b6dc:	69db      	ldr	r3, [r3, #28]
 800b6de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b6e2:	60bb      	str	r3, [r7, #8]
 800b6e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b6ea:	4b82      	ldr	r3, [pc, #520]	@ (800b8f4 <HAL_RCC_OscConfig+0x4c8>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d118      	bne.n	800b728 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b6f6:	4b7f      	ldr	r3, [pc, #508]	@ (800b8f4 <HAL_RCC_OscConfig+0x4c8>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a7e      	ldr	r2, [pc, #504]	@ (800b8f4 <HAL_RCC_OscConfig+0x4c8>)
 800b6fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b702:	f7fd fe4f 	bl	80093a4 <HAL_GetTick>
 800b706:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b708:	e008      	b.n	800b71c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b70a:	f7fd fe4b 	bl	80093a4 <HAL_GetTick>
 800b70e:	4602      	mov	r2, r0
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	1ad3      	subs	r3, r2, r3
 800b714:	2b64      	cmp	r3, #100	@ 0x64
 800b716:	d901      	bls.n	800b71c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b718:	2303      	movs	r3, #3
 800b71a:	e103      	b.n	800b924 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b71c:	4b75      	ldr	r3, [pc, #468]	@ (800b8f4 <HAL_RCC_OscConfig+0x4c8>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b724:	2b00      	cmp	r3, #0
 800b726:	d0f0      	beq.n	800b70a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	2b01      	cmp	r3, #1
 800b72e:	d106      	bne.n	800b73e <HAL_RCC_OscConfig+0x312>
 800b730:	4b6f      	ldr	r3, [pc, #444]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b732:	6a1b      	ldr	r3, [r3, #32]
 800b734:	4a6e      	ldr	r2, [pc, #440]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b736:	f043 0301 	orr.w	r3, r3, #1
 800b73a:	6213      	str	r3, [r2, #32]
 800b73c:	e02d      	b.n	800b79a <HAL_RCC_OscConfig+0x36e>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d10c      	bne.n	800b760 <HAL_RCC_OscConfig+0x334>
 800b746:	4b6a      	ldr	r3, [pc, #424]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b748:	6a1b      	ldr	r3, [r3, #32]
 800b74a:	4a69      	ldr	r2, [pc, #420]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b74c:	f023 0301 	bic.w	r3, r3, #1
 800b750:	6213      	str	r3, [r2, #32]
 800b752:	4b67      	ldr	r3, [pc, #412]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b754:	6a1b      	ldr	r3, [r3, #32]
 800b756:	4a66      	ldr	r2, [pc, #408]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b758:	f023 0304 	bic.w	r3, r3, #4
 800b75c:	6213      	str	r3, [r2, #32]
 800b75e:	e01c      	b.n	800b79a <HAL_RCC_OscConfig+0x36e>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	2b05      	cmp	r3, #5
 800b766:	d10c      	bne.n	800b782 <HAL_RCC_OscConfig+0x356>
 800b768:	4b61      	ldr	r3, [pc, #388]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b76a:	6a1b      	ldr	r3, [r3, #32]
 800b76c:	4a60      	ldr	r2, [pc, #384]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b76e:	f043 0304 	orr.w	r3, r3, #4
 800b772:	6213      	str	r3, [r2, #32]
 800b774:	4b5e      	ldr	r3, [pc, #376]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b776:	6a1b      	ldr	r3, [r3, #32]
 800b778:	4a5d      	ldr	r2, [pc, #372]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b77a:	f043 0301 	orr.w	r3, r3, #1
 800b77e:	6213      	str	r3, [r2, #32]
 800b780:	e00b      	b.n	800b79a <HAL_RCC_OscConfig+0x36e>
 800b782:	4b5b      	ldr	r3, [pc, #364]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b784:	6a1b      	ldr	r3, [r3, #32]
 800b786:	4a5a      	ldr	r2, [pc, #360]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b788:	f023 0301 	bic.w	r3, r3, #1
 800b78c:	6213      	str	r3, [r2, #32]
 800b78e:	4b58      	ldr	r3, [pc, #352]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b790:	6a1b      	ldr	r3, [r3, #32]
 800b792:	4a57      	ldr	r2, [pc, #348]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b794:	f023 0304 	bic.w	r3, r3, #4
 800b798:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d015      	beq.n	800b7ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b7a2:	f7fd fdff 	bl	80093a4 <HAL_GetTick>
 800b7a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b7a8:	e00a      	b.n	800b7c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7aa:	f7fd fdfb 	bl	80093a4 <HAL_GetTick>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	1ad3      	subs	r3, r2, r3
 800b7b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d901      	bls.n	800b7c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b7bc:	2303      	movs	r3, #3
 800b7be:	e0b1      	b.n	800b924 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b7c0:	4b4b      	ldr	r3, [pc, #300]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b7c2:	6a1b      	ldr	r3, [r3, #32]
 800b7c4:	f003 0302 	and.w	r3, r3, #2
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d0ee      	beq.n	800b7aa <HAL_RCC_OscConfig+0x37e>
 800b7cc:	e014      	b.n	800b7f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b7ce:	f7fd fde9 	bl	80093a4 <HAL_GetTick>
 800b7d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b7d4:	e00a      	b.n	800b7ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7d6:	f7fd fde5 	bl	80093a4 <HAL_GetTick>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	693b      	ldr	r3, [r7, #16]
 800b7de:	1ad3      	subs	r3, r2, r3
 800b7e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7e4:	4293      	cmp	r3, r2
 800b7e6:	d901      	bls.n	800b7ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b7e8:	2303      	movs	r3, #3
 800b7ea:	e09b      	b.n	800b924 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b7ec:	4b40      	ldr	r3, [pc, #256]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b7ee:	6a1b      	ldr	r3, [r3, #32]
 800b7f0:	f003 0302 	and.w	r3, r3, #2
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d1ee      	bne.n	800b7d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b7f8:	7dfb      	ldrb	r3, [r7, #23]
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d105      	bne.n	800b80a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b7fe:	4b3c      	ldr	r3, [pc, #240]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b800:	69db      	ldr	r3, [r3, #28]
 800b802:	4a3b      	ldr	r2, [pc, #236]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b804:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b808:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	69db      	ldr	r3, [r3, #28]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f000 8087 	beq.w	800b922 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b814:	4b36      	ldr	r3, [pc, #216]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b816:	685b      	ldr	r3, [r3, #4]
 800b818:	f003 030c 	and.w	r3, r3, #12
 800b81c:	2b08      	cmp	r3, #8
 800b81e:	d061      	beq.n	800b8e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	69db      	ldr	r3, [r3, #28]
 800b824:	2b02      	cmp	r3, #2
 800b826:	d146      	bne.n	800b8b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b828:	4b33      	ldr	r3, [pc, #204]	@ (800b8f8 <HAL_RCC_OscConfig+0x4cc>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b82e:	f7fd fdb9 	bl	80093a4 <HAL_GetTick>
 800b832:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b834:	e008      	b.n	800b848 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b836:	f7fd fdb5 	bl	80093a4 <HAL_GetTick>
 800b83a:	4602      	mov	r2, r0
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	1ad3      	subs	r3, r2, r3
 800b840:	2b02      	cmp	r3, #2
 800b842:	d901      	bls.n	800b848 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b844:	2303      	movs	r3, #3
 800b846:	e06d      	b.n	800b924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b848:	4b29      	ldr	r3, [pc, #164]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b850:	2b00      	cmp	r3, #0
 800b852:	d1f0      	bne.n	800b836 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	6a1b      	ldr	r3, [r3, #32]
 800b858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b85c:	d108      	bne.n	800b870 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b85e:	4b24      	ldr	r3, [pc, #144]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	689b      	ldr	r3, [r3, #8]
 800b86a:	4921      	ldr	r1, [pc, #132]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b86c:	4313      	orrs	r3, r2
 800b86e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b870:	4b1f      	ldr	r3, [pc, #124]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6a19      	ldr	r1, [r3, #32]
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b880:	430b      	orrs	r3, r1
 800b882:	491b      	ldr	r1, [pc, #108]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b884:	4313      	orrs	r3, r2
 800b886:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b888:	4b1b      	ldr	r3, [pc, #108]	@ (800b8f8 <HAL_RCC_OscConfig+0x4cc>)
 800b88a:	2201      	movs	r2, #1
 800b88c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b88e:	f7fd fd89 	bl	80093a4 <HAL_GetTick>
 800b892:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b894:	e008      	b.n	800b8a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b896:	f7fd fd85 	bl	80093a4 <HAL_GetTick>
 800b89a:	4602      	mov	r2, r0
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	1ad3      	subs	r3, r2, r3
 800b8a0:	2b02      	cmp	r3, #2
 800b8a2:	d901      	bls.n	800b8a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b8a4:	2303      	movs	r3, #3
 800b8a6:	e03d      	b.n	800b924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b8a8:	4b11      	ldr	r3, [pc, #68]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d0f0      	beq.n	800b896 <HAL_RCC_OscConfig+0x46a>
 800b8b4:	e035      	b.n	800b922 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8b6:	4b10      	ldr	r3, [pc, #64]	@ (800b8f8 <HAL_RCC_OscConfig+0x4cc>)
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b8bc:	f7fd fd72 	bl	80093a4 <HAL_GetTick>
 800b8c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b8c2:	e008      	b.n	800b8d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8c4:	f7fd fd6e 	bl	80093a4 <HAL_GetTick>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	1ad3      	subs	r3, r2, r3
 800b8ce:	2b02      	cmp	r3, #2
 800b8d0:	d901      	bls.n	800b8d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b8d2:	2303      	movs	r3, #3
 800b8d4:	e026      	b.n	800b924 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b8d6:	4b06      	ldr	r3, [pc, #24]	@ (800b8f0 <HAL_RCC_OscConfig+0x4c4>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1f0      	bne.n	800b8c4 <HAL_RCC_OscConfig+0x498>
 800b8e2:	e01e      	b.n	800b922 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	69db      	ldr	r3, [r3, #28]
 800b8e8:	2b01      	cmp	r3, #1
 800b8ea:	d107      	bne.n	800b8fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e019      	b.n	800b924 <HAL_RCC_OscConfig+0x4f8>
 800b8f0:	40021000 	.word	0x40021000
 800b8f4:	40007000 	.word	0x40007000
 800b8f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b8fc:	4b0b      	ldr	r3, [pc, #44]	@ (800b92c <HAL_RCC_OscConfig+0x500>)
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6a1b      	ldr	r3, [r3, #32]
 800b90c:	429a      	cmp	r2, r3
 800b90e:	d106      	bne.n	800b91e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d001      	beq.n	800b922 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b91e:	2301      	movs	r3, #1
 800b920:	e000      	b.n	800b924 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b922:	2300      	movs	r3, #0
}
 800b924:	4618      	mov	r0, r3
 800b926:	3718      	adds	r7, #24
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	40021000 	.word	0x40021000

0800b930 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d101      	bne.n	800b944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b940:	2301      	movs	r3, #1
 800b942:	e0d0      	b.n	800bae6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b944:	4b6a      	ldr	r3, [pc, #424]	@ (800baf0 <HAL_RCC_ClockConfig+0x1c0>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f003 0307 	and.w	r3, r3, #7
 800b94c:	683a      	ldr	r2, [r7, #0]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d910      	bls.n	800b974 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b952:	4b67      	ldr	r3, [pc, #412]	@ (800baf0 <HAL_RCC_ClockConfig+0x1c0>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	f023 0207 	bic.w	r2, r3, #7
 800b95a:	4965      	ldr	r1, [pc, #404]	@ (800baf0 <HAL_RCC_ClockConfig+0x1c0>)
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	4313      	orrs	r3, r2
 800b960:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b962:	4b63      	ldr	r3, [pc, #396]	@ (800baf0 <HAL_RCC_ClockConfig+0x1c0>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	f003 0307 	and.w	r3, r3, #7
 800b96a:	683a      	ldr	r2, [r7, #0]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d001      	beq.n	800b974 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b970:	2301      	movs	r3, #1
 800b972:	e0b8      	b.n	800bae6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f003 0302 	and.w	r3, r3, #2
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d020      	beq.n	800b9c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f003 0304 	and.w	r3, r3, #4
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d005      	beq.n	800b998 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b98c:	4b59      	ldr	r3, [pc, #356]	@ (800baf4 <HAL_RCC_ClockConfig+0x1c4>)
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	4a58      	ldr	r2, [pc, #352]	@ (800baf4 <HAL_RCC_ClockConfig+0x1c4>)
 800b992:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800b996:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f003 0308 	and.w	r3, r3, #8
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d005      	beq.n	800b9b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b9a4:	4b53      	ldr	r3, [pc, #332]	@ (800baf4 <HAL_RCC_ClockConfig+0x1c4>)
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	4a52      	ldr	r2, [pc, #328]	@ (800baf4 <HAL_RCC_ClockConfig+0x1c4>)
 800b9aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800b9ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b9b0:	4b50      	ldr	r3, [pc, #320]	@ (800baf4 <HAL_RCC_ClockConfig+0x1c4>)
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	494d      	ldr	r1, [pc, #308]	@ (800baf4 <HAL_RCC_ClockConfig+0x1c4>)
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f003 0301 	and.w	r3, r3, #1
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d040      	beq.n	800ba50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d107      	bne.n	800b9e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b9d6:	4b47      	ldr	r3, [pc, #284]	@ (800baf4 <HAL_RCC_ClockConfig+0x1c4>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d115      	bne.n	800ba0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e07f      	b.n	800bae6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	2b02      	cmp	r3, #2
 800b9ec:	d107      	bne.n	800b9fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b9ee:	4b41      	ldr	r3, [pc, #260]	@ (800baf4 <HAL_RCC_ClockConfig+0x1c4>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d109      	bne.n	800ba0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e073      	b.n	800bae6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b9fe:	4b3d      	ldr	r3, [pc, #244]	@ (800baf4 <HAL_RCC_ClockConfig+0x1c4>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f003 0302 	and.w	r3, r3, #2
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d101      	bne.n	800ba0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e06b      	b.n	800bae6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ba0e:	4b39      	ldr	r3, [pc, #228]	@ (800baf4 <HAL_RCC_ClockConfig+0x1c4>)
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	f023 0203 	bic.w	r2, r3, #3
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	4936      	ldr	r1, [pc, #216]	@ (800baf4 <HAL_RCC_ClockConfig+0x1c4>)
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ba20:	f7fd fcc0 	bl	80093a4 <HAL_GetTick>
 800ba24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba26:	e00a      	b.n	800ba3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ba28:	f7fd fcbc 	bl	80093a4 <HAL_GetTick>
 800ba2c:	4602      	mov	r2, r0
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	1ad3      	subs	r3, r2, r3
 800ba32:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d901      	bls.n	800ba3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ba3a:	2303      	movs	r3, #3
 800ba3c:	e053      	b.n	800bae6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ba3e:	4b2d      	ldr	r3, [pc, #180]	@ (800baf4 <HAL_RCC_ClockConfig+0x1c4>)
 800ba40:	685b      	ldr	r3, [r3, #4]
 800ba42:	f003 020c 	and.w	r2, r3, #12
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d1eb      	bne.n	800ba28 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ba50:	4b27      	ldr	r3, [pc, #156]	@ (800baf0 <HAL_RCC_ClockConfig+0x1c0>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f003 0307 	and.w	r3, r3, #7
 800ba58:	683a      	ldr	r2, [r7, #0]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d210      	bcs.n	800ba80 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba5e:	4b24      	ldr	r3, [pc, #144]	@ (800baf0 <HAL_RCC_ClockConfig+0x1c0>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f023 0207 	bic.w	r2, r3, #7
 800ba66:	4922      	ldr	r1, [pc, #136]	@ (800baf0 <HAL_RCC_ClockConfig+0x1c0>)
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	4313      	orrs	r3, r2
 800ba6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba6e:	4b20      	ldr	r3, [pc, #128]	@ (800baf0 <HAL_RCC_ClockConfig+0x1c0>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f003 0307 	and.w	r3, r3, #7
 800ba76:	683a      	ldr	r2, [r7, #0]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d001      	beq.n	800ba80 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	e032      	b.n	800bae6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f003 0304 	and.w	r3, r3, #4
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d008      	beq.n	800ba9e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ba8c:	4b19      	ldr	r3, [pc, #100]	@ (800baf4 <HAL_RCC_ClockConfig+0x1c4>)
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	68db      	ldr	r3, [r3, #12]
 800ba98:	4916      	ldr	r1, [pc, #88]	@ (800baf4 <HAL_RCC_ClockConfig+0x1c4>)
 800ba9a:	4313      	orrs	r3, r2
 800ba9c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f003 0308 	and.w	r3, r3, #8
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d009      	beq.n	800babe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800baaa:	4b12      	ldr	r3, [pc, #72]	@ (800baf4 <HAL_RCC_ClockConfig+0x1c4>)
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	691b      	ldr	r3, [r3, #16]
 800bab6:	00db      	lsls	r3, r3, #3
 800bab8:	490e      	ldr	r1, [pc, #56]	@ (800baf4 <HAL_RCC_ClockConfig+0x1c4>)
 800baba:	4313      	orrs	r3, r2
 800babc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800babe:	f000 f821 	bl	800bb04 <HAL_RCC_GetSysClockFreq>
 800bac2:	4602      	mov	r2, r0
 800bac4:	4b0b      	ldr	r3, [pc, #44]	@ (800baf4 <HAL_RCC_ClockConfig+0x1c4>)
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	091b      	lsrs	r3, r3, #4
 800baca:	f003 030f 	and.w	r3, r3, #15
 800bace:	490a      	ldr	r1, [pc, #40]	@ (800baf8 <HAL_RCC_ClockConfig+0x1c8>)
 800bad0:	5ccb      	ldrb	r3, [r1, r3]
 800bad2:	fa22 f303 	lsr.w	r3, r2, r3
 800bad6:	4a09      	ldr	r2, [pc, #36]	@ (800bafc <HAL_RCC_ClockConfig+0x1cc>)
 800bad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800bada:	4b09      	ldr	r3, [pc, #36]	@ (800bb00 <HAL_RCC_ClockConfig+0x1d0>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4618      	mov	r0, r3
 800bae0:	f7fd fc1e 	bl	8009320 <HAL_InitTick>

  return HAL_OK;
 800bae4:	2300      	movs	r3, #0
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3710      	adds	r7, #16
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	40022000 	.word	0x40022000
 800baf4:	40021000 	.word	0x40021000
 800baf8:	0800dcf0 	.word	0x0800dcf0
 800bafc:	20000f78 	.word	0x20000f78
 800bb00:	20000f7c 	.word	0x20000f7c

0800bb04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b087      	sub	sp, #28
 800bb08:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	60fb      	str	r3, [r7, #12]
 800bb0e:	2300      	movs	r3, #0
 800bb10:	60bb      	str	r3, [r7, #8]
 800bb12:	2300      	movs	r3, #0
 800bb14:	617b      	str	r3, [r7, #20]
 800bb16:	2300      	movs	r3, #0
 800bb18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800bb1e:	4b1e      	ldr	r3, [pc, #120]	@ (800bb98 <HAL_RCC_GetSysClockFreq+0x94>)
 800bb20:	685b      	ldr	r3, [r3, #4]
 800bb22:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f003 030c 	and.w	r3, r3, #12
 800bb2a:	2b04      	cmp	r3, #4
 800bb2c:	d002      	beq.n	800bb34 <HAL_RCC_GetSysClockFreq+0x30>
 800bb2e:	2b08      	cmp	r3, #8
 800bb30:	d003      	beq.n	800bb3a <HAL_RCC_GetSysClockFreq+0x36>
 800bb32:	e027      	b.n	800bb84 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800bb34:	4b19      	ldr	r3, [pc, #100]	@ (800bb9c <HAL_RCC_GetSysClockFreq+0x98>)
 800bb36:	613b      	str	r3, [r7, #16]
      break;
 800bb38:	e027      	b.n	800bb8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	0c9b      	lsrs	r3, r3, #18
 800bb3e:	f003 030f 	and.w	r3, r3, #15
 800bb42:	4a17      	ldr	r2, [pc, #92]	@ (800bba0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800bb44:	5cd3      	ldrb	r3, [r2, r3]
 800bb46:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d010      	beq.n	800bb74 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800bb52:	4b11      	ldr	r3, [pc, #68]	@ (800bb98 <HAL_RCC_GetSysClockFreq+0x94>)
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	0c5b      	lsrs	r3, r3, #17
 800bb58:	f003 0301 	and.w	r3, r3, #1
 800bb5c:	4a11      	ldr	r2, [pc, #68]	@ (800bba4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800bb5e:	5cd3      	ldrb	r3, [r2, r3]
 800bb60:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	4a0d      	ldr	r2, [pc, #52]	@ (800bb9c <HAL_RCC_GetSysClockFreq+0x98>)
 800bb66:	fb03 f202 	mul.w	r2, r3, r2
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb70:	617b      	str	r3, [r7, #20]
 800bb72:	e004      	b.n	800bb7e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4a0c      	ldr	r2, [pc, #48]	@ (800bba8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800bb78:	fb02 f303 	mul.w	r3, r2, r3
 800bb7c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	613b      	str	r3, [r7, #16]
      break;
 800bb82:	e002      	b.n	800bb8a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800bb84:	4b05      	ldr	r3, [pc, #20]	@ (800bb9c <HAL_RCC_GetSysClockFreq+0x98>)
 800bb86:	613b      	str	r3, [r7, #16]
      break;
 800bb88:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bb8a:	693b      	ldr	r3, [r7, #16]
}
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	371c      	adds	r7, #28
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bc80      	pop	{r7}
 800bb94:	4770      	bx	lr
 800bb96:	bf00      	nop
 800bb98:	40021000 	.word	0x40021000
 800bb9c:	007a1200 	.word	0x007a1200
 800bba0:	0800dd08 	.word	0x0800dd08
 800bba4:	0800dd18 	.word	0x0800dd18
 800bba8:	003d0900 	.word	0x003d0900

0800bbac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bbac:	b480      	push	{r7}
 800bbae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bbb0:	4b02      	ldr	r3, [pc, #8]	@ (800bbbc <HAL_RCC_GetHCLKFreq+0x10>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bc80      	pop	{r7}
 800bbba:	4770      	bx	lr
 800bbbc:	20000f78 	.word	0x20000f78

0800bbc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bbc4:	f7ff fff2 	bl	800bbac <HAL_RCC_GetHCLKFreq>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	4b05      	ldr	r3, [pc, #20]	@ (800bbe0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	0a1b      	lsrs	r3, r3, #8
 800bbd0:	f003 0307 	and.w	r3, r3, #7
 800bbd4:	4903      	ldr	r1, [pc, #12]	@ (800bbe4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bbd6:	5ccb      	ldrb	r3, [r1, r3]
 800bbd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	40021000 	.word	0x40021000
 800bbe4:	0800dd00 	.word	0x0800dd00

0800bbe8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bbec:	f7ff ffde 	bl	800bbac <HAL_RCC_GetHCLKFreq>
 800bbf0:	4602      	mov	r2, r0
 800bbf2:	4b05      	ldr	r3, [pc, #20]	@ (800bc08 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	0adb      	lsrs	r3, r3, #11
 800bbf8:	f003 0307 	and.w	r3, r3, #7
 800bbfc:	4903      	ldr	r1, [pc, #12]	@ (800bc0c <HAL_RCC_GetPCLK2Freq+0x24>)
 800bbfe:	5ccb      	ldrb	r3, [r1, r3]
 800bc00:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	bd80      	pop	{r7, pc}
 800bc08:	40021000 	.word	0x40021000
 800bc0c:	0800dd00 	.word	0x0800dd00

0800bc10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800bc18:	4b0a      	ldr	r3, [pc, #40]	@ (800bc44 <RCC_Delay+0x34>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a0a      	ldr	r2, [pc, #40]	@ (800bc48 <RCC_Delay+0x38>)
 800bc1e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc22:	0a5b      	lsrs	r3, r3, #9
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	fb02 f303 	mul.w	r3, r2, r3
 800bc2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800bc2c:	bf00      	nop
  }
  while (Delay --);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	1e5a      	subs	r2, r3, #1
 800bc32:	60fa      	str	r2, [r7, #12]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d1f9      	bne.n	800bc2c <RCC_Delay+0x1c>
}
 800bc38:	bf00      	nop
 800bc3a:	bf00      	nop
 800bc3c:	3714      	adds	r7, #20
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bc80      	pop	{r7}
 800bc42:	4770      	bx	lr
 800bc44:	20000f78 	.word	0x20000f78
 800bc48:	10624dd3 	.word	0x10624dd3

0800bc4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d101      	bne.n	800bc5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	e041      	b.n	800bce2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc64:	b2db      	uxtb	r3, r3
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d106      	bne.n	800bc78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f7fd fa22 	bl	80090bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2202      	movs	r2, #2
 800bc7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	3304      	adds	r3, #4
 800bc88:	4619      	mov	r1, r3
 800bc8a:	4610      	mov	r0, r2
 800bc8c:	f000 fa82 	bl	800c194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2201      	movs	r2, #1
 800bc94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2201      	movs	r2, #1
 800bc9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2201      	movs	r2, #1
 800bca4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bce0:	2300      	movs	r3, #0
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3708      	adds	r7, #8
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}
	...

0800bcec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d001      	beq.n	800bd04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd00:	2301      	movs	r3, #1
 800bd02:	e044      	b.n	800bd8e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2202      	movs	r2, #2
 800bd08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	68da      	ldr	r2, [r3, #12]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f042 0201 	orr.w	r2, r2, #1
 800bd1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a1d      	ldr	r2, [pc, #116]	@ (800bd98 <HAL_TIM_Base_Start_IT+0xac>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d018      	beq.n	800bd58 <HAL_TIM_Base_Start_IT+0x6c>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	4a1c      	ldr	r2, [pc, #112]	@ (800bd9c <HAL_TIM_Base_Start_IT+0xb0>)
 800bd2c:	4293      	cmp	r3, r2
 800bd2e:	d013      	beq.n	800bd58 <HAL_TIM_Base_Start_IT+0x6c>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd38:	d00e      	beq.n	800bd58 <HAL_TIM_Base_Start_IT+0x6c>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4a18      	ldr	r2, [pc, #96]	@ (800bda0 <HAL_TIM_Base_Start_IT+0xb4>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d009      	beq.n	800bd58 <HAL_TIM_Base_Start_IT+0x6c>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a16      	ldr	r2, [pc, #88]	@ (800bda4 <HAL_TIM_Base_Start_IT+0xb8>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d004      	beq.n	800bd58 <HAL_TIM_Base_Start_IT+0x6c>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4a15      	ldr	r2, [pc, #84]	@ (800bda8 <HAL_TIM_Base_Start_IT+0xbc>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d111      	bne.n	800bd7c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	689b      	ldr	r3, [r3, #8]
 800bd5e:	f003 0307 	and.w	r3, r3, #7
 800bd62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2b06      	cmp	r3, #6
 800bd68:	d010      	beq.n	800bd8c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f042 0201 	orr.w	r2, r2, #1
 800bd78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd7a:	e007      	b.n	800bd8c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	681a      	ldr	r2, [r3, #0]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f042 0201 	orr.w	r2, r2, #1
 800bd8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bd8c:	2300      	movs	r3, #0
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3714      	adds	r7, #20
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bc80      	pop	{r7}
 800bd96:	4770      	bx	lr
 800bd98:	40012c00 	.word	0x40012c00
 800bd9c:	40013400 	.word	0x40013400
 800bda0:	40000400 	.word	0x40000400
 800bda4:	40000800 	.word	0x40000800
 800bda8:	40000c00 	.word	0x40000c00

0800bdac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	f003 0302 	and.w	r3, r3, #2
 800bdbe:	2b02      	cmp	r3, #2
 800bdc0:	d122      	bne.n	800be08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	f003 0302 	and.w	r3, r3, #2
 800bdcc:	2b02      	cmp	r3, #2
 800bdce:	d11b      	bne.n	800be08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	f06f 0202 	mvn.w	r2, #2
 800bdd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2201      	movs	r2, #1
 800bdde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	699b      	ldr	r3, [r3, #24]
 800bde6:	f003 0303 	and.w	r3, r3, #3
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d003      	beq.n	800bdf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 f9b4 	bl	800c15c <HAL_TIM_IC_CaptureCallback>
 800bdf4:	e005      	b.n	800be02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 f9a7 	bl	800c14a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 f9b6 	bl	800c16e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	691b      	ldr	r3, [r3, #16]
 800be0e:	f003 0304 	and.w	r3, r3, #4
 800be12:	2b04      	cmp	r3, #4
 800be14:	d122      	bne.n	800be5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	f003 0304 	and.w	r3, r3, #4
 800be20:	2b04      	cmp	r3, #4
 800be22:	d11b      	bne.n	800be5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f06f 0204 	mvn.w	r2, #4
 800be2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2202      	movs	r2, #2
 800be32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	699b      	ldr	r3, [r3, #24]
 800be3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d003      	beq.n	800be4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 f98a 	bl	800c15c <HAL_TIM_IC_CaptureCallback>
 800be48:	e005      	b.n	800be56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 f97d 	bl	800c14a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 f98c 	bl	800c16e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	2200      	movs	r2, #0
 800be5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	691b      	ldr	r3, [r3, #16]
 800be62:	f003 0308 	and.w	r3, r3, #8
 800be66:	2b08      	cmp	r3, #8
 800be68:	d122      	bne.n	800beb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	68db      	ldr	r3, [r3, #12]
 800be70:	f003 0308 	and.w	r3, r3, #8
 800be74:	2b08      	cmp	r3, #8
 800be76:	d11b      	bne.n	800beb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f06f 0208 	mvn.w	r2, #8
 800be80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	2204      	movs	r2, #4
 800be86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	69db      	ldr	r3, [r3, #28]
 800be8e:	f003 0303 	and.w	r3, r3, #3
 800be92:	2b00      	cmp	r3, #0
 800be94:	d003      	beq.n	800be9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 f960 	bl	800c15c <HAL_TIM_IC_CaptureCallback>
 800be9c:	e005      	b.n	800beaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 f953 	bl	800c14a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bea4:	6878      	ldr	r0, [r7, #4]
 800bea6:	f000 f962 	bl	800c16e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	691b      	ldr	r3, [r3, #16]
 800beb6:	f003 0310 	and.w	r3, r3, #16
 800beba:	2b10      	cmp	r3, #16
 800bebc:	d122      	bne.n	800bf04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	68db      	ldr	r3, [r3, #12]
 800bec4:	f003 0310 	and.w	r3, r3, #16
 800bec8:	2b10      	cmp	r3, #16
 800beca:	d11b      	bne.n	800bf04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f06f 0210 	mvn.w	r2, #16
 800bed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2208      	movs	r2, #8
 800beda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	69db      	ldr	r3, [r3, #28]
 800bee2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d003      	beq.n	800bef2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 f936 	bl	800c15c <HAL_TIM_IC_CaptureCallback>
 800bef0:	e005      	b.n	800befe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 f929 	bl	800c14a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f000 f938 	bl	800c16e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	2200      	movs	r2, #0
 800bf02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	691b      	ldr	r3, [r3, #16]
 800bf0a:	f003 0301 	and.w	r3, r3, #1
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d10e      	bne.n	800bf30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	68db      	ldr	r3, [r3, #12]
 800bf18:	f003 0301 	and.w	r3, r3, #1
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d107      	bne.n	800bf30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f06f 0201 	mvn.w	r2, #1
 800bf28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	f7fc fd5e 	bl	80089ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf3a:	2b80      	cmp	r3, #128	@ 0x80
 800bf3c:	d10e      	bne.n	800bf5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	68db      	ldr	r3, [r3, #12]
 800bf44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf48:	2b80      	cmp	r3, #128	@ 0x80
 800bf4a:	d107      	bne.n	800bf5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800bf54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bf56:	6878      	ldr	r0, [r7, #4]
 800bf58:	f000 faa1 	bl	800c49e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	691b      	ldr	r3, [r3, #16]
 800bf62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf66:	2b40      	cmp	r3, #64	@ 0x40
 800bf68:	d10e      	bne.n	800bf88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf74:	2b40      	cmp	r3, #64	@ 0x40
 800bf76:	d107      	bne.n	800bf88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bf80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 f8fc 	bl	800c180 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	691b      	ldr	r3, [r3, #16]
 800bf8e:	f003 0320 	and.w	r3, r3, #32
 800bf92:	2b20      	cmp	r3, #32
 800bf94:	d10e      	bne.n	800bfb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	f003 0320 	and.w	r3, r3, #32
 800bfa0:	2b20      	cmp	r3, #32
 800bfa2:	d107      	bne.n	800bfb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f06f 0220 	mvn.w	r2, #32
 800bfac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 fa6c 	bl	800c48c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bfb4:	bf00      	nop
 800bfb6:	3708      	adds	r7, #8
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}

0800bfbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
 800bfc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bfd0:	2b01      	cmp	r3, #1
 800bfd2:	d101      	bne.n	800bfd8 <HAL_TIM_ConfigClockSource+0x1c>
 800bfd4:	2302      	movs	r3, #2
 800bfd6:	e0b4      	b.n	800c142 <HAL_TIM_ConfigClockSource+0x186>
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2202      	movs	r2, #2
 800bfe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	689b      	ldr	r3, [r3, #8]
 800bfee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bff6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bffe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c010:	d03e      	beq.n	800c090 <HAL_TIM_ConfigClockSource+0xd4>
 800c012:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c016:	f200 8087 	bhi.w	800c128 <HAL_TIM_ConfigClockSource+0x16c>
 800c01a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c01e:	f000 8086 	beq.w	800c12e <HAL_TIM_ConfigClockSource+0x172>
 800c022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c026:	d87f      	bhi.n	800c128 <HAL_TIM_ConfigClockSource+0x16c>
 800c028:	2b70      	cmp	r3, #112	@ 0x70
 800c02a:	d01a      	beq.n	800c062 <HAL_TIM_ConfigClockSource+0xa6>
 800c02c:	2b70      	cmp	r3, #112	@ 0x70
 800c02e:	d87b      	bhi.n	800c128 <HAL_TIM_ConfigClockSource+0x16c>
 800c030:	2b60      	cmp	r3, #96	@ 0x60
 800c032:	d050      	beq.n	800c0d6 <HAL_TIM_ConfigClockSource+0x11a>
 800c034:	2b60      	cmp	r3, #96	@ 0x60
 800c036:	d877      	bhi.n	800c128 <HAL_TIM_ConfigClockSource+0x16c>
 800c038:	2b50      	cmp	r3, #80	@ 0x50
 800c03a:	d03c      	beq.n	800c0b6 <HAL_TIM_ConfigClockSource+0xfa>
 800c03c:	2b50      	cmp	r3, #80	@ 0x50
 800c03e:	d873      	bhi.n	800c128 <HAL_TIM_ConfigClockSource+0x16c>
 800c040:	2b40      	cmp	r3, #64	@ 0x40
 800c042:	d058      	beq.n	800c0f6 <HAL_TIM_ConfigClockSource+0x13a>
 800c044:	2b40      	cmp	r3, #64	@ 0x40
 800c046:	d86f      	bhi.n	800c128 <HAL_TIM_ConfigClockSource+0x16c>
 800c048:	2b30      	cmp	r3, #48	@ 0x30
 800c04a:	d064      	beq.n	800c116 <HAL_TIM_ConfigClockSource+0x15a>
 800c04c:	2b30      	cmp	r3, #48	@ 0x30
 800c04e:	d86b      	bhi.n	800c128 <HAL_TIM_ConfigClockSource+0x16c>
 800c050:	2b20      	cmp	r3, #32
 800c052:	d060      	beq.n	800c116 <HAL_TIM_ConfigClockSource+0x15a>
 800c054:	2b20      	cmp	r3, #32
 800c056:	d867      	bhi.n	800c128 <HAL_TIM_ConfigClockSource+0x16c>
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d05c      	beq.n	800c116 <HAL_TIM_ConfigClockSource+0x15a>
 800c05c:	2b10      	cmp	r3, #16
 800c05e:	d05a      	beq.n	800c116 <HAL_TIM_ConfigClockSource+0x15a>
 800c060:	e062      	b.n	800c128 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c072:	f000 f980 	bl	800c376 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c084:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	68ba      	ldr	r2, [r7, #8]
 800c08c:	609a      	str	r2, [r3, #8]
      break;
 800c08e:	e04f      	b.n	800c130 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c0a0:	f000 f969 	bl	800c376 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	689a      	ldr	r2, [r3, #8]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c0b2:	609a      	str	r2, [r3, #8]
      break;
 800c0b4:	e03c      	b.n	800c130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0c2:	461a      	mov	r2, r3
 800c0c4:	f000 f8e0 	bl	800c288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	2150      	movs	r1, #80	@ 0x50
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f000 f937 	bl	800c342 <TIM_ITRx_SetConfig>
      break;
 800c0d4:	e02c      	b.n	800c130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	f000 f8fe 	bl	800c2e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2160      	movs	r1, #96	@ 0x60
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f000 f927 	bl	800c342 <TIM_ITRx_SetConfig>
      break;
 800c0f4:	e01c      	b.n	800c130 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c102:	461a      	mov	r2, r3
 800c104:	f000 f8c0 	bl	800c288 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	2140      	movs	r1, #64	@ 0x40
 800c10e:	4618      	mov	r0, r3
 800c110:	f000 f917 	bl	800c342 <TIM_ITRx_SetConfig>
      break;
 800c114:	e00c      	b.n	800c130 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681a      	ldr	r2, [r3, #0]
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4619      	mov	r1, r3
 800c120:	4610      	mov	r0, r2
 800c122:	f000 f90e 	bl	800c342 <TIM_ITRx_SetConfig>
      break;
 800c126:	e003      	b.n	800c130 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c128:	2301      	movs	r3, #1
 800c12a:	73fb      	strb	r3, [r7, #15]
      break;
 800c12c:	e000      	b.n	800c130 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c12e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2201      	movs	r2, #1
 800c134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2200      	movs	r2, #0
 800c13c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c140:	7bfb      	ldrb	r3, [r7, #15]
}
 800c142:	4618      	mov	r0, r3
 800c144:	3710      	adds	r7, #16
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c14a:	b480      	push	{r7}
 800c14c:	b083      	sub	sp, #12
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c152:	bf00      	nop
 800c154:	370c      	adds	r7, #12
 800c156:	46bd      	mov	sp, r7
 800c158:	bc80      	pop	{r7}
 800c15a:	4770      	bx	lr

0800c15c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
 800c162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c164:	bf00      	nop
 800c166:	370c      	adds	r7, #12
 800c168:	46bd      	mov	sp, r7
 800c16a:	bc80      	pop	{r7}
 800c16c:	4770      	bx	lr

0800c16e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c16e:	b480      	push	{r7}
 800c170:	b083      	sub	sp, #12
 800c172:	af00      	add	r7, sp, #0
 800c174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c176:	bf00      	nop
 800c178:	370c      	adds	r7, #12
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bc80      	pop	{r7}
 800c17e:	4770      	bx	lr

0800c180 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c188:	bf00      	nop
 800c18a:	370c      	adds	r7, #12
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bc80      	pop	{r7}
 800c190:	4770      	bx	lr
	...

0800c194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c194:	b480      	push	{r7}
 800c196:	b085      	sub	sp, #20
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
 800c19c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	4a33      	ldr	r2, [pc, #204]	@ (800c274 <TIM_Base_SetConfig+0xe0>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d013      	beq.n	800c1d4 <TIM_Base_SetConfig+0x40>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	4a32      	ldr	r2, [pc, #200]	@ (800c278 <TIM_Base_SetConfig+0xe4>)
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d00f      	beq.n	800c1d4 <TIM_Base_SetConfig+0x40>
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1ba:	d00b      	beq.n	800c1d4 <TIM_Base_SetConfig+0x40>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4a2f      	ldr	r2, [pc, #188]	@ (800c27c <TIM_Base_SetConfig+0xe8>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d007      	beq.n	800c1d4 <TIM_Base_SetConfig+0x40>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4a2e      	ldr	r2, [pc, #184]	@ (800c280 <TIM_Base_SetConfig+0xec>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d003      	beq.n	800c1d4 <TIM_Base_SetConfig+0x40>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4a2d      	ldr	r2, [pc, #180]	@ (800c284 <TIM_Base_SetConfig+0xf0>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d108      	bne.n	800c1e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	685b      	ldr	r3, [r3, #4]
 800c1e0:	68fa      	ldr	r2, [r7, #12]
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4a22      	ldr	r2, [pc, #136]	@ (800c274 <TIM_Base_SetConfig+0xe0>)
 800c1ea:	4293      	cmp	r3, r2
 800c1ec:	d013      	beq.n	800c216 <TIM_Base_SetConfig+0x82>
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	4a21      	ldr	r2, [pc, #132]	@ (800c278 <TIM_Base_SetConfig+0xe4>)
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	d00f      	beq.n	800c216 <TIM_Base_SetConfig+0x82>
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1fc:	d00b      	beq.n	800c216 <TIM_Base_SetConfig+0x82>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4a1e      	ldr	r2, [pc, #120]	@ (800c27c <TIM_Base_SetConfig+0xe8>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d007      	beq.n	800c216 <TIM_Base_SetConfig+0x82>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	4a1d      	ldr	r2, [pc, #116]	@ (800c280 <TIM_Base_SetConfig+0xec>)
 800c20a:	4293      	cmp	r3, r2
 800c20c:	d003      	beq.n	800c216 <TIM_Base_SetConfig+0x82>
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	4a1c      	ldr	r2, [pc, #112]	@ (800c284 <TIM_Base_SetConfig+0xf0>)
 800c212:	4293      	cmp	r3, r2
 800c214:	d108      	bne.n	800c228 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c21c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	68fa      	ldr	r2, [r7, #12]
 800c224:	4313      	orrs	r3, r2
 800c226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	695b      	ldr	r3, [r3, #20]
 800c232:	4313      	orrs	r3, r2
 800c234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	68fa      	ldr	r2, [r7, #12]
 800c23a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	689a      	ldr	r2, [r3, #8]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a09      	ldr	r2, [pc, #36]	@ (800c274 <TIM_Base_SetConfig+0xe0>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d003      	beq.n	800c25c <TIM_Base_SetConfig+0xc8>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4a08      	ldr	r2, [pc, #32]	@ (800c278 <TIM_Base_SetConfig+0xe4>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d103      	bne.n	800c264 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	691a      	ldr	r2, [r3, #16]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2201      	movs	r2, #1
 800c268:	615a      	str	r2, [r3, #20]
}
 800c26a:	bf00      	nop
 800c26c:	3714      	adds	r7, #20
 800c26e:	46bd      	mov	sp, r7
 800c270:	bc80      	pop	{r7}
 800c272:	4770      	bx	lr
 800c274:	40012c00 	.word	0x40012c00
 800c278:	40013400 	.word	0x40013400
 800c27c:	40000400 	.word	0x40000400
 800c280:	40000800 	.word	0x40000800
 800c284:	40000c00 	.word	0x40000c00

0800c288 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c288:	b480      	push	{r7}
 800c28a:	b087      	sub	sp, #28
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	6a1b      	ldr	r3, [r3, #32]
 800c298:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	6a1b      	ldr	r3, [r3, #32]
 800c29e:	f023 0201 	bic.w	r2, r3, #1
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	699b      	ldr	r3, [r3, #24]
 800c2aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c2b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	011b      	lsls	r3, r3, #4
 800c2b8:	693a      	ldr	r2, [r7, #16]
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	f023 030a 	bic.w	r3, r3, #10
 800c2c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c2c6:	697a      	ldr	r2, [r7, #20]
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	693a      	ldr	r2, [r7, #16]
 800c2d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	697a      	ldr	r2, [r7, #20]
 800c2d8:	621a      	str	r2, [r3, #32]
}
 800c2da:	bf00      	nop
 800c2dc:	371c      	adds	r7, #28
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bc80      	pop	{r7}
 800c2e2:	4770      	bx	lr

0800c2e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b087      	sub	sp, #28
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	60b9      	str	r1, [r7, #8]
 800c2ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	6a1b      	ldr	r3, [r3, #32]
 800c2f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6a1b      	ldr	r3, [r3, #32]
 800c2fa:	f023 0210 	bic.w	r2, r3, #16
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	699b      	ldr	r3, [r3, #24]
 800c306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c30e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	031b      	lsls	r3, r3, #12
 800c314:	693a      	ldr	r2, [r7, #16]
 800c316:	4313      	orrs	r3, r2
 800c318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c320:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	011b      	lsls	r3, r3, #4
 800c326:	697a      	ldr	r2, [r7, #20]
 800c328:	4313      	orrs	r3, r2
 800c32a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	693a      	ldr	r2, [r7, #16]
 800c330:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	697a      	ldr	r2, [r7, #20]
 800c336:	621a      	str	r2, [r3, #32]
}
 800c338:	bf00      	nop
 800c33a:	371c      	adds	r7, #28
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bc80      	pop	{r7}
 800c340:	4770      	bx	lr

0800c342 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c342:	b480      	push	{r7}
 800c344:	b085      	sub	sp, #20
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
 800c34a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	689b      	ldr	r3, [r3, #8]
 800c350:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c358:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c35a:	683a      	ldr	r2, [r7, #0]
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	4313      	orrs	r3, r2
 800c360:	f043 0307 	orr.w	r3, r3, #7
 800c364:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	68fa      	ldr	r2, [r7, #12]
 800c36a:	609a      	str	r2, [r3, #8]
}
 800c36c:	bf00      	nop
 800c36e:	3714      	adds	r7, #20
 800c370:	46bd      	mov	sp, r7
 800c372:	bc80      	pop	{r7}
 800c374:	4770      	bx	lr

0800c376 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c376:	b480      	push	{r7}
 800c378:	b087      	sub	sp, #28
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	60f8      	str	r0, [r7, #12]
 800c37e:	60b9      	str	r1, [r7, #8]
 800c380:	607a      	str	r2, [r7, #4]
 800c382:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	689b      	ldr	r3, [r3, #8]
 800c388:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c390:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	021a      	lsls	r2, r3, #8
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	431a      	orrs	r2, r3
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	4313      	orrs	r3, r2
 800c39e:	697a      	ldr	r2, [r7, #20]
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	697a      	ldr	r2, [r7, #20]
 800c3a8:	609a      	str	r2, [r3, #8]
}
 800c3aa:	bf00      	nop
 800c3ac:	371c      	adds	r7, #28
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bc80      	pop	{r7}
 800c3b2:	4770      	bx	lr

0800c3b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b085      	sub	sp, #20
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c3c4:	2b01      	cmp	r3, #1
 800c3c6:	d101      	bne.n	800c3cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c3c8:	2302      	movs	r3, #2
 800c3ca:	e050      	b.n	800c46e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2202      	movs	r2, #2
 800c3d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	68fa      	ldr	r2, [r7, #12]
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	68fa      	ldr	r2, [r7, #12]
 800c404:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a1b      	ldr	r2, [pc, #108]	@ (800c478 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d018      	beq.n	800c442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a19      	ldr	r2, [pc, #100]	@ (800c47c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d013      	beq.n	800c442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c422:	d00e      	beq.n	800c442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a15      	ldr	r2, [pc, #84]	@ (800c480 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d009      	beq.n	800c442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a14      	ldr	r2, [pc, #80]	@ (800c484 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d004      	beq.n	800c442 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a12      	ldr	r2, [pc, #72]	@ (800c488 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d10c      	bne.n	800c45c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c448:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	68ba      	ldr	r2, [r7, #8]
 800c450:	4313      	orrs	r3, r2
 800c452:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	68ba      	ldr	r2, [r7, #8]
 800c45a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2201      	movs	r2, #1
 800c460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2200      	movs	r2, #0
 800c468:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c46c:	2300      	movs	r3, #0
}
 800c46e:	4618      	mov	r0, r3
 800c470:	3714      	adds	r7, #20
 800c472:	46bd      	mov	sp, r7
 800c474:	bc80      	pop	{r7}
 800c476:	4770      	bx	lr
 800c478:	40012c00 	.word	0x40012c00
 800c47c:	40013400 	.word	0x40013400
 800c480:	40000400 	.word	0x40000400
 800c484:	40000800 	.word	0x40000800
 800c488:	40000c00 	.word	0x40000c00

0800c48c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c48c:	b480      	push	{r7}
 800c48e:	b083      	sub	sp, #12
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c494:	bf00      	nop
 800c496:	370c      	adds	r7, #12
 800c498:	46bd      	mov	sp, r7
 800c49a:	bc80      	pop	{r7}
 800c49c:	4770      	bx	lr

0800c49e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c49e:	b480      	push	{r7}
 800c4a0:	b083      	sub	sp, #12
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c4a6:	bf00      	nop
 800c4a8:	370c      	adds	r7, #12
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bc80      	pop	{r7}
 800c4ae:	4770      	bx	lr

0800c4b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d101      	bne.n	800c4c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	e042      	b.n	800c548 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c4c8:	b2db      	uxtb	r3, r3
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d106      	bne.n	800c4dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f7fc fe16 	bl	8009108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	2224      	movs	r2, #36	@ 0x24
 800c4e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	68da      	ldr	r2, [r3, #12]
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c4f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 fcb5 	bl	800ce64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	691a      	ldr	r2, [r3, #16]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	695a      	ldr	r2, [r3, #20]
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	68da      	ldr	r2, [r3, #12]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2200      	movs	r2, #0
 800c52e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2220      	movs	r2, #32
 800c534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2220      	movs	r2, #32
 800c53c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c546:	2300      	movs	r3, #0
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3708      	adds	r7, #8
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c550:	b480      	push	{r7}
 800c552:	b085      	sub	sp, #20
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	4613      	mov	r3, r2
 800c55c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c564:	b2db      	uxtb	r3, r3
 800c566:	2b20      	cmp	r3, #32
 800c568:	d121      	bne.n	800c5ae <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d002      	beq.n	800c576 <HAL_UART_Transmit_IT+0x26>
 800c570:	88fb      	ldrh	r3, [r7, #6]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d101      	bne.n	800c57a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c576:	2301      	movs	r3, #1
 800c578:	e01a      	b.n	800c5b0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	68ba      	ldr	r2, [r7, #8]
 800c57e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	88fa      	ldrh	r2, [r7, #6]
 800c584:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	88fa      	ldrh	r2, [r7, #6]
 800c58a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	2200      	movs	r2, #0
 800c590:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2221      	movs	r2, #33	@ 0x21
 800c596:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	68da      	ldr	r2, [r3, #12]
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c5a8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	e000      	b.n	800c5b0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c5ae:	2302      	movs	r3, #2
  }
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3714      	adds	r7, #20
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bc80      	pop	{r7}
 800c5b8:	4770      	bx	lr
	...

0800c5bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b0ba      	sub	sp, #232	@ 0xe8
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	695b      	ldr	r3, [r3, #20]
 800c5de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c5ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5f2:	f003 030f 	and.w	r3, r3, #15
 800c5f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c5fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d10f      	bne.n	800c622 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c606:	f003 0320 	and.w	r3, r3, #32
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d009      	beq.n	800c622 <HAL_UART_IRQHandler+0x66>
 800c60e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c612:	f003 0320 	and.w	r3, r3, #32
 800c616:	2b00      	cmp	r3, #0
 800c618:	d003      	beq.n	800c622 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 fb63 	bl	800cce6 <UART_Receive_IT>
      return;
 800c620:	e25b      	b.n	800cada <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c622:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c626:	2b00      	cmp	r3, #0
 800c628:	f000 80de 	beq.w	800c7e8 <HAL_UART_IRQHandler+0x22c>
 800c62c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c630:	f003 0301 	and.w	r3, r3, #1
 800c634:	2b00      	cmp	r3, #0
 800c636:	d106      	bne.n	800c646 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c63c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c640:	2b00      	cmp	r3, #0
 800c642:	f000 80d1 	beq.w	800c7e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c64a:	f003 0301 	and.w	r3, r3, #1
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d00b      	beq.n	800c66a <HAL_UART_IRQHandler+0xae>
 800c652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d005      	beq.n	800c66a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c662:	f043 0201 	orr.w	r2, r3, #1
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c66a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c66e:	f003 0304 	and.w	r3, r3, #4
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00b      	beq.n	800c68e <HAL_UART_IRQHandler+0xd2>
 800c676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c67a:	f003 0301 	and.w	r3, r3, #1
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d005      	beq.n	800c68e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c686:	f043 0202 	orr.w	r2, r3, #2
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c68e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c692:	f003 0302 	and.w	r3, r3, #2
 800c696:	2b00      	cmp	r3, #0
 800c698:	d00b      	beq.n	800c6b2 <HAL_UART_IRQHandler+0xf6>
 800c69a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c69e:	f003 0301 	and.w	r3, r3, #1
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d005      	beq.n	800c6b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6aa:	f043 0204 	orr.w	r2, r3, #4
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c6b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6b6:	f003 0308 	and.w	r3, r3, #8
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d011      	beq.n	800c6e2 <HAL_UART_IRQHandler+0x126>
 800c6be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6c2:	f003 0320 	and.w	r3, r3, #32
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d105      	bne.n	800c6d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c6ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c6ce:	f003 0301 	and.w	r3, r3, #1
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d005      	beq.n	800c6e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6da:	f043 0208 	orr.w	r2, r3, #8
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f000 81f2 	beq.w	800cad0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c6ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6f0:	f003 0320 	and.w	r3, r3, #32
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d008      	beq.n	800c70a <HAL_UART_IRQHandler+0x14e>
 800c6f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6fc:	f003 0320 	and.w	r3, r3, #32
 800c700:	2b00      	cmp	r3, #0
 800c702:	d002      	beq.n	800c70a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 faee 	bl	800cce6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	695b      	ldr	r3, [r3, #20]
 800c710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c714:	2b00      	cmp	r3, #0
 800c716:	bf14      	ite	ne
 800c718:	2301      	movne	r3, #1
 800c71a:	2300      	moveq	r3, #0
 800c71c:	b2db      	uxtb	r3, r3
 800c71e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c726:	f003 0308 	and.w	r3, r3, #8
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d103      	bne.n	800c736 <HAL_UART_IRQHandler+0x17a>
 800c72e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c732:	2b00      	cmp	r3, #0
 800c734:	d04f      	beq.n	800c7d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 f9f8 	bl	800cb2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	695b      	ldr	r3, [r3, #20]
 800c742:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c746:	2b00      	cmp	r3, #0
 800c748:	d041      	beq.n	800c7ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	3314      	adds	r3, #20
 800c750:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c754:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c758:	e853 3f00 	ldrex	r3, [r3]
 800c75c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c760:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c764:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c768:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	3314      	adds	r3, #20
 800c772:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c776:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c77a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c782:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c786:	e841 2300 	strex	r3, r2, [r1]
 800c78a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c78e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c792:	2b00      	cmp	r3, #0
 800c794:	d1d9      	bne.n	800c74a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d013      	beq.n	800c7c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7a2:	4a7e      	ldr	r2, [pc, #504]	@ (800c99c <HAL_UART_IRQHandler+0x3e0>)
 800c7a4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fd f86c 	bl	8009888 <HAL_DMA_Abort_IT>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d016      	beq.n	800c7e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c7c0:	4610      	mov	r0, r2
 800c7c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7c4:	e00e      	b.n	800c7e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f000 f99c 	bl	800cb04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7cc:	e00a      	b.n	800c7e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 f998 	bl	800cb04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7d4:	e006      	b.n	800c7e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c7d6:	6878      	ldr	r0, [r7, #4]
 800c7d8:	f000 f994 	bl	800cb04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2200      	movs	r2, #0
 800c7e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c7e2:	e175      	b.n	800cad0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7e4:	bf00      	nop
    return;
 800c7e6:	e173      	b.n	800cad0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	f040 814f 	bne.w	800ca90 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c7f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c7f6:	f003 0310 	and.w	r3, r3, #16
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f000 8148 	beq.w	800ca90 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c804:	f003 0310 	and.w	r3, r3, #16
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f000 8141 	beq.w	800ca90 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c80e:	2300      	movs	r3, #0
 800c810:	60bb      	str	r3, [r7, #8]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	60bb      	str	r3, [r7, #8]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	60bb      	str	r3, [r7, #8]
 800c822:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	695b      	ldr	r3, [r3, #20]
 800c82a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c82e:	2b00      	cmp	r3, #0
 800c830:	f000 80b6 	beq.w	800c9a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c840:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c844:	2b00      	cmp	r3, #0
 800c846:	f000 8145 	beq.w	800cad4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c84e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c852:	429a      	cmp	r2, r3
 800c854:	f080 813e 	bcs.w	800cad4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c85e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c864:	699b      	ldr	r3, [r3, #24]
 800c866:	2b20      	cmp	r3, #32
 800c868:	f000 8088 	beq.w	800c97c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	330c      	adds	r3, #12
 800c872:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c876:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c87a:	e853 3f00 	ldrex	r3, [r3]
 800c87e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c882:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c886:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c88a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	330c      	adds	r3, #12
 800c894:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c898:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c89c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c8a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c8a8:	e841 2300 	strex	r3, r2, [r1]
 800c8ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c8b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d1d9      	bne.n	800c86c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	3314      	adds	r3, #20
 800c8be:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c8c2:	e853 3f00 	ldrex	r3, [r3]
 800c8c6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c8c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c8ca:	f023 0301 	bic.w	r3, r3, #1
 800c8ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	3314      	adds	r3, #20
 800c8d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c8dc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c8e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8e2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c8e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c8e8:	e841 2300 	strex	r3, r2, [r1]
 800c8ec:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c8ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d1e1      	bne.n	800c8b8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	3314      	adds	r3, #20
 800c8fa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c8fe:	e853 3f00 	ldrex	r3, [r3]
 800c902:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c904:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c906:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c90a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	3314      	adds	r3, #20
 800c914:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c918:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c91a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c91c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c91e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c920:	e841 2300 	strex	r3, r2, [r1]
 800c924:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c926:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d1e3      	bne.n	800c8f4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2220      	movs	r2, #32
 800c930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2200      	movs	r2, #0
 800c938:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	330c      	adds	r3, #12
 800c940:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c944:	e853 3f00 	ldrex	r3, [r3]
 800c948:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c94a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c94c:	f023 0310 	bic.w	r3, r3, #16
 800c950:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	330c      	adds	r3, #12
 800c95a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c95e:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c960:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c962:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c964:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c966:	e841 2300 	strex	r3, r2, [r1]
 800c96a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c96c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d1e3      	bne.n	800c93a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c976:	4618      	mov	r0, r3
 800c978:	f7fc ff4b 	bl	8009812 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2202      	movs	r2, #2
 800c980:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	1ad3      	subs	r3, r2, r3
 800c98e:	b29b      	uxth	r3, r3
 800c990:	4619      	mov	r1, r3
 800c992:	6878      	ldr	r0, [r7, #4]
 800c994:	f000 f8bf 	bl	800cb16 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c998:	e09c      	b.n	800cad4 <HAL_UART_IRQHandler+0x518>
 800c99a:	bf00      	nop
 800c99c:	0800cbf1 	.word	0x0800cbf1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	1ad3      	subs	r3, r2, r3
 800c9ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c9b4:	b29b      	uxth	r3, r3
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	f000 808e 	beq.w	800cad8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c9bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	f000 8089 	beq.w	800cad8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	330c      	adds	r3, #12
 800c9cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9d0:	e853 3f00 	ldrex	r3, [r3]
 800c9d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c9d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c9dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	330c      	adds	r3, #12
 800c9e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c9ea:	647a      	str	r2, [r7, #68]	@ 0x44
 800c9ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c9f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9f2:	e841 2300 	strex	r3, r2, [r1]
 800c9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c9f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d1e3      	bne.n	800c9c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	3314      	adds	r3, #20
 800ca04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca08:	e853 3f00 	ldrex	r3, [r3]
 800ca0c:	623b      	str	r3, [r7, #32]
   return(result);
 800ca0e:	6a3b      	ldr	r3, [r7, #32]
 800ca10:	f023 0301 	bic.w	r3, r3, #1
 800ca14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	3314      	adds	r3, #20
 800ca1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ca22:	633a      	str	r2, [r7, #48]	@ 0x30
 800ca24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ca28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ca2a:	e841 2300 	strex	r3, r2, [r1]
 800ca2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ca30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d1e3      	bne.n	800c9fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	2220      	movs	r2, #32
 800ca3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2200      	movs	r2, #0
 800ca42:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	330c      	adds	r3, #12
 800ca4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	e853 3f00 	ldrex	r3, [r3]
 800ca52:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f023 0310 	bic.w	r3, r3, #16
 800ca5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	330c      	adds	r3, #12
 800ca64:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800ca68:	61fa      	str	r2, [r7, #28]
 800ca6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca6c:	69b9      	ldr	r1, [r7, #24]
 800ca6e:	69fa      	ldr	r2, [r7, #28]
 800ca70:	e841 2300 	strex	r3, r2, [r1]
 800ca74:	617b      	str	r3, [r7, #20]
   return(result);
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1e3      	bne.n	800ca44 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2202      	movs	r2, #2
 800ca80:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ca82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ca86:	4619      	mov	r1, r3
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f000 f844 	bl	800cb16 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ca8e:	e023      	b.n	800cad8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ca90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ca94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d009      	beq.n	800cab0 <HAL_UART_IRQHandler+0x4f4>
 800ca9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800caa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d003      	beq.n	800cab0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 f8b5 	bl	800cc18 <UART_Transmit_IT>
    return;
 800caae:	e014      	b.n	800cada <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d00e      	beq.n	800cada <HAL_UART_IRQHandler+0x51e>
 800cabc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d008      	beq.n	800cada <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f000 f8f4 	bl	800ccb6 <UART_EndTransmit_IT>
    return;
 800cace:	e004      	b.n	800cada <HAL_UART_IRQHandler+0x51e>
    return;
 800cad0:	bf00      	nop
 800cad2:	e002      	b.n	800cada <HAL_UART_IRQHandler+0x51e>
      return;
 800cad4:	bf00      	nop
 800cad6:	e000      	b.n	800cada <HAL_UART_IRQHandler+0x51e>
      return;
 800cad8:	bf00      	nop
  }
}
 800cada:	37e8      	adds	r7, #232	@ 0xe8
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cae0:	b480      	push	{r7}
 800cae2:	b083      	sub	sp, #12
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cae8:	bf00      	nop
 800caea:	370c      	adds	r7, #12
 800caec:	46bd      	mov	sp, r7
 800caee:	bc80      	pop	{r7}
 800caf0:	4770      	bx	lr

0800caf2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800caf2:	b480      	push	{r7}
 800caf4:	b083      	sub	sp, #12
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800cafa:	bf00      	nop
 800cafc:	370c      	adds	r7, #12
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bc80      	pop	{r7}
 800cb02:	4770      	bx	lr

0800cb04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cb0c:	bf00      	nop
 800cb0e:	370c      	adds	r7, #12
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bc80      	pop	{r7}
 800cb14:	4770      	bx	lr

0800cb16 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cb16:	b480      	push	{r7}
 800cb18:	b083      	sub	sp, #12
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
 800cb1e:	460b      	mov	r3, r1
 800cb20:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cb22:	bf00      	nop
 800cb24:	370c      	adds	r7, #12
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bc80      	pop	{r7}
 800cb2a:	4770      	bx	lr

0800cb2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b095      	sub	sp, #84	@ 0x54
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	330c      	adds	r3, #12
 800cb3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb3e:	e853 3f00 	ldrex	r3, [r3]
 800cb42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cb44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cb4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	330c      	adds	r3, #12
 800cb52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb54:	643a      	str	r2, [r7, #64]	@ 0x40
 800cb56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cb5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cb5c:	e841 2300 	strex	r3, r2, [r1]
 800cb60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cb62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d1e5      	bne.n	800cb34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	3314      	adds	r3, #20
 800cb6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb70:	6a3b      	ldr	r3, [r7, #32]
 800cb72:	e853 3f00 	ldrex	r3, [r3]
 800cb76:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb78:	69fb      	ldr	r3, [r7, #28]
 800cb7a:	f023 0301 	bic.w	r3, r3, #1
 800cb7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	3314      	adds	r3, #20
 800cb86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cb88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cb8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb90:	e841 2300 	strex	r3, r2, [r1]
 800cb94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d1e5      	bne.n	800cb68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d119      	bne.n	800cbd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	330c      	adds	r3, #12
 800cbaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	e853 3f00 	ldrex	r3, [r3]
 800cbb2:	60bb      	str	r3, [r7, #8]
   return(result);
 800cbb4:	68bb      	ldr	r3, [r7, #8]
 800cbb6:	f023 0310 	bic.w	r3, r3, #16
 800cbba:	647b      	str	r3, [r7, #68]	@ 0x44
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	330c      	adds	r3, #12
 800cbc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cbc4:	61ba      	str	r2, [r7, #24]
 800cbc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbc8:	6979      	ldr	r1, [r7, #20]
 800cbca:	69ba      	ldr	r2, [r7, #24]
 800cbcc:	e841 2300 	strex	r3, r2, [r1]
 800cbd0:	613b      	str	r3, [r7, #16]
   return(result);
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d1e5      	bne.n	800cba4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2220      	movs	r2, #32
 800cbdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800cbe6:	bf00      	nop
 800cbe8:	3754      	adds	r7, #84	@ 0x54
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bc80      	pop	{r7}
 800cbee:	4770      	bx	lr

0800cbf0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbfc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2200      	movs	r2, #0
 800cc02:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	2200      	movs	r2, #0
 800cc08:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cc0a:	68f8      	ldr	r0, [r7, #12]
 800cc0c:	f7ff ff7a 	bl	800cb04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc10:	bf00      	nop
 800cc12:	3710      	adds	r7, #16
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cc26:	b2db      	uxtb	r3, r3
 800cc28:	2b21      	cmp	r3, #33	@ 0x21
 800cc2a:	d13e      	bne.n	800ccaa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	689b      	ldr	r3, [r3, #8]
 800cc30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc34:	d114      	bne.n	800cc60 <UART_Transmit_IT+0x48>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	691b      	ldr	r3, [r3, #16]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d110      	bne.n	800cc60 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6a1b      	ldr	r3, [r3, #32]
 800cc42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	881b      	ldrh	r3, [r3, #0]
 800cc48:	461a      	mov	r2, r3
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc52:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6a1b      	ldr	r3, [r3, #32]
 800cc58:	1c9a      	adds	r2, r3, #2
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	621a      	str	r2, [r3, #32]
 800cc5e:	e008      	b.n	800cc72 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6a1b      	ldr	r3, [r3, #32]
 800cc64:	1c59      	adds	r1, r3, #1
 800cc66:	687a      	ldr	r2, [r7, #4]
 800cc68:	6211      	str	r1, [r2, #32]
 800cc6a:	781a      	ldrb	r2, [r3, #0]
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cc76:	b29b      	uxth	r3, r3
 800cc78:	3b01      	subs	r3, #1
 800cc7a:	b29b      	uxth	r3, r3
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	4619      	mov	r1, r3
 800cc80:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d10f      	bne.n	800cca6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	68da      	ldr	r2, [r3, #12]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cc94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	68da      	ldr	r2, [r3, #12]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cca4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cca6:	2300      	movs	r3, #0
 800cca8:	e000      	b.n	800ccac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ccaa:	2302      	movs	r3, #2
  }
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3714      	adds	r7, #20
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bc80      	pop	{r7}
 800ccb4:	4770      	bx	lr

0800ccb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ccb6:	b580      	push	{r7, lr}
 800ccb8:	b082      	sub	sp, #8
 800ccba:	af00      	add	r7, sp, #0
 800ccbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	68da      	ldr	r2, [r3, #12]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cccc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2220      	movs	r2, #32
 800ccd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f7ff ff02 	bl	800cae0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ccdc:	2300      	movs	r3, #0
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3708      	adds	r7, #8
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b08c      	sub	sp, #48	@ 0x30
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	2b22      	cmp	r3, #34	@ 0x22
 800ccf8:	f040 80ae 	bne.w	800ce58 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd04:	d117      	bne.n	800cd36 <UART_Receive_IT+0x50>
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	691b      	ldr	r3, [r3, #16]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d113      	bne.n	800cd36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd16:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd24:	b29a      	uxth	r2, r3
 800cd26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd2e:	1c9a      	adds	r2, r3, #2
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	629a      	str	r2, [r3, #40]	@ 0x28
 800cd34:	e026      	b.n	800cd84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	689b      	ldr	r3, [r3, #8]
 800cd44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd48:	d007      	beq.n	800cd5a <UART_Receive_IT+0x74>
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	689b      	ldr	r3, [r3, #8]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d10a      	bne.n	800cd68 <UART_Receive_IT+0x82>
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	691b      	ldr	r3, [r3, #16]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d106      	bne.n	800cd68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	685b      	ldr	r3, [r3, #4]
 800cd60:	b2da      	uxtb	r2, r3
 800cd62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd64:	701a      	strb	r2, [r3, #0]
 800cd66:	e008      	b.n	800cd7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	b2db      	uxtb	r3, r3
 800cd70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cd74:	b2da      	uxtb	r2, r3
 800cd76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd7e:	1c5a      	adds	r2, r3, #1
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cd88:	b29b      	uxth	r3, r3
 800cd8a:	3b01      	subs	r3, #1
 800cd8c:	b29b      	uxth	r3, r3
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	4619      	mov	r1, r3
 800cd92:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d15d      	bne.n	800ce54 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	68da      	ldr	r2, [r3, #12]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f022 0220 	bic.w	r2, r2, #32
 800cda6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	68da      	ldr	r2, [r3, #12]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cdb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	695a      	ldr	r2, [r3, #20]
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f022 0201 	bic.w	r2, r2, #1
 800cdc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2220      	movs	r2, #32
 800cdcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cdda:	2b01      	cmp	r3, #1
 800cddc:	d135      	bne.n	800ce4a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2200      	movs	r2, #0
 800cde2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	330c      	adds	r3, #12
 800cdea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	e853 3f00 	ldrex	r3, [r3]
 800cdf2:	613b      	str	r3, [r7, #16]
   return(result);
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	f023 0310 	bic.w	r3, r3, #16
 800cdfa:	627b      	str	r3, [r7, #36]	@ 0x24
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	330c      	adds	r3, #12
 800ce02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce04:	623a      	str	r2, [r7, #32]
 800ce06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce08:	69f9      	ldr	r1, [r7, #28]
 800ce0a:	6a3a      	ldr	r2, [r7, #32]
 800ce0c:	e841 2300 	strex	r3, r2, [r1]
 800ce10:	61bb      	str	r3, [r7, #24]
   return(result);
 800ce12:	69bb      	ldr	r3, [r7, #24]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d1e5      	bne.n	800cde4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f003 0310 	and.w	r3, r3, #16
 800ce22:	2b10      	cmp	r3, #16
 800ce24:	d10a      	bne.n	800ce3c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ce26:	2300      	movs	r3, #0
 800ce28:	60fb      	str	r3, [r7, #12]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	60fb      	str	r3, [r7, #12]
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	685b      	ldr	r3, [r3, #4]
 800ce38:	60fb      	str	r3, [r7, #12]
 800ce3a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ce40:	4619      	mov	r1, r3
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f7ff fe67 	bl	800cb16 <HAL_UARTEx_RxEventCallback>
 800ce48:	e002      	b.n	800ce50 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f7ff fe51 	bl	800caf2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ce50:	2300      	movs	r3, #0
 800ce52:	e002      	b.n	800ce5a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ce54:	2300      	movs	r3, #0
 800ce56:	e000      	b.n	800ce5a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ce58:	2302      	movs	r3, #2
  }
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3730      	adds	r7, #48	@ 0x30
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
	...

0800ce64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	691b      	ldr	r3, [r3, #16]
 800ce72:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	68da      	ldr	r2, [r3, #12]
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	430a      	orrs	r2, r1
 800ce80:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	689a      	ldr	r2, [r3, #8]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	691b      	ldr	r3, [r3, #16]
 800ce8a:	431a      	orrs	r2, r3
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	695b      	ldr	r3, [r3, #20]
 800ce90:	4313      	orrs	r3, r2
 800ce92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	68db      	ldr	r3, [r3, #12]
 800ce9a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800ce9e:	f023 030c 	bic.w	r3, r3, #12
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	6812      	ldr	r2, [r2, #0]
 800cea6:	68b9      	ldr	r1, [r7, #8]
 800cea8:	430b      	orrs	r3, r1
 800ceaa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	695b      	ldr	r3, [r3, #20]
 800ceb2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	699a      	ldr	r2, [r3, #24]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	430a      	orrs	r2, r1
 800cec0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a2c      	ldr	r2, [pc, #176]	@ (800cf78 <UART_SetConfig+0x114>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d103      	bne.n	800ced4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cecc:	f7fe fe8c 	bl	800bbe8 <HAL_RCC_GetPCLK2Freq>
 800ced0:	60f8      	str	r0, [r7, #12]
 800ced2:	e002      	b.n	800ceda <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800ced4:	f7fe fe74 	bl	800bbc0 <HAL_RCC_GetPCLK1Freq>
 800ced8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ceda:	68fa      	ldr	r2, [r7, #12]
 800cedc:	4613      	mov	r3, r2
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	4413      	add	r3, r2
 800cee2:	009a      	lsls	r2, r3, #2
 800cee4:	441a      	add	r2, r3
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	685b      	ldr	r3, [r3, #4]
 800ceea:	009b      	lsls	r3, r3, #2
 800ceec:	fbb2 f3f3 	udiv	r3, r2, r3
 800cef0:	4a22      	ldr	r2, [pc, #136]	@ (800cf7c <UART_SetConfig+0x118>)
 800cef2:	fba2 2303 	umull	r2, r3, r2, r3
 800cef6:	095b      	lsrs	r3, r3, #5
 800cef8:	0119      	lsls	r1, r3, #4
 800cefa:	68fa      	ldr	r2, [r7, #12]
 800cefc:	4613      	mov	r3, r2
 800cefe:	009b      	lsls	r3, r3, #2
 800cf00:	4413      	add	r3, r2
 800cf02:	009a      	lsls	r2, r3, #2
 800cf04:	441a      	add	r2, r3
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	685b      	ldr	r3, [r3, #4]
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	fbb2 f2f3 	udiv	r2, r2, r3
 800cf10:	4b1a      	ldr	r3, [pc, #104]	@ (800cf7c <UART_SetConfig+0x118>)
 800cf12:	fba3 0302 	umull	r0, r3, r3, r2
 800cf16:	095b      	lsrs	r3, r3, #5
 800cf18:	2064      	movs	r0, #100	@ 0x64
 800cf1a:	fb00 f303 	mul.w	r3, r0, r3
 800cf1e:	1ad3      	subs	r3, r2, r3
 800cf20:	011b      	lsls	r3, r3, #4
 800cf22:	3332      	adds	r3, #50	@ 0x32
 800cf24:	4a15      	ldr	r2, [pc, #84]	@ (800cf7c <UART_SetConfig+0x118>)
 800cf26:	fba2 2303 	umull	r2, r3, r2, r3
 800cf2a:	095b      	lsrs	r3, r3, #5
 800cf2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cf30:	4419      	add	r1, r3
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	4613      	mov	r3, r2
 800cf36:	009b      	lsls	r3, r3, #2
 800cf38:	4413      	add	r3, r2
 800cf3a:	009a      	lsls	r2, r3, #2
 800cf3c:	441a      	add	r2, r3
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	685b      	ldr	r3, [r3, #4]
 800cf42:	009b      	lsls	r3, r3, #2
 800cf44:	fbb2 f2f3 	udiv	r2, r2, r3
 800cf48:	4b0c      	ldr	r3, [pc, #48]	@ (800cf7c <UART_SetConfig+0x118>)
 800cf4a:	fba3 0302 	umull	r0, r3, r3, r2
 800cf4e:	095b      	lsrs	r3, r3, #5
 800cf50:	2064      	movs	r0, #100	@ 0x64
 800cf52:	fb00 f303 	mul.w	r3, r0, r3
 800cf56:	1ad3      	subs	r3, r2, r3
 800cf58:	011b      	lsls	r3, r3, #4
 800cf5a:	3332      	adds	r3, #50	@ 0x32
 800cf5c:	4a07      	ldr	r2, [pc, #28]	@ (800cf7c <UART_SetConfig+0x118>)
 800cf5e:	fba2 2303 	umull	r2, r3, r2, r3
 800cf62:	095b      	lsrs	r3, r3, #5
 800cf64:	f003 020f 	and.w	r2, r3, #15
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	440a      	add	r2, r1
 800cf6e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800cf70:	bf00      	nop
 800cf72:	3710      	adds	r7, #16
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bd80      	pop	{r7, pc}
 800cf78:	40013800 	.word	0x40013800
 800cf7c:	51eb851f 	.word	0x51eb851f

0800cf80 <__itoa>:
 800cf80:	1e93      	subs	r3, r2, #2
 800cf82:	2b22      	cmp	r3, #34	@ 0x22
 800cf84:	b510      	push	{r4, lr}
 800cf86:	460c      	mov	r4, r1
 800cf88:	d904      	bls.n	800cf94 <__itoa+0x14>
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	461c      	mov	r4, r3
 800cf8e:	700b      	strb	r3, [r1, #0]
 800cf90:	4620      	mov	r0, r4
 800cf92:	bd10      	pop	{r4, pc}
 800cf94:	2a0a      	cmp	r2, #10
 800cf96:	d109      	bne.n	800cfac <__itoa+0x2c>
 800cf98:	2800      	cmp	r0, #0
 800cf9a:	da07      	bge.n	800cfac <__itoa+0x2c>
 800cf9c:	232d      	movs	r3, #45	@ 0x2d
 800cf9e:	700b      	strb	r3, [r1, #0]
 800cfa0:	2101      	movs	r1, #1
 800cfa2:	4240      	negs	r0, r0
 800cfa4:	4421      	add	r1, r4
 800cfa6:	f000 f8db 	bl	800d160 <__utoa>
 800cfaa:	e7f1      	b.n	800cf90 <__itoa+0x10>
 800cfac:	2100      	movs	r1, #0
 800cfae:	e7f9      	b.n	800cfa4 <__itoa+0x24>

0800cfb0 <itoa>:
 800cfb0:	f7ff bfe6 	b.w	800cf80 <__itoa>

0800cfb4 <malloc>:
 800cfb4:	4b02      	ldr	r3, [pc, #8]	@ (800cfc0 <malloc+0xc>)
 800cfb6:	4601      	mov	r1, r0
 800cfb8:	6818      	ldr	r0, [r3, #0]
 800cfba:	f000 b825 	b.w	800d008 <_malloc_r>
 800cfbe:	bf00      	nop
 800cfc0:	20000f84 	.word	0x20000f84

0800cfc4 <sbrk_aligned>:
 800cfc4:	b570      	push	{r4, r5, r6, lr}
 800cfc6:	4e0f      	ldr	r6, [pc, #60]	@ (800d004 <sbrk_aligned+0x40>)
 800cfc8:	460c      	mov	r4, r1
 800cfca:	6831      	ldr	r1, [r6, #0]
 800cfcc:	4605      	mov	r5, r0
 800cfce:	b911      	cbnz	r1, 800cfd6 <sbrk_aligned+0x12>
 800cfd0:	f000 f932 	bl	800d238 <_sbrk_r>
 800cfd4:	6030      	str	r0, [r6, #0]
 800cfd6:	4621      	mov	r1, r4
 800cfd8:	4628      	mov	r0, r5
 800cfda:	f000 f92d 	bl	800d238 <_sbrk_r>
 800cfde:	1c43      	adds	r3, r0, #1
 800cfe0:	d103      	bne.n	800cfea <sbrk_aligned+0x26>
 800cfe2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	bd70      	pop	{r4, r5, r6, pc}
 800cfea:	1cc4      	adds	r4, r0, #3
 800cfec:	f024 0403 	bic.w	r4, r4, #3
 800cff0:	42a0      	cmp	r0, r4
 800cff2:	d0f8      	beq.n	800cfe6 <sbrk_aligned+0x22>
 800cff4:	1a21      	subs	r1, r4, r0
 800cff6:	4628      	mov	r0, r5
 800cff8:	f000 f91e 	bl	800d238 <_sbrk_r>
 800cffc:	3001      	adds	r0, #1
 800cffe:	d1f2      	bne.n	800cfe6 <sbrk_aligned+0x22>
 800d000:	e7ef      	b.n	800cfe2 <sbrk_aligned+0x1e>
 800d002:	bf00      	nop
 800d004:	20001a2c 	.word	0x20001a2c

0800d008 <_malloc_r>:
 800d008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d00c:	1ccd      	adds	r5, r1, #3
 800d00e:	f025 0503 	bic.w	r5, r5, #3
 800d012:	3508      	adds	r5, #8
 800d014:	2d0c      	cmp	r5, #12
 800d016:	bf38      	it	cc
 800d018:	250c      	movcc	r5, #12
 800d01a:	2d00      	cmp	r5, #0
 800d01c:	4606      	mov	r6, r0
 800d01e:	db01      	blt.n	800d024 <_malloc_r+0x1c>
 800d020:	42a9      	cmp	r1, r5
 800d022:	d904      	bls.n	800d02e <_malloc_r+0x26>
 800d024:	230c      	movs	r3, #12
 800d026:	6033      	str	r3, [r6, #0]
 800d028:	2000      	movs	r0, #0
 800d02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d02e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d104 <_malloc_r+0xfc>
 800d032:	f000 f869 	bl	800d108 <__malloc_lock>
 800d036:	f8d8 3000 	ldr.w	r3, [r8]
 800d03a:	461c      	mov	r4, r3
 800d03c:	bb44      	cbnz	r4, 800d090 <_malloc_r+0x88>
 800d03e:	4629      	mov	r1, r5
 800d040:	4630      	mov	r0, r6
 800d042:	f7ff ffbf 	bl	800cfc4 <sbrk_aligned>
 800d046:	1c43      	adds	r3, r0, #1
 800d048:	4604      	mov	r4, r0
 800d04a:	d158      	bne.n	800d0fe <_malloc_r+0xf6>
 800d04c:	f8d8 4000 	ldr.w	r4, [r8]
 800d050:	4627      	mov	r7, r4
 800d052:	2f00      	cmp	r7, #0
 800d054:	d143      	bne.n	800d0de <_malloc_r+0xd6>
 800d056:	2c00      	cmp	r4, #0
 800d058:	d04b      	beq.n	800d0f2 <_malloc_r+0xea>
 800d05a:	6823      	ldr	r3, [r4, #0]
 800d05c:	4639      	mov	r1, r7
 800d05e:	4630      	mov	r0, r6
 800d060:	eb04 0903 	add.w	r9, r4, r3
 800d064:	f000 f8e8 	bl	800d238 <_sbrk_r>
 800d068:	4581      	cmp	r9, r0
 800d06a:	d142      	bne.n	800d0f2 <_malloc_r+0xea>
 800d06c:	6821      	ldr	r1, [r4, #0]
 800d06e:	4630      	mov	r0, r6
 800d070:	1a6d      	subs	r5, r5, r1
 800d072:	4629      	mov	r1, r5
 800d074:	f7ff ffa6 	bl	800cfc4 <sbrk_aligned>
 800d078:	3001      	adds	r0, #1
 800d07a:	d03a      	beq.n	800d0f2 <_malloc_r+0xea>
 800d07c:	6823      	ldr	r3, [r4, #0]
 800d07e:	442b      	add	r3, r5
 800d080:	6023      	str	r3, [r4, #0]
 800d082:	f8d8 3000 	ldr.w	r3, [r8]
 800d086:	685a      	ldr	r2, [r3, #4]
 800d088:	bb62      	cbnz	r2, 800d0e4 <_malloc_r+0xdc>
 800d08a:	f8c8 7000 	str.w	r7, [r8]
 800d08e:	e00f      	b.n	800d0b0 <_malloc_r+0xa8>
 800d090:	6822      	ldr	r2, [r4, #0]
 800d092:	1b52      	subs	r2, r2, r5
 800d094:	d420      	bmi.n	800d0d8 <_malloc_r+0xd0>
 800d096:	2a0b      	cmp	r2, #11
 800d098:	d917      	bls.n	800d0ca <_malloc_r+0xc2>
 800d09a:	1961      	adds	r1, r4, r5
 800d09c:	42a3      	cmp	r3, r4
 800d09e:	6025      	str	r5, [r4, #0]
 800d0a0:	bf18      	it	ne
 800d0a2:	6059      	strne	r1, [r3, #4]
 800d0a4:	6863      	ldr	r3, [r4, #4]
 800d0a6:	bf08      	it	eq
 800d0a8:	f8c8 1000 	streq.w	r1, [r8]
 800d0ac:	5162      	str	r2, [r4, r5]
 800d0ae:	604b      	str	r3, [r1, #4]
 800d0b0:	4630      	mov	r0, r6
 800d0b2:	f000 f82f 	bl	800d114 <__malloc_unlock>
 800d0b6:	f104 000b 	add.w	r0, r4, #11
 800d0ba:	1d23      	adds	r3, r4, #4
 800d0bc:	f020 0007 	bic.w	r0, r0, #7
 800d0c0:	1ac2      	subs	r2, r0, r3
 800d0c2:	bf1c      	itt	ne
 800d0c4:	1a1b      	subne	r3, r3, r0
 800d0c6:	50a3      	strne	r3, [r4, r2]
 800d0c8:	e7af      	b.n	800d02a <_malloc_r+0x22>
 800d0ca:	6862      	ldr	r2, [r4, #4]
 800d0cc:	42a3      	cmp	r3, r4
 800d0ce:	bf0c      	ite	eq
 800d0d0:	f8c8 2000 	streq.w	r2, [r8]
 800d0d4:	605a      	strne	r2, [r3, #4]
 800d0d6:	e7eb      	b.n	800d0b0 <_malloc_r+0xa8>
 800d0d8:	4623      	mov	r3, r4
 800d0da:	6864      	ldr	r4, [r4, #4]
 800d0dc:	e7ae      	b.n	800d03c <_malloc_r+0x34>
 800d0de:	463c      	mov	r4, r7
 800d0e0:	687f      	ldr	r7, [r7, #4]
 800d0e2:	e7b6      	b.n	800d052 <_malloc_r+0x4a>
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	42a3      	cmp	r3, r4
 800d0ea:	d1fb      	bne.n	800d0e4 <_malloc_r+0xdc>
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	6053      	str	r3, [r2, #4]
 800d0f0:	e7de      	b.n	800d0b0 <_malloc_r+0xa8>
 800d0f2:	230c      	movs	r3, #12
 800d0f4:	4630      	mov	r0, r6
 800d0f6:	6033      	str	r3, [r6, #0]
 800d0f8:	f000 f80c 	bl	800d114 <__malloc_unlock>
 800d0fc:	e794      	b.n	800d028 <_malloc_r+0x20>
 800d0fe:	6005      	str	r5, [r0, #0]
 800d100:	e7d6      	b.n	800d0b0 <_malloc_r+0xa8>
 800d102:	bf00      	nop
 800d104:	20001a30 	.word	0x20001a30

0800d108 <__malloc_lock>:
 800d108:	4801      	ldr	r0, [pc, #4]	@ (800d110 <__malloc_lock+0x8>)
 800d10a:	f000 b8cf 	b.w	800d2ac <__retarget_lock_acquire_recursive>
 800d10e:	bf00      	nop
 800d110:	20001b6c 	.word	0x20001b6c

0800d114 <__malloc_unlock>:
 800d114:	4801      	ldr	r0, [pc, #4]	@ (800d11c <__malloc_unlock+0x8>)
 800d116:	f000 b8ca 	b.w	800d2ae <__retarget_lock_release_recursive>
 800d11a:	bf00      	nop
 800d11c:	20001b6c 	.word	0x20001b6c

0800d120 <siprintf>:
 800d120:	b40e      	push	{r1, r2, r3}
 800d122:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d126:	b500      	push	{lr}
 800d128:	b09c      	sub	sp, #112	@ 0x70
 800d12a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d12c:	9002      	str	r0, [sp, #8]
 800d12e:	9006      	str	r0, [sp, #24]
 800d130:	9107      	str	r1, [sp, #28]
 800d132:	9104      	str	r1, [sp, #16]
 800d134:	4808      	ldr	r0, [pc, #32]	@ (800d158 <siprintf+0x38>)
 800d136:	4909      	ldr	r1, [pc, #36]	@ (800d15c <siprintf+0x3c>)
 800d138:	f853 2b04 	ldr.w	r2, [r3], #4
 800d13c:	9105      	str	r1, [sp, #20]
 800d13e:	6800      	ldr	r0, [r0, #0]
 800d140:	a902      	add	r1, sp, #8
 800d142:	9301      	str	r3, [sp, #4]
 800d144:	f000 f960 	bl	800d408 <_svfiprintf_r>
 800d148:	2200      	movs	r2, #0
 800d14a:	9b02      	ldr	r3, [sp, #8]
 800d14c:	701a      	strb	r2, [r3, #0]
 800d14e:	b01c      	add	sp, #112	@ 0x70
 800d150:	f85d eb04 	ldr.w	lr, [sp], #4
 800d154:	b003      	add	sp, #12
 800d156:	4770      	bx	lr
 800d158:	20000f84 	.word	0x20000f84
 800d15c:	ffff0208 	.word	0xffff0208

0800d160 <__utoa>:
 800d160:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d162:	b08b      	sub	sp, #44	@ 0x2c
 800d164:	4605      	mov	r5, r0
 800d166:	460b      	mov	r3, r1
 800d168:	466e      	mov	r6, sp
 800d16a:	4c1d      	ldr	r4, [pc, #116]	@ (800d1e0 <__utoa+0x80>)
 800d16c:	f104 0c20 	add.w	ip, r4, #32
 800d170:	4637      	mov	r7, r6
 800d172:	6820      	ldr	r0, [r4, #0]
 800d174:	6861      	ldr	r1, [r4, #4]
 800d176:	3408      	adds	r4, #8
 800d178:	c703      	stmia	r7!, {r0, r1}
 800d17a:	4564      	cmp	r4, ip
 800d17c:	463e      	mov	r6, r7
 800d17e:	d1f7      	bne.n	800d170 <__utoa+0x10>
 800d180:	7921      	ldrb	r1, [r4, #4]
 800d182:	6820      	ldr	r0, [r4, #0]
 800d184:	7139      	strb	r1, [r7, #4]
 800d186:	1e91      	subs	r1, r2, #2
 800d188:	2922      	cmp	r1, #34	@ 0x22
 800d18a:	6038      	str	r0, [r7, #0]
 800d18c:	f04f 0100 	mov.w	r1, #0
 800d190:	d904      	bls.n	800d19c <__utoa+0x3c>
 800d192:	7019      	strb	r1, [r3, #0]
 800d194:	460b      	mov	r3, r1
 800d196:	4618      	mov	r0, r3
 800d198:	b00b      	add	sp, #44	@ 0x2c
 800d19a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d19c:	1e58      	subs	r0, r3, #1
 800d19e:	4684      	mov	ip, r0
 800d1a0:	fbb5 f7f2 	udiv	r7, r5, r2
 800d1a4:	fb02 5617 	mls	r6, r2, r7, r5
 800d1a8:	3628      	adds	r6, #40	@ 0x28
 800d1aa:	446e      	add	r6, sp
 800d1ac:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d1b0:	460c      	mov	r4, r1
 800d1b2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d1b6:	462e      	mov	r6, r5
 800d1b8:	42b2      	cmp	r2, r6
 800d1ba:	463d      	mov	r5, r7
 800d1bc:	f101 0101 	add.w	r1, r1, #1
 800d1c0:	d9ee      	bls.n	800d1a0 <__utoa+0x40>
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	545a      	strb	r2, [r3, r1]
 800d1c6:	1919      	adds	r1, r3, r4
 800d1c8:	1aa5      	subs	r5, r4, r2
 800d1ca:	42aa      	cmp	r2, r5
 800d1cc:	dae3      	bge.n	800d196 <__utoa+0x36>
 800d1ce:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d1d2:	780e      	ldrb	r6, [r1, #0]
 800d1d4:	3201      	adds	r2, #1
 800d1d6:	7006      	strb	r6, [r0, #0]
 800d1d8:	f801 5901 	strb.w	r5, [r1], #-1
 800d1dc:	e7f4      	b.n	800d1c8 <__utoa+0x68>
 800d1de:	bf00      	nop
 800d1e0:	0800dd1a 	.word	0x0800dd1a

0800d1e4 <strcat>:
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	b510      	push	{r4, lr}
 800d1e8:	7814      	ldrb	r4, [r2, #0]
 800d1ea:	4613      	mov	r3, r2
 800d1ec:	3201      	adds	r2, #1
 800d1ee:	2c00      	cmp	r4, #0
 800d1f0:	d1fa      	bne.n	800d1e8 <strcat+0x4>
 800d1f2:	3b01      	subs	r3, #1
 800d1f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d1fc:	2a00      	cmp	r2, #0
 800d1fe:	d1f9      	bne.n	800d1f4 <strcat+0x10>
 800d200:	bd10      	pop	{r4, pc}

0800d202 <strncpy>:
 800d202:	4603      	mov	r3, r0
 800d204:	b510      	push	{r4, lr}
 800d206:	3901      	subs	r1, #1
 800d208:	b132      	cbz	r2, 800d218 <strncpy+0x16>
 800d20a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d20e:	3a01      	subs	r2, #1
 800d210:	f803 4b01 	strb.w	r4, [r3], #1
 800d214:	2c00      	cmp	r4, #0
 800d216:	d1f7      	bne.n	800d208 <strncpy+0x6>
 800d218:	2100      	movs	r1, #0
 800d21a:	441a      	add	r2, r3
 800d21c:	4293      	cmp	r3, r2
 800d21e:	d100      	bne.n	800d222 <strncpy+0x20>
 800d220:	bd10      	pop	{r4, pc}
 800d222:	f803 1b01 	strb.w	r1, [r3], #1
 800d226:	e7f9      	b.n	800d21c <strncpy+0x1a>

0800d228 <memset>:
 800d228:	4603      	mov	r3, r0
 800d22a:	4402      	add	r2, r0
 800d22c:	4293      	cmp	r3, r2
 800d22e:	d100      	bne.n	800d232 <memset+0xa>
 800d230:	4770      	bx	lr
 800d232:	f803 1b01 	strb.w	r1, [r3], #1
 800d236:	e7f9      	b.n	800d22c <memset+0x4>

0800d238 <_sbrk_r>:
 800d238:	b538      	push	{r3, r4, r5, lr}
 800d23a:	2300      	movs	r3, #0
 800d23c:	4d05      	ldr	r5, [pc, #20]	@ (800d254 <_sbrk_r+0x1c>)
 800d23e:	4604      	mov	r4, r0
 800d240:	4608      	mov	r0, r1
 800d242:	602b      	str	r3, [r5, #0]
 800d244:	f7fb fff4 	bl	8009230 <_sbrk>
 800d248:	1c43      	adds	r3, r0, #1
 800d24a:	d102      	bne.n	800d252 <_sbrk_r+0x1a>
 800d24c:	682b      	ldr	r3, [r5, #0]
 800d24e:	b103      	cbz	r3, 800d252 <_sbrk_r+0x1a>
 800d250:	6023      	str	r3, [r4, #0]
 800d252:	bd38      	pop	{r3, r4, r5, pc}
 800d254:	20001b70 	.word	0x20001b70

0800d258 <__errno>:
 800d258:	4b01      	ldr	r3, [pc, #4]	@ (800d260 <__errno+0x8>)
 800d25a:	6818      	ldr	r0, [r3, #0]
 800d25c:	4770      	bx	lr
 800d25e:	bf00      	nop
 800d260:	20000f84 	.word	0x20000f84

0800d264 <__libc_init_array>:
 800d264:	b570      	push	{r4, r5, r6, lr}
 800d266:	2600      	movs	r6, #0
 800d268:	4d0c      	ldr	r5, [pc, #48]	@ (800d29c <__libc_init_array+0x38>)
 800d26a:	4c0d      	ldr	r4, [pc, #52]	@ (800d2a0 <__libc_init_array+0x3c>)
 800d26c:	1b64      	subs	r4, r4, r5
 800d26e:	10a4      	asrs	r4, r4, #2
 800d270:	42a6      	cmp	r6, r4
 800d272:	d109      	bne.n	800d288 <__libc_init_array+0x24>
 800d274:	f000 fbc2 	bl	800d9fc <_init>
 800d278:	2600      	movs	r6, #0
 800d27a:	4d0a      	ldr	r5, [pc, #40]	@ (800d2a4 <__libc_init_array+0x40>)
 800d27c:	4c0a      	ldr	r4, [pc, #40]	@ (800d2a8 <__libc_init_array+0x44>)
 800d27e:	1b64      	subs	r4, r4, r5
 800d280:	10a4      	asrs	r4, r4, #2
 800d282:	42a6      	cmp	r6, r4
 800d284:	d105      	bne.n	800d292 <__libc_init_array+0x2e>
 800d286:	bd70      	pop	{r4, r5, r6, pc}
 800d288:	f855 3b04 	ldr.w	r3, [r5], #4
 800d28c:	4798      	blx	r3
 800d28e:	3601      	adds	r6, #1
 800d290:	e7ee      	b.n	800d270 <__libc_init_array+0xc>
 800d292:	f855 3b04 	ldr.w	r3, [r5], #4
 800d296:	4798      	blx	r3
 800d298:	3601      	adds	r6, #1
 800d29a:	e7f2      	b.n	800d282 <__libc_init_array+0x1e>
 800d29c:	0800dd7c 	.word	0x0800dd7c
 800d2a0:	0800dd7c 	.word	0x0800dd7c
 800d2a4:	0800dd7c 	.word	0x0800dd7c
 800d2a8:	0800dd80 	.word	0x0800dd80

0800d2ac <__retarget_lock_acquire_recursive>:
 800d2ac:	4770      	bx	lr

0800d2ae <__retarget_lock_release_recursive>:
 800d2ae:	4770      	bx	lr

0800d2b0 <strcpy>:
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2b6:	f803 2b01 	strb.w	r2, [r3], #1
 800d2ba:	2a00      	cmp	r2, #0
 800d2bc:	d1f9      	bne.n	800d2b2 <strcpy+0x2>
 800d2be:	4770      	bx	lr

0800d2c0 <_free_r>:
 800d2c0:	b538      	push	{r3, r4, r5, lr}
 800d2c2:	4605      	mov	r5, r0
 800d2c4:	2900      	cmp	r1, #0
 800d2c6:	d040      	beq.n	800d34a <_free_r+0x8a>
 800d2c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2cc:	1f0c      	subs	r4, r1, #4
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	bfb8      	it	lt
 800d2d2:	18e4      	addlt	r4, r4, r3
 800d2d4:	f7ff ff18 	bl	800d108 <__malloc_lock>
 800d2d8:	4a1c      	ldr	r2, [pc, #112]	@ (800d34c <_free_r+0x8c>)
 800d2da:	6813      	ldr	r3, [r2, #0]
 800d2dc:	b933      	cbnz	r3, 800d2ec <_free_r+0x2c>
 800d2de:	6063      	str	r3, [r4, #4]
 800d2e0:	6014      	str	r4, [r2, #0]
 800d2e2:	4628      	mov	r0, r5
 800d2e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2e8:	f7ff bf14 	b.w	800d114 <__malloc_unlock>
 800d2ec:	42a3      	cmp	r3, r4
 800d2ee:	d908      	bls.n	800d302 <_free_r+0x42>
 800d2f0:	6820      	ldr	r0, [r4, #0]
 800d2f2:	1821      	adds	r1, r4, r0
 800d2f4:	428b      	cmp	r3, r1
 800d2f6:	bf01      	itttt	eq
 800d2f8:	6819      	ldreq	r1, [r3, #0]
 800d2fa:	685b      	ldreq	r3, [r3, #4]
 800d2fc:	1809      	addeq	r1, r1, r0
 800d2fe:	6021      	streq	r1, [r4, #0]
 800d300:	e7ed      	b.n	800d2de <_free_r+0x1e>
 800d302:	461a      	mov	r2, r3
 800d304:	685b      	ldr	r3, [r3, #4]
 800d306:	b10b      	cbz	r3, 800d30c <_free_r+0x4c>
 800d308:	42a3      	cmp	r3, r4
 800d30a:	d9fa      	bls.n	800d302 <_free_r+0x42>
 800d30c:	6811      	ldr	r1, [r2, #0]
 800d30e:	1850      	adds	r0, r2, r1
 800d310:	42a0      	cmp	r0, r4
 800d312:	d10b      	bne.n	800d32c <_free_r+0x6c>
 800d314:	6820      	ldr	r0, [r4, #0]
 800d316:	4401      	add	r1, r0
 800d318:	1850      	adds	r0, r2, r1
 800d31a:	4283      	cmp	r3, r0
 800d31c:	6011      	str	r1, [r2, #0]
 800d31e:	d1e0      	bne.n	800d2e2 <_free_r+0x22>
 800d320:	6818      	ldr	r0, [r3, #0]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	4408      	add	r0, r1
 800d326:	6010      	str	r0, [r2, #0]
 800d328:	6053      	str	r3, [r2, #4]
 800d32a:	e7da      	b.n	800d2e2 <_free_r+0x22>
 800d32c:	d902      	bls.n	800d334 <_free_r+0x74>
 800d32e:	230c      	movs	r3, #12
 800d330:	602b      	str	r3, [r5, #0]
 800d332:	e7d6      	b.n	800d2e2 <_free_r+0x22>
 800d334:	6820      	ldr	r0, [r4, #0]
 800d336:	1821      	adds	r1, r4, r0
 800d338:	428b      	cmp	r3, r1
 800d33a:	bf01      	itttt	eq
 800d33c:	6819      	ldreq	r1, [r3, #0]
 800d33e:	685b      	ldreq	r3, [r3, #4]
 800d340:	1809      	addeq	r1, r1, r0
 800d342:	6021      	streq	r1, [r4, #0]
 800d344:	6063      	str	r3, [r4, #4]
 800d346:	6054      	str	r4, [r2, #4]
 800d348:	e7cb      	b.n	800d2e2 <_free_r+0x22>
 800d34a:	bd38      	pop	{r3, r4, r5, pc}
 800d34c:	20001a30 	.word	0x20001a30

0800d350 <__ssputs_r>:
 800d350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d354:	461f      	mov	r7, r3
 800d356:	688e      	ldr	r6, [r1, #8]
 800d358:	4682      	mov	sl, r0
 800d35a:	42be      	cmp	r6, r7
 800d35c:	460c      	mov	r4, r1
 800d35e:	4690      	mov	r8, r2
 800d360:	680b      	ldr	r3, [r1, #0]
 800d362:	d82d      	bhi.n	800d3c0 <__ssputs_r+0x70>
 800d364:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d368:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d36c:	d026      	beq.n	800d3bc <__ssputs_r+0x6c>
 800d36e:	6965      	ldr	r5, [r4, #20]
 800d370:	6909      	ldr	r1, [r1, #16]
 800d372:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d376:	eba3 0901 	sub.w	r9, r3, r1
 800d37a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d37e:	1c7b      	adds	r3, r7, #1
 800d380:	444b      	add	r3, r9
 800d382:	106d      	asrs	r5, r5, #1
 800d384:	429d      	cmp	r5, r3
 800d386:	bf38      	it	cc
 800d388:	461d      	movcc	r5, r3
 800d38a:	0553      	lsls	r3, r2, #21
 800d38c:	d527      	bpl.n	800d3de <__ssputs_r+0x8e>
 800d38e:	4629      	mov	r1, r5
 800d390:	f7ff fe3a 	bl	800d008 <_malloc_r>
 800d394:	4606      	mov	r6, r0
 800d396:	b360      	cbz	r0, 800d3f2 <__ssputs_r+0xa2>
 800d398:	464a      	mov	r2, r9
 800d39a:	6921      	ldr	r1, [r4, #16]
 800d39c:	f000 fb18 	bl	800d9d0 <memcpy>
 800d3a0:	89a3      	ldrh	r3, [r4, #12]
 800d3a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d3a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3aa:	81a3      	strh	r3, [r4, #12]
 800d3ac:	6126      	str	r6, [r4, #16]
 800d3ae:	444e      	add	r6, r9
 800d3b0:	6026      	str	r6, [r4, #0]
 800d3b2:	463e      	mov	r6, r7
 800d3b4:	6165      	str	r5, [r4, #20]
 800d3b6:	eba5 0509 	sub.w	r5, r5, r9
 800d3ba:	60a5      	str	r5, [r4, #8]
 800d3bc:	42be      	cmp	r6, r7
 800d3be:	d900      	bls.n	800d3c2 <__ssputs_r+0x72>
 800d3c0:	463e      	mov	r6, r7
 800d3c2:	4632      	mov	r2, r6
 800d3c4:	4641      	mov	r1, r8
 800d3c6:	6820      	ldr	r0, [r4, #0]
 800d3c8:	f000 fada 	bl	800d980 <memmove>
 800d3cc:	2000      	movs	r0, #0
 800d3ce:	68a3      	ldr	r3, [r4, #8]
 800d3d0:	1b9b      	subs	r3, r3, r6
 800d3d2:	60a3      	str	r3, [r4, #8]
 800d3d4:	6823      	ldr	r3, [r4, #0]
 800d3d6:	4433      	add	r3, r6
 800d3d8:	6023      	str	r3, [r4, #0]
 800d3da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3de:	462a      	mov	r2, r5
 800d3e0:	f000 faa0 	bl	800d924 <_realloc_r>
 800d3e4:	4606      	mov	r6, r0
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	d1e0      	bne.n	800d3ac <__ssputs_r+0x5c>
 800d3ea:	4650      	mov	r0, sl
 800d3ec:	6921      	ldr	r1, [r4, #16]
 800d3ee:	f7ff ff67 	bl	800d2c0 <_free_r>
 800d3f2:	230c      	movs	r3, #12
 800d3f4:	f8ca 3000 	str.w	r3, [sl]
 800d3f8:	89a3      	ldrh	r3, [r4, #12]
 800d3fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d402:	81a3      	strh	r3, [r4, #12]
 800d404:	e7e9      	b.n	800d3da <__ssputs_r+0x8a>
	...

0800d408 <_svfiprintf_r>:
 800d408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d40c:	4698      	mov	r8, r3
 800d40e:	898b      	ldrh	r3, [r1, #12]
 800d410:	4607      	mov	r7, r0
 800d412:	061b      	lsls	r3, r3, #24
 800d414:	460d      	mov	r5, r1
 800d416:	4614      	mov	r4, r2
 800d418:	b09d      	sub	sp, #116	@ 0x74
 800d41a:	d510      	bpl.n	800d43e <_svfiprintf_r+0x36>
 800d41c:	690b      	ldr	r3, [r1, #16]
 800d41e:	b973      	cbnz	r3, 800d43e <_svfiprintf_r+0x36>
 800d420:	2140      	movs	r1, #64	@ 0x40
 800d422:	f7ff fdf1 	bl	800d008 <_malloc_r>
 800d426:	6028      	str	r0, [r5, #0]
 800d428:	6128      	str	r0, [r5, #16]
 800d42a:	b930      	cbnz	r0, 800d43a <_svfiprintf_r+0x32>
 800d42c:	230c      	movs	r3, #12
 800d42e:	603b      	str	r3, [r7, #0]
 800d430:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d434:	b01d      	add	sp, #116	@ 0x74
 800d436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d43a:	2340      	movs	r3, #64	@ 0x40
 800d43c:	616b      	str	r3, [r5, #20]
 800d43e:	2300      	movs	r3, #0
 800d440:	9309      	str	r3, [sp, #36]	@ 0x24
 800d442:	2320      	movs	r3, #32
 800d444:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d448:	2330      	movs	r3, #48	@ 0x30
 800d44a:	f04f 0901 	mov.w	r9, #1
 800d44e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d452:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d5ec <_svfiprintf_r+0x1e4>
 800d456:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d45a:	4623      	mov	r3, r4
 800d45c:	469a      	mov	sl, r3
 800d45e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d462:	b10a      	cbz	r2, 800d468 <_svfiprintf_r+0x60>
 800d464:	2a25      	cmp	r2, #37	@ 0x25
 800d466:	d1f9      	bne.n	800d45c <_svfiprintf_r+0x54>
 800d468:	ebba 0b04 	subs.w	fp, sl, r4
 800d46c:	d00b      	beq.n	800d486 <_svfiprintf_r+0x7e>
 800d46e:	465b      	mov	r3, fp
 800d470:	4622      	mov	r2, r4
 800d472:	4629      	mov	r1, r5
 800d474:	4638      	mov	r0, r7
 800d476:	f7ff ff6b 	bl	800d350 <__ssputs_r>
 800d47a:	3001      	adds	r0, #1
 800d47c:	f000 80a7 	beq.w	800d5ce <_svfiprintf_r+0x1c6>
 800d480:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d482:	445a      	add	r2, fp
 800d484:	9209      	str	r2, [sp, #36]	@ 0x24
 800d486:	f89a 3000 	ldrb.w	r3, [sl]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	f000 809f 	beq.w	800d5ce <_svfiprintf_r+0x1c6>
 800d490:	2300      	movs	r3, #0
 800d492:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d496:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d49a:	f10a 0a01 	add.w	sl, sl, #1
 800d49e:	9304      	str	r3, [sp, #16]
 800d4a0:	9307      	str	r3, [sp, #28]
 800d4a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d4a6:	931a      	str	r3, [sp, #104]	@ 0x68
 800d4a8:	4654      	mov	r4, sl
 800d4aa:	2205      	movs	r2, #5
 800d4ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4b0:	484e      	ldr	r0, [pc, #312]	@ (800d5ec <_svfiprintf_r+0x1e4>)
 800d4b2:	f000 fa7f 	bl	800d9b4 <memchr>
 800d4b6:	9a04      	ldr	r2, [sp, #16]
 800d4b8:	b9d8      	cbnz	r0, 800d4f2 <_svfiprintf_r+0xea>
 800d4ba:	06d0      	lsls	r0, r2, #27
 800d4bc:	bf44      	itt	mi
 800d4be:	2320      	movmi	r3, #32
 800d4c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4c4:	0711      	lsls	r1, r2, #28
 800d4c6:	bf44      	itt	mi
 800d4c8:	232b      	movmi	r3, #43	@ 0x2b
 800d4ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4ce:	f89a 3000 	ldrb.w	r3, [sl]
 800d4d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4d4:	d015      	beq.n	800d502 <_svfiprintf_r+0xfa>
 800d4d6:	4654      	mov	r4, sl
 800d4d8:	2000      	movs	r0, #0
 800d4da:	f04f 0c0a 	mov.w	ip, #10
 800d4de:	9a07      	ldr	r2, [sp, #28]
 800d4e0:	4621      	mov	r1, r4
 800d4e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4e6:	3b30      	subs	r3, #48	@ 0x30
 800d4e8:	2b09      	cmp	r3, #9
 800d4ea:	d94b      	bls.n	800d584 <_svfiprintf_r+0x17c>
 800d4ec:	b1b0      	cbz	r0, 800d51c <_svfiprintf_r+0x114>
 800d4ee:	9207      	str	r2, [sp, #28]
 800d4f0:	e014      	b.n	800d51c <_svfiprintf_r+0x114>
 800d4f2:	eba0 0308 	sub.w	r3, r0, r8
 800d4f6:	fa09 f303 	lsl.w	r3, r9, r3
 800d4fa:	4313      	orrs	r3, r2
 800d4fc:	46a2      	mov	sl, r4
 800d4fe:	9304      	str	r3, [sp, #16]
 800d500:	e7d2      	b.n	800d4a8 <_svfiprintf_r+0xa0>
 800d502:	9b03      	ldr	r3, [sp, #12]
 800d504:	1d19      	adds	r1, r3, #4
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	9103      	str	r1, [sp, #12]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	bfbb      	ittet	lt
 800d50e:	425b      	neglt	r3, r3
 800d510:	f042 0202 	orrlt.w	r2, r2, #2
 800d514:	9307      	strge	r3, [sp, #28]
 800d516:	9307      	strlt	r3, [sp, #28]
 800d518:	bfb8      	it	lt
 800d51a:	9204      	strlt	r2, [sp, #16]
 800d51c:	7823      	ldrb	r3, [r4, #0]
 800d51e:	2b2e      	cmp	r3, #46	@ 0x2e
 800d520:	d10a      	bne.n	800d538 <_svfiprintf_r+0x130>
 800d522:	7863      	ldrb	r3, [r4, #1]
 800d524:	2b2a      	cmp	r3, #42	@ 0x2a
 800d526:	d132      	bne.n	800d58e <_svfiprintf_r+0x186>
 800d528:	9b03      	ldr	r3, [sp, #12]
 800d52a:	3402      	adds	r4, #2
 800d52c:	1d1a      	adds	r2, r3, #4
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	9203      	str	r2, [sp, #12]
 800d532:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d536:	9305      	str	r3, [sp, #20]
 800d538:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d5f0 <_svfiprintf_r+0x1e8>
 800d53c:	2203      	movs	r2, #3
 800d53e:	4650      	mov	r0, sl
 800d540:	7821      	ldrb	r1, [r4, #0]
 800d542:	f000 fa37 	bl	800d9b4 <memchr>
 800d546:	b138      	cbz	r0, 800d558 <_svfiprintf_r+0x150>
 800d548:	2240      	movs	r2, #64	@ 0x40
 800d54a:	9b04      	ldr	r3, [sp, #16]
 800d54c:	eba0 000a 	sub.w	r0, r0, sl
 800d550:	4082      	lsls	r2, r0
 800d552:	4313      	orrs	r3, r2
 800d554:	3401      	adds	r4, #1
 800d556:	9304      	str	r3, [sp, #16]
 800d558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d55c:	2206      	movs	r2, #6
 800d55e:	4825      	ldr	r0, [pc, #148]	@ (800d5f4 <_svfiprintf_r+0x1ec>)
 800d560:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d564:	f000 fa26 	bl	800d9b4 <memchr>
 800d568:	2800      	cmp	r0, #0
 800d56a:	d036      	beq.n	800d5da <_svfiprintf_r+0x1d2>
 800d56c:	4b22      	ldr	r3, [pc, #136]	@ (800d5f8 <_svfiprintf_r+0x1f0>)
 800d56e:	bb1b      	cbnz	r3, 800d5b8 <_svfiprintf_r+0x1b0>
 800d570:	9b03      	ldr	r3, [sp, #12]
 800d572:	3307      	adds	r3, #7
 800d574:	f023 0307 	bic.w	r3, r3, #7
 800d578:	3308      	adds	r3, #8
 800d57a:	9303      	str	r3, [sp, #12]
 800d57c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d57e:	4433      	add	r3, r6
 800d580:	9309      	str	r3, [sp, #36]	@ 0x24
 800d582:	e76a      	b.n	800d45a <_svfiprintf_r+0x52>
 800d584:	460c      	mov	r4, r1
 800d586:	2001      	movs	r0, #1
 800d588:	fb0c 3202 	mla	r2, ip, r2, r3
 800d58c:	e7a8      	b.n	800d4e0 <_svfiprintf_r+0xd8>
 800d58e:	2300      	movs	r3, #0
 800d590:	f04f 0c0a 	mov.w	ip, #10
 800d594:	4619      	mov	r1, r3
 800d596:	3401      	adds	r4, #1
 800d598:	9305      	str	r3, [sp, #20]
 800d59a:	4620      	mov	r0, r4
 800d59c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5a0:	3a30      	subs	r2, #48	@ 0x30
 800d5a2:	2a09      	cmp	r2, #9
 800d5a4:	d903      	bls.n	800d5ae <_svfiprintf_r+0x1a6>
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d0c6      	beq.n	800d538 <_svfiprintf_r+0x130>
 800d5aa:	9105      	str	r1, [sp, #20]
 800d5ac:	e7c4      	b.n	800d538 <_svfiprintf_r+0x130>
 800d5ae:	4604      	mov	r4, r0
 800d5b0:	2301      	movs	r3, #1
 800d5b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5b6:	e7f0      	b.n	800d59a <_svfiprintf_r+0x192>
 800d5b8:	ab03      	add	r3, sp, #12
 800d5ba:	9300      	str	r3, [sp, #0]
 800d5bc:	462a      	mov	r2, r5
 800d5be:	4638      	mov	r0, r7
 800d5c0:	4b0e      	ldr	r3, [pc, #56]	@ (800d5fc <_svfiprintf_r+0x1f4>)
 800d5c2:	a904      	add	r1, sp, #16
 800d5c4:	f3af 8000 	nop.w
 800d5c8:	1c42      	adds	r2, r0, #1
 800d5ca:	4606      	mov	r6, r0
 800d5cc:	d1d6      	bne.n	800d57c <_svfiprintf_r+0x174>
 800d5ce:	89ab      	ldrh	r3, [r5, #12]
 800d5d0:	065b      	lsls	r3, r3, #25
 800d5d2:	f53f af2d 	bmi.w	800d430 <_svfiprintf_r+0x28>
 800d5d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5d8:	e72c      	b.n	800d434 <_svfiprintf_r+0x2c>
 800d5da:	ab03      	add	r3, sp, #12
 800d5dc:	9300      	str	r3, [sp, #0]
 800d5de:	462a      	mov	r2, r5
 800d5e0:	4638      	mov	r0, r7
 800d5e2:	4b06      	ldr	r3, [pc, #24]	@ (800d5fc <_svfiprintf_r+0x1f4>)
 800d5e4:	a904      	add	r1, sp, #16
 800d5e6:	f000 f87d 	bl	800d6e4 <_printf_i>
 800d5ea:	e7ed      	b.n	800d5c8 <_svfiprintf_r+0x1c0>
 800d5ec:	0800dd3f 	.word	0x0800dd3f
 800d5f0:	0800dd45 	.word	0x0800dd45
 800d5f4:	0800dd49 	.word	0x0800dd49
 800d5f8:	00000000 	.word	0x00000000
 800d5fc:	0800d351 	.word	0x0800d351

0800d600 <_printf_common>:
 800d600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d604:	4616      	mov	r6, r2
 800d606:	4698      	mov	r8, r3
 800d608:	688a      	ldr	r2, [r1, #8]
 800d60a:	690b      	ldr	r3, [r1, #16]
 800d60c:	4607      	mov	r7, r0
 800d60e:	4293      	cmp	r3, r2
 800d610:	bfb8      	it	lt
 800d612:	4613      	movlt	r3, r2
 800d614:	6033      	str	r3, [r6, #0]
 800d616:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d61a:	460c      	mov	r4, r1
 800d61c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d620:	b10a      	cbz	r2, 800d626 <_printf_common+0x26>
 800d622:	3301      	adds	r3, #1
 800d624:	6033      	str	r3, [r6, #0]
 800d626:	6823      	ldr	r3, [r4, #0]
 800d628:	0699      	lsls	r1, r3, #26
 800d62a:	bf42      	ittt	mi
 800d62c:	6833      	ldrmi	r3, [r6, #0]
 800d62e:	3302      	addmi	r3, #2
 800d630:	6033      	strmi	r3, [r6, #0]
 800d632:	6825      	ldr	r5, [r4, #0]
 800d634:	f015 0506 	ands.w	r5, r5, #6
 800d638:	d106      	bne.n	800d648 <_printf_common+0x48>
 800d63a:	f104 0a19 	add.w	sl, r4, #25
 800d63e:	68e3      	ldr	r3, [r4, #12]
 800d640:	6832      	ldr	r2, [r6, #0]
 800d642:	1a9b      	subs	r3, r3, r2
 800d644:	42ab      	cmp	r3, r5
 800d646:	dc2b      	bgt.n	800d6a0 <_printf_common+0xa0>
 800d648:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d64c:	6822      	ldr	r2, [r4, #0]
 800d64e:	3b00      	subs	r3, #0
 800d650:	bf18      	it	ne
 800d652:	2301      	movne	r3, #1
 800d654:	0692      	lsls	r2, r2, #26
 800d656:	d430      	bmi.n	800d6ba <_printf_common+0xba>
 800d658:	4641      	mov	r1, r8
 800d65a:	4638      	mov	r0, r7
 800d65c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d660:	47c8      	blx	r9
 800d662:	3001      	adds	r0, #1
 800d664:	d023      	beq.n	800d6ae <_printf_common+0xae>
 800d666:	6823      	ldr	r3, [r4, #0]
 800d668:	6922      	ldr	r2, [r4, #16]
 800d66a:	f003 0306 	and.w	r3, r3, #6
 800d66e:	2b04      	cmp	r3, #4
 800d670:	bf14      	ite	ne
 800d672:	2500      	movne	r5, #0
 800d674:	6833      	ldreq	r3, [r6, #0]
 800d676:	f04f 0600 	mov.w	r6, #0
 800d67a:	bf08      	it	eq
 800d67c:	68e5      	ldreq	r5, [r4, #12]
 800d67e:	f104 041a 	add.w	r4, r4, #26
 800d682:	bf08      	it	eq
 800d684:	1aed      	subeq	r5, r5, r3
 800d686:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d68a:	bf08      	it	eq
 800d68c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d690:	4293      	cmp	r3, r2
 800d692:	bfc4      	itt	gt
 800d694:	1a9b      	subgt	r3, r3, r2
 800d696:	18ed      	addgt	r5, r5, r3
 800d698:	42b5      	cmp	r5, r6
 800d69a:	d11a      	bne.n	800d6d2 <_printf_common+0xd2>
 800d69c:	2000      	movs	r0, #0
 800d69e:	e008      	b.n	800d6b2 <_printf_common+0xb2>
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	4652      	mov	r2, sl
 800d6a4:	4641      	mov	r1, r8
 800d6a6:	4638      	mov	r0, r7
 800d6a8:	47c8      	blx	r9
 800d6aa:	3001      	adds	r0, #1
 800d6ac:	d103      	bne.n	800d6b6 <_printf_common+0xb6>
 800d6ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d6b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6b6:	3501      	adds	r5, #1
 800d6b8:	e7c1      	b.n	800d63e <_printf_common+0x3e>
 800d6ba:	2030      	movs	r0, #48	@ 0x30
 800d6bc:	18e1      	adds	r1, r4, r3
 800d6be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d6c2:	1c5a      	adds	r2, r3, #1
 800d6c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d6c8:	4422      	add	r2, r4
 800d6ca:	3302      	adds	r3, #2
 800d6cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d6d0:	e7c2      	b.n	800d658 <_printf_common+0x58>
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	4622      	mov	r2, r4
 800d6d6:	4641      	mov	r1, r8
 800d6d8:	4638      	mov	r0, r7
 800d6da:	47c8      	blx	r9
 800d6dc:	3001      	adds	r0, #1
 800d6de:	d0e6      	beq.n	800d6ae <_printf_common+0xae>
 800d6e0:	3601      	adds	r6, #1
 800d6e2:	e7d9      	b.n	800d698 <_printf_common+0x98>

0800d6e4 <_printf_i>:
 800d6e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6e8:	7e0f      	ldrb	r7, [r1, #24]
 800d6ea:	4691      	mov	r9, r2
 800d6ec:	2f78      	cmp	r7, #120	@ 0x78
 800d6ee:	4680      	mov	r8, r0
 800d6f0:	460c      	mov	r4, r1
 800d6f2:	469a      	mov	sl, r3
 800d6f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d6f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d6fa:	d807      	bhi.n	800d70c <_printf_i+0x28>
 800d6fc:	2f62      	cmp	r7, #98	@ 0x62
 800d6fe:	d80a      	bhi.n	800d716 <_printf_i+0x32>
 800d700:	2f00      	cmp	r7, #0
 800d702:	f000 80d3 	beq.w	800d8ac <_printf_i+0x1c8>
 800d706:	2f58      	cmp	r7, #88	@ 0x58
 800d708:	f000 80ba 	beq.w	800d880 <_printf_i+0x19c>
 800d70c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d710:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d714:	e03a      	b.n	800d78c <_printf_i+0xa8>
 800d716:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d71a:	2b15      	cmp	r3, #21
 800d71c:	d8f6      	bhi.n	800d70c <_printf_i+0x28>
 800d71e:	a101      	add	r1, pc, #4	@ (adr r1, 800d724 <_printf_i+0x40>)
 800d720:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d724:	0800d77d 	.word	0x0800d77d
 800d728:	0800d791 	.word	0x0800d791
 800d72c:	0800d70d 	.word	0x0800d70d
 800d730:	0800d70d 	.word	0x0800d70d
 800d734:	0800d70d 	.word	0x0800d70d
 800d738:	0800d70d 	.word	0x0800d70d
 800d73c:	0800d791 	.word	0x0800d791
 800d740:	0800d70d 	.word	0x0800d70d
 800d744:	0800d70d 	.word	0x0800d70d
 800d748:	0800d70d 	.word	0x0800d70d
 800d74c:	0800d70d 	.word	0x0800d70d
 800d750:	0800d893 	.word	0x0800d893
 800d754:	0800d7bb 	.word	0x0800d7bb
 800d758:	0800d84d 	.word	0x0800d84d
 800d75c:	0800d70d 	.word	0x0800d70d
 800d760:	0800d70d 	.word	0x0800d70d
 800d764:	0800d8b5 	.word	0x0800d8b5
 800d768:	0800d70d 	.word	0x0800d70d
 800d76c:	0800d7bb 	.word	0x0800d7bb
 800d770:	0800d70d 	.word	0x0800d70d
 800d774:	0800d70d 	.word	0x0800d70d
 800d778:	0800d855 	.word	0x0800d855
 800d77c:	6833      	ldr	r3, [r6, #0]
 800d77e:	1d1a      	adds	r2, r3, #4
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	6032      	str	r2, [r6, #0]
 800d784:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d788:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d78c:	2301      	movs	r3, #1
 800d78e:	e09e      	b.n	800d8ce <_printf_i+0x1ea>
 800d790:	6833      	ldr	r3, [r6, #0]
 800d792:	6820      	ldr	r0, [r4, #0]
 800d794:	1d19      	adds	r1, r3, #4
 800d796:	6031      	str	r1, [r6, #0]
 800d798:	0606      	lsls	r6, r0, #24
 800d79a:	d501      	bpl.n	800d7a0 <_printf_i+0xbc>
 800d79c:	681d      	ldr	r5, [r3, #0]
 800d79e:	e003      	b.n	800d7a8 <_printf_i+0xc4>
 800d7a0:	0645      	lsls	r5, r0, #25
 800d7a2:	d5fb      	bpl.n	800d79c <_printf_i+0xb8>
 800d7a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d7a8:	2d00      	cmp	r5, #0
 800d7aa:	da03      	bge.n	800d7b4 <_printf_i+0xd0>
 800d7ac:	232d      	movs	r3, #45	@ 0x2d
 800d7ae:	426d      	negs	r5, r5
 800d7b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7b4:	230a      	movs	r3, #10
 800d7b6:	4859      	ldr	r0, [pc, #356]	@ (800d91c <_printf_i+0x238>)
 800d7b8:	e011      	b.n	800d7de <_printf_i+0xfa>
 800d7ba:	6821      	ldr	r1, [r4, #0]
 800d7bc:	6833      	ldr	r3, [r6, #0]
 800d7be:	0608      	lsls	r0, r1, #24
 800d7c0:	f853 5b04 	ldr.w	r5, [r3], #4
 800d7c4:	d402      	bmi.n	800d7cc <_printf_i+0xe8>
 800d7c6:	0649      	lsls	r1, r1, #25
 800d7c8:	bf48      	it	mi
 800d7ca:	b2ad      	uxthmi	r5, r5
 800d7cc:	2f6f      	cmp	r7, #111	@ 0x6f
 800d7ce:	6033      	str	r3, [r6, #0]
 800d7d0:	bf14      	ite	ne
 800d7d2:	230a      	movne	r3, #10
 800d7d4:	2308      	moveq	r3, #8
 800d7d6:	4851      	ldr	r0, [pc, #324]	@ (800d91c <_printf_i+0x238>)
 800d7d8:	2100      	movs	r1, #0
 800d7da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d7de:	6866      	ldr	r6, [r4, #4]
 800d7e0:	2e00      	cmp	r6, #0
 800d7e2:	bfa8      	it	ge
 800d7e4:	6821      	ldrge	r1, [r4, #0]
 800d7e6:	60a6      	str	r6, [r4, #8]
 800d7e8:	bfa4      	itt	ge
 800d7ea:	f021 0104 	bicge.w	r1, r1, #4
 800d7ee:	6021      	strge	r1, [r4, #0]
 800d7f0:	b90d      	cbnz	r5, 800d7f6 <_printf_i+0x112>
 800d7f2:	2e00      	cmp	r6, #0
 800d7f4:	d04b      	beq.n	800d88e <_printf_i+0x1aa>
 800d7f6:	4616      	mov	r6, r2
 800d7f8:	fbb5 f1f3 	udiv	r1, r5, r3
 800d7fc:	fb03 5711 	mls	r7, r3, r1, r5
 800d800:	5dc7      	ldrb	r7, [r0, r7]
 800d802:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d806:	462f      	mov	r7, r5
 800d808:	42bb      	cmp	r3, r7
 800d80a:	460d      	mov	r5, r1
 800d80c:	d9f4      	bls.n	800d7f8 <_printf_i+0x114>
 800d80e:	2b08      	cmp	r3, #8
 800d810:	d10b      	bne.n	800d82a <_printf_i+0x146>
 800d812:	6823      	ldr	r3, [r4, #0]
 800d814:	07df      	lsls	r7, r3, #31
 800d816:	d508      	bpl.n	800d82a <_printf_i+0x146>
 800d818:	6923      	ldr	r3, [r4, #16]
 800d81a:	6861      	ldr	r1, [r4, #4]
 800d81c:	4299      	cmp	r1, r3
 800d81e:	bfde      	ittt	le
 800d820:	2330      	movle	r3, #48	@ 0x30
 800d822:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d826:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d82a:	1b92      	subs	r2, r2, r6
 800d82c:	6122      	str	r2, [r4, #16]
 800d82e:	464b      	mov	r3, r9
 800d830:	4621      	mov	r1, r4
 800d832:	4640      	mov	r0, r8
 800d834:	f8cd a000 	str.w	sl, [sp]
 800d838:	aa03      	add	r2, sp, #12
 800d83a:	f7ff fee1 	bl	800d600 <_printf_common>
 800d83e:	3001      	adds	r0, #1
 800d840:	d14a      	bne.n	800d8d8 <_printf_i+0x1f4>
 800d842:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d846:	b004      	add	sp, #16
 800d848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d84c:	6823      	ldr	r3, [r4, #0]
 800d84e:	f043 0320 	orr.w	r3, r3, #32
 800d852:	6023      	str	r3, [r4, #0]
 800d854:	2778      	movs	r7, #120	@ 0x78
 800d856:	4832      	ldr	r0, [pc, #200]	@ (800d920 <_printf_i+0x23c>)
 800d858:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d85c:	6823      	ldr	r3, [r4, #0]
 800d85e:	6831      	ldr	r1, [r6, #0]
 800d860:	061f      	lsls	r7, r3, #24
 800d862:	f851 5b04 	ldr.w	r5, [r1], #4
 800d866:	d402      	bmi.n	800d86e <_printf_i+0x18a>
 800d868:	065f      	lsls	r7, r3, #25
 800d86a:	bf48      	it	mi
 800d86c:	b2ad      	uxthmi	r5, r5
 800d86e:	6031      	str	r1, [r6, #0]
 800d870:	07d9      	lsls	r1, r3, #31
 800d872:	bf44      	itt	mi
 800d874:	f043 0320 	orrmi.w	r3, r3, #32
 800d878:	6023      	strmi	r3, [r4, #0]
 800d87a:	b11d      	cbz	r5, 800d884 <_printf_i+0x1a0>
 800d87c:	2310      	movs	r3, #16
 800d87e:	e7ab      	b.n	800d7d8 <_printf_i+0xf4>
 800d880:	4826      	ldr	r0, [pc, #152]	@ (800d91c <_printf_i+0x238>)
 800d882:	e7e9      	b.n	800d858 <_printf_i+0x174>
 800d884:	6823      	ldr	r3, [r4, #0]
 800d886:	f023 0320 	bic.w	r3, r3, #32
 800d88a:	6023      	str	r3, [r4, #0]
 800d88c:	e7f6      	b.n	800d87c <_printf_i+0x198>
 800d88e:	4616      	mov	r6, r2
 800d890:	e7bd      	b.n	800d80e <_printf_i+0x12a>
 800d892:	6833      	ldr	r3, [r6, #0]
 800d894:	6825      	ldr	r5, [r4, #0]
 800d896:	1d18      	adds	r0, r3, #4
 800d898:	6961      	ldr	r1, [r4, #20]
 800d89a:	6030      	str	r0, [r6, #0]
 800d89c:	062e      	lsls	r6, r5, #24
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	d501      	bpl.n	800d8a6 <_printf_i+0x1c2>
 800d8a2:	6019      	str	r1, [r3, #0]
 800d8a4:	e002      	b.n	800d8ac <_printf_i+0x1c8>
 800d8a6:	0668      	lsls	r0, r5, #25
 800d8a8:	d5fb      	bpl.n	800d8a2 <_printf_i+0x1be>
 800d8aa:	8019      	strh	r1, [r3, #0]
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	4616      	mov	r6, r2
 800d8b0:	6123      	str	r3, [r4, #16]
 800d8b2:	e7bc      	b.n	800d82e <_printf_i+0x14a>
 800d8b4:	6833      	ldr	r3, [r6, #0]
 800d8b6:	2100      	movs	r1, #0
 800d8b8:	1d1a      	adds	r2, r3, #4
 800d8ba:	6032      	str	r2, [r6, #0]
 800d8bc:	681e      	ldr	r6, [r3, #0]
 800d8be:	6862      	ldr	r2, [r4, #4]
 800d8c0:	4630      	mov	r0, r6
 800d8c2:	f000 f877 	bl	800d9b4 <memchr>
 800d8c6:	b108      	cbz	r0, 800d8cc <_printf_i+0x1e8>
 800d8c8:	1b80      	subs	r0, r0, r6
 800d8ca:	6060      	str	r0, [r4, #4]
 800d8cc:	6863      	ldr	r3, [r4, #4]
 800d8ce:	6123      	str	r3, [r4, #16]
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d8d6:	e7aa      	b.n	800d82e <_printf_i+0x14a>
 800d8d8:	4632      	mov	r2, r6
 800d8da:	4649      	mov	r1, r9
 800d8dc:	4640      	mov	r0, r8
 800d8de:	6923      	ldr	r3, [r4, #16]
 800d8e0:	47d0      	blx	sl
 800d8e2:	3001      	adds	r0, #1
 800d8e4:	d0ad      	beq.n	800d842 <_printf_i+0x15e>
 800d8e6:	6823      	ldr	r3, [r4, #0]
 800d8e8:	079b      	lsls	r3, r3, #30
 800d8ea:	d413      	bmi.n	800d914 <_printf_i+0x230>
 800d8ec:	68e0      	ldr	r0, [r4, #12]
 800d8ee:	9b03      	ldr	r3, [sp, #12]
 800d8f0:	4298      	cmp	r0, r3
 800d8f2:	bfb8      	it	lt
 800d8f4:	4618      	movlt	r0, r3
 800d8f6:	e7a6      	b.n	800d846 <_printf_i+0x162>
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	4632      	mov	r2, r6
 800d8fc:	4649      	mov	r1, r9
 800d8fe:	4640      	mov	r0, r8
 800d900:	47d0      	blx	sl
 800d902:	3001      	adds	r0, #1
 800d904:	d09d      	beq.n	800d842 <_printf_i+0x15e>
 800d906:	3501      	adds	r5, #1
 800d908:	68e3      	ldr	r3, [r4, #12]
 800d90a:	9903      	ldr	r1, [sp, #12]
 800d90c:	1a5b      	subs	r3, r3, r1
 800d90e:	42ab      	cmp	r3, r5
 800d910:	dcf2      	bgt.n	800d8f8 <_printf_i+0x214>
 800d912:	e7eb      	b.n	800d8ec <_printf_i+0x208>
 800d914:	2500      	movs	r5, #0
 800d916:	f104 0619 	add.w	r6, r4, #25
 800d91a:	e7f5      	b.n	800d908 <_printf_i+0x224>
 800d91c:	0800dd50 	.word	0x0800dd50
 800d920:	0800dd61 	.word	0x0800dd61

0800d924 <_realloc_r>:
 800d924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d928:	4680      	mov	r8, r0
 800d92a:	4615      	mov	r5, r2
 800d92c:	460c      	mov	r4, r1
 800d92e:	b921      	cbnz	r1, 800d93a <_realloc_r+0x16>
 800d930:	4611      	mov	r1, r2
 800d932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d936:	f7ff bb67 	b.w	800d008 <_malloc_r>
 800d93a:	b92a      	cbnz	r2, 800d948 <_realloc_r+0x24>
 800d93c:	f7ff fcc0 	bl	800d2c0 <_free_r>
 800d940:	2400      	movs	r4, #0
 800d942:	4620      	mov	r0, r4
 800d944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d948:	f000 f850 	bl	800d9ec <_malloc_usable_size_r>
 800d94c:	4285      	cmp	r5, r0
 800d94e:	4606      	mov	r6, r0
 800d950:	d802      	bhi.n	800d958 <_realloc_r+0x34>
 800d952:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d956:	d8f4      	bhi.n	800d942 <_realloc_r+0x1e>
 800d958:	4629      	mov	r1, r5
 800d95a:	4640      	mov	r0, r8
 800d95c:	f7ff fb54 	bl	800d008 <_malloc_r>
 800d960:	4607      	mov	r7, r0
 800d962:	2800      	cmp	r0, #0
 800d964:	d0ec      	beq.n	800d940 <_realloc_r+0x1c>
 800d966:	42b5      	cmp	r5, r6
 800d968:	462a      	mov	r2, r5
 800d96a:	4621      	mov	r1, r4
 800d96c:	bf28      	it	cs
 800d96e:	4632      	movcs	r2, r6
 800d970:	f000 f82e 	bl	800d9d0 <memcpy>
 800d974:	4621      	mov	r1, r4
 800d976:	4640      	mov	r0, r8
 800d978:	f7ff fca2 	bl	800d2c0 <_free_r>
 800d97c:	463c      	mov	r4, r7
 800d97e:	e7e0      	b.n	800d942 <_realloc_r+0x1e>

0800d980 <memmove>:
 800d980:	4288      	cmp	r0, r1
 800d982:	b510      	push	{r4, lr}
 800d984:	eb01 0402 	add.w	r4, r1, r2
 800d988:	d902      	bls.n	800d990 <memmove+0x10>
 800d98a:	4284      	cmp	r4, r0
 800d98c:	4623      	mov	r3, r4
 800d98e:	d807      	bhi.n	800d9a0 <memmove+0x20>
 800d990:	1e43      	subs	r3, r0, #1
 800d992:	42a1      	cmp	r1, r4
 800d994:	d008      	beq.n	800d9a8 <memmove+0x28>
 800d996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d99a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d99e:	e7f8      	b.n	800d992 <memmove+0x12>
 800d9a0:	4601      	mov	r1, r0
 800d9a2:	4402      	add	r2, r0
 800d9a4:	428a      	cmp	r2, r1
 800d9a6:	d100      	bne.n	800d9aa <memmove+0x2a>
 800d9a8:	bd10      	pop	{r4, pc}
 800d9aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d9ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d9b2:	e7f7      	b.n	800d9a4 <memmove+0x24>

0800d9b4 <memchr>:
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	b510      	push	{r4, lr}
 800d9b8:	b2c9      	uxtb	r1, r1
 800d9ba:	4402      	add	r2, r0
 800d9bc:	4293      	cmp	r3, r2
 800d9be:	4618      	mov	r0, r3
 800d9c0:	d101      	bne.n	800d9c6 <memchr+0x12>
 800d9c2:	2000      	movs	r0, #0
 800d9c4:	e003      	b.n	800d9ce <memchr+0x1a>
 800d9c6:	7804      	ldrb	r4, [r0, #0]
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	428c      	cmp	r4, r1
 800d9cc:	d1f6      	bne.n	800d9bc <memchr+0x8>
 800d9ce:	bd10      	pop	{r4, pc}

0800d9d0 <memcpy>:
 800d9d0:	440a      	add	r2, r1
 800d9d2:	4291      	cmp	r1, r2
 800d9d4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d9d8:	d100      	bne.n	800d9dc <memcpy+0xc>
 800d9da:	4770      	bx	lr
 800d9dc:	b510      	push	{r4, lr}
 800d9de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9e2:	4291      	cmp	r1, r2
 800d9e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9e8:	d1f9      	bne.n	800d9de <memcpy+0xe>
 800d9ea:	bd10      	pop	{r4, pc}

0800d9ec <_malloc_usable_size_r>:
 800d9ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9f0:	1f18      	subs	r0, r3, #4
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	bfbc      	itt	lt
 800d9f6:	580b      	ldrlt	r3, [r1, r0]
 800d9f8:	18c0      	addlt	r0, r0, r3
 800d9fa:	4770      	bx	lr

0800d9fc <_init>:
 800d9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9fe:	bf00      	nop
 800da00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da02:	bc08      	pop	{r3}
 800da04:	469e      	mov	lr, r3
 800da06:	4770      	bx	lr

0800da08 <_fini>:
 800da08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da0a:	bf00      	nop
 800da0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da0e:	bc08      	pop	{r3}
 800da10:	469e      	mov	lr, r3
 800da12:	4770      	bx	lr
