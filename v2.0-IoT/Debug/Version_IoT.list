
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c028  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df8  0800c20c  0800c20c  0001c20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d004  0800d004  000209a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d004  0800d004  000209a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d004  0800d004  000209a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d004  0800d004  0001d004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d008  0800d008  0001d008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009a0  20000000  0800d00c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  200009a0  0800d9ac  000209a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f14  0800d9ac  00020f14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000209c9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e8e  00000000  00000000  00020a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002692  00000000  00000000  0003389a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001140  00000000  00000000  00035f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000da5  00000000  00000000  00037070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001add0  00000000  00000000  00037e15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017df7  00000000  00000000  00052be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fb98  00000000  00000000  0006a9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004f6c  00000000  00000000  0010a574  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010f4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200009a0 	.word	0x200009a0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800c1f4 	.word	0x0800c1f4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200009a4 	.word	0x200009a4
 8000220:	0800c1f4 	.word	0x0800c1f4

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:
#include "ESP8266.h"
#include "WifiData.h"


void ESP8266_Init(UART_HandleTypeDef *huart1) {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b09c      	sub	sp, #112	; 0x70
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	sprintf(Tx_buffer, "AT+RESTORE\r\n");
 800023c:	4958      	ldr	r1, [pc, #352]	; (80003a0 <ESP8266_Init+0x16c>)
 800023e:	4859      	ldr	r0, [pc, #356]	; (80003a4 <ESP8266_Init+0x170>)
 8000240:	f00b fbca 	bl	800b9d8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) Tx_buffer, strlen(Tx_buffer));
 8000244:	4857      	ldr	r0, [pc, #348]	; (80003a4 <ESP8266_Init+0x170>)
 8000246:	f7ff ffed 	bl	8000224 <strlen>
 800024a:	4603      	mov	r3, r0
 800024c:	b29b      	uxth	r3, r3
 800024e:	461a      	mov	r2, r3
 8000250:	4954      	ldr	r1, [pc, #336]	; (80003a4 <ESP8266_Init+0x170>)
 8000252:	6878      	ldr	r0, [r7, #4]
 8000254:	f00a fd98 	bl	800ad88 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000258:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800025c:	f007 fcc8 	bl	8007bf0 <HAL_Delay>

	sprintf(Tx_buffer, "AT+RST\r\n");
 8000260:	4951      	ldr	r1, [pc, #324]	; (80003a8 <ESP8266_Init+0x174>)
 8000262:	4850      	ldr	r0, [pc, #320]	; (80003a4 <ESP8266_Init+0x170>)
 8000264:	f00b fbb8 	bl	800b9d8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) Tx_buffer, strlen(Tx_buffer));
 8000268:	484e      	ldr	r0, [pc, #312]	; (80003a4 <ESP8266_Init+0x170>)
 800026a:	f7ff ffdb 	bl	8000224 <strlen>
 800026e:	4603      	mov	r3, r0
 8000270:	b29b      	uxth	r3, r3
 8000272:	461a      	mov	r2, r3
 8000274:	494b      	ldr	r1, [pc, #300]	; (80003a4 <ESP8266_Init+0x170>)
 8000276:	6878      	ldr	r0, [r7, #4]
 8000278:	f00a fd86 	bl	800ad88 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 800027c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000280:	f007 fcb6 	bl	8007bf0 <HAL_Delay>

	sprintf(Tx_buffer, "AT\r\n");
 8000284:	4949      	ldr	r1, [pc, #292]	; (80003ac <ESP8266_Init+0x178>)
 8000286:	4847      	ldr	r0, [pc, #284]	; (80003a4 <ESP8266_Init+0x170>)
 8000288:	f00b fba6 	bl	800b9d8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) Tx_buffer, strlen(Tx_buffer));
 800028c:	4845      	ldr	r0, [pc, #276]	; (80003a4 <ESP8266_Init+0x170>)
 800028e:	f7ff ffc9 	bl	8000224 <strlen>
 8000292:	4603      	mov	r3, r0
 8000294:	b29b      	uxth	r3, r3
 8000296:	461a      	mov	r2, r3
 8000298:	4942      	ldr	r1, [pc, #264]	; (80003a4 <ESP8266_Init+0x170>)
 800029a:	6878      	ldr	r0, [r7, #4]
 800029c:	f00a fd74 	bl	800ad88 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002a4:	f007 fca4 	bl	8007bf0 <HAL_Delay>

	sprintf(Tx_buffer, "AT+CWMODE=1\r\n");
 80002a8:	4941      	ldr	r1, [pc, #260]	; (80003b0 <ESP8266_Init+0x17c>)
 80002aa:	483e      	ldr	r0, [pc, #248]	; (80003a4 <ESP8266_Init+0x170>)
 80002ac:	f00b fb94 	bl	800b9d8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) Tx_buffer, strlen(Tx_buffer));
 80002b0:	483c      	ldr	r0, [pc, #240]	; (80003a4 <ESP8266_Init+0x170>)
 80002b2:	f7ff ffb7 	bl	8000224 <strlen>
 80002b6:	4603      	mov	r3, r0
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	461a      	mov	r2, r3
 80002bc:	4939      	ldr	r1, [pc, #228]	; (80003a4 <ESP8266_Init+0x170>)
 80002be:	6878      	ldr	r0, [r7, #4]
 80002c0:	f00a fd62 	bl	800ad88 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002c8:	f007 fc92 	bl	8007bf0 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 80002cc:	f107 030c 	add.w	r3, r7, #12
 80002d0:	4a38      	ldr	r2, [pc, #224]	; (80003b4 <ESP8266_Init+0x180>)
 80002d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d4:	c303      	stmia	r3!, {r0, r1}
 80002d6:	801a      	strh	r2, [r3, #0]
 80002d8:	3302      	adds	r3, #2
 80002da:	0c12      	lsrs	r2, r2, #16
 80002dc:	701a      	strb	r2, [r3, #0]
	strcat(str, Wifi_name);
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	4618      	mov	r0, r3
 80002e4:	f7ff ff9e 	bl	8000224 <strlen>
 80002e8:	4603      	mov	r3, r0
 80002ea:	461a      	mov	r2, r3
 80002ec:	f107 030c 	add.w	r3, r7, #12
 80002f0:	4413      	add	r3, r2
 80002f2:	4a31      	ldr	r2, [pc, #196]	; (80003b8 <ESP8266_Init+0x184>)
 80002f4:	461d      	mov	r5, r3
 80002f6:	4614      	mov	r4, r2
 80002f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002fa:	6028      	str	r0, [r5, #0]
 80002fc:	6069      	str	r1, [r5, #4]
 80002fe:	60aa      	str	r2, [r5, #8]
 8000300:	60eb      	str	r3, [r5, #12]
 8000302:	cc03      	ldmia	r4!, {r0, r1}
 8000304:	6128      	str	r0, [r5, #16]
 8000306:	6169      	str	r1, [r5, #20]
 8000308:	8823      	ldrh	r3, [r4, #0]
 800030a:	78a2      	ldrb	r2, [r4, #2]
 800030c:	832b      	strh	r3, [r5, #24]
 800030e:	4613      	mov	r3, r2
 8000310:	76ab      	strb	r3, [r5, #26]
	strcat(str, "\",\"");
 8000312:	f107 030c 	add.w	r3, r7, #12
 8000316:	4618      	mov	r0, r3
 8000318:	f7ff ff84 	bl	8000224 <strlen>
 800031c:	4603      	mov	r3, r0
 800031e:	461a      	mov	r2, r3
 8000320:	f107 030c 	add.w	r3, r7, #12
 8000324:	4413      	add	r3, r2
 8000326:	4a25      	ldr	r2, [pc, #148]	; (80003bc <ESP8266_Init+0x188>)
 8000328:	6810      	ldr	r0, [r2, #0]
 800032a:	6018      	str	r0, [r3, #0]
	strcat(str, Wifi_pass);
 800032c:	f107 030c 	add.w	r3, r7, #12
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ff77 	bl	8000224 <strlen>
 8000336:	4603      	mov	r3, r0
 8000338:	461a      	mov	r2, r3
 800033a:	f107 030c 	add.w	r3, r7, #12
 800033e:	4413      	add	r3, r2
 8000340:	4a1f      	ldr	r2, [pc, #124]	; (80003c0 <ESP8266_Init+0x18c>)
 8000342:	461c      	mov	r4, r3
 8000344:	4613      	mov	r3, r2
 8000346:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000348:	6020      	str	r0, [r4, #0]
 800034a:	6061      	str	r1, [r4, #4]
 800034c:	60a2      	str	r2, [r4, #8]
 800034e:	881b      	ldrh	r3, [r3, #0]
 8000350:	81a3      	strh	r3, [r4, #12]
	strcat(str, "\"\r\n");
 8000352:	f107 030c 	add.w	r3, r7, #12
 8000356:	4618      	mov	r0, r3
 8000358:	f7ff ff64 	bl	8000224 <strlen>
 800035c:	4603      	mov	r3, r0
 800035e:	461a      	mov	r2, r3
 8000360:	f107 030c 	add.w	r3, r7, #12
 8000364:	4413      	add	r3, r2
 8000366:	4a17      	ldr	r2, [pc, #92]	; (80003c4 <ESP8266_Init+0x190>)
 8000368:	6810      	ldr	r0, [r2, #0]
 800036a:	6018      	str	r0, [r3, #0]
	sprintf(Tx_buffer, "%s", str);
 800036c:	f107 030c 	add.w	r3, r7, #12
 8000370:	461a      	mov	r2, r3
 8000372:	4915      	ldr	r1, [pc, #84]	; (80003c8 <ESP8266_Init+0x194>)
 8000374:	480b      	ldr	r0, [pc, #44]	; (80003a4 <ESP8266_Init+0x170>)
 8000376:	f00b fb2f 	bl	800b9d8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) Tx_buffer, strlen(Tx_buffer));
 800037a:	480a      	ldr	r0, [pc, #40]	; (80003a4 <ESP8266_Init+0x170>)
 800037c:	f7ff ff52 	bl	8000224 <strlen>
 8000380:	4603      	mov	r3, r0
 8000382:	b29b      	uxth	r3, r3
 8000384:	461a      	mov	r2, r3
 8000386:	4907      	ldr	r1, [pc, #28]	; (80003a4 <ESP8266_Init+0x170>)
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	f00a fcfd 	bl	800ad88 <HAL_UART_Transmit_IT>
	HAL_Delay(6000);
 800038e:	f241 7070 	movw	r0, #6000	; 0x1770
 8000392:	f007 fc2d 	bl	8007bf0 <HAL_Delay>
}
 8000396:	bf00      	nop
 8000398:	3770      	adds	r7, #112	; 0x70
 800039a:	46bd      	mov	sp, r7
 800039c:	bdb0      	pop	{r4, r5, r7, pc}
 800039e:	bf00      	nop
 80003a0:	0800c20c 	.word	0x0800c20c
 80003a4:	200009bc 	.word	0x200009bc
 80003a8:	0800c21c 	.word	0x0800c21c
 80003ac:	0800c228 	.word	0x0800c228
 80003b0:	0800c230 	.word	0x0800c230
 80003b4:	0800c240 	.word	0x0800c240
 80003b8:	0800c24c 	.word	0x0800c24c
 80003bc:	0800c268 	.word	0x0800c268
 80003c0:	0800c26c 	.word	0x0800c26c
 80003c4:	0800c27c 	.word	0x0800c27c
 80003c8:	0800c280 	.word	0x0800c280

080003cc <SendMachineData>:

void SendMachineData(UART_HandleTypeDef *huart1) {
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b0d0      	sub	sp, #320	; 0x140
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80003d6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80003da:	6018      	str	r0, [r3, #0]
	char local_txA[250];
	char local_txB[50];
	int len;

	sprintf(Tx_buffer, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 80003dc:	4a2c      	ldr	r2, [pc, #176]	; (8000490 <SendMachineData+0xc4>)
 80003de:	492d      	ldr	r1, [pc, #180]	; (8000494 <SendMachineData+0xc8>)
 80003e0:	482d      	ldr	r0, [pc, #180]	; (8000498 <SendMachineData+0xcc>)
 80003e2:	f00b faf9 	bl	800b9d8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) Tx_buffer, strlen(Tx_buffer));
 80003e6:	482c      	ldr	r0, [pc, #176]	; (8000498 <SendMachineData+0xcc>)
 80003e8:	f7ff ff1c 	bl	8000224 <strlen>
 80003ec:	4603      	mov	r3, r0
 80003ee:	b29a      	uxth	r2, r3
 80003f0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80003f4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80003f8:	4927      	ldr	r1, [pc, #156]	; (8000498 <SendMachineData+0xcc>)
 80003fa:	6818      	ldr	r0, [r3, #0]
 80003fc:	f00a fcc4 	bl	800ad88 <HAL_UART_Transmit_IT>
	HAL_Delay(5000);
 8000400:	f241 3088 	movw	r0, #5000	; 0x1388
 8000404:	f007 fbf4 	bl	8007bf0 <HAL_Delay>

	sprintf(local_txA,
 8000408:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800040c:	4a23      	ldr	r2, [pc, #140]	; (800049c <SendMachineData+0xd0>)
 800040e:	4924      	ldr	r1, [pc, #144]	; (80004a0 <SendMachineData+0xd4>)
 8000410:	4618      	mov	r0, r3
 8000412:	f00b fae1 	bl	800b9d8 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=12345&machineData=111001011021210101001210000102012345678923456 HTTP/1.0\r\nHost: %s\r\n\r\n", Server2);
	len = strlen(local_txA);
 8000416:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff02 	bl	8000224 <strlen>
 8000420:	4603      	mov	r3, r0
 8000422:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000426:	f107 030c 	add.w	r3, r7, #12
 800042a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800042e:	491d      	ldr	r1, [pc, #116]	; (80004a4 <SendMachineData+0xd8>)
 8000430:	4618      	mov	r0, r3
 8000432:	f00b fad1 	bl	800b9d8 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000436:	f107 030c 	add.w	r3, r7, #12
 800043a:	4618      	mov	r0, r3
 800043c:	f7ff fef2 	bl	8000224 <strlen>
 8000440:	4603      	mov	r3, r0
 8000442:	b29a      	uxth	r2, r3
 8000444:	f107 010c 	add.w	r1, r7, #12
 8000448:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800044c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000450:	6818      	ldr	r0, [r3, #0]
 8000452:	f00a fc99 	bl	800ad88 <HAL_UART_Transmit_IT>
	HAL_Delay(5000);
 8000456:	f241 3088 	movw	r0, #5000	; 0x1388
 800045a:	f007 fbc9 	bl	8007bf0 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800045e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000462:	4618      	mov	r0, r3
 8000464:	f7ff fede 	bl	8000224 <strlen>
 8000468:	4603      	mov	r3, r0
 800046a:	b29a      	uxth	r2, r3
 800046c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000470:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000474:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8000478:	6818      	ldr	r0, [r3, #0]
 800047a:	f00a fc85 	bl	800ad88 <HAL_UART_Transmit_IT>
	HAL_Delay(5000);
 800047e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000482:	f007 fbb5 	bl	8007bf0 <HAL_Delay>
}
 8000486:	bf00      	nop
 8000488:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	0800c284 	.word	0x0800c284
 8000494:	0800c294 	.word	0x0800c294
 8000498:	200009bc 	.word	0x200009bc
 800049c:	0800c2b4 	.word	0x0800c2b4
 80004a0:	0800c2c8 	.word	0x0800c2c8
 80004a4:	0800c350 	.word	0x0800c350

080004a8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af02      	add	r7, sp, #8
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	f023 030f 	bic.w	r3, r3, #15
 80004b8:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	011b      	lsls	r3, r3, #4
 80004be:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004c0:	7b7b      	ldrb	r3, [r7, #13]
 80004c2:	f043 030c 	orr.w	r3, r3, #12
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004ca:	7b7b      	ldrb	r3, [r7, #13]
 80004cc:	f043 0308 	orr.w	r3, r3, #8
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004d4:	7b3b      	ldrb	r3, [r7, #12]
 80004d6:	f043 030c 	orr.w	r3, r3, #12
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004de:	7b3b      	ldrb	r3, [r7, #12]
 80004e0:	f043 0308 	orr.w	r3, r3, #8
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80004e8:	bf00      	nop
 80004ea:	4825      	ldr	r0, [pc, #148]	; (8000580 <lcd_send_cmd+0xd8>)
 80004ec:	f008 ff79 	bl	80093e2 <HAL_I2C_GetError>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b04      	cmp	r3, #4
 80004f4:	d0f9      	beq.n	80004ea <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80004f6:	bf00      	nop
 80004f8:	4821      	ldr	r0, [pc, #132]	; (8000580 <lcd_send_cmd+0xd8>)
 80004fa:	f008 ff65 	bl	80093c8 <HAL_I2C_GetState>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b20      	cmp	r3, #32
 8000502:	d1f9      	bne.n	80004f8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000504:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <lcd_send_cmd+0xdc>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d116      	bne.n	800053a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800050c:	2300      	movs	r3, #0
 800050e:	73fb      	strb	r3, [r7, #15]
 8000510:	e00f      	b.n	8000532 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8000512:	7bfb      	ldrb	r3, [r7, #15]
 8000514:	3310      	adds	r3, #16
 8000516:	443b      	add	r3, r7
 8000518:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	f022 0208 	bic.w	r2, r2, #8
 8000522:	b2d2      	uxtb	r2, r2
 8000524:	3310      	adds	r3, #16
 8000526:	443b      	add	r3, r7
 8000528:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	3301      	adds	r3, #1
 8000530:	73fb      	strb	r3, [r7, #15]
 8000532:	7bfb      	ldrb	r3, [r7, #15]
 8000534:	2b03      	cmp	r3, #3
 8000536:	d9ec      	bls.n	8000512 <lcd_send_cmd+0x6a>
 8000538:	e015      	b.n	8000566 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800053a:	2300      	movs	r3, #0
 800053c:	73bb      	strb	r3, [r7, #14]
 800053e:	e00f      	b.n	8000560 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	3310      	adds	r3, #16
 8000544:	443b      	add	r3, r7
 8000546:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800054a:	7bbb      	ldrb	r3, [r7, #14]
 800054c:	f042 0208 	orr.w	r2, r2, #8
 8000550:	b2d2      	uxtb	r2, r2
 8000552:	3310      	adds	r3, #16
 8000554:	443b      	add	r3, r7
 8000556:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800055a:	7bbb      	ldrb	r3, [r7, #14]
 800055c:	3301      	adds	r3, #1
 800055e:	73bb      	strb	r3, [r7, #14]
 8000560:	7bbb      	ldrb	r3, [r7, #14]
 8000562:	2b03      	cmp	r3, #3
 8000564:	d9ec      	bls.n	8000540 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000566:	f107 0208 	add.w	r2, r7, #8
 800056a:	2364      	movs	r3, #100	; 0x64
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2304      	movs	r3, #4
 8000570:	214e      	movs	r1, #78	; 0x4e
 8000572:	4803      	ldr	r0, [pc, #12]	; (8000580 <lcd_send_cmd+0xd8>)
 8000574:	f008 fac8 	bl	8008b08 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000578:	bf00      	nop
 800057a:	3710      	adds	r7, #16
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000ce0 	.word	0x20000ce0
 8000584:	20000ab6 	.word	0x20000ab6

08000588 <lcd_send_data>:

void lcd_send_data (char data) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b086      	sub	sp, #24
 800058c:	af02      	add	r7, sp, #8
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	f023 030f 	bic.w	r3, r3, #15
 8000598:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	011b      	lsls	r3, r3, #4
 800059e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80005a0:	7b7b      	ldrb	r3, [r7, #13]
 80005a2:	f043 030d 	orr.w	r3, r3, #13
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80005aa:	7b7b      	ldrb	r3, [r7, #13]
 80005ac:	f043 0309 	orr.w	r3, r3, #9
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80005b4:	7b3b      	ldrb	r3, [r7, #12]
 80005b6:	f043 030d 	orr.w	r3, r3, #13
 80005ba:	b2db      	uxtb	r3, r3
 80005bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80005be:	7b3b      	ldrb	r3, [r7, #12]
 80005c0:	f043 0309 	orr.w	r3, r3, #9
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005c8:	bf00      	nop
 80005ca:	4825      	ldr	r0, [pc, #148]	; (8000660 <lcd_send_data+0xd8>)
 80005cc:	f008 ff09 	bl	80093e2 <HAL_I2C_GetError>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b04      	cmp	r3, #4
 80005d4:	d0f9      	beq.n	80005ca <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80005d6:	bf00      	nop
 80005d8:	4821      	ldr	r0, [pc, #132]	; (8000660 <lcd_send_data+0xd8>)
 80005da:	f008 fef5 	bl	80093c8 <HAL_I2C_GetState>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b20      	cmp	r3, #32
 80005e2:	d1f9      	bne.n	80005d8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <lcd_send_data+0xdc>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d116      	bne.n	800061a <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80005ec:	2300      	movs	r3, #0
 80005ee:	73fb      	strb	r3, [r7, #15]
 80005f0:	e00f      	b.n	8000612 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	3310      	adds	r3, #16
 80005f6:	443b      	add	r3, r7
 80005f8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	f022 0208 	bic.w	r2, r2, #8
 8000602:	b2d2      	uxtb	r2, r2
 8000604:	3310      	adds	r3, #16
 8000606:	443b      	add	r3, r7
 8000608:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	3301      	adds	r3, #1
 8000610:	73fb      	strb	r3, [r7, #15]
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	2b03      	cmp	r3, #3
 8000616:	d9ec      	bls.n	80005f2 <lcd_send_data+0x6a>
 8000618:	e015      	b.n	8000646 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800061a:	2300      	movs	r3, #0
 800061c:	73bb      	strb	r3, [r7, #14]
 800061e:	e00f      	b.n	8000640 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8000620:	7bbb      	ldrb	r3, [r7, #14]
 8000622:	3310      	adds	r3, #16
 8000624:	443b      	add	r3, r7
 8000626:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	f042 0208 	orr.w	r2, r2, #8
 8000630:	b2d2      	uxtb	r2, r2
 8000632:	3310      	adds	r3, #16
 8000634:	443b      	add	r3, r7
 8000636:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800063a:	7bbb      	ldrb	r3, [r7, #14]
 800063c:	3301      	adds	r3, #1
 800063e:	73bb      	strb	r3, [r7, #14]
 8000640:	7bbb      	ldrb	r3, [r7, #14]
 8000642:	2b03      	cmp	r3, #3
 8000644:	d9ec      	bls.n	8000620 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000646:	f107 0208 	add.w	r2, r7, #8
 800064a:	2364      	movs	r3, #100	; 0x64
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2304      	movs	r3, #4
 8000650:	214e      	movs	r1, #78	; 0x4e
 8000652:	4803      	ldr	r0, [pc, #12]	; (8000660 <lcd_send_data+0xd8>)
 8000654:	f008 fa58 	bl	8008b08 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000658:	bf00      	nop
 800065a:	3710      	adds	r7, #16
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000ce0 	.word	0x20000ce0
 8000664:	20000ab6 	.word	0x20000ab6

08000668 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000670:	e006      	b.n	8000680 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	1c5a      	adds	r2, r3, #1
 8000676:	607a      	str	r2, [r7, #4]
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff ff84 	bl	8000588 <lcd_send_data>
	while (*str) {
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d1f4      	bne.n	8000672 <lcd_send_string+0xa>
	}
}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <lcd_init>:

void lcd_init (void) {
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000696:	2002      	movs	r0, #2
 8000698:	f7ff ff06 	bl	80004a8 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800069c:	2028      	movs	r0, #40	; 0x28
 800069e:	f7ff ff03 	bl	80004a8 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80006a2:	200c      	movs	r0, #12
 80006a4:	f7ff ff00 	bl	80004a8 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80006a8:	2080      	movs	r0, #128	; 0x80
 80006aa:	f7ff fefd 	bl	80004a8 <lcd_send_cmd>
	lcd_backlight(1);
 80006ae:	2001      	movs	r0, #1
 80006b0:	f000 f840 	bl	8000734 <lcd_backlight>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	460a      	mov	r2, r1
 80006c2:	71fb      	strb	r3, [r7, #7]
 80006c4:	4613      	mov	r3, r2
 80006c6:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 80006c8:	79fb      	ldrb	r3, [r7, #7]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d106      	bne.n	80006dc <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	337f      	adds	r3, #127	; 0x7f
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff fee7 	bl	80004a8 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80006da:	e008      	b.n	80006ee <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	2b02      	cmp	r3, #2
 80006e0:	d105      	bne.n	80006ee <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80006e2:	79bb      	ldrb	r3, [r7, #6]
 80006e4:	3b41      	subs	r3, #65	; 0x41
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff fedd 	bl	80004a8 <lcd_send_cmd>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}

080006f6 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80006f6:	b580      	push	{r7, lr}
 80006f8:	b082      	sub	sp, #8
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	4603      	mov	r3, r0
 80006fe:	603a      	str	r2, [r7, #0]
 8000700:	71fb      	strb	r3, [r7, #7]
 8000702:	460b      	mov	r3, r1
 8000704:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000706:	79ba      	ldrb	r2, [r7, #6]
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	4611      	mov	r1, r2
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ffd3 	bl	80006b8 <lcd_gotoxy>
	lcd_send_string(str);
 8000712:	6838      	ldr	r0, [r7, #0]
 8000714:	f7ff ffa8 	bl	8000668 <lcd_send_string>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <lcd_clear>:

void lcd_clear(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8000724:	2001      	movs	r0, #1
 8000726:	f7ff febf 	bl	80004a8 <lcd_send_cmd>
    HAL_Delay(2);
 800072a:	2002      	movs	r0, #2
 800072c:	f007 fa60 	bl	8007bf0 <HAL_Delay>

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}

08000734 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800073e:	4a05      	ldr	r2, [pc, #20]	; (8000754 <lcd_backlight+0x20>)
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff feaf 	bl	80004a8 <lcd_send_cmd>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000ab6 	.word	0x20000ab6

08000758 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800075c:	f3bf 8f4f 	dsb	sy
}
 8000760:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <__NVIC_SystemReset+0x24>)
 8000764:	68db      	ldr	r3, [r3, #12]
 8000766:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800076a:	4904      	ldr	r1, [pc, #16]	; (800077c <__NVIC_SystemReset+0x24>)
 800076c:	4b04      	ldr	r3, [pc, #16]	; (8000780 <__NVIC_SystemReset+0x28>)
 800076e:	4313      	orrs	r3, r2
 8000770:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000772:	f3bf 8f4f 	dsb	sy
}
 8000776:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <__NVIC_SystemReset+0x20>
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	05fa0004 	.word	0x05fa0004

08000784 <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff fd49 	bl	8000224 <strlen>
 8000792:	4603      	mov	r3, r0
 8000794:	3301      	adds	r3, #1
 8000796:	4618      	mov	r0, r3
 8000798:	f00b f828 	bl	800b7ec <malloc>
 800079c:	4603      	mov	r3, r0
 800079e:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d003      	beq.n	80007ae <copyText+0x2a>
        strcpy(result, text);
 80007a6:	6879      	ldr	r1, [r7, #4]
 80007a8:	68f8      	ldr	r0, [r7, #12]
 80007aa:	f00b f979 	bl	800baa0 <strcpy>
    }
    return result;
 80007ae:	68fb      	ldr	r3, [r7, #12]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3710      	adds	r7, #16
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <menu>:
        }
    }
    return result;
}

void menu(void) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80007bc:	2101      	movs	r1, #1
 80007be:	488f      	ldr	r0, [pc, #572]	; (80009fc <menu+0x244>)
 80007c0:	f007 ffe6 	bl	8008790 <HAL_GPIO_ReadPin>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	f040 808e 	bne.w	80008e8 <menu+0x130>
 80007cc:	4b8c      	ldr	r3, [pc, #560]	; (8000a00 <menu+0x248>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	f083 0301 	eor.w	r3, r3, #1
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	f000 8086 	beq.w	80008e8 <menu+0x130>
		menuSayac = menuSayac+1;
 80007dc:	4b89      	ldr	r3, [pc, #548]	; (8000a04 <menu+0x24c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	3301      	adds	r3, #1
 80007e2:	b2da      	uxtb	r2, r3
 80007e4:	4b87      	ldr	r3, [pc, #540]	; (8000a04 <menu+0x24c>)
 80007e6:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 32) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80007e8:	4b86      	ldr	r3, [pc, #536]	; (8000a04 <menu+0x24c>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b20      	cmp	r3, #32
 80007ee:	d102      	bne.n	80007f6 <menu+0x3e>
			menuSayac = 1;
 80007f0:	4b84      	ldr	r3, [pc, #528]	; (8000a04 <menu+0x24c>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80007f6:	4b83      	ldr	r3, [pc, #524]	; (8000a04 <menu+0x24c>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b12      	cmp	r3, #18
 80007fc:	d106      	bne.n	800080c <menu+0x54>
 80007fe:	4b82      	ldr	r3, [pc, #520]	; (8000a08 <menu+0x250>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d102      	bne.n	800080c <menu+0x54>
			menuSayac = 21;
 8000806:	4b7f      	ldr	r3, [pc, #508]	; (8000a04 <menu+0x24c>)
 8000808:	2215      	movs	r2, #21
 800080a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 800080c:	4b7d      	ldr	r3, [pc, #500]	; (8000a04 <menu+0x24c>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b08      	cmp	r3, #8
 8000812:	d106      	bne.n	8000822 <menu+0x6a>
 8000814:	4b7d      	ldr	r3, [pc, #500]	; (8000a0c <menu+0x254>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d102      	bne.n	8000822 <menu+0x6a>
			menuSayac = 16;
 800081c:	4b79      	ldr	r3, [pc, #484]	; (8000a04 <menu+0x24c>)
 800081e:	2210      	movs	r2, #16
 8000820:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8000822:	4b78      	ldr	r3, [pc, #480]	; (8000a04 <menu+0x24c>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b0d      	cmp	r3, #13
 8000828:	d106      	bne.n	8000838 <menu+0x80>
 800082a:	4b78      	ldr	r3, [pc, #480]	; (8000a0c <menu+0x254>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d102      	bne.n	8000838 <menu+0x80>
			menuSayac = 16;
 8000832:	4b74      	ldr	r3, [pc, #464]	; (8000a04 <menu+0x24c>)
 8000834:	2210      	movs	r2, #16
 8000836:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8000838:	4b72      	ldr	r3, [pc, #456]	; (8000a04 <menu+0x24c>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	2b09      	cmp	r3, #9
 800083e:	d106      	bne.n	800084e <menu+0x96>
 8000840:	4b72      	ldr	r3, [pc, #456]	; (8000a0c <menu+0x254>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b02      	cmp	r3, #2
 8000846:	d102      	bne.n	800084e <menu+0x96>
			menuSayac = 13;
 8000848:	4b6e      	ldr	r3, [pc, #440]	; (8000a04 <menu+0x24c>)
 800084a:	220d      	movs	r2, #13
 800084c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800084e:	4b6d      	ldr	r3, [pc, #436]	; (8000a04 <menu+0x24c>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b0a      	cmp	r3, #10
 8000854:	d10a      	bne.n	800086c <menu+0xb4>
 8000856:	4b6e      	ldr	r3, [pc, #440]	; (8000a10 <menu+0x258>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d003      	beq.n	8000866 <menu+0xae>
 800085e:	4b6c      	ldr	r3, [pc, #432]	; (8000a10 <menu+0x258>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b02      	cmp	r3, #2
 8000864:	d102      	bne.n	800086c <menu+0xb4>
			menuSayac = 11;
 8000866:	4b67      	ldr	r3, [pc, #412]	; (8000a04 <menu+0x24c>)
 8000868:	220b      	movs	r2, #11
 800086a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800086c:	4b65      	ldr	r3, [pc, #404]	; (8000a04 <menu+0x24c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b0c      	cmp	r3, #12
 8000872:	d10e      	bne.n	8000892 <menu+0xda>
 8000874:	4b67      	ldr	r3, [pc, #412]	; (8000a14 <menu+0x25c>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d003      	beq.n	8000884 <menu+0xcc>
 800087c:	4b65      	ldr	r3, [pc, #404]	; (8000a14 <menu+0x25c>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	2b02      	cmp	r3, #2
 8000882:	d106      	bne.n	8000892 <menu+0xda>
 8000884:	4b61      	ldr	r3, [pc, #388]	; (8000a0c <menu+0x254>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d102      	bne.n	8000892 <menu+0xda>
			menuSayac = 16;
 800088c:	4b5d      	ldr	r3, [pc, #372]	; (8000a04 <menu+0x24c>)
 800088e:	2210      	movs	r2, #16
 8000890:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8000892:	4b5c      	ldr	r3, [pc, #368]	; (8000a04 <menu+0x24c>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b0c      	cmp	r3, #12
 8000898:	d10e      	bne.n	80008b8 <menu+0x100>
 800089a:	4b5e      	ldr	r3, [pc, #376]	; (8000a14 <menu+0x25c>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d003      	beq.n	80008aa <menu+0xf2>
 80008a2:	4b5c      	ldr	r3, [pc, #368]	; (8000a14 <menu+0x25c>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b02      	cmp	r3, #2
 80008a8:	d106      	bne.n	80008b8 <menu+0x100>
 80008aa:	4b58      	ldr	r3, [pc, #352]	; (8000a0c <menu+0x254>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d102      	bne.n	80008b8 <menu+0x100>
			menuSayac = 13;
 80008b2:	4b54      	ldr	r3, [pc, #336]	; (8000a04 <menu+0x24c>)
 80008b4:	220d      	movs	r2, #13
 80008b6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80008b8:	4b52      	ldr	r3, [pc, #328]	; (8000a04 <menu+0x24c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b0f      	cmp	r3, #15
 80008be:	d106      	bne.n	80008ce <menu+0x116>
 80008c0:	4b55      	ldr	r3, [pc, #340]	; (8000a18 <menu+0x260>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d102      	bne.n	80008ce <menu+0x116>
			menuSayac = 16;
 80008c8:	4b4e      	ldr	r3, [pc, #312]	; (8000a04 <menu+0x24c>)
 80008ca:	2210      	movs	r2, #16
 80008cc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80008ce:	4b4d      	ldr	r3, [pc, #308]	; (8000a04 <menu+0x24c>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b18      	cmp	r3, #24
 80008d4:	d106      	bne.n	80008e4 <menu+0x12c>
 80008d6:	4b4c      	ldr	r3, [pc, #304]	; (8000a08 <menu+0x250>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d102      	bne.n	80008e4 <menu+0x12c>
			menuSayac = 26;
 80008de:	4b49      	ldr	r3, [pc, #292]	; (8000a04 <menu+0x24c>)
 80008e0:	221a      	movs	r2, #26
 80008e2:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80008e4:	f004 fadc 	bl	8004ea0 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80008e8:	2108      	movs	r1, #8
 80008ea:	484c      	ldr	r0, [pc, #304]	; (8000a1c <menu+0x264>)
 80008ec:	f007 ff50 	bl	8008790 <HAL_GPIO_ReadPin>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d175      	bne.n	80009e2 <menu+0x22a>
 80008f6:	4b42      	ldr	r3, [pc, #264]	; (8000a00 <menu+0x248>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	f083 0301 	eor.w	r3, r3, #1
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d06e      	beq.n	80009e2 <menu+0x22a>
		if (menuSayac <= 1) {
 8000904:	4b3f      	ldr	r3, [pc, #252]	; (8000a04 <menu+0x24c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d802      	bhi.n	8000912 <menu+0x15a>
			menuSayac = 32;     //MENÜ BÜYÜDÜKÇE DUZENLE
 800090c:	4b3d      	ldr	r3, [pc, #244]	; (8000a04 <menu+0x24c>)
 800090e:	2220      	movs	r2, #32
 8000910:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8000912:	4b3c      	ldr	r3, [pc, #240]	; (8000a04 <menu+0x24c>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	3b01      	subs	r3, #1
 8000918:	b2da      	uxtb	r2, r3
 800091a:	4b3a      	ldr	r3, [pc, #232]	; (8000a04 <menu+0x24c>)
 800091c:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800091e:	4b39      	ldr	r3, [pc, #228]	; (8000a04 <menu+0x24c>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b14      	cmp	r3, #20
 8000924:	d106      	bne.n	8000934 <menu+0x17c>
 8000926:	4b38      	ldr	r3, [pc, #224]	; (8000a08 <menu+0x250>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d102      	bne.n	8000934 <menu+0x17c>
			menuSayac = 17;
 800092e:	4b35      	ldr	r3, [pc, #212]	; (8000a04 <menu+0x24c>)
 8000930:	2211      	movs	r2, #17
 8000932:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8000934:	4b33      	ldr	r3, [pc, #204]	; (8000a04 <menu+0x24c>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b0f      	cmp	r3, #15
 800093a:	d106      	bne.n	800094a <menu+0x192>
 800093c:	4b33      	ldr	r3, [pc, #204]	; (8000a0c <menu+0x254>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d102      	bne.n	800094a <menu+0x192>
			menuSayac = 7;
 8000944:	4b2f      	ldr	r3, [pc, #188]	; (8000a04 <menu+0x24c>)
 8000946:	2207      	movs	r2, #7
 8000948:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800094a:	4b2e      	ldr	r3, [pc, #184]	; (8000a04 <menu+0x24c>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b0f      	cmp	r3, #15
 8000950:	d106      	bne.n	8000960 <menu+0x1a8>
 8000952:	4b2e      	ldr	r3, [pc, #184]	; (8000a0c <menu+0x254>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d102      	bne.n	8000960 <menu+0x1a8>
			menuSayac = 12;
 800095a:	4b2a      	ldr	r3, [pc, #168]	; (8000a04 <menu+0x24c>)
 800095c:	220c      	movs	r2, #12
 800095e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8000960:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <menu+0x24c>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b0c      	cmp	r3, #12
 8000966:	d106      	bne.n	8000976 <menu+0x1be>
 8000968:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <menu+0x254>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b02      	cmp	r3, #2
 800096e:	d102      	bne.n	8000976 <menu+0x1be>
			menuSayac = 8;
 8000970:	4b24      	ldr	r3, [pc, #144]	; (8000a04 <menu+0x24c>)
 8000972:	2208      	movs	r2, #8
 8000974:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000976:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <menu+0x24c>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b0a      	cmp	r3, #10
 800097c:	d10a      	bne.n	8000994 <menu+0x1dc>
 800097e:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <menu+0x258>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d003      	beq.n	800098e <menu+0x1d6>
 8000986:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <menu+0x258>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b02      	cmp	r3, #2
 800098c:	d102      	bne.n	8000994 <menu+0x1dc>
			menuSayac = 9;
 800098e:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <menu+0x24c>)
 8000990:	2209      	movs	r2, #9
 8000992:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8000994:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <menu+0x24c>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b0c      	cmp	r3, #12
 800099a:	d10a      	bne.n	80009b2 <menu+0x1fa>
 800099c:	4b1d      	ldr	r3, [pc, #116]	; (8000a14 <menu+0x25c>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d003      	beq.n	80009ac <menu+0x1f4>
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <menu+0x25c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d102      	bne.n	80009b2 <menu+0x1fa>
			menuSayac = 11;
 80009ac:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <menu+0x24c>)
 80009ae:	220b      	movs	r2, #11
 80009b0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80009b2:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <menu+0x24c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b0f      	cmp	r3, #15
 80009b8:	d106      	bne.n	80009c8 <menu+0x210>
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <menu+0x260>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d102      	bne.n	80009c8 <menu+0x210>
			menuSayac = 14;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <menu+0x24c>)
 80009c4:	220e      	movs	r2, #14
 80009c6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80009c8:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <menu+0x24c>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b19      	cmp	r3, #25
 80009ce:	d106      	bne.n	80009de <menu+0x226>
 80009d0:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <menu+0x250>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d102      	bne.n	80009de <menu+0x226>
			menuSayac = 23;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <menu+0x24c>)
 80009da:	2217      	movs	r2, #23
 80009dc:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80009de:	f004 fa5f 	bl	8004ea0 <bekle>
	}

	if (menuSayac == 0) {
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <menu+0x24c>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d134      	bne.n	8000a54 <menu+0x29c>
		if(dilSecim == 0) {
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <menu+0x268>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d122      	bne.n	8000a38 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80009f2:	4a0c      	ldr	r2, [pc, #48]	; (8000a24 <menu+0x26c>)
 80009f4:	2101      	movs	r1, #1
 80009f6:	2001      	movs	r0, #1
 80009f8:	e016      	b.n	8000a28 <menu+0x270>
 80009fa:	bf00      	nop
 80009fc:	40010800 	.word	0x40010800
 8000a00:	20000b52 	.word	0x20000b52
 8000a04:	20000b24 	.word	0x20000b24
 8000a08:	20000b33 	.word	0x20000b33
 8000a0c:	20000b2c 	.word	0x20000b2c
 8000a10:	20000b2d 	.word	0x20000b2d
 8000a14:	20000b2e 	.word	0x20000b2e
 8000a18:	20000b2f 	.word	0x20000b2f
 8000a1c:	40011000 	.word	0x40011000
 8000a20:	20000b44 	.word	0x20000b44
 8000a24:	0800c360 	.word	0x0800c360
 8000a28:	f7ff fe65 	bl	80006f6 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8000a2c:	4a94      	ldr	r2, [pc, #592]	; (8000c80 <menu+0x4c8>)
 8000a2e:	2101      	movs	r1, #1
 8000a30:	2002      	movs	r0, #2
 8000a32:	f7ff fe60 	bl	80006f6 <lcd_print>
 8000a36:	e00d      	b.n	8000a54 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8000a38:	4b92      	ldr	r3, [pc, #584]	; (8000c84 <menu+0x4cc>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d109      	bne.n	8000a54 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8000a40:	4a91      	ldr	r2, [pc, #580]	; (8000c88 <menu+0x4d0>)
 8000a42:	2101      	movs	r1, #1
 8000a44:	2001      	movs	r0, #1
 8000a46:	f7ff fe56 	bl	80006f6 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8000a4a:	4a90      	ldr	r2, [pc, #576]	; (8000c8c <menu+0x4d4>)
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f7ff fe51 	bl	80006f6 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8000a54:	4b8e      	ldr	r3, [pc, #568]	; (8000c90 <menu+0x4d8>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	f040 82b5 	bne.w	8000fc8 <menu+0x810>
		if(dilSecim == 0) {
 8000a5e:	4b89      	ldr	r3, [pc, #548]	; (8000c84 <menu+0x4cc>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d105      	bne.n	8000a72 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8000a66:	4a8b      	ldr	r2, [pc, #556]	; (8000c94 <menu+0x4dc>)
 8000a68:	2101      	movs	r1, #1
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f7ff fe43 	bl	80006f6 <lcd_print>
 8000a70:	e008      	b.n	8000a84 <menu+0x2cc>
		} else if(dilSecim == 1) {
 8000a72:	4b84      	ldr	r3, [pc, #528]	; (8000c84 <menu+0x4cc>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d104      	bne.n	8000a84 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8000a7a:	4a87      	ldr	r2, [pc, #540]	; (8000c98 <menu+0x4e0>)
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f7ff fe39 	bl	80006f6 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8000a84:	4b85      	ldr	r3, [pc, #532]	; (8000c9c <menu+0x4e4>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d123      	bne.n	8000ad4 <menu+0x31c>
			if(dilSecim == 0) {
 8000a8c:	4b7d      	ldr	r3, [pc, #500]	; (8000c84 <menu+0x4cc>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d105      	bne.n	8000aa0 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8000a94:	4a82      	ldr	r2, [pc, #520]	; (8000ca0 <menu+0x4e8>)
 8000a96:	2101      	movs	r1, #1
 8000a98:	2002      	movs	r0, #2
 8000a9a:	f7ff fe2c 	bl	80006f6 <lcd_print>
 8000a9e:	e008      	b.n	8000ab2 <menu+0x2fa>

			} else if(dilSecim == 1) {
 8000aa0:	4b78      	ldr	r3, [pc, #480]	; (8000c84 <menu+0x4cc>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d104      	bne.n	8000ab2 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8000aa8:	4a7e      	ldr	r2, [pc, #504]	; (8000ca4 <menu+0x4ec>)
 8000aaa:	2101      	movs	r1, #1
 8000aac:	2002      	movs	r0, #2
 8000aae:	f7ff fe22 	bl	80006f6 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8000ab2:	4a7d      	ldr	r2, [pc, #500]	; (8000ca8 <menu+0x4f0>)
 8000ab4:	210f      	movs	r1, #15
 8000ab6:	2002      	movs	r0, #2
 8000ab8:	f7ff fe1d 	bl	80006f6 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8000abc:	4b7b      	ldr	r3, [pc, #492]	; (8000cac <menu+0x4f4>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	220a      	movs	r2, #10
 8000ac2:	497b      	ldr	r1, [pc, #492]	; (8000cb0 <menu+0x4f8>)
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f00a fe8f 	bl	800b7e8 <itoa>
			lcd_print(2, 14, snum);
 8000aca:	4a79      	ldr	r2, [pc, #484]	; (8000cb0 <menu+0x4f8>)
 8000acc:	210e      	movs	r1, #14
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f7ff fe11 	bl	80006f6 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8000ad4:	4b71      	ldr	r3, [pc, #452]	; (8000c9c <menu+0x4e4>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d123      	bne.n	8000b24 <menu+0x36c>
			if(dilSecim == 0) {
 8000adc:	4b69      	ldr	r3, [pc, #420]	; (8000c84 <menu+0x4cc>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d105      	bne.n	8000af0 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8000ae4:	4a73      	ldr	r2, [pc, #460]	; (8000cb4 <menu+0x4fc>)
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	2002      	movs	r0, #2
 8000aea:	f7ff fe04 	bl	80006f6 <lcd_print>
 8000aee:	e008      	b.n	8000b02 <menu+0x34a>
			} else if(dilSecim == 1) {
 8000af0:	4b64      	ldr	r3, [pc, #400]	; (8000c84 <menu+0x4cc>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d104      	bne.n	8000b02 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8000af8:	4a6f      	ldr	r2, [pc, #444]	; (8000cb8 <menu+0x500>)
 8000afa:	2101      	movs	r1, #1
 8000afc:	2002      	movs	r0, #2
 8000afe:	f7ff fdfa 	bl	80006f6 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000b02:	4a6e      	ldr	r2, [pc, #440]	; (8000cbc <menu+0x504>)
 8000b04:	210f      	movs	r1, #15
 8000b06:	2002      	movs	r0, #2
 8000b08:	f7ff fdf5 	bl	80006f6 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8000b0c:	4b6c      	ldr	r3, [pc, #432]	; (8000cc0 <menu+0x508>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	220a      	movs	r2, #10
 8000b12:	4967      	ldr	r1, [pc, #412]	; (8000cb0 <menu+0x4f8>)
 8000b14:	4618      	mov	r0, r3
 8000b16:	f00a fe67 	bl	800b7e8 <itoa>
			lcd_print(2, 14, snum);
 8000b1a:	4a65      	ldr	r2, [pc, #404]	; (8000cb0 <menu+0x4f8>)
 8000b1c:	210e      	movs	r1, #14
 8000b1e:	2002      	movs	r0, #2
 8000b20:	f7ff fde9 	bl	80006f6 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8000b24:	4b5d      	ldr	r3, [pc, #372]	; (8000c9c <menu+0x4e4>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d123      	bne.n	8000b74 <menu+0x3bc>
			if(dilSecim == 0) {
 8000b2c:	4b55      	ldr	r3, [pc, #340]	; (8000c84 <menu+0x4cc>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d105      	bne.n	8000b40 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8000b34:	4a63      	ldr	r2, [pc, #396]	; (8000cc4 <menu+0x50c>)
 8000b36:	2101      	movs	r1, #1
 8000b38:	2002      	movs	r0, #2
 8000b3a:	f7ff fddc 	bl	80006f6 <lcd_print>
 8000b3e:	e008      	b.n	8000b52 <menu+0x39a>
			} else if(dilSecim == 1) {
 8000b40:	4b50      	ldr	r3, [pc, #320]	; (8000c84 <menu+0x4cc>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d104      	bne.n	8000b52 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8000b48:	4a5f      	ldr	r2, [pc, #380]	; (8000cc8 <menu+0x510>)
 8000b4a:	2101      	movs	r1, #1
 8000b4c:	2002      	movs	r0, #2
 8000b4e:	f7ff fdd2 	bl	80006f6 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000b52:	4a5a      	ldr	r2, [pc, #360]	; (8000cbc <menu+0x504>)
 8000b54:	210f      	movs	r1, #15
 8000b56:	2002      	movs	r0, #2
 8000b58:	f7ff fdcd 	bl	80006f6 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8000b5c:	4b5b      	ldr	r3, [pc, #364]	; (8000ccc <menu+0x514>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	220a      	movs	r2, #10
 8000b62:	4953      	ldr	r1, [pc, #332]	; (8000cb0 <menu+0x4f8>)
 8000b64:	4618      	mov	r0, r3
 8000b66:	f00a fe3f 	bl	800b7e8 <itoa>
			lcd_print(2, 14, snum);
 8000b6a:	4a51      	ldr	r2, [pc, #324]	; (8000cb0 <menu+0x4f8>)
 8000b6c:	210e      	movs	r1, #14
 8000b6e:	2002      	movs	r0, #2
 8000b70:	f7ff fdc1 	bl	80006f6 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8000b74:	4b49      	ldr	r3, [pc, #292]	; (8000c9c <menu+0x4e4>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b03      	cmp	r3, #3
 8000b7a:	d123      	bne.n	8000bc4 <menu+0x40c>
			if(dilSecim == 0) {
 8000b7c:	4b41      	ldr	r3, [pc, #260]	; (8000c84 <menu+0x4cc>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d105      	bne.n	8000b90 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8000b84:	4a52      	ldr	r2, [pc, #328]	; (8000cd0 <menu+0x518>)
 8000b86:	2101      	movs	r1, #1
 8000b88:	2002      	movs	r0, #2
 8000b8a:	f7ff fdb4 	bl	80006f6 <lcd_print>
 8000b8e:	e008      	b.n	8000ba2 <menu+0x3ea>
			} else if(dilSecim == 1) {
 8000b90:	4b3c      	ldr	r3, [pc, #240]	; (8000c84 <menu+0x4cc>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d104      	bne.n	8000ba2 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8000b98:	4a4e      	ldr	r2, [pc, #312]	; (8000cd4 <menu+0x51c>)
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	2002      	movs	r0, #2
 8000b9e:	f7ff fdaa 	bl	80006f6 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000ba2:	4a46      	ldr	r2, [pc, #280]	; (8000cbc <menu+0x504>)
 8000ba4:	210f      	movs	r1, #15
 8000ba6:	2002      	movs	r0, #2
 8000ba8:	f7ff fda5 	bl	80006f6 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8000bac:	4b4a      	ldr	r3, [pc, #296]	; (8000cd8 <menu+0x520>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	220a      	movs	r2, #10
 8000bb2:	493f      	ldr	r1, [pc, #252]	; (8000cb0 <menu+0x4f8>)
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f00a fe17 	bl	800b7e8 <itoa>
			lcd_print(2, 14, snum);
 8000bba:	4a3d      	ldr	r2, [pc, #244]	; (8000cb0 <menu+0x4f8>)
 8000bbc:	210e      	movs	r1, #14
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	f7ff fd99 	bl	80006f6 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8000bc4:	4b35      	ldr	r3, [pc, #212]	; (8000c9c <menu+0x4e4>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b04      	cmp	r3, #4
 8000bca:	d123      	bne.n	8000c14 <menu+0x45c>
			if(dilSecim == 0) {
 8000bcc:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <menu+0x4cc>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d105      	bne.n	8000be0 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8000bd4:	4a41      	ldr	r2, [pc, #260]	; (8000cdc <menu+0x524>)
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	2002      	movs	r0, #2
 8000bda:	f7ff fd8c 	bl	80006f6 <lcd_print>
 8000bde:	e008      	b.n	8000bf2 <menu+0x43a>
			} else if(dilSecim == 1) {
 8000be0:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <menu+0x4cc>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d104      	bne.n	8000bf2 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8000be8:	4a3d      	ldr	r2, [pc, #244]	; (8000ce0 <menu+0x528>)
 8000bea:	2101      	movs	r1, #1
 8000bec:	2002      	movs	r0, #2
 8000bee:	f7ff fd82 	bl	80006f6 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000bf2:	4a32      	ldr	r2, [pc, #200]	; (8000cbc <menu+0x504>)
 8000bf4:	210f      	movs	r1, #15
 8000bf6:	2002      	movs	r0, #2
 8000bf8:	f7ff fd7d 	bl	80006f6 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8000bfc:	4b39      	ldr	r3, [pc, #228]	; (8000ce4 <menu+0x52c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	220a      	movs	r2, #10
 8000c02:	492b      	ldr	r1, [pc, #172]	; (8000cb0 <menu+0x4f8>)
 8000c04:	4618      	mov	r0, r3
 8000c06:	f00a fdef 	bl	800b7e8 <itoa>
			lcd_print(2, 14, snum);
 8000c0a:	4a29      	ldr	r2, [pc, #164]	; (8000cb0 <menu+0x4f8>)
 8000c0c:	210e      	movs	r1, #14
 8000c0e:	2002      	movs	r0, #2
 8000c10:	f7ff fd71 	bl	80006f6 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8000c14:	4b21      	ldr	r3, [pc, #132]	; (8000c9c <menu+0x4e4>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b05      	cmp	r3, #5
 8000c1a:	d123      	bne.n	8000c64 <menu+0x4ac>
			if(dilSecim == 0) {
 8000c1c:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <menu+0x4cc>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d105      	bne.n	8000c30 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8000c24:	4a30      	ldr	r2, [pc, #192]	; (8000ce8 <menu+0x530>)
 8000c26:	2101      	movs	r1, #1
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f7ff fd64 	bl	80006f6 <lcd_print>
 8000c2e:	e008      	b.n	8000c42 <menu+0x48a>
			} else if(dilSecim == 1) {
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <menu+0x4cc>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d104      	bne.n	8000c42 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8000c38:	4a2c      	ldr	r2, [pc, #176]	; (8000cec <menu+0x534>)
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	f7ff fd5a 	bl	80006f6 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000c42:	4a1e      	ldr	r2, [pc, #120]	; (8000cbc <menu+0x504>)
 8000c44:	210f      	movs	r1, #15
 8000c46:	2002      	movs	r0, #2
 8000c48:	f7ff fd55 	bl	80006f6 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8000c4c:	4b28      	ldr	r3, [pc, #160]	; (8000cf0 <menu+0x538>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	220a      	movs	r2, #10
 8000c52:	4917      	ldr	r1, [pc, #92]	; (8000cb0 <menu+0x4f8>)
 8000c54:	4618      	mov	r0, r3
 8000c56:	f00a fdc7 	bl	800b7e8 <itoa>
			lcd_print(2, 14, snum);
 8000c5a:	4a15      	ldr	r2, [pc, #84]	; (8000cb0 <menu+0x4f8>)
 8000c5c:	210e      	movs	r1, #14
 8000c5e:	2002      	movs	r0, #2
 8000c60:	f7ff fd49 	bl	80006f6 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8000c64:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <menu+0x4e4>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b06      	cmp	r3, #6
 8000c6a:	d15f      	bne.n	8000d2c <menu+0x574>
			if(dilSecim == 0) {
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <menu+0x4cc>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d141      	bne.n	8000cf8 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8000c74:	4a1f      	ldr	r2, [pc, #124]	; (8000cf4 <menu+0x53c>)
 8000c76:	2101      	movs	r1, #1
 8000c78:	2002      	movs	r0, #2
 8000c7a:	f7ff fd3c 	bl	80006f6 <lcd_print>
 8000c7e:	e044      	b.n	8000d0a <menu+0x552>
 8000c80:	0800c374 	.word	0x0800c374
 8000c84:	20000b44 	.word	0x20000b44
 8000c88:	0800c388 	.word	0x0800c388
 8000c8c:	0800c39c 	.word	0x0800c39c
 8000c90:	20000b24 	.word	0x20000b24
 8000c94:	0800c3b0 	.word	0x0800c3b0
 8000c98:	0800c3c4 	.word	0x0800c3c4
 8000c9c:	20000b26 	.word	0x20000b26
 8000ca0:	0800c3d8 	.word	0x0800c3d8
 8000ca4:	0800c3e8 	.word	0x0800c3e8
 8000ca8:	0800c3f8 	.word	0x0800c3f8
 8000cac:	20000b45 	.word	0x20000b45
 8000cb0:	20000af8 	.word	0x20000af8
 8000cb4:	0800c3fc 	.word	0x0800c3fc
 8000cb8:	0800c40c 	.word	0x0800c40c
 8000cbc:	0800c41c 	.word	0x0800c41c
 8000cc0:	20000b46 	.word	0x20000b46
 8000cc4:	0800c420 	.word	0x0800c420
 8000cc8:	0800c430 	.word	0x0800c430
 8000ccc:	20000b47 	.word	0x20000b47
 8000cd0:	0800c440 	.word	0x0800c440
 8000cd4:	0800c450 	.word	0x0800c450
 8000cd8:	20000b48 	.word	0x20000b48
 8000cdc:	0800c460 	.word	0x0800c460
 8000ce0:	0800c470 	.word	0x0800c470
 8000ce4:	20000b49 	.word	0x20000b49
 8000ce8:	0800c480 	.word	0x0800c480
 8000cec:	0800c490 	.word	0x0800c490
 8000cf0:	20000b4a 	.word	0x20000b4a
 8000cf4:	0800c4a0 	.word	0x0800c4a0
			} else if(dilSecim == 1) {
 8000cf8:	4b4f      	ldr	r3, [pc, #316]	; (8000e38 <menu+0x680>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d104      	bne.n	8000d0a <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8000d00:	4a4e      	ldr	r2, [pc, #312]	; (8000e3c <menu+0x684>)
 8000d02:	2101      	movs	r1, #1
 8000d04:	2002      	movs	r0, #2
 8000d06:	f7ff fcf6 	bl	80006f6 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000d0a:	4a4d      	ldr	r2, [pc, #308]	; (8000e40 <menu+0x688>)
 8000d0c:	210f      	movs	r1, #15
 8000d0e:	2002      	movs	r0, #2
 8000d10:	f7ff fcf1 	bl	80006f6 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8000d14:	4b4b      	ldr	r3, [pc, #300]	; (8000e44 <menu+0x68c>)
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	220a      	movs	r2, #10
 8000d1a:	494b      	ldr	r1, [pc, #300]	; (8000e48 <menu+0x690>)
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f00a fd63 	bl	800b7e8 <itoa>
			lcd_print(2, 14, snum);
 8000d22:	4a49      	ldr	r2, [pc, #292]	; (8000e48 <menu+0x690>)
 8000d24:	210e      	movs	r1, #14
 8000d26:	2002      	movs	r0, #2
 8000d28:	f7ff fce5 	bl	80006f6 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8000d2c:	4b47      	ldr	r3, [pc, #284]	; (8000e4c <menu+0x694>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b07      	cmp	r3, #7
 8000d32:	d123      	bne.n	8000d7c <menu+0x5c4>
			if(dilSecim == 0) {
 8000d34:	4b40      	ldr	r3, [pc, #256]	; (8000e38 <menu+0x680>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d105      	bne.n	8000d48 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8000d3c:	4a44      	ldr	r2, [pc, #272]	; (8000e50 <menu+0x698>)
 8000d3e:	2101      	movs	r1, #1
 8000d40:	2002      	movs	r0, #2
 8000d42:	f7ff fcd8 	bl	80006f6 <lcd_print>
 8000d46:	e008      	b.n	8000d5a <menu+0x5a2>
			} else if(dilSecim == 1) {
 8000d48:	4b3b      	ldr	r3, [pc, #236]	; (8000e38 <menu+0x680>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d104      	bne.n	8000d5a <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8000d50:	4a40      	ldr	r2, [pc, #256]	; (8000e54 <menu+0x69c>)
 8000d52:	2101      	movs	r1, #1
 8000d54:	2002      	movs	r0, #2
 8000d56:	f7ff fcce 	bl	80006f6 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000d5a:	4a39      	ldr	r2, [pc, #228]	; (8000e40 <menu+0x688>)
 8000d5c:	210f      	movs	r1, #15
 8000d5e:	2002      	movs	r0, #2
 8000d60:	f7ff fcc9 	bl	80006f6 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8000d64:	4b3c      	ldr	r3, [pc, #240]	; (8000e58 <menu+0x6a0>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	220a      	movs	r2, #10
 8000d6a:	4937      	ldr	r1, [pc, #220]	; (8000e48 <menu+0x690>)
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f00a fd3b 	bl	800b7e8 <itoa>
			lcd_print(2, 14, snum);
 8000d72:	4a35      	ldr	r2, [pc, #212]	; (8000e48 <menu+0x690>)
 8000d74:	210e      	movs	r1, #14
 8000d76:	2002      	movs	r0, #2
 8000d78:	f7ff fcbd 	bl	80006f6 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8000d7c:	4b33      	ldr	r3, [pc, #204]	; (8000e4c <menu+0x694>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b08      	cmp	r3, #8
 8000d82:	d123      	bne.n	8000dcc <menu+0x614>
			if(dilSecim == 0) {
 8000d84:	4b2c      	ldr	r3, [pc, #176]	; (8000e38 <menu+0x680>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d105      	bne.n	8000d98 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8000d8c:	4a33      	ldr	r2, [pc, #204]	; (8000e5c <menu+0x6a4>)
 8000d8e:	2101      	movs	r1, #1
 8000d90:	2002      	movs	r0, #2
 8000d92:	f7ff fcb0 	bl	80006f6 <lcd_print>
 8000d96:	e008      	b.n	8000daa <menu+0x5f2>
			} else if(dilSecim == 1) {
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <menu+0x680>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d104      	bne.n	8000daa <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8000da0:	4a2f      	ldr	r2, [pc, #188]	; (8000e60 <menu+0x6a8>)
 8000da2:	2101      	movs	r1, #1
 8000da4:	2002      	movs	r0, #2
 8000da6:	f7ff fca6 	bl	80006f6 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000daa:	4a25      	ldr	r2, [pc, #148]	; (8000e40 <menu+0x688>)
 8000dac:	210f      	movs	r1, #15
 8000dae:	2002      	movs	r0, #2
 8000db0:	f7ff fca1 	bl	80006f6 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8000db4:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <menu+0x6ac>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	220a      	movs	r2, #10
 8000dba:	4923      	ldr	r1, [pc, #140]	; (8000e48 <menu+0x690>)
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f00a fd13 	bl	800b7e8 <itoa>
			lcd_print(2, 14, snum);
 8000dc2:	4a21      	ldr	r2, [pc, #132]	; (8000e48 <menu+0x690>)
 8000dc4:	210e      	movs	r1, #14
 8000dc6:	2002      	movs	r0, #2
 8000dc8:	f7ff fc95 	bl	80006f6 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8000dcc:	4b1f      	ldr	r3, [pc, #124]	; (8000e4c <menu+0x694>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b09      	cmp	r3, #9
 8000dd2:	d123      	bne.n	8000e1c <menu+0x664>
			if(dilSecim == 0) {
 8000dd4:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <menu+0x680>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d105      	bne.n	8000de8 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8000ddc:	4a22      	ldr	r2, [pc, #136]	; (8000e68 <menu+0x6b0>)
 8000dde:	2101      	movs	r1, #1
 8000de0:	2002      	movs	r0, #2
 8000de2:	f7ff fc88 	bl	80006f6 <lcd_print>
 8000de6:	e008      	b.n	8000dfa <menu+0x642>
			} else if(dilSecim == 1) {
 8000de8:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <menu+0x680>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d104      	bne.n	8000dfa <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8000df0:	4a1e      	ldr	r2, [pc, #120]	; (8000e6c <menu+0x6b4>)
 8000df2:	2101      	movs	r1, #1
 8000df4:	2002      	movs	r0, #2
 8000df6:	f7ff fc7e 	bl	80006f6 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8000dfa:	4a1d      	ldr	r2, [pc, #116]	; (8000e70 <menu+0x6b8>)
 8000dfc:	2110      	movs	r1, #16
 8000dfe:	2002      	movs	r0, #2
 8000e00:	f7ff fc79 	bl	80006f6 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <menu+0x6bc>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	220a      	movs	r2, #10
 8000e0a:	490f      	ldr	r1, [pc, #60]	; (8000e48 <menu+0x690>)
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f00a fceb 	bl	800b7e8 <itoa>
			lcd_print(2, 15, snum);
 8000e12:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <menu+0x690>)
 8000e14:	210f      	movs	r1, #15
 8000e16:	2002      	movs	r0, #2
 8000e18:	f7ff fc6d 	bl	80006f6 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <menu+0x694>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b0a      	cmp	r3, #10
 8000e22:	d134      	bne.n	8000e8e <menu+0x6d6>
			if(dilSecim == 0) {
 8000e24:	4b04      	ldr	r3, [pc, #16]	; (8000e38 <menu+0x680>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d127      	bne.n	8000e7c <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8000e2c:	4a12      	ldr	r2, [pc, #72]	; (8000e78 <menu+0x6c0>)
 8000e2e:	2101      	movs	r1, #1
 8000e30:	2002      	movs	r0, #2
 8000e32:	f7ff fc60 	bl	80006f6 <lcd_print>
 8000e36:	e02a      	b.n	8000e8e <menu+0x6d6>
 8000e38:	20000b44 	.word	0x20000b44
 8000e3c:	0800c4b0 	.word	0x0800c4b0
 8000e40:	0800c41c 	.word	0x0800c41c
 8000e44:	20000b4b 	.word	0x20000b4b
 8000e48:	20000af8 	.word	0x20000af8
 8000e4c:	20000b26 	.word	0x20000b26
 8000e50:	0800c4c0 	.word	0x0800c4c0
 8000e54:	0800c4d0 	.word	0x0800c4d0
 8000e58:	20000b4c 	.word	0x20000b4c
 8000e5c:	0800c4e0 	.word	0x0800c4e0
 8000e60:	0800c4f0 	.word	0x0800c4f0
 8000e64:	20000b4d 	.word	0x20000b4d
 8000e68:	0800c500 	.word	0x0800c500
 8000e6c:	0800c510 	.word	0x0800c510
 8000e70:	0800c520 	.word	0x0800c520
 8000e74:	20000b4e 	.word	0x20000b4e
 8000e78:	0800c524 	.word	0x0800c524
			} else if(dilSecim == 1) {
 8000e7c:	4b82      	ldr	r3, [pc, #520]	; (8001088 <menu+0x8d0>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d104      	bne.n	8000e8e <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8000e84:	4a81      	ldr	r2, [pc, #516]	; (800108c <menu+0x8d4>)
 8000e86:	2101      	movs	r1, #1
 8000e88:	2002      	movs	r0, #2
 8000e8a:	f7ff fc34 	bl	80006f6 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000e8e:	2102      	movs	r1, #2
 8000e90:	487f      	ldr	r0, [pc, #508]	; (8001090 <menu+0x8d8>)
 8000e92:	f007 fc7d 	bl	8008790 <HAL_GPIO_ReadPin>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d119      	bne.n	8000ed0 <menu+0x718>
 8000e9c:	4b7d      	ldr	r3, [pc, #500]	; (8001094 <menu+0x8dc>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	f083 0301 	eor.w	r3, r3, #1
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d012      	beq.n	8000ed0 <menu+0x718>
 8000eaa:	4b7b      	ldr	r3, [pc, #492]	; (8001098 <menu+0x8e0>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10e      	bne.n	8000ed0 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8000eb2:	4b7a      	ldr	r3, [pc, #488]	; (800109c <menu+0x8e4>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	b2da      	uxtb	r2, r3
 8000eba:	4b78      	ldr	r3, [pc, #480]	; (800109c <menu+0x8e4>)
 8000ebc:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8000ebe:	4b77      	ldr	r3, [pc, #476]	; (800109c <menu+0x8e4>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b0a      	cmp	r3, #10
 8000ec4:	d902      	bls.n	8000ecc <menu+0x714>
				hataGostermeSirasi = 0;
 8000ec6:	4b75      	ldr	r3, [pc, #468]	; (800109c <menu+0x8e4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000ecc:	f003 ffe8 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000ed0:	2104      	movs	r1, #4
 8000ed2:	486f      	ldr	r0, [pc, #444]	; (8001090 <menu+0x8d8>)
 8000ed4:	f007 fc5c 	bl	8008790 <HAL_GPIO_ReadPin>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d119      	bne.n	8000f12 <menu+0x75a>
 8000ede:	4b6d      	ldr	r3, [pc, #436]	; (8001094 <menu+0x8dc>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	f083 0301 	eor.w	r3, r3, #1
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d012      	beq.n	8000f12 <menu+0x75a>
 8000eec:	4b6a      	ldr	r3, [pc, #424]	; (8001098 <menu+0x8e0>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d10e      	bne.n	8000f12 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8000ef4:	4b69      	ldr	r3, [pc, #420]	; (800109c <menu+0x8e4>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	4b67      	ldr	r3, [pc, #412]	; (800109c <menu+0x8e4>)
 8000efe:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8000f00:	4b66      	ldr	r3, [pc, #408]	; (800109c <menu+0x8e4>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	2b0b      	cmp	r3, #11
 8000f06:	d902      	bls.n	8000f0e <menu+0x756>
	    		hataGostermeSirasi = 10;
 8000f08:	4b64      	ldr	r3, [pc, #400]	; (800109c <menu+0x8e4>)
 8000f0a:	220a      	movs	r2, #10
 8000f0c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8000f0e:	f003 ffc7 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8000f12:	2108      	movs	r1, #8
 8000f14:	485e      	ldr	r0, [pc, #376]	; (8001090 <menu+0x8d8>)
 8000f16:	f007 fc3b 	bl	8008790 <HAL_GPIO_ReadPin>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d153      	bne.n	8000fc8 <menu+0x810>
 8000f20:	4b5c      	ldr	r3, [pc, #368]	; (8001094 <menu+0x8dc>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	f083 0301 	eor.w	r3, r3, #1
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d04c      	beq.n	8000fc8 <menu+0x810>
 8000f2e:	4b5b      	ldr	r3, [pc, #364]	; (800109c <menu+0x8e4>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b0a      	cmp	r3, #10
 8000f34:	d148      	bne.n	8000fc8 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8000f36:	4b5a      	ldr	r3, [pc, #360]	; (80010a0 <menu+0x8e8>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
 8000f3c:	4b59      	ldr	r3, [pc, #356]	; (80010a4 <menu+0x8ec>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8000f44:	4b58      	ldr	r3, [pc, #352]	; (80010a8 <menu+0x8f0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	4b56      	ldr	r3, [pc, #344]	; (80010a4 <menu+0x8ec>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8000f52:	4b56      	ldr	r3, [pc, #344]	; (80010ac <menu+0x8f4>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	701a      	strb	r2, [r3, #0]
 8000f58:	4b52      	ldr	r3, [pc, #328]	; (80010a4 <menu+0x8ec>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8000f60:	4b53      	ldr	r3, [pc, #332]	; (80010b0 <menu+0x8f8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	701a      	strb	r2, [r3, #0]
 8000f66:	4b4f      	ldr	r3, [pc, #316]	; (80010a4 <menu+0x8ec>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8000f6e:	4b51      	ldr	r3, [pc, #324]	; (80010b4 <menu+0x8fc>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
 8000f74:	4b4b      	ldr	r3, [pc, #300]	; (80010a4 <menu+0x8ec>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8000f7c:	4b4e      	ldr	r3, [pc, #312]	; (80010b8 <menu+0x900>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
 8000f82:	4b48      	ldr	r3, [pc, #288]	; (80010a4 <menu+0x8ec>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8000f8a:	4b4c      	ldr	r3, [pc, #304]	; (80010bc <menu+0x904>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
 8000f90:	4b44      	ldr	r3, [pc, #272]	; (80010a4 <menu+0x8ec>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8000f98:	4b49      	ldr	r3, [pc, #292]	; (80010c0 <menu+0x908>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
 8000f9e:	4b41      	ldr	r3, [pc, #260]	; (80010a4 <menu+0x8ec>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8000fa6:	4b47      	ldr	r3, [pc, #284]	; (80010c4 <menu+0x90c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
 8000fac:	4b3d      	ldr	r3, [pc, #244]	; (80010a4 <menu+0x8ec>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8000fb4:	4b44      	ldr	r3, [pc, #272]	; (80010c8 <menu+0x910>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
 8000fba:	4b3a      	ldr	r3, [pc, #232]	; (80010a4 <menu+0x8ec>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8000fc2:	4b42      	ldr	r3, [pc, #264]	; (80010cc <menu+0x914>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8000fc8:	4b41      	ldr	r3, [pc, #260]	; (80010d0 <menu+0x918>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	f040 80fc 	bne.w	80011ca <menu+0xa12>
		if(dilSecim == 0) {
 8000fd2:	4b2d      	ldr	r3, [pc, #180]	; (8001088 <menu+0x8d0>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d105      	bne.n	8000fe6 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8000fda:	4a3e      	ldr	r2, [pc, #248]	; (80010d4 <menu+0x91c>)
 8000fdc:	2101      	movs	r1, #1
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f7ff fb89 	bl	80006f6 <lcd_print>
 8000fe4:	e008      	b.n	8000ff8 <menu+0x840>
		} else if(dilSecim == 1) {
 8000fe6:	4b28      	ldr	r3, [pc, #160]	; (8001088 <menu+0x8d0>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d104      	bne.n	8000ff8 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8000fee:	4a3a      	ldr	r2, [pc, #232]	; (80010d8 <menu+0x920>)
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f7ff fb7f 	bl	80006f6 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8000ff8:	4b27      	ldr	r3, [pc, #156]	; (8001098 <menu+0x8e0>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d003      	beq.n	8001008 <menu+0x850>
 8001000:	4b25      	ldr	r3, [pc, #148]	; (8001098 <menu+0x8e0>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d112      	bne.n	800102e <menu+0x876>
			if(dilSecim == 0) {
 8001008:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <menu+0x8d0>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d105      	bne.n	800101c <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001010:	4a32      	ldr	r2, [pc, #200]	; (80010dc <menu+0x924>)
 8001012:	2101      	movs	r1, #1
 8001014:	2002      	movs	r0, #2
 8001016:	f7ff fb6e 	bl	80006f6 <lcd_print>
 800101a:	e008      	b.n	800102e <menu+0x876>
			} else if(dilSecim == 1) {
 800101c:	4b1a      	ldr	r3, [pc, #104]	; (8001088 <menu+0x8d0>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d104      	bne.n	800102e <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001024:	4a2e      	ldr	r2, [pc, #184]	; (80010e0 <menu+0x928>)
 8001026:	2101      	movs	r1, #1
 8001028:	2002      	movs	r0, #2
 800102a:	f7ff fb64 	bl	80006f6 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 800102e:	4b2d      	ldr	r3, [pc, #180]	; (80010e4 <menu+0x92c>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d116      	bne.n	8001064 <menu+0x8ac>
 8001036:	4b18      	ldr	r3, [pc, #96]	; (8001098 <menu+0x8e0>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d112      	bne.n	8001064 <menu+0x8ac>
			if(dilSecim == 0) {
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <menu+0x8d0>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d105      	bne.n	8001052 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001046:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <menu+0x930>)
 8001048:	2101      	movs	r1, #1
 800104a:	2002      	movs	r0, #2
 800104c:	f7ff fb53 	bl	80006f6 <lcd_print>
 8001050:	e008      	b.n	8001064 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <menu+0x8d0>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d104      	bne.n	8001064 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 800105a:	4a24      	ldr	r2, [pc, #144]	; (80010ec <menu+0x934>)
 800105c:	2101      	movs	r1, #1
 800105e:	2002      	movs	r0, #2
 8001060:	f7ff fb49 	bl	80006f6 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001064:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <menu+0x92c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b01      	cmp	r3, #1
 800106a:	d14c      	bne.n	8001106 <menu+0x94e>
 800106c:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <menu+0x8e0>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d148      	bne.n	8001106 <menu+0x94e>
			if(dilSecim == 0) {
 8001074:	4b04      	ldr	r3, [pc, #16]	; (8001088 <menu+0x8d0>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d13b      	bne.n	80010f4 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 800107c:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <menu+0x938>)
 800107e:	2101      	movs	r1, #1
 8001080:	2002      	movs	r0, #2
 8001082:	f7ff fb38 	bl	80006f6 <lcd_print>
 8001086:	e03e      	b.n	8001106 <menu+0x94e>
 8001088:	20000b44 	.word	0x20000b44
 800108c:	0800c538 	.word	0x0800c538
 8001090:	40010800 	.word	0x40010800
 8001094:	20000b52 	.word	0x20000b52
 8001098:	20000b33 	.word	0x20000b33
 800109c:	20000b26 	.word	0x20000b26
 80010a0:	20000b45 	.word	0x20000b45
 80010a4:	20000ab8 	.word	0x20000ab8
 80010a8:	20000b46 	.word	0x20000b46
 80010ac:	20000b47 	.word	0x20000b47
 80010b0:	20000b48 	.word	0x20000b48
 80010b4:	20000b49 	.word	0x20000b49
 80010b8:	20000b4a 	.word	0x20000b4a
 80010bc:	20000b4b 	.word	0x20000b4b
 80010c0:	20000b4c 	.word	0x20000b4c
 80010c4:	20000b4d 	.word	0x20000b4d
 80010c8:	20000b4e 	.word	0x20000b4e
 80010cc:	20000b4f 	.word	0x20000b4f
 80010d0:	20000b24 	.word	0x20000b24
 80010d4:	0800c54c 	.word	0x0800c54c
 80010d8:	0800c560 	.word	0x0800c560
 80010dc:	0800c574 	.word	0x0800c574
 80010e0:	0800c588 	.word	0x0800c588
 80010e4:	20000b25 	.word	0x20000b25
 80010e8:	0800c59c 	.word	0x0800c59c
 80010ec:	0800c5ac 	.word	0x0800c5ac
 80010f0:	0800c5bc 	.word	0x0800c5bc
			} else if(dilSecim == 1) {
 80010f4:	4b98      	ldr	r3, [pc, #608]	; (8001358 <menu+0xba0>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d104      	bne.n	8001106 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 80010fc:	4a97      	ldr	r2, [pc, #604]	; (800135c <menu+0xba4>)
 80010fe:	2101      	movs	r1, #1
 8001100:	2002      	movs	r0, #2
 8001102:	f7ff faf8 	bl	80006f6 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001106:	2102      	movs	r1, #2
 8001108:	4895      	ldr	r0, [pc, #596]	; (8001360 <menu+0xba8>)
 800110a:	f007 fb41 	bl	8008790 <HAL_GPIO_ReadPin>
 800110e:	4603      	mov	r3, r0
 8001110:	2b01      	cmp	r3, #1
 8001112:	d119      	bne.n	8001148 <menu+0x990>
 8001114:	4b93      	ldr	r3, [pc, #588]	; (8001364 <menu+0xbac>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	f083 0301 	eor.w	r3, r3, #1
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d012      	beq.n	8001148 <menu+0x990>
 8001122:	4b91      	ldr	r3, [pc, #580]	; (8001368 <menu+0xbb0>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10e      	bne.n	8001148 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 800112a:	4b90      	ldr	r3, [pc, #576]	; (800136c <menu+0xbb4>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b8e      	ldr	r3, [pc, #568]	; (800136c <menu+0xbb4>)
 8001134:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001136:	4b8d      	ldr	r3, [pc, #564]	; (800136c <menu+0xbb4>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d902      	bls.n	8001144 <menu+0x98c>
				calismaSekli = 0;
 800113e:	4b8b      	ldr	r3, [pc, #556]	; (800136c <menu+0xbb4>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001144:	f003 feac 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001148:	2104      	movs	r1, #4
 800114a:	4885      	ldr	r0, [pc, #532]	; (8001360 <menu+0xba8>)
 800114c:	f007 fb20 	bl	8008790 <HAL_GPIO_ReadPin>
 8001150:	4603      	mov	r3, r0
 8001152:	2b01      	cmp	r3, #1
 8001154:	d119      	bne.n	800118a <menu+0x9d2>
 8001156:	4b83      	ldr	r3, [pc, #524]	; (8001364 <menu+0xbac>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	f083 0301 	eor.w	r3, r3, #1
 800115e:	b2db      	uxtb	r3, r3
 8001160:	2b00      	cmp	r3, #0
 8001162:	d012      	beq.n	800118a <menu+0x9d2>
 8001164:	4b80      	ldr	r3, [pc, #512]	; (8001368 <menu+0xbb0>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d10e      	bne.n	800118a <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 800116c:	4b7f      	ldr	r3, [pc, #508]	; (800136c <menu+0xbb4>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	3b01      	subs	r3, #1
 8001172:	b2da      	uxtb	r2, r3
 8001174:	4b7d      	ldr	r3, [pc, #500]	; (800136c <menu+0xbb4>)
 8001176:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001178:	4b7c      	ldr	r3, [pc, #496]	; (800136c <menu+0xbb4>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d002      	beq.n	8001186 <menu+0x9ce>
	    		calismaSekli = 1;
 8001180:	4b7a      	ldr	r3, [pc, #488]	; (800136c <menu+0xbb4>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001186:	f003 fe8b 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800118a:	2108      	movs	r1, #8
 800118c:	4874      	ldr	r0, [pc, #464]	; (8001360 <menu+0xba8>)
 800118e:	f007 faff 	bl	8008790 <HAL_GPIO_ReadPin>
 8001192:	4603      	mov	r3, r0
 8001194:	2b01      	cmp	r3, #1
 8001196:	d118      	bne.n	80011ca <menu+0xa12>
 8001198:	4b72      	ldr	r3, [pc, #456]	; (8001364 <menu+0xbac>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	f083 0301 	eor.w	r3, r3, #1
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d011      	beq.n	80011ca <menu+0xa12>
			eepromData[1] = calismaSekli;
 80011a6:	4b71      	ldr	r3, [pc, #452]	; (800136c <menu+0xbb4>)
 80011a8:	781a      	ldrb	r2, [r3, #0]
 80011aa:	4b71      	ldr	r3, [pc, #452]	; (8001370 <menu+0xbb8>)
 80011ac:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 80011ae:	4b6f      	ldr	r3, [pc, #444]	; (800136c <menu+0xbb4>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d106      	bne.n	80011c4 <menu+0xa0c>
				altLimit = 1;
 80011b6:	4b6f      	ldr	r3, [pc, #444]	; (8001374 <menu+0xbbc>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80011bc:	4b6d      	ldr	r3, [pc, #436]	; (8001374 <menu+0xbbc>)
 80011be:	781a      	ldrb	r2, [r3, #0]
 80011c0:	4b6b      	ldr	r3, [pc, #428]	; (8001370 <menu+0xbb8>)
 80011c2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80011c4:	4b6c      	ldr	r3, [pc, #432]	; (8001378 <menu+0xbc0>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 80011ca:	4b6c      	ldr	r3, [pc, #432]	; (800137c <menu+0xbc4>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	f040 8083 	bne.w	80012da <menu+0xb22>
		if(dilSecim == 0) {
 80011d4:	4b60      	ldr	r3, [pc, #384]	; (8001358 <menu+0xba0>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d105      	bne.n	80011e8 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 80011dc:	4a68      	ldr	r2, [pc, #416]	; (8001380 <menu+0xbc8>)
 80011de:	2101      	movs	r1, #1
 80011e0:	2001      	movs	r0, #1
 80011e2:	f7ff fa88 	bl	80006f6 <lcd_print>
 80011e6:	e008      	b.n	80011fa <menu+0xa42>
		} else if(dilSecim == 1) {
 80011e8:	4b5b      	ldr	r3, [pc, #364]	; (8001358 <menu+0xba0>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d104      	bne.n	80011fa <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 80011f0:	4a64      	ldr	r2, [pc, #400]	; (8001384 <menu+0xbcc>)
 80011f2:	2101      	movs	r1, #1
 80011f4:	2001      	movs	r0, #1
 80011f6:	f7ff fa7e 	bl	80006f6 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 80011fa:	4b63      	ldr	r3, [pc, #396]	; (8001388 <menu+0xbd0>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d113      	bne.n	800122a <menu+0xa72>
			if(dilSecim == 0) {
 8001202:	4b55      	ldr	r3, [pc, #340]	; (8001358 <menu+0xba0>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d105      	bne.n	8001216 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 800120a:	4a60      	ldr	r2, [pc, #384]	; (800138c <menu+0xbd4>)
 800120c:	2101      	movs	r1, #1
 800120e:	2002      	movs	r0, #2
 8001210:	f7ff fa71 	bl	80006f6 <lcd_print>
 8001214:	e012      	b.n	800123c <menu+0xa84>
			} else if(dilSecim == 1) {
 8001216:	4b50      	ldr	r3, [pc, #320]	; (8001358 <menu+0xba0>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d10e      	bne.n	800123c <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 800121e:	4a5c      	ldr	r2, [pc, #368]	; (8001390 <menu+0xbd8>)
 8001220:	2101      	movs	r1, #1
 8001222:	2002      	movs	r0, #2
 8001224:	f7ff fa67 	bl	80006f6 <lcd_print>
 8001228:	e008      	b.n	800123c <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 800122a:	4b57      	ldr	r3, [pc, #348]	; (8001388 <menu+0xbd0>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d104      	bne.n	800123c <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001232:	4a58      	ldr	r2, [pc, #352]	; (8001394 <menu+0xbdc>)
 8001234:	2101      	movs	r1, #1
 8001236:	2002      	movs	r0, #2
 8001238:	f7ff fa5d 	bl	80006f6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800123c:	2102      	movs	r1, #2
 800123e:	4848      	ldr	r0, [pc, #288]	; (8001360 <menu+0xba8>)
 8001240:	f007 faa6 	bl	8008790 <HAL_GPIO_ReadPin>
 8001244:	4603      	mov	r3, r0
 8001246:	2b01      	cmp	r3, #1
 8001248:	d115      	bne.n	8001276 <menu+0xabe>
 800124a:	4b46      	ldr	r3, [pc, #280]	; (8001364 <menu+0xbac>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	f083 0301 	eor.w	r3, r3, #1
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00e      	beq.n	8001276 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001258:	4b4b      	ldr	r3, [pc, #300]	; (8001388 <menu+0xbd0>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b49      	ldr	r3, [pc, #292]	; (8001388 <menu+0xbd0>)
 8001262:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001264:	4b48      	ldr	r3, [pc, #288]	; (8001388 <menu+0xbd0>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d902      	bls.n	8001272 <menu+0xaba>
				emniyetCercevesi = 0;
 800126c:	4b46      	ldr	r3, [pc, #280]	; (8001388 <menu+0xbd0>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001272:	f003 fe15 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001276:	2104      	movs	r1, #4
 8001278:	4839      	ldr	r0, [pc, #228]	; (8001360 <menu+0xba8>)
 800127a:	f007 fa89 	bl	8008790 <HAL_GPIO_ReadPin>
 800127e:	4603      	mov	r3, r0
 8001280:	2b01      	cmp	r3, #1
 8001282:	d115      	bne.n	80012b0 <menu+0xaf8>
 8001284:	4b37      	ldr	r3, [pc, #220]	; (8001364 <menu+0xbac>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	f083 0301 	eor.w	r3, r3, #1
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00e      	beq.n	80012b0 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001292:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <menu+0xbd0>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	3b01      	subs	r3, #1
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4b3b      	ldr	r3, [pc, #236]	; (8001388 <menu+0xbd0>)
 800129c:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 800129e:	4b3a      	ldr	r3, [pc, #232]	; (8001388 <menu+0xbd0>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d002      	beq.n	80012ac <menu+0xaf4>
		   		emniyetCercevesi = 1;
 80012a6:	4b38      	ldr	r3, [pc, #224]	; (8001388 <menu+0xbd0>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80012ac:	f003 fdf8 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 80012b0:	2108      	movs	r1, #8
 80012b2:	482b      	ldr	r0, [pc, #172]	; (8001360 <menu+0xba8>)
 80012b4:	f007 fa6c 	bl	8008790 <HAL_GPIO_ReadPin>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d10d      	bne.n	80012da <menu+0xb22>
 80012be:	4b29      	ldr	r3, [pc, #164]	; (8001364 <menu+0xbac>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	f083 0301 	eor.w	r3, r3, #1
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d006      	beq.n	80012da <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 80012cc:	4b2e      	ldr	r3, [pc, #184]	; (8001388 <menu+0xbd0>)
 80012ce:	781a      	ldrb	r2, [r3, #0]
 80012d0:	4b27      	ldr	r3, [pc, #156]	; (8001370 <menu+0xbb8>)
 80012d2:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 80012d4:	4b28      	ldr	r3, [pc, #160]	; (8001378 <menu+0xbc0>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 80012da:	4b28      	ldr	r3, [pc, #160]	; (800137c <menu+0xbc4>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b04      	cmp	r3, #4
 80012e0:	f040 80ba 	bne.w	8001458 <menu+0xca0>
		if(dilSecim == 0) {
 80012e4:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <menu+0xba0>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d105      	bne.n	80012f8 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 80012ec:	4a2a      	ldr	r2, [pc, #168]	; (8001398 <menu+0xbe0>)
 80012ee:	2101      	movs	r1, #1
 80012f0:	2001      	movs	r0, #1
 80012f2:	f7ff fa00 	bl	80006f6 <lcd_print>
 80012f6:	e008      	b.n	800130a <menu+0xb52>
		} else if(dilSecim == 1) {
 80012f8:	4b17      	ldr	r3, [pc, #92]	; (8001358 <menu+0xba0>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d104      	bne.n	800130a <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001300:	4a26      	ldr	r2, [pc, #152]	; (800139c <menu+0xbe4>)
 8001302:	2101      	movs	r1, #1
 8001304:	2001      	movs	r0, #1
 8001306:	f7ff f9f6 	bl	80006f6 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 800130a:	4b25      	ldr	r3, [pc, #148]	; (80013a0 <menu+0xbe8>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d113      	bne.n	800133a <menu+0xb82>
			if(dilSecim == 0) {
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <menu+0xba0>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d105      	bne.n	8001326 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 800131a:	4a1c      	ldr	r2, [pc, #112]	; (800138c <menu+0xbd4>)
 800131c:	2101      	movs	r1, #1
 800131e:	2002      	movs	r0, #2
 8001320:	f7ff f9e9 	bl	80006f6 <lcd_print>
 8001324:	e049      	b.n	80013ba <menu+0xc02>
			} else if(dilSecim == 1) {
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <menu+0xba0>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d145      	bne.n	80013ba <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 800132e:	4a18      	ldr	r2, [pc, #96]	; (8001390 <menu+0xbd8>)
 8001330:	2101      	movs	r1, #1
 8001332:	2002      	movs	r0, #2
 8001334:	f7ff f9df 	bl	80006f6 <lcd_print>
 8001338:	e03f      	b.n	80013ba <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <menu+0xbe8>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d13b      	bne.n	80013ba <menu+0xc02>
			if(dilSecim == 0) {
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <menu+0xba0>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d12e      	bne.n	80013a8 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 800134a:	4a16      	ldr	r2, [pc, #88]	; (80013a4 <menu+0xbec>)
 800134c:	2101      	movs	r1, #1
 800134e:	2002      	movs	r0, #2
 8001350:	f7ff f9d1 	bl	80006f6 <lcd_print>
 8001354:	e031      	b.n	80013ba <menu+0xc02>
 8001356:	bf00      	nop
 8001358:	20000b44 	.word	0x20000b44
 800135c:	0800c5cc 	.word	0x0800c5cc
 8001360:	40010800 	.word	0x40010800
 8001364:	20000b52 	.word	0x20000b52
 8001368:	20000b33 	.word	0x20000b33
 800136c:	20000b25 	.word	0x20000b25
 8001370:	20000ab8 	.word	0x20000ab8
 8001374:	20000b2a 	.word	0x20000b2a
 8001378:	20000b4f 	.word	0x20000b4f
 800137c:	20000b24 	.word	0x20000b24
 8001380:	0800c5dc 	.word	0x0800c5dc
 8001384:	0800c5f0 	.word	0x0800c5f0
 8001388:	20000b28 	.word	0x20000b28
 800138c:	0800c604 	.word	0x0800c604
 8001390:	0800c618 	.word	0x0800c618
 8001394:	0800c62c 	.word	0x0800c62c
 8001398:	0800c63c 	.word	0x0800c63c
 800139c:	0800c650 	.word	0x0800c650
 80013a0:	20000b29 	.word	0x20000b29
 80013a4:	0800c664 	.word	0x0800c664
			} else if(dilSecim == 1) {
 80013a8:	4b92      	ldr	r3, [pc, #584]	; (80015f4 <menu+0xe3c>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d104      	bne.n	80013ba <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 80013b0:	4a91      	ldr	r2, [pc, #580]	; (80015f8 <menu+0xe40>)
 80013b2:	2101      	movs	r1, #1
 80013b4:	2002      	movs	r0, #2
 80013b6:	f7ff f99e 	bl	80006f6 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80013ba:	2102      	movs	r1, #2
 80013bc:	488f      	ldr	r0, [pc, #572]	; (80015fc <menu+0xe44>)
 80013be:	f007 f9e7 	bl	8008790 <HAL_GPIO_ReadPin>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d115      	bne.n	80013f4 <menu+0xc3c>
 80013c8:	4b8d      	ldr	r3, [pc, #564]	; (8001600 <menu+0xe48>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	f083 0301 	eor.w	r3, r3, #1
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d00e      	beq.n	80013f4 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 80013d6:	4b8b      	ldr	r3, [pc, #556]	; (8001604 <menu+0xe4c>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	3301      	adds	r3, #1
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4b89      	ldr	r3, [pc, #548]	; (8001604 <menu+0xe4c>)
 80013e0:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80013e2:	4b88      	ldr	r3, [pc, #544]	; (8001604 <menu+0xe4c>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d902      	bls.n	80013f0 <menu+0xc38>
				yavaslamaLimit = 0;
 80013ea:	4b86      	ldr	r3, [pc, #536]	; (8001604 <menu+0xe4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80013f0:	f003 fd56 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80013f4:	2104      	movs	r1, #4
 80013f6:	4881      	ldr	r0, [pc, #516]	; (80015fc <menu+0xe44>)
 80013f8:	f007 f9ca 	bl	8008790 <HAL_GPIO_ReadPin>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d115      	bne.n	800142e <menu+0xc76>
 8001402:	4b7f      	ldr	r3, [pc, #508]	; (8001600 <menu+0xe48>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	f083 0301 	eor.w	r3, r3, #1
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00e      	beq.n	800142e <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001410:	4b7c      	ldr	r3, [pc, #496]	; (8001604 <menu+0xe4c>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	3b01      	subs	r3, #1
 8001416:	b2da      	uxtb	r2, r3
 8001418:	4b7a      	ldr	r3, [pc, #488]	; (8001604 <menu+0xe4c>)
 800141a:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 800141c:	4b79      	ldr	r3, [pc, #484]	; (8001604 <menu+0xe4c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d002      	beq.n	800142a <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001424:	4b77      	ldr	r3, [pc, #476]	; (8001604 <menu+0xe4c>)
 8001426:	2201      	movs	r2, #1
 8001428:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800142a:	f003 fd39 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800142e:	2108      	movs	r1, #8
 8001430:	4872      	ldr	r0, [pc, #456]	; (80015fc <menu+0xe44>)
 8001432:	f007 f9ad 	bl	8008790 <HAL_GPIO_ReadPin>
 8001436:	4603      	mov	r3, r0
 8001438:	2b01      	cmp	r3, #1
 800143a:	d10d      	bne.n	8001458 <menu+0xca0>
 800143c:	4b70      	ldr	r3, [pc, #448]	; (8001600 <menu+0xe48>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	f083 0301 	eor.w	r3, r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	2b00      	cmp	r3, #0
 8001448:	d006      	beq.n	8001458 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 800144a:	4b6e      	ldr	r3, [pc, #440]	; (8001604 <menu+0xe4c>)
 800144c:	781a      	ldrb	r2, [r3, #0]
 800144e:	4b6e      	ldr	r3, [pc, #440]	; (8001608 <menu+0xe50>)
 8001450:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001452:	4b6e      	ldr	r3, [pc, #440]	; (800160c <menu+0xe54>)
 8001454:	2201      	movs	r2, #1
 8001456:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001458:	4b6d      	ldr	r3, [pc, #436]	; (8001610 <menu+0xe58>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b05      	cmp	r3, #5
 800145e:	f040 80b9 	bne.w	80015d4 <menu+0xe1c>
		if(dilSecim == 0) {
 8001462:	4b64      	ldr	r3, [pc, #400]	; (80015f4 <menu+0xe3c>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d105      	bne.n	8001476 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 800146a:	4a6a      	ldr	r2, [pc, #424]	; (8001614 <menu+0xe5c>)
 800146c:	2101      	movs	r1, #1
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff f941 	bl	80006f6 <lcd_print>
 8001474:	e008      	b.n	8001488 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001476:	4b5f      	ldr	r3, [pc, #380]	; (80015f4 <menu+0xe3c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b01      	cmp	r3, #1
 800147c:	d104      	bne.n	8001488 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 800147e:	4a66      	ldr	r2, [pc, #408]	; (8001618 <menu+0xe60>)
 8001480:	2101      	movs	r1, #1
 8001482:	2001      	movs	r0, #1
 8001484:	f7ff f937 	bl	80006f6 <lcd_print>
		}

		if(altLimit == 0) {
 8001488:	4b64      	ldr	r3, [pc, #400]	; (800161c <menu+0xe64>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d113      	bne.n	80014b8 <menu+0xd00>
			if(dilSecim == 0) {
 8001490:	4b58      	ldr	r3, [pc, #352]	; (80015f4 <menu+0xe3c>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d105      	bne.n	80014a4 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001498:	4a61      	ldr	r2, [pc, #388]	; (8001620 <menu+0xe68>)
 800149a:	2101      	movs	r1, #1
 800149c:	2002      	movs	r0, #2
 800149e:	f7ff f92a 	bl	80006f6 <lcd_print>
 80014a2:	e020      	b.n	80014e6 <menu+0xd2e>
			} else if(dilSecim == 1) {
 80014a4:	4b53      	ldr	r3, [pc, #332]	; (80015f4 <menu+0xe3c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d11c      	bne.n	80014e6 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 80014ac:	4a5d      	ldr	r2, [pc, #372]	; (8001624 <menu+0xe6c>)
 80014ae:	2101      	movs	r1, #1
 80014b0:	2002      	movs	r0, #2
 80014b2:	f7ff f920 	bl	80006f6 <lcd_print>
 80014b6:	e016      	b.n	80014e6 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 80014b8:	4b58      	ldr	r3, [pc, #352]	; (800161c <menu+0xe64>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d112      	bne.n	80014e6 <menu+0xd2e>
			if(dilSecim == 0){
 80014c0:	4b4c      	ldr	r3, [pc, #304]	; (80015f4 <menu+0xe3c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d105      	bne.n	80014d4 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80014c8:	4a57      	ldr	r2, [pc, #348]	; (8001628 <menu+0xe70>)
 80014ca:	2101      	movs	r1, #1
 80014cc:	2002      	movs	r0, #2
 80014ce:	f7ff f912 	bl	80006f6 <lcd_print>
 80014d2:	e008      	b.n	80014e6 <menu+0xd2e>
			} else if(dilSecim == 1){
 80014d4:	4b47      	ldr	r3, [pc, #284]	; (80015f4 <menu+0xe3c>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d104      	bne.n	80014e6 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80014dc:	4a46      	ldr	r2, [pc, #280]	; (80015f8 <menu+0xe40>)
 80014de:	2101      	movs	r1, #1
 80014e0:	2002      	movs	r0, #2
 80014e2:	f7ff f908 	bl	80006f6 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80014e6:	2102      	movs	r1, #2
 80014e8:	4844      	ldr	r0, [pc, #272]	; (80015fc <menu+0xe44>)
 80014ea:	f007 f951 	bl	8008790 <HAL_GPIO_ReadPin>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d119      	bne.n	8001528 <menu+0xd70>
 80014f4:	4b42      	ldr	r3, [pc, #264]	; (8001600 <menu+0xe48>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	f083 0301 	eor.w	r3, r3, #1
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d012      	beq.n	8001528 <menu+0xd70>
 8001502:	4b4a      	ldr	r3, [pc, #296]	; (800162c <menu+0xe74>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10e      	bne.n	8001528 <menu+0xd70>
			altLimit = altLimit + 1;
 800150a:	4b44      	ldr	r3, [pc, #272]	; (800161c <menu+0xe64>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	3301      	adds	r3, #1
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4b42      	ldr	r3, [pc, #264]	; (800161c <menu+0xe64>)
 8001514:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001516:	4b41      	ldr	r3, [pc, #260]	; (800161c <menu+0xe64>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d902      	bls.n	8001524 <menu+0xd6c>
				altLimit = 0;
 800151e:	4b3f      	ldr	r3, [pc, #252]	; (800161c <menu+0xe64>)
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001524:	f003 fcbc 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001528:	2104      	movs	r1, #4
 800152a:	4834      	ldr	r0, [pc, #208]	; (80015fc <menu+0xe44>)
 800152c:	f007 f930 	bl	8008790 <HAL_GPIO_ReadPin>
 8001530:	4603      	mov	r3, r0
 8001532:	2b01      	cmp	r3, #1
 8001534:	d119      	bne.n	800156a <menu+0xdb2>
 8001536:	4b32      	ldr	r3, [pc, #200]	; (8001600 <menu+0xe48>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	f083 0301 	eor.w	r3, r3, #1
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b00      	cmp	r3, #0
 8001542:	d012      	beq.n	800156a <menu+0xdb2>
 8001544:	4b39      	ldr	r3, [pc, #228]	; (800162c <menu+0xe74>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10e      	bne.n	800156a <menu+0xdb2>
			altLimit = altLimit - 1;
 800154c:	4b33      	ldr	r3, [pc, #204]	; (800161c <menu+0xe64>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	3b01      	subs	r3, #1
 8001552:	b2da      	uxtb	r2, r3
 8001554:	4b31      	ldr	r3, [pc, #196]	; (800161c <menu+0xe64>)
 8001556:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001558:	4b30      	ldr	r3, [pc, #192]	; (800161c <menu+0xe64>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <menu+0xdae>
		   		altLimit = 1;
 8001560:	4b2e      	ldr	r3, [pc, #184]	; (800161c <menu+0xe64>)
 8001562:	2201      	movs	r2, #1
 8001564:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001566:	f003 fc9b 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800156a:	2108      	movs	r1, #8
 800156c:	4823      	ldr	r0, [pc, #140]	; (80015fc <menu+0xe44>)
 800156e:	f007 f90f 	bl	8008790 <HAL_GPIO_ReadPin>
 8001572:	4603      	mov	r3, r0
 8001574:	2b01      	cmp	r3, #1
 8001576:	d12d      	bne.n	80015d4 <menu+0xe1c>
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <menu+0xe48>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	f083 0301 	eor.w	r3, r3, #1
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d026      	beq.n	80015d4 <menu+0xe1c>
			eepromData[5] = altLimit;
 8001586:	4b25      	ldr	r3, [pc, #148]	; (800161c <menu+0xe64>)
 8001588:	781a      	ldrb	r2, [r3, #0]
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <menu+0xe50>)
 800158c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800158e:	4b23      	ldr	r3, [pc, #140]	; (800161c <menu+0xe64>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d110      	bne.n	80015b8 <menu+0xe00>
 8001596:	4b26      	ldr	r3, [pc, #152]	; (8001630 <menu+0xe78>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <menu+0xdee>
 800159e:	4b24      	ldr	r3, [pc, #144]	; (8001630 <menu+0xe78>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d108      	bne.n	80015b8 <menu+0xe00>
				kapiTablaAcKonum = 3;
 80015a6:	4b22      	ldr	r3, [pc, #136]	; (8001630 <menu+0xe78>)
 80015a8:	2203      	movs	r2, #3
 80015aa:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80015ac:	4b20      	ldr	r3, [pc, #128]	; (8001630 <menu+0xe78>)
 80015ae:	781a      	ldrb	r2, [r3, #0]
 80015b0:	4b15      	ldr	r3, [pc, #84]	; (8001608 <menu+0xe50>)
 80015b2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80015b6:	e00a      	b.n	80015ce <menu+0xe16>
			} else if(altLimit == 0) {
 80015b8:	4b18      	ldr	r3, [pc, #96]	; (800161c <menu+0xe64>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d106      	bne.n	80015ce <menu+0xe16>
				platformSilindirTipi = 0;
 80015c0:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <menu+0xe7c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80015c6:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <menu+0xe7c>)
 80015c8:	781a      	ldrb	r2, [r3, #0]
 80015ca:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <menu+0xe50>)
 80015cc:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <menu+0xe54>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80015d4:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <menu+0xe58>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b06      	cmp	r3, #6
 80015da:	f040 80b6 	bne.w	800174a <menu+0xf92>
		if(dilSecim == 0) {
 80015de:	4b05      	ldr	r3, [pc, #20]	; (80015f4 <menu+0xe3c>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d12a      	bne.n	800163c <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80015e6:	4a14      	ldr	r2, [pc, #80]	; (8001638 <menu+0xe80>)
 80015e8:	2101      	movs	r1, #1
 80015ea:	2001      	movs	r0, #1
 80015ec:	f7ff f883 	bl	80006f6 <lcd_print>
 80015f0:	e02d      	b.n	800164e <menu+0xe96>
 80015f2:	bf00      	nop
 80015f4:	20000b44 	.word	0x20000b44
 80015f8:	0800c678 	.word	0x0800c678
 80015fc:	40010800 	.word	0x40010800
 8001600:	20000b52 	.word	0x20000b52
 8001604:	20000b29 	.word	0x20000b29
 8001608:	20000ab8 	.word	0x20000ab8
 800160c:	20000b4f 	.word	0x20000b4f
 8001610:	20000b24 	.word	0x20000b24
 8001614:	0800c68c 	.word	0x0800c68c
 8001618:	0800c6a0 	.word	0x0800c6a0
 800161c:	20000b2a 	.word	0x20000b2a
 8001620:	0800c604 	.word	0x0800c604
 8001624:	0800c618 	.word	0x0800c618
 8001628:	0800c664 	.word	0x0800c664
 800162c:	20000b25 	.word	0x20000b25
 8001630:	20000b31 	.word	0x20000b31
 8001634:	20000b37 	.word	0x20000b37
 8001638:	0800c6b4 	.word	0x0800c6b4
		} else if(dilSecim == 1){
 800163c:	4b7a      	ldr	r3, [pc, #488]	; (8001828 <menu+0x1070>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d104      	bne.n	800164e <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8001644:	4a79      	ldr	r2, [pc, #484]	; (800182c <menu+0x1074>)
 8001646:	2101      	movs	r1, #1
 8001648:	2001      	movs	r0, #1
 800164a:	f7ff f854 	bl	80006f6 <lcd_print>
		}
		if(basincSalteri == 0){
 800164e:	4b78      	ldr	r3, [pc, #480]	; (8001830 <menu+0x1078>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d113      	bne.n	800167e <menu+0xec6>
			if(dilSecim == 0) {
 8001656:	4b74      	ldr	r3, [pc, #464]	; (8001828 <menu+0x1070>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d105      	bne.n	800166a <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 800165e:	4a75      	ldr	r2, [pc, #468]	; (8001834 <menu+0x107c>)
 8001660:	2101      	movs	r1, #1
 8001662:	2002      	movs	r0, #2
 8001664:	f7ff f847 	bl	80006f6 <lcd_print>
 8001668:	e020      	b.n	80016ac <menu+0xef4>
			} else if(dilSecim == 1){
 800166a:	4b6f      	ldr	r3, [pc, #444]	; (8001828 <menu+0x1070>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d11c      	bne.n	80016ac <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8001672:	4a71      	ldr	r2, [pc, #452]	; (8001838 <menu+0x1080>)
 8001674:	2101      	movs	r1, #1
 8001676:	2002      	movs	r0, #2
 8001678:	f7ff f83d 	bl	80006f6 <lcd_print>
 800167c:	e016      	b.n	80016ac <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 800167e:	4b6c      	ldr	r3, [pc, #432]	; (8001830 <menu+0x1078>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d112      	bne.n	80016ac <menu+0xef4>
			if(dilSecim == 0) {
 8001686:	4b68      	ldr	r3, [pc, #416]	; (8001828 <menu+0x1070>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d105      	bne.n	800169a <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800168e:	4a6b      	ldr	r2, [pc, #428]	; (800183c <menu+0x1084>)
 8001690:	2101      	movs	r1, #1
 8001692:	2002      	movs	r0, #2
 8001694:	f7ff f82f 	bl	80006f6 <lcd_print>
 8001698:	e008      	b.n	80016ac <menu+0xef4>
			} else if(dilSecim == 1) {
 800169a:	4b63      	ldr	r3, [pc, #396]	; (8001828 <menu+0x1070>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d104      	bne.n	80016ac <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 80016a2:	4a67      	ldr	r2, [pc, #412]	; (8001840 <menu+0x1088>)
 80016a4:	2101      	movs	r1, #1
 80016a6:	2002      	movs	r0, #2
 80016a8:	f7ff f825 	bl	80006f6 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80016ac:	2102      	movs	r1, #2
 80016ae:	4865      	ldr	r0, [pc, #404]	; (8001844 <menu+0x108c>)
 80016b0:	f007 f86e 	bl	8008790 <HAL_GPIO_ReadPin>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d115      	bne.n	80016e6 <menu+0xf2e>
 80016ba:	4b63      	ldr	r3, [pc, #396]	; (8001848 <menu+0x1090>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	f083 0301 	eor.w	r3, r3, #1
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00e      	beq.n	80016e6 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80016c8:	4b59      	ldr	r3, [pc, #356]	; (8001830 <menu+0x1078>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	3301      	adds	r3, #1
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	4b57      	ldr	r3, [pc, #348]	; (8001830 <menu+0x1078>)
 80016d2:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80016d4:	4b56      	ldr	r3, [pc, #344]	; (8001830 <menu+0x1078>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d902      	bls.n	80016e2 <menu+0xf2a>
				basincSalteri = 0;
 80016dc:	4b54      	ldr	r3, [pc, #336]	; (8001830 <menu+0x1078>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80016e2:	f003 fbdd 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80016e6:	2104      	movs	r1, #4
 80016e8:	4856      	ldr	r0, [pc, #344]	; (8001844 <menu+0x108c>)
 80016ea:	f007 f851 	bl	8008790 <HAL_GPIO_ReadPin>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d115      	bne.n	8001720 <menu+0xf68>
 80016f4:	4b54      	ldr	r3, [pc, #336]	; (8001848 <menu+0x1090>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	f083 0301 	eor.w	r3, r3, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d00e      	beq.n	8001720 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 8001702:	4b4b      	ldr	r3, [pc, #300]	; (8001830 <menu+0x1078>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	3b01      	subs	r3, #1
 8001708:	b2da      	uxtb	r2, r3
 800170a:	4b49      	ldr	r3, [pc, #292]	; (8001830 <menu+0x1078>)
 800170c:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800170e:	4b48      	ldr	r3, [pc, #288]	; (8001830 <menu+0x1078>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d002      	beq.n	800171c <menu+0xf64>
		   		basincSalteri = 1;
 8001716:	4b46      	ldr	r3, [pc, #280]	; (8001830 <menu+0x1078>)
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800171c:	f003 fbc0 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001720:	2108      	movs	r1, #8
 8001722:	4848      	ldr	r0, [pc, #288]	; (8001844 <menu+0x108c>)
 8001724:	f007 f834 	bl	8008790 <HAL_GPIO_ReadPin>
 8001728:	4603      	mov	r3, r0
 800172a:	2b01      	cmp	r3, #1
 800172c:	d10d      	bne.n	800174a <menu+0xf92>
 800172e:	4b46      	ldr	r3, [pc, #280]	; (8001848 <menu+0x1090>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	f083 0301 	eor.w	r3, r3, #1
 8001736:	b2db      	uxtb	r3, r3
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <menu+0xf92>
			eepromData[6] = basincSalteri;
 800173c:	4b3c      	ldr	r3, [pc, #240]	; (8001830 <menu+0x1078>)
 800173e:	781a      	ldrb	r2, [r3, #0]
 8001740:	4b42      	ldr	r3, [pc, #264]	; (800184c <menu+0x1094>)
 8001742:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8001744:	4b42      	ldr	r3, [pc, #264]	; (8001850 <menu+0x1098>)
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800174a:	4b42      	ldr	r3, [pc, #264]	; (8001854 <menu+0x109c>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b07      	cmp	r3, #7
 8001750:	f040 80f5 	bne.w	800193e <menu+0x1186>
		if(dilSecim == 0) {
 8001754:	4b34      	ldr	r3, [pc, #208]	; (8001828 <menu+0x1070>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d105      	bne.n	8001768 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 800175c:	4a3e      	ldr	r2, [pc, #248]	; (8001858 <menu+0x10a0>)
 800175e:	2101      	movs	r1, #1
 8001760:	2001      	movs	r0, #1
 8001762:	f7fe ffc8 	bl	80006f6 <lcd_print>
 8001766:	e008      	b.n	800177a <menu+0xfc2>
		} else if(dilSecim == 1){
 8001768:	4b2f      	ldr	r3, [pc, #188]	; (8001828 <menu+0x1070>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d104      	bne.n	800177a <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8001770:	4a3a      	ldr	r2, [pc, #232]	; (800185c <menu+0x10a4>)
 8001772:	2101      	movs	r1, #1
 8001774:	2001      	movs	r0, #1
 8001776:	f7fe ffbe 	bl	80006f6 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 800177a:	4b39      	ldr	r3, [pc, #228]	; (8001860 <menu+0x10a8>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d113      	bne.n	80017aa <menu+0xff2>
			if(dilSecim == 0) {
 8001782:	4b29      	ldr	r3, [pc, #164]	; (8001828 <menu+0x1070>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d105      	bne.n	8001796 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 800178a:	4a2a      	ldr	r2, [pc, #168]	; (8001834 <menu+0x107c>)
 800178c:	2101      	movs	r1, #1
 800178e:	2002      	movs	r0, #2
 8001790:	f7fe ffb1 	bl	80006f6 <lcd_print>
 8001794:	e079      	b.n	800188a <menu+0x10d2>
			} else if(dilSecim == 1){
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <menu+0x1070>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d175      	bne.n	800188a <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800179e:	4a26      	ldr	r2, [pc, #152]	; (8001838 <menu+0x1080>)
 80017a0:	2101      	movs	r1, #1
 80017a2:	2002      	movs	r0, #2
 80017a4:	f7fe ffa7 	bl	80006f6 <lcd_print>
 80017a8:	e06f      	b.n	800188a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80017aa:	4b2d      	ldr	r3, [pc, #180]	; (8001860 <menu+0x10a8>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d113      	bne.n	80017da <menu+0x1022>
			if(dilSecim == 0) {
 80017b2:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <menu+0x1070>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d105      	bne.n	80017c6 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80017ba:	4a2a      	ldr	r2, [pc, #168]	; (8001864 <menu+0x10ac>)
 80017bc:	2101      	movs	r1, #1
 80017be:	2002      	movs	r0, #2
 80017c0:	f7fe ff99 	bl	80006f6 <lcd_print>
 80017c4:	e061      	b.n	800188a <menu+0x10d2>
			} else if(dilSecim == 1) {
 80017c6:	4b18      	ldr	r3, [pc, #96]	; (8001828 <menu+0x1070>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d15d      	bne.n	800188a <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80017ce:	4a26      	ldr	r2, [pc, #152]	; (8001868 <menu+0x10b0>)
 80017d0:	2101      	movs	r1, #1
 80017d2:	2002      	movs	r0, #2
 80017d4:	f7fe ff8f 	bl	80006f6 <lcd_print>
 80017d8:	e057      	b.n	800188a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80017da:	4b21      	ldr	r3, [pc, #132]	; (8001860 <menu+0x10a8>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d113      	bne.n	800180a <menu+0x1052>
			if(dilSecim == 0) {
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <menu+0x1070>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d105      	bne.n	80017f6 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80017ea:	4a20      	ldr	r2, [pc, #128]	; (800186c <menu+0x10b4>)
 80017ec:	2101      	movs	r1, #1
 80017ee:	2002      	movs	r0, #2
 80017f0:	f7fe ff81 	bl	80006f6 <lcd_print>
 80017f4:	e049      	b.n	800188a <menu+0x10d2>
			} else if(dilSecim == 1) {
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <menu+0x1070>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d145      	bne.n	800188a <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 80017fe:	4a1c      	ldr	r2, [pc, #112]	; (8001870 <menu+0x10b8>)
 8001800:	2101      	movs	r1, #1
 8001802:	2002      	movs	r0, #2
 8001804:	f7fe ff77 	bl	80006f6 <lcd_print>
 8001808:	e03f      	b.n	800188a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <menu+0x10a8>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b03      	cmp	r3, #3
 8001810:	d13b      	bne.n	800188a <menu+0x10d2>
			if(dilSecim == 0) {
 8001812:	4b05      	ldr	r3, [pc, #20]	; (8001828 <menu+0x1070>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d12e      	bne.n	8001878 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 800181a:	4a16      	ldr	r2, [pc, #88]	; (8001874 <menu+0x10bc>)
 800181c:	2101      	movs	r1, #1
 800181e:	2002      	movs	r0, #2
 8001820:	f7fe ff69 	bl	80006f6 <lcd_print>
 8001824:	e031      	b.n	800188a <menu+0x10d2>
 8001826:	bf00      	nop
 8001828:	20000b44 	.word	0x20000b44
 800182c:	0800c6c4 	.word	0x0800c6c4
 8001830:	20000b2b 	.word	0x20000b2b
 8001834:	0800c604 	.word	0x0800c604
 8001838:	0800c618 	.word	0x0800c618
 800183c:	0800c664 	.word	0x0800c664
 8001840:	0800c678 	.word	0x0800c678
 8001844:	40010800 	.word	0x40010800
 8001848:	20000b52 	.word	0x20000b52
 800184c:	20000ab8 	.word	0x20000ab8
 8001850:	20000b4f 	.word	0x20000b4f
 8001854:	20000b24 	.word	0x20000b24
 8001858:	0800c6d4 	.word	0x0800c6d4
 800185c:	0800c6e8 	.word	0x0800c6e8
 8001860:	20000b2c 	.word	0x20000b2c
 8001864:	0800c6fc 	.word	0x0800c6fc
 8001868:	0800c710 	.word	0x0800c710
 800186c:	0800c724 	.word	0x0800c724
 8001870:	0800c738 	.word	0x0800c738
 8001874:	0800c74c 	.word	0x0800c74c
			} else if(dilSecim == 1){
 8001878:	4b99      	ldr	r3, [pc, #612]	; (8001ae0 <menu+0x1328>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d104      	bne.n	800188a <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8001880:	4a98      	ldr	r2, [pc, #608]	; (8001ae4 <menu+0x132c>)
 8001882:	2101      	movs	r1, #1
 8001884:	2002      	movs	r0, #2
 8001886:	f7fe ff36 	bl	80006f6 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800188a:	2102      	movs	r1, #2
 800188c:	4896      	ldr	r0, [pc, #600]	; (8001ae8 <menu+0x1330>)
 800188e:	f006 ff7f 	bl	8008790 <HAL_GPIO_ReadPin>
 8001892:	4603      	mov	r3, r0
 8001894:	2b01      	cmp	r3, #1
 8001896:	d115      	bne.n	80018c4 <menu+0x110c>
 8001898:	4b94      	ldr	r3, [pc, #592]	; (8001aec <menu+0x1334>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	f083 0301 	eor.w	r3, r3, #1
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00e      	beq.n	80018c4 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80018a6:	4b92      	ldr	r3, [pc, #584]	; (8001af0 <menu+0x1338>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	3301      	adds	r3, #1
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b90      	ldr	r3, [pc, #576]	; (8001af0 <menu+0x1338>)
 80018b0:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80018b2:	4b8f      	ldr	r3, [pc, #572]	; (8001af0 <menu+0x1338>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d902      	bls.n	80018c0 <menu+0x1108>
				kapiSecimleri = 0;
 80018ba:	4b8d      	ldr	r3, [pc, #564]	; (8001af0 <menu+0x1338>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80018c0:	f003 faee 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80018c4:	2104      	movs	r1, #4
 80018c6:	4888      	ldr	r0, [pc, #544]	; (8001ae8 <menu+0x1330>)
 80018c8:	f006 ff62 	bl	8008790 <HAL_GPIO_ReadPin>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d115      	bne.n	80018fe <menu+0x1146>
 80018d2:	4b86      	ldr	r3, [pc, #536]	; (8001aec <menu+0x1334>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	f083 0301 	eor.w	r3, r3, #1
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00e      	beq.n	80018fe <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80018e0:	4b83      	ldr	r3, [pc, #524]	; (8001af0 <menu+0x1338>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	4b81      	ldr	r3, [pc, #516]	; (8001af0 <menu+0x1338>)
 80018ea:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80018ec:	4b80      	ldr	r3, [pc, #512]	; (8001af0 <menu+0x1338>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d902      	bls.n	80018fa <menu+0x1142>
		   		kapiSecimleri = 3;
 80018f4:	4b7e      	ldr	r3, [pc, #504]	; (8001af0 <menu+0x1338>)
 80018f6:	2203      	movs	r2, #3
 80018f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80018fa:	f003 fad1 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80018fe:	2108      	movs	r1, #8
 8001900:	4879      	ldr	r0, [pc, #484]	; (8001ae8 <menu+0x1330>)
 8001902:	f006 ff45 	bl	8008790 <HAL_GPIO_ReadPin>
 8001906:	4603      	mov	r3, r0
 8001908:	2b01      	cmp	r3, #1
 800190a:	d118      	bne.n	800193e <menu+0x1186>
 800190c:	4b77      	ldr	r3, [pc, #476]	; (8001aec <menu+0x1334>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	f083 0301 	eor.w	r3, r3, #1
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d011      	beq.n	800193e <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 800191a:	4b75      	ldr	r3, [pc, #468]	; (8001af0 <menu+0x1338>)
 800191c:	781a      	ldrb	r2, [r3, #0]
 800191e:	4b75      	ldr	r3, [pc, #468]	; (8001af4 <menu+0x133c>)
 8001920:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8001922:	4b73      	ldr	r3, [pc, #460]	; (8001af0 <menu+0x1338>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d006      	beq.n	8001938 <menu+0x1180>
				altLimit = 1;
 800192a:	4b73      	ldr	r3, [pc, #460]	; (8001af8 <menu+0x1340>)
 800192c:	2201      	movs	r2, #1
 800192e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001930:	4b71      	ldr	r3, [pc, #452]	; (8001af8 <menu+0x1340>)
 8001932:	781a      	ldrb	r2, [r3, #0]
 8001934:	4b6f      	ldr	r3, [pc, #444]	; (8001af4 <menu+0x133c>)
 8001936:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001938:	4b70      	ldr	r3, [pc, #448]	; (8001afc <menu+0x1344>)
 800193a:	2201      	movs	r2, #1
 800193c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800193e:	4b70      	ldr	r3, [pc, #448]	; (8001b00 <menu+0x1348>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b08      	cmp	r3, #8
 8001944:	f040 8092 	bne.w	8001a6c <menu+0x12b4>
		if(dilSecim == 0) {
 8001948:	4b65      	ldr	r3, [pc, #404]	; (8001ae0 <menu+0x1328>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d105      	bne.n	800195c <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8001950:	4a6c      	ldr	r2, [pc, #432]	; (8001b04 <menu+0x134c>)
 8001952:	2101      	movs	r1, #1
 8001954:	2001      	movs	r0, #1
 8001956:	f7fe fece 	bl	80006f6 <lcd_print>
 800195a:	e008      	b.n	800196e <menu+0x11b6>
		} else if(dilSecim == 1) {
 800195c:	4b60      	ldr	r3, [pc, #384]	; (8001ae0 <menu+0x1328>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d104      	bne.n	800196e <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8001964:	4a68      	ldr	r2, [pc, #416]	; (8001b08 <menu+0x1350>)
 8001966:	2101      	movs	r1, #1
 8001968:	2001      	movs	r0, #1
 800196a:	f7fe fec4 	bl	80006f6 <lcd_print>
		}

		if(kapiAcTipi == 0){
 800196e:	4b67      	ldr	r3, [pc, #412]	; (8001b0c <menu+0x1354>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d113      	bne.n	800199e <menu+0x11e6>
			if(dilSecim == 0) {
 8001976:	4b5a      	ldr	r3, [pc, #360]	; (8001ae0 <menu+0x1328>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d105      	bne.n	800198a <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 800197e:	4a64      	ldr	r2, [pc, #400]	; (8001b10 <menu+0x1358>)
 8001980:	2101      	movs	r1, #1
 8001982:	2002      	movs	r0, #2
 8001984:	f7fe feb7 	bl	80006f6 <lcd_print>
 8001988:	e020      	b.n	80019cc <menu+0x1214>
			} else if(dilSecim == 1) {
 800198a:	4b55      	ldr	r3, [pc, #340]	; (8001ae0 <menu+0x1328>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b01      	cmp	r3, #1
 8001990:	d11c      	bne.n	80019cc <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 8001992:	4a60      	ldr	r2, [pc, #384]	; (8001b14 <menu+0x135c>)
 8001994:	2101      	movs	r1, #1
 8001996:	2002      	movs	r0, #2
 8001998:	f7fe fead 	bl	80006f6 <lcd_print>
 800199c:	e016      	b.n	80019cc <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 800199e:	4b5b      	ldr	r3, [pc, #364]	; (8001b0c <menu+0x1354>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d112      	bne.n	80019cc <menu+0x1214>
			if(dilSecim == 0){
 80019a6:	4b4e      	ldr	r3, [pc, #312]	; (8001ae0 <menu+0x1328>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d105      	bne.n	80019ba <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80019ae:	4a5a      	ldr	r2, [pc, #360]	; (8001b18 <menu+0x1360>)
 80019b0:	2101      	movs	r1, #1
 80019b2:	2002      	movs	r0, #2
 80019b4:	f7fe fe9f 	bl	80006f6 <lcd_print>
 80019b8:	e008      	b.n	80019cc <menu+0x1214>
			} else if(dilSecim == 1){
 80019ba:	4b49      	ldr	r3, [pc, #292]	; (8001ae0 <menu+0x1328>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d104      	bne.n	80019cc <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80019c2:	4a56      	ldr	r2, [pc, #344]	; (8001b1c <menu+0x1364>)
 80019c4:	2101      	movs	r1, #1
 80019c6:	2002      	movs	r0, #2
 80019c8:	f7fe fe95 	bl	80006f6 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80019cc:	2102      	movs	r1, #2
 80019ce:	4846      	ldr	r0, [pc, #280]	; (8001ae8 <menu+0x1330>)
 80019d0:	f006 fede 	bl	8008790 <HAL_GPIO_ReadPin>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d115      	bne.n	8001a06 <menu+0x124e>
 80019da:	4b44      	ldr	r3, [pc, #272]	; (8001aec <menu+0x1334>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	f083 0301 	eor.w	r3, r3, #1
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00e      	beq.n	8001a06 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80019e8:	4b48      	ldr	r3, [pc, #288]	; (8001b0c <menu+0x1354>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	3301      	adds	r3, #1
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	4b46      	ldr	r3, [pc, #280]	; (8001b0c <menu+0x1354>)
 80019f2:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80019f4:	4b45      	ldr	r3, [pc, #276]	; (8001b0c <menu+0x1354>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d902      	bls.n	8001a02 <menu+0x124a>
				kapiAcTipi = 0;
 80019fc:	4b43      	ldr	r3, [pc, #268]	; (8001b0c <menu+0x1354>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a02:	f003 fa4d 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a06:	2104      	movs	r1, #4
 8001a08:	4837      	ldr	r0, [pc, #220]	; (8001ae8 <menu+0x1330>)
 8001a0a:	f006 fec1 	bl	8008790 <HAL_GPIO_ReadPin>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d115      	bne.n	8001a40 <menu+0x1288>
 8001a14:	4b35      	ldr	r3, [pc, #212]	; (8001aec <menu+0x1334>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	f083 0301 	eor.w	r3, r3, #1
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00e      	beq.n	8001a40 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8001a22:	4b3a      	ldr	r3, [pc, #232]	; (8001b0c <menu+0x1354>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	3b01      	subs	r3, #1
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <menu+0x1354>)
 8001a2c:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8001a2e:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <menu+0x1354>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d002      	beq.n	8001a3c <menu+0x1284>
		   		kapiAcTipi = 1;
 8001a36:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <menu+0x1354>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001a3c:	f003 fa30 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a40:	2108      	movs	r1, #8
 8001a42:	4829      	ldr	r0, [pc, #164]	; (8001ae8 <menu+0x1330>)
 8001a44:	f006 fea4 	bl	8008790 <HAL_GPIO_ReadPin>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d10e      	bne.n	8001a6c <menu+0x12b4>
 8001a4e:	4b27      	ldr	r3, [pc, #156]	; (8001aec <menu+0x1334>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	f083 0301 	eor.w	r3, r3, #1
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d007      	beq.n	8001a6c <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8001a5c:	4b2b      	ldr	r3, [pc, #172]	; (8001b0c <menu+0x1354>)
 8001a5e:	781a      	ldrb	r2, [r3, #0]
 8001a60:	4b24      	ldr	r3, [pc, #144]	; (8001af4 <menu+0x133c>)
 8001a62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8001a66:	4b25      	ldr	r3, [pc, #148]	; (8001afc <menu+0x1344>)
 8001a68:	2201      	movs	r2, #1
 8001a6a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <menu+0x1348>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b09      	cmp	r3, #9
 8001a72:	f040 80b9 	bne.w	8001be8 <menu+0x1430>
		if(dilSecim == 0){
 8001a76:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <menu+0x1328>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d105      	bne.n	8001a8a <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8001a7e:	4a28      	ldr	r2, [pc, #160]	; (8001b20 <menu+0x1368>)
 8001a80:	2101      	movs	r1, #1
 8001a82:	2001      	movs	r0, #1
 8001a84:	f7fe fe37 	bl	80006f6 <lcd_print>
 8001a88:	e008      	b.n	8001a9c <menu+0x12e4>
		} else if(dilSecim == 1) {
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <menu+0x1328>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d104      	bne.n	8001a9c <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8001a92:	4a24      	ldr	r2, [pc, #144]	; (8001b24 <menu+0x136c>)
 8001a94:	2101      	movs	r1, #1
 8001a96:	2001      	movs	r0, #1
 8001a98:	f7fe fe2d 	bl	80006f6 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8001a9c:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <menu+0x1370>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d105      	bne.n	8001ab0 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8001aa4:	4a21      	ldr	r2, [pc, #132]	; (8001b2c <menu+0x1374>)
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	2002      	movs	r0, #2
 8001aaa:	f7fe fe24 	bl	80006f6 <lcd_print>
 8001aae:	e04c      	b.n	8001b4a <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <menu+0x1370>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d13f      	bne.n	8001b38 <menu+0x1380>
			if(dilSecim == 0){
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <menu+0x1328>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d105      	bne.n	8001acc <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8001ac0:	4a1b      	ldr	r2, [pc, #108]	; (8001b30 <menu+0x1378>)
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	2002      	movs	r0, #2
 8001ac6:	f7fe fe16 	bl	80006f6 <lcd_print>
 8001aca:	e03e      	b.n	8001b4a <menu+0x1392>
			} else if(dilSecim == 1) {
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <menu+0x1328>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d13a      	bne.n	8001b4a <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8001ad4:	4a17      	ldr	r2, [pc, #92]	; (8001b34 <menu+0x137c>)
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	2002      	movs	r0, #2
 8001ada:	f7fe fe0c 	bl	80006f6 <lcd_print>
 8001ade:	e034      	b.n	8001b4a <menu+0x1392>
 8001ae0:	20000b44 	.word	0x20000b44
 8001ae4:	0800c760 	.word	0x0800c760
 8001ae8:	40010800 	.word	0x40010800
 8001aec:	20000b52 	.word	0x20000b52
 8001af0:	20000b2c 	.word	0x20000b2c
 8001af4:	20000ab8 	.word	0x20000ab8
 8001af8:	20000b2a 	.word	0x20000b2a
 8001afc:	20000b4f 	.word	0x20000b4f
 8001b00:	20000b24 	.word	0x20000b24
 8001b04:	0800c774 	.word	0x0800c774
 8001b08:	0800c788 	.word	0x0800c788
 8001b0c:	20000b30 	.word	0x20000b30
 8001b10:	0800c79c 	.word	0x0800c79c
 8001b14:	0800c7ac 	.word	0x0800c7ac
 8001b18:	0800c7bc 	.word	0x0800c7bc
 8001b1c:	0800c7d0 	.word	0x0800c7d0
 8001b20:	0800c7e4 	.word	0x0800c7e4
 8001b24:	0800c7f8 	.word	0x0800c7f8
 8001b28:	20000b2d 	.word	0x20000b2d
 8001b2c:	0800c80c 	.word	0x0800c80c
 8001b30:	0800c820 	.word	0x0800c820
 8001b34:	0800c830 	.word	0x0800c830
			}
		} else if(kapi1Tip == 2) {
 8001b38:	4b8a      	ldr	r3, [pc, #552]	; (8001d64 <menu+0x15ac>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d104      	bne.n	8001b4a <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8001b40:	4a89      	ldr	r2, [pc, #548]	; (8001d68 <menu+0x15b0>)
 8001b42:	2101      	movs	r1, #1
 8001b44:	2002      	movs	r0, #2
 8001b46:	f7fe fdd6 	bl	80006f6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	4887      	ldr	r0, [pc, #540]	; (8001d6c <menu+0x15b4>)
 8001b4e:	f006 fe1f 	bl	8008790 <HAL_GPIO_ReadPin>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d115      	bne.n	8001b84 <menu+0x13cc>
 8001b58:	4b85      	ldr	r3, [pc, #532]	; (8001d70 <menu+0x15b8>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	f083 0301 	eor.w	r3, r3, #1
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d00e      	beq.n	8001b84 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8001b66:	4b7f      	ldr	r3, [pc, #508]	; (8001d64 <menu+0x15ac>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	4b7d      	ldr	r3, [pc, #500]	; (8001d64 <menu+0x15ac>)
 8001b70:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8001b72:	4b7c      	ldr	r3, [pc, #496]	; (8001d64 <menu+0x15ac>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d902      	bls.n	8001b80 <menu+0x13c8>
				kapi1Tip = 0;
 8001b7a:	4b7a      	ldr	r3, [pc, #488]	; (8001d64 <menu+0x15ac>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b80:	f003 f98e 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b84:	2104      	movs	r1, #4
 8001b86:	4879      	ldr	r0, [pc, #484]	; (8001d6c <menu+0x15b4>)
 8001b88:	f006 fe02 	bl	8008790 <HAL_GPIO_ReadPin>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d115      	bne.n	8001bbe <menu+0x1406>
 8001b92:	4b77      	ldr	r3, [pc, #476]	; (8001d70 <menu+0x15b8>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	f083 0301 	eor.w	r3, r3, #1
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d00e      	beq.n	8001bbe <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8001ba0:	4b70      	ldr	r3, [pc, #448]	; (8001d64 <menu+0x15ac>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b6e      	ldr	r3, [pc, #440]	; (8001d64 <menu+0x15ac>)
 8001baa:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8001bac:	4b6d      	ldr	r3, [pc, #436]	; (8001d64 <menu+0x15ac>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d902      	bls.n	8001bba <menu+0x1402>
		   		kapi1Tip = 2;
 8001bb4:	4b6b      	ldr	r3, [pc, #428]	; (8001d64 <menu+0x15ac>)
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001bba:	f003 f971 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bbe:	2108      	movs	r1, #8
 8001bc0:	486a      	ldr	r0, [pc, #424]	; (8001d6c <menu+0x15b4>)
 8001bc2:	f006 fde5 	bl	8008790 <HAL_GPIO_ReadPin>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d10d      	bne.n	8001be8 <menu+0x1430>
 8001bcc:	4b68      	ldr	r3, [pc, #416]	; (8001d70 <menu+0x15b8>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	f083 0301 	eor.w	r3, r3, #1
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d006      	beq.n	8001be8 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8001bda:	4b62      	ldr	r3, [pc, #392]	; (8001d64 <menu+0x15ac>)
 8001bdc:	781a      	ldrb	r2, [r3, #0]
 8001bde:	4b65      	ldr	r3, [pc, #404]	; (8001d74 <menu+0x15bc>)
 8001be0:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8001be2:	4b65      	ldr	r3, [pc, #404]	; (8001d78 <menu+0x15c0>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8001be8:	4b64      	ldr	r3, [pc, #400]	; (8001d7c <menu+0x15c4>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b0a      	cmp	r3, #10
 8001bee:	d17f      	bne.n	8001cf0 <menu+0x1538>
		if(dilSecim == 0) {
 8001bf0:	4b63      	ldr	r3, [pc, #396]	; (8001d80 <menu+0x15c8>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d10a      	bne.n	8001c0e <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8001bf8:	4a62      	ldr	r2, [pc, #392]	; (8001d84 <menu+0x15cc>)
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	2001      	movs	r0, #1
 8001bfe:	f7fe fd7a 	bl	80006f6 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001c02:	4a61      	ldr	r2, [pc, #388]	; (8001d88 <menu+0x15d0>)
 8001c04:	2101      	movs	r1, #1
 8001c06:	2002      	movs	r0, #2
 8001c08:	f7fe fd75 	bl	80006f6 <lcd_print>
 8001c0c:	e00d      	b.n	8001c2a <menu+0x1472>
		} else if(dilSecim == 1) {
 8001c0e:	4b5c      	ldr	r3, [pc, #368]	; (8001d80 <menu+0x15c8>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d109      	bne.n	8001c2a <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8001c16:	4a5d      	ldr	r2, [pc, #372]	; (8001d8c <menu+0x15d4>)
 8001c18:	2101      	movs	r1, #1
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f7fe fd6b 	bl	80006f6 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001c20:	4a5b      	ldr	r2, [pc, #364]	; (8001d90 <menu+0x15d8>)
 8001c22:	2101      	movs	r1, #1
 8001c24:	2002      	movs	r0, #2
 8001c26:	f7fe fd66 	bl	80006f6 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8001c2a:	4b5a      	ldr	r3, [pc, #360]	; (8001d94 <menu+0x15dc>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	220a      	movs	r2, #10
 8001c30:	4959      	ldr	r1, [pc, #356]	; (8001d98 <menu+0x15e0>)
 8001c32:	4618      	mov	r0, r3
 8001c34:	f009 fdd8 	bl	800b7e8 <itoa>
		lcd_print(2,16,snum);
 8001c38:	4a57      	ldr	r2, [pc, #348]	; (8001d98 <menu+0x15e0>)
 8001c3a:	2110      	movs	r1, #16
 8001c3c:	2002      	movs	r0, #2
 8001c3e:	f7fe fd5a 	bl	80006f6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001c42:	2102      	movs	r1, #2
 8001c44:	4849      	ldr	r0, [pc, #292]	; (8001d6c <menu+0x15b4>)
 8001c46:	f006 fda3 	bl	8008790 <HAL_GPIO_ReadPin>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d119      	bne.n	8001c84 <menu+0x14cc>
 8001c50:	4b47      	ldr	r3, [pc, #284]	; (8001d70 <menu+0x15b8>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	f083 0301 	eor.w	r3, r3, #1
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d012      	beq.n	8001c84 <menu+0x14cc>
 8001c5e:	4b41      	ldr	r3, [pc, #260]	; (8001d64 <menu+0x15ac>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d10e      	bne.n	8001c84 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8001c66:	4b4b      	ldr	r3, [pc, #300]	; (8001d94 <menu+0x15dc>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4b49      	ldr	r3, [pc, #292]	; (8001d94 <menu+0x15dc>)
 8001c70:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8001c72:	4b48      	ldr	r3, [pc, #288]	; (8001d94 <menu+0x15dc>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	d902      	bls.n	8001c80 <menu+0x14c8>
				kapi1AcSure = 0;
 8001c7a:	4b46      	ldr	r3, [pc, #280]	; (8001d94 <menu+0x15dc>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c80:	f003 f90e 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001c84:	2104      	movs	r1, #4
 8001c86:	4839      	ldr	r0, [pc, #228]	; (8001d6c <menu+0x15b4>)
 8001c88:	f006 fd82 	bl	8008790 <HAL_GPIO_ReadPin>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d119      	bne.n	8001cc6 <menu+0x150e>
 8001c92:	4b37      	ldr	r3, [pc, #220]	; (8001d70 <menu+0x15b8>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	f083 0301 	eor.w	r3, r3, #1
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d012      	beq.n	8001cc6 <menu+0x150e>
 8001ca0:	4b30      	ldr	r3, [pc, #192]	; (8001d64 <menu+0x15ac>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d10e      	bne.n	8001cc6 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8001ca8:	4b3a      	ldr	r3, [pc, #232]	; (8001d94 <menu+0x15dc>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	4b38      	ldr	r3, [pc, #224]	; (8001d94 <menu+0x15dc>)
 8001cb2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8001cb4:	4b37      	ldr	r3, [pc, #220]	; (8001d94 <menu+0x15dc>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b06      	cmp	r3, #6
 8001cba:	d902      	bls.n	8001cc2 <menu+0x150a>
		   		kapi1AcSure = 5;
 8001cbc:	4b35      	ldr	r3, [pc, #212]	; (8001d94 <menu+0x15dc>)
 8001cbe:	2205      	movs	r2, #5
 8001cc0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001cc2:	f003 f8ed 	bl	8004ea0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cc6:	2108      	movs	r1, #8
 8001cc8:	4828      	ldr	r0, [pc, #160]	; (8001d6c <menu+0x15b4>)
 8001cca:	f006 fd61 	bl	8008790 <HAL_GPIO_ReadPin>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d10d      	bne.n	8001cf0 <menu+0x1538>
 8001cd4:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <menu+0x15b8>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	f083 0301 	eor.w	r3, r3, #1
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d006      	beq.n	8001cf0 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8001ce2:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <menu+0x15dc>)
 8001ce4:	781a      	ldrb	r2, [r3, #0]
 8001ce6:	4b23      	ldr	r3, [pc, #140]	; (8001d74 <menu+0x15bc>)
 8001ce8:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8001cea:	4b23      	ldr	r3, [pc, #140]	; (8001d78 <menu+0x15c0>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8001cf0:	4b22      	ldr	r3, [pc, #136]	; (8001d7c <menu+0x15c4>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2b0b      	cmp	r3, #11
 8001cf6:	f040 80b5 	bne.w	8001e64 <menu+0x16ac>
		if(dilSecim == 0) {
 8001cfa:	4b21      	ldr	r3, [pc, #132]	; (8001d80 <menu+0x15c8>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d105      	bne.n	8001d0e <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8001d02:	4a26      	ldr	r2, [pc, #152]	; (8001d9c <menu+0x15e4>)
 8001d04:	2101      	movs	r1, #1
 8001d06:	2001      	movs	r0, #1
 8001d08:	f7fe fcf5 	bl	80006f6 <lcd_print>
 8001d0c:	e008      	b.n	8001d20 <menu+0x1568>
		} else if(dilSecim == 1) {
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <menu+0x15c8>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d104      	bne.n	8001d20 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8001d16:	4a22      	ldr	r2, [pc, #136]	; (8001da0 <menu+0x15e8>)
 8001d18:	2101      	movs	r1, #1
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f7fe fceb 	bl	80006f6 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8001d20:	4b20      	ldr	r3, [pc, #128]	; (8001da4 <menu+0x15ec>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d105      	bne.n	8001d34 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8001d28:	4a1f      	ldr	r2, [pc, #124]	; (8001da8 <menu+0x15f0>)
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	2002      	movs	r0, #2
 8001d2e:	f7fe fce2 	bl	80006f6 <lcd_print>
 8001d32:	e048      	b.n	8001dc6 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <menu+0x15ec>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d13b      	bne.n	8001db4 <menu+0x15fc>
			if(dilSecim == 0) {
 8001d3c:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <menu+0x15c8>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d105      	bne.n	8001d50 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8001d44:	4a19      	ldr	r2, [pc, #100]	; (8001dac <menu+0x15f4>)
 8001d46:	2101      	movs	r1, #1
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f7fe fcd4 	bl	80006f6 <lcd_print>
 8001d4e:	e03a      	b.n	8001dc6 <menu+0x160e>
			} else if(dilSecim == 1) {
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <menu+0x15c8>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d136      	bne.n	8001dc6 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8001d58:	4a15      	ldr	r2, [pc, #84]	; (8001db0 <menu+0x15f8>)
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	2002      	movs	r0, #2
 8001d5e:	f7fe fcca 	bl	80006f6 <lcd_print>
 8001d62:	e030      	b.n	8001dc6 <menu+0x160e>
 8001d64:	20000b2d 	.word	0x20000b2d
 8001d68:	0800c844 	.word	0x0800c844
 8001d6c:	40010800 	.word	0x40010800
 8001d70:	20000b52 	.word	0x20000b52
 8001d74:	20000ab8 	.word	0x20000ab8
 8001d78:	20000b4f 	.word	0x20000b4f
 8001d7c:	20000b24 	.word	0x20000b24
 8001d80:	20000b44 	.word	0x20000b44
 8001d84:	0800c854 	.word	0x0800c854
 8001d88:	0800c868 	.word	0x0800c868
 8001d8c:	0800c878 	.word	0x0800c878
 8001d90:	0800c88c 	.word	0x0800c88c
 8001d94:	20000b3d 	.word	0x20000b3d
 8001d98:	20000af8 	.word	0x20000af8
 8001d9c:	0800c89c 	.word	0x0800c89c
 8001da0:	0800c8b0 	.word	0x0800c8b0
 8001da4:	20000b2e 	.word	0x20000b2e
 8001da8:	0800c80c 	.word	0x0800c80c
 8001dac:	0800c820 	.word	0x0800c820
 8001db0:	0800c830 	.word	0x0800c830
			}
		} else if(kapi2Tip == 2) {
 8001db4:	4b8a      	ldr	r3, [pc, #552]	; (8001fe0 <menu+0x1828>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d104      	bne.n	8001dc6 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8001dbc:	4a89      	ldr	r2, [pc, #548]	; (8001fe4 <menu+0x182c>)
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	2002      	movs	r0, #2
 8001dc2:	f7fe fc98 	bl	80006f6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dc6:	2102      	movs	r1, #2
 8001dc8:	4887      	ldr	r0, [pc, #540]	; (8001fe8 <menu+0x1830>)
 8001dca:	f006 fce1 	bl	8008790 <HAL_GPIO_ReadPin>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d115      	bne.n	8001e00 <menu+0x1648>
 8001dd4:	4b85      	ldr	r3, [pc, #532]	; (8001fec <menu+0x1834>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	f083 0301 	eor.w	r3, r3, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00e      	beq.n	8001e00 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8001de2:	4b7f      	ldr	r3, [pc, #508]	; (8001fe0 <menu+0x1828>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	3301      	adds	r3, #1
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4b7d      	ldr	r3, [pc, #500]	; (8001fe0 <menu+0x1828>)
 8001dec:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8001dee:	4b7c      	ldr	r3, [pc, #496]	; (8001fe0 <menu+0x1828>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d902      	bls.n	8001dfc <menu+0x1644>
				kapi2Tip = 0;
 8001df6:	4b7a      	ldr	r3, [pc, #488]	; (8001fe0 <menu+0x1828>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dfc:	f003 f850 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e00:	2104      	movs	r1, #4
 8001e02:	4879      	ldr	r0, [pc, #484]	; (8001fe8 <menu+0x1830>)
 8001e04:	f006 fcc4 	bl	8008790 <HAL_GPIO_ReadPin>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d115      	bne.n	8001e3a <menu+0x1682>
 8001e0e:	4b77      	ldr	r3, [pc, #476]	; (8001fec <menu+0x1834>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	f083 0301 	eor.w	r3, r3, #1
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00e      	beq.n	8001e3a <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8001e1c:	4b70      	ldr	r3, [pc, #448]	; (8001fe0 <menu+0x1828>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	3b01      	subs	r3, #1
 8001e22:	b2da      	uxtb	r2, r3
 8001e24:	4b6e      	ldr	r3, [pc, #440]	; (8001fe0 <menu+0x1828>)
 8001e26:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8001e28:	4b6d      	ldr	r3, [pc, #436]	; (8001fe0 <menu+0x1828>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d902      	bls.n	8001e36 <menu+0x167e>
		   		kapi2Tip = 2;
 8001e30:	4b6b      	ldr	r3, [pc, #428]	; (8001fe0 <menu+0x1828>)
 8001e32:	2202      	movs	r2, #2
 8001e34:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e36:	f003 f833 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e3a:	2108      	movs	r1, #8
 8001e3c:	486a      	ldr	r0, [pc, #424]	; (8001fe8 <menu+0x1830>)
 8001e3e:	f006 fca7 	bl	8008790 <HAL_GPIO_ReadPin>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d10d      	bne.n	8001e64 <menu+0x16ac>
 8001e48:	4b68      	ldr	r3, [pc, #416]	; (8001fec <menu+0x1834>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	f083 0301 	eor.w	r3, r3, #1
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d006      	beq.n	8001e64 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8001e56:	4b62      	ldr	r3, [pc, #392]	; (8001fe0 <menu+0x1828>)
 8001e58:	781a      	ldrb	r2, [r3, #0]
 8001e5a:	4b65      	ldr	r3, [pc, #404]	; (8001ff0 <menu+0x1838>)
 8001e5c:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8001e5e:	4b65      	ldr	r3, [pc, #404]	; (8001ff4 <menu+0x183c>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8001e64:	4b64      	ldr	r3, [pc, #400]	; (8001ff8 <menu+0x1840>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b0c      	cmp	r3, #12
 8001e6a:	d17f      	bne.n	8001f6c <menu+0x17b4>
		if(dilSecim == 0) {
 8001e6c:	4b63      	ldr	r3, [pc, #396]	; (8001ffc <menu+0x1844>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10a      	bne.n	8001e8a <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8001e74:	4a62      	ldr	r2, [pc, #392]	; (8002000 <menu+0x1848>)
 8001e76:	2101      	movs	r1, #1
 8001e78:	2001      	movs	r0, #1
 8001e7a:	f7fe fc3c 	bl	80006f6 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001e7e:	4a61      	ldr	r2, [pc, #388]	; (8002004 <menu+0x184c>)
 8001e80:	2101      	movs	r1, #1
 8001e82:	2002      	movs	r0, #2
 8001e84:	f7fe fc37 	bl	80006f6 <lcd_print>
 8001e88:	e00d      	b.n	8001ea6 <menu+0x16ee>
		} else if(dilSecim == 1) {
 8001e8a:	4b5c      	ldr	r3, [pc, #368]	; (8001ffc <menu+0x1844>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d109      	bne.n	8001ea6 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8001e92:	4a5d      	ldr	r2, [pc, #372]	; (8002008 <menu+0x1850>)
 8001e94:	2101      	movs	r1, #1
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7fe fc2d 	bl	80006f6 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001e9c:	4a5b      	ldr	r2, [pc, #364]	; (800200c <menu+0x1854>)
 8001e9e:	2101      	movs	r1, #1
 8001ea0:	2002      	movs	r0, #2
 8001ea2:	f7fe fc28 	bl	80006f6 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8001ea6:	4b5a      	ldr	r3, [pc, #360]	; (8002010 <menu+0x1858>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	220a      	movs	r2, #10
 8001eac:	4959      	ldr	r1, [pc, #356]	; (8002014 <menu+0x185c>)
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f009 fc9a 	bl	800b7e8 <itoa>
		lcd_print(2,16,snum);
 8001eb4:	4a57      	ldr	r2, [pc, #348]	; (8002014 <menu+0x185c>)
 8001eb6:	2110      	movs	r1, #16
 8001eb8:	2002      	movs	r0, #2
 8001eba:	f7fe fc1c 	bl	80006f6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	4849      	ldr	r0, [pc, #292]	; (8001fe8 <menu+0x1830>)
 8001ec2:	f006 fc65 	bl	8008790 <HAL_GPIO_ReadPin>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d119      	bne.n	8001f00 <menu+0x1748>
 8001ecc:	4b47      	ldr	r3, [pc, #284]	; (8001fec <menu+0x1834>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	f083 0301 	eor.w	r3, r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d012      	beq.n	8001f00 <menu+0x1748>
 8001eda:	4b41      	ldr	r3, [pc, #260]	; (8001fe0 <menu+0x1828>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10e      	bne.n	8001f00 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8001ee2:	4b4b      	ldr	r3, [pc, #300]	; (8002010 <menu+0x1858>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b49      	ldr	r3, [pc, #292]	; (8002010 <menu+0x1858>)
 8001eec:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8001eee:	4b48      	ldr	r3, [pc, #288]	; (8002010 <menu+0x1858>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b05      	cmp	r3, #5
 8001ef4:	d902      	bls.n	8001efc <menu+0x1744>
				kapi2AcSure = 0;
 8001ef6:	4b46      	ldr	r3, [pc, #280]	; (8002010 <menu+0x1858>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001efc:	f002 ffd0 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001f00:	2104      	movs	r1, #4
 8001f02:	4839      	ldr	r0, [pc, #228]	; (8001fe8 <menu+0x1830>)
 8001f04:	f006 fc44 	bl	8008790 <HAL_GPIO_ReadPin>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d119      	bne.n	8001f42 <menu+0x178a>
 8001f0e:	4b37      	ldr	r3, [pc, #220]	; (8001fec <menu+0x1834>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	f083 0301 	eor.w	r3, r3, #1
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d012      	beq.n	8001f42 <menu+0x178a>
 8001f1c:	4b30      	ldr	r3, [pc, #192]	; (8001fe0 <menu+0x1828>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d10e      	bne.n	8001f42 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8001f24:	4b3a      	ldr	r3, [pc, #232]	; (8002010 <menu+0x1858>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b2da      	uxtb	r2, r3
 8001f2c:	4b38      	ldr	r3, [pc, #224]	; (8002010 <menu+0x1858>)
 8001f2e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8001f30:	4b37      	ldr	r3, [pc, #220]	; (8002010 <menu+0x1858>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b06      	cmp	r3, #6
 8001f36:	d902      	bls.n	8001f3e <menu+0x1786>
		   		kapi2AcSure = 5;
 8001f38:	4b35      	ldr	r3, [pc, #212]	; (8002010 <menu+0x1858>)
 8001f3a:	2205      	movs	r2, #5
 8001f3c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f3e:	f002 ffaf 	bl	8004ea0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f42:	2108      	movs	r1, #8
 8001f44:	4828      	ldr	r0, [pc, #160]	; (8001fe8 <menu+0x1830>)
 8001f46:	f006 fc23 	bl	8008790 <HAL_GPIO_ReadPin>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d10d      	bne.n	8001f6c <menu+0x17b4>
 8001f50:	4b26      	ldr	r3, [pc, #152]	; (8001fec <menu+0x1834>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	f083 0301 	eor.w	r3, r3, #1
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d006      	beq.n	8001f6c <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8001f5e:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <menu+0x1858>)
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <menu+0x1838>)
 8001f64:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8001f66:	4b23      	ldr	r3, [pc, #140]	; (8001ff4 <menu+0x183c>)
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8001f6c:	4b22      	ldr	r3, [pc, #136]	; (8001ff8 <menu+0x1840>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b0d      	cmp	r3, #13
 8001f72:	f040 80b5 	bne.w	80020e0 <menu+0x1928>
		if(dilSecim == 0) {
 8001f76:	4b21      	ldr	r3, [pc, #132]	; (8001ffc <menu+0x1844>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d105      	bne.n	8001f8a <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8001f7e:	4a26      	ldr	r2, [pc, #152]	; (8002018 <menu+0x1860>)
 8001f80:	2101      	movs	r1, #1
 8001f82:	2001      	movs	r0, #1
 8001f84:	f7fe fbb7 	bl	80006f6 <lcd_print>
 8001f88:	e008      	b.n	8001f9c <menu+0x17e4>
		} else if(dilSecim == 1){
 8001f8a:	4b1c      	ldr	r3, [pc, #112]	; (8001ffc <menu+0x1844>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d104      	bne.n	8001f9c <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8001f92:	4a22      	ldr	r2, [pc, #136]	; (800201c <menu+0x1864>)
 8001f94:	2101      	movs	r1, #1
 8001f96:	2001      	movs	r0, #1
 8001f98:	f7fe fbad 	bl	80006f6 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8001f9c:	4b20      	ldr	r3, [pc, #128]	; (8002020 <menu+0x1868>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d105      	bne.n	8001fb0 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8001fa4:	4a1f      	ldr	r2, [pc, #124]	; (8002024 <menu+0x186c>)
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	2002      	movs	r0, #2
 8001faa:	f7fe fba4 	bl	80006f6 <lcd_print>
 8001fae:	e048      	b.n	8002042 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8001fb0:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <menu+0x1868>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d13b      	bne.n	8002030 <menu+0x1878>
			if(dilSecim == 0) {
 8001fb8:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <menu+0x1844>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d105      	bne.n	8001fcc <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8001fc0:	4a19      	ldr	r2, [pc, #100]	; (8002028 <menu+0x1870>)
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	f7fe fb96 	bl	80006f6 <lcd_print>
 8001fca:	e03a      	b.n	8002042 <menu+0x188a>
			} else if(dilSecim == 1) {
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <menu+0x1844>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d136      	bne.n	8002042 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8001fd4:	4a15      	ldr	r2, [pc, #84]	; (800202c <menu+0x1874>)
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	2002      	movs	r0, #2
 8001fda:	f7fe fb8c 	bl	80006f6 <lcd_print>
 8001fde:	e030      	b.n	8002042 <menu+0x188a>
 8001fe0:	20000b2e 	.word	0x20000b2e
 8001fe4:	0800c844 	.word	0x0800c844
 8001fe8:	40010800 	.word	0x40010800
 8001fec:	20000b52 	.word	0x20000b52
 8001ff0:	20000ab8 	.word	0x20000ab8
 8001ff4:	20000b4f 	.word	0x20000b4f
 8001ff8:	20000b24 	.word	0x20000b24
 8001ffc:	20000b44 	.word	0x20000b44
 8002000:	0800c8c4 	.word	0x0800c8c4
 8002004:	0800c868 	.word	0x0800c868
 8002008:	0800c8d8 	.word	0x0800c8d8
 800200c:	0800c88c 	.word	0x0800c88c
 8002010:	20000b3e 	.word	0x20000b3e
 8002014:	20000af8 	.word	0x20000af8
 8002018:	0800c8ec 	.word	0x0800c8ec
 800201c:	0800c900 	.word	0x0800c900
 8002020:	20000b2f 	.word	0x20000b2f
 8002024:	0800c80c 	.word	0x0800c80c
 8002028:	0800c820 	.word	0x0800c820
 800202c:	0800c830 	.word	0x0800c830
			}
		} else if(kapitablaTip == 2) {
 8002030:	4b5b      	ldr	r3, [pc, #364]	; (80021a0 <menu+0x19e8>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d104      	bne.n	8002042 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002038:	4a5a      	ldr	r2, [pc, #360]	; (80021a4 <menu+0x19ec>)
 800203a:	2101      	movs	r1, #1
 800203c:	2002      	movs	r0, #2
 800203e:	f7fe fb5a 	bl	80006f6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002042:	2102      	movs	r1, #2
 8002044:	4858      	ldr	r0, [pc, #352]	; (80021a8 <menu+0x19f0>)
 8002046:	f006 fba3 	bl	8008790 <HAL_GPIO_ReadPin>
 800204a:	4603      	mov	r3, r0
 800204c:	2b01      	cmp	r3, #1
 800204e:	d115      	bne.n	800207c <menu+0x18c4>
 8002050:	4b56      	ldr	r3, [pc, #344]	; (80021ac <menu+0x19f4>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	f083 0301 	eor.w	r3, r3, #1
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00e      	beq.n	800207c <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 800205e:	4b50      	ldr	r3, [pc, #320]	; (80021a0 <menu+0x19e8>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	3301      	adds	r3, #1
 8002064:	b2da      	uxtb	r2, r3
 8002066:	4b4e      	ldr	r3, [pc, #312]	; (80021a0 <menu+0x19e8>)
 8002068:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 800206a:	4b4d      	ldr	r3, [pc, #308]	; (80021a0 <menu+0x19e8>)
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d902      	bls.n	8002078 <menu+0x18c0>
				kapitablaTip = 0;
 8002072:	4b4b      	ldr	r3, [pc, #300]	; (80021a0 <menu+0x19e8>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002078:	f002 ff12 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800207c:	2104      	movs	r1, #4
 800207e:	484a      	ldr	r0, [pc, #296]	; (80021a8 <menu+0x19f0>)
 8002080:	f006 fb86 	bl	8008790 <HAL_GPIO_ReadPin>
 8002084:	4603      	mov	r3, r0
 8002086:	2b01      	cmp	r3, #1
 8002088:	d115      	bne.n	80020b6 <menu+0x18fe>
 800208a:	4b48      	ldr	r3, [pc, #288]	; (80021ac <menu+0x19f4>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	f083 0301 	eor.w	r3, r3, #1
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00e      	beq.n	80020b6 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002098:	4b41      	ldr	r3, [pc, #260]	; (80021a0 <menu+0x19e8>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	3b01      	subs	r3, #1
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	4b3f      	ldr	r3, [pc, #252]	; (80021a0 <menu+0x19e8>)
 80020a2:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 80020a4:	4b3e      	ldr	r3, [pc, #248]	; (80021a0 <menu+0x19e8>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d902      	bls.n	80020b2 <menu+0x18fa>
		   		kapitablaTip = 2;
 80020ac:	4b3c      	ldr	r3, [pc, #240]	; (80021a0 <menu+0x19e8>)
 80020ae:	2202      	movs	r2, #2
 80020b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020b2:	f002 fef5 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020b6:	2108      	movs	r1, #8
 80020b8:	483b      	ldr	r0, [pc, #236]	; (80021a8 <menu+0x19f0>)
 80020ba:	f006 fb69 	bl	8008790 <HAL_GPIO_ReadPin>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d10d      	bne.n	80020e0 <menu+0x1928>
 80020c4:	4b39      	ldr	r3, [pc, #228]	; (80021ac <menu+0x19f4>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	f083 0301 	eor.w	r3, r3, #1
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d006      	beq.n	80020e0 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 80020d2:	4b33      	ldr	r3, [pc, #204]	; (80021a0 <menu+0x19e8>)
 80020d4:	781a      	ldrb	r2, [r3, #0]
 80020d6:	4b36      	ldr	r3, [pc, #216]	; (80021b0 <menu+0x19f8>)
 80020d8:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 80020da:	4b36      	ldr	r3, [pc, #216]	; (80021b4 <menu+0x19fc>)
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80020e0:	4b35      	ldr	r3, [pc, #212]	; (80021b8 <menu+0x1a00>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b0e      	cmp	r3, #14
 80020e6:	f040 80f2 	bne.w	80022ce <menu+0x1b16>
		if(dilSecim == 0) {
 80020ea:	4b34      	ldr	r3, [pc, #208]	; (80021bc <menu+0x1a04>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d105      	bne.n	80020fe <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 80020f2:	4a33      	ldr	r2, [pc, #204]	; (80021c0 <menu+0x1a08>)
 80020f4:	2101      	movs	r1, #1
 80020f6:	2001      	movs	r0, #1
 80020f8:	f7fe fafd 	bl	80006f6 <lcd_print>
 80020fc:	e008      	b.n	8002110 <menu+0x1958>
		} else if(dilSecim == 1) {
 80020fe:	4b2f      	ldr	r3, [pc, #188]	; (80021bc <menu+0x1a04>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d104      	bne.n	8002110 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002106:	4a2f      	ldr	r2, [pc, #188]	; (80021c4 <menu+0x1a0c>)
 8002108:	2101      	movs	r1, #1
 800210a:	2001      	movs	r0, #1
 800210c:	f7fe faf3 	bl	80006f6 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002110:	4b2d      	ldr	r3, [pc, #180]	; (80021c8 <menu+0x1a10>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d113      	bne.n	8002140 <menu+0x1988>
			if(dilSecim == 0){
 8002118:	4b28      	ldr	r3, [pc, #160]	; (80021bc <menu+0x1a04>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d105      	bne.n	800212c <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002120:	4a2a      	ldr	r2, [pc, #168]	; (80021cc <menu+0x1a14>)
 8002122:	2101      	movs	r1, #1
 8002124:	2002      	movs	r0, #2
 8002126:	f7fe fae6 	bl	80006f6 <lcd_print>
 800212a:	e071      	b.n	8002210 <menu+0x1a58>
			} else if(dilSecim == 1) {
 800212c:	4b23      	ldr	r3, [pc, #140]	; (80021bc <menu+0x1a04>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d16d      	bne.n	8002210 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002134:	4a26      	ldr	r2, [pc, #152]	; (80021d0 <menu+0x1a18>)
 8002136:	2101      	movs	r1, #1
 8002138:	2002      	movs	r0, #2
 800213a:	f7fe fadc 	bl	80006f6 <lcd_print>
 800213e:	e067      	b.n	8002210 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002140:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <menu+0x1a10>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d112      	bne.n	800216e <menu+0x19b6>
			if(dilSecim == 0){
 8002148:	4b1c      	ldr	r3, [pc, #112]	; (80021bc <menu+0x1a04>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d104      	bne.n	800215a <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002150:	4a20      	ldr	r2, [pc, #128]	; (80021d4 <menu+0x1a1c>)
 8002152:	2101      	movs	r1, #1
 8002154:	2002      	movs	r0, #2
 8002156:	f7fe face 	bl	80006f6 <lcd_print>
			}
			if(dilSecim == 1){
 800215a:	4b18      	ldr	r3, [pc, #96]	; (80021bc <menu+0x1a04>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d156      	bne.n	8002210 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002162:	4a1d      	ldr	r2, [pc, #116]	; (80021d8 <menu+0x1a20>)
 8002164:	2101      	movs	r1, #1
 8002166:	2002      	movs	r0, #2
 8002168:	f7fe fac5 	bl	80006f6 <lcd_print>
 800216c:	e050      	b.n	8002210 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 800216e:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <menu+0x1a10>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d136      	bne.n	80021e4 <menu+0x1a2c>
			if(dilSecim == 0){
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <menu+0x1a04>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d105      	bne.n	800218a <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 800217e:	4a17      	ldr	r2, [pc, #92]	; (80021dc <menu+0x1a24>)
 8002180:	2101      	movs	r1, #1
 8002182:	2002      	movs	r0, #2
 8002184:	f7fe fab7 	bl	80006f6 <lcd_print>
 8002188:	e042      	b.n	8002210 <menu+0x1a58>
			} else if(dilSecim == 1) {
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <menu+0x1a04>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d13e      	bne.n	8002210 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002192:	4a13      	ldr	r2, [pc, #76]	; (80021e0 <menu+0x1a28>)
 8002194:	2101      	movs	r1, #1
 8002196:	2002      	movs	r0, #2
 8002198:	f7fe faad 	bl	80006f6 <lcd_print>
 800219c:	e038      	b.n	8002210 <menu+0x1a58>
 800219e:	bf00      	nop
 80021a0:	20000b2f 	.word	0x20000b2f
 80021a4:	0800c844 	.word	0x0800c844
 80021a8:	40010800 	.word	0x40010800
 80021ac:	20000b52 	.word	0x20000b52
 80021b0:	20000ab8 	.word	0x20000ab8
 80021b4:	20000b4f 	.word	0x20000b4f
 80021b8:	20000b24 	.word	0x20000b24
 80021bc:	20000b44 	.word	0x20000b44
 80021c0:	0800c914 	.word	0x0800c914
 80021c4:	0800c928 	.word	0x0800c928
 80021c8:	20000b31 	.word	0x20000b31
 80021cc:	0800c93c 	.word	0x0800c93c
 80021d0:	0800c94c 	.word	0x0800c94c
 80021d4:	0800c95c 	.word	0x0800c95c
 80021d8:	0800c96c 	.word	0x0800c96c
 80021dc:	0800c97c 	.word	0x0800c97c
 80021e0:	0800c990 	.word	0x0800c990
			}
		} else if(kapiTablaAcKonum == 3) {
 80021e4:	4b9b      	ldr	r3, [pc, #620]	; (8002454 <menu+0x1c9c>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d111      	bne.n	8002210 <menu+0x1a58>
			if(dilSecim == 0) {
 80021ec:	4b9a      	ldr	r3, [pc, #616]	; (8002458 <menu+0x1ca0>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d104      	bne.n	80021fe <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 80021f4:	4a99      	ldr	r2, [pc, #612]	; (800245c <menu+0x1ca4>)
 80021f6:	2101      	movs	r1, #1
 80021f8:	2002      	movs	r0, #2
 80021fa:	f7fe fa7c 	bl	80006f6 <lcd_print>
			}
			if(dilSecim == 1) {
 80021fe:	4b96      	ldr	r3, [pc, #600]	; (8002458 <menu+0x1ca0>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d104      	bne.n	8002210 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002206:	4a96      	ldr	r2, [pc, #600]	; (8002460 <menu+0x1ca8>)
 8002208:	2101      	movs	r1, #1
 800220a:	2002      	movs	r0, #2
 800220c:	f7fe fa73 	bl	80006f6 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002210:	2102      	movs	r1, #2
 8002212:	4894      	ldr	r0, [pc, #592]	; (8002464 <menu+0x1cac>)
 8002214:	f006 fabc 	bl	8008790 <HAL_GPIO_ReadPin>
 8002218:	4603      	mov	r3, r0
 800221a:	2b01      	cmp	r3, #1
 800221c:	d115      	bne.n	800224a <menu+0x1a92>
 800221e:	4b92      	ldr	r3, [pc, #584]	; (8002468 <menu+0x1cb0>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	f083 0301 	eor.w	r3, r3, #1
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00e      	beq.n	800224a <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 800222c:	4b89      	ldr	r3, [pc, #548]	; (8002454 <menu+0x1c9c>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	3301      	adds	r3, #1
 8002232:	b2da      	uxtb	r2, r3
 8002234:	4b87      	ldr	r3, [pc, #540]	; (8002454 <menu+0x1c9c>)
 8002236:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002238:	4b86      	ldr	r3, [pc, #536]	; (8002454 <menu+0x1c9c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b02      	cmp	r3, #2
 800223e:	d902      	bls.n	8002246 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002240:	4b84      	ldr	r3, [pc, #528]	; (8002454 <menu+0x1c9c>)
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002246:	f002 fe2b 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800224a:	2104      	movs	r1, #4
 800224c:	4885      	ldr	r0, [pc, #532]	; (8002464 <menu+0x1cac>)
 800224e:	f006 fa9f 	bl	8008790 <HAL_GPIO_ReadPin>
 8002252:	4603      	mov	r3, r0
 8002254:	2b01      	cmp	r3, #1
 8002256:	d115      	bne.n	8002284 <menu+0x1acc>
 8002258:	4b83      	ldr	r3, [pc, #524]	; (8002468 <menu+0x1cb0>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	f083 0301 	eor.w	r3, r3, #1
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00e      	beq.n	8002284 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002266:	4b7b      	ldr	r3, [pc, #492]	; (8002454 <menu+0x1c9c>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	3b01      	subs	r3, #1
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b79      	ldr	r3, [pc, #484]	; (8002454 <menu+0x1c9c>)
 8002270:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002272:	4b78      	ldr	r3, [pc, #480]	; (8002454 <menu+0x1c9c>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d902      	bls.n	8002280 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 800227a:	4b76      	ldr	r3, [pc, #472]	; (8002454 <menu+0x1c9c>)
 800227c:	2202      	movs	r2, #2
 800227e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002280:	f002 fe0e 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002284:	2108      	movs	r1, #8
 8002286:	4877      	ldr	r0, [pc, #476]	; (8002464 <menu+0x1cac>)
 8002288:	f006 fa82 	bl	8008790 <HAL_GPIO_ReadPin>
 800228c:	4603      	mov	r3, r0
 800228e:	2b01      	cmp	r3, #1
 8002290:	d11d      	bne.n	80022ce <menu+0x1b16>
 8002292:	4b75      	ldr	r3, [pc, #468]	; (8002468 <menu+0x1cb0>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	f083 0301 	eor.w	r3, r3, #1
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d016      	beq.n	80022ce <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 80022a0:	4b6c      	ldr	r3, [pc, #432]	; (8002454 <menu+0x1c9c>)
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	4b71      	ldr	r3, [pc, #452]	; (800246c <menu+0x1cb4>)
 80022a6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 80022aa:	4b6a      	ldr	r3, [pc, #424]	; (8002454 <menu+0x1c9c>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <menu+0x1b02>
 80022b2:	4b68      	ldr	r3, [pc, #416]	; (8002454 <menu+0x1c9c>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d106      	bne.n	80022c8 <menu+0x1b10>
				altLimit = 1;
 80022ba:	4b6d      	ldr	r3, [pc, #436]	; (8002470 <menu+0x1cb8>)
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80022c0:	4b6b      	ldr	r3, [pc, #428]	; (8002470 <menu+0x1cb8>)
 80022c2:	781a      	ldrb	r2, [r3, #0]
 80022c4:	4b69      	ldr	r3, [pc, #420]	; (800246c <menu+0x1cb4>)
 80022c6:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 80022c8:	4b6a      	ldr	r3, [pc, #424]	; (8002474 <menu+0x1cbc>)
 80022ca:	2201      	movs	r2, #1
 80022cc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 80022ce:	4b6a      	ldr	r3, [pc, #424]	; (8002478 <menu+0x1cc0>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b0f      	cmp	r3, #15
 80022d4:	d17f      	bne.n	80023d6 <menu+0x1c1e>
		if(dilSecim == 0) {
 80022d6:	4b60      	ldr	r3, [pc, #384]	; (8002458 <menu+0x1ca0>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10a      	bne.n	80022f4 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 80022de:	4a67      	ldr	r2, [pc, #412]	; (800247c <menu+0x1cc4>)
 80022e0:	2101      	movs	r1, #1
 80022e2:	2001      	movs	r0, #1
 80022e4:	f7fe fa07 	bl	80006f6 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80022e8:	4a65      	ldr	r2, [pc, #404]	; (8002480 <menu+0x1cc8>)
 80022ea:	2101      	movs	r1, #1
 80022ec:	2002      	movs	r0, #2
 80022ee:	f7fe fa02 	bl	80006f6 <lcd_print>
 80022f2:	e00d      	b.n	8002310 <menu+0x1b58>
		} else if(dilSecim == 1) {
 80022f4:	4b58      	ldr	r3, [pc, #352]	; (8002458 <menu+0x1ca0>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d109      	bne.n	8002310 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 80022fc:	4a61      	ldr	r2, [pc, #388]	; (8002484 <menu+0x1ccc>)
 80022fe:	2101      	movs	r1, #1
 8002300:	2001      	movs	r0, #1
 8002302:	f7fe f9f8 	bl	80006f6 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002306:	4a60      	ldr	r2, [pc, #384]	; (8002488 <menu+0x1cd0>)
 8002308:	2101      	movs	r1, #1
 800230a:	2002      	movs	r0, #2
 800230c:	f7fe f9f3 	bl	80006f6 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002310:	4b5e      	ldr	r3, [pc, #376]	; (800248c <menu+0x1cd4>)
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	220a      	movs	r2, #10
 8002316:	495e      	ldr	r1, [pc, #376]	; (8002490 <menu+0x1cd8>)
 8002318:	4618      	mov	r0, r3
 800231a:	f009 fa65 	bl	800b7e8 <itoa>
		lcd_print(2,16,snum);
 800231e:	4a5c      	ldr	r2, [pc, #368]	; (8002490 <menu+0x1cd8>)
 8002320:	2110      	movs	r1, #16
 8002322:	2002      	movs	r0, #2
 8002324:	f7fe f9e7 	bl	80006f6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002328:	2102      	movs	r1, #2
 800232a:	484e      	ldr	r0, [pc, #312]	; (8002464 <menu+0x1cac>)
 800232c:	f006 fa30 	bl	8008790 <HAL_GPIO_ReadPin>
 8002330:	4603      	mov	r3, r0
 8002332:	2b01      	cmp	r3, #1
 8002334:	d119      	bne.n	800236a <menu+0x1bb2>
 8002336:	4b4c      	ldr	r3, [pc, #304]	; (8002468 <menu+0x1cb0>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	f083 0301 	eor.w	r3, r3, #1
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b00      	cmp	r3, #0
 8002342:	d012      	beq.n	800236a <menu+0x1bb2>
 8002344:	4b53      	ldr	r3, [pc, #332]	; (8002494 <menu+0x1cdc>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10e      	bne.n	800236a <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 800234c:	4b4f      	ldr	r3, [pc, #316]	; (800248c <menu+0x1cd4>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	3301      	adds	r3, #1
 8002352:	b2da      	uxtb	r2, r3
 8002354:	4b4d      	ldr	r3, [pc, #308]	; (800248c <menu+0x1cd4>)
 8002356:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002358:	4b4c      	ldr	r3, [pc, #304]	; (800248c <menu+0x1cd4>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b05      	cmp	r3, #5
 800235e:	d902      	bls.n	8002366 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002360:	4b4a      	ldr	r3, [pc, #296]	; (800248c <menu+0x1cd4>)
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002366:	f002 fd9b 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800236a:	2104      	movs	r1, #4
 800236c:	483d      	ldr	r0, [pc, #244]	; (8002464 <menu+0x1cac>)
 800236e:	f006 fa0f 	bl	8008790 <HAL_GPIO_ReadPin>
 8002372:	4603      	mov	r3, r0
 8002374:	2b01      	cmp	r3, #1
 8002376:	d119      	bne.n	80023ac <menu+0x1bf4>
 8002378:	4b3b      	ldr	r3, [pc, #236]	; (8002468 <menu+0x1cb0>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	f083 0301 	eor.w	r3, r3, #1
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d012      	beq.n	80023ac <menu+0x1bf4>
 8002386:	4b43      	ldr	r3, [pc, #268]	; (8002494 <menu+0x1cdc>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10e      	bne.n	80023ac <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 800238e:	4b3f      	ldr	r3, [pc, #252]	; (800248c <menu+0x1cd4>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	3b01      	subs	r3, #1
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b3d      	ldr	r3, [pc, #244]	; (800248c <menu+0x1cd4>)
 8002398:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 800239a:	4b3c      	ldr	r3, [pc, #240]	; (800248c <menu+0x1cd4>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d902      	bls.n	80023a8 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 80023a2:	4b3a      	ldr	r3, [pc, #232]	; (800248c <menu+0x1cd4>)
 80023a4:	2205      	movs	r2, #5
 80023a6:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80023a8:	f002 fd7a 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023ac:	2108      	movs	r1, #8
 80023ae:	482d      	ldr	r0, [pc, #180]	; (8002464 <menu+0x1cac>)
 80023b0:	f006 f9ee 	bl	8008790 <HAL_GPIO_ReadPin>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d10d      	bne.n	80023d6 <menu+0x1c1e>
 80023ba:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <menu+0x1cb0>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	f083 0301 	eor.w	r3, r3, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d006      	beq.n	80023d6 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 80023c8:	4b30      	ldr	r3, [pc, #192]	; (800248c <menu+0x1cd4>)
 80023ca:	781a      	ldrb	r2, [r3, #0]
 80023cc:	4b27      	ldr	r3, [pc, #156]	; (800246c <menu+0x1cb4>)
 80023ce:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80023d0:	4b28      	ldr	r3, [pc, #160]	; (8002474 <menu+0x1cbc>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80023d6:	4b28      	ldr	r3, [pc, #160]	; (8002478 <menu+0x1cc0>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b10      	cmp	r3, #16
 80023dc:	f040 80bc 	bne.w	8002558 <menu+0x1da0>
		if(dilSecim == 0) {
 80023e0:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <menu+0x1ca0>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d105      	bne.n	80023f4 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80023e8:	4a2b      	ldr	r2, [pc, #172]	; (8002498 <menu+0x1ce0>)
 80023ea:	2101      	movs	r1, #1
 80023ec:	2001      	movs	r0, #1
 80023ee:	f7fe f982 	bl	80006f6 <lcd_print>
 80023f2:	e008      	b.n	8002406 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 80023f4:	4b18      	ldr	r3, [pc, #96]	; (8002458 <menu+0x1ca0>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d104      	bne.n	8002406 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 80023fc:	4a27      	ldr	r2, [pc, #156]	; (800249c <menu+0x1ce4>)
 80023fe:	2101      	movs	r1, #1
 8002400:	2001      	movs	r0, #1
 8002402:	f7fe f978 	bl	80006f6 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002406:	4b26      	ldr	r3, [pc, #152]	; (80024a0 <menu+0x1ce8>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d113      	bne.n	8002436 <menu+0x1c7e>
			if(dilSecim == 0) {
 800240e:	4b12      	ldr	r3, [pc, #72]	; (8002458 <menu+0x1ca0>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d105      	bne.n	8002422 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002416:	4a11      	ldr	r2, [pc, #68]	; (800245c <menu+0x1ca4>)
 8002418:	2101      	movs	r1, #1
 800241a:	2002      	movs	r0, #2
 800241c:	f7fe f96b 	bl	80006f6 <lcd_print>
 8002420:	e04b      	b.n	80024ba <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002422:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <menu+0x1ca0>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d147      	bne.n	80024ba <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 800242a:	4a0d      	ldr	r2, [pc, #52]	; (8002460 <menu+0x1ca8>)
 800242c:	2101      	movs	r1, #1
 800242e:	2002      	movs	r0, #2
 8002430:	f7fe f961 	bl	80006f6 <lcd_print>
 8002434:	e041      	b.n	80024ba <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002436:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <menu+0x1ce8>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d13d      	bne.n	80024ba <menu+0x1d02>
			if(dilSecim == 0) {
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <menu+0x1ca0>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d130      	bne.n	80024a8 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002446:	4a17      	ldr	r2, [pc, #92]	; (80024a4 <menu+0x1cec>)
 8002448:	2101      	movs	r1, #1
 800244a:	2002      	movs	r0, #2
 800244c:	f7fe f953 	bl	80006f6 <lcd_print>
 8002450:	e033      	b.n	80024ba <menu+0x1d02>
 8002452:	bf00      	nop
 8002454:	20000b31 	.word	0x20000b31
 8002458:	20000b44 	.word	0x20000b44
 800245c:	0800c604 	.word	0x0800c604
 8002460:	0800c618 	.word	0x0800c618
 8002464:	40010800 	.word	0x40010800
 8002468:	20000b52 	.word	0x20000b52
 800246c:	20000ab8 	.word	0x20000ab8
 8002470:	20000b2a 	.word	0x20000b2a
 8002474:	20000b4f 	.word	0x20000b4f
 8002478:	20000b24 	.word	0x20000b24
 800247c:	0800c9a4 	.word	0x0800c9a4
 8002480:	0800c868 	.word	0x0800c868
 8002484:	0800c9b8 	.word	0x0800c9b8
 8002488:	0800c88c 	.word	0x0800c88c
 800248c:	20000b3f 	.word	0x20000b3f
 8002490:	20000af8 	.word	0x20000af8
 8002494:	20000b2f 	.word	0x20000b2f
 8002498:	0800c9cc 	.word	0x0800c9cc
 800249c:	0800c9e0 	.word	0x0800c9e0
 80024a0:	20000b32 	.word	0x20000b32
 80024a4:	0800c664 	.word	0x0800c664
			} else if(dilSecim == 1) {
 80024a8:	4b99      	ldr	r3, [pc, #612]	; (8002710 <menu+0x1f58>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d104      	bne.n	80024ba <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 80024b0:	4a98      	ldr	r2, [pc, #608]	; (8002714 <menu+0x1f5c>)
 80024b2:	2101      	movs	r1, #1
 80024b4:	2002      	movs	r0, #2
 80024b6:	f7fe f91e 	bl	80006f6 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80024ba:	2102      	movs	r1, #2
 80024bc:	4896      	ldr	r0, [pc, #600]	; (8002718 <menu+0x1f60>)
 80024be:	f006 f967 	bl	8008790 <HAL_GPIO_ReadPin>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d115      	bne.n	80024f4 <menu+0x1d3c>
 80024c8:	4b94      	ldr	r3, [pc, #592]	; (800271c <menu+0x1f64>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	f083 0301 	eor.w	r3, r3, #1
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00e      	beq.n	80024f4 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80024d6:	4b92      	ldr	r3, [pc, #584]	; (8002720 <menu+0x1f68>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	3301      	adds	r3, #1
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	4b90      	ldr	r3, [pc, #576]	; (8002720 <menu+0x1f68>)
 80024e0:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80024e2:	4b8f      	ldr	r3, [pc, #572]	; (8002720 <menu+0x1f68>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d902      	bls.n	80024f0 <menu+0x1d38>
				yukariYavasLimit = 0;
 80024ea:	4b8d      	ldr	r3, [pc, #564]	; (8002720 <menu+0x1f68>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024f0:	f002 fcd6 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024f4:	2104      	movs	r1, #4
 80024f6:	4888      	ldr	r0, [pc, #544]	; (8002718 <menu+0x1f60>)
 80024f8:	f006 f94a 	bl	8008790 <HAL_GPIO_ReadPin>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d115      	bne.n	800252e <menu+0x1d76>
 8002502:	4b86      	ldr	r3, [pc, #536]	; (800271c <menu+0x1f64>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	f083 0301 	eor.w	r3, r3, #1
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00e      	beq.n	800252e <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002510:	4b83      	ldr	r3, [pc, #524]	; (8002720 <menu+0x1f68>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	3b01      	subs	r3, #1
 8002516:	b2da      	uxtb	r2, r3
 8002518:	4b81      	ldr	r3, [pc, #516]	; (8002720 <menu+0x1f68>)
 800251a:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 800251c:	4b80      	ldr	r3, [pc, #512]	; (8002720 <menu+0x1f68>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d002      	beq.n	800252a <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8002524:	4b7e      	ldr	r3, [pc, #504]	; (8002720 <menu+0x1f68>)
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800252a:	f002 fcb9 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800252e:	2108      	movs	r1, #8
 8002530:	4879      	ldr	r0, [pc, #484]	; (8002718 <menu+0x1f60>)
 8002532:	f006 f92d 	bl	8008790 <HAL_GPIO_ReadPin>
 8002536:	4603      	mov	r3, r0
 8002538:	2b01      	cmp	r3, #1
 800253a:	d10d      	bne.n	8002558 <menu+0x1da0>
 800253c:	4b77      	ldr	r3, [pc, #476]	; (800271c <menu+0x1f64>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	f083 0301 	eor.w	r3, r3, #1
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d006      	beq.n	8002558 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 800254a:	4b75      	ldr	r3, [pc, #468]	; (8002720 <menu+0x1f68>)
 800254c:	781a      	ldrb	r2, [r3, #0]
 800254e:	4b75      	ldr	r3, [pc, #468]	; (8002724 <menu+0x1f6c>)
 8002550:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002552:	4b75      	ldr	r3, [pc, #468]	; (8002728 <menu+0x1f70>)
 8002554:	2201      	movs	r2, #1
 8002556:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002558:	4b74      	ldr	r3, [pc, #464]	; (800272c <menu+0x1f74>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b11      	cmp	r3, #17
 800255e:	f040 80c3 	bne.w	80026e8 <menu+0x1f30>
		if(dilSecim == 0) {
 8002562:	4b6b      	ldr	r3, [pc, #428]	; (8002710 <menu+0x1f58>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d105      	bne.n	8002576 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 800256a:	4a71      	ldr	r2, [pc, #452]	; (8002730 <menu+0x1f78>)
 800256c:	2101      	movs	r1, #1
 800256e:	2001      	movs	r0, #1
 8002570:	f7fe f8c1 	bl	80006f6 <lcd_print>
 8002574:	e008      	b.n	8002588 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8002576:	4b66      	ldr	r3, [pc, #408]	; (8002710 <menu+0x1f58>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d104      	bne.n	8002588 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 800257e:	4a6d      	ldr	r2, [pc, #436]	; (8002734 <menu+0x1f7c>)
 8002580:	2101      	movs	r1, #1
 8002582:	2001      	movs	r0, #1
 8002584:	f7fe f8b7 	bl	80006f6 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002588:	4b6b      	ldr	r3, [pc, #428]	; (8002738 <menu+0x1f80>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d113      	bne.n	80025b8 <menu+0x1e00>
			if(dilSecim == 0){
 8002590:	4b5f      	ldr	r3, [pc, #380]	; (8002710 <menu+0x1f58>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d105      	bne.n	80025a4 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002598:	4a68      	ldr	r2, [pc, #416]	; (800273c <menu+0x1f84>)
 800259a:	2101      	movs	r1, #1
 800259c:	2002      	movs	r0, #2
 800259e:	f7fe f8aa 	bl	80006f6 <lcd_print>
 80025a2:	e038      	b.n	8002616 <menu+0x1e5e>
			} else if(dilSecim == 1){
 80025a4:	4b5a      	ldr	r3, [pc, #360]	; (8002710 <menu+0x1f58>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d134      	bne.n	8002616 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80025ac:	4a64      	ldr	r2, [pc, #400]	; (8002740 <menu+0x1f88>)
 80025ae:	2101      	movs	r1, #1
 80025b0:	2002      	movs	r0, #2
 80025b2:	f7fe f8a0 	bl	80006f6 <lcd_print>
 80025b6:	e02e      	b.n	8002616 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80025b8:	4b5f      	ldr	r3, [pc, #380]	; (8002738 <menu+0x1f80>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d113      	bne.n	80025e8 <menu+0x1e30>
			if(dilSecim == 0){
 80025c0:	4b53      	ldr	r3, [pc, #332]	; (8002710 <menu+0x1f58>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d105      	bne.n	80025d4 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80025c8:	4a5e      	ldr	r2, [pc, #376]	; (8002744 <menu+0x1f8c>)
 80025ca:	2101      	movs	r1, #1
 80025cc:	2002      	movs	r0, #2
 80025ce:	f7fe f892 	bl	80006f6 <lcd_print>
 80025d2:	e020      	b.n	8002616 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80025d4:	4b4e      	ldr	r3, [pc, #312]	; (8002710 <menu+0x1f58>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d11c      	bne.n	8002616 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80025dc:	4a5a      	ldr	r2, [pc, #360]	; (8002748 <menu+0x1f90>)
 80025de:	2101      	movs	r1, #1
 80025e0:	2002      	movs	r0, #2
 80025e2:	f7fe f888 	bl	80006f6 <lcd_print>
 80025e6:	e016      	b.n	8002616 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80025e8:	4b53      	ldr	r3, [pc, #332]	; (8002738 <menu+0x1f80>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d112      	bne.n	8002616 <menu+0x1e5e>
			if(dilSecim == 0) {
 80025f0:	4b47      	ldr	r3, [pc, #284]	; (8002710 <menu+0x1f58>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d105      	bne.n	8002604 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 80025f8:	4a54      	ldr	r2, [pc, #336]	; (800274c <menu+0x1f94>)
 80025fa:	2101      	movs	r1, #1
 80025fc:	2002      	movs	r0, #2
 80025fe:	f7fe f87a 	bl	80006f6 <lcd_print>
 8002602:	e008      	b.n	8002616 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002604:	4b42      	ldr	r3, [pc, #264]	; (8002710 <menu+0x1f58>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d104      	bne.n	8002616 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 800260c:	4a50      	ldr	r2, [pc, #320]	; (8002750 <menu+0x1f98>)
 800260e:	2101      	movs	r1, #1
 8002610:	2002      	movs	r0, #2
 8002612:	f7fe f870 	bl	80006f6 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002616:	2102      	movs	r1, #2
 8002618:	483f      	ldr	r0, [pc, #252]	; (8002718 <menu+0x1f60>)
 800261a:	f006 f8b9 	bl	8008790 <HAL_GPIO_ReadPin>
 800261e:	4603      	mov	r3, r0
 8002620:	2b01      	cmp	r3, #1
 8002622:	d115      	bne.n	8002650 <menu+0x1e98>
 8002624:	4b3d      	ldr	r3, [pc, #244]	; (800271c <menu+0x1f64>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	f083 0301 	eor.w	r3, r3, #1
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00e      	beq.n	8002650 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002632:	4b41      	ldr	r3, [pc, #260]	; (8002738 <menu+0x1f80>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	3301      	adds	r3, #1
 8002638:	b2da      	uxtb	r2, r3
 800263a:	4b3f      	ldr	r3, [pc, #252]	; (8002738 <menu+0x1f80>)
 800263c:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 800263e:	4b3e      	ldr	r3, [pc, #248]	; (8002738 <menu+0x1f80>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b02      	cmp	r3, #2
 8002644:	d902      	bls.n	800264c <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8002646:	4b3c      	ldr	r3, [pc, #240]	; (8002738 <menu+0x1f80>)
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800264c:	f002 fc28 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002650:	2104      	movs	r1, #4
 8002652:	4831      	ldr	r0, [pc, #196]	; (8002718 <menu+0x1f60>)
 8002654:	f006 f89c 	bl	8008790 <HAL_GPIO_ReadPin>
 8002658:	4603      	mov	r3, r0
 800265a:	2b01      	cmp	r3, #1
 800265c:	d115      	bne.n	800268a <menu+0x1ed2>
 800265e:	4b2f      	ldr	r3, [pc, #188]	; (800271c <menu+0x1f64>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	f083 0301 	eor.w	r3, r3, #1
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00e      	beq.n	800268a <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 800266c:	4b32      	ldr	r3, [pc, #200]	; (8002738 <menu+0x1f80>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	3b01      	subs	r3, #1
 8002672:	b2da      	uxtb	r2, r3
 8002674:	4b30      	ldr	r3, [pc, #192]	; (8002738 <menu+0x1f80>)
 8002676:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002678:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <menu+0x1f80>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b03      	cmp	r3, #3
 800267e:	d902      	bls.n	8002686 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8002680:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <menu+0x1f80>)
 8002682:	2202      	movs	r2, #2
 8002684:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002686:	f002 fc0b 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800268a:	2108      	movs	r1, #8
 800268c:	4822      	ldr	r0, [pc, #136]	; (8002718 <menu+0x1f60>)
 800268e:	f006 f87f 	bl	8008790 <HAL_GPIO_ReadPin>
 8002692:	4603      	mov	r3, r0
 8002694:	2b01      	cmp	r3, #1
 8002696:	d127      	bne.n	80026e8 <menu+0x1f30>
 8002698:	4b20      	ldr	r3, [pc, #128]	; (800271c <menu+0x1f64>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	f083 0301 	eor.w	r3, r3, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d020      	beq.n	80026e8 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 80026a6:	4b24      	ldr	r3, [pc, #144]	; (8002738 <menu+0x1f80>)
 80026a8:	781a      	ldrb	r2, [r3, #0]
 80026aa:	4b1e      	ldr	r3, [pc, #120]	; (8002724 <menu+0x1f6c>)
 80026ac:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80026ae:	4b22      	ldr	r3, [pc, #136]	; (8002738 <menu+0x1f80>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d003      	beq.n	80026be <menu+0x1f06>
 80026b6:	4b20      	ldr	r3, [pc, #128]	; (8002738 <menu+0x1f80>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d106      	bne.n	80026cc <menu+0x1f14>
				calismaSekli = 0;
 80026be:	4b25      	ldr	r3, [pc, #148]	; (8002754 <menu+0x1f9c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80026c4:	4b23      	ldr	r3, [pc, #140]	; (8002754 <menu+0x1f9c>)
 80026c6:	781a      	ldrb	r2, [r3, #0]
 80026c8:	4b16      	ldr	r3, [pc, #88]	; (8002724 <menu+0x1f6c>)
 80026ca:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80026cc:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <menu+0x1f80>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d106      	bne.n	80026e2 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80026d4:	4b20      	ldr	r3, [pc, #128]	; (8002758 <menu+0x1fa0>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80026da:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <menu+0x1fa0>)
 80026dc:	781a      	ldrb	r2, [r3, #0]
 80026de:	4b11      	ldr	r3, [pc, #68]	; (8002724 <menu+0x1f6c>)
 80026e0:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80026e2:	4b11      	ldr	r3, [pc, #68]	; (8002728 <menu+0x1f70>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80026e8:	4b10      	ldr	r3, [pc, #64]	; (800272c <menu+0x1f74>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b12      	cmp	r3, #18
 80026ee:	f040 80d5 	bne.w	800289c <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80026f2:	4b11      	ldr	r3, [pc, #68]	; (8002738 <menu+0x1f80>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d13c      	bne.n	8002774 <menu+0x1fbc>
			if(dilSecim == 0) {
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <menu+0x1f58>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d12e      	bne.n	8002760 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8002702:	4a16      	ldr	r2, [pc, #88]	; (800275c <menu+0x1fa4>)
 8002704:	2101      	movs	r1, #1
 8002706:	2001      	movs	r0, #1
 8002708:	f7fd fff5 	bl	80006f6 <lcd_print>
 800270c:	e048      	b.n	80027a0 <menu+0x1fe8>
 800270e:	bf00      	nop
 8002710:	20000b44 	.word	0x20000b44
 8002714:	0800c678 	.word	0x0800c678
 8002718:	40010800 	.word	0x40010800
 800271c:	20000b52 	.word	0x20000b52
 8002720:	20000b32 	.word	0x20000b32
 8002724:	20000ab8 	.word	0x20000ab8
 8002728:	20000b4f 	.word	0x20000b4f
 800272c:	20000b24 	.word	0x20000b24
 8002730:	0800c9f4 	.word	0x0800c9f4
 8002734:	0800ca08 	.word	0x0800ca08
 8002738:	20000b33 	.word	0x20000b33
 800273c:	0800ca1c 	.word	0x0800ca1c
 8002740:	0800ca2c 	.word	0x0800ca2c
 8002744:	0800ca3c 	.word	0x0800ca3c
 8002748:	0800ca4c 	.word	0x0800ca4c
 800274c:	0800c604 	.word	0x0800c604
 8002750:	0800c618 	.word	0x0800c618
 8002754:	20000b25 	.word	0x20000b25
 8002758:	20000b36 	.word	0x20000b36
 800275c:	0800ca5c 	.word	0x0800ca5c
			} else if(dilSecim == 1) {
 8002760:	4b7b      	ldr	r3, [pc, #492]	; (8002950 <menu+0x2198>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d11b      	bne.n	80027a0 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8002768:	4a7a      	ldr	r2, [pc, #488]	; (8002954 <menu+0x219c>)
 800276a:	2101      	movs	r1, #1
 800276c:	2001      	movs	r0, #1
 800276e:	f7fd ffc2 	bl	80006f6 <lcd_print>
 8002772:	e015      	b.n	80027a0 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002774:	4b78      	ldr	r3, [pc, #480]	; (8002958 <menu+0x21a0>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d111      	bne.n	80027a0 <menu+0x1fe8>
			if(dilSecim == 0){
 800277c:	4b74      	ldr	r3, [pc, #464]	; (8002950 <menu+0x2198>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d104      	bne.n	800278e <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8002784:	4a75      	ldr	r2, [pc, #468]	; (800295c <menu+0x21a4>)
 8002786:	2101      	movs	r1, #1
 8002788:	2001      	movs	r0, #1
 800278a:	f7fd ffb4 	bl	80006f6 <lcd_print>
			}
			if(dilSecim == 1){
 800278e:	4b70      	ldr	r3, [pc, #448]	; (8002950 <menu+0x2198>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d104      	bne.n	80027a0 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8002796:	4a72      	ldr	r2, [pc, #456]	; (8002960 <menu+0x21a8>)
 8002798:	2101      	movs	r1, #1
 800279a:	2001      	movs	r0, #1
 800279c:	f7fd ffab 	bl	80006f6 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80027a0:	4b70      	ldr	r3, [pc, #448]	; (8002964 <menu+0x21ac>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d113      	bne.n	80027d0 <menu+0x2018>
			if(dilSecim == 0) {
 80027a8:	4b69      	ldr	r3, [pc, #420]	; (8002950 <menu+0x2198>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d105      	bne.n	80027bc <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80027b0:	4a6d      	ldr	r2, [pc, #436]	; (8002968 <menu+0x21b0>)
 80027b2:	2101      	movs	r1, #1
 80027b4:	2002      	movs	r0, #2
 80027b6:	f7fd ff9e 	bl	80006f6 <lcd_print>
 80027ba:	e020      	b.n	80027fe <menu+0x2046>
			} else if(dilSecim == 1){
 80027bc:	4b64      	ldr	r3, [pc, #400]	; (8002950 <menu+0x2198>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d11c      	bne.n	80027fe <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80027c4:	4a69      	ldr	r2, [pc, #420]	; (800296c <menu+0x21b4>)
 80027c6:	2101      	movs	r1, #1
 80027c8:	2002      	movs	r0, #2
 80027ca:	f7fd ff94 	bl	80006f6 <lcd_print>
 80027ce:	e016      	b.n	80027fe <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80027d0:	4b64      	ldr	r3, [pc, #400]	; (8002964 <menu+0x21ac>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d112      	bne.n	80027fe <menu+0x2046>
			if(dilSecim == 0){
 80027d8:	4b5d      	ldr	r3, [pc, #372]	; (8002950 <menu+0x2198>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80027e0:	4a63      	ldr	r2, [pc, #396]	; (8002970 <menu+0x21b8>)
 80027e2:	2101      	movs	r1, #1
 80027e4:	2002      	movs	r0, #2
 80027e6:	f7fd ff86 	bl	80006f6 <lcd_print>
 80027ea:	e008      	b.n	80027fe <menu+0x2046>
			} else if(dilSecim == 1){
 80027ec:	4b58      	ldr	r3, [pc, #352]	; (8002950 <menu+0x2198>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d104      	bne.n	80027fe <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80027f4:	4a5f      	ldr	r2, [pc, #380]	; (8002974 <menu+0x21bc>)
 80027f6:	2101      	movs	r1, #1
 80027f8:	2002      	movs	r0, #2
 80027fa:	f7fd ff7c 	bl	80006f6 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80027fe:	2102      	movs	r1, #2
 8002800:	485d      	ldr	r0, [pc, #372]	; (8002978 <menu+0x21c0>)
 8002802:	f005 ffc5 	bl	8008790 <HAL_GPIO_ReadPin>
 8002806:	4603      	mov	r3, r0
 8002808:	2b01      	cmp	r3, #1
 800280a:	d115      	bne.n	8002838 <menu+0x2080>
 800280c:	4b5b      	ldr	r3, [pc, #364]	; (800297c <menu+0x21c4>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	f083 0301 	eor.w	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00e      	beq.n	8002838 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800281a:	4b52      	ldr	r3, [pc, #328]	; (8002964 <menu+0x21ac>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	3301      	adds	r3, #1
 8002820:	b2da      	uxtb	r2, r3
 8002822:	4b50      	ldr	r3, [pc, #320]	; (8002964 <menu+0x21ac>)
 8002824:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002826:	4b4f      	ldr	r3, [pc, #316]	; (8002964 <menu+0x21ac>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d902      	bls.n	8002834 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 800282e:	4b4d      	ldr	r3, [pc, #308]	; (8002964 <menu+0x21ac>)
 8002830:	2200      	movs	r2, #0
 8002832:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002834:	f002 fb34 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002838:	2104      	movs	r1, #4
 800283a:	484f      	ldr	r0, [pc, #316]	; (8002978 <menu+0x21c0>)
 800283c:	f005 ffa8 	bl	8008790 <HAL_GPIO_ReadPin>
 8002840:	4603      	mov	r3, r0
 8002842:	2b01      	cmp	r3, #1
 8002844:	d115      	bne.n	8002872 <menu+0x20ba>
 8002846:	4b4d      	ldr	r3, [pc, #308]	; (800297c <menu+0x21c4>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	f083 0301 	eor.w	r3, r3, #1
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00e      	beq.n	8002872 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002854:	4b43      	ldr	r3, [pc, #268]	; (8002964 <menu+0x21ac>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	3b01      	subs	r3, #1
 800285a:	b2da      	uxtb	r2, r3
 800285c:	4b41      	ldr	r3, [pc, #260]	; (8002964 <menu+0x21ac>)
 800285e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002860:	4b40      	ldr	r3, [pc, #256]	; (8002964 <menu+0x21ac>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8002868:	4b3e      	ldr	r3, [pc, #248]	; (8002964 <menu+0x21ac>)
 800286a:	2201      	movs	r2, #1
 800286c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800286e:	f002 fb17 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002872:	2108      	movs	r1, #8
 8002874:	4840      	ldr	r0, [pc, #256]	; (8002978 <menu+0x21c0>)
 8002876:	f005 ff8b 	bl	8008790 <HAL_GPIO_ReadPin>
 800287a:	4603      	mov	r3, r0
 800287c:	2b01      	cmp	r3, #1
 800287e:	d10d      	bne.n	800289c <menu+0x20e4>
 8002880:	4b3e      	ldr	r3, [pc, #248]	; (800297c <menu+0x21c4>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	f083 0301 	eor.w	r3, r3, #1
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d006      	beq.n	800289c <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800288e:	4b35      	ldr	r3, [pc, #212]	; (8002964 <menu+0x21ac>)
 8002890:	781a      	ldrb	r2, [r3, #0]
 8002892:	4b3b      	ldr	r3, [pc, #236]	; (8002980 <menu+0x21c8>)
 8002894:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002896:	4b3b      	ldr	r3, [pc, #236]	; (8002984 <menu+0x21cc>)
 8002898:	2201      	movs	r2, #1
 800289a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 800289c:	4b3a      	ldr	r3, [pc, #232]	; (8002988 <menu+0x21d0>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b13      	cmp	r3, #19
 80028a2:	f040 80d5 	bne.w	8002a50 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80028a6:	4b2c      	ldr	r3, [pc, #176]	; (8002958 <menu+0x21a0>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d113      	bne.n	80028d6 <menu+0x211e>
			if(dilSecim == 0) {
 80028ae:	4b28      	ldr	r3, [pc, #160]	; (8002950 <menu+0x2198>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d105      	bne.n	80028c2 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80028b6:	4a35      	ldr	r2, [pc, #212]	; (800298c <menu+0x21d4>)
 80028b8:	2101      	movs	r1, #1
 80028ba:	2001      	movs	r0, #1
 80028bc:	f7fd ff1b 	bl	80006f6 <lcd_print>
 80028c0:	e01f      	b.n	8002902 <menu+0x214a>
			} else if(dilSecim == 1) {
 80028c2:	4b23      	ldr	r3, [pc, #140]	; (8002950 <menu+0x2198>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d11b      	bne.n	8002902 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80028ca:	4a31      	ldr	r2, [pc, #196]	; (8002990 <menu+0x21d8>)
 80028cc:	2101      	movs	r1, #1
 80028ce:	2001      	movs	r0, #1
 80028d0:	f7fd ff11 	bl	80006f6 <lcd_print>
 80028d4:	e015      	b.n	8002902 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80028d6:	4b20      	ldr	r3, [pc, #128]	; (8002958 <menu+0x21a0>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d111      	bne.n	8002902 <menu+0x214a>
			if(dilSecim == 0) {
 80028de:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <menu+0x2198>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d104      	bne.n	80028f0 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80028e6:	4a2b      	ldr	r2, [pc, #172]	; (8002994 <menu+0x21dc>)
 80028e8:	2101      	movs	r1, #1
 80028ea:	2001      	movs	r0, #1
 80028ec:	f7fd ff03 	bl	80006f6 <lcd_print>
			}
			if(dilSecim == 1) {
 80028f0:	4b17      	ldr	r3, [pc, #92]	; (8002950 <menu+0x2198>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d104      	bne.n	8002902 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80028f8:	4a27      	ldr	r2, [pc, #156]	; (8002998 <menu+0x21e0>)
 80028fa:	2101      	movs	r1, #1
 80028fc:	2001      	movs	r0, #1
 80028fe:	f7fd fefa 	bl	80006f6 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002902:	4b26      	ldr	r3, [pc, #152]	; (800299c <menu+0x21e4>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d113      	bne.n	8002932 <menu+0x217a>
			if(dilSecim == 0) {
 800290a:	4b11      	ldr	r3, [pc, #68]	; (8002950 <menu+0x2198>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d105      	bne.n	800291e <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 8002912:	4a15      	ldr	r2, [pc, #84]	; (8002968 <menu+0x21b0>)
 8002914:	2101      	movs	r1, #1
 8002916:	2002      	movs	r0, #2
 8002918:	f7fd feed 	bl	80006f6 <lcd_print>
 800291c:	e049      	b.n	80029b2 <menu+0x21fa>
			} else if(dilSecim == 1) {
 800291e:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <menu+0x2198>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d145      	bne.n	80029b2 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 8002926:	4a11      	ldr	r2, [pc, #68]	; (800296c <menu+0x21b4>)
 8002928:	2101      	movs	r1, #1
 800292a:	2002      	movs	r0, #2
 800292c:	f7fd fee3 	bl	80006f6 <lcd_print>
 8002930:	e03f      	b.n	80029b2 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8002932:	4b1a      	ldr	r3, [pc, #104]	; (800299c <menu+0x21e4>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d13b      	bne.n	80029b2 <menu+0x21fa>
			if(dilSecim == 0) {
 800293a:	4b05      	ldr	r3, [pc, #20]	; (8002950 <menu+0x2198>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d12e      	bne.n	80029a0 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 8002942:	4a0b      	ldr	r2, [pc, #44]	; (8002970 <menu+0x21b8>)
 8002944:	2101      	movs	r1, #1
 8002946:	2002      	movs	r0, #2
 8002948:	f7fd fed5 	bl	80006f6 <lcd_print>
 800294c:	e031      	b.n	80029b2 <menu+0x21fa>
 800294e:	bf00      	nop
 8002950:	20000b44 	.word	0x20000b44
 8002954:	0800ca70 	.word	0x0800ca70
 8002958:	20000b33 	.word	0x20000b33
 800295c:	0800ca80 	.word	0x0800ca80
 8002960:	0800ca94 	.word	0x0800ca94
 8002964:	20000b34 	.word	0x20000b34
 8002968:	0800c604 	.word	0x0800c604
 800296c:	0800c618 	.word	0x0800c618
 8002970:	0800c664 	.word	0x0800c664
 8002974:	0800c678 	.word	0x0800c678
 8002978:	40010800 	.word	0x40010800
 800297c:	20000b52 	.word	0x20000b52
 8002980:	20000ab8 	.word	0x20000ab8
 8002984:	20000b4f 	.word	0x20000b4f
 8002988:	20000b24 	.word	0x20000b24
 800298c:	0800caa8 	.word	0x0800caa8
 8002990:	0800cabc 	.word	0x0800cabc
 8002994:	0800cad0 	.word	0x0800cad0
 8002998:	0800cae4 	.word	0x0800cae4
 800299c:	20000b35 	.word	0x20000b35
			} else if(dilSecim == 1) {
 80029a0:	4b90      	ldr	r3, [pc, #576]	; (8002be4 <menu+0x242c>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d104      	bne.n	80029b2 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80029a8:	4a8f      	ldr	r2, [pc, #572]	; (8002be8 <menu+0x2430>)
 80029aa:	2101      	movs	r1, #1
 80029ac:	2002      	movs	r0, #2
 80029ae:	f7fd fea2 	bl	80006f6 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029b2:	2102      	movs	r1, #2
 80029b4:	488d      	ldr	r0, [pc, #564]	; (8002bec <menu+0x2434>)
 80029b6:	f005 feeb 	bl	8008790 <HAL_GPIO_ReadPin>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d115      	bne.n	80029ec <menu+0x2234>
 80029c0:	4b8b      	ldr	r3, [pc, #556]	; (8002bf0 <menu+0x2438>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	f083 0301 	eor.w	r3, r3, #1
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00e      	beq.n	80029ec <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80029ce:	4b89      	ldr	r3, [pc, #548]	; (8002bf4 <menu+0x243c>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	3301      	adds	r3, #1
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	4b87      	ldr	r3, [pc, #540]	; (8002bf4 <menu+0x243c>)
 80029d8:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80029da:	4b86      	ldr	r3, [pc, #536]	; (8002bf4 <menu+0x243c>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d902      	bls.n	80029e8 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80029e2:	4b84      	ldr	r3, [pc, #528]	; (8002bf4 <menu+0x243c>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029e8:	f002 fa5a 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ec:	2104      	movs	r1, #4
 80029ee:	487f      	ldr	r0, [pc, #508]	; (8002bec <menu+0x2434>)
 80029f0:	f005 fece 	bl	8008790 <HAL_GPIO_ReadPin>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d115      	bne.n	8002a26 <menu+0x226e>
 80029fa:	4b7d      	ldr	r3, [pc, #500]	; (8002bf0 <menu+0x2438>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	f083 0301 	eor.w	r3, r3, #1
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00e      	beq.n	8002a26 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002a08:	4b7a      	ldr	r3, [pc, #488]	; (8002bf4 <menu+0x243c>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	4b78      	ldr	r3, [pc, #480]	; (8002bf4 <menu+0x243c>)
 8002a12:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002a14:	4b77      	ldr	r3, [pc, #476]	; (8002bf4 <menu+0x243c>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8002a1c:	4b75      	ldr	r3, [pc, #468]	; (8002bf4 <menu+0x243c>)
 8002a1e:	2201      	movs	r2, #1
 8002a20:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a22:	f002 fa3d 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a26:	2108      	movs	r1, #8
 8002a28:	4870      	ldr	r0, [pc, #448]	; (8002bec <menu+0x2434>)
 8002a2a:	f005 feb1 	bl	8008790 <HAL_GPIO_ReadPin>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d10d      	bne.n	8002a50 <menu+0x2298>
 8002a34:	4b6e      	ldr	r3, [pc, #440]	; (8002bf0 <menu+0x2438>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	f083 0301 	eor.w	r3, r3, #1
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d006      	beq.n	8002a50 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002a42:	4b6c      	ldr	r3, [pc, #432]	; (8002bf4 <menu+0x243c>)
 8002a44:	781a      	ldrb	r2, [r3, #0]
 8002a46:	4b6c      	ldr	r3, [pc, #432]	; (8002bf8 <menu+0x2440>)
 8002a48:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002a4a:	4b6c      	ldr	r3, [pc, #432]	; (8002bfc <menu+0x2444>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002a50:	4b6b      	ldr	r3, [pc, #428]	; (8002c00 <menu+0x2448>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2b14      	cmp	r3, #20
 8002a56:	f040 80b5 	bne.w	8002bc4 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8002a5a:	4b6a      	ldr	r3, [pc, #424]	; (8002c04 <menu+0x244c>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d113      	bne.n	8002a8a <menu+0x22d2>
			if(dilSecim == 0) {
 8002a62:	4b60      	ldr	r3, [pc, #384]	; (8002be4 <menu+0x242c>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d105      	bne.n	8002a76 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8002a6a:	4a67      	ldr	r2, [pc, #412]	; (8002c08 <menu+0x2450>)
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f7fd fe41 	bl	80006f6 <lcd_print>
 8002a74:	e020      	b.n	8002ab8 <menu+0x2300>
			} else if(dilSecim == 1) {
 8002a76:	4b5b      	ldr	r3, [pc, #364]	; (8002be4 <menu+0x242c>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d11c      	bne.n	8002ab8 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8002a7e:	4a63      	ldr	r2, [pc, #396]	; (8002c0c <menu+0x2454>)
 8002a80:	2101      	movs	r1, #1
 8002a82:	2001      	movs	r0, #1
 8002a84:	f7fd fe37 	bl	80006f6 <lcd_print>
 8002a88:	e016      	b.n	8002ab8 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8002a8a:	4b5e      	ldr	r3, [pc, #376]	; (8002c04 <menu+0x244c>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d112      	bne.n	8002ab8 <menu+0x2300>
			if(dilSecim == 0) {
 8002a92:	4b54      	ldr	r3, [pc, #336]	; (8002be4 <menu+0x242c>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d105      	bne.n	8002aa6 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8002a9a:	4a5d      	ldr	r2, [pc, #372]	; (8002c10 <menu+0x2458>)
 8002a9c:	2101      	movs	r1, #1
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	f7fd fe29 	bl	80006f6 <lcd_print>
 8002aa4:	e008      	b.n	8002ab8 <menu+0x2300>
			} else if(dilSecim == 1) {
 8002aa6:	4b4f      	ldr	r3, [pc, #316]	; (8002be4 <menu+0x242c>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d104      	bne.n	8002ab8 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8002aae:	4a59      	ldr	r2, [pc, #356]	; (8002c14 <menu+0x245c>)
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	2001      	movs	r0, #1
 8002ab4:	f7fd fe1f 	bl	80006f6 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8002ab8:	4b57      	ldr	r3, [pc, #348]	; (8002c18 <menu+0x2460>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d113      	bne.n	8002ae8 <menu+0x2330>
			if(dilSecim == 0) {
 8002ac0:	4b48      	ldr	r3, [pc, #288]	; (8002be4 <menu+0x242c>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d105      	bne.n	8002ad4 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8002ac8:	4a54      	ldr	r2, [pc, #336]	; (8002c1c <menu+0x2464>)
 8002aca:	2101      	movs	r1, #1
 8002acc:	2002      	movs	r0, #2
 8002ace:	f7fd fe12 	bl	80006f6 <lcd_print>
 8002ad2:	e020      	b.n	8002b16 <menu+0x235e>
			} else if(dilSecim == 1) {
 8002ad4:	4b43      	ldr	r3, [pc, #268]	; (8002be4 <menu+0x242c>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d11c      	bne.n	8002b16 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8002adc:	4a50      	ldr	r2, [pc, #320]	; (8002c20 <menu+0x2468>)
 8002ade:	2101      	movs	r1, #1
 8002ae0:	2002      	movs	r0, #2
 8002ae2:	f7fd fe08 	bl	80006f6 <lcd_print>
 8002ae6:	e016      	b.n	8002b16 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8002ae8:	4b4b      	ldr	r3, [pc, #300]	; (8002c18 <menu+0x2460>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d112      	bne.n	8002b16 <menu+0x235e>
			if(dilSecim == 0) {
 8002af0:	4b3c      	ldr	r3, [pc, #240]	; (8002be4 <menu+0x242c>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8002af8:	4a4a      	ldr	r2, [pc, #296]	; (8002c24 <menu+0x246c>)
 8002afa:	2101      	movs	r1, #1
 8002afc:	2002      	movs	r0, #2
 8002afe:	f7fd fdfa 	bl	80006f6 <lcd_print>
 8002b02:	e008      	b.n	8002b16 <menu+0x235e>
			} else if(dilSecim == 1) {
 8002b04:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <menu+0x242c>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d104      	bne.n	8002b16 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8002b0c:	4a46      	ldr	r2, [pc, #280]	; (8002c28 <menu+0x2470>)
 8002b0e:	2101      	movs	r1, #1
 8002b10:	2002      	movs	r0, #2
 8002b12:	f7fd fdf0 	bl	80006f6 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002b16:	2102      	movs	r1, #2
 8002b18:	4834      	ldr	r0, [pc, #208]	; (8002bec <menu+0x2434>)
 8002b1a:	f005 fe39 	bl	8008790 <HAL_GPIO_ReadPin>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d119      	bne.n	8002b58 <menu+0x23a0>
 8002b24:	4b32      	ldr	r3, [pc, #200]	; (8002bf0 <menu+0x2438>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	f083 0301 	eor.w	r3, r3, #1
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d012      	beq.n	8002b58 <menu+0x23a0>
 8002b32:	4b34      	ldr	r3, [pc, #208]	; (8002c04 <menu+0x244c>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d10e      	bne.n	8002b58 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002b3a:	4b37      	ldr	r3, [pc, #220]	; (8002c18 <menu+0x2460>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	4b35      	ldr	r3, [pc, #212]	; (8002c18 <menu+0x2460>)
 8002b44:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002b46:	4b34      	ldr	r3, [pc, #208]	; (8002c18 <menu+0x2460>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d902      	bls.n	8002b54 <menu+0x239c>
				devirmeSilindirTipi = 0;
 8002b4e:	4b32      	ldr	r3, [pc, #200]	; (8002c18 <menu+0x2460>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b54:	f002 f9a4 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002b58:	2104      	movs	r1, #4
 8002b5a:	4824      	ldr	r0, [pc, #144]	; (8002bec <menu+0x2434>)
 8002b5c:	f005 fe18 	bl	8008790 <HAL_GPIO_ReadPin>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d119      	bne.n	8002b9a <menu+0x23e2>
 8002b66:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <menu+0x2438>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	f083 0301 	eor.w	r3, r3, #1
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d012      	beq.n	8002b9a <menu+0x23e2>
 8002b74:	4b23      	ldr	r3, [pc, #140]	; (8002c04 <menu+0x244c>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d10e      	bne.n	8002b9a <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002b7c:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <menu+0x2460>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	4b24      	ldr	r3, [pc, #144]	; (8002c18 <menu+0x2460>)
 8002b86:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002b88:	4b23      	ldr	r3, [pc, #140]	; (8002c18 <menu+0x2460>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d002      	beq.n	8002b96 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8002b90:	4b21      	ldr	r3, [pc, #132]	; (8002c18 <menu+0x2460>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b96:	f002 f983 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b9a:	2108      	movs	r1, #8
 8002b9c:	4813      	ldr	r0, [pc, #76]	; (8002bec <menu+0x2434>)
 8002b9e:	f005 fdf7 	bl	8008790 <HAL_GPIO_ReadPin>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d10d      	bne.n	8002bc4 <menu+0x240c>
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <menu+0x2438>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	f083 0301 	eor.w	r3, r3, #1
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d006      	beq.n	8002bc4 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8002bb6:	4b18      	ldr	r3, [pc, #96]	; (8002c18 <menu+0x2460>)
 8002bb8:	781a      	ldrb	r2, [r3, #0]
 8002bba:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <menu+0x2440>)
 8002bbc:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002bbe:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <menu+0x2444>)
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002bc4:	4b0e      	ldr	r3, [pc, #56]	; (8002c00 <menu+0x2448>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b15      	cmp	r3, #21
 8002bca:	f040 80c2 	bne.w	8002d52 <menu+0x259a>
		if(dilSecim == 0) {
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <menu+0x242c>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d12c      	bne.n	8002c30 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8002bd6:	4a15      	ldr	r2, [pc, #84]	; (8002c2c <menu+0x2474>)
 8002bd8:	2101      	movs	r1, #1
 8002bda:	2001      	movs	r0, #1
 8002bdc:	f7fd fd8b 	bl	80006f6 <lcd_print>
 8002be0:	e02f      	b.n	8002c42 <menu+0x248a>
 8002be2:	bf00      	nop
 8002be4:	20000b44 	.word	0x20000b44
 8002be8:	0800c678 	.word	0x0800c678
 8002bec:	40010800 	.word	0x40010800
 8002bf0:	20000b52 	.word	0x20000b52
 8002bf4:	20000b35 	.word	0x20000b35
 8002bf8:	20000ab8 	.word	0x20000ab8
 8002bfc:	20000b4f 	.word	0x20000b4f
 8002c00:	20000b24 	.word	0x20000b24
 8002c04:	20000b33 	.word	0x20000b33
 8002c08:	0800caf8 	.word	0x0800caf8
 8002c0c:	0800cb0c 	.word	0x0800cb0c
 8002c10:	0800cb20 	.word	0x0800cb20
 8002c14:	0800cb34 	.word	0x0800cb34
 8002c18:	20000b36 	.word	0x20000b36
 8002c1c:	0800cb48 	.word	0x0800cb48
 8002c20:	0800cb5c 	.word	0x0800cb5c
 8002c24:	0800cb6c 	.word	0x0800cb6c
 8002c28:	0800cb80 	.word	0x0800cb80
 8002c2c:	0800cb90 	.word	0x0800cb90
		} else if(dilSecim == 1) {
 8002c30:	4b9c      	ldr	r3, [pc, #624]	; (8002ea4 <menu+0x26ec>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d104      	bne.n	8002c42 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8002c38:	4a9b      	ldr	r2, [pc, #620]	; (8002ea8 <menu+0x26f0>)
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	f7fd fd5a 	bl	80006f6 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8002c42:	4b9a      	ldr	r3, [pc, #616]	; (8002eac <menu+0x26f4>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d112      	bne.n	8002c70 <menu+0x24b8>
			if(dilSecim == 0) {
 8002c4a:	4b96      	ldr	r3, [pc, #600]	; (8002ea4 <menu+0x26ec>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d104      	bne.n	8002c5c <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8002c52:	4a97      	ldr	r2, [pc, #604]	; (8002eb0 <menu+0x26f8>)
 8002c54:	2101      	movs	r1, #1
 8002c56:	2002      	movs	r0, #2
 8002c58:	f7fd fd4d 	bl	80006f6 <lcd_print>
			}
			if(dilSecim == 1) {
 8002c5c:	4b91      	ldr	r3, [pc, #580]	; (8002ea4 <menu+0x26ec>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d11c      	bne.n	8002c9e <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8002c64:	4a93      	ldr	r2, [pc, #588]	; (8002eb4 <menu+0x26fc>)
 8002c66:	2101      	movs	r1, #1
 8002c68:	2002      	movs	r0, #2
 8002c6a:	f7fd fd44 	bl	80006f6 <lcd_print>
 8002c6e:	e016      	b.n	8002c9e <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8002c70:	4b8e      	ldr	r3, [pc, #568]	; (8002eac <menu+0x26f4>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d112      	bne.n	8002c9e <menu+0x24e6>
			if(dilSecim == 0) {
 8002c78:	4b8a      	ldr	r3, [pc, #552]	; (8002ea4 <menu+0x26ec>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d105      	bne.n	8002c8c <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8002c80:	4a8d      	ldr	r2, [pc, #564]	; (8002eb8 <menu+0x2700>)
 8002c82:	2101      	movs	r1, #1
 8002c84:	2002      	movs	r0, #2
 8002c86:	f7fd fd36 	bl	80006f6 <lcd_print>
 8002c8a:	e008      	b.n	8002c9e <menu+0x24e6>
			} else if(dilSecim == 1) {
 8002c8c:	4b85      	ldr	r3, [pc, #532]	; (8002ea4 <menu+0x26ec>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d104      	bne.n	8002c9e <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8002c94:	4a89      	ldr	r2, [pc, #548]	; (8002ebc <menu+0x2704>)
 8002c96:	2101      	movs	r1, #1
 8002c98:	2002      	movs	r0, #2
 8002c9a:	f7fd fd2c 	bl	80006f6 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c9e:	2102      	movs	r1, #2
 8002ca0:	4887      	ldr	r0, [pc, #540]	; (8002ec0 <menu+0x2708>)
 8002ca2:	f005 fd75 	bl	8008790 <HAL_GPIO_ReadPin>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d115      	bne.n	8002cd8 <menu+0x2520>
 8002cac:	4b85      	ldr	r3, [pc, #532]	; (8002ec4 <menu+0x270c>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	f083 0301 	eor.w	r3, r3, #1
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00e      	beq.n	8002cd8 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002cba:	4b7c      	ldr	r3, [pc, #496]	; (8002eac <menu+0x26f4>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4b7a      	ldr	r3, [pc, #488]	; (8002eac <menu+0x26f4>)
 8002cc4:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002cc6:	4b79      	ldr	r3, [pc, #484]	; (8002eac <menu+0x26f4>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d902      	bls.n	8002cd4 <menu+0x251c>
				platformSilindirTipi = 0;
 8002cce:	4b77      	ldr	r3, [pc, #476]	; (8002eac <menu+0x26f4>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cd4:	f002 f8e4 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cd8:	2104      	movs	r1, #4
 8002cda:	4879      	ldr	r0, [pc, #484]	; (8002ec0 <menu+0x2708>)
 8002cdc:	f005 fd58 	bl	8008790 <HAL_GPIO_ReadPin>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d115      	bne.n	8002d12 <menu+0x255a>
 8002ce6:	4b77      	ldr	r3, [pc, #476]	; (8002ec4 <menu+0x270c>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	f083 0301 	eor.w	r3, r3, #1
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00e      	beq.n	8002d12 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002cf4:	4b6d      	ldr	r3, [pc, #436]	; (8002eac <menu+0x26f4>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	4b6b      	ldr	r3, [pc, #428]	; (8002eac <menu+0x26f4>)
 8002cfe:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002d00:	4b6a      	ldr	r3, [pc, #424]	; (8002eac <menu+0x26f4>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <menu+0x2556>
		   		platformSilindirTipi = 1;
 8002d08:	4b68      	ldr	r3, [pc, #416]	; (8002eac <menu+0x26f4>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d0e:	f002 f8c7 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d12:	2108      	movs	r1, #8
 8002d14:	486a      	ldr	r0, [pc, #424]	; (8002ec0 <menu+0x2708>)
 8002d16:	f005 fd3b 	bl	8008790 <HAL_GPIO_ReadPin>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d118      	bne.n	8002d52 <menu+0x259a>
 8002d20:	4b68      	ldr	r3, [pc, #416]	; (8002ec4 <menu+0x270c>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	f083 0301 	eor.w	r3, r3, #1
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d011      	beq.n	8002d52 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8002d2e:	4b5f      	ldr	r3, [pc, #380]	; (8002eac <menu+0x26f4>)
 8002d30:	781a      	ldrb	r2, [r3, #0]
 8002d32:	4b65      	ldr	r3, [pc, #404]	; (8002ec8 <menu+0x2710>)
 8002d34:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002d36:	4b5d      	ldr	r3, [pc, #372]	; (8002eac <menu+0x26f4>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d106      	bne.n	8002d4c <menu+0x2594>
				altLimit = 1;
 8002d3e:	4b63      	ldr	r3, [pc, #396]	; (8002ecc <menu+0x2714>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002d44:	4b61      	ldr	r3, [pc, #388]	; (8002ecc <menu+0x2714>)
 8002d46:	781a      	ldrb	r2, [r3, #0]
 8002d48:	4b5f      	ldr	r3, [pc, #380]	; (8002ec8 <menu+0x2710>)
 8002d4a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002d4c:	4b60      	ldr	r3, [pc, #384]	; (8002ed0 <menu+0x2718>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002d52:	4b60      	ldr	r3, [pc, #384]	; (8002ed4 <menu+0x271c>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b16      	cmp	r3, #22
 8002d58:	f040 8081 	bne.w	8002e5e <menu+0x26a6>
		if(dilSecim == 0) {
 8002d5c:	4b51      	ldr	r3, [pc, #324]	; (8002ea4 <menu+0x26ec>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d105      	bne.n	8002d70 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8002d64:	4a5c      	ldr	r2, [pc, #368]	; (8002ed8 <menu+0x2720>)
 8002d66:	2101      	movs	r1, #1
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f7fd fcc4 	bl	80006f6 <lcd_print>
 8002d6e:	e008      	b.n	8002d82 <menu+0x25ca>
		} else if(dilSecim == 1) {
 8002d70:	4b4c      	ldr	r3, [pc, #304]	; (8002ea4 <menu+0x26ec>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d104      	bne.n	8002d82 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8002d78:	4a58      	ldr	r2, [pc, #352]	; (8002edc <menu+0x2724>)
 8002d7a:	2101      	movs	r1, #1
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	f7fd fcba 	bl	80006f6 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8002d82:	4b48      	ldr	r3, [pc, #288]	; (8002ea4 <menu+0x26ec>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d105      	bne.n	8002d96 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8002d8a:	4a55      	ldr	r2, [pc, #340]	; (8002ee0 <menu+0x2728>)
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	2002      	movs	r0, #2
 8002d90:	f7fd fcb1 	bl	80006f6 <lcd_print>
 8002d94:	e008      	b.n	8002da8 <menu+0x25f0>
			} else if(dilSecim == 1){
 8002d96:	4b43      	ldr	r3, [pc, #268]	; (8002ea4 <menu+0x26ec>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d104      	bne.n	8002da8 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8002d9e:	4a51      	ldr	r2, [pc, #324]	; (8002ee4 <menu+0x272c>)
 8002da0:	2101      	movs	r1, #1
 8002da2:	2002      	movs	r0, #2
 8002da4:	f7fd fca7 	bl	80006f6 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8002da8:	4b4f      	ldr	r3, [pc, #316]	; (8002ee8 <menu+0x2730>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	220a      	movs	r2, #10
 8002dae:	494f      	ldr	r1, [pc, #316]	; (8002eec <menu+0x2734>)
 8002db0:	4618      	mov	r0, r3
 8002db2:	f008 fd19 	bl	800b7e8 <itoa>
		lcd_print(2,16,snum);
 8002db6:	4a4d      	ldr	r2, [pc, #308]	; (8002eec <menu+0x2734>)
 8002db8:	2110      	movs	r1, #16
 8002dba:	2002      	movs	r0, #2
 8002dbc:	f7fd fc9b 	bl	80006f6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dc0:	2102      	movs	r1, #2
 8002dc2:	483f      	ldr	r0, [pc, #252]	; (8002ec0 <menu+0x2708>)
 8002dc4:	f005 fce4 	bl	8008790 <HAL_GPIO_ReadPin>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d115      	bne.n	8002dfa <menu+0x2642>
 8002dce:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <menu+0x270c>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	f083 0301 	eor.w	r3, r3, #1
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00e      	beq.n	8002dfa <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8002ddc:	4b42      	ldr	r3, [pc, #264]	; (8002ee8 <menu+0x2730>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	3301      	adds	r3, #1
 8002de2:	b2da      	uxtb	r2, r3
 8002de4:	4b40      	ldr	r3, [pc, #256]	; (8002ee8 <menu+0x2730>)
 8002de6:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002de8:	4b3f      	ldr	r3, [pc, #252]	; (8002ee8 <menu+0x2730>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b05      	cmp	r3, #5
 8002dee:	d902      	bls.n	8002df6 <menu+0x263e>
				yukariValfTmr = 0;
 8002df0:	4b3d      	ldr	r3, [pc, #244]	; (8002ee8 <menu+0x2730>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002df6:	f002 f853 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dfa:	2104      	movs	r1, #4
 8002dfc:	4830      	ldr	r0, [pc, #192]	; (8002ec0 <menu+0x2708>)
 8002dfe:	f005 fcc7 	bl	8008790 <HAL_GPIO_ReadPin>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d115      	bne.n	8002e34 <menu+0x267c>
 8002e08:	4b2e      	ldr	r3, [pc, #184]	; (8002ec4 <menu+0x270c>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	f083 0301 	eor.w	r3, r3, #1
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00e      	beq.n	8002e34 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8002e16:	4b34      	ldr	r3, [pc, #208]	; (8002ee8 <menu+0x2730>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	4b32      	ldr	r3, [pc, #200]	; (8002ee8 <menu+0x2730>)
 8002e20:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002e22:	4b31      	ldr	r3, [pc, #196]	; (8002ee8 <menu+0x2730>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b06      	cmp	r3, #6
 8002e28:	d902      	bls.n	8002e30 <menu+0x2678>
		   		yukariValfTmr = 5;
 8002e2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ee8 <menu+0x2730>)
 8002e2c:	2205      	movs	r2, #5
 8002e2e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e30:	f002 f836 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e34:	2108      	movs	r1, #8
 8002e36:	4822      	ldr	r0, [pc, #136]	; (8002ec0 <menu+0x2708>)
 8002e38:	f005 fcaa 	bl	8008790 <HAL_GPIO_ReadPin>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d10d      	bne.n	8002e5e <menu+0x26a6>
 8002e42:	4b20      	ldr	r3, [pc, #128]	; (8002ec4 <menu+0x270c>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	f083 0301 	eor.w	r3, r3, #1
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d006      	beq.n	8002e5e <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8002e50:	4b25      	ldr	r3, [pc, #148]	; (8002ee8 <menu+0x2730>)
 8002e52:	781a      	ldrb	r2, [r3, #0]
 8002e54:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <menu+0x2710>)
 8002e56:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002e58:	4b1d      	ldr	r3, [pc, #116]	; (8002ed0 <menu+0x2718>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002e5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <menu+0x271c>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b17      	cmp	r3, #23
 8002e64:	f040 80ac 	bne.w	8002fc0 <menu+0x2808>
		if(dilSecim == 0) {
 8002e68:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <menu+0x26ec>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d105      	bne.n	8002e7c <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8002e70:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <menu+0x2738>)
 8002e72:	2101      	movs	r1, #1
 8002e74:	2001      	movs	r0, #1
 8002e76:	f7fd fc3e 	bl	80006f6 <lcd_print>
 8002e7a:	e008      	b.n	8002e8e <menu+0x26d6>
		} else if(dilSecim == 1) {
 8002e7c:	4b09      	ldr	r3, [pc, #36]	; (8002ea4 <menu+0x26ec>)
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d104      	bne.n	8002e8e <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8002e84:	4a1b      	ldr	r2, [pc, #108]	; (8002ef4 <menu+0x273c>)
 8002e86:	2101      	movs	r1, #1
 8002e88:	2001      	movs	r0, #1
 8002e8a:	f7fd fc34 	bl	80006f6 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8002e8e:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <menu+0x26ec>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d130      	bne.n	8002ef8 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8002e96:	4a12      	ldr	r2, [pc, #72]	; (8002ee0 <menu+0x2728>)
 8002e98:	2101      	movs	r1, #1
 8002e9a:	2002      	movs	r0, #2
 8002e9c:	f7fd fc2b 	bl	80006f6 <lcd_print>
 8002ea0:	e033      	b.n	8002f0a <menu+0x2752>
 8002ea2:	bf00      	nop
 8002ea4:	20000b44 	.word	0x20000b44
 8002ea8:	0800cba4 	.word	0x0800cba4
 8002eac:	20000b37 	.word	0x20000b37
 8002eb0:	0800cb48 	.word	0x0800cb48
 8002eb4:	0800cb5c 	.word	0x0800cb5c
 8002eb8:	0800cb6c 	.word	0x0800cb6c
 8002ebc:	0800cb80 	.word	0x0800cb80
 8002ec0:	40010800 	.word	0x40010800
 8002ec4:	20000b52 	.word	0x20000b52
 8002ec8:	20000ab8 	.word	0x20000ab8
 8002ecc:	20000b2a 	.word	0x20000b2a
 8002ed0:	20000b4f 	.word	0x20000b4f
 8002ed4:	20000b24 	.word	0x20000b24
 8002ed8:	0800cbb4 	.word	0x0800cbb4
 8002edc:	0800cbc8 	.word	0x0800cbc8
 8002ee0:	0800c868 	.word	0x0800c868
 8002ee4:	0800cbdc 	.word	0x0800cbdc
 8002ee8:	20000b38 	.word	0x20000b38
 8002eec:	20000af8 	.word	0x20000af8
 8002ef0:	0800cbec 	.word	0x0800cbec
 8002ef4:	0800cc00 	.word	0x0800cc00
			} else if(dilSecim == 1) {
 8002ef8:	4b98      	ldr	r3, [pc, #608]	; (800315c <menu+0x29a4>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d104      	bne.n	8002f0a <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8002f00:	4a97      	ldr	r2, [pc, #604]	; (8003160 <menu+0x29a8>)
 8002f02:	2101      	movs	r1, #1
 8002f04:	2002      	movs	r0, #2
 8002f06:	f7fd fbf6 	bl	80006f6 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8002f0a:	4b96      	ldr	r3, [pc, #600]	; (8003164 <menu+0x29ac>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	220a      	movs	r2, #10
 8002f10:	4995      	ldr	r1, [pc, #596]	; (8003168 <menu+0x29b0>)
 8002f12:	4618      	mov	r0, r3
 8002f14:	f008 fc68 	bl	800b7e8 <itoa>
		lcd_print(2,16,snum);
 8002f18:	4a93      	ldr	r2, [pc, #588]	; (8003168 <menu+0x29b0>)
 8002f1a:	2110      	movs	r1, #16
 8002f1c:	2002      	movs	r0, #2
 8002f1e:	f7fd fbea 	bl	80006f6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f22:	2102      	movs	r1, #2
 8002f24:	4891      	ldr	r0, [pc, #580]	; (800316c <menu+0x29b4>)
 8002f26:	f005 fc33 	bl	8008790 <HAL_GPIO_ReadPin>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d115      	bne.n	8002f5c <menu+0x27a4>
 8002f30:	4b8f      	ldr	r3, [pc, #572]	; (8003170 <menu+0x29b8>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	f083 0301 	eor.w	r3, r3, #1
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00e      	beq.n	8002f5c <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8002f3e:	4b89      	ldr	r3, [pc, #548]	; (8003164 <menu+0x29ac>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	3301      	adds	r3, #1
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	4b87      	ldr	r3, [pc, #540]	; (8003164 <menu+0x29ac>)
 8002f48:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8002f4a:	4b86      	ldr	r3, [pc, #536]	; (8003164 <menu+0x29ac>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b05      	cmp	r3, #5
 8002f50:	d902      	bls.n	8002f58 <menu+0x27a0>
				asagiValfTmr = 0;
 8002f52:	4b84      	ldr	r3, [pc, #528]	; (8003164 <menu+0x29ac>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f58:	f001 ffa2 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f5c:	2104      	movs	r1, #4
 8002f5e:	4883      	ldr	r0, [pc, #524]	; (800316c <menu+0x29b4>)
 8002f60:	f005 fc16 	bl	8008790 <HAL_GPIO_ReadPin>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d115      	bne.n	8002f96 <menu+0x27de>
 8002f6a:	4b81      	ldr	r3, [pc, #516]	; (8003170 <menu+0x29b8>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	f083 0301 	eor.w	r3, r3, #1
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00e      	beq.n	8002f96 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8002f78:	4b7a      	ldr	r3, [pc, #488]	; (8003164 <menu+0x29ac>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b2da      	uxtb	r2, r3
 8002f80:	4b78      	ldr	r3, [pc, #480]	; (8003164 <menu+0x29ac>)
 8002f82:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8002f84:	4b77      	ldr	r3, [pc, #476]	; (8003164 <menu+0x29ac>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b06      	cmp	r3, #6
 8002f8a:	d902      	bls.n	8002f92 <menu+0x27da>
		   		asagiValfTmr = 5;
 8002f8c:	4b75      	ldr	r3, [pc, #468]	; (8003164 <menu+0x29ac>)
 8002f8e:	2205      	movs	r2, #5
 8002f90:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f92:	f001 ff85 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f96:	2108      	movs	r1, #8
 8002f98:	4874      	ldr	r0, [pc, #464]	; (800316c <menu+0x29b4>)
 8002f9a:	f005 fbf9 	bl	8008790 <HAL_GPIO_ReadPin>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d10d      	bne.n	8002fc0 <menu+0x2808>
 8002fa4:	4b72      	ldr	r3, [pc, #456]	; (8003170 <menu+0x29b8>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	f083 0301 	eor.w	r3, r3, #1
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d006      	beq.n	8002fc0 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8002fb2:	4b6c      	ldr	r3, [pc, #432]	; (8003164 <menu+0x29ac>)
 8002fb4:	781a      	ldrb	r2, [r3, #0]
 8002fb6:	4b6f      	ldr	r3, [pc, #444]	; (8003174 <menu+0x29bc>)
 8002fb8:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8002fba:	4b6f      	ldr	r3, [pc, #444]	; (8003178 <menu+0x29c0>)
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8002fc0:	4b6e      	ldr	r3, [pc, #440]	; (800317c <menu+0x29c4>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b18      	cmp	r3, #24
 8002fc6:	f040 809d 	bne.w	8003104 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8002fca:	4b6d      	ldr	r3, [pc, #436]	; (8003180 <menu+0x29c8>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d113      	bne.n	8002ffa <menu+0x2842>
			if(dilSecim == 0) {
 8002fd2:	4b62      	ldr	r3, [pc, #392]	; (800315c <menu+0x29a4>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d105      	bne.n	8002fe6 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8002fda:	4a6a      	ldr	r2, [pc, #424]	; (8003184 <menu+0x29cc>)
 8002fdc:	2101      	movs	r1, #1
 8002fde:	2001      	movs	r0, #1
 8002fe0:	f7fd fb89 	bl	80006f6 <lcd_print>
 8002fe4:	e020      	b.n	8003028 <menu+0x2870>
			} else if(dilSecim == 1) {
 8002fe6:	4b5d      	ldr	r3, [pc, #372]	; (800315c <menu+0x29a4>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d11c      	bne.n	8003028 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8002fee:	4a66      	ldr	r2, [pc, #408]	; (8003188 <menu+0x29d0>)
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	2001      	movs	r0, #1
 8002ff4:	f7fd fb7f 	bl	80006f6 <lcd_print>
 8002ff8:	e016      	b.n	8003028 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002ffa:	4b61      	ldr	r3, [pc, #388]	; (8003180 <menu+0x29c8>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d112      	bne.n	8003028 <menu+0x2870>
			if(dilSecim == 0) {
 8003002:	4b56      	ldr	r3, [pc, #344]	; (800315c <menu+0x29a4>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d105      	bne.n	8003016 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 800300a:	4a60      	ldr	r2, [pc, #384]	; (800318c <menu+0x29d4>)
 800300c:	2101      	movs	r1, #1
 800300e:	2001      	movs	r0, #1
 8003010:	f7fd fb71 	bl	80006f6 <lcd_print>
 8003014:	e008      	b.n	8003028 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003016:	4b51      	ldr	r3, [pc, #324]	; (800315c <menu+0x29a4>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d104      	bne.n	8003028 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 800301e:	4a5c      	ldr	r2, [pc, #368]	; (8003190 <menu+0x29d8>)
 8003020:	2101      	movs	r1, #1
 8003022:	2001      	movs	r0, #1
 8003024:	f7fd fb67 	bl	80006f6 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003028:	4b4c      	ldr	r3, [pc, #304]	; (800315c <menu+0x29a4>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d105      	bne.n	800303c <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003030:	4a58      	ldr	r2, [pc, #352]	; (8003194 <menu+0x29dc>)
 8003032:	2101      	movs	r1, #1
 8003034:	2002      	movs	r0, #2
 8003036:	f7fd fb5e 	bl	80006f6 <lcd_print>
 800303a:	e008      	b.n	800304e <menu+0x2896>
			} else if(dilSecim == 1) {
 800303c:	4b47      	ldr	r3, [pc, #284]	; (800315c <menu+0x29a4>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d104      	bne.n	800304e <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003044:	4a46      	ldr	r2, [pc, #280]	; (8003160 <menu+0x29a8>)
 8003046:	2101      	movs	r1, #1
 8003048:	2002      	movs	r0, #2
 800304a:	f7fd fb54 	bl	80006f6 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 800304e:	4b52      	ldr	r3, [pc, #328]	; (8003198 <menu+0x29e0>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	220a      	movs	r2, #10
 8003054:	4944      	ldr	r1, [pc, #272]	; (8003168 <menu+0x29b0>)
 8003056:	4618      	mov	r0, r3
 8003058:	f008 fbc6 	bl	800b7e8 <itoa>
		lcd_print(2, 16, snum);
 800305c:	4a42      	ldr	r2, [pc, #264]	; (8003168 <menu+0x29b0>)
 800305e:	2110      	movs	r1, #16
 8003060:	2002      	movs	r0, #2
 8003062:	f7fd fb48 	bl	80006f6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003066:	2102      	movs	r1, #2
 8003068:	4840      	ldr	r0, [pc, #256]	; (800316c <menu+0x29b4>)
 800306a:	f005 fb91 	bl	8008790 <HAL_GPIO_ReadPin>
 800306e:	4603      	mov	r3, r0
 8003070:	2b01      	cmp	r3, #1
 8003072:	d115      	bne.n	80030a0 <menu+0x28e8>
 8003074:	4b3e      	ldr	r3, [pc, #248]	; (8003170 <menu+0x29b8>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	f083 0301 	eor.w	r3, r3, #1
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00e      	beq.n	80030a0 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003082:	4b45      	ldr	r3, [pc, #276]	; (8003198 <menu+0x29e0>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	3301      	adds	r3, #1
 8003088:	b2da      	uxtb	r2, r3
 800308a:	4b43      	ldr	r3, [pc, #268]	; (8003198 <menu+0x29e0>)
 800308c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 800308e:	4b42      	ldr	r3, [pc, #264]	; (8003198 <menu+0x29e0>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b05      	cmp	r3, #5
 8003094:	d902      	bls.n	800309c <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003096:	4b40      	ldr	r3, [pc, #256]	; (8003198 <menu+0x29e0>)
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800309c:	f001 ff00 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030a0:	2104      	movs	r1, #4
 80030a2:	4832      	ldr	r0, [pc, #200]	; (800316c <menu+0x29b4>)
 80030a4:	f005 fb74 	bl	8008790 <HAL_GPIO_ReadPin>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d115      	bne.n	80030da <menu+0x2922>
 80030ae:	4b30      	ldr	r3, [pc, #192]	; (8003170 <menu+0x29b8>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	f083 0301 	eor.w	r3, r3, #1
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00e      	beq.n	80030da <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 80030bc:	4b36      	ldr	r3, [pc, #216]	; (8003198 <menu+0x29e0>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	4b34      	ldr	r3, [pc, #208]	; (8003198 <menu+0x29e0>)
 80030c6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 80030c8:	4b33      	ldr	r3, [pc, #204]	; (8003198 <menu+0x29e0>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b06      	cmp	r3, #6
 80030ce:	d902      	bls.n	80030d6 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 80030d0:	4b31      	ldr	r3, [pc, #196]	; (8003198 <menu+0x29e0>)
 80030d2:	2205      	movs	r2, #5
 80030d4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030d6:	f001 fee3 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030da:	2108      	movs	r1, #8
 80030dc:	4823      	ldr	r0, [pc, #140]	; (800316c <menu+0x29b4>)
 80030de:	f005 fb57 	bl	8008790 <HAL_GPIO_ReadPin>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d10d      	bne.n	8003104 <menu+0x294c>
 80030e8:	4b21      	ldr	r3, [pc, #132]	; (8003170 <menu+0x29b8>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	f083 0301 	eor.w	r3, r3, #1
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d006      	beq.n	8003104 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 80030f6:	4b28      	ldr	r3, [pc, #160]	; (8003198 <menu+0x29e0>)
 80030f8:	781a      	ldrb	r2, [r3, #0]
 80030fa:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <menu+0x29bc>)
 80030fc:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 80030fe:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <menu+0x29c0>)
 8003100:	2201      	movs	r2, #1
 8003102:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003104:	4b1d      	ldr	r3, [pc, #116]	; (800317c <menu+0x29c4>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b19      	cmp	r3, #25
 800310a:	f040 80c4 	bne.w	8003296 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 800310e:	4b1c      	ldr	r3, [pc, #112]	; (8003180 <menu+0x29c8>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b02      	cmp	r3, #2
 8003114:	d113      	bne.n	800313e <menu+0x2986>
			if(dilSecim == 0) {
 8003116:	4b11      	ldr	r3, [pc, #68]	; (800315c <menu+0x29a4>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d105      	bne.n	800312a <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 800311e:	4a1f      	ldr	r2, [pc, #124]	; (800319c <menu+0x29e4>)
 8003120:	2101      	movs	r1, #1
 8003122:	2001      	movs	r0, #1
 8003124:	f7fd fae7 	bl	80006f6 <lcd_print>
 8003128:	e047      	b.n	80031ba <menu+0x2a02>
			} else if(dilSecim == 1) {
 800312a:	4b0c      	ldr	r3, [pc, #48]	; (800315c <menu+0x29a4>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d143      	bne.n	80031ba <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003132:	4a1b      	ldr	r2, [pc, #108]	; (80031a0 <menu+0x29e8>)
 8003134:	2101      	movs	r1, #1
 8003136:	2001      	movs	r0, #1
 8003138:	f7fd fadd 	bl	80006f6 <lcd_print>
 800313c:	e03d      	b.n	80031ba <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800313e:	4b10      	ldr	r3, [pc, #64]	; (8003180 <menu+0x29c8>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d139      	bne.n	80031ba <menu+0x2a02>
			if(dilSecim == 0) {
 8003146:	4b05      	ldr	r3, [pc, #20]	; (800315c <menu+0x29a4>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d12c      	bne.n	80031a8 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 800314e:	4a15      	ldr	r2, [pc, #84]	; (80031a4 <menu+0x29ec>)
 8003150:	2101      	movs	r1, #1
 8003152:	2001      	movs	r0, #1
 8003154:	f7fd facf 	bl	80006f6 <lcd_print>
 8003158:	e02f      	b.n	80031ba <menu+0x2a02>
 800315a:	bf00      	nop
 800315c:	20000b44 	.word	0x20000b44
 8003160:	0800cbdc 	.word	0x0800cbdc
 8003164:	20000b39 	.word	0x20000b39
 8003168:	20000af8 	.word	0x20000af8
 800316c:	40010800 	.word	0x40010800
 8003170:	20000b52 	.word	0x20000b52
 8003174:	20000ab8 	.word	0x20000ab8
 8003178:	20000b4f 	.word	0x20000b4f
 800317c:	20000b24 	.word	0x20000b24
 8003180:	20000b33 	.word	0x20000b33
 8003184:	0800cc14 	.word	0x0800cc14
 8003188:	0800cc28 	.word	0x0800cc28
 800318c:	0800cc3c 	.word	0x0800cc3c
 8003190:	0800cc50 	.word	0x0800cc50
 8003194:	0800c868 	.word	0x0800c868
 8003198:	20000b3a 	.word	0x20000b3a
 800319c:	0800cc64 	.word	0x0800cc64
 80031a0:	0800cc78 	.word	0x0800cc78
 80031a4:	0800cc8c 	.word	0x0800cc8c
			} else if(dilSecim == 1) {
 80031a8:	4b73      	ldr	r3, [pc, #460]	; (8003378 <menu+0x2bc0>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d104      	bne.n	80031ba <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 80031b0:	4a72      	ldr	r2, [pc, #456]	; (800337c <menu+0x2bc4>)
 80031b2:	2101      	movs	r1, #1
 80031b4:	2001      	movs	r0, #1
 80031b6:	f7fd fa9e 	bl	80006f6 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 80031ba:	4b6f      	ldr	r3, [pc, #444]	; (8003378 <menu+0x2bc0>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d105      	bne.n	80031ce <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 80031c2:	4a6f      	ldr	r2, [pc, #444]	; (8003380 <menu+0x2bc8>)
 80031c4:	2101      	movs	r1, #1
 80031c6:	2002      	movs	r0, #2
 80031c8:	f7fd fa95 	bl	80006f6 <lcd_print>
 80031cc:	e008      	b.n	80031e0 <menu+0x2a28>
			} else if(dilSecim == 1) {
 80031ce:	4b6a      	ldr	r3, [pc, #424]	; (8003378 <menu+0x2bc0>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d104      	bne.n	80031e0 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 80031d6:	4a6b      	ldr	r2, [pc, #428]	; (8003384 <menu+0x2bcc>)
 80031d8:	2101      	movs	r1, #1
 80031da:	2002      	movs	r0, #2
 80031dc:	f7fd fa8b 	bl	80006f6 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 80031e0:	4b69      	ldr	r3, [pc, #420]	; (8003388 <menu+0x2bd0>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	220a      	movs	r2, #10
 80031e6:	4969      	ldr	r1, [pc, #420]	; (800338c <menu+0x2bd4>)
 80031e8:	4618      	mov	r0, r3
 80031ea:	f008 fafd 	bl	800b7e8 <itoa>
		lcd_print(2,16,snum);
 80031ee:	4a67      	ldr	r2, [pc, #412]	; (800338c <menu+0x2bd4>)
 80031f0:	2110      	movs	r1, #16
 80031f2:	2002      	movs	r0, #2
 80031f4:	f7fd fa7f 	bl	80006f6 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031f8:	2102      	movs	r1, #2
 80031fa:	4865      	ldr	r0, [pc, #404]	; (8003390 <menu+0x2bd8>)
 80031fc:	f005 fac8 	bl	8008790 <HAL_GPIO_ReadPin>
 8003200:	4603      	mov	r3, r0
 8003202:	2b01      	cmp	r3, #1
 8003204:	d115      	bne.n	8003232 <menu+0x2a7a>
 8003206:	4b63      	ldr	r3, [pc, #396]	; (8003394 <menu+0x2bdc>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	f083 0301 	eor.w	r3, r3, #1
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00e      	beq.n	8003232 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003214:	4b5c      	ldr	r3, [pc, #368]	; (8003388 <menu+0x2bd0>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	3301      	adds	r3, #1
 800321a:	b2da      	uxtb	r2, r3
 800321c:	4b5a      	ldr	r3, [pc, #360]	; (8003388 <menu+0x2bd0>)
 800321e:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003220:	4b59      	ldr	r3, [pc, #356]	; (8003388 <menu+0x2bd0>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b05      	cmp	r3, #5
 8003226:	d902      	bls.n	800322e <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003228:	4b57      	ldr	r3, [pc, #348]	; (8003388 <menu+0x2bd0>)
 800322a:	2200      	movs	r2, #0
 800322c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800322e:	f001 fe37 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003232:	2104      	movs	r1, #4
 8003234:	4856      	ldr	r0, [pc, #344]	; (8003390 <menu+0x2bd8>)
 8003236:	f005 faab 	bl	8008790 <HAL_GPIO_ReadPin>
 800323a:	4603      	mov	r3, r0
 800323c:	2b01      	cmp	r3, #1
 800323e:	d115      	bne.n	800326c <menu+0x2ab4>
 8003240:	4b54      	ldr	r3, [pc, #336]	; (8003394 <menu+0x2bdc>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	f083 0301 	eor.w	r3, r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00e      	beq.n	800326c <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 800324e:	4b4e      	ldr	r3, [pc, #312]	; (8003388 <menu+0x2bd0>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	3b01      	subs	r3, #1
 8003254:	b2da      	uxtb	r2, r3
 8003256:	4b4c      	ldr	r3, [pc, #304]	; (8003388 <menu+0x2bd0>)
 8003258:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 800325a:	4b4b      	ldr	r3, [pc, #300]	; (8003388 <menu+0x2bd0>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b06      	cmp	r3, #6
 8003260:	d902      	bls.n	8003268 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003262:	4b49      	ldr	r3, [pc, #292]	; (8003388 <menu+0x2bd0>)
 8003264:	2205      	movs	r2, #5
 8003266:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003268:	f001 fe1a 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800326c:	2108      	movs	r1, #8
 800326e:	4848      	ldr	r0, [pc, #288]	; (8003390 <menu+0x2bd8>)
 8003270:	f005 fa8e 	bl	8008790 <HAL_GPIO_ReadPin>
 8003274:	4603      	mov	r3, r0
 8003276:	2b01      	cmp	r3, #1
 8003278:	d10d      	bne.n	8003296 <menu+0x2ade>
 800327a:	4b46      	ldr	r3, [pc, #280]	; (8003394 <menu+0x2bdc>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	f083 0301 	eor.w	r3, r3, #1
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d006      	beq.n	8003296 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003288:	4b3f      	ldr	r3, [pc, #252]	; (8003388 <menu+0x2bd0>)
 800328a:	781a      	ldrb	r2, [r3, #0]
 800328c:	4b42      	ldr	r3, [pc, #264]	; (8003398 <menu+0x2be0>)
 800328e:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003290:	4b42      	ldr	r3, [pc, #264]	; (800339c <menu+0x2be4>)
 8003292:	2201      	movs	r2, #1
 8003294:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003296:	4b42      	ldr	r3, [pc, #264]	; (80033a0 <menu+0x2be8>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b1a      	cmp	r3, #26
 800329c:	f040 80ec 	bne.w	8003478 <menu+0x2cc0>
		if(dilSecim == 0) {
 80032a0:	4b35      	ldr	r3, [pc, #212]	; (8003378 <menu+0x2bc0>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d105      	bne.n	80032b4 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 80032a8:	4a3e      	ldr	r2, [pc, #248]	; (80033a4 <menu+0x2bec>)
 80032aa:	2101      	movs	r1, #1
 80032ac:	2001      	movs	r0, #1
 80032ae:	f7fd fa22 	bl	80006f6 <lcd_print>
 80032b2:	e008      	b.n	80032c6 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 80032b4:	4b30      	ldr	r3, [pc, #192]	; (8003378 <menu+0x2bc0>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d104      	bne.n	80032c6 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 80032bc:	4a3a      	ldr	r2, [pc, #232]	; (80033a8 <menu+0x2bf0>)
 80032be:	2101      	movs	r1, #1
 80032c0:	2001      	movs	r0, #1
 80032c2:	f7fd fa18 	bl	80006f6 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 80032c6:	4b39      	ldr	r3, [pc, #228]	; (80033ac <menu+0x2bf4>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b63      	cmp	r3, #99	; 0x63
 80032cc:	d91e      	bls.n	800330c <menu+0x2b54>
			if(dilSecim == 0) {
 80032ce:	4b2a      	ldr	r3, [pc, #168]	; (8003378 <menu+0x2bc0>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d104      	bne.n	80032e0 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 80032d6:	4a2a      	ldr	r2, [pc, #168]	; (8003380 <menu+0x2bc8>)
 80032d8:	2101      	movs	r1, #1
 80032da:	2002      	movs	r0, #2
 80032dc:	f7fd fa0b 	bl	80006f6 <lcd_print>
			}
			if(dilSecim == 1) {
 80032e0:	4b25      	ldr	r3, [pc, #148]	; (8003378 <menu+0x2bc0>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d104      	bne.n	80032f2 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 80032e8:	4a26      	ldr	r2, [pc, #152]	; (8003384 <menu+0x2bcc>)
 80032ea:	2101      	movs	r1, #1
 80032ec:	2002      	movs	r0, #2
 80032ee:	f7fd fa02 	bl	80006f6 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80032f2:	4b2e      	ldr	r3, [pc, #184]	; (80033ac <menu+0x2bf4>)
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	220a      	movs	r2, #10
 80032f8:	4924      	ldr	r1, [pc, #144]	; (800338c <menu+0x2bd4>)
 80032fa:	4618      	mov	r0, r3
 80032fc:	f008 fa74 	bl	800b7e8 <itoa>
			lcd_print(2,14,snum);
 8003300:	4a22      	ldr	r2, [pc, #136]	; (800338c <menu+0x2bd4>)
 8003302:	210e      	movs	r1, #14
 8003304:	2002      	movs	r0, #2
 8003306:	f7fd f9f6 	bl	80006f6 <lcd_print>
 800330a:	e066      	b.n	80033da <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 800330c:	4b27      	ldr	r3, [pc, #156]	; (80033ac <menu+0x2bf4>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b09      	cmp	r3, #9
 8003312:	d923      	bls.n	800335c <menu+0x2ba4>
 8003314:	4b25      	ldr	r3, [pc, #148]	; (80033ac <menu+0x2bf4>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	2b63      	cmp	r3, #99	; 0x63
 800331a:	d81f      	bhi.n	800335c <menu+0x2ba4>
			if(dilSecim == 0) {
 800331c:	4b16      	ldr	r3, [pc, #88]	; (8003378 <menu+0x2bc0>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d105      	bne.n	8003330 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003324:	4a16      	ldr	r2, [pc, #88]	; (8003380 <menu+0x2bc8>)
 8003326:	2101      	movs	r1, #1
 8003328:	2002      	movs	r0, #2
 800332a:	f7fd f9e4 	bl	80006f6 <lcd_print>
 800332e:	e008      	b.n	8003342 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003330:	4b11      	ldr	r3, [pc, #68]	; (8003378 <menu+0x2bc0>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d104      	bne.n	8003342 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003338:	4a12      	ldr	r2, [pc, #72]	; (8003384 <menu+0x2bcc>)
 800333a:	2101      	movs	r1, #1
 800333c:	2002      	movs	r0, #2
 800333e:	f7fd f9da 	bl	80006f6 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003342:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <menu+0x2bf4>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	220a      	movs	r2, #10
 8003348:	4910      	ldr	r1, [pc, #64]	; (800338c <menu+0x2bd4>)
 800334a:	4618      	mov	r0, r3
 800334c:	f008 fa4c 	bl	800b7e8 <itoa>
			lcd_print(2, 15, snum);
 8003350:	4a0e      	ldr	r2, [pc, #56]	; (800338c <menu+0x2bd4>)
 8003352:	210f      	movs	r1, #15
 8003354:	2002      	movs	r0, #2
 8003356:	f7fd f9ce 	bl	80006f6 <lcd_print>
 800335a:	e03e      	b.n	80033da <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 800335c:	4b13      	ldr	r3, [pc, #76]	; (80033ac <menu+0x2bf4>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b09      	cmp	r3, #9
 8003362:	d83a      	bhi.n	80033da <menu+0x2c22>
			if(dilSecim == 0) {
 8003364:	4b04      	ldr	r3, [pc, #16]	; (8003378 <menu+0x2bc0>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d121      	bne.n	80033b0 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 800336c:	4a04      	ldr	r2, [pc, #16]	; (8003380 <menu+0x2bc8>)
 800336e:	2101      	movs	r1, #1
 8003370:	2002      	movs	r0, #2
 8003372:	f7fd f9c0 	bl	80006f6 <lcd_print>
 8003376:	e024      	b.n	80033c2 <menu+0x2c0a>
 8003378:	20000b44 	.word	0x20000b44
 800337c:	0800cca0 	.word	0x0800cca0
 8003380:	0800c868 	.word	0x0800c868
 8003384:	0800cbdc 	.word	0x0800cbdc
 8003388:	20000b3b 	.word	0x20000b3b
 800338c:	20000af8 	.word	0x20000af8
 8003390:	40010800 	.word	0x40010800
 8003394:	20000b52 	.word	0x20000b52
 8003398:	20000ab8 	.word	0x20000ab8
 800339c:	20000b4f 	.word	0x20000b4f
 80033a0:	20000b24 	.word	0x20000b24
 80033a4:	0800ccb4 	.word	0x0800ccb4
 80033a8:	0800ccc8 	.word	0x0800ccc8
 80033ac:	20000b3c 	.word	0x20000b3c
			} else if(dilSecim == 1) {
 80033b0:	4b8f      	ldr	r3, [pc, #572]	; (80035f0 <menu+0x2e38>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d104      	bne.n	80033c2 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 80033b8:	4a8e      	ldr	r2, [pc, #568]	; (80035f4 <menu+0x2e3c>)
 80033ba:	2101      	movs	r1, #1
 80033bc:	2002      	movs	r0, #2
 80033be:	f7fd f99a 	bl	80006f6 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80033c2:	4b8d      	ldr	r3, [pc, #564]	; (80035f8 <menu+0x2e40>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	220a      	movs	r2, #10
 80033c8:	498c      	ldr	r1, [pc, #560]	; (80035fc <menu+0x2e44>)
 80033ca:	4618      	mov	r0, r3
 80033cc:	f008 fa0c 	bl	800b7e8 <itoa>
			lcd_print(2, 16, snum);
 80033d0:	4a8a      	ldr	r2, [pc, #552]	; (80035fc <menu+0x2e44>)
 80033d2:	2110      	movs	r1, #16
 80033d4:	2002      	movs	r0, #2
 80033d6:	f7fd f98e 	bl	80006f6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033da:	2102      	movs	r1, #2
 80033dc:	4888      	ldr	r0, [pc, #544]	; (8003600 <menu+0x2e48>)
 80033de:	f005 f9d7 	bl	8008790 <HAL_GPIO_ReadPin>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d115      	bne.n	8003414 <menu+0x2c5c>
 80033e8:	4b86      	ldr	r3, [pc, #536]	; (8003604 <menu+0x2e4c>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	f083 0301 	eor.w	r3, r3, #1
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00e      	beq.n	8003414 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 80033f6:	4b80      	ldr	r3, [pc, #512]	; (80035f8 <menu+0x2e40>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	3301      	adds	r3, #1
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	4b7e      	ldr	r3, [pc, #504]	; (80035f8 <menu+0x2e40>)
 8003400:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003402:	4b7d      	ldr	r3, [pc, #500]	; (80035f8 <menu+0x2e40>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2bb4      	cmp	r3, #180	; 0xb4
 8003408:	d902      	bls.n	8003410 <menu+0x2c58>
				makineCalismaTmr = 0;
 800340a:	4b7b      	ldr	r3, [pc, #492]	; (80035f8 <menu+0x2e40>)
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003410:	f001 fd46 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003414:	2104      	movs	r1, #4
 8003416:	487a      	ldr	r0, [pc, #488]	; (8003600 <menu+0x2e48>)
 8003418:	f005 f9ba 	bl	8008790 <HAL_GPIO_ReadPin>
 800341c:	4603      	mov	r3, r0
 800341e:	2b01      	cmp	r3, #1
 8003420:	d115      	bne.n	800344e <menu+0x2c96>
 8003422:	4b78      	ldr	r3, [pc, #480]	; (8003604 <menu+0x2e4c>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	f083 0301 	eor.w	r3, r3, #1
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00e      	beq.n	800344e <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003430:	4b71      	ldr	r3, [pc, #452]	; (80035f8 <menu+0x2e40>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	3b01      	subs	r3, #1
 8003436:	b2da      	uxtb	r2, r3
 8003438:	4b6f      	ldr	r3, [pc, #444]	; (80035f8 <menu+0x2e40>)
 800343a:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 800343c:	4b6e      	ldr	r3, [pc, #440]	; (80035f8 <menu+0x2e40>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2bb5      	cmp	r3, #181	; 0xb5
 8003442:	d902      	bls.n	800344a <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003444:	4b6c      	ldr	r3, [pc, #432]	; (80035f8 <menu+0x2e40>)
 8003446:	22b4      	movs	r2, #180	; 0xb4
 8003448:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800344a:	f001 fd29 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800344e:	2108      	movs	r1, #8
 8003450:	486b      	ldr	r0, [pc, #428]	; (8003600 <menu+0x2e48>)
 8003452:	f005 f99d 	bl	8008790 <HAL_GPIO_ReadPin>
 8003456:	4603      	mov	r3, r0
 8003458:	2b01      	cmp	r3, #1
 800345a:	d10d      	bne.n	8003478 <menu+0x2cc0>
 800345c:	4b69      	ldr	r3, [pc, #420]	; (8003604 <menu+0x2e4c>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	f083 0301 	eor.w	r3, r3, #1
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d006      	beq.n	8003478 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 800346a:	4b63      	ldr	r3, [pc, #396]	; (80035f8 <menu+0x2e40>)
 800346c:	781a      	ldrb	r2, [r3, #0]
 800346e:	4b66      	ldr	r3, [pc, #408]	; (8003608 <menu+0x2e50>)
 8003470:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003472:	4b66      	ldr	r3, [pc, #408]	; (800360c <menu+0x2e54>)
 8003474:	2201      	movs	r2, #1
 8003476:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003478:	4b65      	ldr	r3, [pc, #404]	; (8003610 <menu+0x2e58>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b1b      	cmp	r3, #27
 800347e:	f040 8083 	bne.w	8003588 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003482:	4a64      	ldr	r2, [pc, #400]	; (8003614 <menu+0x2e5c>)
 8003484:	2101      	movs	r1, #1
 8003486:	2001      	movs	r0, #1
 8003488:	f7fd f935 	bl	80006f6 <lcd_print>

		if(buzzer == 0) {
 800348c:	4b62      	ldr	r3, [pc, #392]	; (8003618 <menu+0x2e60>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d113      	bne.n	80034bc <menu+0x2d04>
			if(dilSecim == 0) {
 8003494:	4b56      	ldr	r3, [pc, #344]	; (80035f0 <menu+0x2e38>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d105      	bne.n	80034a8 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 800349c:	4a5f      	ldr	r2, [pc, #380]	; (800361c <menu+0x2e64>)
 800349e:	2101      	movs	r1, #1
 80034a0:	2002      	movs	r0, #2
 80034a2:	f7fd f928 	bl	80006f6 <lcd_print>
 80034a6:	e020      	b.n	80034ea <menu+0x2d32>
			} else if(dilSecim == 1) {
 80034a8:	4b51      	ldr	r3, [pc, #324]	; (80035f0 <menu+0x2e38>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d11c      	bne.n	80034ea <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 80034b0:	4a5b      	ldr	r2, [pc, #364]	; (8003620 <menu+0x2e68>)
 80034b2:	2101      	movs	r1, #1
 80034b4:	2002      	movs	r0, #2
 80034b6:	f7fd f91e 	bl	80006f6 <lcd_print>
 80034ba:	e016      	b.n	80034ea <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 80034bc:	4b56      	ldr	r3, [pc, #344]	; (8003618 <menu+0x2e60>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d112      	bne.n	80034ea <menu+0x2d32>
			if(dilSecim == 0) {
 80034c4:	4b4a      	ldr	r3, [pc, #296]	; (80035f0 <menu+0x2e38>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d105      	bne.n	80034d8 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80034cc:	4a55      	ldr	r2, [pc, #340]	; (8003624 <menu+0x2e6c>)
 80034ce:	2101      	movs	r1, #1
 80034d0:	2002      	movs	r0, #2
 80034d2:	f7fd f910 	bl	80006f6 <lcd_print>
 80034d6:	e008      	b.n	80034ea <menu+0x2d32>
			} else if(dilSecim == 1) {
 80034d8:	4b45      	ldr	r3, [pc, #276]	; (80035f0 <menu+0x2e38>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d104      	bne.n	80034ea <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80034e0:	4a51      	ldr	r2, [pc, #324]	; (8003628 <menu+0x2e70>)
 80034e2:	2101      	movs	r1, #1
 80034e4:	2002      	movs	r0, #2
 80034e6:	f7fd f906 	bl	80006f6 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80034ea:	2102      	movs	r1, #2
 80034ec:	4844      	ldr	r0, [pc, #272]	; (8003600 <menu+0x2e48>)
 80034ee:	f005 f94f 	bl	8008790 <HAL_GPIO_ReadPin>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d115      	bne.n	8003524 <menu+0x2d6c>
 80034f8:	4b42      	ldr	r3, [pc, #264]	; (8003604 <menu+0x2e4c>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	f083 0301 	eor.w	r3, r3, #1
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00e      	beq.n	8003524 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003506:	4b44      	ldr	r3, [pc, #272]	; (8003618 <menu+0x2e60>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	3301      	adds	r3, #1
 800350c:	b2da      	uxtb	r2, r3
 800350e:	4b42      	ldr	r3, [pc, #264]	; (8003618 <menu+0x2e60>)
 8003510:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003512:	4b41      	ldr	r3, [pc, #260]	; (8003618 <menu+0x2e60>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d902      	bls.n	8003520 <menu+0x2d68>
				buzzer = 0;
 800351a:	4b3f      	ldr	r3, [pc, #252]	; (8003618 <menu+0x2e60>)
 800351c:	2200      	movs	r2, #0
 800351e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003520:	f001 fcbe 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003524:	2104      	movs	r1, #4
 8003526:	4836      	ldr	r0, [pc, #216]	; (8003600 <menu+0x2e48>)
 8003528:	f005 f932 	bl	8008790 <HAL_GPIO_ReadPin>
 800352c:	4603      	mov	r3, r0
 800352e:	2b01      	cmp	r3, #1
 8003530:	d115      	bne.n	800355e <menu+0x2da6>
 8003532:	4b34      	ldr	r3, [pc, #208]	; (8003604 <menu+0x2e4c>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	f083 0301 	eor.w	r3, r3, #1
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00e      	beq.n	800355e <menu+0x2da6>
			buzzer = buzzer - 1;
 8003540:	4b35      	ldr	r3, [pc, #212]	; (8003618 <menu+0x2e60>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	3b01      	subs	r3, #1
 8003546:	b2da      	uxtb	r2, r3
 8003548:	4b33      	ldr	r3, [pc, #204]	; (8003618 <menu+0x2e60>)
 800354a:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 800354c:	4b32      	ldr	r3, [pc, #200]	; (8003618 <menu+0x2e60>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d002      	beq.n	800355a <menu+0x2da2>
		   		buzzer = 1;
 8003554:	4b30      	ldr	r3, [pc, #192]	; (8003618 <menu+0x2e60>)
 8003556:	2201      	movs	r2, #1
 8003558:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800355a:	f001 fca1 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800355e:	2108      	movs	r1, #8
 8003560:	4827      	ldr	r0, [pc, #156]	; (8003600 <menu+0x2e48>)
 8003562:	f005 f915 	bl	8008790 <HAL_GPIO_ReadPin>
 8003566:	4603      	mov	r3, r0
 8003568:	2b01      	cmp	r3, #1
 800356a:	d10d      	bne.n	8003588 <menu+0x2dd0>
 800356c:	4b25      	ldr	r3, [pc, #148]	; (8003604 <menu+0x2e4c>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	f083 0301 	eor.w	r3, r3, #1
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d006      	beq.n	8003588 <menu+0x2dd0>
			eepromData[25] = buzzer;
 800357a:	4b27      	ldr	r3, [pc, #156]	; (8003618 <menu+0x2e60>)
 800357c:	781a      	ldrb	r2, [r3, #0]
 800357e:	4b22      	ldr	r3, [pc, #136]	; (8003608 <menu+0x2e50>)
 8003580:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003582:	4b22      	ldr	r3, [pc, #136]	; (800360c <menu+0x2e54>)
 8003584:	2201      	movs	r2, #1
 8003586:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003588:	4b21      	ldr	r3, [pc, #132]	; (8003610 <menu+0x2e58>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b1c      	cmp	r3, #28
 800358e:	f040 80ab 	bne.w	80036e8 <menu+0x2f30>
		calismaSayModu = 0;
 8003592:	4b26      	ldr	r3, [pc, #152]	; (800362c <menu+0x2e74>)
 8003594:	2200      	movs	r2, #0
 8003596:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003598:	4a25      	ldr	r2, [pc, #148]	; (8003630 <menu+0x2e78>)
 800359a:	2101      	movs	r1, #1
 800359c:	2001      	movs	r0, #1
 800359e:	f7fd f8aa 	bl	80006f6 <lcd_print>

		if(demoMode == 0) {
 80035a2:	4b24      	ldr	r3, [pc, #144]	; (8003634 <menu+0x2e7c>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d113      	bne.n	80035d2 <menu+0x2e1a>
			if(dilSecim == 0) {
 80035aa:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <menu+0x2e38>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d105      	bne.n	80035be <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80035b2:	4a1a      	ldr	r2, [pc, #104]	; (800361c <menu+0x2e64>)
 80035b4:	2101      	movs	r1, #1
 80035b6:	2002      	movs	r0, #2
 80035b8:	f7fd f89d 	bl	80006f6 <lcd_print>
 80035bc:	e045      	b.n	800364a <menu+0x2e92>
			} else if(dilSecim == 1) {
 80035be:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <menu+0x2e38>)
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d141      	bne.n	800364a <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80035c6:	4a16      	ldr	r2, [pc, #88]	; (8003620 <menu+0x2e68>)
 80035c8:	2101      	movs	r1, #1
 80035ca:	2002      	movs	r0, #2
 80035cc:	f7fd f893 	bl	80006f6 <lcd_print>
 80035d0:	e03b      	b.n	800364a <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80035d2:	4b18      	ldr	r3, [pc, #96]	; (8003634 <menu+0x2e7c>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d137      	bne.n	800364a <menu+0x2e92>
			if(dilSecim == 0){
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <menu+0x2e38>)
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d12a      	bne.n	8003638 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80035e2:	4a10      	ldr	r2, [pc, #64]	; (8003624 <menu+0x2e6c>)
 80035e4:	2101      	movs	r1, #1
 80035e6:	2002      	movs	r0, #2
 80035e8:	f7fd f885 	bl	80006f6 <lcd_print>
 80035ec:	e02d      	b.n	800364a <menu+0x2e92>
 80035ee:	bf00      	nop
 80035f0:	20000b44 	.word	0x20000b44
 80035f4:	0800cbdc 	.word	0x0800cbdc
 80035f8:	20000b3c 	.word	0x20000b3c
 80035fc:	20000af8 	.word	0x20000af8
 8003600:	40010800 	.word	0x40010800
 8003604:	20000b52 	.word	0x20000b52
 8003608:	20000ab8 	.word	0x20000ab8
 800360c:	20000b4f 	.word	0x20000b4f
 8003610:	20000b24 	.word	0x20000b24
 8003614:	0800ccdc 	.word	0x0800ccdc
 8003618:	20000b40 	.word	0x20000b40
 800361c:	0800c604 	.word	0x0800c604
 8003620:	0800c618 	.word	0x0800c618
 8003624:	0800c664 	.word	0x0800c664
 8003628:	0800c678 	.word	0x0800c678
 800362c:	20000b43 	.word	0x20000b43
 8003630:	0800ccf0 	.word	0x0800ccf0
 8003634:	20000b42 	.word	0x20000b42
			} else if(dilSecim == 1) {
 8003638:	4b71      	ldr	r3, [pc, #452]	; (8003800 <menu+0x3048>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d104      	bne.n	800364a <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8003640:	4a70      	ldr	r2, [pc, #448]	; (8003804 <menu+0x304c>)
 8003642:	2101      	movs	r1, #1
 8003644:	2002      	movs	r0, #2
 8003646:	f7fd f856 	bl	80006f6 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800364a:	2102      	movs	r1, #2
 800364c:	486e      	ldr	r0, [pc, #440]	; (8003808 <menu+0x3050>)
 800364e:	f005 f89f 	bl	8008790 <HAL_GPIO_ReadPin>
 8003652:	4603      	mov	r3, r0
 8003654:	2b01      	cmp	r3, #1
 8003656:	d115      	bne.n	8003684 <menu+0x2ecc>
 8003658:	4b6c      	ldr	r3, [pc, #432]	; (800380c <menu+0x3054>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	f083 0301 	eor.w	r3, r3, #1
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00e      	beq.n	8003684 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8003666:	4b6a      	ldr	r3, [pc, #424]	; (8003810 <menu+0x3058>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	3301      	adds	r3, #1
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4b68      	ldr	r3, [pc, #416]	; (8003810 <menu+0x3058>)
 8003670:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003672:	4b67      	ldr	r3, [pc, #412]	; (8003810 <menu+0x3058>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d902      	bls.n	8003680 <menu+0x2ec8>
				demoMode = 0;
 800367a:	4b65      	ldr	r3, [pc, #404]	; (8003810 <menu+0x3058>)
 800367c:	2200      	movs	r2, #0
 800367e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003680:	f001 fc0e 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003684:	2104      	movs	r1, #4
 8003686:	4860      	ldr	r0, [pc, #384]	; (8003808 <menu+0x3050>)
 8003688:	f005 f882 	bl	8008790 <HAL_GPIO_ReadPin>
 800368c:	4603      	mov	r3, r0
 800368e:	2b01      	cmp	r3, #1
 8003690:	d115      	bne.n	80036be <menu+0x2f06>
 8003692:	4b5e      	ldr	r3, [pc, #376]	; (800380c <menu+0x3054>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	f083 0301 	eor.w	r3, r3, #1
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00e      	beq.n	80036be <menu+0x2f06>
			demoMode = demoMode - 1;
 80036a0:	4b5b      	ldr	r3, [pc, #364]	; (8003810 <menu+0x3058>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	4b59      	ldr	r3, [pc, #356]	; (8003810 <menu+0x3058>)
 80036aa:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80036ac:	4b58      	ldr	r3, [pc, #352]	; (8003810 <menu+0x3058>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d002      	beq.n	80036ba <menu+0x2f02>
		   		demoMode = 1;
 80036b4:	4b56      	ldr	r3, [pc, #344]	; (8003810 <menu+0x3058>)
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036ba:	f001 fbf1 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036be:	2108      	movs	r1, #8
 80036c0:	4851      	ldr	r0, [pc, #324]	; (8003808 <menu+0x3050>)
 80036c2:	f005 f865 	bl	8008790 <HAL_GPIO_ReadPin>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d10d      	bne.n	80036e8 <menu+0x2f30>
 80036cc:	4b4f      	ldr	r3, [pc, #316]	; (800380c <menu+0x3054>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	f083 0301 	eor.w	r3, r3, #1
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d006      	beq.n	80036e8 <menu+0x2f30>
			eepromData[26] = demoMode;
 80036da:	4b4d      	ldr	r3, [pc, #308]	; (8003810 <menu+0x3058>)
 80036dc:	781a      	ldrb	r2, [r3, #0]
 80036de:	4b4d      	ldr	r3, [pc, #308]	; (8003814 <menu+0x305c>)
 80036e0:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80036e2:	4b4d      	ldr	r3, [pc, #308]	; (8003818 <menu+0x3060>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80036e8:	4b4c      	ldr	r3, [pc, #304]	; (800381c <menu+0x3064>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b1d      	cmp	r3, #29
 80036ee:	f040 8132 	bne.w	8003956 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80036f2:	4b4b      	ldr	r3, [pc, #300]	; (8003820 <menu+0x3068>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d113      	bne.n	8003722 <menu+0x2f6a>
 80036fa:	4b4a      	ldr	r3, [pc, #296]	; (8003824 <menu+0x306c>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10f      	bne.n	8003722 <menu+0x2f6a>
 8003702:	4b49      	ldr	r3, [pc, #292]	; (8003828 <menu+0x3070>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10b      	bne.n	8003722 <menu+0x2f6a>
 800370a:	4b48      	ldr	r3, [pc, #288]	; (800382c <menu+0x3074>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d107      	bne.n	8003722 <menu+0x2f6a>
 8003712:	4b47      	ldr	r3, [pc, #284]	; (8003830 <menu+0x3078>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d103      	bne.n	8003722 <menu+0x2f6a>
			calismaSayisiYar = 0;
 800371a:	4b46      	ldr	r3, [pc, #280]	; (8003834 <menu+0x307c>)
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	e002      	b.n	8003728 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 8003722:	4b44      	ldr	r3, [pc, #272]	; (8003834 <menu+0x307c>)
 8003724:	2201      	movs	r2, #1
 8003726:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8003728:	4b43      	ldr	r3, [pc, #268]	; (8003838 <menu+0x3080>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d154      	bne.n	80037da <menu+0x3022>
			if(dilSecim == 0) {
 8003730:	4b33      	ldr	r3, [pc, #204]	; (8003800 <menu+0x3048>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d105      	bne.n	8003744 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8003738:	4a40      	ldr	r2, [pc, #256]	; (800383c <menu+0x3084>)
 800373a:	2101      	movs	r1, #1
 800373c:	2001      	movs	r0, #1
 800373e:	f7fc ffda 	bl	80006f6 <lcd_print>
 8003742:	e008      	b.n	8003756 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8003744:	4b2e      	ldr	r3, [pc, #184]	; (8003800 <menu+0x3048>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d104      	bne.n	8003756 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 800374c:	4a3c      	ldr	r2, [pc, #240]	; (8003840 <menu+0x3088>)
 800374e:	2101      	movs	r1, #1
 8003750:	2001      	movs	r0, #1
 8003752:	f7fc ffd0 	bl	80006f6 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8003756:	4b36      	ldr	r3, [pc, #216]	; (8003830 <menu+0x3078>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	220a      	movs	r2, #10
 800375c:	4939      	ldr	r1, [pc, #228]	; (8003844 <menu+0x308c>)
 800375e:	4618      	mov	r0, r3
 8003760:	f008 f842 	bl	800b7e8 <itoa>
			lcd_print(2, 12, snum);
 8003764:	4a37      	ldr	r2, [pc, #220]	; (8003844 <menu+0x308c>)
 8003766:	210c      	movs	r1, #12
 8003768:	2002      	movs	r0, #2
 800376a:	f7fc ffc4 	bl	80006f6 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800376e:	4b2f      	ldr	r3, [pc, #188]	; (800382c <menu+0x3074>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	220a      	movs	r2, #10
 8003774:	4933      	ldr	r1, [pc, #204]	; (8003844 <menu+0x308c>)
 8003776:	4618      	mov	r0, r3
 8003778:	f008 f836 	bl	800b7e8 <itoa>
			lcd_print(2, 13, snum);
 800377c:	4a31      	ldr	r2, [pc, #196]	; (8003844 <menu+0x308c>)
 800377e:	210d      	movs	r1, #13
 8003780:	2002      	movs	r0, #2
 8003782:	f7fc ffb8 	bl	80006f6 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8003786:	4b28      	ldr	r3, [pc, #160]	; (8003828 <menu+0x3070>)
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	220a      	movs	r2, #10
 800378c:	492d      	ldr	r1, [pc, #180]	; (8003844 <menu+0x308c>)
 800378e:	4618      	mov	r0, r3
 8003790:	f008 f82a 	bl	800b7e8 <itoa>
			lcd_print(2, 14, snum);
 8003794:	4a2b      	ldr	r2, [pc, #172]	; (8003844 <menu+0x308c>)
 8003796:	210e      	movs	r1, #14
 8003798:	2002      	movs	r0, #2
 800379a:	f7fc ffac 	bl	80006f6 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800379e:	4b21      	ldr	r3, [pc, #132]	; (8003824 <menu+0x306c>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	220a      	movs	r2, #10
 80037a4:	4927      	ldr	r1, [pc, #156]	; (8003844 <menu+0x308c>)
 80037a6:	4618      	mov	r0, r3
 80037a8:	f008 f81e 	bl	800b7e8 <itoa>
			lcd_print(2, 15, snum);
 80037ac:	4a25      	ldr	r2, [pc, #148]	; (8003844 <menu+0x308c>)
 80037ae:	210f      	movs	r1, #15
 80037b0:	2002      	movs	r0, #2
 80037b2:	f7fc ffa0 	bl	80006f6 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80037b6:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <menu+0x3068>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	220a      	movs	r2, #10
 80037bc:	4921      	ldr	r1, [pc, #132]	; (8003844 <menu+0x308c>)
 80037be:	4618      	mov	r0, r3
 80037c0:	f008 f812 	bl	800b7e8 <itoa>
			lcd_print(2, 16, snum);
 80037c4:	4a1f      	ldr	r2, [pc, #124]	; (8003844 <menu+0x308c>)
 80037c6:	2110      	movs	r1, #16
 80037c8:	2002      	movs	r0, #2
 80037ca:	f7fc ff94 	bl	80006f6 <lcd_print>

			lcd_print(2, 1, "           ");
 80037ce:	4a1e      	ldr	r2, [pc, #120]	; (8003848 <menu+0x3090>)
 80037d0:	2101      	movs	r1, #1
 80037d2:	2002      	movs	r0, #2
 80037d4:	f7fc ff8f 	bl	80006f6 <lcd_print>
 80037d8:	e048      	b.n	800386c <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80037da:	4b17      	ldr	r3, [pc, #92]	; (8003838 <menu+0x3080>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d144      	bne.n	800386c <menu+0x30b4>
			if(dilSecim == 0) {
 80037e2:	4b07      	ldr	r3, [pc, #28]	; (8003800 <menu+0x3048>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d132      	bne.n	8003850 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80037ea:	4a14      	ldr	r2, [pc, #80]	; (800383c <menu+0x3084>)
 80037ec:	2101      	movs	r1, #1
 80037ee:	2001      	movs	r0, #1
 80037f0:	f7fc ff81 	bl	80006f6 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80037f4:	4a15      	ldr	r2, [pc, #84]	; (800384c <menu+0x3094>)
 80037f6:	2101      	movs	r1, #1
 80037f8:	2002      	movs	r0, #2
 80037fa:	f7fc ff7c 	bl	80006f6 <lcd_print>
 80037fe:	e035      	b.n	800386c <menu+0x30b4>
 8003800:	20000b44 	.word	0x20000b44
 8003804:	0800c678 	.word	0x0800c678
 8003808:	40010800 	.word	0x40010800
 800380c:	20000b52 	.word	0x20000b52
 8003810:	20000b42 	.word	0x20000b42
 8003814:	20000ab8 	.word	0x20000ab8
 8003818:	20000b4f 	.word	0x20000b4f
 800381c:	20000b24 	.word	0x20000b24
 8003820:	20000b21 	.word	0x20000b21
 8003824:	20000b22 	.word	0x20000b22
 8003828:	20000941 	.word	0x20000941
 800382c:	20000942 	.word	0x20000942
 8003830:	20000b23 	.word	0x20000b23
 8003834:	20000b64 	.word	0x20000b64
 8003838:	20000b43 	.word	0x20000b43
 800383c:	0800cd00 	.word	0x0800cd00
 8003840:	0800cd14 	.word	0x0800cd14
 8003844:	20000af8 	.word	0x20000af8
 8003848:	0800cd28 	.word	0x0800cd28
 800384c:	0800cd34 	.word	0x0800cd34
			} else if(dilSecim == 1) {
 8003850:	4b95      	ldr	r3, [pc, #596]	; (8003aa8 <menu+0x32f0>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d109      	bne.n	800386c <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8003858:	4a94      	ldr	r2, [pc, #592]	; (8003aac <menu+0x32f4>)
 800385a:	2101      	movs	r1, #1
 800385c:	2001      	movs	r0, #1
 800385e:	f7fc ff4a 	bl	80006f6 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8003862:	4a93      	ldr	r2, [pc, #588]	; (8003ab0 <menu+0x32f8>)
 8003864:	2101      	movs	r1, #1
 8003866:	2002      	movs	r0, #2
 8003868:	f7fc ff45 	bl	80006f6 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800386c:	2102      	movs	r1, #2
 800386e:	4891      	ldr	r0, [pc, #580]	; (8003ab4 <menu+0x32fc>)
 8003870:	f004 ff8e 	bl	8008790 <HAL_GPIO_ReadPin>
 8003874:	4603      	mov	r3, r0
 8003876:	2b01      	cmp	r3, #1
 8003878:	d119      	bne.n	80038ae <menu+0x30f6>
 800387a:	4b8f      	ldr	r3, [pc, #572]	; (8003ab8 <menu+0x3300>)
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	f083 0301 	eor.w	r3, r3, #1
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b00      	cmp	r3, #0
 8003886:	d012      	beq.n	80038ae <menu+0x30f6>
 8003888:	4b8c      	ldr	r3, [pc, #560]	; (8003abc <menu+0x3304>)
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00e      	beq.n	80038ae <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8003890:	4b8b      	ldr	r3, [pc, #556]	; (8003ac0 <menu+0x3308>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	3301      	adds	r3, #1
 8003896:	b2da      	uxtb	r2, r3
 8003898:	4b89      	ldr	r3, [pc, #548]	; (8003ac0 <menu+0x3308>)
 800389a:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 800389c:	4b88      	ldr	r3, [pc, #544]	; (8003ac0 <menu+0x3308>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d902      	bls.n	80038aa <menu+0x30f2>
				calismaSayModu = 0;
 80038a4:	4b86      	ldr	r3, [pc, #536]	; (8003ac0 <menu+0x3308>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038aa:	f001 faf9 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80038ae:	2104      	movs	r1, #4
 80038b0:	4880      	ldr	r0, [pc, #512]	; (8003ab4 <menu+0x32fc>)
 80038b2:	f004 ff6d 	bl	8008790 <HAL_GPIO_ReadPin>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d119      	bne.n	80038f0 <menu+0x3138>
 80038bc:	4b7e      	ldr	r3, [pc, #504]	; (8003ab8 <menu+0x3300>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	f083 0301 	eor.w	r3, r3, #1
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d012      	beq.n	80038f0 <menu+0x3138>
 80038ca:	4b7c      	ldr	r3, [pc, #496]	; (8003abc <menu+0x3304>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00e      	beq.n	80038f0 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80038d2:	4b7b      	ldr	r3, [pc, #492]	; (8003ac0 <menu+0x3308>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	4b79      	ldr	r3, [pc, #484]	; (8003ac0 <menu+0x3308>)
 80038dc:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80038de:	4b78      	ldr	r3, [pc, #480]	; (8003ac0 <menu+0x3308>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <menu+0x3134>
		   		calismaSayModu = 1;
 80038e6:	4b76      	ldr	r3, [pc, #472]	; (8003ac0 <menu+0x3308>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80038ec:	f001 fad8 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80038f0:	2108      	movs	r1, #8
 80038f2:	4870      	ldr	r0, [pc, #448]	; (8003ab4 <menu+0x32fc>)
 80038f4:	f004 ff4c 	bl	8008790 <HAL_GPIO_ReadPin>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d12b      	bne.n	8003956 <menu+0x319e>
 80038fe:	4b6e      	ldr	r3, [pc, #440]	; (8003ab8 <menu+0x3300>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	f083 0301 	eor.w	r3, r3, #1
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d024      	beq.n	8003956 <menu+0x319e>
			eepromData[32] = 0;
 800390c:	4b6d      	ldr	r3, [pc, #436]	; (8003ac4 <menu+0x330c>)
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8003914:	4b6b      	ldr	r3, [pc, #428]	; (8003ac4 <menu+0x330c>)
 8003916:	2200      	movs	r2, #0
 8003918:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 800391a:	4b6a      	ldr	r3, [pc, #424]	; (8003ac4 <menu+0x330c>)
 800391c:	2200      	movs	r2, #0
 800391e:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8003920:	4b68      	ldr	r3, [pc, #416]	; (8003ac4 <menu+0x330c>)
 8003922:	2200      	movs	r2, #0
 8003924:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8003926:	4b67      	ldr	r3, [pc, #412]	; (8003ac4 <menu+0x330c>)
 8003928:	2200      	movs	r2, #0
 800392a:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 800392c:	4b66      	ldr	r3, [pc, #408]	; (8003ac8 <menu+0x3310>)
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8003932:	4b66      	ldr	r3, [pc, #408]	; (8003acc <menu+0x3314>)
 8003934:	2200      	movs	r2, #0
 8003936:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8003938:	4b65      	ldr	r3, [pc, #404]	; (8003ad0 <menu+0x3318>)
 800393a:	2200      	movs	r2, #0
 800393c:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800393e:	4b65      	ldr	r3, [pc, #404]	; (8003ad4 <menu+0x331c>)
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8003944:	4b64      	ldr	r3, [pc, #400]	; (8003ad8 <menu+0x3320>)
 8003946:	2200      	movs	r2, #0
 8003948:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800394a:	4b5d      	ldr	r3, [pc, #372]	; (8003ac0 <menu+0x3308>)
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003950:	4b62      	ldr	r3, [pc, #392]	; (8003adc <menu+0x3324>)
 8003952:	2201      	movs	r2, #1
 8003954:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003956:	4b62      	ldr	r3, [pc, #392]	; (8003ae0 <menu+0x3328>)
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b1e      	cmp	r3, #30
 800395c:	d16f      	bne.n	8003a3e <menu+0x3286>
		calismaSayModu = 0;
 800395e:	4b58      	ldr	r3, [pc, #352]	; (8003ac0 <menu+0x3308>)
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8003964:	4b50      	ldr	r3, [pc, #320]	; (8003aa8 <menu+0x32f0>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10a      	bne.n	8003982 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 800396c:	4a5d      	ldr	r2, [pc, #372]	; (8003ae4 <menu+0x332c>)
 800396e:	2101      	movs	r1, #1
 8003970:	2001      	movs	r0, #1
 8003972:	f7fc fec0 	bl	80006f6 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8003976:	4a5c      	ldr	r2, [pc, #368]	; (8003ae8 <menu+0x3330>)
 8003978:	2101      	movs	r1, #1
 800397a:	2002      	movs	r0, #2
 800397c:	f7fc febb 	bl	80006f6 <lcd_print>
 8003980:	e00d      	b.n	800399e <menu+0x31e6>
		} else if(dilSecim == 1) {
 8003982:	4b49      	ldr	r3, [pc, #292]	; (8003aa8 <menu+0x32f0>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d109      	bne.n	800399e <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 800398a:	4a58      	ldr	r2, [pc, #352]	; (8003aec <menu+0x3334>)
 800398c:	2101      	movs	r1, #1
 800398e:	2001      	movs	r0, #1
 8003990:	f7fc feb1 	bl	80006f6 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8003994:	4a56      	ldr	r2, [pc, #344]	; (8003af0 <menu+0x3338>)
 8003996:	2101      	movs	r1, #1
 8003998:	2002      	movs	r0, #2
 800399a:	f7fc feac 	bl	80006f6 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800399e:	2102      	movs	r1, #2
 80039a0:	4844      	ldr	r0, [pc, #272]	; (8003ab4 <menu+0x32fc>)
 80039a2:	f004 fef5 	bl	8008790 <HAL_GPIO_ReadPin>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d115      	bne.n	80039d8 <menu+0x3220>
 80039ac:	4b42      	ldr	r3, [pc, #264]	; (8003ab8 <menu+0x3300>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	f083 0301 	eor.w	r3, r3, #1
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00e      	beq.n	80039d8 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80039ba:	4b3b      	ldr	r3, [pc, #236]	; (8003aa8 <menu+0x32f0>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	3301      	adds	r3, #1
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	4b39      	ldr	r3, [pc, #228]	; (8003aa8 <menu+0x32f0>)
 80039c4:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80039c6:	4b38      	ldr	r3, [pc, #224]	; (8003aa8 <menu+0x32f0>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d902      	bls.n	80039d4 <menu+0x321c>
				dilSecim = 0;
 80039ce:	4b36      	ldr	r3, [pc, #216]	; (8003aa8 <menu+0x32f0>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80039d4:	f001 fa64 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039d8:	2104      	movs	r1, #4
 80039da:	4836      	ldr	r0, [pc, #216]	; (8003ab4 <menu+0x32fc>)
 80039dc:	f004 fed8 	bl	8008790 <HAL_GPIO_ReadPin>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d115      	bne.n	8003a12 <menu+0x325a>
 80039e6:	4b34      	ldr	r3, [pc, #208]	; (8003ab8 <menu+0x3300>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	f083 0301 	eor.w	r3, r3, #1
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d00e      	beq.n	8003a12 <menu+0x325a>
			dilSecim = dilSecim - 1;
 80039f4:	4b2c      	ldr	r3, [pc, #176]	; (8003aa8 <menu+0x32f0>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	4b2a      	ldr	r3, [pc, #168]	; (8003aa8 <menu+0x32f0>)
 80039fe:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003a00:	4b29      	ldr	r3, [pc, #164]	; (8003aa8 <menu+0x32f0>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <menu+0x3256>
		   		dilSecim = 1;
 8003a08:	4b27      	ldr	r3, [pc, #156]	; (8003aa8 <menu+0x32f0>)
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003a0e:	f001 fa47 	bl	8004ea0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a12:	2108      	movs	r1, #8
 8003a14:	4827      	ldr	r0, [pc, #156]	; (8003ab4 <menu+0x32fc>)
 8003a16:	f004 febb 	bl	8008790 <HAL_GPIO_ReadPin>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d10e      	bne.n	8003a3e <menu+0x3286>
 8003a20:	4b25      	ldr	r3, [pc, #148]	; (8003ab8 <menu+0x3300>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	f083 0301 	eor.w	r3, r3, #1
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d007      	beq.n	8003a3e <menu+0x3286>
			eepromData[33] = dilSecim;
 8003a2e:	4b1e      	ldr	r3, [pc, #120]	; (8003aa8 <menu+0x32f0>)
 8003a30:	781a      	ldrb	r2, [r3, #0]
 8003a32:	4b24      	ldr	r3, [pc, #144]	; (8003ac4 <menu+0x330c>)
 8003a34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8003a38:	4b28      	ldr	r3, [pc, #160]	; (8003adc <menu+0x3324>)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003a3e:	4b28      	ldr	r3, [pc, #160]	; (8003ae0 <menu+0x3328>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b1f      	cmp	r3, #31
 8003a44:	d12e      	bne.n	8003aa4 <menu+0x32ec>
		if(dilSecim == 0) {
 8003a46:	4b18      	ldr	r3, [pc, #96]	; (8003aa8 <menu+0x32f0>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10a      	bne.n	8003a64 <menu+0x32ac>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8003a4e:	4a29      	ldr	r2, [pc, #164]	; (8003af4 <menu+0x333c>)
 8003a50:	2101      	movs	r1, #1
 8003a52:	2001      	movs	r0, #1
 8003a54:	f7fc fe4f 	bl	80006f6 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8003a58:	4a27      	ldr	r2, [pc, #156]	; (8003af8 <menu+0x3340>)
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	2002      	movs	r0, #2
 8003a5e:	f7fc fe4a 	bl	80006f6 <lcd_print>
 8003a62:	e00d      	b.n	8003a80 <menu+0x32c8>
		} else if(dilSecim == 1) {
 8003a64:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <menu+0x32f0>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d109      	bne.n	8003a80 <menu+0x32c8>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8003a6c:	4a23      	ldr	r2, [pc, #140]	; (8003afc <menu+0x3344>)
 8003a6e:	2101      	movs	r1, #1
 8003a70:	2001      	movs	r0, #1
 8003a72:	f7fc fe40 	bl	80006f6 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8003a76:	4a22      	ldr	r2, [pc, #136]	; (8003b00 <menu+0x3348>)
 8003a78:	2101      	movs	r1, #1
 8003a7a:	2002      	movs	r0, #2
 8003a7c:	f7fc fe3b 	bl	80006f6 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003a80:	2108      	movs	r1, #8
 8003a82:	480c      	ldr	r0, [pc, #48]	; (8003ab4 <menu+0x32fc>)
 8003a84:	f004 fe84 	bl	8008790 <HAL_GPIO_ReadPin>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d10a      	bne.n	8003aa4 <menu+0x32ec>
			menuGiris = 0;
 8003a8e:	4b1d      	ldr	r3, [pc, #116]	; (8003b04 <menu+0x334c>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8003a94:	f7fc fe44 	bl	8000720 <lcd_clear>
			HAL_Delay(500);
 8003a98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a9c:	f004 f8a8 	bl	8007bf0 <HAL_Delay>
			NVIC_SystemReset();
 8003aa0:	f7fc fe5a 	bl	8000758 <__NVIC_SystemReset>
		}
	}
}
 8003aa4:	bf00      	nop
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	20000b44 	.word	0x20000b44
 8003aac:	0800cd14 	.word	0x0800cd14
 8003ab0:	0800cd48 	.word	0x0800cd48
 8003ab4:	40010800 	.word	0x40010800
 8003ab8:	20000b52 	.word	0x20000b52
 8003abc:	20000b64 	.word	0x20000b64
 8003ac0:	20000b43 	.word	0x20000b43
 8003ac4:	20000ab8 	.word	0x20000ab8
 8003ac8:	20000b23 	.word	0x20000b23
 8003acc:	20000942 	.word	0x20000942
 8003ad0:	20000941 	.word	0x20000941
 8003ad4:	20000b22 	.word	0x20000b22
 8003ad8:	20000b21 	.word	0x20000b21
 8003adc:	20000b4f 	.word	0x20000b4f
 8003ae0:	20000b24 	.word	0x20000b24
 8003ae4:	0800cd5c 	.word	0x0800cd5c
 8003ae8:	0800cd70 	.word	0x0800cd70
 8003aec:	0800cd84 	.word	0x0800cd84
 8003af0:	0800cd98 	.word	0x0800cd98
 8003af4:	0800cdac 	.word	0x0800cdac
 8003af8:	0800cdc0 	.word	0x0800cdc0
 8003afc:	0800cdd4 	.word	0x0800cdd4
 8003b00:	0800cde8 	.word	0x0800cde8
 8003b04:	20000b41 	.word	0x20000b41

08003b08 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8003b12:	48a9      	ldr	r0, [pc, #676]	; (8003db8 <loadMenuTexts+0x2b0>)
 8003b14:	f7fc fe36 	bl	8000784 <copyText>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	4aa8      	ldr	r2, [pc, #672]	; (8003dbc <loadMenuTexts+0x2b4>)
 8003b1c:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8003b1e:	48a8      	ldr	r0, [pc, #672]	; (8003dc0 <loadMenuTexts+0x2b8>)
 8003b20:	f7fc fe30 	bl	8000784 <copyText>
 8003b24:	4603      	mov	r3, r0
 8003b26:	4aa7      	ldr	r2, [pc, #668]	; (8003dc4 <loadMenuTexts+0x2bc>)
 8003b28:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8003b2a:	48a7      	ldr	r0, [pc, #668]	; (8003dc8 <loadMenuTexts+0x2c0>)
 8003b2c:	f7fc fe2a 	bl	8000784 <copyText>
 8003b30:	4603      	mov	r3, r0
 8003b32:	4aa6      	ldr	r2, [pc, #664]	; (8003dcc <loadMenuTexts+0x2c4>)
 8003b34:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8003b36:	48a6      	ldr	r0, [pc, #664]	; (8003dd0 <loadMenuTexts+0x2c8>)
 8003b38:	f7fc fe24 	bl	8000784 <copyText>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	4aa5      	ldr	r2, [pc, #660]	; (8003dd4 <loadMenuTexts+0x2cc>)
 8003b40:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8003b42:	48a5      	ldr	r0, [pc, #660]	; (8003dd8 <loadMenuTexts+0x2d0>)
 8003b44:	f7fc fe1e 	bl	8000784 <copyText>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	4aa4      	ldr	r2, [pc, #656]	; (8003ddc <loadMenuTexts+0x2d4>)
 8003b4c:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8003b4e:	48a4      	ldr	r0, [pc, #656]	; (8003de0 <loadMenuTexts+0x2d8>)
 8003b50:	f7fc fe18 	bl	8000784 <copyText>
 8003b54:	4603      	mov	r3, r0
 8003b56:	4aa3      	ldr	r2, [pc, #652]	; (8003de4 <loadMenuTexts+0x2dc>)
 8003b58:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8003b5a:	48a3      	ldr	r0, [pc, #652]	; (8003de8 <loadMenuTexts+0x2e0>)
 8003b5c:	f7fc fe12 	bl	8000784 <copyText>
 8003b60:	4603      	mov	r3, r0
 8003b62:	4aa2      	ldr	r2, [pc, #648]	; (8003dec <loadMenuTexts+0x2e4>)
 8003b64:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f040 82d1 	bne.w	8004110 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8003b6e:	48a0      	ldr	r0, [pc, #640]	; (8003df0 <loadMenuTexts+0x2e8>)
 8003b70:	f7fc fe08 	bl	8000784 <copyText>
 8003b74:	4603      	mov	r3, r0
 8003b76:	4a9f      	ldr	r2, [pc, #636]	; (8003df4 <loadMenuTexts+0x2ec>)
 8003b78:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8003b7a:	489f      	ldr	r0, [pc, #636]	; (8003df8 <loadMenuTexts+0x2f0>)
 8003b7c:	f7fc fe02 	bl	8000784 <copyText>
 8003b80:	4603      	mov	r3, r0
 8003b82:	4a9e      	ldr	r2, [pc, #632]	; (8003dfc <loadMenuTexts+0x2f4>)
 8003b84:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8003b86:	489e      	ldr	r0, [pc, #632]	; (8003e00 <loadMenuTexts+0x2f8>)
 8003b88:	f7fc fdfc 	bl	8000784 <copyText>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	4a9d      	ldr	r2, [pc, #628]	; (8003e04 <loadMenuTexts+0x2fc>)
 8003b90:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8003b92:	489d      	ldr	r0, [pc, #628]	; (8003e08 <loadMenuTexts+0x300>)
 8003b94:	f7fc fdf6 	bl	8000784 <copyText>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	4a9c      	ldr	r2, [pc, #624]	; (8003e0c <loadMenuTexts+0x304>)
 8003b9c:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8003b9e:	489c      	ldr	r0, [pc, #624]	; (8003e10 <loadMenuTexts+0x308>)
 8003ba0:	f7fc fdf0 	bl	8000784 <copyText>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4a9b      	ldr	r2, [pc, #620]	; (8003e14 <loadMenuTexts+0x30c>)
 8003ba8:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8003baa:	489b      	ldr	r0, [pc, #620]	; (8003e18 <loadMenuTexts+0x310>)
 8003bac:	f7fc fdea 	bl	8000784 <copyText>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	4a9a      	ldr	r2, [pc, #616]	; (8003e1c <loadMenuTexts+0x314>)
 8003bb4:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8003bb6:	489a      	ldr	r0, [pc, #616]	; (8003e20 <loadMenuTexts+0x318>)
 8003bb8:	f7fc fde4 	bl	8000784 <copyText>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	4a99      	ldr	r2, [pc, #612]	; (8003e24 <loadMenuTexts+0x31c>)
 8003bc0:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8003bc2:	4899      	ldr	r0, [pc, #612]	; (8003e28 <loadMenuTexts+0x320>)
 8003bc4:	f7fc fdde 	bl	8000784 <copyText>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	4a98      	ldr	r2, [pc, #608]	; (8003e2c <loadMenuTexts+0x324>)
 8003bcc:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8003bce:	4898      	ldr	r0, [pc, #608]	; (8003e30 <loadMenuTexts+0x328>)
 8003bd0:	f7fc fdd8 	bl	8000784 <copyText>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	4a97      	ldr	r2, [pc, #604]	; (8003e34 <loadMenuTexts+0x32c>)
 8003bd8:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8003bda:	4897      	ldr	r0, [pc, #604]	; (8003e38 <loadMenuTexts+0x330>)
 8003bdc:	f7fc fdd2 	bl	8000784 <copyText>
 8003be0:	4603      	mov	r3, r0
 8003be2:	4a96      	ldr	r2, [pc, #600]	; (8003e3c <loadMenuTexts+0x334>)
 8003be4:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8003be6:	4896      	ldr	r0, [pc, #600]	; (8003e40 <loadMenuTexts+0x338>)
 8003be8:	f7fc fdcc 	bl	8000784 <copyText>
 8003bec:	4603      	mov	r3, r0
 8003bee:	4a95      	ldr	r2, [pc, #596]	; (8003e44 <loadMenuTexts+0x33c>)
 8003bf0:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8003bf2:	4895      	ldr	r0, [pc, #596]	; (8003e48 <loadMenuTexts+0x340>)
 8003bf4:	f7fc fdc6 	bl	8000784 <copyText>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	4a94      	ldr	r2, [pc, #592]	; (8003e4c <loadMenuTexts+0x344>)
 8003bfc:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8003bfe:	4894      	ldr	r0, [pc, #592]	; (8003e50 <loadMenuTexts+0x348>)
 8003c00:	f7fc fdc0 	bl	8000784 <copyText>
 8003c04:	4603      	mov	r3, r0
 8003c06:	4a93      	ldr	r2, [pc, #588]	; (8003e54 <loadMenuTexts+0x34c>)
 8003c08:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8003c0a:	4893      	ldr	r0, [pc, #588]	; (8003e58 <loadMenuTexts+0x350>)
 8003c0c:	f7fc fdba 	bl	8000784 <copyText>
 8003c10:	4603      	mov	r3, r0
 8003c12:	4a92      	ldr	r2, [pc, #584]	; (8003e5c <loadMenuTexts+0x354>)
 8003c14:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8003c16:	4892      	ldr	r0, [pc, #584]	; (8003e60 <loadMenuTexts+0x358>)
 8003c18:	f7fc fdb4 	bl	8000784 <copyText>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	4a91      	ldr	r2, [pc, #580]	; (8003e64 <loadMenuTexts+0x35c>)
 8003c20:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8003c22:	4891      	ldr	r0, [pc, #580]	; (8003e68 <loadMenuTexts+0x360>)
 8003c24:	f7fc fdae 	bl	8000784 <copyText>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	4a90      	ldr	r2, [pc, #576]	; (8003e6c <loadMenuTexts+0x364>)
 8003c2c:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8003c2e:	4890      	ldr	r0, [pc, #576]	; (8003e70 <loadMenuTexts+0x368>)
 8003c30:	f7fc fda8 	bl	8000784 <copyText>
 8003c34:	4603      	mov	r3, r0
 8003c36:	4a8f      	ldr	r2, [pc, #572]	; (8003e74 <loadMenuTexts+0x36c>)
 8003c38:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8003c3a:	488f      	ldr	r0, [pc, #572]	; (8003e78 <loadMenuTexts+0x370>)
 8003c3c:	f7fc fda2 	bl	8000784 <copyText>
 8003c40:	4603      	mov	r3, r0
 8003c42:	4a8e      	ldr	r2, [pc, #568]	; (8003e7c <loadMenuTexts+0x374>)
 8003c44:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8003c46:	488e      	ldr	r0, [pc, #568]	; (8003e80 <loadMenuTexts+0x378>)
 8003c48:	f7fc fd9c 	bl	8000784 <copyText>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	4a8d      	ldr	r2, [pc, #564]	; (8003e84 <loadMenuTexts+0x37c>)
 8003c50:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8003c52:	488d      	ldr	r0, [pc, #564]	; (8003e88 <loadMenuTexts+0x380>)
 8003c54:	f7fc fd96 	bl	8000784 <copyText>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	4a8c      	ldr	r2, [pc, #560]	; (8003e8c <loadMenuTexts+0x384>)
 8003c5c:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8003c5e:	488c      	ldr	r0, [pc, #560]	; (8003e90 <loadMenuTexts+0x388>)
 8003c60:	f7fc fd90 	bl	8000784 <copyText>
 8003c64:	4603      	mov	r3, r0
 8003c66:	4a8b      	ldr	r2, [pc, #556]	; (8003e94 <loadMenuTexts+0x38c>)
 8003c68:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8003c6a:	488b      	ldr	r0, [pc, #556]	; (8003e98 <loadMenuTexts+0x390>)
 8003c6c:	f7fc fd8a 	bl	8000784 <copyText>
 8003c70:	4603      	mov	r3, r0
 8003c72:	4a8a      	ldr	r2, [pc, #552]	; (8003e9c <loadMenuTexts+0x394>)
 8003c74:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8003c76:	488a      	ldr	r0, [pc, #552]	; (8003ea0 <loadMenuTexts+0x398>)
 8003c78:	f7fc fd84 	bl	8000784 <copyText>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	4a89      	ldr	r2, [pc, #548]	; (8003ea4 <loadMenuTexts+0x39c>)
 8003c80:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8003c82:	4889      	ldr	r0, [pc, #548]	; (8003ea8 <loadMenuTexts+0x3a0>)
 8003c84:	f7fc fd7e 	bl	8000784 <copyText>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	4a88      	ldr	r2, [pc, #544]	; (8003eac <loadMenuTexts+0x3a4>)
 8003c8c:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8003c8e:	4888      	ldr	r0, [pc, #544]	; (8003eb0 <loadMenuTexts+0x3a8>)
 8003c90:	f7fc fd78 	bl	8000784 <copyText>
 8003c94:	4603      	mov	r3, r0
 8003c96:	4a87      	ldr	r2, [pc, #540]	; (8003eb4 <loadMenuTexts+0x3ac>)
 8003c98:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8003c9a:	4887      	ldr	r0, [pc, #540]	; (8003eb8 <loadMenuTexts+0x3b0>)
 8003c9c:	f7fc fd72 	bl	8000784 <copyText>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	4a86      	ldr	r2, [pc, #536]	; (8003ebc <loadMenuTexts+0x3b4>)
 8003ca4:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8003ca6:	4886      	ldr	r0, [pc, #536]	; (8003ec0 <loadMenuTexts+0x3b8>)
 8003ca8:	f7fc fd6c 	bl	8000784 <copyText>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4a85      	ldr	r2, [pc, #532]	; (8003ec4 <loadMenuTexts+0x3bc>)
 8003cb0:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8003cb2:	4885      	ldr	r0, [pc, #532]	; (8003ec8 <loadMenuTexts+0x3c0>)
 8003cb4:	f7fc fd66 	bl	8000784 <copyText>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	4a84      	ldr	r2, [pc, #528]	; (8003ecc <loadMenuTexts+0x3c4>)
 8003cbc:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8003cbe:	4884      	ldr	r0, [pc, #528]	; (8003ed0 <loadMenuTexts+0x3c8>)
 8003cc0:	f7fc fd60 	bl	8000784 <copyText>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	4a83      	ldr	r2, [pc, #524]	; (8003ed4 <loadMenuTexts+0x3cc>)
 8003cc8:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8003cca:	4883      	ldr	r0, [pc, #524]	; (8003ed8 <loadMenuTexts+0x3d0>)
 8003ccc:	f7fc fd5a 	bl	8000784 <copyText>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	4a82      	ldr	r2, [pc, #520]	; (8003edc <loadMenuTexts+0x3d4>)
 8003cd4:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8003cd6:	4882      	ldr	r0, [pc, #520]	; (8003ee0 <loadMenuTexts+0x3d8>)
 8003cd8:	f7fc fd54 	bl	8000784 <copyText>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	4a81      	ldr	r2, [pc, #516]	; (8003ee4 <loadMenuTexts+0x3dc>)
 8003ce0:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8003ce2:	4881      	ldr	r0, [pc, #516]	; (8003ee8 <loadMenuTexts+0x3e0>)
 8003ce4:	f7fc fd4e 	bl	8000784 <copyText>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	4a80      	ldr	r2, [pc, #512]	; (8003eec <loadMenuTexts+0x3e4>)
 8003cec:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8003cee:	4880      	ldr	r0, [pc, #512]	; (8003ef0 <loadMenuTexts+0x3e8>)
 8003cf0:	f7fc fd48 	bl	8000784 <copyText>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	4a7f      	ldr	r2, [pc, #508]	; (8003ef4 <loadMenuTexts+0x3ec>)
 8003cf8:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8003cfa:	487f      	ldr	r0, [pc, #508]	; (8003ef8 <loadMenuTexts+0x3f0>)
 8003cfc:	f7fc fd42 	bl	8000784 <copyText>
 8003d00:	4603      	mov	r3, r0
 8003d02:	4a7e      	ldr	r2, [pc, #504]	; (8003efc <loadMenuTexts+0x3f4>)
 8003d04:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8003d06:	487e      	ldr	r0, [pc, #504]	; (8003f00 <loadMenuTexts+0x3f8>)
 8003d08:	f7fc fd3c 	bl	8000784 <copyText>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	4a7d      	ldr	r2, [pc, #500]	; (8003f04 <loadMenuTexts+0x3fc>)
 8003d10:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8003d12:	487d      	ldr	r0, [pc, #500]	; (8003f08 <loadMenuTexts+0x400>)
 8003d14:	f7fc fd36 	bl	8000784 <copyText>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	4a7c      	ldr	r2, [pc, #496]	; (8003f0c <loadMenuTexts+0x404>)
 8003d1c:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8003d1e:	487c      	ldr	r0, [pc, #496]	; (8003f10 <loadMenuTexts+0x408>)
 8003d20:	f7fc fd30 	bl	8000784 <copyText>
 8003d24:	4603      	mov	r3, r0
 8003d26:	4a7b      	ldr	r2, [pc, #492]	; (8003f14 <loadMenuTexts+0x40c>)
 8003d28:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8003d2a:	487b      	ldr	r0, [pc, #492]	; (8003f18 <loadMenuTexts+0x410>)
 8003d2c:	f7fc fd2a 	bl	8000784 <copyText>
 8003d30:	4603      	mov	r3, r0
 8003d32:	4a7a      	ldr	r2, [pc, #488]	; (8003f1c <loadMenuTexts+0x414>)
 8003d34:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8003d36:	487a      	ldr	r0, [pc, #488]	; (8003f20 <loadMenuTexts+0x418>)
 8003d38:	f7fc fd24 	bl	8000784 <copyText>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	4a79      	ldr	r2, [pc, #484]	; (8003f24 <loadMenuTexts+0x41c>)
 8003d40:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8003d42:	4879      	ldr	r0, [pc, #484]	; (8003f28 <loadMenuTexts+0x420>)
 8003d44:	f7fc fd1e 	bl	8000784 <copyText>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	4a78      	ldr	r2, [pc, #480]	; (8003f2c <loadMenuTexts+0x424>)
 8003d4c:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8003d4e:	4878      	ldr	r0, [pc, #480]	; (8003f30 <loadMenuTexts+0x428>)
 8003d50:	f7fc fd18 	bl	8000784 <copyText>
 8003d54:	4603      	mov	r3, r0
 8003d56:	4a77      	ldr	r2, [pc, #476]	; (8003f34 <loadMenuTexts+0x42c>)
 8003d58:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8003d5a:	4877      	ldr	r0, [pc, #476]	; (8003f38 <loadMenuTexts+0x430>)
 8003d5c:	f7fc fd12 	bl	8000784 <copyText>
 8003d60:	4603      	mov	r3, r0
 8003d62:	4a76      	ldr	r2, [pc, #472]	; (8003f3c <loadMenuTexts+0x434>)
 8003d64:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8003d66:	4876      	ldr	r0, [pc, #472]	; (8003f40 <loadMenuTexts+0x438>)
 8003d68:	f7fc fd0c 	bl	8000784 <copyText>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	4a75      	ldr	r2, [pc, #468]	; (8003f44 <loadMenuTexts+0x43c>)
 8003d70:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8003d72:	4875      	ldr	r0, [pc, #468]	; (8003f48 <loadMenuTexts+0x440>)
 8003d74:	f7fc fd06 	bl	8000784 <copyText>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	4a74      	ldr	r2, [pc, #464]	; (8003f4c <loadMenuTexts+0x444>)
 8003d7c:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8003d7e:	4874      	ldr	r0, [pc, #464]	; (8003f50 <loadMenuTexts+0x448>)
 8003d80:	f7fc fd00 	bl	8000784 <copyText>
 8003d84:	4603      	mov	r3, r0
 8003d86:	4a73      	ldr	r2, [pc, #460]	; (8003f54 <loadMenuTexts+0x44c>)
 8003d88:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8003d8a:	4873      	ldr	r0, [pc, #460]	; (8003f58 <loadMenuTexts+0x450>)
 8003d8c:	f7fc fcfa 	bl	8000784 <copyText>
 8003d90:	4603      	mov	r3, r0
 8003d92:	4a72      	ldr	r2, [pc, #456]	; (8003f5c <loadMenuTexts+0x454>)
 8003d94:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8003d96:	4872      	ldr	r0, [pc, #456]	; (8003f60 <loadMenuTexts+0x458>)
 8003d98:	f7fc fcf4 	bl	8000784 <copyText>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	4a71      	ldr	r2, [pc, #452]	; (8003f64 <loadMenuTexts+0x45c>)
 8003da0:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8003da2:	4871      	ldr	r0, [pc, #452]	; (8003f68 <loadMenuTexts+0x460>)
 8003da4:	f7fc fcee 	bl	8000784 <copyText>
 8003da8:	4603      	mov	r3, r0
 8003daa:	4a70      	ldr	r2, [pc, #448]	; (8003f6c <loadMenuTexts+0x464>)
 8003dac:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8003dae:	4870      	ldr	r0, [pc, #448]	; (8003f70 <loadMenuTexts+0x468>)
 8003db0:	f7fc fce8 	bl	8000784 <copyText>
 8003db4:	4603      	mov	r3, r0
 8003db6:	e0dd      	b.n	8003f74 <loadMenuTexts+0x46c>
 8003db8:	20000000 	.word	0x20000000
 8003dbc:	20000b88 	.word	0x20000b88
 8003dc0:	20000010 	.word	0x20000010
 8003dc4:	20000b8c 	.word	0x20000b8c
 8003dc8:	20000020 	.word	0x20000020
 8003dcc:	20000be4 	.word	0x20000be4
 8003dd0:	20000030 	.word	0x20000030
 8003dd4:	20000c14 	.word	0x20000c14
 8003dd8:	20000040 	.word	0x20000040
 8003ddc:	20000c1c 	.word	0x20000c1c
 8003de0:	20000050 	.word	0x20000050
 8003de4:	20000c94 	.word	0x20000c94
 8003de8:	20000060 	.word	0x20000060
 8003dec:	20000c98 	.word	0x20000c98
 8003df0:	20000070 	.word	0x20000070
 8003df4:	20000b90 	.word	0x20000b90
 8003df8:	20000080 	.word	0x20000080
 8003dfc:	20000b94 	.word	0x20000b94
 8003e00:	20000090 	.word	0x20000090
 8003e04:	20000b98 	.word	0x20000b98
 8003e08:	200000a0 	.word	0x200000a0
 8003e0c:	20000b9c 	.word	0x20000b9c
 8003e10:	200000b0 	.word	0x200000b0
 8003e14:	20000ba0 	.word	0x20000ba0
 8003e18:	200000c0 	.word	0x200000c0
 8003e1c:	20000ba4 	.word	0x20000ba4
 8003e20:	200000d0 	.word	0x200000d0
 8003e24:	20000ba8 	.word	0x20000ba8
 8003e28:	200000e0 	.word	0x200000e0
 8003e2c:	20000bac 	.word	0x20000bac
 8003e30:	200000f0 	.word	0x200000f0
 8003e34:	20000bb0 	.word	0x20000bb0
 8003e38:	20000100 	.word	0x20000100
 8003e3c:	20000bb4 	.word	0x20000bb4
 8003e40:	20000110 	.word	0x20000110
 8003e44:	20000bb8 	.word	0x20000bb8
 8003e48:	20000120 	.word	0x20000120
 8003e4c:	20000bbc 	.word	0x20000bbc
 8003e50:	20000130 	.word	0x20000130
 8003e54:	20000bc0 	.word	0x20000bc0
 8003e58:	20000140 	.word	0x20000140
 8003e5c:	20000bc4 	.word	0x20000bc4
 8003e60:	20000150 	.word	0x20000150
 8003e64:	20000bc8 	.word	0x20000bc8
 8003e68:	20000160 	.word	0x20000160
 8003e6c:	20000bcc 	.word	0x20000bcc
 8003e70:	20000170 	.word	0x20000170
 8003e74:	20000bd0 	.word	0x20000bd0
 8003e78:	20000180 	.word	0x20000180
 8003e7c:	20000bd4 	.word	0x20000bd4
 8003e80:	20000190 	.word	0x20000190
 8003e84:	20000bd8 	.word	0x20000bd8
 8003e88:	200001a0 	.word	0x200001a0
 8003e8c:	20000bdc 	.word	0x20000bdc
 8003e90:	200001b0 	.word	0x200001b0
 8003e94:	20000be0 	.word	0x20000be0
 8003e98:	200001c0 	.word	0x200001c0
 8003e9c:	20000be8 	.word	0x20000be8
 8003ea0:	200001d0 	.word	0x200001d0
 8003ea4:	20000bec 	.word	0x20000bec
 8003ea8:	200001e0 	.word	0x200001e0
 8003eac:	20000bf0 	.word	0x20000bf0
 8003eb0:	200001f0 	.word	0x200001f0
 8003eb4:	20000bf4 	.word	0x20000bf4
 8003eb8:	20000200 	.word	0x20000200
 8003ebc:	20000bf8 	.word	0x20000bf8
 8003ec0:	20000210 	.word	0x20000210
 8003ec4:	20000bfc 	.word	0x20000bfc
 8003ec8:	20000220 	.word	0x20000220
 8003ecc:	20000c00 	.word	0x20000c00
 8003ed0:	20000230 	.word	0x20000230
 8003ed4:	20000c04 	.word	0x20000c04
 8003ed8:	20000240 	.word	0x20000240
 8003edc:	20000c08 	.word	0x20000c08
 8003ee0:	20000250 	.word	0x20000250
 8003ee4:	20000c0c 	.word	0x20000c0c
 8003ee8:	20000260 	.word	0x20000260
 8003eec:	20000c10 	.word	0x20000c10
 8003ef0:	20000270 	.word	0x20000270
 8003ef4:	20000c18 	.word	0x20000c18
 8003ef8:	20000280 	.word	0x20000280
 8003efc:	20000c20 	.word	0x20000c20
 8003f00:	20000290 	.word	0x20000290
 8003f04:	20000c24 	.word	0x20000c24
 8003f08:	200002a0 	.word	0x200002a0
 8003f0c:	20000c28 	.word	0x20000c28
 8003f10:	200002b0 	.word	0x200002b0
 8003f14:	20000c2c 	.word	0x20000c2c
 8003f18:	200002c0 	.word	0x200002c0
 8003f1c:	20000c30 	.word	0x20000c30
 8003f20:	200002d0 	.word	0x200002d0
 8003f24:	20000c34 	.word	0x20000c34
 8003f28:	200002e0 	.word	0x200002e0
 8003f2c:	20000c38 	.word	0x20000c38
 8003f30:	200002f0 	.word	0x200002f0
 8003f34:	20000c3c 	.word	0x20000c3c
 8003f38:	20000300 	.word	0x20000300
 8003f3c:	20000c40 	.word	0x20000c40
 8003f40:	20000310 	.word	0x20000310
 8003f44:	20000c44 	.word	0x20000c44
 8003f48:	20000320 	.word	0x20000320
 8003f4c:	20000c48 	.word	0x20000c48
 8003f50:	20000330 	.word	0x20000330
 8003f54:	20000c4c 	.word	0x20000c4c
 8003f58:	20000340 	.word	0x20000340
 8003f5c:	20000c50 	.word	0x20000c50
 8003f60:	20000350 	.word	0x20000350
 8003f64:	20000c54 	.word	0x20000c54
 8003f68:	20000360 	.word	0x20000360
 8003f6c:	20000c58 	.word	0x20000c58
 8003f70:	20000370 	.word	0x20000370
 8003f74:	4a3d      	ldr	r2, [pc, #244]	; (800406c <loadMenuTexts+0x564>)
 8003f76:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8003f78:	483d      	ldr	r0, [pc, #244]	; (8004070 <loadMenuTexts+0x568>)
 8003f7a:	f7fc fc03 	bl	8000784 <copyText>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4a3c      	ldr	r2, [pc, #240]	; (8004074 <loadMenuTexts+0x56c>)
 8003f82:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8003f84:	483c      	ldr	r0, [pc, #240]	; (8004078 <loadMenuTexts+0x570>)
 8003f86:	f7fc fbfd 	bl	8000784 <copyText>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	4a3b      	ldr	r2, [pc, #236]	; (800407c <loadMenuTexts+0x574>)
 8003f8e:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8003f90:	483b      	ldr	r0, [pc, #236]	; (8004080 <loadMenuTexts+0x578>)
 8003f92:	f7fc fbf7 	bl	8000784 <copyText>
 8003f96:	4603      	mov	r3, r0
 8003f98:	4a3a      	ldr	r2, [pc, #232]	; (8004084 <loadMenuTexts+0x57c>)
 8003f9a:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8003f9c:	483a      	ldr	r0, [pc, #232]	; (8004088 <loadMenuTexts+0x580>)
 8003f9e:	f7fc fbf1 	bl	8000784 <copyText>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4a39      	ldr	r2, [pc, #228]	; (800408c <loadMenuTexts+0x584>)
 8003fa6:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8003fa8:	4839      	ldr	r0, [pc, #228]	; (8004090 <loadMenuTexts+0x588>)
 8003faa:	f7fc fbeb 	bl	8000784 <copyText>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	4a38      	ldr	r2, [pc, #224]	; (8004094 <loadMenuTexts+0x58c>)
 8003fb2:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8003fb4:	4838      	ldr	r0, [pc, #224]	; (8004098 <loadMenuTexts+0x590>)
 8003fb6:	f7fc fbe5 	bl	8000784 <copyText>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	4a37      	ldr	r2, [pc, #220]	; (800409c <loadMenuTexts+0x594>)
 8003fbe:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8003fc0:	4837      	ldr	r0, [pc, #220]	; (80040a0 <loadMenuTexts+0x598>)
 8003fc2:	f7fc fbdf 	bl	8000784 <copyText>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	4a36      	ldr	r2, [pc, #216]	; (80040a4 <loadMenuTexts+0x59c>)
 8003fca:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8003fcc:	4836      	ldr	r0, [pc, #216]	; (80040a8 <loadMenuTexts+0x5a0>)
 8003fce:	f7fc fbd9 	bl	8000784 <copyText>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	4a35      	ldr	r2, [pc, #212]	; (80040ac <loadMenuTexts+0x5a4>)
 8003fd6:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8003fd8:	4835      	ldr	r0, [pc, #212]	; (80040b0 <loadMenuTexts+0x5a8>)
 8003fda:	f7fc fbd3 	bl	8000784 <copyText>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	4a34      	ldr	r2, [pc, #208]	; (80040b4 <loadMenuTexts+0x5ac>)
 8003fe2:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8003fe4:	4834      	ldr	r0, [pc, #208]	; (80040b8 <loadMenuTexts+0x5b0>)
 8003fe6:	f7fc fbcd 	bl	8000784 <copyText>
 8003fea:	4603      	mov	r3, r0
 8003fec:	4a33      	ldr	r2, [pc, #204]	; (80040bc <loadMenuTexts+0x5b4>)
 8003fee:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8003ff0:	4833      	ldr	r0, [pc, #204]	; (80040c0 <loadMenuTexts+0x5b8>)
 8003ff2:	f7fc fbc7 	bl	8000784 <copyText>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	4a32      	ldr	r2, [pc, #200]	; (80040c4 <loadMenuTexts+0x5bc>)
 8003ffa:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8003ffc:	4832      	ldr	r0, [pc, #200]	; (80040c8 <loadMenuTexts+0x5c0>)
 8003ffe:	f7fc fbc1 	bl	8000784 <copyText>
 8004002:	4603      	mov	r3, r0
 8004004:	4a31      	ldr	r2, [pc, #196]	; (80040cc <loadMenuTexts+0x5c4>)
 8004006:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8004008:	4831      	ldr	r0, [pc, #196]	; (80040d0 <loadMenuTexts+0x5c8>)
 800400a:	f7fc fbbb 	bl	8000784 <copyText>
 800400e:	4603      	mov	r3, r0
 8004010:	4a30      	ldr	r2, [pc, #192]	; (80040d4 <loadMenuTexts+0x5cc>)
 8004012:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8004014:	4830      	ldr	r0, [pc, #192]	; (80040d8 <loadMenuTexts+0x5d0>)
 8004016:	f7fc fbb5 	bl	8000784 <copyText>
 800401a:	4603      	mov	r3, r0
 800401c:	4a2f      	ldr	r2, [pc, #188]	; (80040dc <loadMenuTexts+0x5d4>)
 800401e:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 8004020:	482f      	ldr	r0, [pc, #188]	; (80040e0 <loadMenuTexts+0x5d8>)
 8004022:	f7fc fbaf 	bl	8000784 <copyText>
 8004026:	4603      	mov	r3, r0
 8004028:	4a2e      	ldr	r2, [pc, #184]	; (80040e4 <loadMenuTexts+0x5dc>)
 800402a:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 800402c:	482e      	ldr	r0, [pc, #184]	; (80040e8 <loadMenuTexts+0x5e0>)
 800402e:	f7fc fba9 	bl	8000784 <copyText>
 8004032:	4603      	mov	r3, r0
 8004034:	4a2d      	ldr	r2, [pc, #180]	; (80040ec <loadMenuTexts+0x5e4>)
 8004036:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8004038:	482d      	ldr	r0, [pc, #180]	; (80040f0 <loadMenuTexts+0x5e8>)
 800403a:	f7fc fba3 	bl	8000784 <copyText>
 800403e:	4603      	mov	r3, r0
 8004040:	4a2c      	ldr	r2, [pc, #176]	; (80040f4 <loadMenuTexts+0x5ec>)
 8004042:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8004044:	482c      	ldr	r0, [pc, #176]	; (80040f8 <loadMenuTexts+0x5f0>)
 8004046:	f7fc fb9d 	bl	8000784 <copyText>
 800404a:	4603      	mov	r3, r0
 800404c:	4a2b      	ldr	r2, [pc, #172]	; (80040fc <loadMenuTexts+0x5f4>)
 800404e:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 8004050:	482b      	ldr	r0, [pc, #172]	; (8004100 <loadMenuTexts+0x5f8>)
 8004052:	f7fc fb97 	bl	8000784 <copyText>
 8004056:	4603      	mov	r3, r0
 8004058:	4a2a      	ldr	r2, [pc, #168]	; (8004104 <loadMenuTexts+0x5fc>)
 800405a:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 800405c:	482a      	ldr	r0, [pc, #168]	; (8004108 <loadMenuTexts+0x600>)
 800405e:	f7fc fb91 	bl	8000784 <copyText>
 8004062:	4603      	mov	r3, r0
 8004064:	4a29      	ldr	r2, [pc, #164]	; (800410c <loadMenuTexts+0x604>)
 8004066:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8004068:	e2d3      	b.n	8004612 <loadMenuTexts+0xb0a>
 800406a:	bf00      	nop
 800406c:	20000c5c 	.word	0x20000c5c
 8004070:	20000380 	.word	0x20000380
 8004074:	20000c60 	.word	0x20000c60
 8004078:	20000390 	.word	0x20000390
 800407c:	20000c64 	.word	0x20000c64
 8004080:	200003a0 	.word	0x200003a0
 8004084:	20000c68 	.word	0x20000c68
 8004088:	200003b0 	.word	0x200003b0
 800408c:	20000c6c 	.word	0x20000c6c
 8004090:	200003c0 	.word	0x200003c0
 8004094:	20000c70 	.word	0x20000c70
 8004098:	200003d0 	.word	0x200003d0
 800409c:	20000c74 	.word	0x20000c74
 80040a0:	200003e0 	.word	0x200003e0
 80040a4:	20000c78 	.word	0x20000c78
 80040a8:	200003f0 	.word	0x200003f0
 80040ac:	20000c7c 	.word	0x20000c7c
 80040b0:	20000400 	.word	0x20000400
 80040b4:	20000c80 	.word	0x20000c80
 80040b8:	20000410 	.word	0x20000410
 80040bc:	20000c84 	.word	0x20000c84
 80040c0:	20000420 	.word	0x20000420
 80040c4:	20000c88 	.word	0x20000c88
 80040c8:	20000430 	.word	0x20000430
 80040cc:	20000c8c 	.word	0x20000c8c
 80040d0:	20000440 	.word	0x20000440
 80040d4:	20000c90 	.word	0x20000c90
 80040d8:	20000450 	.word	0x20000450
 80040dc:	20000c9c 	.word	0x20000c9c
 80040e0:	20000460 	.word	0x20000460
 80040e4:	20000ca0 	.word	0x20000ca0
 80040e8:	20000470 	.word	0x20000470
 80040ec:	20000ca4 	.word	0x20000ca4
 80040f0:	20000480 	.word	0x20000480
 80040f4:	20000ca8 	.word	0x20000ca8
 80040f8:	20000490 	.word	0x20000490
 80040fc:	20000cac 	.word	0x20000cac
 8004100:	200004a0 	.word	0x200004a0
 8004104:	20000cb0 	.word	0x20000cb0
 8004108:	200004b0 	.word	0x200004b0
 800410c:	20000cb4 	.word	0x20000cb4
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 8004110:	48a9      	ldr	r0, [pc, #676]	; (80043b8 <loadMenuTexts+0x8b0>)
 8004112:	f7fc fb37 	bl	8000784 <copyText>
 8004116:	4603      	mov	r3, r0
 8004118:	4aa8      	ldr	r2, [pc, #672]	; (80043bc <loadMenuTexts+0x8b4>)
 800411a:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 800411c:	48a8      	ldr	r0, [pc, #672]	; (80043c0 <loadMenuTexts+0x8b8>)
 800411e:	f7fc fb31 	bl	8000784 <copyText>
 8004122:	4603      	mov	r3, r0
 8004124:	4aa7      	ldr	r2, [pc, #668]	; (80043c4 <loadMenuTexts+0x8bc>)
 8004126:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8004128:	48a7      	ldr	r0, [pc, #668]	; (80043c8 <loadMenuTexts+0x8c0>)
 800412a:	f7fc fb2b 	bl	8000784 <copyText>
 800412e:	4603      	mov	r3, r0
 8004130:	4aa6      	ldr	r2, [pc, #664]	; (80043cc <loadMenuTexts+0x8c4>)
 8004132:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8004134:	48a6      	ldr	r0, [pc, #664]	; (80043d0 <loadMenuTexts+0x8c8>)
 8004136:	f7fc fb25 	bl	8000784 <copyText>
 800413a:	4603      	mov	r3, r0
 800413c:	4aa5      	ldr	r2, [pc, #660]	; (80043d4 <loadMenuTexts+0x8cc>)
 800413e:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 8004140:	48a5      	ldr	r0, [pc, #660]	; (80043d8 <loadMenuTexts+0x8d0>)
 8004142:	f7fc fb1f 	bl	8000784 <copyText>
 8004146:	4603      	mov	r3, r0
 8004148:	4aa4      	ldr	r2, [pc, #656]	; (80043dc <loadMenuTexts+0x8d4>)
 800414a:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 800414c:	48a4      	ldr	r0, [pc, #656]	; (80043e0 <loadMenuTexts+0x8d8>)
 800414e:	f7fc fb19 	bl	8000784 <copyText>
 8004152:	4603      	mov	r3, r0
 8004154:	4aa3      	ldr	r2, [pc, #652]	; (80043e4 <loadMenuTexts+0x8dc>)
 8004156:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 8004158:	48a3      	ldr	r0, [pc, #652]	; (80043e8 <loadMenuTexts+0x8e0>)
 800415a:	f7fc fb13 	bl	8000784 <copyText>
 800415e:	4603      	mov	r3, r0
 8004160:	4aa2      	ldr	r2, [pc, #648]	; (80043ec <loadMenuTexts+0x8e4>)
 8004162:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8004164:	48a2      	ldr	r0, [pc, #648]	; (80043f0 <loadMenuTexts+0x8e8>)
 8004166:	f7fc fb0d 	bl	8000784 <copyText>
 800416a:	4603      	mov	r3, r0
 800416c:	4aa1      	ldr	r2, [pc, #644]	; (80043f4 <loadMenuTexts+0x8ec>)
 800416e:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8004170:	48a1      	ldr	r0, [pc, #644]	; (80043f8 <loadMenuTexts+0x8f0>)
 8004172:	f7fc fb07 	bl	8000784 <copyText>
 8004176:	4603      	mov	r3, r0
 8004178:	4aa0      	ldr	r2, [pc, #640]	; (80043fc <loadMenuTexts+0x8f4>)
 800417a:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 800417c:	48a0      	ldr	r0, [pc, #640]	; (8004400 <loadMenuTexts+0x8f8>)
 800417e:	f7fc fb01 	bl	8000784 <copyText>
 8004182:	4603      	mov	r3, r0
 8004184:	4a9f      	ldr	r2, [pc, #636]	; (8004404 <loadMenuTexts+0x8fc>)
 8004186:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 8004188:	489f      	ldr	r0, [pc, #636]	; (8004408 <loadMenuTexts+0x900>)
 800418a:	f7fc fafb 	bl	8000784 <copyText>
 800418e:	4603      	mov	r3, r0
 8004190:	4a9e      	ldr	r2, [pc, #632]	; (800440c <loadMenuTexts+0x904>)
 8004192:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8004194:	489e      	ldr	r0, [pc, #632]	; (8004410 <loadMenuTexts+0x908>)
 8004196:	f7fc faf5 	bl	8000784 <copyText>
 800419a:	4603      	mov	r3, r0
 800419c:	4a9d      	ldr	r2, [pc, #628]	; (8004414 <loadMenuTexts+0x90c>)
 800419e:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 80041a0:	489d      	ldr	r0, [pc, #628]	; (8004418 <loadMenuTexts+0x910>)
 80041a2:	f7fc faef 	bl	8000784 <copyText>
 80041a6:	4603      	mov	r3, r0
 80041a8:	4a9c      	ldr	r2, [pc, #624]	; (800441c <loadMenuTexts+0x914>)
 80041aa:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 80041ac:	489c      	ldr	r0, [pc, #624]	; (8004420 <loadMenuTexts+0x918>)
 80041ae:	f7fc fae9 	bl	8000784 <copyText>
 80041b2:	4603      	mov	r3, r0
 80041b4:	4a9b      	ldr	r2, [pc, #620]	; (8004424 <loadMenuTexts+0x91c>)
 80041b6:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 80041b8:	489b      	ldr	r0, [pc, #620]	; (8004428 <loadMenuTexts+0x920>)
 80041ba:	f7fc fae3 	bl	8000784 <copyText>
 80041be:	4603      	mov	r3, r0
 80041c0:	4a9a      	ldr	r2, [pc, #616]	; (800442c <loadMenuTexts+0x924>)
 80041c2:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 80041c4:	489a      	ldr	r0, [pc, #616]	; (8004430 <loadMenuTexts+0x928>)
 80041c6:	f7fc fadd 	bl	8000784 <copyText>
 80041ca:	4603      	mov	r3, r0
 80041cc:	4a99      	ldr	r2, [pc, #612]	; (8004434 <loadMenuTexts+0x92c>)
 80041ce:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 80041d0:	4899      	ldr	r0, [pc, #612]	; (8004438 <loadMenuTexts+0x930>)
 80041d2:	f7fc fad7 	bl	8000784 <copyText>
 80041d6:	4603      	mov	r3, r0
 80041d8:	4a98      	ldr	r2, [pc, #608]	; (800443c <loadMenuTexts+0x934>)
 80041da:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 80041dc:	4898      	ldr	r0, [pc, #608]	; (8004440 <loadMenuTexts+0x938>)
 80041de:	f7fc fad1 	bl	8000784 <copyText>
 80041e2:	4603      	mov	r3, r0
 80041e4:	4a97      	ldr	r2, [pc, #604]	; (8004444 <loadMenuTexts+0x93c>)
 80041e6:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 80041e8:	4897      	ldr	r0, [pc, #604]	; (8004448 <loadMenuTexts+0x940>)
 80041ea:	f7fc facb 	bl	8000784 <copyText>
 80041ee:	4603      	mov	r3, r0
 80041f0:	4a96      	ldr	r2, [pc, #600]	; (800444c <loadMenuTexts+0x944>)
 80041f2:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 80041f4:	4896      	ldr	r0, [pc, #600]	; (8004450 <loadMenuTexts+0x948>)
 80041f6:	f7fc fac5 	bl	8000784 <copyText>
 80041fa:	4603      	mov	r3, r0
 80041fc:	4a95      	ldr	r2, [pc, #596]	; (8004454 <loadMenuTexts+0x94c>)
 80041fe:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8004200:	4895      	ldr	r0, [pc, #596]	; (8004458 <loadMenuTexts+0x950>)
 8004202:	f7fc fabf 	bl	8000784 <copyText>
 8004206:	4603      	mov	r3, r0
 8004208:	4a94      	ldr	r2, [pc, #592]	; (800445c <loadMenuTexts+0x954>)
 800420a:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 800420c:	4894      	ldr	r0, [pc, #592]	; (8004460 <loadMenuTexts+0x958>)
 800420e:	f7fc fab9 	bl	8000784 <copyText>
 8004212:	4603      	mov	r3, r0
 8004214:	4a93      	ldr	r2, [pc, #588]	; (8004464 <loadMenuTexts+0x95c>)
 8004216:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 8004218:	4893      	ldr	r0, [pc, #588]	; (8004468 <loadMenuTexts+0x960>)
 800421a:	f7fc fab3 	bl	8000784 <copyText>
 800421e:	4603      	mov	r3, r0
 8004220:	4a92      	ldr	r2, [pc, #584]	; (800446c <loadMenuTexts+0x964>)
 8004222:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8004224:	4892      	ldr	r0, [pc, #584]	; (8004470 <loadMenuTexts+0x968>)
 8004226:	f7fc faad 	bl	8000784 <copyText>
 800422a:	4603      	mov	r3, r0
 800422c:	4a91      	ldr	r2, [pc, #580]	; (8004474 <loadMenuTexts+0x96c>)
 800422e:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8004230:	4891      	ldr	r0, [pc, #580]	; (8004478 <loadMenuTexts+0x970>)
 8004232:	f7fc faa7 	bl	8000784 <copyText>
 8004236:	4603      	mov	r3, r0
 8004238:	4a90      	ldr	r2, [pc, #576]	; (800447c <loadMenuTexts+0x974>)
 800423a:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 800423c:	4890      	ldr	r0, [pc, #576]	; (8004480 <loadMenuTexts+0x978>)
 800423e:	f7fc faa1 	bl	8000784 <copyText>
 8004242:	4603      	mov	r3, r0
 8004244:	4a8f      	ldr	r2, [pc, #572]	; (8004484 <loadMenuTexts+0x97c>)
 8004246:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 8004248:	488f      	ldr	r0, [pc, #572]	; (8004488 <loadMenuTexts+0x980>)
 800424a:	f7fc fa9b 	bl	8000784 <copyText>
 800424e:	4603      	mov	r3, r0
 8004250:	4a8e      	ldr	r2, [pc, #568]	; (800448c <loadMenuTexts+0x984>)
 8004252:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 8004254:	488e      	ldr	r0, [pc, #568]	; (8004490 <loadMenuTexts+0x988>)
 8004256:	f7fc fa95 	bl	8000784 <copyText>
 800425a:	4603      	mov	r3, r0
 800425c:	4a8d      	ldr	r2, [pc, #564]	; (8004494 <loadMenuTexts+0x98c>)
 800425e:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8004260:	488d      	ldr	r0, [pc, #564]	; (8004498 <loadMenuTexts+0x990>)
 8004262:	f7fc fa8f 	bl	8000784 <copyText>
 8004266:	4603      	mov	r3, r0
 8004268:	4a8c      	ldr	r2, [pc, #560]	; (800449c <loadMenuTexts+0x994>)
 800426a:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 800426c:	488c      	ldr	r0, [pc, #560]	; (80044a0 <loadMenuTexts+0x998>)
 800426e:	f7fc fa89 	bl	8000784 <copyText>
 8004272:	4603      	mov	r3, r0
 8004274:	4a8b      	ldr	r2, [pc, #556]	; (80044a4 <loadMenuTexts+0x99c>)
 8004276:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8004278:	488b      	ldr	r0, [pc, #556]	; (80044a8 <loadMenuTexts+0x9a0>)
 800427a:	f7fc fa83 	bl	8000784 <copyText>
 800427e:	4603      	mov	r3, r0
 8004280:	4a8a      	ldr	r2, [pc, #552]	; (80044ac <loadMenuTexts+0x9a4>)
 8004282:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8004284:	488a      	ldr	r0, [pc, #552]	; (80044b0 <loadMenuTexts+0x9a8>)
 8004286:	f7fc fa7d 	bl	8000784 <copyText>
 800428a:	4603      	mov	r3, r0
 800428c:	4a89      	ldr	r2, [pc, #548]	; (80044b4 <loadMenuTexts+0x9ac>)
 800428e:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8004290:	4889      	ldr	r0, [pc, #548]	; (80044b8 <loadMenuTexts+0x9b0>)
 8004292:	f7fc fa77 	bl	8000784 <copyText>
 8004296:	4603      	mov	r3, r0
 8004298:	4a88      	ldr	r2, [pc, #544]	; (80044bc <loadMenuTexts+0x9b4>)
 800429a:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 800429c:	4888      	ldr	r0, [pc, #544]	; (80044c0 <loadMenuTexts+0x9b8>)
 800429e:	f7fc fa71 	bl	8000784 <copyText>
 80042a2:	4603      	mov	r3, r0
 80042a4:	4a87      	ldr	r2, [pc, #540]	; (80044c4 <loadMenuTexts+0x9bc>)
 80042a6:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 80042a8:	4887      	ldr	r0, [pc, #540]	; (80044c8 <loadMenuTexts+0x9c0>)
 80042aa:	f7fc fa6b 	bl	8000784 <copyText>
 80042ae:	4603      	mov	r3, r0
 80042b0:	4a86      	ldr	r2, [pc, #536]	; (80044cc <loadMenuTexts+0x9c4>)
 80042b2:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 80042b4:	4886      	ldr	r0, [pc, #536]	; (80044d0 <loadMenuTexts+0x9c8>)
 80042b6:	f7fc fa65 	bl	8000784 <copyText>
 80042ba:	4603      	mov	r3, r0
 80042bc:	4a85      	ldr	r2, [pc, #532]	; (80044d4 <loadMenuTexts+0x9cc>)
 80042be:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 80042c0:	4885      	ldr	r0, [pc, #532]	; (80044d8 <loadMenuTexts+0x9d0>)
 80042c2:	f7fc fa5f 	bl	8000784 <copyText>
 80042c6:	4603      	mov	r3, r0
 80042c8:	4a84      	ldr	r2, [pc, #528]	; (80044dc <loadMenuTexts+0x9d4>)
 80042ca:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 80042cc:	4884      	ldr	r0, [pc, #528]	; (80044e0 <loadMenuTexts+0x9d8>)
 80042ce:	f7fc fa59 	bl	8000784 <copyText>
 80042d2:	4603      	mov	r3, r0
 80042d4:	4a83      	ldr	r2, [pc, #524]	; (80044e4 <loadMenuTexts+0x9dc>)
 80042d6:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 80042d8:	4883      	ldr	r0, [pc, #524]	; (80044e8 <loadMenuTexts+0x9e0>)
 80042da:	f7fc fa53 	bl	8000784 <copyText>
 80042de:	4603      	mov	r3, r0
 80042e0:	4a82      	ldr	r2, [pc, #520]	; (80044ec <loadMenuTexts+0x9e4>)
 80042e2:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 80042e4:	4882      	ldr	r0, [pc, #520]	; (80044f0 <loadMenuTexts+0x9e8>)
 80042e6:	f7fc fa4d 	bl	8000784 <copyText>
 80042ea:	4603      	mov	r3, r0
 80042ec:	4a81      	ldr	r2, [pc, #516]	; (80044f4 <loadMenuTexts+0x9ec>)
 80042ee:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 80042f0:	4881      	ldr	r0, [pc, #516]	; (80044f8 <loadMenuTexts+0x9f0>)
 80042f2:	f7fc fa47 	bl	8000784 <copyText>
 80042f6:	4603      	mov	r3, r0
 80042f8:	4a80      	ldr	r2, [pc, #512]	; (80044fc <loadMenuTexts+0x9f4>)
 80042fa:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 80042fc:	4880      	ldr	r0, [pc, #512]	; (8004500 <loadMenuTexts+0x9f8>)
 80042fe:	f7fc fa41 	bl	8000784 <copyText>
 8004302:	4603      	mov	r3, r0
 8004304:	4a7f      	ldr	r2, [pc, #508]	; (8004504 <loadMenuTexts+0x9fc>)
 8004306:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 8004308:	487f      	ldr	r0, [pc, #508]	; (8004508 <loadMenuTexts+0xa00>)
 800430a:	f7fc fa3b 	bl	8000784 <copyText>
 800430e:	4603      	mov	r3, r0
 8004310:	4a7e      	ldr	r2, [pc, #504]	; (800450c <loadMenuTexts+0xa04>)
 8004312:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 8004314:	487e      	ldr	r0, [pc, #504]	; (8004510 <loadMenuTexts+0xa08>)
 8004316:	f7fc fa35 	bl	8000784 <copyText>
 800431a:	4603      	mov	r3, r0
 800431c:	4a7d      	ldr	r2, [pc, #500]	; (8004514 <loadMenuTexts+0xa0c>)
 800431e:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 8004320:	487d      	ldr	r0, [pc, #500]	; (8004518 <loadMenuTexts+0xa10>)
 8004322:	f7fc fa2f 	bl	8000784 <copyText>
 8004326:	4603      	mov	r3, r0
 8004328:	4a7c      	ldr	r2, [pc, #496]	; (800451c <loadMenuTexts+0xa14>)
 800432a:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 800432c:	487c      	ldr	r0, [pc, #496]	; (8004520 <loadMenuTexts+0xa18>)
 800432e:	f7fc fa29 	bl	8000784 <copyText>
 8004332:	4603      	mov	r3, r0
 8004334:	4a7b      	ldr	r2, [pc, #492]	; (8004524 <loadMenuTexts+0xa1c>)
 8004336:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 8004338:	487b      	ldr	r0, [pc, #492]	; (8004528 <loadMenuTexts+0xa20>)
 800433a:	f7fc fa23 	bl	8000784 <copyText>
 800433e:	4603      	mov	r3, r0
 8004340:	4a7a      	ldr	r2, [pc, #488]	; (800452c <loadMenuTexts+0xa24>)
 8004342:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 8004344:	487a      	ldr	r0, [pc, #488]	; (8004530 <loadMenuTexts+0xa28>)
 8004346:	f7fc fa1d 	bl	8000784 <copyText>
 800434a:	4603      	mov	r3, r0
 800434c:	4a79      	ldr	r2, [pc, #484]	; (8004534 <loadMenuTexts+0xa2c>)
 800434e:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 8004350:	4879      	ldr	r0, [pc, #484]	; (8004538 <loadMenuTexts+0xa30>)
 8004352:	f7fc fa17 	bl	8000784 <copyText>
 8004356:	4603      	mov	r3, r0
 8004358:	4a78      	ldr	r2, [pc, #480]	; (800453c <loadMenuTexts+0xa34>)
 800435a:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 800435c:	4878      	ldr	r0, [pc, #480]	; (8004540 <loadMenuTexts+0xa38>)
 800435e:	f7fc fa11 	bl	8000784 <copyText>
 8004362:	4603      	mov	r3, r0
 8004364:	4a77      	ldr	r2, [pc, #476]	; (8004544 <loadMenuTexts+0xa3c>)
 8004366:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 8004368:	4877      	ldr	r0, [pc, #476]	; (8004548 <loadMenuTexts+0xa40>)
 800436a:	f7fc fa0b 	bl	8000784 <copyText>
 800436e:	4603      	mov	r3, r0
 8004370:	4a76      	ldr	r2, [pc, #472]	; (800454c <loadMenuTexts+0xa44>)
 8004372:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 8004374:	4876      	ldr	r0, [pc, #472]	; (8004550 <loadMenuTexts+0xa48>)
 8004376:	f7fc fa05 	bl	8000784 <copyText>
 800437a:	4603      	mov	r3, r0
 800437c:	4a75      	ldr	r2, [pc, #468]	; (8004554 <loadMenuTexts+0xa4c>)
 800437e:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8004380:	4875      	ldr	r0, [pc, #468]	; (8004558 <loadMenuTexts+0xa50>)
 8004382:	f7fc f9ff 	bl	8000784 <copyText>
 8004386:	4603      	mov	r3, r0
 8004388:	4a74      	ldr	r2, [pc, #464]	; (800455c <loadMenuTexts+0xa54>)
 800438a:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 800438c:	4874      	ldr	r0, [pc, #464]	; (8004560 <loadMenuTexts+0xa58>)
 800438e:	f7fc f9f9 	bl	8000784 <copyText>
 8004392:	4603      	mov	r3, r0
 8004394:	4a73      	ldr	r2, [pc, #460]	; (8004564 <loadMenuTexts+0xa5c>)
 8004396:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 8004398:	4873      	ldr	r0, [pc, #460]	; (8004568 <loadMenuTexts+0xa60>)
 800439a:	f7fc f9f3 	bl	8000784 <copyText>
 800439e:	4603      	mov	r3, r0
 80043a0:	4a72      	ldr	r2, [pc, #456]	; (800456c <loadMenuTexts+0xa64>)
 80043a2:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 80043a4:	4872      	ldr	r0, [pc, #456]	; (8004570 <loadMenuTexts+0xa68>)
 80043a6:	f7fc f9ed 	bl	8000784 <copyText>
 80043aa:	4603      	mov	r3, r0
 80043ac:	4a71      	ldr	r2, [pc, #452]	; (8004574 <loadMenuTexts+0xa6c>)
 80043ae:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 80043b0:	4871      	ldr	r0, [pc, #452]	; (8004578 <loadMenuTexts+0xa70>)
 80043b2:	f7fc f9e7 	bl	8000784 <copyText>
 80043b6:	e0e1      	b.n	800457c <loadMenuTexts+0xa74>
 80043b8:	200004c0 	.word	0x200004c0
 80043bc:	20000b90 	.word	0x20000b90
 80043c0:	200004d0 	.word	0x200004d0
 80043c4:	20000b94 	.word	0x20000b94
 80043c8:	200004e0 	.word	0x200004e0
 80043cc:	20000b98 	.word	0x20000b98
 80043d0:	200004f0 	.word	0x200004f0
 80043d4:	20000b9c 	.word	0x20000b9c
 80043d8:	20000500 	.word	0x20000500
 80043dc:	20000ba0 	.word	0x20000ba0
 80043e0:	20000510 	.word	0x20000510
 80043e4:	20000ba4 	.word	0x20000ba4
 80043e8:	20000520 	.word	0x20000520
 80043ec:	20000ba8 	.word	0x20000ba8
 80043f0:	20000530 	.word	0x20000530
 80043f4:	20000bac 	.word	0x20000bac
 80043f8:	20000540 	.word	0x20000540
 80043fc:	20000bb0 	.word	0x20000bb0
 8004400:	20000550 	.word	0x20000550
 8004404:	20000bb4 	.word	0x20000bb4
 8004408:	20000560 	.word	0x20000560
 800440c:	20000bb8 	.word	0x20000bb8
 8004410:	20000570 	.word	0x20000570
 8004414:	20000bbc 	.word	0x20000bbc
 8004418:	20000580 	.word	0x20000580
 800441c:	20000bc0 	.word	0x20000bc0
 8004420:	20000590 	.word	0x20000590
 8004424:	20000bc4 	.word	0x20000bc4
 8004428:	200005a0 	.word	0x200005a0
 800442c:	20000bc8 	.word	0x20000bc8
 8004430:	200005b0 	.word	0x200005b0
 8004434:	20000bcc 	.word	0x20000bcc
 8004438:	200005c0 	.word	0x200005c0
 800443c:	20000bd0 	.word	0x20000bd0
 8004440:	200005d0 	.word	0x200005d0
 8004444:	20000bd4 	.word	0x20000bd4
 8004448:	200005e0 	.word	0x200005e0
 800444c:	20000bd8 	.word	0x20000bd8
 8004450:	200005f0 	.word	0x200005f0
 8004454:	20000bdc 	.word	0x20000bdc
 8004458:	20000600 	.word	0x20000600
 800445c:	20000be0 	.word	0x20000be0
 8004460:	20000610 	.word	0x20000610
 8004464:	20000be8 	.word	0x20000be8
 8004468:	20000620 	.word	0x20000620
 800446c:	20000bec 	.word	0x20000bec
 8004470:	20000630 	.word	0x20000630
 8004474:	20000bf0 	.word	0x20000bf0
 8004478:	20000640 	.word	0x20000640
 800447c:	20000bf4 	.word	0x20000bf4
 8004480:	20000650 	.word	0x20000650
 8004484:	20000bf8 	.word	0x20000bf8
 8004488:	20000660 	.word	0x20000660
 800448c:	20000bfc 	.word	0x20000bfc
 8004490:	20000670 	.word	0x20000670
 8004494:	20000c00 	.word	0x20000c00
 8004498:	20000680 	.word	0x20000680
 800449c:	20000c04 	.word	0x20000c04
 80044a0:	20000690 	.word	0x20000690
 80044a4:	20000c08 	.word	0x20000c08
 80044a8:	200006a0 	.word	0x200006a0
 80044ac:	20000c0c 	.word	0x20000c0c
 80044b0:	200006b0 	.word	0x200006b0
 80044b4:	20000c10 	.word	0x20000c10
 80044b8:	200006c0 	.word	0x200006c0
 80044bc:	20000c18 	.word	0x20000c18
 80044c0:	200006d0 	.word	0x200006d0
 80044c4:	20000c20 	.word	0x20000c20
 80044c8:	200006e0 	.word	0x200006e0
 80044cc:	20000c24 	.word	0x20000c24
 80044d0:	200006f0 	.word	0x200006f0
 80044d4:	20000c28 	.word	0x20000c28
 80044d8:	20000700 	.word	0x20000700
 80044dc:	20000c2c 	.word	0x20000c2c
 80044e0:	20000710 	.word	0x20000710
 80044e4:	20000c30 	.word	0x20000c30
 80044e8:	20000720 	.word	0x20000720
 80044ec:	20000c34 	.word	0x20000c34
 80044f0:	20000730 	.word	0x20000730
 80044f4:	20000c38 	.word	0x20000c38
 80044f8:	20000740 	.word	0x20000740
 80044fc:	20000c3c 	.word	0x20000c3c
 8004500:	20000750 	.word	0x20000750
 8004504:	20000c40 	.word	0x20000c40
 8004508:	20000760 	.word	0x20000760
 800450c:	20000c44 	.word	0x20000c44
 8004510:	20000770 	.word	0x20000770
 8004514:	20000c48 	.word	0x20000c48
 8004518:	20000780 	.word	0x20000780
 800451c:	20000c4c 	.word	0x20000c4c
 8004520:	20000790 	.word	0x20000790
 8004524:	20000c50 	.word	0x20000c50
 8004528:	200007a0 	.word	0x200007a0
 800452c:	20000c54 	.word	0x20000c54
 8004530:	200007b0 	.word	0x200007b0
 8004534:	20000c58 	.word	0x20000c58
 8004538:	200007c0 	.word	0x200007c0
 800453c:	20000c5c 	.word	0x20000c5c
 8004540:	200007d0 	.word	0x200007d0
 8004544:	20000c60 	.word	0x20000c60
 8004548:	200007e0 	.word	0x200007e0
 800454c:	20000c64 	.word	0x20000c64
 8004550:	200007f0 	.word	0x200007f0
 8004554:	20000c68 	.word	0x20000c68
 8004558:	20000800 	.word	0x20000800
 800455c:	20000c6c 	.word	0x20000c6c
 8004560:	20000810 	.word	0x20000810
 8004564:	20000c70 	.word	0x20000c70
 8004568:	20000820 	.word	0x20000820
 800456c:	20000c74 	.word	0x20000c74
 8004570:	20000830 	.word	0x20000830
 8004574:	20000c78 	.word	0x20000c78
 8004578:	20000840 	.word	0x20000840
 800457c:	4603      	mov	r3, r0
 800457e:	4a27      	ldr	r2, [pc, #156]	; (800461c <loadMenuTexts+0xb14>)
 8004580:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 8004582:	4827      	ldr	r0, [pc, #156]	; (8004620 <loadMenuTexts+0xb18>)
 8004584:	f7fc f8fe 	bl	8000784 <copyText>
 8004588:	4603      	mov	r3, r0
 800458a:	4a26      	ldr	r2, [pc, #152]	; (8004624 <loadMenuTexts+0xb1c>)
 800458c:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 800458e:	4826      	ldr	r0, [pc, #152]	; (8004628 <loadMenuTexts+0xb20>)
 8004590:	f7fc f8f8 	bl	8000784 <copyText>
 8004594:	4603      	mov	r3, r0
 8004596:	4a25      	ldr	r2, [pc, #148]	; (800462c <loadMenuTexts+0xb24>)
 8004598:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 800459a:	4825      	ldr	r0, [pc, #148]	; (8004630 <loadMenuTexts+0xb28>)
 800459c:	f7fc f8f2 	bl	8000784 <copyText>
 80045a0:	4603      	mov	r3, r0
 80045a2:	4a24      	ldr	r2, [pc, #144]	; (8004634 <loadMenuTexts+0xb2c>)
 80045a4:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 80045a6:	4824      	ldr	r0, [pc, #144]	; (8004638 <loadMenuTexts+0xb30>)
 80045a8:	f7fc f8ec 	bl	8000784 <copyText>
 80045ac:	4603      	mov	r3, r0
 80045ae:	4a23      	ldr	r2, [pc, #140]	; (800463c <loadMenuTexts+0xb34>)
 80045b0:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 80045b2:	4823      	ldr	r0, [pc, #140]	; (8004640 <loadMenuTexts+0xb38>)
 80045b4:	f7fc f8e6 	bl	8000784 <copyText>
 80045b8:	4603      	mov	r3, r0
 80045ba:	4a22      	ldr	r2, [pc, #136]	; (8004644 <loadMenuTexts+0xb3c>)
 80045bc:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 80045be:	4822      	ldr	r0, [pc, #136]	; (8004648 <loadMenuTexts+0xb40>)
 80045c0:	f7fc f8e0 	bl	8000784 <copyText>
 80045c4:	4603      	mov	r3, r0
 80045c6:	4a21      	ldr	r2, [pc, #132]	; (800464c <loadMenuTexts+0xb44>)
 80045c8:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 80045ca:	4821      	ldr	r0, [pc, #132]	; (8004650 <loadMenuTexts+0xb48>)
 80045cc:	f7fc f8da 	bl	8000784 <copyText>
 80045d0:	4603      	mov	r3, r0
 80045d2:	4a20      	ldr	r2, [pc, #128]	; (8004654 <loadMenuTexts+0xb4c>)
 80045d4:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 80045d6:	4820      	ldr	r0, [pc, #128]	; (8004658 <loadMenuTexts+0xb50>)
 80045d8:	f7fc f8d4 	bl	8000784 <copyText>
 80045dc:	4603      	mov	r3, r0
 80045de:	4a1f      	ldr	r2, [pc, #124]	; (800465c <loadMenuTexts+0xb54>)
 80045e0:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 80045e2:	481f      	ldr	r0, [pc, #124]	; (8004660 <loadMenuTexts+0xb58>)
 80045e4:	f7fc f8ce 	bl	8000784 <copyText>
 80045e8:	4603      	mov	r3, r0
 80045ea:	4a1e      	ldr	r2, [pc, #120]	; (8004664 <loadMenuTexts+0xb5c>)
 80045ec:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 80045ee:	481e      	ldr	r0, [pc, #120]	; (8004668 <loadMenuTexts+0xb60>)
 80045f0:	f7fc f8c8 	bl	8000784 <copyText>
 80045f4:	4603      	mov	r3, r0
 80045f6:	4a1d      	ldr	r2, [pc, #116]	; (800466c <loadMenuTexts+0xb64>)
 80045f8:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 80045fa:	481d      	ldr	r0, [pc, #116]	; (8004670 <loadMenuTexts+0xb68>)
 80045fc:	f7fc f8c2 	bl	8000784 <copyText>
 8004600:	4603      	mov	r3, r0
 8004602:	4a1c      	ldr	r2, [pc, #112]	; (8004674 <loadMenuTexts+0xb6c>)
 8004604:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 8004606:	481c      	ldr	r0, [pc, #112]	; (8004678 <loadMenuTexts+0xb70>)
 8004608:	f7fc f8bc 	bl	8000784 <copyText>
 800460c:	4603      	mov	r3, r0
 800460e:	4a1b      	ldr	r2, [pc, #108]	; (800467c <loadMenuTexts+0xb74>)
 8004610:	6013      	str	r3, [r2, #0]
}
 8004612:	bf00      	nop
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	20000c7c 	.word	0x20000c7c
 8004620:	20000850 	.word	0x20000850
 8004624:	20000c80 	.word	0x20000c80
 8004628:	20000860 	.word	0x20000860
 800462c:	20000c84 	.word	0x20000c84
 8004630:	20000870 	.word	0x20000870
 8004634:	20000c88 	.word	0x20000c88
 8004638:	20000880 	.word	0x20000880
 800463c:	20000c8c 	.word	0x20000c8c
 8004640:	20000890 	.word	0x20000890
 8004644:	20000c90 	.word	0x20000c90
 8004648:	200008a0 	.word	0x200008a0
 800464c:	20000c9c 	.word	0x20000c9c
 8004650:	200008b0 	.word	0x200008b0
 8004654:	20000ca0 	.word	0x20000ca0
 8004658:	200008c0 	.word	0x200008c0
 800465c:	20000ca4 	.word	0x20000ca4
 8004660:	200008d0 	.word	0x200008d0
 8004664:	20000ca8 	.word	0x20000ca8
 8004668:	200008e0 	.word	0x200008e0
 800466c:	20000cac 	.word	0x20000cac
 8004670:	200008f0 	.word	0x200008f0
 8004674:	20000cb0 	.word	0x20000cb0
 8004678:	20000900 	.word	0x20000900
 800467c:	20000cb4 	.word	0x20000cb4

08004680 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d105      	bne.n	800469c <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004690:	4a22      	ldr	r2, [pc, #136]	; (800471c <lcdUpdate+0x9c>)
 8004692:	2101      	movs	r1, #1
 8004694:	2002      	movs	r0, #2
 8004696:	f7fc f82e 	bl	80006f6 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 800469a:	e03b      	b.n	8004714 <lcdUpdate+0x94>
	} else if(y==2) {
 800469c:	79fb      	ldrb	r3, [r7, #7]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d105      	bne.n	80046ae <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80046a2:	4a1e      	ldr	r2, [pc, #120]	; (800471c <lcdUpdate+0x9c>)
 80046a4:	2102      	movs	r1, #2
 80046a6:	2002      	movs	r0, #2
 80046a8:	f7fc f825 	bl	80006f6 <lcd_print>
}
 80046ac:	e032      	b.n	8004714 <lcdUpdate+0x94>
	} else if(y==3) {
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	2b03      	cmp	r3, #3
 80046b2:	d105      	bne.n	80046c0 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80046b4:	4a19      	ldr	r2, [pc, #100]	; (800471c <lcdUpdate+0x9c>)
 80046b6:	2103      	movs	r1, #3
 80046b8:	2002      	movs	r0, #2
 80046ba:	f7fc f81c 	bl	80006f6 <lcd_print>
}
 80046be:	e029      	b.n	8004714 <lcdUpdate+0x94>
	} else if(y==4) {
 80046c0:	79fb      	ldrb	r3, [r7, #7]
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d105      	bne.n	80046d2 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80046c6:	4a15      	ldr	r2, [pc, #84]	; (800471c <lcdUpdate+0x9c>)
 80046c8:	2104      	movs	r1, #4
 80046ca:	2002      	movs	r0, #2
 80046cc:	f7fc f813 	bl	80006f6 <lcd_print>
}
 80046d0:	e020      	b.n	8004714 <lcdUpdate+0x94>
	} else if(y==5) {
 80046d2:	79fb      	ldrb	r3, [r7, #7]
 80046d4:	2b05      	cmp	r3, #5
 80046d6:	d105      	bne.n	80046e4 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80046d8:	4a10      	ldr	r2, [pc, #64]	; (800471c <lcdUpdate+0x9c>)
 80046da:	2105      	movs	r1, #5
 80046dc:	2002      	movs	r0, #2
 80046de:	f7fc f80a 	bl	80006f6 <lcd_print>
}
 80046e2:	e017      	b.n	8004714 <lcdUpdate+0x94>
	} else if(y==6) {
 80046e4:	79fb      	ldrb	r3, [r7, #7]
 80046e6:	2b06      	cmp	r3, #6
 80046e8:	d105      	bne.n	80046f6 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80046ea:	4a0c      	ldr	r2, [pc, #48]	; (800471c <lcdUpdate+0x9c>)
 80046ec:	2106      	movs	r1, #6
 80046ee:	2002      	movs	r0, #2
 80046f0:	f7fc f801 	bl	80006f6 <lcd_print>
}
 80046f4:	e00e      	b.n	8004714 <lcdUpdate+0x94>
	} else if (y==7) {
 80046f6:	79fb      	ldrb	r3, [r7, #7]
 80046f8:	2b07      	cmp	r3, #7
 80046fa:	d10b      	bne.n	8004714 <lcdUpdate+0x94>
		lcd_clear();
 80046fc:	f7fc f810 	bl	8000720 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8004700:	4a07      	ldr	r2, [pc, #28]	; (8004720 <lcdUpdate+0xa0>)
 8004702:	2101      	movs	r1, #1
 8004704:	2001      	movs	r0, #1
 8004706:	f7fb fff6 	bl	80006f6 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 800470a:	4a06      	ldr	r2, [pc, #24]	; (8004724 <lcdUpdate+0xa4>)
 800470c:	2101      	movs	r1, #1
 800470e:	2002      	movs	r0, #2
 8004710:	f7fb fff1 	bl	80006f6 <lcd_print>
}
 8004714:	bf00      	nop
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}
 800471c:	0800c520 	.word	0x0800c520
 8004720:	0800cdfc 	.word	0x0800cdfc
 8004724:	0800ce10 	.word	0x0800ce10

08004728 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	4603      	mov	r3, r0
 8004730:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8004732:	79fb      	ldrb	r3, [r7, #7]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d11d      	bne.n	8004774 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8004738:	4b62      	ldr	r3, [pc, #392]	; (80048c4 <hataKoduLcdGoster+0x19c>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d105      	bne.n	800474c <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8004740:	4a61      	ldr	r2, [pc, #388]	; (80048c8 <hataKoduLcdGoster+0x1a0>)
 8004742:	2101      	movs	r1, #1
 8004744:	2001      	movs	r0, #1
 8004746:	f7fb ffd6 	bl	80006f6 <lcd_print>
 800474a:	e008      	b.n	800475e <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 800474c:	4b5d      	ldr	r3, [pc, #372]	; (80048c4 <hataKoduLcdGoster+0x19c>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d104      	bne.n	800475e <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004754:	4a5d      	ldr	r2, [pc, #372]	; (80048cc <hataKoduLcdGoster+0x1a4>)
 8004756:	2101      	movs	r1, #1
 8004758:	2001      	movs	r0, #1
 800475a:	f7fb ffcc 	bl	80006f6 <lcd_print>
		}
		lcd_print(2, 1, "1");
 800475e:	4a5c      	ldr	r2, [pc, #368]	; (80048d0 <hataKoduLcdGoster+0x1a8>)
 8004760:	2101      	movs	r1, #1
 8004762:	2002      	movs	r0, #2
 8004764:	f7fb ffc7 	bl	80006f6 <lcd_print>
		lcd_print(2, 7, "          ");
 8004768:	4a5a      	ldr	r2, [pc, #360]	; (80048d4 <hataKoduLcdGoster+0x1ac>)
 800476a:	2107      	movs	r1, #7
 800476c:	2002      	movs	r0, #2
 800476e:	f7fb ffc2 	bl	80006f6 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8004772:	e0a3      	b.n	80048bc <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8004774:	79fb      	ldrb	r3, [r7, #7]
 8004776:	2b02      	cmp	r3, #2
 8004778:	d11d      	bne.n	80047b6 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 800477a:	4b52      	ldr	r3, [pc, #328]	; (80048c4 <hataKoduLcdGoster+0x19c>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d105      	bne.n	800478e <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 8004782:	4a51      	ldr	r2, [pc, #324]	; (80048c8 <hataKoduLcdGoster+0x1a0>)
 8004784:	2101      	movs	r1, #1
 8004786:	2001      	movs	r0, #1
 8004788:	f7fb ffb5 	bl	80006f6 <lcd_print>
 800478c:	e008      	b.n	80047a0 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 800478e:	4b4d      	ldr	r3, [pc, #308]	; (80048c4 <hataKoduLcdGoster+0x19c>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d104      	bne.n	80047a0 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004796:	4a4d      	ldr	r2, [pc, #308]	; (80048cc <hataKoduLcdGoster+0x1a4>)
 8004798:	2101      	movs	r1, #1
 800479a:	2001      	movs	r0, #1
 800479c:	f7fb ffab 	bl	80006f6 <lcd_print>
		lcd_print(2, 2, "2");
 80047a0:	4a4d      	ldr	r2, [pc, #308]	; (80048d8 <hataKoduLcdGoster+0x1b0>)
 80047a2:	2102      	movs	r1, #2
 80047a4:	2002      	movs	r0, #2
 80047a6:	f7fb ffa6 	bl	80006f6 <lcd_print>
		lcd_print(2, 7, "          ");
 80047aa:	4a4a      	ldr	r2, [pc, #296]	; (80048d4 <hataKoduLcdGoster+0x1ac>)
 80047ac:	2107      	movs	r1, #7
 80047ae:	2002      	movs	r0, #2
 80047b0:	f7fb ffa1 	bl	80006f6 <lcd_print>
}
 80047b4:	e082      	b.n	80048bc <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 80047b6:	79fb      	ldrb	r3, [r7, #7]
 80047b8:	2b03      	cmp	r3, #3
 80047ba:	d11d      	bne.n	80047f8 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 80047bc:	4b41      	ldr	r3, [pc, #260]	; (80048c4 <hataKoduLcdGoster+0x19c>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d105      	bne.n	80047d0 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 80047c4:	4a40      	ldr	r2, [pc, #256]	; (80048c8 <hataKoduLcdGoster+0x1a0>)
 80047c6:	2101      	movs	r1, #1
 80047c8:	2001      	movs	r0, #1
 80047ca:	f7fb ff94 	bl	80006f6 <lcd_print>
 80047ce:	e008      	b.n	80047e2 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 80047d0:	4b3c      	ldr	r3, [pc, #240]	; (80048c4 <hataKoduLcdGoster+0x19c>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d104      	bne.n	80047e2 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 80047d8:	4a3c      	ldr	r2, [pc, #240]	; (80048cc <hataKoduLcdGoster+0x1a4>)
 80047da:	2101      	movs	r1, #1
 80047dc:	2001      	movs	r0, #1
 80047de:	f7fb ff8a 	bl	80006f6 <lcd_print>
		lcd_print(2, 3, "3");
 80047e2:	4a3e      	ldr	r2, [pc, #248]	; (80048dc <hataKoduLcdGoster+0x1b4>)
 80047e4:	2103      	movs	r1, #3
 80047e6:	2002      	movs	r0, #2
 80047e8:	f7fb ff85 	bl	80006f6 <lcd_print>
		lcd_print(2, 7, "          ");
 80047ec:	4a39      	ldr	r2, [pc, #228]	; (80048d4 <hataKoduLcdGoster+0x1ac>)
 80047ee:	2107      	movs	r1, #7
 80047f0:	2002      	movs	r0, #2
 80047f2:	f7fb ff80 	bl	80006f6 <lcd_print>
}
 80047f6:	e061      	b.n	80048bc <hataKoduLcdGoster+0x194>
	} else if(x==4){
 80047f8:	79fb      	ldrb	r3, [r7, #7]
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d11d      	bne.n	800483a <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 80047fe:	4b31      	ldr	r3, [pc, #196]	; (80048c4 <hataKoduLcdGoster+0x19c>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d105      	bne.n	8004812 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8004806:	4a30      	ldr	r2, [pc, #192]	; (80048c8 <hataKoduLcdGoster+0x1a0>)
 8004808:	2101      	movs	r1, #1
 800480a:	2001      	movs	r0, #1
 800480c:	f7fb ff73 	bl	80006f6 <lcd_print>
 8004810:	e008      	b.n	8004824 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8004812:	4b2c      	ldr	r3, [pc, #176]	; (80048c4 <hataKoduLcdGoster+0x19c>)
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d104      	bne.n	8004824 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 800481a:	4a2c      	ldr	r2, [pc, #176]	; (80048cc <hataKoduLcdGoster+0x1a4>)
 800481c:	2101      	movs	r1, #1
 800481e:	2001      	movs	r0, #1
 8004820:	f7fb ff69 	bl	80006f6 <lcd_print>
		lcd_print(2, 4, "4");
 8004824:	4a2e      	ldr	r2, [pc, #184]	; (80048e0 <hataKoduLcdGoster+0x1b8>)
 8004826:	2104      	movs	r1, #4
 8004828:	2002      	movs	r0, #2
 800482a:	f7fb ff64 	bl	80006f6 <lcd_print>
		lcd_print(2, 7, "          ");
 800482e:	4a29      	ldr	r2, [pc, #164]	; (80048d4 <hataKoduLcdGoster+0x1ac>)
 8004830:	2107      	movs	r1, #7
 8004832:	2002      	movs	r0, #2
 8004834:	f7fb ff5f 	bl	80006f6 <lcd_print>
}
 8004838:	e040      	b.n	80048bc <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 800483a:	79fb      	ldrb	r3, [r7, #7]
 800483c:	2b05      	cmp	r3, #5
 800483e:	d11d      	bne.n	800487c <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8004840:	4b20      	ldr	r3, [pc, #128]	; (80048c4 <hataKoduLcdGoster+0x19c>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d105      	bne.n	8004854 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8004848:	4a1f      	ldr	r2, [pc, #124]	; (80048c8 <hataKoduLcdGoster+0x1a0>)
 800484a:	2101      	movs	r1, #1
 800484c:	2001      	movs	r0, #1
 800484e:	f7fb ff52 	bl	80006f6 <lcd_print>
 8004852:	e008      	b.n	8004866 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8004854:	4b1b      	ldr	r3, [pc, #108]	; (80048c4 <hataKoduLcdGoster+0x19c>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d104      	bne.n	8004866 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 800485c:	4a1b      	ldr	r2, [pc, #108]	; (80048cc <hataKoduLcdGoster+0x1a4>)
 800485e:	2101      	movs	r1, #1
 8004860:	2001      	movs	r0, #1
 8004862:	f7fb ff48 	bl	80006f6 <lcd_print>
		lcd_print(2, 5, "5");
 8004866:	4a1f      	ldr	r2, [pc, #124]	; (80048e4 <hataKoduLcdGoster+0x1bc>)
 8004868:	2105      	movs	r1, #5
 800486a:	2002      	movs	r0, #2
 800486c:	f7fb ff43 	bl	80006f6 <lcd_print>
		lcd_print(2, 7, "          ");
 8004870:	4a18      	ldr	r2, [pc, #96]	; (80048d4 <hataKoduLcdGoster+0x1ac>)
 8004872:	2107      	movs	r1, #7
 8004874:	2002      	movs	r0, #2
 8004876:	f7fb ff3e 	bl	80006f6 <lcd_print>
}
 800487a:	e01f      	b.n	80048bc <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 800487c:	79fb      	ldrb	r3, [r7, #7]
 800487e:	2b06      	cmp	r3, #6
 8004880:	d11c      	bne.n	80048bc <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8004882:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <hataKoduLcdGoster+0x19c>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d105      	bne.n	8004896 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 800488a:	4a0f      	ldr	r2, [pc, #60]	; (80048c8 <hataKoduLcdGoster+0x1a0>)
 800488c:	2101      	movs	r1, #1
 800488e:	2001      	movs	r0, #1
 8004890:	f7fb ff31 	bl	80006f6 <lcd_print>
 8004894:	e008      	b.n	80048a8 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8004896:	4b0b      	ldr	r3, [pc, #44]	; (80048c4 <hataKoduLcdGoster+0x19c>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d104      	bne.n	80048a8 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 800489e:	4a0b      	ldr	r2, [pc, #44]	; (80048cc <hataKoduLcdGoster+0x1a4>)
 80048a0:	2101      	movs	r1, #1
 80048a2:	2001      	movs	r0, #1
 80048a4:	f7fb ff27 	bl	80006f6 <lcd_print>
		lcd_print(2, 6, "6");
 80048a8:	4a0f      	ldr	r2, [pc, #60]	; (80048e8 <hataKoduLcdGoster+0x1c0>)
 80048aa:	2106      	movs	r1, #6
 80048ac:	2002      	movs	r0, #2
 80048ae:	f7fb ff22 	bl	80006f6 <lcd_print>
		lcd_print(2, 7, "          ");
 80048b2:	4a08      	ldr	r2, [pc, #32]	; (80048d4 <hataKoduLcdGoster+0x1ac>)
 80048b4:	2107      	movs	r1, #7
 80048b6:	2002      	movs	r0, #2
 80048b8:	f7fb ff1d 	bl	80006f6 <lcd_print>
}
 80048bc:	bf00      	nop
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	20000b44 	.word	0x20000b44
 80048c8:	0800ce24 	.word	0x0800ce24
 80048cc:	0800ce38 	.word	0x0800ce38
 80048d0:	0800ce4c 	.word	0x0800ce4c
 80048d4:	0800ce50 	.word	0x0800ce50
 80048d8:	0800ce5c 	.word	0x0800ce5c
 80048dc:	0800ce60 	.word	0x0800ce60
 80048e0:	0800ce64 	.word	0x0800ce64
 80048e4:	0800ce68 	.word	0x0800ce68
 80048e8:	0800ce6c 	.word	0x0800ce6c

080048ec <eepromKontrol>:

void eepromKontrol(void) {
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 80048f2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80048f6:	9302      	str	r3, [sp, #8]
 80048f8:	233f      	movs	r3, #63	; 0x3f
 80048fa:	9301      	str	r3, [sp, #4]
 80048fc:	4b9b      	ldr	r3, [pc, #620]	; (8004b6c <eepromKontrol+0x280>)
 80048fe:	9300      	str	r3, [sp, #0]
 8004900:	233f      	movs	r3, #63	; 0x3f
 8004902:	2200      	movs	r2, #0
 8004904:	21a0      	movs	r1, #160	; 0xa0
 8004906:	489a      	ldr	r0, [pc, #616]	; (8004b70 <eepromKontrol+0x284>)
 8004908:	f004 faf6 	bl	8008ef8 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 800490c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004910:	f003 f96e 	bl	8007bf0 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8004914:	4b95      	ldr	r3, [pc, #596]	; (8004b6c <eepromKontrol+0x280>)
 8004916:	78da      	ldrb	r2, [r3, #3]
 8004918:	4b96      	ldr	r3, [pc, #600]	; (8004b74 <eepromKontrol+0x288>)
 800491a:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800491c:	4b93      	ldr	r3, [pc, #588]	; (8004b6c <eepromKontrol+0x280>)
 800491e:	785a      	ldrb	r2, [r3, #1]
 8004920:	4b95      	ldr	r3, [pc, #596]	; (8004b78 <eepromKontrol+0x28c>)
 8004922:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8004924:	4b91      	ldr	r3, [pc, #580]	; (8004b6c <eepromKontrol+0x280>)
 8004926:	789a      	ldrb	r2, [r3, #2]
 8004928:	4b94      	ldr	r3, [pc, #592]	; (8004b7c <eepromKontrol+0x290>)
 800492a:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800492c:	4b8f      	ldr	r3, [pc, #572]	; (8004b6c <eepromKontrol+0x280>)
 800492e:	791a      	ldrb	r2, [r3, #4]
 8004930:	4b93      	ldr	r3, [pc, #588]	; (8004b80 <eepromKontrol+0x294>)
 8004932:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8004934:	4b8d      	ldr	r3, [pc, #564]	; (8004b6c <eepromKontrol+0x280>)
 8004936:	795a      	ldrb	r2, [r3, #5]
 8004938:	4b92      	ldr	r3, [pc, #584]	; (8004b84 <eepromKontrol+0x298>)
 800493a:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800493c:	4b8b      	ldr	r3, [pc, #556]	; (8004b6c <eepromKontrol+0x280>)
 800493e:	799a      	ldrb	r2, [r3, #6]
 8004940:	4b91      	ldr	r3, [pc, #580]	; (8004b88 <eepromKontrol+0x29c>)
 8004942:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8004944:	4b89      	ldr	r3, [pc, #548]	; (8004b6c <eepromKontrol+0x280>)
 8004946:	79da      	ldrb	r2, [r3, #7]
 8004948:	4b90      	ldr	r3, [pc, #576]	; (8004b8c <eepromKontrol+0x2a0>)
 800494a:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 800494c:	4b87      	ldr	r3, [pc, #540]	; (8004b6c <eepromKontrol+0x280>)
 800494e:	7a1a      	ldrb	r2, [r3, #8]
 8004950:	4b8f      	ldr	r3, [pc, #572]	; (8004b90 <eepromKontrol+0x2a4>)
 8004952:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8004954:	4b85      	ldr	r3, [pc, #532]	; (8004b6c <eepromKontrol+0x280>)
 8004956:	7a5a      	ldrb	r2, [r3, #9]
 8004958:	4b8e      	ldr	r3, [pc, #568]	; (8004b94 <eepromKontrol+0x2a8>)
 800495a:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 800495c:	4b83      	ldr	r3, [pc, #524]	; (8004b6c <eepromKontrol+0x280>)
 800495e:	7a9a      	ldrb	r2, [r3, #10]
 8004960:	4b8d      	ldr	r3, [pc, #564]	; (8004b98 <eepromKontrol+0x2ac>)
 8004962:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8004964:	4b81      	ldr	r3, [pc, #516]	; (8004b6c <eepromKontrol+0x280>)
 8004966:	7ada      	ldrb	r2, [r3, #11]
 8004968:	4b8c      	ldr	r3, [pc, #560]	; (8004b9c <eepromKontrol+0x2b0>)
 800496a:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 800496c:	4b7f      	ldr	r3, [pc, #508]	; (8004b6c <eepromKontrol+0x280>)
 800496e:	7b1a      	ldrb	r2, [r3, #12]
 8004970:	4b8b      	ldr	r3, [pc, #556]	; (8004ba0 <eepromKontrol+0x2b4>)
 8004972:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8004974:	4b7d      	ldr	r3, [pc, #500]	; (8004b6c <eepromKontrol+0x280>)
 8004976:	7b5a      	ldrb	r2, [r3, #13]
 8004978:	4b8a      	ldr	r3, [pc, #552]	; (8004ba4 <eepromKontrol+0x2b8>)
 800497a:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 800497c:	4b7b      	ldr	r3, [pc, #492]	; (8004b6c <eepromKontrol+0x280>)
 800497e:	7b9a      	ldrb	r2, [r3, #14]
 8004980:	4b89      	ldr	r3, [pc, #548]	; (8004ba8 <eepromKontrol+0x2bc>)
 8004982:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8004984:	4b79      	ldr	r3, [pc, #484]	; (8004b6c <eepromKontrol+0x280>)
 8004986:	7bda      	ldrb	r2, [r3, #15]
 8004988:	4b88      	ldr	r3, [pc, #544]	; (8004bac <eepromKontrol+0x2c0>)
 800498a:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 800498c:	4b77      	ldr	r3, [pc, #476]	; (8004b6c <eepromKontrol+0x280>)
 800498e:	7c1a      	ldrb	r2, [r3, #16]
 8004990:	4b87      	ldr	r3, [pc, #540]	; (8004bb0 <eepromKontrol+0x2c4>)
 8004992:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8004994:	4b75      	ldr	r3, [pc, #468]	; (8004b6c <eepromKontrol+0x280>)
 8004996:	7c5a      	ldrb	r2, [r3, #17]
 8004998:	4b86      	ldr	r3, [pc, #536]	; (8004bb4 <eepromKontrol+0x2c8>)
 800499a:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 800499c:	4b73      	ldr	r3, [pc, #460]	; (8004b6c <eepromKontrol+0x280>)
 800499e:	7c9a      	ldrb	r2, [r3, #18]
 80049a0:	4b85      	ldr	r3, [pc, #532]	; (8004bb8 <eepromKontrol+0x2cc>)
 80049a2:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80049a4:	4b71      	ldr	r3, [pc, #452]	; (8004b6c <eepromKontrol+0x280>)
 80049a6:	7cda      	ldrb	r2, [r3, #19]
 80049a8:	4b84      	ldr	r3, [pc, #528]	; (8004bbc <eepromKontrol+0x2d0>)
 80049aa:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80049ac:	4b6f      	ldr	r3, [pc, #444]	; (8004b6c <eepromKontrol+0x280>)
 80049ae:	7d1a      	ldrb	r2, [r3, #20]
 80049b0:	4b83      	ldr	r3, [pc, #524]	; (8004bc0 <eepromKontrol+0x2d4>)
 80049b2:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80049b4:	4b6d      	ldr	r3, [pc, #436]	; (8004b6c <eepromKontrol+0x280>)
 80049b6:	7d5a      	ldrb	r2, [r3, #21]
 80049b8:	4b82      	ldr	r3, [pc, #520]	; (8004bc4 <eepromKontrol+0x2d8>)
 80049ba:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 80049bc:	4b6b      	ldr	r3, [pc, #428]	; (8004b6c <eepromKontrol+0x280>)
 80049be:	7d9a      	ldrb	r2, [r3, #22]
 80049c0:	4b81      	ldr	r3, [pc, #516]	; (8004bc8 <eepromKontrol+0x2dc>)
 80049c2:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 80049c4:	4b69      	ldr	r3, [pc, #420]	; (8004b6c <eepromKontrol+0x280>)
 80049c6:	7dda      	ldrb	r2, [r3, #23]
 80049c8:	4b80      	ldr	r3, [pc, #512]	; (8004bcc <eepromKontrol+0x2e0>)
 80049ca:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 80049cc:	4b67      	ldr	r3, [pc, #412]	; (8004b6c <eepromKontrol+0x280>)
 80049ce:	7e1a      	ldrb	r2, [r3, #24]
 80049d0:	4b7f      	ldr	r3, [pc, #508]	; (8004bd0 <eepromKontrol+0x2e4>)
 80049d2:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 80049d4:	4b65      	ldr	r3, [pc, #404]	; (8004b6c <eepromKontrol+0x280>)
 80049d6:	7e5a      	ldrb	r2, [r3, #25]
 80049d8:	4b7e      	ldr	r3, [pc, #504]	; (8004bd4 <eepromKontrol+0x2e8>)
 80049da:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 80049dc:	4b63      	ldr	r3, [pc, #396]	; (8004b6c <eepromKontrol+0x280>)
 80049de:	7e9a      	ldrb	r2, [r3, #26]
 80049e0:	4b7d      	ldr	r3, [pc, #500]	; (8004bd8 <eepromKontrol+0x2ec>)
 80049e2:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 80049e4:	4b61      	ldr	r3, [pc, #388]	; (8004b6c <eepromKontrol+0x280>)
 80049e6:	7eda      	ldrb	r2, [r3, #27]
 80049e8:	4b7c      	ldr	r3, [pc, #496]	; (8004bdc <eepromKontrol+0x2f0>)
 80049ea:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 80049ec:	4b5f      	ldr	r3, [pc, #380]	; (8004b6c <eepromKontrol+0x280>)
 80049ee:	7f1a      	ldrb	r2, [r3, #28]
 80049f0:	4b7b      	ldr	r3, [pc, #492]	; (8004be0 <eepromKontrol+0x2f4>)
 80049f2:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 80049f4:	4b5d      	ldr	r3, [pc, #372]	; (8004b6c <eepromKontrol+0x280>)
 80049f6:	7f5a      	ldrb	r2, [r3, #29]
 80049f8:	4b7a      	ldr	r3, [pc, #488]	; (8004be4 <eepromKontrol+0x2f8>)
 80049fa:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 80049fc:	4b5b      	ldr	r3, [pc, #364]	; (8004b6c <eepromKontrol+0x280>)
 80049fe:	7f9a      	ldrb	r2, [r3, #30]
 8004a00:	4b79      	ldr	r3, [pc, #484]	; (8004be8 <eepromKontrol+0x2fc>)
 8004a02:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8004a04:	4b59      	ldr	r3, [pc, #356]	; (8004b6c <eepromKontrol+0x280>)
 8004a06:	7fda      	ldrb	r2, [r3, #31]
 8004a08:	4b78      	ldr	r3, [pc, #480]	; (8004bec <eepromKontrol+0x300>)
 8004a0a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8004a0c:	4b57      	ldr	r3, [pc, #348]	; (8004b6c <eepromKontrol+0x280>)
 8004a0e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004a12:	4b77      	ldr	r3, [pc, #476]	; (8004bf0 <eepromKontrol+0x304>)
 8004a14:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8004a16:	4b55      	ldr	r3, [pc, #340]	; (8004b6c <eepromKontrol+0x280>)
 8004a18:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004a1c:	4b75      	ldr	r3, [pc, #468]	; (8004bf4 <eepromKontrol+0x308>)
 8004a1e:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8004a20:	4b52      	ldr	r3, [pc, #328]	; (8004b6c <eepromKontrol+0x280>)
 8004a22:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004a26:	4b74      	ldr	r3, [pc, #464]	; (8004bf8 <eepromKontrol+0x30c>)
 8004a28:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8004a2a:	4b50      	ldr	r3, [pc, #320]	; (8004b6c <eepromKontrol+0x280>)
 8004a2c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004a30:	4b72      	ldr	r3, [pc, #456]	; (8004bfc <eepromKontrol+0x310>)
 8004a32:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8004a34:	4b4d      	ldr	r3, [pc, #308]	; (8004b6c <eepromKontrol+0x280>)
 8004a36:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004a3a:	4b71      	ldr	r3, [pc, #452]	; (8004c00 <eepromKontrol+0x314>)
 8004a3c:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[37];
 8004a3e:	4b4b      	ldr	r3, [pc, #300]	; (8004b6c <eepromKontrol+0x280>)
 8004a40:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8004a44:	4b6f      	ldr	r3, [pc, #444]	; (8004c04 <eepromKontrol+0x318>)
 8004a46:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[38];
 8004a48:	4b48      	ldr	r3, [pc, #288]	; (8004b6c <eepromKontrol+0x280>)
 8004a4a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8004a4e:	4b6e      	ldr	r3, [pc, #440]	; (8004c08 <eepromKontrol+0x31c>)
 8004a50:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[39];
 8004a52:	4b46      	ldr	r3, [pc, #280]	; (8004b6c <eepromKontrol+0x280>)
 8004a54:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004a58:	4b6c      	ldr	r3, [pc, #432]	; (8004c0c <eepromKontrol+0x320>)
 8004a5a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[40];
 8004a5c:	4b43      	ldr	r3, [pc, #268]	; (8004b6c <eepromKontrol+0x280>)
 8004a5e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8004a62:	4b6b      	ldr	r3, [pc, #428]	; (8004c10 <eepromKontrol+0x324>)
 8004a64:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[41];
 8004a66:	4b41      	ldr	r3, [pc, #260]	; (8004b6c <eepromKontrol+0x280>)
 8004a68:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8004a6c:	4b69      	ldr	r3, [pc, #420]	; (8004c14 <eepromKontrol+0x328>)
 8004a6e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[42];
 8004a70:	4b3e      	ldr	r3, [pc, #248]	; (8004b6c <eepromKontrol+0x280>)
 8004a72:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8004a76:	4b68      	ldr	r3, [pc, #416]	; (8004c18 <eepromKontrol+0x32c>)
 8004a78:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[43];
 8004a7a:	4b3c      	ldr	r3, [pc, #240]	; (8004b6c <eepromKontrol+0x280>)
 8004a7c:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8004a80:	4b66      	ldr	r3, [pc, #408]	; (8004c1c <eepromKontrol+0x330>)
 8004a82:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[44];
 8004a84:	4b39      	ldr	r3, [pc, #228]	; (8004b6c <eepromKontrol+0x280>)
 8004a86:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004a8a:	4b65      	ldr	r3, [pc, #404]	; (8004c20 <eepromKontrol+0x334>)
 8004a8c:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[45];
 8004a8e:	4b37      	ldr	r3, [pc, #220]	; (8004b6c <eepromKontrol+0x280>)
 8004a90:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8004a94:	4b63      	ldr	r3, [pc, #396]	; (8004c24 <eepromKontrol+0x338>)
 8004a96:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[46];
 8004a98:	4b34      	ldr	r3, [pc, #208]	; (8004b6c <eepromKontrol+0x280>)
 8004a9a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8004a9e:	4b62      	ldr	r3, [pc, #392]	; (8004c28 <eepromKontrol+0x33c>)
 8004aa0:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8004aa2:	4b54      	ldr	r3, [pc, #336]	; (8004bf4 <eepromKontrol+0x308>)
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7ff f82e 	bl	8003b08 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8004aac:	4b50      	ldr	r3, [pc, #320]	; (8004bf0 <eepromKontrol+0x304>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b09      	cmp	r3, #9
 8004ab2:	d902      	bls.n	8004aba <eepromKontrol+0x1ce>
	    calismaSayisi10000=0;
 8004ab4:	4b4e      	ldr	r3, [pc, #312]	; (8004bf0 <eepromKontrol+0x304>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8004aba:	4b4c      	ldr	r3, [pc, #304]	; (8004bec <eepromKontrol+0x300>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b09      	cmp	r3, #9
 8004ac0:	d902      	bls.n	8004ac8 <eepromKontrol+0x1dc>
	    calismaSayisi1000=0;
 8004ac2:	4b4a      	ldr	r3, [pc, #296]	; (8004bec <eepromKontrol+0x300>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8004ac8:	4b47      	ldr	r3, [pc, #284]	; (8004be8 <eepromKontrol+0x2fc>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b09      	cmp	r3, #9
 8004ace:	d902      	bls.n	8004ad6 <eepromKontrol+0x1ea>
	    calismaSayisi100=0;
 8004ad0:	4b45      	ldr	r3, [pc, #276]	; (8004be8 <eepromKontrol+0x2fc>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8004ad6:	4b43      	ldr	r3, [pc, #268]	; (8004be4 <eepromKontrol+0x2f8>)
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	2b09      	cmp	r3, #9
 8004adc:	d902      	bls.n	8004ae4 <eepromKontrol+0x1f8>
	    calismaSayisi10=0;
 8004ade:	4b41      	ldr	r3, [pc, #260]	; (8004be4 <eepromKontrol+0x2f8>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8004ae4:	4b3e      	ldr	r3, [pc, #248]	; (8004be0 <eepromKontrol+0x2f4>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b09      	cmp	r3, #9
 8004aea:	d902      	bls.n	8004af2 <eepromKontrol+0x206>
	    calismaSayisi1=0;
 8004aec:	4b3c      	ldr	r3, [pc, #240]	; (8004be0 <eepromKontrol+0x2f4>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8004af2:	4b21      	ldr	r3, [pc, #132]	; (8004b78 <eepromKontrol+0x28c>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d902      	bls.n	8004b00 <eepromKontrol+0x214>
	    calismaSekli=0;
 8004afa:	4b1f      	ldr	r3, [pc, #124]	; (8004b78 <eepromKontrol+0x28c>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8004b00:	4b1e      	ldr	r3, [pc, #120]	; (8004b7c <eepromKontrol+0x290>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d902      	bls.n	8004b0e <eepromKontrol+0x222>
	    emniyetCercevesi=1;
 8004b08:	4b1c      	ldr	r3, [pc, #112]	; (8004b7c <eepromKontrol+0x290>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8004b0e:	4b1c      	ldr	r3, [pc, #112]	; (8004b80 <eepromKontrol+0x294>)
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d902      	bls.n	8004b1c <eepromKontrol+0x230>
	    yavaslamaLimit=0;
 8004b16:	4b1a      	ldr	r3, [pc, #104]	; (8004b80 <eepromKontrol+0x294>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8004b1c:	4b19      	ldr	r3, [pc, #100]	; (8004b84 <eepromKontrol+0x298>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d902      	bls.n	8004b2a <eepromKontrol+0x23e>
	    altLimit=1;
 8004b24:	4b17      	ldr	r3, [pc, #92]	; (8004b84 <eepromKontrol+0x298>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8004b2a:	4b17      	ldr	r3, [pc, #92]	; (8004b88 <eepromKontrol+0x29c>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d902      	bls.n	8004b38 <eepromKontrol+0x24c>
	    basincSalteri=1;
 8004b32:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <eepromKontrol+0x29c>)
 8004b34:	2201      	movs	r2, #1
 8004b36:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8004b38:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <eepromKontrol+0x2a0>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	2b03      	cmp	r3, #3
 8004b3e:	d902      	bls.n	8004b46 <eepromKontrol+0x25a>
	    kapiSecimleri=3;
 8004b40:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <eepromKontrol+0x2a0>)
 8004b42:	2203      	movs	r2, #3
 8004b44:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8004b46:	4b2e      	ldr	r3, [pc, #184]	; (8004c00 <eepromKontrol+0x314>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d902      	bls.n	8004b54 <eepromKontrol+0x268>
	    kapiAcTipi=0;
 8004b4e:	4b2c      	ldr	r3, [pc, #176]	; (8004c00 <eepromKontrol+0x314>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8004b54:	4b0e      	ldr	r3, [pc, #56]	; (8004b90 <eepromKontrol+0x2a4>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d902      	bls.n	8004b62 <eepromKontrol+0x276>
	    kapi1Tip=1;
 8004b5c:	4b0c      	ldr	r3, [pc, #48]	; (8004b90 <eepromKontrol+0x2a4>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8004b62:	4b0c      	ldr	r3, [pc, #48]	; (8004b94 <eepromKontrol+0x2a8>)
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b05      	cmp	r3, #5
 8004b68:	d963      	bls.n	8004c32 <eepromKontrol+0x346>
 8004b6a:	e05f      	b.n	8004c2c <eepromKontrol+0x340>
 8004b6c:	20000ab8 	.word	0x20000ab8
 8004b70:	20000ce0 	.word	0x20000ce0
 8004b74:	20000af7 	.word	0x20000af7
 8004b78:	20000b25 	.word	0x20000b25
 8004b7c:	20000b28 	.word	0x20000b28
 8004b80:	20000b29 	.word	0x20000b29
 8004b84:	20000b2a 	.word	0x20000b2a
 8004b88:	20000b2b 	.word	0x20000b2b
 8004b8c:	20000b2c 	.word	0x20000b2c
 8004b90:	20000b2d 	.word	0x20000b2d
 8004b94:	20000b3d 	.word	0x20000b3d
 8004b98:	20000b2e 	.word	0x20000b2e
 8004b9c:	20000b3e 	.word	0x20000b3e
 8004ba0:	20000b2f 	.word	0x20000b2f
 8004ba4:	20000b3f 	.word	0x20000b3f
 8004ba8:	20000b32 	.word	0x20000b32
 8004bac:	20000b33 	.word	0x20000b33
 8004bb0:	20000b34 	.word	0x20000b34
 8004bb4:	20000b35 	.word	0x20000b35
 8004bb8:	20000b36 	.word	0x20000b36
 8004bbc:	20000b37 	.word	0x20000b37
 8004bc0:	20000b38 	.word	0x20000b38
 8004bc4:	20000b39 	.word	0x20000b39
 8004bc8:	20000b3a 	.word	0x20000b3a
 8004bcc:	20000b3b 	.word	0x20000b3b
 8004bd0:	20000b3c 	.word	0x20000b3c
 8004bd4:	20000b40 	.word	0x20000b40
 8004bd8:	20000b42 	.word	0x20000b42
 8004bdc:	20000b20 	.word	0x20000b20
 8004be0:	20000b21 	.word	0x20000b21
 8004be4:	20000b22 	.word	0x20000b22
 8004be8:	20000941 	.word	0x20000941
 8004bec:	20000942 	.word	0x20000942
 8004bf0:	20000b23 	.word	0x20000b23
 8004bf4:	20000b44 	.word	0x20000b44
 8004bf8:	20000b31 	.word	0x20000b31
 8004bfc:	20000b43 	.word	0x20000b43
 8004c00:	20000b30 	.word	0x20000b30
 8004c04:	20000b45 	.word	0x20000b45
 8004c08:	20000b46 	.word	0x20000b46
 8004c0c:	20000b47 	.word	0x20000b47
 8004c10:	20000b48 	.word	0x20000b48
 8004c14:	20000b49 	.word	0x20000b49
 8004c18:	20000b4a 	.word	0x20000b4a
 8004c1c:	20000b4b 	.word	0x20000b4b
 8004c20:	20000b4c 	.word	0x20000b4c
 8004c24:	20000b4d 	.word	0x20000b4d
 8004c28:	20000b4e 	.word	0x20000b4e
	    kapi1AcSure=5;
 8004c2c:	4b4a      	ldr	r3, [pc, #296]	; (8004d58 <eepromKontrol+0x46c>)
 8004c2e:	2205      	movs	r2, #5
 8004c30:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8004c32:	4b4a      	ldr	r3, [pc, #296]	; (8004d5c <eepromKontrol+0x470>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d902      	bls.n	8004c40 <eepromKontrol+0x354>
	    kapi2Tip=1;
 8004c3a:	4b48      	ldr	r3, [pc, #288]	; (8004d5c <eepromKontrol+0x470>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8004c40:	4b47      	ldr	r3, [pc, #284]	; (8004d60 <eepromKontrol+0x474>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	2b05      	cmp	r3, #5
 8004c46:	d902      	bls.n	8004c4e <eepromKontrol+0x362>
	    kapi2AcSure=5;
 8004c48:	4b45      	ldr	r3, [pc, #276]	; (8004d60 <eepromKontrol+0x474>)
 8004c4a:	2205      	movs	r2, #5
 8004c4c:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8004c4e:	4b45      	ldr	r3, [pc, #276]	; (8004d64 <eepromKontrol+0x478>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d902      	bls.n	8004c5c <eepromKontrol+0x370>
	    kapitablaTip=1;
 8004c56:	4b43      	ldr	r3, [pc, #268]	; (8004d64 <eepromKontrol+0x478>)
 8004c58:	2201      	movs	r2, #1
 8004c5a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8004c5c:	4b42      	ldr	r3, [pc, #264]	; (8004d68 <eepromKontrol+0x47c>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d902      	bls.n	8004c6a <eepromKontrol+0x37e>
	    kapiTablaAcKonum=2;
 8004c64:	4b40      	ldr	r3, [pc, #256]	; (8004d68 <eepromKontrol+0x47c>)
 8004c66:	2202      	movs	r2, #2
 8004c68:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8004c6a:	4b40      	ldr	r3, [pc, #256]	; (8004d6c <eepromKontrol+0x480>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	2b05      	cmp	r3, #5
 8004c70:	d902      	bls.n	8004c78 <eepromKontrol+0x38c>
	    kapiTablaAcSure=5;
 8004c72:	4b3e      	ldr	r3, [pc, #248]	; (8004d6c <eepromKontrol+0x480>)
 8004c74:	2205      	movs	r2, #5
 8004c76:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8004c78:	4b3d      	ldr	r3, [pc, #244]	; (8004d70 <eepromKontrol+0x484>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d902      	bls.n	8004c86 <eepromKontrol+0x39a>
	    yukariYavasLimit=0;
 8004c80:	4b3b      	ldr	r3, [pc, #236]	; (8004d70 <eepromKontrol+0x484>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8004c86:	4b3b      	ldr	r3, [pc, #236]	; (8004d74 <eepromKontrol+0x488>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d902      	bls.n	8004c94 <eepromKontrol+0x3a8>
	    devirmeYuruyusSecim=0;
 8004c8e:	4b39      	ldr	r3, [pc, #228]	; (8004d74 <eepromKontrol+0x488>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8004c94:	4b38      	ldr	r3, [pc, #224]	; (8004d78 <eepromKontrol+0x48c>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d902      	bls.n	8004ca2 <eepromKontrol+0x3b6>
	    devirmeYukariIleriLimit=1;
 8004c9c:	4b36      	ldr	r3, [pc, #216]	; (8004d78 <eepromKontrol+0x48c>)
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8004ca2:	4b36      	ldr	r3, [pc, #216]	; (8004d7c <eepromKontrol+0x490>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d902      	bls.n	8004cb0 <eepromKontrol+0x3c4>
	    devirmeAsagiGeriLimit=1;
 8004caa:	4b34      	ldr	r3, [pc, #208]	; (8004d7c <eepromKontrol+0x490>)
 8004cac:	2201      	movs	r2, #1
 8004cae:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8004cb0:	4b33      	ldr	r3, [pc, #204]	; (8004d80 <eepromKontrol+0x494>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d902      	bls.n	8004cbe <eepromKontrol+0x3d2>
	    devirmeSilindirTipi=0;
 8004cb8:	4b31      	ldr	r3, [pc, #196]	; (8004d80 <eepromKontrol+0x494>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8004cbe:	4b31      	ldr	r3, [pc, #196]	; (8004d84 <eepromKontrol+0x498>)
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d902      	bls.n	8004ccc <eepromKontrol+0x3e0>
	    platformSilindirTipi=0;
 8004cc6:	4b2f      	ldr	r3, [pc, #188]	; (8004d84 <eepromKontrol+0x498>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8004ccc:	4b2e      	ldr	r3, [pc, #184]	; (8004d88 <eepromKontrol+0x49c>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b05      	cmp	r3, #5
 8004cd2:	d902      	bls.n	8004cda <eepromKontrol+0x3ee>
	    yukariValfTmr=0;
 8004cd4:	4b2c      	ldr	r3, [pc, #176]	; (8004d88 <eepromKontrol+0x49c>)
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8004cda:	4b2c      	ldr	r3, [pc, #176]	; (8004d8c <eepromKontrol+0x4a0>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b05      	cmp	r3, #5
 8004ce0:	d902      	bls.n	8004ce8 <eepromKontrol+0x3fc>
	    asagiValfTmr=0;
 8004ce2:	4b2a      	ldr	r3, [pc, #168]	; (8004d8c <eepromKontrol+0x4a0>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8004ce8:	4b29      	ldr	r3, [pc, #164]	; (8004d90 <eepromKontrol+0x4a4>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b05      	cmp	r3, #5
 8004cee:	d902      	bls.n	8004cf6 <eepromKontrol+0x40a>
	    devirmeYukariIleriTmr=0;
 8004cf0:	4b27      	ldr	r3, [pc, #156]	; (8004d90 <eepromKontrol+0x4a4>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8004cf6:	4b27      	ldr	r3, [pc, #156]	; (8004d94 <eepromKontrol+0x4a8>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b05      	cmp	r3, #5
 8004cfc:	d902      	bls.n	8004d04 <eepromKontrol+0x418>
	    devirmeAsagiGeriTmr=0;
 8004cfe:	4b25      	ldr	r3, [pc, #148]	; (8004d94 <eepromKontrol+0x4a8>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8004d04:	4b24      	ldr	r3, [pc, #144]	; (8004d98 <eepromKontrol+0x4ac>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2bb4      	cmp	r3, #180	; 0xb4
 8004d0a:	d902      	bls.n	8004d12 <eepromKontrol+0x426>
	    makineCalismaTmr=60;
 8004d0c:	4b22      	ldr	r3, [pc, #136]	; (8004d98 <eepromKontrol+0x4ac>)
 8004d0e:	223c      	movs	r2, #60	; 0x3c
 8004d10:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8004d12:	4b22      	ldr	r3, [pc, #136]	; (8004d9c <eepromKontrol+0x4b0>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d902      	bls.n	8004d20 <eepromKontrol+0x434>
	    buzzer=0;
 8004d1a:	4b20      	ldr	r3, [pc, #128]	; (8004d9c <eepromKontrol+0x4b0>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8004d20:	4b1f      	ldr	r3, [pc, #124]	; (8004da0 <eepromKontrol+0x4b4>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d902      	bls.n	8004d2e <eepromKontrol+0x442>
	    demoMode=0;
 8004d28:	4b1d      	ldr	r3, [pc, #116]	; (8004da0 <eepromKontrol+0x4b4>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8004d2e:	4b1d      	ldr	r3, [pc, #116]	; (8004da4 <eepromKontrol+0x4b8>)
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d902      	bls.n	8004d3c <eepromKontrol+0x450>
	    calismaSayModu=0;
 8004d36:	4b1b      	ldr	r3, [pc, #108]	; (8004da4 <eepromKontrol+0x4b8>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8004d3c:	4b1a      	ldr	r3, [pc, #104]	; (8004da8 <eepromKontrol+0x4bc>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d902      	bls.n	8004d4a <eepromKontrol+0x45e>
	    dilSecim=0;
 8004d44:	4b18      	ldr	r3, [pc, #96]	; (8004da8 <eepromKontrol+0x4bc>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8004d4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004d4e:	f002 ff4f 	bl	8007bf0 <HAL_Delay>
}
 8004d52:	bf00      	nop
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	20000b3d 	.word	0x20000b3d
 8004d5c:	20000b2e 	.word	0x20000b2e
 8004d60:	20000b3e 	.word	0x20000b3e
 8004d64:	20000b2f 	.word	0x20000b2f
 8004d68:	20000b31 	.word	0x20000b31
 8004d6c:	20000b3f 	.word	0x20000b3f
 8004d70:	20000b32 	.word	0x20000b32
 8004d74:	20000b33 	.word	0x20000b33
 8004d78:	20000b34 	.word	0x20000b34
 8004d7c:	20000b35 	.word	0x20000b35
 8004d80:	20000b36 	.word	0x20000b36
 8004d84:	20000b37 	.word	0x20000b37
 8004d88:	20000b38 	.word	0x20000b38
 8004d8c:	20000b39 	.word	0x20000b39
 8004d90:	20000b3a 	.word	0x20000b3a
 8004d94:	20000b3b 	.word	0x20000b3b
 8004d98:	20000b3c 	.word	0x20000b3c
 8004d9c:	20000b40 	.word	0x20000b40
 8004da0:	20000b42 	.word	0x20000b42
 8004da4:	20000b43 	.word	0x20000b43
 8004da8:	20000b44 	.word	0x20000b44

08004dac <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8004dac:	b590      	push	{r4, r7, lr}
 8004dae:	b089      	sub	sp, #36	; 0x24
 8004db0:	af04      	add	r7, sp, #16
 8004db2:	4603      	mov	r3, r0
 8004db4:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8004db6:	4b25      	ldr	r3, [pc, #148]	; (8004e4c <hata2EEPROM+0xa0>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	1e5a      	subs	r2, r3, #1
 8004dbc:	4b24      	ldr	r3, [pc, #144]	; (8004e50 <hata2EEPROM+0xa4>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	4a24      	ldr	r2, [pc, #144]	; (8004e54 <hata2EEPROM+0xa8>)
 8004dc4:	5cd3      	ldrb	r3, [r2, r3]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8004dca:	f000 f847 	bl	8004e5c <eepromDataFillWithEmpty>
		goto veriEkleme;
 8004dce:	e000      	b.n	8004dd2 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8004dd0:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	e012      	b.n	8004dfe <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8004dd8:	4b1d      	ldr	r3, [pc, #116]	; (8004e50 <hata2EEPROM+0xa4>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4413      	add	r3, r2
 8004de0:	4a1c      	ldr	r2, [pc, #112]	; (8004e54 <hata2EEPROM+0xa8>)
 8004de2:	5cd3      	ldrb	r3, [r2, r3]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d107      	bne.n	8004df8 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8004de8:	4b19      	ldr	r3, [pc, #100]	; (8004e50 <hata2EEPROM+0xa4>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	4918      	ldr	r1, [pc, #96]	; (8004e54 <hata2EEPROM+0xa8>)
 8004df2:	79fa      	ldrb	r2, [r7, #7]
 8004df4:	54ca      	strb	r2, [r1, r3]
					break;
 8004df6:	e007      	b.n	8004e08 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	60fb      	str	r3, [r7, #12]
 8004dfe:	4b13      	ldr	r3, [pc, #76]	; (8004e4c <hata2EEPROM+0xa0>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	dbe7      	blt.n	8004dd8 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 8004e08:	4b11      	ldr	r3, [pc, #68]	; (8004e50 <hata2EEPROM+0xa4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	b299      	uxth	r1, r3
 8004e0e:	4b0f      	ldr	r3, [pc, #60]	; (8004e4c <hata2EEPROM+0xa0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	b298      	uxth	r0, r3
 8004e14:	4b0e      	ldr	r3, [pc, #56]	; (8004e50 <hata2EEPROM+0xa4>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a0e      	ldr	r2, [pc, #56]	; (8004e54 <hata2EEPROM+0xa8>)
 8004e1a:	4413      	add	r3, r2
 8004e1c:	4a0b      	ldr	r2, [pc, #44]	; (8004e4c <hata2EEPROM+0xa0>)
 8004e1e:	6812      	ldr	r2, [r2, #0]
 8004e20:	b292      	uxth	r2, r2
 8004e22:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8004e26:	9402      	str	r4, [sp, #8]
 8004e28:	9201      	str	r2, [sp, #4]
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	460a      	mov	r2, r1
 8004e30:	21a0      	movs	r1, #160	; 0xa0
 8004e32:	4809      	ldr	r0, [pc, #36]	; (8004e58 <hata2EEPROM+0xac>)
 8004e34:	f003 ff66 	bl	8008d04 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8004e38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004e3c:	f002 fed8 	bl	8007bf0 <HAL_Delay>
	eepromKontrol();
 8004e40:	f7ff fd54 	bl	80048ec <eepromKontrol>
}
 8004e44:	bf00      	nop
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd90      	pop	{r4, r7, pc}
 8004e4c:	20000938 	.word	0x20000938
 8004e50:	2000093c 	.word	0x2000093c
 8004e54:	20000ab8 	.word	0x20000ab8
 8004e58:	20000ce0 	.word	0x20000ce0

08004e5c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8004e62:	2300      	movs	r3, #0
 8004e64:	607b      	str	r3, [r7, #4]
 8004e66:	e009      	b.n	8004e7c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8004e68:	4a0a      	ldr	r2, [pc, #40]	; (8004e94 <eepromDataFillWithEmpty+0x38>)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e70:	4a09      	ldr	r2, [pc, #36]	; (8004e98 <eepromDataFillWithEmpty+0x3c>)
 8004e72:	2100      	movs	r1, #0
 8004e74:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	607b      	str	r3, [r7, #4]
 8004e7c:	4b07      	ldr	r3, [pc, #28]	; (8004e9c <eepromDataFillWithEmpty+0x40>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	dbf0      	blt.n	8004e68 <eepromDataFillWithEmpty+0xc>
	}
}
 8004e86:	bf00      	nop
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bc80      	pop	{r7}
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	20000910 	.word	0x20000910
 8004e98:	20000ab8 	.word	0x20000ab8
 8004e9c:	20000938 	.word	0x20000938

08004ea0 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
	timer1=millis;
 8004ea4:	4b47      	ldr	r3, [pc, #284]	; (8004fc4 <bekle+0x124>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a47      	ldr	r2, [pc, #284]	; (8004fc8 <bekle+0x128>)
 8004eaa:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004eac:	e002      	b.n	8004eb4 <bekle+0x14>
    	butonKontrol = 1;
 8004eae:	4b47      	ldr	r3, [pc, #284]	; (8004fcc <bekle+0x12c>)
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	4846      	ldr	r0, [pc, #280]	; (8004fd0 <bekle+0x130>)
 8004eb8:	f003 fc6a 	bl	8008790 <HAL_GPIO_ReadPin>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d109      	bne.n	8004ed6 <bekle+0x36>
 8004ec2:	4b40      	ldr	r3, [pc, #256]	; (8004fc4 <bekle+0x124>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	4b40      	ldr	r3, [pc, #256]	; (8004fc8 <bekle+0x128>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d0ef      	beq.n	8004eae <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ece:	e002      	b.n	8004ed6 <bekle+0x36>
    	butonKontrol = 1;
 8004ed0:	4b3e      	ldr	r3, [pc, #248]	; (8004fcc <bekle+0x12c>)
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ed6:	2108      	movs	r1, #8
 8004ed8:	483e      	ldr	r0, [pc, #248]	; (8004fd4 <bekle+0x134>)
 8004eda:	f003 fc59 	bl	8008790 <HAL_GPIO_ReadPin>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d109      	bne.n	8004ef8 <bekle+0x58>
 8004ee4:	4b37      	ldr	r3, [pc, #220]	; (8004fc4 <bekle+0x124>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	4b37      	ldr	r3, [pc, #220]	; (8004fc8 <bekle+0x128>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d0ef      	beq.n	8004ed0 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ef0:	e002      	b.n	8004ef8 <bekle+0x58>
    	butonKontrol = 1;
 8004ef2:	4b36      	ldr	r3, [pc, #216]	; (8004fcc <bekle+0x12c>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004ef8:	2102      	movs	r1, #2
 8004efa:	4835      	ldr	r0, [pc, #212]	; (8004fd0 <bekle+0x130>)
 8004efc:	f003 fc48 	bl	8008790 <HAL_GPIO_ReadPin>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d109      	bne.n	8004f1a <bekle+0x7a>
 8004f06:	4b2f      	ldr	r3, [pc, #188]	; (8004fc4 <bekle+0x124>)
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	4b2f      	ldr	r3, [pc, #188]	; (8004fc8 <bekle+0x128>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d0ef      	beq.n	8004ef2 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004f12:	e002      	b.n	8004f1a <bekle+0x7a>
    	butonKontrol = 1;
 8004f14:	4b2d      	ldr	r3, [pc, #180]	; (8004fcc <bekle+0x12c>)
 8004f16:	2201      	movs	r2, #1
 8004f18:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004f1a:	2104      	movs	r1, #4
 8004f1c:	482c      	ldr	r0, [pc, #176]	; (8004fd0 <bekle+0x130>)
 8004f1e:	f003 fc37 	bl	8008790 <HAL_GPIO_ReadPin>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d109      	bne.n	8004f3c <bekle+0x9c>
 8004f28:	4b26      	ldr	r3, [pc, #152]	; (8004fc4 <bekle+0x124>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	4b26      	ldr	r3, [pc, #152]	; (8004fc8 <bekle+0x128>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d0ef      	beq.n	8004f14 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004f34:	e002      	b.n	8004f3c <bekle+0x9c>
    	butonKontrol = 1;
 8004f36:	4b25      	ldr	r3, [pc, #148]	; (8004fcc <bekle+0x12c>)
 8004f38:	2201      	movs	r2, #1
 8004f3a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004f3c:	2108      	movs	r1, #8
 8004f3e:	4824      	ldr	r0, [pc, #144]	; (8004fd0 <bekle+0x130>)
 8004f40:	f003 fc26 	bl	8008790 <HAL_GPIO_ReadPin>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d109      	bne.n	8004f5e <bekle+0xbe>
 8004f4a:	4b1e      	ldr	r3, [pc, #120]	; (8004fc4 <bekle+0x124>)
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	4b1e      	ldr	r3, [pc, #120]	; (8004fc8 <bekle+0x128>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d0ef      	beq.n	8004f36 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004f56:	e002      	b.n	8004f5e <bekle+0xbe>
    	butonKontrol = 1;
 8004f58:	4b1c      	ldr	r3, [pc, #112]	; (8004fcc <bekle+0x12c>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004f5e:	2180      	movs	r1, #128	; 0x80
 8004f60:	481c      	ldr	r0, [pc, #112]	; (8004fd4 <bekle+0x134>)
 8004f62:	f003 fc15 	bl	8008790 <HAL_GPIO_ReadPin>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d109      	bne.n	8004f80 <bekle+0xe0>
 8004f6c:	4b15      	ldr	r3, [pc, #84]	; (8004fc4 <bekle+0x124>)
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	4b15      	ldr	r3, [pc, #84]	; (8004fc8 <bekle+0x128>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d0ef      	beq.n	8004f58 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004f78:	e002      	b.n	8004f80 <bekle+0xe0>
    	butonKontrol = 1;
 8004f7a:	4b14      	ldr	r3, [pc, #80]	; (8004fcc <bekle+0x12c>)
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004f80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004f84:	4813      	ldr	r0, [pc, #76]	; (8004fd4 <bekle+0x134>)
 8004f86:	f003 fc03 	bl	8008790 <HAL_GPIO_ReadPin>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d109      	bne.n	8004fa4 <bekle+0x104>
 8004f90:	4b0c      	ldr	r3, [pc, #48]	; (8004fc4 <bekle+0x124>)
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	4b0c      	ldr	r3, [pc, #48]	; (8004fc8 <bekle+0x128>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d0ee      	beq.n	8004f7a <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004f9c:	e002      	b.n	8004fa4 <bekle+0x104>
    	butonKontrol = 1;
 8004f9e:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <bekle+0x12c>)
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004fa4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004fa8:	480a      	ldr	r0, [pc, #40]	; (8004fd4 <bekle+0x134>)
 8004faa:	f003 fbf1 	bl	8008790 <HAL_GPIO_ReadPin>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d105      	bne.n	8004fc0 <bekle+0x120>
 8004fb4:	4b03      	ldr	r3, [pc, #12]	; (8004fc4 <bekle+0x124>)
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	4b03      	ldr	r3, [pc, #12]	; (8004fc8 <bekle+0x128>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d0ee      	beq.n	8004f9e <bekle+0xfe>
    }

}
 8004fc0:	bf00      	nop
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	20000b00 	.word	0x20000b00
 8004fc8:	20000b08 	.word	0x20000b08
 8004fcc:	20000b52 	.word	0x20000b52
 8004fd0:	40010800 	.word	0x40010800
 8004fd4:	40011000 	.word	0x40011000

08004fd8 <i2cTest>:

void i2cTest() {
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8004fde:	463b      	mov	r3, r7
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	605a      	str	r2, [r3, #4]
 8004fe6:	609a      	str	r2, [r3, #8]
 8004fe8:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8004fea:	4b50      	ldr	r3, [pc, #320]	; (800512c <i2cTest+0x154>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	4b4e      	ldr	r3, [pc, #312]	; (800512c <i2cTest+0x154>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0201 	bic.w	r2, r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8004ffa:	484c      	ldr	r0, [pc, #304]	; (800512c <i2cTest+0x154>)
 8004ffc:	f003 fd54 	bl	8008aa8 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005000:	23c0      	movs	r3, #192	; 0xc0
 8005002:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8005004:	2311      	movs	r3, #17
 8005006:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8005008:	2301      	movs	r3, #1
 800500a:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 800500c:	2303      	movs	r3, #3
 800500e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8005010:	463b      	mov	r3, r7
 8005012:	4619      	mov	r1, r3
 8005014:	4846      	ldr	r0, [pc, #280]	; (8005130 <i2cTest+0x158>)
 8005016:	f003 f95b 	bl	80082d0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800501a:	2201      	movs	r2, #1
 800501c:	2140      	movs	r1, #64	; 0x40
 800501e:	4844      	ldr	r0, [pc, #272]	; (8005130 <i2cTest+0x158>)
 8005020:	f003 fbcd 	bl	80087be <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8005024:	2201      	movs	r2, #1
 8005026:	2180      	movs	r1, #128	; 0x80
 8005028:	4841      	ldr	r0, [pc, #260]	; (8005130 <i2cTest+0x158>)
 800502a:	f003 fbc8 	bl	80087be <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 800502e:	200a      	movs	r0, #10
 8005030:	f002 fdde 	bl	8007bf0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8005034:	bf00      	nop
 8005036:	2140      	movs	r1, #64	; 0x40
 8005038:	483d      	ldr	r0, [pc, #244]	; (8005130 <i2cTest+0x158>)
 800503a:	f003 fba9 	bl	8008790 <HAL_GPIO_ReadPin>
 800503e:	4603      	mov	r3, r0
 8005040:	2b01      	cmp	r3, #1
 8005042:	d006      	beq.n	8005052 <i2cTest+0x7a>
 8005044:	2180      	movs	r1, #128	; 0x80
 8005046:	483a      	ldr	r0, [pc, #232]	; (8005130 <i2cTest+0x158>)
 8005048:	f003 fba2 	bl	8008790 <HAL_GPIO_ReadPin>
 800504c:	4603      	mov	r3, r0
 800504e:	2b01      	cmp	r3, #1
 8005050:	d1f1      	bne.n	8005036 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8005052:	2200      	movs	r2, #0
 8005054:	2180      	movs	r1, #128	; 0x80
 8005056:	4836      	ldr	r0, [pc, #216]	; (8005130 <i2cTest+0x158>)
 8005058:	f003 fbb1 	bl	80087be <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 800505c:	200a      	movs	r0, #10
 800505e:	f002 fdc7 	bl	8007bf0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8005062:	bf00      	nop
 8005064:	2180      	movs	r1, #128	; 0x80
 8005066:	4832      	ldr	r0, [pc, #200]	; (8005130 <i2cTest+0x158>)
 8005068:	f003 fb92 	bl	8008790 <HAL_GPIO_ReadPin>
 800506c:	4603      	mov	r3, r0
 800506e:	2b01      	cmp	r3, #1
 8005070:	d0f8      	beq.n	8005064 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8005072:	2200      	movs	r2, #0
 8005074:	2140      	movs	r1, #64	; 0x40
 8005076:	482e      	ldr	r0, [pc, #184]	; (8005130 <i2cTest+0x158>)
 8005078:	f003 fba1 	bl	80087be <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800507c:	200a      	movs	r0, #10
 800507e:	f002 fdb7 	bl	8007bf0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8005082:	bf00      	nop
 8005084:	2140      	movs	r1, #64	; 0x40
 8005086:	482a      	ldr	r0, [pc, #168]	; (8005130 <i2cTest+0x158>)
 8005088:	f003 fb82 	bl	8008790 <HAL_GPIO_ReadPin>
 800508c:	4603      	mov	r3, r0
 800508e:	2b01      	cmp	r3, #1
 8005090:	d0f8      	beq.n	8005084 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8005092:	2201      	movs	r2, #1
 8005094:	2140      	movs	r1, #64	; 0x40
 8005096:	4826      	ldr	r0, [pc, #152]	; (8005130 <i2cTest+0x158>)
 8005098:	f003 fb91 	bl	80087be <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800509c:	200a      	movs	r0, #10
 800509e:	f002 fda7 	bl	8007bf0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 80050a2:	bf00      	nop
 80050a4:	2140      	movs	r1, #64	; 0x40
 80050a6:	4822      	ldr	r0, [pc, #136]	; (8005130 <i2cTest+0x158>)
 80050a8:	f003 fb72 	bl	8008790 <HAL_GPIO_ReadPin>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d1f8      	bne.n	80050a4 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80050b2:	2201      	movs	r2, #1
 80050b4:	2180      	movs	r1, #128	; 0x80
 80050b6:	481e      	ldr	r0, [pc, #120]	; (8005130 <i2cTest+0x158>)
 80050b8:	f003 fb81 	bl	80087be <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80050bc:	200a      	movs	r0, #10
 80050be:	f002 fd97 	bl	8007bf0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80050c2:	bf00      	nop
 80050c4:	2180      	movs	r1, #128	; 0x80
 80050c6:	481a      	ldr	r0, [pc, #104]	; (8005130 <i2cTest+0x158>)
 80050c8:	f003 fb62 	bl	8008790 <HAL_GPIO_ReadPin>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d1f8      	bne.n	80050c4 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80050d2:	23c0      	movs	r3, #192	; 0xc0
 80050d4:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80050d6:	2312      	movs	r3, #18
 80050d8:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80050da:	2301      	movs	r3, #1
 80050dc:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80050de:	2303      	movs	r3, #3
 80050e0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80050e2:	463b      	mov	r3, r7
 80050e4:	4619      	mov	r1, r3
 80050e6:	4812      	ldr	r0, [pc, #72]	; (8005130 <i2cTest+0x158>)
 80050e8:	f003 f8f2 	bl	80082d0 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80050ec:	4b0f      	ldr	r3, [pc, #60]	; (800512c <i2cTest+0x154>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b0e      	ldr	r3, [pc, #56]	; (800512c <i2cTest+0x154>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050fa:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80050fc:	4b0b      	ldr	r3, [pc, #44]	; (800512c <i2cTest+0x154>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	4b0a      	ldr	r3, [pc, #40]	; (800512c <i2cTest+0x154>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800510a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 800510c:	4b07      	ldr	r3, [pc, #28]	; (800512c <i2cTest+0x154>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	4b06      	ldr	r3, [pc, #24]	; (800512c <i2cTest+0x154>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 800511c:	4803      	ldr	r0, [pc, #12]	; (800512c <i2cTest+0x154>)
 800511e:	f003 fb7f 	bl	8008820 <HAL_I2C_Init>
}
 8005122:	bf00      	nop
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000ce0 	.word	0x20000ce0
 8005130:	40010c00 	.word	0x40010c00

08005134 <checkLCDBacklight>:

void checkLCDBacklight() {
 8005134:	b580      	push	{r7, lr}
 8005136:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure) {
 8005138:	4b08      	ldr	r3, [pc, #32]	; (800515c <checkLCDBacklight+0x28>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	4b08      	ldr	r3, [pc, #32]	; (8005160 <checkLCDBacklight+0x2c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	4a08      	ldr	r2, [pc, #32]	; (8005164 <checkLCDBacklight+0x30>)
 8005144:	7812      	ldrb	r2, [r2, #0]
 8005146:	4293      	cmp	r3, r2
 8005148:	d303      	bcc.n	8005152 <checkLCDBacklight+0x1e>
				lcd_backlight(0);
 800514a:	2000      	movs	r0, #0
 800514c:	f7fb faf2 	bl	8000734 <lcd_backlight>
			} else {
				lcd_backlight(1);
			}
}
 8005150:	e002      	b.n	8005158 <checkLCDBacklight+0x24>
				lcd_backlight(1);
 8005152:	2001      	movs	r0, #1
 8005154:	f7fb faee 	bl	8000734 <lcd_backlight>
}
 8005158:	bf00      	nop
 800515a:	bd80      	pop	{r7, pc}
 800515c:	20000b00 	.word	0x20000b00
 8005160:	20000b1c 	.word	0x20000b1c
 8005164:	20000940 	.word	0x20000940

08005168 <checkBasincSalteri>:

void checkBasincSalteri() {
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 800516c:	4b13      	ldr	r3, [pc, #76]	; (80051bc <checkBasincSalteri+0x54>)
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <checkBasincSalteri+0x12>
				basincVar=1;
 8005174:	4b12      	ldr	r3, [pc, #72]	; (80051c0 <checkBasincSalteri+0x58>)
 8005176:	2201      	movs	r2, #1
 8005178:	701a      	strb	r2, [r3, #0]
			}

			if(basincSalteri==1) {
 800517a:	4b10      	ldr	r3, [pc, #64]	; (80051bc <checkBasincSalteri+0x54>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d119      	bne.n	80051b6 <checkBasincSalteri+0x4e>
				if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8005182:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005186:	480f      	ldr	r0, [pc, #60]	; (80051c4 <checkBasincSalteri+0x5c>)
 8005188:	f003 fb02 	bl	8008790 <HAL_GPIO_ReadPin>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10a      	bne.n	80051a8 <checkBasincSalteri+0x40>
					if(millis-timer5>=3) {
 8005192:	4b0d      	ldr	r3, [pc, #52]	; (80051c8 <checkBasincSalteri+0x60>)
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	4b0d      	ldr	r3, [pc, #52]	; (80051cc <checkBasincSalteri+0x64>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d90a      	bls.n	80051b6 <checkBasincSalteri+0x4e>
						basincVar=1;
 80051a0:	4b07      	ldr	r3, [pc, #28]	; (80051c0 <checkBasincSalteri+0x58>)
 80051a2:	2201      	movs	r2, #1
 80051a4:	701a      	strb	r2, [r3, #0]
				} else {
					timer5=millis;
					basincVar=0;
				}
			}
}
 80051a6:	e006      	b.n	80051b6 <checkBasincSalteri+0x4e>
					timer5=millis;
 80051a8:	4b07      	ldr	r3, [pc, #28]	; (80051c8 <checkBasincSalteri+0x60>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a07      	ldr	r2, [pc, #28]	; (80051cc <checkBasincSalteri+0x64>)
 80051ae:	6013      	str	r3, [r2, #0]
					basincVar=0;
 80051b0:	4b03      	ldr	r3, [pc, #12]	; (80051c0 <checkBasincSalteri+0x58>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	701a      	strb	r2, [r3, #0]
}
 80051b6:	bf00      	nop
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20000b2b 	.word	0x20000b2b
 80051c0:	20000b27 	.word	0x20000b27
 80051c4:	40011000 	.word	0x40011000
 80051c8:	20000b00 	.word	0x20000b00
 80051cc:	20000b18 	.word	0x20000b18

080051d0 <checkBasGonder>:

void checkBasGonder() {
 80051d0:	b480      	push	{r7}
 80051d2:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80051d4:	4b1b      	ldr	r3, [pc, #108]	; (8005244 <checkBasGonder+0x74>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d10b      	bne.n	80051f4 <checkBasGonder+0x24>
 80051dc:	4b1a      	ldr	r3, [pc, #104]	; (8005248 <checkBasGonder+0x78>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d007      	beq.n	80051f4 <checkBasGonder+0x24>
 80051e4:	4b19      	ldr	r3, [pc, #100]	; (800524c <checkBasGonder+0x7c>)
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d103      	bne.n	80051f4 <checkBasGonder+0x24>
				basgondercalisyukari=1;
 80051ec:	4b18      	ldr	r3, [pc, #96]	; (8005250 <checkBasGonder+0x80>)
 80051ee:	2201      	movs	r2, #1
 80051f0:	701a      	strb	r2, [r3, #0]
 80051f2:	e009      	b.n	8005208 <checkBasGonder+0x38>
			} else if(yukarimotorcalisiyor==0) {
 80051f4:	4b14      	ldr	r3, [pc, #80]	; (8005248 <checkBasGonder+0x78>)
 80051f6:	781b      	ldrb	r3, [r3, #0]
 80051f8:	f083 0301 	eor.w	r3, r3, #1
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <checkBasGonder+0x38>
				basgondercalisyukari=0;
 8005202:	4b13      	ldr	r3, [pc, #76]	; (8005250 <checkBasGonder+0x80>)
 8005204:	2200      	movs	r2, #0
 8005206:	701a      	strb	r2, [r3, #0]
			}

			if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8005208:	4b0e      	ldr	r3, [pc, #56]	; (8005244 <checkBasGonder+0x74>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d10b      	bne.n	8005228 <checkBasGonder+0x58>
 8005210:	4b10      	ldr	r3, [pc, #64]	; (8005254 <checkBasGonder+0x84>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d007      	beq.n	8005228 <checkBasGonder+0x58>
 8005218:	4b0c      	ldr	r3, [pc, #48]	; (800524c <checkBasGonder+0x7c>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d103      	bne.n	8005228 <checkBasGonder+0x58>
				basgondercalisasagi=1;
 8005220:	4b0d      	ldr	r3, [pc, #52]	; (8005258 <checkBasGonder+0x88>)
 8005222:	2201      	movs	r2, #1
 8005224:	701a      	strb	r2, [r3, #0]
			} else if(asagivalfcalisiyor==0) {
				basgondercalisasagi=0;
			}
}
 8005226:	e009      	b.n	800523c <checkBasGonder+0x6c>
			} else if(asagivalfcalisiyor==0) {
 8005228:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <checkBasGonder+0x84>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	f083 0301 	eor.w	r3, r3, #1
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d002      	beq.n	800523c <checkBasGonder+0x6c>
				basgondercalisasagi=0;
 8005236:	4b08      	ldr	r3, [pc, #32]	; (8005258 <checkBasGonder+0x88>)
 8005238:	2200      	movs	r2, #0
 800523a:	701a      	strb	r2, [r3, #0]
}
 800523c:	bf00      	nop
 800523e:	46bd      	mov	sp, r7
 8005240:	bc80      	pop	{r7}
 8005242:	4770      	bx	lr
 8005244:	20000b25 	.word	0x20000b25
 8005248:	20000b58 	.word	0x20000b58
 800524c:	20000b33 	.word	0x20000b33
 8005250:	20000b5f 	.word	0x20000b5f
 8005254:	20000b5b 	.word	0x20000b5b
 8005258:	20000b60 	.word	0x20000b60

0800525c <checkKapiSecimleri>:

void checkKapiSecimleri() {
 800525c:	b580      	push	{r7, lr}
 800525e:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8005260:	4b24      	ldr	r3, [pc, #144]	; (80052f4 <checkKapiSecimleri+0x98>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d102      	bne.n	800526e <checkKapiSecimleri+0x12>
				kapiSivicVar=1;
 8005268:	4b23      	ldr	r3, [pc, #140]	; (80052f8 <checkKapiSecimleri+0x9c>)
 800526a:	2201      	movs	r2, #1
 800526c:	701a      	strb	r2, [r3, #0]
			}

			if(kapiSecimleri==1) {
 800526e:	4b21      	ldr	r3, [pc, #132]	; (80052f4 <checkKapiSecimleri+0x98>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d10e      	bne.n	8005294 <checkKapiSecimleri+0x38>
				if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005276:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800527a:	4820      	ldr	r0, [pc, #128]	; (80052fc <checkKapiSecimleri+0xa0>)
 800527c:	f003 fa88 	bl	8008790 <HAL_GPIO_ReadPin>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d103      	bne.n	800528e <checkKapiSecimleri+0x32>
					kapiSivicVar=1;
 8005286:	4b1c      	ldr	r3, [pc, #112]	; (80052f8 <checkKapiSecimleri+0x9c>)
 8005288:	2201      	movs	r2, #1
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	e002      	b.n	8005294 <checkKapiSecimleri+0x38>
				} else {
					kapiSivicVar=0;
 800528e:	4b1a      	ldr	r3, [pc, #104]	; (80052f8 <checkKapiSecimleri+0x9c>)
 8005290:	2200      	movs	r2, #0
 8005292:	701a      	strb	r2, [r3, #0]
				}
			}

			if(kapiSecimleri==2){
 8005294:	4b17      	ldr	r3, [pc, #92]	; (80052f4 <checkKapiSecimleri+0x98>)
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	2b02      	cmp	r3, #2
 800529a:	d10e      	bne.n	80052ba <checkKapiSecimleri+0x5e>
				if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 800529c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052a0:	4816      	ldr	r0, [pc, #88]	; (80052fc <checkKapiSecimleri+0xa0>)
 80052a2:	f003 fa75 	bl	8008790 <HAL_GPIO_ReadPin>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d103      	bne.n	80052b4 <checkKapiSecimleri+0x58>
					kapiSivicVar=1;
 80052ac:	4b12      	ldr	r3, [pc, #72]	; (80052f8 <checkKapiSecimleri+0x9c>)
 80052ae:	2201      	movs	r2, #1
 80052b0:	701a      	strb	r2, [r3, #0]
 80052b2:	e002      	b.n	80052ba <checkKapiSecimleri+0x5e>
				} else {
					kapiSivicVar=0;
 80052b4:	4b10      	ldr	r3, [pc, #64]	; (80052f8 <checkKapiSecimleri+0x9c>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	701a      	strb	r2, [r3, #0]
				}
			}

			if(kapiSecimleri==3) {
 80052ba:	4b0e      	ldr	r3, [pc, #56]	; (80052f4 <checkKapiSecimleri+0x98>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	2b03      	cmp	r3, #3
 80052c0:	d116      	bne.n	80052f0 <checkKapiSecimleri+0x94>
				if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80052c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052c6:	480d      	ldr	r0, [pc, #52]	; (80052fc <checkKapiSecimleri+0xa0>)
 80052c8:	f003 fa62 	bl	8008790 <HAL_GPIO_ReadPin>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10b      	bne.n	80052ea <checkKapiSecimleri+0x8e>
 80052d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80052d6:	4809      	ldr	r0, [pc, #36]	; (80052fc <checkKapiSecimleri+0xa0>)
 80052d8:	f003 fa5a 	bl	8008790 <HAL_GPIO_ReadPin>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d103      	bne.n	80052ea <checkKapiSecimleri+0x8e>
					kapiSivicVar=1;
 80052e2:	4b05      	ldr	r3, [pc, #20]	; (80052f8 <checkKapiSecimleri+0x9c>)
 80052e4:	2201      	movs	r2, #1
 80052e6:	701a      	strb	r2, [r3, #0]
				} else {
					kapiSivicVar=0;
				}
			}
}
 80052e8:	e002      	b.n	80052f0 <checkKapiSecimleri+0x94>
					kapiSivicVar=0;
 80052ea:	4b03      	ldr	r3, [pc, #12]	; (80052f8 <checkKapiSecimleri+0x9c>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]
}
 80052f0:	bf00      	nop
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	20000b2c 	.word	0x20000b2c
 80052f8:	20000b76 	.word	0x20000b76
 80052fc:	40010800 	.word	0x40010800

08005300 <checkAktifCalisma>:

void checkAktifCalisma() {
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8005304:	4b62      	ldr	r3, [pc, #392]	; (8005490 <checkAktifCalisma+0x190>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	f041 8332 	bne.w	8006972 <checkAktifCalisma+0x1672>
 800530e:	4b61      	ldr	r3, [pc, #388]	; (8005494 <checkAktifCalisma+0x194>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	f041 832d 	bne.w	8006972 <checkAktifCalisma+0x1672>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8005318:	4b5f      	ldr	r3, [pc, #380]	; (8005498 <checkAktifCalisma+0x198>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d11a      	bne.n	8005356 <checkAktifCalisma+0x56>
 8005320:	4b5e      	ldr	r3, [pc, #376]	; (800549c <checkAktifCalisma+0x19c>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d116      	bne.n	8005356 <checkAktifCalisma+0x56>
 8005328:	4b5d      	ldr	r3, [pc, #372]	; (80054a0 <checkAktifCalisma+0x1a0>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00a      	beq.n	8005346 <checkAktifCalisma+0x46>
 8005330:	4b5c      	ldr	r3, [pc, #368]	; (80054a4 <checkAktifCalisma+0x1a4>)
 8005332:	781b      	ldrb	r3, [r3, #0]
 8005334:	f083 0301 	eor.w	r3, r3, #1
 8005338:	b2db      	uxtb	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d003      	beq.n	8005346 <checkAktifCalisma+0x46>
 800533e:	4b5a      	ldr	r3, [pc, #360]	; (80054a8 <checkAktifCalisma+0x1a8>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d007      	beq.n	8005356 <checkAktifCalisma+0x56>
 8005346:	4b59      	ldr	r3, [pc, #356]	; (80054ac <checkAktifCalisma+0x1ac>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d018      	beq.n	8005380 <checkAktifCalisma+0x80>
 800534e:	4b58      	ldr	r3, [pc, #352]	; (80054b0 <checkAktifCalisma+0x1b0>)
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d114      	bne.n	8005380 <checkAktifCalisma+0x80>
 8005356:	4b57      	ldr	r3, [pc, #348]	; (80054b4 <checkAktifCalisma+0x1b4>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d010      	beq.n	8005380 <checkAktifCalisma+0x80>
 800535e:	4b56      	ldr	r3, [pc, #344]	; (80054b8 <checkAktifCalisma+0x1b8>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00c      	beq.n	8005380 <checkAktifCalisma+0x80>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005366:	2201      	movs	r2, #1
 8005368:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800536c:	4853      	ldr	r0, [pc, #332]	; (80054bc <checkAktifCalisma+0x1bc>)
 800536e:	f003 fa26 	bl	80087be <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8005372:	4b53      	ldr	r3, [pc, #332]	; (80054c0 <checkAktifCalisma+0x1c0>)
 8005374:	2201      	movs	r2, #1
 8005376:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8005378:	4b52      	ldr	r3, [pc, #328]	; (80054c4 <checkAktifCalisma+0x1c4>)
 800537a:	2201      	movs	r2, #1
 800537c:	701a      	strb	r2, [r3, #0]
 800537e:	e008      	b.n	8005392 <checkAktifCalisma+0x92>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005380:	2200      	movs	r2, #0
 8005382:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005386:	484d      	ldr	r0, [pc, #308]	; (80054bc <checkAktifCalisma+0x1bc>)
 8005388:	f003 fa19 	bl	80087be <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 800538c:	4b4c      	ldr	r3, [pc, #304]	; (80054c0 <checkAktifCalisma+0x1c0>)
 800538e:	2200      	movs	r2, #0
 8005390:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && (stopVar) && (kapiSivicVar)																			/********* motor calısması ***********/
 8005392:	4b40      	ldr	r3, [pc, #256]	; (8005494 <checkAktifCalisma+0x194>)
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d160      	bne.n	800545c <checkAktifCalisma+0x15c>
 800539a:	4b46      	ldr	r3, [pc, #280]	; (80054b4 <checkAktifCalisma+0x1b4>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d05c      	beq.n	800545c <checkAktifCalisma+0x15c>
 80053a2:	4b45      	ldr	r3, [pc, #276]	; (80054b8 <checkAktifCalisma+0x1b8>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d058      	beq.n	800545c <checkAktifCalisma+0x15c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80053aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80053ae:	4843      	ldr	r0, [pc, #268]	; (80054bc <checkAktifCalisma+0x1bc>)
 80053b0:	f003 f9ee 	bl	8008790 <HAL_GPIO_ReadPin>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <checkAktifCalisma+0xc2>
 80053ba:	4b43      	ldr	r3, [pc, #268]	; (80054c8 <checkAktifCalisma+0x1c8>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d04c      	beq.n	800545c <checkAktifCalisma+0x15c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80053c2:	2102      	movs	r1, #2
 80053c4:	4841      	ldr	r0, [pc, #260]	; (80054cc <checkAktifCalisma+0x1cc>)
 80053c6:	f003 f9e3 	bl	8008790 <HAL_GPIO_ReadPin>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d145      	bne.n	800545c <checkAktifCalisma+0x15c>
							&& (basincVar)
 80053d0:	4b3f      	ldr	r3, [pc, #252]	; (80054d0 <checkAktifCalisma+0x1d0>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d041      	beq.n	800545c <checkAktifCalisma+0x15c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80053d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80053dc:	4837      	ldr	r0, [pc, #220]	; (80054bc <checkAktifCalisma+0x1bc>)
 80053de:	f003 f9d7 	bl	8008790 <HAL_GPIO_ReadPin>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d10e      	bne.n	8005406 <checkAktifCalisma+0x106>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80053e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053ec:	4833      	ldr	r0, [pc, #204]	; (80054bc <checkAktifCalisma+0x1bc>)
 80053ee:	f003 f9cf 	bl	8008790 <HAL_GPIO_ReadPin>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d106      	bne.n	8005406 <checkAktifCalisma+0x106>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80053f8:	2140      	movs	r1, #64	; 0x40
 80053fa:	4834      	ldr	r0, [pc, #208]	; (80054cc <checkAktifCalisma+0x1cc>)
 80053fc:	f003 f9c8 	bl	8008790 <HAL_GPIO_ReadPin>
 8005400:	4603      	mov	r3, r0
 8005402:	2b01      	cmp	r3, #1
 8005404:	d003      	beq.n	800540e <checkAktifCalisma+0x10e>
 8005406:	4b24      	ldr	r3, [pc, #144]	; (8005498 <checkAktifCalisma+0x198>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d026      	beq.n	800545c <checkAktifCalisma+0x15c>
							&& (asagivalfcalisiyor==0)
 800540e:	4b24      	ldr	r3, [pc, #144]	; (80054a0 <checkAktifCalisma+0x1a0>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	f083 0301 	eor.w	r3, r3, #1
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b00      	cmp	r3, #0
 800541a:	d01f      	beq.n	800545c <checkAktifCalisma+0x15c>
							&& (devmotoryukaricalisiyor==0)
 800541c:	4b1f      	ldr	r3, [pc, #124]	; (800549c <checkAktifCalisma+0x19c>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	f083 0301 	eor.w	r3, r3, #1
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d018      	beq.n	800545c <checkAktifCalisma+0x15c>
							&& (devmotorasagicalisiyor==0)
 800542a:	4b20      	ldr	r3, [pc, #128]	; (80054ac <checkAktifCalisma+0x1ac>)
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	f083 0301 	eor.w	r3, r3, #1
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	d011      	beq.n	800545c <checkAktifCalisma+0x15c>
							&&(devyukarivalfcalisiyor==0)
 8005438:	4b26      	ldr	r3, [pc, #152]	; (80054d4 <checkAktifCalisma+0x1d4>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	f083 0301 	eor.w	r3, r3, #1
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00a      	beq.n	800545c <checkAktifCalisma+0x15c>
							&&(devasagivalfcalisiyor==0)) {
 8005446:	4b24      	ldr	r3, [pc, #144]	; (80054d8 <checkAktifCalisma+0x1d8>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	f083 0301 	eor.w	r3, r3, #1
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <checkAktifCalisma+0x15c>
					yukarimotorcalisiyor=1;
 8005454:	4b10      	ldr	r3, [pc, #64]	; (8005498 <checkAktifCalisma+0x198>)
 8005456:	2201      	movs	r2, #1
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	e002      	b.n	8005462 <checkAktifCalisma+0x162>
				} else {
					yukarimotorcalisiyor=0;
 800545c:	4b0e      	ldr	r3, [pc, #56]	; (8005498 <checkAktifCalisma+0x198>)
 800545e:	2200      	movs	r2, #0
 8005460:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8005462:	4b0d      	ldr	r3, [pc, #52]	; (8005498 <checkAktifCalisma+0x198>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d03a      	beq.n	80054e0 <checkAktifCalisma+0x1e0>
 800546a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800546e:	4817      	ldr	r0, [pc, #92]	; (80054cc <checkAktifCalisma+0x1cc>)
 8005470:	f003 f98e 	bl	8008790 <HAL_GPIO_ReadPin>
 8005474:	4603      	mov	r3, r0
 8005476:	2b01      	cmp	r3, #1
 8005478:	d132      	bne.n	80054e0 <checkAktifCalisma+0x1e0>
 800547a:	4b18      	ldr	r3, [pc, #96]	; (80054dc <checkAktifCalisma+0x1dc>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d02e      	beq.n	80054e0 <checkAktifCalisma+0x1e0>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005482:	2201      	movs	r2, #1
 8005484:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005488:	480c      	ldr	r0, [pc, #48]	; (80054bc <checkAktifCalisma+0x1bc>)
 800548a:	f003 f998 	bl	80087be <HAL_GPIO_WritePin>
 800548e:	e02d      	b.n	80054ec <checkAktifCalisma+0x1ec>
 8005490:	20000b42 	.word	0x20000b42
 8005494:	20000b41 	.word	0x20000b41
 8005498:	20000b58 	.word	0x20000b58
 800549c:	20000b59 	.word	0x20000b59
 80054a0:	20000b5b 	.word	0x20000b5b
 80054a4:	20000b53 	.word	0x20000b53
 80054a8:	20000b37 	.word	0x20000b37
 80054ac:	20000b5a 	.word	0x20000b5a
 80054b0:	20000b36 	.word	0x20000b36
 80054b4:	20000b75 	.word	0x20000b75
 80054b8:	20000b76 	.word	0x20000b76
 80054bc:	40010c00 	.word	0x40010c00
 80054c0:	20000b77 	.word	0x20000b77
 80054c4:	20000b62 	.word	0x20000b62
 80054c8:	20000b5f 	.word	0x20000b5f
 80054cc:	40011000 	.word	0x40011000
 80054d0:	20000b27 	.word	0x20000b27
 80054d4:	20000b5d 	.word	0x20000b5d
 80054d8:	20000b5e 	.word	0x20000b5e
 80054dc:	20000b32 	.word	0x20000b32
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80054e0:	2200      	movs	r2, #0
 80054e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80054e6:	4860      	ldr	r0, [pc, #384]	; (8005668 <checkAktifCalisma+0x368>)
 80054e8:	f003 f969 	bl	80087be <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80054ec:	4b5f      	ldr	r3, [pc, #380]	; (800566c <checkAktifCalisma+0x36c>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d013      	beq.n	800551c <checkAktifCalisma+0x21c>
 80054f4:	4b5e      	ldr	r3, [pc, #376]	; (8005670 <checkAktifCalisma+0x370>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d007      	beq.n	800550c <checkAktifCalisma+0x20c>
 80054fc:	4b5c      	ldr	r3, [pc, #368]	; (8005670 <checkAktifCalisma+0x370>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	2b02      	cmp	r3, #2
 8005502:	d003      	beq.n	800550c <checkAktifCalisma+0x20c>
 8005504:	4b5b      	ldr	r3, [pc, #364]	; (8005674 <checkAktifCalisma+0x374>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d107      	bne.n	800551c <checkAktifCalisma+0x21c>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800550c:	2201      	movs	r2, #1
 800550e:	2104      	movs	r1, #4
 8005510:	4855      	ldr	r0, [pc, #340]	; (8005668 <checkAktifCalisma+0x368>)
 8005512:	f003 f954 	bl	80087be <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8005516:	4b58      	ldr	r3, [pc, #352]	; (8005678 <checkAktifCalisma+0x378>)
 8005518:	2201      	movs	r2, #1
 800551a:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 800551c:	4b56      	ldr	r3, [pc, #344]	; (8005678 <checkAktifCalisma+0x378>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d02f      	beq.n	8005584 <checkAktifCalisma+0x284>
 8005524:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005528:	484f      	ldr	r0, [pc, #316]	; (8005668 <checkAktifCalisma+0x368>)
 800552a:	f003 f931 	bl	8008790 <HAL_GPIO_ReadPin>
 800552e:	4603      	mov	r3, r0
 8005530:	2b01      	cmp	r3, #1
 8005532:	d106      	bne.n	8005542 <checkAktifCalisma+0x242>
 8005534:	4b51      	ldr	r3, [pc, #324]	; (800567c <checkAktifCalisma+0x37c>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	f083 0301 	eor.w	r3, r3, #1
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	d106      	bne.n	8005550 <checkAktifCalisma+0x250>
 8005542:	2102      	movs	r1, #2
 8005544:	484e      	ldr	r0, [pc, #312]	; (8005680 <checkAktifCalisma+0x380>)
 8005546:	f003 f923 	bl	8008790 <HAL_GPIO_ReadPin>
 800554a:	4603      	mov	r3, r0
 800554c:	2b01      	cmp	r3, #1
 800554e:	d119      	bne.n	8005584 <checkAktifCalisma+0x284>
 8005550:	4b4c      	ldr	r3, [pc, #304]	; (8005684 <checkAktifCalisma+0x384>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d015      	beq.n	8005584 <checkAktifCalisma+0x284>
 8005558:	4b4b      	ldr	r3, [pc, #300]	; (8005688 <checkAktifCalisma+0x388>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d011      	beq.n	8005584 <checkAktifCalisma+0x284>
 8005560:	4b4a      	ldr	r3, [pc, #296]	; (800568c <checkAktifCalisma+0x38c>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00d      	beq.n	8005584 <checkAktifCalisma+0x284>
 8005568:	4b49      	ldr	r3, [pc, #292]	; (8005690 <checkAktifCalisma+0x390>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	f083 0301 	eor.w	r3, r3, #1
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d006      	beq.n	8005584 <checkAktifCalisma+0x284>
					timer2=millis;
 8005576:	4b47      	ldr	r3, [pc, #284]	; (8005694 <checkAktifCalisma+0x394>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a47      	ldr	r2, [pc, #284]	; (8005698 <checkAktifCalisma+0x398>)
 800557c:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 800557e:	4b44      	ldr	r3, [pc, #272]	; (8005690 <checkAktifCalisma+0x390>)
 8005580:	2201      	movs	r2, #1
 8005582:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005584:	4b43      	ldr	r3, [pc, #268]	; (8005694 <checkAktifCalisma+0x394>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	4b43      	ldr	r3, [pc, #268]	; (8005698 <checkAktifCalisma+0x398>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	4a43      	ldr	r2, [pc, #268]	; (800569c <checkAktifCalisma+0x39c>)
 8005590:	7812      	ldrb	r2, [r2, #0]
 8005592:	4293      	cmp	r3, r2
 8005594:	d303      	bcc.n	800559e <checkAktifCalisma+0x29e>
 8005596:	4b3e      	ldr	r3, [pc, #248]	; (8005690 <checkAktifCalisma+0x390>)
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d111      	bne.n	80055c2 <checkAktifCalisma+0x2c2>
 800559e:	4b39      	ldr	r3, [pc, #228]	; (8005684 <checkAktifCalisma+0x384>)
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	f083 0301 	eor.w	r3, r3, #1
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <checkAktifCalisma+0x2c2>
 80055ac:	4b36      	ldr	r3, [pc, #216]	; (8005688 <checkAktifCalisma+0x388>)
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	f083 0301 	eor.w	r3, r3, #1
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d103      	bne.n	80055c2 <checkAktifCalisma+0x2c2>
 80055ba:	4b34      	ldr	r3, [pc, #208]	; (800568c <checkAktifCalisma+0x38c>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10a      	bne.n	80055d8 <checkAktifCalisma+0x2d8>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80055c2:	2200      	movs	r2, #0
 80055c4:	2104      	movs	r1, #4
 80055c6:	4828      	ldr	r0, [pc, #160]	; (8005668 <checkAktifCalisma+0x368>)
 80055c8:	f003 f8f9 	bl	80087be <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 80055cc:	4b2a      	ldr	r3, [pc, #168]	; (8005678 <checkAktifCalisma+0x378>)
 80055ce:	2200      	movs	r2, #0
 80055d0:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 80055d2:	4b2f      	ldr	r3, [pc, #188]	; (8005690 <checkAktifCalisma+0x390>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 80055d8:	4b31      	ldr	r3, [pc, #196]	; (80056a0 <checkAktifCalisma+0x3a0>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d102      	bne.n	80055e6 <checkAktifCalisma+0x2e6>
					cerceveVar=1;
 80055e0:	4b30      	ldr	r3, [pc, #192]	; (80056a4 <checkAktifCalisma+0x3a4>)
 80055e2:	2201      	movs	r2, #1
 80055e4:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80055e6:	4b2e      	ldr	r3, [pc, #184]	; (80056a0 <checkAktifCalisma+0x3a0>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d116      	bne.n	800561c <checkAktifCalisma+0x31c>
 80055ee:	4b2e      	ldr	r3, [pc, #184]	; (80056a8 <checkAktifCalisma+0x3a8>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d112      	bne.n	800561c <checkAktifCalisma+0x31c>
 80055f6:	2101      	movs	r1, #1
 80055f8:	4821      	ldr	r0, [pc, #132]	; (8005680 <checkAktifCalisma+0x380>)
 80055fa:	f003 f8c9 	bl	8008790 <HAL_GPIO_ReadPin>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10b      	bne.n	800561c <checkAktifCalisma+0x31c>
 8005604:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005608:	4817      	ldr	r0, [pc, #92]	; (8005668 <checkAktifCalisma+0x368>)
 800560a:	f003 f8c1 	bl	8008790 <HAL_GPIO_ReadPin>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d103      	bne.n	800561c <checkAktifCalisma+0x31c>
					cerceveVar=1;
 8005614:	4b23      	ldr	r3, [pc, #140]	; (80056a4 <checkAktifCalisma+0x3a4>)
 8005616:	2201      	movs	r2, #1
 8005618:	701a      	strb	r2, [r3, #0]
 800561a:	e011      	b.n	8005640 <checkAktifCalisma+0x340>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 800561c:	4b20      	ldr	r3, [pc, #128]	; (80056a0 <checkAktifCalisma+0x3a0>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d10d      	bne.n	8005640 <checkAktifCalisma+0x340>
 8005624:	2101      	movs	r1, #1
 8005626:	4816      	ldr	r0, [pc, #88]	; (8005680 <checkAktifCalisma+0x380>)
 8005628:	f003 f8b2 	bl	8008790 <HAL_GPIO_ReadPin>
 800562c:	4603      	mov	r3, r0
 800562e:	2b01      	cmp	r3, #1
 8005630:	d106      	bne.n	8005640 <checkAktifCalisma+0x340>
 8005632:	4b1d      	ldr	r3, [pc, #116]	; (80056a8 <checkAktifCalisma+0x3a8>)
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d102      	bne.n	8005640 <checkAktifCalisma+0x340>
					cerceveVar=0;
 800563a:	4b1a      	ldr	r3, [pc, #104]	; (80056a4 <checkAktifCalisma+0x3a4>)
 800563c:	2200      	movs	r2, #0
 800563e:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 8005640:	4b17      	ldr	r3, [pc, #92]	; (80056a0 <checkAktifCalisma+0x3a0>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d134      	bne.n	80056b2 <checkAktifCalisma+0x3b2>
 8005648:	4b17      	ldr	r3, [pc, #92]	; (80056a8 <checkAktifCalisma+0x3a8>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d130      	bne.n	80056b2 <checkAktifCalisma+0x3b2>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005650:	2101      	movs	r1, #1
 8005652:	480b      	ldr	r0, [pc, #44]	; (8005680 <checkAktifCalisma+0x380>)
 8005654:	f003 f89c 	bl	8008790 <HAL_GPIO_ReadPin>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d126      	bne.n	80056ac <checkAktifCalisma+0x3ac>
						cerceveVar=1;
 800565e:	4b11      	ldr	r3, [pc, #68]	; (80056a4 <checkAktifCalisma+0x3a4>)
 8005660:	2201      	movs	r2, #1
 8005662:	701a      	strb	r2, [r3, #0]
 8005664:	e025      	b.n	80056b2 <checkAktifCalisma+0x3b2>
 8005666:	bf00      	nop
 8005668:	40010c00 	.word	0x40010c00
 800566c:	20000b58 	.word	0x20000b58
 8005670:	20000b33 	.word	0x20000b33
 8005674:	20000b37 	.word	0x20000b37
 8005678:	20000b5c 	.word	0x20000b5c
 800567c:	20000b5f 	.word	0x20000b5f
 8005680:	40011000 	.word	0x40011000
 8005684:	20000b75 	.word	0x20000b75
 8005688:	20000b76 	.word	0x20000b76
 800568c:	20000b27 	.word	0x20000b27
 8005690:	20000b54 	.word	0x20000b54
 8005694:	20000b00 	.word	0x20000b00
 8005698:	20000b0c 	.word	0x20000b0c
 800569c:	20000b38 	.word	0x20000b38
 80056a0:	20000b28 	.word	0x20000b28
 80056a4:	20000b7a 	.word	0x20000b7a
 80056a8:	20000b25 	.word	0x20000b25
					} else {
						cerceveVar=0;
 80056ac:	4b7f      	ldr	r3, [pc, #508]	; (80058ac <checkAktifCalisma+0x5ac>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80056b2:	4b7f      	ldr	r3, [pc, #508]	; (80058b0 <checkAktifCalisma+0x5b0>)
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d17c      	bne.n	80057b4 <checkAktifCalisma+0x4b4>
 80056ba:	4b7e      	ldr	r3, [pc, #504]	; (80058b4 <checkAktifCalisma+0x5b4>)
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d078      	beq.n	80057b4 <checkAktifCalisma+0x4b4>
 80056c2:	4b7d      	ldr	r3, [pc, #500]	; (80058b8 <checkAktifCalisma+0x5b8>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d074      	beq.n	80057b4 <checkAktifCalisma+0x4b4>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80056ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056ce:	487b      	ldr	r0, [pc, #492]	; (80058bc <checkAktifCalisma+0x5bc>)
 80056d0:	f003 f85e 	bl	8008790 <HAL_GPIO_ReadPin>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <checkAktifCalisma+0x3e2>
 80056da:	4b79      	ldr	r3, [pc, #484]	; (80058c0 <checkAktifCalisma+0x5c0>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d068      	beq.n	80057b4 <checkAktifCalisma+0x4b4>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80056e2:	4b72      	ldr	r3, [pc, #456]	; (80058ac <checkAktifCalisma+0x5ac>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d064      	beq.n	80057b4 <checkAktifCalisma+0x4b4>
 80056ea:	4b76      	ldr	r3, [pc, #472]	; (80058c4 <checkAktifCalisma+0x5c4>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	f083 0301 	eor.w	r3, r3, #1
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d05d      	beq.n	80057b4 <checkAktifCalisma+0x4b4>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80056f8:	2104      	movs	r1, #4
 80056fa:	4873      	ldr	r0, [pc, #460]	; (80058c8 <checkAktifCalisma+0x5c8>)
 80056fc:	f003 f848 	bl	8008790 <HAL_GPIO_ReadPin>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <checkAktifCalisma+0x40e>
 8005706:	4b71      	ldr	r3, [pc, #452]	; (80058cc <checkAktifCalisma+0x5cc>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d152      	bne.n	80057b4 <checkAktifCalisma+0x4b4>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800570e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005712:	486a      	ldr	r0, [pc, #424]	; (80058bc <checkAktifCalisma+0x5bc>)
 8005714:	f003 f83c 	bl	8008790 <HAL_GPIO_ReadPin>
 8005718:	4603      	mov	r3, r0
 800571a:	2b01      	cmp	r3, #1
 800571c:	d10e      	bne.n	800573c <checkAktifCalisma+0x43c>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800571e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005722:	4866      	ldr	r0, [pc, #408]	; (80058bc <checkAktifCalisma+0x5bc>)
 8005724:	f003 f834 	bl	8008790 <HAL_GPIO_ReadPin>
 8005728:	4603      	mov	r3, r0
 800572a:	2b01      	cmp	r3, #1
 800572c:	d106      	bne.n	800573c <checkAktifCalisma+0x43c>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800572e:	2140      	movs	r1, #64	; 0x40
 8005730:	4865      	ldr	r0, [pc, #404]	; (80058c8 <checkAktifCalisma+0x5c8>)
 8005732:	f003 f82d 	bl	8008790 <HAL_GPIO_ReadPin>
 8005736:	4603      	mov	r3, r0
 8005738:	2b01      	cmp	r3, #1
 800573a:	d003      	beq.n	8005744 <checkAktifCalisma+0x444>
 800573c:	4b64      	ldr	r3, [pc, #400]	; (80058d0 <checkAktifCalisma+0x5d0>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d037      	beq.n	80057b4 <checkAktifCalisma+0x4b4>
						&& (yukarimotorcalisiyor==0)
 8005744:	4b63      	ldr	r3, [pc, #396]	; (80058d4 <checkAktifCalisma+0x5d4>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	f083 0301 	eor.w	r3, r3, #1
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d030      	beq.n	80057b4 <checkAktifCalisma+0x4b4>
						&& (yukarivalfcalisiyor==0)
 8005752:	4b61      	ldr	r3, [pc, #388]	; (80058d8 <checkAktifCalisma+0x5d8>)
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	f083 0301 	eor.w	r3, r3, #1
 800575a:	b2db      	uxtb	r3, r3
 800575c:	2b00      	cmp	r3, #0
 800575e:	d029      	beq.n	80057b4 <checkAktifCalisma+0x4b4>
				  	  	&& (devmotoryukaricalisiyor==0)
 8005760:	4b5e      	ldr	r3, [pc, #376]	; (80058dc <checkAktifCalisma+0x5dc>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	f083 0301 	eor.w	r3, r3, #1
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d022      	beq.n	80057b4 <checkAktifCalisma+0x4b4>
						&& (devmotorasagicalisiyor==0)
 800576e:	4b5c      	ldr	r3, [pc, #368]	; (80058e0 <checkAktifCalisma+0x5e0>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	f083 0301 	eor.w	r3, r3, #1
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01b      	beq.n	80057b4 <checkAktifCalisma+0x4b4>
						&& (devyukarivalfcalisiyor==0)
 800577c:	4b59      	ldr	r3, [pc, #356]	; (80058e4 <checkAktifCalisma+0x5e4>)
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	f083 0301 	eor.w	r3, r3, #1
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d014      	beq.n	80057b4 <checkAktifCalisma+0x4b4>
						&& (devasagivalfcalisiyor==0)) {
 800578a:	4b57      	ldr	r3, [pc, #348]	; (80058e8 <checkAktifCalisma+0x5e8>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	f083 0301 	eor.w	r3, r3, #1
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00d      	beq.n	80057b4 <checkAktifCalisma+0x4b4>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005798:	2201      	movs	r2, #1
 800579a:	2102      	movs	r1, #2
 800579c:	4847      	ldr	r0, [pc, #284]	; (80058bc <checkAktifCalisma+0x5bc>)
 800579e:	f003 f80e 	bl	80087be <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 80057a2:	4b4b      	ldr	r3, [pc, #300]	; (80058d0 <checkAktifCalisma+0x5d0>)
 80057a4:	2201      	movs	r2, #1
 80057a6:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 80057a8:	4b50      	ldr	r3, [pc, #320]	; (80058ec <checkAktifCalisma+0x5ec>)
 80057aa:	2201      	movs	r2, #1
 80057ac:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 80057ae:	4b50      	ldr	r3, [pc, #320]	; (80058f0 <checkAktifCalisma+0x5f0>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80057b4:	4b46      	ldr	r3, [pc, #280]	; (80058d0 <checkAktifCalisma+0x5d0>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d033      	beq.n	8005824 <checkAktifCalisma+0x524>
 80057bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057c0:	483e      	ldr	r0, [pc, #248]	; (80058bc <checkAktifCalisma+0x5bc>)
 80057c2:	f002 ffe5 	bl	8008790 <HAL_GPIO_ReadPin>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d106      	bne.n	80057da <checkAktifCalisma+0x4da>
 80057cc:	4b3c      	ldr	r3, [pc, #240]	; (80058c0 <checkAktifCalisma+0x5c0>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	f083 0301 	eor.w	r3, r3, #1
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10a      	bne.n	80057f0 <checkAktifCalisma+0x4f0>
 80057da:	2104      	movs	r1, #4
 80057dc:	483a      	ldr	r0, [pc, #232]	; (80058c8 <checkAktifCalisma+0x5c8>)
 80057de:	f002 ffd7 	bl	8008790 <HAL_GPIO_ReadPin>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d11d      	bne.n	8005824 <checkAktifCalisma+0x524>
 80057e8:	4b38      	ldr	r3, [pc, #224]	; (80058cc <checkAktifCalisma+0x5cc>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d019      	beq.n	8005824 <checkAktifCalisma+0x524>
 80057f0:	4b30      	ldr	r3, [pc, #192]	; (80058b4 <checkAktifCalisma+0x5b4>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d015      	beq.n	8005824 <checkAktifCalisma+0x524>
 80057f8:	4b2f      	ldr	r3, [pc, #188]	; (80058b8 <checkAktifCalisma+0x5b8>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d011      	beq.n	8005824 <checkAktifCalisma+0x524>
 8005800:	4b2a      	ldr	r3, [pc, #168]	; (80058ac <checkAktifCalisma+0x5ac>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00d      	beq.n	8005824 <checkAktifCalisma+0x524>
 8005808:	4b3a      	ldr	r3, [pc, #232]	; (80058f4 <checkAktifCalisma+0x5f4>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	f083 0301 	eor.w	r3, r3, #1
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d006      	beq.n	8005824 <checkAktifCalisma+0x524>
					timer2=millis;
 8005816:	4b38      	ldr	r3, [pc, #224]	; (80058f8 <checkAktifCalisma+0x5f8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a38      	ldr	r2, [pc, #224]	; (80058fc <checkAktifCalisma+0x5fc>)
 800581c:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 800581e:	4b35      	ldr	r3, [pc, #212]	; (80058f4 <checkAktifCalisma+0x5f4>)
 8005820:	2201      	movs	r2, #1
 8005822:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005824:	4b34      	ldr	r3, [pc, #208]	; (80058f8 <checkAktifCalisma+0x5f8>)
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	4b34      	ldr	r3, [pc, #208]	; (80058fc <checkAktifCalisma+0x5fc>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	4a34      	ldr	r2, [pc, #208]	; (8005900 <checkAktifCalisma+0x600>)
 8005830:	7812      	ldrb	r2, [r2, #0]
 8005832:	4293      	cmp	r3, r2
 8005834:	d303      	bcc.n	800583e <checkAktifCalisma+0x53e>
 8005836:	4b2f      	ldr	r3, [pc, #188]	; (80058f4 <checkAktifCalisma+0x5f4>)
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d114      	bne.n	8005868 <checkAktifCalisma+0x568>
 800583e:	4b1d      	ldr	r3, [pc, #116]	; (80058b4 <checkAktifCalisma+0x5b4>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	f083 0301 	eor.w	r3, r3, #1
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10d      	bne.n	8005868 <checkAktifCalisma+0x568>
 800584c:	4b1a      	ldr	r3, [pc, #104]	; (80058b8 <checkAktifCalisma+0x5b8>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	f083 0301 	eor.w	r3, r3, #1
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d106      	bne.n	8005868 <checkAktifCalisma+0x568>
 800585a:	4b14      	ldr	r3, [pc, #80]	; (80058ac <checkAktifCalisma+0x5ac>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	f083 0301 	eor.w	r3, r3, #1
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <checkAktifCalisma+0x57e>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005868:	2200      	movs	r2, #0
 800586a:	2102      	movs	r1, #2
 800586c:	4813      	ldr	r0, [pc, #76]	; (80058bc <checkAktifCalisma+0x5bc>)
 800586e:	f002 ffa6 	bl	80087be <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 8005872:	4b17      	ldr	r3, [pc, #92]	; (80058d0 <checkAktifCalisma+0x5d0>)
 8005874:	2200      	movs	r2, #0
 8005876:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8005878:	4b1e      	ldr	r3, [pc, #120]	; (80058f4 <checkAktifCalisma+0x5f4>)
 800587a:	2200      	movs	r2, #0
 800587c:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800587e:	4b14      	ldr	r3, [pc, #80]	; (80058d0 <checkAktifCalisma+0x5d0>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d040      	beq.n	8005908 <checkAktifCalisma+0x608>
 8005886:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800588a:	480f      	ldr	r0, [pc, #60]	; (80058c8 <checkAktifCalisma+0x5c8>)
 800588c:	f002 ff80 	bl	8008790 <HAL_GPIO_ReadPin>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d138      	bne.n	8005908 <checkAktifCalisma+0x608>
 8005896:	4b1b      	ldr	r3, [pc, #108]	; (8005904 <checkAktifCalisma+0x604>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d034      	beq.n	8005908 <checkAktifCalisma+0x608>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800589e:	2201      	movs	r2, #1
 80058a0:	2101      	movs	r1, #1
 80058a2:	4806      	ldr	r0, [pc, #24]	; (80058bc <checkAktifCalisma+0x5bc>)
 80058a4:	f002 ff8b 	bl	80087be <HAL_GPIO_WritePin>
 80058a8:	e033      	b.n	8005912 <checkAktifCalisma+0x612>
 80058aa:	bf00      	nop
 80058ac:	20000b7a 	.word	0x20000b7a
 80058b0:	20000b41 	.word	0x20000b41
 80058b4:	20000b75 	.word	0x20000b75
 80058b8:	20000b76 	.word	0x20000b76
 80058bc:	40010c00 	.word	0x40010c00
 80058c0:	20000b60 	.word	0x20000b60
 80058c4:	20000b74 	.word	0x20000b74
 80058c8:	40011000 	.word	0x40011000
 80058cc:	20000b2a 	.word	0x20000b2a
 80058d0:	20000b5b 	.word	0x20000b5b
 80058d4:	20000b58 	.word	0x20000b58
 80058d8:	20000b5c 	.word	0x20000b5c
 80058dc:	20000b59 	.word	0x20000b59
 80058e0:	20000b5a 	.word	0x20000b5a
 80058e4:	20000b5d 	.word	0x20000b5d
 80058e8:	20000b5e 	.word	0x20000b5e
 80058ec:	20000b63 	.word	0x20000b63
 80058f0:	20000b84 	.word	0x20000b84
 80058f4:	20000b53 	.word	0x20000b53
 80058f8:	20000b00 	.word	0x20000b00
 80058fc:	20000b0c 	.word	0x20000b0c
 8005900:	20000b39 	.word	0x20000b39
 8005904:	20000b29 	.word	0x20000b29
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005908:	2200      	movs	r2, #0
 800590a:	2101      	movs	r1, #1
 800590c:	4836      	ldr	r0, [pc, #216]	; (80059e8 <checkAktifCalisma+0x6e8>)
 800590e:	f002 ff56 	bl	80087be <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8005912:	4b36      	ldr	r3, [pc, #216]	; (80059ec <checkAktifCalisma+0x6ec>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	f040 8080 	bne.w	8005a1c <checkAktifCalisma+0x71c>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 800591c:	4b34      	ldr	r3, [pc, #208]	; (80059f0 <checkAktifCalisma+0x6f0>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d003      	beq.n	800592c <checkAktifCalisma+0x62c>
 8005924:	4b32      	ldr	r3, [pc, #200]	; (80059f0 <checkAktifCalisma+0x6f0>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d177      	bne.n	8005a1c <checkAktifCalisma+0x71c>
						&& (stopVar) && (kapiSivicVar)
 800592c:	4b31      	ldr	r3, [pc, #196]	; (80059f4 <checkAktifCalisma+0x6f4>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d073      	beq.n	8005a1c <checkAktifCalisma+0x71c>
 8005934:	4b30      	ldr	r3, [pc, #192]	; (80059f8 <checkAktifCalisma+0x6f8>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d06f      	beq.n	8005a1c <checkAktifCalisma+0x71c>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 800593c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005940:	4829      	ldr	r0, [pc, #164]	; (80059e8 <checkAktifCalisma+0x6e8>)
 8005942:	f002 ff25 	bl	8008790 <HAL_GPIO_ReadPin>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d167      	bne.n	8005a1c <checkAktifCalisma+0x71c>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 800594c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005950:	482a      	ldr	r0, [pc, #168]	; (80059fc <checkAktifCalisma+0x6fc>)
 8005952:	f002 ff1d 	bl	8008790 <HAL_GPIO_ReadPin>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d003      	beq.n	8005964 <checkAktifCalisma+0x664>
 800595c:	4b28      	ldr	r3, [pc, #160]	; (8005a00 <checkAktifCalisma+0x700>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d15b      	bne.n	8005a1c <checkAktifCalisma+0x71c>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005964:	2140      	movs	r1, #64	; 0x40
 8005966:	4825      	ldr	r0, [pc, #148]	; (80059fc <checkAktifCalisma+0x6fc>)
 8005968:	f002 ff12 	bl	8008790 <HAL_GPIO_ReadPin>
 800596c:	4603      	mov	r3, r0
 800596e:	2b01      	cmp	r3, #1
 8005970:	d10f      	bne.n	8005992 <checkAktifCalisma+0x692>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005972:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005976:	481c      	ldr	r0, [pc, #112]	; (80059e8 <checkAktifCalisma+0x6e8>)
 8005978:	f002 ff0a 	bl	8008790 <HAL_GPIO_ReadPin>
 800597c:	4603      	mov	r3, r0
 800597e:	2b01      	cmp	r3, #1
 8005980:	d107      	bne.n	8005992 <checkAktifCalisma+0x692>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005982:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005986:	4818      	ldr	r0, [pc, #96]	; (80059e8 <checkAktifCalisma+0x6e8>)
 8005988:	f002 ff02 	bl	8008790 <HAL_GPIO_ReadPin>
 800598c:	4603      	mov	r3, r0
 800598e:	2b01      	cmp	r3, #1
 8005990:	d003      	beq.n	800599a <checkAktifCalisma+0x69a>
 8005992:	4b1c      	ldr	r3, [pc, #112]	; (8005a04 <checkAktifCalisma+0x704>)
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d040      	beq.n	8005a1c <checkAktifCalisma+0x71c>
						&& (yukarimotorcalisiyor==0)
 800599a:	4b1b      	ldr	r3, [pc, #108]	; (8005a08 <checkAktifCalisma+0x708>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	f083 0301 	eor.w	r3, r3, #1
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d039      	beq.n	8005a1c <checkAktifCalisma+0x71c>
						&& (yukarivalfcalisiyor==0)
 80059a8:	4b18      	ldr	r3, [pc, #96]	; (8005a0c <checkAktifCalisma+0x70c>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	f083 0301 	eor.w	r3, r3, #1
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d032      	beq.n	8005a1c <checkAktifCalisma+0x71c>
						&& (asagivalfcalisiyor==0)
 80059b6:	4b16      	ldr	r3, [pc, #88]	; (8005a10 <checkAktifCalisma+0x710>)
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	f083 0301 	eor.w	r3, r3, #1
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d02b      	beq.n	8005a1c <checkAktifCalisma+0x71c>
						&& (devmotorasagicalisiyor==0)
 80059c4:	4b13      	ldr	r3, [pc, #76]	; (8005a14 <checkAktifCalisma+0x714>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	f083 0301 	eor.w	r3, r3, #1
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d024      	beq.n	8005a1c <checkAktifCalisma+0x71c>
						&&(devasagivalfcalisiyor==0)) {
 80059d2:	4b11      	ldr	r3, [pc, #68]	; (8005a18 <checkAktifCalisma+0x718>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	f083 0301 	eor.w	r3, r3, #1
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d01d      	beq.n	8005a1c <checkAktifCalisma+0x71c>

					devmotoryukaricalisiyor=1;
 80059e0:	4b08      	ldr	r3, [pc, #32]	; (8005a04 <checkAktifCalisma+0x704>)
 80059e2:	2201      	movs	r2, #1
 80059e4:	701a      	strb	r2, [r3, #0]
 80059e6:	e01c      	b.n	8005a22 <checkAktifCalisma+0x722>
 80059e8:	40010c00 	.word	0x40010c00
 80059ec:	20000b41 	.word	0x20000b41
 80059f0:	20000b33 	.word	0x20000b33
 80059f4:	20000b75 	.word	0x20000b75
 80059f8:	20000b76 	.word	0x20000b76
 80059fc:	40011000 	.word	0x40011000
 8005a00:	20000b34 	.word	0x20000b34
 8005a04:	20000b59 	.word	0x20000b59
 8005a08:	20000b58 	.word	0x20000b58
 8005a0c:	20000b5c 	.word	0x20000b5c
 8005a10:	20000b5b 	.word	0x20000b5b
 8005a14:	20000b5a 	.word	0x20000b5a
 8005a18:	20000b5e 	.word	0x20000b5e
				} else {
					devmotoryukaricalisiyor=0;
 8005a1c:	4b64      	ldr	r3, [pc, #400]	; (8005bb0 <checkAktifCalisma+0x8b0>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8005a22:	4b63      	ldr	r3, [pc, #396]	; (8005bb0 <checkAktifCalisma+0x8b0>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d007      	beq.n	8005a3a <checkAktifCalisma+0x73a>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	2120      	movs	r1, #32
 8005a2e:	4861      	ldr	r0, [pc, #388]	; (8005bb4 <checkAktifCalisma+0x8b4>)
 8005a30:	f002 fec5 	bl	80087be <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8005a34:	4b60      	ldr	r3, [pc, #384]	; (8005bb8 <checkAktifCalisma+0x8b8>)
 8005a36:	2201      	movs	r2, #1
 8005a38:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005a3a:	4b5f      	ldr	r3, [pc, #380]	; (8005bb8 <checkAktifCalisma+0x8b8>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d025      	beq.n	8005a8e <checkAktifCalisma+0x78e>
 8005a42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a46:	485d      	ldr	r0, [pc, #372]	; (8005bbc <checkAktifCalisma+0x8bc>)
 8005a48:	f002 fea2 	bl	8008790 <HAL_GPIO_ReadPin>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d007      	beq.n	8005a62 <checkAktifCalisma+0x762>
 8005a52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a56:	4857      	ldr	r0, [pc, #348]	; (8005bb4 <checkAktifCalisma+0x8b4>)
 8005a58:	f002 fe9a 	bl	8008790 <HAL_GPIO_ReadPin>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d115      	bne.n	8005a8e <checkAktifCalisma+0x78e>
 8005a62:	4b57      	ldr	r3, [pc, #348]	; (8005bc0 <checkAktifCalisma+0x8c0>)
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d011      	beq.n	8005a8e <checkAktifCalisma+0x78e>
 8005a6a:	4b56      	ldr	r3, [pc, #344]	; (8005bc4 <checkAktifCalisma+0x8c4>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00d      	beq.n	8005a8e <checkAktifCalisma+0x78e>
 8005a72:	4b55      	ldr	r3, [pc, #340]	; (8005bc8 <checkAktifCalisma+0x8c8>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	f083 0301 	eor.w	r3, r3, #1
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d006      	beq.n	8005a8e <checkAktifCalisma+0x78e>
					timer2=millis;
 8005a80:	4b52      	ldr	r3, [pc, #328]	; (8005bcc <checkAktifCalisma+0x8cc>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a52      	ldr	r2, [pc, #328]	; (8005bd0 <checkAktifCalisma+0x8d0>)
 8005a86:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8005a88:	4b4f      	ldr	r3, [pc, #316]	; (8005bc8 <checkAktifCalisma+0x8c8>)
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005a8e:	4b4f      	ldr	r3, [pc, #316]	; (8005bcc <checkAktifCalisma+0x8cc>)
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	4b4f      	ldr	r3, [pc, #316]	; (8005bd0 <checkAktifCalisma+0x8d0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	4a4e      	ldr	r2, [pc, #312]	; (8005bd4 <checkAktifCalisma+0x8d4>)
 8005a9a:	7812      	ldrb	r2, [r2, #0]
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d303      	bcc.n	8005aa8 <checkAktifCalisma+0x7a8>
 8005aa0:	4b49      	ldr	r3, [pc, #292]	; (8005bc8 <checkAktifCalisma+0x8c8>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10d      	bne.n	8005ac4 <checkAktifCalisma+0x7c4>
 8005aa8:	4b45      	ldr	r3, [pc, #276]	; (8005bc0 <checkAktifCalisma+0x8c0>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	f083 0301 	eor.w	r3, r3, #1
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d106      	bne.n	8005ac4 <checkAktifCalisma+0x7c4>
 8005ab6:	4b43      	ldr	r3, [pc, #268]	; (8005bc4 <checkAktifCalisma+0x8c4>)
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	f083 0301 	eor.w	r3, r3, #1
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00a      	beq.n	8005ada <checkAktifCalisma+0x7da>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	2120      	movs	r1, #32
 8005ac8:	483a      	ldr	r0, [pc, #232]	; (8005bb4 <checkAktifCalisma+0x8b4>)
 8005aca:	f002 fe78 	bl	80087be <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8005ace:	4b3a      	ldr	r3, [pc, #232]	; (8005bb8 <checkAktifCalisma+0x8b8>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8005ad4:	4b3c      	ldr	r3, [pc, #240]	; (8005bc8 <checkAktifCalisma+0x8c8>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8005ada:	4b3f      	ldr	r3, [pc, #252]	; (8005bd8 <checkAktifCalisma+0x8d8>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f040 8088 	bne.w	8005bf4 <checkAktifCalisma+0x8f4>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005ae4:	4b3d      	ldr	r3, [pc, #244]	; (8005bdc <checkAktifCalisma+0x8dc>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d003      	beq.n	8005af4 <checkAktifCalisma+0x7f4>
 8005aec:	4b3b      	ldr	r3, [pc, #236]	; (8005bdc <checkAktifCalisma+0x8dc>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d17f      	bne.n	8005bf4 <checkAktifCalisma+0x8f4>
						&& (stopVar) && (kapiSivicVar)
 8005af4:	4b32      	ldr	r3, [pc, #200]	; (8005bc0 <checkAktifCalisma+0x8c0>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d07b      	beq.n	8005bf4 <checkAktifCalisma+0x8f4>
 8005afc:	4b31      	ldr	r3, [pc, #196]	; (8005bc4 <checkAktifCalisma+0x8c4>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d077      	beq.n	8005bf4 <checkAktifCalisma+0x8f4>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005b04:	2140      	movs	r1, #64	; 0x40
 8005b06:	482b      	ldr	r0, [pc, #172]	; (8005bb4 <checkAktifCalisma+0x8b4>)
 8005b08:	f002 fe42 	bl	8008790 <HAL_GPIO_ReadPin>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d170      	bne.n	8005bf4 <checkAktifCalisma+0x8f4>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005b12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b16:	4827      	ldr	r0, [pc, #156]	; (8005bb4 <checkAktifCalisma+0x8b4>)
 8005b18:	f002 fe3a 	bl	8008790 <HAL_GPIO_ReadPin>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d003      	beq.n	8005b2a <checkAktifCalisma+0x82a>
 8005b22:	4b2f      	ldr	r3, [pc, #188]	; (8005be0 <checkAktifCalisma+0x8e0>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d164      	bne.n	8005bf4 <checkAktifCalisma+0x8f4>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005b2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b2e:	4823      	ldr	r0, [pc, #140]	; (8005bbc <checkAktifCalisma+0x8bc>)
 8005b30:	f002 fe2e 	bl	8008790 <HAL_GPIO_ReadPin>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d10f      	bne.n	8005b5a <checkAktifCalisma+0x85a>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005b3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b3e:	481f      	ldr	r0, [pc, #124]	; (8005bbc <checkAktifCalisma+0x8bc>)
 8005b40:	f002 fe26 	bl	8008790 <HAL_GPIO_ReadPin>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d107      	bne.n	8005b5a <checkAktifCalisma+0x85a>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005b4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b4e:	481b      	ldr	r0, [pc, #108]	; (8005bbc <checkAktifCalisma+0x8bc>)
 8005b50:	f002 fe1e 	bl	8008790 <HAL_GPIO_ReadPin>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d003      	beq.n	8005b62 <checkAktifCalisma+0x862>
 8005b5a:	4b22      	ldr	r3, [pc, #136]	; (8005be4 <checkAktifCalisma+0x8e4>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d048      	beq.n	8005bf4 <checkAktifCalisma+0x8f4>
						&& (yukarimotorcalisiyor==0)
 8005b62:	4b21      	ldr	r3, [pc, #132]	; (8005be8 <checkAktifCalisma+0x8e8>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	f083 0301 	eor.w	r3, r3, #1
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d041      	beq.n	8005bf4 <checkAktifCalisma+0x8f4>
						&& (yukarivalfcalisiyor==0)
 8005b70:	4b1e      	ldr	r3, [pc, #120]	; (8005bec <checkAktifCalisma+0x8ec>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	f083 0301 	eor.w	r3, r3, #1
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d03a      	beq.n	8005bf4 <checkAktifCalisma+0x8f4>
						&& (asagivalfcalisiyor==0)
 8005b7e:	4b1c      	ldr	r3, [pc, #112]	; (8005bf0 <checkAktifCalisma+0x8f0>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	f083 0301 	eor.w	r3, r3, #1
 8005b86:	b2db      	uxtb	r3, r3
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d033      	beq.n	8005bf4 <checkAktifCalisma+0x8f4>
						&& (devyukarivalfcalisiyor==0)
 8005b8c:	4b0a      	ldr	r3, [pc, #40]	; (8005bb8 <checkAktifCalisma+0x8b8>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	f083 0301 	eor.w	r3, r3, #1
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d02c      	beq.n	8005bf4 <checkAktifCalisma+0x8f4>
						&& (devmotoryukaricalisiyor==0)) {
 8005b9a:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <checkAktifCalisma+0x8b0>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	f083 0301 	eor.w	r3, r3, #1
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d025      	beq.n	8005bf4 <checkAktifCalisma+0x8f4>

					devmotorasagicalisiyor=1;
 8005ba8:	4b0e      	ldr	r3, [pc, #56]	; (8005be4 <checkAktifCalisma+0x8e4>)
 8005baa:	2201      	movs	r2, #1
 8005bac:	701a      	strb	r2, [r3, #0]
 8005bae:	e024      	b.n	8005bfa <checkAktifCalisma+0x8fa>
 8005bb0:	20000b59 	.word	0x20000b59
 8005bb4:	40011000 	.word	0x40011000
 8005bb8:	20000b5d 	.word	0x20000b5d
 8005bbc:	40010c00 	.word	0x40010c00
 8005bc0:	20000b75 	.word	0x20000b75
 8005bc4:	20000b76 	.word	0x20000b76
 8005bc8:	20000b55 	.word	0x20000b55
 8005bcc:	20000b00 	.word	0x20000b00
 8005bd0:	20000b0c 	.word	0x20000b0c
 8005bd4:	20000b3a 	.word	0x20000b3a
 8005bd8:	20000b41 	.word	0x20000b41
 8005bdc:	20000b33 	.word	0x20000b33
 8005be0:	20000b35 	.word	0x20000b35
 8005be4:	20000b5a 	.word	0x20000b5a
 8005be8:	20000b58 	.word	0x20000b58
 8005bec:	20000b5c 	.word	0x20000b5c
 8005bf0:	20000b5b 	.word	0x20000b5b
				} else {
					devmotorasagicalisiyor=0;
 8005bf4:	4b96      	ldr	r3, [pc, #600]	; (8005e50 <checkAktifCalisma+0xb50>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8005bfa:	4b95      	ldr	r3, [pc, #596]	; (8005e50 <checkAktifCalisma+0xb50>)
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d007      	beq.n	8005c12 <checkAktifCalisma+0x912>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005c02:	2201      	movs	r2, #1
 8005c04:	2110      	movs	r1, #16
 8005c06:	4893      	ldr	r0, [pc, #588]	; (8005e54 <checkAktifCalisma+0xb54>)
 8005c08:	f002 fdd9 	bl	80087be <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8005c0c:	4b92      	ldr	r3, [pc, #584]	; (8005e58 <checkAktifCalisma+0xb58>)
 8005c0e:	2201      	movs	r2, #1
 8005c10:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005c12:	4b91      	ldr	r3, [pc, #580]	; (8005e58 <checkAktifCalisma+0xb58>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d024      	beq.n	8005c64 <checkAktifCalisma+0x964>
 8005c1a:	2140      	movs	r1, #64	; 0x40
 8005c1c:	488d      	ldr	r0, [pc, #564]	; (8005e54 <checkAktifCalisma+0xb54>)
 8005c1e:	f002 fdb7 	bl	8008790 <HAL_GPIO_ReadPin>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d007      	beq.n	8005c38 <checkAktifCalisma+0x938>
 8005c28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c2c:	4889      	ldr	r0, [pc, #548]	; (8005e54 <checkAktifCalisma+0xb54>)
 8005c2e:	f002 fdaf 	bl	8008790 <HAL_GPIO_ReadPin>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d115      	bne.n	8005c64 <checkAktifCalisma+0x964>
 8005c38:	4b88      	ldr	r3, [pc, #544]	; (8005e5c <checkAktifCalisma+0xb5c>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d011      	beq.n	8005c64 <checkAktifCalisma+0x964>
 8005c40:	4b87      	ldr	r3, [pc, #540]	; (8005e60 <checkAktifCalisma+0xb60>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00d      	beq.n	8005c64 <checkAktifCalisma+0x964>
 8005c48:	4b86      	ldr	r3, [pc, #536]	; (8005e64 <checkAktifCalisma+0xb64>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	f083 0301 	eor.w	r3, r3, #1
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d006      	beq.n	8005c64 <checkAktifCalisma+0x964>
					timer2=millis;
 8005c56:	4b84      	ldr	r3, [pc, #528]	; (8005e68 <checkAktifCalisma+0xb68>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a84      	ldr	r2, [pc, #528]	; (8005e6c <checkAktifCalisma+0xb6c>)
 8005c5c:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8005c5e:	4b81      	ldr	r3, [pc, #516]	; (8005e64 <checkAktifCalisma+0xb64>)
 8005c60:	2201      	movs	r2, #1
 8005c62:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005c64:	4b80      	ldr	r3, [pc, #512]	; (8005e68 <checkAktifCalisma+0xb68>)
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	4b80      	ldr	r3, [pc, #512]	; (8005e6c <checkAktifCalisma+0xb6c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	4a80      	ldr	r2, [pc, #512]	; (8005e70 <checkAktifCalisma+0xb70>)
 8005c70:	7812      	ldrb	r2, [r2, #0]
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d303      	bcc.n	8005c7e <checkAktifCalisma+0x97e>
 8005c76:	4b7b      	ldr	r3, [pc, #492]	; (8005e64 <checkAktifCalisma+0xb64>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10d      	bne.n	8005c9a <checkAktifCalisma+0x99a>
 8005c7e:	4b77      	ldr	r3, [pc, #476]	; (8005e5c <checkAktifCalisma+0xb5c>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	f083 0301 	eor.w	r3, r3, #1
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d106      	bne.n	8005c9a <checkAktifCalisma+0x99a>
 8005c8c:	4b74      	ldr	r3, [pc, #464]	; (8005e60 <checkAktifCalisma+0xb60>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	f083 0301 	eor.w	r3, r3, #1
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00a      	beq.n	8005cb0 <checkAktifCalisma+0x9b0>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2110      	movs	r1, #16
 8005c9e:	486d      	ldr	r0, [pc, #436]	; (8005e54 <checkAktifCalisma+0xb54>)
 8005ca0:	f002 fd8d 	bl	80087be <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8005ca4:	4b6c      	ldr	r3, [pc, #432]	; (8005e58 <checkAktifCalisma+0xb58>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8005caa:	4b6e      	ldr	r3, [pc, #440]	; (8005e64 <checkAktifCalisma+0xb64>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005cb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005cb4:	486f      	ldr	r0, [pc, #444]	; (8005e74 <checkAktifCalisma+0xb74>)
 8005cb6:	f002 fd6b 	bl	8008790 <HAL_GPIO_ReadPin>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d120      	bne.n	8005d02 <checkAktifCalisma+0xa02>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005cc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005cc4:	486b      	ldr	r0, [pc, #428]	; (8005e74 <checkAktifCalisma+0xb74>)
 8005cc6:	f002 fd63 	bl	8008790 <HAL_GPIO_ReadPin>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d118      	bne.n	8005d02 <checkAktifCalisma+0xa02>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005cd0:	2104      	movs	r1, #4
 8005cd2:	4868      	ldr	r0, [pc, #416]	; (8005e74 <checkAktifCalisma+0xb74>)
 8005cd4:	f002 fd5c 	bl	8008790 <HAL_GPIO_ReadPin>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d111      	bne.n	8005d02 <checkAktifCalisma+0xa02>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005cde:	2102      	movs	r1, #2
 8005ce0:	4864      	ldr	r0, [pc, #400]	; (8005e74 <checkAktifCalisma+0xb74>)
 8005ce2:	f002 fd55 	bl	8008790 <HAL_GPIO_ReadPin>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10a      	bne.n	8005d02 <checkAktifCalisma+0xa02>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005cec:	2101      	movs	r1, #1
 8005cee:	4861      	ldr	r0, [pc, #388]	; (8005e74 <checkAktifCalisma+0xb74>)
 8005cf0:	f002 fd4e 	bl	8008790 <HAL_GPIO_ReadPin>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d103      	bne.n	8005d02 <checkAktifCalisma+0xa02>
					makineStop=1;
 8005cfa:	4b5f      	ldr	r3, [pc, #380]	; (8005e78 <checkAktifCalisma+0xb78>)
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	701a      	strb	r2, [r3, #0]
 8005d00:	e002      	b.n	8005d08 <checkAktifCalisma+0xa08>
				} else {
					makineStop=0;
 8005d02:	4b5d      	ldr	r3, [pc, #372]	; (8005e78 <checkAktifCalisma+0xb78>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005d08:	4b5c      	ldr	r3, [pc, #368]	; (8005e7c <checkAktifCalisma+0xb7c>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d144      	bne.n	8005d9a <checkAktifCalisma+0xa9a>
 8005d10:	4b5b      	ldr	r3, [pc, #364]	; (8005e80 <checkAktifCalisma+0xb80>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d003      	beq.n	8005d20 <checkAktifCalisma+0xa20>
 8005d18:	4b59      	ldr	r3, [pc, #356]	; (8005e80 <checkAktifCalisma+0xb80>)
 8005d1a:	781b      	ldrb	r3, [r3, #0]
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	d13c      	bne.n	8005d9a <checkAktifCalisma+0xa9a>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005d20:	2180      	movs	r1, #128	; 0x80
 8005d22:	484c      	ldr	r0, [pc, #304]	; (8005e54 <checkAktifCalisma+0xb54>)
 8005d24:	f002 fd34 	bl	8008790 <HAL_GPIO_ReadPin>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <checkAktifCalisma+0xa36>
 8005d2e:	4b55      	ldr	r3, [pc, #340]	; (8005e84 <checkAktifCalisma+0xb84>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00b      	beq.n	8005d4e <checkAktifCalisma+0xa4e>
 8005d36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d3a:	484e      	ldr	r0, [pc, #312]	; (8005e74 <checkAktifCalisma+0xb74>)
 8005d3c:	f002 fd28 	bl	8008790 <HAL_GPIO_ReadPin>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d129      	bne.n	8005d9a <checkAktifCalisma+0xa9a>
 8005d46:	4b4f      	ldr	r3, [pc, #316]	; (8005e84 <checkAktifCalisma+0xb84>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d125      	bne.n	8005d9a <checkAktifCalisma+0xa9a>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005d4e:	2104      	movs	r1, #4
 8005d50:	4840      	ldr	r0, [pc, #256]	; (8005e54 <checkAktifCalisma+0xb54>)
 8005d52:	f002 fd1d 	bl	8008790 <HAL_GPIO_ReadPin>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d003      	beq.n	8005d64 <checkAktifCalisma+0xa64>
 8005d5c:	4b4a      	ldr	r3, [pc, #296]	; (8005e88 <checkAktifCalisma+0xb88>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d11a      	bne.n	8005d9a <checkAktifCalisma+0xa9a>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005d64:	2102      	movs	r1, #2
 8005d66:	483b      	ldr	r0, [pc, #236]	; (8005e54 <checkAktifCalisma+0xb54>)
 8005d68:	f002 fd12 	bl	8008790 <HAL_GPIO_ReadPin>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d113      	bne.n	8005d9a <checkAktifCalisma+0xa9a>
						&&(butonKontrol==0)
 8005d72:	4b46      	ldr	r3, [pc, #280]	; (8005e8c <checkAktifCalisma+0xb8c>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	f083 0301 	eor.w	r3, r3, #1
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00c      	beq.n	8005d9a <checkAktifCalisma+0xa9a>
						&&(makineStop==1)) {
 8005d80:	4b3d      	ldr	r3, [pc, #244]	; (8005e78 <checkAktifCalisma+0xb78>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d008      	beq.n	8005d9a <checkAktifCalisma+0xa9a>

					kapi1prudhome=1;
 8005d88:	4b41      	ldr	r3, [pc, #260]	; (8005e90 <checkAktifCalisma+0xb90>)
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005d8e:	4b36      	ldr	r3, [pc, #216]	; (8005e68 <checkAktifCalisma+0xb68>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a40      	ldr	r2, [pc, #256]	; (8005e94 <checkAktifCalisma+0xb94>)
 8005d94:	6013      	str	r3, [r2, #0]
					bekle();
 8005d96:	f7ff f883 	bl	8004ea0 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005d9a:	4b33      	ldr	r3, [pc, #204]	; (8005e68 <checkAktifCalisma+0xb68>)
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	4b3d      	ldr	r3, [pc, #244]	; (8005e94 <checkAktifCalisma+0xb94>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	4a3c      	ldr	r2, [pc, #240]	; (8005e98 <checkAktifCalisma+0xb98>)
 8005da6:	7812      	ldrb	r2, [r2, #0]
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d211      	bcs.n	8005dd0 <checkAktifCalisma+0xad0>
 8005dac:	2104      	movs	r1, #4
 8005dae:	4829      	ldr	r0, [pc, #164]	; (8005e54 <checkAktifCalisma+0xb54>)
 8005db0:	f002 fcee 	bl	8008790 <HAL_GPIO_ReadPin>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00a      	beq.n	8005dd0 <checkAktifCalisma+0xad0>
 8005dba:	4b33      	ldr	r3, [pc, #204]	; (8005e88 <checkAktifCalisma+0xb88>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d006      	beq.n	8005dd0 <checkAktifCalisma+0xad0>
 8005dc2:	4b2d      	ldr	r3, [pc, #180]	; (8005e78 <checkAktifCalisma+0xb78>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	f083 0301 	eor.w	r3, r3, #1
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <checkAktifCalisma+0xad6>
					kapi1prudhome=0;
 8005dd0:	4b2f      	ldr	r3, [pc, #188]	; (8005e90 <checkAktifCalisma+0xb90>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005dd6:	4b29      	ldr	r3, [pc, #164]	; (8005e7c <checkAktifCalisma+0xb7c>)
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d160      	bne.n	8005ea0 <checkAktifCalisma+0xba0>
 8005dde:	4b28      	ldr	r3, [pc, #160]	; (8005e80 <checkAktifCalisma+0xb80>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d003      	beq.n	8005dee <checkAktifCalisma+0xaee>
 8005de6:	4b26      	ldr	r3, [pc, #152]	; (8005e80 <checkAktifCalisma+0xb80>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d158      	bne.n	8005ea0 <checkAktifCalisma+0xba0>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005dee:	2104      	movs	r1, #4
 8005df0:	4818      	ldr	r0, [pc, #96]	; (8005e54 <checkAktifCalisma+0xb54>)
 8005df2:	f002 fccd 	bl	8008790 <HAL_GPIO_ReadPin>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d003      	beq.n	8005e04 <checkAktifCalisma+0xb04>
 8005dfc:	4b22      	ldr	r3, [pc, #136]	; (8005e88 <checkAktifCalisma+0xb88>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d14d      	bne.n	8005ea0 <checkAktifCalisma+0xba0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005e04:	2102      	movs	r1, #2
 8005e06:	4813      	ldr	r0, [pc, #76]	; (8005e54 <checkAktifCalisma+0xb54>)
 8005e08:	f002 fcc2 	bl	8008790 <HAL_GPIO_ReadPin>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d146      	bne.n	8005ea0 <checkAktifCalisma+0xba0>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005e12:	2180      	movs	r1, #128	; 0x80
 8005e14:	480f      	ldr	r0, [pc, #60]	; (8005e54 <checkAktifCalisma+0xb54>)
 8005e16:	f002 fcbb 	bl	8008790 <HAL_GPIO_ReadPin>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d103      	bne.n	8005e28 <checkAktifCalisma+0xb28>
 8005e20:	4b18      	ldr	r3, [pc, #96]	; (8005e84 <checkAktifCalisma+0xb84>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00b      	beq.n	8005e40 <checkAktifCalisma+0xb40>
 8005e28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e2c:	4811      	ldr	r0, [pc, #68]	; (8005e74 <checkAktifCalisma+0xb74>)
 8005e2e:	f002 fcaf 	bl	8008790 <HAL_GPIO_ReadPin>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d133      	bne.n	8005ea0 <checkAktifCalisma+0xba0>
 8005e38:	4b12      	ldr	r3, [pc, #72]	; (8005e84 <checkAktifCalisma+0xb84>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d12f      	bne.n	8005ea0 <checkAktifCalisma+0xba0>
						&&(makineStop==1)) {
 8005e40:	4b0d      	ldr	r3, [pc, #52]	; (8005e78 <checkAktifCalisma+0xb78>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d02b      	beq.n	8005ea0 <checkAktifCalisma+0xba0>

					kapi1butonkontrol=1;
 8005e48:	4b14      	ldr	r3, [pc, #80]	; (8005e9c <checkAktifCalisma+0xb9c>)
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	701a      	strb	r2, [r3, #0]
 8005e4e:	e02a      	b.n	8005ea6 <checkAktifCalisma+0xba6>
 8005e50:	20000b5a 	.word	0x20000b5a
 8005e54:	40011000 	.word	0x40011000
 8005e58:	20000b5e 	.word	0x20000b5e
 8005e5c:	20000b75 	.word	0x20000b75
 8005e60:	20000b76 	.word	0x20000b76
 8005e64:	20000b56 	.word	0x20000b56
 8005e68:	20000b00 	.word	0x20000b00
 8005e6c:	20000b0c 	.word	0x20000b0c
 8005e70:	20000b3a 	.word	0x20000b3a
 8005e74:	40010c00 	.word	0x40010c00
 8005e78:	20000b65 	.word	0x20000b65
 8005e7c:	20000b2d 	.word	0x20000b2d
 8005e80:	20000b2c 	.word	0x20000b2c
 8005e84:	20000b30 	.word	0x20000b30
 8005e88:	20000b2a 	.word	0x20000b2a
 8005e8c:	20000b52 	.word	0x20000b52
 8005e90:	20000b66 	.word	0x20000b66
 8005e94:	20000b04 	.word	0x20000b04
 8005e98:	20000b3d 	.word	0x20000b3d
 8005e9c:	20000b67 	.word	0x20000b67
				} else {
					kapi1butonkontrol=0;
 8005ea0:	4b8b      	ldr	r3, [pc, #556]	; (80060d0 <checkAktifCalisma+0xdd0>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005ea6:	4b8b      	ldr	r3, [pc, #556]	; (80060d4 <checkAktifCalisma+0xdd4>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d121      	bne.n	8005ef2 <checkAktifCalisma+0xbf2>
 8005eae:	4b8a      	ldr	r3, [pc, #552]	; (80060d8 <checkAktifCalisma+0xdd8>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d003      	beq.n	8005ebe <checkAktifCalisma+0xbbe>
 8005eb6:	4b88      	ldr	r3, [pc, #544]	; (80060d8 <checkAktifCalisma+0xdd8>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b03      	cmp	r3, #3
 8005ebc:	d119      	bne.n	8005ef2 <checkAktifCalisma+0xbf2>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005ebe:	2104      	movs	r1, #4
 8005ec0:	4886      	ldr	r0, [pc, #536]	; (80060dc <checkAktifCalisma+0xddc>)
 8005ec2:	f002 fc65 	bl	8008790 <HAL_GPIO_ReadPin>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d003      	beq.n	8005ed4 <checkAktifCalisma+0xbd4>
 8005ecc:	4b84      	ldr	r3, [pc, #528]	; (80060e0 <checkAktifCalisma+0xde0>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d10e      	bne.n	8005ef2 <checkAktifCalisma+0xbf2>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005ed4:	2102      	movs	r1, #2
 8005ed6:	4881      	ldr	r0, [pc, #516]	; (80060dc <checkAktifCalisma+0xddc>)
 8005ed8:	f002 fc5a 	bl	8008790 <HAL_GPIO_ReadPin>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d107      	bne.n	8005ef2 <checkAktifCalisma+0xbf2>
						&&(makineStop==1)) {
 8005ee2:	4b80      	ldr	r3, [pc, #512]	; (80060e4 <checkAktifCalisma+0xde4>)
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <checkAktifCalisma+0xbf2>

					kapi1pizzato=1;
 8005eea:	4b7f      	ldr	r3, [pc, #508]	; (80060e8 <checkAktifCalisma+0xde8>)
 8005eec:	2201      	movs	r2, #1
 8005eee:	701a      	strb	r2, [r3, #0]
 8005ef0:	e002      	b.n	8005ef8 <checkAktifCalisma+0xbf8>
				} else {
					kapi1pizzato=0;
 8005ef2:	4b7d      	ldr	r3, [pc, #500]	; (80060e8 <checkAktifCalisma+0xde8>)
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005ef8:	4b75      	ldr	r3, [pc, #468]	; (80060d0 <checkAktifCalisma+0xdd0>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d107      	bne.n	8005f10 <checkAktifCalisma+0xc10>
 8005f00:	4b79      	ldr	r3, [pc, #484]	; (80060e8 <checkAktifCalisma+0xde8>)
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d103      	bne.n	8005f10 <checkAktifCalisma+0xc10>
 8005f08:	4b78      	ldr	r3, [pc, #480]	; (80060ec <checkAktifCalisma+0xdec>)
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <checkAktifCalisma+0xc1c>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005f10:	2201      	movs	r2, #1
 8005f12:	2180      	movs	r1, #128	; 0x80
 8005f14:	4876      	ldr	r0, [pc, #472]	; (80060f0 <checkAktifCalisma+0xdf0>)
 8005f16:	f002 fc52 	bl	80087be <HAL_GPIO_WritePin>
 8005f1a:	e004      	b.n	8005f26 <checkAktifCalisma+0xc26>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	2180      	movs	r1, #128	; 0x80
 8005f20:	4873      	ldr	r0, [pc, #460]	; (80060f0 <checkAktifCalisma+0xdf0>)
 8005f22:	f002 fc4c 	bl	80087be <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005f26:	4b73      	ldr	r3, [pc, #460]	; (80060f4 <checkAktifCalisma+0xdf4>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d141      	bne.n	8005fb2 <checkAktifCalisma+0xcb2>
 8005f2e:	4b6a      	ldr	r3, [pc, #424]	; (80060d8 <checkAktifCalisma+0xdd8>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d003      	beq.n	8005f3e <checkAktifCalisma+0xc3e>
 8005f36:	4b68      	ldr	r3, [pc, #416]	; (80060d8 <checkAktifCalisma+0xdd8>)
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d139      	bne.n	8005fb2 <checkAktifCalisma+0xcb2>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005f3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f42:	4866      	ldr	r0, [pc, #408]	; (80060dc <checkAktifCalisma+0xddc>)
 8005f44:	f002 fc24 	bl	8008790 <HAL_GPIO_ReadPin>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d103      	bne.n	8005f56 <checkAktifCalisma+0xc56>
 8005f4e:	4b6a      	ldr	r3, [pc, #424]	; (80060f8 <checkAktifCalisma+0xdf8>)
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00b      	beq.n	8005f6e <checkAktifCalisma+0xc6e>
 8005f56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f5a:	4868      	ldr	r0, [pc, #416]	; (80060fc <checkAktifCalisma+0xdfc>)
 8005f5c:	f002 fc18 	bl	8008790 <HAL_GPIO_ReadPin>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d125      	bne.n	8005fb2 <checkAktifCalisma+0xcb2>
 8005f66:	4b64      	ldr	r3, [pc, #400]	; (80060f8 <checkAktifCalisma+0xdf8>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d121      	bne.n	8005fb2 <checkAktifCalisma+0xcb2>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005f6e:	2102      	movs	r1, #2
 8005f70:	485a      	ldr	r0, [pc, #360]	; (80060dc <checkAktifCalisma+0xddc>)
 8005f72:	f002 fc0d 	bl	8008790 <HAL_GPIO_ReadPin>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d11a      	bne.n	8005fb2 <checkAktifCalisma+0xcb2>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005f7c:	2104      	movs	r1, #4
 8005f7e:	4857      	ldr	r0, [pc, #348]	; (80060dc <checkAktifCalisma+0xddc>)
 8005f80:	f002 fc06 	bl	8008790 <HAL_GPIO_ReadPin>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d113      	bne.n	8005fb2 <checkAktifCalisma+0xcb2>
						&&(makineStop==1)
 8005f8a:	4b56      	ldr	r3, [pc, #344]	; (80060e4 <checkAktifCalisma+0xde4>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00f      	beq.n	8005fb2 <checkAktifCalisma+0xcb2>
						&&(butonKontrol==0)) {
 8005f92:	4b5b      	ldr	r3, [pc, #364]	; (8006100 <checkAktifCalisma+0xe00>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	f083 0301 	eor.w	r3, r3, #1
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d008      	beq.n	8005fb2 <checkAktifCalisma+0xcb2>

					kapi2prudhome=1;
 8005fa0:	4b58      	ldr	r3, [pc, #352]	; (8006104 <checkAktifCalisma+0xe04>)
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005fa6:	4b58      	ldr	r3, [pc, #352]	; (8006108 <checkAktifCalisma+0xe08>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a58      	ldr	r2, [pc, #352]	; (800610c <checkAktifCalisma+0xe0c>)
 8005fac:	6013      	str	r3, [r2, #0]
					bekle();
 8005fae:	f7fe ff77 	bl	8004ea0 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005fb2:	4b55      	ldr	r3, [pc, #340]	; (8006108 <checkAktifCalisma+0xe08>)
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	4b55      	ldr	r3, [pc, #340]	; (800610c <checkAktifCalisma+0xe0c>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	4a54      	ldr	r2, [pc, #336]	; (8006110 <checkAktifCalisma+0xe10>)
 8005fbe:	7812      	ldrb	r2, [r2, #0]
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d20d      	bcs.n	8005fe0 <checkAktifCalisma+0xce0>
 8005fc4:	2102      	movs	r1, #2
 8005fc6:	4845      	ldr	r0, [pc, #276]	; (80060dc <checkAktifCalisma+0xddc>)
 8005fc8:	f002 fbe2 	bl	8008790 <HAL_GPIO_ReadPin>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d006      	beq.n	8005fe0 <checkAktifCalisma+0xce0>
 8005fd2:	4b44      	ldr	r3, [pc, #272]	; (80060e4 <checkAktifCalisma+0xde4>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	f083 0301 	eor.w	r3, r3, #1
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <checkAktifCalisma+0xce6>
					kapi2prudhome=0;
 8005fe0:	4b48      	ldr	r3, [pc, #288]	; (8006104 <checkAktifCalisma+0xe04>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005fe6:	4b43      	ldr	r3, [pc, #268]	; (80060f4 <checkAktifCalisma+0xdf4>)
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d135      	bne.n	800605a <checkAktifCalisma+0xd5a>
 8005fee:	4b3a      	ldr	r3, [pc, #232]	; (80060d8 <checkAktifCalisma+0xdd8>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d003      	beq.n	8005ffe <checkAktifCalisma+0xcfe>
 8005ff6:	4b38      	ldr	r3, [pc, #224]	; (80060d8 <checkAktifCalisma+0xdd8>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d12d      	bne.n	800605a <checkAktifCalisma+0xd5a>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005ffe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006002:	4836      	ldr	r0, [pc, #216]	; (80060dc <checkAktifCalisma+0xddc>)
 8006004:	f002 fbc4 	bl	8008790 <HAL_GPIO_ReadPin>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d103      	bne.n	8006016 <checkAktifCalisma+0xd16>
 800600e:	4b3a      	ldr	r3, [pc, #232]	; (80060f8 <checkAktifCalisma+0xdf8>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00b      	beq.n	800602e <checkAktifCalisma+0xd2e>
 8006016:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800601a:	4838      	ldr	r0, [pc, #224]	; (80060fc <checkAktifCalisma+0xdfc>)
 800601c:	f002 fbb8 	bl	8008790 <HAL_GPIO_ReadPin>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d119      	bne.n	800605a <checkAktifCalisma+0xd5a>
 8006026:	4b34      	ldr	r3, [pc, #208]	; (80060f8 <checkAktifCalisma+0xdf8>)
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d115      	bne.n	800605a <checkAktifCalisma+0xd5a>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800602e:	2102      	movs	r1, #2
 8006030:	482a      	ldr	r0, [pc, #168]	; (80060dc <checkAktifCalisma+0xddc>)
 8006032:	f002 fbad 	bl	8008790 <HAL_GPIO_ReadPin>
 8006036:	4603      	mov	r3, r0
 8006038:	2b01      	cmp	r3, #1
 800603a:	d10e      	bne.n	800605a <checkAktifCalisma+0xd5a>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800603c:	2104      	movs	r1, #4
 800603e:	4827      	ldr	r0, [pc, #156]	; (80060dc <checkAktifCalisma+0xddc>)
 8006040:	f002 fba6 	bl	8008790 <HAL_GPIO_ReadPin>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d107      	bne.n	800605a <checkAktifCalisma+0xd5a>
						&&(makineStop==1)) {
 800604a:	4b26      	ldr	r3, [pc, #152]	; (80060e4 <checkAktifCalisma+0xde4>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <checkAktifCalisma+0xd5a>

					kapi2butonkontrol=1;
 8006052:	4b30      	ldr	r3, [pc, #192]	; (8006114 <checkAktifCalisma+0xe14>)
 8006054:	2201      	movs	r2, #1
 8006056:	701a      	strb	r2, [r3, #0]
 8006058:	e002      	b.n	8006060 <checkAktifCalisma+0xd60>
				} else {
					kapi2butonkontrol=0;
 800605a:	4b2e      	ldr	r3, [pc, #184]	; (8006114 <checkAktifCalisma+0xe14>)
 800605c:	2200      	movs	r2, #0
 800605e:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006060:	4b24      	ldr	r3, [pc, #144]	; (80060f4 <checkAktifCalisma+0xdf4>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b02      	cmp	r3, #2
 8006066:	d11d      	bne.n	80060a4 <checkAktifCalisma+0xda4>
 8006068:	4b1b      	ldr	r3, [pc, #108]	; (80060d8 <checkAktifCalisma+0xdd8>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d003      	beq.n	8006078 <checkAktifCalisma+0xd78>
 8006070:	4b19      	ldr	r3, [pc, #100]	; (80060d8 <checkAktifCalisma+0xdd8>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b03      	cmp	r3, #3
 8006076:	d115      	bne.n	80060a4 <checkAktifCalisma+0xda4>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006078:	2102      	movs	r1, #2
 800607a:	4818      	ldr	r0, [pc, #96]	; (80060dc <checkAktifCalisma+0xddc>)
 800607c:	f002 fb88 	bl	8008790 <HAL_GPIO_ReadPin>
 8006080:	4603      	mov	r3, r0
 8006082:	2b01      	cmp	r3, #1
 8006084:	d10e      	bne.n	80060a4 <checkAktifCalisma+0xda4>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006086:	2104      	movs	r1, #4
 8006088:	4814      	ldr	r0, [pc, #80]	; (80060dc <checkAktifCalisma+0xddc>)
 800608a:	f002 fb81 	bl	8008790 <HAL_GPIO_ReadPin>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d107      	bne.n	80060a4 <checkAktifCalisma+0xda4>
						&&(makineStop==1)) {
 8006094:	4b13      	ldr	r3, [pc, #76]	; (80060e4 <checkAktifCalisma+0xde4>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d003      	beq.n	80060a4 <checkAktifCalisma+0xda4>

					kapi2pizzato=1;
 800609c:	4b1e      	ldr	r3, [pc, #120]	; (8006118 <checkAktifCalisma+0xe18>)
 800609e:	2201      	movs	r2, #1
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	e002      	b.n	80060aa <checkAktifCalisma+0xdaa>
				} else {
					kapi2pizzato=0;
 80060a4:	4b1c      	ldr	r3, [pc, #112]	; (8006118 <checkAktifCalisma+0xe18>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80060aa:	4b1a      	ldr	r3, [pc, #104]	; (8006114 <checkAktifCalisma+0xe14>)
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d107      	bne.n	80060c2 <checkAktifCalisma+0xdc2>
 80060b2:	4b19      	ldr	r3, [pc, #100]	; (8006118 <checkAktifCalisma+0xe18>)
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d103      	bne.n	80060c2 <checkAktifCalisma+0xdc2>
 80060ba:	4b12      	ldr	r3, [pc, #72]	; (8006104 <checkAktifCalisma+0xe04>)
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d02c      	beq.n	800611c <checkAktifCalisma+0xe1c>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80060c2:	2201      	movs	r2, #1
 80060c4:	2140      	movs	r1, #64	; 0x40
 80060c6:	480a      	ldr	r0, [pc, #40]	; (80060f0 <checkAktifCalisma+0xdf0>)
 80060c8:	f002 fb79 	bl	80087be <HAL_GPIO_WritePin>
 80060cc:	e02b      	b.n	8006126 <checkAktifCalisma+0xe26>
 80060ce:	bf00      	nop
 80060d0:	20000b67 	.word	0x20000b67
 80060d4:	20000b2d 	.word	0x20000b2d
 80060d8:	20000b2c 	.word	0x20000b2c
 80060dc:	40011000 	.word	0x40011000
 80060e0:	20000b2a 	.word	0x20000b2a
 80060e4:	20000b65 	.word	0x20000b65
 80060e8:	20000b68 	.word	0x20000b68
 80060ec:	20000b66 	.word	0x20000b66
 80060f0:	40010800 	.word	0x40010800
 80060f4:	20000b2e 	.word	0x20000b2e
 80060f8:	20000b30 	.word	0x20000b30
 80060fc:	40010c00 	.word	0x40010c00
 8006100:	20000b52 	.word	0x20000b52
 8006104:	20000b69 	.word	0x20000b69
 8006108:	20000b00 	.word	0x20000b00
 800610c:	20000b04 	.word	0x20000b04
 8006110:	20000b3e 	.word	0x20000b3e
 8006114:	20000b6a 	.word	0x20000b6a
 8006118:	20000b6b 	.word	0x20000b6b
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800611c:	2200      	movs	r2, #0
 800611e:	2140      	movs	r1, #64	; 0x40
 8006120:	488d      	ldr	r0, [pc, #564]	; (8006358 <checkAktifCalisma+0x1058>)
 8006122:	f002 fb4c 	bl	80087be <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8006126:	4b8d      	ldr	r3, [pc, #564]	; (800635c <checkAktifCalisma+0x105c>)
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d003      	beq.n	8006136 <checkAktifCalisma+0xe36>
 800612e:	4b8b      	ldr	r3, [pc, #556]	; (800635c <checkAktifCalisma+0x105c>)
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b02      	cmp	r3, #2
 8006134:	d115      	bne.n	8006162 <checkAktifCalisma+0xe62>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006136:	2104      	movs	r1, #4
 8006138:	4889      	ldr	r0, [pc, #548]	; (8006360 <checkAktifCalisma+0x1060>)
 800613a:	f002 fb29 	bl	8008790 <HAL_GPIO_ReadPin>
 800613e:	4603      	mov	r3, r0
 8006140:	2b01      	cmp	r3, #1
 8006142:	d003      	beq.n	800614c <checkAktifCalisma+0xe4c>
 8006144:	4b87      	ldr	r3, [pc, #540]	; (8006364 <checkAktifCalisma+0x1064>)
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <checkAktifCalisma+0xe62>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 800614c:	2102      	movs	r1, #2
 800614e:	4884      	ldr	r0, [pc, #528]	; (8006360 <checkAktifCalisma+0x1060>)
 8006150:	f002 fb1e 	bl	8008790 <HAL_GPIO_ReadPin>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d103      	bne.n	8006162 <checkAktifCalisma+0xe62>

					kapiTablaAcKonumKat1=1;
 800615a:	4b83      	ldr	r3, [pc, #524]	; (8006368 <checkAktifCalisma+0x1068>)
 800615c:	2201      	movs	r2, #1
 800615e:	701a      	strb	r2, [r3, #0]
 8006160:	e002      	b.n	8006168 <checkAktifCalisma+0xe68>
				} else {
					kapiTablaAcKonumKat1=0;
 8006162:	4b81      	ldr	r3, [pc, #516]	; (8006368 <checkAktifCalisma+0x1068>)
 8006164:	2200      	movs	r2, #0
 8006166:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8006168:	4b7c      	ldr	r3, [pc, #496]	; (800635c <checkAktifCalisma+0x105c>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d003      	beq.n	8006178 <checkAktifCalisma+0xe78>
 8006170:	4b7a      	ldr	r3, [pc, #488]	; (800635c <checkAktifCalisma+0x105c>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b02      	cmp	r3, #2
 8006176:	d111      	bne.n	800619c <checkAktifCalisma+0xe9c>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006178:	2102      	movs	r1, #2
 800617a:	4879      	ldr	r0, [pc, #484]	; (8006360 <checkAktifCalisma+0x1060>)
 800617c:	f002 fb08 	bl	8008790 <HAL_GPIO_ReadPin>
 8006180:	4603      	mov	r3, r0
 8006182:	2b01      	cmp	r3, #1
 8006184:	d10a      	bne.n	800619c <checkAktifCalisma+0xe9c>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8006186:	2104      	movs	r1, #4
 8006188:	4875      	ldr	r0, [pc, #468]	; (8006360 <checkAktifCalisma+0x1060>)
 800618a:	f002 fb01 	bl	8008790 <HAL_GPIO_ReadPin>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d103      	bne.n	800619c <checkAktifCalisma+0xe9c>

					kapiTablaAcKonumKat2=1;
 8006194:	4b75      	ldr	r3, [pc, #468]	; (800636c <checkAktifCalisma+0x106c>)
 8006196:	2201      	movs	r2, #1
 8006198:	701a      	strb	r2, [r3, #0]
 800619a:	e002      	b.n	80061a2 <checkAktifCalisma+0xea2>
				} else {
					kapiTablaAcKonumKat2=0;
 800619c:	4b73      	ldr	r3, [pc, #460]	; (800636c <checkAktifCalisma+0x106c>)
 800619e:	2200      	movs	r2, #0
 80061a0:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 80061a2:	4b71      	ldr	r3, [pc, #452]	; (8006368 <checkAktifCalisma+0x1068>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00f      	beq.n	80061ca <checkAktifCalisma+0xeca>
						&& kapiAcTipi==1
 80061aa:	4b71      	ldr	r3, [pc, #452]	; (8006370 <checkAktifCalisma+0x1070>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d10b      	bne.n	80061ca <checkAktifCalisma+0xeca>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80061b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80061b6:	486f      	ldr	r0, [pc, #444]	; (8006374 <checkAktifCalisma+0x1074>)
 80061b8:	f002 faea 	bl	8008790 <HAL_GPIO_ReadPin>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d103      	bne.n	80061ca <checkAktifCalisma+0xeca>

					kapiactablaesp1=1;
 80061c2:	4b6d      	ldr	r3, [pc, #436]	; (8006378 <checkAktifCalisma+0x1078>)
 80061c4:	2201      	movs	r2, #1
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	e002      	b.n	80061d0 <checkAktifCalisma+0xed0>
				} else {
					kapiactablaesp1=0;
 80061ca:	4b6b      	ldr	r3, [pc, #428]	; (8006378 <checkAktifCalisma+0x1078>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 80061d0:	4b66      	ldr	r3, [pc, #408]	; (800636c <checkAktifCalisma+0x106c>)
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00f      	beq.n	80061f8 <checkAktifCalisma+0xef8>
						&& kapiAcTipi==1
 80061d8:	4b65      	ldr	r3, [pc, #404]	; (8006370 <checkAktifCalisma+0x1070>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d10b      	bne.n	80061f8 <checkAktifCalisma+0xef8>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80061e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80061e4:	4863      	ldr	r0, [pc, #396]	; (8006374 <checkAktifCalisma+0x1074>)
 80061e6:	f002 fad3 	bl	8008790 <HAL_GPIO_ReadPin>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d103      	bne.n	80061f8 <checkAktifCalisma+0xef8>

					kapiactablaesp2=1;
 80061f0:	4b62      	ldr	r3, [pc, #392]	; (800637c <checkAktifCalisma+0x107c>)
 80061f2:	2201      	movs	r2, #1
 80061f4:	701a      	strb	r2, [r3, #0]
 80061f6:	e002      	b.n	80061fe <checkAktifCalisma+0xefe>
				} else {
					kapiactablaesp2=0;
 80061f8:	4b60      	ldr	r3, [pc, #384]	; (800637c <checkAktifCalisma+0x107c>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80061fe:	4b60      	ldr	r3, [pc, #384]	; (8006380 <checkAktifCalisma+0x1080>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d137      	bne.n	8006276 <checkAktifCalisma+0xf76>
 8006206:	4b5f      	ldr	r3, [pc, #380]	; (8006384 <checkAktifCalisma+0x1084>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	2b02      	cmp	r3, #2
 800620c:	d003      	beq.n	8006216 <checkAktifCalisma+0xf16>
 800620e:	4b5d      	ldr	r3, [pc, #372]	; (8006384 <checkAktifCalisma+0x1084>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b03      	cmp	r3, #3
 8006214:	d12f      	bne.n	8006276 <checkAktifCalisma+0xf76>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006216:	4b54      	ldr	r3, [pc, #336]	; (8006368 <checkAktifCalisma+0x1068>)
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d103      	bne.n	8006226 <checkAktifCalisma+0xf26>
 800621e:	4b53      	ldr	r3, [pc, #332]	; (800636c <checkAktifCalisma+0x106c>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d027      	beq.n	8006276 <checkAktifCalisma+0xf76>
						&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006226:	f44f 7100 	mov.w	r1, #512	; 0x200
 800622a:	484d      	ldr	r0, [pc, #308]	; (8006360 <checkAktifCalisma+0x1060>)
 800622c:	f002 fab0 	bl	8008790 <HAL_GPIO_ReadPin>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d103      	bne.n	800623e <checkAktifCalisma+0xf3e>
 8006236:	4b4e      	ldr	r3, [pc, #312]	; (8006370 <checkAktifCalisma+0x1070>)
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d007      	beq.n	800624e <checkAktifCalisma+0xf4e>
						||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800623e:	4b4e      	ldr	r3, [pc, #312]	; (8006378 <checkAktifCalisma+0x1078>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d103      	bne.n	800624e <checkAktifCalisma+0xf4e>
 8006246:	4b4d      	ldr	r3, [pc, #308]	; (800637c <checkAktifCalisma+0x107c>)
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d013      	beq.n	8006276 <checkAktifCalisma+0xf76>
						&&(makineStop==1)
 800624e:	4b4e      	ldr	r3, [pc, #312]	; (8006388 <checkAktifCalisma+0x1088>)
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00f      	beq.n	8006276 <checkAktifCalisma+0xf76>
						&&(butonKontrol==0)) {
 8006256:	4b4d      	ldr	r3, [pc, #308]	; (800638c <checkAktifCalisma+0x108c>)
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	f083 0301 	eor.w	r3, r3, #1
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b00      	cmp	r3, #0
 8006262:	d008      	beq.n	8006276 <checkAktifCalisma+0xf76>

					kapiTablaprudhome=1;
 8006264:	4b4a      	ldr	r3, [pc, #296]	; (8006390 <checkAktifCalisma+0x1090>)
 8006266:	2201      	movs	r2, #1
 8006268:	701a      	strb	r2, [r3, #0]
					timer = millis;
 800626a:	4b4a      	ldr	r3, [pc, #296]	; (8006394 <checkAktifCalisma+0x1094>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a4a      	ldr	r2, [pc, #296]	; (8006398 <checkAktifCalisma+0x1098>)
 8006270:	6013      	str	r3, [r2, #0]
					bekle();
 8006272:	f7fe fe15 	bl	8004ea0 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8006276:	4b47      	ldr	r3, [pc, #284]	; (8006394 <checkAktifCalisma+0x1094>)
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	4b47      	ldr	r3, [pc, #284]	; (8006398 <checkAktifCalisma+0x1098>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	4a46      	ldr	r2, [pc, #280]	; (800639c <checkAktifCalisma+0x109c>)
 8006282:	7812      	ldrb	r2, [r2, #0]
 8006284:	4293      	cmp	r3, r2
 8006286:	d214      	bcs.n	80062b2 <checkAktifCalisma+0xfb2>
 8006288:	4b37      	ldr	r3, [pc, #220]	; (8006368 <checkAktifCalisma+0x1068>)
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	f083 0301 	eor.w	r3, r3, #1
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d006      	beq.n	80062a4 <checkAktifCalisma+0xfa4>
 8006296:	4b35      	ldr	r3, [pc, #212]	; (800636c <checkAktifCalisma+0x106c>)
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	f083 0301 	eor.w	r3, r3, #1
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d106      	bne.n	80062b2 <checkAktifCalisma+0xfb2>
 80062a4:	4b38      	ldr	r3, [pc, #224]	; (8006388 <checkAktifCalisma+0x1088>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	f083 0301 	eor.w	r3, r3, #1
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d002      	beq.n	80062b8 <checkAktifCalisma+0xfb8>
					kapiTablaprudhome=0;
 80062b2:	4b37      	ldr	r3, [pc, #220]	; (8006390 <checkAktifCalisma+0x1090>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80062b8:	4b31      	ldr	r3, [pc, #196]	; (8006380 <checkAktifCalisma+0x1080>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d12b      	bne.n	8006318 <checkAktifCalisma+0x1018>
 80062c0:	4b30      	ldr	r3, [pc, #192]	; (8006384 <checkAktifCalisma+0x1084>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d003      	beq.n	80062d0 <checkAktifCalisma+0xfd0>
 80062c8:	4b2e      	ldr	r3, [pc, #184]	; (8006384 <checkAktifCalisma+0x1084>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	2b03      	cmp	r3, #3
 80062ce:	d123      	bne.n	8006318 <checkAktifCalisma+0x1018>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80062d0:	4b25      	ldr	r3, [pc, #148]	; (8006368 <checkAktifCalisma+0x1068>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d103      	bne.n	80062e0 <checkAktifCalisma+0xfe0>
 80062d8:	4b24      	ldr	r3, [pc, #144]	; (800636c <checkAktifCalisma+0x106c>)
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d01b      	beq.n	8006318 <checkAktifCalisma+0x1018>
						&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80062e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062e4:	481e      	ldr	r0, [pc, #120]	; (8006360 <checkAktifCalisma+0x1060>)
 80062e6:	f002 fa53 	bl	8008790 <HAL_GPIO_ReadPin>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d103      	bne.n	80062f8 <checkAktifCalisma+0xff8>
 80062f0:	4b1f      	ldr	r3, [pc, #124]	; (8006370 <checkAktifCalisma+0x1070>)
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d007      	beq.n	8006308 <checkAktifCalisma+0x1008>
						||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80062f8:	4b1f      	ldr	r3, [pc, #124]	; (8006378 <checkAktifCalisma+0x1078>)
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d103      	bne.n	8006308 <checkAktifCalisma+0x1008>
 8006300:	4b1e      	ldr	r3, [pc, #120]	; (800637c <checkAktifCalisma+0x107c>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d007      	beq.n	8006318 <checkAktifCalisma+0x1018>
						&&(makineStop==1)) {
 8006308:	4b1f      	ldr	r3, [pc, #124]	; (8006388 <checkAktifCalisma+0x1088>)
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <checkAktifCalisma+0x1018>

					kapiTablabutonkontrol=1;
 8006310:	4b23      	ldr	r3, [pc, #140]	; (80063a0 <checkAktifCalisma+0x10a0>)
 8006312:	2201      	movs	r2, #1
 8006314:	701a      	strb	r2, [r3, #0]
 8006316:	e002      	b.n	800631e <checkAktifCalisma+0x101e>
				} else {
					kapiTablabutonkontrol=0;
 8006318:	4b21      	ldr	r3, [pc, #132]	; (80063a0 <checkAktifCalisma+0x10a0>)
 800631a:	2200      	movs	r2, #0
 800631c:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800631e:	4b18      	ldr	r3, [pc, #96]	; (8006380 <checkAktifCalisma+0x1080>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	2b02      	cmp	r3, #2
 8006324:	d140      	bne.n	80063a8 <checkAktifCalisma+0x10a8>
 8006326:	4b17      	ldr	r3, [pc, #92]	; (8006384 <checkAktifCalisma+0x1084>)
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b02      	cmp	r3, #2
 800632c:	d003      	beq.n	8006336 <checkAktifCalisma+0x1036>
 800632e:	4b15      	ldr	r3, [pc, #84]	; (8006384 <checkAktifCalisma+0x1084>)
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	2b03      	cmp	r3, #3
 8006334:	d138      	bne.n	80063a8 <checkAktifCalisma+0x10a8>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006336:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <checkAktifCalisma+0x1068>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d103      	bne.n	8006346 <checkAktifCalisma+0x1046>
 800633e:	4b0b      	ldr	r3, [pc, #44]	; (800636c <checkAktifCalisma+0x106c>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d030      	beq.n	80063a8 <checkAktifCalisma+0x10a8>
						&&(makineStop==1)) {
 8006346:	4b10      	ldr	r3, [pc, #64]	; (8006388 <checkAktifCalisma+0x1088>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d02c      	beq.n	80063a8 <checkAktifCalisma+0x10a8>

					kapiTablapizzato=1;
 800634e:	4b15      	ldr	r3, [pc, #84]	; (80063a4 <checkAktifCalisma+0x10a4>)
 8006350:	2201      	movs	r2, #1
 8006352:	701a      	strb	r2, [r3, #0]
 8006354:	e02b      	b.n	80063ae <checkAktifCalisma+0x10ae>
 8006356:	bf00      	nop
 8006358:	40010800 	.word	0x40010800
 800635c:	20000b31 	.word	0x20000b31
 8006360:	40011000 	.word	0x40011000
 8006364:	20000b2a 	.word	0x20000b2a
 8006368:	20000b6f 	.word	0x20000b6f
 800636c:	20000b70 	.word	0x20000b70
 8006370:	20000b30 	.word	0x20000b30
 8006374:	40010c00 	.word	0x40010c00
 8006378:	20000b7f 	.word	0x20000b7f
 800637c:	20000b80 	.word	0x20000b80
 8006380:	20000b2f 	.word	0x20000b2f
 8006384:	20000b2c 	.word	0x20000b2c
 8006388:	20000b65 	.word	0x20000b65
 800638c:	20000b52 	.word	0x20000b52
 8006390:	20000b6c 	.word	0x20000b6c
 8006394:	20000b00 	.word	0x20000b00
 8006398:	20000b04 	.word	0x20000b04
 800639c:	20000b3f 	.word	0x20000b3f
 80063a0:	20000b6d 	.word	0x20000b6d
 80063a4:	20000b6e 	.word	0x20000b6e
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 80063a8:	4b89      	ldr	r3, [pc, #548]	; (80065d0 <checkAktifCalisma+0x12d0>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80063ae:	4b89      	ldr	r3, [pc, #548]	; (80065d4 <checkAktifCalisma+0x12d4>)
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d107      	bne.n	80063c6 <checkAktifCalisma+0x10c6>
 80063b6:	4b88      	ldr	r3, [pc, #544]	; (80065d8 <checkAktifCalisma+0x12d8>)
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d103      	bne.n	80063c6 <checkAktifCalisma+0x10c6>
 80063be:	4b84      	ldr	r3, [pc, #528]	; (80065d0 <checkAktifCalisma+0x12d0>)
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d005      	beq.n	80063d2 <checkAktifCalisma+0x10d2>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80063c6:	2201      	movs	r2, #1
 80063c8:	2120      	movs	r1, #32
 80063ca:	4884      	ldr	r0, [pc, #528]	; (80065dc <checkAktifCalisma+0x12dc>)
 80063cc:	f002 f9f7 	bl	80087be <HAL_GPIO_WritePin>
 80063d0:	e004      	b.n	80063dc <checkAktifCalisma+0x10dc>
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80063d2:	2200      	movs	r2, #0
 80063d4:	2120      	movs	r1, #32
 80063d6:	4881      	ldr	r0, [pc, #516]	; (80065dc <checkAktifCalisma+0x12dc>)
 80063d8:	f002 f9f1 	bl	80087be <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80063dc:	4b80      	ldr	r3, [pc, #512]	; (80065e0 <checkAktifCalisma+0x12e0>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00e      	beq.n	8006402 <checkAktifCalisma+0x1102>
 80063e4:	2102      	movs	r1, #2
 80063e6:	487f      	ldr	r0, [pc, #508]	; (80065e4 <checkAktifCalisma+0x12e4>)
 80063e8:	f002 f9d2 	bl	8008790 <HAL_GPIO_ReadPin>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d107      	bne.n	8006402 <checkAktifCalisma+0x1102>
 80063f2:	4b7d      	ldr	r3, [pc, #500]	; (80065e8 <checkAktifCalisma+0x12e8>)
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d103      	bne.n	8006402 <checkAktifCalisma+0x1102>
 80063fa:	4b7c      	ldr	r3, [pc, #496]	; (80065ec <checkAktifCalisma+0x12ec>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d112      	bne.n	8006428 <checkAktifCalisma+0x1128>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8006402:	4b7b      	ldr	r3, [pc, #492]	; (80065f0 <checkAktifCalisma+0x12f0>)
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d066      	beq.n	80064d8 <checkAktifCalisma+0x11d8>
 800640a:	2104      	movs	r1, #4
 800640c:	4875      	ldr	r0, [pc, #468]	; (80065e4 <checkAktifCalisma+0x12e4>)
 800640e:	f002 f9bf 	bl	8008790 <HAL_GPIO_ReadPin>
 8006412:	4603      	mov	r3, r0
 8006414:	2b01      	cmp	r3, #1
 8006416:	d15f      	bne.n	80064d8 <checkAktifCalisma+0x11d8>
 8006418:	4b73      	ldr	r3, [pc, #460]	; (80065e8 <checkAktifCalisma+0x12e8>)
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d05b      	beq.n	80064d8 <checkAktifCalisma+0x11d8>
 8006420:	4b72      	ldr	r3, [pc, #456]	; (80065ec <checkAktifCalisma+0x12ec>)
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d057      	beq.n	80064d8 <checkAktifCalisma+0x11d8>


					calismaSayisi1=calismaSayisi1+1;
 8006428:	4b72      	ldr	r3, [pc, #456]	; (80065f4 <checkAktifCalisma+0x12f4>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	3301      	adds	r3, #1
 800642e:	b2da      	uxtb	r2, r3
 8006430:	4b70      	ldr	r3, [pc, #448]	; (80065f4 <checkAktifCalisma+0x12f4>)
 8006432:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi1>9) {
 8006434:	4b6f      	ldr	r3, [pc, #444]	; (80065f4 <checkAktifCalisma+0x12f4>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b09      	cmp	r3, #9
 800643a:	d908      	bls.n	800644e <checkAktifCalisma+0x114e>
					  	calismaSayisi1=0;
 800643c:	4b6d      	ldr	r3, [pc, #436]	; (80065f4 <checkAktifCalisma+0x12f4>)
 800643e:	2200      	movs	r2, #0
 8006440:	701a      	strb	r2, [r3, #0]
					  	calismaSayisi10=calismaSayisi10+1;
 8006442:	4b6d      	ldr	r3, [pc, #436]	; (80065f8 <checkAktifCalisma+0x12f8>)
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	3301      	adds	r3, #1
 8006448:	b2da      	uxtb	r2, r3
 800644a:	4b6b      	ldr	r3, [pc, #428]	; (80065f8 <checkAktifCalisma+0x12f8>)
 800644c:	701a      	strb	r2, [r3, #0]
					}
					if(calismaSayisi10>9) {
 800644e:	4b6a      	ldr	r3, [pc, #424]	; (80065f8 <checkAktifCalisma+0x12f8>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b09      	cmp	r3, #9
 8006454:	d908      	bls.n	8006468 <checkAktifCalisma+0x1168>
					  	calismaSayisi10=0;
 8006456:	4b68      	ldr	r3, [pc, #416]	; (80065f8 <checkAktifCalisma+0x12f8>)
 8006458:	2200      	movs	r2, #0
 800645a:	701a      	strb	r2, [r3, #0]
					  	calismaSayisi100=calismaSayisi100+1;
 800645c:	4b67      	ldr	r3, [pc, #412]	; (80065fc <checkAktifCalisma+0x12fc>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	3301      	adds	r3, #1
 8006462:	b2da      	uxtb	r2, r3
 8006464:	4b65      	ldr	r3, [pc, #404]	; (80065fc <checkAktifCalisma+0x12fc>)
 8006466:	701a      	strb	r2, [r3, #0]
					}
					if(calismaSayisi100>9) {
 8006468:	4b64      	ldr	r3, [pc, #400]	; (80065fc <checkAktifCalisma+0x12fc>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b09      	cmp	r3, #9
 800646e:	d908      	bls.n	8006482 <checkAktifCalisma+0x1182>
					  	calismaSayisi100=0;
 8006470:	4b62      	ldr	r3, [pc, #392]	; (80065fc <checkAktifCalisma+0x12fc>)
 8006472:	2200      	movs	r2, #0
 8006474:	701a      	strb	r2, [r3, #0]
					  	calismaSayisi1000=calismaSayisi1000+1;
 8006476:	4b62      	ldr	r3, [pc, #392]	; (8006600 <checkAktifCalisma+0x1300>)
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	3301      	adds	r3, #1
 800647c:	b2da      	uxtb	r2, r3
 800647e:	4b60      	ldr	r3, [pc, #384]	; (8006600 <checkAktifCalisma+0x1300>)
 8006480:	701a      	strb	r2, [r3, #0]
					}
					if(calismaSayisi1000>9) {
 8006482:	4b5f      	ldr	r3, [pc, #380]	; (8006600 <checkAktifCalisma+0x1300>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	2b09      	cmp	r3, #9
 8006488:	d908      	bls.n	800649c <checkAktifCalisma+0x119c>
					  	calismaSayisi1000=0;
 800648a:	4b5d      	ldr	r3, [pc, #372]	; (8006600 <checkAktifCalisma+0x1300>)
 800648c:	2200      	movs	r2, #0
 800648e:	701a      	strb	r2, [r3, #0]
					  	calismaSayisi10000=calismaSayisi10000+1;
 8006490:	4b5c      	ldr	r3, [pc, #368]	; (8006604 <checkAktifCalisma+0x1304>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	3301      	adds	r3, #1
 8006496:	b2da      	uxtb	r2, r3
 8006498:	4b5a      	ldr	r3, [pc, #360]	; (8006604 <checkAktifCalisma+0x1304>)
 800649a:	701a      	strb	r2, [r3, #0]
					}
					eepromData[32]=calismaSayisi10000;
 800649c:	4b59      	ldr	r3, [pc, #356]	; (8006604 <checkAktifCalisma+0x1304>)
 800649e:	781a      	ldrb	r2, [r3, #0]
 80064a0:	4b59      	ldr	r3, [pc, #356]	; (8006608 <checkAktifCalisma+0x1308>)
 80064a2:	f883 2020 	strb.w	r2, [r3, #32]
					eepromData[31]=calismaSayisi1000;
 80064a6:	4b56      	ldr	r3, [pc, #344]	; (8006600 <checkAktifCalisma+0x1300>)
 80064a8:	781a      	ldrb	r2, [r3, #0]
 80064aa:	4b57      	ldr	r3, [pc, #348]	; (8006608 <checkAktifCalisma+0x1308>)
 80064ac:	77da      	strb	r2, [r3, #31]
					eepromData[30]=calismaSayisi100;
 80064ae:	4b53      	ldr	r3, [pc, #332]	; (80065fc <checkAktifCalisma+0x12fc>)
 80064b0:	781a      	ldrb	r2, [r3, #0]
 80064b2:	4b55      	ldr	r3, [pc, #340]	; (8006608 <checkAktifCalisma+0x1308>)
 80064b4:	779a      	strb	r2, [r3, #30]
					eepromData[29]=calismaSayisi10;
 80064b6:	4b50      	ldr	r3, [pc, #320]	; (80065f8 <checkAktifCalisma+0x12f8>)
 80064b8:	781a      	ldrb	r2, [r3, #0]
 80064ba:	4b53      	ldr	r3, [pc, #332]	; (8006608 <checkAktifCalisma+0x1308>)
 80064bc:	775a      	strb	r2, [r3, #29]
					eepromData[28]=calismaSayisi1;
 80064be:	4b4d      	ldr	r3, [pc, #308]	; (80065f4 <checkAktifCalisma+0x12f4>)
 80064c0:	781a      	ldrb	r2, [r3, #0]
 80064c2:	4b51      	ldr	r3, [pc, #324]	; (8006608 <checkAktifCalisma+0x1308>)
 80064c4:	771a      	strb	r2, [r3, #28]

					hafizaYaz=1;
 80064c6:	4b51      	ldr	r3, [pc, #324]	; (800660c <checkAktifCalisma+0x130c>)
 80064c8:	2201      	movs	r2, #1
 80064ca:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 80064cc:	4b44      	ldr	r3, [pc, #272]	; (80065e0 <checkAktifCalisma+0x12e0>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 80064d2:	4b47      	ldr	r3, [pc, #284]	; (80065f0 <checkAktifCalisma+0x12f0>)
 80064d4:	2200      	movs	r2, #0
 80064d6:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80064d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064dc:	484c      	ldr	r0, [pc, #304]	; (8006610 <checkAktifCalisma+0x1310>)
 80064de:	f002 f957 	bl	8008790 <HAL_GPIO_ReadPin>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d016      	beq.n	8006516 <checkAktifCalisma+0x1216>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80064e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80064ec:	4848      	ldr	r0, [pc, #288]	; (8006610 <checkAktifCalisma+0x1310>)
 80064ee:	f002 f94f 	bl	8008790 <HAL_GPIO_ReadPin>
 80064f2:	4603      	mov	r3, r0
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00e      	beq.n	8006516 <checkAktifCalisma+0x1216>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80064f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064fc:	4844      	ldr	r0, [pc, #272]	; (8006610 <checkAktifCalisma+0x1310>)
 80064fe:	f002 f947 	bl	8008790 <HAL_GPIO_ReadPin>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d006      	beq.n	8006516 <checkAktifCalisma+0x1216>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006508:	2140      	movs	r1, #64	; 0x40
 800650a:	4836      	ldr	r0, [pc, #216]	; (80065e4 <checkAktifCalisma+0x12e4>)
 800650c:	f002 f940 	bl	8008790 <HAL_GPIO_ReadPin>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d103      	bne.n	800651e <checkAktifCalisma+0x121e>

					startBasili=1;
 8006516:	4b3f      	ldr	r3, [pc, #252]	; (8006614 <checkAktifCalisma+0x1314>)
 8006518:	2201      	movs	r2, #1
 800651a:	701a      	strb	r2, [r3, #0]
 800651c:	e002      	b.n	8006524 <checkAktifCalisma+0x1224>
				} else {
					startBasili=0;
 800651e:	4b3d      	ldr	r3, [pc, #244]	; (8006614 <checkAktifCalisma+0x1314>)
 8006520:	2200      	movs	r2, #0
 8006522:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006524:	4b3b      	ldr	r3, [pc, #236]	; (8006614 <checkAktifCalisma+0x1314>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d014      	beq.n	8006556 <checkAktifCalisma+0x1256>
 800652c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006530:	4837      	ldr	r0, [pc, #220]	; (8006610 <checkAktifCalisma+0x1310>)
 8006532:	f002 f92d 	bl	8008790 <HAL_GPIO_ReadPin>
 8006536:	4603      	mov	r3, r0
 8006538:	2b01      	cmp	r3, #1
 800653a:	d10c      	bne.n	8006556 <checkAktifCalisma+0x1256>

					hataVar=1;
 800653c:	4b36      	ldr	r3, [pc, #216]	; (8006618 <checkAktifCalisma+0x1318>)
 800653e:	2201      	movs	r2, #1
 8006540:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 8006542:	2001      	movs	r0, #1
 8006544:	f7fe f8f0 	bl	8004728 <hataKoduLcdGoster>
					hata2EEPROM(1);
 8006548:	2001      	movs	r0, #1
 800654a:	f7fe fc2f 	bl	8004dac <hata2EEPROM>
					acilstophatasi=1;
 800654e:	4b33      	ldr	r3, [pc, #204]	; (800661c <checkAktifCalisma+0x131c>)
 8006550:	2201      	movs	r2, #1
 8006552:	701a      	strb	r2, [r3, #0]
 8006554:	e018      	b.n	8006588 <checkAktifCalisma+0x1288>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006556:	4b31      	ldr	r3, [pc, #196]	; (800661c <checkAktifCalisma+0x131c>)
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d014      	beq.n	8006588 <checkAktifCalisma+0x1288>
 800655e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006562:	482b      	ldr	r0, [pc, #172]	; (8006610 <checkAktifCalisma+0x1310>)
 8006564:	f002 f914 	bl	8008790 <HAL_GPIO_ReadPin>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10c      	bne.n	8006588 <checkAktifCalisma+0x1288>
 800656e:	4b29      	ldr	r3, [pc, #164]	; (8006614 <checkAktifCalisma+0x1314>)
 8006570:	781b      	ldrb	r3, [r3, #0]
 8006572:	f083 0301 	eor.w	r3, r3, #1
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <checkAktifCalisma+0x1288>
					acilstophatasi=0;
 800657c:	4b27      	ldr	r3, [pc, #156]	; (800661c <checkAktifCalisma+0x131c>)
 800657e:	2200      	movs	r2, #0
 8006580:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 8006582:	2001      	movs	r0, #1
 8006584:	f7fe f87c 	bl	8004680 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006588:	4b25      	ldr	r3, [pc, #148]	; (8006620 <checkAktifCalisma+0x1320>)
 800658a:	781b      	ldrb	r3, [r3, #0]
 800658c:	f083 0301 	eor.w	r3, r3, #1
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b00      	cmp	r3, #0
 8006594:	d04c      	beq.n	8006630 <checkAktifCalisma+0x1330>
 8006596:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800659a:	481d      	ldr	r0, [pc, #116]	; (8006610 <checkAktifCalisma+0x1310>)
 800659c:	f002 f8f8 	bl	8008790 <HAL_GPIO_ReadPin>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <checkAktifCalisma+0x12ae>
 80065a6:	4b1f      	ldr	r3, [pc, #124]	; (8006624 <checkAktifCalisma+0x1324>)
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d040      	beq.n	8006630 <checkAktifCalisma+0x1330>
 80065ae:	4b1e      	ldr	r3, [pc, #120]	; (8006628 <checkAktifCalisma+0x1328>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d13c      	bne.n	8006630 <checkAktifCalisma+0x1330>
					hataVar=1;
 80065b6:	4b18      	ldr	r3, [pc, #96]	; (8006618 <checkAktifCalisma+0x1318>)
 80065b8:	2201      	movs	r2, #1
 80065ba:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 80065bc:	2002      	movs	r0, #2
 80065be:	f7fe f8b3 	bl	8004728 <hataKoduLcdGoster>
					hata2EEPROM(2);
 80065c2:	2002      	movs	r0, #2
 80065c4:	f7fe fbf2 	bl	8004dac <hata2EEPROM>
					emniyetCercevesihatasi=1;
 80065c8:	4b18      	ldr	r3, [pc, #96]	; (800662c <checkAktifCalisma+0x132c>)
 80065ca:	2201      	movs	r2, #1
 80065cc:	701a      	strb	r2, [r3, #0]
 80065ce:	e047      	b.n	8006660 <checkAktifCalisma+0x1360>
 80065d0:	20000b6e 	.word	0x20000b6e
 80065d4:	20000b6d 	.word	0x20000b6d
 80065d8:	20000b6c 	.word	0x20000b6c
 80065dc:	40010800 	.word	0x40010800
 80065e0:	20000b62 	.word	0x20000b62
 80065e4:	40011000 	.word	0x40011000
 80065e8:	20000b2a 	.word	0x20000b2a
 80065ec:	20000b65 	.word	0x20000b65
 80065f0:	20000b63 	.word	0x20000b63
 80065f4:	20000b21 	.word	0x20000b21
 80065f8:	20000b22 	.word	0x20000b22
 80065fc:	20000941 	.word	0x20000941
 8006600:	20000942 	.word	0x20000942
 8006604:	20000b23 	.word	0x20000b23
 8006608:	20000ab8 	.word	0x20000ab8
 800660c:	20000b4f 	.word	0x20000b4f
 8006610:	40010c00 	.word	0x40010c00
 8006614:	20000b71 	.word	0x20000b71
 8006618:	20000b78 	.word	0x20000b78
 800661c:	20000b73 	.word	0x20000b73
 8006620:	20000b7a 	.word	0x20000b7a
 8006624:	20000b84 	.word	0x20000b84
 8006628:	20000b28 	.word	0x20000b28
 800662c:	20000b74 	.word	0x20000b74
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006630:	4b97      	ldr	r3, [pc, #604]	; (8006890 <checkAktifCalisma+0x1590>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d013      	beq.n	8006660 <checkAktifCalisma+0x1360>
 8006638:	4b96      	ldr	r3, [pc, #600]	; (8006894 <checkAktifCalisma+0x1594>)
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d00f      	beq.n	8006660 <checkAktifCalisma+0x1360>
 8006640:	4b95      	ldr	r3, [pc, #596]	; (8006898 <checkAktifCalisma+0x1598>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	f083 0301 	eor.w	r3, r3, #1
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d008      	beq.n	8006660 <checkAktifCalisma+0x1360>
					emniyetCercevesihatasi=0;
 800664e:	4b90      	ldr	r3, [pc, #576]	; (8006890 <checkAktifCalisma+0x1590>)
 8006650:	2200      	movs	r2, #0
 8006652:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 8006654:	4b91      	ldr	r3, [pc, #580]	; (800689c <checkAktifCalisma+0x159c>)
 8006656:	2200      	movs	r2, #0
 8006658:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 800665a:	2002      	movs	r0, #2
 800665c:	f7fe f810 	bl	8004680 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006660:	4b8f      	ldr	r3, [pc, #572]	; (80068a0 <checkAktifCalisma+0x15a0>)
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d11c      	bne.n	80066a2 <checkAktifCalisma+0x13a2>
 8006668:	4b8e      	ldr	r3, [pc, #568]	; (80068a4 <checkAktifCalisma+0x15a4>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d118      	bne.n	80066a2 <checkAktifCalisma+0x13a2>
 8006670:	4b8d      	ldr	r3, [pc, #564]	; (80068a8 <checkAktifCalisma+0x15a8>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d014      	beq.n	80066a2 <checkAktifCalisma+0x13a2>
 8006678:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800667c:	488b      	ldr	r0, [pc, #556]	; (80068ac <checkAktifCalisma+0x15ac>)
 800667e:	f002 f887 	bl	8008790 <HAL_GPIO_ReadPin>
 8006682:	4603      	mov	r3, r0
 8006684:	2b01      	cmp	r3, #1
 8006686:	d10c      	bne.n	80066a2 <checkAktifCalisma+0x13a2>
					hataVar=1;
 8006688:	4b89      	ldr	r3, [pc, #548]	; (80068b0 <checkAktifCalisma+0x15b0>)
 800668a:	2201      	movs	r2, #1
 800668c:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 800668e:	2003      	movs	r0, #3
 8006690:	f7fe f84a 	bl	8004728 <hataKoduLcdGoster>
					hata2EEPROM(3);
 8006694:	2003      	movs	r0, #3
 8006696:	f7fe fb89 	bl	8004dac <hata2EEPROM>
					basinchatasi=1;
 800669a:	4b86      	ldr	r3, [pc, #536]	; (80068b4 <checkAktifCalisma+0x15b4>)
 800669c:	2201      	movs	r2, #1
 800669e:	701a      	strb	r2, [r3, #0]
 80066a0:	e015      	b.n	80066ce <checkAktifCalisma+0x13ce>
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80066a2:	4b84      	ldr	r3, [pc, #528]	; (80068b4 <checkAktifCalisma+0x15b4>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d011      	beq.n	80066ce <checkAktifCalisma+0x13ce>
 80066aa:	4b7d      	ldr	r3, [pc, #500]	; (80068a0 <checkAktifCalisma+0x15a0>)
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d10d      	bne.n	80066ce <checkAktifCalisma+0x13ce>
 80066b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066b6:	4880      	ldr	r0, [pc, #512]	; (80068b8 <checkAktifCalisma+0x15b8>)
 80066b8:	f002 f86a 	bl	8008790 <HAL_GPIO_ReadPin>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d105      	bne.n	80066ce <checkAktifCalisma+0x13ce>
					basinchatasi=0;
 80066c2:	4b7c      	ldr	r3, [pc, #496]	; (80068b4 <checkAktifCalisma+0x15b4>)
 80066c4:	2200      	movs	r2, #0
 80066c6:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 80066c8:	2003      	movs	r0, #3
 80066ca:	f7fd ffd9 	bl	8004680 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80066ce:	4b7b      	ldr	r3, [pc, #492]	; (80068bc <checkAktifCalisma+0x15bc>)
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d103      	bne.n	80066de <checkAktifCalisma+0x13de>
 80066d6:	4b7a      	ldr	r3, [pc, #488]	; (80068c0 <checkAktifCalisma+0x15c0>)
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d01c      	beq.n	8006718 <checkAktifCalisma+0x1418>
 80066de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066e2:	4878      	ldr	r0, [pc, #480]	; (80068c4 <checkAktifCalisma+0x15c4>)
 80066e4:	f002 f854 	bl	8008790 <HAL_GPIO_ReadPin>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d114      	bne.n	8006718 <checkAktifCalisma+0x1418>
 80066ee:	4b76      	ldr	r3, [pc, #472]	; (80068c8 <checkAktifCalisma+0x15c8>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d003      	beq.n	80066fe <checkAktifCalisma+0x13fe>
 80066f6:	4b74      	ldr	r3, [pc, #464]	; (80068c8 <checkAktifCalisma+0x15c8>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	d10c      	bne.n	8006718 <checkAktifCalisma+0x1418>
					hataVar=1;
 80066fe:	4b6c      	ldr	r3, [pc, #432]	; (80068b0 <checkAktifCalisma+0x15b0>)
 8006700:	2201      	movs	r2, #1
 8006702:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8006704:	2004      	movs	r0, #4
 8006706:	f7fe f80f 	bl	8004728 <hataKoduLcdGoster>
					hata2EEPROM(4);
 800670a:	2004      	movs	r0, #4
 800670c:	f7fe fb4e 	bl	8004dac <hata2EEPROM>
					katkapisivicihatasi=1;
 8006710:	4b6e      	ldr	r3, [pc, #440]	; (80068cc <checkAktifCalisma+0x15cc>)
 8006712:	2201      	movs	r2, #1
 8006714:	701a      	strb	r2, [r3, #0]
 8006716:	e01f      	b.n	8006758 <checkAktifCalisma+0x1458>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006718:	4b6c      	ldr	r3, [pc, #432]	; (80068cc <checkAktifCalisma+0x15cc>)
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d01b      	beq.n	8006758 <checkAktifCalisma+0x1458>
 8006720:	4b6b      	ldr	r3, [pc, #428]	; (80068d0 <checkAktifCalisma+0x15d0>)
 8006722:	781b      	ldrb	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d017      	beq.n	8006758 <checkAktifCalisma+0x1458>
 8006728:	4b64      	ldr	r3, [pc, #400]	; (80068bc <checkAktifCalisma+0x15bc>)
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	f083 0301 	eor.w	r3, r3, #1
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d010      	beq.n	8006758 <checkAktifCalisma+0x1458>
 8006736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800673a:	4862      	ldr	r0, [pc, #392]	; (80068c4 <checkAktifCalisma+0x15c4>)
 800673c:	f002 f828 	bl	8008790 <HAL_GPIO_ReadPin>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d108      	bne.n	8006758 <checkAktifCalisma+0x1458>

					katkapisivicihatasi=0;
 8006746:	4b61      	ldr	r3, [pc, #388]	; (80068cc <checkAktifCalisma+0x15cc>)
 8006748:	2200      	movs	r2, #0
 800674a:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 800674c:	4b5c      	ldr	r3, [pc, #368]	; (80068c0 <checkAktifCalisma+0x15c0>)
 800674e:	2200      	movs	r2, #0
 8006750:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8006752:	2004      	movs	r0, #4
 8006754:	f7fd ff94 	bl	8004680 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006758:	4b58      	ldr	r3, [pc, #352]	; (80068bc <checkAktifCalisma+0x15bc>)
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d103      	bne.n	8006768 <checkAktifCalisma+0x1468>
 8006760:	4b5c      	ldr	r3, [pc, #368]	; (80068d4 <checkAktifCalisma+0x15d4>)
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d01c      	beq.n	80067a2 <checkAktifCalisma+0x14a2>
 8006768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800676c:	4855      	ldr	r0, [pc, #340]	; (80068c4 <checkAktifCalisma+0x15c4>)
 800676e:	f002 f80f 	bl	8008790 <HAL_GPIO_ReadPin>
 8006772:	4603      	mov	r3, r0
 8006774:	2b01      	cmp	r3, #1
 8006776:	d114      	bne.n	80067a2 <checkAktifCalisma+0x14a2>
 8006778:	4b53      	ldr	r3, [pc, #332]	; (80068c8 <checkAktifCalisma+0x15c8>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d003      	beq.n	8006788 <checkAktifCalisma+0x1488>
 8006780:	4b51      	ldr	r3, [pc, #324]	; (80068c8 <checkAktifCalisma+0x15c8>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b03      	cmp	r3, #3
 8006786:	d10c      	bne.n	80067a2 <checkAktifCalisma+0x14a2>

					hataVar=1;
 8006788:	4b49      	ldr	r3, [pc, #292]	; (80068b0 <checkAktifCalisma+0x15b0>)
 800678a:	2201      	movs	r2, #1
 800678c:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 800678e:	2005      	movs	r0, #5
 8006790:	f7fd ffca 	bl	8004728 <hataKoduLcdGoster>
					hata2EEPROM(5);
 8006794:	2005      	movs	r0, #5
 8006796:	f7fe fb09 	bl	8004dac <hata2EEPROM>
					tablakapisivicihatasi=1;
 800679a:	4b4f      	ldr	r3, [pc, #316]	; (80068d8 <checkAktifCalisma+0x15d8>)
 800679c:	2201      	movs	r2, #1
 800679e:	701a      	strb	r2, [r3, #0]
 80067a0:	e023      	b.n	80067ea <checkAktifCalisma+0x14ea>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80067a2:	4b4d      	ldr	r3, [pc, #308]	; (80068d8 <checkAktifCalisma+0x15d8>)
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d01f      	beq.n	80067ea <checkAktifCalisma+0x14ea>
 80067aa:	4b49      	ldr	r3, [pc, #292]	; (80068d0 <checkAktifCalisma+0x15d0>)
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d01b      	beq.n	80067ea <checkAktifCalisma+0x14ea>
 80067b2:	4b42      	ldr	r3, [pc, #264]	; (80068bc <checkAktifCalisma+0x15bc>)
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	f083 0301 	eor.w	r3, r3, #1
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d014      	beq.n	80067ea <checkAktifCalisma+0x14ea>
 80067c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80067c4:	483f      	ldr	r0, [pc, #252]	; (80068c4 <checkAktifCalisma+0x15c4>)
 80067c6:	f001 ffe3 	bl	8008790 <HAL_GPIO_ReadPin>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10c      	bne.n	80067ea <checkAktifCalisma+0x14ea>
 80067d0:	4b3f      	ldr	r3, [pc, #252]	; (80068d0 <checkAktifCalisma+0x15d0>)
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d008      	beq.n	80067ea <checkAktifCalisma+0x14ea>
					tablakapisivicihatasi=0;
 80067d8:	4b3f      	ldr	r3, [pc, #252]	; (80068d8 <checkAktifCalisma+0x15d8>)
 80067da:	2200      	movs	r2, #0
 80067dc:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 80067de:	4b3d      	ldr	r3, [pc, #244]	; (80068d4 <checkAktifCalisma+0x15d4>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 80067e4:	2005      	movs	r0, #5
 80067e6:	f7fd ff4b 	bl	8004680 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80067ea:	4b2f      	ldr	r3, [pc, #188]	; (80068a8 <checkAktifCalisma+0x15a8>)
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d107      	bne.n	8006802 <checkAktifCalisma+0x1502>
 80067f2:	4b29      	ldr	r3, [pc, #164]	; (8006898 <checkAktifCalisma+0x1598>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d103      	bne.n	8006802 <checkAktifCalisma+0x1502>
 80067fa:	4b38      	ldr	r3, [pc, #224]	; (80068dc <checkAktifCalisma+0x15dc>)
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d014      	beq.n	800682c <checkAktifCalisma+0x152c>
				    if(millis-timer4>=makineCalismaTmr) {
 8006802:	4b37      	ldr	r3, [pc, #220]	; (80068e0 <checkAktifCalisma+0x15e0>)
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	4b37      	ldr	r3, [pc, #220]	; (80068e4 <checkAktifCalisma+0x15e4>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	4a36      	ldr	r2, [pc, #216]	; (80068e8 <checkAktifCalisma+0x15e8>)
 800680e:	7812      	ldrb	r2, [r2, #0]
 8006810:	4293      	cmp	r3, r2
 8006812:	d30b      	bcc.n	800682c <checkAktifCalisma+0x152c>
					  	hataVar=1;
 8006814:	4b26      	ldr	r3, [pc, #152]	; (80068b0 <checkAktifCalisma+0x15b0>)
 8006816:	2201      	movs	r2, #1
 8006818:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 800681a:	2006      	movs	r0, #6
 800681c:	f7fd ff84 	bl	8004728 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8006820:	2006      	movs	r0, #6
 8006822:	f7fe fac3 	bl	8004dac <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8006826:	4b31      	ldr	r3, [pc, #196]	; (80068ec <checkAktifCalisma+0x15ec>)
 8006828:	2201      	movs	r2, #1
 800682a:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 800682c:	4b2f      	ldr	r3, [pc, #188]	; (80068ec <checkAktifCalisma+0x15ec>)
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d013      	beq.n	800685c <checkAktifCalisma+0x155c>
 8006834:	2108      	movs	r1, #8
 8006836:	4823      	ldr	r0, [pc, #140]	; (80068c4 <checkAktifCalisma+0x15c4>)
 8006838:	f001 ffaa 	bl	8008790 <HAL_GPIO_ReadPin>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00c      	beq.n	800685c <checkAktifCalisma+0x155c>
 8006842:	4b1e      	ldr	r3, [pc, #120]	; (80068bc <checkAktifCalisma+0x15bc>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	f083 0301 	eor.w	r3, r3, #1
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <checkAktifCalisma+0x155c>
					maksimumcalismahatasi=0;
 8006850:	4b26      	ldr	r3, [pc, #152]	; (80068ec <checkAktifCalisma+0x15ec>)
 8006852:	2200      	movs	r2, #0
 8006854:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8006856:	2006      	movs	r0, #6
 8006858:	f7fd ff12 	bl	8004680 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 800685c:	4b24      	ldr	r3, [pc, #144]	; (80068f0 <checkAktifCalisma+0x15f0>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10b      	bne.n	800687c <checkAktifCalisma+0x157c>
 8006864:	4b0c      	ldr	r3, [pc, #48]	; (8006898 <checkAktifCalisma+0x1598>)
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d107      	bne.n	800687c <checkAktifCalisma+0x157c>
 800686c:	4b21      	ldr	r3, [pc, #132]	; (80068f4 <checkAktifCalisma+0x15f4>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d103      	bne.n	800687c <checkAktifCalisma+0x157c>
 8006874:	4b19      	ldr	r3, [pc, #100]	; (80068dc <checkAktifCalisma+0x15dc>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d03f      	beq.n	80068fc <checkAktifCalisma+0x15fc>
					makineCalisiyor=0;
 800687c:	4b1e      	ldr	r3, [pc, #120]	; (80068f8 <checkAktifCalisma+0x15f8>)
 800687e:	2200      	movs	r2, #0
 8006880:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8006882:	4b0f      	ldr	r3, [pc, #60]	; (80068c0 <checkAktifCalisma+0x15c0>)
 8006884:	2201      	movs	r2, #1
 8006886:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8006888:	4b12      	ldr	r3, [pc, #72]	; (80068d4 <checkAktifCalisma+0x15d4>)
 800688a:	2201      	movs	r2, #1
 800688c:	701a      	strb	r2, [r3, #0]
 800688e:	e03c      	b.n	800690a <checkAktifCalisma+0x160a>
 8006890:	20000b74 	.word	0x20000b74
 8006894:	20000b7a 	.word	0x20000b7a
 8006898:	20000b5b 	.word	0x20000b5b
 800689c:	20000b84 	.word	0x20000b84
 80068a0:	20000b27 	.word	0x20000b27
 80068a4:	20000b2b 	.word	0x20000b2b
 80068a8:	20000b77 	.word	0x20000b77
 80068ac:	40011000 	.word	0x40011000
 80068b0:	20000b78 	.word	0x20000b78
 80068b4:	20000b81 	.word	0x20000b81
 80068b8:	40010c00 	.word	0x40010c00
 80068bc:	20000b71 	.word	0x20000b71
 80068c0:	20000b85 	.word	0x20000b85
 80068c4:	40010800 	.word	0x40010800
 80068c8:	20000b2c 	.word	0x20000b2c
 80068cc:	20000b82 	.word	0x20000b82
 80068d0:	20000b65 	.word	0x20000b65
 80068d4:	20000b86 	.word	0x20000b86
 80068d8:	20000b83 	.word	0x20000b83
 80068dc:	20000b5a 	.word	0x20000b5a
 80068e0:	20000b00 	.word	0x20000b00
 80068e4:	20000b14 	.word	0x20000b14
 80068e8:	20000b3c 	.word	0x20000b3c
 80068ec:	20000b72 	.word	0x20000b72
 80068f0:	20000b58 	.word	0x20000b58
 80068f4:	20000b59 	.word	0x20000b59
 80068f8:	20000b79 	.word	0x20000b79
				} else {
					makineCalisiyor=1;
 80068fc:	4b1e      	ldr	r3, [pc, #120]	; (8006978 <checkAktifCalisma+0x1678>)
 80068fe:	2201      	movs	r2, #1
 8006900:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8006902:	4b1e      	ldr	r3, [pc, #120]	; (800697c <checkAktifCalisma+0x167c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a1e      	ldr	r2, [pc, #120]	; (8006980 <checkAktifCalisma+0x1680>)
 8006908:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800690a:	4b1e      	ldr	r3, [pc, #120]	; (8006984 <checkAktifCalisma+0x1684>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d02f      	beq.n	8006972 <checkAktifCalisma+0x1672>
 8006912:	4b1d      	ldr	r3, [pc, #116]	; (8006988 <checkAktifCalisma+0x1688>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	f083 0301 	eor.w	r3, r3, #1
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d028      	beq.n	8006972 <checkAktifCalisma+0x1672>
 8006920:	4b1a      	ldr	r3, [pc, #104]	; (800698c <checkAktifCalisma+0x168c>)
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	f083 0301 	eor.w	r3, r3, #1
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d021      	beq.n	8006972 <checkAktifCalisma+0x1672>
 800692e:	4b18      	ldr	r3, [pc, #96]	; (8006990 <checkAktifCalisma+0x1690>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	f083 0301 	eor.w	r3, r3, #1
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01a      	beq.n	8006972 <checkAktifCalisma+0x1672>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 800693c:	4b15      	ldr	r3, [pc, #84]	; (8006994 <checkAktifCalisma+0x1694>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	f083 0301 	eor.w	r3, r3, #1
 8006944:	b2db      	uxtb	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d013      	beq.n	8006972 <checkAktifCalisma+0x1672>
 800694a:	4b13      	ldr	r3, [pc, #76]	; (8006998 <checkAktifCalisma+0x1698>)
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	f083 0301 	eor.w	r3, r3, #1
 8006952:	b2db      	uxtb	r3, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00c      	beq.n	8006972 <checkAktifCalisma+0x1672>
 8006958:	4b10      	ldr	r3, [pc, #64]	; (800699c <checkAktifCalisma+0x169c>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	f083 0301 	eor.w	r3, r3, #1
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d005      	beq.n	8006972 <checkAktifCalisma+0x1672>

					hataVar=0;
 8006966:	4b07      	ldr	r3, [pc, #28]	; (8006984 <checkAktifCalisma+0x1684>)
 8006968:	2200      	movs	r2, #0
 800696a:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 800696c:	2007      	movs	r0, #7
 800696e:	f7fd fe87 	bl	8004680 <lcdUpdate>
				}


				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 8006972:	bf00      	nop
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20000b79 	.word	0x20000b79
 800697c:	20000b00 	.word	0x20000b00
 8006980:	20000b14 	.word	0x20000b14
 8006984:	20000b78 	.word	0x20000b78
 8006988:	20000b73 	.word	0x20000b73
 800698c:	20000b74 	.word	0x20000b74
 8006990:	20000b81 	.word	0x20000b81
 8006994:	20000b82 	.word	0x20000b82
 8006998:	20000b83 	.word	0x20000b83
 800699c:	20000b72 	.word	0x20000b72

080069a0 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80069a0:	b580      	push	{r7, lr}
 80069a2:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80069a4:	4b8b      	ldr	r3, [pc, #556]	; (8006bd4 <checkDemoModCalisma+0x234>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	f040 8229 	bne.w	8006e00 <checkDemoModCalisma+0x460>
 80069ae:	4b8a      	ldr	r3, [pc, #552]	; (8006bd8 <checkDemoModCalisma+0x238>)
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 8224 	beq.w	8006e00 <checkDemoModCalisma+0x460>
 80069b8:	4b88      	ldr	r3, [pc, #544]	; (8006bdc <checkDemoModCalisma+0x23c>)
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f040 821f 	bne.w	8006e00 <checkDemoModCalisma+0x460>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80069c2:	2102      	movs	r1, #2
 80069c4:	4886      	ldr	r0, [pc, #536]	; (8006be0 <checkDemoModCalisma+0x240>)
 80069c6:	f001 fee3 	bl	8008790 <HAL_GPIO_ReadPin>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d11d      	bne.n	8006a0c <checkDemoModCalisma+0x6c>
						&& (demoAsagiCalis==0)
 80069d0:	4b84      	ldr	r3, [pc, #528]	; (8006be4 <checkDemoModCalisma+0x244>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	f083 0301 	eor.w	r3, r3, #1
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d016      	beq.n	8006a0c <checkDemoModCalisma+0x6c>
						&& (demoDevYukari==0)
 80069de:	4b82      	ldr	r3, [pc, #520]	; (8006be8 <checkDemoModCalisma+0x248>)
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	f083 0301 	eor.w	r3, r3, #1
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d00f      	beq.n	8006a0c <checkDemoModCalisma+0x6c>
						&& (demoDevAsagi==0)) {
 80069ec:	4b7f      	ldr	r3, [pc, #508]	; (8006bec <checkDemoModCalisma+0x24c>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	f083 0301 	eor.w	r3, r3, #1
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d008      	beq.n	8006a0c <checkDemoModCalisma+0x6c>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80069fa:	2201      	movs	r2, #1
 80069fc:	2104      	movs	r1, #4
 80069fe:	487c      	ldr	r0, [pc, #496]	; (8006bf0 <checkDemoModCalisma+0x250>)
 8006a00:	f001 fedd 	bl	80087be <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8006a04:	4b7b      	ldr	r3, [pc, #492]	; (8006bf4 <checkDemoModCalisma+0x254>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	701a      	strb	r2, [r3, #0]
 8006a0a:	e00e      	b.n	8006a2a <checkDemoModCalisma+0x8a>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006a0c:	2102      	movs	r1, #2
 8006a0e:	4874      	ldr	r0, [pc, #464]	; (8006be0 <checkDemoModCalisma+0x240>)
 8006a10:	f001 febe 	bl	8008790 <HAL_GPIO_ReadPin>
 8006a14:	4603      	mov	r3, r0
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d107      	bne.n	8006a2a <checkDemoModCalisma+0x8a>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2104      	movs	r1, #4
 8006a1e:	4874      	ldr	r0, [pc, #464]	; (8006bf0 <checkDemoModCalisma+0x250>)
 8006a20:	f001 fecd 	bl	80087be <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8006a24:	4b73      	ldr	r3, [pc, #460]	; (8006bf4 <checkDemoModCalisma+0x254>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006a2a:	4b72      	ldr	r3, [pc, #456]	; (8006bf4 <checkDemoModCalisma+0x254>)
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d10b      	bne.n	8006a4a <checkDemoModCalisma+0xaa>
 8006a32:	4b6d      	ldr	r3, [pc, #436]	; (8006be8 <checkDemoModCalisma+0x248>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d107      	bne.n	8006a4a <checkDemoModCalisma+0xaa>
 8006a3a:	4b6c      	ldr	r3, [pc, #432]	; (8006bec <checkDemoModCalisma+0x24c>)
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d103      	bne.n	8006a4a <checkDemoModCalisma+0xaa>
 8006a42:	4b68      	ldr	r3, [pc, #416]	; (8006be4 <checkDemoModCalisma+0x244>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00c      	beq.n	8006a64 <checkDemoModCalisma+0xc4>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a50:	4867      	ldr	r0, [pc, #412]	; (8006bf0 <checkDemoModCalisma+0x250>)
 8006a52:	f001 feb4 	bl	80087be <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006a56:	2201      	movs	r2, #1
 8006a58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a5c:	4864      	ldr	r0, [pc, #400]	; (8006bf0 <checkDemoModCalisma+0x250>)
 8006a5e:	f001 feae 	bl	80087be <HAL_GPIO_WritePin>
 8006a62:	e00b      	b.n	8006a7c <checkDemoModCalisma+0xdc>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006a64:	2200      	movs	r2, #0
 8006a66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006a6a:	4861      	ldr	r0, [pc, #388]	; (8006bf0 <checkDemoModCalisma+0x250>)
 8006a6c:	f001 fea7 	bl	80087be <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006a70:	2200      	movs	r2, #0
 8006a72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a76:	485e      	ldr	r0, [pc, #376]	; (8006bf0 <checkDemoModCalisma+0x250>)
 8006a78:	f001 fea1 	bl	80087be <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006a7c:	2102      	movs	r1, #2
 8006a7e:	4858      	ldr	r0, [pc, #352]	; (8006be0 <checkDemoModCalisma+0x240>)
 8006a80:	f001 fe86 	bl	8008790 <HAL_GPIO_ReadPin>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d10d      	bne.n	8006aa6 <checkDemoModCalisma+0x106>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006a8a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a8e:	4854      	ldr	r0, [pc, #336]	; (8006be0 <checkDemoModCalisma+0x240>)
 8006a90:	f001 fe7e 	bl	8008790 <HAL_GPIO_ReadPin>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d105      	bne.n	8006aa6 <checkDemoModCalisma+0x106>
						&& (demoYukariCalis==0)
 8006a9a:	4b56      	ldr	r3, [pc, #344]	; (8006bf4 <checkDemoModCalisma+0x254>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	f083 0301 	eor.w	r3, r3, #1
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006aa6:	2102      	movs	r1, #2
 8006aa8:	484d      	ldr	r0, [pc, #308]	; (8006be0 <checkDemoModCalisma+0x240>)
 8006aaa:	f001 fe71 	bl	8008790 <HAL_GPIO_ReadPin>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d125      	bne.n	8006b00 <checkDemoModCalisma+0x160>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006ab4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ab8:	4849      	ldr	r0, [pc, #292]	; (8006be0 <checkDemoModCalisma+0x240>)
 8006aba:	f001 fe69 	bl	8008790 <HAL_GPIO_ReadPin>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d11d      	bne.n	8006b00 <checkDemoModCalisma+0x160>
						&&(demoYukariCalis==0)
 8006ac4:	4b4b      	ldr	r3, [pc, #300]	; (8006bf4 <checkDemoModCalisma+0x254>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	f083 0301 	eor.w	r3, r3, #1
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d016      	beq.n	8006b00 <checkDemoModCalisma+0x160>
						&&(demoAsagiCalis==0)
 8006ad2:	4b44      	ldr	r3, [pc, #272]	; (8006be4 <checkDemoModCalisma+0x244>)
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	f083 0301 	eor.w	r3, r3, #1
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d00f      	beq.n	8006b00 <checkDemoModCalisma+0x160>
						&& (demoDevAsagi==0)) {
 8006ae0:	4b42      	ldr	r3, [pc, #264]	; (8006bec <checkDemoModCalisma+0x24c>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	f083 0301 	eor.w	r3, r3, #1
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d008      	beq.n	8006b00 <checkDemoModCalisma+0x160>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006aee:	2201      	movs	r2, #1
 8006af0:	2120      	movs	r1, #32
 8006af2:	483b      	ldr	r0, [pc, #236]	; (8006be0 <checkDemoModCalisma+0x240>)
 8006af4:	f001 fe63 	bl	80087be <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8006af8:	4b3b      	ldr	r3, [pc, #236]	; (8006be8 <checkDemoModCalisma+0x248>)
 8006afa:	2201      	movs	r2, #1
 8006afc:	701a      	strb	r2, [r3, #0]
 8006afe:	e007      	b.n	8006b10 <checkDemoModCalisma+0x170>
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006b00:	2200      	movs	r2, #0
 8006b02:	2120      	movs	r1, #32
 8006b04:	4836      	ldr	r0, [pc, #216]	; (8006be0 <checkDemoModCalisma+0x240>)
 8006b06:	f001 fe5a 	bl	80087be <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8006b0a:	4b37      	ldr	r3, [pc, #220]	; (8006be8 <checkDemoModCalisma+0x248>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006b10:	2102      	movs	r1, #2
 8006b12:	4833      	ldr	r0, [pc, #204]	; (8006be0 <checkDemoModCalisma+0x240>)
 8006b14:	f001 fe3c 	bl	8008790 <HAL_GPIO_ReadPin>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d125      	bne.n	8006b6a <checkDemoModCalisma+0x1ca>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006b1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b22:	482f      	ldr	r0, [pc, #188]	; (8006be0 <checkDemoModCalisma+0x240>)
 8006b24:	f001 fe34 	bl	8008790 <HAL_GPIO_ReadPin>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d11d      	bne.n	8006b6a <checkDemoModCalisma+0x1ca>
						&&(demoYukariCalis==0)
 8006b2e:	4b31      	ldr	r3, [pc, #196]	; (8006bf4 <checkDemoModCalisma+0x254>)
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	f083 0301 	eor.w	r3, r3, #1
 8006b36:	b2db      	uxtb	r3, r3
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d016      	beq.n	8006b6a <checkDemoModCalisma+0x1ca>
						&&(demoDevYukari==0)
 8006b3c:	4b2a      	ldr	r3, [pc, #168]	; (8006be8 <checkDemoModCalisma+0x248>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	f083 0301 	eor.w	r3, r3, #1
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00f      	beq.n	8006b6a <checkDemoModCalisma+0x1ca>
						&& (demoAsagiCalis==0)) {
 8006b4a:	4b26      	ldr	r3, [pc, #152]	; (8006be4 <checkDemoModCalisma+0x244>)
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	f083 0301 	eor.w	r3, r3, #1
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d008      	beq.n	8006b6a <checkDemoModCalisma+0x1ca>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006b58:	2201      	movs	r2, #1
 8006b5a:	2110      	movs	r1, #16
 8006b5c:	4820      	ldr	r0, [pc, #128]	; (8006be0 <checkDemoModCalisma+0x240>)
 8006b5e:	f001 fe2e 	bl	80087be <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8006b62:	4b22      	ldr	r3, [pc, #136]	; (8006bec <checkDemoModCalisma+0x24c>)
 8006b64:	2201      	movs	r2, #1
 8006b66:	701a      	strb	r2, [r3, #0]
 8006b68:	e007      	b.n	8006b7a <checkDemoModCalisma+0x1da>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	2110      	movs	r1, #16
 8006b6e:	481c      	ldr	r0, [pc, #112]	; (8006be0 <checkDemoModCalisma+0x240>)
 8006b70:	f001 fe25 	bl	80087be <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8006b74:	4b1d      	ldr	r3, [pc, #116]	; (8006bec <checkDemoModCalisma+0x24c>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006b7a:	2104      	movs	r1, #4
 8006b7c:	4818      	ldr	r0, [pc, #96]	; (8006be0 <checkDemoModCalisma+0x240>)
 8006b7e:	f001 fe07 	bl	8008790 <HAL_GPIO_ReadPin>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d139      	bne.n	8006bfc <checkDemoModCalisma+0x25c>
						&& (demoYukariCalis==0)
 8006b88:	4b1a      	ldr	r3, [pc, #104]	; (8006bf4 <checkDemoModCalisma+0x254>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	f083 0301 	eor.w	r3, r3, #1
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d032      	beq.n	8006bfc <checkDemoModCalisma+0x25c>
						&& (demoDevAsagi==0)
 8006b96:	4b15      	ldr	r3, [pc, #84]	; (8006bec <checkDemoModCalisma+0x24c>)
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	f083 0301 	eor.w	r3, r3, #1
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d02b      	beq.n	8006bfc <checkDemoModCalisma+0x25c>
						&& (demoDevYukari==0)) {
 8006ba4:	4b10      	ldr	r3, [pc, #64]	; (8006be8 <checkDemoModCalisma+0x248>)
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	f083 0301 	eor.w	r3, r3, #1
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d024      	beq.n	8006bfc <checkDemoModCalisma+0x25c>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	2102      	movs	r1, #2
 8006bb6:	480e      	ldr	r0, [pc, #56]	; (8006bf0 <checkDemoModCalisma+0x250>)
 8006bb8:	f001 fe01 	bl	80087be <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	2101      	movs	r1, #1
 8006bc0:	480b      	ldr	r0, [pc, #44]	; (8006bf0 <checkDemoModCalisma+0x250>)
 8006bc2:	f001 fdfc 	bl	80087be <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8006bc6:	4b07      	ldr	r3, [pc, #28]	; (8006be4 <checkDemoModCalisma+0x244>)
 8006bc8:	2201      	movs	r2, #1
 8006bca:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8006bcc:	4b0a      	ldr	r3, [pc, #40]	; (8006bf8 <checkDemoModCalisma+0x258>)
 8006bce:	2201      	movs	r2, #1
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	e027      	b.n	8006c24 <checkDemoModCalisma+0x284>
 8006bd4:	20000b42 	.word	0x20000b42
 8006bd8:	20000b75 	.word	0x20000b75
 8006bdc:	20000b41 	.word	0x20000b41
 8006be0:	40011000 	.word	0x40011000
 8006be4:	20000b7c 	.word	0x20000b7c
 8006be8:	20000b7d 	.word	0x20000b7d
 8006bec:	20000b7e 	.word	0x20000b7e
 8006bf0:	40010c00 	.word	0x40010c00
 8006bf4:	20000b7b 	.word	0x20000b7b
 8006bf8:	20000b61 	.word	0x20000b61
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006bfc:	2104      	movs	r1, #4
 8006bfe:	48a0      	ldr	r0, [pc, #640]	; (8006e80 <checkDemoModCalisma+0x4e0>)
 8006c00:	f001 fdc6 	bl	8008790 <HAL_GPIO_ReadPin>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d10c      	bne.n	8006c24 <checkDemoModCalisma+0x284>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2102      	movs	r1, #2
 8006c0e:	489d      	ldr	r0, [pc, #628]	; (8006e84 <checkDemoModCalisma+0x4e4>)
 8006c10:	f001 fdd5 	bl	80087be <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006c14:	2200      	movs	r2, #0
 8006c16:	2101      	movs	r1, #1
 8006c18:	489a      	ldr	r0, [pc, #616]	; (8006e84 <checkDemoModCalisma+0x4e4>)
 8006c1a:	f001 fdd0 	bl	80087be <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8006c1e:	4b9a      	ldr	r3, [pc, #616]	; (8006e88 <checkDemoModCalisma+0x4e8>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006c24:	2104      	movs	r1, #4
 8006c26:	4896      	ldr	r0, [pc, #600]	; (8006e80 <checkDemoModCalisma+0x4e0>)
 8006c28:	f001 fdb2 	bl	8008790 <HAL_GPIO_ReadPin>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d10d      	bne.n	8006c4e <checkDemoModCalisma+0x2ae>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006c32:	2201      	movs	r2, #1
 8006c34:	2180      	movs	r1, #128	; 0x80
 8006c36:	4895      	ldr	r0, [pc, #596]	; (8006e8c <checkDemoModCalisma+0x4ec>)
 8006c38:	f001 fdc1 	bl	80087be <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	2120      	movs	r1, #32
 8006c40:	4892      	ldr	r0, [pc, #584]	; (8006e8c <checkDemoModCalisma+0x4ec>)
 8006c42:	f001 fdbc 	bl	80087be <HAL_GPIO_WritePin>
					timer3 = millis;
 8006c46:	4b92      	ldr	r3, [pc, #584]	; (8006e90 <checkDemoModCalisma+0x4f0>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a92      	ldr	r2, [pc, #584]	; (8006e94 <checkDemoModCalisma+0x4f4>)
 8006c4c:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8006c4e:	4b90      	ldr	r3, [pc, #576]	; (8006e90 <checkDemoModCalisma+0x4f0>)
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	4b90      	ldr	r3, [pc, #576]	; (8006e94 <checkDemoModCalisma+0x4f4>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	d909      	bls.n	8006c70 <checkDemoModCalisma+0x2d0>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2180      	movs	r1, #128	; 0x80
 8006c60:	488a      	ldr	r0, [pc, #552]	; (8006e8c <checkDemoModCalisma+0x4ec>)
 8006c62:	f001 fdac 	bl	80087be <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006c66:	2200      	movs	r2, #0
 8006c68:	2120      	movs	r1, #32
 8006c6a:	4888      	ldr	r0, [pc, #544]	; (8006e8c <checkDemoModCalisma+0x4ec>)
 8006c6c:	f001 fda7 	bl	80087be <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006c70:	2102      	movs	r1, #2
 8006c72:	4883      	ldr	r0, [pc, #524]	; (8006e80 <checkDemoModCalisma+0x4e0>)
 8006c74:	f001 fd8c 	bl	8008790 <HAL_GPIO_ReadPin>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d108      	bne.n	8006c90 <checkDemoModCalisma+0x2f0>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006c7e:	2201      	movs	r2, #1
 8006c80:	2140      	movs	r1, #64	; 0x40
 8006c82:	4882      	ldr	r0, [pc, #520]	; (8006e8c <checkDemoModCalisma+0x4ec>)
 8006c84:	f001 fd9b 	bl	80087be <HAL_GPIO_WritePin>
					timer3 = millis;
 8006c88:	4b81      	ldr	r3, [pc, #516]	; (8006e90 <checkDemoModCalisma+0x4f0>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a81      	ldr	r2, [pc, #516]	; (8006e94 <checkDemoModCalisma+0x4f4>)
 8006c8e:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8006c90:	4b7f      	ldr	r3, [pc, #508]	; (8006e90 <checkDemoModCalisma+0x4f0>)
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	4b7f      	ldr	r3, [pc, #508]	; (8006e94 <checkDemoModCalisma+0x4f4>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b04      	cmp	r3, #4
 8006c9c:	d904      	bls.n	8006ca8 <checkDemoModCalisma+0x308>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	2140      	movs	r1, #64	; 0x40
 8006ca2:	487a      	ldr	r0, [pc, #488]	; (8006e8c <checkDemoModCalisma+0x4ec>)
 8006ca4:	f001 fd8b 	bl	80087be <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006ca8:	4b7b      	ldr	r3, [pc, #492]	; (8006e98 <checkDemoModCalisma+0x4f8>)
 8006caa:	781b      	ldrb	r3, [r3, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d058      	beq.n	8006d62 <checkDemoModCalisma+0x3c2>
 8006cb0:	4b7a      	ldr	r3, [pc, #488]	; (8006e9c <checkDemoModCalisma+0x4fc>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d054      	beq.n	8006d62 <checkDemoModCalisma+0x3c2>
					//mesajYazildi=0;
					calismaSayisi1=calismaSayisi1+1;
 8006cb8:	4b79      	ldr	r3, [pc, #484]	; (8006ea0 <checkDemoModCalisma+0x500>)
 8006cba:	781b      	ldrb	r3, [r3, #0]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	4b77      	ldr	r3, [pc, #476]	; (8006ea0 <checkDemoModCalisma+0x500>)
 8006cc2:	701a      	strb	r2, [r3, #0]

					if(calismaSayisi1>9) {
 8006cc4:	4b76      	ldr	r3, [pc, #472]	; (8006ea0 <checkDemoModCalisma+0x500>)
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	2b09      	cmp	r3, #9
 8006cca:	d908      	bls.n	8006cde <checkDemoModCalisma+0x33e>
						calismaSayisi1=0;
 8006ccc:	4b74      	ldr	r3, [pc, #464]	; (8006ea0 <checkDemoModCalisma+0x500>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	701a      	strb	r2, [r3, #0]
						calismaSayisi10=calismaSayisi10+1;
 8006cd2:	4b74      	ldr	r3, [pc, #464]	; (8006ea4 <checkDemoModCalisma+0x504>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	4b72      	ldr	r3, [pc, #456]	; (8006ea4 <checkDemoModCalisma+0x504>)
 8006cdc:	701a      	strb	r2, [r3, #0]
					}

					if(calismaSayisi10>9) {
 8006cde:	4b71      	ldr	r3, [pc, #452]	; (8006ea4 <checkDemoModCalisma+0x504>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	2b09      	cmp	r3, #9
 8006ce4:	d908      	bls.n	8006cf8 <checkDemoModCalisma+0x358>
						calismaSayisi10=0;
 8006ce6:	4b6f      	ldr	r3, [pc, #444]	; (8006ea4 <checkDemoModCalisma+0x504>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	701a      	strb	r2, [r3, #0]
						calismaSayisi100=calismaSayisi100+1;
 8006cec:	4b6e      	ldr	r3, [pc, #440]	; (8006ea8 <checkDemoModCalisma+0x508>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	b2da      	uxtb	r2, r3
 8006cf4:	4b6c      	ldr	r3, [pc, #432]	; (8006ea8 <checkDemoModCalisma+0x508>)
 8006cf6:	701a      	strb	r2, [r3, #0]
					}

					if(calismaSayisi100>9) {
 8006cf8:	4b6b      	ldr	r3, [pc, #428]	; (8006ea8 <checkDemoModCalisma+0x508>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	2b09      	cmp	r3, #9
 8006cfe:	d908      	bls.n	8006d12 <checkDemoModCalisma+0x372>
						calismaSayisi100=0;
 8006d00:	4b69      	ldr	r3, [pc, #420]	; (8006ea8 <checkDemoModCalisma+0x508>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	701a      	strb	r2, [r3, #0]
						calismaSayisi1000=calismaSayisi1000+1;
 8006d06:	4b69      	ldr	r3, [pc, #420]	; (8006eac <checkDemoModCalisma+0x50c>)
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	4b67      	ldr	r3, [pc, #412]	; (8006eac <checkDemoModCalisma+0x50c>)
 8006d10:	701a      	strb	r2, [r3, #0]
					}

					if(calismaSayisi1000>9) {
 8006d12:	4b66      	ldr	r3, [pc, #408]	; (8006eac <checkDemoModCalisma+0x50c>)
 8006d14:	781b      	ldrb	r3, [r3, #0]
 8006d16:	2b09      	cmp	r3, #9
 8006d18:	d908      	bls.n	8006d2c <checkDemoModCalisma+0x38c>
						calismaSayisi1000=0;
 8006d1a:	4b64      	ldr	r3, [pc, #400]	; (8006eac <checkDemoModCalisma+0x50c>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	701a      	strb	r2, [r3, #0]
						calismaSayisi10000=calismaSayisi10000+1;
 8006d20:	4b63      	ldr	r3, [pc, #396]	; (8006eb0 <checkDemoModCalisma+0x510>)
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	3301      	adds	r3, #1
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	4b61      	ldr	r3, [pc, #388]	; (8006eb0 <checkDemoModCalisma+0x510>)
 8006d2a:	701a      	strb	r2, [r3, #0]
					}
					eepromData[32]=calismaSayisi10000;
 8006d2c:	4b60      	ldr	r3, [pc, #384]	; (8006eb0 <checkDemoModCalisma+0x510>)
 8006d2e:	781a      	ldrb	r2, [r3, #0]
 8006d30:	4b60      	ldr	r3, [pc, #384]	; (8006eb4 <checkDemoModCalisma+0x514>)
 8006d32:	f883 2020 	strb.w	r2, [r3, #32]
					eepromData[31]=calismaSayisi1000;
 8006d36:	4b5d      	ldr	r3, [pc, #372]	; (8006eac <checkDemoModCalisma+0x50c>)
 8006d38:	781a      	ldrb	r2, [r3, #0]
 8006d3a:	4b5e      	ldr	r3, [pc, #376]	; (8006eb4 <checkDemoModCalisma+0x514>)
 8006d3c:	77da      	strb	r2, [r3, #31]
					eepromData[30]=calismaSayisi100;
 8006d3e:	4b5a      	ldr	r3, [pc, #360]	; (8006ea8 <checkDemoModCalisma+0x508>)
 8006d40:	781a      	ldrb	r2, [r3, #0]
 8006d42:	4b5c      	ldr	r3, [pc, #368]	; (8006eb4 <checkDemoModCalisma+0x514>)
 8006d44:	779a      	strb	r2, [r3, #30]
					eepromData[29]=calismaSayisi10;
 8006d46:	4b57      	ldr	r3, [pc, #348]	; (8006ea4 <checkDemoModCalisma+0x504>)
 8006d48:	781a      	ldrb	r2, [r3, #0]
 8006d4a:	4b5a      	ldr	r3, [pc, #360]	; (8006eb4 <checkDemoModCalisma+0x514>)
 8006d4c:	775a      	strb	r2, [r3, #29]
					eepromData[28]=calismaSayisi1;
 8006d4e:	4b54      	ldr	r3, [pc, #336]	; (8006ea0 <checkDemoModCalisma+0x500>)
 8006d50:	781a      	ldrb	r2, [r3, #0]
 8006d52:	4b58      	ldr	r3, [pc, #352]	; (8006eb4 <checkDemoModCalisma+0x514>)
 8006d54:	771a      	strb	r2, [r3, #28]
					hafizaYaz=1;
 8006d56:	4b58      	ldr	r3, [pc, #352]	; (8006eb8 <checkDemoModCalisma+0x518>)
 8006d58:	2201      	movs	r2, #1
 8006d5a:	701a      	strb	r2, [r3, #0]
			   		//mesajYazildi=0;
					demoCalismaSayisiYar=0;
 8006d5c:	4b4f      	ldr	r3, [pc, #316]	; (8006e9c <checkDemoModCalisma+0x4fc>)
 8006d5e:	2200      	movs	r2, #0
 8006d60:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8006d62:	4b56      	ldr	r3, [pc, #344]	; (8006ebc <checkDemoModCalisma+0x51c>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f040 8087 	bne.w	8006e7a <checkDemoModCalisma+0x4da>
					lcd_print(2,1,"Cycle      ");
 8006d6c:	4a54      	ldr	r2, [pc, #336]	; (8006ec0 <checkDemoModCalisma+0x520>)
 8006d6e:	2101      	movs	r1, #1
 8006d70:	2002      	movs	r0, #2
 8006d72:	f7f9 fcc0 	bl	80006f6 <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8006d76:	4a53      	ldr	r2, [pc, #332]	; (8006ec4 <checkDemoModCalisma+0x524>)
 8006d78:	2101      	movs	r1, #1
 8006d7a:	2001      	movs	r0, #1
 8006d7c:	f7f9 fcbb 	bl	80006f6 <lcd_print>
					itoa(calismaSayisi10000, snum, 10);
 8006d80:	4b4b      	ldr	r3, [pc, #300]	; (8006eb0 <checkDemoModCalisma+0x510>)
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	220a      	movs	r2, #10
 8006d86:	4950      	ldr	r1, [pc, #320]	; (8006ec8 <checkDemoModCalisma+0x528>)
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f004 fd2d 	bl	800b7e8 <itoa>
					lcd_print(2,12,snum);
 8006d8e:	4a4e      	ldr	r2, [pc, #312]	; (8006ec8 <checkDemoModCalisma+0x528>)
 8006d90:	210c      	movs	r1, #12
 8006d92:	2002      	movs	r0, #2
 8006d94:	f7f9 fcaf 	bl	80006f6 <lcd_print>
					itoa(calismaSayisi1000, snum, 10);
 8006d98:	4b44      	ldr	r3, [pc, #272]	; (8006eac <checkDemoModCalisma+0x50c>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	220a      	movs	r2, #10
 8006d9e:	494a      	ldr	r1, [pc, #296]	; (8006ec8 <checkDemoModCalisma+0x528>)
 8006da0:	4618      	mov	r0, r3
 8006da2:	f004 fd21 	bl	800b7e8 <itoa>
					lcd_print(2,13,snum);
 8006da6:	4a48      	ldr	r2, [pc, #288]	; (8006ec8 <checkDemoModCalisma+0x528>)
 8006da8:	210d      	movs	r1, #13
 8006daa:	2002      	movs	r0, #2
 8006dac:	f7f9 fca3 	bl	80006f6 <lcd_print>
					itoa(calismaSayisi100, snum, 10);
 8006db0:	4b3d      	ldr	r3, [pc, #244]	; (8006ea8 <checkDemoModCalisma+0x508>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	220a      	movs	r2, #10
 8006db6:	4944      	ldr	r1, [pc, #272]	; (8006ec8 <checkDemoModCalisma+0x528>)
 8006db8:	4618      	mov	r0, r3
 8006dba:	f004 fd15 	bl	800b7e8 <itoa>
					lcd_print(2,14,snum);
 8006dbe:	4a42      	ldr	r2, [pc, #264]	; (8006ec8 <checkDemoModCalisma+0x528>)
 8006dc0:	210e      	movs	r1, #14
 8006dc2:	2002      	movs	r0, #2
 8006dc4:	f7f9 fc97 	bl	80006f6 <lcd_print>
					itoa(calismaSayisi10, snum, 10);
 8006dc8:	4b36      	ldr	r3, [pc, #216]	; (8006ea4 <checkDemoModCalisma+0x504>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	220a      	movs	r2, #10
 8006dce:	493e      	ldr	r1, [pc, #248]	; (8006ec8 <checkDemoModCalisma+0x528>)
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f004 fd09 	bl	800b7e8 <itoa>
					lcd_print(2,15,snum);
 8006dd6:	4a3c      	ldr	r2, [pc, #240]	; (8006ec8 <checkDemoModCalisma+0x528>)
 8006dd8:	210f      	movs	r1, #15
 8006dda:	2002      	movs	r0, #2
 8006ddc:	f7f9 fc8b 	bl	80006f6 <lcd_print>
					itoa(calismaSayisi1, snum, 10);
 8006de0:	4b2f      	ldr	r3, [pc, #188]	; (8006ea0 <checkDemoModCalisma+0x500>)
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	220a      	movs	r2, #10
 8006de6:	4938      	ldr	r1, [pc, #224]	; (8006ec8 <checkDemoModCalisma+0x528>)
 8006de8:	4618      	mov	r0, r3
 8006dea:	f004 fcfd 	bl	800b7e8 <itoa>
					lcd_print(2,16,snum);
 8006dee:	4a36      	ldr	r2, [pc, #216]	; (8006ec8 <checkDemoModCalisma+0x528>)
 8006df0:	2110      	movs	r1, #16
 8006df2:	2002      	movs	r0, #2
 8006df4:	f7f9 fc7f 	bl	80006f6 <lcd_print>
					mesajYazildi=1;
 8006df8:	4b34      	ldr	r3, [pc, #208]	; (8006ecc <checkDemoModCalisma+0x52c>)
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8006dfe:	e03c      	b.n	8006e7a <checkDemoModCalisma+0x4da>
				}
			} else if(demoMode==1 || menuGiris==1) {
 8006e00:	4b33      	ldr	r3, [pc, #204]	; (8006ed0 <checkDemoModCalisma+0x530>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d003      	beq.n	8006e10 <checkDemoModCalisma+0x470>
 8006e08:	4b2c      	ldr	r3, [pc, #176]	; (8006ebc <checkDemoModCalisma+0x51c>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d134      	bne.n	8006e7a <checkDemoModCalisma+0x4da>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006e10:	2200      	movs	r2, #0
 8006e12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e16:	481b      	ldr	r0, [pc, #108]	; (8006e84 <checkDemoModCalisma+0x4e4>)
 8006e18:	f001 fcd1 	bl	80087be <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e22:	4818      	ldr	r0, [pc, #96]	; (8006e84 <checkDemoModCalisma+0x4e4>)
 8006e24:	f001 fccb 	bl	80087be <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006e28:	2200      	movs	r2, #0
 8006e2a:	2104      	movs	r1, #4
 8006e2c:	4815      	ldr	r0, [pc, #84]	; (8006e84 <checkDemoModCalisma+0x4e4>)
 8006e2e:	f001 fcc6 	bl	80087be <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006e32:	2200      	movs	r2, #0
 8006e34:	2102      	movs	r1, #2
 8006e36:	4813      	ldr	r0, [pc, #76]	; (8006e84 <checkDemoModCalisma+0x4e4>)
 8006e38:	f001 fcc1 	bl	80087be <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	2101      	movs	r1, #1
 8006e40:	4810      	ldr	r0, [pc, #64]	; (8006e84 <checkDemoModCalisma+0x4e4>)
 8006e42:	f001 fcbc 	bl	80087be <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006e46:	2200      	movs	r2, #0
 8006e48:	2120      	movs	r1, #32
 8006e4a:	480d      	ldr	r0, [pc, #52]	; (8006e80 <checkDemoModCalisma+0x4e0>)
 8006e4c:	f001 fcb7 	bl	80087be <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006e50:	2200      	movs	r2, #0
 8006e52:	2110      	movs	r1, #16
 8006e54:	480a      	ldr	r0, [pc, #40]	; (8006e80 <checkDemoModCalisma+0x4e0>)
 8006e56:	f001 fcb2 	bl	80087be <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	2180      	movs	r1, #128	; 0x80
 8006e5e:	480b      	ldr	r0, [pc, #44]	; (8006e8c <checkDemoModCalisma+0x4ec>)
 8006e60:	f001 fcad 	bl	80087be <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006e64:	2200      	movs	r2, #0
 8006e66:	2140      	movs	r1, #64	; 0x40
 8006e68:	4808      	ldr	r0, [pc, #32]	; (8006e8c <checkDemoModCalisma+0x4ec>)
 8006e6a:	f001 fca8 	bl	80087be <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006e6e:	2200      	movs	r2, #0
 8006e70:	2120      	movs	r1, #32
 8006e72:	4806      	ldr	r0, [pc, #24]	; (8006e8c <checkDemoModCalisma+0x4ec>)
 8006e74:	f001 fca3 	bl	80087be <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8006e78:	e7ff      	b.n	8006e7a <checkDemoModCalisma+0x4da>
 8006e7a:	bf00      	nop
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	40011000 	.word	0x40011000
 8006e84:	40010c00 	.word	0x40010c00
 8006e88:	20000b7c 	.word	0x20000b7c
 8006e8c:	40010800 	.word	0x40010800
 8006e90:	20000b00 	.word	0x20000b00
 8006e94:	20000b10 	.word	0x20000b10
 8006e98:	20000b7b 	.word	0x20000b7b
 8006e9c:	20000b61 	.word	0x20000b61
 8006ea0:	20000b21 	.word	0x20000b21
 8006ea4:	20000b22 	.word	0x20000b22
 8006ea8:	20000941 	.word	0x20000941
 8006eac:	20000942 	.word	0x20000942
 8006eb0:	20000b23 	.word	0x20000b23
 8006eb4:	20000ab8 	.word	0x20000ab8
 8006eb8:	20000b4f 	.word	0x20000b4f
 8006ebc:	20000b41 	.word	0x20000b41
 8006ec0:	0800ce70 	.word	0x0800ce70
 8006ec4:	0800ce7c 	.word	0x0800ce7c
 8006ec8:	20000af8 	.word	0x20000af8
 8006ecc:	20000b57 	.word	0x20000b57
 8006ed0:	20000b42 	.word	0x20000b42

08006ed4 <mainLoop>:
	char* result = malloc(strlen(combinedString) + 1);
	strcpy(result, combinedString);
	return result;
}

void mainLoop() {
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006eda:	f7fe f92b 	bl	8005134 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006ede:	2101      	movs	r1, #1
 8006ee0:	48aa      	ldr	r0, [pc, #680]	; (800718c <mainLoop+0x2b8>)
 8006ee2:	f001 fc55 	bl	8008790 <HAL_GPIO_ReadPin>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d136      	bne.n	8006f5a <mainLoop+0x86>
 8006eec:	2108      	movs	r1, #8
 8006eee:	48a8      	ldr	r0, [pc, #672]	; (8007190 <mainLoop+0x2bc>)
 8006ef0:	f001 fc4e 	bl	8008790 <HAL_GPIO_ReadPin>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d12f      	bne.n	8006f5a <mainLoop+0x86>
 8006efa:	2102      	movs	r1, #2
 8006efc:	48a3      	ldr	r0, [pc, #652]	; (800718c <mainLoop+0x2b8>)
 8006efe:	f001 fc47 	bl	8008790 <HAL_GPIO_ReadPin>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d128      	bne.n	8006f5a <mainLoop+0x86>
 8006f08:	2104      	movs	r1, #4
 8006f0a:	48a0      	ldr	r0, [pc, #640]	; (800718c <mainLoop+0x2b8>)
 8006f0c:	f001 fc40 	bl	8008790 <HAL_GPIO_ReadPin>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d121      	bne.n	8006f5a <mainLoop+0x86>
 8006f16:	2108      	movs	r1, #8
 8006f18:	489c      	ldr	r0, [pc, #624]	; (800718c <mainLoop+0x2b8>)
 8006f1a:	f001 fc39 	bl	8008790 <HAL_GPIO_ReadPin>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d11a      	bne.n	8006f5a <mainLoop+0x86>
 8006f24:	2180      	movs	r1, #128	; 0x80
 8006f26:	489a      	ldr	r0, [pc, #616]	; (8007190 <mainLoop+0x2bc>)
 8006f28:	f001 fc32 	bl	8008790 <HAL_GPIO_ReadPin>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d113      	bne.n	8006f5a <mainLoop+0x86>
 8006f32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f36:	4896      	ldr	r0, [pc, #600]	; (8007190 <mainLoop+0x2bc>)
 8006f38:	f001 fc2a 	bl	8008790 <HAL_GPIO_ReadPin>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d10b      	bne.n	8006f5a <mainLoop+0x86>
 8006f42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f46:	4892      	ldr	r0, [pc, #584]	; (8007190 <mainLoop+0x2bc>)
 8006f48:	f001 fc22 	bl	8008790 <HAL_GPIO_ReadPin>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d103      	bne.n	8006f5a <mainLoop+0x86>
			butonKontrol=0;
 8006f52:	4b90      	ldr	r3, [pc, #576]	; (8007194 <mainLoop+0x2c0>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	701a      	strb	r2, [r3, #0]
 8006f58:	e003      	b.n	8006f62 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006f5a:	4b8f      	ldr	r3, [pc, #572]	; (8007198 <mainLoop+0x2c4>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a8f      	ldr	r2, [pc, #572]	; (800719c <mainLoop+0x2c8>)
 8006f60:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8006f62:	4b8f      	ldr	r3, [pc, #572]	; (80071a0 <mainLoop+0x2cc>)
 8006f64:	781b      	ldrb	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d039      	beq.n	8006fde <mainLoop+0x10a>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006f6a:	bf00      	nop
 8006f6c:	488d      	ldr	r0, [pc, #564]	; (80071a4 <mainLoop+0x2d0>)
 8006f6e:	f002 fa38 	bl	80093e2 <HAL_I2C_GetError>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b04      	cmp	r3, #4
 8006f76:	d0f9      	beq.n	8006f6c <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006f78:	bf00      	nop
 8006f7a:	488a      	ldr	r0, [pc, #552]	; (80071a4 <mainLoop+0x2d0>)
 8006f7c:	f002 fa24 	bl	80093c8 <HAL_I2C_GetState>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b20      	cmp	r3, #32
 8006f84:	d1f9      	bne.n	8006f7a <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8006f86:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006f8a:	9302      	str	r3, [sp, #8]
 8006f8c:	233f      	movs	r3, #63	; 0x3f
 8006f8e:	9301      	str	r3, [sp, #4]
 8006f90:	4b85      	ldr	r3, [pc, #532]	; (80071a8 <mainLoop+0x2d4>)
 8006f92:	9300      	str	r3, [sp, #0]
 8006f94:	233f      	movs	r3, #63	; 0x3f
 8006f96:	2200      	movs	r2, #0
 8006f98:	21a0      	movs	r1, #160	; 0xa0
 8006f9a:	4882      	ldr	r0, [pc, #520]	; (80071a4 <mainLoop+0x2d0>)
 8006f9c:	f001 feb2 	bl	8008d04 <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 8006fa0:	2005      	movs	r0, #5
 8006fa2:	f000 fe25 	bl	8007bf0 <HAL_Delay>

		  hafizaYaz=0;
 8006fa6:	4b7e      	ldr	r3, [pc, #504]	; (80071a0 <mainLoop+0x2cc>)
 8006fa8:	2200      	movs	r2, #0
 8006faa:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8006fac:	4b7f      	ldr	r3, [pc, #508]	; (80071ac <mainLoop+0x2d8>)
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d105      	bne.n	8006fc0 <mainLoop+0xec>
			  lcd_print(2,1,"Data yazildi    ");
 8006fb4:	4a7e      	ldr	r2, [pc, #504]	; (80071b0 <mainLoop+0x2dc>)
 8006fb6:	2101      	movs	r1, #1
 8006fb8:	2002      	movs	r0, #2
 8006fba:	f7f9 fb9c 	bl	80006f6 <lcd_print>
 8006fbe:	e008      	b.n	8006fd2 <mainLoop+0xfe>
		  } else if(dilSecim==1) {
 8006fc0:	4b7a      	ldr	r3, [pc, #488]	; (80071ac <mainLoop+0x2d8>)
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d104      	bne.n	8006fd2 <mainLoop+0xfe>
			  lcd_print(2,1,"Data Wrote      ");
 8006fc8:	4a7a      	ldr	r2, [pc, #488]	; (80071b4 <mainLoop+0x2e0>)
 8006fca:	2101      	movs	r1, #1
 8006fcc:	2002      	movs	r0, #2
 8006fce:	f7f9 fb92 	bl	80006f6 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006fd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006fd6:	f000 fe0b 	bl	8007bf0 <HAL_Delay>
		  lcd_clear();
 8006fda:	f7f9 fba1 	bl	8000720 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006fde:	4b76      	ldr	r3, [pc, #472]	; (80071b8 <mainLoop+0x2e4>)
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	f083 0301 	eor.w	r3, r3, #1
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d06b      	beq.n	80070c4 <mainLoop+0x1f0>
 8006fec:	486d      	ldr	r0, [pc, #436]	; (80071a4 <mainLoop+0x2d0>)
 8006fee:	f002 f9eb 	bl	80093c8 <HAL_I2C_GetState>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	d165      	bne.n	80070c4 <mainLoop+0x1f0>
		  if(ilkOkuma==0) {
 8006ff8:	4b70      	ldr	r3, [pc, #448]	; (80071bc <mainLoop+0x2e8>)
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	f083 0301 	eor.w	r3, r3, #1
 8007000:	b2db      	uxtb	r3, r3
 8007002:	2b00      	cmp	r3, #0
 8007004:	d044      	beq.n	8007090 <mainLoop+0x1bc>
			  lcd_print(1,1,"   **EEPROM**   ");
 8007006:	4a6e      	ldr	r2, [pc, #440]	; (80071c0 <mainLoop+0x2ec>)
 8007008:	2101      	movs	r1, #1
 800700a:	2001      	movs	r0, #1
 800700c:	f7f9 fb73 	bl	80006f6 <lcd_print>
			  if(dilSecim==0) {
 8007010:	4b66      	ldr	r3, [pc, #408]	; (80071ac <mainLoop+0x2d8>)
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d105      	bne.n	8007024 <mainLoop+0x150>
				  lcd_print(2,1,"Data Okunuyor...");
 8007018:	4a6a      	ldr	r2, [pc, #424]	; (80071c4 <mainLoop+0x2f0>)
 800701a:	2101      	movs	r1, #1
 800701c:	2002      	movs	r0, #2
 800701e:	f7f9 fb6a 	bl	80006f6 <lcd_print>
 8007022:	e008      	b.n	8007036 <mainLoop+0x162>
			  } else if(dilSecim==1) {
 8007024:	4b61      	ldr	r3, [pc, #388]	; (80071ac <mainLoop+0x2d8>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d104      	bne.n	8007036 <mainLoop+0x162>
				  lcd_print(2,1,"Data Reading... ");
 800702c:	4a66      	ldr	r2, [pc, #408]	; (80071c8 <mainLoop+0x2f4>)
 800702e:	2101      	movs	r1, #1
 8007030:	2002      	movs	r0, #2
 8007032:	f7f9 fb60 	bl	80006f6 <lcd_print>
			  }
			  HAL_Delay(1000);
 8007036:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800703a:	f000 fdd9 	bl	8007bf0 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800703e:	bf00      	nop
 8007040:	4858      	ldr	r0, [pc, #352]	; (80071a4 <mainLoop+0x2d0>)
 8007042:	f002 f9ce 	bl	80093e2 <HAL_I2C_GetError>
 8007046:	4603      	mov	r3, r0
 8007048:	2b04      	cmp	r3, #4
 800704a:	d0f9      	beq.n	8007040 <mainLoop+0x16c>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800704c:	e003      	b.n	8007056 <mainLoop+0x182>
				  HAL_Delay(1000);
 800704e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007052:	f000 fdcd 	bl	8007bf0 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007056:	4853      	ldr	r0, [pc, #332]	; (80071a4 <mainLoop+0x2d0>)
 8007058:	f002 f9b6 	bl	80093c8 <HAL_I2C_GetState>
 800705c:	4603      	mov	r3, r0
 800705e:	2b20      	cmp	r3, #32
 8007060:	d1f5      	bne.n	800704e <mainLoop+0x17a>
			  }

			  if(dilSecim==0) {
 8007062:	4b52      	ldr	r3, [pc, #328]	; (80071ac <mainLoop+0x2d8>)
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d105      	bne.n	8007076 <mainLoop+0x1a2>
				  lcd_print(2,1,"Data Okundu.    ");
 800706a:	4a58      	ldr	r2, [pc, #352]	; (80071cc <mainLoop+0x2f8>)
 800706c:	2101      	movs	r1, #1
 800706e:	2002      	movs	r0, #2
 8007070:	f7f9 fb41 	bl	80006f6 <lcd_print>
 8007074:	e008      	b.n	8007088 <mainLoop+0x1b4>
			  } else if(dilSecim==1) {
 8007076:	4b4d      	ldr	r3, [pc, #308]	; (80071ac <mainLoop+0x2d8>)
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d104      	bne.n	8007088 <mainLoop+0x1b4>
				  lcd_print(2,1,"Data Read.      ");
 800707e:	4a54      	ldr	r2, [pc, #336]	; (80071d0 <mainLoop+0x2fc>)
 8007080:	2101      	movs	r1, #1
 8007082:	2002      	movs	r0, #2
 8007084:	f7f9 fb37 	bl	80006f6 <lcd_print>
			  }

			  ilkOkuma=1;
 8007088:	4b4c      	ldr	r3, [pc, #304]	; (80071bc <mainLoop+0x2e8>)
 800708a:	2201      	movs	r2, #1
 800708c:	701a      	strb	r2, [r3, #0]
 800708e:	e014      	b.n	80070ba <mainLoop+0x1e6>
		  } else {
			  if(dilSecim==0) {
 8007090:	4b46      	ldr	r3, [pc, #280]	; (80071ac <mainLoop+0x2d8>)
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d105      	bne.n	80070a4 <mainLoop+0x1d0>
				  lcd_print(2,1,"Deger Kaydedildi");
 8007098:	4a4e      	ldr	r2, [pc, #312]	; (80071d4 <mainLoop+0x300>)
 800709a:	2101      	movs	r1, #1
 800709c:	2002      	movs	r0, #2
 800709e:	f7f9 fb2a 	bl	80006f6 <lcd_print>
 80070a2:	e008      	b.n	80070b6 <mainLoop+0x1e2>
			  } else if(dilSecim==1) {
 80070a4:	4b41      	ldr	r3, [pc, #260]	; (80071ac <mainLoop+0x2d8>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d104      	bne.n	80070b6 <mainLoop+0x1e2>
				  lcd_print(2,1,"Value Saved     ");
 80070ac:	4a4a      	ldr	r2, [pc, #296]	; (80071d8 <mainLoop+0x304>)
 80070ae:	2101      	movs	r1, #1
 80070b0:	2002      	movs	r0, #2
 80070b2:	f7f9 fb20 	bl	80006f6 <lcd_print>
			  }
			  lcd_clear();
 80070b6:	f7f9 fb33 	bl	8000720 <lcd_clear>
		  }

		  eepromKontrol();
 80070ba:	f7fd fc17 	bl	80048ec <eepromKontrol>
		  hafizaOku=1;
 80070be:	4b3e      	ldr	r3, [pc, #248]	; (80071b8 <mainLoop+0x2e4>)
 80070c0:	2201      	movs	r2, #1
 80070c2:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80070c4:	4b45      	ldr	r3, [pc, #276]	; (80071dc <mainLoop+0x308>)
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d11c      	bne.n	8007106 <mainLoop+0x232>
 80070cc:	4b44      	ldr	r3, [pc, #272]	; (80071e0 <mainLoop+0x30c>)
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	f083 0301 	eor.w	r3, r3, #1
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d015      	beq.n	8007106 <mainLoop+0x232>
 80070da:	4b42      	ldr	r3, [pc, #264]	; (80071e4 <mainLoop+0x310>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d111      	bne.n	8007106 <mainLoop+0x232>
			lcd_clear();
 80070e2:	f7f9 fb1d 	bl	8000720 <lcd_clear>
			HAL_Delay(10);
 80070e6:	200a      	movs	r0, #10
 80070e8:	f000 fd82 	bl	8007bf0 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 80070ec:	4a3e      	ldr	r2, [pc, #248]	; (80071e8 <mainLoop+0x314>)
 80070ee:	2101      	movs	r1, #1
 80070f0:	2001      	movs	r0, #1
 80070f2:	f7f9 fb00 	bl	80006f6 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 80070f6:	4a3d      	ldr	r2, [pc, #244]	; (80071ec <mainLoop+0x318>)
 80070f8:	2101      	movs	r1, #1
 80070fa:	2002      	movs	r0, #2
 80070fc:	f7f9 fafb 	bl	80006f6 <lcd_print>
			mesajYazildi=1;
 8007100:	4b37      	ldr	r3, [pc, #220]	; (80071e0 <mainLoop+0x30c>)
 8007102:	2201      	movs	r2, #1
 8007104:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8007106:	4b35      	ldr	r3, [pc, #212]	; (80071dc <mainLoop+0x308>)
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d112      	bne.n	8007134 <mainLoop+0x260>
 800710e:	2102      	movs	r1, #2
 8007110:	481e      	ldr	r0, [pc, #120]	; (800718c <mainLoop+0x2b8>)
 8007112:	f001 fb3d 	bl	8008790 <HAL_GPIO_ReadPin>
 8007116:	4603      	mov	r3, r0
 8007118:	2b01      	cmp	r3, #1
 800711a:	d10b      	bne.n	8007134 <mainLoop+0x260>
 800711c:	2104      	movs	r1, #4
 800711e:	481b      	ldr	r0, [pc, #108]	; (800718c <mainLoop+0x2b8>)
 8007120:	f001 fb36 	bl	8008790 <HAL_GPIO_ReadPin>
 8007124:	4603      	mov	r3, r0
 8007126:	2b01      	cmp	r3, #1
 8007128:	d104      	bne.n	8007134 <mainLoop+0x260>
			menuGiris=1;
 800712a:	4b2c      	ldr	r3, [pc, #176]	; (80071dc <mainLoop+0x308>)
 800712c:	2201      	movs	r2, #1
 800712e:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8007130:	f7f9 faf6 	bl	8000720 <lcd_clear>
		}

		if(menuGiris==1) {
 8007134:	4b29      	ldr	r3, [pc, #164]	; (80071dc <mainLoop+0x308>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d101      	bne.n	8007140 <mainLoop+0x26c>
			menu();
 800713c:	f7f9 fb3c 	bl	80007b8 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8007140:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007144:	4812      	ldr	r0, [pc, #72]	; (8007190 <mainLoop+0x2bc>)
 8007146:	f001 fb52 	bl	80087ee <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 800714a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800714e:	4828      	ldr	r0, [pc, #160]	; (80071f0 <mainLoop+0x31c>)
 8007150:	f001 fb1e 	bl	8008790 <HAL_GPIO_ReadPin>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10a      	bne.n	8007170 <mainLoop+0x29c>
 800715a:	4b26      	ldr	r3, [pc, #152]	; (80071f4 <mainLoop+0x320>)
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	f083 0301 	eor.w	r3, r3, #1
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	d003      	beq.n	8007170 <mainLoop+0x29c>
			stopVar=1;
 8007168:	4b23      	ldr	r3, [pc, #140]	; (80071f8 <mainLoop+0x324>)
 800716a:	2201      	movs	r2, #1
 800716c:	701a      	strb	r2, [r3, #0]
 800716e:	e002      	b.n	8007176 <mainLoop+0x2a2>
		} else {
			stopVar=0;
 8007170:	4b21      	ldr	r3, [pc, #132]	; (80071f8 <mainLoop+0x324>)
 8007172:	2200      	movs	r2, #0
 8007174:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8007176:	f7fd fff7 	bl	8005168 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 800717a:	f7fe f829 	bl	80051d0 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 800717e:	f7fe f86d 	bl	800525c <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8007182:	f7fe f8bd 	bl	8005300 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8007186:	f7ff fc0b 	bl	80069a0 <checkDemoModCalisma>
		checkLCDBacklight();
 800718a:	e6a6      	b.n	8006eda <mainLoop+0x6>
 800718c:	40010800 	.word	0x40010800
 8007190:	40011000 	.word	0x40011000
 8007194:	20000b52 	.word	0x20000b52
 8007198:	20000b00 	.word	0x20000b00
 800719c:	20000b1c 	.word	0x20000b1c
 80071a0:	20000b4f 	.word	0x20000b4f
 80071a4:	20000ce0 	.word	0x20000ce0
 80071a8:	20000ab8 	.word	0x20000ab8
 80071ac:	20000b44 	.word	0x20000b44
 80071b0:	0800ce94 	.word	0x0800ce94
 80071b4:	0800cea8 	.word	0x0800cea8
 80071b8:	20000b50 	.word	0x20000b50
 80071bc:	20000b51 	.word	0x20000b51
 80071c0:	0800cebc 	.word	0x0800cebc
 80071c4:	0800ced0 	.word	0x0800ced0
 80071c8:	0800cee4 	.word	0x0800cee4
 80071cc:	0800cef8 	.word	0x0800cef8
 80071d0:	0800cf0c 	.word	0x0800cf0c
 80071d4:	0800cf20 	.word	0x0800cf20
 80071d8:	0800cf34 	.word	0x0800cf34
 80071dc:	20000b41 	.word	0x20000b41
 80071e0:	20000b57 	.word	0x20000b57
 80071e4:	20000b42 	.word	0x20000b42
 80071e8:	0800cdfc 	.word	0x0800cdfc
 80071ec:	0800ce10 	.word	0x0800ce10
 80071f0:	40010c00 	.word	0x40010c00
 80071f4:	20000b78 	.word	0x20000b78
 80071f8:	20000b75 	.word	0x20000b75

080071fc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007204:	4b04      	ldr	r3, [pc, #16]	; (8007218 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3301      	adds	r3, #1
 800720a:	4a03      	ldr	r2, [pc, #12]	; (8007218 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800720c:	6013      	str	r3, [r2, #0]
}
 800720e:	bf00      	nop
 8007210:	370c      	adds	r7, #12
 8007212:	46bd      	mov	sp, r7
 8007214:	bc80      	pop	{r7}
 8007216:	4770      	bx	lr
 8007218:	20000b00 	.word	0x20000b00

0800721c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007220:	f000 fc84 	bl	8007b2c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007224:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007228:	f000 fce2 	bl	8007bf0 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800722c:	f000 f8b4 	bl	8007398 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007230:	f000 f9d6 	bl	80075e0 <MX_GPIO_Init>
  MX_CAN_Init();
 8007234:	f000 f8f6 	bl	8007424 <MX_CAN_Init>
  MX_I2C1_Init();
 8007238:	f000 f928 	bl	800748c <MX_I2C1_Init>
  MX_TIM1_Init();
 800723c:	f000 f954 	bl	80074e8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007240:	f000 f9a4 	bl	800758c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007244:	2201      	movs	r2, #1
 8007246:	2140      	movs	r1, #64	; 0x40
 8007248:	4847      	ldr	r0, [pc, #284]	; (8007368 <main+0x14c>)
 800724a:	f001 fab8 	bl	80087be <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800724e:	2201      	movs	r2, #1
 8007250:	2180      	movs	r1, #128	; 0x80
 8007252:	4845      	ldr	r0, [pc, #276]	; (8007368 <main+0x14c>)
 8007254:	f001 fab3 	bl	80087be <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007258:	200a      	movs	r0, #10
 800725a:	f000 fcc9 	bl	8007bf0 <HAL_Delay>
  lcd_init();
 800725e:	f7f9 fa18 	bl	8000692 <lcd_init>
  HAL_Delay(10);
 8007262:	200a      	movs	r0, #10
 8007264:	f000 fcc4 	bl	8007bf0 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007268:	4840      	ldr	r0, [pc, #256]	; (800736c <main+0x150>)
 800726a:	f003 f95b 	bl	800a524 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800726e:	bf00      	nop
 8007270:	483f      	ldr	r0, [pc, #252]	; (8007370 <main+0x154>)
 8007272:	f002 f8b6 	bl	80093e2 <HAL_I2C_GetError>
 8007276:	4603      	mov	r3, r0
 8007278:	2b04      	cmp	r3, #4
 800727a:	d0f9      	beq.n	8007270 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800727c:	bf00      	nop
 800727e:	483c      	ldr	r0, [pc, #240]	; (8007370 <main+0x154>)
 8007280:	f002 f8a2 	bl	80093c8 <HAL_I2C_GetState>
 8007284:	4603      	mov	r3, r0
 8007286:	2b20      	cmp	r3, #32
 8007288:	d1f9      	bne.n	800727e <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800728a:	2200      	movs	r2, #0
 800728c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007290:	4835      	ldr	r0, [pc, #212]	; (8007368 <main+0x14c>)
 8007292:	f001 fa94 	bl	80087be <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007296:	2200      	movs	r2, #0
 8007298:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800729c:	4832      	ldr	r0, [pc, #200]	; (8007368 <main+0x14c>)
 800729e:	f001 fa8e 	bl	80087be <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80072a2:	2200      	movs	r2, #0
 80072a4:	2104      	movs	r1, #4
 80072a6:	4830      	ldr	r0, [pc, #192]	; (8007368 <main+0x14c>)
 80072a8:	f001 fa89 	bl	80087be <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80072ac:	2200      	movs	r2, #0
 80072ae:	2102      	movs	r1, #2
 80072b0:	482d      	ldr	r0, [pc, #180]	; (8007368 <main+0x14c>)
 80072b2:	f001 fa84 	bl	80087be <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80072b6:	2200      	movs	r2, #0
 80072b8:	2101      	movs	r1, #1
 80072ba:	482b      	ldr	r0, [pc, #172]	; (8007368 <main+0x14c>)
 80072bc:	f001 fa7f 	bl	80087be <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80072c0:	2200      	movs	r2, #0
 80072c2:	2120      	movs	r1, #32
 80072c4:	482b      	ldr	r0, [pc, #172]	; (8007374 <main+0x158>)
 80072c6:	f001 fa7a 	bl	80087be <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80072ca:	2200      	movs	r2, #0
 80072cc:	2110      	movs	r1, #16
 80072ce:	4829      	ldr	r0, [pc, #164]	; (8007374 <main+0x158>)
 80072d0:	f001 fa75 	bl	80087be <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80072d4:	2200      	movs	r2, #0
 80072d6:	2180      	movs	r1, #128	; 0x80
 80072d8:	4827      	ldr	r0, [pc, #156]	; (8007378 <main+0x15c>)
 80072da:	f001 fa70 	bl	80087be <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80072de:	2200      	movs	r2, #0
 80072e0:	2140      	movs	r1, #64	; 0x40
 80072e2:	4825      	ldr	r0, [pc, #148]	; (8007378 <main+0x15c>)
 80072e4:	f001 fa6b 	bl	80087be <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80072e8:	2200      	movs	r2, #0
 80072ea:	2120      	movs	r1, #32
 80072ec:	4822      	ldr	r0, [pc, #136]	; (8007378 <main+0x15c>)
 80072ee:	f001 fa66 	bl	80087be <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 80072f2:	2200      	movs	r2, #0
 80072f4:	2110      	movs	r1, #16
 80072f6:	4820      	ldr	r0, [pc, #128]	; (8007378 <main+0x15c>)
 80072f8:	f001 fa61 	bl	80087be <HAL_GPIO_WritePin>

  i2cTest();
 80072fc:	f7fd fe6c 	bl	8004fd8 <i2cTest>
  HAL_Delay(100);
 8007300:	2064      	movs	r0, #100	; 0x64
 8007302:	f000 fc75 	bl	8007bf0 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007306:	4a1d      	ldr	r2, [pc, #116]	; (800737c <main+0x160>)
 8007308:	2101      	movs	r1, #1
 800730a:	2001      	movs	r0, #1
 800730c:	f7f9 f9f3 	bl	80006f6 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007310:	4a1b      	ldr	r2, [pc, #108]	; (8007380 <main+0x164>)
 8007312:	2101      	movs	r1, #1
 8007314:	2002      	movs	r0, #2
 8007316:	f7f9 f9ee 	bl	80006f6 <lcd_print>
  HAL_Delay(1000);
 800731a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800731e:	f000 fc67 	bl	8007bf0 <HAL_Delay>
  lcd_clear();
 8007322:	f7f9 f9fd 	bl	8000720 <lcd_clear>

  eepromKontrol();
 8007326:	f7fd fae1 	bl	80048ec <eepromKontrol>

  lcd_clear();
 800732a:	f7f9 f9f9 	bl	8000720 <lcd_clear>

  ESP8266_Init(&huart1);
 800732e:	4815      	ldr	r0, [pc, #84]	; (8007384 <main+0x168>)
 8007330:	f7f8 ff80 	bl	8000234 <ESP8266_Init>
  lcd_print(1, 1, "Test1");
 8007334:	4a14      	ldr	r2, [pc, #80]	; (8007388 <main+0x16c>)
 8007336:	2101      	movs	r1, #1
 8007338:	2001      	movs	r0, #1
 800733a:	f7f9 f9dc 	bl	80006f6 <lcd_print>
  SendMachineData(&huart1);
 800733e:	4811      	ldr	r0, [pc, #68]	; (8007384 <main+0x168>)
 8007340:	f7f9 f844 	bl	80003cc <SendMachineData>
  lcd_print(2, 1, "Test2");
 8007344:	4a11      	ldr	r2, [pc, #68]	; (800738c <main+0x170>)
 8007346:	2101      	movs	r1, #1
 8007348:	2002      	movs	r0, #2
 800734a:	f7f9 f9d4 	bl	80006f6 <lcd_print>
  HAL_Delay(500);
 800734e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007352:	f000 fc4d 	bl	8007bf0 <HAL_Delay>
  lcd_clear();
 8007356:	f7f9 f9e3 	bl	8000720 <lcd_clear>

  backLightTimer = millis;
 800735a:	4b0d      	ldr	r3, [pc, #52]	; (8007390 <main+0x174>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a0d      	ldr	r2, [pc, #52]	; (8007394 <main+0x178>)
 8007360:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007362:	f7ff fdb7 	bl	8006ed4 <mainLoop>
 8007366:	e7fc      	b.n	8007362 <main+0x146>
 8007368:	40010c00 	.word	0x40010c00
 800736c:	20000d34 	.word	0x20000d34
 8007370:	20000ce0 	.word	0x20000ce0
 8007374:	40011000 	.word	0x40011000
 8007378:	40010800 	.word	0x40010800
 800737c:	0800cf48 	.word	0x0800cf48
 8007380:	0800cf5c 	.word	0x0800cf5c
 8007384:	20000d7c 	.word	0x20000d7c
 8007388:	0800cf70 	.word	0x0800cf70
 800738c:	0800cf78 	.word	0x0800cf78
 8007390:	20000b00 	.word	0x20000b00
 8007394:	20000b1c 	.word	0x20000b1c

08007398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b090      	sub	sp, #64	; 0x40
 800739c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800739e:	f107 0318 	add.w	r3, r7, #24
 80073a2:	2228      	movs	r2, #40	; 0x28
 80073a4:	2100      	movs	r1, #0
 80073a6:	4618      	mov	r0, r3
 80073a8:	f004 fb36 	bl	800ba18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80073ac:	1d3b      	adds	r3, r7, #4
 80073ae:	2200      	movs	r2, #0
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	605a      	str	r2, [r3, #4]
 80073b4:	609a      	str	r2, [r3, #8]
 80073b6:	60da      	str	r2, [r3, #12]
 80073b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80073ba:	2301      	movs	r3, #1
 80073bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80073be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80073c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80073c4:	2300      	movs	r3, #0
 80073c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80073c8:	2301      	movs	r3, #1
 80073ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80073cc:	2302      	movs	r3, #2
 80073ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80073d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80073d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80073d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80073da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80073dc:	f107 0318 	add.w	r3, r7, #24
 80073e0:	4618      	mov	r0, r3
 80073e2:	f002 fc3f 	bl	8009c64 <HAL_RCC_OscConfig>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d001      	beq.n	80073f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80073ec:	f000 f9a2 	bl	8007734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80073f0:	230f      	movs	r3, #15
 80073f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80073f4:	2302      	movs	r3, #2
 80073f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80073f8:	2300      	movs	r3, #0
 80073fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80073fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007400:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007402:	2300      	movs	r3, #0
 8007404:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007406:	1d3b      	adds	r3, r7, #4
 8007408:	2102      	movs	r1, #2
 800740a:	4618      	mov	r0, r3
 800740c:	f002 feac 	bl	800a168 <HAL_RCC_ClockConfig>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007416:	f000 f98d 	bl	8007734 <Error_Handler>
  }
}
 800741a:	bf00      	nop
 800741c:	3740      	adds	r7, #64	; 0x40
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007428:	4b16      	ldr	r3, [pc, #88]	; (8007484 <MX_CAN_Init+0x60>)
 800742a:	4a17      	ldr	r2, [pc, #92]	; (8007488 <MX_CAN_Init+0x64>)
 800742c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800742e:	4b15      	ldr	r3, [pc, #84]	; (8007484 <MX_CAN_Init+0x60>)
 8007430:	2210      	movs	r2, #16
 8007432:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007434:	4b13      	ldr	r3, [pc, #76]	; (8007484 <MX_CAN_Init+0x60>)
 8007436:	2200      	movs	r2, #0
 8007438:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800743a:	4b12      	ldr	r3, [pc, #72]	; (8007484 <MX_CAN_Init+0x60>)
 800743c:	2200      	movs	r2, #0
 800743e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007440:	4b10      	ldr	r3, [pc, #64]	; (8007484 <MX_CAN_Init+0x60>)
 8007442:	2200      	movs	r2, #0
 8007444:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007446:	4b0f      	ldr	r3, [pc, #60]	; (8007484 <MX_CAN_Init+0x60>)
 8007448:	2200      	movs	r2, #0
 800744a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800744c:	4b0d      	ldr	r3, [pc, #52]	; (8007484 <MX_CAN_Init+0x60>)
 800744e:	2200      	movs	r2, #0
 8007450:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007452:	4b0c      	ldr	r3, [pc, #48]	; (8007484 <MX_CAN_Init+0x60>)
 8007454:	2200      	movs	r2, #0
 8007456:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007458:	4b0a      	ldr	r3, [pc, #40]	; (8007484 <MX_CAN_Init+0x60>)
 800745a:	2200      	movs	r2, #0
 800745c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800745e:	4b09      	ldr	r3, [pc, #36]	; (8007484 <MX_CAN_Init+0x60>)
 8007460:	2200      	movs	r2, #0
 8007462:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007464:	4b07      	ldr	r3, [pc, #28]	; (8007484 <MX_CAN_Init+0x60>)
 8007466:	2200      	movs	r2, #0
 8007468:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800746a:	4b06      	ldr	r3, [pc, #24]	; (8007484 <MX_CAN_Init+0x60>)
 800746c:	2200      	movs	r2, #0
 800746e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007470:	4804      	ldr	r0, [pc, #16]	; (8007484 <MX_CAN_Init+0x60>)
 8007472:	f000 fbe1 	bl	8007c38 <HAL_CAN_Init>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800747c:	f000 f95a 	bl	8007734 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007480:	bf00      	nop
 8007482:	bd80      	pop	{r7, pc}
 8007484:	20000cb8 	.word	0x20000cb8
 8007488:	40006400 	.word	0x40006400

0800748c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007490:	4b12      	ldr	r3, [pc, #72]	; (80074dc <MX_I2C1_Init+0x50>)
 8007492:	4a13      	ldr	r2, [pc, #76]	; (80074e0 <MX_I2C1_Init+0x54>)
 8007494:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007496:	4b11      	ldr	r3, [pc, #68]	; (80074dc <MX_I2C1_Init+0x50>)
 8007498:	4a12      	ldr	r2, [pc, #72]	; (80074e4 <MX_I2C1_Init+0x58>)
 800749a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800749c:	4b0f      	ldr	r3, [pc, #60]	; (80074dc <MX_I2C1_Init+0x50>)
 800749e:	2200      	movs	r2, #0
 80074a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80074a2:	4b0e      	ldr	r3, [pc, #56]	; (80074dc <MX_I2C1_Init+0x50>)
 80074a4:	2200      	movs	r2, #0
 80074a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80074a8:	4b0c      	ldr	r3, [pc, #48]	; (80074dc <MX_I2C1_Init+0x50>)
 80074aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80074ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80074b0:	4b0a      	ldr	r3, [pc, #40]	; (80074dc <MX_I2C1_Init+0x50>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80074b6:	4b09      	ldr	r3, [pc, #36]	; (80074dc <MX_I2C1_Init+0x50>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80074bc:	4b07      	ldr	r3, [pc, #28]	; (80074dc <MX_I2C1_Init+0x50>)
 80074be:	2200      	movs	r2, #0
 80074c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80074c2:	4b06      	ldr	r3, [pc, #24]	; (80074dc <MX_I2C1_Init+0x50>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80074c8:	4804      	ldr	r0, [pc, #16]	; (80074dc <MX_I2C1_Init+0x50>)
 80074ca:	f001 f9a9 	bl	8008820 <HAL_I2C_Init>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80074d4:	f000 f92e 	bl	8007734 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80074d8:	bf00      	nop
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	20000ce0 	.word	0x20000ce0
 80074e0:	40005400 	.word	0x40005400
 80074e4:	00061a80 	.word	0x00061a80

080074e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80074ee:	f107 0308 	add.w	r3, r7, #8
 80074f2:	2200      	movs	r2, #0
 80074f4:	601a      	str	r2, [r3, #0]
 80074f6:	605a      	str	r2, [r3, #4]
 80074f8:	609a      	str	r2, [r3, #8]
 80074fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80074fc:	463b      	mov	r3, r7
 80074fe:	2200      	movs	r2, #0
 8007500:	601a      	str	r2, [r3, #0]
 8007502:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007504:	4b1f      	ldr	r3, [pc, #124]	; (8007584 <MX_TIM1_Init+0x9c>)
 8007506:	4a20      	ldr	r2, [pc, #128]	; (8007588 <MX_TIM1_Init+0xa0>)
 8007508:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800750a:	4b1e      	ldr	r3, [pc, #120]	; (8007584 <MX_TIM1_Init+0x9c>)
 800750c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007510:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007512:	4b1c      	ldr	r3, [pc, #112]	; (8007584 <MX_TIM1_Init+0x9c>)
 8007514:	2200      	movs	r2, #0
 8007516:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007518:	4b1a      	ldr	r3, [pc, #104]	; (8007584 <MX_TIM1_Init+0x9c>)
 800751a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800751e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007520:	4b18      	ldr	r3, [pc, #96]	; (8007584 <MX_TIM1_Init+0x9c>)
 8007522:	2200      	movs	r2, #0
 8007524:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007526:	4b17      	ldr	r3, [pc, #92]	; (8007584 <MX_TIM1_Init+0x9c>)
 8007528:	2200      	movs	r2, #0
 800752a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800752c:	4b15      	ldr	r3, [pc, #84]	; (8007584 <MX_TIM1_Init+0x9c>)
 800752e:	2200      	movs	r2, #0
 8007530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007532:	4814      	ldr	r0, [pc, #80]	; (8007584 <MX_TIM1_Init+0x9c>)
 8007534:	f002 ffa6 	bl	800a484 <HAL_TIM_Base_Init>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d001      	beq.n	8007542 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800753e:	f000 f8f9 	bl	8007734 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007546:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007548:	f107 0308 	add.w	r3, r7, #8
 800754c:	4619      	mov	r1, r3
 800754e:	480d      	ldr	r0, [pc, #52]	; (8007584 <MX_TIM1_Init+0x9c>)
 8007550:	f003 f950 	bl	800a7f4 <HAL_TIM_ConfigClockSource>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800755a:	f000 f8eb 	bl	8007734 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800755e:	2300      	movs	r3, #0
 8007560:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007562:	2300      	movs	r3, #0
 8007564:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007566:	463b      	mov	r3, r7
 8007568:	4619      	mov	r1, r3
 800756a:	4806      	ldr	r0, [pc, #24]	; (8007584 <MX_TIM1_Init+0x9c>)
 800756c:	f003 fb3e 	bl	800abec <HAL_TIMEx_MasterConfigSynchronization>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007576:	f000 f8dd 	bl	8007734 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800757a:	bf00      	nop
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	20000d34 	.word	0x20000d34
 8007588:	40012c00 	.word	0x40012c00

0800758c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007590:	4b11      	ldr	r3, [pc, #68]	; (80075d8 <MX_USART1_UART_Init+0x4c>)
 8007592:	4a12      	ldr	r2, [pc, #72]	; (80075dc <MX_USART1_UART_Init+0x50>)
 8007594:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007596:	4b10      	ldr	r3, [pc, #64]	; (80075d8 <MX_USART1_UART_Init+0x4c>)
 8007598:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800759c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800759e:	4b0e      	ldr	r3, [pc, #56]	; (80075d8 <MX_USART1_UART_Init+0x4c>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80075a4:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <MX_USART1_UART_Init+0x4c>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80075aa:	4b0b      	ldr	r3, [pc, #44]	; (80075d8 <MX_USART1_UART_Init+0x4c>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80075b0:	4b09      	ldr	r3, [pc, #36]	; (80075d8 <MX_USART1_UART_Init+0x4c>)
 80075b2:	220c      	movs	r2, #12
 80075b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80075b6:	4b08      	ldr	r3, [pc, #32]	; (80075d8 <MX_USART1_UART_Init+0x4c>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80075bc:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <MX_USART1_UART_Init+0x4c>)
 80075be:	2200      	movs	r2, #0
 80075c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80075c2:	4805      	ldr	r0, [pc, #20]	; (80075d8 <MX_USART1_UART_Init+0x4c>)
 80075c4:	f003 fb90 	bl	800ace8 <HAL_UART_Init>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80075ce:	f000 f8b1 	bl	8007734 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80075d2:	bf00      	nop
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20000d7c 	.word	0x20000d7c
 80075dc:	40013800 	.word	0x40013800

080075e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b088      	sub	sp, #32
 80075e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075e6:	f107 0310 	add.w	r3, r7, #16
 80075ea:	2200      	movs	r2, #0
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	605a      	str	r2, [r3, #4]
 80075f0:	609a      	str	r2, [r3, #8]
 80075f2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80075f4:	4b4b      	ldr	r3, [pc, #300]	; (8007724 <MX_GPIO_Init+0x144>)
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	4a4a      	ldr	r2, [pc, #296]	; (8007724 <MX_GPIO_Init+0x144>)
 80075fa:	f043 0310 	orr.w	r3, r3, #16
 80075fe:	6193      	str	r3, [r2, #24]
 8007600:	4b48      	ldr	r3, [pc, #288]	; (8007724 <MX_GPIO_Init+0x144>)
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	f003 0310 	and.w	r3, r3, #16
 8007608:	60fb      	str	r3, [r7, #12]
 800760a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800760c:	4b45      	ldr	r3, [pc, #276]	; (8007724 <MX_GPIO_Init+0x144>)
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	4a44      	ldr	r2, [pc, #272]	; (8007724 <MX_GPIO_Init+0x144>)
 8007612:	f043 0320 	orr.w	r3, r3, #32
 8007616:	6193      	str	r3, [r2, #24]
 8007618:	4b42      	ldr	r3, [pc, #264]	; (8007724 <MX_GPIO_Init+0x144>)
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	f003 0320 	and.w	r3, r3, #32
 8007620:	60bb      	str	r3, [r7, #8]
 8007622:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007624:	4b3f      	ldr	r3, [pc, #252]	; (8007724 <MX_GPIO_Init+0x144>)
 8007626:	699b      	ldr	r3, [r3, #24]
 8007628:	4a3e      	ldr	r2, [pc, #248]	; (8007724 <MX_GPIO_Init+0x144>)
 800762a:	f043 0304 	orr.w	r3, r3, #4
 800762e:	6193      	str	r3, [r2, #24]
 8007630:	4b3c      	ldr	r3, [pc, #240]	; (8007724 <MX_GPIO_Init+0x144>)
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	f003 0304 	and.w	r3, r3, #4
 8007638:	607b      	str	r3, [r7, #4]
 800763a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800763c:	4b39      	ldr	r3, [pc, #228]	; (8007724 <MX_GPIO_Init+0x144>)
 800763e:	699b      	ldr	r3, [r3, #24]
 8007640:	4a38      	ldr	r2, [pc, #224]	; (8007724 <MX_GPIO_Init+0x144>)
 8007642:	f043 0308 	orr.w	r3, r3, #8
 8007646:	6193      	str	r3, [r2, #24]
 8007648:	4b36      	ldr	r3, [pc, #216]	; (8007724 <MX_GPIO_Init+0x144>)
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	f003 0308 	and.w	r3, r3, #8
 8007650:	603b      	str	r3, [r7, #0]
 8007652:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8007654:	2200      	movs	r2, #0
 8007656:	21f0      	movs	r1, #240	; 0xf0
 8007658:	4833      	ldr	r0, [pc, #204]	; (8007728 <MX_GPIO_Init+0x148>)
 800765a:	f001 f8b0 	bl	80087be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800765e:	2200      	movs	r2, #0
 8007660:	f241 0130 	movw	r1, #4144	; 0x1030
 8007664:	4831      	ldr	r0, [pc, #196]	; (800772c <MX_GPIO_Init+0x14c>)
 8007666:	f001 f8aa 	bl	80087be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800766a:	2200      	movs	r2, #0
 800766c:	f640 4107 	movw	r1, #3079	; 0xc07
 8007670:	482f      	ldr	r0, [pc, #188]	; (8007730 <MX_GPIO_Init+0x150>)
 8007672:	f001 f8a4 	bl	80087be <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8007676:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 800767a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800767c:	2300      	movs	r3, #0
 800767e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007680:	2300      	movs	r3, #0
 8007682:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007684:	f107 0310 	add.w	r3, r7, #16
 8007688:	4619      	mov	r1, r3
 800768a:	4828      	ldr	r0, [pc, #160]	; (800772c <MX_GPIO_Init+0x14c>)
 800768c:	f000 fe20 	bl	80082d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8007690:	f248 130f 	movw	r3, #33039	; 0x810f
 8007694:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007696:	2300      	movs	r3, #0
 8007698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800769a:	2300      	movs	r3, #0
 800769c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800769e:	f107 0310 	add.w	r3, r7, #16
 80076a2:	4619      	mov	r1, r3
 80076a4:	4820      	ldr	r0, [pc, #128]	; (8007728 <MX_GPIO_Init+0x148>)
 80076a6:	f000 fe13 	bl	80082d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80076aa:	23f0      	movs	r3, #240	; 0xf0
 80076ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80076ae:	2301      	movs	r3, #1
 80076b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076b2:	2300      	movs	r3, #0
 80076b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076b6:	2302      	movs	r3, #2
 80076b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076ba:	f107 0310 	add.w	r3, r7, #16
 80076be:	4619      	mov	r1, r3
 80076c0:	4819      	ldr	r0, [pc, #100]	; (8007728 <MX_GPIO_Init+0x148>)
 80076c2:	f000 fe05 	bl	80082d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80076c6:	f241 0330 	movw	r3, #4144	; 0x1030
 80076ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80076cc:	2301      	movs	r3, #1
 80076ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076d0:	2300      	movs	r3, #0
 80076d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076d4:	2302      	movs	r3, #2
 80076d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076d8:	f107 0310 	add.w	r3, r7, #16
 80076dc:	4619      	mov	r1, r3
 80076de:	4813      	ldr	r0, [pc, #76]	; (800772c <MX_GPIO_Init+0x14c>)
 80076e0:	f000 fdf6 	bl	80082d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80076e4:	f640 4307 	movw	r3, #3079	; 0xc07
 80076e8:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80076ea:	2301      	movs	r3, #1
 80076ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076ee:	2300      	movs	r3, #0
 80076f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076f2:	2302      	movs	r3, #2
 80076f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076f6:	f107 0310 	add.w	r3, r7, #16
 80076fa:	4619      	mov	r1, r3
 80076fc:	480c      	ldr	r0, [pc, #48]	; (8007730 <MX_GPIO_Init+0x150>)
 80076fe:	f000 fde7 	bl	80082d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8007702:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007708:	2300      	movs	r3, #0
 800770a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800770c:	2300      	movs	r3, #0
 800770e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007710:	f107 0310 	add.w	r3, r7, #16
 8007714:	4619      	mov	r1, r3
 8007716:	4806      	ldr	r0, [pc, #24]	; (8007730 <MX_GPIO_Init+0x150>)
 8007718:	f000 fdda 	bl	80082d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800771c:	bf00      	nop
 800771e:	3720      	adds	r7, #32
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	40021000 	.word	0x40021000
 8007728:	40010800 	.word	0x40010800
 800772c:	40011000 	.word	0x40011000
 8007730:	40010c00 	.word	0x40010c00

08007734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007734:	b480      	push	{r7}
 8007736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8007738:	bf00      	nop
 800773a:	46bd      	mov	sp, r7
 800773c:	bc80      	pop	{r7}
 800773e:	4770      	bx	lr

08007740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007746:	4b15      	ldr	r3, [pc, #84]	; (800779c <HAL_MspInit+0x5c>)
 8007748:	699b      	ldr	r3, [r3, #24]
 800774a:	4a14      	ldr	r2, [pc, #80]	; (800779c <HAL_MspInit+0x5c>)
 800774c:	f043 0301 	orr.w	r3, r3, #1
 8007750:	6193      	str	r3, [r2, #24]
 8007752:	4b12      	ldr	r3, [pc, #72]	; (800779c <HAL_MspInit+0x5c>)
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	60bb      	str	r3, [r7, #8]
 800775c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800775e:	4b0f      	ldr	r3, [pc, #60]	; (800779c <HAL_MspInit+0x5c>)
 8007760:	69db      	ldr	r3, [r3, #28]
 8007762:	4a0e      	ldr	r2, [pc, #56]	; (800779c <HAL_MspInit+0x5c>)
 8007764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007768:	61d3      	str	r3, [r2, #28]
 800776a:	4b0c      	ldr	r3, [pc, #48]	; (800779c <HAL_MspInit+0x5c>)
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007772:	607b      	str	r3, [r7, #4]
 8007774:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007776:	4b0a      	ldr	r3, [pc, #40]	; (80077a0 <HAL_MspInit+0x60>)
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	60fb      	str	r3, [r7, #12]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8007782:	60fb      	str	r3, [r7, #12]
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800778a:	60fb      	str	r3, [r7, #12]
 800778c:	4a04      	ldr	r2, [pc, #16]	; (80077a0 <HAL_MspInit+0x60>)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007792:	bf00      	nop
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	bc80      	pop	{r7}
 800779a:	4770      	bx	lr
 800779c:	40021000 	.word	0x40021000
 80077a0:	40010000 	.word	0x40010000

080077a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b088      	sub	sp, #32
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077ac:	f107 0310 	add.w	r3, r7, #16
 80077b0:	2200      	movs	r2, #0
 80077b2:	601a      	str	r2, [r3, #0]
 80077b4:	605a      	str	r2, [r3, #4]
 80077b6:	609a      	str	r2, [r3, #8]
 80077b8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a1c      	ldr	r2, [pc, #112]	; (8007830 <HAL_CAN_MspInit+0x8c>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d131      	bne.n	8007828 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80077c4:	4b1b      	ldr	r3, [pc, #108]	; (8007834 <HAL_CAN_MspInit+0x90>)
 80077c6:	69db      	ldr	r3, [r3, #28]
 80077c8:	4a1a      	ldr	r2, [pc, #104]	; (8007834 <HAL_CAN_MspInit+0x90>)
 80077ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80077ce:	61d3      	str	r3, [r2, #28]
 80077d0:	4b18      	ldr	r3, [pc, #96]	; (8007834 <HAL_CAN_MspInit+0x90>)
 80077d2:	69db      	ldr	r3, [r3, #28]
 80077d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077d8:	60fb      	str	r3, [r7, #12]
 80077da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80077dc:	4b15      	ldr	r3, [pc, #84]	; (8007834 <HAL_CAN_MspInit+0x90>)
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	4a14      	ldr	r2, [pc, #80]	; (8007834 <HAL_CAN_MspInit+0x90>)
 80077e2:	f043 0304 	orr.w	r3, r3, #4
 80077e6:	6193      	str	r3, [r2, #24]
 80077e8:	4b12      	ldr	r3, [pc, #72]	; (8007834 <HAL_CAN_MspInit+0x90>)
 80077ea:	699b      	ldr	r3, [r3, #24]
 80077ec:	f003 0304 	and.w	r3, r3, #4
 80077f0:	60bb      	str	r3, [r7, #8]
 80077f2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80077f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80077f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80077fa:	2300      	movs	r3, #0
 80077fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077fe:	2300      	movs	r3, #0
 8007800:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007802:	f107 0310 	add.w	r3, r7, #16
 8007806:	4619      	mov	r1, r3
 8007808:	480b      	ldr	r0, [pc, #44]	; (8007838 <HAL_CAN_MspInit+0x94>)
 800780a:	f000 fd61 	bl	80082d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800780e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007814:	2302      	movs	r3, #2
 8007816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007818:	2303      	movs	r3, #3
 800781a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800781c:	f107 0310 	add.w	r3, r7, #16
 8007820:	4619      	mov	r1, r3
 8007822:	4805      	ldr	r0, [pc, #20]	; (8007838 <HAL_CAN_MspInit+0x94>)
 8007824:	f000 fd54 	bl	80082d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8007828:	bf00      	nop
 800782a:	3720      	adds	r7, #32
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	40006400 	.word	0x40006400
 8007834:	40021000 	.word	0x40021000
 8007838:	40010800 	.word	0x40010800

0800783c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b088      	sub	sp, #32
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007844:	f107 0310 	add.w	r3, r7, #16
 8007848:	2200      	movs	r2, #0
 800784a:	601a      	str	r2, [r3, #0]
 800784c:	605a      	str	r2, [r3, #4]
 800784e:	609a      	str	r2, [r3, #8]
 8007850:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a15      	ldr	r2, [pc, #84]	; (80078ac <HAL_I2C_MspInit+0x70>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d123      	bne.n	80078a4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800785c:	4b14      	ldr	r3, [pc, #80]	; (80078b0 <HAL_I2C_MspInit+0x74>)
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	4a13      	ldr	r2, [pc, #76]	; (80078b0 <HAL_I2C_MspInit+0x74>)
 8007862:	f043 0308 	orr.w	r3, r3, #8
 8007866:	6193      	str	r3, [r2, #24]
 8007868:	4b11      	ldr	r3, [pc, #68]	; (80078b0 <HAL_I2C_MspInit+0x74>)
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	f003 0308 	and.w	r3, r3, #8
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007874:	23c0      	movs	r3, #192	; 0xc0
 8007876:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007878:	2312      	movs	r3, #18
 800787a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800787c:	2303      	movs	r3, #3
 800787e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007880:	f107 0310 	add.w	r3, r7, #16
 8007884:	4619      	mov	r1, r3
 8007886:	480b      	ldr	r0, [pc, #44]	; (80078b4 <HAL_I2C_MspInit+0x78>)
 8007888:	f000 fd22 	bl	80082d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800788c:	4b08      	ldr	r3, [pc, #32]	; (80078b0 <HAL_I2C_MspInit+0x74>)
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	4a07      	ldr	r2, [pc, #28]	; (80078b0 <HAL_I2C_MspInit+0x74>)
 8007892:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007896:	61d3      	str	r3, [r2, #28]
 8007898:	4b05      	ldr	r3, [pc, #20]	; (80078b0 <HAL_I2C_MspInit+0x74>)
 800789a:	69db      	ldr	r3, [r3, #28]
 800789c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078a0:	60bb      	str	r3, [r7, #8]
 80078a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80078a4:	bf00      	nop
 80078a6:	3720      	adds	r7, #32
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	40005400 	.word	0x40005400
 80078b0:	40021000 	.word	0x40021000
 80078b4:	40010c00 	.word	0x40010c00

080078b8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a0a      	ldr	r2, [pc, #40]	; (80078f0 <HAL_I2C_MspDeInit+0x38>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d10d      	bne.n	80078e6 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80078ca:	4b0a      	ldr	r3, [pc, #40]	; (80078f4 <HAL_I2C_MspDeInit+0x3c>)
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	4a09      	ldr	r2, [pc, #36]	; (80078f4 <HAL_I2C_MspDeInit+0x3c>)
 80078d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078d4:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80078d6:	2140      	movs	r1, #64	; 0x40
 80078d8:	4807      	ldr	r0, [pc, #28]	; (80078f8 <HAL_I2C_MspDeInit+0x40>)
 80078da:	f000 fe8d 	bl	80085f8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80078de:	2180      	movs	r1, #128	; 0x80
 80078e0:	4805      	ldr	r0, [pc, #20]	; (80078f8 <HAL_I2C_MspDeInit+0x40>)
 80078e2:	f000 fe89 	bl	80085f8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80078e6:	bf00      	nop
 80078e8:	3708      	adds	r7, #8
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	40005400 	.word	0x40005400
 80078f4:	40021000 	.word	0x40021000
 80078f8:	40010c00 	.word	0x40010c00

080078fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a0d      	ldr	r2, [pc, #52]	; (8007940 <HAL_TIM_Base_MspInit+0x44>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d113      	bne.n	8007936 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800790e:	4b0d      	ldr	r3, [pc, #52]	; (8007944 <HAL_TIM_Base_MspInit+0x48>)
 8007910:	699b      	ldr	r3, [r3, #24]
 8007912:	4a0c      	ldr	r2, [pc, #48]	; (8007944 <HAL_TIM_Base_MspInit+0x48>)
 8007914:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007918:	6193      	str	r3, [r2, #24]
 800791a:	4b0a      	ldr	r3, [pc, #40]	; (8007944 <HAL_TIM_Base_MspInit+0x48>)
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007922:	60fb      	str	r3, [r7, #12]
 8007924:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8007926:	2200      	movs	r2, #0
 8007928:	2100      	movs	r1, #0
 800792a:	2019      	movs	r0, #25
 800792c:	f000 fb57 	bl	8007fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8007930:	2019      	movs	r0, #25
 8007932:	f000 fb70 	bl	8008016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8007936:	bf00      	nop
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	40012c00 	.word	0x40012c00
 8007944:	40021000 	.word	0x40021000

08007948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b088      	sub	sp, #32
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007950:	f107 0310 	add.w	r3, r7, #16
 8007954:	2200      	movs	r2, #0
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	605a      	str	r2, [r3, #4]
 800795a:	609a      	str	r2, [r3, #8]
 800795c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a20      	ldr	r2, [pc, #128]	; (80079e4 <HAL_UART_MspInit+0x9c>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d139      	bne.n	80079dc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007968:	4b1f      	ldr	r3, [pc, #124]	; (80079e8 <HAL_UART_MspInit+0xa0>)
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	4a1e      	ldr	r2, [pc, #120]	; (80079e8 <HAL_UART_MspInit+0xa0>)
 800796e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007972:	6193      	str	r3, [r2, #24]
 8007974:	4b1c      	ldr	r3, [pc, #112]	; (80079e8 <HAL_UART_MspInit+0xa0>)
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800797c:	60fb      	str	r3, [r7, #12]
 800797e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007980:	4b19      	ldr	r3, [pc, #100]	; (80079e8 <HAL_UART_MspInit+0xa0>)
 8007982:	699b      	ldr	r3, [r3, #24]
 8007984:	4a18      	ldr	r2, [pc, #96]	; (80079e8 <HAL_UART_MspInit+0xa0>)
 8007986:	f043 0304 	orr.w	r3, r3, #4
 800798a:	6193      	str	r3, [r2, #24]
 800798c:	4b16      	ldr	r3, [pc, #88]	; (80079e8 <HAL_UART_MspInit+0xa0>)
 800798e:	699b      	ldr	r3, [r3, #24]
 8007990:	f003 0304 	and.w	r3, r3, #4
 8007994:	60bb      	str	r3, [r7, #8]
 8007996:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007998:	f44f 7300 	mov.w	r3, #512	; 0x200
 800799c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800799e:	2302      	movs	r3, #2
 80079a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80079a2:	2303      	movs	r3, #3
 80079a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079a6:	f107 0310 	add.w	r3, r7, #16
 80079aa:	4619      	mov	r1, r3
 80079ac:	480f      	ldr	r0, [pc, #60]	; (80079ec <HAL_UART_MspInit+0xa4>)
 80079ae:	f000 fc8f 	bl	80082d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80079b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80079b8:	2300      	movs	r3, #0
 80079ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079bc:	2300      	movs	r3, #0
 80079be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079c0:	f107 0310 	add.w	r3, r7, #16
 80079c4:	4619      	mov	r1, r3
 80079c6:	4809      	ldr	r0, [pc, #36]	; (80079ec <HAL_UART_MspInit+0xa4>)
 80079c8:	f000 fc82 	bl	80082d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80079cc:	2200      	movs	r2, #0
 80079ce:	2100      	movs	r1, #0
 80079d0:	2025      	movs	r0, #37	; 0x25
 80079d2:	f000 fb04 	bl	8007fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80079d6:	2025      	movs	r0, #37	; 0x25
 80079d8:	f000 fb1d 	bl	8008016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80079dc:	bf00      	nop
 80079de:	3720      	adds	r7, #32
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	40013800 	.word	0x40013800
 80079e8:	40021000 	.word	0x40021000
 80079ec:	40010800 	.word	0x40010800

080079f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80079f0:	b480      	push	{r7}
 80079f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80079f4:	e7fe      	b.n	80079f4 <NMI_Handler+0x4>

080079f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80079f6:	b480      	push	{r7}
 80079f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80079fa:	e7fe      	b.n	80079fa <HardFault_Handler+0x4>

080079fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80079fc:	b480      	push	{r7}
 80079fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007a00:	e7fe      	b.n	8007a00 <MemManage_Handler+0x4>

08007a02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007a02:	b480      	push	{r7}
 8007a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007a06:	e7fe      	b.n	8007a06 <BusFault_Handler+0x4>

08007a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007a0c:	e7fe      	b.n	8007a0c <UsageFault_Handler+0x4>

08007a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007a12:	bf00      	nop
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bc80      	pop	{r7}
 8007a18:	4770      	bx	lr

08007a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007a1e:	bf00      	nop
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bc80      	pop	{r7}
 8007a24:	4770      	bx	lr

08007a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007a26:	b480      	push	{r7}
 8007a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007a2a:	bf00      	nop
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bc80      	pop	{r7}
 8007a30:	4770      	bx	lr

08007a32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007a32:	b580      	push	{r7, lr}
 8007a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007a36:	f000 f8bf 	bl	8007bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007a3a:	bf00      	nop
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007a44:	4802      	ldr	r0, [pc, #8]	; (8007a50 <TIM1_UP_IRQHandler+0x10>)
 8007a46:	f002 fdcd 	bl	800a5e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8007a4a:	bf00      	nop
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20000d34 	.word	0x20000d34

08007a54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007a58:	4802      	ldr	r0, [pc, #8]	; (8007a64 <USART1_IRQHandler+0x10>)
 8007a5a:	f003 f9cb 	bl	800adf4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007a5e:	bf00      	nop
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	20000d7c 	.word	0x20000d7c

08007a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007a70:	4a14      	ldr	r2, [pc, #80]	; (8007ac4 <_sbrk+0x5c>)
 8007a72:	4b15      	ldr	r3, [pc, #84]	; (8007ac8 <_sbrk+0x60>)
 8007a74:	1ad3      	subs	r3, r2, r3
 8007a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007a7c:	4b13      	ldr	r3, [pc, #76]	; (8007acc <_sbrk+0x64>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d102      	bne.n	8007a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007a84:	4b11      	ldr	r3, [pc, #68]	; (8007acc <_sbrk+0x64>)
 8007a86:	4a12      	ldr	r2, [pc, #72]	; (8007ad0 <_sbrk+0x68>)
 8007a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007a8a:	4b10      	ldr	r3, [pc, #64]	; (8007acc <_sbrk+0x64>)
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4413      	add	r3, r2
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d207      	bcs.n	8007aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007a98:	f003 ffd6 	bl	800ba48 <__errno>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	220c      	movs	r2, #12
 8007aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8007aa6:	e009      	b.n	8007abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007aa8:	4b08      	ldr	r3, [pc, #32]	; (8007acc <_sbrk+0x64>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007aae:	4b07      	ldr	r3, [pc, #28]	; (8007acc <_sbrk+0x64>)
 8007ab0:	681a      	ldr	r2, [r3, #0]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	4a05      	ldr	r2, [pc, #20]	; (8007acc <_sbrk+0x64>)
 8007ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007aba:	68fb      	ldr	r3, [r7, #12]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3718      	adds	r7, #24
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	2000c000 	.word	0x2000c000
 8007ac8:	00000400 	.word	0x00000400
 8007acc:	20000dc4 	.word	0x20000dc4
 8007ad0:	20000f18 	.word	0x20000f18

08007ad4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007ad8:	bf00      	nop
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bc80      	pop	{r7}
 8007ade:	4770      	bx	lr

08007ae0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007ae0:	480c      	ldr	r0, [pc, #48]	; (8007b14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007ae2:	490d      	ldr	r1, [pc, #52]	; (8007b18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007ae4:	4a0d      	ldr	r2, [pc, #52]	; (8007b1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007ae8:	e002      	b.n	8007af0 <LoopCopyDataInit>

08007aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007aee:	3304      	adds	r3, #4

08007af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007af4:	d3f9      	bcc.n	8007aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007af6:	4a0a      	ldr	r2, [pc, #40]	; (8007b20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007af8:	4c0a      	ldr	r4, [pc, #40]	; (8007b24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007afc:	e001      	b.n	8007b02 <LoopFillZerobss>

08007afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007b00:	3204      	adds	r2, #4

08007b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007b04:	d3fb      	bcc.n	8007afe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007b06:	f7ff ffe5 	bl	8007ad4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007b0a:	f003 ffa3 	bl	800ba54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007b0e:	f7ff fb85 	bl	800721c <main>
  bx lr
 8007b12:	4770      	bx	lr
  ldr r0, =_sdata
 8007b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007b18:	200009a0 	.word	0x200009a0
  ldr r2, =_sidata
 8007b1c:	0800d00c 	.word	0x0800d00c
  ldr r2, =_sbss
 8007b20:	200009a0 	.word	0x200009a0
  ldr r4, =_ebss
 8007b24:	20000f14 	.word	0x20000f14

08007b28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007b28:	e7fe      	b.n	8007b28 <ADC1_2_IRQHandler>
	...

08007b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007b30:	4b08      	ldr	r3, [pc, #32]	; (8007b54 <HAL_Init+0x28>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a07      	ldr	r2, [pc, #28]	; (8007b54 <HAL_Init+0x28>)
 8007b36:	f043 0310 	orr.w	r3, r3, #16
 8007b3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007b3c:	2003      	movs	r0, #3
 8007b3e:	f000 fa43 	bl	8007fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007b42:	200f      	movs	r0, #15
 8007b44:	f000 f808 	bl	8007b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007b48:	f7ff fdfa 	bl	8007740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	40022000 	.word	0x40022000

08007b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007b60:	4b12      	ldr	r3, [pc, #72]	; (8007bac <HAL_InitTick+0x54>)
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	4b12      	ldr	r3, [pc, #72]	; (8007bb0 <HAL_InitTick+0x58>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	4619      	mov	r1, r3
 8007b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b76:	4618      	mov	r0, r3
 8007b78:	f000 fa5b 	bl	8008032 <HAL_SYSTICK_Config>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e00e      	b.n	8007ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2b0f      	cmp	r3, #15
 8007b8a:	d80a      	bhi.n	8007ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	6879      	ldr	r1, [r7, #4]
 8007b90:	f04f 30ff 	mov.w	r0, #4294967295
 8007b94:	f000 fa23 	bl	8007fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007b98:	4a06      	ldr	r2, [pc, #24]	; (8007bb4 <HAL_InitTick+0x5c>)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e000      	b.n	8007ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	20000944 	.word	0x20000944
 8007bb0:	2000094c 	.word	0x2000094c
 8007bb4:	20000948 	.word	0x20000948

08007bb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007bbc:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <HAL_IncTick+0x1c>)
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <HAL_IncTick+0x20>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	4a03      	ldr	r2, [pc, #12]	; (8007bd8 <HAL_IncTick+0x20>)
 8007bca:	6013      	str	r3, [r2, #0]
}
 8007bcc:	bf00      	nop
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bc80      	pop	{r7}
 8007bd2:	4770      	bx	lr
 8007bd4:	2000094c 	.word	0x2000094c
 8007bd8:	20000dc8 	.word	0x20000dc8

08007bdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	af00      	add	r7, sp, #0
  return uwTick;
 8007be0:	4b02      	ldr	r3, [pc, #8]	; (8007bec <HAL_GetTick+0x10>)
 8007be2:	681b      	ldr	r3, [r3, #0]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bc80      	pop	{r7}
 8007bea:	4770      	bx	lr
 8007bec:	20000dc8 	.word	0x20000dc8

08007bf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b084      	sub	sp, #16
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007bf8:	f7ff fff0 	bl	8007bdc <HAL_GetTick>
 8007bfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c08:	d005      	beq.n	8007c16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007c0a:	4b0a      	ldr	r3, [pc, #40]	; (8007c34 <HAL_Delay+0x44>)
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	461a      	mov	r2, r3
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	4413      	add	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007c16:	bf00      	nop
 8007c18:	f7ff ffe0 	bl	8007bdc <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d8f7      	bhi.n	8007c18 <HAL_Delay+0x28>
  {
  }
}
 8007c28:	bf00      	nop
 8007c2a:	bf00      	nop
 8007c2c:	3710      	adds	r7, #16
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	2000094c 	.word	0x2000094c

08007c38 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d101      	bne.n	8007c4a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e0ed      	b.n	8007e26 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d102      	bne.n	8007c5c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f7ff fda4 	bl	80077a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f042 0201 	orr.w	r2, r2, #1
 8007c6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007c6c:	f7ff ffb6 	bl	8007bdc <HAL_GetTick>
 8007c70:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007c72:	e012      	b.n	8007c9a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007c74:	f7ff ffb2 	bl	8007bdc <HAL_GetTick>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	2b0a      	cmp	r3, #10
 8007c80:	d90b      	bls.n	8007c9a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c86:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2205      	movs	r2, #5
 8007c92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e0c5      	b.n	8007e26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d0e5      	beq.n	8007c74 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 0202 	bic.w	r2, r2, #2
 8007cb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007cb8:	f7ff ff90 	bl	8007bdc <HAL_GetTick>
 8007cbc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007cbe:	e012      	b.n	8007ce6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007cc0:	f7ff ff8c 	bl	8007bdc <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	2b0a      	cmp	r3, #10
 8007ccc:	d90b      	bls.n	8007ce6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2205      	movs	r2, #5
 8007cde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e09f      	b.n	8007e26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	f003 0302 	and.w	r3, r3, #2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1e5      	bne.n	8007cc0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	7e1b      	ldrb	r3, [r3, #24]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d108      	bne.n	8007d0e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	e007      	b.n	8007d1e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	7e5b      	ldrb	r3, [r3, #25]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d108      	bne.n	8007d38 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	e007      	b.n	8007d48 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d46:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	7e9b      	ldrb	r3, [r3, #26]
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d108      	bne.n	8007d62 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f042 0220 	orr.w	r2, r2, #32
 8007d5e:	601a      	str	r2, [r3, #0]
 8007d60:	e007      	b.n	8007d72 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f022 0220 	bic.w	r2, r2, #32
 8007d70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	7edb      	ldrb	r3, [r3, #27]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d108      	bne.n	8007d8c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f022 0210 	bic.w	r2, r2, #16
 8007d88:	601a      	str	r2, [r3, #0]
 8007d8a:	e007      	b.n	8007d9c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f042 0210 	orr.w	r2, r2, #16
 8007d9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	7f1b      	ldrb	r3, [r3, #28]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d108      	bne.n	8007db6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f042 0208 	orr.w	r2, r2, #8
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	e007      	b.n	8007dc6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f022 0208 	bic.w	r2, r2, #8
 8007dc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	7f5b      	ldrb	r3, [r3, #29]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d108      	bne.n	8007de0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f042 0204 	orr.w	r2, r2, #4
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	e007      	b.n	8007df0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681a      	ldr	r2, [r3, #0]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f022 0204 	bic.w	r2, r2, #4
 8007dee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	689a      	ldr	r2, [r3, #8]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	431a      	orrs	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	695b      	ldr	r3, [r3, #20]
 8007e04:	ea42 0103 	orr.w	r1, r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	1e5a      	subs	r2, r3, #1
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
	...

08007e30 <__NVIC_SetPriorityGrouping>:
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f003 0307 	and.w	r3, r3, #7
 8007e3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e40:	4b0c      	ldr	r3, [pc, #48]	; (8007e74 <__NVIC_SetPriorityGrouping+0x44>)
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e46:	68ba      	ldr	r2, [r7, #8]
 8007e48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e62:	4a04      	ldr	r2, [pc, #16]	; (8007e74 <__NVIC_SetPriorityGrouping+0x44>)
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	60d3      	str	r3, [r2, #12]
}
 8007e68:	bf00      	nop
 8007e6a:	3714      	adds	r7, #20
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bc80      	pop	{r7}
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	e000ed00 	.word	0xe000ed00

08007e78 <__NVIC_GetPriorityGrouping>:
{
 8007e78:	b480      	push	{r7}
 8007e7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e7c:	4b04      	ldr	r3, [pc, #16]	; (8007e90 <__NVIC_GetPriorityGrouping+0x18>)
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	0a1b      	lsrs	r3, r3, #8
 8007e82:	f003 0307 	and.w	r3, r3, #7
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bc80      	pop	{r7}
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	e000ed00 	.word	0xe000ed00

08007e94 <__NVIC_EnableIRQ>:
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	db0b      	blt.n	8007ebe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ea6:	79fb      	ldrb	r3, [r7, #7]
 8007ea8:	f003 021f 	and.w	r2, r3, #31
 8007eac:	4906      	ldr	r1, [pc, #24]	; (8007ec8 <__NVIC_EnableIRQ+0x34>)
 8007eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eb2:	095b      	lsrs	r3, r3, #5
 8007eb4:	2001      	movs	r0, #1
 8007eb6:	fa00 f202 	lsl.w	r2, r0, r2
 8007eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007ebe:	bf00      	nop
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bc80      	pop	{r7}
 8007ec6:	4770      	bx	lr
 8007ec8:	e000e100 	.word	0xe000e100

08007ecc <__NVIC_SetPriority>:
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	6039      	str	r1, [r7, #0]
 8007ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	db0a      	blt.n	8007ef6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	b2da      	uxtb	r2, r3
 8007ee4:	490c      	ldr	r1, [pc, #48]	; (8007f18 <__NVIC_SetPriority+0x4c>)
 8007ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eea:	0112      	lsls	r2, r2, #4
 8007eec:	b2d2      	uxtb	r2, r2
 8007eee:	440b      	add	r3, r1
 8007ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007ef4:	e00a      	b.n	8007f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	4908      	ldr	r1, [pc, #32]	; (8007f1c <__NVIC_SetPriority+0x50>)
 8007efc:	79fb      	ldrb	r3, [r7, #7]
 8007efe:	f003 030f 	and.w	r3, r3, #15
 8007f02:	3b04      	subs	r3, #4
 8007f04:	0112      	lsls	r2, r2, #4
 8007f06:	b2d2      	uxtb	r2, r2
 8007f08:	440b      	add	r3, r1
 8007f0a:	761a      	strb	r2, [r3, #24]
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bc80      	pop	{r7}
 8007f14:	4770      	bx	lr
 8007f16:	bf00      	nop
 8007f18:	e000e100 	.word	0xe000e100
 8007f1c:	e000ed00 	.word	0xe000ed00

08007f20 <NVIC_EncodePriority>:
{
 8007f20:	b480      	push	{r7}
 8007f22:	b089      	sub	sp, #36	; 0x24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f003 0307 	and.w	r3, r3, #7
 8007f32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	f1c3 0307 	rsb	r3, r3, #7
 8007f3a:	2b04      	cmp	r3, #4
 8007f3c:	bf28      	it	cs
 8007f3e:	2304      	movcs	r3, #4
 8007f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	3304      	adds	r3, #4
 8007f46:	2b06      	cmp	r3, #6
 8007f48:	d902      	bls.n	8007f50 <NVIC_EncodePriority+0x30>
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	3b03      	subs	r3, #3
 8007f4e:	e000      	b.n	8007f52 <NVIC_EncodePriority+0x32>
 8007f50:	2300      	movs	r3, #0
 8007f52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f54:	f04f 32ff 	mov.w	r2, #4294967295
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5e:	43da      	mvns	r2, r3
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	401a      	ands	r2, r3
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f68:	f04f 31ff 	mov.w	r1, #4294967295
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f72:	43d9      	mvns	r1, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f78:	4313      	orrs	r3, r2
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3724      	adds	r7, #36	; 0x24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bc80      	pop	{r7}
 8007f82:	4770      	bx	lr

08007f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f94:	d301      	bcc.n	8007f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f96:	2301      	movs	r3, #1
 8007f98:	e00f      	b.n	8007fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f9a:	4a0a      	ldr	r2, [pc, #40]	; (8007fc4 <SysTick_Config+0x40>)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007fa2:	210f      	movs	r1, #15
 8007fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa8:	f7ff ff90 	bl	8007ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007fac:	4b05      	ldr	r3, [pc, #20]	; (8007fc4 <SysTick_Config+0x40>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007fb2:	4b04      	ldr	r3, [pc, #16]	; (8007fc4 <SysTick_Config+0x40>)
 8007fb4:	2207      	movs	r2, #7
 8007fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	e000e010 	.word	0xe000e010

08007fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7ff ff2d 	bl	8007e30 <__NVIC_SetPriorityGrouping>
}
 8007fd6:	bf00      	nop
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b086      	sub	sp, #24
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	60b9      	str	r1, [r7, #8]
 8007fe8:	607a      	str	r2, [r7, #4]
 8007fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007fec:	2300      	movs	r3, #0
 8007fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ff0:	f7ff ff42 	bl	8007e78 <__NVIC_GetPriorityGrouping>
 8007ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	68b9      	ldr	r1, [r7, #8]
 8007ffa:	6978      	ldr	r0, [r7, #20]
 8007ffc:	f7ff ff90 	bl	8007f20 <NVIC_EncodePriority>
 8008000:	4602      	mov	r2, r0
 8008002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008006:	4611      	mov	r1, r2
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff ff5f 	bl	8007ecc <__NVIC_SetPriority>
}
 800800e:	bf00      	nop
 8008010:	3718      	adds	r7, #24
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b082      	sub	sp, #8
 800801a:	af00      	add	r7, sp, #0
 800801c:	4603      	mov	r3, r0
 800801e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008024:	4618      	mov	r0, r3
 8008026:	f7ff ff35 	bl	8007e94 <__NVIC_EnableIRQ>
}
 800802a:	bf00      	nop
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b082      	sub	sp, #8
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7ff ffa2 	bl	8007f84 <SysTick_Config>
 8008040:	4603      	mov	r3, r0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}

0800804a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800804a:	b480      	push	{r7}
 800804c:	b085      	sub	sp, #20
 800804e:	af00      	add	r7, sp, #0
 8008050:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800805c:	b2db      	uxtb	r3, r3
 800805e:	2b02      	cmp	r3, #2
 8008060:	d008      	beq.n	8008074 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2204      	movs	r2, #4
 8008066:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e020      	b.n	80080b6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f022 020e 	bic.w	r2, r2, #14
 8008082:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f022 0201 	bic.w	r2, r2, #1
 8008092:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809c:	2101      	movs	r1, #1
 800809e:	fa01 f202 	lsl.w	r2, r1, r2
 80080a2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3714      	adds	r7, #20
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bc80      	pop	{r7}
 80080be:	4770      	bx	lr

080080c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d005      	beq.n	80080e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2204      	movs	r2, #4
 80080dc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	73fb      	strb	r3, [r7, #15]
 80080e2:	e0d6      	b.n	8008292 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f022 020e 	bic.w	r2, r2, #14
 80080f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f022 0201 	bic.w	r2, r2, #1
 8008102:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	461a      	mov	r2, r3
 800810a:	4b64      	ldr	r3, [pc, #400]	; (800829c <HAL_DMA_Abort_IT+0x1dc>)
 800810c:	429a      	cmp	r2, r3
 800810e:	d958      	bls.n	80081c2 <HAL_DMA_Abort_IT+0x102>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4a62      	ldr	r2, [pc, #392]	; (80082a0 <HAL_DMA_Abort_IT+0x1e0>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d04f      	beq.n	80081ba <HAL_DMA_Abort_IT+0xfa>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a61      	ldr	r2, [pc, #388]	; (80082a4 <HAL_DMA_Abort_IT+0x1e4>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d048      	beq.n	80081b6 <HAL_DMA_Abort_IT+0xf6>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a5f      	ldr	r2, [pc, #380]	; (80082a8 <HAL_DMA_Abort_IT+0x1e8>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d040      	beq.n	80081b0 <HAL_DMA_Abort_IT+0xf0>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a5e      	ldr	r2, [pc, #376]	; (80082ac <HAL_DMA_Abort_IT+0x1ec>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d038      	beq.n	80081aa <HAL_DMA_Abort_IT+0xea>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a5c      	ldr	r2, [pc, #368]	; (80082b0 <HAL_DMA_Abort_IT+0x1f0>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d030      	beq.n	80081a4 <HAL_DMA_Abort_IT+0xe4>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a5b      	ldr	r2, [pc, #364]	; (80082b4 <HAL_DMA_Abort_IT+0x1f4>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d028      	beq.n	800819e <HAL_DMA_Abort_IT+0xde>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a52      	ldr	r2, [pc, #328]	; (800829c <HAL_DMA_Abort_IT+0x1dc>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d020      	beq.n	8008198 <HAL_DMA_Abort_IT+0xd8>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a57      	ldr	r2, [pc, #348]	; (80082b8 <HAL_DMA_Abort_IT+0x1f8>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d019      	beq.n	8008194 <HAL_DMA_Abort_IT+0xd4>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a55      	ldr	r2, [pc, #340]	; (80082bc <HAL_DMA_Abort_IT+0x1fc>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d012      	beq.n	8008190 <HAL_DMA_Abort_IT+0xd0>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a54      	ldr	r2, [pc, #336]	; (80082c0 <HAL_DMA_Abort_IT+0x200>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d00a      	beq.n	800818a <HAL_DMA_Abort_IT+0xca>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a52      	ldr	r2, [pc, #328]	; (80082c4 <HAL_DMA_Abort_IT+0x204>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d102      	bne.n	8008184 <HAL_DMA_Abort_IT+0xc4>
 800817e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008182:	e01b      	b.n	80081bc <HAL_DMA_Abort_IT+0xfc>
 8008184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008188:	e018      	b.n	80081bc <HAL_DMA_Abort_IT+0xfc>
 800818a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800818e:	e015      	b.n	80081bc <HAL_DMA_Abort_IT+0xfc>
 8008190:	2310      	movs	r3, #16
 8008192:	e013      	b.n	80081bc <HAL_DMA_Abort_IT+0xfc>
 8008194:	2301      	movs	r3, #1
 8008196:	e011      	b.n	80081bc <HAL_DMA_Abort_IT+0xfc>
 8008198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800819c:	e00e      	b.n	80081bc <HAL_DMA_Abort_IT+0xfc>
 800819e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80081a2:	e00b      	b.n	80081bc <HAL_DMA_Abort_IT+0xfc>
 80081a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80081a8:	e008      	b.n	80081bc <HAL_DMA_Abort_IT+0xfc>
 80081aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081ae:	e005      	b.n	80081bc <HAL_DMA_Abort_IT+0xfc>
 80081b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081b4:	e002      	b.n	80081bc <HAL_DMA_Abort_IT+0xfc>
 80081b6:	2310      	movs	r3, #16
 80081b8:	e000      	b.n	80081bc <HAL_DMA_Abort_IT+0xfc>
 80081ba:	2301      	movs	r3, #1
 80081bc:	4a42      	ldr	r2, [pc, #264]	; (80082c8 <HAL_DMA_Abort_IT+0x208>)
 80081be:	6053      	str	r3, [r2, #4]
 80081c0:	e057      	b.n	8008272 <HAL_DMA_Abort_IT+0x1b2>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4a36      	ldr	r2, [pc, #216]	; (80082a0 <HAL_DMA_Abort_IT+0x1e0>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d04f      	beq.n	800826c <HAL_DMA_Abort_IT+0x1ac>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a34      	ldr	r2, [pc, #208]	; (80082a4 <HAL_DMA_Abort_IT+0x1e4>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d048      	beq.n	8008268 <HAL_DMA_Abort_IT+0x1a8>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a33      	ldr	r2, [pc, #204]	; (80082a8 <HAL_DMA_Abort_IT+0x1e8>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d040      	beq.n	8008262 <HAL_DMA_Abort_IT+0x1a2>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a31      	ldr	r2, [pc, #196]	; (80082ac <HAL_DMA_Abort_IT+0x1ec>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d038      	beq.n	800825c <HAL_DMA_Abort_IT+0x19c>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a30      	ldr	r2, [pc, #192]	; (80082b0 <HAL_DMA_Abort_IT+0x1f0>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d030      	beq.n	8008256 <HAL_DMA_Abort_IT+0x196>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a2e      	ldr	r2, [pc, #184]	; (80082b4 <HAL_DMA_Abort_IT+0x1f4>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d028      	beq.n	8008250 <HAL_DMA_Abort_IT+0x190>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a26      	ldr	r2, [pc, #152]	; (800829c <HAL_DMA_Abort_IT+0x1dc>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d020      	beq.n	800824a <HAL_DMA_Abort_IT+0x18a>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a2a      	ldr	r2, [pc, #168]	; (80082b8 <HAL_DMA_Abort_IT+0x1f8>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d019      	beq.n	8008246 <HAL_DMA_Abort_IT+0x186>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a29      	ldr	r2, [pc, #164]	; (80082bc <HAL_DMA_Abort_IT+0x1fc>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d012      	beq.n	8008242 <HAL_DMA_Abort_IT+0x182>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a27      	ldr	r2, [pc, #156]	; (80082c0 <HAL_DMA_Abort_IT+0x200>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d00a      	beq.n	800823c <HAL_DMA_Abort_IT+0x17c>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a26      	ldr	r2, [pc, #152]	; (80082c4 <HAL_DMA_Abort_IT+0x204>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d102      	bne.n	8008236 <HAL_DMA_Abort_IT+0x176>
 8008230:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008234:	e01b      	b.n	800826e <HAL_DMA_Abort_IT+0x1ae>
 8008236:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800823a:	e018      	b.n	800826e <HAL_DMA_Abort_IT+0x1ae>
 800823c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008240:	e015      	b.n	800826e <HAL_DMA_Abort_IT+0x1ae>
 8008242:	2310      	movs	r3, #16
 8008244:	e013      	b.n	800826e <HAL_DMA_Abort_IT+0x1ae>
 8008246:	2301      	movs	r3, #1
 8008248:	e011      	b.n	800826e <HAL_DMA_Abort_IT+0x1ae>
 800824a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800824e:	e00e      	b.n	800826e <HAL_DMA_Abort_IT+0x1ae>
 8008250:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008254:	e00b      	b.n	800826e <HAL_DMA_Abort_IT+0x1ae>
 8008256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800825a:	e008      	b.n	800826e <HAL_DMA_Abort_IT+0x1ae>
 800825c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008260:	e005      	b.n	800826e <HAL_DMA_Abort_IT+0x1ae>
 8008262:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008266:	e002      	b.n	800826e <HAL_DMA_Abort_IT+0x1ae>
 8008268:	2310      	movs	r3, #16
 800826a:	e000      	b.n	800826e <HAL_DMA_Abort_IT+0x1ae>
 800826c:	2301      	movs	r3, #1
 800826e:	4a17      	ldr	r2, [pc, #92]	; (80082cc <HAL_DMA_Abort_IT+0x20c>)
 8008270:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	4798      	blx	r3
    } 
  }
  return status;
 8008292:	7bfb      	ldrb	r3, [r7, #15]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	40020080 	.word	0x40020080
 80082a0:	40020008 	.word	0x40020008
 80082a4:	4002001c 	.word	0x4002001c
 80082a8:	40020030 	.word	0x40020030
 80082ac:	40020044 	.word	0x40020044
 80082b0:	40020058 	.word	0x40020058
 80082b4:	4002006c 	.word	0x4002006c
 80082b8:	40020408 	.word	0x40020408
 80082bc:	4002041c 	.word	0x4002041c
 80082c0:	40020430 	.word	0x40020430
 80082c4:	40020444 	.word	0x40020444
 80082c8:	40020400 	.word	0x40020400
 80082cc:	40020000 	.word	0x40020000

080082d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b08b      	sub	sp, #44	; 0x2c
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80082da:	2300      	movs	r3, #0
 80082dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80082de:	2300      	movs	r3, #0
 80082e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80082e2:	e179      	b.n	80085d8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80082e4:	2201      	movs	r2, #1
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e8:	fa02 f303 	lsl.w	r3, r2, r3
 80082ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	69fa      	ldr	r2, [r7, #28]
 80082f4:	4013      	ands	r3, r2
 80082f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80082f8:	69ba      	ldr	r2, [r7, #24]
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	f040 8168 	bne.w	80085d2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	4a96      	ldr	r2, [pc, #600]	; (8008560 <HAL_GPIO_Init+0x290>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d05e      	beq.n	80083ca <HAL_GPIO_Init+0xfa>
 800830c:	4a94      	ldr	r2, [pc, #592]	; (8008560 <HAL_GPIO_Init+0x290>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d875      	bhi.n	80083fe <HAL_GPIO_Init+0x12e>
 8008312:	4a94      	ldr	r2, [pc, #592]	; (8008564 <HAL_GPIO_Init+0x294>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d058      	beq.n	80083ca <HAL_GPIO_Init+0xfa>
 8008318:	4a92      	ldr	r2, [pc, #584]	; (8008564 <HAL_GPIO_Init+0x294>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d86f      	bhi.n	80083fe <HAL_GPIO_Init+0x12e>
 800831e:	4a92      	ldr	r2, [pc, #584]	; (8008568 <HAL_GPIO_Init+0x298>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d052      	beq.n	80083ca <HAL_GPIO_Init+0xfa>
 8008324:	4a90      	ldr	r2, [pc, #576]	; (8008568 <HAL_GPIO_Init+0x298>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d869      	bhi.n	80083fe <HAL_GPIO_Init+0x12e>
 800832a:	4a90      	ldr	r2, [pc, #576]	; (800856c <HAL_GPIO_Init+0x29c>)
 800832c:	4293      	cmp	r3, r2
 800832e:	d04c      	beq.n	80083ca <HAL_GPIO_Init+0xfa>
 8008330:	4a8e      	ldr	r2, [pc, #568]	; (800856c <HAL_GPIO_Init+0x29c>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d863      	bhi.n	80083fe <HAL_GPIO_Init+0x12e>
 8008336:	4a8e      	ldr	r2, [pc, #568]	; (8008570 <HAL_GPIO_Init+0x2a0>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d046      	beq.n	80083ca <HAL_GPIO_Init+0xfa>
 800833c:	4a8c      	ldr	r2, [pc, #560]	; (8008570 <HAL_GPIO_Init+0x2a0>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d85d      	bhi.n	80083fe <HAL_GPIO_Init+0x12e>
 8008342:	2b12      	cmp	r3, #18
 8008344:	d82a      	bhi.n	800839c <HAL_GPIO_Init+0xcc>
 8008346:	2b12      	cmp	r3, #18
 8008348:	d859      	bhi.n	80083fe <HAL_GPIO_Init+0x12e>
 800834a:	a201      	add	r2, pc, #4	; (adr r2, 8008350 <HAL_GPIO_Init+0x80>)
 800834c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008350:	080083cb 	.word	0x080083cb
 8008354:	080083a5 	.word	0x080083a5
 8008358:	080083b7 	.word	0x080083b7
 800835c:	080083f9 	.word	0x080083f9
 8008360:	080083ff 	.word	0x080083ff
 8008364:	080083ff 	.word	0x080083ff
 8008368:	080083ff 	.word	0x080083ff
 800836c:	080083ff 	.word	0x080083ff
 8008370:	080083ff 	.word	0x080083ff
 8008374:	080083ff 	.word	0x080083ff
 8008378:	080083ff 	.word	0x080083ff
 800837c:	080083ff 	.word	0x080083ff
 8008380:	080083ff 	.word	0x080083ff
 8008384:	080083ff 	.word	0x080083ff
 8008388:	080083ff 	.word	0x080083ff
 800838c:	080083ff 	.word	0x080083ff
 8008390:	080083ff 	.word	0x080083ff
 8008394:	080083ad 	.word	0x080083ad
 8008398:	080083c1 	.word	0x080083c1
 800839c:	4a75      	ldr	r2, [pc, #468]	; (8008574 <HAL_GPIO_Init+0x2a4>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d013      	beq.n	80083ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80083a2:	e02c      	b.n	80083fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	623b      	str	r3, [r7, #32]
          break;
 80083aa:	e029      	b.n	8008400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	3304      	adds	r3, #4
 80083b2:	623b      	str	r3, [r7, #32]
          break;
 80083b4:	e024      	b.n	8008400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	3308      	adds	r3, #8
 80083bc:	623b      	str	r3, [r7, #32]
          break;
 80083be:	e01f      	b.n	8008400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	330c      	adds	r3, #12
 80083c6:	623b      	str	r3, [r7, #32]
          break;
 80083c8:	e01a      	b.n	8008400 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d102      	bne.n	80083d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80083d2:	2304      	movs	r3, #4
 80083d4:	623b      	str	r3, [r7, #32]
          break;
 80083d6:	e013      	b.n	8008400 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d105      	bne.n	80083ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80083e0:	2308      	movs	r3, #8
 80083e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	69fa      	ldr	r2, [r7, #28]
 80083e8:	611a      	str	r2, [r3, #16]
          break;
 80083ea:	e009      	b.n	8008400 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80083ec:	2308      	movs	r3, #8
 80083ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	69fa      	ldr	r2, [r7, #28]
 80083f4:	615a      	str	r2, [r3, #20]
          break;
 80083f6:	e003      	b.n	8008400 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80083f8:	2300      	movs	r3, #0
 80083fa:	623b      	str	r3, [r7, #32]
          break;
 80083fc:	e000      	b.n	8008400 <HAL_GPIO_Init+0x130>
          break;
 80083fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	2bff      	cmp	r3, #255	; 0xff
 8008404:	d801      	bhi.n	800840a <HAL_GPIO_Init+0x13a>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	e001      	b.n	800840e <HAL_GPIO_Init+0x13e>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	3304      	adds	r3, #4
 800840e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	2bff      	cmp	r3, #255	; 0xff
 8008414:	d802      	bhi.n	800841c <HAL_GPIO_Init+0x14c>
 8008416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	e002      	b.n	8008422 <HAL_GPIO_Init+0x152>
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	3b08      	subs	r3, #8
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	210f      	movs	r1, #15
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	fa01 f303 	lsl.w	r3, r1, r3
 8008430:	43db      	mvns	r3, r3
 8008432:	401a      	ands	r2, r3
 8008434:	6a39      	ldr	r1, [r7, #32]
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	fa01 f303 	lsl.w	r3, r1, r3
 800843c:	431a      	orrs	r2, r3
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800844a:	2b00      	cmp	r3, #0
 800844c:	f000 80c1 	beq.w	80085d2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008450:	4b49      	ldr	r3, [pc, #292]	; (8008578 <HAL_GPIO_Init+0x2a8>)
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	4a48      	ldr	r2, [pc, #288]	; (8008578 <HAL_GPIO_Init+0x2a8>)
 8008456:	f043 0301 	orr.w	r3, r3, #1
 800845a:	6193      	str	r3, [r2, #24]
 800845c:	4b46      	ldr	r3, [pc, #280]	; (8008578 <HAL_GPIO_Init+0x2a8>)
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	60bb      	str	r3, [r7, #8]
 8008466:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008468:	4a44      	ldr	r2, [pc, #272]	; (800857c <HAL_GPIO_Init+0x2ac>)
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	089b      	lsrs	r3, r3, #2
 800846e:	3302      	adds	r3, #2
 8008470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008474:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008478:	f003 0303 	and.w	r3, r3, #3
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	220f      	movs	r2, #15
 8008480:	fa02 f303 	lsl.w	r3, r2, r3
 8008484:	43db      	mvns	r3, r3
 8008486:	68fa      	ldr	r2, [r7, #12]
 8008488:	4013      	ands	r3, r2
 800848a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a3c      	ldr	r2, [pc, #240]	; (8008580 <HAL_GPIO_Init+0x2b0>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d01f      	beq.n	80084d4 <HAL_GPIO_Init+0x204>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a3b      	ldr	r2, [pc, #236]	; (8008584 <HAL_GPIO_Init+0x2b4>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d019      	beq.n	80084d0 <HAL_GPIO_Init+0x200>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a3a      	ldr	r2, [pc, #232]	; (8008588 <HAL_GPIO_Init+0x2b8>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d013      	beq.n	80084cc <HAL_GPIO_Init+0x1fc>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	4a39      	ldr	r2, [pc, #228]	; (800858c <HAL_GPIO_Init+0x2bc>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d00d      	beq.n	80084c8 <HAL_GPIO_Init+0x1f8>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	4a38      	ldr	r2, [pc, #224]	; (8008590 <HAL_GPIO_Init+0x2c0>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d007      	beq.n	80084c4 <HAL_GPIO_Init+0x1f4>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a37      	ldr	r2, [pc, #220]	; (8008594 <HAL_GPIO_Init+0x2c4>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d101      	bne.n	80084c0 <HAL_GPIO_Init+0x1f0>
 80084bc:	2305      	movs	r3, #5
 80084be:	e00a      	b.n	80084d6 <HAL_GPIO_Init+0x206>
 80084c0:	2306      	movs	r3, #6
 80084c2:	e008      	b.n	80084d6 <HAL_GPIO_Init+0x206>
 80084c4:	2304      	movs	r3, #4
 80084c6:	e006      	b.n	80084d6 <HAL_GPIO_Init+0x206>
 80084c8:	2303      	movs	r3, #3
 80084ca:	e004      	b.n	80084d6 <HAL_GPIO_Init+0x206>
 80084cc:	2302      	movs	r3, #2
 80084ce:	e002      	b.n	80084d6 <HAL_GPIO_Init+0x206>
 80084d0:	2301      	movs	r3, #1
 80084d2:	e000      	b.n	80084d6 <HAL_GPIO_Init+0x206>
 80084d4:	2300      	movs	r3, #0
 80084d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084d8:	f002 0203 	and.w	r2, r2, #3
 80084dc:	0092      	lsls	r2, r2, #2
 80084de:	4093      	lsls	r3, r2
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80084e6:	4925      	ldr	r1, [pc, #148]	; (800857c <HAL_GPIO_Init+0x2ac>)
 80084e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ea:	089b      	lsrs	r3, r3, #2
 80084ec:	3302      	adds	r3, #2
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d006      	beq.n	800850e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008500:	4b25      	ldr	r3, [pc, #148]	; (8008598 <HAL_GPIO_Init+0x2c8>)
 8008502:	689a      	ldr	r2, [r3, #8]
 8008504:	4924      	ldr	r1, [pc, #144]	; (8008598 <HAL_GPIO_Init+0x2c8>)
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	4313      	orrs	r3, r2
 800850a:	608b      	str	r3, [r1, #8]
 800850c:	e006      	b.n	800851c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800850e:	4b22      	ldr	r3, [pc, #136]	; (8008598 <HAL_GPIO_Init+0x2c8>)
 8008510:	689a      	ldr	r2, [r3, #8]
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	43db      	mvns	r3, r3
 8008516:	4920      	ldr	r1, [pc, #128]	; (8008598 <HAL_GPIO_Init+0x2c8>)
 8008518:	4013      	ands	r3, r2
 800851a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d006      	beq.n	8008536 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008528:	4b1b      	ldr	r3, [pc, #108]	; (8008598 <HAL_GPIO_Init+0x2c8>)
 800852a:	68da      	ldr	r2, [r3, #12]
 800852c:	491a      	ldr	r1, [pc, #104]	; (8008598 <HAL_GPIO_Init+0x2c8>)
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	4313      	orrs	r3, r2
 8008532:	60cb      	str	r3, [r1, #12]
 8008534:	e006      	b.n	8008544 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008536:	4b18      	ldr	r3, [pc, #96]	; (8008598 <HAL_GPIO_Init+0x2c8>)
 8008538:	68da      	ldr	r2, [r3, #12]
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	43db      	mvns	r3, r3
 800853e:	4916      	ldr	r1, [pc, #88]	; (8008598 <HAL_GPIO_Init+0x2c8>)
 8008540:	4013      	ands	r3, r2
 8008542:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800854c:	2b00      	cmp	r3, #0
 800854e:	d025      	beq.n	800859c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008550:	4b11      	ldr	r3, [pc, #68]	; (8008598 <HAL_GPIO_Init+0x2c8>)
 8008552:	685a      	ldr	r2, [r3, #4]
 8008554:	4910      	ldr	r1, [pc, #64]	; (8008598 <HAL_GPIO_Init+0x2c8>)
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	4313      	orrs	r3, r2
 800855a:	604b      	str	r3, [r1, #4]
 800855c:	e025      	b.n	80085aa <HAL_GPIO_Init+0x2da>
 800855e:	bf00      	nop
 8008560:	10320000 	.word	0x10320000
 8008564:	10310000 	.word	0x10310000
 8008568:	10220000 	.word	0x10220000
 800856c:	10210000 	.word	0x10210000
 8008570:	10120000 	.word	0x10120000
 8008574:	10110000 	.word	0x10110000
 8008578:	40021000 	.word	0x40021000
 800857c:	40010000 	.word	0x40010000
 8008580:	40010800 	.word	0x40010800
 8008584:	40010c00 	.word	0x40010c00
 8008588:	40011000 	.word	0x40011000
 800858c:	40011400 	.word	0x40011400
 8008590:	40011800 	.word	0x40011800
 8008594:	40011c00 	.word	0x40011c00
 8008598:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800859c:	4b15      	ldr	r3, [pc, #84]	; (80085f4 <HAL_GPIO_Init+0x324>)
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	43db      	mvns	r3, r3
 80085a4:	4913      	ldr	r1, [pc, #76]	; (80085f4 <HAL_GPIO_Init+0x324>)
 80085a6:	4013      	ands	r3, r2
 80085a8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d006      	beq.n	80085c4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80085b6:	4b0f      	ldr	r3, [pc, #60]	; (80085f4 <HAL_GPIO_Init+0x324>)
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	490e      	ldr	r1, [pc, #56]	; (80085f4 <HAL_GPIO_Init+0x324>)
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	4313      	orrs	r3, r2
 80085c0:	600b      	str	r3, [r1, #0]
 80085c2:	e006      	b.n	80085d2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80085c4:	4b0b      	ldr	r3, [pc, #44]	; (80085f4 <HAL_GPIO_Init+0x324>)
 80085c6:	681a      	ldr	r2, [r3, #0]
 80085c8:	69bb      	ldr	r3, [r7, #24]
 80085ca:	43db      	mvns	r3, r3
 80085cc:	4909      	ldr	r1, [pc, #36]	; (80085f4 <HAL_GPIO_Init+0x324>)
 80085ce:	4013      	ands	r3, r2
 80085d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	3301      	adds	r3, #1
 80085d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	fa22 f303 	lsr.w	r3, r2, r3
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	f47f ae7e 	bne.w	80082e4 <HAL_GPIO_Init+0x14>
  }
}
 80085e8:	bf00      	nop
 80085ea:	bf00      	nop
 80085ec:	372c      	adds	r7, #44	; 0x2c
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bc80      	pop	{r7}
 80085f2:	4770      	bx	lr
 80085f4:	40010400 	.word	0x40010400

080085f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b089      	sub	sp, #36	; 0x24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
 8008600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008602:	2300      	movs	r3, #0
 8008604:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8008606:	e0a6      	b.n	8008756 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008608:	2201      	movs	r2, #1
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	fa02 f303 	lsl.w	r3, r2, r3
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	4013      	ands	r3, r2
 8008614:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	2b00      	cmp	r3, #0
 800861a:	f000 8099 	beq.w	8008750 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800861e:	4a54      	ldr	r2, [pc, #336]	; (8008770 <HAL_GPIO_DeInit+0x178>)
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	089b      	lsrs	r3, r3, #2
 8008624:	3302      	adds	r3, #2
 8008626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800862a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	220f      	movs	r2, #15
 8008636:	fa02 f303 	lsl.w	r3, r2, r3
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	4013      	ands	r3, r2
 800863e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a4c      	ldr	r2, [pc, #304]	; (8008774 <HAL_GPIO_DeInit+0x17c>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d01f      	beq.n	8008688 <HAL_GPIO_DeInit+0x90>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a4b      	ldr	r2, [pc, #300]	; (8008778 <HAL_GPIO_DeInit+0x180>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d019      	beq.n	8008684 <HAL_GPIO_DeInit+0x8c>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a4a      	ldr	r2, [pc, #296]	; (800877c <HAL_GPIO_DeInit+0x184>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d013      	beq.n	8008680 <HAL_GPIO_DeInit+0x88>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a49      	ldr	r2, [pc, #292]	; (8008780 <HAL_GPIO_DeInit+0x188>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d00d      	beq.n	800867c <HAL_GPIO_DeInit+0x84>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a48      	ldr	r2, [pc, #288]	; (8008784 <HAL_GPIO_DeInit+0x18c>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d007      	beq.n	8008678 <HAL_GPIO_DeInit+0x80>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a47      	ldr	r2, [pc, #284]	; (8008788 <HAL_GPIO_DeInit+0x190>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d101      	bne.n	8008674 <HAL_GPIO_DeInit+0x7c>
 8008670:	2305      	movs	r3, #5
 8008672:	e00a      	b.n	800868a <HAL_GPIO_DeInit+0x92>
 8008674:	2306      	movs	r3, #6
 8008676:	e008      	b.n	800868a <HAL_GPIO_DeInit+0x92>
 8008678:	2304      	movs	r3, #4
 800867a:	e006      	b.n	800868a <HAL_GPIO_DeInit+0x92>
 800867c:	2303      	movs	r3, #3
 800867e:	e004      	b.n	800868a <HAL_GPIO_DeInit+0x92>
 8008680:	2302      	movs	r3, #2
 8008682:	e002      	b.n	800868a <HAL_GPIO_DeInit+0x92>
 8008684:	2301      	movs	r3, #1
 8008686:	e000      	b.n	800868a <HAL_GPIO_DeInit+0x92>
 8008688:	2300      	movs	r3, #0
 800868a:	69fa      	ldr	r2, [r7, #28]
 800868c:	f002 0203 	and.w	r2, r2, #3
 8008690:	0092      	lsls	r2, r2, #2
 8008692:	4093      	lsls	r3, r2
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	429a      	cmp	r2, r3
 8008698:	d132      	bne.n	8008700 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800869a:	4b3c      	ldr	r3, [pc, #240]	; (800878c <HAL_GPIO_DeInit+0x194>)
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	43db      	mvns	r3, r3
 80086a2:	493a      	ldr	r1, [pc, #232]	; (800878c <HAL_GPIO_DeInit+0x194>)
 80086a4:	4013      	ands	r3, r2
 80086a6:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80086a8:	4b38      	ldr	r3, [pc, #224]	; (800878c <HAL_GPIO_DeInit+0x194>)
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	43db      	mvns	r3, r3
 80086b0:	4936      	ldr	r1, [pc, #216]	; (800878c <HAL_GPIO_DeInit+0x194>)
 80086b2:	4013      	ands	r3, r2
 80086b4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80086b6:	4b35      	ldr	r3, [pc, #212]	; (800878c <HAL_GPIO_DeInit+0x194>)
 80086b8:	68da      	ldr	r2, [r3, #12]
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	43db      	mvns	r3, r3
 80086be:	4933      	ldr	r1, [pc, #204]	; (800878c <HAL_GPIO_DeInit+0x194>)
 80086c0:	4013      	ands	r3, r2
 80086c2:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80086c4:	4b31      	ldr	r3, [pc, #196]	; (800878c <HAL_GPIO_DeInit+0x194>)
 80086c6:	689a      	ldr	r2, [r3, #8]
 80086c8:	69bb      	ldr	r3, [r7, #24]
 80086ca:	43db      	mvns	r3, r3
 80086cc:	492f      	ldr	r1, [pc, #188]	; (800878c <HAL_GPIO_DeInit+0x194>)
 80086ce:	4013      	ands	r3, r2
 80086d0:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	f003 0303 	and.w	r3, r3, #3
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	220f      	movs	r2, #15
 80086dc:	fa02 f303 	lsl.w	r3, r2, r3
 80086e0:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80086e2:	4a23      	ldr	r2, [pc, #140]	; (8008770 <HAL_GPIO_DeInit+0x178>)
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	089b      	lsrs	r3, r3, #2
 80086e8:	3302      	adds	r3, #2
 80086ea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	43da      	mvns	r2, r3
 80086f2:	481f      	ldr	r0, [pc, #124]	; (8008770 <HAL_GPIO_DeInit+0x178>)
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	089b      	lsrs	r3, r3, #2
 80086f8:	400a      	ands	r2, r1
 80086fa:	3302      	adds	r3, #2
 80086fc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	2bff      	cmp	r3, #255	; 0xff
 8008704:	d801      	bhi.n	800870a <HAL_GPIO_DeInit+0x112>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	e001      	b.n	800870e <HAL_GPIO_DeInit+0x116>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	3304      	adds	r3, #4
 800870e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	2bff      	cmp	r3, #255	; 0xff
 8008714:	d802      	bhi.n	800871c <HAL_GPIO_DeInit+0x124>
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	e002      	b.n	8008722 <HAL_GPIO_DeInit+0x12a>
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	3b08      	subs	r3, #8
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	210f      	movs	r1, #15
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	fa01 f303 	lsl.w	r3, r1, r3
 8008730:	43db      	mvns	r3, r3
 8008732:	401a      	ands	r2, r3
 8008734:	2104      	movs	r1, #4
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	fa01 f303 	lsl.w	r3, r1, r3
 800873c:	431a      	orrs	r2, r3
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68da      	ldr	r2, [r3, #12]
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	43db      	mvns	r3, r3
 800874a:	401a      	ands	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008750:	69fb      	ldr	r3, [r7, #28]
 8008752:	3301      	adds	r3, #1
 8008754:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	fa22 f303 	lsr.w	r3, r2, r3
 800875e:	2b00      	cmp	r3, #0
 8008760:	f47f af52 	bne.w	8008608 <HAL_GPIO_DeInit+0x10>
  }
}
 8008764:	bf00      	nop
 8008766:	bf00      	nop
 8008768:	3724      	adds	r7, #36	; 0x24
 800876a:	46bd      	mov	sp, r7
 800876c:	bc80      	pop	{r7}
 800876e:	4770      	bx	lr
 8008770:	40010000 	.word	0x40010000
 8008774:	40010800 	.word	0x40010800
 8008778:	40010c00 	.word	0x40010c00
 800877c:	40011000 	.word	0x40011000
 8008780:	40011400 	.word	0x40011400
 8008784:	40011800 	.word	0x40011800
 8008788:	40011c00 	.word	0x40011c00
 800878c:	40010400 	.word	0x40010400

08008790 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	689a      	ldr	r2, [r3, #8]
 80087a0:	887b      	ldrh	r3, [r7, #2]
 80087a2:	4013      	ands	r3, r2
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d002      	beq.n	80087ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80087a8:	2301      	movs	r3, #1
 80087aa:	73fb      	strb	r3, [r7, #15]
 80087ac:	e001      	b.n	80087b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80087ae:	2300      	movs	r3, #0
 80087b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80087b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bc80      	pop	{r7}
 80087bc:	4770      	bx	lr

080087be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80087be:	b480      	push	{r7}
 80087c0:	b083      	sub	sp, #12
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	460b      	mov	r3, r1
 80087c8:	807b      	strh	r3, [r7, #2]
 80087ca:	4613      	mov	r3, r2
 80087cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80087ce:	787b      	ldrb	r3, [r7, #1]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d003      	beq.n	80087dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80087d4:	887a      	ldrh	r2, [r7, #2]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80087da:	e003      	b.n	80087e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80087dc:	887b      	ldrh	r3, [r7, #2]
 80087de:	041a      	lsls	r2, r3, #16
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	611a      	str	r2, [r3, #16]
}
 80087e4:	bf00      	nop
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bc80      	pop	{r7}
 80087ec:	4770      	bx	lr

080087ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b085      	sub	sp, #20
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
 80087f6:	460b      	mov	r3, r1
 80087f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008800:	887a      	ldrh	r2, [r7, #2]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	4013      	ands	r3, r2
 8008806:	041a      	lsls	r2, r3, #16
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	43d9      	mvns	r1, r3
 800880c:	887b      	ldrh	r3, [r7, #2]
 800880e:	400b      	ands	r3, r1
 8008810:	431a      	orrs	r2, r3
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	611a      	str	r2, [r3, #16]
}
 8008816:	bf00      	nop
 8008818:	3714      	adds	r7, #20
 800881a:	46bd      	mov	sp, r7
 800881c:	bc80      	pop	{r7}
 800881e:	4770      	bx	lr

08008820 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e12b      	b.n	8008a8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d106      	bne.n	800884c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f7fe fff8 	bl	800783c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2224      	movs	r2, #36	; 0x24
 8008850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f022 0201 	bic.w	r2, r2, #1
 8008862:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008872:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008882:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008884:	f001 fdb8 	bl	800a3f8 <HAL_RCC_GetPCLK1Freq>
 8008888:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	4a81      	ldr	r2, [pc, #516]	; (8008a94 <HAL_I2C_Init+0x274>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d807      	bhi.n	80088a4 <HAL_I2C_Init+0x84>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	4a80      	ldr	r2, [pc, #512]	; (8008a98 <HAL_I2C_Init+0x278>)
 8008898:	4293      	cmp	r3, r2
 800889a:	bf94      	ite	ls
 800889c:	2301      	movls	r3, #1
 800889e:	2300      	movhi	r3, #0
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	e006      	b.n	80088b2 <HAL_I2C_Init+0x92>
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	4a7d      	ldr	r2, [pc, #500]	; (8008a9c <HAL_I2C_Init+0x27c>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	bf94      	ite	ls
 80088ac:	2301      	movls	r3, #1
 80088ae:	2300      	movhi	r3, #0
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d001      	beq.n	80088ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e0e7      	b.n	8008a8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	4a78      	ldr	r2, [pc, #480]	; (8008aa0 <HAL_I2C_Init+0x280>)
 80088be:	fba2 2303 	umull	r2, r3, r2, r3
 80088c2:	0c9b      	lsrs	r3, r3, #18
 80088c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68ba      	ldr	r2, [r7, #8]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	6a1b      	ldr	r3, [r3, #32]
 80088e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	4a6a      	ldr	r2, [pc, #424]	; (8008a94 <HAL_I2C_Init+0x274>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d802      	bhi.n	80088f4 <HAL_I2C_Init+0xd4>
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	3301      	adds	r3, #1
 80088f2:	e009      	b.n	8008908 <HAL_I2C_Init+0xe8>
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80088fa:	fb02 f303 	mul.w	r3, r2, r3
 80088fe:	4a69      	ldr	r2, [pc, #420]	; (8008aa4 <HAL_I2C_Init+0x284>)
 8008900:	fba2 2303 	umull	r2, r3, r2, r3
 8008904:	099b      	lsrs	r3, r3, #6
 8008906:	3301      	adds	r3, #1
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	6812      	ldr	r2, [r2, #0]
 800890c:	430b      	orrs	r3, r1
 800890e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	69db      	ldr	r3, [r3, #28]
 8008916:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800891a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	495c      	ldr	r1, [pc, #368]	; (8008a94 <HAL_I2C_Init+0x274>)
 8008924:	428b      	cmp	r3, r1
 8008926:	d819      	bhi.n	800895c <HAL_I2C_Init+0x13c>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	1e59      	subs	r1, r3, #1
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	005b      	lsls	r3, r3, #1
 8008932:	fbb1 f3f3 	udiv	r3, r1, r3
 8008936:	1c59      	adds	r1, r3, #1
 8008938:	f640 73fc 	movw	r3, #4092	; 0xffc
 800893c:	400b      	ands	r3, r1
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00a      	beq.n	8008958 <HAL_I2C_Init+0x138>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	1e59      	subs	r1, r3, #1
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	005b      	lsls	r3, r3, #1
 800894c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008950:	3301      	adds	r3, #1
 8008952:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008956:	e051      	b.n	80089fc <HAL_I2C_Init+0x1dc>
 8008958:	2304      	movs	r3, #4
 800895a:	e04f      	b.n	80089fc <HAL_I2C_Init+0x1dc>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d111      	bne.n	8008988 <HAL_I2C_Init+0x168>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	1e58      	subs	r0, r3, #1
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6859      	ldr	r1, [r3, #4]
 800896c:	460b      	mov	r3, r1
 800896e:	005b      	lsls	r3, r3, #1
 8008970:	440b      	add	r3, r1
 8008972:	fbb0 f3f3 	udiv	r3, r0, r3
 8008976:	3301      	adds	r3, #1
 8008978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800897c:	2b00      	cmp	r3, #0
 800897e:	bf0c      	ite	eq
 8008980:	2301      	moveq	r3, #1
 8008982:	2300      	movne	r3, #0
 8008984:	b2db      	uxtb	r3, r3
 8008986:	e012      	b.n	80089ae <HAL_I2C_Init+0x18e>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	1e58      	subs	r0, r3, #1
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6859      	ldr	r1, [r3, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	440b      	add	r3, r1
 8008996:	0099      	lsls	r1, r3, #2
 8008998:	440b      	add	r3, r1
 800899a:	fbb0 f3f3 	udiv	r3, r0, r3
 800899e:	3301      	adds	r3, #1
 80089a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	bf0c      	ite	eq
 80089a8:	2301      	moveq	r3, #1
 80089aa:	2300      	movne	r3, #0
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <HAL_I2C_Init+0x196>
 80089b2:	2301      	movs	r3, #1
 80089b4:	e022      	b.n	80089fc <HAL_I2C_Init+0x1dc>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10e      	bne.n	80089dc <HAL_I2C_Init+0x1bc>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	1e58      	subs	r0, r3, #1
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6859      	ldr	r1, [r3, #4]
 80089c6:	460b      	mov	r3, r1
 80089c8:	005b      	lsls	r3, r3, #1
 80089ca:	440b      	add	r3, r1
 80089cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80089d0:	3301      	adds	r3, #1
 80089d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089da:	e00f      	b.n	80089fc <HAL_I2C_Init+0x1dc>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	1e58      	subs	r0, r3, #1
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6859      	ldr	r1, [r3, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	440b      	add	r3, r1
 80089ea:	0099      	lsls	r1, r3, #2
 80089ec:	440b      	add	r3, r1
 80089ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80089f2:	3301      	adds	r3, #1
 80089f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80089fc:	6879      	ldr	r1, [r7, #4]
 80089fe:	6809      	ldr	r1, [r1, #0]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	69da      	ldr	r2, [r3, #28]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a1b      	ldr	r3, [r3, #32]
 8008a16:	431a      	orrs	r2, r3
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	430a      	orrs	r2, r1
 8008a1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008a2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	6911      	ldr	r1, [r2, #16]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	68d2      	ldr	r2, [r2, #12]
 8008a36:	4311      	orrs	r1, r2
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	6812      	ldr	r2, [r2, #0]
 8008a3c:	430b      	orrs	r3, r1
 8008a3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	695a      	ldr	r2, [r3, #20]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	699b      	ldr	r3, [r3, #24]
 8008a52:	431a      	orrs	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	430a      	orrs	r2, r1
 8008a5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f042 0201 	orr.w	r2, r2, #1
 8008a6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2220      	movs	r2, #32
 8008a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	000186a0 	.word	0x000186a0
 8008a98:	001e847f 	.word	0x001e847f
 8008a9c:	003d08ff 	.word	0x003d08ff
 8008aa0:	431bde83 	.word	0x431bde83
 8008aa4:	10624dd3 	.word	0x10624dd3

08008aa8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e021      	b.n	8008afe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2224      	movs	r2, #36	; 0x24
 8008abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f022 0201 	bic.w	r2, r2, #1
 8008ad0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7fe fef0 	bl	80078b8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008afc:	2300      	movs	r3, #0
}
 8008afe:	4618      	mov	r0, r3
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}
	...

08008b08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b088      	sub	sp, #32
 8008b0c:	af02      	add	r7, sp, #8
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	607a      	str	r2, [r7, #4]
 8008b12:	461a      	mov	r2, r3
 8008b14:	460b      	mov	r3, r1
 8008b16:	817b      	strh	r3, [r7, #10]
 8008b18:	4613      	mov	r3, r2
 8008b1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b1c:	f7ff f85e 	bl	8007bdc <HAL_GetTick>
 8008b20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b20      	cmp	r3, #32
 8008b2c:	f040 80e0 	bne.w	8008cf0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b30:	697b      	ldr	r3, [r7, #20]
 8008b32:	9300      	str	r3, [sp, #0]
 8008b34:	2319      	movs	r3, #25
 8008b36:	2201      	movs	r2, #1
 8008b38:	4970      	ldr	r1, [pc, #448]	; (8008cfc <HAL_I2C_Master_Transmit+0x1f4>)
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f000 fe5c 	bl	80097f8 <I2C_WaitOnFlagUntilTimeout>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d001      	beq.n	8008b4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008b46:	2302      	movs	r3, #2
 8008b48:	e0d3      	b.n	8008cf2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d101      	bne.n	8008b58 <HAL_I2C_Master_Transmit+0x50>
 8008b54:	2302      	movs	r3, #2
 8008b56:	e0cc      	b.n	8008cf2 <HAL_I2C_Master_Transmit+0x1ea>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d007      	beq.n	8008b7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f042 0201 	orr.w	r2, r2, #1
 8008b7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2221      	movs	r2, #33	; 0x21
 8008b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2210      	movs	r2, #16
 8008b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	893a      	ldrh	r2, [r7, #8]
 8008bae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bb4:	b29a      	uxth	r2, r3
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	4a50      	ldr	r2, [pc, #320]	; (8008d00 <HAL_I2C_Master_Transmit+0x1f8>)
 8008bbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008bc0:	8979      	ldrh	r1, [r7, #10]
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	6a3a      	ldr	r2, [r7, #32]
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f000 fc16 	bl	80093f8 <I2C_MasterRequestWrite>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e08d      	b.n	8008cf2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	613b      	str	r3, [r7, #16]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	695b      	ldr	r3, [r3, #20]
 8008be0:	613b      	str	r3, [r7, #16]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	699b      	ldr	r3, [r3, #24]
 8008be8:	613b      	str	r3, [r7, #16]
 8008bea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008bec:	e066      	b.n	8008cbc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	6a39      	ldr	r1, [r7, #32]
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	f000 ff1a 	bl	8009a2c <I2C_WaitOnTXEFlagUntilTimeout>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00d      	beq.n	8008c1a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c02:	2b04      	cmp	r3, #4
 8008c04:	d107      	bne.n	8008c16 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c14:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	e06b      	b.n	8008cf2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1e:	781a      	ldrb	r2, [r3, #0]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	3b01      	subs	r3, #1
 8008c38:	b29a      	uxth	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c42:	3b01      	subs	r3, #1
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	695b      	ldr	r3, [r3, #20]
 8008c50:	f003 0304 	and.w	r3, r3, #4
 8008c54:	2b04      	cmp	r3, #4
 8008c56:	d11b      	bne.n	8008c90 <HAL_I2C_Master_Transmit+0x188>
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d017      	beq.n	8008c90 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c64:	781a      	ldrb	r2, [r3, #0]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c70:	1c5a      	adds	r2, r3, #1
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	6a39      	ldr	r1, [r7, #32]
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f000 ff11 	bl	8009abc <I2C_WaitOnBTFFlagUntilTimeout>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d00d      	beq.n	8008cbc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca4:	2b04      	cmp	r3, #4
 8008ca6:	d107      	bne.n	8008cb8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cb6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e01a      	b.n	8008cf2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d194      	bne.n	8008bee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2220      	movs	r2, #32
 8008cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	e000      	b.n	8008cf2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008cf0:	2302      	movs	r3, #2
  }
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3718      	adds	r7, #24
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	00100002 	.word	0x00100002
 8008d00:	ffff0000 	.word	0xffff0000

08008d04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b088      	sub	sp, #32
 8008d08:	af02      	add	r7, sp, #8
 8008d0a:	60f8      	str	r0, [r7, #12]
 8008d0c:	4608      	mov	r0, r1
 8008d0e:	4611      	mov	r1, r2
 8008d10:	461a      	mov	r2, r3
 8008d12:	4603      	mov	r3, r0
 8008d14:	817b      	strh	r3, [r7, #10]
 8008d16:	460b      	mov	r3, r1
 8008d18:	813b      	strh	r3, [r7, #8]
 8008d1a:	4613      	mov	r3, r2
 8008d1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d1e:	f7fe ff5d 	bl	8007bdc <HAL_GetTick>
 8008d22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	2b20      	cmp	r3, #32
 8008d2e:	f040 80d9 	bne.w	8008ee4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	2319      	movs	r3, #25
 8008d38:	2201      	movs	r2, #1
 8008d3a:	496d      	ldr	r1, [pc, #436]	; (8008ef0 <HAL_I2C_Mem_Write+0x1ec>)
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f000 fd5b 	bl	80097f8 <I2C_WaitOnFlagUntilTimeout>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008d48:	2302      	movs	r3, #2
 8008d4a:	e0cc      	b.n	8008ee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d101      	bne.n	8008d5a <HAL_I2C_Mem_Write+0x56>
 8008d56:	2302      	movs	r3, #2
 8008d58:	e0c5      	b.n	8008ee6 <HAL_I2C_Mem_Write+0x1e2>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 0301 	and.w	r3, r3, #1
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d007      	beq.n	8008d80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f042 0201 	orr.w	r2, r2, #1
 8008d7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2221      	movs	r2, #33	; 0x21
 8008d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2240      	movs	r2, #64	; 0x40
 8008d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2200      	movs	r2, #0
 8008da4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6a3a      	ldr	r2, [r7, #32]
 8008daa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008db0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	4a4d      	ldr	r2, [pc, #308]	; (8008ef4 <HAL_I2C_Mem_Write+0x1f0>)
 8008dc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008dc2:	88f8      	ldrh	r0, [r7, #6]
 8008dc4:	893a      	ldrh	r2, [r7, #8]
 8008dc6:	8979      	ldrh	r1, [r7, #10]
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	9301      	str	r3, [sp, #4]
 8008dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f000 fb92 	bl	80094fc <I2C_RequestMemoryWrite>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d052      	beq.n	8008e84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e081      	b.n	8008ee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f000 fe20 	bl	8009a2c <I2C_WaitOnTXEFlagUntilTimeout>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00d      	beq.n	8008e0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df6:	2b04      	cmp	r3, #4
 8008df8:	d107      	bne.n	8008e0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e06b      	b.n	8008ee6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e12:	781a      	ldrb	r2, [r3, #0]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1e:	1c5a      	adds	r2, r3, #1
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	3b01      	subs	r3, #1
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	695b      	ldr	r3, [r3, #20]
 8008e44:	f003 0304 	and.w	r3, r3, #4
 8008e48:	2b04      	cmp	r3, #4
 8008e4a:	d11b      	bne.n	8008e84 <HAL_I2C_Mem_Write+0x180>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d017      	beq.n	8008e84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e58:	781a      	ldrb	r2, [r3, #0]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e64:	1c5a      	adds	r2, r3, #1
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	b29a      	uxth	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1aa      	bne.n	8008de2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e8c:	697a      	ldr	r2, [r7, #20]
 8008e8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e90:	68f8      	ldr	r0, [r7, #12]
 8008e92:	f000 fe13 	bl	8009abc <I2C_WaitOnBTFFlagUntilTimeout>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00d      	beq.n	8008eb8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea0:	2b04      	cmp	r3, #4
 8008ea2:	d107      	bne.n	8008eb4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008eb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e016      	b.n	8008ee6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	2220      	movs	r2, #32
 8008ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	e000      	b.n	8008ee6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008ee4:	2302      	movs	r3, #2
  }
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3718      	adds	r7, #24
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	00100002 	.word	0x00100002
 8008ef4:	ffff0000 	.word	0xffff0000

08008ef8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b08c      	sub	sp, #48	; 0x30
 8008efc:	af02      	add	r7, sp, #8
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	4608      	mov	r0, r1
 8008f02:	4611      	mov	r1, r2
 8008f04:	461a      	mov	r2, r3
 8008f06:	4603      	mov	r3, r0
 8008f08:	817b      	strh	r3, [r7, #10]
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	813b      	strh	r3, [r7, #8]
 8008f0e:	4613      	mov	r3, r2
 8008f10:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8008f12:	2300      	movs	r3, #0
 8008f14:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008f16:	f7fe fe61 	bl	8007bdc <HAL_GetTick>
 8008f1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f22:	b2db      	uxtb	r3, r3
 8008f24:	2b20      	cmp	r3, #32
 8008f26:	f040 8244 	bne.w	80093b2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2c:	9300      	str	r3, [sp, #0]
 8008f2e:	2319      	movs	r3, #25
 8008f30:	2201      	movs	r2, #1
 8008f32:	4982      	ldr	r1, [pc, #520]	; (800913c <HAL_I2C_Mem_Read+0x244>)
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f000 fc5f 	bl	80097f8 <I2C_WaitOnFlagUntilTimeout>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8008f40:	2302      	movs	r3, #2
 8008f42:	e237      	b.n	80093b4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d101      	bne.n	8008f52 <HAL_I2C_Mem_Read+0x5a>
 8008f4e:	2302      	movs	r3, #2
 8008f50:	e230      	b.n	80093b4 <HAL_I2C_Mem_Read+0x4bc>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2201      	movs	r2, #1
 8008f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d007      	beq.n	8008f78 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f042 0201 	orr.w	r2, r2, #1
 8008f76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2222      	movs	r2, #34	; 0x22
 8008f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2240      	movs	r2, #64	; 0x40
 8008f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	4a62      	ldr	r2, [pc, #392]	; (8009140 <HAL_I2C_Mem_Read+0x248>)
 8008fb8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008fba:	88f8      	ldrh	r0, [r7, #6]
 8008fbc:	893a      	ldrh	r2, [r7, #8]
 8008fbe:	8979      	ldrh	r1, [r7, #10]
 8008fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc2:	9301      	str	r3, [sp, #4]
 8008fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	4603      	mov	r3, r0
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f000 fb2c 	bl	8009628 <I2C_RequestMemoryRead>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d001      	beq.n	8008fda <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e1ec      	b.n	80093b4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d113      	bne.n	800900a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	61fb      	str	r3, [r7, #28]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	695b      	ldr	r3, [r3, #20]
 8008fec:	61fb      	str	r3, [r7, #28]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	699b      	ldr	r3, [r3, #24]
 8008ff4:	61fb      	str	r3, [r7, #28]
 8008ff6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	e1c0      	b.n	800938c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800900e:	2b01      	cmp	r3, #1
 8009010:	d11e      	bne.n	8009050 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009020:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009022:	b672      	cpsid	i
}
 8009024:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009026:	2300      	movs	r3, #0
 8009028:	61bb      	str	r3, [r7, #24]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	695b      	ldr	r3, [r3, #20]
 8009030:	61bb      	str	r3, [r7, #24]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	699b      	ldr	r3, [r3, #24]
 8009038:	61bb      	str	r3, [r7, #24]
 800903a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800904a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800904c:	b662      	cpsie	i
}
 800904e:	e035      	b.n	80090bc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009054:	2b02      	cmp	r3, #2
 8009056:	d11e      	bne.n	8009096 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009066:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009068:	b672      	cpsid	i
}
 800906a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800906c:	2300      	movs	r3, #0
 800906e:	617b      	str	r3, [r7, #20]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	695b      	ldr	r3, [r3, #20]
 8009076:	617b      	str	r3, [r7, #20]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	617b      	str	r3, [r7, #20]
 8009080:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009090:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009092:	b662      	cpsie	i
}
 8009094:	e012      	b.n	80090bc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	681a      	ldr	r2, [r3, #0]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090a4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80090a6:	2300      	movs	r3, #0
 80090a8:	613b      	str	r3, [r7, #16]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	695b      	ldr	r3, [r3, #20]
 80090b0:	613b      	str	r3, [r7, #16]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	613b      	str	r3, [r7, #16]
 80090ba:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80090bc:	e166      	b.n	800938c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090c2:	2b03      	cmp	r3, #3
 80090c4:	f200 811f 	bhi.w	8009306 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d123      	bne.n	8009118 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090d4:	68f8      	ldr	r0, [r7, #12]
 80090d6:	f000 fd39 	bl	8009b4c <I2C_WaitOnRXNEFlagUntilTimeout>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d001      	beq.n	80090e4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80090e0:	2301      	movs	r3, #1
 80090e2:	e167      	b.n	80093b4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	691a      	ldr	r2, [r3, #16]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ee:	b2d2      	uxtb	r2, r2
 80090f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f6:	1c5a      	adds	r2, r3, #1
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009100:	3b01      	subs	r3, #1
 8009102:	b29a      	uxth	r2, r3
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800910c:	b29b      	uxth	r3, r3
 800910e:	3b01      	subs	r3, #1
 8009110:	b29a      	uxth	r2, r3
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009116:	e139      	b.n	800938c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800911c:	2b02      	cmp	r3, #2
 800911e:	d152      	bne.n	80091c6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009126:	2200      	movs	r2, #0
 8009128:	4906      	ldr	r1, [pc, #24]	; (8009144 <HAL_I2C_Mem_Read+0x24c>)
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f000 fb64 	bl	80097f8 <I2C_WaitOnFlagUntilTimeout>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d008      	beq.n	8009148 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009136:	2301      	movs	r3, #1
 8009138:	e13c      	b.n	80093b4 <HAL_I2C_Mem_Read+0x4bc>
 800913a:	bf00      	nop
 800913c:	00100002 	.word	0x00100002
 8009140:	ffff0000 	.word	0xffff0000
 8009144:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009148:	b672      	cpsid	i
}
 800914a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681a      	ldr	r2, [r3, #0]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800915a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	691a      	ldr	r2, [r3, #16]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009166:	b2d2      	uxtb	r2, r2
 8009168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916e:	1c5a      	adds	r2, r3, #1
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009178:	3b01      	subs	r3, #1
 800917a:	b29a      	uxth	r2, r3
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009184:	b29b      	uxth	r3, r3
 8009186:	3b01      	subs	r3, #1
 8009188:	b29a      	uxth	r2, r3
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800918e:	b662      	cpsie	i
}
 8009190:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	691a      	ldr	r2, [r3, #16]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919c:	b2d2      	uxtb	r2, r2
 800919e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a4:	1c5a      	adds	r2, r3, #1
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091ae:	3b01      	subs	r3, #1
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	3b01      	subs	r3, #1
 80091be:	b29a      	uxth	r2, r3
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80091c4:	e0e2      	b.n	800938c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80091c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c8:	9300      	str	r3, [sp, #0]
 80091ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091cc:	2200      	movs	r2, #0
 80091ce:	497b      	ldr	r1, [pc, #492]	; (80093bc <HAL_I2C_Mem_Read+0x4c4>)
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f000 fb11 	bl	80097f8 <I2C_WaitOnFlagUntilTimeout>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	e0e9      	b.n	80093b4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80091f0:	b672      	cpsid	i
}
 80091f2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	691a      	ldr	r2, [r3, #16]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091fe:	b2d2      	uxtb	r2, r2
 8009200:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009206:	1c5a      	adds	r2, r3, #1
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009210:	3b01      	subs	r3, #1
 8009212:	b29a      	uxth	r2, r3
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800921c:	b29b      	uxth	r3, r3
 800921e:	3b01      	subs	r3, #1
 8009220:	b29a      	uxth	r2, r3
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009226:	4b66      	ldr	r3, [pc, #408]	; (80093c0 <HAL_I2C_Mem_Read+0x4c8>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	08db      	lsrs	r3, r3, #3
 800922c:	4a65      	ldr	r2, [pc, #404]	; (80093c4 <HAL_I2C_Mem_Read+0x4cc>)
 800922e:	fba2 2303 	umull	r2, r3, r2, r3
 8009232:	0a1a      	lsrs	r2, r3, #8
 8009234:	4613      	mov	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4413      	add	r3, r2
 800923a:	00da      	lsls	r2, r3, #3
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009240:	6a3b      	ldr	r3, [r7, #32]
 8009242:	3b01      	subs	r3, #1
 8009244:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009246:	6a3b      	ldr	r3, [r7, #32]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d118      	bne.n	800927e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2200      	movs	r2, #0
 8009250:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2220      	movs	r2, #32
 8009256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	2200      	movs	r2, #0
 800925e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009266:	f043 0220 	orr.w	r2, r3, #32
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800926e:	b662      	cpsie	i
}
 8009270:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2200      	movs	r2, #0
 8009276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e09a      	b.n	80093b4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	695b      	ldr	r3, [r3, #20]
 8009284:	f003 0304 	and.w	r3, r3, #4
 8009288:	2b04      	cmp	r3, #4
 800928a:	d1d9      	bne.n	8009240 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800929a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	691a      	ldr	r2, [r3, #16]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a6:	b2d2      	uxtb	r2, r2
 80092a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ae:	1c5a      	adds	r2, r3, #1
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092b8:	3b01      	subs	r3, #1
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	3b01      	subs	r3, #1
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80092ce:	b662      	cpsie	i
}
 80092d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	691a      	ldr	r2, [r3, #16]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092dc:	b2d2      	uxtb	r2, r2
 80092de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e4:	1c5a      	adds	r2, r3, #1
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ee:	3b01      	subs	r3, #1
 80092f0:	b29a      	uxth	r2, r3
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	3b01      	subs	r3, #1
 80092fe:	b29a      	uxth	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009304:	e042      	b.n	800938c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009308:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800930a:	68f8      	ldr	r0, [r7, #12]
 800930c:	f000 fc1e 	bl	8009b4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d001      	beq.n	800931a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e04c      	b.n	80093b4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	691a      	ldr	r2, [r3, #16]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009324:	b2d2      	uxtb	r2, r2
 8009326:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932c:	1c5a      	adds	r2, r3, #1
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009336:	3b01      	subs	r3, #1
 8009338:	b29a      	uxth	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009342:	b29b      	uxth	r3, r3
 8009344:	3b01      	subs	r3, #1
 8009346:	b29a      	uxth	r2, r3
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	695b      	ldr	r3, [r3, #20]
 8009352:	f003 0304 	and.w	r3, r3, #4
 8009356:	2b04      	cmp	r3, #4
 8009358:	d118      	bne.n	800938c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	691a      	ldr	r2, [r3, #16]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009364:	b2d2      	uxtb	r2, r2
 8009366:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936c:	1c5a      	adds	r2, r3, #1
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009376:	3b01      	subs	r3, #1
 8009378:	b29a      	uxth	r2, r3
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009382:	b29b      	uxth	r3, r3
 8009384:	3b01      	subs	r3, #1
 8009386:	b29a      	uxth	r2, r3
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009390:	2b00      	cmp	r3, #0
 8009392:	f47f ae94 	bne.w	80090be <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2220      	movs	r2, #32
 800939a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2200      	movs	r2, #0
 80093aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80093ae:	2300      	movs	r3, #0
 80093b0:	e000      	b.n	80093b4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80093b2:	2302      	movs	r3, #2
  }
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3728      	adds	r7, #40	; 0x28
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	00010004 	.word	0x00010004
 80093c0:	20000944 	.word	0x20000944
 80093c4:	14f8b589 	.word	0x14f8b589

080093c8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093d6:	b2db      	uxtb	r3, r3
}
 80093d8:	4618      	mov	r0, r3
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	bc80      	pop	{r7}
 80093e0:	4770      	bx	lr

080093e2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	370c      	adds	r7, #12
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bc80      	pop	{r7}
 80093f6:	4770      	bx	lr

080093f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b088      	sub	sp, #32
 80093fc:	af02      	add	r7, sp, #8
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	607a      	str	r2, [r7, #4]
 8009402:	603b      	str	r3, [r7, #0]
 8009404:	460b      	mov	r3, r1
 8009406:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800940c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	2b08      	cmp	r3, #8
 8009412:	d006      	beq.n	8009422 <I2C_MasterRequestWrite+0x2a>
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	2b01      	cmp	r3, #1
 8009418:	d003      	beq.n	8009422 <I2C_MasterRequestWrite+0x2a>
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009420:	d108      	bne.n	8009434 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009430:	601a      	str	r2, [r3, #0]
 8009432:	e00b      	b.n	800944c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009438:	2b12      	cmp	r3, #18
 800943a:	d107      	bne.n	800944c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800944a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	9300      	str	r3, [sp, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f000 f9cd 	bl	80097f8 <I2C_WaitOnFlagUntilTimeout>
 800945e:	4603      	mov	r3, r0
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00d      	beq.n	8009480 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800946e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009472:	d103      	bne.n	800947c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800947a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800947c:	2303      	movs	r3, #3
 800947e:	e035      	b.n	80094ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009488:	d108      	bne.n	800949c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800948a:	897b      	ldrh	r3, [r7, #10]
 800948c:	b2db      	uxtb	r3, r3
 800948e:	461a      	mov	r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009498:	611a      	str	r2, [r3, #16]
 800949a:	e01b      	b.n	80094d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800949c:	897b      	ldrh	r3, [r7, #10]
 800949e:	11db      	asrs	r3, r3, #7
 80094a0:	b2db      	uxtb	r3, r3
 80094a2:	f003 0306 	and.w	r3, r3, #6
 80094a6:	b2db      	uxtb	r3, r3
 80094a8:	f063 030f 	orn	r3, r3, #15
 80094ac:	b2da      	uxtb	r2, r3
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	490e      	ldr	r1, [pc, #56]	; (80094f4 <I2C_MasterRequestWrite+0xfc>)
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f000 fa16 	bl	80098ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d001      	beq.n	80094ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e010      	b.n	80094ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80094ca:	897b      	ldrh	r3, [r7, #10]
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	4907      	ldr	r1, [pc, #28]	; (80094f8 <I2C_MasterRequestWrite+0x100>)
 80094da:	68f8      	ldr	r0, [r7, #12]
 80094dc:	f000 fa06 	bl	80098ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d001      	beq.n	80094ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80094e6:	2301      	movs	r3, #1
 80094e8:	e000      	b.n	80094ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3718      	adds	r7, #24
 80094f0:	46bd      	mov	sp, r7
 80094f2:	bd80      	pop	{r7, pc}
 80094f4:	00010008 	.word	0x00010008
 80094f8:	00010002 	.word	0x00010002

080094fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b088      	sub	sp, #32
 8009500:	af02      	add	r7, sp, #8
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	4608      	mov	r0, r1
 8009506:	4611      	mov	r1, r2
 8009508:	461a      	mov	r2, r3
 800950a:	4603      	mov	r3, r0
 800950c:	817b      	strh	r3, [r7, #10]
 800950e:	460b      	mov	r3, r1
 8009510:	813b      	strh	r3, [r7, #8]
 8009512:	4613      	mov	r3, r2
 8009514:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009524:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009528:	9300      	str	r3, [sp, #0]
 800952a:	6a3b      	ldr	r3, [r7, #32]
 800952c:	2200      	movs	r2, #0
 800952e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f000 f960 	bl	80097f8 <I2C_WaitOnFlagUntilTimeout>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00d      	beq.n	800955a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009548:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800954c:	d103      	bne.n	8009556 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009554:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009556:	2303      	movs	r3, #3
 8009558:	e05f      	b.n	800961a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800955a:	897b      	ldrh	r3, [r7, #10]
 800955c:	b2db      	uxtb	r3, r3
 800955e:	461a      	mov	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009568:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800956a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956c:	6a3a      	ldr	r2, [r7, #32]
 800956e:	492d      	ldr	r1, [pc, #180]	; (8009624 <I2C_RequestMemoryWrite+0x128>)
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f000 f9bb 	bl	80098ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e04c      	b.n	800961a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009580:	2300      	movs	r3, #0
 8009582:	617b      	str	r3, [r7, #20]
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	617b      	str	r3, [r7, #20]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	699b      	ldr	r3, [r3, #24]
 8009592:	617b      	str	r3, [r7, #20]
 8009594:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009598:	6a39      	ldr	r1, [r7, #32]
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f000 fa46 	bl	8009a2c <I2C_WaitOnTXEFlagUntilTimeout>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00d      	beq.n	80095c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095aa:	2b04      	cmp	r3, #4
 80095ac:	d107      	bne.n	80095be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80095be:	2301      	movs	r3, #1
 80095c0:	e02b      	b.n	800961a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80095c2:	88fb      	ldrh	r3, [r7, #6]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d105      	bne.n	80095d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80095c8:	893b      	ldrh	r3, [r7, #8]
 80095ca:	b2da      	uxtb	r2, r3
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	611a      	str	r2, [r3, #16]
 80095d2:	e021      	b.n	8009618 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80095d4:	893b      	ldrh	r3, [r7, #8]
 80095d6:	0a1b      	lsrs	r3, r3, #8
 80095d8:	b29b      	uxth	r3, r3
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80095e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80095e4:	6a39      	ldr	r1, [r7, #32]
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f000 fa20 	bl	8009a2c <I2C_WaitOnTXEFlagUntilTimeout>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d00d      	beq.n	800960e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f6:	2b04      	cmp	r3, #4
 80095f8:	d107      	bne.n	800960a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009608:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e005      	b.n	800961a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800960e:	893b      	ldrh	r3, [r7, #8]
 8009610:	b2da      	uxtb	r2, r3
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3718      	adds	r7, #24
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	00010002 	.word	0x00010002

08009628 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b088      	sub	sp, #32
 800962c:	af02      	add	r7, sp, #8
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	4608      	mov	r0, r1
 8009632:	4611      	mov	r1, r2
 8009634:	461a      	mov	r2, r3
 8009636:	4603      	mov	r3, r0
 8009638:	817b      	strh	r3, [r7, #10]
 800963a:	460b      	mov	r3, r1
 800963c:	813b      	strh	r3, [r7, #8]
 800963e:	4613      	mov	r3, r2
 8009640:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009650:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009660:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009664:	9300      	str	r3, [sp, #0]
 8009666:	6a3b      	ldr	r3, [r7, #32]
 8009668:	2200      	movs	r2, #0
 800966a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 f8c2 	bl	80097f8 <I2C_WaitOnFlagUntilTimeout>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00d      	beq.n	8009696 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009688:	d103      	bne.n	8009692 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009690:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009692:	2303      	movs	r3, #3
 8009694:	e0aa      	b.n	80097ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009696:	897b      	ldrh	r3, [r7, #10]
 8009698:	b2db      	uxtb	r3, r3
 800969a:	461a      	mov	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80096a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80096a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a8:	6a3a      	ldr	r2, [r7, #32]
 80096aa:	4952      	ldr	r1, [pc, #328]	; (80097f4 <I2C_RequestMemoryRead+0x1cc>)
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f000 f91d 	bl	80098ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d001      	beq.n	80096bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	e097      	b.n	80097ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096bc:	2300      	movs	r3, #0
 80096be:	617b      	str	r3, [r7, #20]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	695b      	ldr	r3, [r3, #20]
 80096c6:	617b      	str	r3, [r7, #20]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	699b      	ldr	r3, [r3, #24]
 80096ce:	617b      	str	r3, [r7, #20]
 80096d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096d4:	6a39      	ldr	r1, [r7, #32]
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f000 f9a8 	bl	8009a2c <I2C_WaitOnTXEFlagUntilTimeout>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00d      	beq.n	80096fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e6:	2b04      	cmp	r3, #4
 80096e8:	d107      	bne.n	80096fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e076      	b.n	80097ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80096fe:	88fb      	ldrh	r3, [r7, #6]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d105      	bne.n	8009710 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009704:	893b      	ldrh	r3, [r7, #8]
 8009706:	b2da      	uxtb	r2, r3
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	611a      	str	r2, [r3, #16]
 800970e:	e021      	b.n	8009754 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009710:	893b      	ldrh	r3, [r7, #8]
 8009712:	0a1b      	lsrs	r3, r3, #8
 8009714:	b29b      	uxth	r3, r3
 8009716:	b2da      	uxtb	r2, r3
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800971e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009720:	6a39      	ldr	r1, [r7, #32]
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 f982 	bl	8009a2c <I2C_WaitOnTXEFlagUntilTimeout>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d00d      	beq.n	800974a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009732:	2b04      	cmp	r3, #4
 8009734:	d107      	bne.n	8009746 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009744:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e050      	b.n	80097ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800974a:	893b      	ldrh	r3, [r7, #8]
 800974c:	b2da      	uxtb	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009756:	6a39      	ldr	r1, [r7, #32]
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f000 f967 	bl	8009a2c <I2C_WaitOnTXEFlagUntilTimeout>
 800975e:	4603      	mov	r3, r0
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00d      	beq.n	8009780 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009768:	2b04      	cmp	r3, #4
 800976a:	d107      	bne.n	800977c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800977a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	e035      	b.n	80097ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800978e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	6a3b      	ldr	r3, [r7, #32]
 8009796:	2200      	movs	r2, #0
 8009798:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f000 f82b 	bl	80097f8 <I2C_WaitOnFlagUntilTimeout>
 80097a2:	4603      	mov	r3, r0
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00d      	beq.n	80097c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097b6:	d103      	bne.n	80097c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80097c0:	2303      	movs	r3, #3
 80097c2:	e013      	b.n	80097ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80097c4:	897b      	ldrh	r3, [r7, #10]
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	f043 0301 	orr.w	r3, r3, #1
 80097cc:	b2da      	uxtb	r2, r3
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80097d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d6:	6a3a      	ldr	r2, [r7, #32]
 80097d8:	4906      	ldr	r1, [pc, #24]	; (80097f4 <I2C_RequestMemoryRead+0x1cc>)
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f000 f886 	bl	80098ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d001      	beq.n	80097ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80097e6:	2301      	movs	r3, #1
 80097e8:	e000      	b.n	80097ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3718      	adds	r7, #24
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	00010002 	.word	0x00010002

080097f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	60f8      	str	r0, [r7, #12]
 8009800:	60b9      	str	r1, [r7, #8]
 8009802:	603b      	str	r3, [r7, #0]
 8009804:	4613      	mov	r3, r2
 8009806:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009808:	e048      	b.n	800989c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009810:	d044      	beq.n	800989c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009812:	f7fe f9e3 	bl	8007bdc <HAL_GetTick>
 8009816:	4602      	mov	r2, r0
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	683a      	ldr	r2, [r7, #0]
 800981e:	429a      	cmp	r2, r3
 8009820:	d302      	bcc.n	8009828 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d139      	bne.n	800989c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	0c1b      	lsrs	r3, r3, #16
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b01      	cmp	r3, #1
 8009830:	d10d      	bne.n	800984e <I2C_WaitOnFlagUntilTimeout+0x56>
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	695b      	ldr	r3, [r3, #20]
 8009838:	43da      	mvns	r2, r3
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	4013      	ands	r3, r2
 800983e:	b29b      	uxth	r3, r3
 8009840:	2b00      	cmp	r3, #0
 8009842:	bf0c      	ite	eq
 8009844:	2301      	moveq	r3, #1
 8009846:	2300      	movne	r3, #0
 8009848:	b2db      	uxtb	r3, r3
 800984a:	461a      	mov	r2, r3
 800984c:	e00c      	b.n	8009868 <I2C_WaitOnFlagUntilTimeout+0x70>
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	699b      	ldr	r3, [r3, #24]
 8009854:	43da      	mvns	r2, r3
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	4013      	ands	r3, r2
 800985a:	b29b      	uxth	r3, r3
 800985c:	2b00      	cmp	r3, #0
 800985e:	bf0c      	ite	eq
 8009860:	2301      	moveq	r3, #1
 8009862:	2300      	movne	r3, #0
 8009864:	b2db      	uxtb	r3, r3
 8009866:	461a      	mov	r2, r3
 8009868:	79fb      	ldrb	r3, [r7, #7]
 800986a:	429a      	cmp	r2, r3
 800986c:	d116      	bne.n	800989c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2200      	movs	r2, #0
 8009872:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2220      	movs	r2, #32
 8009878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2200      	movs	r2, #0
 8009880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009888:	f043 0220 	orr.w	r2, r3, #32
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	e023      	b.n	80098e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800989c:	68bb      	ldr	r3, [r7, #8]
 800989e:	0c1b      	lsrs	r3, r3, #16
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d10d      	bne.n	80098c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	43da      	mvns	r2, r3
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	4013      	ands	r3, r2
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	bf0c      	ite	eq
 80098b8:	2301      	moveq	r3, #1
 80098ba:	2300      	movne	r3, #0
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	461a      	mov	r2, r3
 80098c0:	e00c      	b.n	80098dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	699b      	ldr	r3, [r3, #24]
 80098c8:	43da      	mvns	r2, r3
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	4013      	ands	r3, r2
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	bf0c      	ite	eq
 80098d4:	2301      	moveq	r3, #1
 80098d6:	2300      	movne	r3, #0
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	461a      	mov	r2, r3
 80098dc:	79fb      	ldrb	r3, [r7, #7]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d093      	beq.n	800980a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
 80098f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80098fa:	e071      	b.n	80099e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	695b      	ldr	r3, [r3, #20]
 8009902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009906:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800990a:	d123      	bne.n	8009954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	681a      	ldr	r2, [r3, #0]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800991a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009924:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2200      	movs	r2, #0
 800992a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2220      	movs	r2, #32
 8009930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2200      	movs	r2, #0
 8009938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009940:	f043 0204 	orr.w	r2, r3, #4
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2200      	movs	r2, #0
 800994c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009950:	2301      	movs	r3, #1
 8009952:	e067      	b.n	8009a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800995a:	d041      	beq.n	80099e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800995c:	f7fe f93e 	bl	8007bdc <HAL_GetTick>
 8009960:	4602      	mov	r2, r0
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	1ad3      	subs	r3, r2, r3
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	429a      	cmp	r2, r3
 800996a:	d302      	bcc.n	8009972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d136      	bne.n	80099e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	0c1b      	lsrs	r3, r3, #16
 8009976:	b2db      	uxtb	r3, r3
 8009978:	2b01      	cmp	r3, #1
 800997a:	d10c      	bne.n	8009996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	43da      	mvns	r2, r3
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	4013      	ands	r3, r2
 8009988:	b29b      	uxth	r3, r3
 800998a:	2b00      	cmp	r3, #0
 800998c:	bf14      	ite	ne
 800998e:	2301      	movne	r3, #1
 8009990:	2300      	moveq	r3, #0
 8009992:	b2db      	uxtb	r3, r3
 8009994:	e00b      	b.n	80099ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	699b      	ldr	r3, [r3, #24]
 800999c:	43da      	mvns	r2, r3
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	4013      	ands	r3, r2
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	bf14      	ite	ne
 80099a8:	2301      	movne	r3, #1
 80099aa:	2300      	moveq	r3, #0
 80099ac:	b2db      	uxtb	r3, r3
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d016      	beq.n	80099e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2200      	movs	r2, #0
 80099b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2220      	movs	r2, #32
 80099bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099cc:	f043 0220 	orr.w	r2, r3, #32
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	e021      	b.n	8009a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	0c1b      	lsrs	r3, r3, #16
 80099e4:	b2db      	uxtb	r3, r3
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d10c      	bne.n	8009a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	695b      	ldr	r3, [r3, #20]
 80099f0:	43da      	mvns	r2, r3
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	4013      	ands	r3, r2
 80099f6:	b29b      	uxth	r3, r3
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	bf14      	ite	ne
 80099fc:	2301      	movne	r3, #1
 80099fe:	2300      	moveq	r3, #0
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	e00b      	b.n	8009a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	699b      	ldr	r3, [r3, #24]
 8009a0a:	43da      	mvns	r2, r3
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	4013      	ands	r3, r2
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	bf14      	ite	ne
 8009a16:	2301      	movne	r3, #1
 8009a18:	2300      	moveq	r3, #0
 8009a1a:	b2db      	uxtb	r3, r3
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	f47f af6d 	bne.w	80098fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009a38:	e034      	b.n	8009aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009a3a:	68f8      	ldr	r0, [r7, #12]
 8009a3c:	f000 f8e3 	bl	8009c06 <I2C_IsAcknowledgeFailed>
 8009a40:	4603      	mov	r3, r0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d001      	beq.n	8009a4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009a46:	2301      	movs	r3, #1
 8009a48:	e034      	b.n	8009ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a50:	d028      	beq.n	8009aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a52:	f7fe f8c3 	bl	8007bdc <HAL_GetTick>
 8009a56:	4602      	mov	r2, r0
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d302      	bcc.n	8009a68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d11d      	bne.n	8009aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	695b      	ldr	r3, [r3, #20]
 8009a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a72:	2b80      	cmp	r3, #128	; 0x80
 8009a74:	d016      	beq.n	8009aa4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	2220      	movs	r2, #32
 8009a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a90:	f043 0220 	orr.w	r2, r3, #32
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	e007      	b.n	8009ab4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	695b      	ldr	r3, [r3, #20]
 8009aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aae:	2b80      	cmp	r3, #128	; 0x80
 8009ab0:	d1c3      	bne.n	8009a3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}

08009abc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009ac8:	e034      	b.n	8009b34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f000 f89b 	bl	8009c06 <I2C_IsAcknowledgeFailed>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e034      	b.n	8009b44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae0:	d028      	beq.n	8009b34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ae2:	f7fe f87b 	bl	8007bdc <HAL_GetTick>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d302      	bcc.n	8009af8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d11d      	bne.n	8009b34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	695b      	ldr	r3, [r3, #20]
 8009afe:	f003 0304 	and.w	r3, r3, #4
 8009b02:	2b04      	cmp	r3, #4
 8009b04:	d016      	beq.n	8009b34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2220      	movs	r2, #32
 8009b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	2200      	movs	r2, #0
 8009b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b20:	f043 0220 	orr.w	r2, r3, #32
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	e007      	b.n	8009b44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	695b      	ldr	r3, [r3, #20]
 8009b3a:	f003 0304 	and.w	r3, r3, #4
 8009b3e:	2b04      	cmp	r3, #4
 8009b40:	d1c3      	bne.n	8009aca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009b42:	2300      	movs	r3, #0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	3710      	adds	r7, #16
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009b58:	e049      	b.n	8009bee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	695b      	ldr	r3, [r3, #20]
 8009b60:	f003 0310 	and.w	r3, r3, #16
 8009b64:	2b10      	cmp	r3, #16
 8009b66:	d119      	bne.n	8009b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f06f 0210 	mvn.w	r2, #16
 8009b70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2220      	movs	r2, #32
 8009b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e030      	b.n	8009bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b9c:	f7fe f81e 	bl	8007bdc <HAL_GetTick>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d302      	bcc.n	8009bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d11d      	bne.n	8009bee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	695b      	ldr	r3, [r3, #20]
 8009bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bbc:	2b40      	cmp	r3, #64	; 0x40
 8009bbe:	d016      	beq.n	8009bee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2220      	movs	r2, #32
 8009bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bda:	f043 0220 	orr.w	r2, r3, #32
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2200      	movs	r2, #0
 8009be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	e007      	b.n	8009bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	695b      	ldr	r3, [r3, #20]
 8009bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bf8:	2b40      	cmp	r3, #64	; 0x40
 8009bfa:	d1ae      	bne.n	8009b5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009c06:	b480      	push	{r7}
 8009c08:	b083      	sub	sp, #12
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	695b      	ldr	r3, [r3, #20]
 8009c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c1c:	d11b      	bne.n	8009c56 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009c26:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2220      	movs	r2, #32
 8009c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c42:	f043 0204 	orr.w	r2, r3, #4
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	e000      	b.n	8009c58 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	370c      	adds	r7, #12
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bc80      	pop	{r7}
 8009c60:	4770      	bx	lr
	...

08009c64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d101      	bne.n	8009c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	e272      	b.n	800a15c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f003 0301 	and.w	r3, r3, #1
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f000 8087 	beq.w	8009d92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009c84:	4b92      	ldr	r3, [pc, #584]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	f003 030c 	and.w	r3, r3, #12
 8009c8c:	2b04      	cmp	r3, #4
 8009c8e:	d00c      	beq.n	8009caa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009c90:	4b8f      	ldr	r3, [pc, #572]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009c92:	685b      	ldr	r3, [r3, #4]
 8009c94:	f003 030c 	and.w	r3, r3, #12
 8009c98:	2b08      	cmp	r3, #8
 8009c9a:	d112      	bne.n	8009cc2 <HAL_RCC_OscConfig+0x5e>
 8009c9c:	4b8c      	ldr	r3, [pc, #560]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ca8:	d10b      	bne.n	8009cc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009caa:	4b89      	ldr	r3, [pc, #548]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d06c      	beq.n	8009d90 <HAL_RCC_OscConfig+0x12c>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d168      	bne.n	8009d90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e24c      	b.n	800a15c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cca:	d106      	bne.n	8009cda <HAL_RCC_OscConfig+0x76>
 8009ccc:	4b80      	ldr	r3, [pc, #512]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a7f      	ldr	r2, [pc, #508]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cd6:	6013      	str	r3, [r2, #0]
 8009cd8:	e02e      	b.n	8009d38 <HAL_RCC_OscConfig+0xd4>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d10c      	bne.n	8009cfc <HAL_RCC_OscConfig+0x98>
 8009ce2:	4b7b      	ldr	r3, [pc, #492]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a7a      	ldr	r2, [pc, #488]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009cec:	6013      	str	r3, [r2, #0]
 8009cee:	4b78      	ldr	r3, [pc, #480]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a77      	ldr	r2, [pc, #476]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009cf8:	6013      	str	r3, [r2, #0]
 8009cfa:	e01d      	b.n	8009d38 <HAL_RCC_OscConfig+0xd4>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d04:	d10c      	bne.n	8009d20 <HAL_RCC_OscConfig+0xbc>
 8009d06:	4b72      	ldr	r3, [pc, #456]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a71      	ldr	r2, [pc, #452]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009d10:	6013      	str	r3, [r2, #0]
 8009d12:	4b6f      	ldr	r3, [pc, #444]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a6e      	ldr	r2, [pc, #440]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d1c:	6013      	str	r3, [r2, #0]
 8009d1e:	e00b      	b.n	8009d38 <HAL_RCC_OscConfig+0xd4>
 8009d20:	4b6b      	ldr	r3, [pc, #428]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4a6a      	ldr	r2, [pc, #424]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d2a:	6013      	str	r3, [r2, #0]
 8009d2c:	4b68      	ldr	r3, [pc, #416]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a67      	ldr	r2, [pc, #412]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d013      	beq.n	8009d68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d40:	f7fd ff4c 	bl	8007bdc <HAL_GetTick>
 8009d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d46:	e008      	b.n	8009d5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d48:	f7fd ff48 	bl	8007bdc <HAL_GetTick>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	1ad3      	subs	r3, r2, r3
 8009d52:	2b64      	cmp	r3, #100	; 0x64
 8009d54:	d901      	bls.n	8009d5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009d56:	2303      	movs	r3, #3
 8009d58:	e200      	b.n	800a15c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009d5a:	4b5d      	ldr	r3, [pc, #372]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d0f0      	beq.n	8009d48 <HAL_RCC_OscConfig+0xe4>
 8009d66:	e014      	b.n	8009d92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d68:	f7fd ff38 	bl	8007bdc <HAL_GetTick>
 8009d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d6e:	e008      	b.n	8009d82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009d70:	f7fd ff34 	bl	8007bdc <HAL_GetTick>
 8009d74:	4602      	mov	r2, r0
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	1ad3      	subs	r3, r2, r3
 8009d7a:	2b64      	cmp	r3, #100	; 0x64
 8009d7c:	d901      	bls.n	8009d82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009d7e:	2303      	movs	r3, #3
 8009d80:	e1ec      	b.n	800a15c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009d82:	4b53      	ldr	r3, [pc, #332]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1f0      	bne.n	8009d70 <HAL_RCC_OscConfig+0x10c>
 8009d8e:	e000      	b.n	8009d92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f003 0302 	and.w	r3, r3, #2
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d063      	beq.n	8009e66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009d9e:	4b4c      	ldr	r3, [pc, #304]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	f003 030c 	and.w	r3, r3, #12
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00b      	beq.n	8009dc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009daa:	4b49      	ldr	r3, [pc, #292]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	f003 030c 	and.w	r3, r3, #12
 8009db2:	2b08      	cmp	r3, #8
 8009db4:	d11c      	bne.n	8009df0 <HAL_RCC_OscConfig+0x18c>
 8009db6:	4b46      	ldr	r3, [pc, #280]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d116      	bne.n	8009df0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009dc2:	4b43      	ldr	r3, [pc, #268]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f003 0302 	and.w	r3, r3, #2
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d005      	beq.n	8009dda <HAL_RCC_OscConfig+0x176>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	691b      	ldr	r3, [r3, #16]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d001      	beq.n	8009dda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e1c0      	b.n	800a15c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009dda:	4b3d      	ldr	r3, [pc, #244]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	695b      	ldr	r3, [r3, #20]
 8009de6:	00db      	lsls	r3, r3, #3
 8009de8:	4939      	ldr	r1, [pc, #228]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009dea:	4313      	orrs	r3, r2
 8009dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009dee:	e03a      	b.n	8009e66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	691b      	ldr	r3, [r3, #16]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d020      	beq.n	8009e3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009df8:	4b36      	ldr	r3, [pc, #216]	; (8009ed4 <HAL_RCC_OscConfig+0x270>)
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009dfe:	f7fd feed 	bl	8007bdc <HAL_GetTick>
 8009e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e04:	e008      	b.n	8009e18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e06:	f7fd fee9 	bl	8007bdc <HAL_GetTick>
 8009e0a:	4602      	mov	r2, r0
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d901      	bls.n	8009e18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8009e14:	2303      	movs	r3, #3
 8009e16:	e1a1      	b.n	800a15c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009e18:	4b2d      	ldr	r3, [pc, #180]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f003 0302 	and.w	r3, r3, #2
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d0f0      	beq.n	8009e06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e24:	4b2a      	ldr	r3, [pc, #168]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	695b      	ldr	r3, [r3, #20]
 8009e30:	00db      	lsls	r3, r3, #3
 8009e32:	4927      	ldr	r1, [pc, #156]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009e34:	4313      	orrs	r3, r2
 8009e36:	600b      	str	r3, [r1, #0]
 8009e38:	e015      	b.n	8009e66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009e3a:	4b26      	ldr	r3, [pc, #152]	; (8009ed4 <HAL_RCC_OscConfig+0x270>)
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e40:	f7fd fecc 	bl	8007bdc <HAL_GetTick>
 8009e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e46:	e008      	b.n	8009e5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e48:	f7fd fec8 	bl	8007bdc <HAL_GetTick>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	d901      	bls.n	8009e5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8009e56:	2303      	movs	r3, #3
 8009e58:	e180      	b.n	800a15c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009e5a:	4b1d      	ldr	r3, [pc, #116]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f003 0302 	and.w	r3, r3, #2
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d1f0      	bne.n	8009e48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 0308 	and.w	r3, r3, #8
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d03a      	beq.n	8009ee8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	699b      	ldr	r3, [r3, #24]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d019      	beq.n	8009eae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e7a:	4b17      	ldr	r3, [pc, #92]	; (8009ed8 <HAL_RCC_OscConfig+0x274>)
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e80:	f7fd feac 	bl	8007bdc <HAL_GetTick>
 8009e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e86:	e008      	b.n	8009e9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e88:	f7fd fea8 	bl	8007bdc <HAL_GetTick>
 8009e8c:	4602      	mov	r2, r0
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	1ad3      	subs	r3, r2, r3
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d901      	bls.n	8009e9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8009e96:	2303      	movs	r3, #3
 8009e98:	e160      	b.n	800a15c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e9a:	4b0d      	ldr	r3, [pc, #52]	; (8009ed0 <HAL_RCC_OscConfig+0x26c>)
 8009e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9e:	f003 0302 	and.w	r3, r3, #2
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d0f0      	beq.n	8009e88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8009ea6:	2001      	movs	r0, #1
 8009ea8:	f000 face 	bl	800a448 <RCC_Delay>
 8009eac:	e01c      	b.n	8009ee8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009eae:	4b0a      	ldr	r3, [pc, #40]	; (8009ed8 <HAL_RCC_OscConfig+0x274>)
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009eb4:	f7fd fe92 	bl	8007bdc <HAL_GetTick>
 8009eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009eba:	e00f      	b.n	8009edc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ebc:	f7fd fe8e 	bl	8007bdc <HAL_GetTick>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d908      	bls.n	8009edc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8009eca:	2303      	movs	r3, #3
 8009ecc:	e146      	b.n	800a15c <HAL_RCC_OscConfig+0x4f8>
 8009ece:	bf00      	nop
 8009ed0:	40021000 	.word	0x40021000
 8009ed4:	42420000 	.word	0x42420000
 8009ed8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009edc:	4b92      	ldr	r3, [pc, #584]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 8009ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee0:	f003 0302 	and.w	r3, r3, #2
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d1e9      	bne.n	8009ebc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 0304 	and.w	r3, r3, #4
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	f000 80a6 	beq.w	800a042 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009efa:	4b8b      	ldr	r3, [pc, #556]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 8009efc:	69db      	ldr	r3, [r3, #28]
 8009efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d10d      	bne.n	8009f22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009f06:	4b88      	ldr	r3, [pc, #544]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 8009f08:	69db      	ldr	r3, [r3, #28]
 8009f0a:	4a87      	ldr	r2, [pc, #540]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 8009f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f10:	61d3      	str	r3, [r2, #28]
 8009f12:	4b85      	ldr	r3, [pc, #532]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 8009f14:	69db      	ldr	r3, [r3, #28]
 8009f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f1a:	60bb      	str	r3, [r7, #8]
 8009f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f22:	4b82      	ldr	r3, [pc, #520]	; (800a12c <HAL_RCC_OscConfig+0x4c8>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d118      	bne.n	8009f60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009f2e:	4b7f      	ldr	r3, [pc, #508]	; (800a12c <HAL_RCC_OscConfig+0x4c8>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a7e      	ldr	r2, [pc, #504]	; (800a12c <HAL_RCC_OscConfig+0x4c8>)
 8009f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009f3a:	f7fd fe4f 	bl	8007bdc <HAL_GetTick>
 8009f3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f40:	e008      	b.n	8009f54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f42:	f7fd fe4b 	bl	8007bdc <HAL_GetTick>
 8009f46:	4602      	mov	r2, r0
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	1ad3      	subs	r3, r2, r3
 8009f4c:	2b64      	cmp	r3, #100	; 0x64
 8009f4e:	d901      	bls.n	8009f54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8009f50:	2303      	movs	r3, #3
 8009f52:	e103      	b.n	800a15c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009f54:	4b75      	ldr	r3, [pc, #468]	; (800a12c <HAL_RCC_OscConfig+0x4c8>)
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d0f0      	beq.n	8009f42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d106      	bne.n	8009f76 <HAL_RCC_OscConfig+0x312>
 8009f68:	4b6f      	ldr	r3, [pc, #444]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 8009f6a:	6a1b      	ldr	r3, [r3, #32]
 8009f6c:	4a6e      	ldr	r2, [pc, #440]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 8009f6e:	f043 0301 	orr.w	r3, r3, #1
 8009f72:	6213      	str	r3, [r2, #32]
 8009f74:	e02d      	b.n	8009fd2 <HAL_RCC_OscConfig+0x36e>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	68db      	ldr	r3, [r3, #12]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d10c      	bne.n	8009f98 <HAL_RCC_OscConfig+0x334>
 8009f7e:	4b6a      	ldr	r3, [pc, #424]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 8009f80:	6a1b      	ldr	r3, [r3, #32]
 8009f82:	4a69      	ldr	r2, [pc, #420]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 8009f84:	f023 0301 	bic.w	r3, r3, #1
 8009f88:	6213      	str	r3, [r2, #32]
 8009f8a:	4b67      	ldr	r3, [pc, #412]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 8009f8c:	6a1b      	ldr	r3, [r3, #32]
 8009f8e:	4a66      	ldr	r2, [pc, #408]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 8009f90:	f023 0304 	bic.w	r3, r3, #4
 8009f94:	6213      	str	r3, [r2, #32]
 8009f96:	e01c      	b.n	8009fd2 <HAL_RCC_OscConfig+0x36e>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	2b05      	cmp	r3, #5
 8009f9e:	d10c      	bne.n	8009fba <HAL_RCC_OscConfig+0x356>
 8009fa0:	4b61      	ldr	r3, [pc, #388]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 8009fa2:	6a1b      	ldr	r3, [r3, #32]
 8009fa4:	4a60      	ldr	r2, [pc, #384]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 8009fa6:	f043 0304 	orr.w	r3, r3, #4
 8009faa:	6213      	str	r3, [r2, #32]
 8009fac:	4b5e      	ldr	r3, [pc, #376]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 8009fae:	6a1b      	ldr	r3, [r3, #32]
 8009fb0:	4a5d      	ldr	r2, [pc, #372]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 8009fb2:	f043 0301 	orr.w	r3, r3, #1
 8009fb6:	6213      	str	r3, [r2, #32]
 8009fb8:	e00b      	b.n	8009fd2 <HAL_RCC_OscConfig+0x36e>
 8009fba:	4b5b      	ldr	r3, [pc, #364]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 8009fbc:	6a1b      	ldr	r3, [r3, #32]
 8009fbe:	4a5a      	ldr	r2, [pc, #360]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 8009fc0:	f023 0301 	bic.w	r3, r3, #1
 8009fc4:	6213      	str	r3, [r2, #32]
 8009fc6:	4b58      	ldr	r3, [pc, #352]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 8009fc8:	6a1b      	ldr	r3, [r3, #32]
 8009fca:	4a57      	ldr	r2, [pc, #348]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 8009fcc:	f023 0304 	bic.w	r3, r3, #4
 8009fd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d015      	beq.n	800a006 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009fda:	f7fd fdff 	bl	8007bdc <HAL_GetTick>
 8009fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009fe0:	e00a      	b.n	8009ff8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fe2:	f7fd fdfb 	bl	8007bdc <HAL_GetTick>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d901      	bls.n	8009ff8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8009ff4:	2303      	movs	r3, #3
 8009ff6:	e0b1      	b.n	800a15c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ff8:	4b4b      	ldr	r3, [pc, #300]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 8009ffa:	6a1b      	ldr	r3, [r3, #32]
 8009ffc:	f003 0302 	and.w	r3, r3, #2
 800a000:	2b00      	cmp	r3, #0
 800a002:	d0ee      	beq.n	8009fe2 <HAL_RCC_OscConfig+0x37e>
 800a004:	e014      	b.n	800a030 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a006:	f7fd fde9 	bl	8007bdc <HAL_GetTick>
 800a00a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a00c:	e00a      	b.n	800a024 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a00e:	f7fd fde5 	bl	8007bdc <HAL_GetTick>
 800a012:	4602      	mov	r2, r0
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	1ad3      	subs	r3, r2, r3
 800a018:	f241 3288 	movw	r2, #5000	; 0x1388
 800a01c:	4293      	cmp	r3, r2
 800a01e:	d901      	bls.n	800a024 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a020:	2303      	movs	r3, #3
 800a022:	e09b      	b.n	800a15c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a024:	4b40      	ldr	r3, [pc, #256]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 800a026:	6a1b      	ldr	r3, [r3, #32]
 800a028:	f003 0302 	and.w	r3, r3, #2
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d1ee      	bne.n	800a00e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a030:	7dfb      	ldrb	r3, [r7, #23]
 800a032:	2b01      	cmp	r3, #1
 800a034:	d105      	bne.n	800a042 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a036:	4b3c      	ldr	r3, [pc, #240]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 800a038:	69db      	ldr	r3, [r3, #28]
 800a03a:	4a3b      	ldr	r2, [pc, #236]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 800a03c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a040:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	69db      	ldr	r3, [r3, #28]
 800a046:	2b00      	cmp	r3, #0
 800a048:	f000 8087 	beq.w	800a15a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a04c:	4b36      	ldr	r3, [pc, #216]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	f003 030c 	and.w	r3, r3, #12
 800a054:	2b08      	cmp	r3, #8
 800a056:	d061      	beq.n	800a11c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	69db      	ldr	r3, [r3, #28]
 800a05c:	2b02      	cmp	r3, #2
 800a05e:	d146      	bne.n	800a0ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a060:	4b33      	ldr	r3, [pc, #204]	; (800a130 <HAL_RCC_OscConfig+0x4cc>)
 800a062:	2200      	movs	r2, #0
 800a064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a066:	f7fd fdb9 	bl	8007bdc <HAL_GetTick>
 800a06a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a06c:	e008      	b.n	800a080 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a06e:	f7fd fdb5 	bl	8007bdc <HAL_GetTick>
 800a072:	4602      	mov	r2, r0
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	2b02      	cmp	r3, #2
 800a07a:	d901      	bls.n	800a080 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a07c:	2303      	movs	r3, #3
 800a07e:	e06d      	b.n	800a15c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a080:	4b29      	ldr	r3, [pc, #164]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1f0      	bne.n	800a06e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a1b      	ldr	r3, [r3, #32]
 800a090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a094:	d108      	bne.n	800a0a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a096:	4b24      	ldr	r3, [pc, #144]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	689b      	ldr	r3, [r3, #8]
 800a0a2:	4921      	ldr	r1, [pc, #132]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 800a0a4:	4313      	orrs	r3, r2
 800a0a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a0a8:	4b1f      	ldr	r3, [pc, #124]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a19      	ldr	r1, [r3, #32]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b8:	430b      	orrs	r3, r1
 800a0ba:	491b      	ldr	r1, [pc, #108]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a0c0:	4b1b      	ldr	r3, [pc, #108]	; (800a130 <HAL_RCC_OscConfig+0x4cc>)
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0c6:	f7fd fd89 	bl	8007bdc <HAL_GetTick>
 800a0ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a0cc:	e008      	b.n	800a0e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0ce:	f7fd fd85 	bl	8007bdc <HAL_GetTick>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d901      	bls.n	800a0e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	e03d      	b.n	800a15c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a0e0:	4b11      	ldr	r3, [pc, #68]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d0f0      	beq.n	800a0ce <HAL_RCC_OscConfig+0x46a>
 800a0ec:	e035      	b.n	800a15a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0ee:	4b10      	ldr	r3, [pc, #64]	; (800a130 <HAL_RCC_OscConfig+0x4cc>)
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a0f4:	f7fd fd72 	bl	8007bdc <HAL_GetTick>
 800a0f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a0fa:	e008      	b.n	800a10e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0fc:	f7fd fd6e 	bl	8007bdc <HAL_GetTick>
 800a100:	4602      	mov	r2, r0
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	1ad3      	subs	r3, r2, r3
 800a106:	2b02      	cmp	r3, #2
 800a108:	d901      	bls.n	800a10e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a10a:	2303      	movs	r3, #3
 800a10c:	e026      	b.n	800a15c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a10e:	4b06      	ldr	r3, [pc, #24]	; (800a128 <HAL_RCC_OscConfig+0x4c4>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1f0      	bne.n	800a0fc <HAL_RCC_OscConfig+0x498>
 800a11a:	e01e      	b.n	800a15a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	69db      	ldr	r3, [r3, #28]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d107      	bne.n	800a134 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	e019      	b.n	800a15c <HAL_RCC_OscConfig+0x4f8>
 800a128:	40021000 	.word	0x40021000
 800a12c:	40007000 	.word	0x40007000
 800a130:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a134:	4b0b      	ldr	r3, [pc, #44]	; (800a164 <HAL_RCC_OscConfig+0x500>)
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6a1b      	ldr	r3, [r3, #32]
 800a144:	429a      	cmp	r2, r3
 800a146:	d106      	bne.n	800a156 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a152:	429a      	cmp	r2, r3
 800a154:	d001      	beq.n	800a15a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	e000      	b.n	800a15c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a15a:	2300      	movs	r3, #0
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3718      	adds	r7, #24
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	40021000 	.word	0x40021000

0800a168 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d101      	bne.n	800a17c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a178:	2301      	movs	r3, #1
 800a17a:	e0d0      	b.n	800a31e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a17c:	4b6a      	ldr	r3, [pc, #424]	; (800a328 <HAL_RCC_ClockConfig+0x1c0>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f003 0307 	and.w	r3, r3, #7
 800a184:	683a      	ldr	r2, [r7, #0]
 800a186:	429a      	cmp	r2, r3
 800a188:	d910      	bls.n	800a1ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a18a:	4b67      	ldr	r3, [pc, #412]	; (800a328 <HAL_RCC_ClockConfig+0x1c0>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f023 0207 	bic.w	r2, r3, #7
 800a192:	4965      	ldr	r1, [pc, #404]	; (800a328 <HAL_RCC_ClockConfig+0x1c0>)
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	4313      	orrs	r3, r2
 800a198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a19a:	4b63      	ldr	r3, [pc, #396]	; (800a328 <HAL_RCC_ClockConfig+0x1c0>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f003 0307 	and.w	r3, r3, #7
 800a1a2:	683a      	ldr	r2, [r7, #0]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d001      	beq.n	800a1ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e0b8      	b.n	800a31e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f003 0302 	and.w	r3, r3, #2
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d020      	beq.n	800a1fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 0304 	and.w	r3, r3, #4
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d005      	beq.n	800a1d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a1c4:	4b59      	ldr	r3, [pc, #356]	; (800a32c <HAL_RCC_ClockConfig+0x1c4>)
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	4a58      	ldr	r2, [pc, #352]	; (800a32c <HAL_RCC_ClockConfig+0x1c4>)
 800a1ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a1ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 0308 	and.w	r3, r3, #8
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d005      	beq.n	800a1e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a1dc:	4b53      	ldr	r3, [pc, #332]	; (800a32c <HAL_RCC_ClockConfig+0x1c4>)
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	4a52      	ldr	r2, [pc, #328]	; (800a32c <HAL_RCC_ClockConfig+0x1c4>)
 800a1e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a1e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a1e8:	4b50      	ldr	r3, [pc, #320]	; (800a32c <HAL_RCC_ClockConfig+0x1c4>)
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	689b      	ldr	r3, [r3, #8]
 800a1f4:	494d      	ldr	r1, [pc, #308]	; (800a32c <HAL_RCC_ClockConfig+0x1c4>)
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f003 0301 	and.w	r3, r3, #1
 800a202:	2b00      	cmp	r3, #0
 800a204:	d040      	beq.n	800a288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d107      	bne.n	800a21e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a20e:	4b47      	ldr	r3, [pc, #284]	; (800a32c <HAL_RCC_ClockConfig+0x1c4>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a216:	2b00      	cmp	r3, #0
 800a218:	d115      	bne.n	800a246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	e07f      	b.n	800a31e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	2b02      	cmp	r3, #2
 800a224:	d107      	bne.n	800a236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a226:	4b41      	ldr	r3, [pc, #260]	; (800a32c <HAL_RCC_ClockConfig+0x1c4>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d109      	bne.n	800a246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	e073      	b.n	800a31e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a236:	4b3d      	ldr	r3, [pc, #244]	; (800a32c <HAL_RCC_ClockConfig+0x1c4>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f003 0302 	and.w	r3, r3, #2
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d101      	bne.n	800a246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a242:	2301      	movs	r3, #1
 800a244:	e06b      	b.n	800a31e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a246:	4b39      	ldr	r3, [pc, #228]	; (800a32c <HAL_RCC_ClockConfig+0x1c4>)
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	f023 0203 	bic.w	r2, r3, #3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	4936      	ldr	r1, [pc, #216]	; (800a32c <HAL_RCC_ClockConfig+0x1c4>)
 800a254:	4313      	orrs	r3, r2
 800a256:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a258:	f7fd fcc0 	bl	8007bdc <HAL_GetTick>
 800a25c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a25e:	e00a      	b.n	800a276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a260:	f7fd fcbc 	bl	8007bdc <HAL_GetTick>
 800a264:	4602      	mov	r2, r0
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	1ad3      	subs	r3, r2, r3
 800a26a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a26e:	4293      	cmp	r3, r2
 800a270:	d901      	bls.n	800a276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a272:	2303      	movs	r3, #3
 800a274:	e053      	b.n	800a31e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a276:	4b2d      	ldr	r3, [pc, #180]	; (800a32c <HAL_RCC_ClockConfig+0x1c4>)
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	f003 020c 	and.w	r2, r3, #12
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	429a      	cmp	r2, r3
 800a286:	d1eb      	bne.n	800a260 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a288:	4b27      	ldr	r3, [pc, #156]	; (800a328 <HAL_RCC_ClockConfig+0x1c0>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 0307 	and.w	r3, r3, #7
 800a290:	683a      	ldr	r2, [r7, #0]
 800a292:	429a      	cmp	r2, r3
 800a294:	d210      	bcs.n	800a2b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a296:	4b24      	ldr	r3, [pc, #144]	; (800a328 <HAL_RCC_ClockConfig+0x1c0>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f023 0207 	bic.w	r2, r3, #7
 800a29e:	4922      	ldr	r1, [pc, #136]	; (800a328 <HAL_RCC_ClockConfig+0x1c0>)
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2a6:	4b20      	ldr	r3, [pc, #128]	; (800a328 <HAL_RCC_ClockConfig+0x1c0>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 0307 	and.w	r3, r3, #7
 800a2ae:	683a      	ldr	r2, [r7, #0]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d001      	beq.n	800a2b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e032      	b.n	800a31e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	f003 0304 	and.w	r3, r3, #4
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d008      	beq.n	800a2d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a2c4:	4b19      	ldr	r3, [pc, #100]	; (800a32c <HAL_RCC_ClockConfig+0x1c4>)
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	4916      	ldr	r1, [pc, #88]	; (800a32c <HAL_RCC_ClockConfig+0x1c4>)
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f003 0308 	and.w	r3, r3, #8
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d009      	beq.n	800a2f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a2e2:	4b12      	ldr	r3, [pc, #72]	; (800a32c <HAL_RCC_ClockConfig+0x1c4>)
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	00db      	lsls	r3, r3, #3
 800a2f0:	490e      	ldr	r1, [pc, #56]	; (800a32c <HAL_RCC_ClockConfig+0x1c4>)
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a2f6:	f000 f821 	bl	800a33c <HAL_RCC_GetSysClockFreq>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	4b0b      	ldr	r3, [pc, #44]	; (800a32c <HAL_RCC_ClockConfig+0x1c4>)
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	091b      	lsrs	r3, r3, #4
 800a302:	f003 030f 	and.w	r3, r3, #15
 800a306:	490a      	ldr	r1, [pc, #40]	; (800a330 <HAL_RCC_ClockConfig+0x1c8>)
 800a308:	5ccb      	ldrb	r3, [r1, r3]
 800a30a:	fa22 f303 	lsr.w	r3, r2, r3
 800a30e:	4a09      	ldr	r2, [pc, #36]	; (800a334 <HAL_RCC_ClockConfig+0x1cc>)
 800a310:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a312:	4b09      	ldr	r3, [pc, #36]	; (800a338 <HAL_RCC_ClockConfig+0x1d0>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4618      	mov	r0, r3
 800a318:	f7fd fc1e 	bl	8007b58 <HAL_InitTick>

  return HAL_OK;
 800a31c:	2300      	movs	r3, #0
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	40022000 	.word	0x40022000
 800a32c:	40021000 	.word	0x40021000
 800a330:	0800cf80 	.word	0x0800cf80
 800a334:	20000944 	.word	0x20000944
 800a338:	20000948 	.word	0x20000948

0800a33c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b087      	sub	sp, #28
 800a340:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a342:	2300      	movs	r3, #0
 800a344:	60fb      	str	r3, [r7, #12]
 800a346:	2300      	movs	r3, #0
 800a348:	60bb      	str	r3, [r7, #8]
 800a34a:	2300      	movs	r3, #0
 800a34c:	617b      	str	r3, [r7, #20]
 800a34e:	2300      	movs	r3, #0
 800a350:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a352:	2300      	movs	r3, #0
 800a354:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a356:	4b1e      	ldr	r3, [pc, #120]	; (800a3d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f003 030c 	and.w	r3, r3, #12
 800a362:	2b04      	cmp	r3, #4
 800a364:	d002      	beq.n	800a36c <HAL_RCC_GetSysClockFreq+0x30>
 800a366:	2b08      	cmp	r3, #8
 800a368:	d003      	beq.n	800a372 <HAL_RCC_GetSysClockFreq+0x36>
 800a36a:	e027      	b.n	800a3bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a36c:	4b19      	ldr	r3, [pc, #100]	; (800a3d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800a36e:	613b      	str	r3, [r7, #16]
      break;
 800a370:	e027      	b.n	800a3c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	0c9b      	lsrs	r3, r3, #18
 800a376:	f003 030f 	and.w	r3, r3, #15
 800a37a:	4a17      	ldr	r2, [pc, #92]	; (800a3d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a37c:	5cd3      	ldrb	r3, [r2, r3]
 800a37e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a386:	2b00      	cmp	r3, #0
 800a388:	d010      	beq.n	800a3ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a38a:	4b11      	ldr	r3, [pc, #68]	; (800a3d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	0c5b      	lsrs	r3, r3, #17
 800a390:	f003 0301 	and.w	r3, r3, #1
 800a394:	4a11      	ldr	r2, [pc, #68]	; (800a3dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800a396:	5cd3      	ldrb	r3, [r2, r3]
 800a398:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	4a0d      	ldr	r2, [pc, #52]	; (800a3d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800a39e:	fb03 f202 	mul.w	r2, r3, r2
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3a8:	617b      	str	r3, [r7, #20]
 800a3aa:	e004      	b.n	800a3b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a0c      	ldr	r2, [pc, #48]	; (800a3e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a3b0:	fb02 f303 	mul.w	r3, r2, r3
 800a3b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	613b      	str	r3, [r7, #16]
      break;
 800a3ba:	e002      	b.n	800a3c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a3bc:	4b05      	ldr	r3, [pc, #20]	; (800a3d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800a3be:	613b      	str	r3, [r7, #16]
      break;
 800a3c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a3c2:	693b      	ldr	r3, [r7, #16]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	371c      	adds	r7, #28
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bc80      	pop	{r7}
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop
 800a3d0:	40021000 	.word	0x40021000
 800a3d4:	007a1200 	.word	0x007a1200
 800a3d8:	0800cf98 	.word	0x0800cf98
 800a3dc:	0800cfa8 	.word	0x0800cfa8
 800a3e0:	003d0900 	.word	0x003d0900

0800a3e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a3e8:	4b02      	ldr	r3, [pc, #8]	; (800a3f4 <HAL_RCC_GetHCLKFreq+0x10>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bc80      	pop	{r7}
 800a3f2:	4770      	bx	lr
 800a3f4:	20000944 	.word	0x20000944

0800a3f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a3fc:	f7ff fff2 	bl	800a3e4 <HAL_RCC_GetHCLKFreq>
 800a400:	4602      	mov	r2, r0
 800a402:	4b05      	ldr	r3, [pc, #20]	; (800a418 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	0a1b      	lsrs	r3, r3, #8
 800a408:	f003 0307 	and.w	r3, r3, #7
 800a40c:	4903      	ldr	r1, [pc, #12]	; (800a41c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a40e:	5ccb      	ldrb	r3, [r1, r3]
 800a410:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a414:	4618      	mov	r0, r3
 800a416:	bd80      	pop	{r7, pc}
 800a418:	40021000 	.word	0x40021000
 800a41c:	0800cf90 	.word	0x0800cf90

0800a420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a424:	f7ff ffde 	bl	800a3e4 <HAL_RCC_GetHCLKFreq>
 800a428:	4602      	mov	r2, r0
 800a42a:	4b05      	ldr	r3, [pc, #20]	; (800a440 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	0adb      	lsrs	r3, r3, #11
 800a430:	f003 0307 	and.w	r3, r3, #7
 800a434:	4903      	ldr	r1, [pc, #12]	; (800a444 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a436:	5ccb      	ldrb	r3, [r1, r3]
 800a438:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	bd80      	pop	{r7, pc}
 800a440:	40021000 	.word	0x40021000
 800a444:	0800cf90 	.word	0x0800cf90

0800a448 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a448:	b480      	push	{r7}
 800a44a:	b085      	sub	sp, #20
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a450:	4b0a      	ldr	r3, [pc, #40]	; (800a47c <RCC_Delay+0x34>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a0a      	ldr	r2, [pc, #40]	; (800a480 <RCC_Delay+0x38>)
 800a456:	fba2 2303 	umull	r2, r3, r2, r3
 800a45a:	0a5b      	lsrs	r3, r3, #9
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	fb02 f303 	mul.w	r3, r2, r3
 800a462:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a464:	bf00      	nop
  }
  while (Delay --);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	1e5a      	subs	r2, r3, #1
 800a46a:	60fa      	str	r2, [r7, #12]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1f9      	bne.n	800a464 <RCC_Delay+0x1c>
}
 800a470:	bf00      	nop
 800a472:	bf00      	nop
 800a474:	3714      	adds	r7, #20
 800a476:	46bd      	mov	sp, r7
 800a478:	bc80      	pop	{r7}
 800a47a:	4770      	bx	lr
 800a47c:	20000944 	.word	0x20000944
 800a480:	10624dd3 	.word	0x10624dd3

0800a484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d101      	bne.n	800a496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a492:	2301      	movs	r3, #1
 800a494:	e041      	b.n	800a51a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a49c:	b2db      	uxtb	r3, r3
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d106      	bne.n	800a4b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f7fd fa26 	bl	80078fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2202      	movs	r2, #2
 800a4b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	3304      	adds	r3, #4
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	4610      	mov	r0, r2
 800a4c4:	f000 fa82 	bl	800a9cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2201      	movs	r2, #1
 800a504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3708      	adds	r7, #8
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
	...

0800a524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a524:	b480      	push	{r7}
 800a526:	b085      	sub	sp, #20
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a532:	b2db      	uxtb	r3, r3
 800a534:	2b01      	cmp	r3, #1
 800a536:	d001      	beq.n	800a53c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e044      	b.n	800a5c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	2202      	movs	r2, #2
 800a540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	68da      	ldr	r2, [r3, #12]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f042 0201 	orr.w	r2, r2, #1
 800a552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a1d      	ldr	r2, [pc, #116]	; (800a5d0 <HAL_TIM_Base_Start_IT+0xac>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d018      	beq.n	800a590 <HAL_TIM_Base_Start_IT+0x6c>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a1c      	ldr	r2, [pc, #112]	; (800a5d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d013      	beq.n	800a590 <HAL_TIM_Base_Start_IT+0x6c>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a570:	d00e      	beq.n	800a590 <HAL_TIM_Base_Start_IT+0x6c>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a18      	ldr	r2, [pc, #96]	; (800a5d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d009      	beq.n	800a590 <HAL_TIM_Base_Start_IT+0x6c>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a16      	ldr	r2, [pc, #88]	; (800a5dc <HAL_TIM_Base_Start_IT+0xb8>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d004      	beq.n	800a590 <HAL_TIM_Base_Start_IT+0x6c>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a15      	ldr	r2, [pc, #84]	; (800a5e0 <HAL_TIM_Base_Start_IT+0xbc>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d111      	bne.n	800a5b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	f003 0307 	and.w	r3, r3, #7
 800a59a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2b06      	cmp	r3, #6
 800a5a0:	d010      	beq.n	800a5c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f042 0201 	orr.w	r2, r2, #1
 800a5b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5b2:	e007      	b.n	800a5c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f042 0201 	orr.w	r2, r2, #1
 800a5c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3714      	adds	r7, #20
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bc80      	pop	{r7}
 800a5ce:	4770      	bx	lr
 800a5d0:	40012c00 	.word	0x40012c00
 800a5d4:	40013400 	.word	0x40013400
 800a5d8:	40000400 	.word	0x40000400
 800a5dc:	40000800 	.word	0x40000800
 800a5e0:	40000c00 	.word	0x40000c00

0800a5e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	691b      	ldr	r3, [r3, #16]
 800a5f2:	f003 0302 	and.w	r3, r3, #2
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d122      	bne.n	800a640 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	f003 0302 	and.w	r3, r3, #2
 800a604:	2b02      	cmp	r3, #2
 800a606:	d11b      	bne.n	800a640 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f06f 0202 	mvn.w	r2, #2
 800a610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2201      	movs	r2, #1
 800a616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	699b      	ldr	r3, [r3, #24]
 800a61e:	f003 0303 	and.w	r3, r3, #3
 800a622:	2b00      	cmp	r3, #0
 800a624:	d003      	beq.n	800a62e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 f9b4 	bl	800a994 <HAL_TIM_IC_CaptureCallback>
 800a62c:	e005      	b.n	800a63a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f9a7 	bl	800a982 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 f9b6 	bl	800a9a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	f003 0304 	and.w	r3, r3, #4
 800a64a:	2b04      	cmp	r3, #4
 800a64c:	d122      	bne.n	800a694 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	f003 0304 	and.w	r3, r3, #4
 800a658:	2b04      	cmp	r3, #4
 800a65a:	d11b      	bne.n	800a694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f06f 0204 	mvn.w	r2, #4
 800a664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2202      	movs	r2, #2
 800a66a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a676:	2b00      	cmp	r3, #0
 800a678:	d003      	beq.n	800a682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 f98a 	bl	800a994 <HAL_TIM_IC_CaptureCallback>
 800a680:	e005      	b.n	800a68e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f97d 	bl	800a982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 f98c 	bl	800a9a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	f003 0308 	and.w	r3, r3, #8
 800a69e:	2b08      	cmp	r3, #8
 800a6a0:	d122      	bne.n	800a6e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f003 0308 	and.w	r3, r3, #8
 800a6ac:	2b08      	cmp	r3, #8
 800a6ae:	d11b      	bne.n	800a6e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f06f 0208 	mvn.w	r2, #8
 800a6b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2204      	movs	r2, #4
 800a6be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	69db      	ldr	r3, [r3, #28]
 800a6c6:	f003 0303 	and.w	r3, r3, #3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d003      	beq.n	800a6d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 f960 	bl	800a994 <HAL_TIM_IC_CaptureCallback>
 800a6d4:	e005      	b.n	800a6e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f953 	bl	800a982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 f962 	bl	800a9a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	f003 0310 	and.w	r3, r3, #16
 800a6f2:	2b10      	cmp	r3, #16
 800a6f4:	d122      	bne.n	800a73c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	f003 0310 	and.w	r3, r3, #16
 800a700:	2b10      	cmp	r3, #16
 800a702:	d11b      	bne.n	800a73c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f06f 0210 	mvn.w	r2, #16
 800a70c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2208      	movs	r2, #8
 800a712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	69db      	ldr	r3, [r3, #28]
 800a71a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d003      	beq.n	800a72a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 f936 	bl	800a994 <HAL_TIM_IC_CaptureCallback>
 800a728:	e005      	b.n	800a736 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f929 	bl	800a982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f938 	bl	800a9a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	f003 0301 	and.w	r3, r3, #1
 800a746:	2b01      	cmp	r3, #1
 800a748:	d10e      	bne.n	800a768 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f003 0301 	and.w	r3, r3, #1
 800a754:	2b01      	cmp	r3, #1
 800a756:	d107      	bne.n	800a768 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f06f 0201 	mvn.w	r2, #1
 800a760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f7fc fd4a 	bl	80071fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a772:	2b80      	cmp	r3, #128	; 0x80
 800a774:	d10e      	bne.n	800a794 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a780:	2b80      	cmp	r3, #128	; 0x80
 800a782:	d107      	bne.n	800a794 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a78c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 faa1 	bl	800acd6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	691b      	ldr	r3, [r3, #16]
 800a79a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a79e:	2b40      	cmp	r3, #64	; 0x40
 800a7a0:	d10e      	bne.n	800a7c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ac:	2b40      	cmp	r3, #64	; 0x40
 800a7ae:	d107      	bne.n	800a7c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a7b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 f8fc 	bl	800a9b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	f003 0320 	and.w	r3, r3, #32
 800a7ca:	2b20      	cmp	r3, #32
 800a7cc:	d10e      	bne.n	800a7ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	f003 0320 	and.w	r3, r3, #32
 800a7d8:	2b20      	cmp	r3, #32
 800a7da:	d107      	bne.n	800a7ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f06f 0220 	mvn.w	r2, #32
 800a7e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fa6c 	bl	800acc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a7ec:	bf00      	nop
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7fe:	2300      	movs	r3, #0
 800a800:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d101      	bne.n	800a810 <HAL_TIM_ConfigClockSource+0x1c>
 800a80c:	2302      	movs	r3, #2
 800a80e:	e0b4      	b.n	800a97a <HAL_TIM_ConfigClockSource+0x186>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2201      	movs	r2, #1
 800a814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2202      	movs	r2, #2
 800a81c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a82e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a836:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68ba      	ldr	r2, [r7, #8]
 800a83e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a848:	d03e      	beq.n	800a8c8 <HAL_TIM_ConfigClockSource+0xd4>
 800a84a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a84e:	f200 8087 	bhi.w	800a960 <HAL_TIM_ConfigClockSource+0x16c>
 800a852:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a856:	f000 8086 	beq.w	800a966 <HAL_TIM_ConfigClockSource+0x172>
 800a85a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a85e:	d87f      	bhi.n	800a960 <HAL_TIM_ConfigClockSource+0x16c>
 800a860:	2b70      	cmp	r3, #112	; 0x70
 800a862:	d01a      	beq.n	800a89a <HAL_TIM_ConfigClockSource+0xa6>
 800a864:	2b70      	cmp	r3, #112	; 0x70
 800a866:	d87b      	bhi.n	800a960 <HAL_TIM_ConfigClockSource+0x16c>
 800a868:	2b60      	cmp	r3, #96	; 0x60
 800a86a:	d050      	beq.n	800a90e <HAL_TIM_ConfigClockSource+0x11a>
 800a86c:	2b60      	cmp	r3, #96	; 0x60
 800a86e:	d877      	bhi.n	800a960 <HAL_TIM_ConfigClockSource+0x16c>
 800a870:	2b50      	cmp	r3, #80	; 0x50
 800a872:	d03c      	beq.n	800a8ee <HAL_TIM_ConfigClockSource+0xfa>
 800a874:	2b50      	cmp	r3, #80	; 0x50
 800a876:	d873      	bhi.n	800a960 <HAL_TIM_ConfigClockSource+0x16c>
 800a878:	2b40      	cmp	r3, #64	; 0x40
 800a87a:	d058      	beq.n	800a92e <HAL_TIM_ConfigClockSource+0x13a>
 800a87c:	2b40      	cmp	r3, #64	; 0x40
 800a87e:	d86f      	bhi.n	800a960 <HAL_TIM_ConfigClockSource+0x16c>
 800a880:	2b30      	cmp	r3, #48	; 0x30
 800a882:	d064      	beq.n	800a94e <HAL_TIM_ConfigClockSource+0x15a>
 800a884:	2b30      	cmp	r3, #48	; 0x30
 800a886:	d86b      	bhi.n	800a960 <HAL_TIM_ConfigClockSource+0x16c>
 800a888:	2b20      	cmp	r3, #32
 800a88a:	d060      	beq.n	800a94e <HAL_TIM_ConfigClockSource+0x15a>
 800a88c:	2b20      	cmp	r3, #32
 800a88e:	d867      	bhi.n	800a960 <HAL_TIM_ConfigClockSource+0x16c>
 800a890:	2b00      	cmp	r3, #0
 800a892:	d05c      	beq.n	800a94e <HAL_TIM_ConfigClockSource+0x15a>
 800a894:	2b10      	cmp	r3, #16
 800a896:	d05a      	beq.n	800a94e <HAL_TIM_ConfigClockSource+0x15a>
 800a898:	e062      	b.n	800a960 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a8aa:	f000 f980 	bl	800abae <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a8bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	68ba      	ldr	r2, [r7, #8]
 800a8c4:	609a      	str	r2, [r3, #8]
      break;
 800a8c6:	e04f      	b.n	800a968 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a8d8:	f000 f969 	bl	800abae <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	689a      	ldr	r2, [r3, #8]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a8ea:	609a      	str	r2, [r3, #8]
      break;
 800a8ec:	e03c      	b.n	800a968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	f000 f8e0 	bl	800aac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	2150      	movs	r1, #80	; 0x50
 800a906:	4618      	mov	r0, r3
 800a908:	f000 f937 	bl	800ab7a <TIM_ITRx_SetConfig>
      break;
 800a90c:	e02c      	b.n	800a968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a91a:	461a      	mov	r2, r3
 800a91c:	f000 f8fe 	bl	800ab1c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2160      	movs	r1, #96	; 0x60
 800a926:	4618      	mov	r0, r3
 800a928:	f000 f927 	bl	800ab7a <TIM_ITRx_SetConfig>
      break;
 800a92c:	e01c      	b.n	800a968 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a93a:	461a      	mov	r2, r3
 800a93c:	f000 f8c0 	bl	800aac0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2140      	movs	r1, #64	; 0x40
 800a946:	4618      	mov	r0, r3
 800a948:	f000 f917 	bl	800ab7a <TIM_ITRx_SetConfig>
      break;
 800a94c:	e00c      	b.n	800a968 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	4619      	mov	r1, r3
 800a958:	4610      	mov	r0, r2
 800a95a:	f000 f90e 	bl	800ab7a <TIM_ITRx_SetConfig>
      break;
 800a95e:	e003      	b.n	800a968 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a960:	2301      	movs	r3, #1
 800a962:	73fb      	strb	r3, [r7, #15]
      break;
 800a964:	e000      	b.n	800a968 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a966:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2201      	movs	r2, #1
 800a96c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a978:	7bfb      	ldrb	r3, [r7, #15]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a982:	b480      	push	{r7}
 800a984:	b083      	sub	sp, #12
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a98a:	bf00      	nop
 800a98c:	370c      	adds	r7, #12
 800a98e:	46bd      	mov	sp, r7
 800a990:	bc80      	pop	{r7}
 800a992:	4770      	bx	lr

0800a994 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a99c:	bf00      	nop
 800a99e:	370c      	adds	r7, #12
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bc80      	pop	{r7}
 800a9a4:	4770      	bx	lr

0800a9a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b083      	sub	sp, #12
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9ae:	bf00      	nop
 800a9b0:	370c      	adds	r7, #12
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bc80      	pop	{r7}
 800a9b6:	4770      	bx	lr

0800a9b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a9c0:	bf00      	nop
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bc80      	pop	{r7}
 800a9c8:	4770      	bx	lr
	...

0800a9cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b085      	sub	sp, #20
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4a33      	ldr	r2, [pc, #204]	; (800aaac <TIM_Base_SetConfig+0xe0>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d013      	beq.n	800aa0c <TIM_Base_SetConfig+0x40>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a32      	ldr	r2, [pc, #200]	; (800aab0 <TIM_Base_SetConfig+0xe4>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d00f      	beq.n	800aa0c <TIM_Base_SetConfig+0x40>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9f2:	d00b      	beq.n	800aa0c <TIM_Base_SetConfig+0x40>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a2f      	ldr	r2, [pc, #188]	; (800aab4 <TIM_Base_SetConfig+0xe8>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d007      	beq.n	800aa0c <TIM_Base_SetConfig+0x40>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a2e      	ldr	r2, [pc, #184]	; (800aab8 <TIM_Base_SetConfig+0xec>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d003      	beq.n	800aa0c <TIM_Base_SetConfig+0x40>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a2d      	ldr	r2, [pc, #180]	; (800aabc <TIM_Base_SetConfig+0xf0>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d108      	bne.n	800aa1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	68fa      	ldr	r2, [r7, #12]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a22      	ldr	r2, [pc, #136]	; (800aaac <TIM_Base_SetConfig+0xe0>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d013      	beq.n	800aa4e <TIM_Base_SetConfig+0x82>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a21      	ldr	r2, [pc, #132]	; (800aab0 <TIM_Base_SetConfig+0xe4>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d00f      	beq.n	800aa4e <TIM_Base_SetConfig+0x82>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa34:	d00b      	beq.n	800aa4e <TIM_Base_SetConfig+0x82>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a1e      	ldr	r2, [pc, #120]	; (800aab4 <TIM_Base_SetConfig+0xe8>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d007      	beq.n	800aa4e <TIM_Base_SetConfig+0x82>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a1d      	ldr	r2, [pc, #116]	; (800aab8 <TIM_Base_SetConfig+0xec>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d003      	beq.n	800aa4e <TIM_Base_SetConfig+0x82>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a1c      	ldr	r2, [pc, #112]	; (800aabc <TIM_Base_SetConfig+0xf0>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d108      	bne.n	800aa60 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	68db      	ldr	r3, [r3, #12]
 800aa5a:	68fa      	ldr	r2, [r7, #12]
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	695b      	ldr	r3, [r3, #20]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	689a      	ldr	r2, [r3, #8]
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4a09      	ldr	r2, [pc, #36]	; (800aaac <TIM_Base_SetConfig+0xe0>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d003      	beq.n	800aa94 <TIM_Base_SetConfig+0xc8>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	4a08      	ldr	r2, [pc, #32]	; (800aab0 <TIM_Base_SetConfig+0xe4>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d103      	bne.n	800aa9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	691a      	ldr	r2, [r3, #16]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	615a      	str	r2, [r3, #20]
}
 800aaa2:	bf00      	nop
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bc80      	pop	{r7}
 800aaaa:	4770      	bx	lr
 800aaac:	40012c00 	.word	0x40012c00
 800aab0:	40013400 	.word	0x40013400
 800aab4:	40000400 	.word	0x40000400
 800aab8:	40000800 	.word	0x40000800
 800aabc:	40000c00 	.word	0x40000c00

0800aac0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aac0:	b480      	push	{r7}
 800aac2:	b087      	sub	sp, #28
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	6a1b      	ldr	r3, [r3, #32]
 800aad0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	f023 0201 	bic.w	r2, r3, #1
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	699b      	ldr	r3, [r3, #24]
 800aae2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aaea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	011b      	lsls	r3, r3, #4
 800aaf0:	693a      	ldr	r2, [r7, #16]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f023 030a 	bic.w	r3, r3, #10
 800aafc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	4313      	orrs	r3, r2
 800ab04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	693a      	ldr	r2, [r7, #16]
 800ab0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	697a      	ldr	r2, [r7, #20]
 800ab10:	621a      	str	r2, [r3, #32]
}
 800ab12:	bf00      	nop
 800ab14:	371c      	adds	r7, #28
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bc80      	pop	{r7}
 800ab1a:	4770      	bx	lr

0800ab1c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b087      	sub	sp, #28
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6a1b      	ldr	r3, [r3, #32]
 800ab2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	6a1b      	ldr	r3, [r3, #32]
 800ab32:	f023 0210 	bic.w	r2, r3, #16
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	699b      	ldr	r3, [r3, #24]
 800ab3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ab46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	031b      	lsls	r3, r3, #12
 800ab4c:	693a      	ldr	r2, [r7, #16]
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ab58:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	011b      	lsls	r3, r3, #4
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	693a      	ldr	r2, [r7, #16]
 800ab68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	697a      	ldr	r2, [r7, #20]
 800ab6e:	621a      	str	r2, [r3, #32]
}
 800ab70:	bf00      	nop
 800ab72:	371c      	adds	r7, #28
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bc80      	pop	{r7}
 800ab78:	4770      	bx	lr

0800ab7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	b085      	sub	sp, #20
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
 800ab82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	689b      	ldr	r3, [r3, #8]
 800ab88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ab92:	683a      	ldr	r2, [r7, #0]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	f043 0307 	orr.w	r3, r3, #7
 800ab9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	609a      	str	r2, [r3, #8]
}
 800aba4:	bf00      	nop
 800aba6:	3714      	adds	r7, #20
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bc80      	pop	{r7}
 800abac:	4770      	bx	lr

0800abae <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800abae:	b480      	push	{r7}
 800abb0:	b087      	sub	sp, #28
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	60f8      	str	r0, [r7, #12]
 800abb6:	60b9      	str	r1, [r7, #8]
 800abb8:	607a      	str	r2, [r7, #4]
 800abba:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800abc8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	021a      	lsls	r2, r3, #8
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	431a      	orrs	r2, r3
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	4313      	orrs	r3, r2
 800abd6:	697a      	ldr	r2, [r7, #20]
 800abd8:	4313      	orrs	r3, r2
 800abda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	697a      	ldr	r2, [r7, #20]
 800abe0:	609a      	str	r2, [r3, #8]
}
 800abe2:	bf00      	nop
 800abe4:	371c      	adds	r7, #28
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bc80      	pop	{r7}
 800abea:	4770      	bx	lr

0800abec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800abec:	b480      	push	{r7}
 800abee:	b085      	sub	sp, #20
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
 800abf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d101      	bne.n	800ac04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac00:	2302      	movs	r3, #2
 800ac02:	e050      	b.n	800aca6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2201      	movs	r2, #1
 800ac08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2202      	movs	r2, #2
 800ac10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4a1b      	ldr	r2, [pc, #108]	; (800acb0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800ac44:	4293      	cmp	r3, r2
 800ac46:	d018      	beq.n	800ac7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a19      	ldr	r2, [pc, #100]	; (800acb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d013      	beq.n	800ac7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac5a:	d00e      	beq.n	800ac7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a15      	ldr	r2, [pc, #84]	; (800acb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d009      	beq.n	800ac7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4a14      	ldr	r2, [pc, #80]	; (800acbc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d004      	beq.n	800ac7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a12      	ldr	r2, [pc, #72]	; (800acc0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d10c      	bne.n	800ac94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	68ba      	ldr	r2, [r7, #8]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68ba      	ldr	r2, [r7, #8]
 800ac92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2201      	movs	r2, #1
 800ac98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3714      	adds	r7, #20
 800acaa:	46bd      	mov	sp, r7
 800acac:	bc80      	pop	{r7}
 800acae:	4770      	bx	lr
 800acb0:	40012c00 	.word	0x40012c00
 800acb4:	40013400 	.word	0x40013400
 800acb8:	40000400 	.word	0x40000400
 800acbc:	40000800 	.word	0x40000800
 800acc0:	40000c00 	.word	0x40000c00

0800acc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800accc:	bf00      	nop
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bc80      	pop	{r7}
 800acd4:	4770      	bx	lr

0800acd6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800acd6:	b480      	push	{r7}
 800acd8:	b083      	sub	sp, #12
 800acda:	af00      	add	r7, sp, #0
 800acdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800acde:	bf00      	nop
 800ace0:	370c      	adds	r7, #12
 800ace2:	46bd      	mov	sp, r7
 800ace4:	bc80      	pop	{r7}
 800ace6:	4770      	bx	lr

0800ace8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d101      	bne.n	800acfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800acf6:	2301      	movs	r3, #1
 800acf8:	e042      	b.n	800ad80 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad00:	b2db      	uxtb	r3, r3
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d106      	bne.n	800ad14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f7fc fe1a 	bl	8007948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2224      	movs	r2, #36	; 0x24
 800ad18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	68da      	ldr	r2, [r3, #12]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ad2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fcb5 	bl	800b69c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	691a      	ldr	r2, [r3, #16]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	695a      	ldr	r2, [r3, #20]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	68da      	ldr	r2, [r3, #12]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ad60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2200      	movs	r2, #0
 800ad66:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2220      	movs	r2, #32
 800ad6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2220      	movs	r2, #32
 800ad74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	60b9      	str	r1, [r7, #8]
 800ad92:	4613      	mov	r3, r2
 800ad94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	2b20      	cmp	r3, #32
 800ada0:	d121      	bne.n	800ade6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d002      	beq.n	800adae <HAL_UART_Transmit_IT+0x26>
 800ada8:	88fb      	ldrh	r3, [r7, #6]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d101      	bne.n	800adb2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800adae:	2301      	movs	r3, #1
 800adb0:	e01a      	b.n	800ade8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	88fa      	ldrh	r2, [r7, #6]
 800adbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	88fa      	ldrh	r2, [r7, #6]
 800adc2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2200      	movs	r2, #0
 800adc8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2221      	movs	r2, #33	; 0x21
 800adce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	68da      	ldr	r2, [r3, #12]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ade0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800ade2:	2300      	movs	r3, #0
 800ade4:	e000      	b.n	800ade8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800ade6:	2302      	movs	r3, #2
  }
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3714      	adds	r7, #20
 800adec:	46bd      	mov	sp, r7
 800adee:	bc80      	pop	{r7}
 800adf0:	4770      	bx	lr
	...

0800adf4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b0ba      	sub	sp, #232	; 0xe8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	68db      	ldr	r3, [r3, #12]
 800ae0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	695b      	ldr	r3, [r3, #20]
 800ae16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800ae20:	2300      	movs	r3, #0
 800ae22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ae26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae2a:	f003 030f 	and.w	r3, r3, #15
 800ae2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ae32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d10f      	bne.n	800ae5a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ae3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae3e:	f003 0320 	and.w	r3, r3, #32
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d009      	beq.n	800ae5a <HAL_UART_IRQHandler+0x66>
 800ae46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae4a:	f003 0320 	and.w	r3, r3, #32
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d003      	beq.n	800ae5a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	f000 fb63 	bl	800b51e <UART_Receive_IT>
      return;
 800ae58:	e25b      	b.n	800b312 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ae5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	f000 80de 	beq.w	800b020 <HAL_UART_IRQHandler+0x22c>
 800ae64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae68:	f003 0301 	and.w	r3, r3, #1
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d106      	bne.n	800ae7e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ae70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae74:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f000 80d1 	beq.w	800b020 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ae7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae82:	f003 0301 	and.w	r3, r3, #1
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00b      	beq.n	800aea2 <HAL_UART_IRQHandler+0xae>
 800ae8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d005      	beq.n	800aea2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae9a:	f043 0201 	orr.w	r2, r3, #1
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aea6:	f003 0304 	and.w	r3, r3, #4
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00b      	beq.n	800aec6 <HAL_UART_IRQHandler+0xd2>
 800aeae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aeb2:	f003 0301 	and.w	r3, r3, #1
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d005      	beq.n	800aec6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aebe:	f043 0202 	orr.w	r2, r3, #2
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800aec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeca:	f003 0302 	and.w	r3, r3, #2
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00b      	beq.n	800aeea <HAL_UART_IRQHandler+0xf6>
 800aed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800aed6:	f003 0301 	and.w	r3, r3, #1
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d005      	beq.n	800aeea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aee2:	f043 0204 	orr.w	r2, r3, #4
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800aeea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aeee:	f003 0308 	and.w	r3, r3, #8
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d011      	beq.n	800af1a <HAL_UART_IRQHandler+0x126>
 800aef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aefa:	f003 0320 	and.w	r3, r3, #32
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d105      	bne.n	800af0e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800af02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d005      	beq.n	800af1a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af12:	f043 0208 	orr.w	r2, r3, #8
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f000 81f2 	beq.w	800b308 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af28:	f003 0320 	and.w	r3, r3, #32
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d008      	beq.n	800af42 <HAL_UART_IRQHandler+0x14e>
 800af30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af34:	f003 0320 	and.w	r3, r3, #32
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d002      	beq.n	800af42 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 faee 	bl	800b51e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	bf14      	ite	ne
 800af50:	2301      	movne	r3, #1
 800af52:	2300      	moveq	r3, #0
 800af54:	b2db      	uxtb	r3, r3
 800af56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af5e:	f003 0308 	and.w	r3, r3, #8
 800af62:	2b00      	cmp	r3, #0
 800af64:	d103      	bne.n	800af6e <HAL_UART_IRQHandler+0x17a>
 800af66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d04f      	beq.n	800b00e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f9f8 	bl	800b364 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	695b      	ldr	r3, [r3, #20]
 800af7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d041      	beq.n	800b006 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	3314      	adds	r3, #20
 800af88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af90:	e853 3f00 	ldrex	r3, [r3]
 800af94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800af98:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	3314      	adds	r3, #20
 800afaa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800afae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800afb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800afba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800afbe:	e841 2300 	strex	r3, r2, [r1]
 800afc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800afc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d1d9      	bne.n	800af82 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d013      	beq.n	800affe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afda:	4a7e      	ldr	r2, [pc, #504]	; (800b1d4 <HAL_UART_IRQHandler+0x3e0>)
 800afdc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7fd f86c 	bl	80080c0 <HAL_DMA_Abort_IT>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d016      	beq.n	800b01c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aff4:	687a      	ldr	r2, [r7, #4]
 800aff6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800aff8:	4610      	mov	r0, r2
 800affa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800affc:	e00e      	b.n	800b01c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 f99c 	bl	800b33c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b004:	e00a      	b.n	800b01c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 f998 	bl	800b33c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b00c:	e006      	b.n	800b01c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f000 f994 	bl	800b33c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2200      	movs	r2, #0
 800b018:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b01a:	e175      	b.n	800b308 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b01c:	bf00      	nop
    return;
 800b01e:	e173      	b.n	800b308 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b024:	2b01      	cmp	r3, #1
 800b026:	f040 814f 	bne.w	800b2c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b02a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b02e:	f003 0310 	and.w	r3, r3, #16
 800b032:	2b00      	cmp	r3, #0
 800b034:	f000 8148 	beq.w	800b2c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b03c:	f003 0310 	and.w	r3, r3, #16
 800b040:	2b00      	cmp	r3, #0
 800b042:	f000 8141 	beq.w	800b2c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b046:	2300      	movs	r3, #0
 800b048:	60bb      	str	r3, [r7, #8]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	60bb      	str	r3, [r7, #8]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	60bb      	str	r3, [r7, #8]
 800b05a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	695b      	ldr	r3, [r3, #20]
 800b062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b066:	2b00      	cmp	r3, #0
 800b068:	f000 80b6 	beq.w	800b1d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b078:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f000 8145 	beq.w	800b30c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b086:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b08a:	429a      	cmp	r2, r3
 800b08c:	f080 813e 	bcs.w	800b30c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b096:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b09c:	699b      	ldr	r3, [r3, #24]
 800b09e:	2b20      	cmp	r3, #32
 800b0a0:	f000 8088 	beq.w	800b1b4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	330c      	adds	r3, #12
 800b0aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b0b2:	e853 3f00 	ldrex	r3, [r3]
 800b0b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b0ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b0be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	330c      	adds	r3, #12
 800b0cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b0d0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b0d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b0dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b0e0:	e841 2300 	strex	r3, r2, [r1]
 800b0e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b0e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d1d9      	bne.n	800b0a4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	3314      	adds	r3, #20
 800b0f6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b0fa:	e853 3f00 	ldrex	r3, [r3]
 800b0fe:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b100:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b102:	f023 0301 	bic.w	r3, r3, #1
 800b106:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	3314      	adds	r3, #20
 800b110:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b114:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b118:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b11a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b11c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b120:	e841 2300 	strex	r3, r2, [r1]
 800b124:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b126:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1e1      	bne.n	800b0f0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	3314      	adds	r3, #20
 800b132:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b134:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b136:	e853 3f00 	ldrex	r3, [r3]
 800b13a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b13c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b13e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b142:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	3314      	adds	r3, #20
 800b14c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b150:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b152:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b154:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b156:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b158:	e841 2300 	strex	r3, r2, [r1]
 800b15c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b15e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b160:	2b00      	cmp	r3, #0
 800b162:	d1e3      	bne.n	800b12c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2220      	movs	r2, #32
 800b168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2200      	movs	r2, #0
 800b170:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	330c      	adds	r3, #12
 800b178:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b17c:	e853 3f00 	ldrex	r3, [r3]
 800b180:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b184:	f023 0310 	bic.w	r3, r3, #16
 800b188:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	330c      	adds	r3, #12
 800b192:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b196:	65ba      	str	r2, [r7, #88]	; 0x58
 800b198:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b19a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b19c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b19e:	e841 2300 	strex	r3, r2, [r1]
 800b1a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b1a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d1e3      	bne.n	800b172 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fc ff4b 	bl	800804a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2202      	movs	r2, #2
 800b1b8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	1ad3      	subs	r3, r2, r3
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f8bf 	bl	800b34e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b1d0:	e09c      	b.n	800b30c <HAL_UART_IRQHandler+0x518>
 800b1d2:	bf00      	nop
 800b1d4:	0800b429 	.word	0x0800b429
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b1e0:	b29b      	uxth	r3, r3
 800b1e2:	1ad3      	subs	r3, r2, r3
 800b1e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	f000 808e 	beq.w	800b310 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b1f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f000 8089 	beq.w	800b310 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	330c      	adds	r3, #12
 800b204:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b208:	e853 3f00 	ldrex	r3, [r3]
 800b20c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b20e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b210:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b214:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	330c      	adds	r3, #12
 800b21e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b222:	647a      	str	r2, [r7, #68]	; 0x44
 800b224:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b226:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b228:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b22a:	e841 2300 	strex	r3, r2, [r1]
 800b22e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b232:	2b00      	cmp	r3, #0
 800b234:	d1e3      	bne.n	800b1fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	3314      	adds	r3, #20
 800b23c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b240:	e853 3f00 	ldrex	r3, [r3]
 800b244:	623b      	str	r3, [r7, #32]
   return(result);
 800b246:	6a3b      	ldr	r3, [r7, #32]
 800b248:	f023 0301 	bic.w	r3, r3, #1
 800b24c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	3314      	adds	r3, #20
 800b256:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b25a:	633a      	str	r2, [r7, #48]	; 0x30
 800b25c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b260:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b262:	e841 2300 	strex	r3, r2, [r1]
 800b266:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1e3      	bne.n	800b236 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2220      	movs	r2, #32
 800b272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	330c      	adds	r3, #12
 800b282:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	e853 3f00 	ldrex	r3, [r3]
 800b28a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f023 0310 	bic.w	r3, r3, #16
 800b292:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	330c      	adds	r3, #12
 800b29c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b2a0:	61fa      	str	r2, [r7, #28]
 800b2a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a4:	69b9      	ldr	r1, [r7, #24]
 800b2a6:	69fa      	ldr	r2, [r7, #28]
 800b2a8:	e841 2300 	strex	r3, r2, [r1]
 800b2ac:	617b      	str	r3, [r7, #20]
   return(result);
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1e3      	bne.n	800b27c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2202      	movs	r2, #2
 800b2b8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b2ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b2be:	4619      	mov	r1, r3
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f000 f844 	bl	800b34e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b2c6:	e023      	b.n	800b310 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b2c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d009      	beq.n	800b2e8 <HAL_UART_IRQHandler+0x4f4>
 800b2d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d003      	beq.n	800b2e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 f8b5 	bl	800b450 <UART_Transmit_IT>
    return;
 800b2e6:	e014      	b.n	800b312 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b2e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00e      	beq.n	800b312 <HAL_UART_IRQHandler+0x51e>
 800b2f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d008      	beq.n	800b312 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f000 f8f4 	bl	800b4ee <UART_EndTransmit_IT>
    return;
 800b306:	e004      	b.n	800b312 <HAL_UART_IRQHandler+0x51e>
    return;
 800b308:	bf00      	nop
 800b30a:	e002      	b.n	800b312 <HAL_UART_IRQHandler+0x51e>
      return;
 800b30c:	bf00      	nop
 800b30e:	e000      	b.n	800b312 <HAL_UART_IRQHandler+0x51e>
      return;
 800b310:	bf00      	nop
  }
}
 800b312:	37e8      	adds	r7, #232	; 0xe8
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	bc80      	pop	{r7}
 800b328:	4770      	bx	lr

0800b32a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b32a:	b480      	push	{r7}
 800b32c:	b083      	sub	sp, #12
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b332:	bf00      	nop
 800b334:	370c      	adds	r7, #12
 800b336:	46bd      	mov	sp, r7
 800b338:	bc80      	pop	{r7}
 800b33a:	4770      	bx	lr

0800b33c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b344:	bf00      	nop
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	bc80      	pop	{r7}
 800b34c:	4770      	bx	lr

0800b34e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b34e:	b480      	push	{r7}
 800b350:	b083      	sub	sp, #12
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
 800b356:	460b      	mov	r3, r1
 800b358:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b35a:	bf00      	nop
 800b35c:	370c      	adds	r7, #12
 800b35e:	46bd      	mov	sp, r7
 800b360:	bc80      	pop	{r7}
 800b362:	4770      	bx	lr

0800b364 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b364:	b480      	push	{r7}
 800b366:	b095      	sub	sp, #84	; 0x54
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	330c      	adds	r3, #12
 800b372:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b376:	e853 3f00 	ldrex	r3, [r3]
 800b37a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b37c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b382:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	330c      	adds	r3, #12
 800b38a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b38c:	643a      	str	r2, [r7, #64]	; 0x40
 800b38e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b390:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b392:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b394:	e841 2300 	strex	r3, r2, [r1]
 800b398:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d1e5      	bne.n	800b36c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	3314      	adds	r3, #20
 800b3a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a8:	6a3b      	ldr	r3, [r7, #32]
 800b3aa:	e853 3f00 	ldrex	r3, [r3]
 800b3ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	f023 0301 	bic.w	r3, r3, #1
 800b3b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	3314      	adds	r3, #20
 800b3be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3c8:	e841 2300 	strex	r3, r2, [r1]
 800b3cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d1e5      	bne.n	800b3a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d119      	bne.n	800b410 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	330c      	adds	r3, #12
 800b3e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	e853 3f00 	ldrex	r3, [r3]
 800b3ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	f023 0310 	bic.w	r3, r3, #16
 800b3f2:	647b      	str	r3, [r7, #68]	; 0x44
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	330c      	adds	r3, #12
 800b3fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3fc:	61ba      	str	r2, [r7, #24]
 800b3fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b400:	6979      	ldr	r1, [r7, #20]
 800b402:	69ba      	ldr	r2, [r7, #24]
 800b404:	e841 2300 	strex	r3, r2, [r1]
 800b408:	613b      	str	r3, [r7, #16]
   return(result);
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d1e5      	bne.n	800b3dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2220      	movs	r2, #32
 800b414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b41e:	bf00      	nop
 800b420:	3754      	adds	r7, #84	; 0x54
 800b422:	46bd      	mov	sp, r7
 800b424:	bc80      	pop	{r7}
 800b426:	4770      	bx	lr

0800b428 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b434:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2200      	movs	r2, #0
 800b43a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	2200      	movs	r2, #0
 800b440:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f7ff ff7a 	bl	800b33c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b448:	bf00      	nop
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b450:	b480      	push	{r7}
 800b452:	b085      	sub	sp, #20
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b45e:	b2db      	uxtb	r3, r3
 800b460:	2b21      	cmp	r3, #33	; 0x21
 800b462:	d13e      	bne.n	800b4e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b46c:	d114      	bne.n	800b498 <UART_Transmit_IT+0x48>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d110      	bne.n	800b498 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6a1b      	ldr	r3, [r3, #32]
 800b47a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	881b      	ldrh	r3, [r3, #0]
 800b480:	461a      	mov	r2, r3
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b48a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6a1b      	ldr	r3, [r3, #32]
 800b490:	1c9a      	adds	r2, r3, #2
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	621a      	str	r2, [r3, #32]
 800b496:	e008      	b.n	800b4aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6a1b      	ldr	r3, [r3, #32]
 800b49c:	1c59      	adds	r1, r3, #1
 800b49e:	687a      	ldr	r2, [r7, #4]
 800b4a0:	6211      	str	r1, [r2, #32]
 800b4a2:	781a      	ldrb	r2, [r3, #0]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d10f      	bne.n	800b4de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68da      	ldr	r2, [r3, #12]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b4cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	68da      	ldr	r2, [r3, #12]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	e000      	b.n	800b4e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b4e2:	2302      	movs	r3, #2
  }
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3714      	adds	r7, #20
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bc80      	pop	{r7}
 800b4ec:	4770      	bx	lr

0800b4ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b082      	sub	sp, #8
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68da      	ldr	r2, [r3, #12]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b504:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2220      	movs	r2, #32
 800b50a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f7ff ff02 	bl	800b318 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	3708      	adds	r7, #8
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}

0800b51e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b51e:	b580      	push	{r7, lr}
 800b520:	b08c      	sub	sp, #48	; 0x30
 800b522:	af00      	add	r7, sp, #0
 800b524:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	2b22      	cmp	r3, #34	; 0x22
 800b530:	f040 80ae 	bne.w	800b690 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	689b      	ldr	r3, [r3, #8]
 800b538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b53c:	d117      	bne.n	800b56e <UART_Receive_IT+0x50>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	691b      	ldr	r3, [r3, #16]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d113      	bne.n	800b56e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b546:	2300      	movs	r3, #0
 800b548:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b54e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	b29b      	uxth	r3, r3
 800b558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b55c:	b29a      	uxth	r2, r3
 800b55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b560:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b566:	1c9a      	adds	r2, r3, #2
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	629a      	str	r2, [r3, #40]	; 0x28
 800b56c:	e026      	b.n	800b5bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b572:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b574:	2300      	movs	r3, #0
 800b576:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	689b      	ldr	r3, [r3, #8]
 800b57c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b580:	d007      	beq.n	800b592 <UART_Receive_IT+0x74>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d10a      	bne.n	800b5a0 <UART_Receive_IT+0x82>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	691b      	ldr	r3, [r3, #16]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d106      	bne.n	800b5a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b59c:	701a      	strb	r2, [r3, #0]
 800b59e:	e008      	b.n	800b5b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5ac:	b2da      	uxtb	r2, r3
 800b5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5b6:	1c5a      	adds	r2, r3, #1
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	3b01      	subs	r3, #1
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	687a      	ldr	r2, [r7, #4]
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d15d      	bne.n	800b68c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	68da      	ldr	r2, [r3, #12]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f022 0220 	bic.w	r2, r2, #32
 800b5de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	68da      	ldr	r2, [r3, #12]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	695a      	ldr	r2, [r3, #20]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f022 0201 	bic.w	r2, r2, #1
 800b5fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2220      	movs	r2, #32
 800b604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b612:	2b01      	cmp	r3, #1
 800b614:	d135      	bne.n	800b682 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	330c      	adds	r3, #12
 800b622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	e853 3f00 	ldrex	r3, [r3]
 800b62a:	613b      	str	r3, [r7, #16]
   return(result);
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	f023 0310 	bic.w	r3, r3, #16
 800b632:	627b      	str	r3, [r7, #36]	; 0x24
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	330c      	adds	r3, #12
 800b63a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b63c:	623a      	str	r2, [r7, #32]
 800b63e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b640:	69f9      	ldr	r1, [r7, #28]
 800b642:	6a3a      	ldr	r2, [r7, #32]
 800b644:	e841 2300 	strex	r3, r2, [r1]
 800b648:	61bb      	str	r3, [r7, #24]
   return(result);
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1e5      	bne.n	800b61c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f003 0310 	and.w	r3, r3, #16
 800b65a:	2b10      	cmp	r3, #16
 800b65c:	d10a      	bne.n	800b674 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b65e:	2300      	movs	r3, #0
 800b660:	60fb      	str	r3, [r7, #12]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	60fb      	str	r3, [r7, #12]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	60fb      	str	r3, [r7, #12]
 800b672:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b678:	4619      	mov	r1, r3
 800b67a:	6878      	ldr	r0, [r7, #4]
 800b67c:	f7ff fe67 	bl	800b34e <HAL_UARTEx_RxEventCallback>
 800b680:	e002      	b.n	800b688 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f7ff fe51 	bl	800b32a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b688:	2300      	movs	r3, #0
 800b68a:	e002      	b.n	800b692 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b68c:	2300      	movs	r3, #0
 800b68e:	e000      	b.n	800b692 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b690:	2302      	movs	r3, #2
  }
}
 800b692:	4618      	mov	r0, r3
 800b694:	3730      	adds	r7, #48	; 0x30
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
	...

0800b69c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	691b      	ldr	r3, [r3, #16]
 800b6aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	68da      	ldr	r2, [r3, #12]
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	430a      	orrs	r2, r1
 800b6b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	689a      	ldr	r2, [r3, #8]
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	691b      	ldr	r3, [r3, #16]
 800b6c2:	431a      	orrs	r2, r3
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	695b      	ldr	r3, [r3, #20]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b6d6:	f023 030c 	bic.w	r3, r3, #12
 800b6da:	687a      	ldr	r2, [r7, #4]
 800b6dc:	6812      	ldr	r2, [r2, #0]
 800b6de:	68b9      	ldr	r1, [r7, #8]
 800b6e0:	430b      	orrs	r3, r1
 800b6e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	695b      	ldr	r3, [r3, #20]
 800b6ea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	699a      	ldr	r2, [r3, #24]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	430a      	orrs	r2, r1
 800b6f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	4a2c      	ldr	r2, [pc, #176]	; (800b7b0 <UART_SetConfig+0x114>)
 800b700:	4293      	cmp	r3, r2
 800b702:	d103      	bne.n	800b70c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b704:	f7fe fe8c 	bl	800a420 <HAL_RCC_GetPCLK2Freq>
 800b708:	60f8      	str	r0, [r7, #12]
 800b70a:	e002      	b.n	800b712 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b70c:	f7fe fe74 	bl	800a3f8 <HAL_RCC_GetPCLK1Freq>
 800b710:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b712:	68fa      	ldr	r2, [r7, #12]
 800b714:	4613      	mov	r3, r2
 800b716:	009b      	lsls	r3, r3, #2
 800b718:	4413      	add	r3, r2
 800b71a:	009a      	lsls	r2, r3, #2
 800b71c:	441a      	add	r2, r3
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	fbb2 f3f3 	udiv	r3, r2, r3
 800b728:	4a22      	ldr	r2, [pc, #136]	; (800b7b4 <UART_SetConfig+0x118>)
 800b72a:	fba2 2303 	umull	r2, r3, r2, r3
 800b72e:	095b      	lsrs	r3, r3, #5
 800b730:	0119      	lsls	r1, r3, #4
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	4613      	mov	r3, r2
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	4413      	add	r3, r2
 800b73a:	009a      	lsls	r2, r3, #2
 800b73c:	441a      	add	r2, r3
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	685b      	ldr	r3, [r3, #4]
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	fbb2 f2f3 	udiv	r2, r2, r3
 800b748:	4b1a      	ldr	r3, [pc, #104]	; (800b7b4 <UART_SetConfig+0x118>)
 800b74a:	fba3 0302 	umull	r0, r3, r3, r2
 800b74e:	095b      	lsrs	r3, r3, #5
 800b750:	2064      	movs	r0, #100	; 0x64
 800b752:	fb00 f303 	mul.w	r3, r0, r3
 800b756:	1ad3      	subs	r3, r2, r3
 800b758:	011b      	lsls	r3, r3, #4
 800b75a:	3332      	adds	r3, #50	; 0x32
 800b75c:	4a15      	ldr	r2, [pc, #84]	; (800b7b4 <UART_SetConfig+0x118>)
 800b75e:	fba2 2303 	umull	r2, r3, r2, r3
 800b762:	095b      	lsrs	r3, r3, #5
 800b764:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b768:	4419      	add	r1, r3
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	4613      	mov	r3, r2
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	4413      	add	r3, r2
 800b772:	009a      	lsls	r2, r3, #2
 800b774:	441a      	add	r2, r3
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	fbb2 f2f3 	udiv	r2, r2, r3
 800b780:	4b0c      	ldr	r3, [pc, #48]	; (800b7b4 <UART_SetConfig+0x118>)
 800b782:	fba3 0302 	umull	r0, r3, r3, r2
 800b786:	095b      	lsrs	r3, r3, #5
 800b788:	2064      	movs	r0, #100	; 0x64
 800b78a:	fb00 f303 	mul.w	r3, r0, r3
 800b78e:	1ad3      	subs	r3, r2, r3
 800b790:	011b      	lsls	r3, r3, #4
 800b792:	3332      	adds	r3, #50	; 0x32
 800b794:	4a07      	ldr	r2, [pc, #28]	; (800b7b4 <UART_SetConfig+0x118>)
 800b796:	fba2 2303 	umull	r2, r3, r2, r3
 800b79a:	095b      	lsrs	r3, r3, #5
 800b79c:	f003 020f 	and.w	r2, r3, #15
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	440a      	add	r2, r1
 800b7a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b7a8:	bf00      	nop
 800b7aa:	3710      	adds	r7, #16
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	40013800 	.word	0x40013800
 800b7b4:	51eb851f 	.word	0x51eb851f

0800b7b8 <__itoa>:
 800b7b8:	1e93      	subs	r3, r2, #2
 800b7ba:	2b22      	cmp	r3, #34	; 0x22
 800b7bc:	b510      	push	{r4, lr}
 800b7be:	460c      	mov	r4, r1
 800b7c0:	d904      	bls.n	800b7cc <__itoa+0x14>
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	461c      	mov	r4, r3
 800b7c6:	700b      	strb	r3, [r1, #0]
 800b7c8:	4620      	mov	r0, r4
 800b7ca:	bd10      	pop	{r4, pc}
 800b7cc:	2a0a      	cmp	r2, #10
 800b7ce:	d109      	bne.n	800b7e4 <__itoa+0x2c>
 800b7d0:	2800      	cmp	r0, #0
 800b7d2:	da07      	bge.n	800b7e4 <__itoa+0x2c>
 800b7d4:	232d      	movs	r3, #45	; 0x2d
 800b7d6:	700b      	strb	r3, [r1, #0]
 800b7d8:	2101      	movs	r1, #1
 800b7da:	4240      	negs	r0, r0
 800b7dc:	4421      	add	r1, r4
 800b7de:	f000 f8b9 	bl	800b954 <__utoa>
 800b7e2:	e7f1      	b.n	800b7c8 <__itoa+0x10>
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	e7f9      	b.n	800b7dc <__itoa+0x24>

0800b7e8 <itoa>:
 800b7e8:	f7ff bfe6 	b.w	800b7b8 <__itoa>

0800b7ec <malloc>:
 800b7ec:	4b02      	ldr	r3, [pc, #8]	; (800b7f8 <malloc+0xc>)
 800b7ee:	4601      	mov	r1, r0
 800b7f0:	6818      	ldr	r0, [r3, #0]
 800b7f2:	f000 b823 	b.w	800b83c <_malloc_r>
 800b7f6:	bf00      	nop
 800b7f8:	2000099c 	.word	0x2000099c

0800b7fc <sbrk_aligned>:
 800b7fc:	b570      	push	{r4, r5, r6, lr}
 800b7fe:	4e0e      	ldr	r6, [pc, #56]	; (800b838 <sbrk_aligned+0x3c>)
 800b800:	460c      	mov	r4, r1
 800b802:	6831      	ldr	r1, [r6, #0]
 800b804:	4605      	mov	r5, r0
 800b806:	b911      	cbnz	r1, 800b80e <sbrk_aligned+0x12>
 800b808:	f000 f90e 	bl	800ba28 <_sbrk_r>
 800b80c:	6030      	str	r0, [r6, #0]
 800b80e:	4621      	mov	r1, r4
 800b810:	4628      	mov	r0, r5
 800b812:	f000 f909 	bl	800ba28 <_sbrk_r>
 800b816:	1c43      	adds	r3, r0, #1
 800b818:	d00a      	beq.n	800b830 <sbrk_aligned+0x34>
 800b81a:	1cc4      	adds	r4, r0, #3
 800b81c:	f024 0403 	bic.w	r4, r4, #3
 800b820:	42a0      	cmp	r0, r4
 800b822:	d007      	beq.n	800b834 <sbrk_aligned+0x38>
 800b824:	1a21      	subs	r1, r4, r0
 800b826:	4628      	mov	r0, r5
 800b828:	f000 f8fe 	bl	800ba28 <_sbrk_r>
 800b82c:	3001      	adds	r0, #1
 800b82e:	d101      	bne.n	800b834 <sbrk_aligned+0x38>
 800b830:	f04f 34ff 	mov.w	r4, #4294967295
 800b834:	4620      	mov	r0, r4
 800b836:	bd70      	pop	{r4, r5, r6, pc}
 800b838:	20000dd0 	.word	0x20000dd0

0800b83c <_malloc_r>:
 800b83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b840:	1ccd      	adds	r5, r1, #3
 800b842:	f025 0503 	bic.w	r5, r5, #3
 800b846:	3508      	adds	r5, #8
 800b848:	2d0c      	cmp	r5, #12
 800b84a:	bf38      	it	cc
 800b84c:	250c      	movcc	r5, #12
 800b84e:	2d00      	cmp	r5, #0
 800b850:	4607      	mov	r7, r0
 800b852:	db01      	blt.n	800b858 <_malloc_r+0x1c>
 800b854:	42a9      	cmp	r1, r5
 800b856:	d905      	bls.n	800b864 <_malloc_r+0x28>
 800b858:	230c      	movs	r3, #12
 800b85a:	2600      	movs	r6, #0
 800b85c:	603b      	str	r3, [r7, #0]
 800b85e:	4630      	mov	r0, r6
 800b860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b864:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b938 <_malloc_r+0xfc>
 800b868:	f000 f868 	bl	800b93c <__malloc_lock>
 800b86c:	f8d8 3000 	ldr.w	r3, [r8]
 800b870:	461c      	mov	r4, r3
 800b872:	bb5c      	cbnz	r4, 800b8cc <_malloc_r+0x90>
 800b874:	4629      	mov	r1, r5
 800b876:	4638      	mov	r0, r7
 800b878:	f7ff ffc0 	bl	800b7fc <sbrk_aligned>
 800b87c:	1c43      	adds	r3, r0, #1
 800b87e:	4604      	mov	r4, r0
 800b880:	d155      	bne.n	800b92e <_malloc_r+0xf2>
 800b882:	f8d8 4000 	ldr.w	r4, [r8]
 800b886:	4626      	mov	r6, r4
 800b888:	2e00      	cmp	r6, #0
 800b88a:	d145      	bne.n	800b918 <_malloc_r+0xdc>
 800b88c:	2c00      	cmp	r4, #0
 800b88e:	d048      	beq.n	800b922 <_malloc_r+0xe6>
 800b890:	6823      	ldr	r3, [r4, #0]
 800b892:	4631      	mov	r1, r6
 800b894:	4638      	mov	r0, r7
 800b896:	eb04 0903 	add.w	r9, r4, r3
 800b89a:	f000 f8c5 	bl	800ba28 <_sbrk_r>
 800b89e:	4581      	cmp	r9, r0
 800b8a0:	d13f      	bne.n	800b922 <_malloc_r+0xe6>
 800b8a2:	6821      	ldr	r1, [r4, #0]
 800b8a4:	4638      	mov	r0, r7
 800b8a6:	1a6d      	subs	r5, r5, r1
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	f7ff ffa7 	bl	800b7fc <sbrk_aligned>
 800b8ae:	3001      	adds	r0, #1
 800b8b0:	d037      	beq.n	800b922 <_malloc_r+0xe6>
 800b8b2:	6823      	ldr	r3, [r4, #0]
 800b8b4:	442b      	add	r3, r5
 800b8b6:	6023      	str	r3, [r4, #0]
 800b8b8:	f8d8 3000 	ldr.w	r3, [r8]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d038      	beq.n	800b932 <_malloc_r+0xf6>
 800b8c0:	685a      	ldr	r2, [r3, #4]
 800b8c2:	42a2      	cmp	r2, r4
 800b8c4:	d12b      	bne.n	800b91e <_malloc_r+0xe2>
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	605a      	str	r2, [r3, #4]
 800b8ca:	e00f      	b.n	800b8ec <_malloc_r+0xb0>
 800b8cc:	6822      	ldr	r2, [r4, #0]
 800b8ce:	1b52      	subs	r2, r2, r5
 800b8d0:	d41f      	bmi.n	800b912 <_malloc_r+0xd6>
 800b8d2:	2a0b      	cmp	r2, #11
 800b8d4:	d917      	bls.n	800b906 <_malloc_r+0xca>
 800b8d6:	1961      	adds	r1, r4, r5
 800b8d8:	42a3      	cmp	r3, r4
 800b8da:	6025      	str	r5, [r4, #0]
 800b8dc:	bf18      	it	ne
 800b8de:	6059      	strne	r1, [r3, #4]
 800b8e0:	6863      	ldr	r3, [r4, #4]
 800b8e2:	bf08      	it	eq
 800b8e4:	f8c8 1000 	streq.w	r1, [r8]
 800b8e8:	5162      	str	r2, [r4, r5]
 800b8ea:	604b      	str	r3, [r1, #4]
 800b8ec:	4638      	mov	r0, r7
 800b8ee:	f104 060b 	add.w	r6, r4, #11
 800b8f2:	f000 f829 	bl	800b948 <__malloc_unlock>
 800b8f6:	f026 0607 	bic.w	r6, r6, #7
 800b8fa:	1d23      	adds	r3, r4, #4
 800b8fc:	1af2      	subs	r2, r6, r3
 800b8fe:	d0ae      	beq.n	800b85e <_malloc_r+0x22>
 800b900:	1b9b      	subs	r3, r3, r6
 800b902:	50a3      	str	r3, [r4, r2]
 800b904:	e7ab      	b.n	800b85e <_malloc_r+0x22>
 800b906:	42a3      	cmp	r3, r4
 800b908:	6862      	ldr	r2, [r4, #4]
 800b90a:	d1dd      	bne.n	800b8c8 <_malloc_r+0x8c>
 800b90c:	f8c8 2000 	str.w	r2, [r8]
 800b910:	e7ec      	b.n	800b8ec <_malloc_r+0xb0>
 800b912:	4623      	mov	r3, r4
 800b914:	6864      	ldr	r4, [r4, #4]
 800b916:	e7ac      	b.n	800b872 <_malloc_r+0x36>
 800b918:	4634      	mov	r4, r6
 800b91a:	6876      	ldr	r6, [r6, #4]
 800b91c:	e7b4      	b.n	800b888 <_malloc_r+0x4c>
 800b91e:	4613      	mov	r3, r2
 800b920:	e7cc      	b.n	800b8bc <_malloc_r+0x80>
 800b922:	230c      	movs	r3, #12
 800b924:	4638      	mov	r0, r7
 800b926:	603b      	str	r3, [r7, #0]
 800b928:	f000 f80e 	bl	800b948 <__malloc_unlock>
 800b92c:	e797      	b.n	800b85e <_malloc_r+0x22>
 800b92e:	6025      	str	r5, [r4, #0]
 800b930:	e7dc      	b.n	800b8ec <_malloc_r+0xb0>
 800b932:	605b      	str	r3, [r3, #4]
 800b934:	deff      	udf	#255	; 0xff
 800b936:	bf00      	nop
 800b938:	20000dcc 	.word	0x20000dcc

0800b93c <__malloc_lock>:
 800b93c:	4801      	ldr	r0, [pc, #4]	; (800b944 <__malloc_lock+0x8>)
 800b93e:	f000 b8ad 	b.w	800ba9c <__retarget_lock_acquire_recursive>
 800b942:	bf00      	nop
 800b944:	20000f10 	.word	0x20000f10

0800b948 <__malloc_unlock>:
 800b948:	4801      	ldr	r0, [pc, #4]	; (800b950 <__malloc_unlock+0x8>)
 800b94a:	f000 b8a8 	b.w	800ba9e <__retarget_lock_release_recursive>
 800b94e:	bf00      	nop
 800b950:	20000f10 	.word	0x20000f10

0800b954 <__utoa>:
 800b954:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b956:	b08b      	sub	sp, #44	; 0x2c
 800b958:	4605      	mov	r5, r0
 800b95a:	460b      	mov	r3, r1
 800b95c:	466e      	mov	r6, sp
 800b95e:	4c1d      	ldr	r4, [pc, #116]	; (800b9d4 <__utoa+0x80>)
 800b960:	f104 0c20 	add.w	ip, r4, #32
 800b964:	4637      	mov	r7, r6
 800b966:	6820      	ldr	r0, [r4, #0]
 800b968:	6861      	ldr	r1, [r4, #4]
 800b96a:	3408      	adds	r4, #8
 800b96c:	c703      	stmia	r7!, {r0, r1}
 800b96e:	4564      	cmp	r4, ip
 800b970:	463e      	mov	r6, r7
 800b972:	d1f7      	bne.n	800b964 <__utoa+0x10>
 800b974:	7921      	ldrb	r1, [r4, #4]
 800b976:	6820      	ldr	r0, [r4, #0]
 800b978:	7139      	strb	r1, [r7, #4]
 800b97a:	1e91      	subs	r1, r2, #2
 800b97c:	2922      	cmp	r1, #34	; 0x22
 800b97e:	6038      	str	r0, [r7, #0]
 800b980:	f04f 0100 	mov.w	r1, #0
 800b984:	d904      	bls.n	800b990 <__utoa+0x3c>
 800b986:	7019      	strb	r1, [r3, #0]
 800b988:	460b      	mov	r3, r1
 800b98a:	4618      	mov	r0, r3
 800b98c:	b00b      	add	sp, #44	; 0x2c
 800b98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b990:	1e58      	subs	r0, r3, #1
 800b992:	4684      	mov	ip, r0
 800b994:	fbb5 f7f2 	udiv	r7, r5, r2
 800b998:	fb02 5617 	mls	r6, r2, r7, r5
 800b99c:	3628      	adds	r6, #40	; 0x28
 800b99e:	446e      	add	r6, sp
 800b9a0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b9a4:	460c      	mov	r4, r1
 800b9a6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b9aa:	462e      	mov	r6, r5
 800b9ac:	42b2      	cmp	r2, r6
 800b9ae:	463d      	mov	r5, r7
 800b9b0:	f101 0101 	add.w	r1, r1, #1
 800b9b4:	d9ee      	bls.n	800b994 <__utoa+0x40>
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	545a      	strb	r2, [r3, r1]
 800b9ba:	1919      	adds	r1, r3, r4
 800b9bc:	1aa5      	subs	r5, r4, r2
 800b9be:	42aa      	cmp	r2, r5
 800b9c0:	dae3      	bge.n	800b98a <__utoa+0x36>
 800b9c2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b9c6:	780e      	ldrb	r6, [r1, #0]
 800b9c8:	3201      	adds	r2, #1
 800b9ca:	7006      	strb	r6, [r0, #0]
 800b9cc:	f801 5901 	strb.w	r5, [r1], #-1
 800b9d0:	e7f4      	b.n	800b9bc <__utoa+0x68>
 800b9d2:	bf00      	nop
 800b9d4:	0800cfaa 	.word	0x0800cfaa

0800b9d8 <siprintf>:
 800b9d8:	b40e      	push	{r1, r2, r3}
 800b9da:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b9de:	b500      	push	{lr}
 800b9e0:	b09c      	sub	sp, #112	; 0x70
 800b9e2:	ab1d      	add	r3, sp, #116	; 0x74
 800b9e4:	9002      	str	r0, [sp, #8]
 800b9e6:	9006      	str	r0, [sp, #24]
 800b9e8:	9107      	str	r1, [sp, #28]
 800b9ea:	9104      	str	r1, [sp, #16]
 800b9ec:	4808      	ldr	r0, [pc, #32]	; (800ba10 <siprintf+0x38>)
 800b9ee:	4909      	ldr	r1, [pc, #36]	; (800ba14 <siprintf+0x3c>)
 800b9f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9f4:	9105      	str	r1, [sp, #20]
 800b9f6:	6800      	ldr	r0, [r0, #0]
 800b9f8:	a902      	add	r1, sp, #8
 800b9fa:	9301      	str	r3, [sp, #4]
 800b9fc:	f000 f8fa 	bl	800bbf4 <_svfiprintf_r>
 800ba00:	2200      	movs	r2, #0
 800ba02:	9b02      	ldr	r3, [sp, #8]
 800ba04:	701a      	strb	r2, [r3, #0]
 800ba06:	b01c      	add	sp, #112	; 0x70
 800ba08:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba0c:	b003      	add	sp, #12
 800ba0e:	4770      	bx	lr
 800ba10:	2000099c 	.word	0x2000099c
 800ba14:	ffff0208 	.word	0xffff0208

0800ba18 <memset>:
 800ba18:	4603      	mov	r3, r0
 800ba1a:	4402      	add	r2, r0
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d100      	bne.n	800ba22 <memset+0xa>
 800ba20:	4770      	bx	lr
 800ba22:	f803 1b01 	strb.w	r1, [r3], #1
 800ba26:	e7f9      	b.n	800ba1c <memset+0x4>

0800ba28 <_sbrk_r>:
 800ba28:	b538      	push	{r3, r4, r5, lr}
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	4d05      	ldr	r5, [pc, #20]	; (800ba44 <_sbrk_r+0x1c>)
 800ba2e:	4604      	mov	r4, r0
 800ba30:	4608      	mov	r0, r1
 800ba32:	602b      	str	r3, [r5, #0]
 800ba34:	f7fc f818 	bl	8007a68 <_sbrk>
 800ba38:	1c43      	adds	r3, r0, #1
 800ba3a:	d102      	bne.n	800ba42 <_sbrk_r+0x1a>
 800ba3c:	682b      	ldr	r3, [r5, #0]
 800ba3e:	b103      	cbz	r3, 800ba42 <_sbrk_r+0x1a>
 800ba40:	6023      	str	r3, [r4, #0]
 800ba42:	bd38      	pop	{r3, r4, r5, pc}
 800ba44:	20000f0c 	.word	0x20000f0c

0800ba48 <__errno>:
 800ba48:	4b01      	ldr	r3, [pc, #4]	; (800ba50 <__errno+0x8>)
 800ba4a:	6818      	ldr	r0, [r3, #0]
 800ba4c:	4770      	bx	lr
 800ba4e:	bf00      	nop
 800ba50:	2000099c 	.word	0x2000099c

0800ba54 <__libc_init_array>:
 800ba54:	b570      	push	{r4, r5, r6, lr}
 800ba56:	2600      	movs	r6, #0
 800ba58:	4d0c      	ldr	r5, [pc, #48]	; (800ba8c <__libc_init_array+0x38>)
 800ba5a:	4c0d      	ldr	r4, [pc, #52]	; (800ba90 <__libc_init_array+0x3c>)
 800ba5c:	1b64      	subs	r4, r4, r5
 800ba5e:	10a4      	asrs	r4, r4, #2
 800ba60:	42a6      	cmp	r6, r4
 800ba62:	d109      	bne.n	800ba78 <__libc_init_array+0x24>
 800ba64:	f000 fbc6 	bl	800c1f4 <_init>
 800ba68:	2600      	movs	r6, #0
 800ba6a:	4d0a      	ldr	r5, [pc, #40]	; (800ba94 <__libc_init_array+0x40>)
 800ba6c:	4c0a      	ldr	r4, [pc, #40]	; (800ba98 <__libc_init_array+0x44>)
 800ba6e:	1b64      	subs	r4, r4, r5
 800ba70:	10a4      	asrs	r4, r4, #2
 800ba72:	42a6      	cmp	r6, r4
 800ba74:	d105      	bne.n	800ba82 <__libc_init_array+0x2e>
 800ba76:	bd70      	pop	{r4, r5, r6, pc}
 800ba78:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba7c:	4798      	blx	r3
 800ba7e:	3601      	adds	r6, #1
 800ba80:	e7ee      	b.n	800ba60 <__libc_init_array+0xc>
 800ba82:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba86:	4798      	blx	r3
 800ba88:	3601      	adds	r6, #1
 800ba8a:	e7f2      	b.n	800ba72 <__libc_init_array+0x1e>
 800ba8c:	0800d004 	.word	0x0800d004
 800ba90:	0800d004 	.word	0x0800d004
 800ba94:	0800d004 	.word	0x0800d004
 800ba98:	0800d008 	.word	0x0800d008

0800ba9c <__retarget_lock_acquire_recursive>:
 800ba9c:	4770      	bx	lr

0800ba9e <__retarget_lock_release_recursive>:
 800ba9e:	4770      	bx	lr

0800baa0 <strcpy>:
 800baa0:	4603      	mov	r3, r0
 800baa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baa6:	f803 2b01 	strb.w	r2, [r3], #1
 800baaa:	2a00      	cmp	r2, #0
 800baac:	d1f9      	bne.n	800baa2 <strcpy+0x2>
 800baae:	4770      	bx	lr

0800bab0 <_free_r>:
 800bab0:	b538      	push	{r3, r4, r5, lr}
 800bab2:	4605      	mov	r5, r0
 800bab4:	2900      	cmp	r1, #0
 800bab6:	d040      	beq.n	800bb3a <_free_r+0x8a>
 800bab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800babc:	1f0c      	subs	r4, r1, #4
 800babe:	2b00      	cmp	r3, #0
 800bac0:	bfb8      	it	lt
 800bac2:	18e4      	addlt	r4, r4, r3
 800bac4:	f7ff ff3a 	bl	800b93c <__malloc_lock>
 800bac8:	4a1c      	ldr	r2, [pc, #112]	; (800bb3c <_free_r+0x8c>)
 800baca:	6813      	ldr	r3, [r2, #0]
 800bacc:	b933      	cbnz	r3, 800badc <_free_r+0x2c>
 800bace:	6063      	str	r3, [r4, #4]
 800bad0:	6014      	str	r4, [r2, #0]
 800bad2:	4628      	mov	r0, r5
 800bad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bad8:	f7ff bf36 	b.w	800b948 <__malloc_unlock>
 800badc:	42a3      	cmp	r3, r4
 800bade:	d908      	bls.n	800baf2 <_free_r+0x42>
 800bae0:	6820      	ldr	r0, [r4, #0]
 800bae2:	1821      	adds	r1, r4, r0
 800bae4:	428b      	cmp	r3, r1
 800bae6:	bf01      	itttt	eq
 800bae8:	6819      	ldreq	r1, [r3, #0]
 800baea:	685b      	ldreq	r3, [r3, #4]
 800baec:	1809      	addeq	r1, r1, r0
 800baee:	6021      	streq	r1, [r4, #0]
 800baf0:	e7ed      	b.n	800bace <_free_r+0x1e>
 800baf2:	461a      	mov	r2, r3
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	b10b      	cbz	r3, 800bafc <_free_r+0x4c>
 800baf8:	42a3      	cmp	r3, r4
 800bafa:	d9fa      	bls.n	800baf2 <_free_r+0x42>
 800bafc:	6811      	ldr	r1, [r2, #0]
 800bafe:	1850      	adds	r0, r2, r1
 800bb00:	42a0      	cmp	r0, r4
 800bb02:	d10b      	bne.n	800bb1c <_free_r+0x6c>
 800bb04:	6820      	ldr	r0, [r4, #0]
 800bb06:	4401      	add	r1, r0
 800bb08:	1850      	adds	r0, r2, r1
 800bb0a:	4283      	cmp	r3, r0
 800bb0c:	6011      	str	r1, [r2, #0]
 800bb0e:	d1e0      	bne.n	800bad2 <_free_r+0x22>
 800bb10:	6818      	ldr	r0, [r3, #0]
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	4408      	add	r0, r1
 800bb16:	6010      	str	r0, [r2, #0]
 800bb18:	6053      	str	r3, [r2, #4]
 800bb1a:	e7da      	b.n	800bad2 <_free_r+0x22>
 800bb1c:	d902      	bls.n	800bb24 <_free_r+0x74>
 800bb1e:	230c      	movs	r3, #12
 800bb20:	602b      	str	r3, [r5, #0]
 800bb22:	e7d6      	b.n	800bad2 <_free_r+0x22>
 800bb24:	6820      	ldr	r0, [r4, #0]
 800bb26:	1821      	adds	r1, r4, r0
 800bb28:	428b      	cmp	r3, r1
 800bb2a:	bf01      	itttt	eq
 800bb2c:	6819      	ldreq	r1, [r3, #0]
 800bb2e:	685b      	ldreq	r3, [r3, #4]
 800bb30:	1809      	addeq	r1, r1, r0
 800bb32:	6021      	streq	r1, [r4, #0]
 800bb34:	6063      	str	r3, [r4, #4]
 800bb36:	6054      	str	r4, [r2, #4]
 800bb38:	e7cb      	b.n	800bad2 <_free_r+0x22>
 800bb3a:	bd38      	pop	{r3, r4, r5, pc}
 800bb3c:	20000dcc 	.word	0x20000dcc

0800bb40 <__ssputs_r>:
 800bb40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb44:	461f      	mov	r7, r3
 800bb46:	688e      	ldr	r6, [r1, #8]
 800bb48:	4682      	mov	sl, r0
 800bb4a:	42be      	cmp	r6, r7
 800bb4c:	460c      	mov	r4, r1
 800bb4e:	4690      	mov	r8, r2
 800bb50:	680b      	ldr	r3, [r1, #0]
 800bb52:	d82c      	bhi.n	800bbae <__ssputs_r+0x6e>
 800bb54:	898a      	ldrh	r2, [r1, #12]
 800bb56:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb5a:	d026      	beq.n	800bbaa <__ssputs_r+0x6a>
 800bb5c:	6965      	ldr	r5, [r4, #20]
 800bb5e:	6909      	ldr	r1, [r1, #16]
 800bb60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb64:	eba3 0901 	sub.w	r9, r3, r1
 800bb68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb6c:	1c7b      	adds	r3, r7, #1
 800bb6e:	444b      	add	r3, r9
 800bb70:	106d      	asrs	r5, r5, #1
 800bb72:	429d      	cmp	r5, r3
 800bb74:	bf38      	it	cc
 800bb76:	461d      	movcc	r5, r3
 800bb78:	0553      	lsls	r3, r2, #21
 800bb7a:	d527      	bpl.n	800bbcc <__ssputs_r+0x8c>
 800bb7c:	4629      	mov	r1, r5
 800bb7e:	f7ff fe5d 	bl	800b83c <_malloc_r>
 800bb82:	4606      	mov	r6, r0
 800bb84:	b360      	cbz	r0, 800bbe0 <__ssputs_r+0xa0>
 800bb86:	464a      	mov	r2, r9
 800bb88:	6921      	ldr	r1, [r4, #16]
 800bb8a:	f000 faed 	bl	800c168 <memcpy>
 800bb8e:	89a3      	ldrh	r3, [r4, #12]
 800bb90:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb98:	81a3      	strh	r3, [r4, #12]
 800bb9a:	6126      	str	r6, [r4, #16]
 800bb9c:	444e      	add	r6, r9
 800bb9e:	6026      	str	r6, [r4, #0]
 800bba0:	463e      	mov	r6, r7
 800bba2:	6165      	str	r5, [r4, #20]
 800bba4:	eba5 0509 	sub.w	r5, r5, r9
 800bba8:	60a5      	str	r5, [r4, #8]
 800bbaa:	42be      	cmp	r6, r7
 800bbac:	d900      	bls.n	800bbb0 <__ssputs_r+0x70>
 800bbae:	463e      	mov	r6, r7
 800bbb0:	4632      	mov	r2, r6
 800bbb2:	4641      	mov	r1, r8
 800bbb4:	6820      	ldr	r0, [r4, #0]
 800bbb6:	f000 faaf 	bl	800c118 <memmove>
 800bbba:	2000      	movs	r0, #0
 800bbbc:	68a3      	ldr	r3, [r4, #8]
 800bbbe:	1b9b      	subs	r3, r3, r6
 800bbc0:	60a3      	str	r3, [r4, #8]
 800bbc2:	6823      	ldr	r3, [r4, #0]
 800bbc4:	4433      	add	r3, r6
 800bbc6:	6023      	str	r3, [r4, #0]
 800bbc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbcc:	462a      	mov	r2, r5
 800bbce:	f000 fad9 	bl	800c184 <_realloc_r>
 800bbd2:	4606      	mov	r6, r0
 800bbd4:	2800      	cmp	r0, #0
 800bbd6:	d1e0      	bne.n	800bb9a <__ssputs_r+0x5a>
 800bbd8:	4650      	mov	r0, sl
 800bbda:	6921      	ldr	r1, [r4, #16]
 800bbdc:	f7ff ff68 	bl	800bab0 <_free_r>
 800bbe0:	230c      	movs	r3, #12
 800bbe2:	f8ca 3000 	str.w	r3, [sl]
 800bbe6:	89a3      	ldrh	r3, [r4, #12]
 800bbe8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbf0:	81a3      	strh	r3, [r4, #12]
 800bbf2:	e7e9      	b.n	800bbc8 <__ssputs_r+0x88>

0800bbf4 <_svfiprintf_r>:
 800bbf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf8:	4698      	mov	r8, r3
 800bbfa:	898b      	ldrh	r3, [r1, #12]
 800bbfc:	4607      	mov	r7, r0
 800bbfe:	061b      	lsls	r3, r3, #24
 800bc00:	460d      	mov	r5, r1
 800bc02:	4614      	mov	r4, r2
 800bc04:	b09d      	sub	sp, #116	; 0x74
 800bc06:	d50e      	bpl.n	800bc26 <_svfiprintf_r+0x32>
 800bc08:	690b      	ldr	r3, [r1, #16]
 800bc0a:	b963      	cbnz	r3, 800bc26 <_svfiprintf_r+0x32>
 800bc0c:	2140      	movs	r1, #64	; 0x40
 800bc0e:	f7ff fe15 	bl	800b83c <_malloc_r>
 800bc12:	6028      	str	r0, [r5, #0]
 800bc14:	6128      	str	r0, [r5, #16]
 800bc16:	b920      	cbnz	r0, 800bc22 <_svfiprintf_r+0x2e>
 800bc18:	230c      	movs	r3, #12
 800bc1a:	603b      	str	r3, [r7, #0]
 800bc1c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc20:	e0d0      	b.n	800bdc4 <_svfiprintf_r+0x1d0>
 800bc22:	2340      	movs	r3, #64	; 0x40
 800bc24:	616b      	str	r3, [r5, #20]
 800bc26:	2300      	movs	r3, #0
 800bc28:	9309      	str	r3, [sp, #36]	; 0x24
 800bc2a:	2320      	movs	r3, #32
 800bc2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc30:	2330      	movs	r3, #48	; 0x30
 800bc32:	f04f 0901 	mov.w	r9, #1
 800bc36:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc3a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800bddc <_svfiprintf_r+0x1e8>
 800bc3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc42:	4623      	mov	r3, r4
 800bc44:	469a      	mov	sl, r3
 800bc46:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc4a:	b10a      	cbz	r2, 800bc50 <_svfiprintf_r+0x5c>
 800bc4c:	2a25      	cmp	r2, #37	; 0x25
 800bc4e:	d1f9      	bne.n	800bc44 <_svfiprintf_r+0x50>
 800bc50:	ebba 0b04 	subs.w	fp, sl, r4
 800bc54:	d00b      	beq.n	800bc6e <_svfiprintf_r+0x7a>
 800bc56:	465b      	mov	r3, fp
 800bc58:	4622      	mov	r2, r4
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	4638      	mov	r0, r7
 800bc5e:	f7ff ff6f 	bl	800bb40 <__ssputs_r>
 800bc62:	3001      	adds	r0, #1
 800bc64:	f000 80a9 	beq.w	800bdba <_svfiprintf_r+0x1c6>
 800bc68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc6a:	445a      	add	r2, fp
 800bc6c:	9209      	str	r2, [sp, #36]	; 0x24
 800bc6e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	f000 80a1 	beq.w	800bdba <_svfiprintf_r+0x1c6>
 800bc78:	2300      	movs	r3, #0
 800bc7a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc82:	f10a 0a01 	add.w	sl, sl, #1
 800bc86:	9304      	str	r3, [sp, #16]
 800bc88:	9307      	str	r3, [sp, #28]
 800bc8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc8e:	931a      	str	r3, [sp, #104]	; 0x68
 800bc90:	4654      	mov	r4, sl
 800bc92:	2205      	movs	r2, #5
 800bc94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc98:	4850      	ldr	r0, [pc, #320]	; (800bddc <_svfiprintf_r+0x1e8>)
 800bc9a:	f000 fa57 	bl	800c14c <memchr>
 800bc9e:	9a04      	ldr	r2, [sp, #16]
 800bca0:	b9d8      	cbnz	r0, 800bcda <_svfiprintf_r+0xe6>
 800bca2:	06d0      	lsls	r0, r2, #27
 800bca4:	bf44      	itt	mi
 800bca6:	2320      	movmi	r3, #32
 800bca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcac:	0711      	lsls	r1, r2, #28
 800bcae:	bf44      	itt	mi
 800bcb0:	232b      	movmi	r3, #43	; 0x2b
 800bcb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcb6:	f89a 3000 	ldrb.w	r3, [sl]
 800bcba:	2b2a      	cmp	r3, #42	; 0x2a
 800bcbc:	d015      	beq.n	800bcea <_svfiprintf_r+0xf6>
 800bcbe:	4654      	mov	r4, sl
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	f04f 0c0a 	mov.w	ip, #10
 800bcc6:	9a07      	ldr	r2, [sp, #28]
 800bcc8:	4621      	mov	r1, r4
 800bcca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcce:	3b30      	subs	r3, #48	; 0x30
 800bcd0:	2b09      	cmp	r3, #9
 800bcd2:	d94d      	bls.n	800bd70 <_svfiprintf_r+0x17c>
 800bcd4:	b1b0      	cbz	r0, 800bd04 <_svfiprintf_r+0x110>
 800bcd6:	9207      	str	r2, [sp, #28]
 800bcd8:	e014      	b.n	800bd04 <_svfiprintf_r+0x110>
 800bcda:	eba0 0308 	sub.w	r3, r0, r8
 800bcde:	fa09 f303 	lsl.w	r3, r9, r3
 800bce2:	4313      	orrs	r3, r2
 800bce4:	46a2      	mov	sl, r4
 800bce6:	9304      	str	r3, [sp, #16]
 800bce8:	e7d2      	b.n	800bc90 <_svfiprintf_r+0x9c>
 800bcea:	9b03      	ldr	r3, [sp, #12]
 800bcec:	1d19      	adds	r1, r3, #4
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	9103      	str	r1, [sp, #12]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	bfbb      	ittet	lt
 800bcf6:	425b      	neglt	r3, r3
 800bcf8:	f042 0202 	orrlt.w	r2, r2, #2
 800bcfc:	9307      	strge	r3, [sp, #28]
 800bcfe:	9307      	strlt	r3, [sp, #28]
 800bd00:	bfb8      	it	lt
 800bd02:	9204      	strlt	r2, [sp, #16]
 800bd04:	7823      	ldrb	r3, [r4, #0]
 800bd06:	2b2e      	cmp	r3, #46	; 0x2e
 800bd08:	d10c      	bne.n	800bd24 <_svfiprintf_r+0x130>
 800bd0a:	7863      	ldrb	r3, [r4, #1]
 800bd0c:	2b2a      	cmp	r3, #42	; 0x2a
 800bd0e:	d134      	bne.n	800bd7a <_svfiprintf_r+0x186>
 800bd10:	9b03      	ldr	r3, [sp, #12]
 800bd12:	3402      	adds	r4, #2
 800bd14:	1d1a      	adds	r2, r3, #4
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	9203      	str	r2, [sp, #12]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	bfb8      	it	lt
 800bd1e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd22:	9305      	str	r3, [sp, #20]
 800bd24:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800bde0 <_svfiprintf_r+0x1ec>
 800bd28:	2203      	movs	r2, #3
 800bd2a:	4650      	mov	r0, sl
 800bd2c:	7821      	ldrb	r1, [r4, #0]
 800bd2e:	f000 fa0d 	bl	800c14c <memchr>
 800bd32:	b138      	cbz	r0, 800bd44 <_svfiprintf_r+0x150>
 800bd34:	2240      	movs	r2, #64	; 0x40
 800bd36:	9b04      	ldr	r3, [sp, #16]
 800bd38:	eba0 000a 	sub.w	r0, r0, sl
 800bd3c:	4082      	lsls	r2, r0
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	3401      	adds	r4, #1
 800bd42:	9304      	str	r3, [sp, #16]
 800bd44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd48:	2206      	movs	r2, #6
 800bd4a:	4826      	ldr	r0, [pc, #152]	; (800bde4 <_svfiprintf_r+0x1f0>)
 800bd4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd50:	f000 f9fc 	bl	800c14c <memchr>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	d038      	beq.n	800bdca <_svfiprintf_r+0x1d6>
 800bd58:	4b23      	ldr	r3, [pc, #140]	; (800bde8 <_svfiprintf_r+0x1f4>)
 800bd5a:	bb1b      	cbnz	r3, 800bda4 <_svfiprintf_r+0x1b0>
 800bd5c:	9b03      	ldr	r3, [sp, #12]
 800bd5e:	3307      	adds	r3, #7
 800bd60:	f023 0307 	bic.w	r3, r3, #7
 800bd64:	3308      	adds	r3, #8
 800bd66:	9303      	str	r3, [sp, #12]
 800bd68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd6a:	4433      	add	r3, r6
 800bd6c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd6e:	e768      	b.n	800bc42 <_svfiprintf_r+0x4e>
 800bd70:	460c      	mov	r4, r1
 800bd72:	2001      	movs	r0, #1
 800bd74:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd78:	e7a6      	b.n	800bcc8 <_svfiprintf_r+0xd4>
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	f04f 0c0a 	mov.w	ip, #10
 800bd80:	4619      	mov	r1, r3
 800bd82:	3401      	adds	r4, #1
 800bd84:	9305      	str	r3, [sp, #20]
 800bd86:	4620      	mov	r0, r4
 800bd88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd8c:	3a30      	subs	r2, #48	; 0x30
 800bd8e:	2a09      	cmp	r2, #9
 800bd90:	d903      	bls.n	800bd9a <_svfiprintf_r+0x1a6>
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d0c6      	beq.n	800bd24 <_svfiprintf_r+0x130>
 800bd96:	9105      	str	r1, [sp, #20]
 800bd98:	e7c4      	b.n	800bd24 <_svfiprintf_r+0x130>
 800bd9a:	4604      	mov	r4, r0
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bda2:	e7f0      	b.n	800bd86 <_svfiprintf_r+0x192>
 800bda4:	ab03      	add	r3, sp, #12
 800bda6:	9300      	str	r3, [sp, #0]
 800bda8:	462a      	mov	r2, r5
 800bdaa:	4638      	mov	r0, r7
 800bdac:	4b0f      	ldr	r3, [pc, #60]	; (800bdec <_svfiprintf_r+0x1f8>)
 800bdae:	a904      	add	r1, sp, #16
 800bdb0:	f3af 8000 	nop.w
 800bdb4:	1c42      	adds	r2, r0, #1
 800bdb6:	4606      	mov	r6, r0
 800bdb8:	d1d6      	bne.n	800bd68 <_svfiprintf_r+0x174>
 800bdba:	89ab      	ldrh	r3, [r5, #12]
 800bdbc:	065b      	lsls	r3, r3, #25
 800bdbe:	f53f af2d 	bmi.w	800bc1c <_svfiprintf_r+0x28>
 800bdc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdc4:	b01d      	add	sp, #116	; 0x74
 800bdc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdca:	ab03      	add	r3, sp, #12
 800bdcc:	9300      	str	r3, [sp, #0]
 800bdce:	462a      	mov	r2, r5
 800bdd0:	4638      	mov	r0, r7
 800bdd2:	4b06      	ldr	r3, [pc, #24]	; (800bdec <_svfiprintf_r+0x1f8>)
 800bdd4:	a904      	add	r1, sp, #16
 800bdd6:	f000 f87d 	bl	800bed4 <_printf_i>
 800bdda:	e7eb      	b.n	800bdb4 <_svfiprintf_r+0x1c0>
 800bddc:	0800cfcf 	.word	0x0800cfcf
 800bde0:	0800cfd5 	.word	0x0800cfd5
 800bde4:	0800cfd9 	.word	0x0800cfd9
 800bde8:	00000000 	.word	0x00000000
 800bdec:	0800bb41 	.word	0x0800bb41

0800bdf0 <_printf_common>:
 800bdf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdf4:	4616      	mov	r6, r2
 800bdf6:	4699      	mov	r9, r3
 800bdf8:	688a      	ldr	r2, [r1, #8]
 800bdfa:	690b      	ldr	r3, [r1, #16]
 800bdfc:	4607      	mov	r7, r0
 800bdfe:	4293      	cmp	r3, r2
 800be00:	bfb8      	it	lt
 800be02:	4613      	movlt	r3, r2
 800be04:	6033      	str	r3, [r6, #0]
 800be06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be0a:	460c      	mov	r4, r1
 800be0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be10:	b10a      	cbz	r2, 800be16 <_printf_common+0x26>
 800be12:	3301      	adds	r3, #1
 800be14:	6033      	str	r3, [r6, #0]
 800be16:	6823      	ldr	r3, [r4, #0]
 800be18:	0699      	lsls	r1, r3, #26
 800be1a:	bf42      	ittt	mi
 800be1c:	6833      	ldrmi	r3, [r6, #0]
 800be1e:	3302      	addmi	r3, #2
 800be20:	6033      	strmi	r3, [r6, #0]
 800be22:	6825      	ldr	r5, [r4, #0]
 800be24:	f015 0506 	ands.w	r5, r5, #6
 800be28:	d106      	bne.n	800be38 <_printf_common+0x48>
 800be2a:	f104 0a19 	add.w	sl, r4, #25
 800be2e:	68e3      	ldr	r3, [r4, #12]
 800be30:	6832      	ldr	r2, [r6, #0]
 800be32:	1a9b      	subs	r3, r3, r2
 800be34:	42ab      	cmp	r3, r5
 800be36:	dc2b      	bgt.n	800be90 <_printf_common+0xa0>
 800be38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be3c:	1e13      	subs	r3, r2, #0
 800be3e:	6822      	ldr	r2, [r4, #0]
 800be40:	bf18      	it	ne
 800be42:	2301      	movne	r3, #1
 800be44:	0692      	lsls	r2, r2, #26
 800be46:	d430      	bmi.n	800beaa <_printf_common+0xba>
 800be48:	4649      	mov	r1, r9
 800be4a:	4638      	mov	r0, r7
 800be4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be50:	47c0      	blx	r8
 800be52:	3001      	adds	r0, #1
 800be54:	d023      	beq.n	800be9e <_printf_common+0xae>
 800be56:	6823      	ldr	r3, [r4, #0]
 800be58:	6922      	ldr	r2, [r4, #16]
 800be5a:	f003 0306 	and.w	r3, r3, #6
 800be5e:	2b04      	cmp	r3, #4
 800be60:	bf14      	ite	ne
 800be62:	2500      	movne	r5, #0
 800be64:	6833      	ldreq	r3, [r6, #0]
 800be66:	f04f 0600 	mov.w	r6, #0
 800be6a:	bf08      	it	eq
 800be6c:	68e5      	ldreq	r5, [r4, #12]
 800be6e:	f104 041a 	add.w	r4, r4, #26
 800be72:	bf08      	it	eq
 800be74:	1aed      	subeq	r5, r5, r3
 800be76:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800be7a:	bf08      	it	eq
 800be7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be80:	4293      	cmp	r3, r2
 800be82:	bfc4      	itt	gt
 800be84:	1a9b      	subgt	r3, r3, r2
 800be86:	18ed      	addgt	r5, r5, r3
 800be88:	42b5      	cmp	r5, r6
 800be8a:	d11a      	bne.n	800bec2 <_printf_common+0xd2>
 800be8c:	2000      	movs	r0, #0
 800be8e:	e008      	b.n	800bea2 <_printf_common+0xb2>
 800be90:	2301      	movs	r3, #1
 800be92:	4652      	mov	r2, sl
 800be94:	4649      	mov	r1, r9
 800be96:	4638      	mov	r0, r7
 800be98:	47c0      	blx	r8
 800be9a:	3001      	adds	r0, #1
 800be9c:	d103      	bne.n	800bea6 <_printf_common+0xb6>
 800be9e:	f04f 30ff 	mov.w	r0, #4294967295
 800bea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bea6:	3501      	adds	r5, #1
 800bea8:	e7c1      	b.n	800be2e <_printf_common+0x3e>
 800beaa:	2030      	movs	r0, #48	; 0x30
 800beac:	18e1      	adds	r1, r4, r3
 800beae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800beb2:	1c5a      	adds	r2, r3, #1
 800beb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800beb8:	4422      	add	r2, r4
 800beba:	3302      	adds	r3, #2
 800bebc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bec0:	e7c2      	b.n	800be48 <_printf_common+0x58>
 800bec2:	2301      	movs	r3, #1
 800bec4:	4622      	mov	r2, r4
 800bec6:	4649      	mov	r1, r9
 800bec8:	4638      	mov	r0, r7
 800beca:	47c0      	blx	r8
 800becc:	3001      	adds	r0, #1
 800bece:	d0e6      	beq.n	800be9e <_printf_common+0xae>
 800bed0:	3601      	adds	r6, #1
 800bed2:	e7d9      	b.n	800be88 <_printf_common+0x98>

0800bed4 <_printf_i>:
 800bed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bed8:	7e0f      	ldrb	r7, [r1, #24]
 800beda:	4691      	mov	r9, r2
 800bedc:	2f78      	cmp	r7, #120	; 0x78
 800bede:	4680      	mov	r8, r0
 800bee0:	460c      	mov	r4, r1
 800bee2:	469a      	mov	sl, r3
 800bee4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bee6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800beea:	d807      	bhi.n	800befc <_printf_i+0x28>
 800beec:	2f62      	cmp	r7, #98	; 0x62
 800beee:	d80a      	bhi.n	800bf06 <_printf_i+0x32>
 800bef0:	2f00      	cmp	r7, #0
 800bef2:	f000 80d5 	beq.w	800c0a0 <_printf_i+0x1cc>
 800bef6:	2f58      	cmp	r7, #88	; 0x58
 800bef8:	f000 80c1 	beq.w	800c07e <_printf_i+0x1aa>
 800befc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf04:	e03a      	b.n	800bf7c <_printf_i+0xa8>
 800bf06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf0a:	2b15      	cmp	r3, #21
 800bf0c:	d8f6      	bhi.n	800befc <_printf_i+0x28>
 800bf0e:	a101      	add	r1, pc, #4	; (adr r1, 800bf14 <_printf_i+0x40>)
 800bf10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf14:	0800bf6d 	.word	0x0800bf6d
 800bf18:	0800bf81 	.word	0x0800bf81
 800bf1c:	0800befd 	.word	0x0800befd
 800bf20:	0800befd 	.word	0x0800befd
 800bf24:	0800befd 	.word	0x0800befd
 800bf28:	0800befd 	.word	0x0800befd
 800bf2c:	0800bf81 	.word	0x0800bf81
 800bf30:	0800befd 	.word	0x0800befd
 800bf34:	0800befd 	.word	0x0800befd
 800bf38:	0800befd 	.word	0x0800befd
 800bf3c:	0800befd 	.word	0x0800befd
 800bf40:	0800c087 	.word	0x0800c087
 800bf44:	0800bfad 	.word	0x0800bfad
 800bf48:	0800c041 	.word	0x0800c041
 800bf4c:	0800befd 	.word	0x0800befd
 800bf50:	0800befd 	.word	0x0800befd
 800bf54:	0800c0a9 	.word	0x0800c0a9
 800bf58:	0800befd 	.word	0x0800befd
 800bf5c:	0800bfad 	.word	0x0800bfad
 800bf60:	0800befd 	.word	0x0800befd
 800bf64:	0800befd 	.word	0x0800befd
 800bf68:	0800c049 	.word	0x0800c049
 800bf6c:	682b      	ldr	r3, [r5, #0]
 800bf6e:	1d1a      	adds	r2, r3, #4
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	602a      	str	r2, [r5, #0]
 800bf74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	e0a0      	b.n	800c0c2 <_printf_i+0x1ee>
 800bf80:	6820      	ldr	r0, [r4, #0]
 800bf82:	682b      	ldr	r3, [r5, #0]
 800bf84:	0607      	lsls	r7, r0, #24
 800bf86:	f103 0104 	add.w	r1, r3, #4
 800bf8a:	6029      	str	r1, [r5, #0]
 800bf8c:	d501      	bpl.n	800bf92 <_printf_i+0xbe>
 800bf8e:	681e      	ldr	r6, [r3, #0]
 800bf90:	e003      	b.n	800bf9a <_printf_i+0xc6>
 800bf92:	0646      	lsls	r6, r0, #25
 800bf94:	d5fb      	bpl.n	800bf8e <_printf_i+0xba>
 800bf96:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bf9a:	2e00      	cmp	r6, #0
 800bf9c:	da03      	bge.n	800bfa6 <_printf_i+0xd2>
 800bf9e:	232d      	movs	r3, #45	; 0x2d
 800bfa0:	4276      	negs	r6, r6
 800bfa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfa6:	230a      	movs	r3, #10
 800bfa8:	4859      	ldr	r0, [pc, #356]	; (800c110 <_printf_i+0x23c>)
 800bfaa:	e012      	b.n	800bfd2 <_printf_i+0xfe>
 800bfac:	682b      	ldr	r3, [r5, #0]
 800bfae:	6820      	ldr	r0, [r4, #0]
 800bfb0:	1d19      	adds	r1, r3, #4
 800bfb2:	6029      	str	r1, [r5, #0]
 800bfb4:	0605      	lsls	r5, r0, #24
 800bfb6:	d501      	bpl.n	800bfbc <_printf_i+0xe8>
 800bfb8:	681e      	ldr	r6, [r3, #0]
 800bfba:	e002      	b.n	800bfc2 <_printf_i+0xee>
 800bfbc:	0641      	lsls	r1, r0, #25
 800bfbe:	d5fb      	bpl.n	800bfb8 <_printf_i+0xe4>
 800bfc0:	881e      	ldrh	r6, [r3, #0]
 800bfc2:	2f6f      	cmp	r7, #111	; 0x6f
 800bfc4:	bf0c      	ite	eq
 800bfc6:	2308      	moveq	r3, #8
 800bfc8:	230a      	movne	r3, #10
 800bfca:	4851      	ldr	r0, [pc, #324]	; (800c110 <_printf_i+0x23c>)
 800bfcc:	2100      	movs	r1, #0
 800bfce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bfd2:	6865      	ldr	r5, [r4, #4]
 800bfd4:	2d00      	cmp	r5, #0
 800bfd6:	bfa8      	it	ge
 800bfd8:	6821      	ldrge	r1, [r4, #0]
 800bfda:	60a5      	str	r5, [r4, #8]
 800bfdc:	bfa4      	itt	ge
 800bfde:	f021 0104 	bicge.w	r1, r1, #4
 800bfe2:	6021      	strge	r1, [r4, #0]
 800bfe4:	b90e      	cbnz	r6, 800bfea <_printf_i+0x116>
 800bfe6:	2d00      	cmp	r5, #0
 800bfe8:	d04b      	beq.n	800c082 <_printf_i+0x1ae>
 800bfea:	4615      	mov	r5, r2
 800bfec:	fbb6 f1f3 	udiv	r1, r6, r3
 800bff0:	fb03 6711 	mls	r7, r3, r1, r6
 800bff4:	5dc7      	ldrb	r7, [r0, r7]
 800bff6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bffa:	4637      	mov	r7, r6
 800bffc:	42bb      	cmp	r3, r7
 800bffe:	460e      	mov	r6, r1
 800c000:	d9f4      	bls.n	800bfec <_printf_i+0x118>
 800c002:	2b08      	cmp	r3, #8
 800c004:	d10b      	bne.n	800c01e <_printf_i+0x14a>
 800c006:	6823      	ldr	r3, [r4, #0]
 800c008:	07de      	lsls	r6, r3, #31
 800c00a:	d508      	bpl.n	800c01e <_printf_i+0x14a>
 800c00c:	6923      	ldr	r3, [r4, #16]
 800c00e:	6861      	ldr	r1, [r4, #4]
 800c010:	4299      	cmp	r1, r3
 800c012:	bfde      	ittt	le
 800c014:	2330      	movle	r3, #48	; 0x30
 800c016:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c01a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c01e:	1b52      	subs	r2, r2, r5
 800c020:	6122      	str	r2, [r4, #16]
 800c022:	464b      	mov	r3, r9
 800c024:	4621      	mov	r1, r4
 800c026:	4640      	mov	r0, r8
 800c028:	f8cd a000 	str.w	sl, [sp]
 800c02c:	aa03      	add	r2, sp, #12
 800c02e:	f7ff fedf 	bl	800bdf0 <_printf_common>
 800c032:	3001      	adds	r0, #1
 800c034:	d14a      	bne.n	800c0cc <_printf_i+0x1f8>
 800c036:	f04f 30ff 	mov.w	r0, #4294967295
 800c03a:	b004      	add	sp, #16
 800c03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c040:	6823      	ldr	r3, [r4, #0]
 800c042:	f043 0320 	orr.w	r3, r3, #32
 800c046:	6023      	str	r3, [r4, #0]
 800c048:	2778      	movs	r7, #120	; 0x78
 800c04a:	4832      	ldr	r0, [pc, #200]	; (800c114 <_printf_i+0x240>)
 800c04c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c050:	6823      	ldr	r3, [r4, #0]
 800c052:	6829      	ldr	r1, [r5, #0]
 800c054:	061f      	lsls	r7, r3, #24
 800c056:	f851 6b04 	ldr.w	r6, [r1], #4
 800c05a:	d402      	bmi.n	800c062 <_printf_i+0x18e>
 800c05c:	065f      	lsls	r7, r3, #25
 800c05e:	bf48      	it	mi
 800c060:	b2b6      	uxthmi	r6, r6
 800c062:	07df      	lsls	r7, r3, #31
 800c064:	bf48      	it	mi
 800c066:	f043 0320 	orrmi.w	r3, r3, #32
 800c06a:	6029      	str	r1, [r5, #0]
 800c06c:	bf48      	it	mi
 800c06e:	6023      	strmi	r3, [r4, #0]
 800c070:	b91e      	cbnz	r6, 800c07a <_printf_i+0x1a6>
 800c072:	6823      	ldr	r3, [r4, #0]
 800c074:	f023 0320 	bic.w	r3, r3, #32
 800c078:	6023      	str	r3, [r4, #0]
 800c07a:	2310      	movs	r3, #16
 800c07c:	e7a6      	b.n	800bfcc <_printf_i+0xf8>
 800c07e:	4824      	ldr	r0, [pc, #144]	; (800c110 <_printf_i+0x23c>)
 800c080:	e7e4      	b.n	800c04c <_printf_i+0x178>
 800c082:	4615      	mov	r5, r2
 800c084:	e7bd      	b.n	800c002 <_printf_i+0x12e>
 800c086:	682b      	ldr	r3, [r5, #0]
 800c088:	6826      	ldr	r6, [r4, #0]
 800c08a:	1d18      	adds	r0, r3, #4
 800c08c:	6961      	ldr	r1, [r4, #20]
 800c08e:	6028      	str	r0, [r5, #0]
 800c090:	0635      	lsls	r5, r6, #24
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	d501      	bpl.n	800c09a <_printf_i+0x1c6>
 800c096:	6019      	str	r1, [r3, #0]
 800c098:	e002      	b.n	800c0a0 <_printf_i+0x1cc>
 800c09a:	0670      	lsls	r0, r6, #25
 800c09c:	d5fb      	bpl.n	800c096 <_printf_i+0x1c2>
 800c09e:	8019      	strh	r1, [r3, #0]
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	4615      	mov	r5, r2
 800c0a4:	6123      	str	r3, [r4, #16]
 800c0a6:	e7bc      	b.n	800c022 <_printf_i+0x14e>
 800c0a8:	682b      	ldr	r3, [r5, #0]
 800c0aa:	2100      	movs	r1, #0
 800c0ac:	1d1a      	adds	r2, r3, #4
 800c0ae:	602a      	str	r2, [r5, #0]
 800c0b0:	681d      	ldr	r5, [r3, #0]
 800c0b2:	6862      	ldr	r2, [r4, #4]
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	f000 f849 	bl	800c14c <memchr>
 800c0ba:	b108      	cbz	r0, 800c0c0 <_printf_i+0x1ec>
 800c0bc:	1b40      	subs	r0, r0, r5
 800c0be:	6060      	str	r0, [r4, #4]
 800c0c0:	6863      	ldr	r3, [r4, #4]
 800c0c2:	6123      	str	r3, [r4, #16]
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0ca:	e7aa      	b.n	800c022 <_printf_i+0x14e>
 800c0cc:	462a      	mov	r2, r5
 800c0ce:	4649      	mov	r1, r9
 800c0d0:	4640      	mov	r0, r8
 800c0d2:	6923      	ldr	r3, [r4, #16]
 800c0d4:	47d0      	blx	sl
 800c0d6:	3001      	adds	r0, #1
 800c0d8:	d0ad      	beq.n	800c036 <_printf_i+0x162>
 800c0da:	6823      	ldr	r3, [r4, #0]
 800c0dc:	079b      	lsls	r3, r3, #30
 800c0de:	d413      	bmi.n	800c108 <_printf_i+0x234>
 800c0e0:	68e0      	ldr	r0, [r4, #12]
 800c0e2:	9b03      	ldr	r3, [sp, #12]
 800c0e4:	4298      	cmp	r0, r3
 800c0e6:	bfb8      	it	lt
 800c0e8:	4618      	movlt	r0, r3
 800c0ea:	e7a6      	b.n	800c03a <_printf_i+0x166>
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	4632      	mov	r2, r6
 800c0f0:	4649      	mov	r1, r9
 800c0f2:	4640      	mov	r0, r8
 800c0f4:	47d0      	blx	sl
 800c0f6:	3001      	adds	r0, #1
 800c0f8:	d09d      	beq.n	800c036 <_printf_i+0x162>
 800c0fa:	3501      	adds	r5, #1
 800c0fc:	68e3      	ldr	r3, [r4, #12]
 800c0fe:	9903      	ldr	r1, [sp, #12]
 800c100:	1a5b      	subs	r3, r3, r1
 800c102:	42ab      	cmp	r3, r5
 800c104:	dcf2      	bgt.n	800c0ec <_printf_i+0x218>
 800c106:	e7eb      	b.n	800c0e0 <_printf_i+0x20c>
 800c108:	2500      	movs	r5, #0
 800c10a:	f104 0619 	add.w	r6, r4, #25
 800c10e:	e7f5      	b.n	800c0fc <_printf_i+0x228>
 800c110:	0800cfe0 	.word	0x0800cfe0
 800c114:	0800cff1 	.word	0x0800cff1

0800c118 <memmove>:
 800c118:	4288      	cmp	r0, r1
 800c11a:	b510      	push	{r4, lr}
 800c11c:	eb01 0402 	add.w	r4, r1, r2
 800c120:	d902      	bls.n	800c128 <memmove+0x10>
 800c122:	4284      	cmp	r4, r0
 800c124:	4623      	mov	r3, r4
 800c126:	d807      	bhi.n	800c138 <memmove+0x20>
 800c128:	1e43      	subs	r3, r0, #1
 800c12a:	42a1      	cmp	r1, r4
 800c12c:	d008      	beq.n	800c140 <memmove+0x28>
 800c12e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c132:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c136:	e7f8      	b.n	800c12a <memmove+0x12>
 800c138:	4601      	mov	r1, r0
 800c13a:	4402      	add	r2, r0
 800c13c:	428a      	cmp	r2, r1
 800c13e:	d100      	bne.n	800c142 <memmove+0x2a>
 800c140:	bd10      	pop	{r4, pc}
 800c142:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c146:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c14a:	e7f7      	b.n	800c13c <memmove+0x24>

0800c14c <memchr>:
 800c14c:	4603      	mov	r3, r0
 800c14e:	b510      	push	{r4, lr}
 800c150:	b2c9      	uxtb	r1, r1
 800c152:	4402      	add	r2, r0
 800c154:	4293      	cmp	r3, r2
 800c156:	4618      	mov	r0, r3
 800c158:	d101      	bne.n	800c15e <memchr+0x12>
 800c15a:	2000      	movs	r0, #0
 800c15c:	e003      	b.n	800c166 <memchr+0x1a>
 800c15e:	7804      	ldrb	r4, [r0, #0]
 800c160:	3301      	adds	r3, #1
 800c162:	428c      	cmp	r4, r1
 800c164:	d1f6      	bne.n	800c154 <memchr+0x8>
 800c166:	bd10      	pop	{r4, pc}

0800c168 <memcpy>:
 800c168:	440a      	add	r2, r1
 800c16a:	4291      	cmp	r1, r2
 800c16c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c170:	d100      	bne.n	800c174 <memcpy+0xc>
 800c172:	4770      	bx	lr
 800c174:	b510      	push	{r4, lr}
 800c176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c17a:	4291      	cmp	r1, r2
 800c17c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c180:	d1f9      	bne.n	800c176 <memcpy+0xe>
 800c182:	bd10      	pop	{r4, pc}

0800c184 <_realloc_r>:
 800c184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c188:	4680      	mov	r8, r0
 800c18a:	4614      	mov	r4, r2
 800c18c:	460e      	mov	r6, r1
 800c18e:	b921      	cbnz	r1, 800c19a <_realloc_r+0x16>
 800c190:	4611      	mov	r1, r2
 800c192:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c196:	f7ff bb51 	b.w	800b83c <_malloc_r>
 800c19a:	b92a      	cbnz	r2, 800c1a8 <_realloc_r+0x24>
 800c19c:	f7ff fc88 	bl	800bab0 <_free_r>
 800c1a0:	4625      	mov	r5, r4
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1a8:	f000 f81b 	bl	800c1e2 <_malloc_usable_size_r>
 800c1ac:	4284      	cmp	r4, r0
 800c1ae:	4607      	mov	r7, r0
 800c1b0:	d802      	bhi.n	800c1b8 <_realloc_r+0x34>
 800c1b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c1b6:	d812      	bhi.n	800c1de <_realloc_r+0x5a>
 800c1b8:	4621      	mov	r1, r4
 800c1ba:	4640      	mov	r0, r8
 800c1bc:	f7ff fb3e 	bl	800b83c <_malloc_r>
 800c1c0:	4605      	mov	r5, r0
 800c1c2:	2800      	cmp	r0, #0
 800c1c4:	d0ed      	beq.n	800c1a2 <_realloc_r+0x1e>
 800c1c6:	42bc      	cmp	r4, r7
 800c1c8:	4622      	mov	r2, r4
 800c1ca:	4631      	mov	r1, r6
 800c1cc:	bf28      	it	cs
 800c1ce:	463a      	movcs	r2, r7
 800c1d0:	f7ff ffca 	bl	800c168 <memcpy>
 800c1d4:	4631      	mov	r1, r6
 800c1d6:	4640      	mov	r0, r8
 800c1d8:	f7ff fc6a 	bl	800bab0 <_free_r>
 800c1dc:	e7e1      	b.n	800c1a2 <_realloc_r+0x1e>
 800c1de:	4635      	mov	r5, r6
 800c1e0:	e7df      	b.n	800c1a2 <_realloc_r+0x1e>

0800c1e2 <_malloc_usable_size_r>:
 800c1e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c1e6:	1f18      	subs	r0, r3, #4
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	bfbc      	itt	lt
 800c1ec:	580b      	ldrlt	r3, [r1, r0]
 800c1ee:	18c0      	addlt	r0, r0, r3
 800c1f0:	4770      	bx	lr
	...

0800c1f4 <_init>:
 800c1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1f6:	bf00      	nop
 800c1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1fa:	bc08      	pop	{r3}
 800c1fc:	469e      	mov	lr, r3
 800c1fe:	4770      	bx	lr

0800c200 <_fini>:
 800c200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c202:	bf00      	nop
 800c204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c206:	bc08      	pop	{r3}
 800c208:	469e      	mov	lr, r3
 800c20a:	4770      	bx	lr
