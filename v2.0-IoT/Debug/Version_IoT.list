
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc78  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f38  0800de5c  0800de5c  0001de5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed94  0800ed94  00020a20  2**0
                  CONTENTS
  4 .ARM          00000000  0800ed94  0800ed94  00020a20  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ed94  0800ed94  00020a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed94  0800ed94  0001ed94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed98  0800ed98  0001ed98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a20  20000000  0800ed9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  20000a20  0800f7bc  00020a20  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001090  0800f7bc  00021090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020a20  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a49  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013996  00000000  00000000  00020a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026d3  00000000  00000000  00034422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e8  00000000  00000000  00036af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e2e  00000000  00000000  00037ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af02  00000000  00000000  00038b0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018ab7  00000000  00000000  00053a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fe35  00000000  00000000  0006c4c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000532c  00000000  00000000  0010c2fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00111628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000a20 	.word	0x20000a20
 8000200:	00000000 	.word	0x00000000
 8000204:	0800de44 	.word	0x0800de44

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a24 	.word	0x20000a24
 8000220:	0800de44 	.word	0x0800de44

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:
#include "ESP8266.h"
#include "WifiData.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b09e      	sub	sp, #120	; 0x78
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000240:	4947      	ldr	r1, [pc, #284]	; (8000360 <ESP8266_Init+0x12c>)
 8000242:	4848      	ldr	r0, [pc, #288]	; (8000364 <ESP8266_Init+0x130>)
 8000244:	f00d f9aa 	bl	800d59c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000248:	4846      	ldr	r0, [pc, #280]	; (8000364 <ESP8266_Init+0x130>)
 800024a:	f7ff ffeb 	bl	8000224 <strlen>
 800024e:	4603      	mov	r3, r0
 8000250:	b29b      	uxth	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	4943      	ldr	r1, [pc, #268]	; (8000364 <ESP8266_Init+0x130>)
 8000256:	68f8      	ldr	r0, [r7, #12]
 8000258:	f00c fb1c 	bl	800c894 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f009 fa4c 	bl	80096fc <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000264:	4940      	ldr	r1, [pc, #256]	; (8000368 <ESP8266_Init+0x134>)
 8000266:	483f      	ldr	r0, [pc, #252]	; (8000364 <ESP8266_Init+0x130>)
 8000268:	f00d f998 	bl	800d59c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800026c:	483d      	ldr	r0, [pc, #244]	; (8000364 <ESP8266_Init+0x130>)
 800026e:	f7ff ffd9 	bl	8000224 <strlen>
 8000272:	4603      	mov	r3, r0
 8000274:	b29b      	uxth	r3, r3
 8000276:	461a      	mov	r2, r3
 8000278:	493a      	ldr	r1, [pc, #232]	; (8000364 <ESP8266_Init+0x130>)
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f00c fb0a 	bl	800c894 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f009 fa3a 	bl	80096fc <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000288:	4938      	ldr	r1, [pc, #224]	; (800036c <ESP8266_Init+0x138>)
 800028a:	4836      	ldr	r0, [pc, #216]	; (8000364 <ESP8266_Init+0x130>)
 800028c:	f00d f986 	bl	800d59c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000290:	4834      	ldr	r0, [pc, #208]	; (8000364 <ESP8266_Init+0x130>)
 8000292:	f7ff ffc7 	bl	8000224 <strlen>
 8000296:	4603      	mov	r3, r0
 8000298:	b29b      	uxth	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	4931      	ldr	r1, [pc, #196]	; (8000364 <ESP8266_Init+0x130>)
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f00c faf8 	bl	800c894 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002a8:	f009 fa28 	bl	80096fc <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80002ac:	4930      	ldr	r1, [pc, #192]	; (8000370 <ESP8266_Init+0x13c>)
 80002ae:	482d      	ldr	r0, [pc, #180]	; (8000364 <ESP8266_Init+0x130>)
 80002b0:	f00d f974 	bl	800d59c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80002b4:	482b      	ldr	r0, [pc, #172]	; (8000364 <ESP8266_Init+0x130>)
 80002b6:	f7ff ffb5 	bl	8000224 <strlen>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29b      	uxth	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	4928      	ldr	r1, [pc, #160]	; (8000364 <ESP8266_Init+0x130>)
 80002c2:	68f8      	ldr	r0, [r7, #12]
 80002c4:	f00c fae6 	bl	800c894 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002cc:	f009 fa16 	bl	80096fc <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	4a27      	ldr	r2, [pc, #156]	; (8000374 <ESP8266_Init+0x140>)
 80002d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d8:	c303      	stmia	r3!, {r0, r1}
 80002da:	801a      	strh	r2, [r3, #0]
 80002dc:	3302      	adds	r3, #2
 80002de:	0c12      	lsrs	r2, r2, #16
 80002e0:	701a      	strb	r2, [r3, #0]
	strcat(str, wifiSS);
 80002e2:	f107 0314 	add.w	r3, r7, #20
 80002e6:	68b9      	ldr	r1, [r7, #8]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f00d f97f 	bl	800d5ec <strcat>
	strcat(str, "\",\"");
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	461a      	mov	r2, r3
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	4413      	add	r3, r2
 8000302:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <ESP8266_Init+0x144>)
 8000304:	6810      	ldr	r0, [r2, #0]
 8000306:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	4618      	mov	r0, r3
 8000310:	f00d f96c 	bl	800d5ec <strcat>
	strcat(str, "\"\r\n");
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff83 	bl	8000224 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	461a      	mov	r2, r3
 8000322:	f107 0314 	add.w	r3, r7, #20
 8000326:	4413      	add	r3, r2
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <ESP8266_Init+0x148>)
 800032a:	6810      	ldr	r0, [r2, #0]
 800032c:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	461a      	mov	r2, r3
 8000334:	4912      	ldr	r1, [pc, #72]	; (8000380 <ESP8266_Init+0x14c>)
 8000336:	480b      	ldr	r0, [pc, #44]	; (8000364 <ESP8266_Init+0x130>)
 8000338:	f00d f930 	bl	800d59c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <ESP8266_Init+0x130>)
 800033e:	f7ff ff71 	bl	8000224 <strlen>
 8000342:	4603      	mov	r3, r0
 8000344:	b29b      	uxth	r3, r3
 8000346:	461a      	mov	r2, r3
 8000348:	4906      	ldr	r1, [pc, #24]	; (8000364 <ESP8266_Init+0x130>)
 800034a:	68f8      	ldr	r0, [r7, #12]
 800034c:	f00c faa2 	bl	800c894 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000350:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000354:	f009 f9d2 	bl	80096fc <HAL_Delay>
}
 8000358:	bf00      	nop
 800035a:	3778      	adds	r7, #120	; 0x78
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800de5c 	.word	0x0800de5c
 8000364:	20000a3c 	.word	0x20000a3c
 8000368:	0800de6c 	.word	0x0800de6c
 800036c:	0800de78 	.word	0x0800de78
 8000370:	0800de80 	.word	0x0800de80
 8000374:	0800de90 	.word	0x0800de90
 8000378:	0800de9c 	.word	0x0800de9c
 800037c:	0800dea0 	.word	0x0800dea0
 8000380:	0800dea4 	.word	0x0800dea4

08000384 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b0c6      	sub	sp, #280	; 0x118
 8000388:	af02      	add	r7, sp, #8
 800038a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800038e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000392:	6018      	str	r0, [r3, #0]
 8000394:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800039c:	6019      	str	r1, [r3, #0]
 800039e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003a6:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 80003a8:	4a31      	ldr	r2, [pc, #196]	; (8000470 <sendMachineData+0xec>)
 80003aa:	4932      	ldr	r1, [pc, #200]	; (8000474 <sendMachineData+0xf0>)
 80003ac:	4832      	ldr	r0, [pc, #200]	; (8000478 <sendMachineData+0xf4>)
 80003ae:	f00d f8f5 	bl	800d59c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80003b2:	4831      	ldr	r0, [pc, #196]	; (8000478 <sendMachineData+0xf4>)
 80003b4:	f7ff ff36 	bl	8000224 <strlen>
 80003b8:	4603      	mov	r3, r0
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003c4:	492c      	ldr	r1, [pc, #176]	; (8000478 <sendMachineData+0xf4>)
 80003c6:	6818      	ldr	r0, [r3, #0]
 80003c8:	f00c fa64 	bl	800c894 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80003cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003d0:	f009 f994 	bl	80096fc <HAL_Delay>

	sprintf(local_txA,
 80003d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80003e0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80003e4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80003e8:	4924      	ldr	r1, [pc, #144]	; (800047c <sendMachineData+0xf8>)
 80003ea:	9100      	str	r1, [sp, #0]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	4923      	ldr	r1, [pc, #140]	; (8000480 <sendMachineData+0xfc>)
 80003f2:	f00d f8d3 	bl	800d59c <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 80003f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff12 	bl	8000224 <strlen>
 8000400:	4603      	mov	r3, r0
 8000402:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800040e:	491d      	ldr	r1, [pc, #116]	; (8000484 <sendMachineData+0x100>)
 8000410:	4618      	mov	r0, r3
 8000412:	f00d f8c3 	bl	800d59c <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff02 	bl	8000224 <strlen>
 8000420:	4603      	mov	r3, r0
 8000422:	b29a      	uxth	r2, r3
 8000424:	f107 0110 	add.w	r1, r7, #16
 8000428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800042c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000430:	6818      	ldr	r0, [r3, #0]
 8000432:	f00c fa2f 	bl	800c894 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000436:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800043a:	f009 f95f 	bl	80096fc <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800043e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff feee 	bl	8000224 <strlen>
 8000448:	4603      	mov	r3, r0
 800044a:	b29a      	uxth	r2, r3
 800044c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000450:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	f00c fa1b 	bl	800c894 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800045e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000462:	f009 f94b 	bl	80096fc <HAL_Delay>
}
 8000466:	bf00      	nop
 8000468:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	0800dea8 	.word	0x0800dea8
 8000474:	0800deb8 	.word	0x0800deb8
 8000478:	20000a3c 	.word	0x20000a3c
 800047c:	0800df34 	.word	0x0800df34
 8000480:	0800ded8 	.word	0x0800ded8
 8000484:	0800df48 	.word	0x0800df48

08000488 <checkMachineID>:

int checkMachineID(UART_HandleTypeDef *huart1, const char *machineID) {
 8000488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800048c:	b0fb      	sub	sp, #492	; 0x1ec
 800048e:	af00      	add	r7, sp, #0
 8000490:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8000494:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8000498:	6018      	str	r0, [r3, #0]
 800049a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800049e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80004a2:	6019      	str	r1, [r3, #0]
	char local_txB[50];
	int len;

	char bufferRX[200];

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 80004a4:	4a6f      	ldr	r2, [pc, #444]	; (8000664 <checkMachineID+0x1dc>)
 80004a6:	4970      	ldr	r1, [pc, #448]	; (8000668 <checkMachineID+0x1e0>)
 80004a8:	4870      	ldr	r0, [pc, #448]	; (800066c <checkMachineID+0x1e4>)
 80004aa:	f00d f877 	bl	800d59c <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80004ae:	486f      	ldr	r0, [pc, #444]	; (800066c <checkMachineID+0x1e4>)
 80004b0:	f7ff feb8 	bl	8000224 <strlen>
 80004b4:	4603      	mov	r3, r0
 80004b6:	b29a      	uxth	r2, r3
 80004b8:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80004bc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80004c0:	496a      	ldr	r1, [pc, #424]	; (800066c <checkMachineID+0x1e4>)
 80004c2:	6818      	ldr	r0, [r3, #0]
 80004c4:	f00c f9e6 	bl	800c894 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80004c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80004cc:	f009 f916 	bl	80096fc <HAL_Delay>

	sprintf(local_txA,
 80004d0:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80004d4:	f5a3 72f4 	sub.w	r2, r3, #488	; 0x1e8
 80004d8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80004dc:	4b64      	ldr	r3, [pc, #400]	; (8000670 <checkMachineID+0x1e8>)
 80004de:	6812      	ldr	r2, [r2, #0]
 80004e0:	4964      	ldr	r1, [pc, #400]	; (8000674 <checkMachineID+0x1ec>)
 80004e2:	f00d f85b 	bl	800d59c <siprintf>
			"GET /api/machine/checkMachineID?machineID=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, Server2);
	len = strlen(local_txA);
 80004e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff fe9a 	bl	8000224 <strlen>
 80004f0:	4603      	mov	r3, r0
 80004f2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80004f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80004fa:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 80004fe:	495e      	ldr	r1, [pc, #376]	; (8000678 <checkMachineID+0x1f0>)
 8000500:	4618      	mov	r0, r3
 8000502:	f00d f84b 	bl	800d59c <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000506:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff fe8a 	bl	8000224 <strlen>
 8000510:	4603      	mov	r3, r0
 8000512:	b29a      	uxth	r2, r3
 8000514:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 8000518:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800051c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8000520:	6818      	ldr	r0, [r3, #0]
 8000522:	f00c f9b7 	bl	800c894 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000526:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800052a:	f009 f8e7 	bl	80096fc <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800052e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff fe76 	bl	8000224 <strlen>
 8000538:	4603      	mov	r3, r0
 800053a:	b29a      	uxth	r2, r3
 800053c:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8000540:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8000544:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8000548:	6818      	ldr	r0, [r3, #0]
 800054a:	f00c f9a3 	bl	800c894 <HAL_UART_Transmit_IT>
	HAL_Delay(6000);
 800054e:	f241 7070 	movw	r0, #6000	; 0x1770
 8000552:	f009 f8d3 	bl	80096fc <HAL_Delay>

	HAL_UART_Receive_IT(huart1, (uint8_t*) bufferRX, sizeof(bufferRX));
 8000556:	f107 010c 	add.w	r1, r7, #12
 800055a:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 800055e:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8000562:	22c8      	movs	r2, #200	; 0xc8
 8000564:	6818      	ldr	r0, [r3, #0]
 8000566:	f00c f9ca 	bl	800c8fe <HAL_UART_Receive_IT>
	HAL_Delay(4000);
 800056a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800056e:	f009 f8c5 	bl	80096fc <HAL_Delay>

	if (strstr(bufferRX, "HTTP/1.1 200 OK") != NULL) {
 8000572:	f107 030c 	add.w	r3, r7, #12
 8000576:	4941      	ldr	r1, [pc, #260]	; (800067c <checkMachineID+0x1f4>)
 8000578:	4618      	mov	r0, r3
 800057a:	f00d f866 	bl	800d64a <strstr>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d067      	beq.n	8000654 <checkMachineID+0x1cc>

	    char *jsonStart = strstr(bufferRX, "{");
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	217b      	movs	r1, #123	; 0x7b
 800058a:	4618      	mov	r0, r3
 800058c:	f00d f83d 	bl	800d60a <strchr>
 8000590:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
	    char *jsonEnd = strstr(bufferRX, "}");
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	217d      	movs	r1, #125	; 0x7d
 800059a:	4618      	mov	r0, r3
 800059c:	f00d f835 	bl	800d60a <strchr>
 80005a0:	f8c7 01dc 	str.w	r0, [r7, #476]	; 0x1dc

	    if (jsonStart != NULL && jsonEnd != NULL) {
 80005a4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d053      	beq.n	8000654 <checkMachineID+0x1cc>
 80005ac:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d04f      	beq.n	8000654 <checkMachineID+0x1cc>
 80005b4:	466b      	mov	r3, sp
 80005b6:	461e      	mov	r6, r3
	        int jsonLength = jsonEnd - jsonStart + 1;
 80005b8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80005bc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80005c0:	1ad3      	subs	r3, r2, r3
 80005c2:	3301      	adds	r3, #1
 80005c4:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	        char jsonResponse[jsonLength + 1];
 80005c8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80005cc:	1c59      	adds	r1, r3, #1
 80005ce:	1e4b      	subs	r3, r1, #1
 80005d0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80005d4:	460a      	mov	r2, r1
 80005d6:	2300      	movs	r3, #0
 80005d8:	4690      	mov	r8, r2
 80005da:	4699      	mov	r9, r3
 80005dc:	f04f 0200 	mov.w	r2, #0
 80005e0:	f04f 0300 	mov.w	r3, #0
 80005e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80005e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80005ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80005f0:	460a      	mov	r2, r1
 80005f2:	2300      	movs	r3, #0
 80005f4:	4614      	mov	r4, r2
 80005f6:	461d      	mov	r5, r3
 80005f8:	f04f 0200 	mov.w	r2, #0
 80005fc:	f04f 0300 	mov.w	r3, #0
 8000600:	00eb      	lsls	r3, r5, #3
 8000602:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000606:	00e2      	lsls	r2, r4, #3
 8000608:	460b      	mov	r3, r1
 800060a:	3307      	adds	r3, #7
 800060c:	08db      	lsrs	r3, r3, #3
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	ebad 0d03 	sub.w	sp, sp, r3
 8000614:	466b      	mov	r3, sp
 8000616:	3300      	adds	r3, #0
 8000618:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
	        strncpy(jsonResponse, jsonStart, jsonLength);
 800061c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8000620:	461a      	mov	r2, r3
 8000622:	f8d7 11e0 	ldr.w	r1, [r7, #480]	; 0x1e0
 8000626:	f8d7 01d0 	ldr.w	r0, [r7, #464]	; 0x1d0
 800062a:	f00c fffb 	bl	800d624 <strncpy>
	        jsonResponse[jsonLength] = '\0';
 800062e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8000632:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8000636:	4413      	add	r3, r2
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]

	        if (strstr(jsonResponse, "\"msg\": \"OK\"") != NULL) {
 800063c:	4910      	ldr	r1, [pc, #64]	; (8000680 <checkMachineID+0x1f8>)
 800063e:	f8d7 01d0 	ldr.w	r0, [r7, #464]	; 0x1d0
 8000642:	f00d f802 	bl	800d64a <strstr>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d002      	beq.n	8000652 <checkMachineID+0x1ca>
	            return 1; // Yanıt başarılı
 800064c:	2301      	movs	r3, #1
 800064e:	46b5      	mov	sp, r6
 8000650:	e001      	b.n	8000656 <checkMachineID+0x1ce>
 8000652:	46b5      	mov	sp, r6
	        }
	    }
	}

	return 0; // Yanıt başarısız
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	f507 77f6 	add.w	r7, r7, #492	; 0x1ec
 800065c:	46bd      	mov	sp, r7
 800065e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000662:	bf00      	nop
 8000664:	0800dea8 	.word	0x0800dea8
 8000668:	0800deb8 	.word	0x0800deb8
 800066c:	20000a3c 	.word	0x20000a3c
 8000670:	0800df34 	.word	0x0800df34
 8000674:	0800df58 	.word	0x0800df58
 8000678:	0800df48 	.word	0x0800df48
 800067c:	0800df9c 	.word	0x0800df9c
 8000680:	0800dfac 	.word	0x0800dfac

08000684 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af02      	add	r7, sp, #8
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	f023 030f 	bic.w	r3, r3, #15
 8000694:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	011b      	lsls	r3, r3, #4
 800069a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800069c:	7b7b      	ldrb	r3, [r7, #13]
 800069e:	f043 030c 	orr.w	r3, r3, #12
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80006a6:	7b7b      	ldrb	r3, [r7, #13]
 80006a8:	f043 0308 	orr.w	r3, r3, #8
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80006b0:	7b3b      	ldrb	r3, [r7, #12]
 80006b2:	f043 030c 	orr.w	r3, r3, #12
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80006ba:	7b3b      	ldrb	r3, [r7, #12]
 80006bc:	f043 0308 	orr.w	r3, r3, #8
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80006c4:	bf00      	nop
 80006c6:	4825      	ldr	r0, [pc, #148]	; (800075c <lcd_send_cmd+0xd8>)
 80006c8:	f00a fc11 	bl	800aeee <HAL_I2C_GetError>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	d0f9      	beq.n	80006c6 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80006d2:	bf00      	nop
 80006d4:	4821      	ldr	r0, [pc, #132]	; (800075c <lcd_send_cmd+0xd8>)
 80006d6:	f00a fbfd 	bl	800aed4 <HAL_I2C_GetState>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b20      	cmp	r3, #32
 80006de:	d1f9      	bne.n	80006d4 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <lcd_send_cmd+0xdc>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d116      	bne.n	8000716 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
 80006ec:	e00f      	b.n	800070e <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80006ee:	7bfb      	ldrb	r3, [r7, #15]
 80006f0:	3310      	adds	r3, #16
 80006f2:	443b      	add	r3, r7
 80006f4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	f022 0208 	bic.w	r2, r2, #8
 80006fe:	b2d2      	uxtb	r2, r2
 8000700:	3310      	adds	r3, #16
 8000702:	443b      	add	r3, r7
 8000704:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	3301      	adds	r3, #1
 800070c:	73fb      	strb	r3, [r7, #15]
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	2b03      	cmp	r3, #3
 8000712:	d9ec      	bls.n	80006ee <lcd_send_cmd+0x6a>
 8000714:	e015      	b.n	8000742 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8000716:	2300      	movs	r3, #0
 8000718:	73bb      	strb	r3, [r7, #14]
 800071a:	e00f      	b.n	800073c <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 800071c:	7bbb      	ldrb	r3, [r7, #14]
 800071e:	3310      	adds	r3, #16
 8000720:	443b      	add	r3, r7
 8000722:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	f042 0208 	orr.w	r2, r2, #8
 800072c:	b2d2      	uxtb	r2, r2
 800072e:	3310      	adds	r3, #16
 8000730:	443b      	add	r3, r7
 8000732:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000736:	7bbb      	ldrb	r3, [r7, #14]
 8000738:	3301      	adds	r3, #1
 800073a:	73bb      	strb	r3, [r7, #14]
 800073c:	7bbb      	ldrb	r3, [r7, #14]
 800073e:	2b03      	cmp	r3, #3
 8000740:	d9ec      	bls.n	800071c <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000742:	f107 0208 	add.w	r2, r7, #8
 8000746:	2364      	movs	r3, #100	; 0x64
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2304      	movs	r3, #4
 800074c:	214e      	movs	r1, #78	; 0x4e
 800074e:	4803      	ldr	r0, [pc, #12]	; (800075c <lcd_send_cmd+0xd8>)
 8000750:	f009 ff60 	bl	800a614 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000754:	bf00      	nop
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000e5c 	.word	0x20000e5c
 8000760:	20000b36 	.word	0x20000b36

08000764 <lcd_send_data>:

void lcd_send_data (char data) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af02      	add	r7, sp, #8
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f023 030f 	bic.w	r3, r3, #15
 8000774:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	011b      	lsls	r3, r3, #4
 800077a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800077c:	7b7b      	ldrb	r3, [r7, #13]
 800077e:	f043 030d 	orr.w	r3, r3, #13
 8000782:	b2db      	uxtb	r3, r3
 8000784:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000786:	7b7b      	ldrb	r3, [r7, #13]
 8000788:	f043 0309 	orr.w	r3, r3, #9
 800078c:	b2db      	uxtb	r3, r3
 800078e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000790:	7b3b      	ldrb	r3, [r7, #12]
 8000792:	f043 030d 	orr.w	r3, r3, #13
 8000796:	b2db      	uxtb	r3, r3
 8000798:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800079a:	7b3b      	ldrb	r3, [r7, #12]
 800079c:	f043 0309 	orr.w	r3, r3, #9
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80007a4:	bf00      	nop
 80007a6:	4825      	ldr	r0, [pc, #148]	; (800083c <lcd_send_data+0xd8>)
 80007a8:	f00a fba1 	bl	800aeee <HAL_I2C_GetError>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	d0f9      	beq.n	80007a6 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80007b2:	bf00      	nop
 80007b4:	4821      	ldr	r0, [pc, #132]	; (800083c <lcd_send_data+0xd8>)
 80007b6:	f00a fb8d 	bl	800aed4 <HAL_I2C_GetState>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b20      	cmp	r3, #32
 80007be:	d1f9      	bne.n	80007b4 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <lcd_send_data+0xdc>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d116      	bne.n	80007f6 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80007c8:	2300      	movs	r3, #0
 80007ca:	73fb      	strb	r3, [r7, #15]
 80007cc:	e00f      	b.n	80007ee <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	3310      	adds	r3, #16
 80007d2:	443b      	add	r3, r7
 80007d4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80007d8:	7bfb      	ldrb	r3, [r7, #15]
 80007da:	f022 0208 	bic.w	r2, r2, #8
 80007de:	b2d2      	uxtb	r2, r2
 80007e0:	3310      	adds	r3, #16
 80007e2:	443b      	add	r3, r7
 80007e4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2b03      	cmp	r3, #3
 80007f2:	d9ec      	bls.n	80007ce <lcd_send_data+0x6a>
 80007f4:	e015      	b.n	8000822 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80007f6:	2300      	movs	r3, #0
 80007f8:	73bb      	strb	r3, [r7, #14]
 80007fa:	e00f      	b.n	800081c <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80007fc:	7bbb      	ldrb	r3, [r7, #14]
 80007fe:	3310      	adds	r3, #16
 8000800:	443b      	add	r3, r7
 8000802:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000806:	7bbb      	ldrb	r3, [r7, #14]
 8000808:	f042 0208 	orr.w	r2, r2, #8
 800080c:	b2d2      	uxtb	r2, r2
 800080e:	3310      	adds	r3, #16
 8000810:	443b      	add	r3, r7
 8000812:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000816:	7bbb      	ldrb	r3, [r7, #14]
 8000818:	3301      	adds	r3, #1
 800081a:	73bb      	strb	r3, [r7, #14]
 800081c:	7bbb      	ldrb	r3, [r7, #14]
 800081e:	2b03      	cmp	r3, #3
 8000820:	d9ec      	bls.n	80007fc <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000822:	f107 0208 	add.w	r2, r7, #8
 8000826:	2364      	movs	r3, #100	; 0x64
 8000828:	9300      	str	r3, [sp, #0]
 800082a:	2304      	movs	r3, #4
 800082c:	214e      	movs	r1, #78	; 0x4e
 800082e:	4803      	ldr	r0, [pc, #12]	; (800083c <lcd_send_data+0xd8>)
 8000830:	f009 fef0 	bl	800a614 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000834:	bf00      	nop
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000e5c 	.word	0x20000e5c
 8000840:	20000b36 	.word	0x20000b36

08000844 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	while (*str) {
 800084c:	e006      	b.n	800085c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	1c5a      	adds	r2, r3, #1
 8000852:	607a      	str	r2, [r7, #4]
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ff84 	bl	8000764 <lcd_send_data>
	while (*str) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d1f4      	bne.n	800084e <lcd_send_string+0xa>
	}
}
 8000864:	bf00      	nop
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af02      	add	r7, sp, #8
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	f023 030f 	bic.w	r3, r3, #15
 8000880:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	011b      	lsls	r3, r3, #4
 8000886:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8000888:	7b7b      	ldrb	r3, [r7, #13]
 800088a:	f043 030d 	orr.w	r3, r3, #13
 800088e:	b2db      	uxtb	r3, r3
 8000890:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000892:	7b7b      	ldrb	r3, [r7, #13]
 8000894:	f043 0309 	orr.w	r3, r3, #9
 8000898:	b2db      	uxtb	r3, r3
 800089a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 800089c:	7b3b      	ldrb	r3, [r7, #12]
 800089e:	f043 030d 	orr.w	r3, r3, #13
 80008a2:	b2db      	uxtb	r3, r3
 80008a4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80008a6:	7b3b      	ldrb	r3, [r7, #12]
 80008a8:	f043 0309 	orr.w	r3, r3, #9
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80008b0:	bf00      	nop
 80008b2:	4825      	ldr	r0, [pc, #148]	; (8000948 <lcd_send_char+0xd8>)
 80008b4:	f00a fb1b 	bl	800aeee <HAL_I2C_GetError>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	d0f9      	beq.n	80008b2 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80008be:	bf00      	nop
 80008c0:	4821      	ldr	r0, [pc, #132]	; (8000948 <lcd_send_char+0xd8>)
 80008c2:	f00a fb07 	bl	800aed4 <HAL_I2C_GetState>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b20      	cmp	r3, #32
 80008ca:	d1f9      	bne.n	80008c0 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80008cc:	4b1f      	ldr	r3, [pc, #124]	; (800094c <lcd_send_char+0xdc>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d116      	bne.n	8000902 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80008d4:	2300      	movs	r3, #0
 80008d6:	73fb      	strb	r3, [r7, #15]
 80008d8:	e00f      	b.n	80008fa <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	3310      	adds	r3, #16
 80008de:	443b      	add	r3, r7
 80008e0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	f022 0208 	bic.w	r2, r2, #8
 80008ea:	b2d2      	uxtb	r2, r2
 80008ec:	3310      	adds	r3, #16
 80008ee:	443b      	add	r3, r7
 80008f0:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80008f4:	7bfb      	ldrb	r3, [r7, #15]
 80008f6:	3301      	adds	r3, #1
 80008f8:	73fb      	strb	r3, [r7, #15]
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d9ec      	bls.n	80008da <lcd_send_char+0x6a>
 8000900:	e015      	b.n	800092e <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8000902:	2300      	movs	r3, #0
 8000904:	73bb      	strb	r3, [r7, #14]
 8000906:	e00f      	b.n	8000928 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8000908:	7bbb      	ldrb	r3, [r7, #14]
 800090a:	3310      	adds	r3, #16
 800090c:	443b      	add	r3, r7
 800090e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000912:	7bbb      	ldrb	r3, [r7, #14]
 8000914:	f042 0208 	orr.w	r2, r2, #8
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	3310      	adds	r3, #16
 800091c:	443b      	add	r3, r7
 800091e:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8000922:	7bbb      	ldrb	r3, [r7, #14]
 8000924:	3301      	adds	r3, #1
 8000926:	73bb      	strb	r3, [r7, #14]
 8000928:	7bbb      	ldrb	r3, [r7, #14]
 800092a:	2b03      	cmp	r3, #3
 800092c:	d9ec      	bls.n	8000908 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 800092e:	f107 0208 	add.w	r2, r7, #8
 8000932:	2364      	movs	r3, #100	; 0x64
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2304      	movs	r3, #4
 8000938:	214e      	movs	r1, #78	; 0x4e
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <lcd_send_char+0xd8>)
 800093c:	f009 fe6a 	bl	800a614 <HAL_I2C_Master_Transmit>
}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000e5c 	.word	0x20000e5c
 800094c:	20000b36 	.word	0x20000b36

08000950 <lcd_init>:

void lcd_init (void) {
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000954:	2002      	movs	r0, #2
 8000956:	f7ff fe95 	bl	8000684 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800095a:	2028      	movs	r0, #40	; 0x28
 800095c:	f7ff fe92 	bl	8000684 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000960:	200c      	movs	r0, #12
 8000962:	f7ff fe8f 	bl	8000684 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8000966:	2080      	movs	r0, #128	; 0x80
 8000968:	f7ff fe8c 	bl	8000684 <lcd_send_cmd>
	lcd_backlight(1);
 800096c:	2001      	movs	r0, #1
 800096e:	f000 f86d 	bl	8000a4c <lcd_backlight>
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}

08000976 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8000976:	b580      	push	{r7, lr}
 8000978:	b082      	sub	sp, #8
 800097a:	af00      	add	r7, sp, #0
 800097c:	4603      	mov	r3, r0
 800097e:	460a      	mov	r2, r1
 8000980:	71fb      	strb	r3, [r7, #7]
 8000982:	4613      	mov	r3, r2
 8000984:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d106      	bne.n	800099a <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 800098c:	79bb      	ldrb	r3, [r7, #6]
 800098e:	337f      	adds	r3, #127	; 0x7f
 8000990:	b2db      	uxtb	r3, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fe76 	bl	8000684 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8000998:	e008      	b.n	80009ac <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b02      	cmp	r3, #2
 800099e:	d105      	bne.n	80009ac <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80009a0:	79bb      	ldrb	r3, [r7, #6]
 80009a2:	3b41      	subs	r3, #65	; 0x41
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fe6c 	bl	8000684 <lcd_send_cmd>
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	603a      	str	r2, [r7, #0]
 80009be:	71fb      	strb	r3, [r7, #7]
 80009c0:	460b      	mov	r3, r1
 80009c2:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80009c4:	79ba      	ldrb	r2, [r7, #6]
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	4611      	mov	r1, r2
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff ffd3 	bl	8000976 <lcd_gotoxy>
	lcd_send_string(str);
 80009d0:	6838      	ldr	r0, [r7, #0]
 80009d2:	f7ff ff37 	bl	8000844 <lcd_send_string>
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	4603      	mov	r3, r0
 80009e6:	71fb      	strb	r3, [r7, #7]
 80009e8:	460b      	mov	r3, r1
 80009ea:	71bb      	strb	r3, [r7, #6]
 80009ec:	4613      	mov	r3, r2
 80009ee:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80009f0:	79ba      	ldrb	r2, [r7, #6]
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	4611      	mov	r1, r2
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ffbd 	bl	8000976 <lcd_gotoxy>
    lcd_send_char(ch);
 80009fc:	797b      	ldrb	r3, [r7, #5]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff36 	bl	8000870 <lcd_send_char>
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <lcd_clear>:

void lcd_clear(void) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f7ff fe37 	bl	8000684 <lcd_send_cmd>
    HAL_Delay(2);
 8000a16:	2002      	movs	r0, #2
 8000a18:	f008 fe70 	bl	80096fc <HAL_Delay>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	460a      	mov	r2, r1
 8000a2a:	71fb      	strb	r3, [r7, #7]
 8000a2c:	4613      	mov	r3, r2
 8000a2e:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8000a30:	79ba      	ldrb	r2, [r7, #6]
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	4611      	mov	r1, r2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff ff9d 	bl	8000976 <lcd_gotoxy>

    lcd_send_char(' ');
 8000a3c:	2020      	movs	r0, #32
 8000a3e:	f7ff ff17 	bl	8000870 <lcd_send_char>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8000a56:	4a05      	ldr	r2, [pc, #20]	; (8000a6c <lcd_backlight+0x20>)
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	f7ff fe11 	bl	8000684 <lcd_send_cmd>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000b36 	.word	0x20000b36

08000a70 <lcd_cursor>:

void lcd_cursor(int state) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d106      	bne.n	8000a8c <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8000a7e:	200e      	movs	r0, #14
 8000a80:	f7ff fe00 	bl	8000684 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000a84:	200f      	movs	r0, #15
 8000a86:	f7ff fdfd 	bl	8000684 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8000a8a:	e002      	b.n	8000a92 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8000a8c:	200c      	movs	r0, #12
 8000a8e:	f7ff fdf9 	bl	8000684 <lcd_send_cmd>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000aa0:	f3bf 8f4f 	dsb	sy
}
 8000aa4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <__NVIC_SystemReset+0x24>)
 8000aa8:	68db      	ldr	r3, [r3, #12]
 8000aaa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000aae:	4904      	ldr	r1, [pc, #16]	; (8000ac0 <__NVIC_SystemReset+0x24>)
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <__NVIC_SystemReset+0x28>)
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab6:	f3bf 8f4f 	dsb	sy
}
 8000aba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <__NVIC_SystemReset+0x20>
 8000ac0:	e000ed00 	.word	0xe000ed00
 8000ac4:	05fa0004 	.word	0x05fa0004

08000ac8 <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff fba7 	bl	8000224 <strlen>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	3301      	adds	r3, #1
 8000ada:	4618      	mov	r0, r3
 8000adc:	f00c fc68 	bl	800d3b0 <malloc>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d003      	beq.n	8000af2 <copyText+0x2a>
        strcpy(result, text);
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	68f8      	ldr	r0, [r7, #12]
 8000aee:	f00c fdff 	bl	800d6f0 <strcpy>
    }
    return result;
 8000af2:	68fb      	ldr	r3, [r7, #12]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000b06:	20c8      	movs	r0, #200	; 0xc8
 8000b08:	f008 fdf8 	bl	80096fc <HAL_Delay>
	lcd_clear();
 8000b0c:	f7ff ff7e 	bl	8000a0c <lcd_clear>
	if(type == 1 && page == 0) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b01      	cmp	r3, #1
 8000b14:	d143      	bne.n	8000b9e <printTemplate+0xa2>
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d140      	bne.n	8000b9e <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000b1c:	4ac1      	ldr	r2, [pc, #772]	; (8000e24 <printTemplate+0x328>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	2001      	movs	r0, #1
 8000b22:	f7ff ff47 	bl	80009b4 <lcd_print>
		lcd_print(2, 3, "0");
 8000b26:	4ac0      	ldr	r2, [pc, #768]	; (8000e28 <printTemplate+0x32c>)
 8000b28:	2103      	movs	r1, #3
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	f7ff ff42 	bl	80009b4 <lcd_print>
		lcd_print(2, 4, "1");
 8000b30:	4abe      	ldr	r2, [pc, #760]	; (8000e2c <printTemplate+0x330>)
 8000b32:	2104      	movs	r1, #4
 8000b34:	2002      	movs	r0, #2
 8000b36:	f7ff ff3d 	bl	80009b4 <lcd_print>
		lcd_print(2, 5, "2");
 8000b3a:	4abd      	ldr	r2, [pc, #756]	; (8000e30 <printTemplate+0x334>)
 8000b3c:	2105      	movs	r1, #5
 8000b3e:	2002      	movs	r0, #2
 8000b40:	f7ff ff38 	bl	80009b4 <lcd_print>
		lcd_print(2, 6, "3");
 8000b44:	4abb      	ldr	r2, [pc, #748]	; (8000e34 <printTemplate+0x338>)
 8000b46:	2106      	movs	r1, #6
 8000b48:	2002      	movs	r0, #2
 8000b4a:	f7ff ff33 	bl	80009b4 <lcd_print>
		lcd_print(2, 7, "4");
 8000b4e:	4aba      	ldr	r2, [pc, #744]	; (8000e38 <printTemplate+0x33c>)
 8000b50:	2107      	movs	r1, #7
 8000b52:	2002      	movs	r0, #2
 8000b54:	f7ff ff2e 	bl	80009b4 <lcd_print>
		lcd_print(2, 10, "5");
 8000b58:	4ab8      	ldr	r2, [pc, #736]	; (8000e3c <printTemplate+0x340>)
 8000b5a:	210a      	movs	r1, #10
 8000b5c:	2002      	movs	r0, #2
 8000b5e:	f7ff ff29 	bl	80009b4 <lcd_print>
		lcd_print(2, 11, "6");
 8000b62:	4ab7      	ldr	r2, [pc, #732]	; (8000e40 <printTemplate+0x344>)
 8000b64:	210b      	movs	r1, #11
 8000b66:	2002      	movs	r0, #2
 8000b68:	f7ff ff24 	bl	80009b4 <lcd_print>
		lcd_print(2, 12, "7");
 8000b6c:	4ab5      	ldr	r2, [pc, #724]	; (8000e44 <printTemplate+0x348>)
 8000b6e:	210c      	movs	r1, #12
 8000b70:	2002      	movs	r0, #2
 8000b72:	f7ff ff1f 	bl	80009b4 <lcd_print>
		lcd_print(2, 13, "8");
 8000b76:	4ab4      	ldr	r2, [pc, #720]	; (8000e48 <printTemplate+0x34c>)
 8000b78:	210d      	movs	r1, #13
 8000b7a:	2002      	movs	r0, #2
 8000b7c:	f7ff ff1a 	bl	80009b4 <lcd_print>
		lcd_print(2, 14, "9");
 8000b80:	4ab2      	ldr	r2, [pc, #712]	; (8000e4c <printTemplate+0x350>)
 8000b82:	210e      	movs	r1, #14
 8000b84:	2002      	movs	r0, #2
 8000b86:	f7ff ff15 	bl	80009b4 <lcd_print>
		lcd_print(1, 5, machineID);
 8000b8a:	4ab1      	ldr	r2, [pc, #708]	; (8000e50 <printTemplate+0x354>)
 8000b8c:	2105      	movs	r1, #5
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f7ff ff10 	bl	80009b4 <lcd_print>
		lcd_gotoxy(2, 3);
 8000b94:	2103      	movs	r1, #3
 8000b96:	2002      	movs	r0, #2
 8000b98:	f7ff feed 	bl	8000976 <lcd_gotoxy>
				slideText(wifiPass, 7, 1);
			}
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000b9c:	e19a      	b.n	8000ed4 <printTemplate+0x3d8>
	} else if(type == 2) {
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	f040 80b5 	bne.w	8000d10 <printTemplate+0x214>
		if(page == 1) {
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d120      	bne.n	8000bee <printTemplate+0xf2>
			lcd_clear();
 8000bac:	f7ff ff2e 	bl	8000a0c <lcd_clear>
			HAL_Delay(100);
 8000bb0:	2064      	movs	r0, #100	; 0x64
 8000bb2:	f008 fda3 	bl	80096fc <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000bb6:	4aa7      	ldr	r2, [pc, #668]	; (8000e54 <printTemplate+0x358>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	2001      	movs	r0, #1
 8000bbc:	f7ff fefa 	bl	80009b4 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000bc0:	48a5      	ldr	r0, [pc, #660]	; (8000e58 <printTemplate+0x35c>)
 8000bc2:	f7ff fb2f 	bl	8000224 <strlen>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b0a      	cmp	r3, #10
 8000bca:	d805      	bhi.n	8000bd8 <printTemplate+0xdc>
				lcd_print(1, 7, wifiSSID);
 8000bcc:	4aa2      	ldr	r2, [pc, #648]	; (8000e58 <printTemplate+0x35c>)
 8000bce:	2107      	movs	r1, #7
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f7ff feef 	bl	80009b4 <lcd_print>
 8000bd6:	e004      	b.n	8000be2 <printTemplate+0xe6>
				slideText(wifiSSID, 7, 1);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2107      	movs	r1, #7
 8000bdc:	489e      	ldr	r0, [pc, #632]	; (8000e58 <printTemplate+0x35c>)
 8000bde:	f000 ffeb 	bl	8001bb8 <slideText>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000be2:	4a9e      	ldr	r2, [pc, #632]	; (8000e5c <printTemplate+0x360>)
 8000be4:	2101      	movs	r1, #1
 8000be6:	2002      	movs	r0, #2
 8000be8:	f7ff fee4 	bl	80009b4 <lcd_print>
}
 8000bec:	e172      	b.n	8000ed4 <printTemplate+0x3d8>
		} else if(page == 2) {
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d120      	bne.n	8000c36 <printTemplate+0x13a>
			lcd_clear();
 8000bf4:	f7ff ff0a 	bl	8000a0c <lcd_clear>
			HAL_Delay(100);
 8000bf8:	2064      	movs	r0, #100	; 0x64
 8000bfa:	f008 fd7f 	bl	80096fc <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000bfe:	4a95      	ldr	r2, [pc, #596]	; (8000e54 <printTemplate+0x358>)
 8000c00:	2101      	movs	r1, #1
 8000c02:	2001      	movs	r0, #1
 8000c04:	f7ff fed6 	bl	80009b4 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000c08:	4893      	ldr	r0, [pc, #588]	; (8000e58 <printTemplate+0x35c>)
 8000c0a:	f7ff fb0b 	bl	8000224 <strlen>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b0a      	cmp	r3, #10
 8000c12:	d805      	bhi.n	8000c20 <printTemplate+0x124>
				lcd_print(1, 7, wifiSSID);
 8000c14:	4a90      	ldr	r2, [pc, #576]	; (8000e58 <printTemplate+0x35c>)
 8000c16:	2107      	movs	r1, #7
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f7ff fecb 	bl	80009b4 <lcd_print>
 8000c1e:	e004      	b.n	8000c2a <printTemplate+0x12e>
				slideText(wifiSSID, 7, 1);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2107      	movs	r1, #7
 8000c24:	488c      	ldr	r0, [pc, #560]	; (8000e58 <printTemplate+0x35c>)
 8000c26:	f000 ffc7 	bl	8001bb8 <slideText>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000c2a:	4a8d      	ldr	r2, [pc, #564]	; (8000e60 <printTemplate+0x364>)
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	2002      	movs	r0, #2
 8000c30:	f7ff fec0 	bl	80009b4 <lcd_print>
}
 8000c34:	e14e      	b.n	8000ed4 <printTemplate+0x3d8>
		} else if(page == 3) {
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	2b03      	cmp	r3, #3
 8000c3a:	d120      	bne.n	8000c7e <printTemplate+0x182>
			lcd_clear();
 8000c3c:	f7ff fee6 	bl	8000a0c <lcd_clear>
			HAL_Delay(100);
 8000c40:	2064      	movs	r0, #100	; 0x64
 8000c42:	f008 fd5b 	bl	80096fc <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000c46:	4a83      	ldr	r2, [pc, #524]	; (8000e54 <printTemplate+0x358>)
 8000c48:	2101      	movs	r1, #1
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff feb2 	bl	80009b4 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000c50:	4881      	ldr	r0, [pc, #516]	; (8000e58 <printTemplate+0x35c>)
 8000c52:	f7ff fae7 	bl	8000224 <strlen>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b0a      	cmp	r3, #10
 8000c5a:	d805      	bhi.n	8000c68 <printTemplate+0x16c>
				lcd_print(1, 7, wifiSSID);
 8000c5c:	4a7e      	ldr	r2, [pc, #504]	; (8000e58 <printTemplate+0x35c>)
 8000c5e:	2107      	movs	r1, #7
 8000c60:	2001      	movs	r0, #1
 8000c62:	f7ff fea7 	bl	80009b4 <lcd_print>
 8000c66:	e004      	b.n	8000c72 <printTemplate+0x176>
				slideText(wifiSSID, 7, 1);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2107      	movs	r1, #7
 8000c6c:	487a      	ldr	r0, [pc, #488]	; (8000e58 <printTemplate+0x35c>)
 8000c6e:	f000 ffa3 	bl	8001bb8 <slideText>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000c72:	4a7c      	ldr	r2, [pc, #496]	; (8000e64 <printTemplate+0x368>)
 8000c74:	2101      	movs	r1, #1
 8000c76:	2002      	movs	r0, #2
 8000c78:	f7ff fe9c 	bl	80009b4 <lcd_print>
}
 8000c7c:	e12a      	b.n	8000ed4 <printTemplate+0x3d8>
		} else if(page == 4) {
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	2b04      	cmp	r3, #4
 8000c82:	d120      	bne.n	8000cc6 <printTemplate+0x1ca>
			lcd_clear();
 8000c84:	f7ff fec2 	bl	8000a0c <lcd_clear>
			HAL_Delay(100);
 8000c88:	2064      	movs	r0, #100	; 0x64
 8000c8a:	f008 fd37 	bl	80096fc <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000c8e:	4a71      	ldr	r2, [pc, #452]	; (8000e54 <printTemplate+0x358>)
 8000c90:	2101      	movs	r1, #1
 8000c92:	2001      	movs	r0, #1
 8000c94:	f7ff fe8e 	bl	80009b4 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000c98:	486f      	ldr	r0, [pc, #444]	; (8000e58 <printTemplate+0x35c>)
 8000c9a:	f7ff fac3 	bl	8000224 <strlen>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b0a      	cmp	r3, #10
 8000ca2:	d805      	bhi.n	8000cb0 <printTemplate+0x1b4>
				lcd_print(1, 7, wifiSSID);
 8000ca4:	4a6c      	ldr	r2, [pc, #432]	; (8000e58 <printTemplate+0x35c>)
 8000ca6:	2107      	movs	r1, #7
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f7ff fe83 	bl	80009b4 <lcd_print>
 8000cae:	e004      	b.n	8000cba <printTemplate+0x1be>
				slideText(wifiSSID, 7, 1);
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	2107      	movs	r1, #7
 8000cb4:	4868      	ldr	r0, [pc, #416]	; (8000e58 <printTemplate+0x35c>)
 8000cb6:	f000 ff7f 	bl	8001bb8 <slideText>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000cba:	4a6b      	ldr	r2, [pc, #428]	; (8000e68 <printTemplate+0x36c>)
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	2002      	movs	r0, #2
 8000cc0:	f7ff fe78 	bl	80009b4 <lcd_print>
}
 8000cc4:	e106      	b.n	8000ed4 <printTemplate+0x3d8>
		} else if(page == 5) {
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	2b05      	cmp	r3, #5
 8000cca:	f040 8103 	bne.w	8000ed4 <printTemplate+0x3d8>
			lcd_clear();
 8000cce:	f7ff fe9d 	bl	8000a0c <lcd_clear>
			HAL_Delay(100);
 8000cd2:	2064      	movs	r0, #100	; 0x64
 8000cd4:	f008 fd12 	bl	80096fc <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000cd8:	4a5e      	ldr	r2, [pc, #376]	; (8000e54 <printTemplate+0x358>)
 8000cda:	2101      	movs	r1, #1
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f7ff fe69 	bl	80009b4 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000ce2:	485d      	ldr	r0, [pc, #372]	; (8000e58 <printTemplate+0x35c>)
 8000ce4:	f7ff fa9e 	bl	8000224 <strlen>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b0a      	cmp	r3, #10
 8000cec:	d805      	bhi.n	8000cfa <printTemplate+0x1fe>
				lcd_print(1, 7, wifiSSID);
 8000cee:	4a5a      	ldr	r2, [pc, #360]	; (8000e58 <printTemplate+0x35c>)
 8000cf0:	2107      	movs	r1, #7
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	f7ff fe5e 	bl	80009b4 <lcd_print>
 8000cf8:	e004      	b.n	8000d04 <printTemplate+0x208>
				slideText(wifiSSID, 7, 1);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2107      	movs	r1, #7
 8000cfe:	4856      	ldr	r0, [pc, #344]	; (8000e58 <printTemplate+0x35c>)
 8000d00:	f000 ff5a 	bl	8001bb8 <slideText>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000d04:	4a59      	ldr	r2, [pc, #356]	; (8000e6c <printTemplate+0x370>)
 8000d06:	2101      	movs	r1, #1
 8000d08:	2002      	movs	r0, #2
 8000d0a:	f7ff fe53 	bl	80009b4 <lcd_print>
}
 8000d0e:	e0e1      	b.n	8000ed4 <printTemplate+0x3d8>
	} else if(type == 3) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	f040 80de 	bne.w	8000ed4 <printTemplate+0x3d8>
		if(page == 1) {
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d120      	bne.n	8000d60 <printTemplate+0x264>
			lcd_clear();
 8000d1e:	f7ff fe75 	bl	8000a0c <lcd_clear>
			HAL_Delay(100);
 8000d22:	2064      	movs	r0, #100	; 0x64
 8000d24:	f008 fcea 	bl	80096fc <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000d28:	4a51      	ldr	r2, [pc, #324]	; (8000e70 <printTemplate+0x374>)
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff fe41 	bl	80009b4 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000d32:	4850      	ldr	r0, [pc, #320]	; (8000e74 <printTemplate+0x378>)
 8000d34:	f7ff fa76 	bl	8000224 <strlen>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b0a      	cmp	r3, #10
 8000d3c:	d805      	bhi.n	8000d4a <printTemplate+0x24e>
				lcd_print(1, 7, wifiPass);
 8000d3e:	4a4d      	ldr	r2, [pc, #308]	; (8000e74 <printTemplate+0x378>)
 8000d40:	2107      	movs	r1, #7
 8000d42:	2001      	movs	r0, #1
 8000d44:	f7ff fe36 	bl	80009b4 <lcd_print>
 8000d48:	e004      	b.n	8000d54 <printTemplate+0x258>
				slideText(wifiPass, 7, 1);
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2107      	movs	r1, #7
 8000d4e:	4849      	ldr	r0, [pc, #292]	; (8000e74 <printTemplate+0x378>)
 8000d50:	f000 ff32 	bl	8001bb8 <slideText>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000d54:	4a41      	ldr	r2, [pc, #260]	; (8000e5c <printTemplate+0x360>)
 8000d56:	2101      	movs	r1, #1
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f7ff fe2b 	bl	80009b4 <lcd_print>
}
 8000d5e:	e0b9      	b.n	8000ed4 <printTemplate+0x3d8>
		} else if(page == 2) {
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d120      	bne.n	8000da8 <printTemplate+0x2ac>
			lcd_clear();
 8000d66:	f7ff fe51 	bl	8000a0c <lcd_clear>
			HAL_Delay(100);
 8000d6a:	2064      	movs	r0, #100	; 0x64
 8000d6c:	f008 fcc6 	bl	80096fc <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000d70:	4a3f      	ldr	r2, [pc, #252]	; (8000e70 <printTemplate+0x374>)
 8000d72:	2101      	movs	r1, #1
 8000d74:	2001      	movs	r0, #1
 8000d76:	f7ff fe1d 	bl	80009b4 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000d7a:	483e      	ldr	r0, [pc, #248]	; (8000e74 <printTemplate+0x378>)
 8000d7c:	f7ff fa52 	bl	8000224 <strlen>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b0a      	cmp	r3, #10
 8000d84:	d805      	bhi.n	8000d92 <printTemplate+0x296>
				lcd_print(1, 7, wifiPass);
 8000d86:	4a3b      	ldr	r2, [pc, #236]	; (8000e74 <printTemplate+0x378>)
 8000d88:	2107      	movs	r1, #7
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff fe12 	bl	80009b4 <lcd_print>
 8000d90:	e004      	b.n	8000d9c <printTemplate+0x2a0>
				slideText(wifiPass, 7, 1);
 8000d92:	2201      	movs	r2, #1
 8000d94:	2107      	movs	r1, #7
 8000d96:	4837      	ldr	r0, [pc, #220]	; (8000e74 <printTemplate+0x378>)
 8000d98:	f000 ff0e 	bl	8001bb8 <slideText>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000d9c:	4a30      	ldr	r2, [pc, #192]	; (8000e60 <printTemplate+0x364>)
 8000d9e:	2101      	movs	r1, #1
 8000da0:	2002      	movs	r0, #2
 8000da2:	f7ff fe07 	bl	80009b4 <lcd_print>
}
 8000da6:	e095      	b.n	8000ed4 <printTemplate+0x3d8>
		} else if(page == 3) {
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	2b03      	cmp	r3, #3
 8000dac:	d120      	bne.n	8000df0 <printTemplate+0x2f4>
			lcd_clear();
 8000dae:	f7ff fe2d 	bl	8000a0c <lcd_clear>
			HAL_Delay(100);
 8000db2:	2064      	movs	r0, #100	; 0x64
 8000db4:	f008 fca2 	bl	80096fc <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000db8:	4a2d      	ldr	r2, [pc, #180]	; (8000e70 <printTemplate+0x374>)
 8000dba:	2101      	movs	r1, #1
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	f7ff fdf9 	bl	80009b4 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000dc2:	482c      	ldr	r0, [pc, #176]	; (8000e74 <printTemplate+0x378>)
 8000dc4:	f7ff fa2e 	bl	8000224 <strlen>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b0a      	cmp	r3, #10
 8000dcc:	d805      	bhi.n	8000dda <printTemplate+0x2de>
				lcd_print(1, 7, wifiPass);
 8000dce:	4a29      	ldr	r2, [pc, #164]	; (8000e74 <printTemplate+0x378>)
 8000dd0:	2107      	movs	r1, #7
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f7ff fdee 	bl	80009b4 <lcd_print>
 8000dd8:	e004      	b.n	8000de4 <printTemplate+0x2e8>
				slideText(wifiPass, 7, 1);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	2107      	movs	r1, #7
 8000dde:	4825      	ldr	r0, [pc, #148]	; (8000e74 <printTemplate+0x378>)
 8000de0:	f000 feea 	bl	8001bb8 <slideText>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000de4:	4a1f      	ldr	r2, [pc, #124]	; (8000e64 <printTemplate+0x368>)
 8000de6:	2101      	movs	r1, #1
 8000de8:	2002      	movs	r0, #2
 8000dea:	f7ff fde3 	bl	80009b4 <lcd_print>
}
 8000dee:	e071      	b.n	8000ed4 <printTemplate+0x3d8>
		} else if(page == 4) {
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d14b      	bne.n	8000e8e <printTemplate+0x392>
			lcd_clear();
 8000df6:	f7ff fe09 	bl	8000a0c <lcd_clear>
			HAL_Delay(100);
 8000dfa:	2064      	movs	r0, #100	; 0x64
 8000dfc:	f008 fc7e 	bl	80096fc <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000e00:	4a1b      	ldr	r2, [pc, #108]	; (8000e70 <printTemplate+0x374>)
 8000e02:	2101      	movs	r1, #1
 8000e04:	2001      	movs	r0, #1
 8000e06:	f7ff fdd5 	bl	80009b4 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000e0a:	481a      	ldr	r0, [pc, #104]	; (8000e74 <printTemplate+0x378>)
 8000e0c:	f7ff fa0a 	bl	8000224 <strlen>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b0a      	cmp	r3, #10
 8000e14:	d830      	bhi.n	8000e78 <printTemplate+0x37c>
				lcd_print(1, 7, wifiPass);
 8000e16:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <printTemplate+0x378>)
 8000e18:	2107      	movs	r1, #7
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f7ff fdca 	bl	80009b4 <lcd_print>
 8000e20:	e02f      	b.n	8000e82 <printTemplate+0x386>
 8000e22:	bf00      	nop
 8000e24:	0800dfb8 	.word	0x0800dfb8
 8000e28:	0800dfc0 	.word	0x0800dfc0
 8000e2c:	0800dfc4 	.word	0x0800dfc4
 8000e30:	0800dfc8 	.word	0x0800dfc8
 8000e34:	0800dfcc 	.word	0x0800dfcc
 8000e38:	0800dfd0 	.word	0x0800dfd0
 8000e3c:	0800dfd4 	.word	0x0800dfd4
 8000e40:	0800dfd8 	.word	0x0800dfd8
 8000e44:	0800dfdc 	.word	0x0800dfdc
 8000e48:	0800dfe0 	.word	0x0800dfe0
 8000e4c:	0800dfe4 	.word	0x0800dfe4
 8000e50:	20000bf4 	.word	0x20000bf4
 8000e54:	0800dfe8 	.word	0x0800dfe8
 8000e58:	20000c00 	.word	0x20000c00
 8000e5c:	0800dff0 	.word	0x0800dff0
 8000e60:	0800e004 	.word	0x0800e004
 8000e64:	0800e018 	.word	0x0800e018
 8000e68:	0800e02c 	.word	0x0800e02c
 8000e6c:	0800e040 	.word	0x0800e040
 8000e70:	0800e054 	.word	0x0800e054
 8000e74:	20000c24 	.word	0x20000c24
				slideText(wifiPass, 7, 1);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	2107      	movs	r1, #7
 8000e7c:	4817      	ldr	r0, [pc, #92]	; (8000edc <printTemplate+0x3e0>)
 8000e7e:	f000 fe9b 	bl	8001bb8 <slideText>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000e82:	4a17      	ldr	r2, [pc, #92]	; (8000ee0 <printTemplate+0x3e4>)
 8000e84:	2101      	movs	r1, #1
 8000e86:	2002      	movs	r0, #2
 8000e88:	f7ff fd94 	bl	80009b4 <lcd_print>
}
 8000e8c:	e022      	b.n	8000ed4 <printTemplate+0x3d8>
		} else if(page == 5) {
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	2b05      	cmp	r3, #5
 8000e92:	d11f      	bne.n	8000ed4 <printTemplate+0x3d8>
			lcd_clear();
 8000e94:	f7ff fdba 	bl	8000a0c <lcd_clear>
			HAL_Delay(100);
 8000e98:	2064      	movs	r0, #100	; 0x64
 8000e9a:	f008 fc2f 	bl	80096fc <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000e9e:	4a11      	ldr	r2, [pc, #68]	; (8000ee4 <printTemplate+0x3e8>)
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f7ff fd86 	bl	80009b4 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <printTemplate+0x3e0>)
 8000eaa:	f7ff f9bb 	bl	8000224 <strlen>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b0a      	cmp	r3, #10
 8000eb2:	d805      	bhi.n	8000ec0 <printTemplate+0x3c4>
				lcd_print(1, 7, wifiPass);
 8000eb4:	4a09      	ldr	r2, [pc, #36]	; (8000edc <printTemplate+0x3e0>)
 8000eb6:	2107      	movs	r1, #7
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f7ff fd7b 	bl	80009b4 <lcd_print>
 8000ebe:	e004      	b.n	8000eca <printTemplate+0x3ce>
				slideText(wifiPass, 7, 1);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2107      	movs	r1, #7
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <printTemplate+0x3e0>)
 8000ec6:	f000 fe77 	bl	8001bb8 <slideText>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000eca:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <printTemplate+0x3ec>)
 8000ecc:	2101      	movs	r1, #1
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f7ff fd70 	bl	80009b4 <lcd_print>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000c24 	.word	0x20000c24
 8000ee0:	0800e02c 	.word	0x0800e02c
 8000ee4:	0800e054 	.word	0x0800e054
 8000ee8:	0800e040 	.word	0x0800e040

08000eec <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <getCharFromCursorPosition+0x1c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	781b      	ldrb	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000960 	.word	0x20000960

08000f0c <iotModeStartup>:

void iotModeStartup(I2C_HandleTypeDef *hi2c1, UART_HandleTypeDef *huart1) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
	eepromKontrol4IoT();
 8000f16:	f005 fb87 	bl	8006628 <eepromKontrol4IoT>

	if(strlen(machineID) == 0) {
 8000f1a:	4b36      	ldr	r3, [pc, #216]	; (8000ff4 <iotModeStartup+0xe8>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d104      	bne.n	8000f2c <iotModeStartup+0x20>
	 takeMachineID(1, &hi2c1);
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	4619      	mov	r1, r3
 8000f26:	2001      	movs	r0, #1
 8000f28:	f000 f876 	bl	8001018 <takeMachineID>
	}

	lcd_clear();
 8000f2c:	f7ff fd6e 	bl	8000a0c <lcd_clear>
	HAL_Delay(500);
 8000f30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f34:	f008 fbe2 	bl	80096fc <HAL_Delay>

	if(iotMode == 1) {
 8000f38:	4b2f      	ldr	r3, [pc, #188]	; (8000ff8 <iotModeStartup+0xec>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d14f      	bne.n	8000fe0 <iotModeStartup+0xd4>
		if(strlen(wifiSSID) == 0) {
 8000f40:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <iotModeStartup+0xf0>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d104      	bne.n	8000f52 <iotModeStartup+0x46>
			takeWifiSSID(1, &hi2c1);
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	2001      	movs	r0, #1
 8000f4e:	f000 f97d 	bl	800124c <takeWifiSSID>
		}

		lcd_clear();
 8000f52:	f7ff fd5b 	bl	8000a0c <lcd_clear>
		HAL_Delay(500);
 8000f56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f5a:	f008 fbcf 	bl	80096fc <HAL_Delay>

		if(strlen(wifiPass) == 0) {
 8000f5e:	4b28      	ldr	r3, [pc, #160]	; (8001000 <iotModeStartup+0xf4>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d104      	bne.n	8000f70 <iotModeStartup+0x64>
			takeWifiPass(1, &hi2c1);
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	4619      	mov	r1, r3
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f000 faf6 	bl	800155c <takeWifiPass>
		}

		lcd_print(1, 1, "Wifi Ayarlaniyor");
 8000f70:	4a24      	ldr	r2, [pc, #144]	; (8001004 <iotModeStartup+0xf8>)
 8000f72:	2101      	movs	r1, #1
 8000f74:	2001      	movs	r0, #1
 8000f76:	f7ff fd1d 	bl	80009b4 <lcd_print>
		lcd_print(2, 1, "Lutfen Bekleyin ");
 8000f7a:	4a23      	ldr	r2, [pc, #140]	; (8001008 <iotModeStartup+0xfc>)
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	2002      	movs	r0, #2
 8000f80:	f7ff fd18 	bl	80009b4 <lcd_print>
		ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8000f84:	463b      	mov	r3, r7
 8000f86:	4a1e      	ldr	r2, [pc, #120]	; (8001000 <iotModeStartup+0xf4>)
 8000f88:	491c      	ldr	r1, [pc, #112]	; (8000ffc <iotModeStartup+0xf0>)
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff f952 	bl	8000234 <ESP8266_Init>
		HAL_Delay(500);
 8000f90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f94:	f008 fbb2 	bl	80096fc <HAL_Delay>
	}

	while(idKontrol != 1) {
 8000f98:	e022      	b.n	8000fe0 <iotModeStartup+0xd4>
		lcd_clear();
 8000f9a:	f7ff fd37 	bl	8000a0c <lcd_clear>
		HAL_Delay(100);
 8000f9e:	2064      	movs	r0, #100	; 0x64
 8000fa0:	f008 fbac 	bl	80096fc <HAL_Delay>
		lcd_print(1, 1, "ID HATASI       ");
 8000fa4:	4a19      	ldr	r2, [pc, #100]	; (800100c <iotModeStartup+0x100>)
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f7ff fd03 	bl	80009b4 <lcd_print>
		lcd_print(2, 1, "YENI ID GIRIN...");
 8000fae:	4a18      	ldr	r2, [pc, #96]	; (8001010 <iotModeStartup+0x104>)
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	2002      	movs	r0, #2
 8000fb4:	f7ff fcfe 	bl	80009b4 <lcd_print>
		HAL_Delay(2000);
 8000fb8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fbc:	f008 fb9e 	bl	80096fc <HAL_Delay>
		takeMachineID(0);
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 f829 	bl	8001018 <takeMachineID>
		HAL_Delay(300);
 8000fc6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000fca:	f008 fb97 	bl	80096fc <HAL_Delay>
		idKontrol = checkMachineID(&huart1, machineID);
 8000fce:	463b      	mov	r3, r7
 8000fd0:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <iotModeStartup+0xe8>)
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fa58 	bl	8000488 <checkMachineID>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <iotModeStartup+0x108>)
 8000fde:	701a      	strb	r2, [r3, #0]
	while(idKontrol != 1) {
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <iotModeStartup+0x108>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d1d8      	bne.n	8000f9a <iotModeStartup+0x8e>
	}
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000bf4 	.word	0x20000bf4
 8000ff8:	20000cbc 	.word	0x20000cbc
 8000ffc:	20000c00 	.word	0x20000c00
 8001000:	20000c24 	.word	0x20000c24
 8001004:	0800e05c 	.word	0x0800e05c
 8001008:	0800e070 	.word	0x0800e070
 800100c:	0800e084 	.word	0x0800e084
 8001010:	0800e098 	.word	0x0800e098
 8001014:	20000c45 	.word	0x20000c45

08001018 <takeMachineID>:

void takeMachineID(int state, I2C_HandleTypeDef *hi2c1) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
	lcd_cursor(1);
 8001022:	2001      	movs	r0, #1
 8001024:	f7ff fd24 	bl	8000a70 <lcd_cursor>

	if(state == 0) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d104      	bne.n	8001038 <takeMachineID+0x20>
	    memset(machineID, 0, sizeof(machineID));
 800102e:	220c      	movs	r2, #12
 8001030:	2100      	movs	r1, #0
 8001032:	4883      	ldr	r0, [pc, #524]	; (8001240 <takeMachineID+0x228>)
 8001034:	f00c fad2 	bl	800d5dc <memset>
	}

    int cursorPosition = 3;
 8001038:	2303      	movs	r3, #3
 800103a:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8001040:	2305      	movs	r3, #5
 8001042:	60fb      	str	r3, [r7, #12]

    printTemplate(1, 0);
 8001044:	2100      	movs	r1, #0
 8001046:	2001      	movs	r0, #1
 8001048:	f7ff fd58 	bl	8000afc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800104c:	2108      	movs	r1, #8
 800104e:	487d      	ldr	r0, [pc, #500]	; (8001244 <takeMachineID+0x22c>)
 8001050:	f009 f924 	bl	800a29c <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d108      	bne.n	800106c <takeMachineID+0x54>
        	lcd_cursor(0);
 800105a:	2000      	movs	r0, #0
 800105c:	f7ff fd08 	bl	8000a70 <lcd_cursor>

        	writeCharToEEPROM4ID(&hi2c1, machineID);
 8001060:	463b      	mov	r3, r7
 8001062:	4977      	ldr	r1, [pc, #476]	; (8001240 <takeMachineID+0x228>)
 8001064:	4618      	mov	r0, r3
 8001066:	f000 fc29 	bl	80018bc <writeCharToEEPROM4ID>

            break;
 800106a:	e0e4      	b.n	8001236 <takeMachineID+0x21e>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800106c:	2101      	movs	r1, #1
 800106e:	4875      	ldr	r0, [pc, #468]	; (8001244 <takeMachineID+0x22c>)
 8001070:	f009 f914 	bl	800a29c <HAL_GPIO_ReadPin>
 8001074:	4603      	mov	r3, r0
 8001076:	2b01      	cmp	r3, #1
 8001078:	d112      	bne.n	80010a0 <takeMachineID+0x88>
        	if(cursorPosition == 7) {
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	2b07      	cmp	r3, #7
 800107e:	d102      	bne.n	8001086 <takeMachineID+0x6e>
        		cursorPosition = 10;
 8001080:	230a      	movs	r3, #10
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	e008      	b.n	8001098 <takeMachineID+0x80>
        	} else if (cursorPosition == 14) {
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	2b0e      	cmp	r3, #14
 800108a:	d102      	bne.n	8001092 <takeMachineID+0x7a>
                cursorPosition = 3;
 800108c:	2303      	movs	r3, #3
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	e002      	b.n	8001098 <takeMachineID+0x80>
            } else {
            	cursorPosition++;
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	3301      	adds	r3, #1
 8001096:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8001098:	f44f 70af 	mov.w	r0, #350	; 0x15e
 800109c:	f008 fb2e 	bl	80096fc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80010a0:	2108      	movs	r1, #8
 80010a2:	4869      	ldr	r0, [pc, #420]	; (8001248 <takeMachineID+0x230>)
 80010a4:	f009 f8fa 	bl	800a29c <HAL_GPIO_ReadPin>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d112      	bne.n	80010d4 <takeMachineID+0xbc>
            if (cursorPosition == 3) {
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	2b03      	cmp	r3, #3
 80010b2:	d102      	bne.n	80010ba <takeMachineID+0xa2>
                cursorPosition = 14;
 80010b4:	230e      	movs	r3, #14
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	e008      	b.n	80010cc <takeMachineID+0xb4>
            } else if(cursorPosition == 10) {
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	2b0a      	cmp	r3, #10
 80010be:	d102      	bne.n	80010c6 <takeMachineID+0xae>
            	cursorPosition = 7;
 80010c0:	2307      	movs	r3, #7
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	e002      	b.n	80010cc <takeMachineID+0xb4>
            } else {
            	cursorPosition--;
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 80010cc:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80010d0:	f008 fb14 	bl	80096fc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80010d4:	2102      	movs	r1, #2
 80010d6:	485b      	ldr	r0, [pc, #364]	; (8001244 <takeMachineID+0x22c>)
 80010d8:	f009 f8e0 	bl	800a29c <HAL_GPIO_ReadPin>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d16c      	bne.n	80011bc <takeMachineID+0x1a4>
        	if(cursorPosition == 3) {
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	2b03      	cmp	r3, #3
 80010e6:	d105      	bne.n	80010f4 <takeMachineID+0xdc>
        		machineID[machineIDLoc] = '0';
 80010e8:	4a55      	ldr	r2, [pc, #340]	; (8001240 <takeMachineID+0x228>)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4413      	add	r3, r2
 80010ee:	2230      	movs	r2, #48	; 0x30
 80010f0:	701a      	strb	r2, [r3, #0]
 80010f2:	e04f      	b.n	8001194 <takeMachineID+0x17c>
        	} else if(cursorPosition == 4) {
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d105      	bne.n	8001106 <takeMachineID+0xee>
        		machineID[machineIDLoc] = '1';
 80010fa:	4a51      	ldr	r2, [pc, #324]	; (8001240 <takeMachineID+0x228>)
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4413      	add	r3, r2
 8001100:	2231      	movs	r2, #49	; 0x31
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	e046      	b.n	8001194 <takeMachineID+0x17c>
        	} else if(cursorPosition == 5) {
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	2b05      	cmp	r3, #5
 800110a:	d105      	bne.n	8001118 <takeMachineID+0x100>
        		machineID[machineIDLoc] = '2';
 800110c:	4a4c      	ldr	r2, [pc, #304]	; (8001240 <takeMachineID+0x228>)
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4413      	add	r3, r2
 8001112:	2232      	movs	r2, #50	; 0x32
 8001114:	701a      	strb	r2, [r3, #0]
 8001116:	e03d      	b.n	8001194 <takeMachineID+0x17c>
        	} else if(cursorPosition == 6) {
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	2b06      	cmp	r3, #6
 800111c:	d105      	bne.n	800112a <takeMachineID+0x112>
        		machineID[machineIDLoc] = '3';
 800111e:	4a48      	ldr	r2, [pc, #288]	; (8001240 <takeMachineID+0x228>)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4413      	add	r3, r2
 8001124:	2233      	movs	r2, #51	; 0x33
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	e034      	b.n	8001194 <takeMachineID+0x17c>
        	} else if(cursorPosition == 7) {
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	2b07      	cmp	r3, #7
 800112e:	d105      	bne.n	800113c <takeMachineID+0x124>
        		machineID[machineIDLoc] = '4';
 8001130:	4a43      	ldr	r2, [pc, #268]	; (8001240 <takeMachineID+0x228>)
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4413      	add	r3, r2
 8001136:	2234      	movs	r2, #52	; 0x34
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	e02b      	b.n	8001194 <takeMachineID+0x17c>
        	} else if(cursorPosition == 10) {
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	2b0a      	cmp	r3, #10
 8001140:	d105      	bne.n	800114e <takeMachineID+0x136>
        		machineID[machineIDLoc] = '5';
 8001142:	4a3f      	ldr	r2, [pc, #252]	; (8001240 <takeMachineID+0x228>)
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4413      	add	r3, r2
 8001148:	2235      	movs	r2, #53	; 0x35
 800114a:	701a      	strb	r2, [r3, #0]
 800114c:	e022      	b.n	8001194 <takeMachineID+0x17c>
        	} else if(cursorPosition == 11) {
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	2b0b      	cmp	r3, #11
 8001152:	d105      	bne.n	8001160 <takeMachineID+0x148>
        		machineID[machineIDLoc] = '6';
 8001154:	4a3a      	ldr	r2, [pc, #232]	; (8001240 <takeMachineID+0x228>)
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4413      	add	r3, r2
 800115a:	2236      	movs	r2, #54	; 0x36
 800115c:	701a      	strb	r2, [r3, #0]
 800115e:	e019      	b.n	8001194 <takeMachineID+0x17c>
        	} else if(cursorPosition == 12) {
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	2b0c      	cmp	r3, #12
 8001164:	d105      	bne.n	8001172 <takeMachineID+0x15a>
        		machineID[machineIDLoc] = '7';
 8001166:	4a36      	ldr	r2, [pc, #216]	; (8001240 <takeMachineID+0x228>)
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	4413      	add	r3, r2
 800116c:	2237      	movs	r2, #55	; 0x37
 800116e:	701a      	strb	r2, [r3, #0]
 8001170:	e010      	b.n	8001194 <takeMachineID+0x17c>
        	} else if(cursorPosition == 13) {
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	2b0d      	cmp	r3, #13
 8001176:	d105      	bne.n	8001184 <takeMachineID+0x16c>
        		machineID[machineIDLoc] = '8';
 8001178:	4a31      	ldr	r2, [pc, #196]	; (8001240 <takeMachineID+0x228>)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4413      	add	r3, r2
 800117e:	2238      	movs	r2, #56	; 0x38
 8001180:	701a      	strb	r2, [r3, #0]
 8001182:	e007      	b.n	8001194 <takeMachineID+0x17c>
        	} else if(cursorPosition == 14) {
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	2b0e      	cmp	r3, #14
 8001188:	d104      	bne.n	8001194 <takeMachineID+0x17c>
        		machineID[machineIDLoc] = '9';
 800118a:	4a2d      	ldr	r2, [pc, #180]	; (8001240 <takeMachineID+0x228>)
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	4413      	add	r3, r2
 8001190:	2239      	movs	r2, #57	; 0x39
 8001192:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	b2d9      	uxtb	r1, r3
 8001198:	4a29      	ldr	r2, [pc, #164]	; (8001240 <takeMachineID+0x228>)
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4413      	add	r3, r2
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	2001      	movs	r0, #1
 80011a4:	f7ff fc1b 	bl	80009de <lcd_print_char>

        	writeLoc++;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	3301      	adds	r3, #1
 80011ac:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	3301      	adds	r3, #1
 80011b2:	613b      	str	r3, [r7, #16]

        	HAL_Delay(350);
 80011b4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80011b8:	f008 faa0 	bl	80096fc <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80011bc:	2104      	movs	r1, #4
 80011be:	4821      	ldr	r0, [pc, #132]	; (8001244 <takeMachineID+0x22c>)
 80011c0:	f009 f86c 	bl	800a29c <HAL_GPIO_ReadPin>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d12e      	bne.n	8001228 <takeMachineID+0x210>
            if(strlen(machineID) >= 1) {
 80011ca:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <takeMachineID+0x228>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d027      	beq.n	8001222 <takeMachineID+0x20a>

                machineID[machineIDLoc] = '\0';
 80011d2:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <takeMachineID+0x228>)
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	4413      	add	r3, r2
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	3304      	adds	r3, #4
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4619      	mov	r1, r3
 80011e6:	2001      	movs	r0, #1
 80011e8:	f7ff fc1a 	bl	8000a20 <lcd_delete_char>
                HAL_Delay(50);
 80011ec:	2032      	movs	r0, #50	; 0x32
 80011ee:	f008 fa85 	bl	80096fc <HAL_Delay>

                if(writeLoc > 5) {
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2b05      	cmp	r3, #5
 80011f6:	dd03      	ble.n	8001200 <takeMachineID+0x1e8>
                	writeLoc--;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	e004      	b.n	800120a <takeMachineID+0x1f2>
                } else if(writeLoc < 5) {
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2b04      	cmp	r3, #4
 8001204:	dc01      	bgt.n	800120a <takeMachineID+0x1f2>
                	writeLoc = 5;
 8001206:	2305      	movs	r3, #5
 8001208:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	2b00      	cmp	r3, #0
 800120e:	dd03      	ble.n	8001218 <takeMachineID+0x200>
                	machineIDLoc--;
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	3b01      	subs	r3, #1
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	e004      	b.n	8001222 <takeMachineID+0x20a>
                } else if(machineIDLoc < 0) {
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	2b00      	cmp	r3, #0
 800121c:	da01      	bge.n	8001222 <takeMachineID+0x20a>
                	machineIDLoc = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(250);
 8001222:	20fa      	movs	r0, #250	; 0xfa
 8001224:	f008 fa6a 	bl	80096fc <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	4619      	mov	r1, r3
 800122e:	2002      	movs	r0, #2
 8001230:	f7ff fba1 	bl	8000976 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001234:	e70a      	b.n	800104c <takeMachineID+0x34>
    }
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000bf4 	.word	0x20000bf4
 8001244:	40010800 	.word	0x40010800
 8001248:	40011000 	.word	0x40011000

0800124c <takeWifiSSID>:

void takeWifiSSID(int state, I2C_HandleTypeDef *hi2c1) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	; 0x38
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
    lcd_cursor(1);
 8001256:	2001      	movs	r0, #1
 8001258:	f7ff fc0a 	bl	8000a70 <lcd_cursor>

    if(state == 0) {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d104      	bne.n	800126c <takeWifiSSID+0x20>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8001262:	2221      	movs	r2, #33	; 0x21
 8001264:	2100      	movs	r1, #0
 8001266:	4878      	ldr	r0, [pc, #480]	; (8001448 <takeWifiSSID+0x1fc>)
 8001268:	f00c f9b8 	bl	800d5dc <memset>
    }

    int realCharPos = 1;
 800126c:	2301      	movs	r3, #1
 800126e:	637b      	str	r3, [r7, #52]	; 0x34
    cursorPosition = 1;
 8001270:	4b76      	ldr	r3, [pc, #472]	; (800144c <takeWifiSSID+0x200>)
 8001272:	2201      	movs	r2, #1
 8001274:	601a      	str	r2, [r3, #0]
    page = 1;
 8001276:	4b76      	ldr	r3, [pc, #472]	; (8001450 <takeWifiSSID+0x204>)
 8001278:	2201      	movs	r2, #1
 800127a:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
    int writeLoc = 7;
 8001280:	2307      	movs	r3, #7
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t realCharPosLoc[33];

    printTemplate(2, 1);
 8001284:	2101      	movs	r1, #1
 8001286:	2002      	movs	r0, #2
 8001288:	f7ff fc38 	bl	8000afc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800128c:	2108      	movs	r1, #8
 800128e:	4871      	ldr	r0, [pc, #452]	; (8001454 <takeWifiSSID+0x208>)
 8001290:	f009 f804 	bl	800a29c <HAL_GPIO_ReadPin>
 8001294:	4603      	mov	r3, r0
 8001296:	2b01      	cmp	r3, #1
 8001298:	d109      	bne.n	80012ae <takeWifiSSID+0x62>
            lcd_cursor(0);
 800129a:	2000      	movs	r0, #0
 800129c:	f7ff fbe8 	bl	8000a70 <lcd_cursor>

            writeCharToEEPROM4Wifi(&hi2c1, wifiSSID, 1);
 80012a0:	463b      	mov	r3, r7
 80012a2:	2201      	movs	r2, #1
 80012a4:	4968      	ldr	r1, [pc, #416]	; (8001448 <takeWifiSSID+0x1fc>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fb56 	bl	8001958 <writeCharToEEPROM4Wifi>

            break;
 80012ac:	e14c      	b.n	8001548 <takeWifiSSID+0x2fc>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80012ae:	2101      	movs	r1, #1
 80012b0:	4868      	ldr	r0, [pc, #416]	; (8001454 <takeWifiSSID+0x208>)
 80012b2:	f008 fff3 	bl	800a29c <HAL_GPIO_ReadPin>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d166      	bne.n	800138a <takeWifiSSID+0x13e>
        	realCharPos++;
 80012bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012be:	3301      	adds	r3, #1
 80012c0:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos > 80) {
 80012c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c4:	2b50      	cmp	r3, #80	; 0x50
 80012c6:	dd01      	ble.n	80012cc <takeWifiSSID+0x80>
        		realCharPos = 1;
 80012c8:	2301      	movs	r3, #1
 80012ca:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if (cursorPosition == 16) {
 80012cc:	4b5f      	ldr	r3, [pc, #380]	; (800144c <takeWifiSSID+0x200>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b10      	cmp	r3, #16
 80012d2:	d152      	bne.n	800137a <takeWifiSSID+0x12e>
            	if(page == 1) {
 80012d4:	4b5e      	ldr	r3, [pc, #376]	; (8001450 <takeWifiSSID+0x204>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d10c      	bne.n	80012f6 <takeWifiSSID+0xaa>
            		cursorPosition = 1;
 80012dc:	4b5b      	ldr	r3, [pc, #364]	; (800144c <takeWifiSSID+0x200>)
 80012de:	2201      	movs	r2, #1
 80012e0:	601a      	str	r2, [r3, #0]
            		page++;
 80012e2:	4b5b      	ldr	r3, [pc, #364]	; (8001450 <takeWifiSSID+0x204>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	4a59      	ldr	r2, [pc, #356]	; (8001450 <takeWifiSSID+0x204>)
 80012ea:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 80012ec:	2102      	movs	r1, #2
 80012ee:	2002      	movs	r0, #2
 80012f0:	f7ff fc04 	bl	8000afc <printTemplate>
 80012f4:	e046      	b.n	8001384 <takeWifiSSID+0x138>
            	} else if(page == 2) {
 80012f6:	4b56      	ldr	r3, [pc, #344]	; (8001450 <takeWifiSSID+0x204>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d10c      	bne.n	8001318 <takeWifiSSID+0xcc>
            		cursorPosition = 1;
 80012fe:	4b53      	ldr	r3, [pc, #332]	; (800144c <takeWifiSSID+0x200>)
 8001300:	2201      	movs	r2, #1
 8001302:	601a      	str	r2, [r3, #0]
            		page++;
 8001304:	4b52      	ldr	r3, [pc, #328]	; (8001450 <takeWifiSSID+0x204>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	3301      	adds	r3, #1
 800130a:	4a51      	ldr	r2, [pc, #324]	; (8001450 <takeWifiSSID+0x204>)
 800130c:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 800130e:	2103      	movs	r1, #3
 8001310:	2002      	movs	r0, #2
 8001312:	f7ff fbf3 	bl	8000afc <printTemplate>
 8001316:	e035      	b.n	8001384 <takeWifiSSID+0x138>
            	} else if(page == 3) {
 8001318:	4b4d      	ldr	r3, [pc, #308]	; (8001450 <takeWifiSSID+0x204>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b03      	cmp	r3, #3
 800131e:	d10c      	bne.n	800133a <takeWifiSSID+0xee>
            		cursorPosition = 1;
 8001320:	4b4a      	ldr	r3, [pc, #296]	; (800144c <takeWifiSSID+0x200>)
 8001322:	2201      	movs	r2, #1
 8001324:	601a      	str	r2, [r3, #0]
            		page++;
 8001326:	4b4a      	ldr	r3, [pc, #296]	; (8001450 <takeWifiSSID+0x204>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	3301      	adds	r3, #1
 800132c:	4a48      	ldr	r2, [pc, #288]	; (8001450 <takeWifiSSID+0x204>)
 800132e:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8001330:	2104      	movs	r1, #4
 8001332:	2002      	movs	r0, #2
 8001334:	f7ff fbe2 	bl	8000afc <printTemplate>
 8001338:	e024      	b.n	8001384 <takeWifiSSID+0x138>
            	} else if(page == 4) {
 800133a:	4b45      	ldr	r3, [pc, #276]	; (8001450 <takeWifiSSID+0x204>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b04      	cmp	r3, #4
 8001340:	d10c      	bne.n	800135c <takeWifiSSID+0x110>
            		cursorPosition = 1;
 8001342:	4b42      	ldr	r3, [pc, #264]	; (800144c <takeWifiSSID+0x200>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]
            		page++;
 8001348:	4b41      	ldr	r3, [pc, #260]	; (8001450 <takeWifiSSID+0x204>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	4a40      	ldr	r2, [pc, #256]	; (8001450 <takeWifiSSID+0x204>)
 8001350:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8001352:	2105      	movs	r1, #5
 8001354:	2002      	movs	r0, #2
 8001356:	f7ff fbd1 	bl	8000afc <printTemplate>
 800135a:	e013      	b.n	8001384 <takeWifiSSID+0x138>
            	} else if(page == 5) {
 800135c:	4b3c      	ldr	r3, [pc, #240]	; (8001450 <takeWifiSSID+0x204>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b05      	cmp	r3, #5
 8001362:	d10f      	bne.n	8001384 <takeWifiSSID+0x138>
            		cursorPosition = 1;
 8001364:	4b39      	ldr	r3, [pc, #228]	; (800144c <takeWifiSSID+0x200>)
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]
            		page = 1;
 800136a:	4b39      	ldr	r3, [pc, #228]	; (8001450 <takeWifiSSID+0x204>)
 800136c:	2201      	movs	r2, #1
 800136e:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8001370:	2101      	movs	r1, #1
 8001372:	2002      	movs	r0, #2
 8001374:	f7ff fbc2 	bl	8000afc <printTemplate>
 8001378:	e004      	b.n	8001384 <takeWifiSSID+0x138>
            	}
            } else {
            	cursorPosition++;
 800137a:	4b34      	ldr	r3, [pc, #208]	; (800144c <takeWifiSSID+0x200>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	3301      	adds	r3, #1
 8001380:	4a32      	ldr	r2, [pc, #200]	; (800144c <takeWifiSSID+0x200>)
 8001382:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001384:	20fa      	movs	r0, #250	; 0xfa
 8001386:	f008 f9b9 	bl	80096fc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800138a:	2108      	movs	r1, #8
 800138c:	4832      	ldr	r0, [pc, #200]	; (8001458 <takeWifiSSID+0x20c>)
 800138e:	f008 ff85 	bl	800a29c <HAL_GPIO_ReadPin>
 8001392:	4603      	mov	r3, r0
 8001394:	2b01      	cmp	r3, #1
 8001396:	d169      	bne.n	800146c <takeWifiSSID+0x220>
        	realCharPos--;
 8001398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139a:	3b01      	subs	r3, #1
 800139c:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos < 1) {
 800139e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	dc01      	bgt.n	80013a8 <takeWifiSSID+0x15c>
        		realCharPos = 80;
 80013a4:	2350      	movs	r3, #80	; 0x50
 80013a6:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if(cursorPosition == 1) {
 80013a8:	4b28      	ldr	r3, [pc, #160]	; (800144c <takeWifiSSID+0x200>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d155      	bne.n	800145c <takeWifiSSID+0x210>
            	if(page == 1) {
 80013b0:	4b27      	ldr	r3, [pc, #156]	; (8001450 <takeWifiSSID+0x204>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d10a      	bne.n	80013ce <takeWifiSSID+0x182>
            		cursorPosition = 16;
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <takeWifiSSID+0x200>)
 80013ba:	2210      	movs	r2, #16
 80013bc:	601a      	str	r2, [r3, #0]
            		page = 5;
 80013be:	4b24      	ldr	r3, [pc, #144]	; (8001450 <takeWifiSSID+0x204>)
 80013c0:	2205      	movs	r2, #5
 80013c2:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 80013c4:	2105      	movs	r1, #5
 80013c6:	2002      	movs	r0, #2
 80013c8:	f7ff fb98 	bl	8000afc <printTemplate>
 80013cc:	e04b      	b.n	8001466 <takeWifiSSID+0x21a>
            	} else if(page == 2) {
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <takeWifiSSID+0x204>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d10a      	bne.n	80013ec <takeWifiSSID+0x1a0>
            		cursorPosition = 16;
 80013d6:	4b1d      	ldr	r3, [pc, #116]	; (800144c <takeWifiSSID+0x200>)
 80013d8:	2210      	movs	r2, #16
 80013da:	601a      	str	r2, [r3, #0]
            		page = 1;
 80013dc:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <takeWifiSSID+0x204>)
 80013de:	2201      	movs	r2, #1
 80013e0:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 80013e2:	2101      	movs	r1, #1
 80013e4:	2002      	movs	r0, #2
 80013e6:	f7ff fb89 	bl	8000afc <printTemplate>
 80013ea:	e03c      	b.n	8001466 <takeWifiSSID+0x21a>
            	} else if(page == 3) {
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <takeWifiSSID+0x204>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b03      	cmp	r3, #3
 80013f2:	d10a      	bne.n	800140a <takeWifiSSID+0x1be>
            		cursorPosition = 16;
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <takeWifiSSID+0x200>)
 80013f6:	2210      	movs	r2, #16
 80013f8:	601a      	str	r2, [r3, #0]
            		page = 2;
 80013fa:	4b15      	ldr	r3, [pc, #84]	; (8001450 <takeWifiSSID+0x204>)
 80013fc:	2202      	movs	r2, #2
 80013fe:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8001400:	2102      	movs	r1, #2
 8001402:	2002      	movs	r0, #2
 8001404:	f7ff fb7a 	bl	8000afc <printTemplate>
 8001408:	e02d      	b.n	8001466 <takeWifiSSID+0x21a>
            	} else if(page == 4) {
 800140a:	4b11      	ldr	r3, [pc, #68]	; (8001450 <takeWifiSSID+0x204>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b04      	cmp	r3, #4
 8001410:	d10a      	bne.n	8001428 <takeWifiSSID+0x1dc>
            		cursorPosition = 16;
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <takeWifiSSID+0x200>)
 8001414:	2210      	movs	r2, #16
 8001416:	601a      	str	r2, [r3, #0]
            		page = 3;
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <takeWifiSSID+0x204>)
 800141a:	2203      	movs	r2, #3
 800141c:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 800141e:	2103      	movs	r1, #3
 8001420:	2002      	movs	r0, #2
 8001422:	f7ff fb6b 	bl	8000afc <printTemplate>
 8001426:	e01e      	b.n	8001466 <takeWifiSSID+0x21a>
            	} else if(page == 5) {
 8001428:	4b09      	ldr	r3, [pc, #36]	; (8001450 <takeWifiSSID+0x204>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b05      	cmp	r3, #5
 800142e:	d11a      	bne.n	8001466 <takeWifiSSID+0x21a>
            		cursorPosition = 16;
 8001430:	4b06      	ldr	r3, [pc, #24]	; (800144c <takeWifiSSID+0x200>)
 8001432:	2210      	movs	r2, #16
 8001434:	601a      	str	r2, [r3, #0]
            		page = 4;
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <takeWifiSSID+0x204>)
 8001438:	2204      	movs	r2, #4
 800143a:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 800143c:	2104      	movs	r1, #4
 800143e:	2002      	movs	r0, #2
 8001440:	f7ff fb5c 	bl	8000afc <printTemplate>
 8001444:	e00f      	b.n	8001466 <takeWifiSSID+0x21a>
 8001446:	bf00      	nop
 8001448:	20000c00 	.word	0x20000c00
 800144c:	20000944 	.word	0x20000944
 8001450:	20000948 	.word	0x20000948
 8001454:	40010800 	.word	0x40010800
 8001458:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 800145c:	4b3c      	ldr	r3, [pc, #240]	; (8001550 <takeWifiSSID+0x304>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3b01      	subs	r3, #1
 8001462:	4a3b      	ldr	r2, [pc, #236]	; (8001550 <takeWifiSSID+0x304>)
 8001464:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001466:	20fa      	movs	r0, #250	; 0xfa
 8001468:	f008 f948 	bl	80096fc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800146c:	2102      	movs	r1, #2
 800146e:	4839      	ldr	r0, [pc, #228]	; (8001554 <takeWifiSSID+0x308>)
 8001470:	f008 ff14 	bl	800a29c <HAL_GPIO_ReadPin>
 8001474:	4603      	mov	r3, r0
 8001476:	2b01      	cmp	r3, #1
 8001478:	d128      	bne.n	80014cc <takeWifiSSID+0x280>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 800147a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147c:	3b01      	subs	r3, #1
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fd34 	bl	8000eec <getCharFromCursorPosition>
 8001484:	4603      	mov	r3, r0
 8001486:	4619      	mov	r1, r3
 8001488:	4a33      	ldr	r2, [pc, #204]	; (8001558 <takeWifiSSID+0x30c>)
 800148a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800148c:	4413      	add	r3, r2
 800148e:	460a      	mov	r2, r1
 8001490:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8001492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001494:	b2d9      	uxtb	r1, r3
 8001496:	4a30      	ldr	r2, [pc, #192]	; (8001558 <takeWifiSSID+0x30c>)
 8001498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800149a:	4413      	add	r3, r2
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	2001      	movs	r0, #1
 80014a2:	f7ff fa9c 	bl	80009de <lcd_print_char>

            realCharPosLoc[wifiNameLoc] = realCharPos-1;
 80014a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	3b01      	subs	r3, #1
 80014ac:	b2d9      	uxtb	r1, r3
 80014ae:	f107 0208 	add.w	r2, r7, #8
 80014b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014b4:	4413      	add	r3, r2
 80014b6:	460a      	mov	r2, r1
 80014b8:	701a      	strb	r2, [r3, #0]

            writeLoc++;
 80014ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014bc:	3301      	adds	r3, #1
 80014be:	62fb      	str	r3, [r7, #44]	; 0x2c
            wifiNameLoc++;
 80014c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014c2:	3301      	adds	r3, #1
 80014c4:	633b      	str	r3, [r7, #48]	; 0x30

            HAL_Delay(250);
 80014c6:	20fa      	movs	r0, #250	; 0xfa
 80014c8:	f008 f918 	bl	80096fc <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80014cc:	2104      	movs	r1, #4
 80014ce:	4821      	ldr	r0, [pc, #132]	; (8001554 <takeWifiSSID+0x308>)
 80014d0:	f008 fee4 	bl	800a29c <HAL_GPIO_ReadPin>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d12e      	bne.n	8001538 <takeWifiSSID+0x2ec>
        	if(strlen(wifiSSID) >= 1) {
 80014da:	4b1f      	ldr	r3, [pc, #124]	; (8001558 <takeWifiSSID+0x30c>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d027      	beq.n	8001532 <takeWifiSSID+0x2e6>
        		wifiSSID[wifiNameLoc] = '\0';
 80014e2:	4a1d      	ldr	r2, [pc, #116]	; (8001558 <takeWifiSSID+0x30c>)
 80014e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014e6:	4413      	add	r3, r2
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 80014ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	3306      	adds	r3, #6
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	4619      	mov	r1, r3
 80014f6:	2001      	movs	r0, #1
 80014f8:	f7ff fa92 	bl	8000a20 <lcd_delete_char>
        		HAL_Delay(50);
 80014fc:	2032      	movs	r0, #50	; 0x32
 80014fe:	f008 f8fd 	bl	80096fc <HAL_Delay>
        		if(writeLoc > 7) {
 8001502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001504:	2b07      	cmp	r3, #7
 8001506:	dd03      	ble.n	8001510 <takeWifiSSID+0x2c4>
        			writeLoc--;
 8001508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150a:	3b01      	subs	r3, #1
 800150c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800150e:	e004      	b.n	800151a <takeWifiSSID+0x2ce>
        		} else if(writeLoc < 7) {
 8001510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001512:	2b06      	cmp	r3, #6
 8001514:	dc01      	bgt.n	800151a <takeWifiSSID+0x2ce>
        			writeLoc = 7;
 8001516:	2307      	movs	r3, #7
 8001518:	62fb      	str	r3, [r7, #44]	; 0x2c
        		}

        		if(wifiNameLoc > 0) {
 800151a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800151c:	2b00      	cmp	r3, #0
 800151e:	dd03      	ble.n	8001528 <takeWifiSSID+0x2dc>
        			wifiNameLoc--;
 8001520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001522:	3b01      	subs	r3, #1
 8001524:	633b      	str	r3, [r7, #48]	; 0x30
 8001526:	e004      	b.n	8001532 <takeWifiSSID+0x2e6>
        		} else if(wifiNameLoc < 0) {
 8001528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800152a:	2b00      	cmp	r3, #0
 800152c:	da01      	bge.n	8001532 <takeWifiSSID+0x2e6>
        			wifiNameLoc = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	633b      	str	r3, [r7, #48]	; 0x30
        		}
        	}

        	HAL_Delay(250);
 8001532:	20fa      	movs	r0, #250	; 0xfa
 8001534:	f008 f8e2 	bl	80096fc <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <takeWifiSSID+0x304>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	4619      	mov	r1, r3
 8001540:	2002      	movs	r0, #2
 8001542:	f7ff fa18 	bl	8000976 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001546:	e6a1      	b.n	800128c <takeWifiSSID+0x40>
    }
}
 8001548:	bf00      	nop
 800154a:	3738      	adds	r7, #56	; 0x38
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000944 	.word	0x20000944
 8001554:	40010800 	.word	0x40010800
 8001558:	20000c00 	.word	0x20000c00

0800155c <takeWifiPass>:

void takeWifiPass(int state, I2C_HandleTypeDef *hi2c1) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b08e      	sub	sp, #56	; 0x38
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
    lcd_cursor(1);
 8001566:	2001      	movs	r0, #1
 8001568:	f7ff fa82 	bl	8000a70 <lcd_cursor>

    if(state == 0) {
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d104      	bne.n	800157c <takeWifiPass+0x20>
    	memset(wifiPass, 0, sizeof(wifiPass));
 8001572:	2221      	movs	r2, #33	; 0x21
 8001574:	2100      	movs	r1, #0
 8001576:	4878      	ldr	r0, [pc, #480]	; (8001758 <takeWifiPass+0x1fc>)
 8001578:	f00c f830 	bl	800d5dc <memset>
    }

    int realCharPos = 1;
 800157c:	2301      	movs	r3, #1
 800157e:	637b      	str	r3, [r7, #52]	; 0x34
    cursorPosition = 1;
 8001580:	4b76      	ldr	r3, [pc, #472]	; (800175c <takeWifiPass+0x200>)
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]
    page = 1;
 8001586:	4b76      	ldr	r3, [pc, #472]	; (8001760 <takeWifiPass+0x204>)
 8001588:	2201      	movs	r2, #1
 800158a:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	633b      	str	r3, [r7, #48]	; 0x30
    int writeLoc = 7;
 8001590:	2307      	movs	r3, #7
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t realCharPosLoc[33];

    printTemplate(3, 1);
 8001594:	2101      	movs	r1, #1
 8001596:	2003      	movs	r0, #3
 8001598:	f7ff fab0 	bl	8000afc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800159c:	2108      	movs	r1, #8
 800159e:	4871      	ldr	r0, [pc, #452]	; (8001764 <takeWifiPass+0x208>)
 80015a0:	f008 fe7c 	bl	800a29c <HAL_GPIO_ReadPin>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d109      	bne.n	80015be <takeWifiPass+0x62>
            lcd_cursor(0);
 80015aa:	2000      	movs	r0, #0
 80015ac:	f7ff fa60 	bl	8000a70 <lcd_cursor>

            writeCharToEEPROM4Wifi(&hi2c1, wifiPass, 2);
 80015b0:	463b      	mov	r3, r7
 80015b2:	2202      	movs	r2, #2
 80015b4:	4968      	ldr	r1, [pc, #416]	; (8001758 <takeWifiPass+0x1fc>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	f000 f9ce 	bl	8001958 <writeCharToEEPROM4Wifi>

            break;
 80015bc:	e14c      	b.n	8001858 <takeWifiPass+0x2fc>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80015be:	2101      	movs	r1, #1
 80015c0:	4868      	ldr	r0, [pc, #416]	; (8001764 <takeWifiPass+0x208>)
 80015c2:	f008 fe6b 	bl	800a29c <HAL_GPIO_ReadPin>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d166      	bne.n	800169a <takeWifiPass+0x13e>
        	realCharPos++;
 80015cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015ce:	3301      	adds	r3, #1
 80015d0:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos > 80) {
 80015d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015d4:	2b50      	cmp	r3, #80	; 0x50
 80015d6:	dd01      	ble.n	80015dc <takeWifiPass+0x80>
        	    realCharPos = 1;
 80015d8:	2301      	movs	r3, #1
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if (cursorPosition == 16) {
 80015dc:	4b5f      	ldr	r3, [pc, #380]	; (800175c <takeWifiPass+0x200>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b10      	cmp	r3, #16
 80015e2:	d152      	bne.n	800168a <takeWifiPass+0x12e>
            	if(page == 1) {
 80015e4:	4b5e      	ldr	r3, [pc, #376]	; (8001760 <takeWifiPass+0x204>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d10c      	bne.n	8001606 <takeWifiPass+0xaa>
            		cursorPosition = 1;
 80015ec:	4b5b      	ldr	r3, [pc, #364]	; (800175c <takeWifiPass+0x200>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	601a      	str	r2, [r3, #0]
            		page++;
 80015f2:	4b5b      	ldr	r3, [pc, #364]	; (8001760 <takeWifiPass+0x204>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	4a59      	ldr	r2, [pc, #356]	; (8001760 <takeWifiPass+0x204>)
 80015fa:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 80015fc:	2102      	movs	r1, #2
 80015fe:	2003      	movs	r0, #3
 8001600:	f7ff fa7c 	bl	8000afc <printTemplate>
 8001604:	e046      	b.n	8001694 <takeWifiPass+0x138>
            	} else if(page == 2) {
 8001606:	4b56      	ldr	r3, [pc, #344]	; (8001760 <takeWifiPass+0x204>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b02      	cmp	r3, #2
 800160c:	d10c      	bne.n	8001628 <takeWifiPass+0xcc>
            		cursorPosition = 1;
 800160e:	4b53      	ldr	r3, [pc, #332]	; (800175c <takeWifiPass+0x200>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]
            		page++;
 8001614:	4b52      	ldr	r3, [pc, #328]	; (8001760 <takeWifiPass+0x204>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	4a51      	ldr	r2, [pc, #324]	; (8001760 <takeWifiPass+0x204>)
 800161c:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 800161e:	2103      	movs	r1, #3
 8001620:	2003      	movs	r0, #3
 8001622:	f7ff fa6b 	bl	8000afc <printTemplate>
 8001626:	e035      	b.n	8001694 <takeWifiPass+0x138>
            	} else if(page == 3) {
 8001628:	4b4d      	ldr	r3, [pc, #308]	; (8001760 <takeWifiPass+0x204>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b03      	cmp	r3, #3
 800162e:	d10c      	bne.n	800164a <takeWifiPass+0xee>
            		cursorPosition = 1;
 8001630:	4b4a      	ldr	r3, [pc, #296]	; (800175c <takeWifiPass+0x200>)
 8001632:	2201      	movs	r2, #1
 8001634:	601a      	str	r2, [r3, #0]
            		page++;
 8001636:	4b4a      	ldr	r3, [pc, #296]	; (8001760 <takeWifiPass+0x204>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	3301      	adds	r3, #1
 800163c:	4a48      	ldr	r2, [pc, #288]	; (8001760 <takeWifiPass+0x204>)
 800163e:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 8001640:	2104      	movs	r1, #4
 8001642:	2003      	movs	r0, #3
 8001644:	f7ff fa5a 	bl	8000afc <printTemplate>
 8001648:	e024      	b.n	8001694 <takeWifiPass+0x138>
            	} else if(page == 4) {
 800164a:	4b45      	ldr	r3, [pc, #276]	; (8001760 <takeWifiPass+0x204>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b04      	cmp	r3, #4
 8001650:	d10c      	bne.n	800166c <takeWifiPass+0x110>
            		cursorPosition = 1;
 8001652:	4b42      	ldr	r3, [pc, #264]	; (800175c <takeWifiPass+0x200>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]
            		page++;
 8001658:	4b41      	ldr	r3, [pc, #260]	; (8001760 <takeWifiPass+0x204>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	3301      	adds	r3, #1
 800165e:	4a40      	ldr	r2, [pc, #256]	; (8001760 <takeWifiPass+0x204>)
 8001660:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 8001662:	2105      	movs	r1, #5
 8001664:	2003      	movs	r0, #3
 8001666:	f7ff fa49 	bl	8000afc <printTemplate>
 800166a:	e013      	b.n	8001694 <takeWifiPass+0x138>
            	} else if(page == 5) {
 800166c:	4b3c      	ldr	r3, [pc, #240]	; (8001760 <takeWifiPass+0x204>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2b05      	cmp	r3, #5
 8001672:	d10f      	bne.n	8001694 <takeWifiPass+0x138>
            		cursorPosition = 1;
 8001674:	4b39      	ldr	r3, [pc, #228]	; (800175c <takeWifiPass+0x200>)
 8001676:	2201      	movs	r2, #1
 8001678:	601a      	str	r2, [r3, #0]
            		page = 1;
 800167a:	4b39      	ldr	r3, [pc, #228]	; (8001760 <takeWifiPass+0x204>)
 800167c:	2201      	movs	r2, #1
 800167e:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001680:	2101      	movs	r1, #1
 8001682:	2003      	movs	r0, #3
 8001684:	f7ff fa3a 	bl	8000afc <printTemplate>
 8001688:	e004      	b.n	8001694 <takeWifiPass+0x138>
            	}
            } else {
            	cursorPosition++;
 800168a:	4b34      	ldr	r3, [pc, #208]	; (800175c <takeWifiPass+0x200>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3301      	adds	r3, #1
 8001690:	4a32      	ldr	r2, [pc, #200]	; (800175c <takeWifiPass+0x200>)
 8001692:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001694:	20fa      	movs	r0, #250	; 0xfa
 8001696:	f008 f831 	bl	80096fc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800169a:	2108      	movs	r1, #8
 800169c:	4832      	ldr	r0, [pc, #200]	; (8001768 <takeWifiPass+0x20c>)
 800169e:	f008 fdfd 	bl	800a29c <HAL_GPIO_ReadPin>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d169      	bne.n	800177c <takeWifiPass+0x220>
        	realCharPos--;
 80016a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016aa:	3b01      	subs	r3, #1
 80016ac:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos < 1) {
 80016ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	dc01      	bgt.n	80016b8 <takeWifiPass+0x15c>
        	    realCharPos = 80;
 80016b4:	2350      	movs	r3, #80	; 0x50
 80016b6:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if(cursorPosition == 1) {
 80016b8:	4b28      	ldr	r3, [pc, #160]	; (800175c <takeWifiPass+0x200>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d155      	bne.n	800176c <takeWifiPass+0x210>
            	if(page == 1) {
 80016c0:	4b27      	ldr	r3, [pc, #156]	; (8001760 <takeWifiPass+0x204>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d10a      	bne.n	80016de <takeWifiPass+0x182>
            		cursorPosition = 16;
 80016c8:	4b24      	ldr	r3, [pc, #144]	; (800175c <takeWifiPass+0x200>)
 80016ca:	2210      	movs	r2, #16
 80016cc:	601a      	str	r2, [r3, #0]
            		page = 5;
 80016ce:	4b24      	ldr	r3, [pc, #144]	; (8001760 <takeWifiPass+0x204>)
 80016d0:	2205      	movs	r2, #5
 80016d2:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 80016d4:	2105      	movs	r1, #5
 80016d6:	2003      	movs	r0, #3
 80016d8:	f7ff fa10 	bl	8000afc <printTemplate>
 80016dc:	e04b      	b.n	8001776 <takeWifiPass+0x21a>
            	} else if(page == 2) {
 80016de:	4b20      	ldr	r3, [pc, #128]	; (8001760 <takeWifiPass+0x204>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d10a      	bne.n	80016fc <takeWifiPass+0x1a0>
            		cursorPosition = 16;
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <takeWifiPass+0x200>)
 80016e8:	2210      	movs	r2, #16
 80016ea:	601a      	str	r2, [r3, #0]
            		page = 1;
 80016ec:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <takeWifiPass+0x204>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80016f2:	2101      	movs	r1, #1
 80016f4:	2003      	movs	r0, #3
 80016f6:	f7ff fa01 	bl	8000afc <printTemplate>
 80016fa:	e03c      	b.n	8001776 <takeWifiPass+0x21a>
            	} else if(page == 3) {
 80016fc:	4b18      	ldr	r3, [pc, #96]	; (8001760 <takeWifiPass+0x204>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b03      	cmp	r3, #3
 8001702:	d10a      	bne.n	800171a <takeWifiPass+0x1be>
            		cursorPosition = 16;
 8001704:	4b15      	ldr	r3, [pc, #84]	; (800175c <takeWifiPass+0x200>)
 8001706:	2210      	movs	r2, #16
 8001708:	601a      	str	r2, [r3, #0]
            		page = 2;
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <takeWifiPass+0x204>)
 800170c:	2202      	movs	r2, #2
 800170e:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 8001710:	2102      	movs	r1, #2
 8001712:	2003      	movs	r0, #3
 8001714:	f7ff f9f2 	bl	8000afc <printTemplate>
 8001718:	e02d      	b.n	8001776 <takeWifiPass+0x21a>
            	} else if(page == 4) {
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <takeWifiPass+0x204>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b04      	cmp	r3, #4
 8001720:	d10a      	bne.n	8001738 <takeWifiPass+0x1dc>
            		cursorPosition = 16;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <takeWifiPass+0x200>)
 8001724:	2210      	movs	r2, #16
 8001726:	601a      	str	r2, [r3, #0]
            		page = 3;
 8001728:	4b0d      	ldr	r3, [pc, #52]	; (8001760 <takeWifiPass+0x204>)
 800172a:	2203      	movs	r2, #3
 800172c:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 800172e:	2103      	movs	r1, #3
 8001730:	2003      	movs	r0, #3
 8001732:	f7ff f9e3 	bl	8000afc <printTemplate>
 8001736:	e01e      	b.n	8001776 <takeWifiPass+0x21a>
            	} else if(page == 5) {
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <takeWifiPass+0x204>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b05      	cmp	r3, #5
 800173e:	d11a      	bne.n	8001776 <takeWifiPass+0x21a>
            		cursorPosition = 16;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <takeWifiPass+0x200>)
 8001742:	2210      	movs	r2, #16
 8001744:	601a      	str	r2, [r3, #0]
            		page = 4;
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <takeWifiPass+0x204>)
 8001748:	2204      	movs	r2, #4
 800174a:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 800174c:	2104      	movs	r1, #4
 800174e:	2003      	movs	r0, #3
 8001750:	f7ff f9d4 	bl	8000afc <printTemplate>
 8001754:	e00f      	b.n	8001776 <takeWifiPass+0x21a>
 8001756:	bf00      	nop
 8001758:	20000c24 	.word	0x20000c24
 800175c:	20000944 	.word	0x20000944
 8001760:	20000948 	.word	0x20000948
 8001764:	40010800 	.word	0x40010800
 8001768:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 800176c:	4b3c      	ldr	r3, [pc, #240]	; (8001860 <takeWifiPass+0x304>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	3b01      	subs	r3, #1
 8001772:	4a3b      	ldr	r2, [pc, #236]	; (8001860 <takeWifiPass+0x304>)
 8001774:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001776:	20fa      	movs	r0, #250	; 0xfa
 8001778:	f007 ffc0 	bl	80096fc <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800177c:	2102      	movs	r1, #2
 800177e:	4839      	ldr	r0, [pc, #228]	; (8001864 <takeWifiPass+0x308>)
 8001780:	f008 fd8c 	bl	800a29c <HAL_GPIO_ReadPin>
 8001784:	4603      	mov	r3, r0
 8001786:	2b01      	cmp	r3, #1
 8001788:	d128      	bne.n	80017dc <takeWifiPass+0x280>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 800178a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800178c:	3b01      	subs	r3, #1
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fbac 	bl	8000eec <getCharFromCursorPosition>
 8001794:	4603      	mov	r3, r0
 8001796:	4619      	mov	r1, r3
 8001798:	4a33      	ldr	r2, [pc, #204]	; (8001868 <takeWifiPass+0x30c>)
 800179a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800179c:	4413      	add	r3, r2
 800179e:	460a      	mov	r2, r1
 80017a0:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 80017a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a4:	b2d9      	uxtb	r1, r3
 80017a6:	4a30      	ldr	r2, [pc, #192]	; (8001868 <takeWifiPass+0x30c>)
 80017a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017aa:	4413      	add	r3, r2
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	2001      	movs	r0, #1
 80017b2:	f7ff f914 	bl	80009de <lcd_print_char>

            realCharPosLoc[wifiPassLoc] = realCharPos-1;
 80017b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	3b01      	subs	r3, #1
 80017bc:	b2d9      	uxtb	r1, r3
 80017be:	f107 0208 	add.w	r2, r7, #8
 80017c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c4:	4413      	add	r3, r2
 80017c6:	460a      	mov	r2, r1
 80017c8:	701a      	strb	r2, [r3, #0]

            writeLoc++;
 80017ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017cc:	3301      	adds	r3, #1
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
            wifiPassLoc++;
 80017d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d2:	3301      	adds	r3, #1
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30

            HAL_Delay(250);
 80017d6:	20fa      	movs	r0, #250	; 0xfa
 80017d8:	f007 ff90 	bl	80096fc <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80017dc:	2104      	movs	r1, #4
 80017de:	4821      	ldr	r0, [pc, #132]	; (8001864 <takeWifiPass+0x308>)
 80017e0:	f008 fd5c 	bl	800a29c <HAL_GPIO_ReadPin>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d12e      	bne.n	8001848 <takeWifiPass+0x2ec>
            if(strlen(wifiPass) >= 1) {
 80017ea:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <takeWifiPass+0x30c>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d027      	beq.n	8001842 <takeWifiPass+0x2e6>
            	wifiPass[wifiPassLoc] = '\0';
 80017f2:	4a1d      	ldr	r2, [pc, #116]	; (8001868 <takeWifiPass+0x30c>)
 80017f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f6:	4413      	add	r3, r2
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 80017fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	3306      	adds	r3, #6
 8001802:	b2db      	uxtb	r3, r3
 8001804:	4619      	mov	r1, r3
 8001806:	2001      	movs	r0, #1
 8001808:	f7ff f90a 	bl	8000a20 <lcd_delete_char>
            	HAL_Delay(50);
 800180c:	2032      	movs	r0, #50	; 0x32
 800180e:	f007 ff75 	bl	80096fc <HAL_Delay>

            	if(writeLoc > 7) {
 8001812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001814:	2b07      	cmp	r3, #7
 8001816:	dd03      	ble.n	8001820 <takeWifiPass+0x2c4>
            		writeLoc--;
 8001818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181a:	3b01      	subs	r3, #1
 800181c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800181e:	e004      	b.n	800182a <takeWifiPass+0x2ce>
            	} else if(writeLoc < 7) {
 8001820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001822:	2b06      	cmp	r3, #6
 8001824:	dc01      	bgt.n	800182a <takeWifiPass+0x2ce>
            		writeLoc = 7;
 8001826:	2307      	movs	r3, #7
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
            	}

            	if(wifiPassLoc > 0) {
 800182a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800182c:	2b00      	cmp	r3, #0
 800182e:	dd03      	ble.n	8001838 <takeWifiPass+0x2dc>
            		wifiPassLoc--;
 8001830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001832:	3b01      	subs	r3, #1
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
 8001836:	e004      	b.n	8001842 <takeWifiPass+0x2e6>
            	} else if(wifiPassLoc < 0) {
 8001838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800183a:	2b00      	cmp	r3, #0
 800183c:	da01      	bge.n	8001842 <takeWifiPass+0x2e6>
            		wifiPassLoc = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	633b      	str	r3, [r7, #48]	; 0x30
            	}
            }

            HAL_Delay(250);
 8001842:	20fa      	movs	r0, #250	; 0xfa
 8001844:	f007 ff5a 	bl	80096fc <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <takeWifiPass+0x304>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	4619      	mov	r1, r3
 8001850:	2002      	movs	r0, #2
 8001852:	f7ff f890 	bl	8000976 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001856:	e6a1      	b.n	800159c <takeWifiPass+0x40>
    }
}
 8001858:	bf00      	nop
 800185a:	3738      	adds	r7, #56	; 0x38
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000944 	.word	0x20000944
 8001864:	40010800 	.word	0x40010800
 8001868:	20000c24 	.word	0x20000c24

0800186c <writeDataToEEPROM>:

void writeDataToEEPROM(I2C_HandleTypeDef *hi2c1, const uint8_t* transferData, uint8_t startPos) {
 800186c:	b5b0      	push	{r4, r5, r7, lr}
 800186e:	b08a      	sub	sp, #40	; 0x28
 8001870:	af04      	add	r7, sp, #16
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	60b9      	str	r1, [r7, #8]
 8001876:	4613      	mov	r3, r2
 8001878:	71fb      	strb	r3, [r7, #7]
	uint8_t arrayLength = sizeof(transferData)/sizeof(transferData[0]);
 800187a:	2304      	movs	r3, #4
 800187c:	75fb      	strb	r3, [r7, #23]

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, startPos, arrayLength, &eepromData[arrayLength], arrayLength, 3000);
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	b299      	uxth	r1, r3
 8001882:	7dfb      	ldrb	r3, [r7, #23]
 8001884:	b29c      	uxth	r4, r3
 8001886:	7dfb      	ldrb	r3, [r7, #23]
 8001888:	4a0b      	ldr	r2, [pc, #44]	; (80018b8 <writeDataToEEPROM+0x4c>)
 800188a:	4413      	add	r3, r2
 800188c:	7dfa      	ldrb	r2, [r7, #23]
 800188e:	b292      	uxth	r2, r2
 8001890:	f107 000c 	add.w	r0, r7, #12
 8001894:	f640 35b8 	movw	r5, #3000	; 0xbb8
 8001898:	9502      	str	r5, [sp, #8]
 800189a:	9201      	str	r2, [sp, #4]
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	4623      	mov	r3, r4
 80018a0:	460a      	mov	r2, r1
 80018a2:	21a0      	movs	r1, #160	; 0xa0
 80018a4:	f008 ffb4 	bl	800a810 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80018a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018ac:	f007 ff26 	bl	80096fc <HAL_Delay>
}
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bdb0      	pop	{r4, r5, r7, pc}
 80018b8:	20000b38 	.word	0x20000b38

080018bc <writeCharToEEPROM4ID>:

void writeCharToEEPROM4ID(I2C_HandleTypeDef *hi2c1, const char* sendArray) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08a      	sub	sp, #40	; 0x28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	6039      	str	r1, [r7, #0]
	uint8_t charPos[12];
	uint8_t karakterLength = strlen(sendArray);
 80018c6:	6838      	ldr	r0, [r7, #0]
 80018c8:	f7fe fcac 	bl	8000224 <strlen>
 80018cc:	4603      	mov	r3, r0
 80018ce:	76fb      	strb	r3, [r7, #27]
	uint8_t tempArrayLength = strlen(numbersArray);
 80018d0:	481f      	ldr	r0, [pc, #124]	; (8001950 <writeCharToEEPROM4ID+0x94>)
 80018d2:	f7fe fca7 	bl	8000224 <strlen>
 80018d6:	4603      	mov	r3, r0
 80018d8:	76bb      	strb	r3, [r7, #26]

	uint8_t loopVal = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	for(int i=0; i<karakterLength; i++) {
 80018e0:	2300      	movs	r3, #0
 80018e2:	623b      	str	r3, [r7, #32]
 80018e4:	e023      	b.n	800192e <writeCharToEEPROM4ID+0x72>
		for(int z=0; z<tempArrayLength; z++) {
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
 80018ea:	e019      	b.n	8001920 <writeCharToEEPROM4ID+0x64>
			if(sendArray[i] == numbersArray[z]) {
 80018ec:	6a3b      	ldr	r3, [r7, #32]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	4413      	add	r3, r2
 80018f2:	781a      	ldrb	r2, [r3, #0]
 80018f4:	4916      	ldr	r1, [pc, #88]	; (8001950 <writeCharToEEPROM4ID+0x94>)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	440b      	add	r3, r1
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d10c      	bne.n	800191a <writeCharToEEPROM4ID+0x5e>
				charPos[loopVal] = z;
 8001900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001904:	69fa      	ldr	r2, [r7, #28]
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	3328      	adds	r3, #40	; 0x28
 800190a:	443b      	add	r3, r7
 800190c:	f803 2c1c 	strb.w	r2, [r3, #-28]
				loopVal++;
 8001910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001914:	3301      	adds	r3, #1
 8001916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for(int z=0; z<tempArrayLength; z++) {
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3301      	adds	r3, #1
 800191e:	61fb      	str	r3, [r7, #28]
 8001920:	7ebb      	ldrb	r3, [r7, #26]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	429a      	cmp	r2, r3
 8001926:	dbe1      	blt.n	80018ec <writeCharToEEPROM4ID+0x30>
	for(int i=0; i<karakterLength; i++) {
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	3301      	adds	r3, #1
 800192c:	623b      	str	r3, [r7, #32]
 800192e:	7efb      	ldrb	r3, [r7, #27]
 8001930:	6a3a      	ldr	r2, [r7, #32]
 8001932:	429a      	cmp	r2, r3
 8001934:	dbd7      	blt.n	80018e6 <writeCharToEEPROM4ID+0x2a>
			}
		}
	}

	writeDataToEEPROM(&hi2c1, charPos, idStartPos);
 8001936:	4b07      	ldr	r3, [pc, #28]	; (8001954 <writeCharToEEPROM4ID+0x98>)
 8001938:	781a      	ldrb	r2, [r3, #0]
 800193a:	f107 010c 	add.w	r1, r7, #12
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff93 	bl	800186c <writeDataToEEPROM>
}
 8001946:	bf00      	nop
 8001948:	3728      	adds	r7, #40	; 0x28
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200009b4 	.word	0x200009b4
 8001954:	200009bf 	.word	0x200009bf

08001958 <writeCharToEEPROM4Wifi>:

void writeCharToEEPROM4Wifi(I2C_HandleTypeDef *hi2c1, const char* sendArray, uint8_t stat) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b090      	sub	sp, #64	; 0x40
 800195c:	af00      	add	r7, sp, #0
 800195e:	60f8      	str	r0, [r7, #12]
 8001960:	60b9      	str	r1, [r7, #8]
 8001962:	4613      	mov	r3, r2
 8001964:	71fb      	strb	r3, [r7, #7]
	uint8_t charPos[33];
	uint8_t karakterLength = strlen(sendArray);
 8001966:	68b8      	ldr	r0, [r7, #8]
 8001968:	f7fe fc5c 	bl	8000224 <strlen>
 800196c:	4603      	mov	r3, r0
 800196e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t tempArrayLength = strlen(charactersArray);
 8001972:	4828      	ldr	r0, [pc, #160]	; (8001a14 <writeCharToEEPROM4Wifi+0xbc>)
 8001974:	f7fe fc56 	bl	8000224 <strlen>
 8001978:	4603      	mov	r3, r0
 800197a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	uint8_t loopVal = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	for(int i=0; i<karakterLength; i++) {
 8001984:	2300      	movs	r3, #0
 8001986:	63bb      	str	r3, [r7, #56]	; 0x38
 8001988:	e024      	b.n	80019d4 <writeCharToEEPROM4Wifi+0x7c>
		for(int z=0; z<tempArrayLength; z++) {
 800198a:	2300      	movs	r3, #0
 800198c:	637b      	str	r3, [r7, #52]	; 0x34
 800198e:	e019      	b.n	80019c4 <writeCharToEEPROM4Wifi+0x6c>
			if(sendArray[i] == charactersArray[z]) {
 8001990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	4413      	add	r3, r2
 8001996:	781a      	ldrb	r2, [r3, #0]
 8001998:	491e      	ldr	r1, [pc, #120]	; (8001a14 <writeCharToEEPROM4Wifi+0xbc>)
 800199a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800199c:	440b      	add	r3, r1
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d10c      	bne.n	80019be <writeCharToEEPROM4Wifi+0x66>
				charPos[loopVal] = z;
 80019a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	3340      	adds	r3, #64	; 0x40
 80019ae:	443b      	add	r3, r7
 80019b0:	f803 2c30 	strb.w	r2, [r3, #-48]
				loopVal++;
 80019b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019b8:	3301      	adds	r3, #1
 80019ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		for(int z=0; z<tempArrayLength; z++) {
 80019be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c0:	3301      	adds	r3, #1
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
 80019c4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80019c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80019ca:	429a      	cmp	r2, r3
 80019cc:	dbe0      	blt.n	8001990 <writeCharToEEPROM4Wifi+0x38>
	for(int i=0; i<karakterLength; i++) {
 80019ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019d0:	3301      	adds	r3, #1
 80019d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80019d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80019d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019da:	429a      	cmp	r2, r3
 80019dc:	dbd5      	blt.n	800198a <writeCharToEEPROM4Wifi+0x32>
			}
		}
	}

	if(stat == 1) {
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d109      	bne.n	80019f8 <writeCharToEEPROM4Wifi+0xa0>
		writeDataToEEPROM(&hi2c1, charPos, ssidStartPos);
 80019e4:	4b0c      	ldr	r3, [pc, #48]	; (8001a18 <writeCharToEEPROM4Wifi+0xc0>)
 80019e6:	781a      	ldrb	r2, [r3, #0]
 80019e8:	f107 0110 	add.w	r1, r7, #16
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ff3b 	bl	800186c <writeDataToEEPROM>
	} else {
		writeDataToEEPROM(&hi2c1, charPos, passStartPos);
	}
}
 80019f6:	e008      	b.n	8001a0a <writeCharToEEPROM4Wifi+0xb2>
		writeDataToEEPROM(&hi2c1, charPos, passStartPos);
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <writeCharToEEPROM4Wifi+0xc4>)
 80019fa:	781a      	ldrb	r2, [r3, #0]
 80019fc:	f107 0110 	add.w	r1, r7, #16
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff31 	bl	800186c <writeDataToEEPROM>
}
 8001a0a:	bf00      	nop
 8001a0c:	3740      	adds	r7, #64	; 0x40
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000960 	.word	0x20000960
 8001a18:	200009c0 	.word	0x200009c0
 8001a1c:	200009c1 	.word	0x200009c1

08001a20 <convertChars>:

void convertChars(const uint8_t* writeArray, uint8_t state) {
 8001a20:	b480      	push	{r7}
 8001a22:	b087      	sub	sp, #28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	460b      	mov	r3, r1
 8001a2a:	70fb      	strb	r3, [r7, #3]
	uint8_t arrayLength = sizeof(writeArray)/sizeof(writeArray[0]);
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	72fb      	strb	r3, [r7, #11]

	if(state == 0) {
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d116      	bne.n	8001a64 <convertChars+0x44>
		for(int i=0; i<arrayLength; i++) {
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	e00e      	b.n	8001a5a <convertChars+0x3a>
			machineID[i] = numbersArray[writeArray[i]];
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <convertChars+0xb0>)
 8001a48:	5c99      	ldrb	r1, [r3, r2]
 8001a4a:	4a22      	ldr	r2, [pc, #136]	; (8001ad4 <convertChars+0xb4>)
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	4413      	add	r3, r2
 8001a50:	460a      	mov	r2, r1
 8001a52:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrayLength; i++) {
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	3301      	adds	r3, #1
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	7afb      	ldrb	r3, [r7, #11]
 8001a5c:	697a      	ldr	r2, [r7, #20]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	dbec      	blt.n	8001a3c <convertChars+0x1c>
	} else {
		for(int i=0; i<arrayLength; i++) {
			wifiPass[i] = charactersArray[writeArray[i]];
		}
	}
}
 8001a62:	e02f      	b.n	8001ac4 <convertChars+0xa4>
	} else if(state == 1) {
 8001a64:	78fb      	ldrb	r3, [r7, #3]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d116      	bne.n	8001a98 <convertChars+0x78>
		for(int i=0; i<arrayLength; i++) {
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	e00e      	b.n	8001a8e <convertChars+0x6e>
			wifiSSID[i] = charactersArray[writeArray[i]];
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	4413      	add	r3, r2
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <convertChars+0xb8>)
 8001a7c:	5c99      	ldrb	r1, [r3, r2]
 8001a7e:	4a17      	ldr	r2, [pc, #92]	; (8001adc <convertChars+0xbc>)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	4413      	add	r3, r2
 8001a84:	460a      	mov	r2, r1
 8001a86:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrayLength; i++) {
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	7afb      	ldrb	r3, [r7, #11]
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	dbec      	blt.n	8001a70 <convertChars+0x50>
}
 8001a96:	e015      	b.n	8001ac4 <convertChars+0xa4>
		for(int i=0; i<arrayLength; i++) {
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	e00e      	b.n	8001abc <convertChars+0x9c>
			wifiPass[i] = charactersArray[writeArray[i]];
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <convertChars+0xb8>)
 8001aaa:	5c99      	ldrb	r1, [r3, r2]
 8001aac:	4a0c      	ldr	r2, [pc, #48]	; (8001ae0 <convertChars+0xc0>)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	460a      	mov	r2, r1
 8001ab4:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrayLength; i++) {
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	7afb      	ldrb	r3, [r7, #11]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	dbec      	blt.n	8001a9e <convertChars+0x7e>
}
 8001ac4:	bf00      	nop
 8001ac6:	371c      	adds	r7, #28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	200009b4 	.word	0x200009b4
 8001ad4:	20000bf4 	.word	0x20000bf4
 8001ad8:	20000960 	.word	0x20000960
 8001adc:	20000c00 	.word	0x20000c00
 8001ae0:	20000c24 	.word	0x20000c24

08001ae4 <takeCharFromEEPROM4ID>:

void takeCharFromEEPROM4ID(I2C_HandleTypeDef *hi2c1) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af04      	add	r7, sp, #16
 8001aea:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, idStartPos, 11, readedID, 11, 3000);
 8001aec:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <takeCharFromEEPROM4ID+0x40>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	1d38      	adds	r0, r7, #4
 8001af4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001af8:	9302      	str	r3, [sp, #8]
 8001afa:	230b      	movs	r3, #11
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <takeCharFromEEPROM4ID+0x44>)
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	230b      	movs	r3, #11
 8001b04:	21a0      	movs	r1, #160	; 0xa0
 8001b06:	f008 ff7d 	bl	800aa04 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8001b0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b0e:	f007 fdf5 	bl	80096fc <HAL_Delay>

	convertChars(readedID, 0);
 8001b12:	2100      	movs	r1, #0
 8001b14:	4804      	ldr	r0, [pc, #16]	; (8001b28 <takeCharFromEEPROM4ID+0x44>)
 8001b16:	f7ff ff83 	bl	8001a20 <convertChars>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200009bf 	.word	0x200009bf
 8001b28:	20000c48 	.word	0x20000c48

08001b2c <takeCharFromEEPROM4Wifi>:

void takeCharFromEEPROM4Wifi(I2C_HandleTypeDef *hi2c1, uint8_t state) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af04      	add	r7, sp, #16
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	70fb      	strb	r3, [r7, #3]
	if(state == 1) {
 8001b38:	78fb      	ldrb	r3, [r7, #3]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d118      	bne.n	8001b70 <takeCharFromEEPROM4Wifi+0x44>
		HAL_I2C_Mem_Read(&hi2c1, 0xA0, ssidStartPos, 32, readedSSID, 32, 3000);
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ba8 <takeCharFromEEPROM4Wifi+0x7c>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	1d38      	adds	r0, r7, #4
 8001b46:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b4a:	9302      	str	r3, [sp, #8]
 8001b4c:	2320      	movs	r3, #32
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	4b16      	ldr	r3, [pc, #88]	; (8001bac <takeCharFromEEPROM4Wifi+0x80>)
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	2320      	movs	r3, #32
 8001b56:	21a0      	movs	r1, #160	; 0xa0
 8001b58:	f008 ff54 	bl	800aa04 <HAL_I2C_Mem_Read>
		HAL_Delay(1000);
 8001b5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b60:	f007 fdcc 	bl	80096fc <HAL_Delay>

		convertChars(readedSSID, state);
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	4619      	mov	r1, r3
 8001b68:	4810      	ldr	r0, [pc, #64]	; (8001bac <takeCharFromEEPROM4Wifi+0x80>)
 8001b6a:	f7ff ff59 	bl	8001a20 <convertChars>
		HAL_I2C_Mem_Read(&hi2c1, 0xA0, passStartPos, 32, readedPASS, 32, 3000);
		HAL_Delay(1000);

		convertChars(readedPASS, state);
	}
}
 8001b6e:	e017      	b.n	8001ba0 <takeCharFromEEPROM4Wifi+0x74>
		HAL_I2C_Mem_Read(&hi2c1, 0xA0, passStartPos, 32, readedPASS, 32, 3000);
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <takeCharFromEEPROM4Wifi+0x84>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	1d38      	adds	r0, r7, #4
 8001b78:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b7c:	9302      	str	r3, [sp, #8]
 8001b7e:	2320      	movs	r3, #32
 8001b80:	9301      	str	r3, [sp, #4]
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <takeCharFromEEPROM4Wifi+0x88>)
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	2320      	movs	r3, #32
 8001b88:	21a0      	movs	r1, #160	; 0xa0
 8001b8a:	f008 ff3b 	bl	800aa04 <HAL_I2C_Mem_Read>
		HAL_Delay(1000);
 8001b8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b92:	f007 fdb3 	bl	80096fc <HAL_Delay>
		convertChars(readedPASS, state);
 8001b96:	78fb      	ldrb	r3, [r7, #3]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4806      	ldr	r0, [pc, #24]	; (8001bb4 <takeCharFromEEPROM4Wifi+0x88>)
 8001b9c:	f7ff ff40 	bl	8001a20 <convertChars>
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	200009c0 	.word	0x200009c0
 8001bac:	20000c54 	.word	0x20000c54
 8001bb0:	200009c1 	.word	0x200009c1
 8001bb4:	20000c78 	.word	0x20000c78

08001bb8 <slideText>:

void slideText(const char* text, int startPos, int startLine) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
	for(int z=0; z < strlen(text); z++) {
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	e023      	b.n	8001c12 <slideText+0x5a>
		for(int i=startPos + z; i < strlen(text); i++) {
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	4413      	add	r3, r2
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	e014      	b.n	8001bfe <slideText+0x46>
			lcd_print_char(startLine, i-z, text[i]);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	b2d8      	uxtb	r0, r3
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	b2d9      	uxtb	r1, r3
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	4413      	add	r3, r2
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	f7fe fef6 	bl	80009de <lcd_print_char>
			HAL_Delay(50);
 8001bf2:	2032      	movs	r0, #50	; 0x32
 8001bf4:	f007 fd82 	bl	80096fc <HAL_Delay>
		for(int i=startPos + z; i < strlen(text); i++) {
 8001bf8:	693b      	ldr	r3, [r7, #16]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	613b      	str	r3, [r7, #16]
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f7fe fb10 	bl	8000224 <strlen>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d8e3      	bhi.n	8001bd4 <slideText+0x1c>
	for(int z=0; z < strlen(text); z++) {
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	f7fe fb06 	bl	8000224 <strlen>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d8d4      	bhi.n	8001bca <slideText+0x12>
		}
	}
}
 8001c20:	bf00      	nop
 8001c22:	bf00      	nop
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <menu>:

void menu(I2C_HandleTypeDef *hi2c1) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c34:	2101      	movs	r1, #1
 8001c36:	488f      	ldr	r0, [pc, #572]	; (8001e74 <menu+0x248>)
 8001c38:	f008 fb30 	bl	800a29c <HAL_GPIO_ReadPin>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	f040 808e 	bne.w	8001d60 <menu+0x134>
 8001c44:	4b8c      	ldr	r3, [pc, #560]	; (8001e78 <menu+0x24c>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	f083 0301 	eor.w	r3, r3, #1
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 8086 	beq.w	8001d60 <menu+0x134>
		menuSayac = menuSayac+1;
 8001c54:	4b89      	ldr	r3, [pc, #548]	; (8001e7c <menu+0x250>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	4b87      	ldr	r3, [pc, #540]	; (8001e7c <menu+0x250>)
 8001c5e:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001c60:	4b86      	ldr	r3, [pc, #536]	; (8001e7c <menu+0x250>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b24      	cmp	r3, #36	; 0x24
 8001c66:	d102      	bne.n	8001c6e <menu+0x42>
			menuSayac = 1;
 8001c68:	4b84      	ldr	r3, [pc, #528]	; (8001e7c <menu+0x250>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001c6e:	4b83      	ldr	r3, [pc, #524]	; (8001e7c <menu+0x250>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b12      	cmp	r3, #18
 8001c74:	d106      	bne.n	8001c84 <menu+0x58>
 8001c76:	4b82      	ldr	r3, [pc, #520]	; (8001e80 <menu+0x254>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d102      	bne.n	8001c84 <menu+0x58>
			menuSayac = 21;
 8001c7e:	4b7f      	ldr	r3, [pc, #508]	; (8001e7c <menu+0x250>)
 8001c80:	2215      	movs	r2, #21
 8001c82:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001c84:	4b7d      	ldr	r3, [pc, #500]	; (8001e7c <menu+0x250>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d106      	bne.n	8001c9a <menu+0x6e>
 8001c8c:	4b7d      	ldr	r3, [pc, #500]	; (8001e84 <menu+0x258>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <menu+0x6e>
			menuSayac = 16;
 8001c94:	4b79      	ldr	r3, [pc, #484]	; (8001e7c <menu+0x250>)
 8001c96:	2210      	movs	r2, #16
 8001c98:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001c9a:	4b78      	ldr	r3, [pc, #480]	; (8001e7c <menu+0x250>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2b0d      	cmp	r3, #13
 8001ca0:	d106      	bne.n	8001cb0 <menu+0x84>
 8001ca2:	4b78      	ldr	r3, [pc, #480]	; (8001e84 <menu+0x258>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d102      	bne.n	8001cb0 <menu+0x84>
			menuSayac = 16;
 8001caa:	4b74      	ldr	r3, [pc, #464]	; (8001e7c <menu+0x250>)
 8001cac:	2210      	movs	r2, #16
 8001cae:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001cb0:	4b72      	ldr	r3, [pc, #456]	; (8001e7c <menu+0x250>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b09      	cmp	r3, #9
 8001cb6:	d106      	bne.n	8001cc6 <menu+0x9a>
 8001cb8:	4b72      	ldr	r3, [pc, #456]	; (8001e84 <menu+0x258>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d102      	bne.n	8001cc6 <menu+0x9a>
			menuSayac = 13;
 8001cc0:	4b6e      	ldr	r3, [pc, #440]	; (8001e7c <menu+0x250>)
 8001cc2:	220d      	movs	r2, #13
 8001cc4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001cc6:	4b6d      	ldr	r3, [pc, #436]	; (8001e7c <menu+0x250>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b0a      	cmp	r3, #10
 8001ccc:	d10a      	bne.n	8001ce4 <menu+0xb8>
 8001cce:	4b6e      	ldr	r3, [pc, #440]	; (8001e88 <menu+0x25c>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d003      	beq.n	8001cde <menu+0xb2>
 8001cd6:	4b6c      	ldr	r3, [pc, #432]	; (8001e88 <menu+0x25c>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d102      	bne.n	8001ce4 <menu+0xb8>
			menuSayac = 11;
 8001cde:	4b67      	ldr	r3, [pc, #412]	; (8001e7c <menu+0x250>)
 8001ce0:	220b      	movs	r2, #11
 8001ce2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001ce4:	4b65      	ldr	r3, [pc, #404]	; (8001e7c <menu+0x250>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b0c      	cmp	r3, #12
 8001cea:	d10e      	bne.n	8001d0a <menu+0xde>
 8001cec:	4b67      	ldr	r3, [pc, #412]	; (8001e8c <menu+0x260>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d003      	beq.n	8001cfc <menu+0xd0>
 8001cf4:	4b65      	ldr	r3, [pc, #404]	; (8001e8c <menu+0x260>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d106      	bne.n	8001d0a <menu+0xde>
 8001cfc:	4b61      	ldr	r3, [pc, #388]	; (8001e84 <menu+0x258>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d102      	bne.n	8001d0a <menu+0xde>
			menuSayac = 16;
 8001d04:	4b5d      	ldr	r3, [pc, #372]	; (8001e7c <menu+0x250>)
 8001d06:	2210      	movs	r2, #16
 8001d08:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001d0a:	4b5c      	ldr	r3, [pc, #368]	; (8001e7c <menu+0x250>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b0c      	cmp	r3, #12
 8001d10:	d10e      	bne.n	8001d30 <menu+0x104>
 8001d12:	4b5e      	ldr	r3, [pc, #376]	; (8001e8c <menu+0x260>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d003      	beq.n	8001d22 <menu+0xf6>
 8001d1a:	4b5c      	ldr	r3, [pc, #368]	; (8001e8c <menu+0x260>)
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d106      	bne.n	8001d30 <menu+0x104>
 8001d22:	4b58      	ldr	r3, [pc, #352]	; (8001e84 <menu+0x258>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b03      	cmp	r3, #3
 8001d28:	d102      	bne.n	8001d30 <menu+0x104>
			menuSayac = 13;
 8001d2a:	4b54      	ldr	r3, [pc, #336]	; (8001e7c <menu+0x250>)
 8001d2c:	220d      	movs	r2, #13
 8001d2e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001d30:	4b52      	ldr	r3, [pc, #328]	; (8001e7c <menu+0x250>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b0f      	cmp	r3, #15
 8001d36:	d106      	bne.n	8001d46 <menu+0x11a>
 8001d38:	4b55      	ldr	r3, [pc, #340]	; (8001e90 <menu+0x264>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d102      	bne.n	8001d46 <menu+0x11a>
			menuSayac = 16;
 8001d40:	4b4e      	ldr	r3, [pc, #312]	; (8001e7c <menu+0x250>)
 8001d42:	2210      	movs	r2, #16
 8001d44:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001d46:	4b4d      	ldr	r3, [pc, #308]	; (8001e7c <menu+0x250>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b18      	cmp	r3, #24
 8001d4c:	d106      	bne.n	8001d5c <menu+0x130>
 8001d4e:	4b4c      	ldr	r3, [pc, #304]	; (8001e80 <menu+0x254>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d102      	bne.n	8001d5c <menu+0x130>
			menuSayac = 26;
 8001d56:	4b49      	ldr	r3, [pc, #292]	; (8001e7c <menu+0x250>)
 8001d58:	221a      	movs	r2, #26
 8001d5a:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001d5c:	f004 fd04 	bl	8006768 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d60:	2108      	movs	r1, #8
 8001d62:	484c      	ldr	r0, [pc, #304]	; (8001e94 <menu+0x268>)
 8001d64:	f008 fa9a 	bl	800a29c <HAL_GPIO_ReadPin>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d175      	bne.n	8001e5a <menu+0x22e>
 8001d6e:	4b42      	ldr	r3, [pc, #264]	; (8001e78 <menu+0x24c>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	f083 0301 	eor.w	r3, r3, #1
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d06e      	beq.n	8001e5a <menu+0x22e>
		if (menuSayac <= 1) {
 8001d7c:	4b3f      	ldr	r3, [pc, #252]	; (8001e7c <menu+0x250>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d802      	bhi.n	8001d8a <menu+0x15e>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001d84:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <menu+0x250>)
 8001d86:	2224      	movs	r2, #36	; 0x24
 8001d88:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001d8a:	4b3c      	ldr	r3, [pc, #240]	; (8001e7c <menu+0x250>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	b2da      	uxtb	r2, r3
 8001d92:	4b3a      	ldr	r3, [pc, #232]	; (8001e7c <menu+0x250>)
 8001d94:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001d96:	4b39      	ldr	r3, [pc, #228]	; (8001e7c <menu+0x250>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b14      	cmp	r3, #20
 8001d9c:	d106      	bne.n	8001dac <menu+0x180>
 8001d9e:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <menu+0x254>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <menu+0x180>
			menuSayac = 17;
 8001da6:	4b35      	ldr	r3, [pc, #212]	; (8001e7c <menu+0x250>)
 8001da8:	2211      	movs	r2, #17
 8001daa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001dac:	4b33      	ldr	r3, [pc, #204]	; (8001e7c <menu+0x250>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b0f      	cmp	r3, #15
 8001db2:	d106      	bne.n	8001dc2 <menu+0x196>
 8001db4:	4b33      	ldr	r3, [pc, #204]	; (8001e84 <menu+0x258>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <menu+0x196>
			menuSayac = 7;
 8001dbc:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <menu+0x250>)
 8001dbe:	2207      	movs	r2, #7
 8001dc0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001dc2:	4b2e      	ldr	r3, [pc, #184]	; (8001e7c <menu+0x250>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b0f      	cmp	r3, #15
 8001dc8:	d106      	bne.n	8001dd8 <menu+0x1ac>
 8001dca:	4b2e      	ldr	r3, [pc, #184]	; (8001e84 <menu+0x258>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d102      	bne.n	8001dd8 <menu+0x1ac>
			menuSayac = 12;
 8001dd2:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <menu+0x250>)
 8001dd4:	220c      	movs	r2, #12
 8001dd6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001dd8:	4b28      	ldr	r3, [pc, #160]	; (8001e7c <menu+0x250>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b0c      	cmp	r3, #12
 8001dde:	d106      	bne.n	8001dee <menu+0x1c2>
 8001de0:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <menu+0x258>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d102      	bne.n	8001dee <menu+0x1c2>
			menuSayac = 8;
 8001de8:	4b24      	ldr	r3, [pc, #144]	; (8001e7c <menu+0x250>)
 8001dea:	2208      	movs	r2, #8
 8001dec:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001dee:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <menu+0x250>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b0a      	cmp	r3, #10
 8001df4:	d10a      	bne.n	8001e0c <menu+0x1e0>
 8001df6:	4b24      	ldr	r3, [pc, #144]	; (8001e88 <menu+0x25c>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d003      	beq.n	8001e06 <menu+0x1da>
 8001dfe:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <menu+0x25c>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d102      	bne.n	8001e0c <menu+0x1e0>
			menuSayac = 9;
 8001e06:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <menu+0x250>)
 8001e08:	2209      	movs	r2, #9
 8001e0a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	; (8001e7c <menu+0x250>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b0c      	cmp	r3, #12
 8001e12:	d10a      	bne.n	8001e2a <menu+0x1fe>
 8001e14:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <menu+0x260>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d003      	beq.n	8001e24 <menu+0x1f8>
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	; (8001e8c <menu+0x260>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d102      	bne.n	8001e2a <menu+0x1fe>
			menuSayac = 11;
 8001e24:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <menu+0x250>)
 8001e26:	220b      	movs	r2, #11
 8001e28:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001e2a:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <menu+0x250>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b0f      	cmp	r3, #15
 8001e30:	d106      	bne.n	8001e40 <menu+0x214>
 8001e32:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <menu+0x264>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d102      	bne.n	8001e40 <menu+0x214>
			menuSayac = 14;
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <menu+0x250>)
 8001e3c:	220e      	movs	r2, #14
 8001e3e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001e40:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <menu+0x250>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b19      	cmp	r3, #25
 8001e46:	d106      	bne.n	8001e56 <menu+0x22a>
 8001e48:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <menu+0x254>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d102      	bne.n	8001e56 <menu+0x22a>
			menuSayac = 23;
 8001e50:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <menu+0x250>)
 8001e52:	2217      	movs	r2, #23
 8001e54:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001e56:	f004 fc87 	bl	8006768 <bekle>
	}

	if (menuSayac == 0) {
 8001e5a:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <menu+0x250>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d134      	bne.n	8001ecc <menu+0x2a0>
		if(dilSecim == 0) {
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <menu+0x26c>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d122      	bne.n	8001eb0 <menu+0x284>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001e6a:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <menu+0x270>)
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	2001      	movs	r0, #1
 8001e70:	e016      	b.n	8001ea0 <menu+0x274>
 8001e72:	bf00      	nop
 8001e74:	40010800 	.word	0x40010800
 8001e78:	20000ccc 	.word	0x20000ccc
 8001e7c:	20000c9d 	.word	0x20000c9d
 8001e80:	20000cac 	.word	0x20000cac
 8001e84:	20000ca5 	.word	0x20000ca5
 8001e88:	20000ca6 	.word	0x20000ca6
 8001e8c:	20000ca7 	.word	0x20000ca7
 8001e90:	20000ca8 	.word	0x20000ca8
 8001e94:	40011000 	.word	0x40011000
 8001e98:	20000cbe 	.word	0x20000cbe
 8001e9c:	0800e0ac 	.word	0x0800e0ac
 8001ea0:	f7fe fd88 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001ea4:	4a94      	ldr	r2, [pc, #592]	; (80020f8 <menu+0x4cc>)
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	2002      	movs	r0, #2
 8001eaa:	f7fe fd83 	bl	80009b4 <lcd_print>
 8001eae:	e00d      	b.n	8001ecc <menu+0x2a0>
		} else if(dilSecim  ==  1) {
 8001eb0:	4b92      	ldr	r3, [pc, #584]	; (80020fc <menu+0x4d0>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d109      	bne.n	8001ecc <menu+0x2a0>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001eb8:	4a91      	ldr	r2, [pc, #580]	; (8002100 <menu+0x4d4>)
 8001eba:	2101      	movs	r1, #1
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	f7fe fd79 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001ec2:	4a90      	ldr	r2, [pc, #576]	; (8002104 <menu+0x4d8>)
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	2002      	movs	r0, #2
 8001ec8:	f7fe fd74 	bl	80009b4 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001ecc:	4b8e      	ldr	r3, [pc, #568]	; (8002108 <menu+0x4dc>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	f040 82b5 	bne.w	8002440 <menu+0x814>
		if(dilSecim == 0) {
 8001ed6:	4b89      	ldr	r3, [pc, #548]	; (80020fc <menu+0x4d0>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d105      	bne.n	8001eea <menu+0x2be>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001ede:	4a8b      	ldr	r2, [pc, #556]	; (800210c <menu+0x4e0>)
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	f7fe fd66 	bl	80009b4 <lcd_print>
 8001ee8:	e008      	b.n	8001efc <menu+0x2d0>
		} else if(dilSecim == 1) {
 8001eea:	4b84      	ldr	r3, [pc, #528]	; (80020fc <menu+0x4d0>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d104      	bne.n	8001efc <menu+0x2d0>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001ef2:	4a87      	ldr	r2, [pc, #540]	; (8002110 <menu+0x4e4>)
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f7fe fd5c 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001efc:	4b85      	ldr	r3, [pc, #532]	; (8002114 <menu+0x4e8>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d123      	bne.n	8001f4c <menu+0x320>
			if(dilSecim == 0) {
 8001f04:	4b7d      	ldr	r3, [pc, #500]	; (80020fc <menu+0x4d0>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d105      	bne.n	8001f18 <menu+0x2ec>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001f0c:	4a82      	ldr	r2, [pc, #520]	; (8002118 <menu+0x4ec>)
 8001f0e:	2101      	movs	r1, #1
 8001f10:	2002      	movs	r0, #2
 8001f12:	f7fe fd4f 	bl	80009b4 <lcd_print>
 8001f16:	e008      	b.n	8001f2a <menu+0x2fe>

			} else if(dilSecim == 1) {
 8001f18:	4b78      	ldr	r3, [pc, #480]	; (80020fc <menu+0x4d0>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d104      	bne.n	8001f2a <menu+0x2fe>
				lcd_print(2, 1, "1.Error Code:");
 8001f20:	4a7e      	ldr	r2, [pc, #504]	; (800211c <menu+0x4f0>)
 8001f22:	2101      	movs	r1, #1
 8001f24:	2002      	movs	r0, #2
 8001f26:	f7fe fd45 	bl	80009b4 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001f2a:	4a7d      	ldr	r2, [pc, #500]	; (8002120 <menu+0x4f4>)
 8001f2c:	210f      	movs	r1, #15
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f7fe fd40 	bl	80009b4 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001f34:	4b7b      	ldr	r3, [pc, #492]	; (8002124 <menu+0x4f8>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	220a      	movs	r2, #10
 8001f3a:	497b      	ldr	r1, [pc, #492]	; (8002128 <menu+0x4fc>)
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f00b fa35 	bl	800d3ac <itoa>
			lcd_print(2, 14, snum);
 8001f42:	4a79      	ldr	r2, [pc, #484]	; (8002128 <menu+0x4fc>)
 8001f44:	210e      	movs	r1, #14
 8001f46:	2002      	movs	r0, #2
 8001f48:	f7fe fd34 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001f4c:	4b71      	ldr	r3, [pc, #452]	; (8002114 <menu+0x4e8>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d123      	bne.n	8001f9c <menu+0x370>
			if(dilSecim == 0) {
 8001f54:	4b69      	ldr	r3, [pc, #420]	; (80020fc <menu+0x4d0>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d105      	bne.n	8001f68 <menu+0x33c>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001f5c:	4a73      	ldr	r2, [pc, #460]	; (800212c <menu+0x500>)
 8001f5e:	2101      	movs	r1, #1
 8001f60:	2002      	movs	r0, #2
 8001f62:	f7fe fd27 	bl	80009b4 <lcd_print>
 8001f66:	e008      	b.n	8001f7a <menu+0x34e>
			} else if(dilSecim == 1) {
 8001f68:	4b64      	ldr	r3, [pc, #400]	; (80020fc <menu+0x4d0>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d104      	bne.n	8001f7a <menu+0x34e>
				lcd_print(2, 1, "2.Error Code:");
 8001f70:	4a6f      	ldr	r2, [pc, #444]	; (8002130 <menu+0x504>)
 8001f72:	2101      	movs	r1, #1
 8001f74:	2002      	movs	r0, #2
 8001f76:	f7fe fd1d 	bl	80009b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001f7a:	4a6e      	ldr	r2, [pc, #440]	; (8002134 <menu+0x508>)
 8001f7c:	210f      	movs	r1, #15
 8001f7e:	2002      	movs	r0, #2
 8001f80:	f7fe fd18 	bl	80009b4 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001f84:	4b6c      	ldr	r3, [pc, #432]	; (8002138 <menu+0x50c>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	220a      	movs	r2, #10
 8001f8a:	4967      	ldr	r1, [pc, #412]	; (8002128 <menu+0x4fc>)
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f00b fa0d 	bl	800d3ac <itoa>
			lcd_print(2, 14, snum);
 8001f92:	4a65      	ldr	r2, [pc, #404]	; (8002128 <menu+0x4fc>)
 8001f94:	210e      	movs	r1, #14
 8001f96:	2002      	movs	r0, #2
 8001f98:	f7fe fd0c 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001f9c:	4b5d      	ldr	r3, [pc, #372]	; (8002114 <menu+0x4e8>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d123      	bne.n	8001fec <menu+0x3c0>
			if(dilSecim == 0) {
 8001fa4:	4b55      	ldr	r3, [pc, #340]	; (80020fc <menu+0x4d0>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d105      	bne.n	8001fb8 <menu+0x38c>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001fac:	4a63      	ldr	r2, [pc, #396]	; (800213c <menu+0x510>)
 8001fae:	2101      	movs	r1, #1
 8001fb0:	2002      	movs	r0, #2
 8001fb2:	f7fe fcff 	bl	80009b4 <lcd_print>
 8001fb6:	e008      	b.n	8001fca <menu+0x39e>
			} else if(dilSecim == 1) {
 8001fb8:	4b50      	ldr	r3, [pc, #320]	; (80020fc <menu+0x4d0>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d104      	bne.n	8001fca <menu+0x39e>
				lcd_print(2, 1, "3.Error Code:");
 8001fc0:	4a5f      	ldr	r2, [pc, #380]	; (8002140 <menu+0x514>)
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	2002      	movs	r0, #2
 8001fc6:	f7fe fcf5 	bl	80009b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001fca:	4a5a      	ldr	r2, [pc, #360]	; (8002134 <menu+0x508>)
 8001fcc:	210f      	movs	r1, #15
 8001fce:	2002      	movs	r0, #2
 8001fd0:	f7fe fcf0 	bl	80009b4 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001fd4:	4b5b      	ldr	r3, [pc, #364]	; (8002144 <menu+0x518>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	220a      	movs	r2, #10
 8001fda:	4953      	ldr	r1, [pc, #332]	; (8002128 <menu+0x4fc>)
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f00b f9e5 	bl	800d3ac <itoa>
			lcd_print(2, 14, snum);
 8001fe2:	4a51      	ldr	r2, [pc, #324]	; (8002128 <menu+0x4fc>)
 8001fe4:	210e      	movs	r1, #14
 8001fe6:	2002      	movs	r0, #2
 8001fe8:	f7fe fce4 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001fec:	4b49      	ldr	r3, [pc, #292]	; (8002114 <menu+0x4e8>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b03      	cmp	r3, #3
 8001ff2:	d123      	bne.n	800203c <menu+0x410>
			if(dilSecim == 0) {
 8001ff4:	4b41      	ldr	r3, [pc, #260]	; (80020fc <menu+0x4d0>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d105      	bne.n	8002008 <menu+0x3dc>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001ffc:	4a52      	ldr	r2, [pc, #328]	; (8002148 <menu+0x51c>)
 8001ffe:	2101      	movs	r1, #1
 8002000:	2002      	movs	r0, #2
 8002002:	f7fe fcd7 	bl	80009b4 <lcd_print>
 8002006:	e008      	b.n	800201a <menu+0x3ee>
			} else if(dilSecim == 1) {
 8002008:	4b3c      	ldr	r3, [pc, #240]	; (80020fc <menu+0x4d0>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d104      	bne.n	800201a <menu+0x3ee>
				lcd_print(2, 1, "4.Error Code:");
 8002010:	4a4e      	ldr	r2, [pc, #312]	; (800214c <menu+0x520>)
 8002012:	2101      	movs	r1, #1
 8002014:	2002      	movs	r0, #2
 8002016:	f7fe fccd 	bl	80009b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800201a:	4a46      	ldr	r2, [pc, #280]	; (8002134 <menu+0x508>)
 800201c:	210f      	movs	r1, #15
 800201e:	2002      	movs	r0, #2
 8002020:	f7fe fcc8 	bl	80009b4 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8002024:	4b4a      	ldr	r3, [pc, #296]	; (8002150 <menu+0x524>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	220a      	movs	r2, #10
 800202a:	493f      	ldr	r1, [pc, #252]	; (8002128 <menu+0x4fc>)
 800202c:	4618      	mov	r0, r3
 800202e:	f00b f9bd 	bl	800d3ac <itoa>
			lcd_print(2, 14, snum);
 8002032:	4a3d      	ldr	r2, [pc, #244]	; (8002128 <menu+0x4fc>)
 8002034:	210e      	movs	r1, #14
 8002036:	2002      	movs	r0, #2
 8002038:	f7fe fcbc 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800203c:	4b35      	ldr	r3, [pc, #212]	; (8002114 <menu+0x4e8>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b04      	cmp	r3, #4
 8002042:	d123      	bne.n	800208c <menu+0x460>
			if(dilSecim == 0) {
 8002044:	4b2d      	ldr	r3, [pc, #180]	; (80020fc <menu+0x4d0>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d105      	bne.n	8002058 <menu+0x42c>
				lcd_print(2, 1, "5.Hata Kodu: ");
 800204c:	4a41      	ldr	r2, [pc, #260]	; (8002154 <menu+0x528>)
 800204e:	2101      	movs	r1, #1
 8002050:	2002      	movs	r0, #2
 8002052:	f7fe fcaf 	bl	80009b4 <lcd_print>
 8002056:	e008      	b.n	800206a <menu+0x43e>
			} else if(dilSecim == 1) {
 8002058:	4b28      	ldr	r3, [pc, #160]	; (80020fc <menu+0x4d0>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d104      	bne.n	800206a <menu+0x43e>
				lcd_print(2, 1, "5.Error Code:");
 8002060:	4a3d      	ldr	r2, [pc, #244]	; (8002158 <menu+0x52c>)
 8002062:	2101      	movs	r1, #1
 8002064:	2002      	movs	r0, #2
 8002066:	f7fe fca5 	bl	80009b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800206a:	4a32      	ldr	r2, [pc, #200]	; (8002134 <menu+0x508>)
 800206c:	210f      	movs	r1, #15
 800206e:	2002      	movs	r0, #2
 8002070:	f7fe fca0 	bl	80009b4 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8002074:	4b39      	ldr	r3, [pc, #228]	; (800215c <menu+0x530>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	220a      	movs	r2, #10
 800207a:	492b      	ldr	r1, [pc, #172]	; (8002128 <menu+0x4fc>)
 800207c:	4618      	mov	r0, r3
 800207e:	f00b f995 	bl	800d3ac <itoa>
			lcd_print(2, 14, snum);
 8002082:	4a29      	ldr	r2, [pc, #164]	; (8002128 <menu+0x4fc>)
 8002084:	210e      	movs	r1, #14
 8002086:	2002      	movs	r0, #2
 8002088:	f7fe fc94 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800208c:	4b21      	ldr	r3, [pc, #132]	; (8002114 <menu+0x4e8>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b05      	cmp	r3, #5
 8002092:	d123      	bne.n	80020dc <menu+0x4b0>
			if(dilSecim == 0) {
 8002094:	4b19      	ldr	r3, [pc, #100]	; (80020fc <menu+0x4d0>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d105      	bne.n	80020a8 <menu+0x47c>
				lcd_print(2, 1, "6.Hata Kodu: ");
 800209c:	4a30      	ldr	r2, [pc, #192]	; (8002160 <menu+0x534>)
 800209e:	2101      	movs	r1, #1
 80020a0:	2002      	movs	r0, #2
 80020a2:	f7fe fc87 	bl	80009b4 <lcd_print>
 80020a6:	e008      	b.n	80020ba <menu+0x48e>
			} else if(dilSecim == 1) {
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <menu+0x4d0>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d104      	bne.n	80020ba <menu+0x48e>
				lcd_print(2, 1, "6.Error Code:");
 80020b0:	4a2c      	ldr	r2, [pc, #176]	; (8002164 <menu+0x538>)
 80020b2:	2101      	movs	r1, #1
 80020b4:	2002      	movs	r0, #2
 80020b6:	f7fe fc7d 	bl	80009b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80020ba:	4a1e      	ldr	r2, [pc, #120]	; (8002134 <menu+0x508>)
 80020bc:	210f      	movs	r1, #15
 80020be:	2002      	movs	r0, #2
 80020c0:	f7fe fc78 	bl	80009b4 <lcd_print>
			itoa(hataKayit6, snum, 10);
 80020c4:	4b28      	ldr	r3, [pc, #160]	; (8002168 <menu+0x53c>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	220a      	movs	r2, #10
 80020ca:	4917      	ldr	r1, [pc, #92]	; (8002128 <menu+0x4fc>)
 80020cc:	4618      	mov	r0, r3
 80020ce:	f00b f96d 	bl	800d3ac <itoa>
			lcd_print(2, 14, snum);
 80020d2:	4a15      	ldr	r2, [pc, #84]	; (8002128 <menu+0x4fc>)
 80020d4:	210e      	movs	r1, #14
 80020d6:	2002      	movs	r0, #2
 80020d8:	f7fe fc6c 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80020dc:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <menu+0x4e8>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b06      	cmp	r3, #6
 80020e2:	d15f      	bne.n	80021a4 <menu+0x578>
			if(dilSecim == 0) {
 80020e4:	4b05      	ldr	r3, [pc, #20]	; (80020fc <menu+0x4d0>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d141      	bne.n	8002170 <menu+0x544>
				lcd_print(2, 1, "7.Hata Kodu: ");
 80020ec:	4a1f      	ldr	r2, [pc, #124]	; (800216c <menu+0x540>)
 80020ee:	2101      	movs	r1, #1
 80020f0:	2002      	movs	r0, #2
 80020f2:	f7fe fc5f 	bl	80009b4 <lcd_print>
 80020f6:	e044      	b.n	8002182 <menu+0x556>
 80020f8:	0800e0c0 	.word	0x0800e0c0
 80020fc:	20000cbe 	.word	0x20000cbe
 8002100:	0800e0d4 	.word	0x0800e0d4
 8002104:	0800e0e8 	.word	0x0800e0e8
 8002108:	20000c9d 	.word	0x20000c9d
 800210c:	0800e0fc 	.word	0x0800e0fc
 8002110:	0800e110 	.word	0x0800e110
 8002114:	20000c9f 	.word	0x20000c9f
 8002118:	0800e124 	.word	0x0800e124
 800211c:	0800e134 	.word	0x0800e134
 8002120:	0800e144 	.word	0x0800e144
 8002124:	20000cbf 	.word	0x20000cbf
 8002128:	20000bcc 	.word	0x20000bcc
 800212c:	0800e148 	.word	0x0800e148
 8002130:	0800e158 	.word	0x0800e158
 8002134:	0800e168 	.word	0x0800e168
 8002138:	20000cc0 	.word	0x20000cc0
 800213c:	0800e16c 	.word	0x0800e16c
 8002140:	0800e17c 	.word	0x0800e17c
 8002144:	20000cc1 	.word	0x20000cc1
 8002148:	0800e18c 	.word	0x0800e18c
 800214c:	0800e19c 	.word	0x0800e19c
 8002150:	20000cc2 	.word	0x20000cc2
 8002154:	0800e1ac 	.word	0x0800e1ac
 8002158:	0800e1bc 	.word	0x0800e1bc
 800215c:	20000cc3 	.word	0x20000cc3
 8002160:	0800e1cc 	.word	0x0800e1cc
 8002164:	0800e1dc 	.word	0x0800e1dc
 8002168:	20000cc4 	.word	0x20000cc4
 800216c:	0800e1ec 	.word	0x0800e1ec
			} else if(dilSecim == 1) {
 8002170:	4b4f      	ldr	r3, [pc, #316]	; (80022b0 <menu+0x684>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d104      	bne.n	8002182 <menu+0x556>
				lcd_print(2, 1, "7.Error Code:");
 8002178:	4a4e      	ldr	r2, [pc, #312]	; (80022b4 <menu+0x688>)
 800217a:	2101      	movs	r1, #1
 800217c:	2002      	movs	r0, #2
 800217e:	f7fe fc19 	bl	80009b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8002182:	4a4d      	ldr	r2, [pc, #308]	; (80022b8 <menu+0x68c>)
 8002184:	210f      	movs	r1, #15
 8002186:	2002      	movs	r0, #2
 8002188:	f7fe fc14 	bl	80009b4 <lcd_print>
			itoa(hataKayit7, snum, 10);
 800218c:	4b4b      	ldr	r3, [pc, #300]	; (80022bc <menu+0x690>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	220a      	movs	r2, #10
 8002192:	494b      	ldr	r1, [pc, #300]	; (80022c0 <menu+0x694>)
 8002194:	4618      	mov	r0, r3
 8002196:	f00b f909 	bl	800d3ac <itoa>
			lcd_print(2, 14, snum);
 800219a:	4a49      	ldr	r2, [pc, #292]	; (80022c0 <menu+0x694>)
 800219c:	210e      	movs	r1, #14
 800219e:	2002      	movs	r0, #2
 80021a0:	f7fe fc08 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80021a4:	4b47      	ldr	r3, [pc, #284]	; (80022c4 <menu+0x698>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b07      	cmp	r3, #7
 80021aa:	d123      	bne.n	80021f4 <menu+0x5c8>
			if(dilSecim == 0) {
 80021ac:	4b40      	ldr	r3, [pc, #256]	; (80022b0 <menu+0x684>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d105      	bne.n	80021c0 <menu+0x594>
				lcd_print(2, 1, "8.Hata Kodu: ");
 80021b4:	4a44      	ldr	r2, [pc, #272]	; (80022c8 <menu+0x69c>)
 80021b6:	2101      	movs	r1, #1
 80021b8:	2002      	movs	r0, #2
 80021ba:	f7fe fbfb 	bl	80009b4 <lcd_print>
 80021be:	e008      	b.n	80021d2 <menu+0x5a6>
			} else if(dilSecim == 1) {
 80021c0:	4b3b      	ldr	r3, [pc, #236]	; (80022b0 <menu+0x684>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d104      	bne.n	80021d2 <menu+0x5a6>
				lcd_print(2, 1, "8.Error Code:");
 80021c8:	4a40      	ldr	r2, [pc, #256]	; (80022cc <menu+0x6a0>)
 80021ca:	2101      	movs	r1, #1
 80021cc:	2002      	movs	r0, #2
 80021ce:	f7fe fbf1 	bl	80009b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80021d2:	4a39      	ldr	r2, [pc, #228]	; (80022b8 <menu+0x68c>)
 80021d4:	210f      	movs	r1, #15
 80021d6:	2002      	movs	r0, #2
 80021d8:	f7fe fbec 	bl	80009b4 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80021dc:	4b3c      	ldr	r3, [pc, #240]	; (80022d0 <menu+0x6a4>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	220a      	movs	r2, #10
 80021e2:	4937      	ldr	r1, [pc, #220]	; (80022c0 <menu+0x694>)
 80021e4:	4618      	mov	r0, r3
 80021e6:	f00b f8e1 	bl	800d3ac <itoa>
			lcd_print(2, 14, snum);
 80021ea:	4a35      	ldr	r2, [pc, #212]	; (80022c0 <menu+0x694>)
 80021ec:	210e      	movs	r1, #14
 80021ee:	2002      	movs	r0, #2
 80021f0:	f7fe fbe0 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80021f4:	4b33      	ldr	r3, [pc, #204]	; (80022c4 <menu+0x698>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d123      	bne.n	8002244 <menu+0x618>
			if(dilSecim == 0) {
 80021fc:	4b2c      	ldr	r3, [pc, #176]	; (80022b0 <menu+0x684>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d105      	bne.n	8002210 <menu+0x5e4>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8002204:	4a33      	ldr	r2, [pc, #204]	; (80022d4 <menu+0x6a8>)
 8002206:	2101      	movs	r1, #1
 8002208:	2002      	movs	r0, #2
 800220a:	f7fe fbd3 	bl	80009b4 <lcd_print>
 800220e:	e008      	b.n	8002222 <menu+0x5f6>
			} else if(dilSecim == 1) {
 8002210:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <menu+0x684>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d104      	bne.n	8002222 <menu+0x5f6>
				lcd_print(2, 1, "9.Error Code:");
 8002218:	4a2f      	ldr	r2, [pc, #188]	; (80022d8 <menu+0x6ac>)
 800221a:	2101      	movs	r1, #1
 800221c:	2002      	movs	r0, #2
 800221e:	f7fe fbc9 	bl	80009b4 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8002222:	4a25      	ldr	r2, [pc, #148]	; (80022b8 <menu+0x68c>)
 8002224:	210f      	movs	r1, #15
 8002226:	2002      	movs	r0, #2
 8002228:	f7fe fbc4 	bl	80009b4 <lcd_print>
			itoa(hataKayit9, snum, 10);
 800222c:	4b2b      	ldr	r3, [pc, #172]	; (80022dc <menu+0x6b0>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	220a      	movs	r2, #10
 8002232:	4923      	ldr	r1, [pc, #140]	; (80022c0 <menu+0x694>)
 8002234:	4618      	mov	r0, r3
 8002236:	f00b f8b9 	bl	800d3ac <itoa>
			lcd_print(2, 14, snum);
 800223a:	4a21      	ldr	r2, [pc, #132]	; (80022c0 <menu+0x694>)
 800223c:	210e      	movs	r1, #14
 800223e:	2002      	movs	r0, #2
 8002240:	f7fe fbb8 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8002244:	4b1f      	ldr	r3, [pc, #124]	; (80022c4 <menu+0x698>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b09      	cmp	r3, #9
 800224a:	d123      	bne.n	8002294 <menu+0x668>
			if(dilSecim == 0) {
 800224c:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <menu+0x684>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d105      	bne.n	8002260 <menu+0x634>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8002254:	4a22      	ldr	r2, [pc, #136]	; (80022e0 <menu+0x6b4>)
 8002256:	2101      	movs	r1, #1
 8002258:	2002      	movs	r0, #2
 800225a:	f7fe fbab 	bl	80009b4 <lcd_print>
 800225e:	e008      	b.n	8002272 <menu+0x646>
			} else if(dilSecim == 1) {
 8002260:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <menu+0x684>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d104      	bne.n	8002272 <menu+0x646>
				lcd_print(2, 1, "10.Error Code:");
 8002268:	4a1e      	ldr	r2, [pc, #120]	; (80022e4 <menu+0x6b8>)
 800226a:	2101      	movs	r1, #1
 800226c:	2002      	movs	r0, #2
 800226e:	f7fe fba1 	bl	80009b4 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8002272:	4a1d      	ldr	r2, [pc, #116]	; (80022e8 <menu+0x6bc>)
 8002274:	2110      	movs	r1, #16
 8002276:	2002      	movs	r0, #2
 8002278:	f7fe fb9c 	bl	80009b4 <lcd_print>
			itoa(hataKayit10, snum, 10);
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <menu+0x6c0>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	220a      	movs	r2, #10
 8002282:	490f      	ldr	r1, [pc, #60]	; (80022c0 <menu+0x694>)
 8002284:	4618      	mov	r0, r3
 8002286:	f00b f891 	bl	800d3ac <itoa>
			lcd_print(2, 15, snum);
 800228a:	4a0d      	ldr	r2, [pc, #52]	; (80022c0 <menu+0x694>)
 800228c:	210f      	movs	r1, #15
 800228e:	2002      	movs	r0, #2
 8002290:	f7fe fb90 	bl	80009b4 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8002294:	4b0b      	ldr	r3, [pc, #44]	; (80022c4 <menu+0x698>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b0a      	cmp	r3, #10
 800229a:	d134      	bne.n	8002306 <menu+0x6da>
			if(dilSecim == 0) {
 800229c:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <menu+0x684>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d127      	bne.n	80022f4 <menu+0x6c8>
				lcd_print(2, 1, "Silmek icin ent.");
 80022a4:	4a12      	ldr	r2, [pc, #72]	; (80022f0 <menu+0x6c4>)
 80022a6:	2101      	movs	r1, #1
 80022a8:	2002      	movs	r0, #2
 80022aa:	f7fe fb83 	bl	80009b4 <lcd_print>
 80022ae:	e02a      	b.n	8002306 <menu+0x6da>
 80022b0:	20000cbe 	.word	0x20000cbe
 80022b4:	0800e1fc 	.word	0x0800e1fc
 80022b8:	0800e168 	.word	0x0800e168
 80022bc:	20000cc5 	.word	0x20000cc5
 80022c0:	20000bcc 	.word	0x20000bcc
 80022c4:	20000c9f 	.word	0x20000c9f
 80022c8:	0800e20c 	.word	0x0800e20c
 80022cc:	0800e21c 	.word	0x0800e21c
 80022d0:	20000cc6 	.word	0x20000cc6
 80022d4:	0800e22c 	.word	0x0800e22c
 80022d8:	0800e23c 	.word	0x0800e23c
 80022dc:	20000cc7 	.word	0x20000cc7
 80022e0:	0800e24c 	.word	0x0800e24c
 80022e4:	0800e25c 	.word	0x0800e25c
 80022e8:	0800e26c 	.word	0x0800e26c
 80022ec:	20000cc8 	.word	0x20000cc8
 80022f0:	0800e270 	.word	0x0800e270
			} else if(dilSecim == 1) {
 80022f4:	4b82      	ldr	r3, [pc, #520]	; (8002500 <menu+0x8d4>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d104      	bne.n	8002306 <menu+0x6da>
				lcd_print(2, 1, "Del. press enter");
 80022fc:	4a81      	ldr	r2, [pc, #516]	; (8002504 <menu+0x8d8>)
 80022fe:	2101      	movs	r1, #1
 8002300:	2002      	movs	r0, #2
 8002302:	f7fe fb57 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8002306:	2102      	movs	r1, #2
 8002308:	487f      	ldr	r0, [pc, #508]	; (8002508 <menu+0x8dc>)
 800230a:	f007 ffc7 	bl	800a29c <HAL_GPIO_ReadPin>
 800230e:	4603      	mov	r3, r0
 8002310:	2b01      	cmp	r3, #1
 8002312:	d119      	bne.n	8002348 <menu+0x71c>
 8002314:	4b7d      	ldr	r3, [pc, #500]	; (800250c <menu+0x8e0>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	f083 0301 	eor.w	r3, r3, #1
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d012      	beq.n	8002348 <menu+0x71c>
 8002322:	4b7b      	ldr	r3, [pc, #492]	; (8002510 <menu+0x8e4>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10e      	bne.n	8002348 <menu+0x71c>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 800232a:	4b7a      	ldr	r3, [pc, #488]	; (8002514 <menu+0x8e8>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	3301      	adds	r3, #1
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4b78      	ldr	r3, [pc, #480]	; (8002514 <menu+0x8e8>)
 8002334:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8002336:	4b77      	ldr	r3, [pc, #476]	; (8002514 <menu+0x8e8>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b0a      	cmp	r3, #10
 800233c:	d902      	bls.n	8002344 <menu+0x718>
				hataGostermeSirasi = 0;
 800233e:	4b75      	ldr	r3, [pc, #468]	; (8002514 <menu+0x8e8>)
 8002340:	2200      	movs	r2, #0
 8002342:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002344:	f004 fa10 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8002348:	2104      	movs	r1, #4
 800234a:	486f      	ldr	r0, [pc, #444]	; (8002508 <menu+0x8dc>)
 800234c:	f007 ffa6 	bl	800a29c <HAL_GPIO_ReadPin>
 8002350:	4603      	mov	r3, r0
 8002352:	2b01      	cmp	r3, #1
 8002354:	d119      	bne.n	800238a <menu+0x75e>
 8002356:	4b6d      	ldr	r3, [pc, #436]	; (800250c <menu+0x8e0>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	f083 0301 	eor.w	r3, r3, #1
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d012      	beq.n	800238a <menu+0x75e>
 8002364:	4b6a      	ldr	r3, [pc, #424]	; (8002510 <menu+0x8e4>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10e      	bne.n	800238a <menu+0x75e>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 800236c:	4b69      	ldr	r3, [pc, #420]	; (8002514 <menu+0x8e8>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	3b01      	subs	r3, #1
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4b67      	ldr	r3, [pc, #412]	; (8002514 <menu+0x8e8>)
 8002376:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8002378:	4b66      	ldr	r3, [pc, #408]	; (8002514 <menu+0x8e8>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b0b      	cmp	r3, #11
 800237e:	d902      	bls.n	8002386 <menu+0x75a>
	    		hataGostermeSirasi = 10;
 8002380:	4b64      	ldr	r3, [pc, #400]	; (8002514 <menu+0x8e8>)
 8002382:	220a      	movs	r2, #10
 8002384:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8002386:	f004 f9ef 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 800238a:	2108      	movs	r1, #8
 800238c:	485e      	ldr	r0, [pc, #376]	; (8002508 <menu+0x8dc>)
 800238e:	f007 ff85 	bl	800a29c <HAL_GPIO_ReadPin>
 8002392:	4603      	mov	r3, r0
 8002394:	2b01      	cmp	r3, #1
 8002396:	d153      	bne.n	8002440 <menu+0x814>
 8002398:	4b5c      	ldr	r3, [pc, #368]	; (800250c <menu+0x8e0>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	f083 0301 	eor.w	r3, r3, #1
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d04c      	beq.n	8002440 <menu+0x814>
 80023a6:	4b5b      	ldr	r3, [pc, #364]	; (8002514 <menu+0x8e8>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b0a      	cmp	r3, #10
 80023ac:	d148      	bne.n	8002440 <menu+0x814>
			hataKayit1 = 0; eepromData[37] = 0;
 80023ae:	4b5a      	ldr	r3, [pc, #360]	; (8002518 <menu+0x8ec>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
 80023b4:	4b59      	ldr	r3, [pc, #356]	; (800251c <menu+0x8f0>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 80023bc:	4b58      	ldr	r3, [pc, #352]	; (8002520 <menu+0x8f4>)
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	4b56      	ldr	r3, [pc, #344]	; (800251c <menu+0x8f0>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 80023ca:	4b56      	ldr	r3, [pc, #344]	; (8002524 <menu+0x8f8>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
 80023d0:	4b52      	ldr	r3, [pc, #328]	; (800251c <menu+0x8f0>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 80023d8:	4b53      	ldr	r3, [pc, #332]	; (8002528 <menu+0x8fc>)
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	4b4f      	ldr	r3, [pc, #316]	; (800251c <menu+0x8f0>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 80023e6:	4b51      	ldr	r3, [pc, #324]	; (800252c <menu+0x900>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
 80023ec:	4b4b      	ldr	r3, [pc, #300]	; (800251c <menu+0x8f0>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 80023f4:	4b4e      	ldr	r3, [pc, #312]	; (8002530 <menu+0x904>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
 80023fa:	4b48      	ldr	r3, [pc, #288]	; (800251c <menu+0x8f0>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8002402:	4b4c      	ldr	r3, [pc, #304]	; (8002534 <menu+0x908>)
 8002404:	2200      	movs	r2, #0
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	4b44      	ldr	r3, [pc, #272]	; (800251c <menu+0x8f0>)
 800240a:	2200      	movs	r2, #0
 800240c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8002410:	4b49      	ldr	r3, [pc, #292]	; (8002538 <menu+0x90c>)
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
 8002416:	4b41      	ldr	r3, [pc, #260]	; (800251c <menu+0x8f0>)
 8002418:	2200      	movs	r2, #0
 800241a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 800241e:	4b47      	ldr	r3, [pc, #284]	; (800253c <menu+0x910>)
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
 8002424:	4b3d      	ldr	r3, [pc, #244]	; (800251c <menu+0x8f0>)
 8002426:	2200      	movs	r2, #0
 8002428:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 800242c:	4b44      	ldr	r3, [pc, #272]	; (8002540 <menu+0x914>)
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
 8002432:	4b3a      	ldr	r3, [pc, #232]	; (800251c <menu+0x8f0>)
 8002434:	2200      	movs	r2, #0
 8002436:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 800243a:	4b42      	ldr	r3, [pc, #264]	; (8002544 <menu+0x918>)
 800243c:	2201      	movs	r2, #1
 800243e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8002440:	4b41      	ldr	r3, [pc, #260]	; (8002548 <menu+0x91c>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b02      	cmp	r3, #2
 8002446:	f040 80fc 	bne.w	8002642 <menu+0xa16>
		if(dilSecim == 0) {
 800244a:	4b2d      	ldr	r3, [pc, #180]	; (8002500 <menu+0x8d4>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d105      	bne.n	800245e <menu+0x832>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8002452:	4a3e      	ldr	r2, [pc, #248]	; (800254c <menu+0x920>)
 8002454:	2101      	movs	r1, #1
 8002456:	2001      	movs	r0, #1
 8002458:	f7fe faac 	bl	80009b4 <lcd_print>
 800245c:	e008      	b.n	8002470 <menu+0x844>
		} else if(dilSecim == 1) {
 800245e:	4b28      	ldr	r3, [pc, #160]	; (8002500 <menu+0x8d4>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d104      	bne.n	8002470 <menu+0x844>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8002466:	4a3a      	ldr	r2, [pc, #232]	; (8002550 <menu+0x924>)
 8002468:	2101      	movs	r1, #1
 800246a:	2001      	movs	r0, #1
 800246c:	f7fe faa2 	bl	80009b4 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8002470:	4b27      	ldr	r3, [pc, #156]	; (8002510 <menu+0x8e4>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d003      	beq.n	8002480 <menu+0x854>
 8002478:	4b25      	ldr	r3, [pc, #148]	; (8002510 <menu+0x8e4>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b02      	cmp	r3, #2
 800247e:	d112      	bne.n	80024a6 <menu+0x87a>
			if(dilSecim == 0) {
 8002480:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <menu+0x8d4>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d105      	bne.n	8002494 <menu+0x868>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8002488:	4a32      	ldr	r2, [pc, #200]	; (8002554 <menu+0x928>)
 800248a:	2101      	movs	r1, #1
 800248c:	2002      	movs	r0, #2
 800248e:	f7fe fa91 	bl	80009b4 <lcd_print>
 8002492:	e008      	b.n	80024a6 <menu+0x87a>
			} else if(dilSecim == 1) {
 8002494:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <menu+0x8d4>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d104      	bne.n	80024a6 <menu+0x87a>
				lcd_print(2, 1, "Tppng Mobil slct");
 800249c:	4a2e      	ldr	r2, [pc, #184]	; (8002558 <menu+0x92c>)
 800249e:	2101      	movs	r1, #1
 80024a0:	2002      	movs	r0, #2
 80024a2:	f7fe fa87 	bl	80009b4 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 80024a6:	4b2d      	ldr	r3, [pc, #180]	; (800255c <menu+0x930>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d116      	bne.n	80024dc <menu+0x8b0>
 80024ae:	4b18      	ldr	r3, [pc, #96]	; (8002510 <menu+0x8e4>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d112      	bne.n	80024dc <menu+0x8b0>
			if(dilSecim == 0) {
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <menu+0x8d4>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d105      	bne.n	80024ca <menu+0x89e>
				lcd_print(2, 1, "Bastikca cal.  ");
 80024be:	4a28      	ldr	r2, [pc, #160]	; (8002560 <menu+0x934>)
 80024c0:	2101      	movs	r1, #1
 80024c2:	2002      	movs	r0, #2
 80024c4:	f7fe fa76 	bl	80009b4 <lcd_print>
 80024c8:	e008      	b.n	80024dc <menu+0x8b0>
			} else if(dilSecim == 1) {
 80024ca:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <menu+0x8d4>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d104      	bne.n	80024dc <menu+0x8b0>
				lcd_print(2, 1, "Deadman Control");
 80024d2:	4a24      	ldr	r2, [pc, #144]	; (8002564 <menu+0x938>)
 80024d4:	2101      	movs	r1, #1
 80024d6:	2002      	movs	r0, #2
 80024d8:	f7fe fa6c 	bl	80009b4 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 80024dc:	4b1f      	ldr	r3, [pc, #124]	; (800255c <menu+0x930>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d14c      	bne.n	800257e <menu+0x952>
 80024e4:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <menu+0x8e4>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d148      	bne.n	800257e <menu+0x952>
			if(dilSecim == 0) {
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <menu+0x8d4>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d13b      	bne.n	800256c <menu+0x940>
				lcd_print(2, 1, "Bas gonder     ");
 80024f4:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <menu+0x93c>)
 80024f6:	2101      	movs	r1, #1
 80024f8:	2002      	movs	r0, #2
 80024fa:	f7fe fa5b 	bl	80009b4 <lcd_print>
 80024fe:	e03e      	b.n	800257e <menu+0x952>
 8002500:	20000cbe 	.word	0x20000cbe
 8002504:	0800e284 	.word	0x0800e284
 8002508:	40010800 	.word	0x40010800
 800250c:	20000ccc 	.word	0x20000ccc
 8002510:	20000cac 	.word	0x20000cac
 8002514:	20000c9f 	.word	0x20000c9f
 8002518:	20000cbf 	.word	0x20000cbf
 800251c:	20000b38 	.word	0x20000b38
 8002520:	20000cc0 	.word	0x20000cc0
 8002524:	20000cc1 	.word	0x20000cc1
 8002528:	20000cc2 	.word	0x20000cc2
 800252c:	20000cc3 	.word	0x20000cc3
 8002530:	20000cc4 	.word	0x20000cc4
 8002534:	20000cc5 	.word	0x20000cc5
 8002538:	20000cc6 	.word	0x20000cc6
 800253c:	20000cc7 	.word	0x20000cc7
 8002540:	20000cc8 	.word	0x20000cc8
 8002544:	20000cc9 	.word	0x20000cc9
 8002548:	20000c9d 	.word	0x20000c9d
 800254c:	0800e298 	.word	0x0800e298
 8002550:	0800e2ac 	.word	0x0800e2ac
 8002554:	0800e2c0 	.word	0x0800e2c0
 8002558:	0800e2d4 	.word	0x0800e2d4
 800255c:	20000c9e 	.word	0x20000c9e
 8002560:	0800e2e8 	.word	0x0800e2e8
 8002564:	0800e2f8 	.word	0x0800e2f8
 8002568:	0800e308 	.word	0x0800e308
			} else if(dilSecim == 1) {
 800256c:	4b98      	ldr	r3, [pc, #608]	; (80027d0 <menu+0xba4>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d104      	bne.n	800257e <menu+0x952>
				lcd_print(2, 1, "Call & Send    ");
 8002574:	4a97      	ldr	r2, [pc, #604]	; (80027d4 <menu+0xba8>)
 8002576:	2101      	movs	r1, #1
 8002578:	2002      	movs	r0, #2
 800257a:	f7fe fa1b 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800257e:	2102      	movs	r1, #2
 8002580:	4895      	ldr	r0, [pc, #596]	; (80027d8 <menu+0xbac>)
 8002582:	f007 fe8b 	bl	800a29c <HAL_GPIO_ReadPin>
 8002586:	4603      	mov	r3, r0
 8002588:	2b01      	cmp	r3, #1
 800258a:	d119      	bne.n	80025c0 <menu+0x994>
 800258c:	4b93      	ldr	r3, [pc, #588]	; (80027dc <menu+0xbb0>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	f083 0301 	eor.w	r3, r3, #1
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	d012      	beq.n	80025c0 <menu+0x994>
 800259a:	4b91      	ldr	r3, [pc, #580]	; (80027e0 <menu+0xbb4>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10e      	bne.n	80025c0 <menu+0x994>
			calismaSekli = calismaSekli + 1;
 80025a2:	4b90      	ldr	r3, [pc, #576]	; (80027e4 <menu+0xbb8>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	3301      	adds	r3, #1
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4b8e      	ldr	r3, [pc, #568]	; (80027e4 <menu+0xbb8>)
 80025ac:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 80025ae:	4b8d      	ldr	r3, [pc, #564]	; (80027e4 <menu+0xbb8>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d902      	bls.n	80025bc <menu+0x990>
				calismaSekli = 0;
 80025b6:	4b8b      	ldr	r3, [pc, #556]	; (80027e4 <menu+0xbb8>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025bc:	f004 f8d4 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80025c0:	2104      	movs	r1, #4
 80025c2:	4885      	ldr	r0, [pc, #532]	; (80027d8 <menu+0xbac>)
 80025c4:	f007 fe6a 	bl	800a29c <HAL_GPIO_ReadPin>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d119      	bne.n	8002602 <menu+0x9d6>
 80025ce:	4b83      	ldr	r3, [pc, #524]	; (80027dc <menu+0xbb0>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	f083 0301 	eor.w	r3, r3, #1
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d012      	beq.n	8002602 <menu+0x9d6>
 80025dc:	4b80      	ldr	r3, [pc, #512]	; (80027e0 <menu+0xbb4>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d10e      	bne.n	8002602 <menu+0x9d6>
			calismaSekli = calismaSekli - 1;
 80025e4:	4b7f      	ldr	r3, [pc, #508]	; (80027e4 <menu+0xbb8>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	4b7d      	ldr	r3, [pc, #500]	; (80027e4 <menu+0xbb8>)
 80025ee:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 80025f0:	4b7c      	ldr	r3, [pc, #496]	; (80027e4 <menu+0xbb8>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <menu+0x9d2>
	    		calismaSekli = 1;
 80025f8:	4b7a      	ldr	r3, [pc, #488]	; (80027e4 <menu+0xbb8>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80025fe:	f004 f8b3 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002602:	2108      	movs	r1, #8
 8002604:	4874      	ldr	r0, [pc, #464]	; (80027d8 <menu+0xbac>)
 8002606:	f007 fe49 	bl	800a29c <HAL_GPIO_ReadPin>
 800260a:	4603      	mov	r3, r0
 800260c:	2b01      	cmp	r3, #1
 800260e:	d118      	bne.n	8002642 <menu+0xa16>
 8002610:	4b72      	ldr	r3, [pc, #456]	; (80027dc <menu+0xbb0>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	f083 0301 	eor.w	r3, r3, #1
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d011      	beq.n	8002642 <menu+0xa16>
			eepromData[1] = calismaSekli;
 800261e:	4b71      	ldr	r3, [pc, #452]	; (80027e4 <menu+0xbb8>)
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	4b71      	ldr	r3, [pc, #452]	; (80027e8 <menu+0xbbc>)
 8002624:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8002626:	4b6f      	ldr	r3, [pc, #444]	; (80027e4 <menu+0xbb8>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d106      	bne.n	800263c <menu+0xa10>
				altLimit = 1;
 800262e:	4b6f      	ldr	r3, [pc, #444]	; (80027ec <menu+0xbc0>)
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002634:	4b6d      	ldr	r3, [pc, #436]	; (80027ec <menu+0xbc0>)
 8002636:	781a      	ldrb	r2, [r3, #0]
 8002638:	4b6b      	ldr	r3, [pc, #428]	; (80027e8 <menu+0xbbc>)
 800263a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800263c:	4b6c      	ldr	r3, [pc, #432]	; (80027f0 <menu+0xbc4>)
 800263e:	2201      	movs	r2, #1
 8002640:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8002642:	4b6c      	ldr	r3, [pc, #432]	; (80027f4 <menu+0xbc8>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b03      	cmp	r3, #3
 8002648:	f040 8083 	bne.w	8002752 <menu+0xb26>
		if(dilSecim == 0) {
 800264c:	4b60      	ldr	r3, [pc, #384]	; (80027d0 <menu+0xba4>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d105      	bne.n	8002660 <menu+0xa34>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8002654:	4a68      	ldr	r2, [pc, #416]	; (80027f8 <menu+0xbcc>)
 8002656:	2101      	movs	r1, #1
 8002658:	2001      	movs	r0, #1
 800265a:	f7fe f9ab 	bl	80009b4 <lcd_print>
 800265e:	e008      	b.n	8002672 <menu+0xa46>
		} else if(dilSecim == 1) {
 8002660:	4b5b      	ldr	r3, [pc, #364]	; (80027d0 <menu+0xba4>)
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d104      	bne.n	8002672 <menu+0xa46>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8002668:	4a64      	ldr	r2, [pc, #400]	; (80027fc <menu+0xbd0>)
 800266a:	2101      	movs	r1, #1
 800266c:	2001      	movs	r0, #1
 800266e:	f7fe f9a1 	bl	80009b4 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8002672:	4b63      	ldr	r3, [pc, #396]	; (8002800 <menu+0xbd4>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d113      	bne.n	80026a2 <menu+0xa76>
			if(dilSecim == 0) {
 800267a:	4b55      	ldr	r3, [pc, #340]	; (80027d0 <menu+0xba4>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d105      	bne.n	800268e <menu+0xa62>
				lcd_print(2, 1, "Pasif           ");
 8002682:	4a60      	ldr	r2, [pc, #384]	; (8002804 <menu+0xbd8>)
 8002684:	2101      	movs	r1, #1
 8002686:	2002      	movs	r0, #2
 8002688:	f7fe f994 	bl	80009b4 <lcd_print>
 800268c:	e012      	b.n	80026b4 <menu+0xa88>
			} else if(dilSecim == 1) {
 800268e:	4b50      	ldr	r3, [pc, #320]	; (80027d0 <menu+0xba4>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d10e      	bne.n	80026b4 <menu+0xa88>
				lcd_print(2, 1, "Passive         ");
 8002696:	4a5c      	ldr	r2, [pc, #368]	; (8002808 <menu+0xbdc>)
 8002698:	2101      	movs	r1, #1
 800269a:	2002      	movs	r0, #2
 800269c:	f7fe f98a 	bl	80009b4 <lcd_print>
 80026a0:	e008      	b.n	80026b4 <menu+0xa88>
			}
		} else if(emniyetCercevesi == 1) {
 80026a2:	4b57      	ldr	r3, [pc, #348]	; (8002800 <menu+0xbd4>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d104      	bne.n	80026b4 <menu+0xa88>
			lcd_print(2, 1, "OND Safety     ");
 80026aa:	4a58      	ldr	r2, [pc, #352]	; (800280c <menu+0xbe0>)
 80026ac:	2101      	movs	r1, #1
 80026ae:	2002      	movs	r0, #2
 80026b0:	f7fe f980 	bl	80009b4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026b4:	2102      	movs	r1, #2
 80026b6:	4848      	ldr	r0, [pc, #288]	; (80027d8 <menu+0xbac>)
 80026b8:	f007 fdf0 	bl	800a29c <HAL_GPIO_ReadPin>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d115      	bne.n	80026ee <menu+0xac2>
 80026c2:	4b46      	ldr	r3, [pc, #280]	; (80027dc <menu+0xbb0>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	f083 0301 	eor.w	r3, r3, #1
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00e      	beq.n	80026ee <menu+0xac2>
			emniyetCercevesi = emniyetCercevesi + 1;
 80026d0:	4b4b      	ldr	r3, [pc, #300]	; (8002800 <menu+0xbd4>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	3301      	adds	r3, #1
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	4b49      	ldr	r3, [pc, #292]	; (8002800 <menu+0xbd4>)
 80026da:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 80026dc:	4b48      	ldr	r3, [pc, #288]	; (8002800 <menu+0xbd4>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d902      	bls.n	80026ea <menu+0xabe>
				emniyetCercevesi = 0;
 80026e4:	4b46      	ldr	r3, [pc, #280]	; (8002800 <menu+0xbd4>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026ea:	f004 f83d 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026ee:	2104      	movs	r1, #4
 80026f0:	4839      	ldr	r0, [pc, #228]	; (80027d8 <menu+0xbac>)
 80026f2:	f007 fdd3 	bl	800a29c <HAL_GPIO_ReadPin>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d115      	bne.n	8002728 <menu+0xafc>
 80026fc:	4b37      	ldr	r3, [pc, #220]	; (80027dc <menu+0xbb0>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	f083 0301 	eor.w	r3, r3, #1
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00e      	beq.n	8002728 <menu+0xafc>
			emniyetCercevesi = emniyetCercevesi - 1;
 800270a:	4b3d      	ldr	r3, [pc, #244]	; (8002800 <menu+0xbd4>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	3b01      	subs	r3, #1
 8002710:	b2da      	uxtb	r2, r3
 8002712:	4b3b      	ldr	r3, [pc, #236]	; (8002800 <menu+0xbd4>)
 8002714:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8002716:	4b3a      	ldr	r3, [pc, #232]	; (8002800 <menu+0xbd4>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <menu+0xaf8>
		   		emniyetCercevesi = 1;
 800271e:	4b38      	ldr	r3, [pc, #224]	; (8002800 <menu+0xbd4>)
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002724:	f004 f820 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8002728:	2108      	movs	r1, #8
 800272a:	482b      	ldr	r0, [pc, #172]	; (80027d8 <menu+0xbac>)
 800272c:	f007 fdb6 	bl	800a29c <HAL_GPIO_ReadPin>
 8002730:	4603      	mov	r3, r0
 8002732:	2b01      	cmp	r3, #1
 8002734:	d10d      	bne.n	8002752 <menu+0xb26>
 8002736:	4b29      	ldr	r3, [pc, #164]	; (80027dc <menu+0xbb0>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	f083 0301 	eor.w	r3, r3, #1
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d006      	beq.n	8002752 <menu+0xb26>
			eepromData[2] = emniyetCercevesi;
 8002744:	4b2e      	ldr	r3, [pc, #184]	; (8002800 <menu+0xbd4>)
 8002746:	781a      	ldrb	r2, [r3, #0]
 8002748:	4b27      	ldr	r3, [pc, #156]	; (80027e8 <menu+0xbbc>)
 800274a:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 800274c:	4b28      	ldr	r3, [pc, #160]	; (80027f0 <menu+0xbc4>)
 800274e:	2201      	movs	r2, #1
 8002750:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8002752:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <menu+0xbc8>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b04      	cmp	r3, #4
 8002758:	f040 80ba 	bne.w	80028d0 <menu+0xca4>
		if(dilSecim == 0) {
 800275c:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <menu+0xba4>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d105      	bne.n	8002770 <menu+0xb44>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8002764:	4a2a      	ldr	r2, [pc, #168]	; (8002810 <menu+0xbe4>)
 8002766:	2101      	movs	r1, #1
 8002768:	2001      	movs	r0, #1
 800276a:	f7fe f923 	bl	80009b4 <lcd_print>
 800276e:	e008      	b.n	8002782 <menu+0xb56>
		} else if(dilSecim == 1) {
 8002770:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <menu+0xba4>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d104      	bne.n	8002782 <menu+0xb56>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8002778:	4a26      	ldr	r2, [pc, #152]	; (8002814 <menu+0xbe8>)
 800277a:	2101      	movs	r1, #1
 800277c:	2001      	movs	r0, #1
 800277e:	f7fe f919 	bl	80009b4 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8002782:	4b25      	ldr	r3, [pc, #148]	; (8002818 <menu+0xbec>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d113      	bne.n	80027b2 <menu+0xb86>
			if(dilSecim == 0) {
 800278a:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <menu+0xba4>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d105      	bne.n	800279e <menu+0xb72>
				lcd_print(2, 1, "Pasif           ");
 8002792:	4a1c      	ldr	r2, [pc, #112]	; (8002804 <menu+0xbd8>)
 8002794:	2101      	movs	r1, #1
 8002796:	2002      	movs	r0, #2
 8002798:	f7fe f90c 	bl	80009b4 <lcd_print>
 800279c:	e049      	b.n	8002832 <menu+0xc06>
			} else if(dilSecim == 1) {
 800279e:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <menu+0xba4>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d145      	bne.n	8002832 <menu+0xc06>
				lcd_print(2, 1, "Passive         ");
 80027a6:	4a18      	ldr	r2, [pc, #96]	; (8002808 <menu+0xbdc>)
 80027a8:	2101      	movs	r1, #1
 80027aa:	2002      	movs	r0, #2
 80027ac:	f7fe f902 	bl	80009b4 <lcd_print>
 80027b0:	e03f      	b.n	8002832 <menu+0xc06>
			}
		} else if(yavaslamaLimit == 1) {
 80027b2:	4b19      	ldr	r3, [pc, #100]	; (8002818 <menu+0xbec>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d13b      	bne.n	8002832 <menu+0xc06>
			if(dilSecim == 0) {
 80027ba:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <menu+0xba4>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d12e      	bne.n	8002820 <menu+0xbf4>
				lcd_print(2, 1, "Aktif           ");
 80027c2:	4a16      	ldr	r2, [pc, #88]	; (800281c <menu+0xbf0>)
 80027c4:	2101      	movs	r1, #1
 80027c6:	2002      	movs	r0, #2
 80027c8:	f7fe f8f4 	bl	80009b4 <lcd_print>
 80027cc:	e031      	b.n	8002832 <menu+0xc06>
 80027ce:	bf00      	nop
 80027d0:	20000cbe 	.word	0x20000cbe
 80027d4:	0800e318 	.word	0x0800e318
 80027d8:	40010800 	.word	0x40010800
 80027dc:	20000ccc 	.word	0x20000ccc
 80027e0:	20000cac 	.word	0x20000cac
 80027e4:	20000c9e 	.word	0x20000c9e
 80027e8:	20000b38 	.word	0x20000b38
 80027ec:	20000ca3 	.word	0x20000ca3
 80027f0:	20000cc9 	.word	0x20000cc9
 80027f4:	20000c9d 	.word	0x20000c9d
 80027f8:	0800e328 	.word	0x0800e328
 80027fc:	0800e33c 	.word	0x0800e33c
 8002800:	20000ca1 	.word	0x20000ca1
 8002804:	0800e350 	.word	0x0800e350
 8002808:	0800e364 	.word	0x0800e364
 800280c:	0800e378 	.word	0x0800e378
 8002810:	0800e388 	.word	0x0800e388
 8002814:	0800e39c 	.word	0x0800e39c
 8002818:	20000ca2 	.word	0x20000ca2
 800281c:	0800e3b0 	.word	0x0800e3b0
			} else if(dilSecim == 1) {
 8002820:	4b92      	ldr	r3, [pc, #584]	; (8002a6c <menu+0xe40>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d104      	bne.n	8002832 <menu+0xc06>
				lcd_print(2, 1, "Active          ");
 8002828:	4a91      	ldr	r2, [pc, #580]	; (8002a70 <menu+0xe44>)
 800282a:	2101      	movs	r1, #1
 800282c:	2002      	movs	r0, #2
 800282e:	f7fe f8c1 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002832:	2102      	movs	r1, #2
 8002834:	488f      	ldr	r0, [pc, #572]	; (8002a74 <menu+0xe48>)
 8002836:	f007 fd31 	bl	800a29c <HAL_GPIO_ReadPin>
 800283a:	4603      	mov	r3, r0
 800283c:	2b01      	cmp	r3, #1
 800283e:	d115      	bne.n	800286c <menu+0xc40>
 8002840:	4b8d      	ldr	r3, [pc, #564]	; (8002a78 <menu+0xe4c>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	f083 0301 	eor.w	r3, r3, #1
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00e      	beq.n	800286c <menu+0xc40>
			yavaslamaLimit = yavaslamaLimit + 1;
 800284e:	4b8b      	ldr	r3, [pc, #556]	; (8002a7c <menu+0xe50>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	3301      	adds	r3, #1
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4b89      	ldr	r3, [pc, #548]	; (8002a7c <menu+0xe50>)
 8002858:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 800285a:	4b88      	ldr	r3, [pc, #544]	; (8002a7c <menu+0xe50>)
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d902      	bls.n	8002868 <menu+0xc3c>
				yavaslamaLimit = 0;
 8002862:	4b86      	ldr	r3, [pc, #536]	; (8002a7c <menu+0xe50>)
 8002864:	2200      	movs	r2, #0
 8002866:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002868:	f003 ff7e 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800286c:	2104      	movs	r1, #4
 800286e:	4881      	ldr	r0, [pc, #516]	; (8002a74 <menu+0xe48>)
 8002870:	f007 fd14 	bl	800a29c <HAL_GPIO_ReadPin>
 8002874:	4603      	mov	r3, r0
 8002876:	2b01      	cmp	r3, #1
 8002878:	d115      	bne.n	80028a6 <menu+0xc7a>
 800287a:	4b7f      	ldr	r3, [pc, #508]	; (8002a78 <menu+0xe4c>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	f083 0301 	eor.w	r3, r3, #1
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00e      	beq.n	80028a6 <menu+0xc7a>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002888:	4b7c      	ldr	r3, [pc, #496]	; (8002a7c <menu+0xe50>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	3b01      	subs	r3, #1
 800288e:	b2da      	uxtb	r2, r3
 8002890:	4b7a      	ldr	r3, [pc, #488]	; (8002a7c <menu+0xe50>)
 8002892:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002894:	4b79      	ldr	r3, [pc, #484]	; (8002a7c <menu+0xe50>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <menu+0xc76>
		   		yavaslamaLimit = 1;
 800289c:	4b77      	ldr	r3, [pc, #476]	; (8002a7c <menu+0xe50>)
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028a2:	f003 ff61 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028a6:	2108      	movs	r1, #8
 80028a8:	4872      	ldr	r0, [pc, #456]	; (8002a74 <menu+0xe48>)
 80028aa:	f007 fcf7 	bl	800a29c <HAL_GPIO_ReadPin>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d10d      	bne.n	80028d0 <menu+0xca4>
 80028b4:	4b70      	ldr	r3, [pc, #448]	; (8002a78 <menu+0xe4c>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	f083 0301 	eor.w	r3, r3, #1
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d006      	beq.n	80028d0 <menu+0xca4>
			eepromData[4] = yavaslamaLimit;
 80028c2:	4b6e      	ldr	r3, [pc, #440]	; (8002a7c <menu+0xe50>)
 80028c4:	781a      	ldrb	r2, [r3, #0]
 80028c6:	4b6e      	ldr	r3, [pc, #440]	; (8002a80 <menu+0xe54>)
 80028c8:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 80028ca:	4b6e      	ldr	r3, [pc, #440]	; (8002a84 <menu+0xe58>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80028d0:	4b6d      	ldr	r3, [pc, #436]	; (8002a88 <menu+0xe5c>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b05      	cmp	r3, #5
 80028d6:	f040 80b9 	bne.w	8002a4c <menu+0xe20>
		if(dilSecim == 0) {
 80028da:	4b64      	ldr	r3, [pc, #400]	; (8002a6c <menu+0xe40>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d105      	bne.n	80028ee <menu+0xcc2>
			lcd_print(1, 1, "ALT LIMIT       ");
 80028e2:	4a6a      	ldr	r2, [pc, #424]	; (8002a8c <menu+0xe60>)
 80028e4:	2101      	movs	r1, #1
 80028e6:	2001      	movs	r0, #1
 80028e8:	f7fe f864 	bl	80009b4 <lcd_print>
 80028ec:	e008      	b.n	8002900 <menu+0xcd4>
		} else if(dilSecim == 1) {
 80028ee:	4b5f      	ldr	r3, [pc, #380]	; (8002a6c <menu+0xe40>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d104      	bne.n	8002900 <menu+0xcd4>
			lcd_print(1, 1, "DOWN LIMIT      ");
 80028f6:	4a66      	ldr	r2, [pc, #408]	; (8002a90 <menu+0xe64>)
 80028f8:	2101      	movs	r1, #1
 80028fa:	2001      	movs	r0, #1
 80028fc:	f7fe f85a 	bl	80009b4 <lcd_print>
		}

		if(altLimit == 0) {
 8002900:	4b64      	ldr	r3, [pc, #400]	; (8002a94 <menu+0xe68>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d113      	bne.n	8002930 <menu+0xd04>
			if(dilSecim == 0) {
 8002908:	4b58      	ldr	r3, [pc, #352]	; (8002a6c <menu+0xe40>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d105      	bne.n	800291c <menu+0xcf0>
				lcd_print(2, 1, "Pasif           ");
 8002910:	4a61      	ldr	r2, [pc, #388]	; (8002a98 <menu+0xe6c>)
 8002912:	2101      	movs	r1, #1
 8002914:	2002      	movs	r0, #2
 8002916:	f7fe f84d 	bl	80009b4 <lcd_print>
 800291a:	e020      	b.n	800295e <menu+0xd32>
			} else if(dilSecim == 1) {
 800291c:	4b53      	ldr	r3, [pc, #332]	; (8002a6c <menu+0xe40>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d11c      	bne.n	800295e <menu+0xd32>
				lcd_print(2, 1, "Passive         ");
 8002924:	4a5d      	ldr	r2, [pc, #372]	; (8002a9c <menu+0xe70>)
 8002926:	2101      	movs	r1, #1
 8002928:	2002      	movs	r0, #2
 800292a:	f7fe f843 	bl	80009b4 <lcd_print>
 800292e:	e016      	b.n	800295e <menu+0xd32>
			}
		} else if(altLimit == 1) {
 8002930:	4b58      	ldr	r3, [pc, #352]	; (8002a94 <menu+0xe68>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d112      	bne.n	800295e <menu+0xd32>
			if(dilSecim == 0){
 8002938:	4b4c      	ldr	r3, [pc, #304]	; (8002a6c <menu+0xe40>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d105      	bne.n	800294c <menu+0xd20>
				lcd_print(2, 1, "Aktif           ");
 8002940:	4a57      	ldr	r2, [pc, #348]	; (8002aa0 <menu+0xe74>)
 8002942:	2101      	movs	r1, #1
 8002944:	2002      	movs	r0, #2
 8002946:	f7fe f835 	bl	80009b4 <lcd_print>
 800294a:	e008      	b.n	800295e <menu+0xd32>
			} else if(dilSecim == 1){
 800294c:	4b47      	ldr	r3, [pc, #284]	; (8002a6c <menu+0xe40>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d104      	bne.n	800295e <menu+0xd32>
				lcd_print(2, 1, "Active          ");
 8002954:	4a46      	ldr	r2, [pc, #280]	; (8002a70 <menu+0xe44>)
 8002956:	2101      	movs	r1, #1
 8002958:	2002      	movs	r0, #2
 800295a:	f7fe f82b 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 800295e:	2102      	movs	r1, #2
 8002960:	4844      	ldr	r0, [pc, #272]	; (8002a74 <menu+0xe48>)
 8002962:	f007 fc9b 	bl	800a29c <HAL_GPIO_ReadPin>
 8002966:	4603      	mov	r3, r0
 8002968:	2b01      	cmp	r3, #1
 800296a:	d119      	bne.n	80029a0 <menu+0xd74>
 800296c:	4b42      	ldr	r3, [pc, #264]	; (8002a78 <menu+0xe4c>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	f083 0301 	eor.w	r3, r3, #1
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d012      	beq.n	80029a0 <menu+0xd74>
 800297a:	4b4a      	ldr	r3, [pc, #296]	; (8002aa4 <menu+0xe78>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10e      	bne.n	80029a0 <menu+0xd74>
			altLimit = altLimit + 1;
 8002982:	4b44      	ldr	r3, [pc, #272]	; (8002a94 <menu+0xe68>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	3301      	adds	r3, #1
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4b42      	ldr	r3, [pc, #264]	; (8002a94 <menu+0xe68>)
 800298c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800298e:	4b41      	ldr	r3, [pc, #260]	; (8002a94 <menu+0xe68>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d902      	bls.n	800299c <menu+0xd70>
				altLimit = 0;
 8002996:	4b3f      	ldr	r3, [pc, #252]	; (8002a94 <menu+0xe68>)
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800299c:	f003 fee4 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80029a0:	2104      	movs	r1, #4
 80029a2:	4834      	ldr	r0, [pc, #208]	; (8002a74 <menu+0xe48>)
 80029a4:	f007 fc7a 	bl	800a29c <HAL_GPIO_ReadPin>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d119      	bne.n	80029e2 <menu+0xdb6>
 80029ae:	4b32      	ldr	r3, [pc, #200]	; (8002a78 <menu+0xe4c>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	f083 0301 	eor.w	r3, r3, #1
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d012      	beq.n	80029e2 <menu+0xdb6>
 80029bc:	4b39      	ldr	r3, [pc, #228]	; (8002aa4 <menu+0xe78>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10e      	bne.n	80029e2 <menu+0xdb6>
			altLimit = altLimit - 1;
 80029c4:	4b33      	ldr	r3, [pc, #204]	; (8002a94 <menu+0xe68>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	4b31      	ldr	r3, [pc, #196]	; (8002a94 <menu+0xe68>)
 80029ce:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80029d0:	4b30      	ldr	r3, [pc, #192]	; (8002a94 <menu+0xe68>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <menu+0xdb2>
		   		altLimit = 1;
 80029d8:	4b2e      	ldr	r3, [pc, #184]	; (8002a94 <menu+0xe68>)
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029de:	f003 fec3 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029e2:	2108      	movs	r1, #8
 80029e4:	4823      	ldr	r0, [pc, #140]	; (8002a74 <menu+0xe48>)
 80029e6:	f007 fc59 	bl	800a29c <HAL_GPIO_ReadPin>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d12d      	bne.n	8002a4c <menu+0xe20>
 80029f0:	4b21      	ldr	r3, [pc, #132]	; (8002a78 <menu+0xe4c>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	f083 0301 	eor.w	r3, r3, #1
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d026      	beq.n	8002a4c <menu+0xe20>
			eepromData[5] = altLimit;
 80029fe:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <menu+0xe68>)
 8002a00:	781a      	ldrb	r2, [r3, #0]
 8002a02:	4b1f      	ldr	r3, [pc, #124]	; (8002a80 <menu+0xe54>)
 8002a04:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002a06:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <menu+0xe68>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d110      	bne.n	8002a30 <menu+0xe04>
 8002a0e:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <menu+0xe7c>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <menu+0xdf2>
 8002a16:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <menu+0xe7c>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d108      	bne.n	8002a30 <menu+0xe04>
				kapiTablaAcKonum = 3;
 8002a1e:	4b22      	ldr	r3, [pc, #136]	; (8002aa8 <menu+0xe7c>)
 8002a20:	2203      	movs	r2, #3
 8002a22:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002a24:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <menu+0xe7c>)
 8002a26:	781a      	ldrb	r2, [r3, #0]
 8002a28:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <menu+0xe54>)
 8002a2a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002a2e:	e00a      	b.n	8002a46 <menu+0xe1a>
			} else if(altLimit == 0) {
 8002a30:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <menu+0xe68>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d106      	bne.n	8002a46 <menu+0xe1a>
				platformSilindirTipi = 0;
 8002a38:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <menu+0xe80>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8002a3e:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <menu+0xe80>)
 8002a40:	781a      	ldrb	r2, [r3, #0]
 8002a42:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <menu+0xe54>)
 8002a44:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8002a46:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <menu+0xe58>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002a4c:	4b0e      	ldr	r3, [pc, #56]	; (8002a88 <menu+0xe5c>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b06      	cmp	r3, #6
 8002a52:	f040 80b6 	bne.w	8002bc2 <menu+0xf96>
		if(dilSecim == 0) {
 8002a56:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <menu+0xe40>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d12a      	bne.n	8002ab4 <menu+0xe88>
			lcd_print(1, 1, "BASINC SALTERI ");
 8002a5e:	4a14      	ldr	r2, [pc, #80]	; (8002ab0 <menu+0xe84>)
 8002a60:	2101      	movs	r1, #1
 8002a62:	2001      	movs	r0, #1
 8002a64:	f7fd ffa6 	bl	80009b4 <lcd_print>
 8002a68:	e02d      	b.n	8002ac6 <menu+0xe9a>
 8002a6a:	bf00      	nop
 8002a6c:	20000cbe 	.word	0x20000cbe
 8002a70:	0800e3c4 	.word	0x0800e3c4
 8002a74:	40010800 	.word	0x40010800
 8002a78:	20000ccc 	.word	0x20000ccc
 8002a7c:	20000ca2 	.word	0x20000ca2
 8002a80:	20000b38 	.word	0x20000b38
 8002a84:	20000cc9 	.word	0x20000cc9
 8002a88:	20000c9d 	.word	0x20000c9d
 8002a8c:	0800e3d8 	.word	0x0800e3d8
 8002a90:	0800e3ec 	.word	0x0800e3ec
 8002a94:	20000ca3 	.word	0x20000ca3
 8002a98:	0800e350 	.word	0x0800e350
 8002a9c:	0800e364 	.word	0x0800e364
 8002aa0:	0800e3b0 	.word	0x0800e3b0
 8002aa4:	20000c9e 	.word	0x20000c9e
 8002aa8:	20000caa 	.word	0x20000caa
 8002aac:	20000cb0 	.word	0x20000cb0
 8002ab0:	0800e400 	.word	0x0800e400
		} else if(dilSecim == 1){
 8002ab4:	4b7a      	ldr	r3, [pc, #488]	; (8002ca0 <menu+0x1074>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d104      	bne.n	8002ac6 <menu+0xe9a>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002abc:	4a79      	ldr	r2, [pc, #484]	; (8002ca4 <menu+0x1078>)
 8002abe:	2101      	movs	r1, #1
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f7fd ff77 	bl	80009b4 <lcd_print>
		}
		if(basincSalteri == 0){
 8002ac6:	4b78      	ldr	r3, [pc, #480]	; (8002ca8 <menu+0x107c>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d113      	bne.n	8002af6 <menu+0xeca>
			if(dilSecim == 0) {
 8002ace:	4b74      	ldr	r3, [pc, #464]	; (8002ca0 <menu+0x1074>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d105      	bne.n	8002ae2 <menu+0xeb6>
				lcd_print(2, 1, "Pasif           ");
 8002ad6:	4a75      	ldr	r2, [pc, #468]	; (8002cac <menu+0x1080>)
 8002ad8:	2101      	movs	r1, #1
 8002ada:	2002      	movs	r0, #2
 8002adc:	f7fd ff6a 	bl	80009b4 <lcd_print>
 8002ae0:	e020      	b.n	8002b24 <menu+0xef8>
			} else if(dilSecim == 1){
 8002ae2:	4b6f      	ldr	r3, [pc, #444]	; (8002ca0 <menu+0x1074>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d11c      	bne.n	8002b24 <menu+0xef8>
				lcd_print(2, 1, "Passive         ");
 8002aea:	4a71      	ldr	r2, [pc, #452]	; (8002cb0 <menu+0x1084>)
 8002aec:	2101      	movs	r1, #1
 8002aee:	2002      	movs	r0, #2
 8002af0:	f7fd ff60 	bl	80009b4 <lcd_print>
 8002af4:	e016      	b.n	8002b24 <menu+0xef8>
			}
		} else if(basincSalteri == 1) {
 8002af6:	4b6c      	ldr	r3, [pc, #432]	; (8002ca8 <menu+0x107c>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d112      	bne.n	8002b24 <menu+0xef8>
			if(dilSecim == 0) {
 8002afe:	4b68      	ldr	r3, [pc, #416]	; (8002ca0 <menu+0x1074>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d105      	bne.n	8002b12 <menu+0xee6>
				lcd_print(2, 1, "Aktif           ");
 8002b06:	4a6b      	ldr	r2, [pc, #428]	; (8002cb4 <menu+0x1088>)
 8002b08:	2101      	movs	r1, #1
 8002b0a:	2002      	movs	r0, #2
 8002b0c:	f7fd ff52 	bl	80009b4 <lcd_print>
 8002b10:	e008      	b.n	8002b24 <menu+0xef8>
			} else if(dilSecim == 1) {
 8002b12:	4b63      	ldr	r3, [pc, #396]	; (8002ca0 <menu+0x1074>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d104      	bne.n	8002b24 <menu+0xef8>
				lcd_print(2, 1, "Active          ");
 8002b1a:	4a67      	ldr	r2, [pc, #412]	; (8002cb8 <menu+0x108c>)
 8002b1c:	2101      	movs	r1, #1
 8002b1e:	2002      	movs	r0, #2
 8002b20:	f7fd ff48 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b24:	2102      	movs	r1, #2
 8002b26:	4865      	ldr	r0, [pc, #404]	; (8002cbc <menu+0x1090>)
 8002b28:	f007 fbb8 	bl	800a29c <HAL_GPIO_ReadPin>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d115      	bne.n	8002b5e <menu+0xf32>
 8002b32:	4b63      	ldr	r3, [pc, #396]	; (8002cc0 <menu+0x1094>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	f083 0301 	eor.w	r3, r3, #1
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00e      	beq.n	8002b5e <menu+0xf32>
			basincSalteri = basincSalteri + 1;
 8002b40:	4b59      	ldr	r3, [pc, #356]	; (8002ca8 <menu+0x107c>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	3301      	adds	r3, #1
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	4b57      	ldr	r3, [pc, #348]	; (8002ca8 <menu+0x107c>)
 8002b4a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002b4c:	4b56      	ldr	r3, [pc, #344]	; (8002ca8 <menu+0x107c>)
 8002b4e:	781b      	ldrb	r3, [r3, #0]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d902      	bls.n	8002b5a <menu+0xf2e>
				basincSalteri = 0;
 8002b54:	4b54      	ldr	r3, [pc, #336]	; (8002ca8 <menu+0x107c>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b5a:	f003 fe05 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b5e:	2104      	movs	r1, #4
 8002b60:	4856      	ldr	r0, [pc, #344]	; (8002cbc <menu+0x1090>)
 8002b62:	f007 fb9b 	bl	800a29c <HAL_GPIO_ReadPin>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d115      	bne.n	8002b98 <menu+0xf6c>
 8002b6c:	4b54      	ldr	r3, [pc, #336]	; (8002cc0 <menu+0x1094>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	f083 0301 	eor.w	r3, r3, #1
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00e      	beq.n	8002b98 <menu+0xf6c>
			basincSalteri = basincSalteri - 1;
 8002b7a:	4b4b      	ldr	r3, [pc, #300]	; (8002ca8 <menu+0x107c>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	4b49      	ldr	r3, [pc, #292]	; (8002ca8 <menu+0x107c>)
 8002b84:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002b86:	4b48      	ldr	r3, [pc, #288]	; (8002ca8 <menu+0x107c>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d002      	beq.n	8002b94 <menu+0xf68>
		   		basincSalteri = 1;
 8002b8e:	4b46      	ldr	r3, [pc, #280]	; (8002ca8 <menu+0x107c>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b94:	f003 fde8 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b98:	2108      	movs	r1, #8
 8002b9a:	4848      	ldr	r0, [pc, #288]	; (8002cbc <menu+0x1090>)
 8002b9c:	f007 fb7e 	bl	800a29c <HAL_GPIO_ReadPin>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d10d      	bne.n	8002bc2 <menu+0xf96>
 8002ba6:	4b46      	ldr	r3, [pc, #280]	; (8002cc0 <menu+0x1094>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	f083 0301 	eor.w	r3, r3, #1
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d006      	beq.n	8002bc2 <menu+0xf96>
			eepromData[6] = basincSalteri;
 8002bb4:	4b3c      	ldr	r3, [pc, #240]	; (8002ca8 <menu+0x107c>)
 8002bb6:	781a      	ldrb	r2, [r3, #0]
 8002bb8:	4b42      	ldr	r3, [pc, #264]	; (8002cc4 <menu+0x1098>)
 8002bba:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002bbc:	4b42      	ldr	r3, [pc, #264]	; (8002cc8 <menu+0x109c>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002bc2:	4b42      	ldr	r3, [pc, #264]	; (8002ccc <menu+0x10a0>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	2b07      	cmp	r3, #7
 8002bc8:	f040 80f5 	bne.w	8002db6 <menu+0x118a>
		if(dilSecim == 0) {
 8002bcc:	4b34      	ldr	r3, [pc, #208]	; (8002ca0 <menu+0x1074>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d105      	bne.n	8002be0 <menu+0xfb4>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002bd4:	4a3e      	ldr	r2, [pc, #248]	; (8002cd0 <menu+0x10a4>)
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	2001      	movs	r0, #1
 8002bda:	f7fd feeb 	bl	80009b4 <lcd_print>
 8002bde:	e008      	b.n	8002bf2 <menu+0xfc6>
		} else if(dilSecim == 1){
 8002be0:	4b2f      	ldr	r3, [pc, #188]	; (8002ca0 <menu+0x1074>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d104      	bne.n	8002bf2 <menu+0xfc6>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002be8:	4a3a      	ldr	r2, [pc, #232]	; (8002cd4 <menu+0x10a8>)
 8002bea:	2101      	movs	r1, #1
 8002bec:	2001      	movs	r0, #1
 8002bee:	f7fd fee1 	bl	80009b4 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002bf2:	4b39      	ldr	r3, [pc, #228]	; (8002cd8 <menu+0x10ac>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d113      	bne.n	8002c22 <menu+0xff6>
			if(dilSecim == 0) {
 8002bfa:	4b29      	ldr	r3, [pc, #164]	; (8002ca0 <menu+0x1074>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d105      	bne.n	8002c0e <menu+0xfe2>
				lcd_print(2, 1, "Pasif           ");
 8002c02:	4a2a      	ldr	r2, [pc, #168]	; (8002cac <menu+0x1080>)
 8002c04:	2101      	movs	r1, #1
 8002c06:	2002      	movs	r0, #2
 8002c08:	f7fd fed4 	bl	80009b4 <lcd_print>
 8002c0c:	e079      	b.n	8002d02 <menu+0x10d6>
			} else if(dilSecim == 1){
 8002c0e:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <menu+0x1074>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d175      	bne.n	8002d02 <menu+0x10d6>
				lcd_print(2, 1, "Passive         ");
 8002c16:	4a26      	ldr	r2, [pc, #152]	; (8002cb0 <menu+0x1084>)
 8002c18:	2101      	movs	r1, #1
 8002c1a:	2002      	movs	r0, #2
 8002c1c:	f7fd feca 	bl	80009b4 <lcd_print>
 8002c20:	e06f      	b.n	8002d02 <menu+0x10d6>
			}
		} else if(kapiSecimleri == 1) {
 8002c22:	4b2d      	ldr	r3, [pc, #180]	; (8002cd8 <menu+0x10ac>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d113      	bne.n	8002c52 <menu+0x1026>
			if(dilSecim == 0) {
 8002c2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <menu+0x1074>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d105      	bne.n	8002c3e <menu+0x1012>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002c32:	4a2a      	ldr	r2, [pc, #168]	; (8002cdc <menu+0x10b0>)
 8002c34:	2101      	movs	r1, #1
 8002c36:	2002      	movs	r0, #2
 8002c38:	f7fd febc 	bl	80009b4 <lcd_print>
 8002c3c:	e061      	b.n	8002d02 <menu+0x10d6>
			} else if(dilSecim == 1) {
 8002c3e:	4b18      	ldr	r3, [pc, #96]	; (8002ca0 <menu+0x1074>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d15d      	bne.n	8002d02 <menu+0x10d6>
				lcd_print(2, 1, "Floor door act  ");
 8002c46:	4a26      	ldr	r2, [pc, #152]	; (8002ce0 <menu+0x10b4>)
 8002c48:	2101      	movs	r1, #1
 8002c4a:	2002      	movs	r0, #2
 8002c4c:	f7fd feb2 	bl	80009b4 <lcd_print>
 8002c50:	e057      	b.n	8002d02 <menu+0x10d6>
			}
		} else if(kapiSecimleri == 2){
 8002c52:	4b21      	ldr	r3, [pc, #132]	; (8002cd8 <menu+0x10ac>)
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d113      	bne.n	8002c82 <menu+0x1056>
			if(dilSecim == 0) {
 8002c5a:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <menu+0x1074>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d105      	bne.n	8002c6e <menu+0x1042>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002c62:	4a20      	ldr	r2, [pc, #128]	; (8002ce4 <menu+0x10b8>)
 8002c64:	2101      	movs	r1, #1
 8002c66:	2002      	movs	r0, #2
 8002c68:	f7fd fea4 	bl	80009b4 <lcd_print>
 8002c6c:	e049      	b.n	8002d02 <menu+0x10d6>
			} else if(dilSecim == 1) {
 8002c6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <menu+0x1074>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d145      	bne.n	8002d02 <menu+0x10d6>
				lcd_print(2, 1, "Pltfrm door act ");
 8002c76:	4a1c      	ldr	r2, [pc, #112]	; (8002ce8 <menu+0x10bc>)
 8002c78:	2101      	movs	r1, #1
 8002c7a:	2002      	movs	r0, #2
 8002c7c:	f7fd fe9a 	bl	80009b4 <lcd_print>
 8002c80:	e03f      	b.n	8002d02 <menu+0x10d6>
			}
		} else if(kapiSecimleri == 3){
 8002c82:	4b15      	ldr	r3, [pc, #84]	; (8002cd8 <menu+0x10ac>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d13b      	bne.n	8002d02 <menu+0x10d6>
			if(dilSecim == 0) {
 8002c8a:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <menu+0x1074>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d12e      	bne.n	8002cf0 <menu+0x10c4>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002c92:	4a16      	ldr	r2, [pc, #88]	; (8002cec <menu+0x10c0>)
 8002c94:	2101      	movs	r1, #1
 8002c96:	2002      	movs	r0, #2
 8002c98:	f7fd fe8c 	bl	80009b4 <lcd_print>
 8002c9c:	e031      	b.n	8002d02 <menu+0x10d6>
 8002c9e:	bf00      	nop
 8002ca0:	20000cbe 	.word	0x20000cbe
 8002ca4:	0800e410 	.word	0x0800e410
 8002ca8:	20000ca4 	.word	0x20000ca4
 8002cac:	0800e350 	.word	0x0800e350
 8002cb0:	0800e364 	.word	0x0800e364
 8002cb4:	0800e3b0 	.word	0x0800e3b0
 8002cb8:	0800e3c4 	.word	0x0800e3c4
 8002cbc:	40010800 	.word	0x40010800
 8002cc0:	20000ccc 	.word	0x20000ccc
 8002cc4:	20000b38 	.word	0x20000b38
 8002cc8:	20000cc9 	.word	0x20000cc9
 8002ccc:	20000c9d 	.word	0x20000c9d
 8002cd0:	0800e420 	.word	0x0800e420
 8002cd4:	0800e434 	.word	0x0800e434
 8002cd8:	20000ca5 	.word	0x20000ca5
 8002cdc:	0800e448 	.word	0x0800e448
 8002ce0:	0800e45c 	.word	0x0800e45c
 8002ce4:	0800e470 	.word	0x0800e470
 8002ce8:	0800e484 	.word	0x0800e484
 8002cec:	0800e498 	.word	0x0800e498
			} else if(dilSecim == 1){
 8002cf0:	4b99      	ldr	r3, [pc, #612]	; (8002f58 <menu+0x132c>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d104      	bne.n	8002d02 <menu+0x10d6>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002cf8:	4a98      	ldr	r2, [pc, #608]	; (8002f5c <menu+0x1330>)
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	2002      	movs	r0, #2
 8002cfe:	f7fd fe59 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d02:	2102      	movs	r1, #2
 8002d04:	4896      	ldr	r0, [pc, #600]	; (8002f60 <menu+0x1334>)
 8002d06:	f007 fac9 	bl	800a29c <HAL_GPIO_ReadPin>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d115      	bne.n	8002d3c <menu+0x1110>
 8002d10:	4b94      	ldr	r3, [pc, #592]	; (8002f64 <menu+0x1338>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	f083 0301 	eor.w	r3, r3, #1
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00e      	beq.n	8002d3c <menu+0x1110>
			kapiSecimleri = kapiSecimleri + 1;
 8002d1e:	4b92      	ldr	r3, [pc, #584]	; (8002f68 <menu+0x133c>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	3301      	adds	r3, #1
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	4b90      	ldr	r3, [pc, #576]	; (8002f68 <menu+0x133c>)
 8002d28:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002d2a:	4b8f      	ldr	r3, [pc, #572]	; (8002f68 <menu+0x133c>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d902      	bls.n	8002d38 <menu+0x110c>
				kapiSecimleri = 0;
 8002d32:	4b8d      	ldr	r3, [pc, #564]	; (8002f68 <menu+0x133c>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d38:	f003 fd16 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d3c:	2104      	movs	r1, #4
 8002d3e:	4888      	ldr	r0, [pc, #544]	; (8002f60 <menu+0x1334>)
 8002d40:	f007 faac 	bl	800a29c <HAL_GPIO_ReadPin>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d115      	bne.n	8002d76 <menu+0x114a>
 8002d4a:	4b86      	ldr	r3, [pc, #536]	; (8002f64 <menu+0x1338>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	f083 0301 	eor.w	r3, r3, #1
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00e      	beq.n	8002d76 <menu+0x114a>
			kapiSecimleri = kapiSecimleri - 1;
 8002d58:	4b83      	ldr	r3, [pc, #524]	; (8002f68 <menu+0x133c>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	4b81      	ldr	r3, [pc, #516]	; (8002f68 <menu+0x133c>)
 8002d62:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002d64:	4b80      	ldr	r3, [pc, #512]	; (8002f68 <menu+0x133c>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d902      	bls.n	8002d72 <menu+0x1146>
		   		kapiSecimleri = 3;
 8002d6c:	4b7e      	ldr	r3, [pc, #504]	; (8002f68 <menu+0x133c>)
 8002d6e:	2203      	movs	r2, #3
 8002d70:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d72:	f003 fcf9 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d76:	2108      	movs	r1, #8
 8002d78:	4879      	ldr	r0, [pc, #484]	; (8002f60 <menu+0x1334>)
 8002d7a:	f007 fa8f 	bl	800a29c <HAL_GPIO_ReadPin>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d118      	bne.n	8002db6 <menu+0x118a>
 8002d84:	4b77      	ldr	r3, [pc, #476]	; (8002f64 <menu+0x1338>)
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	f083 0301 	eor.w	r3, r3, #1
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d011      	beq.n	8002db6 <menu+0x118a>
			eepromData[7] = kapiSecimleri;
 8002d92:	4b75      	ldr	r3, [pc, #468]	; (8002f68 <menu+0x133c>)
 8002d94:	781a      	ldrb	r2, [r3, #0]
 8002d96:	4b75      	ldr	r3, [pc, #468]	; (8002f6c <menu+0x1340>)
 8002d98:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002d9a:	4b73      	ldr	r3, [pc, #460]	; (8002f68 <menu+0x133c>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d006      	beq.n	8002db0 <menu+0x1184>
				altLimit = 1;
 8002da2:	4b73      	ldr	r3, [pc, #460]	; (8002f70 <menu+0x1344>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002da8:	4b71      	ldr	r3, [pc, #452]	; (8002f70 <menu+0x1344>)
 8002daa:	781a      	ldrb	r2, [r3, #0]
 8002dac:	4b6f      	ldr	r3, [pc, #444]	; (8002f6c <menu+0x1340>)
 8002dae:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002db0:	4b70      	ldr	r3, [pc, #448]	; (8002f74 <menu+0x1348>)
 8002db2:	2201      	movs	r2, #1
 8002db4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002db6:	4b70      	ldr	r3, [pc, #448]	; (8002f78 <menu+0x134c>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	f040 8092 	bne.w	8002ee4 <menu+0x12b8>
		if(dilSecim == 0) {
 8002dc0:	4b65      	ldr	r3, [pc, #404]	; (8002f58 <menu+0x132c>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d105      	bne.n	8002dd4 <menu+0x11a8>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002dc8:	4a6c      	ldr	r2, [pc, #432]	; (8002f7c <menu+0x1350>)
 8002dca:	2101      	movs	r1, #1
 8002dcc:	2001      	movs	r0, #1
 8002dce:	f7fd fdf1 	bl	80009b4 <lcd_print>
 8002dd2:	e008      	b.n	8002de6 <menu+0x11ba>
		} else if(dilSecim == 1) {
 8002dd4:	4b60      	ldr	r3, [pc, #384]	; (8002f58 <menu+0x132c>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d104      	bne.n	8002de6 <menu+0x11ba>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002ddc:	4a68      	ldr	r2, [pc, #416]	; (8002f80 <menu+0x1354>)
 8002dde:	2101      	movs	r1, #1
 8002de0:	2001      	movs	r0, #1
 8002de2:	f7fd fde7 	bl	80009b4 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002de6:	4b67      	ldr	r3, [pc, #412]	; (8002f84 <menu+0x1358>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d113      	bne.n	8002e16 <menu+0x11ea>
			if(dilSecim == 0) {
 8002dee:	4b5a      	ldr	r3, [pc, #360]	; (8002f58 <menu+0x132c>)
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d105      	bne.n	8002e02 <menu+0x11d6>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002df6:	4a64      	ldr	r2, [pc, #400]	; (8002f88 <menu+0x135c>)
 8002df8:	2101      	movs	r1, #1
 8002dfa:	2002      	movs	r0, #2
 8002dfc:	f7fd fdda 	bl	80009b4 <lcd_print>
 8002e00:	e020      	b.n	8002e44 <menu+0x1218>
			} else if(dilSecim == 1) {
 8002e02:	4b55      	ldr	r3, [pc, #340]	; (8002f58 <menu+0x132c>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d11c      	bne.n	8002e44 <menu+0x1218>
				lcd_print(2, 1, "Door Button ESP");
 8002e0a:	4a60      	ldr	r2, [pc, #384]	; (8002f8c <menu+0x1360>)
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	2002      	movs	r0, #2
 8002e10:	f7fd fdd0 	bl	80009b4 <lcd_print>
 8002e14:	e016      	b.n	8002e44 <menu+0x1218>
			}
		} else if(kapiAcTipi == 1){
 8002e16:	4b5b      	ldr	r3, [pc, #364]	; (8002f84 <menu+0x1358>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d112      	bne.n	8002e44 <menu+0x1218>
			if(dilSecim == 0){
 8002e1e:	4b4e      	ldr	r3, [pc, #312]	; (8002f58 <menu+0x132c>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d105      	bne.n	8002e32 <menu+0x1206>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002e26:	4a5a      	ldr	r2, [pc, #360]	; (8002f90 <menu+0x1364>)
 8002e28:	2101      	movs	r1, #1
 8002e2a:	2002      	movs	r0, #2
 8002e2c:	f7fd fdc2 	bl	80009b4 <lcd_print>
 8002e30:	e008      	b.n	8002e44 <menu+0x1218>
			} else if(dilSecim == 1){
 8002e32:	4b49      	ldr	r3, [pc, #292]	; (8002f58 <menu+0x132c>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d104      	bne.n	8002e44 <menu+0x1218>
				lcd_print(2, 1, "Floor button EXT");
 8002e3a:	4a56      	ldr	r2, [pc, #344]	; (8002f94 <menu+0x1368>)
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	2002      	movs	r0, #2
 8002e40:	f7fd fdb8 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e44:	2102      	movs	r1, #2
 8002e46:	4846      	ldr	r0, [pc, #280]	; (8002f60 <menu+0x1334>)
 8002e48:	f007 fa28 	bl	800a29c <HAL_GPIO_ReadPin>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d115      	bne.n	8002e7e <menu+0x1252>
 8002e52:	4b44      	ldr	r3, [pc, #272]	; (8002f64 <menu+0x1338>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	f083 0301 	eor.w	r3, r3, #1
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00e      	beq.n	8002e7e <menu+0x1252>
			kapiAcTipi = kapiAcTipi + 1;
 8002e60:	4b48      	ldr	r3, [pc, #288]	; (8002f84 <menu+0x1358>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	3301      	adds	r3, #1
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	4b46      	ldr	r3, [pc, #280]	; (8002f84 <menu+0x1358>)
 8002e6a:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002e6c:	4b45      	ldr	r3, [pc, #276]	; (8002f84 <menu+0x1358>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d902      	bls.n	8002e7a <menu+0x124e>
				kapiAcTipi = 0;
 8002e74:	4b43      	ldr	r3, [pc, #268]	; (8002f84 <menu+0x1358>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e7a:	f003 fc75 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e7e:	2104      	movs	r1, #4
 8002e80:	4837      	ldr	r0, [pc, #220]	; (8002f60 <menu+0x1334>)
 8002e82:	f007 fa0b 	bl	800a29c <HAL_GPIO_ReadPin>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d115      	bne.n	8002eb8 <menu+0x128c>
 8002e8c:	4b35      	ldr	r3, [pc, #212]	; (8002f64 <menu+0x1338>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	f083 0301 	eor.w	r3, r3, #1
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00e      	beq.n	8002eb8 <menu+0x128c>
			kapiAcTipi = kapiAcTipi - 1;
 8002e9a:	4b3a      	ldr	r3, [pc, #232]	; (8002f84 <menu+0x1358>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	3b01      	subs	r3, #1
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	4b38      	ldr	r3, [pc, #224]	; (8002f84 <menu+0x1358>)
 8002ea4:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002ea6:	4b37      	ldr	r3, [pc, #220]	; (8002f84 <menu+0x1358>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <menu+0x1288>
		   		kapiAcTipi = 1;
 8002eae:	4b35      	ldr	r3, [pc, #212]	; (8002f84 <menu+0x1358>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002eb4:	f003 fc58 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002eb8:	2108      	movs	r1, #8
 8002eba:	4829      	ldr	r0, [pc, #164]	; (8002f60 <menu+0x1334>)
 8002ebc:	f007 f9ee 	bl	800a29c <HAL_GPIO_ReadPin>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d10e      	bne.n	8002ee4 <menu+0x12b8>
 8002ec6:	4b27      	ldr	r3, [pc, #156]	; (8002f64 <menu+0x1338>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	f083 0301 	eor.w	r3, r3, #1
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d007      	beq.n	8002ee4 <menu+0x12b8>
			eepromData[36] = kapiAcTipi;
 8002ed4:	4b2b      	ldr	r3, [pc, #172]	; (8002f84 <menu+0x1358>)
 8002ed6:	781a      	ldrb	r2, [r3, #0]
 8002ed8:	4b24      	ldr	r3, [pc, #144]	; (8002f6c <menu+0x1340>)
 8002eda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002ede:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <menu+0x1348>)
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002ee4:	4b24      	ldr	r3, [pc, #144]	; (8002f78 <menu+0x134c>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b09      	cmp	r3, #9
 8002eea:	f040 80b9 	bne.w	8003060 <menu+0x1434>
		if(dilSecim == 0){
 8002eee:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <menu+0x132c>)
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d105      	bne.n	8002f02 <menu+0x12d6>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002ef6:	4a28      	ldr	r2, [pc, #160]	; (8002f98 <menu+0x136c>)
 8002ef8:	2101      	movs	r1, #1
 8002efa:	2001      	movs	r0, #1
 8002efc:	f7fd fd5a 	bl	80009b4 <lcd_print>
 8002f00:	e008      	b.n	8002f14 <menu+0x12e8>
		} else if(dilSecim == 1) {
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <menu+0x132c>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d104      	bne.n	8002f14 <menu+0x12e8>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002f0a:	4a24      	ldr	r2, [pc, #144]	; (8002f9c <menu+0x1370>)
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	2001      	movs	r0, #1
 8002f10:	f7fd fd50 	bl	80009b4 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002f14:	4b22      	ldr	r3, [pc, #136]	; (8002fa0 <menu+0x1374>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d105      	bne.n	8002f28 <menu+0x12fc>
			lcd_print(2, 1, "Prudhome        ");
 8002f1c:	4a21      	ldr	r2, [pc, #132]	; (8002fa4 <menu+0x1378>)
 8002f1e:	2101      	movs	r1, #1
 8002f20:	2002      	movs	r0, #2
 8002f22:	f7fd fd47 	bl	80009b4 <lcd_print>
 8002f26:	e04c      	b.n	8002fc2 <menu+0x1396>
		} else if(kapi1Tip == 1) {
 8002f28:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <menu+0x1374>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d13f      	bne.n	8002fb0 <menu+0x1384>
			if(dilSecim == 0){
 8002f30:	4b09      	ldr	r3, [pc, #36]	; (8002f58 <menu+0x132c>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d105      	bne.n	8002f44 <menu+0x1318>
				lcd_print(2, 1, "Buton kontrollu");
 8002f38:	4a1b      	ldr	r2, [pc, #108]	; (8002fa8 <menu+0x137c>)
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	2002      	movs	r0, #2
 8002f3e:	f7fd fd39 	bl	80009b4 <lcd_print>
 8002f42:	e03e      	b.n	8002fc2 <menu+0x1396>
			} else if(dilSecim == 1) {
 8002f44:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <menu+0x132c>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d13a      	bne.n	8002fc2 <menu+0x1396>
				lcd_print(2, 1, "Button cntrolled");
 8002f4c:	4a17      	ldr	r2, [pc, #92]	; (8002fac <menu+0x1380>)
 8002f4e:	2101      	movs	r1, #1
 8002f50:	2002      	movs	r0, #2
 8002f52:	f7fd fd2f 	bl	80009b4 <lcd_print>
 8002f56:	e034      	b.n	8002fc2 <menu+0x1396>
 8002f58:	20000cbe 	.word	0x20000cbe
 8002f5c:	0800e4ac 	.word	0x0800e4ac
 8002f60:	40010800 	.word	0x40010800
 8002f64:	20000ccc 	.word	0x20000ccc
 8002f68:	20000ca5 	.word	0x20000ca5
 8002f6c:	20000b38 	.word	0x20000b38
 8002f70:	20000ca3 	.word	0x20000ca3
 8002f74:	20000cc9 	.word	0x20000cc9
 8002f78:	20000c9d 	.word	0x20000c9d
 8002f7c:	0800e4c0 	.word	0x0800e4c0
 8002f80:	0800e4d4 	.word	0x0800e4d4
 8002f84:	20000ca9 	.word	0x20000ca9
 8002f88:	0800e4e8 	.word	0x0800e4e8
 8002f8c:	0800e4f8 	.word	0x0800e4f8
 8002f90:	0800e508 	.word	0x0800e508
 8002f94:	0800e51c 	.word	0x0800e51c
 8002f98:	0800e530 	.word	0x0800e530
 8002f9c:	0800e544 	.word	0x0800e544
 8002fa0:	20000ca6 	.word	0x20000ca6
 8002fa4:	0800e558 	.word	0x0800e558
 8002fa8:	0800e56c 	.word	0x0800e56c
 8002fac:	0800e57c 	.word	0x0800e57c
			}
		} else if(kapi1Tip == 2) {
 8002fb0:	4b8a      	ldr	r3, [pc, #552]	; (80031dc <menu+0x15b0>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d104      	bne.n	8002fc2 <menu+0x1396>
			lcd_print(2, 1, "Pizzato        ");
 8002fb8:	4a89      	ldr	r2, [pc, #548]	; (80031e0 <menu+0x15b4>)
 8002fba:	2101      	movs	r1, #1
 8002fbc:	2002      	movs	r0, #2
 8002fbe:	f7fd fcf9 	bl	80009b4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fc2:	2102      	movs	r1, #2
 8002fc4:	4887      	ldr	r0, [pc, #540]	; (80031e4 <menu+0x15b8>)
 8002fc6:	f007 f969 	bl	800a29c <HAL_GPIO_ReadPin>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d115      	bne.n	8002ffc <menu+0x13d0>
 8002fd0:	4b85      	ldr	r3, [pc, #532]	; (80031e8 <menu+0x15bc>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	f083 0301 	eor.w	r3, r3, #1
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00e      	beq.n	8002ffc <menu+0x13d0>
			kapi1Tip = kapi1Tip + 1;
 8002fde:	4b7f      	ldr	r3, [pc, #508]	; (80031dc <menu+0x15b0>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	4b7d      	ldr	r3, [pc, #500]	; (80031dc <menu+0x15b0>)
 8002fe8:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002fea:	4b7c      	ldr	r3, [pc, #496]	; (80031dc <menu+0x15b0>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d902      	bls.n	8002ff8 <menu+0x13cc>
				kapi1Tip = 0;
 8002ff2:	4b7a      	ldr	r3, [pc, #488]	; (80031dc <menu+0x15b0>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ff8:	f003 fbb6 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ffc:	2104      	movs	r1, #4
 8002ffe:	4879      	ldr	r0, [pc, #484]	; (80031e4 <menu+0x15b8>)
 8003000:	f007 f94c 	bl	800a29c <HAL_GPIO_ReadPin>
 8003004:	4603      	mov	r3, r0
 8003006:	2b01      	cmp	r3, #1
 8003008:	d115      	bne.n	8003036 <menu+0x140a>
 800300a:	4b77      	ldr	r3, [pc, #476]	; (80031e8 <menu+0x15bc>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	f083 0301 	eor.w	r3, r3, #1
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00e      	beq.n	8003036 <menu+0x140a>
			kapi1Tip = kapi1Tip - 1;
 8003018:	4b70      	ldr	r3, [pc, #448]	; (80031dc <menu+0x15b0>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	3b01      	subs	r3, #1
 800301e:	b2da      	uxtb	r2, r3
 8003020:	4b6e      	ldr	r3, [pc, #440]	; (80031dc <menu+0x15b0>)
 8003022:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8003024:	4b6d      	ldr	r3, [pc, #436]	; (80031dc <menu+0x15b0>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b03      	cmp	r3, #3
 800302a:	d902      	bls.n	8003032 <menu+0x1406>
		   		kapi1Tip = 2;
 800302c:	4b6b      	ldr	r3, [pc, #428]	; (80031dc <menu+0x15b0>)
 800302e:	2202      	movs	r2, #2
 8003030:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003032:	f003 fb99 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003036:	2108      	movs	r1, #8
 8003038:	486a      	ldr	r0, [pc, #424]	; (80031e4 <menu+0x15b8>)
 800303a:	f007 f92f 	bl	800a29c <HAL_GPIO_ReadPin>
 800303e:	4603      	mov	r3, r0
 8003040:	2b01      	cmp	r3, #1
 8003042:	d10d      	bne.n	8003060 <menu+0x1434>
 8003044:	4b68      	ldr	r3, [pc, #416]	; (80031e8 <menu+0x15bc>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	f083 0301 	eor.w	r3, r3, #1
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b00      	cmp	r3, #0
 8003050:	d006      	beq.n	8003060 <menu+0x1434>
			eepromData[8] = kapi1Tip;
 8003052:	4b62      	ldr	r3, [pc, #392]	; (80031dc <menu+0x15b0>)
 8003054:	781a      	ldrb	r2, [r3, #0]
 8003056:	4b65      	ldr	r3, [pc, #404]	; (80031ec <menu+0x15c0>)
 8003058:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800305a:	4b65      	ldr	r3, [pc, #404]	; (80031f0 <menu+0x15c4>)
 800305c:	2201      	movs	r2, #1
 800305e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8003060:	4b64      	ldr	r3, [pc, #400]	; (80031f4 <menu+0x15c8>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b0a      	cmp	r3, #10
 8003066:	d17f      	bne.n	8003168 <menu+0x153c>
		if(dilSecim == 0) {
 8003068:	4b63      	ldr	r3, [pc, #396]	; (80031f8 <menu+0x15cc>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d10a      	bne.n	8003086 <menu+0x145a>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8003070:	4a62      	ldr	r2, [pc, #392]	; (80031fc <menu+0x15d0>)
 8003072:	2101      	movs	r1, #1
 8003074:	2001      	movs	r0, #1
 8003076:	f7fd fc9d 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800307a:	4a61      	ldr	r2, [pc, #388]	; (8003200 <menu+0x15d4>)
 800307c:	2101      	movs	r1, #1
 800307e:	2002      	movs	r0, #2
 8003080:	f7fd fc98 	bl	80009b4 <lcd_print>
 8003084:	e00d      	b.n	80030a2 <menu+0x1476>
		} else if(dilSecim == 1) {
 8003086:	4b5c      	ldr	r3, [pc, #368]	; (80031f8 <menu+0x15cc>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d109      	bne.n	80030a2 <menu+0x1476>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800308e:	4a5d      	ldr	r2, [pc, #372]	; (8003204 <menu+0x15d8>)
 8003090:	2101      	movs	r1, #1
 8003092:	2001      	movs	r0, #1
 8003094:	f7fd fc8e 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8003098:	4a5b      	ldr	r2, [pc, #364]	; (8003208 <menu+0x15dc>)
 800309a:	2101      	movs	r1, #1
 800309c:	2002      	movs	r0, #2
 800309e:	f7fd fc89 	bl	80009b4 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80030a2:	4b5a      	ldr	r3, [pc, #360]	; (800320c <menu+0x15e0>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	220a      	movs	r2, #10
 80030a8:	4959      	ldr	r1, [pc, #356]	; (8003210 <menu+0x15e4>)
 80030aa:	4618      	mov	r0, r3
 80030ac:	f00a f97e 	bl	800d3ac <itoa>
		lcd_print(2,16,snum);
 80030b0:	4a57      	ldr	r2, [pc, #348]	; (8003210 <menu+0x15e4>)
 80030b2:	2110      	movs	r1, #16
 80030b4:	2002      	movs	r0, #2
 80030b6:	f7fd fc7d 	bl	80009b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80030ba:	2102      	movs	r1, #2
 80030bc:	4849      	ldr	r0, [pc, #292]	; (80031e4 <menu+0x15b8>)
 80030be:	f007 f8ed 	bl	800a29c <HAL_GPIO_ReadPin>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d119      	bne.n	80030fc <menu+0x14d0>
 80030c8:	4b47      	ldr	r3, [pc, #284]	; (80031e8 <menu+0x15bc>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	f083 0301 	eor.w	r3, r3, #1
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d012      	beq.n	80030fc <menu+0x14d0>
 80030d6:	4b41      	ldr	r3, [pc, #260]	; (80031dc <menu+0x15b0>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10e      	bne.n	80030fc <menu+0x14d0>
			kapi1AcSure = kapi1AcSure + 1;
 80030de:	4b4b      	ldr	r3, [pc, #300]	; (800320c <menu+0x15e0>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	3301      	adds	r3, #1
 80030e4:	b2da      	uxtb	r2, r3
 80030e6:	4b49      	ldr	r3, [pc, #292]	; (800320c <menu+0x15e0>)
 80030e8:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80030ea:	4b48      	ldr	r3, [pc, #288]	; (800320c <menu+0x15e0>)
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b05      	cmp	r3, #5
 80030f0:	d902      	bls.n	80030f8 <menu+0x14cc>
				kapi1AcSure = 0;
 80030f2:	4b46      	ldr	r3, [pc, #280]	; (800320c <menu+0x15e0>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030f8:	f003 fb36 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80030fc:	2104      	movs	r1, #4
 80030fe:	4839      	ldr	r0, [pc, #228]	; (80031e4 <menu+0x15b8>)
 8003100:	f007 f8cc 	bl	800a29c <HAL_GPIO_ReadPin>
 8003104:	4603      	mov	r3, r0
 8003106:	2b01      	cmp	r3, #1
 8003108:	d119      	bne.n	800313e <menu+0x1512>
 800310a:	4b37      	ldr	r3, [pc, #220]	; (80031e8 <menu+0x15bc>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	f083 0301 	eor.w	r3, r3, #1
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d012      	beq.n	800313e <menu+0x1512>
 8003118:	4b30      	ldr	r3, [pc, #192]	; (80031dc <menu+0x15b0>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10e      	bne.n	800313e <menu+0x1512>
			kapi1AcSure = kapi1AcSure - 1;
 8003120:	4b3a      	ldr	r3, [pc, #232]	; (800320c <menu+0x15e0>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	3b01      	subs	r3, #1
 8003126:	b2da      	uxtb	r2, r3
 8003128:	4b38      	ldr	r3, [pc, #224]	; (800320c <menu+0x15e0>)
 800312a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 800312c:	4b37      	ldr	r3, [pc, #220]	; (800320c <menu+0x15e0>)
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b06      	cmp	r3, #6
 8003132:	d902      	bls.n	800313a <menu+0x150e>
		   		kapi1AcSure = 5;
 8003134:	4b35      	ldr	r3, [pc, #212]	; (800320c <menu+0x15e0>)
 8003136:	2205      	movs	r2, #5
 8003138:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800313a:	f003 fb15 	bl	8006768 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800313e:	2108      	movs	r1, #8
 8003140:	4828      	ldr	r0, [pc, #160]	; (80031e4 <menu+0x15b8>)
 8003142:	f007 f8ab 	bl	800a29c <HAL_GPIO_ReadPin>
 8003146:	4603      	mov	r3, r0
 8003148:	2b01      	cmp	r3, #1
 800314a:	d10d      	bne.n	8003168 <menu+0x153c>
 800314c:	4b26      	ldr	r3, [pc, #152]	; (80031e8 <menu+0x15bc>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	f083 0301 	eor.w	r3, r3, #1
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d006      	beq.n	8003168 <menu+0x153c>
			eepromData[9] = kapi1AcSure;
 800315a:	4b2c      	ldr	r3, [pc, #176]	; (800320c <menu+0x15e0>)
 800315c:	781a      	ldrb	r2, [r3, #0]
 800315e:	4b23      	ldr	r3, [pc, #140]	; (80031ec <menu+0x15c0>)
 8003160:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8003162:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <menu+0x15c4>)
 8003164:	2201      	movs	r2, #1
 8003166:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8003168:	4b22      	ldr	r3, [pc, #136]	; (80031f4 <menu+0x15c8>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b0b      	cmp	r3, #11
 800316e:	f040 80b5 	bne.w	80032dc <menu+0x16b0>
		if(dilSecim == 0) {
 8003172:	4b21      	ldr	r3, [pc, #132]	; (80031f8 <menu+0x15cc>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d105      	bne.n	8003186 <menu+0x155a>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 800317a:	4a26      	ldr	r2, [pc, #152]	; (8003214 <menu+0x15e8>)
 800317c:	2101      	movs	r1, #1
 800317e:	2001      	movs	r0, #1
 8003180:	f7fd fc18 	bl	80009b4 <lcd_print>
 8003184:	e008      	b.n	8003198 <menu+0x156c>
		} else if(dilSecim == 1) {
 8003186:	4b1c      	ldr	r3, [pc, #112]	; (80031f8 <menu+0x15cc>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d104      	bne.n	8003198 <menu+0x156c>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 800318e:	4a22      	ldr	r2, [pc, #136]	; (8003218 <menu+0x15ec>)
 8003190:	2101      	movs	r1, #1
 8003192:	2001      	movs	r0, #1
 8003194:	f7fd fc0e 	bl	80009b4 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8003198:	4b20      	ldr	r3, [pc, #128]	; (800321c <menu+0x15f0>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d105      	bne.n	80031ac <menu+0x1580>
			lcd_print(2, 1, "Prudhome        ");
 80031a0:	4a1f      	ldr	r2, [pc, #124]	; (8003220 <menu+0x15f4>)
 80031a2:	2101      	movs	r1, #1
 80031a4:	2002      	movs	r0, #2
 80031a6:	f7fd fc05 	bl	80009b4 <lcd_print>
 80031aa:	e048      	b.n	800323e <menu+0x1612>
		} else if(kapi2Tip == 1) {
 80031ac:	4b1b      	ldr	r3, [pc, #108]	; (800321c <menu+0x15f0>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d13b      	bne.n	800322c <menu+0x1600>
			if(dilSecim == 0) {
 80031b4:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <menu+0x15cc>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d105      	bne.n	80031c8 <menu+0x159c>
				lcd_print(2, 1, "Buton kontrollu");
 80031bc:	4a19      	ldr	r2, [pc, #100]	; (8003224 <menu+0x15f8>)
 80031be:	2101      	movs	r1, #1
 80031c0:	2002      	movs	r0, #2
 80031c2:	f7fd fbf7 	bl	80009b4 <lcd_print>
 80031c6:	e03a      	b.n	800323e <menu+0x1612>
			} else if(dilSecim == 1) {
 80031c8:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <menu+0x15cc>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d136      	bne.n	800323e <menu+0x1612>
				lcd_print(2, 1, "Button cntrolled");
 80031d0:	4a15      	ldr	r2, [pc, #84]	; (8003228 <menu+0x15fc>)
 80031d2:	2101      	movs	r1, #1
 80031d4:	2002      	movs	r0, #2
 80031d6:	f7fd fbed 	bl	80009b4 <lcd_print>
 80031da:	e030      	b.n	800323e <menu+0x1612>
 80031dc:	20000ca6 	.word	0x20000ca6
 80031e0:	0800e590 	.word	0x0800e590
 80031e4:	40010800 	.word	0x40010800
 80031e8:	20000ccc 	.word	0x20000ccc
 80031ec:	20000b38 	.word	0x20000b38
 80031f0:	20000cc9 	.word	0x20000cc9
 80031f4:	20000c9d 	.word	0x20000c9d
 80031f8:	20000cbe 	.word	0x20000cbe
 80031fc:	0800e5a0 	.word	0x0800e5a0
 8003200:	0800e5b4 	.word	0x0800e5b4
 8003204:	0800e5c4 	.word	0x0800e5c4
 8003208:	0800e5d8 	.word	0x0800e5d8
 800320c:	20000cb6 	.word	0x20000cb6
 8003210:	20000bcc 	.word	0x20000bcc
 8003214:	0800e5e8 	.word	0x0800e5e8
 8003218:	0800e5fc 	.word	0x0800e5fc
 800321c:	20000ca7 	.word	0x20000ca7
 8003220:	0800e558 	.word	0x0800e558
 8003224:	0800e56c 	.word	0x0800e56c
 8003228:	0800e57c 	.word	0x0800e57c
			}
		} else if(kapi2Tip == 2) {
 800322c:	4b8a      	ldr	r3, [pc, #552]	; (8003458 <menu+0x182c>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d104      	bne.n	800323e <menu+0x1612>
			lcd_print(2, 1, "Pizzato        ");
 8003234:	4a89      	ldr	r2, [pc, #548]	; (800345c <menu+0x1830>)
 8003236:	2101      	movs	r1, #1
 8003238:	2002      	movs	r0, #2
 800323a:	f7fd fbbb 	bl	80009b4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800323e:	2102      	movs	r1, #2
 8003240:	4887      	ldr	r0, [pc, #540]	; (8003460 <menu+0x1834>)
 8003242:	f007 f82b 	bl	800a29c <HAL_GPIO_ReadPin>
 8003246:	4603      	mov	r3, r0
 8003248:	2b01      	cmp	r3, #1
 800324a:	d115      	bne.n	8003278 <menu+0x164c>
 800324c:	4b85      	ldr	r3, [pc, #532]	; (8003464 <menu+0x1838>)
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	f083 0301 	eor.w	r3, r3, #1
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00e      	beq.n	8003278 <menu+0x164c>
			kapi2Tip = kapi2Tip + 1;
 800325a:	4b7f      	ldr	r3, [pc, #508]	; (8003458 <menu+0x182c>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	3301      	adds	r3, #1
 8003260:	b2da      	uxtb	r2, r3
 8003262:	4b7d      	ldr	r3, [pc, #500]	; (8003458 <menu+0x182c>)
 8003264:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8003266:	4b7c      	ldr	r3, [pc, #496]	; (8003458 <menu+0x182c>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b02      	cmp	r3, #2
 800326c:	d902      	bls.n	8003274 <menu+0x1648>
				kapi2Tip = 0;
 800326e:	4b7a      	ldr	r3, [pc, #488]	; (8003458 <menu+0x182c>)
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003274:	f003 fa78 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003278:	2104      	movs	r1, #4
 800327a:	4879      	ldr	r0, [pc, #484]	; (8003460 <menu+0x1834>)
 800327c:	f007 f80e 	bl	800a29c <HAL_GPIO_ReadPin>
 8003280:	4603      	mov	r3, r0
 8003282:	2b01      	cmp	r3, #1
 8003284:	d115      	bne.n	80032b2 <menu+0x1686>
 8003286:	4b77      	ldr	r3, [pc, #476]	; (8003464 <menu+0x1838>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	f083 0301 	eor.w	r3, r3, #1
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00e      	beq.n	80032b2 <menu+0x1686>
			kapi2Tip = kapi2Tip - 1;
 8003294:	4b70      	ldr	r3, [pc, #448]	; (8003458 <menu+0x182c>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	3b01      	subs	r3, #1
 800329a:	b2da      	uxtb	r2, r3
 800329c:	4b6e      	ldr	r3, [pc, #440]	; (8003458 <menu+0x182c>)
 800329e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80032a0:	4b6d      	ldr	r3, [pc, #436]	; (8003458 <menu+0x182c>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b03      	cmp	r3, #3
 80032a6:	d902      	bls.n	80032ae <menu+0x1682>
		   		kapi2Tip = 2;
 80032a8:	4b6b      	ldr	r3, [pc, #428]	; (8003458 <menu+0x182c>)
 80032aa:	2202      	movs	r2, #2
 80032ac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032ae:	f003 fa5b 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032b2:	2108      	movs	r1, #8
 80032b4:	486a      	ldr	r0, [pc, #424]	; (8003460 <menu+0x1834>)
 80032b6:	f006 fff1 	bl	800a29c <HAL_GPIO_ReadPin>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d10d      	bne.n	80032dc <menu+0x16b0>
 80032c0:	4b68      	ldr	r3, [pc, #416]	; (8003464 <menu+0x1838>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	f083 0301 	eor.w	r3, r3, #1
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d006      	beq.n	80032dc <menu+0x16b0>
			eepromData[10] = kapi2Tip;
 80032ce:	4b62      	ldr	r3, [pc, #392]	; (8003458 <menu+0x182c>)
 80032d0:	781a      	ldrb	r2, [r3, #0]
 80032d2:	4b65      	ldr	r3, [pc, #404]	; (8003468 <menu+0x183c>)
 80032d4:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80032d6:	4b65      	ldr	r3, [pc, #404]	; (800346c <menu+0x1840>)
 80032d8:	2201      	movs	r2, #1
 80032da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80032dc:	4b64      	ldr	r3, [pc, #400]	; (8003470 <menu+0x1844>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b0c      	cmp	r3, #12
 80032e2:	d17f      	bne.n	80033e4 <menu+0x17b8>
		if(dilSecim == 0) {
 80032e4:	4b63      	ldr	r3, [pc, #396]	; (8003474 <menu+0x1848>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10a      	bne.n	8003302 <menu+0x16d6>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 80032ec:	4a62      	ldr	r2, [pc, #392]	; (8003478 <menu+0x184c>)
 80032ee:	2101      	movs	r1, #1
 80032f0:	2001      	movs	r0, #1
 80032f2:	f7fd fb5f 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80032f6:	4a61      	ldr	r2, [pc, #388]	; (800347c <menu+0x1850>)
 80032f8:	2101      	movs	r1, #1
 80032fa:	2002      	movs	r0, #2
 80032fc:	f7fd fb5a 	bl	80009b4 <lcd_print>
 8003300:	e00d      	b.n	800331e <menu+0x16f2>
		} else if(dilSecim == 1) {
 8003302:	4b5c      	ldr	r3, [pc, #368]	; (8003474 <menu+0x1848>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d109      	bne.n	800331e <menu+0x16f2>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 800330a:	4a5d      	ldr	r2, [pc, #372]	; (8003480 <menu+0x1854>)
 800330c:	2101      	movs	r1, #1
 800330e:	2001      	movs	r0, #1
 8003310:	f7fd fb50 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8003314:	4a5b      	ldr	r2, [pc, #364]	; (8003484 <menu+0x1858>)
 8003316:	2101      	movs	r1, #1
 8003318:	2002      	movs	r0, #2
 800331a:	f7fd fb4b 	bl	80009b4 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 800331e:	4b5a      	ldr	r3, [pc, #360]	; (8003488 <menu+0x185c>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	220a      	movs	r2, #10
 8003324:	4959      	ldr	r1, [pc, #356]	; (800348c <menu+0x1860>)
 8003326:	4618      	mov	r0, r3
 8003328:	f00a f840 	bl	800d3ac <itoa>
		lcd_print(2,16,snum);
 800332c:	4a57      	ldr	r2, [pc, #348]	; (800348c <menu+0x1860>)
 800332e:	2110      	movs	r1, #16
 8003330:	2002      	movs	r0, #2
 8003332:	f7fd fb3f 	bl	80009b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8003336:	2102      	movs	r1, #2
 8003338:	4849      	ldr	r0, [pc, #292]	; (8003460 <menu+0x1834>)
 800333a:	f006 ffaf 	bl	800a29c <HAL_GPIO_ReadPin>
 800333e:	4603      	mov	r3, r0
 8003340:	2b01      	cmp	r3, #1
 8003342:	d119      	bne.n	8003378 <menu+0x174c>
 8003344:	4b47      	ldr	r3, [pc, #284]	; (8003464 <menu+0x1838>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	f083 0301 	eor.w	r3, r3, #1
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d012      	beq.n	8003378 <menu+0x174c>
 8003352:	4b41      	ldr	r3, [pc, #260]	; (8003458 <menu+0x182c>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d10e      	bne.n	8003378 <menu+0x174c>
			kapi2AcSure = kapi2AcSure + 1;
 800335a:	4b4b      	ldr	r3, [pc, #300]	; (8003488 <menu+0x185c>)
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	3301      	adds	r3, #1
 8003360:	b2da      	uxtb	r2, r3
 8003362:	4b49      	ldr	r3, [pc, #292]	; (8003488 <menu+0x185c>)
 8003364:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8003366:	4b48      	ldr	r3, [pc, #288]	; (8003488 <menu+0x185c>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b05      	cmp	r3, #5
 800336c:	d902      	bls.n	8003374 <menu+0x1748>
				kapi2AcSure = 0;
 800336e:	4b46      	ldr	r3, [pc, #280]	; (8003488 <menu+0x185c>)
 8003370:	2200      	movs	r2, #0
 8003372:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003374:	f003 f9f8 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8003378:	2104      	movs	r1, #4
 800337a:	4839      	ldr	r0, [pc, #228]	; (8003460 <menu+0x1834>)
 800337c:	f006 ff8e 	bl	800a29c <HAL_GPIO_ReadPin>
 8003380:	4603      	mov	r3, r0
 8003382:	2b01      	cmp	r3, #1
 8003384:	d119      	bne.n	80033ba <menu+0x178e>
 8003386:	4b37      	ldr	r3, [pc, #220]	; (8003464 <menu+0x1838>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	f083 0301 	eor.w	r3, r3, #1
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d012      	beq.n	80033ba <menu+0x178e>
 8003394:	4b30      	ldr	r3, [pc, #192]	; (8003458 <menu+0x182c>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d10e      	bne.n	80033ba <menu+0x178e>
			kapi2AcSure = kapi2AcSure - 1;
 800339c:	4b3a      	ldr	r3, [pc, #232]	; (8003488 <menu+0x185c>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	4b38      	ldr	r3, [pc, #224]	; (8003488 <menu+0x185c>)
 80033a6:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 80033a8:	4b37      	ldr	r3, [pc, #220]	; (8003488 <menu+0x185c>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b06      	cmp	r3, #6
 80033ae:	d902      	bls.n	80033b6 <menu+0x178a>
		   		kapi2AcSure = 5;
 80033b0:	4b35      	ldr	r3, [pc, #212]	; (8003488 <menu+0x185c>)
 80033b2:	2205      	movs	r2, #5
 80033b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033b6:	f003 f9d7 	bl	8006768 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033ba:	2108      	movs	r1, #8
 80033bc:	4828      	ldr	r0, [pc, #160]	; (8003460 <menu+0x1834>)
 80033be:	f006 ff6d 	bl	800a29c <HAL_GPIO_ReadPin>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d10d      	bne.n	80033e4 <menu+0x17b8>
 80033c8:	4b26      	ldr	r3, [pc, #152]	; (8003464 <menu+0x1838>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	f083 0301 	eor.w	r3, r3, #1
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d006      	beq.n	80033e4 <menu+0x17b8>
			eepromData[11] = kapi2AcSure;
 80033d6:	4b2c      	ldr	r3, [pc, #176]	; (8003488 <menu+0x185c>)
 80033d8:	781a      	ldrb	r2, [r3, #0]
 80033da:	4b23      	ldr	r3, [pc, #140]	; (8003468 <menu+0x183c>)
 80033dc:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80033de:	4b23      	ldr	r3, [pc, #140]	; (800346c <menu+0x1840>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80033e4:	4b22      	ldr	r3, [pc, #136]	; (8003470 <menu+0x1844>)
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b0d      	cmp	r3, #13
 80033ea:	f040 80b5 	bne.w	8003558 <menu+0x192c>
		if(dilSecim == 0) {
 80033ee:	4b21      	ldr	r3, [pc, #132]	; (8003474 <menu+0x1848>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d105      	bne.n	8003402 <menu+0x17d6>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 80033f6:	4a26      	ldr	r2, [pc, #152]	; (8003490 <menu+0x1864>)
 80033f8:	2101      	movs	r1, #1
 80033fa:	2001      	movs	r0, #1
 80033fc:	f7fd fada 	bl	80009b4 <lcd_print>
 8003400:	e008      	b.n	8003414 <menu+0x17e8>
		} else if(dilSecim == 1){
 8003402:	4b1c      	ldr	r3, [pc, #112]	; (8003474 <menu+0x1848>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d104      	bne.n	8003414 <menu+0x17e8>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 800340a:	4a22      	ldr	r2, [pc, #136]	; (8003494 <menu+0x1868>)
 800340c:	2101      	movs	r1, #1
 800340e:	2001      	movs	r0, #1
 8003410:	f7fd fad0 	bl	80009b4 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8003414:	4b20      	ldr	r3, [pc, #128]	; (8003498 <menu+0x186c>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d105      	bne.n	8003428 <menu+0x17fc>
			lcd_print(2, 1, "Prudhome        ");
 800341c:	4a1f      	ldr	r2, [pc, #124]	; (800349c <menu+0x1870>)
 800341e:	2101      	movs	r1, #1
 8003420:	2002      	movs	r0, #2
 8003422:	f7fd fac7 	bl	80009b4 <lcd_print>
 8003426:	e048      	b.n	80034ba <menu+0x188e>
		} else if(kapitablaTip == 1) {
 8003428:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <menu+0x186c>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d13b      	bne.n	80034a8 <menu+0x187c>
			if(dilSecim == 0) {
 8003430:	4b10      	ldr	r3, [pc, #64]	; (8003474 <menu+0x1848>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d105      	bne.n	8003444 <menu+0x1818>
				lcd_print(2, 1, "Buton kontrollu");
 8003438:	4a19      	ldr	r2, [pc, #100]	; (80034a0 <menu+0x1874>)
 800343a:	2101      	movs	r1, #1
 800343c:	2002      	movs	r0, #2
 800343e:	f7fd fab9 	bl	80009b4 <lcd_print>
 8003442:	e03a      	b.n	80034ba <menu+0x188e>
			} else if(dilSecim == 1) {
 8003444:	4b0b      	ldr	r3, [pc, #44]	; (8003474 <menu+0x1848>)
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d136      	bne.n	80034ba <menu+0x188e>
				lcd_print(2, 1, "Button cntrolled");
 800344c:	4a15      	ldr	r2, [pc, #84]	; (80034a4 <menu+0x1878>)
 800344e:	2101      	movs	r1, #1
 8003450:	2002      	movs	r0, #2
 8003452:	f7fd faaf 	bl	80009b4 <lcd_print>
 8003456:	e030      	b.n	80034ba <menu+0x188e>
 8003458:	20000ca7 	.word	0x20000ca7
 800345c:	0800e590 	.word	0x0800e590
 8003460:	40010800 	.word	0x40010800
 8003464:	20000ccc 	.word	0x20000ccc
 8003468:	20000b38 	.word	0x20000b38
 800346c:	20000cc9 	.word	0x20000cc9
 8003470:	20000c9d 	.word	0x20000c9d
 8003474:	20000cbe 	.word	0x20000cbe
 8003478:	0800e610 	.word	0x0800e610
 800347c:	0800e5b4 	.word	0x0800e5b4
 8003480:	0800e624 	.word	0x0800e624
 8003484:	0800e5d8 	.word	0x0800e5d8
 8003488:	20000cb7 	.word	0x20000cb7
 800348c:	20000bcc 	.word	0x20000bcc
 8003490:	0800e638 	.word	0x0800e638
 8003494:	0800e64c 	.word	0x0800e64c
 8003498:	20000ca8 	.word	0x20000ca8
 800349c:	0800e558 	.word	0x0800e558
 80034a0:	0800e56c 	.word	0x0800e56c
 80034a4:	0800e57c 	.word	0x0800e57c
			}
		} else if(kapitablaTip == 2) {
 80034a8:	4b5b      	ldr	r3, [pc, #364]	; (8003618 <menu+0x19ec>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d104      	bne.n	80034ba <menu+0x188e>
			lcd_print(2, 1, "Pizzato        ");
 80034b0:	4a5a      	ldr	r2, [pc, #360]	; (800361c <menu+0x19f0>)
 80034b2:	2101      	movs	r1, #1
 80034b4:	2002      	movs	r0, #2
 80034b6:	f7fd fa7d 	bl	80009b4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80034ba:	2102      	movs	r1, #2
 80034bc:	4858      	ldr	r0, [pc, #352]	; (8003620 <menu+0x19f4>)
 80034be:	f006 feed 	bl	800a29c <HAL_GPIO_ReadPin>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d115      	bne.n	80034f4 <menu+0x18c8>
 80034c8:	4b56      	ldr	r3, [pc, #344]	; (8003624 <menu+0x19f8>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	f083 0301 	eor.w	r3, r3, #1
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00e      	beq.n	80034f4 <menu+0x18c8>
			kapitablaTip = kapitablaTip + 1;
 80034d6:	4b50      	ldr	r3, [pc, #320]	; (8003618 <menu+0x19ec>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	3301      	adds	r3, #1
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	4b4e      	ldr	r3, [pc, #312]	; (8003618 <menu+0x19ec>)
 80034e0:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 80034e2:	4b4d      	ldr	r3, [pc, #308]	; (8003618 <menu+0x19ec>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d902      	bls.n	80034f0 <menu+0x18c4>
				kapitablaTip = 0;
 80034ea:	4b4b      	ldr	r3, [pc, #300]	; (8003618 <menu+0x19ec>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034f0:	f003 f93a 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80034f4:	2104      	movs	r1, #4
 80034f6:	484a      	ldr	r0, [pc, #296]	; (8003620 <menu+0x19f4>)
 80034f8:	f006 fed0 	bl	800a29c <HAL_GPIO_ReadPin>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d115      	bne.n	800352e <menu+0x1902>
 8003502:	4b48      	ldr	r3, [pc, #288]	; (8003624 <menu+0x19f8>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	f083 0301 	eor.w	r3, r3, #1
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00e      	beq.n	800352e <menu+0x1902>
			kapitablaTip = kapitablaTip - 1;
 8003510:	4b41      	ldr	r3, [pc, #260]	; (8003618 <menu+0x19ec>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	3b01      	subs	r3, #1
 8003516:	b2da      	uxtb	r2, r3
 8003518:	4b3f      	ldr	r3, [pc, #252]	; (8003618 <menu+0x19ec>)
 800351a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 800351c:	4b3e      	ldr	r3, [pc, #248]	; (8003618 <menu+0x19ec>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b03      	cmp	r3, #3
 8003522:	d902      	bls.n	800352a <menu+0x18fe>
		   		kapitablaTip = 2;
 8003524:	4b3c      	ldr	r3, [pc, #240]	; (8003618 <menu+0x19ec>)
 8003526:	2202      	movs	r2, #2
 8003528:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800352a:	f003 f91d 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800352e:	2108      	movs	r1, #8
 8003530:	483b      	ldr	r0, [pc, #236]	; (8003620 <menu+0x19f4>)
 8003532:	f006 feb3 	bl	800a29c <HAL_GPIO_ReadPin>
 8003536:	4603      	mov	r3, r0
 8003538:	2b01      	cmp	r3, #1
 800353a:	d10d      	bne.n	8003558 <menu+0x192c>
 800353c:	4b39      	ldr	r3, [pc, #228]	; (8003624 <menu+0x19f8>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	f083 0301 	eor.w	r3, r3, #1
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d006      	beq.n	8003558 <menu+0x192c>
			eepromData[12] = kapitablaTip;
 800354a:	4b33      	ldr	r3, [pc, #204]	; (8003618 <menu+0x19ec>)
 800354c:	781a      	ldrb	r2, [r3, #0]
 800354e:	4b36      	ldr	r3, [pc, #216]	; (8003628 <menu+0x19fc>)
 8003550:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8003552:	4b36      	ldr	r3, [pc, #216]	; (800362c <menu+0x1a00>)
 8003554:	2201      	movs	r2, #1
 8003556:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8003558:	4b35      	ldr	r3, [pc, #212]	; (8003630 <menu+0x1a04>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	2b0e      	cmp	r3, #14
 800355e:	f040 80f2 	bne.w	8003746 <menu+0x1b1a>
		if(dilSecim == 0) {
 8003562:	4b34      	ldr	r3, [pc, #208]	; (8003634 <menu+0x1a08>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d105      	bne.n	8003576 <menu+0x194a>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 800356a:	4a33      	ldr	r2, [pc, #204]	; (8003638 <menu+0x1a0c>)
 800356c:	2101      	movs	r1, #1
 800356e:	2001      	movs	r0, #1
 8003570:	f7fd fa20 	bl	80009b4 <lcd_print>
 8003574:	e008      	b.n	8003588 <menu+0x195c>
		} else if(dilSecim == 1) {
 8003576:	4b2f      	ldr	r3, [pc, #188]	; (8003634 <menu+0x1a08>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d104      	bne.n	8003588 <menu+0x195c>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 800357e:	4a2f      	ldr	r2, [pc, #188]	; (800363c <menu+0x1a10>)
 8003580:	2101      	movs	r1, #1
 8003582:	2001      	movs	r0, #1
 8003584:	f7fd fa16 	bl	80009b4 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8003588:	4b2d      	ldr	r3, [pc, #180]	; (8003640 <menu+0x1a14>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d113      	bne.n	80035b8 <menu+0x198c>
			if(dilSecim == 0){
 8003590:	4b28      	ldr	r3, [pc, #160]	; (8003634 <menu+0x1a08>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d105      	bne.n	80035a4 <menu+0x1978>
				lcd_print(2, 1, "1. Katta ac    ");
 8003598:	4a2a      	ldr	r2, [pc, #168]	; (8003644 <menu+0x1a18>)
 800359a:	2101      	movs	r1, #1
 800359c:	2002      	movs	r0, #2
 800359e:	f7fd fa09 	bl	80009b4 <lcd_print>
 80035a2:	e071      	b.n	8003688 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 80035a4:	4b23      	ldr	r3, [pc, #140]	; (8003634 <menu+0x1a08>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d16d      	bne.n	8003688 <menu+0x1a5c>
				lcd_print(2, 1, "1. Floor open  ");
 80035ac:	4a26      	ldr	r2, [pc, #152]	; (8003648 <menu+0x1a1c>)
 80035ae:	2101      	movs	r1, #1
 80035b0:	2002      	movs	r0, #2
 80035b2:	f7fd f9ff 	bl	80009b4 <lcd_print>
 80035b6:	e067      	b.n	8003688 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 1) {
 80035b8:	4b21      	ldr	r3, [pc, #132]	; (8003640 <menu+0x1a14>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d112      	bne.n	80035e6 <menu+0x19ba>
			if(dilSecim == 0){
 80035c0:	4b1c      	ldr	r3, [pc, #112]	; (8003634 <menu+0x1a08>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d104      	bne.n	80035d2 <menu+0x19a6>
				lcd_print(2, 1, "2. Katta ac    ");
 80035c8:	4a20      	ldr	r2, [pc, #128]	; (800364c <menu+0x1a20>)
 80035ca:	2101      	movs	r1, #1
 80035cc:	2002      	movs	r0, #2
 80035ce:	f7fd f9f1 	bl	80009b4 <lcd_print>
			}
			if(dilSecim == 1){
 80035d2:	4b18      	ldr	r3, [pc, #96]	; (8003634 <menu+0x1a08>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d156      	bne.n	8003688 <menu+0x1a5c>
				lcd_print(2, 1, "2. Floor open  ");
 80035da:	4a1d      	ldr	r2, [pc, #116]	; (8003650 <menu+0x1a24>)
 80035dc:	2101      	movs	r1, #1
 80035de:	2002      	movs	r0, #2
 80035e0:	f7fd f9e8 	bl	80009b4 <lcd_print>
 80035e4:	e050      	b.n	8003688 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 2) {
 80035e6:	4b16      	ldr	r3, [pc, #88]	; (8003640 <menu+0x1a14>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d136      	bne.n	800365c <menu+0x1a30>
			if(dilSecim == 0){
 80035ee:	4b11      	ldr	r3, [pc, #68]	; (8003634 <menu+0x1a08>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d105      	bne.n	8003602 <menu+0x19d6>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 80035f6:	4a17      	ldr	r2, [pc, #92]	; (8003654 <menu+0x1a28>)
 80035f8:	2101      	movs	r1, #1
 80035fa:	2002      	movs	r0, #2
 80035fc:	f7fd f9da 	bl	80009b4 <lcd_print>
 8003600:	e042      	b.n	8003688 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 8003602:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <menu+0x1a08>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d13e      	bne.n	8003688 <menu+0x1a5c>
				lcd_print(2, 1, "1.+2. Floor open");
 800360a:	4a13      	ldr	r2, [pc, #76]	; (8003658 <menu+0x1a2c>)
 800360c:	2101      	movs	r1, #1
 800360e:	2002      	movs	r0, #2
 8003610:	f7fd f9d0 	bl	80009b4 <lcd_print>
 8003614:	e038      	b.n	8003688 <menu+0x1a5c>
 8003616:	bf00      	nop
 8003618:	20000ca8 	.word	0x20000ca8
 800361c:	0800e590 	.word	0x0800e590
 8003620:	40010800 	.word	0x40010800
 8003624:	20000ccc 	.word	0x20000ccc
 8003628:	20000b38 	.word	0x20000b38
 800362c:	20000cc9 	.word	0x20000cc9
 8003630:	20000c9d 	.word	0x20000c9d
 8003634:	20000cbe 	.word	0x20000cbe
 8003638:	0800e660 	.word	0x0800e660
 800363c:	0800e674 	.word	0x0800e674
 8003640:	20000caa 	.word	0x20000caa
 8003644:	0800e688 	.word	0x0800e688
 8003648:	0800e698 	.word	0x0800e698
 800364c:	0800e6a8 	.word	0x0800e6a8
 8003650:	0800e6b8 	.word	0x0800e6b8
 8003654:	0800e6c8 	.word	0x0800e6c8
 8003658:	0800e6dc 	.word	0x0800e6dc
			}
		} else if(kapiTablaAcKonum == 3) {
 800365c:	4b9b      	ldr	r3, [pc, #620]	; (80038cc <menu+0x1ca0>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b03      	cmp	r3, #3
 8003662:	d111      	bne.n	8003688 <menu+0x1a5c>
			if(dilSecim == 0) {
 8003664:	4b9a      	ldr	r3, [pc, #616]	; (80038d0 <menu+0x1ca4>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d104      	bne.n	8003676 <menu+0x1a4a>
				lcd_print(2, 1, "Pasif           ");
 800366c:	4a99      	ldr	r2, [pc, #612]	; (80038d4 <menu+0x1ca8>)
 800366e:	2101      	movs	r1, #1
 8003670:	2002      	movs	r0, #2
 8003672:	f7fd f99f 	bl	80009b4 <lcd_print>
			}
			if(dilSecim == 1) {
 8003676:	4b96      	ldr	r3, [pc, #600]	; (80038d0 <menu+0x1ca4>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d104      	bne.n	8003688 <menu+0x1a5c>
				lcd_print(2, 1, "Passive         ");
 800367e:	4a96      	ldr	r2, [pc, #600]	; (80038d8 <menu+0x1cac>)
 8003680:	2101      	movs	r1, #1
 8003682:	2002      	movs	r0, #2
 8003684:	f7fd f996 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003688:	2102      	movs	r1, #2
 800368a:	4894      	ldr	r0, [pc, #592]	; (80038dc <menu+0x1cb0>)
 800368c:	f006 fe06 	bl	800a29c <HAL_GPIO_ReadPin>
 8003690:	4603      	mov	r3, r0
 8003692:	2b01      	cmp	r3, #1
 8003694:	d115      	bne.n	80036c2 <menu+0x1a96>
 8003696:	4b92      	ldr	r3, [pc, #584]	; (80038e0 <menu+0x1cb4>)
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	f083 0301 	eor.w	r3, r3, #1
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00e      	beq.n	80036c2 <menu+0x1a96>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 80036a4:	4b89      	ldr	r3, [pc, #548]	; (80038cc <menu+0x1ca0>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	3301      	adds	r3, #1
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	4b87      	ldr	r3, [pc, #540]	; (80038cc <menu+0x1ca0>)
 80036ae:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 80036b0:	4b86      	ldr	r3, [pc, #536]	; (80038cc <menu+0x1ca0>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d902      	bls.n	80036be <menu+0x1a92>
				kapiTablaAcKonum = 0;
 80036b8:	4b84      	ldr	r3, [pc, #528]	; (80038cc <menu+0x1ca0>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036be:	f003 f853 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036c2:	2104      	movs	r1, #4
 80036c4:	4885      	ldr	r0, [pc, #532]	; (80038dc <menu+0x1cb0>)
 80036c6:	f006 fde9 	bl	800a29c <HAL_GPIO_ReadPin>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d115      	bne.n	80036fc <menu+0x1ad0>
 80036d0:	4b83      	ldr	r3, [pc, #524]	; (80038e0 <menu+0x1cb4>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	f083 0301 	eor.w	r3, r3, #1
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00e      	beq.n	80036fc <menu+0x1ad0>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80036de:	4b7b      	ldr	r3, [pc, #492]	; (80038cc <menu+0x1ca0>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	4b79      	ldr	r3, [pc, #484]	; (80038cc <menu+0x1ca0>)
 80036e8:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80036ea:	4b78      	ldr	r3, [pc, #480]	; (80038cc <menu+0x1ca0>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d902      	bls.n	80036f8 <menu+0x1acc>
		   		kapiTablaAcKonum = 2;
 80036f2:	4b76      	ldr	r3, [pc, #472]	; (80038cc <menu+0x1ca0>)
 80036f4:	2202      	movs	r2, #2
 80036f6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036f8:	f003 f836 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036fc:	2108      	movs	r1, #8
 80036fe:	4877      	ldr	r0, [pc, #476]	; (80038dc <menu+0x1cb0>)
 8003700:	f006 fdcc 	bl	800a29c <HAL_GPIO_ReadPin>
 8003704:	4603      	mov	r3, r0
 8003706:	2b01      	cmp	r3, #1
 8003708:	d11d      	bne.n	8003746 <menu+0x1b1a>
 800370a:	4b75      	ldr	r3, [pc, #468]	; (80038e0 <menu+0x1cb4>)
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	f083 0301 	eor.w	r3, r3, #1
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b00      	cmp	r3, #0
 8003716:	d016      	beq.n	8003746 <menu+0x1b1a>
			eepromData[34] = kapiTablaAcKonum;
 8003718:	4b6c      	ldr	r3, [pc, #432]	; (80038cc <menu+0x1ca0>)
 800371a:	781a      	ldrb	r2, [r3, #0]
 800371c:	4b71      	ldr	r3, [pc, #452]	; (80038e4 <menu+0x1cb8>)
 800371e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8003722:	4b6a      	ldr	r3, [pc, #424]	; (80038cc <menu+0x1ca0>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <menu+0x1b06>
 800372a:	4b68      	ldr	r3, [pc, #416]	; (80038cc <menu+0x1ca0>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d106      	bne.n	8003740 <menu+0x1b14>
				altLimit = 1;
 8003732:	4b6d      	ldr	r3, [pc, #436]	; (80038e8 <menu+0x1cbc>)
 8003734:	2201      	movs	r2, #1
 8003736:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003738:	4b6b      	ldr	r3, [pc, #428]	; (80038e8 <menu+0x1cbc>)
 800373a:	781a      	ldrb	r2, [r3, #0]
 800373c:	4b69      	ldr	r3, [pc, #420]	; (80038e4 <menu+0x1cb8>)
 800373e:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8003740:	4b6a      	ldr	r3, [pc, #424]	; (80038ec <menu+0x1cc0>)
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8003746:	4b6a      	ldr	r3, [pc, #424]	; (80038f0 <menu+0x1cc4>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b0f      	cmp	r3, #15
 800374c:	d17f      	bne.n	800384e <menu+0x1c22>
		if(dilSecim == 0) {
 800374e:	4b60      	ldr	r3, [pc, #384]	; (80038d0 <menu+0x1ca4>)
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d10a      	bne.n	800376c <menu+0x1b40>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8003756:	4a67      	ldr	r2, [pc, #412]	; (80038f4 <menu+0x1cc8>)
 8003758:	2101      	movs	r1, #1
 800375a:	2001      	movs	r0, #1
 800375c:	f7fd f92a 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8003760:	4a65      	ldr	r2, [pc, #404]	; (80038f8 <menu+0x1ccc>)
 8003762:	2101      	movs	r1, #1
 8003764:	2002      	movs	r0, #2
 8003766:	f7fd f925 	bl	80009b4 <lcd_print>
 800376a:	e00d      	b.n	8003788 <menu+0x1b5c>
		} else if(dilSecim == 1) {
 800376c:	4b58      	ldr	r3, [pc, #352]	; (80038d0 <menu+0x1ca4>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d109      	bne.n	8003788 <menu+0x1b5c>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8003774:	4a61      	ldr	r2, [pc, #388]	; (80038fc <menu+0x1cd0>)
 8003776:	2101      	movs	r1, #1
 8003778:	2001      	movs	r0, #1
 800377a:	f7fd f91b 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800377e:	4a60      	ldr	r2, [pc, #384]	; (8003900 <menu+0x1cd4>)
 8003780:	2101      	movs	r1, #1
 8003782:	2002      	movs	r0, #2
 8003784:	f7fd f916 	bl	80009b4 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8003788:	4b5e      	ldr	r3, [pc, #376]	; (8003904 <menu+0x1cd8>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	220a      	movs	r2, #10
 800378e:	495e      	ldr	r1, [pc, #376]	; (8003908 <menu+0x1cdc>)
 8003790:	4618      	mov	r0, r3
 8003792:	f009 fe0b 	bl	800d3ac <itoa>
		lcd_print(2,16,snum);
 8003796:	4a5c      	ldr	r2, [pc, #368]	; (8003908 <menu+0x1cdc>)
 8003798:	2110      	movs	r1, #16
 800379a:	2002      	movs	r0, #2
 800379c:	f7fd f90a 	bl	80009b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80037a0:	2102      	movs	r1, #2
 80037a2:	484e      	ldr	r0, [pc, #312]	; (80038dc <menu+0x1cb0>)
 80037a4:	f006 fd7a 	bl	800a29c <HAL_GPIO_ReadPin>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d119      	bne.n	80037e2 <menu+0x1bb6>
 80037ae:	4b4c      	ldr	r3, [pc, #304]	; (80038e0 <menu+0x1cb4>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	f083 0301 	eor.w	r3, r3, #1
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d012      	beq.n	80037e2 <menu+0x1bb6>
 80037bc:	4b53      	ldr	r3, [pc, #332]	; (800390c <menu+0x1ce0>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10e      	bne.n	80037e2 <menu+0x1bb6>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80037c4:	4b4f      	ldr	r3, [pc, #316]	; (8003904 <menu+0x1cd8>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	3301      	adds	r3, #1
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	4b4d      	ldr	r3, [pc, #308]	; (8003904 <menu+0x1cd8>)
 80037ce:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 80037d0:	4b4c      	ldr	r3, [pc, #304]	; (8003904 <menu+0x1cd8>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b05      	cmp	r3, #5
 80037d6:	d902      	bls.n	80037de <menu+0x1bb2>
				kapiTablaAcSure = 0;
 80037d8:	4b4a      	ldr	r3, [pc, #296]	; (8003904 <menu+0x1cd8>)
 80037da:	2200      	movs	r2, #0
 80037dc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037de:	f002 ffc3 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80037e2:	2104      	movs	r1, #4
 80037e4:	483d      	ldr	r0, [pc, #244]	; (80038dc <menu+0x1cb0>)
 80037e6:	f006 fd59 	bl	800a29c <HAL_GPIO_ReadPin>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d119      	bne.n	8003824 <menu+0x1bf8>
 80037f0:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <menu+0x1cb4>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	f083 0301 	eor.w	r3, r3, #1
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d012      	beq.n	8003824 <menu+0x1bf8>
 80037fe:	4b43      	ldr	r3, [pc, #268]	; (800390c <menu+0x1ce0>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10e      	bne.n	8003824 <menu+0x1bf8>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8003806:	4b3f      	ldr	r3, [pc, #252]	; (8003904 <menu+0x1cd8>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	3b01      	subs	r3, #1
 800380c:	b2da      	uxtb	r2, r3
 800380e:	4b3d      	ldr	r3, [pc, #244]	; (8003904 <menu+0x1cd8>)
 8003810:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8003812:	4b3c      	ldr	r3, [pc, #240]	; (8003904 <menu+0x1cd8>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b06      	cmp	r3, #6
 8003818:	d902      	bls.n	8003820 <menu+0x1bf4>
		   		kapiTablaAcSure = 5;
 800381a:	4b3a      	ldr	r3, [pc, #232]	; (8003904 <menu+0x1cd8>)
 800381c:	2205      	movs	r2, #5
 800381e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003820:	f002 ffa2 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003824:	2108      	movs	r1, #8
 8003826:	482d      	ldr	r0, [pc, #180]	; (80038dc <menu+0x1cb0>)
 8003828:	f006 fd38 	bl	800a29c <HAL_GPIO_ReadPin>
 800382c:	4603      	mov	r3, r0
 800382e:	2b01      	cmp	r3, #1
 8003830:	d10d      	bne.n	800384e <menu+0x1c22>
 8003832:	4b2b      	ldr	r3, [pc, #172]	; (80038e0 <menu+0x1cb4>)
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	f083 0301 	eor.w	r3, r3, #1
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	d006      	beq.n	800384e <menu+0x1c22>
			eepromData[13] = kapiTablaAcSure;
 8003840:	4b30      	ldr	r3, [pc, #192]	; (8003904 <menu+0x1cd8>)
 8003842:	781a      	ldrb	r2, [r3, #0]
 8003844:	4b27      	ldr	r3, [pc, #156]	; (80038e4 <menu+0x1cb8>)
 8003846:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8003848:	4b28      	ldr	r3, [pc, #160]	; (80038ec <menu+0x1cc0>)
 800384a:	2201      	movs	r2, #1
 800384c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 800384e:	4b28      	ldr	r3, [pc, #160]	; (80038f0 <menu+0x1cc4>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b10      	cmp	r3, #16
 8003854:	f040 80bc 	bne.w	80039d0 <menu+0x1da4>
		if(dilSecim == 0) {
 8003858:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <menu+0x1ca4>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d105      	bne.n	800386c <menu+0x1c40>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8003860:	4a2b      	ldr	r2, [pc, #172]	; (8003910 <menu+0x1ce4>)
 8003862:	2101      	movs	r1, #1
 8003864:	2001      	movs	r0, #1
 8003866:	f7fd f8a5 	bl	80009b4 <lcd_print>
 800386a:	e008      	b.n	800387e <menu+0x1c52>
		} else if(dilSecim == 1) {
 800386c:	4b18      	ldr	r3, [pc, #96]	; (80038d0 <menu+0x1ca4>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d104      	bne.n	800387e <menu+0x1c52>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8003874:	4a27      	ldr	r2, [pc, #156]	; (8003914 <menu+0x1ce8>)
 8003876:	2101      	movs	r1, #1
 8003878:	2001      	movs	r0, #1
 800387a:	f7fd f89b 	bl	80009b4 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 800387e:	4b26      	ldr	r3, [pc, #152]	; (8003918 <menu+0x1cec>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d113      	bne.n	80038ae <menu+0x1c82>
			if(dilSecim == 0) {
 8003886:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <menu+0x1ca4>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d105      	bne.n	800389a <menu+0x1c6e>
				lcd_print(2, 1, "Pasif           ");
 800388e:	4a11      	ldr	r2, [pc, #68]	; (80038d4 <menu+0x1ca8>)
 8003890:	2101      	movs	r1, #1
 8003892:	2002      	movs	r0, #2
 8003894:	f7fd f88e 	bl	80009b4 <lcd_print>
 8003898:	e04b      	b.n	8003932 <menu+0x1d06>
			} else if(dilSecim == 1) {
 800389a:	4b0d      	ldr	r3, [pc, #52]	; (80038d0 <menu+0x1ca4>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d147      	bne.n	8003932 <menu+0x1d06>
				lcd_print(2, 1, "Passive         ");
 80038a2:	4a0d      	ldr	r2, [pc, #52]	; (80038d8 <menu+0x1cac>)
 80038a4:	2101      	movs	r1, #1
 80038a6:	2002      	movs	r0, #2
 80038a8:	f7fd f884 	bl	80009b4 <lcd_print>
 80038ac:	e041      	b.n	8003932 <menu+0x1d06>
			}
		} else if(yukariYavasLimit == 1) {
 80038ae:	4b1a      	ldr	r3, [pc, #104]	; (8003918 <menu+0x1cec>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d13d      	bne.n	8003932 <menu+0x1d06>
			if(dilSecim == 0) {
 80038b6:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <menu+0x1ca4>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d130      	bne.n	8003920 <menu+0x1cf4>
				lcd_print(2, 1, "Aktif           ");
 80038be:	4a17      	ldr	r2, [pc, #92]	; (800391c <menu+0x1cf0>)
 80038c0:	2101      	movs	r1, #1
 80038c2:	2002      	movs	r0, #2
 80038c4:	f7fd f876 	bl	80009b4 <lcd_print>
 80038c8:	e033      	b.n	8003932 <menu+0x1d06>
 80038ca:	bf00      	nop
 80038cc:	20000caa 	.word	0x20000caa
 80038d0:	20000cbe 	.word	0x20000cbe
 80038d4:	0800e350 	.word	0x0800e350
 80038d8:	0800e364 	.word	0x0800e364
 80038dc:	40010800 	.word	0x40010800
 80038e0:	20000ccc 	.word	0x20000ccc
 80038e4:	20000b38 	.word	0x20000b38
 80038e8:	20000ca3 	.word	0x20000ca3
 80038ec:	20000cc9 	.word	0x20000cc9
 80038f0:	20000c9d 	.word	0x20000c9d
 80038f4:	0800e6f0 	.word	0x0800e6f0
 80038f8:	0800e5b4 	.word	0x0800e5b4
 80038fc:	0800e704 	.word	0x0800e704
 8003900:	0800e5d8 	.word	0x0800e5d8
 8003904:	20000cb8 	.word	0x20000cb8
 8003908:	20000bcc 	.word	0x20000bcc
 800390c:	20000ca8 	.word	0x20000ca8
 8003910:	0800e718 	.word	0x0800e718
 8003914:	0800e72c 	.word	0x0800e72c
 8003918:	20000cab 	.word	0x20000cab
 800391c:	0800e3b0 	.word	0x0800e3b0
			} else if(dilSecim == 1) {
 8003920:	4b99      	ldr	r3, [pc, #612]	; (8003b88 <menu+0x1f5c>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d104      	bne.n	8003932 <menu+0x1d06>
				lcd_print(2, 1, "Active          ");
 8003928:	4a98      	ldr	r2, [pc, #608]	; (8003b8c <menu+0x1f60>)
 800392a:	2101      	movs	r1, #1
 800392c:	2002      	movs	r0, #2
 800392e:	f7fd f841 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003932:	2102      	movs	r1, #2
 8003934:	4896      	ldr	r0, [pc, #600]	; (8003b90 <menu+0x1f64>)
 8003936:	f006 fcb1 	bl	800a29c <HAL_GPIO_ReadPin>
 800393a:	4603      	mov	r3, r0
 800393c:	2b01      	cmp	r3, #1
 800393e:	d115      	bne.n	800396c <menu+0x1d40>
 8003940:	4b94      	ldr	r3, [pc, #592]	; (8003b94 <menu+0x1f68>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	f083 0301 	eor.w	r3, r3, #1
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00e      	beq.n	800396c <menu+0x1d40>
			yukariYavasLimit = yukariYavasLimit + 1;
 800394e:	4b92      	ldr	r3, [pc, #584]	; (8003b98 <menu+0x1f6c>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	3301      	adds	r3, #1
 8003954:	b2da      	uxtb	r2, r3
 8003956:	4b90      	ldr	r3, [pc, #576]	; (8003b98 <menu+0x1f6c>)
 8003958:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 800395a:	4b8f      	ldr	r3, [pc, #572]	; (8003b98 <menu+0x1f6c>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d902      	bls.n	8003968 <menu+0x1d3c>
				yukariYavasLimit = 0;
 8003962:	4b8d      	ldr	r3, [pc, #564]	; (8003b98 <menu+0x1f6c>)
 8003964:	2200      	movs	r2, #0
 8003966:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003968:	f002 fefe 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800396c:	2104      	movs	r1, #4
 800396e:	4888      	ldr	r0, [pc, #544]	; (8003b90 <menu+0x1f64>)
 8003970:	f006 fc94 	bl	800a29c <HAL_GPIO_ReadPin>
 8003974:	4603      	mov	r3, r0
 8003976:	2b01      	cmp	r3, #1
 8003978:	d115      	bne.n	80039a6 <menu+0x1d7a>
 800397a:	4b86      	ldr	r3, [pc, #536]	; (8003b94 <menu+0x1f68>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	f083 0301 	eor.w	r3, r3, #1
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d00e      	beq.n	80039a6 <menu+0x1d7a>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003988:	4b83      	ldr	r3, [pc, #524]	; (8003b98 <menu+0x1f6c>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	3b01      	subs	r3, #1
 800398e:	b2da      	uxtb	r2, r3
 8003990:	4b81      	ldr	r3, [pc, #516]	; (8003b98 <menu+0x1f6c>)
 8003992:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003994:	4b80      	ldr	r3, [pc, #512]	; (8003b98 <menu+0x1f6c>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <menu+0x1d76>
		   		yukariYavasLimit = 1;
 800399c:	4b7e      	ldr	r3, [pc, #504]	; (8003b98 <menu+0x1f6c>)
 800399e:	2201      	movs	r2, #1
 80039a0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039a2:	f002 fee1 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039a6:	2108      	movs	r1, #8
 80039a8:	4879      	ldr	r0, [pc, #484]	; (8003b90 <menu+0x1f64>)
 80039aa:	f006 fc77 	bl	800a29c <HAL_GPIO_ReadPin>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d10d      	bne.n	80039d0 <menu+0x1da4>
 80039b4:	4b77      	ldr	r3, [pc, #476]	; (8003b94 <menu+0x1f68>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	f083 0301 	eor.w	r3, r3, #1
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d006      	beq.n	80039d0 <menu+0x1da4>
			eepromData[14] = yukariYavasLimit;
 80039c2:	4b75      	ldr	r3, [pc, #468]	; (8003b98 <menu+0x1f6c>)
 80039c4:	781a      	ldrb	r2, [r3, #0]
 80039c6:	4b75      	ldr	r3, [pc, #468]	; (8003b9c <menu+0x1f70>)
 80039c8:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80039ca:	4b75      	ldr	r3, [pc, #468]	; (8003ba0 <menu+0x1f74>)
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80039d0:	4b74      	ldr	r3, [pc, #464]	; (8003ba4 <menu+0x1f78>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b11      	cmp	r3, #17
 80039d6:	f040 80c3 	bne.w	8003b60 <menu+0x1f34>
		if(dilSecim == 0) {
 80039da:	4b6b      	ldr	r3, [pc, #428]	; (8003b88 <menu+0x1f5c>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d105      	bne.n	80039ee <menu+0x1dc2>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 80039e2:	4a71      	ldr	r2, [pc, #452]	; (8003ba8 <menu+0x1f7c>)
 80039e4:	2101      	movs	r1, #1
 80039e6:	2001      	movs	r0, #1
 80039e8:	f7fc ffe4 	bl	80009b4 <lcd_print>
 80039ec:	e008      	b.n	8003a00 <menu+0x1dd4>
		} else if(dilSecim == 1) {
 80039ee:	4b66      	ldr	r3, [pc, #408]	; (8003b88 <menu+0x1f5c>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d104      	bne.n	8003a00 <menu+0x1dd4>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 80039f6:	4a6d      	ldr	r2, [pc, #436]	; (8003bac <menu+0x1f80>)
 80039f8:	2101      	movs	r1, #1
 80039fa:	2001      	movs	r0, #1
 80039fc:	f7fc ffda 	bl	80009b4 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003a00:	4b6b      	ldr	r3, [pc, #428]	; (8003bb0 <menu+0x1f84>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d113      	bne.n	8003a30 <menu+0x1e04>
			if(dilSecim == 0){
 8003a08:	4b5f      	ldr	r3, [pc, #380]	; (8003b88 <menu+0x1f5c>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d105      	bne.n	8003a1c <menu+0x1df0>
				lcd_print(2, 1, "Devirme aktif  ");
 8003a10:	4a68      	ldr	r2, [pc, #416]	; (8003bb4 <menu+0x1f88>)
 8003a12:	2101      	movs	r1, #1
 8003a14:	2002      	movs	r0, #2
 8003a16:	f7fc ffcd 	bl	80009b4 <lcd_print>
 8003a1a:	e038      	b.n	8003a8e <menu+0x1e62>
			} else if(dilSecim == 1){
 8003a1c:	4b5a      	ldr	r3, [pc, #360]	; (8003b88 <menu+0x1f5c>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d134      	bne.n	8003a8e <menu+0x1e62>
				lcd_print(2, 1, "Tipping active ");
 8003a24:	4a64      	ldr	r2, [pc, #400]	; (8003bb8 <menu+0x1f8c>)
 8003a26:	2101      	movs	r1, #1
 8003a28:	2002      	movs	r0, #2
 8003a2a:	f7fc ffc3 	bl	80009b4 <lcd_print>
 8003a2e:	e02e      	b.n	8003a8e <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003a30:	4b5f      	ldr	r3, [pc, #380]	; (8003bb0 <menu+0x1f84>)
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d113      	bne.n	8003a60 <menu+0x1e34>
			if(dilSecim == 0){
 8003a38:	4b53      	ldr	r3, [pc, #332]	; (8003b88 <menu+0x1f5c>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d105      	bne.n	8003a4c <menu+0x1e20>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003a40:	4a5e      	ldr	r2, [pc, #376]	; (8003bbc <menu+0x1f90>)
 8003a42:	2101      	movs	r1, #1
 8003a44:	2002      	movs	r0, #2
 8003a46:	f7fc ffb5 	bl	80009b4 <lcd_print>
 8003a4a:	e020      	b.n	8003a8e <menu+0x1e62>
			} else if(dilSecim == 1) {
 8003a4c:	4b4e      	ldr	r3, [pc, #312]	; (8003b88 <menu+0x1f5c>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d11c      	bne.n	8003a8e <menu+0x1e62>
				lcd_print(2, 1, "Drive active   ");
 8003a54:	4a5a      	ldr	r2, [pc, #360]	; (8003bc0 <menu+0x1f94>)
 8003a56:	2101      	movs	r1, #1
 8003a58:	2002      	movs	r0, #2
 8003a5a:	f7fc ffab 	bl	80009b4 <lcd_print>
 8003a5e:	e016      	b.n	8003a8e <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003a60:	4b53      	ldr	r3, [pc, #332]	; (8003bb0 <menu+0x1f84>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d112      	bne.n	8003a8e <menu+0x1e62>
			if(dilSecim == 0) {
 8003a68:	4b47      	ldr	r3, [pc, #284]	; (8003b88 <menu+0x1f5c>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d105      	bne.n	8003a7c <menu+0x1e50>
				lcd_print(2, 1, "Pasif           ");
 8003a70:	4a54      	ldr	r2, [pc, #336]	; (8003bc4 <menu+0x1f98>)
 8003a72:	2101      	movs	r1, #1
 8003a74:	2002      	movs	r0, #2
 8003a76:	f7fc ff9d 	bl	80009b4 <lcd_print>
 8003a7a:	e008      	b.n	8003a8e <menu+0x1e62>
			} else if(dilSecim == 1) {
 8003a7c:	4b42      	ldr	r3, [pc, #264]	; (8003b88 <menu+0x1f5c>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d104      	bne.n	8003a8e <menu+0x1e62>
				lcd_print(2, 1, "Passive         ");
 8003a84:	4a50      	ldr	r2, [pc, #320]	; (8003bc8 <menu+0x1f9c>)
 8003a86:	2101      	movs	r1, #1
 8003a88:	2002      	movs	r0, #2
 8003a8a:	f7fc ff93 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a8e:	2102      	movs	r1, #2
 8003a90:	483f      	ldr	r0, [pc, #252]	; (8003b90 <menu+0x1f64>)
 8003a92:	f006 fc03 	bl	800a29c <HAL_GPIO_ReadPin>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d115      	bne.n	8003ac8 <menu+0x1e9c>
 8003a9c:	4b3d      	ldr	r3, [pc, #244]	; (8003b94 <menu+0x1f68>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	f083 0301 	eor.w	r3, r3, #1
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00e      	beq.n	8003ac8 <menu+0x1e9c>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8003aaa:	4b41      	ldr	r3, [pc, #260]	; (8003bb0 <menu+0x1f84>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	4b3f      	ldr	r3, [pc, #252]	; (8003bb0 <menu+0x1f84>)
 8003ab4:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003ab6:	4b3e      	ldr	r3, [pc, #248]	; (8003bb0 <menu+0x1f84>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d902      	bls.n	8003ac4 <menu+0x1e98>
				devirmeYuruyusSecim = 0;
 8003abe:	4b3c      	ldr	r3, [pc, #240]	; (8003bb0 <menu+0x1f84>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ac4:	f002 fe50 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ac8:	2104      	movs	r1, #4
 8003aca:	4831      	ldr	r0, [pc, #196]	; (8003b90 <menu+0x1f64>)
 8003acc:	f006 fbe6 	bl	800a29c <HAL_GPIO_ReadPin>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d115      	bne.n	8003b02 <menu+0x1ed6>
 8003ad6:	4b2f      	ldr	r3, [pc, #188]	; (8003b94 <menu+0x1f68>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	f083 0301 	eor.w	r3, r3, #1
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00e      	beq.n	8003b02 <menu+0x1ed6>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003ae4:	4b32      	ldr	r3, [pc, #200]	; (8003bb0 <menu+0x1f84>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	4b30      	ldr	r3, [pc, #192]	; (8003bb0 <menu+0x1f84>)
 8003aee:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003af0:	4b2f      	ldr	r3, [pc, #188]	; (8003bb0 <menu+0x1f84>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d902      	bls.n	8003afe <menu+0x1ed2>
		   		devirmeYuruyusSecim = 2;
 8003af8:	4b2d      	ldr	r3, [pc, #180]	; (8003bb0 <menu+0x1f84>)
 8003afa:	2202      	movs	r2, #2
 8003afc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003afe:	f002 fe33 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b02:	2108      	movs	r1, #8
 8003b04:	4822      	ldr	r0, [pc, #136]	; (8003b90 <menu+0x1f64>)
 8003b06:	f006 fbc9 	bl	800a29c <HAL_GPIO_ReadPin>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d127      	bne.n	8003b60 <menu+0x1f34>
 8003b10:	4b20      	ldr	r3, [pc, #128]	; (8003b94 <menu+0x1f68>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	f083 0301 	eor.w	r3, r3, #1
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d020      	beq.n	8003b60 <menu+0x1f34>
			eepromData[15] = devirmeYuruyusSecim;
 8003b1e:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <menu+0x1f84>)
 8003b20:	781a      	ldrb	r2, [r3, #0]
 8003b22:	4b1e      	ldr	r3, [pc, #120]	; (8003b9c <menu+0x1f70>)
 8003b24:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8003b26:	4b22      	ldr	r3, [pc, #136]	; (8003bb0 <menu+0x1f84>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d003      	beq.n	8003b36 <menu+0x1f0a>
 8003b2e:	4b20      	ldr	r3, [pc, #128]	; (8003bb0 <menu+0x1f84>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d106      	bne.n	8003b44 <menu+0x1f18>
				calismaSekli = 0;
 8003b36:	4b25      	ldr	r3, [pc, #148]	; (8003bcc <menu+0x1fa0>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003b3c:	4b23      	ldr	r3, [pc, #140]	; (8003bcc <menu+0x1fa0>)
 8003b3e:	781a      	ldrb	r2, [r3, #0]
 8003b40:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <menu+0x1f70>)
 8003b42:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003b44:	4b1a      	ldr	r3, [pc, #104]	; (8003bb0 <menu+0x1f84>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d106      	bne.n	8003b5a <menu+0x1f2e>
				devirmeSilindirTipi = 1;
 8003b4c:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <menu+0x1fa4>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003b52:	4b1f      	ldr	r3, [pc, #124]	; (8003bd0 <menu+0x1fa4>)
 8003b54:	781a      	ldrb	r2, [r3, #0]
 8003b56:	4b11      	ldr	r3, [pc, #68]	; (8003b9c <menu+0x1f70>)
 8003b58:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8003b5a:	4b11      	ldr	r3, [pc, #68]	; (8003ba0 <menu+0x1f74>)
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003b60:	4b10      	ldr	r3, [pc, #64]	; (8003ba4 <menu+0x1f78>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b12      	cmp	r3, #18
 8003b66:	f040 80d5 	bne.w	8003d14 <menu+0x20e8>
		if(devirmeYuruyusSecim == 2) {
 8003b6a:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <menu+0x1f84>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d13c      	bne.n	8003bec <menu+0x1fc0>
			if(dilSecim == 0) {
 8003b72:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <menu+0x1f5c>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d12e      	bne.n	8003bd8 <menu+0x1fac>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8003b7a:	4a16      	ldr	r2, [pc, #88]	; (8003bd4 <menu+0x1fa8>)
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	2001      	movs	r0, #1
 8003b80:	f7fc ff18 	bl	80009b4 <lcd_print>
 8003b84:	e048      	b.n	8003c18 <menu+0x1fec>
 8003b86:	bf00      	nop
 8003b88:	20000cbe 	.word	0x20000cbe
 8003b8c:	0800e3c4 	.word	0x0800e3c4
 8003b90:	40010800 	.word	0x40010800
 8003b94:	20000ccc 	.word	0x20000ccc
 8003b98:	20000cab 	.word	0x20000cab
 8003b9c:	20000b38 	.word	0x20000b38
 8003ba0:	20000cc9 	.word	0x20000cc9
 8003ba4:	20000c9d 	.word	0x20000c9d
 8003ba8:	0800e740 	.word	0x0800e740
 8003bac:	0800e754 	.word	0x0800e754
 8003bb0:	20000cac 	.word	0x20000cac
 8003bb4:	0800e768 	.word	0x0800e768
 8003bb8:	0800e778 	.word	0x0800e778
 8003bbc:	0800e788 	.word	0x0800e788
 8003bc0:	0800e798 	.word	0x0800e798
 8003bc4:	0800e350 	.word	0x0800e350
 8003bc8:	0800e364 	.word	0x0800e364
 8003bcc:	20000c9e 	.word	0x20000c9e
 8003bd0:	20000caf 	.word	0x20000caf
 8003bd4:	0800e7a8 	.word	0x0800e7a8
			} else if(dilSecim == 1) {
 8003bd8:	4b7b      	ldr	r3, [pc, #492]	; (8003dc8 <menu+0x219c>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d11b      	bne.n	8003c18 <menu+0x1fec>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003be0:	4a7a      	ldr	r2, [pc, #488]	; (8003dcc <menu+0x21a0>)
 8003be2:	2101      	movs	r1, #1
 8003be4:	2001      	movs	r0, #1
 8003be6:	f7fc fee5 	bl	80009b4 <lcd_print>
 8003bea:	e015      	b.n	8003c18 <menu+0x1fec>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003bec:	4b78      	ldr	r3, [pc, #480]	; (8003dd0 <menu+0x21a4>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d111      	bne.n	8003c18 <menu+0x1fec>
			if(dilSecim == 0){
 8003bf4:	4b74      	ldr	r3, [pc, #464]	; (8003dc8 <menu+0x219c>)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d104      	bne.n	8003c06 <menu+0x1fda>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003bfc:	4a75      	ldr	r2, [pc, #468]	; (8003dd4 <menu+0x21a8>)
 8003bfe:	2101      	movs	r1, #1
 8003c00:	2001      	movs	r0, #1
 8003c02:	f7fc fed7 	bl	80009b4 <lcd_print>
			}
			if(dilSecim == 1){
 8003c06:	4b70      	ldr	r3, [pc, #448]	; (8003dc8 <menu+0x219c>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d104      	bne.n	8003c18 <menu+0x1fec>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003c0e:	4a72      	ldr	r2, [pc, #456]	; (8003dd8 <menu+0x21ac>)
 8003c10:	2101      	movs	r1, #1
 8003c12:	2001      	movs	r0, #1
 8003c14:	f7fc fece 	bl	80009b4 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003c18:	4b70      	ldr	r3, [pc, #448]	; (8003ddc <menu+0x21b0>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d113      	bne.n	8003c48 <menu+0x201c>
			if(dilSecim == 0) {
 8003c20:	4b69      	ldr	r3, [pc, #420]	; (8003dc8 <menu+0x219c>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d105      	bne.n	8003c34 <menu+0x2008>
				lcd_print(2, 1, "Pasif           ");
 8003c28:	4a6d      	ldr	r2, [pc, #436]	; (8003de0 <menu+0x21b4>)
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	2002      	movs	r0, #2
 8003c2e:	f7fc fec1 	bl	80009b4 <lcd_print>
 8003c32:	e020      	b.n	8003c76 <menu+0x204a>
			} else if(dilSecim == 1){
 8003c34:	4b64      	ldr	r3, [pc, #400]	; (8003dc8 <menu+0x219c>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d11c      	bne.n	8003c76 <menu+0x204a>
				lcd_print(2, 1, "Passive         ");
 8003c3c:	4a69      	ldr	r2, [pc, #420]	; (8003de4 <menu+0x21b8>)
 8003c3e:	2101      	movs	r1, #1
 8003c40:	2002      	movs	r0, #2
 8003c42:	f7fc feb7 	bl	80009b4 <lcd_print>
 8003c46:	e016      	b.n	8003c76 <menu+0x204a>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003c48:	4b64      	ldr	r3, [pc, #400]	; (8003ddc <menu+0x21b0>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d112      	bne.n	8003c76 <menu+0x204a>
			if(dilSecim == 0){
 8003c50:	4b5d      	ldr	r3, [pc, #372]	; (8003dc8 <menu+0x219c>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d105      	bne.n	8003c64 <menu+0x2038>
				lcd_print(2, 1, "Aktif           ");
 8003c58:	4a63      	ldr	r2, [pc, #396]	; (8003de8 <menu+0x21bc>)
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	2002      	movs	r0, #2
 8003c5e:	f7fc fea9 	bl	80009b4 <lcd_print>
 8003c62:	e008      	b.n	8003c76 <menu+0x204a>
			} else if(dilSecim == 1){
 8003c64:	4b58      	ldr	r3, [pc, #352]	; (8003dc8 <menu+0x219c>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d104      	bne.n	8003c76 <menu+0x204a>
				lcd_print(2, 1, "Active          ");
 8003c6c:	4a5f      	ldr	r2, [pc, #380]	; (8003dec <menu+0x21c0>)
 8003c6e:	2101      	movs	r1, #1
 8003c70:	2002      	movs	r0, #2
 8003c72:	f7fc fe9f 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c76:	2102      	movs	r1, #2
 8003c78:	485d      	ldr	r0, [pc, #372]	; (8003df0 <menu+0x21c4>)
 8003c7a:	f006 fb0f 	bl	800a29c <HAL_GPIO_ReadPin>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d115      	bne.n	8003cb0 <menu+0x2084>
 8003c84:	4b5b      	ldr	r3, [pc, #364]	; (8003df4 <menu+0x21c8>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	f083 0301 	eor.w	r3, r3, #1
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00e      	beq.n	8003cb0 <menu+0x2084>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003c92:	4b52      	ldr	r3, [pc, #328]	; (8003ddc <menu+0x21b0>)
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	3301      	adds	r3, #1
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	4b50      	ldr	r3, [pc, #320]	; (8003ddc <menu+0x21b0>)
 8003c9c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003c9e:	4b4f      	ldr	r3, [pc, #316]	; (8003ddc <menu+0x21b0>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d902      	bls.n	8003cac <menu+0x2080>
				devirmeYukariIleriLimit = 0;
 8003ca6:	4b4d      	ldr	r3, [pc, #308]	; (8003ddc <menu+0x21b0>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003cac:	f002 fd5c 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cb0:	2104      	movs	r1, #4
 8003cb2:	484f      	ldr	r0, [pc, #316]	; (8003df0 <menu+0x21c4>)
 8003cb4:	f006 faf2 	bl	800a29c <HAL_GPIO_ReadPin>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d115      	bne.n	8003cea <menu+0x20be>
 8003cbe:	4b4d      	ldr	r3, [pc, #308]	; (8003df4 <menu+0x21c8>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	f083 0301 	eor.w	r3, r3, #1
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00e      	beq.n	8003cea <menu+0x20be>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003ccc:	4b43      	ldr	r3, [pc, #268]	; (8003ddc <menu+0x21b0>)
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b2da      	uxtb	r2, r3
 8003cd4:	4b41      	ldr	r3, [pc, #260]	; (8003ddc <menu+0x21b0>)
 8003cd6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003cd8:	4b40      	ldr	r3, [pc, #256]	; (8003ddc <menu+0x21b0>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d002      	beq.n	8003ce6 <menu+0x20ba>
		   		devirmeYukariIleriLimit = 1;
 8003ce0:	4b3e      	ldr	r3, [pc, #248]	; (8003ddc <menu+0x21b0>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ce6:	f002 fd3f 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cea:	2108      	movs	r1, #8
 8003cec:	4840      	ldr	r0, [pc, #256]	; (8003df0 <menu+0x21c4>)
 8003cee:	f006 fad5 	bl	800a29c <HAL_GPIO_ReadPin>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d10d      	bne.n	8003d14 <menu+0x20e8>
 8003cf8:	4b3e      	ldr	r3, [pc, #248]	; (8003df4 <menu+0x21c8>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	f083 0301 	eor.w	r3, r3, #1
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d006      	beq.n	8003d14 <menu+0x20e8>
			eepromData[16] = devirmeYukariIleriLimit;
 8003d06:	4b35      	ldr	r3, [pc, #212]	; (8003ddc <menu+0x21b0>)
 8003d08:	781a      	ldrb	r2, [r3, #0]
 8003d0a:	4b3b      	ldr	r3, [pc, #236]	; (8003df8 <menu+0x21cc>)
 8003d0c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003d0e:	4b3b      	ldr	r3, [pc, #236]	; (8003dfc <menu+0x21d0>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003d14:	4b3a      	ldr	r3, [pc, #232]	; (8003e00 <menu+0x21d4>)
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	2b13      	cmp	r3, #19
 8003d1a:	f040 80d5 	bne.w	8003ec8 <menu+0x229c>
		if(devirmeYuruyusSecim == 2) {
 8003d1e:	4b2c      	ldr	r3, [pc, #176]	; (8003dd0 <menu+0x21a4>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d113      	bne.n	8003d4e <menu+0x2122>
			if(dilSecim == 0) {
 8003d26:	4b28      	ldr	r3, [pc, #160]	; (8003dc8 <menu+0x219c>)
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d105      	bne.n	8003d3a <menu+0x210e>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003d2e:	4a35      	ldr	r2, [pc, #212]	; (8003e04 <menu+0x21d8>)
 8003d30:	2101      	movs	r1, #1
 8003d32:	2001      	movs	r0, #1
 8003d34:	f7fc fe3e 	bl	80009b4 <lcd_print>
 8003d38:	e01f      	b.n	8003d7a <menu+0x214e>
			} else if(dilSecim == 1) {
 8003d3a:	4b23      	ldr	r3, [pc, #140]	; (8003dc8 <menu+0x219c>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d11b      	bne.n	8003d7a <menu+0x214e>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003d42:	4a31      	ldr	r2, [pc, #196]	; (8003e08 <menu+0x21dc>)
 8003d44:	2101      	movs	r1, #1
 8003d46:	2001      	movs	r0, #1
 8003d48:	f7fc fe34 	bl	80009b4 <lcd_print>
 8003d4c:	e015      	b.n	8003d7a <menu+0x214e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003d4e:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <menu+0x21a4>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d111      	bne.n	8003d7a <menu+0x214e>
			if(dilSecim == 0) {
 8003d56:	4b1c      	ldr	r3, [pc, #112]	; (8003dc8 <menu+0x219c>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d104      	bne.n	8003d68 <menu+0x213c>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8003d5e:	4a2b      	ldr	r2, [pc, #172]	; (8003e0c <menu+0x21e0>)
 8003d60:	2101      	movs	r1, #1
 8003d62:	2001      	movs	r0, #1
 8003d64:	f7fc fe26 	bl	80009b4 <lcd_print>
			}
			if(dilSecim == 1) {
 8003d68:	4b17      	ldr	r3, [pc, #92]	; (8003dc8 <menu+0x219c>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d104      	bne.n	8003d7a <menu+0x214e>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003d70:	4a27      	ldr	r2, [pc, #156]	; (8003e10 <menu+0x21e4>)
 8003d72:	2101      	movs	r1, #1
 8003d74:	2001      	movs	r0, #1
 8003d76:	f7fc fe1d 	bl	80009b4 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8003d7a:	4b26      	ldr	r3, [pc, #152]	; (8003e14 <menu+0x21e8>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d113      	bne.n	8003daa <menu+0x217e>
			if(dilSecim == 0) {
 8003d82:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <menu+0x219c>)
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d105      	bne.n	8003d96 <menu+0x216a>
				lcd_print(2, 1, "Pasif           ");
 8003d8a:	4a15      	ldr	r2, [pc, #84]	; (8003de0 <menu+0x21b4>)
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	2002      	movs	r0, #2
 8003d90:	f7fc fe10 	bl	80009b4 <lcd_print>
 8003d94:	e049      	b.n	8003e2a <menu+0x21fe>
			} else if(dilSecim == 1) {
 8003d96:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <menu+0x219c>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d145      	bne.n	8003e2a <menu+0x21fe>
				lcd_print(2, 1, "Passive         ");
 8003d9e:	4a11      	ldr	r2, [pc, #68]	; (8003de4 <menu+0x21b8>)
 8003da0:	2101      	movs	r1, #1
 8003da2:	2002      	movs	r0, #2
 8003da4:	f7fc fe06 	bl	80009b4 <lcd_print>
 8003da8:	e03f      	b.n	8003e2a <menu+0x21fe>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003daa:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <menu+0x21e8>)
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d13b      	bne.n	8003e2a <menu+0x21fe>
			if(dilSecim == 0) {
 8003db2:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <menu+0x219c>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d12e      	bne.n	8003e18 <menu+0x21ec>
				lcd_print(2, 1, "Aktif           ");
 8003dba:	4a0b      	ldr	r2, [pc, #44]	; (8003de8 <menu+0x21bc>)
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	2002      	movs	r0, #2
 8003dc0:	f7fc fdf8 	bl	80009b4 <lcd_print>
 8003dc4:	e031      	b.n	8003e2a <menu+0x21fe>
 8003dc6:	bf00      	nop
 8003dc8:	20000cbe 	.word	0x20000cbe
 8003dcc:	0800e7bc 	.word	0x0800e7bc
 8003dd0:	20000cac 	.word	0x20000cac
 8003dd4:	0800e7cc 	.word	0x0800e7cc
 8003dd8:	0800e7e0 	.word	0x0800e7e0
 8003ddc:	20000cad 	.word	0x20000cad
 8003de0:	0800e350 	.word	0x0800e350
 8003de4:	0800e364 	.word	0x0800e364
 8003de8:	0800e3b0 	.word	0x0800e3b0
 8003dec:	0800e3c4 	.word	0x0800e3c4
 8003df0:	40010800 	.word	0x40010800
 8003df4:	20000ccc 	.word	0x20000ccc
 8003df8:	20000b38 	.word	0x20000b38
 8003dfc:	20000cc9 	.word	0x20000cc9
 8003e00:	20000c9d 	.word	0x20000c9d
 8003e04:	0800e7f4 	.word	0x0800e7f4
 8003e08:	0800e808 	.word	0x0800e808
 8003e0c:	0800e81c 	.word	0x0800e81c
 8003e10:	0800e830 	.word	0x0800e830
 8003e14:	20000cae 	.word	0x20000cae
			} else if(dilSecim == 1) {
 8003e18:	4b90      	ldr	r3, [pc, #576]	; (800405c <menu+0x2430>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d104      	bne.n	8003e2a <menu+0x21fe>
				lcd_print(2, 1, "Active          ");
 8003e20:	4a8f      	ldr	r2, [pc, #572]	; (8004060 <menu+0x2434>)
 8003e22:	2101      	movs	r1, #1
 8003e24:	2002      	movs	r0, #2
 8003e26:	f7fc fdc5 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e2a:	2102      	movs	r1, #2
 8003e2c:	488d      	ldr	r0, [pc, #564]	; (8004064 <menu+0x2438>)
 8003e2e:	f006 fa35 	bl	800a29c <HAL_GPIO_ReadPin>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d115      	bne.n	8003e64 <menu+0x2238>
 8003e38:	4b8b      	ldr	r3, [pc, #556]	; (8004068 <menu+0x243c>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	f083 0301 	eor.w	r3, r3, #1
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d00e      	beq.n	8003e64 <menu+0x2238>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003e46:	4b89      	ldr	r3, [pc, #548]	; (800406c <menu+0x2440>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	4b87      	ldr	r3, [pc, #540]	; (800406c <menu+0x2440>)
 8003e50:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003e52:	4b86      	ldr	r3, [pc, #536]	; (800406c <menu+0x2440>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d902      	bls.n	8003e60 <menu+0x2234>
				devirmeAsagiGeriLimit = 0;
 8003e5a:	4b84      	ldr	r3, [pc, #528]	; (800406c <menu+0x2440>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e60:	f002 fc82 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e64:	2104      	movs	r1, #4
 8003e66:	487f      	ldr	r0, [pc, #508]	; (8004064 <menu+0x2438>)
 8003e68:	f006 fa18 	bl	800a29c <HAL_GPIO_ReadPin>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d115      	bne.n	8003e9e <menu+0x2272>
 8003e72:	4b7d      	ldr	r3, [pc, #500]	; (8004068 <menu+0x243c>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	f083 0301 	eor.w	r3, r3, #1
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00e      	beq.n	8003e9e <menu+0x2272>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003e80:	4b7a      	ldr	r3, [pc, #488]	; (800406c <menu+0x2440>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	4b78      	ldr	r3, [pc, #480]	; (800406c <menu+0x2440>)
 8003e8a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003e8c:	4b77      	ldr	r3, [pc, #476]	; (800406c <menu+0x2440>)
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <menu+0x226e>
		   		devirmeAsagiGeriLimit = 1;
 8003e94:	4b75      	ldr	r3, [pc, #468]	; (800406c <menu+0x2440>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e9a:	f002 fc65 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e9e:	2108      	movs	r1, #8
 8003ea0:	4870      	ldr	r0, [pc, #448]	; (8004064 <menu+0x2438>)
 8003ea2:	f006 f9fb 	bl	800a29c <HAL_GPIO_ReadPin>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d10d      	bne.n	8003ec8 <menu+0x229c>
 8003eac:	4b6e      	ldr	r3, [pc, #440]	; (8004068 <menu+0x243c>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	f083 0301 	eor.w	r3, r3, #1
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d006      	beq.n	8003ec8 <menu+0x229c>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003eba:	4b6c      	ldr	r3, [pc, #432]	; (800406c <menu+0x2440>)
 8003ebc:	781a      	ldrb	r2, [r3, #0]
 8003ebe:	4b6c      	ldr	r3, [pc, #432]	; (8004070 <menu+0x2444>)
 8003ec0:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003ec2:	4b6c      	ldr	r3, [pc, #432]	; (8004074 <menu+0x2448>)
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003ec8:	4b6b      	ldr	r3, [pc, #428]	; (8004078 <menu+0x244c>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b14      	cmp	r3, #20
 8003ece:	f040 80b5 	bne.w	800403c <menu+0x2410>
		if(devirmeYuruyusSecim == 1) {
 8003ed2:	4b6a      	ldr	r3, [pc, #424]	; (800407c <menu+0x2450>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d113      	bne.n	8003f02 <menu+0x22d6>
			if(dilSecim == 0) {
 8003eda:	4b60      	ldr	r3, [pc, #384]	; (800405c <menu+0x2430>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d105      	bne.n	8003eee <menu+0x22c2>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003ee2:	4a67      	ldr	r2, [pc, #412]	; (8004080 <menu+0x2454>)
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	2001      	movs	r0, #1
 8003ee8:	f7fc fd64 	bl	80009b4 <lcd_print>
 8003eec:	e020      	b.n	8003f30 <menu+0x2304>
			} else if(dilSecim == 1) {
 8003eee:	4b5b      	ldr	r3, [pc, #364]	; (800405c <menu+0x2430>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d11c      	bne.n	8003f30 <menu+0x2304>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003ef6:	4a63      	ldr	r2, [pc, #396]	; (8004084 <menu+0x2458>)
 8003ef8:	2101      	movs	r1, #1
 8003efa:	2001      	movs	r0, #1
 8003efc:	f7fc fd5a 	bl	80009b4 <lcd_print>
 8003f00:	e016      	b.n	8003f30 <menu+0x2304>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003f02:	4b5e      	ldr	r3, [pc, #376]	; (800407c <menu+0x2450>)
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d112      	bne.n	8003f30 <menu+0x2304>
			if(dilSecim == 0) {
 8003f0a:	4b54      	ldr	r3, [pc, #336]	; (800405c <menu+0x2430>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d105      	bne.n	8003f1e <menu+0x22f2>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003f12:	4a5d      	ldr	r2, [pc, #372]	; (8004088 <menu+0x245c>)
 8003f14:	2101      	movs	r1, #1
 8003f16:	2001      	movs	r0, #1
 8003f18:	f7fc fd4c 	bl	80009b4 <lcd_print>
 8003f1c:	e008      	b.n	8003f30 <menu+0x2304>
			} else if(dilSecim == 1) {
 8003f1e:	4b4f      	ldr	r3, [pc, #316]	; (800405c <menu+0x2430>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d104      	bne.n	8003f30 <menu+0x2304>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003f26:	4a59      	ldr	r2, [pc, #356]	; (800408c <menu+0x2460>)
 8003f28:	2101      	movs	r1, #1
 8003f2a:	2001      	movs	r0, #1
 8003f2c:	f7fc fd42 	bl	80009b4 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003f30:	4b57      	ldr	r3, [pc, #348]	; (8004090 <menu+0x2464>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d113      	bne.n	8003f60 <menu+0x2334>
			if(dilSecim == 0) {
 8003f38:	4b48      	ldr	r3, [pc, #288]	; (800405c <menu+0x2430>)
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d105      	bne.n	8003f4c <menu+0x2320>
				lcd_print(2, 1, "Tek tesir       ");
 8003f40:	4a54      	ldr	r2, [pc, #336]	; (8004094 <menu+0x2468>)
 8003f42:	2101      	movs	r1, #1
 8003f44:	2002      	movs	r0, #2
 8003f46:	f7fc fd35 	bl	80009b4 <lcd_print>
 8003f4a:	e020      	b.n	8003f8e <menu+0x2362>
			} else if(dilSecim == 1) {
 8003f4c:	4b43      	ldr	r3, [pc, #268]	; (800405c <menu+0x2430>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d11c      	bne.n	8003f8e <menu+0x2362>
				lcd_print(2, 1, "Single acting  ");
 8003f54:	4a50      	ldr	r2, [pc, #320]	; (8004098 <menu+0x246c>)
 8003f56:	2101      	movs	r1, #1
 8003f58:	2002      	movs	r0, #2
 8003f5a:	f7fc fd2b 	bl	80009b4 <lcd_print>
 8003f5e:	e016      	b.n	8003f8e <menu+0x2362>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003f60:	4b4b      	ldr	r3, [pc, #300]	; (8004090 <menu+0x2464>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d112      	bne.n	8003f8e <menu+0x2362>
			if(dilSecim == 0) {
 8003f68:	4b3c      	ldr	r3, [pc, #240]	; (800405c <menu+0x2430>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d105      	bne.n	8003f7c <menu+0x2350>
				lcd_print(2, 1, "Cift tesir      ");
 8003f70:	4a4a      	ldr	r2, [pc, #296]	; (800409c <menu+0x2470>)
 8003f72:	2101      	movs	r1, #1
 8003f74:	2002      	movs	r0, #2
 8003f76:	f7fc fd1d 	bl	80009b4 <lcd_print>
 8003f7a:	e008      	b.n	8003f8e <menu+0x2362>
			} else if(dilSecim == 1) {
 8003f7c:	4b37      	ldr	r3, [pc, #220]	; (800405c <menu+0x2430>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d104      	bne.n	8003f8e <menu+0x2362>
				lcd_print(2, 1, "Double acting  ");
 8003f84:	4a46      	ldr	r2, [pc, #280]	; (80040a0 <menu+0x2474>)
 8003f86:	2101      	movs	r1, #1
 8003f88:	2002      	movs	r0, #2
 8003f8a:	f7fc fd13 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003f8e:	2102      	movs	r1, #2
 8003f90:	4834      	ldr	r0, [pc, #208]	; (8004064 <menu+0x2438>)
 8003f92:	f006 f983 	bl	800a29c <HAL_GPIO_ReadPin>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d119      	bne.n	8003fd0 <menu+0x23a4>
 8003f9c:	4b32      	ldr	r3, [pc, #200]	; (8004068 <menu+0x243c>)
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	f083 0301 	eor.w	r3, r3, #1
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d012      	beq.n	8003fd0 <menu+0x23a4>
 8003faa:	4b34      	ldr	r3, [pc, #208]	; (800407c <menu+0x2450>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d10e      	bne.n	8003fd0 <menu+0x23a4>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003fb2:	4b37      	ldr	r3, [pc, #220]	; (8004090 <menu+0x2464>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	4b35      	ldr	r3, [pc, #212]	; (8004090 <menu+0x2464>)
 8003fbc:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003fbe:	4b34      	ldr	r3, [pc, #208]	; (8004090 <menu+0x2464>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d902      	bls.n	8003fcc <menu+0x23a0>
				devirmeSilindirTipi = 0;
 8003fc6:	4b32      	ldr	r3, [pc, #200]	; (8004090 <menu+0x2464>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003fcc:	f002 fbcc 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003fd0:	2104      	movs	r1, #4
 8003fd2:	4824      	ldr	r0, [pc, #144]	; (8004064 <menu+0x2438>)
 8003fd4:	f006 f962 	bl	800a29c <HAL_GPIO_ReadPin>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d119      	bne.n	8004012 <menu+0x23e6>
 8003fde:	4b22      	ldr	r3, [pc, #136]	; (8004068 <menu+0x243c>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	f083 0301 	eor.w	r3, r3, #1
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d012      	beq.n	8004012 <menu+0x23e6>
 8003fec:	4b23      	ldr	r3, [pc, #140]	; (800407c <menu+0x2450>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d10e      	bne.n	8004012 <menu+0x23e6>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003ff4:	4b26      	ldr	r3, [pc, #152]	; (8004090 <menu+0x2464>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	4b24      	ldr	r3, [pc, #144]	; (8004090 <menu+0x2464>)
 8003ffe:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8004000:	4b23      	ldr	r3, [pc, #140]	; (8004090 <menu+0x2464>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d002      	beq.n	800400e <menu+0x23e2>
		   		devirmeSilindirTipi = 1;
 8004008:	4b21      	ldr	r3, [pc, #132]	; (8004090 <menu+0x2464>)
 800400a:	2201      	movs	r2, #1
 800400c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800400e:	f002 fbab 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004012:	2108      	movs	r1, #8
 8004014:	4813      	ldr	r0, [pc, #76]	; (8004064 <menu+0x2438>)
 8004016:	f006 f941 	bl	800a29c <HAL_GPIO_ReadPin>
 800401a:	4603      	mov	r3, r0
 800401c:	2b01      	cmp	r3, #1
 800401e:	d10d      	bne.n	800403c <menu+0x2410>
 8004020:	4b11      	ldr	r3, [pc, #68]	; (8004068 <menu+0x243c>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	f083 0301 	eor.w	r3, r3, #1
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d006      	beq.n	800403c <menu+0x2410>
			eepromData[18] = devirmeSilindirTipi;
 800402e:	4b18      	ldr	r3, [pc, #96]	; (8004090 <menu+0x2464>)
 8004030:	781a      	ldrb	r2, [r3, #0]
 8004032:	4b0f      	ldr	r3, [pc, #60]	; (8004070 <menu+0x2444>)
 8004034:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8004036:	4b0f      	ldr	r3, [pc, #60]	; (8004074 <menu+0x2448>)
 8004038:	2201      	movs	r2, #1
 800403a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800403c:	4b0e      	ldr	r3, [pc, #56]	; (8004078 <menu+0x244c>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b15      	cmp	r3, #21
 8004042:	f040 80c2 	bne.w	80041ca <menu+0x259e>
		if(dilSecim == 0) {
 8004046:	4b05      	ldr	r3, [pc, #20]	; (800405c <menu+0x2430>)
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d12c      	bne.n	80040a8 <menu+0x247c>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800404e:	4a15      	ldr	r2, [pc, #84]	; (80040a4 <menu+0x2478>)
 8004050:	2101      	movs	r1, #1
 8004052:	2001      	movs	r0, #1
 8004054:	f7fc fcae 	bl	80009b4 <lcd_print>
 8004058:	e02f      	b.n	80040ba <menu+0x248e>
 800405a:	bf00      	nop
 800405c:	20000cbe 	.word	0x20000cbe
 8004060:	0800e3c4 	.word	0x0800e3c4
 8004064:	40010800 	.word	0x40010800
 8004068:	20000ccc 	.word	0x20000ccc
 800406c:	20000cae 	.word	0x20000cae
 8004070:	20000b38 	.word	0x20000b38
 8004074:	20000cc9 	.word	0x20000cc9
 8004078:	20000c9d 	.word	0x20000c9d
 800407c:	20000cac 	.word	0x20000cac
 8004080:	0800e844 	.word	0x0800e844
 8004084:	0800e858 	.word	0x0800e858
 8004088:	0800e86c 	.word	0x0800e86c
 800408c:	0800e880 	.word	0x0800e880
 8004090:	20000caf 	.word	0x20000caf
 8004094:	0800e894 	.word	0x0800e894
 8004098:	0800e8a8 	.word	0x0800e8a8
 800409c:	0800e8b8 	.word	0x0800e8b8
 80040a0:	0800e8cc 	.word	0x0800e8cc
 80040a4:	0800e8dc 	.word	0x0800e8dc
		} else if(dilSecim == 1) {
 80040a8:	4b9c      	ldr	r3, [pc, #624]	; (800431c <menu+0x26f0>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d104      	bne.n	80040ba <menu+0x248e>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 80040b0:	4a9b      	ldr	r2, [pc, #620]	; (8004320 <menu+0x26f4>)
 80040b2:	2101      	movs	r1, #1
 80040b4:	2001      	movs	r0, #1
 80040b6:	f7fc fc7d 	bl	80009b4 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 80040ba:	4b9a      	ldr	r3, [pc, #616]	; (8004324 <menu+0x26f8>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d112      	bne.n	80040e8 <menu+0x24bc>
			if(dilSecim == 0) {
 80040c2:	4b96      	ldr	r3, [pc, #600]	; (800431c <menu+0x26f0>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d104      	bne.n	80040d4 <menu+0x24a8>
				lcd_print(2, 1, "Tek tesir       ");
 80040ca:	4a97      	ldr	r2, [pc, #604]	; (8004328 <menu+0x26fc>)
 80040cc:	2101      	movs	r1, #1
 80040ce:	2002      	movs	r0, #2
 80040d0:	f7fc fc70 	bl	80009b4 <lcd_print>
			}
			if(dilSecim == 1) {
 80040d4:	4b91      	ldr	r3, [pc, #580]	; (800431c <menu+0x26f0>)
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d11c      	bne.n	8004116 <menu+0x24ea>
				lcd_print(2, 1, "Single acting  ");
 80040dc:	4a93      	ldr	r2, [pc, #588]	; (800432c <menu+0x2700>)
 80040de:	2101      	movs	r1, #1
 80040e0:	2002      	movs	r0, #2
 80040e2:	f7fc fc67 	bl	80009b4 <lcd_print>
 80040e6:	e016      	b.n	8004116 <menu+0x24ea>
			}
		} else if(platformSilindirTipi == 1) {
 80040e8:	4b8e      	ldr	r3, [pc, #568]	; (8004324 <menu+0x26f8>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d112      	bne.n	8004116 <menu+0x24ea>
			if(dilSecim == 0) {
 80040f0:	4b8a      	ldr	r3, [pc, #552]	; (800431c <menu+0x26f0>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d105      	bne.n	8004104 <menu+0x24d8>
				lcd_print(2, 1, "Cift tesir      ");
 80040f8:	4a8d      	ldr	r2, [pc, #564]	; (8004330 <menu+0x2704>)
 80040fa:	2101      	movs	r1, #1
 80040fc:	2002      	movs	r0, #2
 80040fe:	f7fc fc59 	bl	80009b4 <lcd_print>
 8004102:	e008      	b.n	8004116 <menu+0x24ea>
			} else if(dilSecim == 1) {
 8004104:	4b85      	ldr	r3, [pc, #532]	; (800431c <menu+0x26f0>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d104      	bne.n	8004116 <menu+0x24ea>
				lcd_print(2, 1, "Double acting  ");
 800410c:	4a89      	ldr	r2, [pc, #548]	; (8004334 <menu+0x2708>)
 800410e:	2101      	movs	r1, #1
 8004110:	2002      	movs	r0, #2
 8004112:	f7fc fc4f 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004116:	2102      	movs	r1, #2
 8004118:	4887      	ldr	r0, [pc, #540]	; (8004338 <menu+0x270c>)
 800411a:	f006 f8bf 	bl	800a29c <HAL_GPIO_ReadPin>
 800411e:	4603      	mov	r3, r0
 8004120:	2b01      	cmp	r3, #1
 8004122:	d115      	bne.n	8004150 <menu+0x2524>
 8004124:	4b85      	ldr	r3, [pc, #532]	; (800433c <menu+0x2710>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	f083 0301 	eor.w	r3, r3, #1
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00e      	beq.n	8004150 <menu+0x2524>
			platformSilindirTipi = platformSilindirTipi + 1;
 8004132:	4b7c      	ldr	r3, [pc, #496]	; (8004324 <menu+0x26f8>)
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	3301      	adds	r3, #1
 8004138:	b2da      	uxtb	r2, r3
 800413a:	4b7a      	ldr	r3, [pc, #488]	; (8004324 <menu+0x26f8>)
 800413c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800413e:	4b79      	ldr	r3, [pc, #484]	; (8004324 <menu+0x26f8>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d902      	bls.n	800414c <menu+0x2520>
				platformSilindirTipi = 0;
 8004146:	4b77      	ldr	r3, [pc, #476]	; (8004324 <menu+0x26f8>)
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800414c:	f002 fb0c 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004150:	2104      	movs	r1, #4
 8004152:	4879      	ldr	r0, [pc, #484]	; (8004338 <menu+0x270c>)
 8004154:	f006 f8a2 	bl	800a29c <HAL_GPIO_ReadPin>
 8004158:	4603      	mov	r3, r0
 800415a:	2b01      	cmp	r3, #1
 800415c:	d115      	bne.n	800418a <menu+0x255e>
 800415e:	4b77      	ldr	r3, [pc, #476]	; (800433c <menu+0x2710>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	f083 0301 	eor.w	r3, r3, #1
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00e      	beq.n	800418a <menu+0x255e>
			platformSilindirTipi = platformSilindirTipi - 1;
 800416c:	4b6d      	ldr	r3, [pc, #436]	; (8004324 <menu+0x26f8>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	3b01      	subs	r3, #1
 8004172:	b2da      	uxtb	r2, r3
 8004174:	4b6b      	ldr	r3, [pc, #428]	; (8004324 <menu+0x26f8>)
 8004176:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8004178:	4b6a      	ldr	r3, [pc, #424]	; (8004324 <menu+0x26f8>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <menu+0x255a>
		   		platformSilindirTipi = 1;
 8004180:	4b68      	ldr	r3, [pc, #416]	; (8004324 <menu+0x26f8>)
 8004182:	2201      	movs	r2, #1
 8004184:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004186:	f002 faef 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800418a:	2108      	movs	r1, #8
 800418c:	486a      	ldr	r0, [pc, #424]	; (8004338 <menu+0x270c>)
 800418e:	f006 f885 	bl	800a29c <HAL_GPIO_ReadPin>
 8004192:	4603      	mov	r3, r0
 8004194:	2b01      	cmp	r3, #1
 8004196:	d118      	bne.n	80041ca <menu+0x259e>
 8004198:	4b68      	ldr	r3, [pc, #416]	; (800433c <menu+0x2710>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	f083 0301 	eor.w	r3, r3, #1
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d011      	beq.n	80041ca <menu+0x259e>
			eepromData[19] = platformSilindirTipi;
 80041a6:	4b5f      	ldr	r3, [pc, #380]	; (8004324 <menu+0x26f8>)
 80041a8:	781a      	ldrb	r2, [r3, #0]
 80041aa:	4b65      	ldr	r3, [pc, #404]	; (8004340 <menu+0x2714>)
 80041ac:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 80041ae:	4b5d      	ldr	r3, [pc, #372]	; (8004324 <menu+0x26f8>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d106      	bne.n	80041c4 <menu+0x2598>
				altLimit = 1;
 80041b6:	4b63      	ldr	r3, [pc, #396]	; (8004344 <menu+0x2718>)
 80041b8:	2201      	movs	r2, #1
 80041ba:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80041bc:	4b61      	ldr	r3, [pc, #388]	; (8004344 <menu+0x2718>)
 80041be:	781a      	ldrb	r2, [r3, #0]
 80041c0:	4b5f      	ldr	r3, [pc, #380]	; (8004340 <menu+0x2714>)
 80041c2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80041c4:	4b60      	ldr	r3, [pc, #384]	; (8004348 <menu+0x271c>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 80041ca:	4b60      	ldr	r3, [pc, #384]	; (800434c <menu+0x2720>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b16      	cmp	r3, #22
 80041d0:	f040 8081 	bne.w	80042d6 <menu+0x26aa>
		if(dilSecim == 0) {
 80041d4:	4b51      	ldr	r3, [pc, #324]	; (800431c <menu+0x26f0>)
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d105      	bne.n	80041e8 <menu+0x25bc>
			lcd_print(1, 1, "YUKARI VALF SURE");
 80041dc:	4a5c      	ldr	r2, [pc, #368]	; (8004350 <menu+0x2724>)
 80041de:	2101      	movs	r1, #1
 80041e0:	2001      	movs	r0, #1
 80041e2:	f7fc fbe7 	bl	80009b4 <lcd_print>
 80041e6:	e008      	b.n	80041fa <menu+0x25ce>
		} else if(dilSecim == 1) {
 80041e8:	4b4c      	ldr	r3, [pc, #304]	; (800431c <menu+0x26f0>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d104      	bne.n	80041fa <menu+0x25ce>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 80041f0:	4a58      	ldr	r2, [pc, #352]	; (8004354 <menu+0x2728>)
 80041f2:	2101      	movs	r1, #1
 80041f4:	2001      	movs	r0, #1
 80041f6:	f7fc fbdd 	bl	80009b4 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 80041fa:	4b48      	ldr	r3, [pc, #288]	; (800431c <menu+0x26f0>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d105      	bne.n	800420e <menu+0x25e2>
				lcd_print(2, 1, "Kac Saniye     ");
 8004202:	4a55      	ldr	r2, [pc, #340]	; (8004358 <menu+0x272c>)
 8004204:	2101      	movs	r1, #1
 8004206:	2002      	movs	r0, #2
 8004208:	f7fc fbd4 	bl	80009b4 <lcd_print>
 800420c:	e008      	b.n	8004220 <menu+0x25f4>
			} else if(dilSecim == 1){
 800420e:	4b43      	ldr	r3, [pc, #268]	; (800431c <menu+0x26f0>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d104      	bne.n	8004220 <menu+0x25f4>
				lcd_print(2, 1, "Second         ");
 8004216:	4a51      	ldr	r2, [pc, #324]	; (800435c <menu+0x2730>)
 8004218:	2101      	movs	r1, #1
 800421a:	2002      	movs	r0, #2
 800421c:	f7fc fbca 	bl	80009b4 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8004220:	4b4f      	ldr	r3, [pc, #316]	; (8004360 <menu+0x2734>)
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	220a      	movs	r2, #10
 8004226:	494f      	ldr	r1, [pc, #316]	; (8004364 <menu+0x2738>)
 8004228:	4618      	mov	r0, r3
 800422a:	f009 f8bf 	bl	800d3ac <itoa>
		lcd_print(2,16,snum);
 800422e:	4a4d      	ldr	r2, [pc, #308]	; (8004364 <menu+0x2738>)
 8004230:	2110      	movs	r1, #16
 8004232:	2002      	movs	r0, #2
 8004234:	f7fc fbbe 	bl	80009b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004238:	2102      	movs	r1, #2
 800423a:	483f      	ldr	r0, [pc, #252]	; (8004338 <menu+0x270c>)
 800423c:	f006 f82e 	bl	800a29c <HAL_GPIO_ReadPin>
 8004240:	4603      	mov	r3, r0
 8004242:	2b01      	cmp	r3, #1
 8004244:	d115      	bne.n	8004272 <menu+0x2646>
 8004246:	4b3d      	ldr	r3, [pc, #244]	; (800433c <menu+0x2710>)
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	f083 0301 	eor.w	r3, r3, #1
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00e      	beq.n	8004272 <menu+0x2646>
			yukariValfTmr = yukariValfTmr + 1;
 8004254:	4b42      	ldr	r3, [pc, #264]	; (8004360 <menu+0x2734>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	3301      	adds	r3, #1
 800425a:	b2da      	uxtb	r2, r3
 800425c:	4b40      	ldr	r3, [pc, #256]	; (8004360 <menu+0x2734>)
 800425e:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8004260:	4b3f      	ldr	r3, [pc, #252]	; (8004360 <menu+0x2734>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	2b05      	cmp	r3, #5
 8004266:	d902      	bls.n	800426e <menu+0x2642>
				yukariValfTmr = 0;
 8004268:	4b3d      	ldr	r3, [pc, #244]	; (8004360 <menu+0x2734>)
 800426a:	2200      	movs	r2, #0
 800426c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800426e:	f002 fa7b 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004272:	2104      	movs	r1, #4
 8004274:	4830      	ldr	r0, [pc, #192]	; (8004338 <menu+0x270c>)
 8004276:	f006 f811 	bl	800a29c <HAL_GPIO_ReadPin>
 800427a:	4603      	mov	r3, r0
 800427c:	2b01      	cmp	r3, #1
 800427e:	d115      	bne.n	80042ac <menu+0x2680>
 8004280:	4b2e      	ldr	r3, [pc, #184]	; (800433c <menu+0x2710>)
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	f083 0301 	eor.w	r3, r3, #1
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00e      	beq.n	80042ac <menu+0x2680>
			yukariValfTmr = yukariValfTmr - 1;
 800428e:	4b34      	ldr	r3, [pc, #208]	; (8004360 <menu+0x2734>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	3b01      	subs	r3, #1
 8004294:	b2da      	uxtb	r2, r3
 8004296:	4b32      	ldr	r3, [pc, #200]	; (8004360 <menu+0x2734>)
 8004298:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 800429a:	4b31      	ldr	r3, [pc, #196]	; (8004360 <menu+0x2734>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b06      	cmp	r3, #6
 80042a0:	d902      	bls.n	80042a8 <menu+0x267c>
		   		yukariValfTmr = 5;
 80042a2:	4b2f      	ldr	r3, [pc, #188]	; (8004360 <menu+0x2734>)
 80042a4:	2205      	movs	r2, #5
 80042a6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80042a8:	f002 fa5e 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80042ac:	2108      	movs	r1, #8
 80042ae:	4822      	ldr	r0, [pc, #136]	; (8004338 <menu+0x270c>)
 80042b0:	f005 fff4 	bl	800a29c <HAL_GPIO_ReadPin>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d10d      	bne.n	80042d6 <menu+0x26aa>
 80042ba:	4b20      	ldr	r3, [pc, #128]	; (800433c <menu+0x2710>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	f083 0301 	eor.w	r3, r3, #1
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d006      	beq.n	80042d6 <menu+0x26aa>
			eepromData[20] = yukariValfTmr;
 80042c8:	4b25      	ldr	r3, [pc, #148]	; (8004360 <menu+0x2734>)
 80042ca:	781a      	ldrb	r2, [r3, #0]
 80042cc:	4b1c      	ldr	r3, [pc, #112]	; (8004340 <menu+0x2714>)
 80042ce:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80042d0:	4b1d      	ldr	r3, [pc, #116]	; (8004348 <menu+0x271c>)
 80042d2:	2201      	movs	r2, #1
 80042d4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80042d6:	4b1d      	ldr	r3, [pc, #116]	; (800434c <menu+0x2720>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b17      	cmp	r3, #23
 80042dc:	f040 80ac 	bne.w	8004438 <menu+0x280c>
		if(dilSecim == 0) {
 80042e0:	4b0e      	ldr	r3, [pc, #56]	; (800431c <menu+0x26f0>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d105      	bne.n	80042f4 <menu+0x26c8>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 80042e8:	4a1f      	ldr	r2, [pc, #124]	; (8004368 <menu+0x273c>)
 80042ea:	2101      	movs	r1, #1
 80042ec:	2001      	movs	r0, #1
 80042ee:	f7fc fb61 	bl	80009b4 <lcd_print>
 80042f2:	e008      	b.n	8004306 <menu+0x26da>
		} else if(dilSecim == 1) {
 80042f4:	4b09      	ldr	r3, [pc, #36]	; (800431c <menu+0x26f0>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d104      	bne.n	8004306 <menu+0x26da>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 80042fc:	4a1b      	ldr	r2, [pc, #108]	; (800436c <menu+0x2740>)
 80042fe:	2101      	movs	r1, #1
 8004300:	2001      	movs	r0, #1
 8004302:	f7fc fb57 	bl	80009b4 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8004306:	4b05      	ldr	r3, [pc, #20]	; (800431c <menu+0x26f0>)
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d130      	bne.n	8004370 <menu+0x2744>
				lcd_print(2, 1, "Kac Saniye     ");
 800430e:	4a12      	ldr	r2, [pc, #72]	; (8004358 <menu+0x272c>)
 8004310:	2101      	movs	r1, #1
 8004312:	2002      	movs	r0, #2
 8004314:	f7fc fb4e 	bl	80009b4 <lcd_print>
 8004318:	e033      	b.n	8004382 <menu+0x2756>
 800431a:	bf00      	nop
 800431c:	20000cbe 	.word	0x20000cbe
 8004320:	0800e8f0 	.word	0x0800e8f0
 8004324:	20000cb0 	.word	0x20000cb0
 8004328:	0800e894 	.word	0x0800e894
 800432c:	0800e8a8 	.word	0x0800e8a8
 8004330:	0800e8b8 	.word	0x0800e8b8
 8004334:	0800e8cc 	.word	0x0800e8cc
 8004338:	40010800 	.word	0x40010800
 800433c:	20000ccc 	.word	0x20000ccc
 8004340:	20000b38 	.word	0x20000b38
 8004344:	20000ca3 	.word	0x20000ca3
 8004348:	20000cc9 	.word	0x20000cc9
 800434c:	20000c9d 	.word	0x20000c9d
 8004350:	0800e900 	.word	0x0800e900
 8004354:	0800e914 	.word	0x0800e914
 8004358:	0800e5b4 	.word	0x0800e5b4
 800435c:	0800e928 	.word	0x0800e928
 8004360:	20000cb1 	.word	0x20000cb1
 8004364:	20000bcc 	.word	0x20000bcc
 8004368:	0800e938 	.word	0x0800e938
 800436c:	0800e94c 	.word	0x0800e94c
			} else if(dilSecim == 1) {
 8004370:	4b98      	ldr	r3, [pc, #608]	; (80045d4 <menu+0x29a8>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b01      	cmp	r3, #1
 8004376:	d104      	bne.n	8004382 <menu+0x2756>
				lcd_print(2, 1, "Second         ");
 8004378:	4a97      	ldr	r2, [pc, #604]	; (80045d8 <menu+0x29ac>)
 800437a:	2101      	movs	r1, #1
 800437c:	2002      	movs	r0, #2
 800437e:	f7fc fb19 	bl	80009b4 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8004382:	4b96      	ldr	r3, [pc, #600]	; (80045dc <menu+0x29b0>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	220a      	movs	r2, #10
 8004388:	4995      	ldr	r1, [pc, #596]	; (80045e0 <menu+0x29b4>)
 800438a:	4618      	mov	r0, r3
 800438c:	f009 f80e 	bl	800d3ac <itoa>
		lcd_print(2,16,snum);
 8004390:	4a93      	ldr	r2, [pc, #588]	; (80045e0 <menu+0x29b4>)
 8004392:	2110      	movs	r1, #16
 8004394:	2002      	movs	r0, #2
 8004396:	f7fc fb0d 	bl	80009b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800439a:	2102      	movs	r1, #2
 800439c:	4891      	ldr	r0, [pc, #580]	; (80045e4 <menu+0x29b8>)
 800439e:	f005 ff7d 	bl	800a29c <HAL_GPIO_ReadPin>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d115      	bne.n	80043d4 <menu+0x27a8>
 80043a8:	4b8f      	ldr	r3, [pc, #572]	; (80045e8 <menu+0x29bc>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	f083 0301 	eor.w	r3, r3, #1
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00e      	beq.n	80043d4 <menu+0x27a8>
			asagiValfTmr = asagiValfTmr + 1;
 80043b6:	4b89      	ldr	r3, [pc, #548]	; (80045dc <menu+0x29b0>)
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	3301      	adds	r3, #1
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	4b87      	ldr	r3, [pc, #540]	; (80045dc <menu+0x29b0>)
 80043c0:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 80043c2:	4b86      	ldr	r3, [pc, #536]	; (80045dc <menu+0x29b0>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b05      	cmp	r3, #5
 80043c8:	d902      	bls.n	80043d0 <menu+0x27a4>
				asagiValfTmr = 0;
 80043ca:	4b84      	ldr	r3, [pc, #528]	; (80045dc <menu+0x29b0>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80043d0:	f002 f9ca 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80043d4:	2104      	movs	r1, #4
 80043d6:	4883      	ldr	r0, [pc, #524]	; (80045e4 <menu+0x29b8>)
 80043d8:	f005 ff60 	bl	800a29c <HAL_GPIO_ReadPin>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d115      	bne.n	800440e <menu+0x27e2>
 80043e2:	4b81      	ldr	r3, [pc, #516]	; (80045e8 <menu+0x29bc>)
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	f083 0301 	eor.w	r3, r3, #1
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00e      	beq.n	800440e <menu+0x27e2>
			asagiValfTmr = asagiValfTmr - 1;
 80043f0:	4b7a      	ldr	r3, [pc, #488]	; (80045dc <menu+0x29b0>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	3b01      	subs	r3, #1
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	4b78      	ldr	r3, [pc, #480]	; (80045dc <menu+0x29b0>)
 80043fa:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 80043fc:	4b77      	ldr	r3, [pc, #476]	; (80045dc <menu+0x29b0>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b06      	cmp	r3, #6
 8004402:	d902      	bls.n	800440a <menu+0x27de>
		   		asagiValfTmr = 5;
 8004404:	4b75      	ldr	r3, [pc, #468]	; (80045dc <menu+0x29b0>)
 8004406:	2205      	movs	r2, #5
 8004408:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800440a:	f002 f9ad 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800440e:	2108      	movs	r1, #8
 8004410:	4874      	ldr	r0, [pc, #464]	; (80045e4 <menu+0x29b8>)
 8004412:	f005 ff43 	bl	800a29c <HAL_GPIO_ReadPin>
 8004416:	4603      	mov	r3, r0
 8004418:	2b01      	cmp	r3, #1
 800441a:	d10d      	bne.n	8004438 <menu+0x280c>
 800441c:	4b72      	ldr	r3, [pc, #456]	; (80045e8 <menu+0x29bc>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	f083 0301 	eor.w	r3, r3, #1
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d006      	beq.n	8004438 <menu+0x280c>
			eepromData[21] = asagiValfTmr;
 800442a:	4b6c      	ldr	r3, [pc, #432]	; (80045dc <menu+0x29b0>)
 800442c:	781a      	ldrb	r2, [r3, #0]
 800442e:	4b6f      	ldr	r3, [pc, #444]	; (80045ec <menu+0x29c0>)
 8004430:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8004432:	4b6f      	ldr	r3, [pc, #444]	; (80045f0 <menu+0x29c4>)
 8004434:	2201      	movs	r2, #1
 8004436:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8004438:	4b6e      	ldr	r3, [pc, #440]	; (80045f4 <menu+0x29c8>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b18      	cmp	r3, #24
 800443e:	f040 809d 	bne.w	800457c <menu+0x2950>
		if(devirmeYuruyusSecim == 2) {
 8004442:	4b6d      	ldr	r3, [pc, #436]	; (80045f8 <menu+0x29cc>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b02      	cmp	r3, #2
 8004448:	d113      	bne.n	8004472 <menu+0x2846>
			if(dilSecim == 0) {
 800444a:	4b62      	ldr	r3, [pc, #392]	; (80045d4 <menu+0x29a8>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d105      	bne.n	800445e <menu+0x2832>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8004452:	4a6a      	ldr	r2, [pc, #424]	; (80045fc <menu+0x29d0>)
 8004454:	2101      	movs	r1, #1
 8004456:	2001      	movs	r0, #1
 8004458:	f7fc faac 	bl	80009b4 <lcd_print>
 800445c:	e020      	b.n	80044a0 <menu+0x2874>
			} else if(dilSecim == 1) {
 800445e:	4b5d      	ldr	r3, [pc, #372]	; (80045d4 <menu+0x29a8>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d11c      	bne.n	80044a0 <menu+0x2874>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8004466:	4a66      	ldr	r2, [pc, #408]	; (8004600 <menu+0x29d4>)
 8004468:	2101      	movs	r1, #1
 800446a:	2001      	movs	r0, #1
 800446c:	f7fc faa2 	bl	80009b4 <lcd_print>
 8004470:	e016      	b.n	80044a0 <menu+0x2874>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8004472:	4b61      	ldr	r3, [pc, #388]	; (80045f8 <menu+0x29cc>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d112      	bne.n	80044a0 <menu+0x2874>
			if(dilSecim == 0) {
 800447a:	4b56      	ldr	r3, [pc, #344]	; (80045d4 <menu+0x29a8>)
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d105      	bne.n	800448e <menu+0x2862>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8004482:	4a60      	ldr	r2, [pc, #384]	; (8004604 <menu+0x29d8>)
 8004484:	2101      	movs	r1, #1
 8004486:	2001      	movs	r0, #1
 8004488:	f7fc fa94 	bl	80009b4 <lcd_print>
 800448c:	e008      	b.n	80044a0 <menu+0x2874>
			} else if(dilSecim == 1) {
 800448e:	4b51      	ldr	r3, [pc, #324]	; (80045d4 <menu+0x29a8>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d104      	bne.n	80044a0 <menu+0x2874>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8004496:	4a5c      	ldr	r2, [pc, #368]	; (8004608 <menu+0x29dc>)
 8004498:	2101      	movs	r1, #1
 800449a:	2001      	movs	r0, #1
 800449c:	f7fc fa8a 	bl	80009b4 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 80044a0:	4b4c      	ldr	r3, [pc, #304]	; (80045d4 <menu+0x29a8>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d105      	bne.n	80044b4 <menu+0x2888>
				lcd_print(2, 1, "Kac Saniye     ");
 80044a8:	4a58      	ldr	r2, [pc, #352]	; (800460c <menu+0x29e0>)
 80044aa:	2101      	movs	r1, #1
 80044ac:	2002      	movs	r0, #2
 80044ae:	f7fc fa81 	bl	80009b4 <lcd_print>
 80044b2:	e008      	b.n	80044c6 <menu+0x289a>
			} else if(dilSecim == 1) {
 80044b4:	4b47      	ldr	r3, [pc, #284]	; (80045d4 <menu+0x29a8>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d104      	bne.n	80044c6 <menu+0x289a>
				lcd_print(2, 1, "Second         ");
 80044bc:	4a46      	ldr	r2, [pc, #280]	; (80045d8 <menu+0x29ac>)
 80044be:	2101      	movs	r1, #1
 80044c0:	2002      	movs	r0, #2
 80044c2:	f7fc fa77 	bl	80009b4 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 80044c6:	4b52      	ldr	r3, [pc, #328]	; (8004610 <menu+0x29e4>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	220a      	movs	r2, #10
 80044cc:	4944      	ldr	r1, [pc, #272]	; (80045e0 <menu+0x29b4>)
 80044ce:	4618      	mov	r0, r3
 80044d0:	f008 ff6c 	bl	800d3ac <itoa>
		lcd_print(2, 16, snum);
 80044d4:	4a42      	ldr	r2, [pc, #264]	; (80045e0 <menu+0x29b4>)
 80044d6:	2110      	movs	r1, #16
 80044d8:	2002      	movs	r0, #2
 80044da:	f7fc fa6b 	bl	80009b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80044de:	2102      	movs	r1, #2
 80044e0:	4840      	ldr	r0, [pc, #256]	; (80045e4 <menu+0x29b8>)
 80044e2:	f005 fedb 	bl	800a29c <HAL_GPIO_ReadPin>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d115      	bne.n	8004518 <menu+0x28ec>
 80044ec:	4b3e      	ldr	r3, [pc, #248]	; (80045e8 <menu+0x29bc>)
 80044ee:	781b      	ldrb	r3, [r3, #0]
 80044f0:	f083 0301 	eor.w	r3, r3, #1
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00e      	beq.n	8004518 <menu+0x28ec>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 80044fa:	4b45      	ldr	r3, [pc, #276]	; (8004610 <menu+0x29e4>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	3301      	adds	r3, #1
 8004500:	b2da      	uxtb	r2, r3
 8004502:	4b43      	ldr	r3, [pc, #268]	; (8004610 <menu+0x29e4>)
 8004504:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8004506:	4b42      	ldr	r3, [pc, #264]	; (8004610 <menu+0x29e4>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b05      	cmp	r3, #5
 800450c:	d902      	bls.n	8004514 <menu+0x28e8>
				devirmeYukariIleriTmr = 0;
 800450e:	4b40      	ldr	r3, [pc, #256]	; (8004610 <menu+0x29e4>)
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004514:	f002 f928 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004518:	2104      	movs	r1, #4
 800451a:	4832      	ldr	r0, [pc, #200]	; (80045e4 <menu+0x29b8>)
 800451c:	f005 febe 	bl	800a29c <HAL_GPIO_ReadPin>
 8004520:	4603      	mov	r3, r0
 8004522:	2b01      	cmp	r3, #1
 8004524:	d115      	bne.n	8004552 <menu+0x2926>
 8004526:	4b30      	ldr	r3, [pc, #192]	; (80045e8 <menu+0x29bc>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	f083 0301 	eor.w	r3, r3, #1
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00e      	beq.n	8004552 <menu+0x2926>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8004534:	4b36      	ldr	r3, [pc, #216]	; (8004610 <menu+0x29e4>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	3b01      	subs	r3, #1
 800453a:	b2da      	uxtb	r2, r3
 800453c:	4b34      	ldr	r3, [pc, #208]	; (8004610 <menu+0x29e4>)
 800453e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8004540:	4b33      	ldr	r3, [pc, #204]	; (8004610 <menu+0x29e4>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b06      	cmp	r3, #6
 8004546:	d902      	bls.n	800454e <menu+0x2922>
		   		devirmeYukariIleriTmr = 5;
 8004548:	4b31      	ldr	r3, [pc, #196]	; (8004610 <menu+0x29e4>)
 800454a:	2205      	movs	r2, #5
 800454c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800454e:	f002 f90b 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004552:	2108      	movs	r1, #8
 8004554:	4823      	ldr	r0, [pc, #140]	; (80045e4 <menu+0x29b8>)
 8004556:	f005 fea1 	bl	800a29c <HAL_GPIO_ReadPin>
 800455a:	4603      	mov	r3, r0
 800455c:	2b01      	cmp	r3, #1
 800455e:	d10d      	bne.n	800457c <menu+0x2950>
 8004560:	4b21      	ldr	r3, [pc, #132]	; (80045e8 <menu+0x29bc>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	f083 0301 	eor.w	r3, r3, #1
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d006      	beq.n	800457c <menu+0x2950>
			eepromData[22] = devirmeYukariIleriTmr;
 800456e:	4b28      	ldr	r3, [pc, #160]	; (8004610 <menu+0x29e4>)
 8004570:	781a      	ldrb	r2, [r3, #0]
 8004572:	4b1e      	ldr	r3, [pc, #120]	; (80045ec <menu+0x29c0>)
 8004574:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8004576:	4b1e      	ldr	r3, [pc, #120]	; (80045f0 <menu+0x29c4>)
 8004578:	2201      	movs	r2, #1
 800457a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 800457c:	4b1d      	ldr	r3, [pc, #116]	; (80045f4 <menu+0x29c8>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b19      	cmp	r3, #25
 8004582:	f040 80c4 	bne.w	800470e <menu+0x2ae2>
		if(devirmeYuruyusSecim == 2) {
 8004586:	4b1c      	ldr	r3, [pc, #112]	; (80045f8 <menu+0x29cc>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d113      	bne.n	80045b6 <menu+0x298a>
			if(dilSecim == 0) {
 800458e:	4b11      	ldr	r3, [pc, #68]	; (80045d4 <menu+0x29a8>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d105      	bne.n	80045a2 <menu+0x2976>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8004596:	4a1f      	ldr	r2, [pc, #124]	; (8004614 <menu+0x29e8>)
 8004598:	2101      	movs	r1, #1
 800459a:	2001      	movs	r0, #1
 800459c:	f7fc fa0a 	bl	80009b4 <lcd_print>
 80045a0:	e047      	b.n	8004632 <menu+0x2a06>
			} else if(dilSecim == 1) {
 80045a2:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <menu+0x29a8>)
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d143      	bne.n	8004632 <menu+0x2a06>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 80045aa:	4a1b      	ldr	r2, [pc, #108]	; (8004618 <menu+0x29ec>)
 80045ac:	2101      	movs	r1, #1
 80045ae:	2001      	movs	r0, #1
 80045b0:	f7fc fa00 	bl	80009b4 <lcd_print>
 80045b4:	e03d      	b.n	8004632 <menu+0x2a06>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80045b6:	4b10      	ldr	r3, [pc, #64]	; (80045f8 <menu+0x29cc>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d139      	bne.n	8004632 <menu+0x2a06>
			if(dilSecim == 0) {
 80045be:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <menu+0x29a8>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d12c      	bne.n	8004620 <menu+0x29f4>
				lcd_print(1, 1, "GERi VALF SURE  ");
 80045c6:	4a15      	ldr	r2, [pc, #84]	; (800461c <menu+0x29f0>)
 80045c8:	2101      	movs	r1, #1
 80045ca:	2001      	movs	r0, #1
 80045cc:	f7fc f9f2 	bl	80009b4 <lcd_print>
 80045d0:	e02f      	b.n	8004632 <menu+0x2a06>
 80045d2:	bf00      	nop
 80045d4:	20000cbe 	.word	0x20000cbe
 80045d8:	0800e928 	.word	0x0800e928
 80045dc:	20000cb2 	.word	0x20000cb2
 80045e0:	20000bcc 	.word	0x20000bcc
 80045e4:	40010800 	.word	0x40010800
 80045e8:	20000ccc 	.word	0x20000ccc
 80045ec:	20000b38 	.word	0x20000b38
 80045f0:	20000cc9 	.word	0x20000cc9
 80045f4:	20000c9d 	.word	0x20000c9d
 80045f8:	20000cac 	.word	0x20000cac
 80045fc:	0800e960 	.word	0x0800e960
 8004600:	0800e974 	.word	0x0800e974
 8004604:	0800e988 	.word	0x0800e988
 8004608:	0800e99c 	.word	0x0800e99c
 800460c:	0800e5b4 	.word	0x0800e5b4
 8004610:	20000cb3 	.word	0x20000cb3
 8004614:	0800e9b0 	.word	0x0800e9b0
 8004618:	0800e9c4 	.word	0x0800e9c4
 800461c:	0800e9d8 	.word	0x0800e9d8
			} else if(dilSecim == 1) {
 8004620:	4b73      	ldr	r3, [pc, #460]	; (80047f0 <menu+0x2bc4>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d104      	bne.n	8004632 <menu+0x2a06>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8004628:	4a72      	ldr	r2, [pc, #456]	; (80047f4 <menu+0x2bc8>)
 800462a:	2101      	movs	r1, #1
 800462c:	2001      	movs	r0, #1
 800462e:	f7fc f9c1 	bl	80009b4 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8004632:	4b6f      	ldr	r3, [pc, #444]	; (80047f0 <menu+0x2bc4>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d105      	bne.n	8004646 <menu+0x2a1a>
				lcd_print(2, 1, "Kac Saniye     ");
 800463a:	4a6f      	ldr	r2, [pc, #444]	; (80047f8 <menu+0x2bcc>)
 800463c:	2101      	movs	r1, #1
 800463e:	2002      	movs	r0, #2
 8004640:	f7fc f9b8 	bl	80009b4 <lcd_print>
 8004644:	e008      	b.n	8004658 <menu+0x2a2c>
			} else if(dilSecim == 1) {
 8004646:	4b6a      	ldr	r3, [pc, #424]	; (80047f0 <menu+0x2bc4>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d104      	bne.n	8004658 <menu+0x2a2c>
				lcd_print(2, 1, "Second         ");
 800464e:	4a6b      	ldr	r2, [pc, #428]	; (80047fc <menu+0x2bd0>)
 8004650:	2101      	movs	r1, #1
 8004652:	2002      	movs	r0, #2
 8004654:	f7fc f9ae 	bl	80009b4 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8004658:	4b69      	ldr	r3, [pc, #420]	; (8004800 <menu+0x2bd4>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	220a      	movs	r2, #10
 800465e:	4969      	ldr	r1, [pc, #420]	; (8004804 <menu+0x2bd8>)
 8004660:	4618      	mov	r0, r3
 8004662:	f008 fea3 	bl	800d3ac <itoa>
		lcd_print(2,16,snum);
 8004666:	4a67      	ldr	r2, [pc, #412]	; (8004804 <menu+0x2bd8>)
 8004668:	2110      	movs	r1, #16
 800466a:	2002      	movs	r0, #2
 800466c:	f7fc f9a2 	bl	80009b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004670:	2102      	movs	r1, #2
 8004672:	4865      	ldr	r0, [pc, #404]	; (8004808 <menu+0x2bdc>)
 8004674:	f005 fe12 	bl	800a29c <HAL_GPIO_ReadPin>
 8004678:	4603      	mov	r3, r0
 800467a:	2b01      	cmp	r3, #1
 800467c:	d115      	bne.n	80046aa <menu+0x2a7e>
 800467e:	4b63      	ldr	r3, [pc, #396]	; (800480c <menu+0x2be0>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	f083 0301 	eor.w	r3, r3, #1
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00e      	beq.n	80046aa <menu+0x2a7e>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 800468c:	4b5c      	ldr	r3, [pc, #368]	; (8004800 <menu+0x2bd4>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	3301      	adds	r3, #1
 8004692:	b2da      	uxtb	r2, r3
 8004694:	4b5a      	ldr	r3, [pc, #360]	; (8004800 <menu+0x2bd4>)
 8004696:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8004698:	4b59      	ldr	r3, [pc, #356]	; (8004800 <menu+0x2bd4>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b05      	cmp	r3, #5
 800469e:	d902      	bls.n	80046a6 <menu+0x2a7a>
				devirmeAsagiGeriTmr = 0;
 80046a0:	4b57      	ldr	r3, [pc, #348]	; (8004800 <menu+0x2bd4>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80046a6:	f002 f85f 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046aa:	2104      	movs	r1, #4
 80046ac:	4856      	ldr	r0, [pc, #344]	; (8004808 <menu+0x2bdc>)
 80046ae:	f005 fdf5 	bl	800a29c <HAL_GPIO_ReadPin>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d115      	bne.n	80046e4 <menu+0x2ab8>
 80046b8:	4b54      	ldr	r3, [pc, #336]	; (800480c <menu+0x2be0>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	f083 0301 	eor.w	r3, r3, #1
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00e      	beq.n	80046e4 <menu+0x2ab8>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 80046c6:	4b4e      	ldr	r3, [pc, #312]	; (8004800 <menu+0x2bd4>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b2da      	uxtb	r2, r3
 80046ce:	4b4c      	ldr	r3, [pc, #304]	; (8004800 <menu+0x2bd4>)
 80046d0:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 80046d2:	4b4b      	ldr	r3, [pc, #300]	; (8004800 <menu+0x2bd4>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b06      	cmp	r3, #6
 80046d8:	d902      	bls.n	80046e0 <menu+0x2ab4>
		   		devirmeAsagiGeriTmr = 5;
 80046da:	4b49      	ldr	r3, [pc, #292]	; (8004800 <menu+0x2bd4>)
 80046dc:	2205      	movs	r2, #5
 80046de:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80046e0:	f002 f842 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80046e4:	2108      	movs	r1, #8
 80046e6:	4848      	ldr	r0, [pc, #288]	; (8004808 <menu+0x2bdc>)
 80046e8:	f005 fdd8 	bl	800a29c <HAL_GPIO_ReadPin>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d10d      	bne.n	800470e <menu+0x2ae2>
 80046f2:	4b46      	ldr	r3, [pc, #280]	; (800480c <menu+0x2be0>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	f083 0301 	eor.w	r3, r3, #1
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d006      	beq.n	800470e <menu+0x2ae2>
			eepromData[23] = devirmeAsagiGeriTmr;
 8004700:	4b3f      	ldr	r3, [pc, #252]	; (8004800 <menu+0x2bd4>)
 8004702:	781a      	ldrb	r2, [r3, #0]
 8004704:	4b42      	ldr	r3, [pc, #264]	; (8004810 <menu+0x2be4>)
 8004706:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8004708:	4b42      	ldr	r3, [pc, #264]	; (8004814 <menu+0x2be8>)
 800470a:	2201      	movs	r2, #1
 800470c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 800470e:	4b42      	ldr	r3, [pc, #264]	; (8004818 <menu+0x2bec>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b1a      	cmp	r3, #26
 8004714:	f040 80ec 	bne.w	80048f0 <menu+0x2cc4>
		if(dilSecim == 0) {
 8004718:	4b35      	ldr	r3, [pc, #212]	; (80047f0 <menu+0x2bc4>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d105      	bne.n	800472c <menu+0x2b00>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8004720:	4a3e      	ldr	r2, [pc, #248]	; (800481c <menu+0x2bf0>)
 8004722:	2101      	movs	r1, #1
 8004724:	2001      	movs	r0, #1
 8004726:	f7fc f945 	bl	80009b4 <lcd_print>
 800472a:	e008      	b.n	800473e <menu+0x2b12>
		} else if(dilSecim == 1) {
 800472c:	4b30      	ldr	r3, [pc, #192]	; (80047f0 <menu+0x2bc4>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d104      	bne.n	800473e <menu+0x2b12>
			lcd_print(1, 1, "WORKING TIME    ");
 8004734:	4a3a      	ldr	r2, [pc, #232]	; (8004820 <menu+0x2bf4>)
 8004736:	2101      	movs	r1, #1
 8004738:	2001      	movs	r0, #1
 800473a:	f7fc f93b 	bl	80009b4 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 800473e:	4b39      	ldr	r3, [pc, #228]	; (8004824 <menu+0x2bf8>)
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	2b63      	cmp	r3, #99	; 0x63
 8004744:	d91e      	bls.n	8004784 <menu+0x2b58>
			if(dilSecim == 0) {
 8004746:	4b2a      	ldr	r3, [pc, #168]	; (80047f0 <menu+0x2bc4>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d104      	bne.n	8004758 <menu+0x2b2c>
				lcd_print(2, 1, "Kac Saniye     ");
 800474e:	4a2a      	ldr	r2, [pc, #168]	; (80047f8 <menu+0x2bcc>)
 8004750:	2101      	movs	r1, #1
 8004752:	2002      	movs	r0, #2
 8004754:	f7fc f92e 	bl	80009b4 <lcd_print>
			}
			if(dilSecim == 1) {
 8004758:	4b25      	ldr	r3, [pc, #148]	; (80047f0 <menu+0x2bc4>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d104      	bne.n	800476a <menu+0x2b3e>
				lcd_print(2, 1, "Second         ");
 8004760:	4a26      	ldr	r2, [pc, #152]	; (80047fc <menu+0x2bd0>)
 8004762:	2101      	movs	r1, #1
 8004764:	2002      	movs	r0, #2
 8004766:	f7fc f925 	bl	80009b4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800476a:	4b2e      	ldr	r3, [pc, #184]	; (8004824 <menu+0x2bf8>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	220a      	movs	r2, #10
 8004770:	4924      	ldr	r1, [pc, #144]	; (8004804 <menu+0x2bd8>)
 8004772:	4618      	mov	r0, r3
 8004774:	f008 fe1a 	bl	800d3ac <itoa>
			lcd_print(2,14,snum);
 8004778:	4a22      	ldr	r2, [pc, #136]	; (8004804 <menu+0x2bd8>)
 800477a:	210e      	movs	r1, #14
 800477c:	2002      	movs	r0, #2
 800477e:	f7fc f919 	bl	80009b4 <lcd_print>
 8004782:	e066      	b.n	8004852 <menu+0x2c26>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8004784:	4b27      	ldr	r3, [pc, #156]	; (8004824 <menu+0x2bf8>)
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	2b09      	cmp	r3, #9
 800478a:	d923      	bls.n	80047d4 <menu+0x2ba8>
 800478c:	4b25      	ldr	r3, [pc, #148]	; (8004824 <menu+0x2bf8>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b63      	cmp	r3, #99	; 0x63
 8004792:	d81f      	bhi.n	80047d4 <menu+0x2ba8>
			if(dilSecim == 0) {
 8004794:	4b16      	ldr	r3, [pc, #88]	; (80047f0 <menu+0x2bc4>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d105      	bne.n	80047a8 <menu+0x2b7c>
				lcd_print(2, 1, "Kac Saniye     ");
 800479c:	4a16      	ldr	r2, [pc, #88]	; (80047f8 <menu+0x2bcc>)
 800479e:	2101      	movs	r1, #1
 80047a0:	2002      	movs	r0, #2
 80047a2:	f7fc f907 	bl	80009b4 <lcd_print>
 80047a6:	e008      	b.n	80047ba <menu+0x2b8e>
			} else if(dilSecim == 1) {
 80047a8:	4b11      	ldr	r3, [pc, #68]	; (80047f0 <menu+0x2bc4>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d104      	bne.n	80047ba <menu+0x2b8e>
				lcd_print(2, 1, "Second         ");
 80047b0:	4a12      	ldr	r2, [pc, #72]	; (80047fc <menu+0x2bd0>)
 80047b2:	2101      	movs	r1, #1
 80047b4:	2002      	movs	r0, #2
 80047b6:	f7fc f8fd 	bl	80009b4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80047ba:	4b1a      	ldr	r3, [pc, #104]	; (8004824 <menu+0x2bf8>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	220a      	movs	r2, #10
 80047c0:	4910      	ldr	r1, [pc, #64]	; (8004804 <menu+0x2bd8>)
 80047c2:	4618      	mov	r0, r3
 80047c4:	f008 fdf2 	bl	800d3ac <itoa>
			lcd_print(2, 15, snum);
 80047c8:	4a0e      	ldr	r2, [pc, #56]	; (8004804 <menu+0x2bd8>)
 80047ca:	210f      	movs	r1, #15
 80047cc:	2002      	movs	r0, #2
 80047ce:	f7fc f8f1 	bl	80009b4 <lcd_print>
 80047d2:	e03e      	b.n	8004852 <menu+0x2c26>
		} else if(makineCalismaTmr <=  9) {
 80047d4:	4b13      	ldr	r3, [pc, #76]	; (8004824 <menu+0x2bf8>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b09      	cmp	r3, #9
 80047da:	d83a      	bhi.n	8004852 <menu+0x2c26>
			if(dilSecim == 0) {
 80047dc:	4b04      	ldr	r3, [pc, #16]	; (80047f0 <menu+0x2bc4>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d121      	bne.n	8004828 <menu+0x2bfc>
				lcd_print(2, 1, "Kac Saniye     ");
 80047e4:	4a04      	ldr	r2, [pc, #16]	; (80047f8 <menu+0x2bcc>)
 80047e6:	2101      	movs	r1, #1
 80047e8:	2002      	movs	r0, #2
 80047ea:	f7fc f8e3 	bl	80009b4 <lcd_print>
 80047ee:	e024      	b.n	800483a <menu+0x2c0e>
 80047f0:	20000cbe 	.word	0x20000cbe
 80047f4:	0800e9ec 	.word	0x0800e9ec
 80047f8:	0800e5b4 	.word	0x0800e5b4
 80047fc:	0800e928 	.word	0x0800e928
 8004800:	20000cb4 	.word	0x20000cb4
 8004804:	20000bcc 	.word	0x20000bcc
 8004808:	40010800 	.word	0x40010800
 800480c:	20000ccc 	.word	0x20000ccc
 8004810:	20000b38 	.word	0x20000b38
 8004814:	20000cc9 	.word	0x20000cc9
 8004818:	20000c9d 	.word	0x20000c9d
 800481c:	0800ea00 	.word	0x0800ea00
 8004820:	0800ea14 	.word	0x0800ea14
 8004824:	20000cb5 	.word	0x20000cb5
			} else if(dilSecim == 1) {
 8004828:	4b8f      	ldr	r3, [pc, #572]	; (8004a68 <menu+0x2e3c>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d104      	bne.n	800483a <menu+0x2c0e>
				lcd_print(2, 1, "Second         ");
 8004830:	4a8e      	ldr	r2, [pc, #568]	; (8004a6c <menu+0x2e40>)
 8004832:	2101      	movs	r1, #1
 8004834:	2002      	movs	r0, #2
 8004836:	f7fc f8bd 	bl	80009b4 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800483a:	4b8d      	ldr	r3, [pc, #564]	; (8004a70 <menu+0x2e44>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	220a      	movs	r2, #10
 8004840:	498c      	ldr	r1, [pc, #560]	; (8004a74 <menu+0x2e48>)
 8004842:	4618      	mov	r0, r3
 8004844:	f008 fdb2 	bl	800d3ac <itoa>
			lcd_print(2, 16, snum);
 8004848:	4a8a      	ldr	r2, [pc, #552]	; (8004a74 <menu+0x2e48>)
 800484a:	2110      	movs	r1, #16
 800484c:	2002      	movs	r0, #2
 800484e:	f7fc f8b1 	bl	80009b4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004852:	2102      	movs	r1, #2
 8004854:	4888      	ldr	r0, [pc, #544]	; (8004a78 <menu+0x2e4c>)
 8004856:	f005 fd21 	bl	800a29c <HAL_GPIO_ReadPin>
 800485a:	4603      	mov	r3, r0
 800485c:	2b01      	cmp	r3, #1
 800485e:	d115      	bne.n	800488c <menu+0x2c60>
 8004860:	4b86      	ldr	r3, [pc, #536]	; (8004a7c <menu+0x2e50>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	f083 0301 	eor.w	r3, r3, #1
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00e      	beq.n	800488c <menu+0x2c60>
			makineCalismaTmr = makineCalismaTmr + 1;
 800486e:	4b80      	ldr	r3, [pc, #512]	; (8004a70 <menu+0x2e44>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	3301      	adds	r3, #1
 8004874:	b2da      	uxtb	r2, r3
 8004876:	4b7e      	ldr	r3, [pc, #504]	; (8004a70 <menu+0x2e44>)
 8004878:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800487a:	4b7d      	ldr	r3, [pc, #500]	; (8004a70 <menu+0x2e44>)
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2bb4      	cmp	r3, #180	; 0xb4
 8004880:	d902      	bls.n	8004888 <menu+0x2c5c>
				makineCalismaTmr = 0;
 8004882:	4b7b      	ldr	r3, [pc, #492]	; (8004a70 <menu+0x2e44>)
 8004884:	2200      	movs	r2, #0
 8004886:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004888:	f001 ff6e 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800488c:	2104      	movs	r1, #4
 800488e:	487a      	ldr	r0, [pc, #488]	; (8004a78 <menu+0x2e4c>)
 8004890:	f005 fd04 	bl	800a29c <HAL_GPIO_ReadPin>
 8004894:	4603      	mov	r3, r0
 8004896:	2b01      	cmp	r3, #1
 8004898:	d115      	bne.n	80048c6 <menu+0x2c9a>
 800489a:	4b78      	ldr	r3, [pc, #480]	; (8004a7c <menu+0x2e50>)
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	f083 0301 	eor.w	r3, r3, #1
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00e      	beq.n	80048c6 <menu+0x2c9a>
			makineCalismaTmr = makineCalismaTmr - 1;
 80048a8:	4b71      	ldr	r3, [pc, #452]	; (8004a70 <menu+0x2e44>)
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	3b01      	subs	r3, #1
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	4b6f      	ldr	r3, [pc, #444]	; (8004a70 <menu+0x2e44>)
 80048b2:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80048b4:	4b6e      	ldr	r3, [pc, #440]	; (8004a70 <menu+0x2e44>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2bb5      	cmp	r3, #181	; 0xb5
 80048ba:	d902      	bls.n	80048c2 <menu+0x2c96>
		   		makineCalismaTmr = 180;
 80048bc:	4b6c      	ldr	r3, [pc, #432]	; (8004a70 <menu+0x2e44>)
 80048be:	22b4      	movs	r2, #180	; 0xb4
 80048c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80048c2:	f001 ff51 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80048c6:	2108      	movs	r1, #8
 80048c8:	486b      	ldr	r0, [pc, #428]	; (8004a78 <menu+0x2e4c>)
 80048ca:	f005 fce7 	bl	800a29c <HAL_GPIO_ReadPin>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d10d      	bne.n	80048f0 <menu+0x2cc4>
 80048d4:	4b69      	ldr	r3, [pc, #420]	; (8004a7c <menu+0x2e50>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	f083 0301 	eor.w	r3, r3, #1
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d006      	beq.n	80048f0 <menu+0x2cc4>
			eepromData[24] = makineCalismaTmr;
 80048e2:	4b63      	ldr	r3, [pc, #396]	; (8004a70 <menu+0x2e44>)
 80048e4:	781a      	ldrb	r2, [r3, #0]
 80048e6:	4b66      	ldr	r3, [pc, #408]	; (8004a80 <menu+0x2e54>)
 80048e8:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80048ea:	4b66      	ldr	r3, [pc, #408]	; (8004a84 <menu+0x2e58>)
 80048ec:	2201      	movs	r2, #1
 80048ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 80048f0:	4b65      	ldr	r3, [pc, #404]	; (8004a88 <menu+0x2e5c>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b1b      	cmp	r3, #27
 80048f6:	f040 8083 	bne.w	8004a00 <menu+0x2dd4>
		lcd_print(1, 1, "BUZZER          ");
 80048fa:	4a64      	ldr	r2, [pc, #400]	; (8004a8c <menu+0x2e60>)
 80048fc:	2101      	movs	r1, #1
 80048fe:	2001      	movs	r0, #1
 8004900:	f7fc f858 	bl	80009b4 <lcd_print>

		if(buzzer == 0) {
 8004904:	4b62      	ldr	r3, [pc, #392]	; (8004a90 <menu+0x2e64>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d113      	bne.n	8004934 <menu+0x2d08>
			if(dilSecim == 0) {
 800490c:	4b56      	ldr	r3, [pc, #344]	; (8004a68 <menu+0x2e3c>)
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d105      	bne.n	8004920 <menu+0x2cf4>
				lcd_print(2, 1, "Pasif           ");
 8004914:	4a5f      	ldr	r2, [pc, #380]	; (8004a94 <menu+0x2e68>)
 8004916:	2101      	movs	r1, #1
 8004918:	2002      	movs	r0, #2
 800491a:	f7fc f84b 	bl	80009b4 <lcd_print>
 800491e:	e020      	b.n	8004962 <menu+0x2d36>
			} else if(dilSecim == 1) {
 8004920:	4b51      	ldr	r3, [pc, #324]	; (8004a68 <menu+0x2e3c>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d11c      	bne.n	8004962 <menu+0x2d36>
				lcd_print(2, 1, "Passive         ");
 8004928:	4a5b      	ldr	r2, [pc, #364]	; (8004a98 <menu+0x2e6c>)
 800492a:	2101      	movs	r1, #1
 800492c:	2002      	movs	r0, #2
 800492e:	f7fc f841 	bl	80009b4 <lcd_print>
 8004932:	e016      	b.n	8004962 <menu+0x2d36>
			}
		} else if(buzzer == 1) {
 8004934:	4b56      	ldr	r3, [pc, #344]	; (8004a90 <menu+0x2e64>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	2b01      	cmp	r3, #1
 800493a:	d112      	bne.n	8004962 <menu+0x2d36>
			if(dilSecim == 0) {
 800493c:	4b4a      	ldr	r3, [pc, #296]	; (8004a68 <menu+0x2e3c>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d105      	bne.n	8004950 <menu+0x2d24>
				lcd_print(2, 1, "Aktif           ");
 8004944:	4a55      	ldr	r2, [pc, #340]	; (8004a9c <menu+0x2e70>)
 8004946:	2101      	movs	r1, #1
 8004948:	2002      	movs	r0, #2
 800494a:	f7fc f833 	bl	80009b4 <lcd_print>
 800494e:	e008      	b.n	8004962 <menu+0x2d36>
			} else if(dilSecim == 1) {
 8004950:	4b45      	ldr	r3, [pc, #276]	; (8004a68 <menu+0x2e3c>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d104      	bne.n	8004962 <menu+0x2d36>
				lcd_print(2, 1, "Active          ");
 8004958:	4a51      	ldr	r2, [pc, #324]	; (8004aa0 <menu+0x2e74>)
 800495a:	2101      	movs	r1, #1
 800495c:	2002      	movs	r0, #2
 800495e:	f7fc f829 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004962:	2102      	movs	r1, #2
 8004964:	4844      	ldr	r0, [pc, #272]	; (8004a78 <menu+0x2e4c>)
 8004966:	f005 fc99 	bl	800a29c <HAL_GPIO_ReadPin>
 800496a:	4603      	mov	r3, r0
 800496c:	2b01      	cmp	r3, #1
 800496e:	d115      	bne.n	800499c <menu+0x2d70>
 8004970:	4b42      	ldr	r3, [pc, #264]	; (8004a7c <menu+0x2e50>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	f083 0301 	eor.w	r3, r3, #1
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00e      	beq.n	800499c <menu+0x2d70>
			buzzer = buzzer + 1;
 800497e:	4b44      	ldr	r3, [pc, #272]	; (8004a90 <menu+0x2e64>)
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	3301      	adds	r3, #1
 8004984:	b2da      	uxtb	r2, r3
 8004986:	4b42      	ldr	r3, [pc, #264]	; (8004a90 <menu+0x2e64>)
 8004988:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800498a:	4b41      	ldr	r3, [pc, #260]	; (8004a90 <menu+0x2e64>)
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d902      	bls.n	8004998 <menu+0x2d6c>
				buzzer = 0;
 8004992:	4b3f      	ldr	r3, [pc, #252]	; (8004a90 <menu+0x2e64>)
 8004994:	2200      	movs	r2, #0
 8004996:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004998:	f001 fee6 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800499c:	2104      	movs	r1, #4
 800499e:	4836      	ldr	r0, [pc, #216]	; (8004a78 <menu+0x2e4c>)
 80049a0:	f005 fc7c 	bl	800a29c <HAL_GPIO_ReadPin>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d115      	bne.n	80049d6 <menu+0x2daa>
 80049aa:	4b34      	ldr	r3, [pc, #208]	; (8004a7c <menu+0x2e50>)
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	f083 0301 	eor.w	r3, r3, #1
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00e      	beq.n	80049d6 <menu+0x2daa>
			buzzer = buzzer - 1;
 80049b8:	4b35      	ldr	r3, [pc, #212]	; (8004a90 <menu+0x2e64>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	3b01      	subs	r3, #1
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	4b33      	ldr	r3, [pc, #204]	; (8004a90 <menu+0x2e64>)
 80049c2:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80049c4:	4b32      	ldr	r3, [pc, #200]	; (8004a90 <menu+0x2e64>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d002      	beq.n	80049d2 <menu+0x2da6>
		   		buzzer = 1;
 80049cc:	4b30      	ldr	r3, [pc, #192]	; (8004a90 <menu+0x2e64>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80049d2:	f001 fec9 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80049d6:	2108      	movs	r1, #8
 80049d8:	4827      	ldr	r0, [pc, #156]	; (8004a78 <menu+0x2e4c>)
 80049da:	f005 fc5f 	bl	800a29c <HAL_GPIO_ReadPin>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d10d      	bne.n	8004a00 <menu+0x2dd4>
 80049e4:	4b25      	ldr	r3, [pc, #148]	; (8004a7c <menu+0x2e50>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	f083 0301 	eor.w	r3, r3, #1
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d006      	beq.n	8004a00 <menu+0x2dd4>
			eepromData[25] = buzzer;
 80049f2:	4b27      	ldr	r3, [pc, #156]	; (8004a90 <menu+0x2e64>)
 80049f4:	781a      	ldrb	r2, [r3, #0]
 80049f6:	4b22      	ldr	r3, [pc, #136]	; (8004a80 <menu+0x2e54>)
 80049f8:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80049fa:	4b22      	ldr	r3, [pc, #136]	; (8004a84 <menu+0x2e58>)
 80049fc:	2201      	movs	r2, #1
 80049fe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004a00:	4b21      	ldr	r3, [pc, #132]	; (8004a88 <menu+0x2e5c>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b1c      	cmp	r3, #28
 8004a06:	f040 80ab 	bne.w	8004b60 <menu+0x2f34>
		calismaSayModu = 0;
 8004a0a:	4b26      	ldr	r3, [pc, #152]	; (8004aa4 <menu+0x2e78>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004a10:	4a25      	ldr	r2, [pc, #148]	; (8004aa8 <menu+0x2e7c>)
 8004a12:	2101      	movs	r1, #1
 8004a14:	2001      	movs	r0, #1
 8004a16:	f7fb ffcd 	bl	80009b4 <lcd_print>

		if(demoMode == 0) {
 8004a1a:	4b24      	ldr	r3, [pc, #144]	; (8004aac <menu+0x2e80>)
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d113      	bne.n	8004a4a <menu+0x2e1e>
			if(dilSecim == 0) {
 8004a22:	4b11      	ldr	r3, [pc, #68]	; (8004a68 <menu+0x2e3c>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d105      	bne.n	8004a36 <menu+0x2e0a>
				lcd_print(2, 1, "Pasif           ");
 8004a2a:	4a1a      	ldr	r2, [pc, #104]	; (8004a94 <menu+0x2e68>)
 8004a2c:	2101      	movs	r1, #1
 8004a2e:	2002      	movs	r0, #2
 8004a30:	f7fb ffc0 	bl	80009b4 <lcd_print>
 8004a34:	e045      	b.n	8004ac2 <menu+0x2e96>
			} else if(dilSecim == 1) {
 8004a36:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <menu+0x2e3c>)
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d141      	bne.n	8004ac2 <menu+0x2e96>
				lcd_print(2, 1, "Passive         ");
 8004a3e:	4a16      	ldr	r2, [pc, #88]	; (8004a98 <menu+0x2e6c>)
 8004a40:	2101      	movs	r1, #1
 8004a42:	2002      	movs	r0, #2
 8004a44:	f7fb ffb6 	bl	80009b4 <lcd_print>
 8004a48:	e03b      	b.n	8004ac2 <menu+0x2e96>
			}
		} else if(demoMode == 1) {
 8004a4a:	4b18      	ldr	r3, [pc, #96]	; (8004aac <menu+0x2e80>)
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d137      	bne.n	8004ac2 <menu+0x2e96>
			if(dilSecim == 0){
 8004a52:	4b05      	ldr	r3, [pc, #20]	; (8004a68 <menu+0x2e3c>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d12a      	bne.n	8004ab0 <menu+0x2e84>
				lcd_print(2, 1, "Aktif           ");
 8004a5a:	4a10      	ldr	r2, [pc, #64]	; (8004a9c <menu+0x2e70>)
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	2002      	movs	r0, #2
 8004a60:	f7fb ffa8 	bl	80009b4 <lcd_print>
 8004a64:	e02d      	b.n	8004ac2 <menu+0x2e96>
 8004a66:	bf00      	nop
 8004a68:	20000cbe 	.word	0x20000cbe
 8004a6c:	0800e928 	.word	0x0800e928
 8004a70:	20000cb5 	.word	0x20000cb5
 8004a74:	20000bcc 	.word	0x20000bcc
 8004a78:	40010800 	.word	0x40010800
 8004a7c:	20000ccc 	.word	0x20000ccc
 8004a80:	20000b38 	.word	0x20000b38
 8004a84:	20000cc9 	.word	0x20000cc9
 8004a88:	20000c9d 	.word	0x20000c9d
 8004a8c:	0800ea28 	.word	0x0800ea28
 8004a90:	20000cb9 	.word	0x20000cb9
 8004a94:	0800e350 	.word	0x0800e350
 8004a98:	0800e364 	.word	0x0800e364
 8004a9c:	0800e3b0 	.word	0x0800e3b0
 8004aa0:	0800e3c4 	.word	0x0800e3c4
 8004aa4:	20000cbd 	.word	0x20000cbd
 8004aa8:	0800ea3c 	.word	0x0800ea3c
 8004aac:	20000cbb 	.word	0x20000cbb
			} else if(dilSecim == 1) {
 8004ab0:	4b71      	ldr	r3, [pc, #452]	; (8004c78 <menu+0x304c>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d104      	bne.n	8004ac2 <menu+0x2e96>
				lcd_print(2, 1, "Active          ");
 8004ab8:	4a70      	ldr	r2, [pc, #448]	; (8004c7c <menu+0x3050>)
 8004aba:	2101      	movs	r1, #1
 8004abc:	2002      	movs	r0, #2
 8004abe:	f7fb ff79 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004ac2:	2102      	movs	r1, #2
 8004ac4:	486e      	ldr	r0, [pc, #440]	; (8004c80 <menu+0x3054>)
 8004ac6:	f005 fbe9 	bl	800a29c <HAL_GPIO_ReadPin>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d115      	bne.n	8004afc <menu+0x2ed0>
 8004ad0:	4b6c      	ldr	r3, [pc, #432]	; (8004c84 <menu+0x3058>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	f083 0301 	eor.w	r3, r3, #1
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00e      	beq.n	8004afc <menu+0x2ed0>
			demoMode = demoMode + 1;
 8004ade:	4b6a      	ldr	r3, [pc, #424]	; (8004c88 <menu+0x305c>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	4b68      	ldr	r3, [pc, #416]	; (8004c88 <menu+0x305c>)
 8004ae8:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8004aea:	4b67      	ldr	r3, [pc, #412]	; (8004c88 <menu+0x305c>)
 8004aec:	781b      	ldrb	r3, [r3, #0]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d902      	bls.n	8004af8 <menu+0x2ecc>
				demoMode = 0;
 8004af2:	4b65      	ldr	r3, [pc, #404]	; (8004c88 <menu+0x305c>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004af8:	f001 fe36 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004afc:	2104      	movs	r1, #4
 8004afe:	4860      	ldr	r0, [pc, #384]	; (8004c80 <menu+0x3054>)
 8004b00:	f005 fbcc 	bl	800a29c <HAL_GPIO_ReadPin>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d115      	bne.n	8004b36 <menu+0x2f0a>
 8004b0a:	4b5e      	ldr	r3, [pc, #376]	; (8004c84 <menu+0x3058>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	f083 0301 	eor.w	r3, r3, #1
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00e      	beq.n	8004b36 <menu+0x2f0a>
			demoMode = demoMode - 1;
 8004b18:	4b5b      	ldr	r3, [pc, #364]	; (8004c88 <menu+0x305c>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	4b59      	ldr	r3, [pc, #356]	; (8004c88 <menu+0x305c>)
 8004b22:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004b24:	4b58      	ldr	r3, [pc, #352]	; (8004c88 <menu+0x305c>)
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <menu+0x2f06>
		   		demoMode = 1;
 8004b2c:	4b56      	ldr	r3, [pc, #344]	; (8004c88 <menu+0x305c>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004b32:	f001 fe19 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b36:	2108      	movs	r1, #8
 8004b38:	4851      	ldr	r0, [pc, #324]	; (8004c80 <menu+0x3054>)
 8004b3a:	f005 fbaf 	bl	800a29c <HAL_GPIO_ReadPin>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d10d      	bne.n	8004b60 <menu+0x2f34>
 8004b44:	4b4f      	ldr	r3, [pc, #316]	; (8004c84 <menu+0x3058>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	f083 0301 	eor.w	r3, r3, #1
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d006      	beq.n	8004b60 <menu+0x2f34>
			eepromData[26] = demoMode;
 8004b52:	4b4d      	ldr	r3, [pc, #308]	; (8004c88 <menu+0x305c>)
 8004b54:	781a      	ldrb	r2, [r3, #0]
 8004b56:	4b4d      	ldr	r3, [pc, #308]	; (8004c8c <menu+0x3060>)
 8004b58:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8004b5a:	4b4d      	ldr	r3, [pc, #308]	; (8004c90 <menu+0x3064>)
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004b60:	4b4c      	ldr	r3, [pc, #304]	; (8004c94 <menu+0x3068>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b1d      	cmp	r3, #29
 8004b66:	f040 8132 	bne.w	8004dce <menu+0x31a2>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8004b6a:	4b4b      	ldr	r3, [pc, #300]	; (8004c98 <menu+0x306c>)
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d113      	bne.n	8004b9a <menu+0x2f6e>
 8004b72:	4b4a      	ldr	r3, [pc, #296]	; (8004c9c <menu+0x3070>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10f      	bne.n	8004b9a <menu+0x2f6e>
 8004b7a:	4b49      	ldr	r3, [pc, #292]	; (8004ca0 <menu+0x3074>)
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10b      	bne.n	8004b9a <menu+0x2f6e>
 8004b82:	4b48      	ldr	r3, [pc, #288]	; (8004ca4 <menu+0x3078>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d107      	bne.n	8004b9a <menu+0x2f6e>
 8004b8a:	4b47      	ldr	r3, [pc, #284]	; (8004ca8 <menu+0x307c>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d103      	bne.n	8004b9a <menu+0x2f6e>
			calismaSayisiYar = 0;
 8004b92:	4b46      	ldr	r3, [pc, #280]	; (8004cac <menu+0x3080>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	701a      	strb	r2, [r3, #0]
 8004b98:	e002      	b.n	8004ba0 <menu+0x2f74>
		} else {
			calismaSayisiYar = 1;
 8004b9a:	4b44      	ldr	r3, [pc, #272]	; (8004cac <menu+0x3080>)
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004ba0:	4b43      	ldr	r3, [pc, #268]	; (8004cb0 <menu+0x3084>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d154      	bne.n	8004c52 <menu+0x3026>
			if(dilSecim == 0) {
 8004ba8:	4b33      	ldr	r3, [pc, #204]	; (8004c78 <menu+0x304c>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d105      	bne.n	8004bbc <menu+0x2f90>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004bb0:	4a40      	ldr	r2, [pc, #256]	; (8004cb4 <menu+0x3088>)
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	2001      	movs	r0, #1
 8004bb6:	f7fb fefd 	bl	80009b4 <lcd_print>
 8004bba:	e008      	b.n	8004bce <menu+0x2fa2>
			} else if(dilSecim == 1) {
 8004bbc:	4b2e      	ldr	r3, [pc, #184]	; (8004c78 <menu+0x304c>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d104      	bne.n	8004bce <menu+0x2fa2>
				lcd_print(1, 1, "Working Cycle   ");
 8004bc4:	4a3c      	ldr	r2, [pc, #240]	; (8004cb8 <menu+0x308c>)
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	2001      	movs	r0, #1
 8004bca:	f7fb fef3 	bl	80009b4 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004bce:	4b36      	ldr	r3, [pc, #216]	; (8004ca8 <menu+0x307c>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	220a      	movs	r2, #10
 8004bd4:	4939      	ldr	r1, [pc, #228]	; (8004cbc <menu+0x3090>)
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f008 fbe8 	bl	800d3ac <itoa>
			lcd_print(2, 12, snum);
 8004bdc:	4a37      	ldr	r2, [pc, #220]	; (8004cbc <menu+0x3090>)
 8004bde:	210c      	movs	r1, #12
 8004be0:	2002      	movs	r0, #2
 8004be2:	f7fb fee7 	bl	80009b4 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004be6:	4b2f      	ldr	r3, [pc, #188]	; (8004ca4 <menu+0x3078>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	220a      	movs	r2, #10
 8004bec:	4933      	ldr	r1, [pc, #204]	; (8004cbc <menu+0x3090>)
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f008 fbdc 	bl	800d3ac <itoa>
			lcd_print(2, 13, snum);
 8004bf4:	4a31      	ldr	r2, [pc, #196]	; (8004cbc <menu+0x3090>)
 8004bf6:	210d      	movs	r1, #13
 8004bf8:	2002      	movs	r0, #2
 8004bfa:	f7fb fedb 	bl	80009b4 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004bfe:	4b28      	ldr	r3, [pc, #160]	; (8004ca0 <menu+0x3074>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	220a      	movs	r2, #10
 8004c04:	492d      	ldr	r1, [pc, #180]	; (8004cbc <menu+0x3090>)
 8004c06:	4618      	mov	r0, r3
 8004c08:	f008 fbd0 	bl	800d3ac <itoa>
			lcd_print(2, 14, snum);
 8004c0c:	4a2b      	ldr	r2, [pc, #172]	; (8004cbc <menu+0x3090>)
 8004c0e:	210e      	movs	r1, #14
 8004c10:	2002      	movs	r0, #2
 8004c12:	f7fb fecf 	bl	80009b4 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004c16:	4b21      	ldr	r3, [pc, #132]	; (8004c9c <menu+0x3070>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	220a      	movs	r2, #10
 8004c1c:	4927      	ldr	r1, [pc, #156]	; (8004cbc <menu+0x3090>)
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f008 fbc4 	bl	800d3ac <itoa>
			lcd_print(2, 15, snum);
 8004c24:	4a25      	ldr	r2, [pc, #148]	; (8004cbc <menu+0x3090>)
 8004c26:	210f      	movs	r1, #15
 8004c28:	2002      	movs	r0, #2
 8004c2a:	f7fb fec3 	bl	80009b4 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004c2e:	4b1a      	ldr	r3, [pc, #104]	; (8004c98 <menu+0x306c>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	220a      	movs	r2, #10
 8004c34:	4921      	ldr	r1, [pc, #132]	; (8004cbc <menu+0x3090>)
 8004c36:	4618      	mov	r0, r3
 8004c38:	f008 fbb8 	bl	800d3ac <itoa>
			lcd_print(2, 16, snum);
 8004c3c:	4a1f      	ldr	r2, [pc, #124]	; (8004cbc <menu+0x3090>)
 8004c3e:	2110      	movs	r1, #16
 8004c40:	2002      	movs	r0, #2
 8004c42:	f7fb feb7 	bl	80009b4 <lcd_print>

			lcd_print(2, 1, "           ");
 8004c46:	4a1e      	ldr	r2, [pc, #120]	; (8004cc0 <menu+0x3094>)
 8004c48:	2101      	movs	r1, #1
 8004c4a:	2002      	movs	r0, #2
 8004c4c:	f7fb feb2 	bl	80009b4 <lcd_print>
 8004c50:	e048      	b.n	8004ce4 <menu+0x30b8>
		} else if(calismaSayModu == 1) {
 8004c52:	4b17      	ldr	r3, [pc, #92]	; (8004cb0 <menu+0x3084>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d144      	bne.n	8004ce4 <menu+0x30b8>
			if(dilSecim == 0) {
 8004c5a:	4b07      	ldr	r3, [pc, #28]	; (8004c78 <menu+0x304c>)
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d132      	bne.n	8004cc8 <menu+0x309c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004c62:	4a14      	ldr	r2, [pc, #80]	; (8004cb4 <menu+0x3088>)
 8004c64:	2101      	movs	r1, #1
 8004c66:	2001      	movs	r0, #1
 8004c68:	f7fb fea4 	bl	80009b4 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004c6c:	4a15      	ldr	r2, [pc, #84]	; (8004cc4 <menu+0x3098>)
 8004c6e:	2101      	movs	r1, #1
 8004c70:	2002      	movs	r0, #2
 8004c72:	f7fb fe9f 	bl	80009b4 <lcd_print>
 8004c76:	e035      	b.n	8004ce4 <menu+0x30b8>
 8004c78:	20000cbe 	.word	0x20000cbe
 8004c7c:	0800e3c4 	.word	0x0800e3c4
 8004c80:	40010800 	.word	0x40010800
 8004c84:	20000ccc 	.word	0x20000ccc
 8004c88:	20000cbb 	.word	0x20000cbb
 8004c8c:	20000b38 	.word	0x20000b38
 8004c90:	20000cc9 	.word	0x20000cc9
 8004c94:	20000c9d 	.word	0x20000c9d
 8004c98:	20000c9a 	.word	0x20000c9a
 8004c9c:	20000c9b 	.word	0x20000c9b
 8004ca0:	200009c2 	.word	0x200009c2
 8004ca4:	200009c3 	.word	0x200009c3
 8004ca8:	20000c9c 	.word	0x20000c9c
 8004cac:	20000cde 	.word	0x20000cde
 8004cb0:	20000cbd 	.word	0x20000cbd
 8004cb4:	0800ea4c 	.word	0x0800ea4c
 8004cb8:	0800ea60 	.word	0x0800ea60
 8004cbc:	20000bcc 	.word	0x20000bcc
 8004cc0:	0800ea74 	.word	0x0800ea74
 8004cc4:	0800ea80 	.word	0x0800ea80
			} else if(dilSecim == 1) {
 8004cc8:	4b94      	ldr	r3, [pc, #592]	; (8004f1c <menu+0x32f0>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d109      	bne.n	8004ce4 <menu+0x30b8>
				lcd_print(1, 1, "Working Cycle   ");
 8004cd0:	4a93      	ldr	r2, [pc, #588]	; (8004f20 <menu+0x32f4>)
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	f7fb fe6d 	bl	80009b4 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004cda:	4a92      	ldr	r2, [pc, #584]	; (8004f24 <menu+0x32f8>)
 8004cdc:	2101      	movs	r1, #1
 8004cde:	2002      	movs	r0, #2
 8004ce0:	f7fb fe68 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004ce4:	2102      	movs	r1, #2
 8004ce6:	4890      	ldr	r0, [pc, #576]	; (8004f28 <menu+0x32fc>)
 8004ce8:	f005 fad8 	bl	800a29c <HAL_GPIO_ReadPin>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d119      	bne.n	8004d26 <menu+0x30fa>
 8004cf2:	4b8e      	ldr	r3, [pc, #568]	; (8004f2c <menu+0x3300>)
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	f083 0301 	eor.w	r3, r3, #1
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d012      	beq.n	8004d26 <menu+0x30fa>
 8004d00:	4b8b      	ldr	r3, [pc, #556]	; (8004f30 <menu+0x3304>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00e      	beq.n	8004d26 <menu+0x30fa>
			calismaSayModu = calismaSayModu + 1;
 8004d08:	4b8a      	ldr	r3, [pc, #552]	; (8004f34 <menu+0x3308>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	4b88      	ldr	r3, [pc, #544]	; (8004f34 <menu+0x3308>)
 8004d12:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004d14:	4b87      	ldr	r3, [pc, #540]	; (8004f34 <menu+0x3308>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d902      	bls.n	8004d22 <menu+0x30f6>
				calismaSayModu = 0;
 8004d1c:	4b85      	ldr	r3, [pc, #532]	; (8004f34 <menu+0x3308>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004d22:	f001 fd21 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004d26:	2104      	movs	r1, #4
 8004d28:	487f      	ldr	r0, [pc, #508]	; (8004f28 <menu+0x32fc>)
 8004d2a:	f005 fab7 	bl	800a29c <HAL_GPIO_ReadPin>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d119      	bne.n	8004d68 <menu+0x313c>
 8004d34:	4b7d      	ldr	r3, [pc, #500]	; (8004f2c <menu+0x3300>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	f083 0301 	eor.w	r3, r3, #1
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d012      	beq.n	8004d68 <menu+0x313c>
 8004d42:	4b7b      	ldr	r3, [pc, #492]	; (8004f30 <menu+0x3304>)
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00e      	beq.n	8004d68 <menu+0x313c>
			calismaSayModu = calismaSayModu - 1;
 8004d4a:	4b7a      	ldr	r3, [pc, #488]	; (8004f34 <menu+0x3308>)
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	4b78      	ldr	r3, [pc, #480]	; (8004f34 <menu+0x3308>)
 8004d54:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004d56:	4b77      	ldr	r3, [pc, #476]	; (8004f34 <menu+0x3308>)
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d002      	beq.n	8004d64 <menu+0x3138>
		   		calismaSayModu = 1;
 8004d5e:	4b75      	ldr	r3, [pc, #468]	; (8004f34 <menu+0x3308>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004d64:	f001 fd00 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004d68:	2108      	movs	r1, #8
 8004d6a:	486f      	ldr	r0, [pc, #444]	; (8004f28 <menu+0x32fc>)
 8004d6c:	f005 fa96 	bl	800a29c <HAL_GPIO_ReadPin>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d12b      	bne.n	8004dce <menu+0x31a2>
 8004d76:	4b6d      	ldr	r3, [pc, #436]	; (8004f2c <menu+0x3300>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	f083 0301 	eor.w	r3, r3, #1
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d024      	beq.n	8004dce <menu+0x31a2>
			eepromData[32] = 0;
 8004d84:	4b6c      	ldr	r3, [pc, #432]	; (8004f38 <menu+0x330c>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004d8c:	4b6a      	ldr	r3, [pc, #424]	; (8004f38 <menu+0x330c>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004d92:	4b69      	ldr	r3, [pc, #420]	; (8004f38 <menu+0x330c>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004d98:	4b67      	ldr	r3, [pc, #412]	; (8004f38 <menu+0x330c>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004d9e:	4b66      	ldr	r3, [pc, #408]	; (8004f38 <menu+0x330c>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004da4:	4b65      	ldr	r3, [pc, #404]	; (8004f3c <menu+0x3310>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004daa:	4b65      	ldr	r3, [pc, #404]	; (8004f40 <menu+0x3314>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004db0:	4b64      	ldr	r3, [pc, #400]	; (8004f44 <menu+0x3318>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004db6:	4b64      	ldr	r3, [pc, #400]	; (8004f48 <menu+0x331c>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004dbc:	4b63      	ldr	r3, [pc, #396]	; (8004f4c <menu+0x3320>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004dc2:	4b5c      	ldr	r3, [pc, #368]	; (8004f34 <menu+0x3308>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004dc8:	4b61      	ldr	r3, [pc, #388]	; (8004f50 <menu+0x3324>)
 8004dca:	2201      	movs	r2, #1
 8004dcc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004dce:	4b61      	ldr	r3, [pc, #388]	; (8004f54 <menu+0x3328>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	2b1e      	cmp	r3, #30
 8004dd4:	d16f      	bne.n	8004eb6 <menu+0x328a>
		calismaSayModu = 0;
 8004dd6:	4b57      	ldr	r3, [pc, #348]	; (8004f34 <menu+0x3308>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004ddc:	4b4f      	ldr	r3, [pc, #316]	; (8004f1c <menu+0x32f0>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10a      	bne.n	8004dfa <menu+0x31ce>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004de4:	4a5c      	ldr	r2, [pc, #368]	; (8004f58 <menu+0x332c>)
 8004de6:	2101      	movs	r1, #1
 8004de8:	2001      	movs	r0, #1
 8004dea:	f7fb fde3 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004dee:	4a5b      	ldr	r2, [pc, #364]	; (8004f5c <menu+0x3330>)
 8004df0:	2101      	movs	r1, #1
 8004df2:	2002      	movs	r0, #2
 8004df4:	f7fb fdde 	bl	80009b4 <lcd_print>
 8004df8:	e00d      	b.n	8004e16 <menu+0x31ea>
		} else if(dilSecim == 1) {
 8004dfa:	4b48      	ldr	r3, [pc, #288]	; (8004f1c <menu+0x32f0>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d109      	bne.n	8004e16 <menu+0x31ea>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004e02:	4a57      	ldr	r2, [pc, #348]	; (8004f60 <menu+0x3334>)
 8004e04:	2101      	movs	r1, #1
 8004e06:	2001      	movs	r0, #1
 8004e08:	f7fb fdd4 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004e0c:	4a55      	ldr	r2, [pc, #340]	; (8004f64 <menu+0x3338>)
 8004e0e:	2101      	movs	r1, #1
 8004e10:	2002      	movs	r0, #2
 8004e12:	f7fb fdcf 	bl	80009b4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004e16:	2102      	movs	r1, #2
 8004e18:	4843      	ldr	r0, [pc, #268]	; (8004f28 <menu+0x32fc>)
 8004e1a:	f005 fa3f 	bl	800a29c <HAL_GPIO_ReadPin>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d115      	bne.n	8004e50 <menu+0x3224>
 8004e24:	4b41      	ldr	r3, [pc, #260]	; (8004f2c <menu+0x3300>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	f083 0301 	eor.w	r3, r3, #1
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00e      	beq.n	8004e50 <menu+0x3224>
			dilSecim = dilSecim + 1;
 8004e32:	4b3a      	ldr	r3, [pc, #232]	; (8004f1c <menu+0x32f0>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	3301      	adds	r3, #1
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	4b38      	ldr	r3, [pc, #224]	; (8004f1c <menu+0x32f0>)
 8004e3c:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004e3e:	4b37      	ldr	r3, [pc, #220]	; (8004f1c <menu+0x32f0>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d902      	bls.n	8004e4c <menu+0x3220>
				dilSecim = 0;
 8004e46:	4b35      	ldr	r3, [pc, #212]	; (8004f1c <menu+0x32f0>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004e4c:	f001 fc8c 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004e50:	2104      	movs	r1, #4
 8004e52:	4835      	ldr	r0, [pc, #212]	; (8004f28 <menu+0x32fc>)
 8004e54:	f005 fa22 	bl	800a29c <HAL_GPIO_ReadPin>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d115      	bne.n	8004e8a <menu+0x325e>
 8004e5e:	4b33      	ldr	r3, [pc, #204]	; (8004f2c <menu+0x3300>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	f083 0301 	eor.w	r3, r3, #1
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00e      	beq.n	8004e8a <menu+0x325e>
			dilSecim = dilSecim - 1;
 8004e6c:	4b2b      	ldr	r3, [pc, #172]	; (8004f1c <menu+0x32f0>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	4b29      	ldr	r3, [pc, #164]	; (8004f1c <menu+0x32f0>)
 8004e76:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004e78:	4b28      	ldr	r3, [pc, #160]	; (8004f1c <menu+0x32f0>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d002      	beq.n	8004e86 <menu+0x325a>
		   		dilSecim = 1;
 8004e80:	4b26      	ldr	r3, [pc, #152]	; (8004f1c <menu+0x32f0>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004e86:	f001 fc6f 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004e8a:	2108      	movs	r1, #8
 8004e8c:	4826      	ldr	r0, [pc, #152]	; (8004f28 <menu+0x32fc>)
 8004e8e:	f005 fa05 	bl	800a29c <HAL_GPIO_ReadPin>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d10e      	bne.n	8004eb6 <menu+0x328a>
 8004e98:	4b24      	ldr	r3, [pc, #144]	; (8004f2c <menu+0x3300>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	f083 0301 	eor.w	r3, r3, #1
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d007      	beq.n	8004eb6 <menu+0x328a>
			eepromData[33] = dilSecim;
 8004ea6:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <menu+0x32f0>)
 8004ea8:	781a      	ldrb	r2, [r3, #0]
 8004eaa:	4b23      	ldr	r3, [pc, #140]	; (8004f38 <menu+0x330c>)
 8004eac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004eb0:	4b27      	ldr	r3, [pc, #156]	; (8004f50 <menu+0x3324>)
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004eb6:	4b27      	ldr	r3, [pc, #156]	; (8004f54 <menu+0x3328>)
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	2b1f      	cmp	r3, #31
 8004ebc:	f040 80b7 	bne.w	800502e <menu+0x3402>
		calismaSayModu = 0;
 8004ec0:	4b1c      	ldr	r3, [pc, #112]	; (8004f34 <menu+0x3308>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004ec6:	4a28      	ldr	r2, [pc, #160]	; (8004f68 <menu+0x333c>)
 8004ec8:	2101      	movs	r1, #1
 8004eca:	2001      	movs	r0, #1
 8004ecc:	f7fb fd72 	bl	80009b4 <lcd_print>

		if(iotMode == 0) {
 8004ed0:	4b26      	ldr	r3, [pc, #152]	; (8004f6c <menu+0x3340>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d113      	bne.n	8004f00 <menu+0x32d4>
			if(dilSecim == 0) {
 8004ed8:	4b10      	ldr	r3, [pc, #64]	; (8004f1c <menu+0x32f0>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d105      	bne.n	8004eec <menu+0x32c0>
				lcd_print(2, 1, "Pasif           ");
 8004ee0:	4a23      	ldr	r2, [pc, #140]	; (8004f70 <menu+0x3344>)
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	2002      	movs	r0, #2
 8004ee6:	f7fb fd65 	bl	80009b4 <lcd_print>
 8004eea:	e050      	b.n	8004f8e <menu+0x3362>
			} else if(dilSecim == 1) {
 8004eec:	4b0b      	ldr	r3, [pc, #44]	; (8004f1c <menu+0x32f0>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d14c      	bne.n	8004f8e <menu+0x3362>
				lcd_print(2, 1, "Passive         ");
 8004ef4:	4a1f      	ldr	r2, [pc, #124]	; (8004f74 <menu+0x3348>)
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	2002      	movs	r0, #2
 8004efa:	f7fb fd5b 	bl	80009b4 <lcd_print>
 8004efe:	e046      	b.n	8004f8e <menu+0x3362>
			}
		} else if(iotMode == 1) {
 8004f00:	4b1a      	ldr	r3, [pc, #104]	; (8004f6c <menu+0x3340>)
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d142      	bne.n	8004f8e <menu+0x3362>
			if(dilSecim == 0){
 8004f08:	4b04      	ldr	r3, [pc, #16]	; (8004f1c <menu+0x32f0>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d135      	bne.n	8004f7c <menu+0x3350>
				lcd_print(2, 1, "Aktif           ");
 8004f10:	4a19      	ldr	r2, [pc, #100]	; (8004f78 <menu+0x334c>)
 8004f12:	2101      	movs	r1, #1
 8004f14:	2002      	movs	r0, #2
 8004f16:	f7fb fd4d 	bl	80009b4 <lcd_print>
 8004f1a:	e038      	b.n	8004f8e <menu+0x3362>
 8004f1c:	20000cbe 	.word	0x20000cbe
 8004f20:	0800ea60 	.word	0x0800ea60
 8004f24:	0800ea94 	.word	0x0800ea94
 8004f28:	40010800 	.word	0x40010800
 8004f2c:	20000ccc 	.word	0x20000ccc
 8004f30:	20000cde 	.word	0x20000cde
 8004f34:	20000cbd 	.word	0x20000cbd
 8004f38:	20000b38 	.word	0x20000b38
 8004f3c:	20000c9c 	.word	0x20000c9c
 8004f40:	200009c3 	.word	0x200009c3
 8004f44:	200009c2 	.word	0x200009c2
 8004f48:	20000c9b 	.word	0x20000c9b
 8004f4c:	20000c9a 	.word	0x20000c9a
 8004f50:	20000cc9 	.word	0x20000cc9
 8004f54:	20000c9d 	.word	0x20000c9d
 8004f58:	0800eaa8 	.word	0x0800eaa8
 8004f5c:	0800eabc 	.word	0x0800eabc
 8004f60:	0800ead0 	.word	0x0800ead0
 8004f64:	0800eae4 	.word	0x0800eae4
 8004f68:	0800eaf8 	.word	0x0800eaf8
 8004f6c:	20000cbc 	.word	0x20000cbc
 8004f70:	0800e350 	.word	0x0800e350
 8004f74:	0800e364 	.word	0x0800e364
 8004f78:	0800e3b0 	.word	0x0800e3b0
			} else if(dilSecim == 1) {
 8004f7c:	4bb0      	ldr	r3, [pc, #704]	; (8005240 <menu+0x3614>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d104      	bne.n	8004f8e <menu+0x3362>
				lcd_print(2, 1, "Active          ");
 8004f84:	4aaf      	ldr	r2, [pc, #700]	; (8005244 <menu+0x3618>)
 8004f86:	2101      	movs	r1, #1
 8004f88:	2002      	movs	r0, #2
 8004f8a:	f7fb fd13 	bl	80009b4 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004f8e:	2102      	movs	r1, #2
 8004f90:	48ad      	ldr	r0, [pc, #692]	; (8005248 <menu+0x361c>)
 8004f92:	f005 f983 	bl	800a29c <HAL_GPIO_ReadPin>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d115      	bne.n	8004fc8 <menu+0x339c>
 8004f9c:	4bab      	ldr	r3, [pc, #684]	; (800524c <menu+0x3620>)
 8004f9e:	781b      	ldrb	r3, [r3, #0]
 8004fa0:	f083 0301 	eor.w	r3, r3, #1
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00e      	beq.n	8004fc8 <menu+0x339c>
			iotMode = iotMode + 1;
 8004faa:	4ba9      	ldr	r3, [pc, #676]	; (8005250 <menu+0x3624>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	4ba7      	ldr	r3, [pc, #668]	; (8005250 <menu+0x3624>)
 8004fb4:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004fb6:	4ba6      	ldr	r3, [pc, #664]	; (8005250 <menu+0x3624>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d902      	bls.n	8004fc4 <menu+0x3398>
				iotMode = 0;
 8004fbe:	4ba4      	ldr	r3, [pc, #656]	; (8005250 <menu+0x3624>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004fc4:	f001 fbd0 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004fc8:	2104      	movs	r1, #4
 8004fca:	489f      	ldr	r0, [pc, #636]	; (8005248 <menu+0x361c>)
 8004fcc:	f005 f966 	bl	800a29c <HAL_GPIO_ReadPin>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d115      	bne.n	8005002 <menu+0x33d6>
 8004fd6:	4b9d      	ldr	r3, [pc, #628]	; (800524c <menu+0x3620>)
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	f083 0301 	eor.w	r3, r3, #1
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00e      	beq.n	8005002 <menu+0x33d6>
			iotMode = iotMode - 1;
 8004fe4:	4b9a      	ldr	r3, [pc, #616]	; (8005250 <menu+0x3624>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	4b98      	ldr	r3, [pc, #608]	; (8005250 <menu+0x3624>)
 8004fee:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004ff0:	4b97      	ldr	r3, [pc, #604]	; (8005250 <menu+0x3624>)
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <menu+0x33d2>
		   		iotMode = 1;
 8004ff8:	4b95      	ldr	r3, [pc, #596]	; (8005250 <menu+0x3624>)
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004ffe:	f001 fbb3 	bl	8006768 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8005002:	2108      	movs	r1, #8
 8005004:	4890      	ldr	r0, [pc, #576]	; (8005248 <menu+0x361c>)
 8005006:	f005 f949 	bl	800a29c <HAL_GPIO_ReadPin>
 800500a:	4603      	mov	r3, r0
 800500c:	2b01      	cmp	r3, #1
 800500e:	d10e      	bne.n	800502e <menu+0x3402>
 8005010:	4b8e      	ldr	r3, [pc, #568]	; (800524c <menu+0x3620>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	f083 0301 	eor.w	r3, r3, #1
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d007      	beq.n	800502e <menu+0x3402>
			eepromData[37] = iotMode;
 800501e:	4b8c      	ldr	r3, [pc, #560]	; (8005250 <menu+0x3624>)
 8005020:	781a      	ldrb	r2, [r3, #0]
 8005022:	4b8c      	ldr	r3, [pc, #560]	; (8005254 <menu+0x3628>)
 8005024:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hafizaYaz = 1;
 8005028:	4b8b      	ldr	r3, [pc, #556]	; (8005258 <menu+0x362c>)
 800502a:	2201      	movs	r2, #1
 800502c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 800502e:	4b8b      	ldr	r3, [pc, #556]	; (800525c <menu+0x3630>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b20      	cmp	r3, #32
 8005034:	d145      	bne.n	80050c2 <menu+0x3496>
		calismaSayModu = 0;
 8005036:	4b8a      	ldr	r3, [pc, #552]	; (8005260 <menu+0x3634>)
 8005038:	2200      	movs	r2, #0
 800503a:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 800503c:	4a89      	ldr	r2, [pc, #548]	; (8005264 <menu+0x3638>)
 800503e:	2101      	movs	r1, #1
 8005040:	2001      	movs	r0, #1
 8005042:	f7fb fcb7 	bl	80009b4 <lcd_print>

		lcd_print(2, 1, machineID);
 8005046:	4a88      	ldr	r2, [pc, #544]	; (8005268 <menu+0x363c>)
 8005048:	2101      	movs	r1, #1
 800504a:	2002      	movs	r0, #2
 800504c:	f7fb fcb2 	bl	80009b4 <lcd_print>
		lcd_print(2, 1+strlen(machineID), emptyArray);
 8005050:	4885      	ldr	r0, [pc, #532]	; (8005268 <menu+0x363c>)
 8005052:	f7fb f8e7 	bl	8000224 <strlen>
 8005056:	4603      	mov	r3, r0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	3301      	adds	r3, #1
 800505c:	b2db      	uxtb	r3, r3
 800505e:	4a83      	ldr	r2, [pc, #524]	; (800526c <menu+0x3640>)
 8005060:	4619      	mov	r1, r3
 8005062:	2002      	movs	r0, #2
 8005064:	f7fb fca6 	bl	80009b4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8005068:	2102      	movs	r1, #2
 800506a:	4877      	ldr	r0, [pc, #476]	; (8005248 <menu+0x361c>)
 800506c:	f005 f916 	bl	800a29c <HAL_GPIO_ReadPin>
 8005070:	4603      	mov	r3, r0
 8005072:	2b01      	cmp	r3, #1
 8005074:	d125      	bne.n	80050c2 <menu+0x3496>
 8005076:	2104      	movs	r1, #4
 8005078:	4873      	ldr	r0, [pc, #460]	; (8005248 <menu+0x361c>)
 800507a:	f005 f90f 	bl	800a29c <HAL_GPIO_ReadPin>
 800507e:	4603      	mov	r3, r0
 8005080:	2b01      	cmp	r3, #1
 8005082:	d11e      	bne.n	80050c2 <menu+0x3496>
 8005084:	4b71      	ldr	r3, [pc, #452]	; (800524c <menu+0x3620>)
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	f083 0301 	eor.w	r3, r3, #1
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d017      	beq.n	80050c2 <menu+0x3496>
			takeMachineID(0, &hi2c1);
 8005092:	1d3b      	adds	r3, r7, #4
 8005094:	4619      	mov	r1, r3
 8005096:	2000      	movs	r0, #0
 8005098:	f7fb ffbe 	bl	8001018 <takeMachineID>

			lcd_print(2, 1, machineID);
 800509c:	4a72      	ldr	r2, [pc, #456]	; (8005268 <menu+0x363c>)
 800509e:	2101      	movs	r1, #1
 80050a0:	2002      	movs	r0, #2
 80050a2:	f7fb fc87 	bl	80009b4 <lcd_print>
			lcd_print(2, 1+strlen(machineID), emptyArray);
 80050a6:	4870      	ldr	r0, [pc, #448]	; (8005268 <menu+0x363c>)
 80050a8:	f7fb f8bc 	bl	8000224 <strlen>
 80050ac:	4603      	mov	r3, r0
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	3301      	adds	r3, #1
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	4a6d      	ldr	r2, [pc, #436]	; (800526c <menu+0x3640>)
 80050b6:	4619      	mov	r1, r3
 80050b8:	2002      	movs	r0, #2
 80050ba:	f7fb fc7b 	bl	80009b4 <lcd_print>

			bekle();
 80050be:	f001 fb53 	bl	8006768 <bekle>
		}
	}

	if (menuSayac == 33) {
 80050c2:	4b66      	ldr	r3, [pc, #408]	; (800525c <menu+0x3630>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b21      	cmp	r3, #33	; 0x21
 80050c8:	d151      	bne.n	800516e <menu+0x3542>
		calismaSayModu = 0;
 80050ca:	4b65      	ldr	r3, [pc, #404]	; (8005260 <menu+0x3634>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 80050d0:	4a67      	ldr	r2, [pc, #412]	; (8005270 <menu+0x3644>)
 80050d2:	2101      	movs	r1, #1
 80050d4:	2001      	movs	r0, #1
 80050d6:	f7fb fc6d 	bl	80009b4 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 80050da:	4866      	ldr	r0, [pc, #408]	; (8005274 <menu+0x3648>)
 80050dc:	f7fb f8a2 	bl	8000224 <strlen>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b10      	cmp	r3, #16
 80050e4:	d811      	bhi.n	800510a <menu+0x34de>
			lcd_print(2, 1, wifiSSID);
 80050e6:	4a63      	ldr	r2, [pc, #396]	; (8005274 <menu+0x3648>)
 80050e8:	2101      	movs	r1, #1
 80050ea:	2002      	movs	r0, #2
 80050ec:	f7fb fc62 	bl	80009b4 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 80050f0:	4860      	ldr	r0, [pc, #384]	; (8005274 <menu+0x3648>)
 80050f2:	f7fb f897 	bl	8000224 <strlen>
 80050f6:	4603      	mov	r3, r0
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	3301      	adds	r3, #1
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	4a5b      	ldr	r2, [pc, #364]	; (800526c <menu+0x3640>)
 8005100:	4619      	mov	r1, r3
 8005102:	2002      	movs	r0, #2
 8005104:	f7fb fc56 	bl	80009b4 <lcd_print>
 8005108:	e004      	b.n	8005114 <menu+0x34e8>
		} else {
			slideText(wifiSSID, 1, 2);
 800510a:	2202      	movs	r2, #2
 800510c:	2101      	movs	r1, #1
 800510e:	4859      	ldr	r0, [pc, #356]	; (8005274 <menu+0x3648>)
 8005110:	f7fc fd52 	bl	8001bb8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8005114:	2102      	movs	r1, #2
 8005116:	484c      	ldr	r0, [pc, #304]	; (8005248 <menu+0x361c>)
 8005118:	f005 f8c0 	bl	800a29c <HAL_GPIO_ReadPin>
 800511c:	4603      	mov	r3, r0
 800511e:	2b01      	cmp	r3, #1
 8005120:	d125      	bne.n	800516e <menu+0x3542>
 8005122:	2104      	movs	r1, #4
 8005124:	4848      	ldr	r0, [pc, #288]	; (8005248 <menu+0x361c>)
 8005126:	f005 f8b9 	bl	800a29c <HAL_GPIO_ReadPin>
 800512a:	4603      	mov	r3, r0
 800512c:	2b01      	cmp	r3, #1
 800512e:	d11e      	bne.n	800516e <menu+0x3542>
 8005130:	4b46      	ldr	r3, [pc, #280]	; (800524c <menu+0x3620>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	f083 0301 	eor.w	r3, r3, #1
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d017      	beq.n	800516e <menu+0x3542>
			takeWifiSSID(0, &hi2c1);
 800513e:	1d3b      	adds	r3, r7, #4
 8005140:	4619      	mov	r1, r3
 8005142:	2000      	movs	r0, #0
 8005144:	f7fc f882 	bl	800124c <takeWifiSSID>

			lcd_print(2, 1, wifiSSID);
 8005148:	4a4a      	ldr	r2, [pc, #296]	; (8005274 <menu+0x3648>)
 800514a:	2101      	movs	r1, #1
 800514c:	2002      	movs	r0, #2
 800514e:	f7fb fc31 	bl	80009b4 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8005152:	4848      	ldr	r0, [pc, #288]	; (8005274 <menu+0x3648>)
 8005154:	f7fb f866 	bl	8000224 <strlen>
 8005158:	4603      	mov	r3, r0
 800515a:	b2db      	uxtb	r3, r3
 800515c:	3301      	adds	r3, #1
 800515e:	b2db      	uxtb	r3, r3
 8005160:	4a42      	ldr	r2, [pc, #264]	; (800526c <menu+0x3640>)
 8005162:	4619      	mov	r1, r3
 8005164:	2002      	movs	r0, #2
 8005166:	f7fb fc25 	bl	80009b4 <lcd_print>

			bekle();
 800516a:	f001 fafd 	bl	8006768 <bekle>
		}
	}

	if (menuSayac == 34) {
 800516e:	4b3b      	ldr	r3, [pc, #236]	; (800525c <menu+0x3630>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	2b22      	cmp	r3, #34	; 0x22
 8005174:	d151      	bne.n	800521a <menu+0x35ee>
		calismaSayModu = 0;
 8005176:	4b3a      	ldr	r3, [pc, #232]	; (8005260 <menu+0x3634>)
 8005178:	2200      	movs	r2, #0
 800517a:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 800517c:	4a3e      	ldr	r2, [pc, #248]	; (8005278 <menu+0x364c>)
 800517e:	2101      	movs	r1, #1
 8005180:	2001      	movs	r0, #1
 8005182:	f7fb fc17 	bl	80009b4 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 8005186:	483d      	ldr	r0, [pc, #244]	; (800527c <menu+0x3650>)
 8005188:	f7fb f84c 	bl	8000224 <strlen>
 800518c:	4603      	mov	r3, r0
 800518e:	2b10      	cmp	r3, #16
 8005190:	d811      	bhi.n	80051b6 <menu+0x358a>
			lcd_print(2, 1, wifiPass);
 8005192:	4a3a      	ldr	r2, [pc, #232]	; (800527c <menu+0x3650>)
 8005194:	2101      	movs	r1, #1
 8005196:	2002      	movs	r0, #2
 8005198:	f7fb fc0c 	bl	80009b4 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 800519c:	4837      	ldr	r0, [pc, #220]	; (800527c <menu+0x3650>)
 800519e:	f7fb f841 	bl	8000224 <strlen>
 80051a2:	4603      	mov	r3, r0
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	3301      	adds	r3, #1
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	4a30      	ldr	r2, [pc, #192]	; (800526c <menu+0x3640>)
 80051ac:	4619      	mov	r1, r3
 80051ae:	2002      	movs	r0, #2
 80051b0:	f7fb fc00 	bl	80009b4 <lcd_print>
 80051b4:	e004      	b.n	80051c0 <menu+0x3594>
		} else {
			slideText(wifiPass, 1, 2);
 80051b6:	2202      	movs	r2, #2
 80051b8:	2101      	movs	r1, #1
 80051ba:	4830      	ldr	r0, [pc, #192]	; (800527c <menu+0x3650>)
 80051bc:	f7fc fcfc 	bl	8001bb8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80051c0:	2102      	movs	r1, #2
 80051c2:	4821      	ldr	r0, [pc, #132]	; (8005248 <menu+0x361c>)
 80051c4:	f005 f86a 	bl	800a29c <HAL_GPIO_ReadPin>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d125      	bne.n	800521a <menu+0x35ee>
 80051ce:	2104      	movs	r1, #4
 80051d0:	481d      	ldr	r0, [pc, #116]	; (8005248 <menu+0x361c>)
 80051d2:	f005 f863 	bl	800a29c <HAL_GPIO_ReadPin>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d11e      	bne.n	800521a <menu+0x35ee>
 80051dc:	4b1b      	ldr	r3, [pc, #108]	; (800524c <menu+0x3620>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	f083 0301 	eor.w	r3, r3, #1
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d017      	beq.n	800521a <menu+0x35ee>
			takeWifiPass(0, &hi2c1);
 80051ea:	1d3b      	adds	r3, r7, #4
 80051ec:	4619      	mov	r1, r3
 80051ee:	2000      	movs	r0, #0
 80051f0:	f7fc f9b4 	bl	800155c <takeWifiPass>

			lcd_print(2, 1, wifiPass);
 80051f4:	4a21      	ldr	r2, [pc, #132]	; (800527c <menu+0x3650>)
 80051f6:	2101      	movs	r1, #1
 80051f8:	2002      	movs	r0, #2
 80051fa:	f7fb fbdb 	bl	80009b4 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 80051fe:	481f      	ldr	r0, [pc, #124]	; (800527c <menu+0x3650>)
 8005200:	f7fb f810 	bl	8000224 <strlen>
 8005204:	4603      	mov	r3, r0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	3301      	adds	r3, #1
 800520a:	b2db      	uxtb	r3, r3
 800520c:	4a17      	ldr	r2, [pc, #92]	; (800526c <menu+0x3640>)
 800520e:	4619      	mov	r1, r3
 8005210:	2002      	movs	r0, #2
 8005212:	f7fb fbcf 	bl	80009b4 <lcd_print>

			bekle();
 8005216:	f001 faa7 	bl	8006768 <bekle>
		}
	}

	if (menuSayac == 35) {
 800521a:	4b10      	ldr	r3, [pc, #64]	; (800525c <menu+0x3630>)
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b23      	cmp	r3, #35	; 0x23
 8005220:	d152      	bne.n	80052c8 <menu+0x369c>
		if(dilSecim == 0) {
 8005222:	4b07      	ldr	r3, [pc, #28]	; (8005240 <menu+0x3614>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d12e      	bne.n	8005288 <menu+0x365c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 800522a:	4a15      	ldr	r2, [pc, #84]	; (8005280 <menu+0x3654>)
 800522c:	2101      	movs	r1, #1
 800522e:	2001      	movs	r0, #1
 8005230:	f7fb fbc0 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8005234:	4a13      	ldr	r2, [pc, #76]	; (8005284 <menu+0x3658>)
 8005236:	2101      	movs	r1, #1
 8005238:	2002      	movs	r0, #2
 800523a:	f7fb fbbb 	bl	80009b4 <lcd_print>
 800523e:	e031      	b.n	80052a4 <menu+0x3678>
 8005240:	20000cbe 	.word	0x20000cbe
 8005244:	0800e3c4 	.word	0x0800e3c4
 8005248:	40010800 	.word	0x40010800
 800524c:	20000ccc 	.word	0x20000ccc
 8005250:	20000cbc 	.word	0x20000cbc
 8005254:	20000b38 	.word	0x20000b38
 8005258:	20000cc9 	.word	0x20000cc9
 800525c:	20000c9d 	.word	0x20000c9d
 8005260:	20000cbd 	.word	0x20000cbd
 8005264:	0800eb0c 	.word	0x0800eb0c
 8005268:	20000bf4 	.word	0x20000bf4
 800526c:	2000094c 	.word	0x2000094c
 8005270:	0800eb20 	.word	0x0800eb20
 8005274:	20000c00 	.word	0x20000c00
 8005278:	0800eb34 	.word	0x0800eb34
 800527c:	20000c24 	.word	0x20000c24
 8005280:	0800eb48 	.word	0x0800eb48
 8005284:	0800eb5c 	.word	0x0800eb5c
		} else if(dilSecim == 1) {
 8005288:	4b11      	ldr	r3, [pc, #68]	; (80052d0 <menu+0x36a4>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d109      	bne.n	80052a4 <menu+0x3678>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8005290:	4a10      	ldr	r2, [pc, #64]	; (80052d4 <menu+0x36a8>)
 8005292:	2101      	movs	r1, #1
 8005294:	2001      	movs	r0, #1
 8005296:	f7fb fb8d 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 800529a:	4a0f      	ldr	r2, [pc, #60]	; (80052d8 <menu+0x36ac>)
 800529c:	2101      	movs	r1, #1
 800529e:	2002      	movs	r0, #2
 80052a0:	f7fb fb88 	bl	80009b4 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80052a4:	2108      	movs	r1, #8
 80052a6:	480d      	ldr	r0, [pc, #52]	; (80052dc <menu+0x36b0>)
 80052a8:	f004 fff8 	bl	800a29c <HAL_GPIO_ReadPin>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d10a      	bne.n	80052c8 <menu+0x369c>
			menuGiris = 0;
 80052b2:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <menu+0x36b4>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 80052b8:	f7fb fba8 	bl	8000a0c <lcd_clear>
			HAL_Delay(500);
 80052bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80052c0:	f004 fa1c 	bl	80096fc <HAL_Delay>
			NVIC_SystemReset();
 80052c4:	f7fb fbea 	bl	8000a9c <__NVIC_SystemReset>
		}
	}
}
 80052c8:	bf00      	nop
 80052ca:	3708      	adds	r7, #8
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	20000cbe 	.word	0x20000cbe
 80052d4:	0800eb70 	.word	0x0800eb70
 80052d8:	0800eb84 	.word	0x0800eb84
 80052dc:	40010800 	.word	0x40010800
 80052e0:	20000cba 	.word	0x20000cba

080052e4 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4603      	mov	r3, r0
 80052ec:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 80052ee:	48a9      	ldr	r0, [pc, #676]	; (8005594 <loadMenuTexts+0x2b0>)
 80052f0:	f7fb fbea 	bl	8000ac8 <copyText>
 80052f4:	4603      	mov	r3, r0
 80052f6:	4aa8      	ldr	r2, [pc, #672]	; (8005598 <loadMenuTexts+0x2b4>)
 80052f8:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 80052fa:	48a8      	ldr	r0, [pc, #672]	; (800559c <loadMenuTexts+0x2b8>)
 80052fc:	f7fb fbe4 	bl	8000ac8 <copyText>
 8005300:	4603      	mov	r3, r0
 8005302:	4aa7      	ldr	r2, [pc, #668]	; (80055a0 <loadMenuTexts+0x2bc>)
 8005304:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8005306:	48a7      	ldr	r0, [pc, #668]	; (80055a4 <loadMenuTexts+0x2c0>)
 8005308:	f7fb fbde 	bl	8000ac8 <copyText>
 800530c:	4603      	mov	r3, r0
 800530e:	4aa6      	ldr	r2, [pc, #664]	; (80055a8 <loadMenuTexts+0x2c4>)
 8005310:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8005312:	48a6      	ldr	r0, [pc, #664]	; (80055ac <loadMenuTexts+0x2c8>)
 8005314:	f7fb fbd8 	bl	8000ac8 <copyText>
 8005318:	4603      	mov	r3, r0
 800531a:	4aa5      	ldr	r2, [pc, #660]	; (80055b0 <loadMenuTexts+0x2cc>)
 800531c:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 800531e:	48a5      	ldr	r0, [pc, #660]	; (80055b4 <loadMenuTexts+0x2d0>)
 8005320:	f7fb fbd2 	bl	8000ac8 <copyText>
 8005324:	4603      	mov	r3, r0
 8005326:	4aa4      	ldr	r2, [pc, #656]	; (80055b8 <loadMenuTexts+0x2d4>)
 8005328:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 800532a:	48a4      	ldr	r0, [pc, #656]	; (80055bc <loadMenuTexts+0x2d8>)
 800532c:	f7fb fbcc 	bl	8000ac8 <copyText>
 8005330:	4603      	mov	r3, r0
 8005332:	4aa3      	ldr	r2, [pc, #652]	; (80055c0 <loadMenuTexts+0x2dc>)
 8005334:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8005336:	48a3      	ldr	r0, [pc, #652]	; (80055c4 <loadMenuTexts+0x2e0>)
 8005338:	f7fb fbc6 	bl	8000ac8 <copyText>
 800533c:	4603      	mov	r3, r0
 800533e:	4aa2      	ldr	r2, [pc, #648]	; (80055c8 <loadMenuTexts+0x2e4>)
 8005340:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8005342:	79fb      	ldrb	r3, [r7, #7]
 8005344:	2b00      	cmp	r3, #0
 8005346:	f040 82d1 	bne.w	80058ec <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 800534a:	48a0      	ldr	r0, [pc, #640]	; (80055cc <loadMenuTexts+0x2e8>)
 800534c:	f7fb fbbc 	bl	8000ac8 <copyText>
 8005350:	4603      	mov	r3, r0
 8005352:	4a9f      	ldr	r2, [pc, #636]	; (80055d0 <loadMenuTexts+0x2ec>)
 8005354:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8005356:	489f      	ldr	r0, [pc, #636]	; (80055d4 <loadMenuTexts+0x2f0>)
 8005358:	f7fb fbb6 	bl	8000ac8 <copyText>
 800535c:	4603      	mov	r3, r0
 800535e:	4a9e      	ldr	r2, [pc, #632]	; (80055d8 <loadMenuTexts+0x2f4>)
 8005360:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8005362:	489e      	ldr	r0, [pc, #632]	; (80055dc <loadMenuTexts+0x2f8>)
 8005364:	f7fb fbb0 	bl	8000ac8 <copyText>
 8005368:	4603      	mov	r3, r0
 800536a:	4a9d      	ldr	r2, [pc, #628]	; (80055e0 <loadMenuTexts+0x2fc>)
 800536c:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 800536e:	489d      	ldr	r0, [pc, #628]	; (80055e4 <loadMenuTexts+0x300>)
 8005370:	f7fb fbaa 	bl	8000ac8 <copyText>
 8005374:	4603      	mov	r3, r0
 8005376:	4a9c      	ldr	r2, [pc, #624]	; (80055e8 <loadMenuTexts+0x304>)
 8005378:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 800537a:	489c      	ldr	r0, [pc, #624]	; (80055ec <loadMenuTexts+0x308>)
 800537c:	f7fb fba4 	bl	8000ac8 <copyText>
 8005380:	4603      	mov	r3, r0
 8005382:	4a9b      	ldr	r2, [pc, #620]	; (80055f0 <loadMenuTexts+0x30c>)
 8005384:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8005386:	489b      	ldr	r0, [pc, #620]	; (80055f4 <loadMenuTexts+0x310>)
 8005388:	f7fb fb9e 	bl	8000ac8 <copyText>
 800538c:	4603      	mov	r3, r0
 800538e:	4a9a      	ldr	r2, [pc, #616]	; (80055f8 <loadMenuTexts+0x314>)
 8005390:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8005392:	489a      	ldr	r0, [pc, #616]	; (80055fc <loadMenuTexts+0x318>)
 8005394:	f7fb fb98 	bl	8000ac8 <copyText>
 8005398:	4603      	mov	r3, r0
 800539a:	4a99      	ldr	r2, [pc, #612]	; (8005600 <loadMenuTexts+0x31c>)
 800539c:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 800539e:	4899      	ldr	r0, [pc, #612]	; (8005604 <loadMenuTexts+0x320>)
 80053a0:	f7fb fb92 	bl	8000ac8 <copyText>
 80053a4:	4603      	mov	r3, r0
 80053a6:	4a98      	ldr	r2, [pc, #608]	; (8005608 <loadMenuTexts+0x324>)
 80053a8:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 80053aa:	4898      	ldr	r0, [pc, #608]	; (800560c <loadMenuTexts+0x328>)
 80053ac:	f7fb fb8c 	bl	8000ac8 <copyText>
 80053b0:	4603      	mov	r3, r0
 80053b2:	4a97      	ldr	r2, [pc, #604]	; (8005610 <loadMenuTexts+0x32c>)
 80053b4:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 80053b6:	4897      	ldr	r0, [pc, #604]	; (8005614 <loadMenuTexts+0x330>)
 80053b8:	f7fb fb86 	bl	8000ac8 <copyText>
 80053bc:	4603      	mov	r3, r0
 80053be:	4a96      	ldr	r2, [pc, #600]	; (8005618 <loadMenuTexts+0x334>)
 80053c0:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 80053c2:	4896      	ldr	r0, [pc, #600]	; (800561c <loadMenuTexts+0x338>)
 80053c4:	f7fb fb80 	bl	8000ac8 <copyText>
 80053c8:	4603      	mov	r3, r0
 80053ca:	4a95      	ldr	r2, [pc, #596]	; (8005620 <loadMenuTexts+0x33c>)
 80053cc:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 80053ce:	4895      	ldr	r0, [pc, #596]	; (8005624 <loadMenuTexts+0x340>)
 80053d0:	f7fb fb7a 	bl	8000ac8 <copyText>
 80053d4:	4603      	mov	r3, r0
 80053d6:	4a94      	ldr	r2, [pc, #592]	; (8005628 <loadMenuTexts+0x344>)
 80053d8:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 80053da:	4894      	ldr	r0, [pc, #592]	; (800562c <loadMenuTexts+0x348>)
 80053dc:	f7fb fb74 	bl	8000ac8 <copyText>
 80053e0:	4603      	mov	r3, r0
 80053e2:	4a93      	ldr	r2, [pc, #588]	; (8005630 <loadMenuTexts+0x34c>)
 80053e4:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 80053e6:	4893      	ldr	r0, [pc, #588]	; (8005634 <loadMenuTexts+0x350>)
 80053e8:	f7fb fb6e 	bl	8000ac8 <copyText>
 80053ec:	4603      	mov	r3, r0
 80053ee:	4a92      	ldr	r2, [pc, #584]	; (8005638 <loadMenuTexts+0x354>)
 80053f0:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 80053f2:	4892      	ldr	r0, [pc, #584]	; (800563c <loadMenuTexts+0x358>)
 80053f4:	f7fb fb68 	bl	8000ac8 <copyText>
 80053f8:	4603      	mov	r3, r0
 80053fa:	4a91      	ldr	r2, [pc, #580]	; (8005640 <loadMenuTexts+0x35c>)
 80053fc:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 80053fe:	4891      	ldr	r0, [pc, #580]	; (8005644 <loadMenuTexts+0x360>)
 8005400:	f7fb fb62 	bl	8000ac8 <copyText>
 8005404:	4603      	mov	r3, r0
 8005406:	4a90      	ldr	r2, [pc, #576]	; (8005648 <loadMenuTexts+0x364>)
 8005408:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 800540a:	4890      	ldr	r0, [pc, #576]	; (800564c <loadMenuTexts+0x368>)
 800540c:	f7fb fb5c 	bl	8000ac8 <copyText>
 8005410:	4603      	mov	r3, r0
 8005412:	4a8f      	ldr	r2, [pc, #572]	; (8005650 <loadMenuTexts+0x36c>)
 8005414:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8005416:	488f      	ldr	r0, [pc, #572]	; (8005654 <loadMenuTexts+0x370>)
 8005418:	f7fb fb56 	bl	8000ac8 <copyText>
 800541c:	4603      	mov	r3, r0
 800541e:	4a8e      	ldr	r2, [pc, #568]	; (8005658 <loadMenuTexts+0x374>)
 8005420:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8005422:	488e      	ldr	r0, [pc, #568]	; (800565c <loadMenuTexts+0x378>)
 8005424:	f7fb fb50 	bl	8000ac8 <copyText>
 8005428:	4603      	mov	r3, r0
 800542a:	4a8d      	ldr	r2, [pc, #564]	; (8005660 <loadMenuTexts+0x37c>)
 800542c:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 800542e:	488d      	ldr	r0, [pc, #564]	; (8005664 <loadMenuTexts+0x380>)
 8005430:	f7fb fb4a 	bl	8000ac8 <copyText>
 8005434:	4603      	mov	r3, r0
 8005436:	4a8c      	ldr	r2, [pc, #560]	; (8005668 <loadMenuTexts+0x384>)
 8005438:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 800543a:	488c      	ldr	r0, [pc, #560]	; (800566c <loadMenuTexts+0x388>)
 800543c:	f7fb fb44 	bl	8000ac8 <copyText>
 8005440:	4603      	mov	r3, r0
 8005442:	4a8b      	ldr	r2, [pc, #556]	; (8005670 <loadMenuTexts+0x38c>)
 8005444:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8005446:	488b      	ldr	r0, [pc, #556]	; (8005674 <loadMenuTexts+0x390>)
 8005448:	f7fb fb3e 	bl	8000ac8 <copyText>
 800544c:	4603      	mov	r3, r0
 800544e:	4a8a      	ldr	r2, [pc, #552]	; (8005678 <loadMenuTexts+0x394>)
 8005450:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8005452:	488a      	ldr	r0, [pc, #552]	; (800567c <loadMenuTexts+0x398>)
 8005454:	f7fb fb38 	bl	8000ac8 <copyText>
 8005458:	4603      	mov	r3, r0
 800545a:	4a89      	ldr	r2, [pc, #548]	; (8005680 <loadMenuTexts+0x39c>)
 800545c:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 800545e:	4889      	ldr	r0, [pc, #548]	; (8005684 <loadMenuTexts+0x3a0>)
 8005460:	f7fb fb32 	bl	8000ac8 <copyText>
 8005464:	4603      	mov	r3, r0
 8005466:	4a88      	ldr	r2, [pc, #544]	; (8005688 <loadMenuTexts+0x3a4>)
 8005468:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 800546a:	4888      	ldr	r0, [pc, #544]	; (800568c <loadMenuTexts+0x3a8>)
 800546c:	f7fb fb2c 	bl	8000ac8 <copyText>
 8005470:	4603      	mov	r3, r0
 8005472:	4a87      	ldr	r2, [pc, #540]	; (8005690 <loadMenuTexts+0x3ac>)
 8005474:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8005476:	4887      	ldr	r0, [pc, #540]	; (8005694 <loadMenuTexts+0x3b0>)
 8005478:	f7fb fb26 	bl	8000ac8 <copyText>
 800547c:	4603      	mov	r3, r0
 800547e:	4a86      	ldr	r2, [pc, #536]	; (8005698 <loadMenuTexts+0x3b4>)
 8005480:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8005482:	4886      	ldr	r0, [pc, #536]	; (800569c <loadMenuTexts+0x3b8>)
 8005484:	f7fb fb20 	bl	8000ac8 <copyText>
 8005488:	4603      	mov	r3, r0
 800548a:	4a85      	ldr	r2, [pc, #532]	; (80056a0 <loadMenuTexts+0x3bc>)
 800548c:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 800548e:	4885      	ldr	r0, [pc, #532]	; (80056a4 <loadMenuTexts+0x3c0>)
 8005490:	f7fb fb1a 	bl	8000ac8 <copyText>
 8005494:	4603      	mov	r3, r0
 8005496:	4a84      	ldr	r2, [pc, #528]	; (80056a8 <loadMenuTexts+0x3c4>)
 8005498:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 800549a:	4884      	ldr	r0, [pc, #528]	; (80056ac <loadMenuTexts+0x3c8>)
 800549c:	f7fb fb14 	bl	8000ac8 <copyText>
 80054a0:	4603      	mov	r3, r0
 80054a2:	4a83      	ldr	r2, [pc, #524]	; (80056b0 <loadMenuTexts+0x3cc>)
 80054a4:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 80054a6:	4883      	ldr	r0, [pc, #524]	; (80056b4 <loadMenuTexts+0x3d0>)
 80054a8:	f7fb fb0e 	bl	8000ac8 <copyText>
 80054ac:	4603      	mov	r3, r0
 80054ae:	4a82      	ldr	r2, [pc, #520]	; (80056b8 <loadMenuTexts+0x3d4>)
 80054b0:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 80054b2:	4882      	ldr	r0, [pc, #520]	; (80056bc <loadMenuTexts+0x3d8>)
 80054b4:	f7fb fb08 	bl	8000ac8 <copyText>
 80054b8:	4603      	mov	r3, r0
 80054ba:	4a81      	ldr	r2, [pc, #516]	; (80056c0 <loadMenuTexts+0x3dc>)
 80054bc:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 80054be:	4881      	ldr	r0, [pc, #516]	; (80056c4 <loadMenuTexts+0x3e0>)
 80054c0:	f7fb fb02 	bl	8000ac8 <copyText>
 80054c4:	4603      	mov	r3, r0
 80054c6:	4a80      	ldr	r2, [pc, #512]	; (80056c8 <loadMenuTexts+0x3e4>)
 80054c8:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 80054ca:	4880      	ldr	r0, [pc, #512]	; (80056cc <loadMenuTexts+0x3e8>)
 80054cc:	f7fb fafc 	bl	8000ac8 <copyText>
 80054d0:	4603      	mov	r3, r0
 80054d2:	4a7f      	ldr	r2, [pc, #508]	; (80056d0 <loadMenuTexts+0x3ec>)
 80054d4:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 80054d6:	487f      	ldr	r0, [pc, #508]	; (80056d4 <loadMenuTexts+0x3f0>)
 80054d8:	f7fb faf6 	bl	8000ac8 <copyText>
 80054dc:	4603      	mov	r3, r0
 80054de:	4a7e      	ldr	r2, [pc, #504]	; (80056d8 <loadMenuTexts+0x3f4>)
 80054e0:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 80054e2:	487e      	ldr	r0, [pc, #504]	; (80056dc <loadMenuTexts+0x3f8>)
 80054e4:	f7fb faf0 	bl	8000ac8 <copyText>
 80054e8:	4603      	mov	r3, r0
 80054ea:	4a7d      	ldr	r2, [pc, #500]	; (80056e0 <loadMenuTexts+0x3fc>)
 80054ec:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 80054ee:	487d      	ldr	r0, [pc, #500]	; (80056e4 <loadMenuTexts+0x400>)
 80054f0:	f7fb faea 	bl	8000ac8 <copyText>
 80054f4:	4603      	mov	r3, r0
 80054f6:	4a7c      	ldr	r2, [pc, #496]	; (80056e8 <loadMenuTexts+0x404>)
 80054f8:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 80054fa:	487c      	ldr	r0, [pc, #496]	; (80056ec <loadMenuTexts+0x408>)
 80054fc:	f7fb fae4 	bl	8000ac8 <copyText>
 8005500:	4603      	mov	r3, r0
 8005502:	4a7b      	ldr	r2, [pc, #492]	; (80056f0 <loadMenuTexts+0x40c>)
 8005504:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8005506:	487b      	ldr	r0, [pc, #492]	; (80056f4 <loadMenuTexts+0x410>)
 8005508:	f7fb fade 	bl	8000ac8 <copyText>
 800550c:	4603      	mov	r3, r0
 800550e:	4a7a      	ldr	r2, [pc, #488]	; (80056f8 <loadMenuTexts+0x414>)
 8005510:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8005512:	487a      	ldr	r0, [pc, #488]	; (80056fc <loadMenuTexts+0x418>)
 8005514:	f7fb fad8 	bl	8000ac8 <copyText>
 8005518:	4603      	mov	r3, r0
 800551a:	4a79      	ldr	r2, [pc, #484]	; (8005700 <loadMenuTexts+0x41c>)
 800551c:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 800551e:	4879      	ldr	r0, [pc, #484]	; (8005704 <loadMenuTexts+0x420>)
 8005520:	f7fb fad2 	bl	8000ac8 <copyText>
 8005524:	4603      	mov	r3, r0
 8005526:	4a78      	ldr	r2, [pc, #480]	; (8005708 <loadMenuTexts+0x424>)
 8005528:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 800552a:	4878      	ldr	r0, [pc, #480]	; (800570c <loadMenuTexts+0x428>)
 800552c:	f7fb facc 	bl	8000ac8 <copyText>
 8005530:	4603      	mov	r3, r0
 8005532:	4a77      	ldr	r2, [pc, #476]	; (8005710 <loadMenuTexts+0x42c>)
 8005534:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8005536:	4877      	ldr	r0, [pc, #476]	; (8005714 <loadMenuTexts+0x430>)
 8005538:	f7fb fac6 	bl	8000ac8 <copyText>
 800553c:	4603      	mov	r3, r0
 800553e:	4a76      	ldr	r2, [pc, #472]	; (8005718 <loadMenuTexts+0x434>)
 8005540:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8005542:	4876      	ldr	r0, [pc, #472]	; (800571c <loadMenuTexts+0x438>)
 8005544:	f7fb fac0 	bl	8000ac8 <copyText>
 8005548:	4603      	mov	r3, r0
 800554a:	4a75      	ldr	r2, [pc, #468]	; (8005720 <loadMenuTexts+0x43c>)
 800554c:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 800554e:	4875      	ldr	r0, [pc, #468]	; (8005724 <loadMenuTexts+0x440>)
 8005550:	f7fb faba 	bl	8000ac8 <copyText>
 8005554:	4603      	mov	r3, r0
 8005556:	4a74      	ldr	r2, [pc, #464]	; (8005728 <loadMenuTexts+0x444>)
 8005558:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 800555a:	4874      	ldr	r0, [pc, #464]	; (800572c <loadMenuTexts+0x448>)
 800555c:	f7fb fab4 	bl	8000ac8 <copyText>
 8005560:	4603      	mov	r3, r0
 8005562:	4a73      	ldr	r2, [pc, #460]	; (8005730 <loadMenuTexts+0x44c>)
 8005564:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8005566:	4873      	ldr	r0, [pc, #460]	; (8005734 <loadMenuTexts+0x450>)
 8005568:	f7fb faae 	bl	8000ac8 <copyText>
 800556c:	4603      	mov	r3, r0
 800556e:	4a72      	ldr	r2, [pc, #456]	; (8005738 <loadMenuTexts+0x454>)
 8005570:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8005572:	4872      	ldr	r0, [pc, #456]	; (800573c <loadMenuTexts+0x458>)
 8005574:	f7fb faa8 	bl	8000ac8 <copyText>
 8005578:	4603      	mov	r3, r0
 800557a:	4a71      	ldr	r2, [pc, #452]	; (8005740 <loadMenuTexts+0x45c>)
 800557c:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 800557e:	4871      	ldr	r0, [pc, #452]	; (8005744 <loadMenuTexts+0x460>)
 8005580:	f7fb faa2 	bl	8000ac8 <copyText>
 8005584:	4603      	mov	r3, r0
 8005586:	4a70      	ldr	r2, [pc, #448]	; (8005748 <loadMenuTexts+0x464>)
 8005588:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 800558a:	4870      	ldr	r0, [pc, #448]	; (800574c <loadMenuTexts+0x468>)
 800558c:	f7fb fa9c 	bl	8000ac8 <copyText>
 8005590:	4603      	mov	r3, r0
 8005592:	e0dd      	b.n	8005750 <loadMenuTexts+0x46c>
 8005594:	20000000 	.word	0x20000000
 8005598:	20000d04 	.word	0x20000d04
 800559c:	20000010 	.word	0x20000010
 80055a0:	20000d08 	.word	0x20000d08
 80055a4:	20000020 	.word	0x20000020
 80055a8:	20000d60 	.word	0x20000d60
 80055ac:	20000030 	.word	0x20000030
 80055b0:	20000d90 	.word	0x20000d90
 80055b4:	20000040 	.word	0x20000040
 80055b8:	20000d98 	.word	0x20000d98
 80055bc:	20000050 	.word	0x20000050
 80055c0:	20000e10 	.word	0x20000e10
 80055c4:	20000060 	.word	0x20000060
 80055c8:	20000e14 	.word	0x20000e14
 80055cc:	20000070 	.word	0x20000070
 80055d0:	20000d0c 	.word	0x20000d0c
 80055d4:	20000080 	.word	0x20000080
 80055d8:	20000d10 	.word	0x20000d10
 80055dc:	20000090 	.word	0x20000090
 80055e0:	20000d14 	.word	0x20000d14
 80055e4:	200000a0 	.word	0x200000a0
 80055e8:	20000d18 	.word	0x20000d18
 80055ec:	200000b0 	.word	0x200000b0
 80055f0:	20000d1c 	.word	0x20000d1c
 80055f4:	200000c0 	.word	0x200000c0
 80055f8:	20000d20 	.word	0x20000d20
 80055fc:	200000d0 	.word	0x200000d0
 8005600:	20000d24 	.word	0x20000d24
 8005604:	200000e0 	.word	0x200000e0
 8005608:	20000d28 	.word	0x20000d28
 800560c:	200000f0 	.word	0x200000f0
 8005610:	20000d2c 	.word	0x20000d2c
 8005614:	20000100 	.word	0x20000100
 8005618:	20000d30 	.word	0x20000d30
 800561c:	20000110 	.word	0x20000110
 8005620:	20000d34 	.word	0x20000d34
 8005624:	20000120 	.word	0x20000120
 8005628:	20000d38 	.word	0x20000d38
 800562c:	20000130 	.word	0x20000130
 8005630:	20000d3c 	.word	0x20000d3c
 8005634:	20000140 	.word	0x20000140
 8005638:	20000d40 	.word	0x20000d40
 800563c:	20000150 	.word	0x20000150
 8005640:	20000d44 	.word	0x20000d44
 8005644:	20000160 	.word	0x20000160
 8005648:	20000d48 	.word	0x20000d48
 800564c:	20000170 	.word	0x20000170
 8005650:	20000d4c 	.word	0x20000d4c
 8005654:	20000180 	.word	0x20000180
 8005658:	20000d50 	.word	0x20000d50
 800565c:	20000190 	.word	0x20000190
 8005660:	20000d54 	.word	0x20000d54
 8005664:	200001a0 	.word	0x200001a0
 8005668:	20000d58 	.word	0x20000d58
 800566c:	200001b0 	.word	0x200001b0
 8005670:	20000d5c 	.word	0x20000d5c
 8005674:	200001c0 	.word	0x200001c0
 8005678:	20000d64 	.word	0x20000d64
 800567c:	200001d0 	.word	0x200001d0
 8005680:	20000d68 	.word	0x20000d68
 8005684:	200001e0 	.word	0x200001e0
 8005688:	20000d6c 	.word	0x20000d6c
 800568c:	200001f0 	.word	0x200001f0
 8005690:	20000d70 	.word	0x20000d70
 8005694:	20000200 	.word	0x20000200
 8005698:	20000d74 	.word	0x20000d74
 800569c:	20000210 	.word	0x20000210
 80056a0:	20000d78 	.word	0x20000d78
 80056a4:	20000220 	.word	0x20000220
 80056a8:	20000d7c 	.word	0x20000d7c
 80056ac:	20000230 	.word	0x20000230
 80056b0:	20000d80 	.word	0x20000d80
 80056b4:	20000240 	.word	0x20000240
 80056b8:	20000d84 	.word	0x20000d84
 80056bc:	20000250 	.word	0x20000250
 80056c0:	20000d88 	.word	0x20000d88
 80056c4:	20000260 	.word	0x20000260
 80056c8:	20000d8c 	.word	0x20000d8c
 80056cc:	20000270 	.word	0x20000270
 80056d0:	20000d94 	.word	0x20000d94
 80056d4:	20000280 	.word	0x20000280
 80056d8:	20000d9c 	.word	0x20000d9c
 80056dc:	20000290 	.word	0x20000290
 80056e0:	20000da0 	.word	0x20000da0
 80056e4:	200002a0 	.word	0x200002a0
 80056e8:	20000da4 	.word	0x20000da4
 80056ec:	200002b0 	.word	0x200002b0
 80056f0:	20000da8 	.word	0x20000da8
 80056f4:	200002c0 	.word	0x200002c0
 80056f8:	20000dac 	.word	0x20000dac
 80056fc:	200002d0 	.word	0x200002d0
 8005700:	20000db0 	.word	0x20000db0
 8005704:	200002e0 	.word	0x200002e0
 8005708:	20000db4 	.word	0x20000db4
 800570c:	200002f0 	.word	0x200002f0
 8005710:	20000db8 	.word	0x20000db8
 8005714:	20000300 	.word	0x20000300
 8005718:	20000dbc 	.word	0x20000dbc
 800571c:	20000310 	.word	0x20000310
 8005720:	20000dc0 	.word	0x20000dc0
 8005724:	20000320 	.word	0x20000320
 8005728:	20000dc4 	.word	0x20000dc4
 800572c:	20000330 	.word	0x20000330
 8005730:	20000dc8 	.word	0x20000dc8
 8005734:	20000340 	.word	0x20000340
 8005738:	20000dcc 	.word	0x20000dcc
 800573c:	20000350 	.word	0x20000350
 8005740:	20000dd0 	.word	0x20000dd0
 8005744:	20000360 	.word	0x20000360
 8005748:	20000dd4 	.word	0x20000dd4
 800574c:	20000370 	.word	0x20000370
 8005750:	4a3d      	ldr	r2, [pc, #244]	; (8005848 <loadMenuTexts+0x564>)
 8005752:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8005754:	483d      	ldr	r0, [pc, #244]	; (800584c <loadMenuTexts+0x568>)
 8005756:	f7fb f9b7 	bl	8000ac8 <copyText>
 800575a:	4603      	mov	r3, r0
 800575c:	4a3c      	ldr	r2, [pc, #240]	; (8005850 <loadMenuTexts+0x56c>)
 800575e:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8005760:	483c      	ldr	r0, [pc, #240]	; (8005854 <loadMenuTexts+0x570>)
 8005762:	f7fb f9b1 	bl	8000ac8 <copyText>
 8005766:	4603      	mov	r3, r0
 8005768:	4a3b      	ldr	r2, [pc, #236]	; (8005858 <loadMenuTexts+0x574>)
 800576a:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 800576c:	483b      	ldr	r0, [pc, #236]	; (800585c <loadMenuTexts+0x578>)
 800576e:	f7fb f9ab 	bl	8000ac8 <copyText>
 8005772:	4603      	mov	r3, r0
 8005774:	4a3a      	ldr	r2, [pc, #232]	; (8005860 <loadMenuTexts+0x57c>)
 8005776:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8005778:	483a      	ldr	r0, [pc, #232]	; (8005864 <loadMenuTexts+0x580>)
 800577a:	f7fb f9a5 	bl	8000ac8 <copyText>
 800577e:	4603      	mov	r3, r0
 8005780:	4a39      	ldr	r2, [pc, #228]	; (8005868 <loadMenuTexts+0x584>)
 8005782:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8005784:	4839      	ldr	r0, [pc, #228]	; (800586c <loadMenuTexts+0x588>)
 8005786:	f7fb f99f 	bl	8000ac8 <copyText>
 800578a:	4603      	mov	r3, r0
 800578c:	4a38      	ldr	r2, [pc, #224]	; (8005870 <loadMenuTexts+0x58c>)
 800578e:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8005790:	4838      	ldr	r0, [pc, #224]	; (8005874 <loadMenuTexts+0x590>)
 8005792:	f7fb f999 	bl	8000ac8 <copyText>
 8005796:	4603      	mov	r3, r0
 8005798:	4a37      	ldr	r2, [pc, #220]	; (8005878 <loadMenuTexts+0x594>)
 800579a:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 800579c:	4837      	ldr	r0, [pc, #220]	; (800587c <loadMenuTexts+0x598>)
 800579e:	f7fb f993 	bl	8000ac8 <copyText>
 80057a2:	4603      	mov	r3, r0
 80057a4:	4a36      	ldr	r2, [pc, #216]	; (8005880 <loadMenuTexts+0x59c>)
 80057a6:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 80057a8:	4836      	ldr	r0, [pc, #216]	; (8005884 <loadMenuTexts+0x5a0>)
 80057aa:	f7fb f98d 	bl	8000ac8 <copyText>
 80057ae:	4603      	mov	r3, r0
 80057b0:	4a35      	ldr	r2, [pc, #212]	; (8005888 <loadMenuTexts+0x5a4>)
 80057b2:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 80057b4:	4835      	ldr	r0, [pc, #212]	; (800588c <loadMenuTexts+0x5a8>)
 80057b6:	f7fb f987 	bl	8000ac8 <copyText>
 80057ba:	4603      	mov	r3, r0
 80057bc:	4a34      	ldr	r2, [pc, #208]	; (8005890 <loadMenuTexts+0x5ac>)
 80057be:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 80057c0:	4834      	ldr	r0, [pc, #208]	; (8005894 <loadMenuTexts+0x5b0>)
 80057c2:	f7fb f981 	bl	8000ac8 <copyText>
 80057c6:	4603      	mov	r3, r0
 80057c8:	4a33      	ldr	r2, [pc, #204]	; (8005898 <loadMenuTexts+0x5b4>)
 80057ca:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 80057cc:	4833      	ldr	r0, [pc, #204]	; (800589c <loadMenuTexts+0x5b8>)
 80057ce:	f7fb f97b 	bl	8000ac8 <copyText>
 80057d2:	4603      	mov	r3, r0
 80057d4:	4a32      	ldr	r2, [pc, #200]	; (80058a0 <loadMenuTexts+0x5bc>)
 80057d6:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 80057d8:	4832      	ldr	r0, [pc, #200]	; (80058a4 <loadMenuTexts+0x5c0>)
 80057da:	f7fb f975 	bl	8000ac8 <copyText>
 80057de:	4603      	mov	r3, r0
 80057e0:	4a31      	ldr	r2, [pc, #196]	; (80058a8 <loadMenuTexts+0x5c4>)
 80057e2:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 80057e4:	4831      	ldr	r0, [pc, #196]	; (80058ac <loadMenuTexts+0x5c8>)
 80057e6:	f7fb f96f 	bl	8000ac8 <copyText>
 80057ea:	4603      	mov	r3, r0
 80057ec:	4a30      	ldr	r2, [pc, #192]	; (80058b0 <loadMenuTexts+0x5cc>)
 80057ee:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 80057f0:	4830      	ldr	r0, [pc, #192]	; (80058b4 <loadMenuTexts+0x5d0>)
 80057f2:	f7fb f969 	bl	8000ac8 <copyText>
 80057f6:	4603      	mov	r3, r0
 80057f8:	4a2f      	ldr	r2, [pc, #188]	; (80058b8 <loadMenuTexts+0x5d4>)
 80057fa:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 80057fc:	482f      	ldr	r0, [pc, #188]	; (80058bc <loadMenuTexts+0x5d8>)
 80057fe:	f7fb f963 	bl	8000ac8 <copyText>
 8005802:	4603      	mov	r3, r0
 8005804:	4a2e      	ldr	r2, [pc, #184]	; (80058c0 <loadMenuTexts+0x5dc>)
 8005806:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8005808:	482e      	ldr	r0, [pc, #184]	; (80058c4 <loadMenuTexts+0x5e0>)
 800580a:	f7fb f95d 	bl	8000ac8 <copyText>
 800580e:	4603      	mov	r3, r0
 8005810:	4a2d      	ldr	r2, [pc, #180]	; (80058c8 <loadMenuTexts+0x5e4>)
 8005812:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8005814:	482d      	ldr	r0, [pc, #180]	; (80058cc <loadMenuTexts+0x5e8>)
 8005816:	f7fb f957 	bl	8000ac8 <copyText>
 800581a:	4603      	mov	r3, r0
 800581c:	4a2c      	ldr	r2, [pc, #176]	; (80058d0 <loadMenuTexts+0x5ec>)
 800581e:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8005820:	482c      	ldr	r0, [pc, #176]	; (80058d4 <loadMenuTexts+0x5f0>)
 8005822:	f7fb f951 	bl	8000ac8 <copyText>
 8005826:	4603      	mov	r3, r0
 8005828:	4a2b      	ldr	r2, [pc, #172]	; (80058d8 <loadMenuTexts+0x5f4>)
 800582a:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 800582c:	482b      	ldr	r0, [pc, #172]	; (80058dc <loadMenuTexts+0x5f8>)
 800582e:	f7fb f94b 	bl	8000ac8 <copyText>
 8005832:	4603      	mov	r3, r0
 8005834:	4a2a      	ldr	r2, [pc, #168]	; (80058e0 <loadMenuTexts+0x5fc>)
 8005836:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 8005838:	482a      	ldr	r0, [pc, #168]	; (80058e4 <loadMenuTexts+0x600>)
 800583a:	f7fb f945 	bl	8000ac8 <copyText>
 800583e:	4603      	mov	r3, r0
 8005840:	4a29      	ldr	r2, [pc, #164]	; (80058e8 <loadMenuTexts+0x604>)
 8005842:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8005844:	e2d3      	b.n	8005dee <loadMenuTexts+0xb0a>
 8005846:	bf00      	nop
 8005848:	20000dd8 	.word	0x20000dd8
 800584c:	20000380 	.word	0x20000380
 8005850:	20000ddc 	.word	0x20000ddc
 8005854:	20000390 	.word	0x20000390
 8005858:	20000de0 	.word	0x20000de0
 800585c:	200003a0 	.word	0x200003a0
 8005860:	20000de4 	.word	0x20000de4
 8005864:	200003b0 	.word	0x200003b0
 8005868:	20000de8 	.word	0x20000de8
 800586c:	200003c0 	.word	0x200003c0
 8005870:	20000dec 	.word	0x20000dec
 8005874:	200003d0 	.word	0x200003d0
 8005878:	20000df0 	.word	0x20000df0
 800587c:	200003e0 	.word	0x200003e0
 8005880:	20000df4 	.word	0x20000df4
 8005884:	200003f0 	.word	0x200003f0
 8005888:	20000df8 	.word	0x20000df8
 800588c:	20000400 	.word	0x20000400
 8005890:	20000dfc 	.word	0x20000dfc
 8005894:	20000410 	.word	0x20000410
 8005898:	20000e00 	.word	0x20000e00
 800589c:	20000420 	.word	0x20000420
 80058a0:	20000e04 	.word	0x20000e04
 80058a4:	20000430 	.word	0x20000430
 80058a8:	20000e08 	.word	0x20000e08
 80058ac:	20000440 	.word	0x20000440
 80058b0:	20000e0c 	.word	0x20000e0c
 80058b4:	20000450 	.word	0x20000450
 80058b8:	20000e18 	.word	0x20000e18
 80058bc:	20000460 	.word	0x20000460
 80058c0:	20000e1c 	.word	0x20000e1c
 80058c4:	20000470 	.word	0x20000470
 80058c8:	20000e20 	.word	0x20000e20
 80058cc:	20000480 	.word	0x20000480
 80058d0:	20000e24 	.word	0x20000e24
 80058d4:	20000490 	.word	0x20000490
 80058d8:	20000e28 	.word	0x20000e28
 80058dc:	200004a0 	.word	0x200004a0
 80058e0:	20000e2c 	.word	0x20000e2c
 80058e4:	200004b0 	.word	0x200004b0
 80058e8:	20000e30 	.word	0x20000e30
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 80058ec:	48a9      	ldr	r0, [pc, #676]	; (8005b94 <loadMenuTexts+0x8b0>)
 80058ee:	f7fb f8eb 	bl	8000ac8 <copyText>
 80058f2:	4603      	mov	r3, r0
 80058f4:	4aa8      	ldr	r2, [pc, #672]	; (8005b98 <loadMenuTexts+0x8b4>)
 80058f6:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 80058f8:	48a8      	ldr	r0, [pc, #672]	; (8005b9c <loadMenuTexts+0x8b8>)
 80058fa:	f7fb f8e5 	bl	8000ac8 <copyText>
 80058fe:	4603      	mov	r3, r0
 8005900:	4aa7      	ldr	r2, [pc, #668]	; (8005ba0 <loadMenuTexts+0x8bc>)
 8005902:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8005904:	48a7      	ldr	r0, [pc, #668]	; (8005ba4 <loadMenuTexts+0x8c0>)
 8005906:	f7fb f8df 	bl	8000ac8 <copyText>
 800590a:	4603      	mov	r3, r0
 800590c:	4aa6      	ldr	r2, [pc, #664]	; (8005ba8 <loadMenuTexts+0x8c4>)
 800590e:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8005910:	48a6      	ldr	r0, [pc, #664]	; (8005bac <loadMenuTexts+0x8c8>)
 8005912:	f7fb f8d9 	bl	8000ac8 <copyText>
 8005916:	4603      	mov	r3, r0
 8005918:	4aa5      	ldr	r2, [pc, #660]	; (8005bb0 <loadMenuTexts+0x8cc>)
 800591a:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 800591c:	48a5      	ldr	r0, [pc, #660]	; (8005bb4 <loadMenuTexts+0x8d0>)
 800591e:	f7fb f8d3 	bl	8000ac8 <copyText>
 8005922:	4603      	mov	r3, r0
 8005924:	4aa4      	ldr	r2, [pc, #656]	; (8005bb8 <loadMenuTexts+0x8d4>)
 8005926:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 8005928:	48a4      	ldr	r0, [pc, #656]	; (8005bbc <loadMenuTexts+0x8d8>)
 800592a:	f7fb f8cd 	bl	8000ac8 <copyText>
 800592e:	4603      	mov	r3, r0
 8005930:	4aa3      	ldr	r2, [pc, #652]	; (8005bc0 <loadMenuTexts+0x8dc>)
 8005932:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 8005934:	48a3      	ldr	r0, [pc, #652]	; (8005bc4 <loadMenuTexts+0x8e0>)
 8005936:	f7fb f8c7 	bl	8000ac8 <copyText>
 800593a:	4603      	mov	r3, r0
 800593c:	4aa2      	ldr	r2, [pc, #648]	; (8005bc8 <loadMenuTexts+0x8e4>)
 800593e:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8005940:	48a2      	ldr	r0, [pc, #648]	; (8005bcc <loadMenuTexts+0x8e8>)
 8005942:	f7fb f8c1 	bl	8000ac8 <copyText>
 8005946:	4603      	mov	r3, r0
 8005948:	4aa1      	ldr	r2, [pc, #644]	; (8005bd0 <loadMenuTexts+0x8ec>)
 800594a:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 800594c:	48a1      	ldr	r0, [pc, #644]	; (8005bd4 <loadMenuTexts+0x8f0>)
 800594e:	f7fb f8bb 	bl	8000ac8 <copyText>
 8005952:	4603      	mov	r3, r0
 8005954:	4aa0      	ldr	r2, [pc, #640]	; (8005bd8 <loadMenuTexts+0x8f4>)
 8005956:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 8005958:	48a0      	ldr	r0, [pc, #640]	; (8005bdc <loadMenuTexts+0x8f8>)
 800595a:	f7fb f8b5 	bl	8000ac8 <copyText>
 800595e:	4603      	mov	r3, r0
 8005960:	4a9f      	ldr	r2, [pc, #636]	; (8005be0 <loadMenuTexts+0x8fc>)
 8005962:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 8005964:	489f      	ldr	r0, [pc, #636]	; (8005be4 <loadMenuTexts+0x900>)
 8005966:	f7fb f8af 	bl	8000ac8 <copyText>
 800596a:	4603      	mov	r3, r0
 800596c:	4a9e      	ldr	r2, [pc, #632]	; (8005be8 <loadMenuTexts+0x904>)
 800596e:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8005970:	489e      	ldr	r0, [pc, #632]	; (8005bec <loadMenuTexts+0x908>)
 8005972:	f7fb f8a9 	bl	8000ac8 <copyText>
 8005976:	4603      	mov	r3, r0
 8005978:	4a9d      	ldr	r2, [pc, #628]	; (8005bf0 <loadMenuTexts+0x90c>)
 800597a:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 800597c:	489d      	ldr	r0, [pc, #628]	; (8005bf4 <loadMenuTexts+0x910>)
 800597e:	f7fb f8a3 	bl	8000ac8 <copyText>
 8005982:	4603      	mov	r3, r0
 8005984:	4a9c      	ldr	r2, [pc, #624]	; (8005bf8 <loadMenuTexts+0x914>)
 8005986:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8005988:	489c      	ldr	r0, [pc, #624]	; (8005bfc <loadMenuTexts+0x918>)
 800598a:	f7fb f89d 	bl	8000ac8 <copyText>
 800598e:	4603      	mov	r3, r0
 8005990:	4a9b      	ldr	r2, [pc, #620]	; (8005c00 <loadMenuTexts+0x91c>)
 8005992:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8005994:	489b      	ldr	r0, [pc, #620]	; (8005c04 <loadMenuTexts+0x920>)
 8005996:	f7fb f897 	bl	8000ac8 <copyText>
 800599a:	4603      	mov	r3, r0
 800599c:	4a9a      	ldr	r2, [pc, #616]	; (8005c08 <loadMenuTexts+0x924>)
 800599e:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 80059a0:	489a      	ldr	r0, [pc, #616]	; (8005c0c <loadMenuTexts+0x928>)
 80059a2:	f7fb f891 	bl	8000ac8 <copyText>
 80059a6:	4603      	mov	r3, r0
 80059a8:	4a99      	ldr	r2, [pc, #612]	; (8005c10 <loadMenuTexts+0x92c>)
 80059aa:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 80059ac:	4899      	ldr	r0, [pc, #612]	; (8005c14 <loadMenuTexts+0x930>)
 80059ae:	f7fb f88b 	bl	8000ac8 <copyText>
 80059b2:	4603      	mov	r3, r0
 80059b4:	4a98      	ldr	r2, [pc, #608]	; (8005c18 <loadMenuTexts+0x934>)
 80059b6:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 80059b8:	4898      	ldr	r0, [pc, #608]	; (8005c1c <loadMenuTexts+0x938>)
 80059ba:	f7fb f885 	bl	8000ac8 <copyText>
 80059be:	4603      	mov	r3, r0
 80059c0:	4a97      	ldr	r2, [pc, #604]	; (8005c20 <loadMenuTexts+0x93c>)
 80059c2:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 80059c4:	4897      	ldr	r0, [pc, #604]	; (8005c24 <loadMenuTexts+0x940>)
 80059c6:	f7fb f87f 	bl	8000ac8 <copyText>
 80059ca:	4603      	mov	r3, r0
 80059cc:	4a96      	ldr	r2, [pc, #600]	; (8005c28 <loadMenuTexts+0x944>)
 80059ce:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 80059d0:	4896      	ldr	r0, [pc, #600]	; (8005c2c <loadMenuTexts+0x948>)
 80059d2:	f7fb f879 	bl	8000ac8 <copyText>
 80059d6:	4603      	mov	r3, r0
 80059d8:	4a95      	ldr	r2, [pc, #596]	; (8005c30 <loadMenuTexts+0x94c>)
 80059da:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 80059dc:	4895      	ldr	r0, [pc, #596]	; (8005c34 <loadMenuTexts+0x950>)
 80059de:	f7fb f873 	bl	8000ac8 <copyText>
 80059e2:	4603      	mov	r3, r0
 80059e4:	4a94      	ldr	r2, [pc, #592]	; (8005c38 <loadMenuTexts+0x954>)
 80059e6:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 80059e8:	4894      	ldr	r0, [pc, #592]	; (8005c3c <loadMenuTexts+0x958>)
 80059ea:	f7fb f86d 	bl	8000ac8 <copyText>
 80059ee:	4603      	mov	r3, r0
 80059f0:	4a93      	ldr	r2, [pc, #588]	; (8005c40 <loadMenuTexts+0x95c>)
 80059f2:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 80059f4:	4893      	ldr	r0, [pc, #588]	; (8005c44 <loadMenuTexts+0x960>)
 80059f6:	f7fb f867 	bl	8000ac8 <copyText>
 80059fa:	4603      	mov	r3, r0
 80059fc:	4a92      	ldr	r2, [pc, #584]	; (8005c48 <loadMenuTexts+0x964>)
 80059fe:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8005a00:	4892      	ldr	r0, [pc, #584]	; (8005c4c <loadMenuTexts+0x968>)
 8005a02:	f7fb f861 	bl	8000ac8 <copyText>
 8005a06:	4603      	mov	r3, r0
 8005a08:	4a91      	ldr	r2, [pc, #580]	; (8005c50 <loadMenuTexts+0x96c>)
 8005a0a:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8005a0c:	4891      	ldr	r0, [pc, #580]	; (8005c54 <loadMenuTexts+0x970>)
 8005a0e:	f7fb f85b 	bl	8000ac8 <copyText>
 8005a12:	4603      	mov	r3, r0
 8005a14:	4a90      	ldr	r2, [pc, #576]	; (8005c58 <loadMenuTexts+0x974>)
 8005a16:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8005a18:	4890      	ldr	r0, [pc, #576]	; (8005c5c <loadMenuTexts+0x978>)
 8005a1a:	f7fb f855 	bl	8000ac8 <copyText>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	4a8f      	ldr	r2, [pc, #572]	; (8005c60 <loadMenuTexts+0x97c>)
 8005a22:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 8005a24:	488f      	ldr	r0, [pc, #572]	; (8005c64 <loadMenuTexts+0x980>)
 8005a26:	f7fb f84f 	bl	8000ac8 <copyText>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	4a8e      	ldr	r2, [pc, #568]	; (8005c68 <loadMenuTexts+0x984>)
 8005a2e:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 8005a30:	488e      	ldr	r0, [pc, #568]	; (8005c6c <loadMenuTexts+0x988>)
 8005a32:	f7fb f849 	bl	8000ac8 <copyText>
 8005a36:	4603      	mov	r3, r0
 8005a38:	4a8d      	ldr	r2, [pc, #564]	; (8005c70 <loadMenuTexts+0x98c>)
 8005a3a:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8005a3c:	488d      	ldr	r0, [pc, #564]	; (8005c74 <loadMenuTexts+0x990>)
 8005a3e:	f7fb f843 	bl	8000ac8 <copyText>
 8005a42:	4603      	mov	r3, r0
 8005a44:	4a8c      	ldr	r2, [pc, #560]	; (8005c78 <loadMenuTexts+0x994>)
 8005a46:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 8005a48:	488c      	ldr	r0, [pc, #560]	; (8005c7c <loadMenuTexts+0x998>)
 8005a4a:	f7fb f83d 	bl	8000ac8 <copyText>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	4a8b      	ldr	r2, [pc, #556]	; (8005c80 <loadMenuTexts+0x99c>)
 8005a52:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8005a54:	488b      	ldr	r0, [pc, #556]	; (8005c84 <loadMenuTexts+0x9a0>)
 8005a56:	f7fb f837 	bl	8000ac8 <copyText>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	4a8a      	ldr	r2, [pc, #552]	; (8005c88 <loadMenuTexts+0x9a4>)
 8005a5e:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8005a60:	488a      	ldr	r0, [pc, #552]	; (8005c8c <loadMenuTexts+0x9a8>)
 8005a62:	f7fb f831 	bl	8000ac8 <copyText>
 8005a66:	4603      	mov	r3, r0
 8005a68:	4a89      	ldr	r2, [pc, #548]	; (8005c90 <loadMenuTexts+0x9ac>)
 8005a6a:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8005a6c:	4889      	ldr	r0, [pc, #548]	; (8005c94 <loadMenuTexts+0x9b0>)
 8005a6e:	f7fb f82b 	bl	8000ac8 <copyText>
 8005a72:	4603      	mov	r3, r0
 8005a74:	4a88      	ldr	r2, [pc, #544]	; (8005c98 <loadMenuTexts+0x9b4>)
 8005a76:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 8005a78:	4888      	ldr	r0, [pc, #544]	; (8005c9c <loadMenuTexts+0x9b8>)
 8005a7a:	f7fb f825 	bl	8000ac8 <copyText>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	4a87      	ldr	r2, [pc, #540]	; (8005ca0 <loadMenuTexts+0x9bc>)
 8005a82:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 8005a84:	4887      	ldr	r0, [pc, #540]	; (8005ca4 <loadMenuTexts+0x9c0>)
 8005a86:	f7fb f81f 	bl	8000ac8 <copyText>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	4a86      	ldr	r2, [pc, #536]	; (8005ca8 <loadMenuTexts+0x9c4>)
 8005a8e:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8005a90:	4886      	ldr	r0, [pc, #536]	; (8005cac <loadMenuTexts+0x9c8>)
 8005a92:	f7fb f819 	bl	8000ac8 <copyText>
 8005a96:	4603      	mov	r3, r0
 8005a98:	4a85      	ldr	r2, [pc, #532]	; (8005cb0 <loadMenuTexts+0x9cc>)
 8005a9a:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8005a9c:	4885      	ldr	r0, [pc, #532]	; (8005cb4 <loadMenuTexts+0x9d0>)
 8005a9e:	f7fb f813 	bl	8000ac8 <copyText>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	4a84      	ldr	r2, [pc, #528]	; (8005cb8 <loadMenuTexts+0x9d4>)
 8005aa6:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8005aa8:	4884      	ldr	r0, [pc, #528]	; (8005cbc <loadMenuTexts+0x9d8>)
 8005aaa:	f7fb f80d 	bl	8000ac8 <copyText>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	4a83      	ldr	r2, [pc, #524]	; (8005cc0 <loadMenuTexts+0x9dc>)
 8005ab2:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 8005ab4:	4883      	ldr	r0, [pc, #524]	; (8005cc4 <loadMenuTexts+0x9e0>)
 8005ab6:	f7fb f807 	bl	8000ac8 <copyText>
 8005aba:	4603      	mov	r3, r0
 8005abc:	4a82      	ldr	r2, [pc, #520]	; (8005cc8 <loadMenuTexts+0x9e4>)
 8005abe:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8005ac0:	4882      	ldr	r0, [pc, #520]	; (8005ccc <loadMenuTexts+0x9e8>)
 8005ac2:	f7fb f801 	bl	8000ac8 <copyText>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	4a81      	ldr	r2, [pc, #516]	; (8005cd0 <loadMenuTexts+0x9ec>)
 8005aca:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 8005acc:	4881      	ldr	r0, [pc, #516]	; (8005cd4 <loadMenuTexts+0x9f0>)
 8005ace:	f7fa fffb 	bl	8000ac8 <copyText>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	4a80      	ldr	r2, [pc, #512]	; (8005cd8 <loadMenuTexts+0x9f4>)
 8005ad6:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 8005ad8:	4880      	ldr	r0, [pc, #512]	; (8005cdc <loadMenuTexts+0x9f8>)
 8005ada:	f7fa fff5 	bl	8000ac8 <copyText>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	4a7f      	ldr	r2, [pc, #508]	; (8005ce0 <loadMenuTexts+0x9fc>)
 8005ae2:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 8005ae4:	487f      	ldr	r0, [pc, #508]	; (8005ce4 <loadMenuTexts+0xa00>)
 8005ae6:	f7fa ffef 	bl	8000ac8 <copyText>
 8005aea:	4603      	mov	r3, r0
 8005aec:	4a7e      	ldr	r2, [pc, #504]	; (8005ce8 <loadMenuTexts+0xa04>)
 8005aee:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 8005af0:	487e      	ldr	r0, [pc, #504]	; (8005cec <loadMenuTexts+0xa08>)
 8005af2:	f7fa ffe9 	bl	8000ac8 <copyText>
 8005af6:	4603      	mov	r3, r0
 8005af8:	4a7d      	ldr	r2, [pc, #500]	; (8005cf0 <loadMenuTexts+0xa0c>)
 8005afa:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 8005afc:	487d      	ldr	r0, [pc, #500]	; (8005cf4 <loadMenuTexts+0xa10>)
 8005afe:	f7fa ffe3 	bl	8000ac8 <copyText>
 8005b02:	4603      	mov	r3, r0
 8005b04:	4a7c      	ldr	r2, [pc, #496]	; (8005cf8 <loadMenuTexts+0xa14>)
 8005b06:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 8005b08:	487c      	ldr	r0, [pc, #496]	; (8005cfc <loadMenuTexts+0xa18>)
 8005b0a:	f7fa ffdd 	bl	8000ac8 <copyText>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	4a7b      	ldr	r2, [pc, #492]	; (8005d00 <loadMenuTexts+0xa1c>)
 8005b12:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 8005b14:	487b      	ldr	r0, [pc, #492]	; (8005d04 <loadMenuTexts+0xa20>)
 8005b16:	f7fa ffd7 	bl	8000ac8 <copyText>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	4a7a      	ldr	r2, [pc, #488]	; (8005d08 <loadMenuTexts+0xa24>)
 8005b1e:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 8005b20:	487a      	ldr	r0, [pc, #488]	; (8005d0c <loadMenuTexts+0xa28>)
 8005b22:	f7fa ffd1 	bl	8000ac8 <copyText>
 8005b26:	4603      	mov	r3, r0
 8005b28:	4a79      	ldr	r2, [pc, #484]	; (8005d10 <loadMenuTexts+0xa2c>)
 8005b2a:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 8005b2c:	4879      	ldr	r0, [pc, #484]	; (8005d14 <loadMenuTexts+0xa30>)
 8005b2e:	f7fa ffcb 	bl	8000ac8 <copyText>
 8005b32:	4603      	mov	r3, r0
 8005b34:	4a78      	ldr	r2, [pc, #480]	; (8005d18 <loadMenuTexts+0xa34>)
 8005b36:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 8005b38:	4878      	ldr	r0, [pc, #480]	; (8005d1c <loadMenuTexts+0xa38>)
 8005b3a:	f7fa ffc5 	bl	8000ac8 <copyText>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	4a77      	ldr	r2, [pc, #476]	; (8005d20 <loadMenuTexts+0xa3c>)
 8005b42:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 8005b44:	4877      	ldr	r0, [pc, #476]	; (8005d24 <loadMenuTexts+0xa40>)
 8005b46:	f7fa ffbf 	bl	8000ac8 <copyText>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	4a76      	ldr	r2, [pc, #472]	; (8005d28 <loadMenuTexts+0xa44>)
 8005b4e:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 8005b50:	4876      	ldr	r0, [pc, #472]	; (8005d2c <loadMenuTexts+0xa48>)
 8005b52:	f7fa ffb9 	bl	8000ac8 <copyText>
 8005b56:	4603      	mov	r3, r0
 8005b58:	4a75      	ldr	r2, [pc, #468]	; (8005d30 <loadMenuTexts+0xa4c>)
 8005b5a:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8005b5c:	4875      	ldr	r0, [pc, #468]	; (8005d34 <loadMenuTexts+0xa50>)
 8005b5e:	f7fa ffb3 	bl	8000ac8 <copyText>
 8005b62:	4603      	mov	r3, r0
 8005b64:	4a74      	ldr	r2, [pc, #464]	; (8005d38 <loadMenuTexts+0xa54>)
 8005b66:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 8005b68:	4874      	ldr	r0, [pc, #464]	; (8005d3c <loadMenuTexts+0xa58>)
 8005b6a:	f7fa ffad 	bl	8000ac8 <copyText>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	4a73      	ldr	r2, [pc, #460]	; (8005d40 <loadMenuTexts+0xa5c>)
 8005b72:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 8005b74:	4873      	ldr	r0, [pc, #460]	; (8005d44 <loadMenuTexts+0xa60>)
 8005b76:	f7fa ffa7 	bl	8000ac8 <copyText>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	4a72      	ldr	r2, [pc, #456]	; (8005d48 <loadMenuTexts+0xa64>)
 8005b7e:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 8005b80:	4872      	ldr	r0, [pc, #456]	; (8005d4c <loadMenuTexts+0xa68>)
 8005b82:	f7fa ffa1 	bl	8000ac8 <copyText>
 8005b86:	4603      	mov	r3, r0
 8005b88:	4a71      	ldr	r2, [pc, #452]	; (8005d50 <loadMenuTexts+0xa6c>)
 8005b8a:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8005b8c:	4871      	ldr	r0, [pc, #452]	; (8005d54 <loadMenuTexts+0xa70>)
 8005b8e:	f7fa ff9b 	bl	8000ac8 <copyText>
 8005b92:	e0e1      	b.n	8005d58 <loadMenuTexts+0xa74>
 8005b94:	200004c0 	.word	0x200004c0
 8005b98:	20000d0c 	.word	0x20000d0c
 8005b9c:	200004d0 	.word	0x200004d0
 8005ba0:	20000d10 	.word	0x20000d10
 8005ba4:	200004e0 	.word	0x200004e0
 8005ba8:	20000d14 	.word	0x20000d14
 8005bac:	200004f0 	.word	0x200004f0
 8005bb0:	20000d18 	.word	0x20000d18
 8005bb4:	20000500 	.word	0x20000500
 8005bb8:	20000d1c 	.word	0x20000d1c
 8005bbc:	20000510 	.word	0x20000510
 8005bc0:	20000d20 	.word	0x20000d20
 8005bc4:	20000520 	.word	0x20000520
 8005bc8:	20000d24 	.word	0x20000d24
 8005bcc:	20000530 	.word	0x20000530
 8005bd0:	20000d28 	.word	0x20000d28
 8005bd4:	20000540 	.word	0x20000540
 8005bd8:	20000d2c 	.word	0x20000d2c
 8005bdc:	20000550 	.word	0x20000550
 8005be0:	20000d30 	.word	0x20000d30
 8005be4:	20000560 	.word	0x20000560
 8005be8:	20000d34 	.word	0x20000d34
 8005bec:	20000570 	.word	0x20000570
 8005bf0:	20000d38 	.word	0x20000d38
 8005bf4:	20000580 	.word	0x20000580
 8005bf8:	20000d3c 	.word	0x20000d3c
 8005bfc:	20000590 	.word	0x20000590
 8005c00:	20000d40 	.word	0x20000d40
 8005c04:	200005a0 	.word	0x200005a0
 8005c08:	20000d44 	.word	0x20000d44
 8005c0c:	200005b0 	.word	0x200005b0
 8005c10:	20000d48 	.word	0x20000d48
 8005c14:	200005c0 	.word	0x200005c0
 8005c18:	20000d4c 	.word	0x20000d4c
 8005c1c:	200005d0 	.word	0x200005d0
 8005c20:	20000d50 	.word	0x20000d50
 8005c24:	200005e0 	.word	0x200005e0
 8005c28:	20000d54 	.word	0x20000d54
 8005c2c:	200005f0 	.word	0x200005f0
 8005c30:	20000d58 	.word	0x20000d58
 8005c34:	20000600 	.word	0x20000600
 8005c38:	20000d5c 	.word	0x20000d5c
 8005c3c:	20000610 	.word	0x20000610
 8005c40:	20000d64 	.word	0x20000d64
 8005c44:	20000620 	.word	0x20000620
 8005c48:	20000d68 	.word	0x20000d68
 8005c4c:	20000630 	.word	0x20000630
 8005c50:	20000d6c 	.word	0x20000d6c
 8005c54:	20000640 	.word	0x20000640
 8005c58:	20000d70 	.word	0x20000d70
 8005c5c:	20000650 	.word	0x20000650
 8005c60:	20000d74 	.word	0x20000d74
 8005c64:	20000660 	.word	0x20000660
 8005c68:	20000d78 	.word	0x20000d78
 8005c6c:	20000670 	.word	0x20000670
 8005c70:	20000d7c 	.word	0x20000d7c
 8005c74:	20000680 	.word	0x20000680
 8005c78:	20000d80 	.word	0x20000d80
 8005c7c:	20000690 	.word	0x20000690
 8005c80:	20000d84 	.word	0x20000d84
 8005c84:	200006a0 	.word	0x200006a0
 8005c88:	20000d88 	.word	0x20000d88
 8005c8c:	200006b0 	.word	0x200006b0
 8005c90:	20000d8c 	.word	0x20000d8c
 8005c94:	200006c0 	.word	0x200006c0
 8005c98:	20000d94 	.word	0x20000d94
 8005c9c:	200006d0 	.word	0x200006d0
 8005ca0:	20000d9c 	.word	0x20000d9c
 8005ca4:	200006e0 	.word	0x200006e0
 8005ca8:	20000da0 	.word	0x20000da0
 8005cac:	200006f0 	.word	0x200006f0
 8005cb0:	20000da4 	.word	0x20000da4
 8005cb4:	20000700 	.word	0x20000700
 8005cb8:	20000da8 	.word	0x20000da8
 8005cbc:	20000710 	.word	0x20000710
 8005cc0:	20000dac 	.word	0x20000dac
 8005cc4:	20000720 	.word	0x20000720
 8005cc8:	20000db0 	.word	0x20000db0
 8005ccc:	20000730 	.word	0x20000730
 8005cd0:	20000db4 	.word	0x20000db4
 8005cd4:	20000740 	.word	0x20000740
 8005cd8:	20000db8 	.word	0x20000db8
 8005cdc:	20000750 	.word	0x20000750
 8005ce0:	20000dbc 	.word	0x20000dbc
 8005ce4:	20000760 	.word	0x20000760
 8005ce8:	20000dc0 	.word	0x20000dc0
 8005cec:	20000770 	.word	0x20000770
 8005cf0:	20000dc4 	.word	0x20000dc4
 8005cf4:	20000780 	.word	0x20000780
 8005cf8:	20000dc8 	.word	0x20000dc8
 8005cfc:	20000790 	.word	0x20000790
 8005d00:	20000dcc 	.word	0x20000dcc
 8005d04:	200007a0 	.word	0x200007a0
 8005d08:	20000dd0 	.word	0x20000dd0
 8005d0c:	200007b0 	.word	0x200007b0
 8005d10:	20000dd4 	.word	0x20000dd4
 8005d14:	200007c0 	.word	0x200007c0
 8005d18:	20000dd8 	.word	0x20000dd8
 8005d1c:	200007d0 	.word	0x200007d0
 8005d20:	20000ddc 	.word	0x20000ddc
 8005d24:	200007e0 	.word	0x200007e0
 8005d28:	20000de0 	.word	0x20000de0
 8005d2c:	200007f0 	.word	0x200007f0
 8005d30:	20000de4 	.word	0x20000de4
 8005d34:	20000800 	.word	0x20000800
 8005d38:	20000de8 	.word	0x20000de8
 8005d3c:	20000810 	.word	0x20000810
 8005d40:	20000dec 	.word	0x20000dec
 8005d44:	20000820 	.word	0x20000820
 8005d48:	20000df0 	.word	0x20000df0
 8005d4c:	20000830 	.word	0x20000830
 8005d50:	20000df4 	.word	0x20000df4
 8005d54:	20000840 	.word	0x20000840
 8005d58:	4603      	mov	r3, r0
 8005d5a:	4a27      	ldr	r2, [pc, #156]	; (8005df8 <loadMenuTexts+0xb14>)
 8005d5c:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 8005d5e:	4827      	ldr	r0, [pc, #156]	; (8005dfc <loadMenuTexts+0xb18>)
 8005d60:	f7fa feb2 	bl	8000ac8 <copyText>
 8005d64:	4603      	mov	r3, r0
 8005d66:	4a26      	ldr	r2, [pc, #152]	; (8005e00 <loadMenuTexts+0xb1c>)
 8005d68:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 8005d6a:	4826      	ldr	r0, [pc, #152]	; (8005e04 <loadMenuTexts+0xb20>)
 8005d6c:	f7fa feac 	bl	8000ac8 <copyText>
 8005d70:	4603      	mov	r3, r0
 8005d72:	4a25      	ldr	r2, [pc, #148]	; (8005e08 <loadMenuTexts+0xb24>)
 8005d74:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 8005d76:	4825      	ldr	r0, [pc, #148]	; (8005e0c <loadMenuTexts+0xb28>)
 8005d78:	f7fa fea6 	bl	8000ac8 <copyText>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	4a24      	ldr	r2, [pc, #144]	; (8005e10 <loadMenuTexts+0xb2c>)
 8005d80:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 8005d82:	4824      	ldr	r0, [pc, #144]	; (8005e14 <loadMenuTexts+0xb30>)
 8005d84:	f7fa fea0 	bl	8000ac8 <copyText>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	4a23      	ldr	r2, [pc, #140]	; (8005e18 <loadMenuTexts+0xb34>)
 8005d8c:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 8005d8e:	4823      	ldr	r0, [pc, #140]	; (8005e1c <loadMenuTexts+0xb38>)
 8005d90:	f7fa fe9a 	bl	8000ac8 <copyText>
 8005d94:	4603      	mov	r3, r0
 8005d96:	4a22      	ldr	r2, [pc, #136]	; (8005e20 <loadMenuTexts+0xb3c>)
 8005d98:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 8005d9a:	4822      	ldr	r0, [pc, #136]	; (8005e24 <loadMenuTexts+0xb40>)
 8005d9c:	f7fa fe94 	bl	8000ac8 <copyText>
 8005da0:	4603      	mov	r3, r0
 8005da2:	4a21      	ldr	r2, [pc, #132]	; (8005e28 <loadMenuTexts+0xb44>)
 8005da4:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 8005da6:	4821      	ldr	r0, [pc, #132]	; (8005e2c <loadMenuTexts+0xb48>)
 8005da8:	f7fa fe8e 	bl	8000ac8 <copyText>
 8005dac:	4603      	mov	r3, r0
 8005dae:	4a20      	ldr	r2, [pc, #128]	; (8005e30 <loadMenuTexts+0xb4c>)
 8005db0:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 8005db2:	4820      	ldr	r0, [pc, #128]	; (8005e34 <loadMenuTexts+0xb50>)
 8005db4:	f7fa fe88 	bl	8000ac8 <copyText>
 8005db8:	4603      	mov	r3, r0
 8005dba:	4a1f      	ldr	r2, [pc, #124]	; (8005e38 <loadMenuTexts+0xb54>)
 8005dbc:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 8005dbe:	481f      	ldr	r0, [pc, #124]	; (8005e3c <loadMenuTexts+0xb58>)
 8005dc0:	f7fa fe82 	bl	8000ac8 <copyText>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	4a1e      	ldr	r2, [pc, #120]	; (8005e40 <loadMenuTexts+0xb5c>)
 8005dc8:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 8005dca:	481e      	ldr	r0, [pc, #120]	; (8005e44 <loadMenuTexts+0xb60>)
 8005dcc:	f7fa fe7c 	bl	8000ac8 <copyText>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	4a1d      	ldr	r2, [pc, #116]	; (8005e48 <loadMenuTexts+0xb64>)
 8005dd4:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 8005dd6:	481d      	ldr	r0, [pc, #116]	; (8005e4c <loadMenuTexts+0xb68>)
 8005dd8:	f7fa fe76 	bl	8000ac8 <copyText>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	4a1c      	ldr	r2, [pc, #112]	; (8005e50 <loadMenuTexts+0xb6c>)
 8005de0:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 8005de2:	481c      	ldr	r0, [pc, #112]	; (8005e54 <loadMenuTexts+0xb70>)
 8005de4:	f7fa fe70 	bl	8000ac8 <copyText>
 8005de8:	4603      	mov	r3, r0
 8005dea:	4a1b      	ldr	r2, [pc, #108]	; (8005e58 <loadMenuTexts+0xb74>)
 8005dec:	6013      	str	r3, [r2, #0]
}
 8005dee:	bf00      	nop
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	20000df8 	.word	0x20000df8
 8005dfc:	20000850 	.word	0x20000850
 8005e00:	20000dfc 	.word	0x20000dfc
 8005e04:	20000860 	.word	0x20000860
 8005e08:	20000e00 	.word	0x20000e00
 8005e0c:	20000870 	.word	0x20000870
 8005e10:	20000e04 	.word	0x20000e04
 8005e14:	20000880 	.word	0x20000880
 8005e18:	20000e08 	.word	0x20000e08
 8005e1c:	20000890 	.word	0x20000890
 8005e20:	20000e0c 	.word	0x20000e0c
 8005e24:	200008a0 	.word	0x200008a0
 8005e28:	20000e18 	.word	0x20000e18
 8005e2c:	200008b0 	.word	0x200008b0
 8005e30:	20000e1c 	.word	0x20000e1c
 8005e34:	200008c0 	.word	0x200008c0
 8005e38:	20000e20 	.word	0x20000e20
 8005e3c:	200008d0 	.word	0x200008d0
 8005e40:	20000e24 	.word	0x20000e24
 8005e44:	200008e0 	.word	0x200008e0
 8005e48:	20000e28 	.word	0x20000e28
 8005e4c:	200008f0 	.word	0x200008f0
 8005e50:	20000e2c 	.word	0x20000e2c
 8005e54:	20000900 	.word	0x20000900
 8005e58:	20000e30 	.word	0x20000e30

08005e5c <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	4603      	mov	r3, r0
 8005e64:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8005e66:	79fb      	ldrb	r3, [r7, #7]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d105      	bne.n	8005e78 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8005e6c:	4a22      	ldr	r2, [pc, #136]	; (8005ef8 <lcdUpdate+0x9c>)
 8005e6e:	2101      	movs	r1, #1
 8005e70:	2002      	movs	r0, #2
 8005e72:	f7fa fd9f 	bl	80009b4 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 8005e76:	e03b      	b.n	8005ef0 <lcdUpdate+0x94>
	} else if(y==2) {
 8005e78:	79fb      	ldrb	r3, [r7, #7]
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d105      	bne.n	8005e8a <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8005e7e:	4a1e      	ldr	r2, [pc, #120]	; (8005ef8 <lcdUpdate+0x9c>)
 8005e80:	2102      	movs	r1, #2
 8005e82:	2002      	movs	r0, #2
 8005e84:	f7fa fd96 	bl	80009b4 <lcd_print>
}
 8005e88:	e032      	b.n	8005ef0 <lcdUpdate+0x94>
	} else if(y==3) {
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d105      	bne.n	8005e9c <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8005e90:	4a19      	ldr	r2, [pc, #100]	; (8005ef8 <lcdUpdate+0x9c>)
 8005e92:	2103      	movs	r1, #3
 8005e94:	2002      	movs	r0, #2
 8005e96:	f7fa fd8d 	bl	80009b4 <lcd_print>
}
 8005e9a:	e029      	b.n	8005ef0 <lcdUpdate+0x94>
	} else if(y==4) {
 8005e9c:	79fb      	ldrb	r3, [r7, #7]
 8005e9e:	2b04      	cmp	r3, #4
 8005ea0:	d105      	bne.n	8005eae <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8005ea2:	4a15      	ldr	r2, [pc, #84]	; (8005ef8 <lcdUpdate+0x9c>)
 8005ea4:	2104      	movs	r1, #4
 8005ea6:	2002      	movs	r0, #2
 8005ea8:	f7fa fd84 	bl	80009b4 <lcd_print>
}
 8005eac:	e020      	b.n	8005ef0 <lcdUpdate+0x94>
	} else if(y==5) {
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	2b05      	cmp	r3, #5
 8005eb2:	d105      	bne.n	8005ec0 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8005eb4:	4a10      	ldr	r2, [pc, #64]	; (8005ef8 <lcdUpdate+0x9c>)
 8005eb6:	2105      	movs	r1, #5
 8005eb8:	2002      	movs	r0, #2
 8005eba:	f7fa fd7b 	bl	80009b4 <lcd_print>
}
 8005ebe:	e017      	b.n	8005ef0 <lcdUpdate+0x94>
	} else if(y==6) {
 8005ec0:	79fb      	ldrb	r3, [r7, #7]
 8005ec2:	2b06      	cmp	r3, #6
 8005ec4:	d105      	bne.n	8005ed2 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8005ec6:	4a0c      	ldr	r2, [pc, #48]	; (8005ef8 <lcdUpdate+0x9c>)
 8005ec8:	2106      	movs	r1, #6
 8005eca:	2002      	movs	r0, #2
 8005ecc:	f7fa fd72 	bl	80009b4 <lcd_print>
}
 8005ed0:	e00e      	b.n	8005ef0 <lcdUpdate+0x94>
	} else if (y==7) {
 8005ed2:	79fb      	ldrb	r3, [r7, #7]
 8005ed4:	2b07      	cmp	r3, #7
 8005ed6:	d10b      	bne.n	8005ef0 <lcdUpdate+0x94>
		lcd_clear();
 8005ed8:	f7fa fd98 	bl	8000a0c <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8005edc:	4a07      	ldr	r2, [pc, #28]	; (8005efc <lcdUpdate+0xa0>)
 8005ede:	2101      	movs	r1, #1
 8005ee0:	2001      	movs	r0, #1
 8005ee2:	f7fa fd67 	bl	80009b4 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 8005ee6:	4a06      	ldr	r2, [pc, #24]	; (8005f00 <lcdUpdate+0xa4>)
 8005ee8:	2101      	movs	r1, #1
 8005eea:	2002      	movs	r0, #2
 8005eec:	f7fa fd62 	bl	80009b4 <lcd_print>
}
 8005ef0:	bf00      	nop
 8005ef2:	3708      	adds	r7, #8
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	0800e26c 	.word	0x0800e26c
 8005efc:	0800eb98 	.word	0x0800eb98
 8005f00:	0800ebac 	.word	0x0800ebac

08005f04 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8005f0e:	79fb      	ldrb	r3, [r7, #7]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d11d      	bne.n	8005f50 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8005f14:	4b62      	ldr	r3, [pc, #392]	; (80060a0 <hataKoduLcdGoster+0x19c>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d105      	bne.n	8005f28 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8005f1c:	4a61      	ldr	r2, [pc, #388]	; (80060a4 <hataKoduLcdGoster+0x1a0>)
 8005f1e:	2101      	movs	r1, #1
 8005f20:	2001      	movs	r0, #1
 8005f22:	f7fa fd47 	bl	80009b4 <lcd_print>
 8005f26:	e008      	b.n	8005f3a <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8005f28:	4b5d      	ldr	r3, [pc, #372]	; (80060a0 <hataKoduLcdGoster+0x19c>)
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d104      	bne.n	8005f3a <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005f30:	4a5d      	ldr	r2, [pc, #372]	; (80060a8 <hataKoduLcdGoster+0x1a4>)
 8005f32:	2101      	movs	r1, #1
 8005f34:	2001      	movs	r0, #1
 8005f36:	f7fa fd3d 	bl	80009b4 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8005f3a:	4a5c      	ldr	r2, [pc, #368]	; (80060ac <hataKoduLcdGoster+0x1a8>)
 8005f3c:	2101      	movs	r1, #1
 8005f3e:	2002      	movs	r0, #2
 8005f40:	f7fa fd38 	bl	80009b4 <lcd_print>
		lcd_print(2, 7, "          ");
 8005f44:	4a5a      	ldr	r2, [pc, #360]	; (80060b0 <hataKoduLcdGoster+0x1ac>)
 8005f46:	2107      	movs	r1, #7
 8005f48:	2002      	movs	r0, #2
 8005f4a:	f7fa fd33 	bl	80009b4 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8005f4e:	e0a3      	b.n	8006098 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8005f50:	79fb      	ldrb	r3, [r7, #7]
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d11d      	bne.n	8005f92 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8005f56:	4b52      	ldr	r3, [pc, #328]	; (80060a0 <hataKoduLcdGoster+0x19c>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d105      	bne.n	8005f6a <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 8005f5e:	4a51      	ldr	r2, [pc, #324]	; (80060a4 <hataKoduLcdGoster+0x1a0>)
 8005f60:	2101      	movs	r1, #1
 8005f62:	2001      	movs	r0, #1
 8005f64:	f7fa fd26 	bl	80009b4 <lcd_print>
 8005f68:	e008      	b.n	8005f7c <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8005f6a:	4b4d      	ldr	r3, [pc, #308]	; (80060a0 <hataKoduLcdGoster+0x19c>)
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d104      	bne.n	8005f7c <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005f72:	4a4d      	ldr	r2, [pc, #308]	; (80060a8 <hataKoduLcdGoster+0x1a4>)
 8005f74:	2101      	movs	r1, #1
 8005f76:	2001      	movs	r0, #1
 8005f78:	f7fa fd1c 	bl	80009b4 <lcd_print>
		lcd_print(2, 2, "2");
 8005f7c:	4a4d      	ldr	r2, [pc, #308]	; (80060b4 <hataKoduLcdGoster+0x1b0>)
 8005f7e:	2102      	movs	r1, #2
 8005f80:	2002      	movs	r0, #2
 8005f82:	f7fa fd17 	bl	80009b4 <lcd_print>
		lcd_print(2, 7, "          ");
 8005f86:	4a4a      	ldr	r2, [pc, #296]	; (80060b0 <hataKoduLcdGoster+0x1ac>)
 8005f88:	2107      	movs	r1, #7
 8005f8a:	2002      	movs	r0, #2
 8005f8c:	f7fa fd12 	bl	80009b4 <lcd_print>
}
 8005f90:	e082      	b.n	8006098 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8005f92:	79fb      	ldrb	r3, [r7, #7]
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	d11d      	bne.n	8005fd4 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8005f98:	4b41      	ldr	r3, [pc, #260]	; (80060a0 <hataKoduLcdGoster+0x19c>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d105      	bne.n	8005fac <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8005fa0:	4a40      	ldr	r2, [pc, #256]	; (80060a4 <hataKoduLcdGoster+0x1a0>)
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	2001      	movs	r0, #1
 8005fa6:	f7fa fd05 	bl	80009b4 <lcd_print>
 8005faa:	e008      	b.n	8005fbe <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8005fac:	4b3c      	ldr	r3, [pc, #240]	; (80060a0 <hataKoduLcdGoster+0x19c>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d104      	bne.n	8005fbe <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005fb4:	4a3c      	ldr	r2, [pc, #240]	; (80060a8 <hataKoduLcdGoster+0x1a4>)
 8005fb6:	2101      	movs	r1, #1
 8005fb8:	2001      	movs	r0, #1
 8005fba:	f7fa fcfb 	bl	80009b4 <lcd_print>
		lcd_print(2, 3, "3");
 8005fbe:	4a3e      	ldr	r2, [pc, #248]	; (80060b8 <hataKoduLcdGoster+0x1b4>)
 8005fc0:	2103      	movs	r1, #3
 8005fc2:	2002      	movs	r0, #2
 8005fc4:	f7fa fcf6 	bl	80009b4 <lcd_print>
		lcd_print(2, 7, "          ");
 8005fc8:	4a39      	ldr	r2, [pc, #228]	; (80060b0 <hataKoduLcdGoster+0x1ac>)
 8005fca:	2107      	movs	r1, #7
 8005fcc:	2002      	movs	r0, #2
 8005fce:	f7fa fcf1 	bl	80009b4 <lcd_print>
}
 8005fd2:	e061      	b.n	8006098 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8005fd4:	79fb      	ldrb	r3, [r7, #7]
 8005fd6:	2b04      	cmp	r3, #4
 8005fd8:	d11d      	bne.n	8006016 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8005fda:	4b31      	ldr	r3, [pc, #196]	; (80060a0 <hataKoduLcdGoster+0x19c>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d105      	bne.n	8005fee <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8005fe2:	4a30      	ldr	r2, [pc, #192]	; (80060a4 <hataKoduLcdGoster+0x1a0>)
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	2001      	movs	r0, #1
 8005fe8:	f7fa fce4 	bl	80009b4 <lcd_print>
 8005fec:	e008      	b.n	8006000 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8005fee:	4b2c      	ldr	r3, [pc, #176]	; (80060a0 <hataKoduLcdGoster+0x19c>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d104      	bne.n	8006000 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005ff6:	4a2c      	ldr	r2, [pc, #176]	; (80060a8 <hataKoduLcdGoster+0x1a4>)
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	2001      	movs	r0, #1
 8005ffc:	f7fa fcda 	bl	80009b4 <lcd_print>
		lcd_print(2, 4, "4");
 8006000:	4a2e      	ldr	r2, [pc, #184]	; (80060bc <hataKoduLcdGoster+0x1b8>)
 8006002:	2104      	movs	r1, #4
 8006004:	2002      	movs	r0, #2
 8006006:	f7fa fcd5 	bl	80009b4 <lcd_print>
		lcd_print(2, 7, "          ");
 800600a:	4a29      	ldr	r2, [pc, #164]	; (80060b0 <hataKoduLcdGoster+0x1ac>)
 800600c:	2107      	movs	r1, #7
 800600e:	2002      	movs	r0, #2
 8006010:	f7fa fcd0 	bl	80009b4 <lcd_print>
}
 8006014:	e040      	b.n	8006098 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8006016:	79fb      	ldrb	r3, [r7, #7]
 8006018:	2b05      	cmp	r3, #5
 800601a:	d11d      	bne.n	8006058 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 800601c:	4b20      	ldr	r3, [pc, #128]	; (80060a0 <hataKoduLcdGoster+0x19c>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d105      	bne.n	8006030 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8006024:	4a1f      	ldr	r2, [pc, #124]	; (80060a4 <hataKoduLcdGoster+0x1a0>)
 8006026:	2101      	movs	r1, #1
 8006028:	2001      	movs	r0, #1
 800602a:	f7fa fcc3 	bl	80009b4 <lcd_print>
 800602e:	e008      	b.n	8006042 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8006030:	4b1b      	ldr	r3, [pc, #108]	; (80060a0 <hataKoduLcdGoster+0x19c>)
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d104      	bne.n	8006042 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 8006038:	4a1b      	ldr	r2, [pc, #108]	; (80060a8 <hataKoduLcdGoster+0x1a4>)
 800603a:	2101      	movs	r1, #1
 800603c:	2001      	movs	r0, #1
 800603e:	f7fa fcb9 	bl	80009b4 <lcd_print>
		lcd_print(2, 5, "5");
 8006042:	4a1f      	ldr	r2, [pc, #124]	; (80060c0 <hataKoduLcdGoster+0x1bc>)
 8006044:	2105      	movs	r1, #5
 8006046:	2002      	movs	r0, #2
 8006048:	f7fa fcb4 	bl	80009b4 <lcd_print>
		lcd_print(2, 7, "          ");
 800604c:	4a18      	ldr	r2, [pc, #96]	; (80060b0 <hataKoduLcdGoster+0x1ac>)
 800604e:	2107      	movs	r1, #7
 8006050:	2002      	movs	r0, #2
 8006052:	f7fa fcaf 	bl	80009b4 <lcd_print>
}
 8006056:	e01f      	b.n	8006098 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8006058:	79fb      	ldrb	r3, [r7, #7]
 800605a:	2b06      	cmp	r3, #6
 800605c:	d11c      	bne.n	8006098 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 800605e:	4b10      	ldr	r3, [pc, #64]	; (80060a0 <hataKoduLcdGoster+0x19c>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d105      	bne.n	8006072 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 8006066:	4a0f      	ldr	r2, [pc, #60]	; (80060a4 <hataKoduLcdGoster+0x1a0>)
 8006068:	2101      	movs	r1, #1
 800606a:	2001      	movs	r0, #1
 800606c:	f7fa fca2 	bl	80009b4 <lcd_print>
 8006070:	e008      	b.n	8006084 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8006072:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <hataKoduLcdGoster+0x19c>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d104      	bne.n	8006084 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 800607a:	4a0b      	ldr	r2, [pc, #44]	; (80060a8 <hataKoduLcdGoster+0x1a4>)
 800607c:	2101      	movs	r1, #1
 800607e:	2001      	movs	r0, #1
 8006080:	f7fa fc98 	bl	80009b4 <lcd_print>
		lcd_print(2, 6, "6");
 8006084:	4a0f      	ldr	r2, [pc, #60]	; (80060c4 <hataKoduLcdGoster+0x1c0>)
 8006086:	2106      	movs	r1, #6
 8006088:	2002      	movs	r0, #2
 800608a:	f7fa fc93 	bl	80009b4 <lcd_print>
		lcd_print(2, 7, "          ");
 800608e:	4a08      	ldr	r2, [pc, #32]	; (80060b0 <hataKoduLcdGoster+0x1ac>)
 8006090:	2107      	movs	r1, #7
 8006092:	2002      	movs	r0, #2
 8006094:	f7fa fc8e 	bl	80009b4 <lcd_print>
}
 8006098:	bf00      	nop
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20000cbe 	.word	0x20000cbe
 80060a4:	0800ebc0 	.word	0x0800ebc0
 80060a8:	0800ebd4 	.word	0x0800ebd4
 80060ac:	0800dfc4 	.word	0x0800dfc4
 80060b0:	0800ebe8 	.word	0x0800ebe8
 80060b4:	0800dfc8 	.word	0x0800dfc8
 80060b8:	0800dfcc 	.word	0x0800dfcc
 80060bc:	0800dfd0 	.word	0x0800dfd0
 80060c0:	0800dfd4 	.word	0x0800dfd4
 80060c4:	0800dfd8 	.word	0x0800dfd8

080060c8 <convertAndSendData>:

void convertAndSendData() {
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 80060ce:	4a14      	ldr	r2, [pc, #80]	; (8006120 <convertAndSendData+0x58>)
 80060d0:	2101      	movs	r1, #1
 80060d2:	2001      	movs	r0, #1
 80060d4:	f7fa fc6e 	bl	80009b4 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 80060d8:	4a12      	ldr	r2, [pc, #72]	; (8006124 <convertAndSendData+0x5c>)
 80060da:	2101      	movs	r1, #1
 80060dc:	2002      	movs	r0, #2
 80060de:	f7fa fc69 	bl	80009b4 <lcd_print>
	for(int i=0; i<2; i++) {
 80060e2:	2300      	movs	r3, #0
 80060e4:	607b      	str	r3, [r7, #4]
 80060e6:	e00a      	b.n	80060fe <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 80060e8:	f002 fb5e 	bl	80087a8 <mergeData>
 80060ec:	4603      	mov	r3, r0
 80060ee:	461a      	mov	r2, r3
 80060f0:	490d      	ldr	r1, [pc, #52]	; (8006128 <convertAndSendData+0x60>)
 80060f2:	480e      	ldr	r0, [pc, #56]	; (800612c <convertAndSendData+0x64>)
 80060f4:	f7fa f946 	bl	8000384 <sendMachineData>
	for(int i=0; i<2; i++) {
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	3301      	adds	r3, #1
 80060fc:	607b      	str	r3, [r7, #4]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2b01      	cmp	r3, #1
 8006102:	ddf1      	ble.n	80060e8 <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 8006104:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006108:	f003 faf8 	bl	80096fc <HAL_Delay>
	lcd_clear();
 800610c:	f7fa fc7e 	bl	8000a0c <lcd_clear>
	HAL_Delay(500);
 8006110:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006114:	f003 faf2 	bl	80096fc <HAL_Delay>
}
 8006118:	bf00      	nop
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	0800ebf4 	.word	0x0800ebf4
 8006124:	0800ec00 	.word	0x0800ec00
 8006128:	20000bf4 	.word	0x20000bf4
 800612c:	20000ef8 	.word	0x20000ef8

08006130 <eepromKontrol>:

void eepromKontrol(int type) {
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af04      	add	r7, sp, #16
 8006136:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8006138:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800613c:	9302      	str	r3, [sp, #8]
 800613e:	233f      	movs	r3, #63	; 0x3f
 8006140:	9301      	str	r3, [sp, #4]
 8006142:	4b9c      	ldr	r3, [pc, #624]	; (80063b4 <eepromKontrol+0x284>)
 8006144:	9300      	str	r3, [sp, #0]
 8006146:	233f      	movs	r3, #63	; 0x3f
 8006148:	2200      	movs	r2, #0
 800614a:	21a0      	movs	r1, #160	; 0xa0
 800614c:	489a      	ldr	r0, [pc, #616]	; (80063b8 <eepromKontrol+0x288>)
 800614e:	f004 fc59 	bl	800aa04 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8006152:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006156:	f003 fad1 	bl	80096fc <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800615a:	4b96      	ldr	r3, [pc, #600]	; (80063b4 <eepromKontrol+0x284>)
 800615c:	78da      	ldrb	r2, [r3, #3]
 800615e:	4b97      	ldr	r3, [pc, #604]	; (80063bc <eepromKontrol+0x28c>)
 8006160:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8006162:	4b94      	ldr	r3, [pc, #592]	; (80063b4 <eepromKontrol+0x284>)
 8006164:	785a      	ldrb	r2, [r3, #1]
 8006166:	4b96      	ldr	r3, [pc, #600]	; (80063c0 <eepromKontrol+0x290>)
 8006168:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800616a:	4b92      	ldr	r3, [pc, #584]	; (80063b4 <eepromKontrol+0x284>)
 800616c:	789a      	ldrb	r2, [r3, #2]
 800616e:	4b95      	ldr	r3, [pc, #596]	; (80063c4 <eepromKontrol+0x294>)
 8006170:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8006172:	4b90      	ldr	r3, [pc, #576]	; (80063b4 <eepromKontrol+0x284>)
 8006174:	791a      	ldrb	r2, [r3, #4]
 8006176:	4b94      	ldr	r3, [pc, #592]	; (80063c8 <eepromKontrol+0x298>)
 8006178:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800617a:	4b8e      	ldr	r3, [pc, #568]	; (80063b4 <eepromKontrol+0x284>)
 800617c:	795a      	ldrb	r2, [r3, #5]
 800617e:	4b93      	ldr	r3, [pc, #588]	; (80063cc <eepromKontrol+0x29c>)
 8006180:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8006182:	4b8c      	ldr	r3, [pc, #560]	; (80063b4 <eepromKontrol+0x284>)
 8006184:	799a      	ldrb	r2, [r3, #6]
 8006186:	4b92      	ldr	r3, [pc, #584]	; (80063d0 <eepromKontrol+0x2a0>)
 8006188:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800618a:	4b8a      	ldr	r3, [pc, #552]	; (80063b4 <eepromKontrol+0x284>)
 800618c:	79da      	ldrb	r2, [r3, #7]
 800618e:	4b91      	ldr	r3, [pc, #580]	; (80063d4 <eepromKontrol+0x2a4>)
 8006190:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8006192:	4b88      	ldr	r3, [pc, #544]	; (80063b4 <eepromKontrol+0x284>)
 8006194:	7a1a      	ldrb	r2, [r3, #8]
 8006196:	4b90      	ldr	r3, [pc, #576]	; (80063d8 <eepromKontrol+0x2a8>)
 8006198:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800619a:	4b86      	ldr	r3, [pc, #536]	; (80063b4 <eepromKontrol+0x284>)
 800619c:	7a5a      	ldrb	r2, [r3, #9]
 800619e:	4b8f      	ldr	r3, [pc, #572]	; (80063dc <eepromKontrol+0x2ac>)
 80061a0:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80061a2:	4b84      	ldr	r3, [pc, #528]	; (80063b4 <eepromKontrol+0x284>)
 80061a4:	7a9a      	ldrb	r2, [r3, #10]
 80061a6:	4b8e      	ldr	r3, [pc, #568]	; (80063e0 <eepromKontrol+0x2b0>)
 80061a8:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80061aa:	4b82      	ldr	r3, [pc, #520]	; (80063b4 <eepromKontrol+0x284>)
 80061ac:	7ada      	ldrb	r2, [r3, #11]
 80061ae:	4b8d      	ldr	r3, [pc, #564]	; (80063e4 <eepromKontrol+0x2b4>)
 80061b0:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80061b2:	4b80      	ldr	r3, [pc, #512]	; (80063b4 <eepromKontrol+0x284>)
 80061b4:	7b1a      	ldrb	r2, [r3, #12]
 80061b6:	4b8c      	ldr	r3, [pc, #560]	; (80063e8 <eepromKontrol+0x2b8>)
 80061b8:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80061ba:	4b7e      	ldr	r3, [pc, #504]	; (80063b4 <eepromKontrol+0x284>)
 80061bc:	7b5a      	ldrb	r2, [r3, #13]
 80061be:	4b8b      	ldr	r3, [pc, #556]	; (80063ec <eepromKontrol+0x2bc>)
 80061c0:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80061c2:	4b7c      	ldr	r3, [pc, #496]	; (80063b4 <eepromKontrol+0x284>)
 80061c4:	7b9a      	ldrb	r2, [r3, #14]
 80061c6:	4b8a      	ldr	r3, [pc, #552]	; (80063f0 <eepromKontrol+0x2c0>)
 80061c8:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80061ca:	4b7a      	ldr	r3, [pc, #488]	; (80063b4 <eepromKontrol+0x284>)
 80061cc:	7bda      	ldrb	r2, [r3, #15]
 80061ce:	4b89      	ldr	r3, [pc, #548]	; (80063f4 <eepromKontrol+0x2c4>)
 80061d0:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80061d2:	4b78      	ldr	r3, [pc, #480]	; (80063b4 <eepromKontrol+0x284>)
 80061d4:	7c1a      	ldrb	r2, [r3, #16]
 80061d6:	4b88      	ldr	r3, [pc, #544]	; (80063f8 <eepromKontrol+0x2c8>)
 80061d8:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80061da:	4b76      	ldr	r3, [pc, #472]	; (80063b4 <eepromKontrol+0x284>)
 80061dc:	7c5a      	ldrb	r2, [r3, #17]
 80061de:	4b87      	ldr	r3, [pc, #540]	; (80063fc <eepromKontrol+0x2cc>)
 80061e0:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80061e2:	4b74      	ldr	r3, [pc, #464]	; (80063b4 <eepromKontrol+0x284>)
 80061e4:	7c9a      	ldrb	r2, [r3, #18]
 80061e6:	4b86      	ldr	r3, [pc, #536]	; (8006400 <eepromKontrol+0x2d0>)
 80061e8:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80061ea:	4b72      	ldr	r3, [pc, #456]	; (80063b4 <eepromKontrol+0x284>)
 80061ec:	7cda      	ldrb	r2, [r3, #19]
 80061ee:	4b85      	ldr	r3, [pc, #532]	; (8006404 <eepromKontrol+0x2d4>)
 80061f0:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80061f2:	4b70      	ldr	r3, [pc, #448]	; (80063b4 <eepromKontrol+0x284>)
 80061f4:	7d1a      	ldrb	r2, [r3, #20]
 80061f6:	4b84      	ldr	r3, [pc, #528]	; (8006408 <eepromKontrol+0x2d8>)
 80061f8:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80061fa:	4b6e      	ldr	r3, [pc, #440]	; (80063b4 <eepromKontrol+0x284>)
 80061fc:	7d5a      	ldrb	r2, [r3, #21]
 80061fe:	4b83      	ldr	r3, [pc, #524]	; (800640c <eepromKontrol+0x2dc>)
 8006200:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8006202:	4b6c      	ldr	r3, [pc, #432]	; (80063b4 <eepromKontrol+0x284>)
 8006204:	7d9a      	ldrb	r2, [r3, #22]
 8006206:	4b82      	ldr	r3, [pc, #520]	; (8006410 <eepromKontrol+0x2e0>)
 8006208:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800620a:	4b6a      	ldr	r3, [pc, #424]	; (80063b4 <eepromKontrol+0x284>)
 800620c:	7dda      	ldrb	r2, [r3, #23]
 800620e:	4b81      	ldr	r3, [pc, #516]	; (8006414 <eepromKontrol+0x2e4>)
 8006210:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8006212:	4b68      	ldr	r3, [pc, #416]	; (80063b4 <eepromKontrol+0x284>)
 8006214:	7e1a      	ldrb	r2, [r3, #24]
 8006216:	4b80      	ldr	r3, [pc, #512]	; (8006418 <eepromKontrol+0x2e8>)
 8006218:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800621a:	4b66      	ldr	r3, [pc, #408]	; (80063b4 <eepromKontrol+0x284>)
 800621c:	7e5a      	ldrb	r2, [r3, #25]
 800621e:	4b7f      	ldr	r3, [pc, #508]	; (800641c <eepromKontrol+0x2ec>)
 8006220:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8006222:	4b64      	ldr	r3, [pc, #400]	; (80063b4 <eepromKontrol+0x284>)
 8006224:	7e9a      	ldrb	r2, [r3, #26]
 8006226:	4b7e      	ldr	r3, [pc, #504]	; (8006420 <eepromKontrol+0x2f0>)
 8006228:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800622a:	4b62      	ldr	r3, [pc, #392]	; (80063b4 <eepromKontrol+0x284>)
 800622c:	7eda      	ldrb	r2, [r3, #27]
 800622e:	4b7d      	ldr	r3, [pc, #500]	; (8006424 <eepromKontrol+0x2f4>)
 8006230:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8006232:	4b60      	ldr	r3, [pc, #384]	; (80063b4 <eepromKontrol+0x284>)
 8006234:	7f1a      	ldrb	r2, [r3, #28]
 8006236:	4b7c      	ldr	r3, [pc, #496]	; (8006428 <eepromKontrol+0x2f8>)
 8006238:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800623a:	4b5e      	ldr	r3, [pc, #376]	; (80063b4 <eepromKontrol+0x284>)
 800623c:	7f5a      	ldrb	r2, [r3, #29]
 800623e:	4b7b      	ldr	r3, [pc, #492]	; (800642c <eepromKontrol+0x2fc>)
 8006240:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8006242:	4b5c      	ldr	r3, [pc, #368]	; (80063b4 <eepromKontrol+0x284>)
 8006244:	7f9a      	ldrb	r2, [r3, #30]
 8006246:	4b7a      	ldr	r3, [pc, #488]	; (8006430 <eepromKontrol+0x300>)
 8006248:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800624a:	4b5a      	ldr	r3, [pc, #360]	; (80063b4 <eepromKontrol+0x284>)
 800624c:	7fda      	ldrb	r2, [r3, #31]
 800624e:	4b79      	ldr	r3, [pc, #484]	; (8006434 <eepromKontrol+0x304>)
 8006250:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8006252:	4b58      	ldr	r3, [pc, #352]	; (80063b4 <eepromKontrol+0x284>)
 8006254:	f893 2020 	ldrb.w	r2, [r3, #32]
 8006258:	4b77      	ldr	r3, [pc, #476]	; (8006438 <eepromKontrol+0x308>)
 800625a:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800625c:	4b55      	ldr	r3, [pc, #340]	; (80063b4 <eepromKontrol+0x284>)
 800625e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8006262:	4b76      	ldr	r3, [pc, #472]	; (800643c <eepromKontrol+0x30c>)
 8006264:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[37];
 8006266:	4b53      	ldr	r3, [pc, #332]	; (80063b4 <eepromKontrol+0x284>)
 8006268:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800626c:	4b74      	ldr	r3, [pc, #464]	; (8006440 <eepromKontrol+0x310>)
 800626e:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8006270:	4b50      	ldr	r3, [pc, #320]	; (80063b4 <eepromKontrol+0x284>)
 8006272:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8006276:	4b73      	ldr	r3, [pc, #460]	; (8006444 <eepromKontrol+0x314>)
 8006278:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800627a:	4b4e      	ldr	r3, [pc, #312]	; (80063b4 <eepromKontrol+0x284>)
 800627c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8006280:	4b71      	ldr	r3, [pc, #452]	; (8006448 <eepromKontrol+0x318>)
 8006282:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8006284:	4b4b      	ldr	r3, [pc, #300]	; (80063b4 <eepromKontrol+0x284>)
 8006286:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800628a:	4b70      	ldr	r3, [pc, #448]	; (800644c <eepromKontrol+0x31c>)
 800628c:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 800628e:	4b49      	ldr	r3, [pc, #292]	; (80063b4 <eepromKontrol+0x284>)
 8006290:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8006294:	4b6e      	ldr	r3, [pc, #440]	; (8006450 <eepromKontrol+0x320>)
 8006296:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8006298:	4b46      	ldr	r3, [pc, #280]	; (80063b4 <eepromKontrol+0x284>)
 800629a:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800629e:	4b6d      	ldr	r3, [pc, #436]	; (8006454 <eepromKontrol+0x324>)
 80062a0:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80062a2:	4b44      	ldr	r3, [pc, #272]	; (80063b4 <eepromKontrol+0x284>)
 80062a4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80062a8:	4b6b      	ldr	r3, [pc, #428]	; (8006458 <eepromKontrol+0x328>)
 80062aa:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80062ac:	4b41      	ldr	r3, [pc, #260]	; (80063b4 <eepromKontrol+0x284>)
 80062ae:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80062b2:	4b6a      	ldr	r3, [pc, #424]	; (800645c <eepromKontrol+0x32c>)
 80062b4:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80062b6:	4b3f      	ldr	r3, [pc, #252]	; (80063b4 <eepromKontrol+0x284>)
 80062b8:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80062bc:	4b68      	ldr	r3, [pc, #416]	; (8006460 <eepromKontrol+0x330>)
 80062be:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80062c0:	4b3c      	ldr	r3, [pc, #240]	; (80063b4 <eepromKontrol+0x284>)
 80062c2:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80062c6:	4b67      	ldr	r3, [pc, #412]	; (8006464 <eepromKontrol+0x334>)
 80062c8:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80062ca:	4b3a      	ldr	r3, [pc, #232]	; (80063b4 <eepromKontrol+0x284>)
 80062cc:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80062d0:	4b65      	ldr	r3, [pc, #404]	; (8006468 <eepromKontrol+0x338>)
 80062d2:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80062d4:	4b37      	ldr	r3, [pc, #220]	; (80063b4 <eepromKontrol+0x284>)
 80062d6:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80062da:	4b64      	ldr	r3, [pc, #400]	; (800646c <eepromKontrol+0x33c>)
 80062dc:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80062de:	4b35      	ldr	r3, [pc, #212]	; (80063b4 <eepromKontrol+0x284>)
 80062e0:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80062e4:	4b62      	ldr	r3, [pc, #392]	; (8006470 <eepromKontrol+0x340>)
 80062e6:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80062e8:	4b32      	ldr	r3, [pc, #200]	; (80063b4 <eepromKontrol+0x284>)
 80062ea:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80062ee:	4b61      	ldr	r3, [pc, #388]	; (8006474 <eepromKontrol+0x344>)
 80062f0:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 80062f2:	4b52      	ldr	r3, [pc, #328]	; (800643c <eepromKontrol+0x30c>)
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fe fff4 	bl	80052e4 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 80062fc:	4b4e      	ldr	r3, [pc, #312]	; (8006438 <eepromKontrol+0x308>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b09      	cmp	r3, #9
 8006302:	d902      	bls.n	800630a <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8006304:	4b4c      	ldr	r3, [pc, #304]	; (8006438 <eepromKontrol+0x308>)
 8006306:	2200      	movs	r2, #0
 8006308:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800630a:	4b4a      	ldr	r3, [pc, #296]	; (8006434 <eepromKontrol+0x304>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	2b09      	cmp	r3, #9
 8006310:	d902      	bls.n	8006318 <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8006312:	4b48      	ldr	r3, [pc, #288]	; (8006434 <eepromKontrol+0x304>)
 8006314:	2200      	movs	r2, #0
 8006316:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8006318:	4b45      	ldr	r3, [pc, #276]	; (8006430 <eepromKontrol+0x300>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	2b09      	cmp	r3, #9
 800631e:	d902      	bls.n	8006326 <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8006320:	4b43      	ldr	r3, [pc, #268]	; (8006430 <eepromKontrol+0x300>)
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8006326:	4b41      	ldr	r3, [pc, #260]	; (800642c <eepromKontrol+0x2fc>)
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b09      	cmp	r3, #9
 800632c:	d902      	bls.n	8006334 <eepromKontrol+0x204>
	    calismaSayisi10=0;
 800632e:	4b3f      	ldr	r3, [pc, #252]	; (800642c <eepromKontrol+0x2fc>)
 8006330:	2200      	movs	r2, #0
 8006332:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8006334:	4b3c      	ldr	r3, [pc, #240]	; (8006428 <eepromKontrol+0x2f8>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b09      	cmp	r3, #9
 800633a:	d902      	bls.n	8006342 <eepromKontrol+0x212>
	    calismaSayisi1=0;
 800633c:	4b3a      	ldr	r3, [pc, #232]	; (8006428 <eepromKontrol+0x2f8>)
 800633e:	2200      	movs	r2, #0
 8006340:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8006342:	4b1f      	ldr	r3, [pc, #124]	; (80063c0 <eepromKontrol+0x290>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d902      	bls.n	8006350 <eepromKontrol+0x220>
	    calismaSekli=0;
 800634a:	4b1d      	ldr	r3, [pc, #116]	; (80063c0 <eepromKontrol+0x290>)
 800634c:	2200      	movs	r2, #0
 800634e:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8006350:	4b1c      	ldr	r3, [pc, #112]	; (80063c4 <eepromKontrol+0x294>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d902      	bls.n	800635e <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8006358:	4b1a      	ldr	r3, [pc, #104]	; (80063c4 <eepromKontrol+0x294>)
 800635a:	2201      	movs	r2, #1
 800635c:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 800635e:	4b1a      	ldr	r3, [pc, #104]	; (80063c8 <eepromKontrol+0x298>)
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d902      	bls.n	800636c <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 8006366:	4b18      	ldr	r3, [pc, #96]	; (80063c8 <eepromKontrol+0x298>)
 8006368:	2200      	movs	r2, #0
 800636a:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800636c:	4b17      	ldr	r3, [pc, #92]	; (80063cc <eepromKontrol+0x29c>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d902      	bls.n	800637a <eepromKontrol+0x24a>
	    altLimit=1;
 8006374:	4b15      	ldr	r3, [pc, #84]	; (80063cc <eepromKontrol+0x29c>)
 8006376:	2201      	movs	r2, #1
 8006378:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800637a:	4b15      	ldr	r3, [pc, #84]	; (80063d0 <eepromKontrol+0x2a0>)
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d902      	bls.n	8006388 <eepromKontrol+0x258>
	    basincSalteri=1;
 8006382:	4b13      	ldr	r3, [pc, #76]	; (80063d0 <eepromKontrol+0x2a0>)
 8006384:	2201      	movs	r2, #1
 8006386:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8006388:	4b12      	ldr	r3, [pc, #72]	; (80063d4 <eepromKontrol+0x2a4>)
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2b03      	cmp	r3, #3
 800638e:	d902      	bls.n	8006396 <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8006390:	4b10      	ldr	r3, [pc, #64]	; (80063d4 <eepromKontrol+0x2a4>)
 8006392:	2203      	movs	r2, #3
 8006394:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8006396:	4b2d      	ldr	r3, [pc, #180]	; (800644c <eepromKontrol+0x31c>)
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d902      	bls.n	80063a4 <eepromKontrol+0x274>
	    kapiAcTipi=0;
 800639e:	4b2b      	ldr	r3, [pc, #172]	; (800644c <eepromKontrol+0x31c>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80063a4:	4b0c      	ldr	r3, [pc, #48]	; (80063d8 <eepromKontrol+0x2a8>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d965      	bls.n	8006478 <eepromKontrol+0x348>
	    kapi1Tip=1;
 80063ac:	4b0a      	ldr	r3, [pc, #40]	; (80063d8 <eepromKontrol+0x2a8>)
 80063ae:	2201      	movs	r2, #1
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	e061      	b.n	8006478 <eepromKontrol+0x348>
 80063b4:	20000b38 	.word	0x20000b38
 80063b8:	20000e5c 	.word	0x20000e5c
 80063bc:	20000bc9 	.word	0x20000bc9
 80063c0:	20000c9e 	.word	0x20000c9e
 80063c4:	20000ca1 	.word	0x20000ca1
 80063c8:	20000ca2 	.word	0x20000ca2
 80063cc:	20000ca3 	.word	0x20000ca3
 80063d0:	20000ca4 	.word	0x20000ca4
 80063d4:	20000ca5 	.word	0x20000ca5
 80063d8:	20000ca6 	.word	0x20000ca6
 80063dc:	20000cb6 	.word	0x20000cb6
 80063e0:	20000ca7 	.word	0x20000ca7
 80063e4:	20000cb7 	.word	0x20000cb7
 80063e8:	20000ca8 	.word	0x20000ca8
 80063ec:	20000cb8 	.word	0x20000cb8
 80063f0:	20000cab 	.word	0x20000cab
 80063f4:	20000cac 	.word	0x20000cac
 80063f8:	20000cad 	.word	0x20000cad
 80063fc:	20000cae 	.word	0x20000cae
 8006400:	20000caf 	.word	0x20000caf
 8006404:	20000cb0 	.word	0x20000cb0
 8006408:	20000cb1 	.word	0x20000cb1
 800640c:	20000cb2 	.word	0x20000cb2
 8006410:	20000cb3 	.word	0x20000cb3
 8006414:	20000cb4 	.word	0x20000cb4
 8006418:	20000cb5 	.word	0x20000cb5
 800641c:	20000cb9 	.word	0x20000cb9
 8006420:	20000cbb 	.word	0x20000cbb
 8006424:	20000c99 	.word	0x20000c99
 8006428:	20000c9a 	.word	0x20000c9a
 800642c:	20000c9b 	.word	0x20000c9b
 8006430:	200009c2 	.word	0x200009c2
 8006434:	200009c3 	.word	0x200009c3
 8006438:	20000c9c 	.word	0x20000c9c
 800643c:	20000cbe 	.word	0x20000cbe
 8006440:	20000cbc 	.word	0x20000cbc
 8006444:	20000caa 	.word	0x20000caa
 8006448:	20000cbd 	.word	0x20000cbd
 800644c:	20000ca9 	.word	0x20000ca9
 8006450:	20000cbf 	.word	0x20000cbf
 8006454:	20000cc0 	.word	0x20000cc0
 8006458:	20000cc1 	.word	0x20000cc1
 800645c:	20000cc2 	.word	0x20000cc2
 8006460:	20000cc3 	.word	0x20000cc3
 8006464:	20000cc4 	.word	0x20000cc4
 8006468:	20000cc5 	.word	0x20000cc5
 800646c:	20000cc6 	.word	0x20000cc6
 8006470:	20000cc7 	.word	0x20000cc7
 8006474:	20000cc8 	.word	0x20000cc8
	}

	if(kapi1AcSure>5) {
 8006478:	4b55      	ldr	r3, [pc, #340]	; (80065d0 <eepromKontrol+0x4a0>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b05      	cmp	r3, #5
 800647e:	d902      	bls.n	8006486 <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8006480:	4b53      	ldr	r3, [pc, #332]	; (80065d0 <eepromKontrol+0x4a0>)
 8006482:	2205      	movs	r2, #5
 8006484:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8006486:	4b53      	ldr	r3, [pc, #332]	; (80065d4 <eepromKontrol+0x4a4>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	2b02      	cmp	r3, #2
 800648c:	d902      	bls.n	8006494 <eepromKontrol+0x364>
	    kapi2Tip=1;
 800648e:	4b51      	ldr	r3, [pc, #324]	; (80065d4 <eepromKontrol+0x4a4>)
 8006490:	2201      	movs	r2, #1
 8006492:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8006494:	4b50      	ldr	r3, [pc, #320]	; (80065d8 <eepromKontrol+0x4a8>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b05      	cmp	r3, #5
 800649a:	d902      	bls.n	80064a2 <eepromKontrol+0x372>
	    kapi2AcSure=5;
 800649c:	4b4e      	ldr	r3, [pc, #312]	; (80065d8 <eepromKontrol+0x4a8>)
 800649e:	2205      	movs	r2, #5
 80064a0:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80064a2:	4b4e      	ldr	r3, [pc, #312]	; (80065dc <eepromKontrol+0x4ac>)
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d902      	bls.n	80064b0 <eepromKontrol+0x380>
	    kapitablaTip=1;
 80064aa:	4b4c      	ldr	r3, [pc, #304]	; (80065dc <eepromKontrol+0x4ac>)
 80064ac:	2201      	movs	r2, #1
 80064ae:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80064b0:	4b4b      	ldr	r3, [pc, #300]	; (80065e0 <eepromKontrol+0x4b0>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d902      	bls.n	80064be <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 80064b8:	4b49      	ldr	r3, [pc, #292]	; (80065e0 <eepromKontrol+0x4b0>)
 80064ba:	2202      	movs	r2, #2
 80064bc:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80064be:	4b49      	ldr	r3, [pc, #292]	; (80065e4 <eepromKontrol+0x4b4>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b05      	cmp	r3, #5
 80064c4:	d902      	bls.n	80064cc <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 80064c6:	4b47      	ldr	r3, [pc, #284]	; (80065e4 <eepromKontrol+0x4b4>)
 80064c8:	2205      	movs	r2, #5
 80064ca:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80064cc:	4b46      	ldr	r3, [pc, #280]	; (80065e8 <eepromKontrol+0x4b8>)
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d902      	bls.n	80064da <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 80064d4:	4b44      	ldr	r3, [pc, #272]	; (80065e8 <eepromKontrol+0x4b8>)
 80064d6:	2200      	movs	r2, #0
 80064d8:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80064da:	4b44      	ldr	r3, [pc, #272]	; (80065ec <eepromKontrol+0x4bc>)
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d902      	bls.n	80064e8 <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 80064e2:	4b42      	ldr	r3, [pc, #264]	; (80065ec <eepromKontrol+0x4bc>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80064e8:	4b41      	ldr	r3, [pc, #260]	; (80065f0 <eepromKontrol+0x4c0>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d902      	bls.n	80064f6 <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 80064f0:	4b3f      	ldr	r3, [pc, #252]	; (80065f0 <eepromKontrol+0x4c0>)
 80064f2:	2201      	movs	r2, #1
 80064f4:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80064f6:	4b3f      	ldr	r3, [pc, #252]	; (80065f4 <eepromKontrol+0x4c4>)
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d902      	bls.n	8006504 <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 80064fe:	4b3d      	ldr	r3, [pc, #244]	; (80065f4 <eepromKontrol+0x4c4>)
 8006500:	2201      	movs	r2, #1
 8006502:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8006504:	4b3c      	ldr	r3, [pc, #240]	; (80065f8 <eepromKontrol+0x4c8>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d902      	bls.n	8006512 <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 800650c:	4b3a      	ldr	r3, [pc, #232]	; (80065f8 <eepromKontrol+0x4c8>)
 800650e:	2200      	movs	r2, #0
 8006510:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8006512:	4b3a      	ldr	r3, [pc, #232]	; (80065fc <eepromKontrol+0x4cc>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d902      	bls.n	8006520 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 800651a:	4b38      	ldr	r3, [pc, #224]	; (80065fc <eepromKontrol+0x4cc>)
 800651c:	2200      	movs	r2, #0
 800651e:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8006520:	4b37      	ldr	r3, [pc, #220]	; (8006600 <eepromKontrol+0x4d0>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b05      	cmp	r3, #5
 8006526:	d902      	bls.n	800652e <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8006528:	4b35      	ldr	r3, [pc, #212]	; (8006600 <eepromKontrol+0x4d0>)
 800652a:	2200      	movs	r2, #0
 800652c:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 800652e:	4b35      	ldr	r3, [pc, #212]	; (8006604 <eepromKontrol+0x4d4>)
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	2b05      	cmp	r3, #5
 8006534:	d902      	bls.n	800653c <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 8006536:	4b33      	ldr	r3, [pc, #204]	; (8006604 <eepromKontrol+0x4d4>)
 8006538:	2200      	movs	r2, #0
 800653a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 800653c:	4b32      	ldr	r3, [pc, #200]	; (8006608 <eepromKontrol+0x4d8>)
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2b05      	cmp	r3, #5
 8006542:	d902      	bls.n	800654a <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 8006544:	4b30      	ldr	r3, [pc, #192]	; (8006608 <eepromKontrol+0x4d8>)
 8006546:	2200      	movs	r2, #0
 8006548:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 800654a:	4b30      	ldr	r3, [pc, #192]	; (800660c <eepromKontrol+0x4dc>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	2b05      	cmp	r3, #5
 8006550:	d902      	bls.n	8006558 <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 8006552:	4b2e      	ldr	r3, [pc, #184]	; (800660c <eepromKontrol+0x4dc>)
 8006554:	2200      	movs	r2, #0
 8006556:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8006558:	4b2d      	ldr	r3, [pc, #180]	; (8006610 <eepromKontrol+0x4e0>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	2bb4      	cmp	r3, #180	; 0xb4
 800655e:	d902      	bls.n	8006566 <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8006560:	4b2b      	ldr	r3, [pc, #172]	; (8006610 <eepromKontrol+0x4e0>)
 8006562:	223c      	movs	r2, #60	; 0x3c
 8006564:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8006566:	4b2b      	ldr	r3, [pc, #172]	; (8006614 <eepromKontrol+0x4e4>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b01      	cmp	r3, #1
 800656c:	d902      	bls.n	8006574 <eepromKontrol+0x444>
	    buzzer=0;
 800656e:	4b29      	ldr	r3, [pc, #164]	; (8006614 <eepromKontrol+0x4e4>)
 8006570:	2200      	movs	r2, #0
 8006572:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8006574:	4b28      	ldr	r3, [pc, #160]	; (8006618 <eepromKontrol+0x4e8>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	2b01      	cmp	r3, #1
 800657a:	d902      	bls.n	8006582 <eepromKontrol+0x452>
	    demoMode=0;
 800657c:	4b26      	ldr	r3, [pc, #152]	; (8006618 <eepromKontrol+0x4e8>)
 800657e:	2200      	movs	r2, #0
 8006580:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8006582:	4b26      	ldr	r3, [pc, #152]	; (800661c <eepromKontrol+0x4ec>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d902      	bls.n	8006590 <eepromKontrol+0x460>
	    calismaSayModu=0;
 800658a:	4b24      	ldr	r3, [pc, #144]	; (800661c <eepromKontrol+0x4ec>)
 800658c:	2200      	movs	r2, #0
 800658e:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8006590:	4b23      	ldr	r3, [pc, #140]	; (8006620 <eepromKontrol+0x4f0>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d902      	bls.n	800659e <eepromKontrol+0x46e>
	    dilSecim=0;
 8006598:	4b21      	ldr	r3, [pc, #132]	; (8006620 <eepromKontrol+0x4f0>)
 800659a:	2200      	movs	r2, #0
 800659c:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 800659e:	4b21      	ldr	r3, [pc, #132]	; (8006624 <eepromKontrol+0x4f4>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d902      	bls.n	80065ac <eepromKontrol+0x47c>
		iotMode=0;
 80065a6:	4b1f      	ldr	r3, [pc, #124]	; (8006624 <eepromKontrol+0x4f4>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 80065ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065b0:	f003 f8a4 	bl	80096fc <HAL_Delay>

	if(iotMode == 1 && type == 1) {
 80065b4:	4b1b      	ldr	r3, [pc, #108]	; (8006624 <eepromKontrol+0x4f4>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d104      	bne.n	80065c6 <eepromKontrol+0x496>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <eepromKontrol+0x496>
		convertAndSendData();
 80065c2:	f7ff fd81 	bl	80060c8 <convertAndSendData>
	}
}
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	20000cb6 	.word	0x20000cb6
 80065d4:	20000ca7 	.word	0x20000ca7
 80065d8:	20000cb7 	.word	0x20000cb7
 80065dc:	20000ca8 	.word	0x20000ca8
 80065e0:	20000caa 	.word	0x20000caa
 80065e4:	20000cb8 	.word	0x20000cb8
 80065e8:	20000cab 	.word	0x20000cab
 80065ec:	20000cac 	.word	0x20000cac
 80065f0:	20000cad 	.word	0x20000cad
 80065f4:	20000cae 	.word	0x20000cae
 80065f8:	20000caf 	.word	0x20000caf
 80065fc:	20000cb0 	.word	0x20000cb0
 8006600:	20000cb1 	.word	0x20000cb1
 8006604:	20000cb2 	.word	0x20000cb2
 8006608:	20000cb3 	.word	0x20000cb3
 800660c:	20000cb4 	.word	0x20000cb4
 8006610:	20000cb5 	.word	0x20000cb5
 8006614:	20000cb9 	.word	0x20000cb9
 8006618:	20000cbb 	.word	0x20000cbb
 800661c:	20000cbd 	.word	0x20000cbd
 8006620:	20000cbe 	.word	0x20000cbe
 8006624:	20000cbc 	.word	0x20000cbc

08006628 <eepromKontrol4IoT>:

void eepromKontrol4IoT() {
 8006628:	b580      	push	{r7, lr}
 800662a:	af00      	add	r7, sp, #0
	takeCharFromEEPROM4ID(&hi2c1);
 800662c:	480e      	ldr	r0, [pc, #56]	; (8006668 <eepromKontrol4IoT+0x40>)
 800662e:	f7fb fa59 	bl	8001ae4 <takeCharFromEEPROM4ID>
	HAL_Delay(500);
 8006632:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006636:	f003 f861 	bl	80096fc <HAL_Delay>
	if(iotMode == 1) {
 800663a:	4b0c      	ldr	r3, [pc, #48]	; (800666c <eepromKontrol4IoT+0x44>)
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d10f      	bne.n	8006662 <eepromKontrol4IoT+0x3a>
		takeCharFromEEPROM4Wifi(&hi2c1, 1);
 8006642:	2101      	movs	r1, #1
 8006644:	4808      	ldr	r0, [pc, #32]	; (8006668 <eepromKontrol4IoT+0x40>)
 8006646:	f7fb fa71 	bl	8001b2c <takeCharFromEEPROM4Wifi>
		HAL_Delay(500);
 800664a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800664e:	f003 f855 	bl	80096fc <HAL_Delay>
		takeCharFromEEPROM4Wifi(&hi2c1, 2);
 8006652:	2102      	movs	r1, #2
 8006654:	4804      	ldr	r0, [pc, #16]	; (8006668 <eepromKontrol4IoT+0x40>)
 8006656:	f7fb fa69 	bl	8001b2c <takeCharFromEEPROM4Wifi>
		HAL_Delay(500);
 800665a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800665e:	f003 f84d 	bl	80096fc <HAL_Delay>
	}
}
 8006662:	bf00      	nop
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	20000e5c 	.word	0x20000e5c
 800666c:	20000cbc 	.word	0x20000cbc

08006670 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8006670:	b590      	push	{r4, r7, lr}
 8006672:	b089      	sub	sp, #36	; 0x24
 8006674:	af04      	add	r7, sp, #16
 8006676:	4603      	mov	r3, r0
 8006678:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 800667a:	4b26      	ldr	r3, [pc, #152]	; (8006714 <hata2EEPROM+0xa4>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	1e5a      	subs	r2, r3, #1
 8006680:	4b25      	ldr	r3, [pc, #148]	; (8006718 <hata2EEPROM+0xa8>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4413      	add	r3, r2
 8006686:	4a25      	ldr	r2, [pc, #148]	; (800671c <hata2EEPROM+0xac>)
 8006688:	5cd3      	ldrb	r3, [r2, r3]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 800668e:	f000 f849 	bl	8006724 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8006692:	e000      	b.n	8006696 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8006694:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8006696:	2300      	movs	r3, #0
 8006698:	60fb      	str	r3, [r7, #12]
 800669a:	e012      	b.n	80066c2 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 800669c:	4b1e      	ldr	r3, [pc, #120]	; (8006718 <hata2EEPROM+0xa8>)
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4413      	add	r3, r2
 80066a4:	4a1d      	ldr	r2, [pc, #116]	; (800671c <hata2EEPROM+0xac>)
 80066a6:	5cd3      	ldrb	r3, [r2, r3]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d107      	bne.n	80066bc <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80066ac:	4b1a      	ldr	r3, [pc, #104]	; (8006718 <hata2EEPROM+0xa8>)
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	4413      	add	r3, r2
 80066b4:	4919      	ldr	r1, [pc, #100]	; (800671c <hata2EEPROM+0xac>)
 80066b6:	79fa      	ldrb	r2, [r7, #7]
 80066b8:	54ca      	strb	r2, [r1, r3]
					break;
 80066ba:	e007      	b.n	80066cc <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	3301      	adds	r3, #1
 80066c0:	60fb      	str	r3, [r7, #12]
 80066c2:	4b14      	ldr	r3, [pc, #80]	; (8006714 <hata2EEPROM+0xa4>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	dbe7      	blt.n	800669c <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 80066cc:	4b12      	ldr	r3, [pc, #72]	; (8006718 <hata2EEPROM+0xa8>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	b299      	uxth	r1, r3
 80066d2:	4b10      	ldr	r3, [pc, #64]	; (8006714 <hata2EEPROM+0xa4>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	b298      	uxth	r0, r3
 80066d8:	4b0f      	ldr	r3, [pc, #60]	; (8006718 <hata2EEPROM+0xa8>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a0f      	ldr	r2, [pc, #60]	; (800671c <hata2EEPROM+0xac>)
 80066de:	4413      	add	r3, r2
 80066e0:	4a0c      	ldr	r2, [pc, #48]	; (8006714 <hata2EEPROM+0xa4>)
 80066e2:	6812      	ldr	r2, [r2, #0]
 80066e4:	b292      	uxth	r2, r2
 80066e6:	f640 34b8 	movw	r4, #3000	; 0xbb8
 80066ea:	9402      	str	r4, [sp, #8]
 80066ec:	9201      	str	r2, [sp, #4]
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	4603      	mov	r3, r0
 80066f2:	460a      	mov	r2, r1
 80066f4:	21a0      	movs	r1, #160	; 0xa0
 80066f6:	480a      	ldr	r0, [pc, #40]	; (8006720 <hata2EEPROM+0xb0>)
 80066f8:	f004 f88a 	bl	800a810 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80066fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006700:	f002 fffc 	bl	80096fc <HAL_Delay>
	eepromKontrol(1);
 8006704:	2001      	movs	r0, #1
 8006706:	f7ff fd13 	bl	8006130 <eepromKontrol>
}
 800670a:	bf00      	nop
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	bd90      	pop	{r4, r7, pc}
 8006712:	bf00      	nop
 8006714:	20000938 	.word	0x20000938
 8006718:	2000093c 	.word	0x2000093c
 800671c:	20000b38 	.word	0x20000b38
 8006720:	20000e5c 	.word	0x20000e5c

08006724 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 800672a:	2300      	movs	r3, #0
 800672c:	607b      	str	r3, [r7, #4]
 800672e:	e009      	b.n	8006744 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8006730:	4a0a      	ldr	r2, [pc, #40]	; (800675c <eepromDataFillWithEmpty+0x38>)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006738:	4a09      	ldr	r2, [pc, #36]	; (8006760 <eepromDataFillWithEmpty+0x3c>)
 800673a:	2100      	movs	r1, #0
 800673c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	3301      	adds	r3, #1
 8006742:	607b      	str	r3, [r7, #4]
 8006744:	4b07      	ldr	r3, [pc, #28]	; (8006764 <eepromDataFillWithEmpty+0x40>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	429a      	cmp	r2, r3
 800674c:	dbf0      	blt.n	8006730 <eepromDataFillWithEmpty+0xc>
	}
}
 800674e:	bf00      	nop
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	bc80      	pop	{r7}
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	20000910 	.word	0x20000910
 8006760:	20000b38 	.word	0x20000b38
 8006764:	20000938 	.word	0x20000938

08006768 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8006768:	b580      	push	{r7, lr}
 800676a:	af00      	add	r7, sp, #0
	timer1=millis;
 800676c:	4b47      	ldr	r3, [pc, #284]	; (800688c <bekle+0x124>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a47      	ldr	r2, [pc, #284]	; (8006890 <bekle+0x128>)
 8006772:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006774:	e002      	b.n	800677c <bekle+0x14>
    	butonKontrol = 1;
 8006776:	4b47      	ldr	r3, [pc, #284]	; (8006894 <bekle+0x12c>)
 8006778:	2201      	movs	r2, #1
 800677a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800677c:	2101      	movs	r1, #1
 800677e:	4846      	ldr	r0, [pc, #280]	; (8006898 <bekle+0x130>)
 8006780:	f003 fd8c 	bl	800a29c <HAL_GPIO_ReadPin>
 8006784:	4603      	mov	r3, r0
 8006786:	2b01      	cmp	r3, #1
 8006788:	d109      	bne.n	800679e <bekle+0x36>
 800678a:	4b40      	ldr	r3, [pc, #256]	; (800688c <bekle+0x124>)
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	4b40      	ldr	r3, [pc, #256]	; (8006890 <bekle+0x128>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	429a      	cmp	r2, r3
 8006794:	d0ef      	beq.n	8006776 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006796:	e002      	b.n	800679e <bekle+0x36>
    	butonKontrol = 1;
 8006798:	4b3e      	ldr	r3, [pc, #248]	; (8006894 <bekle+0x12c>)
 800679a:	2201      	movs	r2, #1
 800679c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800679e:	2108      	movs	r1, #8
 80067a0:	483e      	ldr	r0, [pc, #248]	; (800689c <bekle+0x134>)
 80067a2:	f003 fd7b 	bl	800a29c <HAL_GPIO_ReadPin>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d109      	bne.n	80067c0 <bekle+0x58>
 80067ac:	4b37      	ldr	r3, [pc, #220]	; (800688c <bekle+0x124>)
 80067ae:	681a      	ldr	r2, [r3, #0]
 80067b0:	4b37      	ldr	r3, [pc, #220]	; (8006890 <bekle+0x128>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d0ef      	beq.n	8006798 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80067b8:	e002      	b.n	80067c0 <bekle+0x58>
    	butonKontrol = 1;
 80067ba:	4b36      	ldr	r3, [pc, #216]	; (8006894 <bekle+0x12c>)
 80067bc:	2201      	movs	r2, #1
 80067be:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80067c0:	2102      	movs	r1, #2
 80067c2:	4835      	ldr	r0, [pc, #212]	; (8006898 <bekle+0x130>)
 80067c4:	f003 fd6a 	bl	800a29c <HAL_GPIO_ReadPin>
 80067c8:	4603      	mov	r3, r0
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d109      	bne.n	80067e2 <bekle+0x7a>
 80067ce:	4b2f      	ldr	r3, [pc, #188]	; (800688c <bekle+0x124>)
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	4b2f      	ldr	r3, [pc, #188]	; (8006890 <bekle+0x128>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d0ef      	beq.n	80067ba <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80067da:	e002      	b.n	80067e2 <bekle+0x7a>
    	butonKontrol = 1;
 80067dc:	4b2d      	ldr	r3, [pc, #180]	; (8006894 <bekle+0x12c>)
 80067de:	2201      	movs	r2, #1
 80067e0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80067e2:	2104      	movs	r1, #4
 80067e4:	482c      	ldr	r0, [pc, #176]	; (8006898 <bekle+0x130>)
 80067e6:	f003 fd59 	bl	800a29c <HAL_GPIO_ReadPin>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d109      	bne.n	8006804 <bekle+0x9c>
 80067f0:	4b26      	ldr	r3, [pc, #152]	; (800688c <bekle+0x124>)
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	4b26      	ldr	r3, [pc, #152]	; (8006890 <bekle+0x128>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d0ef      	beq.n	80067dc <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80067fc:	e002      	b.n	8006804 <bekle+0x9c>
    	butonKontrol = 1;
 80067fe:	4b25      	ldr	r3, [pc, #148]	; (8006894 <bekle+0x12c>)
 8006800:	2201      	movs	r2, #1
 8006802:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006804:	2108      	movs	r1, #8
 8006806:	4824      	ldr	r0, [pc, #144]	; (8006898 <bekle+0x130>)
 8006808:	f003 fd48 	bl	800a29c <HAL_GPIO_ReadPin>
 800680c:	4603      	mov	r3, r0
 800680e:	2b01      	cmp	r3, #1
 8006810:	d109      	bne.n	8006826 <bekle+0xbe>
 8006812:	4b1e      	ldr	r3, [pc, #120]	; (800688c <bekle+0x124>)
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	4b1e      	ldr	r3, [pc, #120]	; (8006890 <bekle+0x128>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d0ef      	beq.n	80067fe <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800681e:	e002      	b.n	8006826 <bekle+0xbe>
    	butonKontrol = 1;
 8006820:	4b1c      	ldr	r3, [pc, #112]	; (8006894 <bekle+0x12c>)
 8006822:	2201      	movs	r2, #1
 8006824:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006826:	2180      	movs	r1, #128	; 0x80
 8006828:	481c      	ldr	r0, [pc, #112]	; (800689c <bekle+0x134>)
 800682a:	f003 fd37 	bl	800a29c <HAL_GPIO_ReadPin>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d109      	bne.n	8006848 <bekle+0xe0>
 8006834:	4b15      	ldr	r3, [pc, #84]	; (800688c <bekle+0x124>)
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	4b15      	ldr	r3, [pc, #84]	; (8006890 <bekle+0x128>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	429a      	cmp	r2, r3
 800683e:	d0ef      	beq.n	8006820 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006840:	e002      	b.n	8006848 <bekle+0xe0>
    	butonKontrol = 1;
 8006842:	4b14      	ldr	r3, [pc, #80]	; (8006894 <bekle+0x12c>)
 8006844:	2201      	movs	r2, #1
 8006846:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006848:	f44f 7180 	mov.w	r1, #256	; 0x100
 800684c:	4813      	ldr	r0, [pc, #76]	; (800689c <bekle+0x134>)
 800684e:	f003 fd25 	bl	800a29c <HAL_GPIO_ReadPin>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d109      	bne.n	800686c <bekle+0x104>
 8006858:	4b0c      	ldr	r3, [pc, #48]	; (800688c <bekle+0x124>)
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	4b0c      	ldr	r3, [pc, #48]	; (8006890 <bekle+0x128>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	429a      	cmp	r2, r3
 8006862:	d0ee      	beq.n	8006842 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006864:	e002      	b.n	800686c <bekle+0x104>
    	butonKontrol = 1;
 8006866:	4b0b      	ldr	r3, [pc, #44]	; (8006894 <bekle+0x12c>)
 8006868:	2201      	movs	r2, #1
 800686a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800686c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006870:	480a      	ldr	r0, [pc, #40]	; (800689c <bekle+0x134>)
 8006872:	f003 fd13 	bl	800a29c <HAL_GPIO_ReadPin>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d105      	bne.n	8006888 <bekle+0x120>
 800687c:	4b03      	ldr	r3, [pc, #12]	; (800688c <bekle+0x124>)
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	4b03      	ldr	r3, [pc, #12]	; (8006890 <bekle+0x128>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	429a      	cmp	r2, r3
 8006886:	d0ee      	beq.n	8006866 <bekle+0xfe>
    }

}
 8006888:	bf00      	nop
 800688a:	bd80      	pop	{r7, pc}
 800688c:	20000bd4 	.word	0x20000bd4
 8006890:	20000bdc 	.word	0x20000bdc
 8006894:	20000ccc 	.word	0x20000ccc
 8006898:	40010800 	.word	0x40010800
 800689c:	40011000 	.word	0x40011000

080068a0 <i2cTest>:

void i2cTest() {
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 80068a6:	463b      	mov	r3, r7
 80068a8:	2200      	movs	r2, #0
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	605a      	str	r2, [r3, #4]
 80068ae:	609a      	str	r2, [r3, #8]
 80068b0:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 80068b2:	4b50      	ldr	r3, [pc, #320]	; (80069f4 <i2cTest+0x154>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	4b4e      	ldr	r3, [pc, #312]	; (80069f4 <i2cTest+0x154>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f022 0201 	bic.w	r2, r2, #1
 80068c0:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80068c2:	484c      	ldr	r0, [pc, #304]	; (80069f4 <i2cTest+0x154>)
 80068c4:	f003 fe76 	bl	800a5b4 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80068c8:	23c0      	movs	r3, #192	; 0xc0
 80068ca:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 80068cc:	2311      	movs	r3, #17
 80068ce:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80068d0:	2301      	movs	r3, #1
 80068d2:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80068d4:	2303      	movs	r3, #3
 80068d6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80068d8:	463b      	mov	r3, r7
 80068da:	4619      	mov	r1, r3
 80068dc:	4846      	ldr	r0, [pc, #280]	; (80069f8 <i2cTest+0x158>)
 80068de:	f003 fa7d 	bl	8009ddc <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80068e2:	2201      	movs	r2, #1
 80068e4:	2140      	movs	r1, #64	; 0x40
 80068e6:	4844      	ldr	r0, [pc, #272]	; (80069f8 <i2cTest+0x158>)
 80068e8:	f003 fcef 	bl	800a2ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80068ec:	2201      	movs	r2, #1
 80068ee:	2180      	movs	r1, #128	; 0x80
 80068f0:	4841      	ldr	r0, [pc, #260]	; (80069f8 <i2cTest+0x158>)
 80068f2:	f003 fcea 	bl	800a2ca <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 80068f6:	200a      	movs	r0, #10
 80068f8:	f002 ff00 	bl	80096fc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80068fc:	bf00      	nop
 80068fe:	2140      	movs	r1, #64	; 0x40
 8006900:	483d      	ldr	r0, [pc, #244]	; (80069f8 <i2cTest+0x158>)
 8006902:	f003 fccb 	bl	800a29c <HAL_GPIO_ReadPin>
 8006906:	4603      	mov	r3, r0
 8006908:	2b01      	cmp	r3, #1
 800690a:	d006      	beq.n	800691a <i2cTest+0x7a>
 800690c:	2180      	movs	r1, #128	; 0x80
 800690e:	483a      	ldr	r0, [pc, #232]	; (80069f8 <i2cTest+0x158>)
 8006910:	f003 fcc4 	bl	800a29c <HAL_GPIO_ReadPin>
 8006914:	4603      	mov	r3, r0
 8006916:	2b01      	cmp	r3, #1
 8006918:	d1f1      	bne.n	80068fe <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800691a:	2200      	movs	r2, #0
 800691c:	2180      	movs	r1, #128	; 0x80
 800691e:	4836      	ldr	r0, [pc, #216]	; (80069f8 <i2cTest+0x158>)
 8006920:	f003 fcd3 	bl	800a2ca <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8006924:	200a      	movs	r0, #10
 8006926:	f002 fee9 	bl	80096fc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 800692a:	bf00      	nop
 800692c:	2180      	movs	r1, #128	; 0x80
 800692e:	4832      	ldr	r0, [pc, #200]	; (80069f8 <i2cTest+0x158>)
 8006930:	f003 fcb4 	bl	800a29c <HAL_GPIO_ReadPin>
 8006934:	4603      	mov	r3, r0
 8006936:	2b01      	cmp	r3, #1
 8006938:	d0f8      	beq.n	800692c <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800693a:	2200      	movs	r2, #0
 800693c:	2140      	movs	r1, #64	; 0x40
 800693e:	482e      	ldr	r0, [pc, #184]	; (80069f8 <i2cTest+0x158>)
 8006940:	f003 fcc3 	bl	800a2ca <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006944:	200a      	movs	r0, #10
 8006946:	f002 fed9 	bl	80096fc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800694a:	bf00      	nop
 800694c:	2140      	movs	r1, #64	; 0x40
 800694e:	482a      	ldr	r0, [pc, #168]	; (80069f8 <i2cTest+0x158>)
 8006950:	f003 fca4 	bl	800a29c <HAL_GPIO_ReadPin>
 8006954:	4603      	mov	r3, r0
 8006956:	2b01      	cmp	r3, #1
 8006958:	d0f8      	beq.n	800694c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800695a:	2201      	movs	r2, #1
 800695c:	2140      	movs	r1, #64	; 0x40
 800695e:	4826      	ldr	r0, [pc, #152]	; (80069f8 <i2cTest+0x158>)
 8006960:	f003 fcb3 	bl	800a2ca <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006964:	200a      	movs	r0, #10
 8006966:	f002 fec9 	bl	80096fc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 800696a:	bf00      	nop
 800696c:	2140      	movs	r1, #64	; 0x40
 800696e:	4822      	ldr	r0, [pc, #136]	; (80069f8 <i2cTest+0x158>)
 8006970:	f003 fc94 	bl	800a29c <HAL_GPIO_ReadPin>
 8006974:	4603      	mov	r3, r0
 8006976:	2b01      	cmp	r3, #1
 8006978:	d1f8      	bne.n	800696c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800697a:	2201      	movs	r2, #1
 800697c:	2180      	movs	r1, #128	; 0x80
 800697e:	481e      	ldr	r0, [pc, #120]	; (80069f8 <i2cTest+0x158>)
 8006980:	f003 fca3 	bl	800a2ca <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006984:	200a      	movs	r0, #10
 8006986:	f002 feb9 	bl	80096fc <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800698a:	bf00      	nop
 800698c:	2180      	movs	r1, #128	; 0x80
 800698e:	481a      	ldr	r0, [pc, #104]	; (80069f8 <i2cTest+0x158>)
 8006990:	f003 fc84 	bl	800a29c <HAL_GPIO_ReadPin>
 8006994:	4603      	mov	r3, r0
 8006996:	2b01      	cmp	r3, #1
 8006998:	d1f8      	bne.n	800698c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800699a:	23c0      	movs	r3, #192	; 0xc0
 800699c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 800699e:	2312      	movs	r3, #18
 80069a0:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80069a2:	2301      	movs	r3, #1
 80069a4:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80069a6:	2303      	movs	r3, #3
 80069a8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80069aa:	463b      	mov	r3, r7
 80069ac:	4619      	mov	r1, r3
 80069ae:	4812      	ldr	r0, [pc, #72]	; (80069f8 <i2cTest+0x158>)
 80069b0:	f003 fa14 	bl	8009ddc <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80069b4:	4b0f      	ldr	r3, [pc, #60]	; (80069f4 <i2cTest+0x154>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	4b0e      	ldr	r3, [pc, #56]	; (80069f4 <i2cTest+0x154>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069c2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80069c4:	4b0b      	ldr	r3, [pc, #44]	; (80069f4 <i2cTest+0x154>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681a      	ldr	r2, [r3, #0]
 80069ca:	4b0a      	ldr	r3, [pc, #40]	; (80069f4 <i2cTest+0x154>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069d2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 80069d4:	4b07      	ldr	r3, [pc, #28]	; (80069f4 <i2cTest+0x154>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	4b06      	ldr	r3, [pc, #24]	; (80069f4 <i2cTest+0x154>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f042 0201 	orr.w	r2, r2, #1
 80069e2:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80069e4:	4803      	ldr	r0, [pc, #12]	; (80069f4 <i2cTest+0x154>)
 80069e6:	f003 fca1 	bl	800a32c <HAL_I2C_Init>
}
 80069ea:	bf00      	nop
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20000e5c 	.word	0x20000e5c
 80069f8:	40010c00 	.word	0x40010c00

080069fc <checkLCDBacklight>:

void checkLCDBacklight() {
 80069fc:	b580      	push	{r7, lr}
 80069fe:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <checkLCDBacklight+0x34>)
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	4b0b      	ldr	r3, [pc, #44]	; (8006a34 <checkLCDBacklight+0x38>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	1ad2      	subs	r2, r2, r3
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <checkLCDBacklight+0x3c>)
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	4619      	mov	r1, r3
 8006a10:	460b      	mov	r3, r1
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	440b      	add	r3, r1
 8006a16:	005b      	lsls	r3, r3, #1
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d303      	bcc.n	8006a24 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	f7fa f815 	bl	8000a4c <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8006a22:	e002      	b.n	8006a2a <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 8006a24:	2001      	movs	r0, #1
 8006a26:	f7fa f811 	bl	8000a4c <lcd_backlight>
}
 8006a2a:	bf00      	nop
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	20000bd4 	.word	0x20000bd4
 8006a34:	20000bf0 	.word	0x20000bf0
 8006a38:	20000940 	.word	0x20000940

08006a3c <checkBasincSalteri>:

void checkBasincSalteri() {
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8006a40:	4b13      	ldr	r3, [pc, #76]	; (8006a90 <checkBasincSalteri+0x54>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d102      	bne.n	8006a4e <checkBasincSalteri+0x12>
		basincVar=1;
 8006a48:	4b12      	ldr	r3, [pc, #72]	; (8006a94 <checkBasincSalteri+0x58>)
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8006a4e:	4b10      	ldr	r3, [pc, #64]	; (8006a90 <checkBasincSalteri+0x54>)
 8006a50:	781b      	ldrb	r3, [r3, #0]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d119      	bne.n	8006a8a <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8006a56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a5a:	480f      	ldr	r0, [pc, #60]	; (8006a98 <checkBasincSalteri+0x5c>)
 8006a5c:	f003 fc1e 	bl	800a29c <HAL_GPIO_ReadPin>
 8006a60:	4603      	mov	r3, r0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10a      	bne.n	8006a7c <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8006a66:	4b0d      	ldr	r3, [pc, #52]	; (8006a9c <checkBasincSalteri+0x60>)
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	4b0d      	ldr	r3, [pc, #52]	; (8006aa0 <checkBasincSalteri+0x64>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d90a      	bls.n	8006a8a <checkBasincSalteri+0x4e>
				basincVar=1;
 8006a74:	4b07      	ldr	r3, [pc, #28]	; (8006a94 <checkBasincSalteri+0x58>)
 8006a76:	2201      	movs	r2, #1
 8006a78:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8006a7a:	e006      	b.n	8006a8a <checkBasincSalteri+0x4e>
			timer5=millis;
 8006a7c:	4b07      	ldr	r3, [pc, #28]	; (8006a9c <checkBasincSalteri+0x60>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a07      	ldr	r2, [pc, #28]	; (8006aa0 <checkBasincSalteri+0x64>)
 8006a82:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8006a84:	4b03      	ldr	r3, [pc, #12]	; (8006a94 <checkBasincSalteri+0x58>)
 8006a86:	2200      	movs	r2, #0
 8006a88:	701a      	strb	r2, [r3, #0]
}
 8006a8a:	bf00      	nop
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20000ca4 	.word	0x20000ca4
 8006a94:	20000ca0 	.word	0x20000ca0
 8006a98:	40011000 	.word	0x40011000
 8006a9c:	20000bd4 	.word	0x20000bd4
 8006aa0:	20000bec 	.word	0x20000bec

08006aa4 <checkBasGonder>:

void checkBasGonder() {
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8006aa8:	4b1b      	ldr	r3, [pc, #108]	; (8006b18 <checkBasGonder+0x74>)
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d10b      	bne.n	8006ac8 <checkBasGonder+0x24>
 8006ab0:	4b1a      	ldr	r3, [pc, #104]	; (8006b1c <checkBasGonder+0x78>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <checkBasGonder+0x24>
 8006ab8:	4b19      	ldr	r3, [pc, #100]	; (8006b20 <checkBasGonder+0x7c>)
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d103      	bne.n	8006ac8 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8006ac0:	4b18      	ldr	r3, [pc, #96]	; (8006b24 <checkBasGonder+0x80>)
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	e009      	b.n	8006adc <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8006ac8:	4b14      	ldr	r3, [pc, #80]	; (8006b1c <checkBasGonder+0x78>)
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	f083 0301 	eor.w	r3, r3, #1
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8006ad6:	4b13      	ldr	r3, [pc, #76]	; (8006b24 <checkBasGonder+0x80>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8006adc:	4b0e      	ldr	r3, [pc, #56]	; (8006b18 <checkBasGonder+0x74>)
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d10b      	bne.n	8006afc <checkBasGonder+0x58>
 8006ae4:	4b10      	ldr	r3, [pc, #64]	; (8006b28 <checkBasGonder+0x84>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d007      	beq.n	8006afc <checkBasGonder+0x58>
 8006aec:	4b0c      	ldr	r3, [pc, #48]	; (8006b20 <checkBasGonder+0x7c>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d103      	bne.n	8006afc <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8006af4:	4b0d      	ldr	r3, [pc, #52]	; (8006b2c <checkBasGonder+0x88>)
 8006af6:	2201      	movs	r2, #1
 8006af8:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8006afa:	e009      	b.n	8006b10 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8006afc:	4b0a      	ldr	r3, [pc, #40]	; (8006b28 <checkBasGonder+0x84>)
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	f083 0301 	eor.w	r3, r3, #1
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8006b0a:	4b08      	ldr	r3, [pc, #32]	; (8006b2c <checkBasGonder+0x88>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	701a      	strb	r2, [r3, #0]
}
 8006b10:	bf00      	nop
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bc80      	pop	{r7}
 8006b16:	4770      	bx	lr
 8006b18:	20000c9e 	.word	0x20000c9e
 8006b1c:	20000cd2 	.word	0x20000cd2
 8006b20:	20000cac 	.word	0x20000cac
 8006b24:	20000cd9 	.word	0x20000cd9
 8006b28:	20000cd5 	.word	0x20000cd5
 8006b2c:	20000cda 	.word	0x20000cda

08006b30 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8006b30:	b580      	push	{r7, lr}
 8006b32:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8006b34:	4b24      	ldr	r3, [pc, #144]	; (8006bc8 <checkKapiSecimleri+0x98>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d102      	bne.n	8006b42 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8006b3c:	4b23      	ldr	r3, [pc, #140]	; (8006bcc <checkKapiSecimleri+0x9c>)
 8006b3e:	2201      	movs	r2, #1
 8006b40:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8006b42:	4b21      	ldr	r3, [pc, #132]	; (8006bc8 <checkKapiSecimleri+0x98>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d10e      	bne.n	8006b68 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006b4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b4e:	4820      	ldr	r0, [pc, #128]	; (8006bd0 <checkKapiSecimleri+0xa0>)
 8006b50:	f003 fba4 	bl	800a29c <HAL_GPIO_ReadPin>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d103      	bne.n	8006b62 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8006b5a:	4b1c      	ldr	r3, [pc, #112]	; (8006bcc <checkKapiSecimleri+0x9c>)
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	701a      	strb	r2, [r3, #0]
 8006b60:	e002      	b.n	8006b68 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8006b62:	4b1a      	ldr	r3, [pc, #104]	; (8006bcc <checkKapiSecimleri+0x9c>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8006b68:	4b17      	ldr	r3, [pc, #92]	; (8006bc8 <checkKapiSecimleri+0x98>)
 8006b6a:	781b      	ldrb	r3, [r3, #0]
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d10e      	bne.n	8006b8e <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8006b70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b74:	4816      	ldr	r0, [pc, #88]	; (8006bd0 <checkKapiSecimleri+0xa0>)
 8006b76:	f003 fb91 	bl	800a29c <HAL_GPIO_ReadPin>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d103      	bne.n	8006b88 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8006b80:	4b12      	ldr	r3, [pc, #72]	; (8006bcc <checkKapiSecimleri+0x9c>)
 8006b82:	2201      	movs	r2, #1
 8006b84:	701a      	strb	r2, [r3, #0]
 8006b86:	e002      	b.n	8006b8e <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8006b88:	4b10      	ldr	r3, [pc, #64]	; (8006bcc <checkKapiSecimleri+0x9c>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8006b8e:	4b0e      	ldr	r3, [pc, #56]	; (8006bc8 <checkKapiSecimleri+0x98>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	d116      	bne.n	8006bc4 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8006b96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b9a:	480d      	ldr	r0, [pc, #52]	; (8006bd0 <checkKapiSecimleri+0xa0>)
 8006b9c:	f003 fb7e 	bl	800a29c <HAL_GPIO_ReadPin>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d10b      	bne.n	8006bbe <checkKapiSecimleri+0x8e>
 8006ba6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006baa:	4809      	ldr	r0, [pc, #36]	; (8006bd0 <checkKapiSecimleri+0xa0>)
 8006bac:	f003 fb76 	bl	800a29c <HAL_GPIO_ReadPin>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d103      	bne.n	8006bbe <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8006bb6:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <checkKapiSecimleri+0x9c>)
 8006bb8:	2201      	movs	r2, #1
 8006bba:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8006bbc:	e002      	b.n	8006bc4 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8006bbe:	4b03      	ldr	r3, [pc, #12]	; (8006bcc <checkKapiSecimleri+0x9c>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	701a      	strb	r2, [r3, #0]
}
 8006bc4:	bf00      	nop
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	20000ca5 	.word	0x20000ca5
 8006bcc:	20000cf0 	.word	0x20000cf0
 8006bd0:	40010800 	.word	0x40010800

08006bd4 <checkAktifCalisma>:

void checkAktifCalisma() {
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8006bd8:	4b62      	ldr	r3, [pc, #392]	; (8006d64 <checkAktifCalisma+0x190>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f041 8332 	bne.w	8008246 <checkAktifCalisma+0x1672>
 8006be2:	4b61      	ldr	r3, [pc, #388]	; (8006d68 <checkAktifCalisma+0x194>)
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f041 832d 	bne.w	8008246 <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8006bec:	4b5f      	ldr	r3, [pc, #380]	; (8006d6c <checkAktifCalisma+0x198>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d11a      	bne.n	8006c2a <checkAktifCalisma+0x56>
 8006bf4:	4b5e      	ldr	r3, [pc, #376]	; (8006d70 <checkAktifCalisma+0x19c>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d116      	bne.n	8006c2a <checkAktifCalisma+0x56>
 8006bfc:	4b5d      	ldr	r3, [pc, #372]	; (8006d74 <checkAktifCalisma+0x1a0>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00a      	beq.n	8006c1a <checkAktifCalisma+0x46>
 8006c04:	4b5c      	ldr	r3, [pc, #368]	; (8006d78 <checkAktifCalisma+0x1a4>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	f083 0301 	eor.w	r3, r3, #1
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d003      	beq.n	8006c1a <checkAktifCalisma+0x46>
 8006c12:	4b5a      	ldr	r3, [pc, #360]	; (8006d7c <checkAktifCalisma+0x1a8>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d007      	beq.n	8006c2a <checkAktifCalisma+0x56>
 8006c1a:	4b59      	ldr	r3, [pc, #356]	; (8006d80 <checkAktifCalisma+0x1ac>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d018      	beq.n	8006c54 <checkAktifCalisma+0x80>
 8006c22:	4b58      	ldr	r3, [pc, #352]	; (8006d84 <checkAktifCalisma+0x1b0>)
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d114      	bne.n	8006c54 <checkAktifCalisma+0x80>
 8006c2a:	4b57      	ldr	r3, [pc, #348]	; (8006d88 <checkAktifCalisma+0x1b4>)
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d010      	beq.n	8006c54 <checkAktifCalisma+0x80>
 8006c32:	4b56      	ldr	r3, [pc, #344]	; (8006d8c <checkAktifCalisma+0x1b8>)
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00c      	beq.n	8006c54 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c40:	4853      	ldr	r0, [pc, #332]	; (8006d90 <checkAktifCalisma+0x1bc>)
 8006c42:	f003 fb42 	bl	800a2ca <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8006c46:	4b53      	ldr	r3, [pc, #332]	; (8006d94 <checkAktifCalisma+0x1c0>)
 8006c48:	2201      	movs	r2, #1
 8006c4a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8006c4c:	4b52      	ldr	r3, [pc, #328]	; (8006d98 <checkAktifCalisma+0x1c4>)
 8006c4e:	2201      	movs	r2, #1
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	e008      	b.n	8006c66 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006c54:	2200      	movs	r2, #0
 8006c56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c5a:	484d      	ldr	r0, [pc, #308]	; (8006d90 <checkAktifCalisma+0x1bc>)
 8006c5c:	f003 fb35 	bl	800a2ca <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8006c60:	4b4c      	ldr	r3, [pc, #304]	; (8006d94 <checkAktifCalisma+0x1c0>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8006c66:	4b40      	ldr	r3, [pc, #256]	; (8006d68 <checkAktifCalisma+0x194>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d160      	bne.n	8006d30 <checkAktifCalisma+0x15c>
 8006c6e:	4b46      	ldr	r3, [pc, #280]	; (8006d88 <checkAktifCalisma+0x1b4>)
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d05c      	beq.n	8006d30 <checkAktifCalisma+0x15c>
 8006c76:	4b45      	ldr	r3, [pc, #276]	; (8006d8c <checkAktifCalisma+0x1b8>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d058      	beq.n	8006d30 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8006c7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c82:	4843      	ldr	r0, [pc, #268]	; (8006d90 <checkAktifCalisma+0x1bc>)
 8006c84:	f003 fb0a 	bl	800a29c <HAL_GPIO_ReadPin>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d003      	beq.n	8006c96 <checkAktifCalisma+0xc2>
 8006c8e:	4b43      	ldr	r3, [pc, #268]	; (8006d9c <checkAktifCalisma+0x1c8>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d04c      	beq.n	8006d30 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006c96:	2102      	movs	r1, #2
 8006c98:	4841      	ldr	r0, [pc, #260]	; (8006da0 <checkAktifCalisma+0x1cc>)
 8006c9a:	f003 faff 	bl	800a29c <HAL_GPIO_ReadPin>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d145      	bne.n	8006d30 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8006ca4:	4b3f      	ldr	r3, [pc, #252]	; (8006da4 <checkAktifCalisma+0x1d0>)
 8006ca6:	781b      	ldrb	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d041      	beq.n	8006d30 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8006cac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006cb0:	4837      	ldr	r0, [pc, #220]	; (8006d90 <checkAktifCalisma+0x1bc>)
 8006cb2:	f003 faf3 	bl	800a29c <HAL_GPIO_ReadPin>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d10e      	bne.n	8006cda <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006cbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006cc0:	4833      	ldr	r0, [pc, #204]	; (8006d90 <checkAktifCalisma+0x1bc>)
 8006cc2:	f003 faeb 	bl	800a29c <HAL_GPIO_ReadPin>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d106      	bne.n	8006cda <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8006ccc:	2140      	movs	r1, #64	; 0x40
 8006cce:	4834      	ldr	r0, [pc, #208]	; (8006da0 <checkAktifCalisma+0x1cc>)
 8006cd0:	f003 fae4 	bl	800a29c <HAL_GPIO_ReadPin>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d003      	beq.n	8006ce2 <checkAktifCalisma+0x10e>
 8006cda:	4b24      	ldr	r3, [pc, #144]	; (8006d6c <checkAktifCalisma+0x198>)
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d026      	beq.n	8006d30 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8006ce2:	4b24      	ldr	r3, [pc, #144]	; (8006d74 <checkAktifCalisma+0x1a0>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	f083 0301 	eor.w	r3, r3, #1
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d01f      	beq.n	8006d30 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8006cf0:	4b1f      	ldr	r3, [pc, #124]	; (8006d70 <checkAktifCalisma+0x19c>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	f083 0301 	eor.w	r3, r3, #1
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d018      	beq.n	8006d30 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8006cfe:	4b20      	ldr	r3, [pc, #128]	; (8006d80 <checkAktifCalisma+0x1ac>)
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	f083 0301 	eor.w	r3, r3, #1
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d011      	beq.n	8006d30 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8006d0c:	4b26      	ldr	r3, [pc, #152]	; (8006da8 <checkAktifCalisma+0x1d4>)
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	f083 0301 	eor.w	r3, r3, #1
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00a      	beq.n	8006d30 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8006d1a:	4b24      	ldr	r3, [pc, #144]	; (8006dac <checkAktifCalisma+0x1d8>)
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	f083 0301 	eor.w	r3, r3, #1
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d003      	beq.n	8006d30 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8006d28:	4b10      	ldr	r3, [pc, #64]	; (8006d6c <checkAktifCalisma+0x198>)
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	701a      	strb	r2, [r3, #0]
 8006d2e:	e002      	b.n	8006d36 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8006d30:	4b0e      	ldr	r3, [pc, #56]	; (8006d6c <checkAktifCalisma+0x198>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8006d36:	4b0d      	ldr	r3, [pc, #52]	; (8006d6c <checkAktifCalisma+0x198>)
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d03a      	beq.n	8006db4 <checkAktifCalisma+0x1e0>
 8006d3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d42:	4817      	ldr	r0, [pc, #92]	; (8006da0 <checkAktifCalisma+0x1cc>)
 8006d44:	f003 faaa 	bl	800a29c <HAL_GPIO_ReadPin>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d132      	bne.n	8006db4 <checkAktifCalisma+0x1e0>
 8006d4e:	4b18      	ldr	r3, [pc, #96]	; (8006db0 <checkAktifCalisma+0x1dc>)
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d02e      	beq.n	8006db4 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006d56:	2201      	movs	r2, #1
 8006d58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d5c:	480c      	ldr	r0, [pc, #48]	; (8006d90 <checkAktifCalisma+0x1bc>)
 8006d5e:	f003 fab4 	bl	800a2ca <HAL_GPIO_WritePin>
 8006d62:	e02d      	b.n	8006dc0 <checkAktifCalisma+0x1ec>
 8006d64:	20000cbb 	.word	0x20000cbb
 8006d68:	20000cba 	.word	0x20000cba
 8006d6c:	20000cd2 	.word	0x20000cd2
 8006d70:	20000cd3 	.word	0x20000cd3
 8006d74:	20000cd5 	.word	0x20000cd5
 8006d78:	20000ccd 	.word	0x20000ccd
 8006d7c:	20000cb0 	.word	0x20000cb0
 8006d80:	20000cd4 	.word	0x20000cd4
 8006d84:	20000caf 	.word	0x20000caf
 8006d88:	20000cef 	.word	0x20000cef
 8006d8c:	20000cf0 	.word	0x20000cf0
 8006d90:	40010c00 	.word	0x40010c00
 8006d94:	20000cf1 	.word	0x20000cf1
 8006d98:	20000cdc 	.word	0x20000cdc
 8006d9c:	20000cd9 	.word	0x20000cd9
 8006da0:	40011000 	.word	0x40011000
 8006da4:	20000ca0 	.word	0x20000ca0
 8006da8:	20000cd7 	.word	0x20000cd7
 8006dac:	20000cd8 	.word	0x20000cd8
 8006db0:	20000cab 	.word	0x20000cab
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006db4:	2200      	movs	r2, #0
 8006db6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006dba:	4860      	ldr	r0, [pc, #384]	; (8006f3c <checkAktifCalisma+0x368>)
 8006dbc:	f003 fa85 	bl	800a2ca <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8006dc0:	4b5f      	ldr	r3, [pc, #380]	; (8006f40 <checkAktifCalisma+0x36c>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d013      	beq.n	8006df0 <checkAktifCalisma+0x21c>
 8006dc8:	4b5e      	ldr	r3, [pc, #376]	; (8006f44 <checkAktifCalisma+0x370>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d007      	beq.n	8006de0 <checkAktifCalisma+0x20c>
 8006dd0:	4b5c      	ldr	r3, [pc, #368]	; (8006f44 <checkAktifCalisma+0x370>)
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d003      	beq.n	8006de0 <checkAktifCalisma+0x20c>
 8006dd8:	4b5b      	ldr	r3, [pc, #364]	; (8006f48 <checkAktifCalisma+0x374>)
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d107      	bne.n	8006df0 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006de0:	2201      	movs	r2, #1
 8006de2:	2104      	movs	r1, #4
 8006de4:	4855      	ldr	r0, [pc, #340]	; (8006f3c <checkAktifCalisma+0x368>)
 8006de6:	f003 fa70 	bl	800a2ca <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8006dea:	4b58      	ldr	r3, [pc, #352]	; (8006f4c <checkAktifCalisma+0x378>)
 8006dec:	2201      	movs	r2, #1
 8006dee:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8006df0:	4b56      	ldr	r3, [pc, #344]	; (8006f4c <checkAktifCalisma+0x378>)
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d02f      	beq.n	8006e58 <checkAktifCalisma+0x284>
 8006df8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006dfc:	484f      	ldr	r0, [pc, #316]	; (8006f3c <checkAktifCalisma+0x368>)
 8006dfe:	f003 fa4d 	bl	800a29c <HAL_GPIO_ReadPin>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d106      	bne.n	8006e16 <checkAktifCalisma+0x242>
 8006e08:	4b51      	ldr	r3, [pc, #324]	; (8006f50 <checkAktifCalisma+0x37c>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	f083 0301 	eor.w	r3, r3, #1
 8006e10:	b2db      	uxtb	r3, r3
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d106      	bne.n	8006e24 <checkAktifCalisma+0x250>
 8006e16:	2102      	movs	r1, #2
 8006e18:	484e      	ldr	r0, [pc, #312]	; (8006f54 <checkAktifCalisma+0x380>)
 8006e1a:	f003 fa3f 	bl	800a29c <HAL_GPIO_ReadPin>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d119      	bne.n	8006e58 <checkAktifCalisma+0x284>
 8006e24:	4b4c      	ldr	r3, [pc, #304]	; (8006f58 <checkAktifCalisma+0x384>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d015      	beq.n	8006e58 <checkAktifCalisma+0x284>
 8006e2c:	4b4b      	ldr	r3, [pc, #300]	; (8006f5c <checkAktifCalisma+0x388>)
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d011      	beq.n	8006e58 <checkAktifCalisma+0x284>
 8006e34:	4b4a      	ldr	r3, [pc, #296]	; (8006f60 <checkAktifCalisma+0x38c>)
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00d      	beq.n	8006e58 <checkAktifCalisma+0x284>
 8006e3c:	4b49      	ldr	r3, [pc, #292]	; (8006f64 <checkAktifCalisma+0x390>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	f083 0301 	eor.w	r3, r3, #1
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d006      	beq.n	8006e58 <checkAktifCalisma+0x284>
			timer2=millis;
 8006e4a:	4b47      	ldr	r3, [pc, #284]	; (8006f68 <checkAktifCalisma+0x394>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a47      	ldr	r2, [pc, #284]	; (8006f6c <checkAktifCalisma+0x398>)
 8006e50:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8006e52:	4b44      	ldr	r3, [pc, #272]	; (8006f64 <checkAktifCalisma+0x390>)
 8006e54:	2201      	movs	r2, #1
 8006e56:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8006e58:	4b43      	ldr	r3, [pc, #268]	; (8006f68 <checkAktifCalisma+0x394>)
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	4b43      	ldr	r3, [pc, #268]	; (8006f6c <checkAktifCalisma+0x398>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	4a43      	ldr	r2, [pc, #268]	; (8006f70 <checkAktifCalisma+0x39c>)
 8006e64:	7812      	ldrb	r2, [r2, #0]
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d303      	bcc.n	8006e72 <checkAktifCalisma+0x29e>
 8006e6a:	4b3e      	ldr	r3, [pc, #248]	; (8006f64 <checkAktifCalisma+0x390>)
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d111      	bne.n	8006e96 <checkAktifCalisma+0x2c2>
 8006e72:	4b39      	ldr	r3, [pc, #228]	; (8006f58 <checkAktifCalisma+0x384>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	f083 0301 	eor.w	r3, r3, #1
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10a      	bne.n	8006e96 <checkAktifCalisma+0x2c2>
 8006e80:	4b36      	ldr	r3, [pc, #216]	; (8006f5c <checkAktifCalisma+0x388>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	f083 0301 	eor.w	r3, r3, #1
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d103      	bne.n	8006e96 <checkAktifCalisma+0x2c2>
 8006e8e:	4b34      	ldr	r3, [pc, #208]	; (8006f60 <checkAktifCalisma+0x38c>)
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10a      	bne.n	8006eac <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006e96:	2200      	movs	r2, #0
 8006e98:	2104      	movs	r1, #4
 8006e9a:	4828      	ldr	r0, [pc, #160]	; (8006f3c <checkAktifCalisma+0x368>)
 8006e9c:	f003 fa15 	bl	800a2ca <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8006ea0:	4b2a      	ldr	r3, [pc, #168]	; (8006f4c <checkAktifCalisma+0x378>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8006ea6:	4b2f      	ldr	r3, [pc, #188]	; (8006f64 <checkAktifCalisma+0x390>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8006eac:	4b31      	ldr	r3, [pc, #196]	; (8006f74 <checkAktifCalisma+0x3a0>)
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d102      	bne.n	8006eba <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8006eb4:	4b30      	ldr	r3, [pc, #192]	; (8006f78 <checkAktifCalisma+0x3a4>)
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8006eba:	4b2e      	ldr	r3, [pc, #184]	; (8006f74 <checkAktifCalisma+0x3a0>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d116      	bne.n	8006ef0 <checkAktifCalisma+0x31c>
 8006ec2:	4b2e      	ldr	r3, [pc, #184]	; (8006f7c <checkAktifCalisma+0x3a8>)
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d112      	bne.n	8006ef0 <checkAktifCalisma+0x31c>
 8006eca:	2101      	movs	r1, #1
 8006ecc:	4821      	ldr	r0, [pc, #132]	; (8006f54 <checkAktifCalisma+0x380>)
 8006ece:	f003 f9e5 	bl	800a29c <HAL_GPIO_ReadPin>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d10b      	bne.n	8006ef0 <checkAktifCalisma+0x31c>
 8006ed8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006edc:	4817      	ldr	r0, [pc, #92]	; (8006f3c <checkAktifCalisma+0x368>)
 8006ede:	f003 f9dd 	bl	800a29c <HAL_GPIO_ReadPin>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d103      	bne.n	8006ef0 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8006ee8:	4b23      	ldr	r3, [pc, #140]	; (8006f78 <checkAktifCalisma+0x3a4>)
 8006eea:	2201      	movs	r2, #1
 8006eec:	701a      	strb	r2, [r3, #0]
 8006eee:	e011      	b.n	8006f14 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8006ef0:	4b20      	ldr	r3, [pc, #128]	; (8006f74 <checkAktifCalisma+0x3a0>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d10d      	bne.n	8006f14 <checkAktifCalisma+0x340>
 8006ef8:	2101      	movs	r1, #1
 8006efa:	4816      	ldr	r0, [pc, #88]	; (8006f54 <checkAktifCalisma+0x380>)
 8006efc:	f003 f9ce 	bl	800a29c <HAL_GPIO_ReadPin>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d106      	bne.n	8006f14 <checkAktifCalisma+0x340>
 8006f06:	4b1d      	ldr	r3, [pc, #116]	; (8006f7c <checkAktifCalisma+0x3a8>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d102      	bne.n	8006f14 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8006f0e:	4b1a      	ldr	r3, [pc, #104]	; (8006f78 <checkAktifCalisma+0x3a4>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8006f14:	4b17      	ldr	r3, [pc, #92]	; (8006f74 <checkAktifCalisma+0x3a0>)
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d134      	bne.n	8006f86 <checkAktifCalisma+0x3b2>
 8006f1c:	4b17      	ldr	r3, [pc, #92]	; (8006f7c <checkAktifCalisma+0x3a8>)
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d130      	bne.n	8006f86 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8006f24:	2101      	movs	r1, #1
 8006f26:	480b      	ldr	r0, [pc, #44]	; (8006f54 <checkAktifCalisma+0x380>)
 8006f28:	f003 f9b8 	bl	800a29c <HAL_GPIO_ReadPin>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d126      	bne.n	8006f80 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8006f32:	4b11      	ldr	r3, [pc, #68]	; (8006f78 <checkAktifCalisma+0x3a4>)
 8006f34:	2201      	movs	r2, #1
 8006f36:	701a      	strb	r2, [r3, #0]
 8006f38:	e025      	b.n	8006f86 <checkAktifCalisma+0x3b2>
 8006f3a:	bf00      	nop
 8006f3c:	40010c00 	.word	0x40010c00
 8006f40:	20000cd2 	.word	0x20000cd2
 8006f44:	20000cac 	.word	0x20000cac
 8006f48:	20000cb0 	.word	0x20000cb0
 8006f4c:	20000cd6 	.word	0x20000cd6
 8006f50:	20000cd9 	.word	0x20000cd9
 8006f54:	40011000 	.word	0x40011000
 8006f58:	20000cef 	.word	0x20000cef
 8006f5c:	20000cf0 	.word	0x20000cf0
 8006f60:	20000ca0 	.word	0x20000ca0
 8006f64:	20000cce 	.word	0x20000cce
 8006f68:	20000bd4 	.word	0x20000bd4
 8006f6c:	20000be0 	.word	0x20000be0
 8006f70:	20000cb1 	.word	0x20000cb1
 8006f74:	20000ca1 	.word	0x20000ca1
 8006f78:	20000cf4 	.word	0x20000cf4
 8006f7c:	20000c9e 	.word	0x20000c9e
			} else {
				cerceveVar=0;
 8006f80:	4b7f      	ldr	r3, [pc, #508]	; (8007180 <checkAktifCalisma+0x5ac>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8006f86:	4b7f      	ldr	r3, [pc, #508]	; (8007184 <checkAktifCalisma+0x5b0>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d17c      	bne.n	8007088 <checkAktifCalisma+0x4b4>
 8006f8e:	4b7e      	ldr	r3, [pc, #504]	; (8007188 <checkAktifCalisma+0x5b4>)
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d078      	beq.n	8007088 <checkAktifCalisma+0x4b4>
 8006f96:	4b7d      	ldr	r3, [pc, #500]	; (800718c <checkAktifCalisma+0x5b8>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d074      	beq.n	8007088 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8006f9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006fa2:	487b      	ldr	r0, [pc, #492]	; (8007190 <checkAktifCalisma+0x5bc>)
 8006fa4:	f003 f97a 	bl	800a29c <HAL_GPIO_ReadPin>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <checkAktifCalisma+0x3e2>
 8006fae:	4b79      	ldr	r3, [pc, #484]	; (8007194 <checkAktifCalisma+0x5c0>)
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d068      	beq.n	8007088 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8006fb6:	4b72      	ldr	r3, [pc, #456]	; (8007180 <checkAktifCalisma+0x5ac>)
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d064      	beq.n	8007088 <checkAktifCalisma+0x4b4>
 8006fbe:	4b76      	ldr	r3, [pc, #472]	; (8007198 <checkAktifCalisma+0x5c4>)
 8006fc0:	781b      	ldrb	r3, [r3, #0]
 8006fc2:	f083 0301 	eor.w	r3, r3, #1
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d05d      	beq.n	8007088 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8006fcc:	2104      	movs	r1, #4
 8006fce:	4873      	ldr	r0, [pc, #460]	; (800719c <checkAktifCalisma+0x5c8>)
 8006fd0:	f003 f964 	bl	800a29c <HAL_GPIO_ReadPin>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <checkAktifCalisma+0x40e>
 8006fda:	4b71      	ldr	r3, [pc, #452]	; (80071a0 <checkAktifCalisma+0x5cc>)
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d152      	bne.n	8007088 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006fe2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006fe6:	486a      	ldr	r0, [pc, #424]	; (8007190 <checkAktifCalisma+0x5bc>)
 8006fe8:	f003 f958 	bl	800a29c <HAL_GPIO_ReadPin>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d10e      	bne.n	8007010 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006ff2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ff6:	4866      	ldr	r0, [pc, #408]	; (8007190 <checkAktifCalisma+0x5bc>)
 8006ff8:	f003 f950 	bl	800a29c <HAL_GPIO_ReadPin>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d106      	bne.n	8007010 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8007002:	2140      	movs	r1, #64	; 0x40
 8007004:	4865      	ldr	r0, [pc, #404]	; (800719c <checkAktifCalisma+0x5c8>)
 8007006:	f003 f949 	bl	800a29c <HAL_GPIO_ReadPin>
 800700a:	4603      	mov	r3, r0
 800700c:	2b01      	cmp	r3, #1
 800700e:	d003      	beq.n	8007018 <checkAktifCalisma+0x444>
 8007010:	4b64      	ldr	r3, [pc, #400]	; (80071a4 <checkAktifCalisma+0x5d0>)
 8007012:	781b      	ldrb	r3, [r3, #0]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d037      	beq.n	8007088 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8007018:	4b63      	ldr	r3, [pc, #396]	; (80071a8 <checkAktifCalisma+0x5d4>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	f083 0301 	eor.w	r3, r3, #1
 8007020:	b2db      	uxtb	r3, r3
 8007022:	2b00      	cmp	r3, #0
 8007024:	d030      	beq.n	8007088 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8007026:	4b61      	ldr	r3, [pc, #388]	; (80071ac <checkAktifCalisma+0x5d8>)
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	f083 0301 	eor.w	r3, r3, #1
 800702e:	b2db      	uxtb	r3, r3
 8007030:	2b00      	cmp	r3, #0
 8007032:	d029      	beq.n	8007088 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8007034:	4b5e      	ldr	r3, [pc, #376]	; (80071b0 <checkAktifCalisma+0x5dc>)
 8007036:	781b      	ldrb	r3, [r3, #0]
 8007038:	f083 0301 	eor.w	r3, r3, #1
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d022      	beq.n	8007088 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8007042:	4b5c      	ldr	r3, [pc, #368]	; (80071b4 <checkAktifCalisma+0x5e0>)
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	f083 0301 	eor.w	r3, r3, #1
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b00      	cmp	r3, #0
 800704e:	d01b      	beq.n	8007088 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8007050:	4b59      	ldr	r3, [pc, #356]	; (80071b8 <checkAktifCalisma+0x5e4>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	f083 0301 	eor.w	r3, r3, #1
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d014      	beq.n	8007088 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800705e:	4b57      	ldr	r3, [pc, #348]	; (80071bc <checkAktifCalisma+0x5e8>)
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	f083 0301 	eor.w	r3, r3, #1
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00d      	beq.n	8007088 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800706c:	2201      	movs	r2, #1
 800706e:	2102      	movs	r1, #2
 8007070:	4847      	ldr	r0, [pc, #284]	; (8007190 <checkAktifCalisma+0x5bc>)
 8007072:	f003 f92a 	bl	800a2ca <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8007076:	4b4b      	ldr	r3, [pc, #300]	; (80071a4 <checkAktifCalisma+0x5d0>)
 8007078:	2201      	movs	r2, #1
 800707a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 800707c:	4b50      	ldr	r3, [pc, #320]	; (80071c0 <checkAktifCalisma+0x5ec>)
 800707e:	2201      	movs	r2, #1
 8007080:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8007082:	4b50      	ldr	r3, [pc, #320]	; (80071c4 <checkAktifCalisma+0x5f0>)
 8007084:	2201      	movs	r2, #1
 8007086:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8007088:	4b46      	ldr	r3, [pc, #280]	; (80071a4 <checkAktifCalisma+0x5d0>)
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d033      	beq.n	80070f8 <checkAktifCalisma+0x524>
 8007090:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007094:	483e      	ldr	r0, [pc, #248]	; (8007190 <checkAktifCalisma+0x5bc>)
 8007096:	f003 f901 	bl	800a29c <HAL_GPIO_ReadPin>
 800709a:	4603      	mov	r3, r0
 800709c:	2b01      	cmp	r3, #1
 800709e:	d106      	bne.n	80070ae <checkAktifCalisma+0x4da>
 80070a0:	4b3c      	ldr	r3, [pc, #240]	; (8007194 <checkAktifCalisma+0x5c0>)
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	f083 0301 	eor.w	r3, r3, #1
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10a      	bne.n	80070c4 <checkAktifCalisma+0x4f0>
 80070ae:	2104      	movs	r1, #4
 80070b0:	483a      	ldr	r0, [pc, #232]	; (800719c <checkAktifCalisma+0x5c8>)
 80070b2:	f003 f8f3 	bl	800a29c <HAL_GPIO_ReadPin>
 80070b6:	4603      	mov	r3, r0
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d11d      	bne.n	80070f8 <checkAktifCalisma+0x524>
 80070bc:	4b38      	ldr	r3, [pc, #224]	; (80071a0 <checkAktifCalisma+0x5cc>)
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d019      	beq.n	80070f8 <checkAktifCalisma+0x524>
 80070c4:	4b30      	ldr	r3, [pc, #192]	; (8007188 <checkAktifCalisma+0x5b4>)
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d015      	beq.n	80070f8 <checkAktifCalisma+0x524>
 80070cc:	4b2f      	ldr	r3, [pc, #188]	; (800718c <checkAktifCalisma+0x5b8>)
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d011      	beq.n	80070f8 <checkAktifCalisma+0x524>
 80070d4:	4b2a      	ldr	r3, [pc, #168]	; (8007180 <checkAktifCalisma+0x5ac>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00d      	beq.n	80070f8 <checkAktifCalisma+0x524>
 80070dc:	4b3a      	ldr	r3, [pc, #232]	; (80071c8 <checkAktifCalisma+0x5f4>)
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	f083 0301 	eor.w	r3, r3, #1
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d006      	beq.n	80070f8 <checkAktifCalisma+0x524>
			timer2=millis;
 80070ea:	4b38      	ldr	r3, [pc, #224]	; (80071cc <checkAktifCalisma+0x5f8>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a38      	ldr	r2, [pc, #224]	; (80071d0 <checkAktifCalisma+0x5fc>)
 80070f0:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 80070f2:	4b35      	ldr	r3, [pc, #212]	; (80071c8 <checkAktifCalisma+0x5f4>)
 80070f4:	2201      	movs	r2, #1
 80070f6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80070f8:	4b34      	ldr	r3, [pc, #208]	; (80071cc <checkAktifCalisma+0x5f8>)
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	4b34      	ldr	r3, [pc, #208]	; (80071d0 <checkAktifCalisma+0x5fc>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	1ad3      	subs	r3, r2, r3
 8007102:	4a34      	ldr	r2, [pc, #208]	; (80071d4 <checkAktifCalisma+0x600>)
 8007104:	7812      	ldrb	r2, [r2, #0]
 8007106:	4293      	cmp	r3, r2
 8007108:	d303      	bcc.n	8007112 <checkAktifCalisma+0x53e>
 800710a:	4b2f      	ldr	r3, [pc, #188]	; (80071c8 <checkAktifCalisma+0x5f4>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d114      	bne.n	800713c <checkAktifCalisma+0x568>
 8007112:	4b1d      	ldr	r3, [pc, #116]	; (8007188 <checkAktifCalisma+0x5b4>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	f083 0301 	eor.w	r3, r3, #1
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10d      	bne.n	800713c <checkAktifCalisma+0x568>
 8007120:	4b1a      	ldr	r3, [pc, #104]	; (800718c <checkAktifCalisma+0x5b8>)
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	f083 0301 	eor.w	r3, r3, #1
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d106      	bne.n	800713c <checkAktifCalisma+0x568>
 800712e:	4b14      	ldr	r3, [pc, #80]	; (8007180 <checkAktifCalisma+0x5ac>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	f083 0301 	eor.w	r3, r3, #1
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00a      	beq.n	8007152 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800713c:	2200      	movs	r2, #0
 800713e:	2102      	movs	r1, #2
 8007140:	4813      	ldr	r0, [pc, #76]	; (8007190 <checkAktifCalisma+0x5bc>)
 8007142:	f003 f8c2 	bl	800a2ca <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8007146:	4b17      	ldr	r3, [pc, #92]	; (80071a4 <checkAktifCalisma+0x5d0>)
 8007148:	2200      	movs	r2, #0
 800714a:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 800714c:	4b1e      	ldr	r3, [pc, #120]	; (80071c8 <checkAktifCalisma+0x5f4>)
 800714e:	2200      	movs	r2, #0
 8007150:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8007152:	4b14      	ldr	r3, [pc, #80]	; (80071a4 <checkAktifCalisma+0x5d0>)
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d040      	beq.n	80071dc <checkAktifCalisma+0x608>
 800715a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800715e:	480f      	ldr	r0, [pc, #60]	; (800719c <checkAktifCalisma+0x5c8>)
 8007160:	f003 f89c 	bl	800a29c <HAL_GPIO_ReadPin>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d138      	bne.n	80071dc <checkAktifCalisma+0x608>
 800716a:	4b1b      	ldr	r3, [pc, #108]	; (80071d8 <checkAktifCalisma+0x604>)
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d034      	beq.n	80071dc <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8007172:	2201      	movs	r2, #1
 8007174:	2101      	movs	r1, #1
 8007176:	4806      	ldr	r0, [pc, #24]	; (8007190 <checkAktifCalisma+0x5bc>)
 8007178:	f003 f8a7 	bl	800a2ca <HAL_GPIO_WritePin>
 800717c:	e033      	b.n	80071e6 <checkAktifCalisma+0x612>
 800717e:	bf00      	nop
 8007180:	20000cf4 	.word	0x20000cf4
 8007184:	20000cba 	.word	0x20000cba
 8007188:	20000cef 	.word	0x20000cef
 800718c:	20000cf0 	.word	0x20000cf0
 8007190:	40010c00 	.word	0x40010c00
 8007194:	20000cda 	.word	0x20000cda
 8007198:	20000cee 	.word	0x20000cee
 800719c:	40011000 	.word	0x40011000
 80071a0:	20000ca3 	.word	0x20000ca3
 80071a4:	20000cd5 	.word	0x20000cd5
 80071a8:	20000cd2 	.word	0x20000cd2
 80071ac:	20000cd6 	.word	0x20000cd6
 80071b0:	20000cd3 	.word	0x20000cd3
 80071b4:	20000cd4 	.word	0x20000cd4
 80071b8:	20000cd7 	.word	0x20000cd7
 80071bc:	20000cd8 	.word	0x20000cd8
 80071c0:	20000cdd 	.word	0x20000cdd
 80071c4:	20000cfe 	.word	0x20000cfe
 80071c8:	20000ccd 	.word	0x20000ccd
 80071cc:	20000bd4 	.word	0x20000bd4
 80071d0:	20000be0 	.word	0x20000be0
 80071d4:	20000cb2 	.word	0x20000cb2
 80071d8:	20000ca2 	.word	0x20000ca2
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80071dc:	2200      	movs	r2, #0
 80071de:	2101      	movs	r1, #1
 80071e0:	4836      	ldr	r0, [pc, #216]	; (80072bc <checkAktifCalisma+0x6e8>)
 80071e2:	f003 f872 	bl	800a2ca <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80071e6:	4b36      	ldr	r3, [pc, #216]	; (80072c0 <checkAktifCalisma+0x6ec>)
 80071e8:	781b      	ldrb	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f040 8080 	bne.w	80072f0 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80071f0:	4b34      	ldr	r3, [pc, #208]	; (80072c4 <checkAktifCalisma+0x6f0>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d003      	beq.n	8007200 <checkAktifCalisma+0x62c>
 80071f8:	4b32      	ldr	r3, [pc, #200]	; (80072c4 <checkAktifCalisma+0x6f0>)
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	2b02      	cmp	r3, #2
 80071fe:	d177      	bne.n	80072f0 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8007200:	4b31      	ldr	r3, [pc, #196]	; (80072c8 <checkAktifCalisma+0x6f4>)
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d073      	beq.n	80072f0 <checkAktifCalisma+0x71c>
 8007208:	4b30      	ldr	r3, [pc, #192]	; (80072cc <checkAktifCalisma+0x6f8>)
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d06f      	beq.n	80072f0 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8007210:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007214:	4829      	ldr	r0, [pc, #164]	; (80072bc <checkAktifCalisma+0x6e8>)
 8007216:	f003 f841 	bl	800a29c <HAL_GPIO_ReadPin>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d167      	bne.n	80072f0 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8007220:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007224:	482a      	ldr	r0, [pc, #168]	; (80072d0 <checkAktifCalisma+0x6fc>)
 8007226:	f003 f839 	bl	800a29c <HAL_GPIO_ReadPin>
 800722a:	4603      	mov	r3, r0
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <checkAktifCalisma+0x664>
 8007230:	4b28      	ldr	r3, [pc, #160]	; (80072d4 <checkAktifCalisma+0x700>)
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d15b      	bne.n	80072f0 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8007238:	2140      	movs	r1, #64	; 0x40
 800723a:	4825      	ldr	r0, [pc, #148]	; (80072d0 <checkAktifCalisma+0x6fc>)
 800723c:	f003 f82e 	bl	800a29c <HAL_GPIO_ReadPin>
 8007240:	4603      	mov	r3, r0
 8007242:	2b01      	cmp	r3, #1
 8007244:	d10f      	bne.n	8007266 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8007246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800724a:	481c      	ldr	r0, [pc, #112]	; (80072bc <checkAktifCalisma+0x6e8>)
 800724c:	f003 f826 	bl	800a29c <HAL_GPIO_ReadPin>
 8007250:	4603      	mov	r3, r0
 8007252:	2b01      	cmp	r3, #1
 8007254:	d107      	bne.n	8007266 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8007256:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800725a:	4818      	ldr	r0, [pc, #96]	; (80072bc <checkAktifCalisma+0x6e8>)
 800725c:	f003 f81e 	bl	800a29c <HAL_GPIO_ReadPin>
 8007260:	4603      	mov	r3, r0
 8007262:	2b01      	cmp	r3, #1
 8007264:	d003      	beq.n	800726e <checkAktifCalisma+0x69a>
 8007266:	4b1c      	ldr	r3, [pc, #112]	; (80072d8 <checkAktifCalisma+0x704>)
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d040      	beq.n	80072f0 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 800726e:	4b1b      	ldr	r3, [pc, #108]	; (80072dc <checkAktifCalisma+0x708>)
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	f083 0301 	eor.w	r3, r3, #1
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b00      	cmp	r3, #0
 800727a:	d039      	beq.n	80072f0 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 800727c:	4b18      	ldr	r3, [pc, #96]	; (80072e0 <checkAktifCalisma+0x70c>)
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	f083 0301 	eor.w	r3, r3, #1
 8007284:	b2db      	uxtb	r3, r3
 8007286:	2b00      	cmp	r3, #0
 8007288:	d032      	beq.n	80072f0 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 800728a:	4b16      	ldr	r3, [pc, #88]	; (80072e4 <checkAktifCalisma+0x710>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	f083 0301 	eor.w	r3, r3, #1
 8007292:	b2db      	uxtb	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	d02b      	beq.n	80072f0 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8007298:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <checkAktifCalisma+0x714>)
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	f083 0301 	eor.w	r3, r3, #1
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d024      	beq.n	80072f0 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 80072a6:	4b11      	ldr	r3, [pc, #68]	; (80072ec <checkAktifCalisma+0x718>)
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	f083 0301 	eor.w	r3, r3, #1
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d01d      	beq.n	80072f0 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 80072b4:	4b08      	ldr	r3, [pc, #32]	; (80072d8 <checkAktifCalisma+0x704>)
 80072b6:	2201      	movs	r2, #1
 80072b8:	701a      	strb	r2, [r3, #0]
 80072ba:	e01c      	b.n	80072f6 <checkAktifCalisma+0x722>
 80072bc:	40010c00 	.word	0x40010c00
 80072c0:	20000cba 	.word	0x20000cba
 80072c4:	20000cac 	.word	0x20000cac
 80072c8:	20000cef 	.word	0x20000cef
 80072cc:	20000cf0 	.word	0x20000cf0
 80072d0:	40011000 	.word	0x40011000
 80072d4:	20000cad 	.word	0x20000cad
 80072d8:	20000cd3 	.word	0x20000cd3
 80072dc:	20000cd2 	.word	0x20000cd2
 80072e0:	20000cd6 	.word	0x20000cd6
 80072e4:	20000cd5 	.word	0x20000cd5
 80072e8:	20000cd4 	.word	0x20000cd4
 80072ec:	20000cd8 	.word	0x20000cd8
		} else {
			devmotoryukaricalisiyor=0;
 80072f0:	4b64      	ldr	r3, [pc, #400]	; (8007484 <checkAktifCalisma+0x8b0>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 80072f6:	4b63      	ldr	r3, [pc, #396]	; (8007484 <checkAktifCalisma+0x8b0>)
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d007      	beq.n	800730e <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80072fe:	2201      	movs	r2, #1
 8007300:	2120      	movs	r1, #32
 8007302:	4861      	ldr	r0, [pc, #388]	; (8007488 <checkAktifCalisma+0x8b4>)
 8007304:	f002 ffe1 	bl	800a2ca <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8007308:	4b60      	ldr	r3, [pc, #384]	; (800748c <checkAktifCalisma+0x8b8>)
 800730a:	2201      	movs	r2, #1
 800730c:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800730e:	4b5f      	ldr	r3, [pc, #380]	; (800748c <checkAktifCalisma+0x8b8>)
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d025      	beq.n	8007362 <checkAktifCalisma+0x78e>
 8007316:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800731a:	485d      	ldr	r0, [pc, #372]	; (8007490 <checkAktifCalisma+0x8bc>)
 800731c:	f002 ffbe 	bl	800a29c <HAL_GPIO_ReadPin>
 8007320:	4603      	mov	r3, r0
 8007322:	2b01      	cmp	r3, #1
 8007324:	d007      	beq.n	8007336 <checkAktifCalisma+0x762>
 8007326:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800732a:	4857      	ldr	r0, [pc, #348]	; (8007488 <checkAktifCalisma+0x8b4>)
 800732c:	f002 ffb6 	bl	800a29c <HAL_GPIO_ReadPin>
 8007330:	4603      	mov	r3, r0
 8007332:	2b01      	cmp	r3, #1
 8007334:	d115      	bne.n	8007362 <checkAktifCalisma+0x78e>
 8007336:	4b57      	ldr	r3, [pc, #348]	; (8007494 <checkAktifCalisma+0x8c0>)
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d011      	beq.n	8007362 <checkAktifCalisma+0x78e>
 800733e:	4b56      	ldr	r3, [pc, #344]	; (8007498 <checkAktifCalisma+0x8c4>)
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00d      	beq.n	8007362 <checkAktifCalisma+0x78e>
 8007346:	4b55      	ldr	r3, [pc, #340]	; (800749c <checkAktifCalisma+0x8c8>)
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	f083 0301 	eor.w	r3, r3, #1
 800734e:	b2db      	uxtb	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d006      	beq.n	8007362 <checkAktifCalisma+0x78e>
			timer2=millis;
 8007354:	4b52      	ldr	r3, [pc, #328]	; (80074a0 <checkAktifCalisma+0x8cc>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a52      	ldr	r2, [pc, #328]	; (80074a4 <checkAktifCalisma+0x8d0>)
 800735a:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 800735c:	4b4f      	ldr	r3, [pc, #316]	; (800749c <checkAktifCalisma+0x8c8>)
 800735e:	2201      	movs	r2, #1
 8007360:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8007362:	4b4f      	ldr	r3, [pc, #316]	; (80074a0 <checkAktifCalisma+0x8cc>)
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	4b4f      	ldr	r3, [pc, #316]	; (80074a4 <checkAktifCalisma+0x8d0>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	4a4e      	ldr	r2, [pc, #312]	; (80074a8 <checkAktifCalisma+0x8d4>)
 800736e:	7812      	ldrb	r2, [r2, #0]
 8007370:	4293      	cmp	r3, r2
 8007372:	d303      	bcc.n	800737c <checkAktifCalisma+0x7a8>
 8007374:	4b49      	ldr	r3, [pc, #292]	; (800749c <checkAktifCalisma+0x8c8>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10d      	bne.n	8007398 <checkAktifCalisma+0x7c4>
 800737c:	4b45      	ldr	r3, [pc, #276]	; (8007494 <checkAktifCalisma+0x8c0>)
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	f083 0301 	eor.w	r3, r3, #1
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d106      	bne.n	8007398 <checkAktifCalisma+0x7c4>
 800738a:	4b43      	ldr	r3, [pc, #268]	; (8007498 <checkAktifCalisma+0x8c4>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	f083 0301 	eor.w	r3, r3, #1
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00a      	beq.n	80073ae <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007398:	2200      	movs	r2, #0
 800739a:	2120      	movs	r1, #32
 800739c:	483a      	ldr	r0, [pc, #232]	; (8007488 <checkAktifCalisma+0x8b4>)
 800739e:	f002 ff94 	bl	800a2ca <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 80073a2:	4b3a      	ldr	r3, [pc, #232]	; (800748c <checkAktifCalisma+0x8b8>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80073a8:	4b3c      	ldr	r3, [pc, #240]	; (800749c <checkAktifCalisma+0x8c8>)
 80073aa:	2200      	movs	r2, #0
 80073ac:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80073ae:	4b3f      	ldr	r3, [pc, #252]	; (80074ac <checkAktifCalisma+0x8d8>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f040 8088 	bne.w	80074c8 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80073b8:	4b3d      	ldr	r3, [pc, #244]	; (80074b0 <checkAktifCalisma+0x8dc>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d003      	beq.n	80073c8 <checkAktifCalisma+0x7f4>
 80073c0:	4b3b      	ldr	r3, [pc, #236]	; (80074b0 <checkAktifCalisma+0x8dc>)
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d17f      	bne.n	80074c8 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 80073c8:	4b32      	ldr	r3, [pc, #200]	; (8007494 <checkAktifCalisma+0x8c0>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d07b      	beq.n	80074c8 <checkAktifCalisma+0x8f4>
 80073d0:	4b31      	ldr	r3, [pc, #196]	; (8007498 <checkAktifCalisma+0x8c4>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d077      	beq.n	80074c8 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80073d8:	2140      	movs	r1, #64	; 0x40
 80073da:	482b      	ldr	r0, [pc, #172]	; (8007488 <checkAktifCalisma+0x8b4>)
 80073dc:	f002 ff5e 	bl	800a29c <HAL_GPIO_ReadPin>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d170      	bne.n	80074c8 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80073e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80073ea:	4827      	ldr	r0, [pc, #156]	; (8007488 <checkAktifCalisma+0x8b4>)
 80073ec:	f002 ff56 	bl	800a29c <HAL_GPIO_ReadPin>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <checkAktifCalisma+0x82a>
 80073f6:	4b2f      	ldr	r3, [pc, #188]	; (80074b4 <checkAktifCalisma+0x8e0>)
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d164      	bne.n	80074c8 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80073fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007402:	4823      	ldr	r0, [pc, #140]	; (8007490 <checkAktifCalisma+0x8bc>)
 8007404:	f002 ff4a 	bl	800a29c <HAL_GPIO_ReadPin>
 8007408:	4603      	mov	r3, r0
 800740a:	2b01      	cmp	r3, #1
 800740c:	d10f      	bne.n	800742e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800740e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007412:	481f      	ldr	r0, [pc, #124]	; (8007490 <checkAktifCalisma+0x8bc>)
 8007414:	f002 ff42 	bl	800a29c <HAL_GPIO_ReadPin>
 8007418:	4603      	mov	r3, r0
 800741a:	2b01      	cmp	r3, #1
 800741c:	d107      	bne.n	800742e <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800741e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007422:	481b      	ldr	r0, [pc, #108]	; (8007490 <checkAktifCalisma+0x8bc>)
 8007424:	f002 ff3a 	bl	800a29c <HAL_GPIO_ReadPin>
 8007428:	4603      	mov	r3, r0
 800742a:	2b01      	cmp	r3, #1
 800742c:	d003      	beq.n	8007436 <checkAktifCalisma+0x862>
 800742e:	4b22      	ldr	r3, [pc, #136]	; (80074b8 <checkAktifCalisma+0x8e4>)
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d048      	beq.n	80074c8 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8007436:	4b21      	ldr	r3, [pc, #132]	; (80074bc <checkAktifCalisma+0x8e8>)
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	f083 0301 	eor.w	r3, r3, #1
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b00      	cmp	r3, #0
 8007442:	d041      	beq.n	80074c8 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8007444:	4b1e      	ldr	r3, [pc, #120]	; (80074c0 <checkAktifCalisma+0x8ec>)
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	f083 0301 	eor.w	r3, r3, #1
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	d03a      	beq.n	80074c8 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8007452:	4b1c      	ldr	r3, [pc, #112]	; (80074c4 <checkAktifCalisma+0x8f0>)
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	f083 0301 	eor.w	r3, r3, #1
 800745a:	b2db      	uxtb	r3, r3
 800745c:	2b00      	cmp	r3, #0
 800745e:	d033      	beq.n	80074c8 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8007460:	4b0a      	ldr	r3, [pc, #40]	; (800748c <checkAktifCalisma+0x8b8>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	f083 0301 	eor.w	r3, r3, #1
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d02c      	beq.n	80074c8 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 800746e:	4b05      	ldr	r3, [pc, #20]	; (8007484 <checkAktifCalisma+0x8b0>)
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	f083 0301 	eor.w	r3, r3, #1
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b00      	cmp	r3, #0
 800747a:	d025      	beq.n	80074c8 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 800747c:	4b0e      	ldr	r3, [pc, #56]	; (80074b8 <checkAktifCalisma+0x8e4>)
 800747e:	2201      	movs	r2, #1
 8007480:	701a      	strb	r2, [r3, #0]
 8007482:	e024      	b.n	80074ce <checkAktifCalisma+0x8fa>
 8007484:	20000cd3 	.word	0x20000cd3
 8007488:	40011000 	.word	0x40011000
 800748c:	20000cd7 	.word	0x20000cd7
 8007490:	40010c00 	.word	0x40010c00
 8007494:	20000cef 	.word	0x20000cef
 8007498:	20000cf0 	.word	0x20000cf0
 800749c:	20000ccf 	.word	0x20000ccf
 80074a0:	20000bd4 	.word	0x20000bd4
 80074a4:	20000be0 	.word	0x20000be0
 80074a8:	20000cb3 	.word	0x20000cb3
 80074ac:	20000cba 	.word	0x20000cba
 80074b0:	20000cac 	.word	0x20000cac
 80074b4:	20000cae 	.word	0x20000cae
 80074b8:	20000cd4 	.word	0x20000cd4
 80074bc:	20000cd2 	.word	0x20000cd2
 80074c0:	20000cd6 	.word	0x20000cd6
 80074c4:	20000cd5 	.word	0x20000cd5
		} else {
			devmotorasagicalisiyor=0;
 80074c8:	4b96      	ldr	r3, [pc, #600]	; (8007724 <checkAktifCalisma+0xb50>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80074ce:	4b95      	ldr	r3, [pc, #596]	; (8007724 <checkAktifCalisma+0xb50>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d007      	beq.n	80074e6 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80074d6:	2201      	movs	r2, #1
 80074d8:	2110      	movs	r1, #16
 80074da:	4893      	ldr	r0, [pc, #588]	; (8007728 <checkAktifCalisma+0xb54>)
 80074dc:	f002 fef5 	bl	800a2ca <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 80074e0:	4b92      	ldr	r3, [pc, #584]	; (800772c <checkAktifCalisma+0xb58>)
 80074e2:	2201      	movs	r2, #1
 80074e4:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80074e6:	4b91      	ldr	r3, [pc, #580]	; (800772c <checkAktifCalisma+0xb58>)
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d024      	beq.n	8007538 <checkAktifCalisma+0x964>
 80074ee:	2140      	movs	r1, #64	; 0x40
 80074f0:	488d      	ldr	r0, [pc, #564]	; (8007728 <checkAktifCalisma+0xb54>)
 80074f2:	f002 fed3 	bl	800a29c <HAL_GPIO_ReadPin>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b01      	cmp	r3, #1
 80074fa:	d007      	beq.n	800750c <checkAktifCalisma+0x938>
 80074fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007500:	4889      	ldr	r0, [pc, #548]	; (8007728 <checkAktifCalisma+0xb54>)
 8007502:	f002 fecb 	bl	800a29c <HAL_GPIO_ReadPin>
 8007506:	4603      	mov	r3, r0
 8007508:	2b01      	cmp	r3, #1
 800750a:	d115      	bne.n	8007538 <checkAktifCalisma+0x964>
 800750c:	4b88      	ldr	r3, [pc, #544]	; (8007730 <checkAktifCalisma+0xb5c>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d011      	beq.n	8007538 <checkAktifCalisma+0x964>
 8007514:	4b87      	ldr	r3, [pc, #540]	; (8007734 <checkAktifCalisma+0xb60>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d00d      	beq.n	8007538 <checkAktifCalisma+0x964>
 800751c:	4b86      	ldr	r3, [pc, #536]	; (8007738 <checkAktifCalisma+0xb64>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	f083 0301 	eor.w	r3, r3, #1
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d006      	beq.n	8007538 <checkAktifCalisma+0x964>
			timer2=millis;
 800752a:	4b84      	ldr	r3, [pc, #528]	; (800773c <checkAktifCalisma+0xb68>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a84      	ldr	r2, [pc, #528]	; (8007740 <checkAktifCalisma+0xb6c>)
 8007530:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8007532:	4b81      	ldr	r3, [pc, #516]	; (8007738 <checkAktifCalisma+0xb64>)
 8007534:	2201      	movs	r2, #1
 8007536:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8007538:	4b80      	ldr	r3, [pc, #512]	; (800773c <checkAktifCalisma+0xb68>)
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	4b80      	ldr	r3, [pc, #512]	; (8007740 <checkAktifCalisma+0xb6c>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	4a80      	ldr	r2, [pc, #512]	; (8007744 <checkAktifCalisma+0xb70>)
 8007544:	7812      	ldrb	r2, [r2, #0]
 8007546:	4293      	cmp	r3, r2
 8007548:	d303      	bcc.n	8007552 <checkAktifCalisma+0x97e>
 800754a:	4b7b      	ldr	r3, [pc, #492]	; (8007738 <checkAktifCalisma+0xb64>)
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10d      	bne.n	800756e <checkAktifCalisma+0x99a>
 8007552:	4b77      	ldr	r3, [pc, #476]	; (8007730 <checkAktifCalisma+0xb5c>)
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	f083 0301 	eor.w	r3, r3, #1
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d106      	bne.n	800756e <checkAktifCalisma+0x99a>
 8007560:	4b74      	ldr	r3, [pc, #464]	; (8007734 <checkAktifCalisma+0xb60>)
 8007562:	781b      	ldrb	r3, [r3, #0]
 8007564:	f083 0301 	eor.w	r3, r3, #1
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00a      	beq.n	8007584 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800756e:	2200      	movs	r2, #0
 8007570:	2110      	movs	r1, #16
 8007572:	486d      	ldr	r0, [pc, #436]	; (8007728 <checkAktifCalisma+0xb54>)
 8007574:	f002 fea9 	bl	800a2ca <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8007578:	4b6c      	ldr	r3, [pc, #432]	; (800772c <checkAktifCalisma+0xb58>)
 800757a:	2200      	movs	r2, #0
 800757c:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 800757e:	4b6e      	ldr	r3, [pc, #440]	; (8007738 <checkAktifCalisma+0xb64>)
 8007580:	2200      	movs	r2, #0
 8007582:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8007584:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007588:	486f      	ldr	r0, [pc, #444]	; (8007748 <checkAktifCalisma+0xb74>)
 800758a:	f002 fe87 	bl	800a29c <HAL_GPIO_ReadPin>
 800758e:	4603      	mov	r3, r0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d120      	bne.n	80075d6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8007594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007598:	486b      	ldr	r0, [pc, #428]	; (8007748 <checkAktifCalisma+0xb74>)
 800759a:	f002 fe7f 	bl	800a29c <HAL_GPIO_ReadPin>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d118      	bne.n	80075d6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80075a4:	2104      	movs	r1, #4
 80075a6:	4868      	ldr	r0, [pc, #416]	; (8007748 <checkAktifCalisma+0xb74>)
 80075a8:	f002 fe78 	bl	800a29c <HAL_GPIO_ReadPin>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d111      	bne.n	80075d6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80075b2:	2102      	movs	r1, #2
 80075b4:	4864      	ldr	r0, [pc, #400]	; (8007748 <checkAktifCalisma+0xb74>)
 80075b6:	f002 fe71 	bl	800a29c <HAL_GPIO_ReadPin>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10a      	bne.n	80075d6 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80075c0:	2101      	movs	r1, #1
 80075c2:	4861      	ldr	r0, [pc, #388]	; (8007748 <checkAktifCalisma+0xb74>)
 80075c4:	f002 fe6a 	bl	800a29c <HAL_GPIO_ReadPin>
 80075c8:	4603      	mov	r3, r0
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d103      	bne.n	80075d6 <checkAktifCalisma+0xa02>
			makineStop=1;
 80075ce:	4b5f      	ldr	r3, [pc, #380]	; (800774c <checkAktifCalisma+0xb78>)
 80075d0:	2201      	movs	r2, #1
 80075d2:	701a      	strb	r2, [r3, #0]
 80075d4:	e002      	b.n	80075dc <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80075d6:	4b5d      	ldr	r3, [pc, #372]	; (800774c <checkAktifCalisma+0xb78>)
 80075d8:	2200      	movs	r2, #0
 80075da:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80075dc:	4b5c      	ldr	r3, [pc, #368]	; (8007750 <checkAktifCalisma+0xb7c>)
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d144      	bne.n	800766e <checkAktifCalisma+0xa9a>
 80075e4:	4b5b      	ldr	r3, [pc, #364]	; (8007754 <checkAktifCalisma+0xb80>)
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d003      	beq.n	80075f4 <checkAktifCalisma+0xa20>
 80075ec:	4b59      	ldr	r3, [pc, #356]	; (8007754 <checkAktifCalisma+0xb80>)
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d13c      	bne.n	800766e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80075f4:	2180      	movs	r1, #128	; 0x80
 80075f6:	484c      	ldr	r0, [pc, #304]	; (8007728 <checkAktifCalisma+0xb54>)
 80075f8:	f002 fe50 	bl	800a29c <HAL_GPIO_ReadPin>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d103      	bne.n	800760a <checkAktifCalisma+0xa36>
 8007602:	4b55      	ldr	r3, [pc, #340]	; (8007758 <checkAktifCalisma+0xb84>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00b      	beq.n	8007622 <checkAktifCalisma+0xa4e>
 800760a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800760e:	484e      	ldr	r0, [pc, #312]	; (8007748 <checkAktifCalisma+0xb74>)
 8007610:	f002 fe44 	bl	800a29c <HAL_GPIO_ReadPin>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d129      	bne.n	800766e <checkAktifCalisma+0xa9a>
 800761a:	4b4f      	ldr	r3, [pc, #316]	; (8007758 <checkAktifCalisma+0xb84>)
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d125      	bne.n	800766e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8007622:	2104      	movs	r1, #4
 8007624:	4840      	ldr	r0, [pc, #256]	; (8007728 <checkAktifCalisma+0xb54>)
 8007626:	f002 fe39 	bl	800a29c <HAL_GPIO_ReadPin>
 800762a:	4603      	mov	r3, r0
 800762c:	2b01      	cmp	r3, #1
 800762e:	d003      	beq.n	8007638 <checkAktifCalisma+0xa64>
 8007630:	4b4a      	ldr	r3, [pc, #296]	; (800775c <checkAktifCalisma+0xb88>)
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d11a      	bne.n	800766e <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007638:	2102      	movs	r1, #2
 800763a:	483b      	ldr	r0, [pc, #236]	; (8007728 <checkAktifCalisma+0xb54>)
 800763c:	f002 fe2e 	bl	800a29c <HAL_GPIO_ReadPin>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d113      	bne.n	800766e <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8007646:	4b46      	ldr	r3, [pc, #280]	; (8007760 <checkAktifCalisma+0xb8c>)
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	f083 0301 	eor.w	r3, r3, #1
 800764e:	b2db      	uxtb	r3, r3
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00c      	beq.n	800766e <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8007654:	4b3d      	ldr	r3, [pc, #244]	; (800774c <checkAktifCalisma+0xb78>)
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d008      	beq.n	800766e <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 800765c:	4b41      	ldr	r3, [pc, #260]	; (8007764 <checkAktifCalisma+0xb90>)
 800765e:	2201      	movs	r2, #1
 8007660:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8007662:	4b36      	ldr	r3, [pc, #216]	; (800773c <checkAktifCalisma+0xb68>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a40      	ldr	r2, [pc, #256]	; (8007768 <checkAktifCalisma+0xb94>)
 8007668:	6013      	str	r3, [r2, #0]
			bekle();
 800766a:	f7ff f87d 	bl	8006768 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800766e:	4b33      	ldr	r3, [pc, #204]	; (800773c <checkAktifCalisma+0xb68>)
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	4b3d      	ldr	r3, [pc, #244]	; (8007768 <checkAktifCalisma+0xb94>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	4a3c      	ldr	r2, [pc, #240]	; (800776c <checkAktifCalisma+0xb98>)
 800767a:	7812      	ldrb	r2, [r2, #0]
 800767c:	4293      	cmp	r3, r2
 800767e:	d211      	bcs.n	80076a4 <checkAktifCalisma+0xad0>
 8007680:	2104      	movs	r1, #4
 8007682:	4829      	ldr	r0, [pc, #164]	; (8007728 <checkAktifCalisma+0xb54>)
 8007684:	f002 fe0a 	bl	800a29c <HAL_GPIO_ReadPin>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00a      	beq.n	80076a4 <checkAktifCalisma+0xad0>
 800768e:	4b33      	ldr	r3, [pc, #204]	; (800775c <checkAktifCalisma+0xb88>)
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d006      	beq.n	80076a4 <checkAktifCalisma+0xad0>
 8007696:	4b2d      	ldr	r3, [pc, #180]	; (800774c <checkAktifCalisma+0xb78>)
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	f083 0301 	eor.w	r3, r3, #1
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 80076a4:	4b2f      	ldr	r3, [pc, #188]	; (8007764 <checkAktifCalisma+0xb90>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80076aa:	4b29      	ldr	r3, [pc, #164]	; (8007750 <checkAktifCalisma+0xb7c>)
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d160      	bne.n	8007774 <checkAktifCalisma+0xba0>
 80076b2:	4b28      	ldr	r3, [pc, #160]	; (8007754 <checkAktifCalisma+0xb80>)
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d003      	beq.n	80076c2 <checkAktifCalisma+0xaee>
 80076ba:	4b26      	ldr	r3, [pc, #152]	; (8007754 <checkAktifCalisma+0xb80>)
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d158      	bne.n	8007774 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80076c2:	2104      	movs	r1, #4
 80076c4:	4818      	ldr	r0, [pc, #96]	; (8007728 <checkAktifCalisma+0xb54>)
 80076c6:	f002 fde9 	bl	800a29c <HAL_GPIO_ReadPin>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d003      	beq.n	80076d8 <checkAktifCalisma+0xb04>
 80076d0:	4b22      	ldr	r3, [pc, #136]	; (800775c <checkAktifCalisma+0xb88>)
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d14d      	bne.n	8007774 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80076d8:	2102      	movs	r1, #2
 80076da:	4813      	ldr	r0, [pc, #76]	; (8007728 <checkAktifCalisma+0xb54>)
 80076dc:	f002 fdde 	bl	800a29c <HAL_GPIO_ReadPin>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d146      	bne.n	8007774 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80076e6:	2180      	movs	r1, #128	; 0x80
 80076e8:	480f      	ldr	r0, [pc, #60]	; (8007728 <checkAktifCalisma+0xb54>)
 80076ea:	f002 fdd7 	bl	800a29c <HAL_GPIO_ReadPin>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d103      	bne.n	80076fc <checkAktifCalisma+0xb28>
 80076f4:	4b18      	ldr	r3, [pc, #96]	; (8007758 <checkAktifCalisma+0xb84>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00b      	beq.n	8007714 <checkAktifCalisma+0xb40>
 80076fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007700:	4811      	ldr	r0, [pc, #68]	; (8007748 <checkAktifCalisma+0xb74>)
 8007702:	f002 fdcb 	bl	800a29c <HAL_GPIO_ReadPin>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d133      	bne.n	8007774 <checkAktifCalisma+0xba0>
 800770c:	4b12      	ldr	r3, [pc, #72]	; (8007758 <checkAktifCalisma+0xb84>)
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d12f      	bne.n	8007774 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8007714:	4b0d      	ldr	r3, [pc, #52]	; (800774c <checkAktifCalisma+0xb78>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d02b      	beq.n	8007774 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 800771c:	4b14      	ldr	r3, [pc, #80]	; (8007770 <checkAktifCalisma+0xb9c>)
 800771e:	2201      	movs	r2, #1
 8007720:	701a      	strb	r2, [r3, #0]
 8007722:	e02a      	b.n	800777a <checkAktifCalisma+0xba6>
 8007724:	20000cd4 	.word	0x20000cd4
 8007728:	40011000 	.word	0x40011000
 800772c:	20000cd8 	.word	0x20000cd8
 8007730:	20000cef 	.word	0x20000cef
 8007734:	20000cf0 	.word	0x20000cf0
 8007738:	20000cd0 	.word	0x20000cd0
 800773c:	20000bd4 	.word	0x20000bd4
 8007740:	20000be0 	.word	0x20000be0
 8007744:	20000cb3 	.word	0x20000cb3
 8007748:	40010c00 	.word	0x40010c00
 800774c:	20000cdf 	.word	0x20000cdf
 8007750:	20000ca6 	.word	0x20000ca6
 8007754:	20000ca5 	.word	0x20000ca5
 8007758:	20000ca9 	.word	0x20000ca9
 800775c:	20000ca3 	.word	0x20000ca3
 8007760:	20000ccc 	.word	0x20000ccc
 8007764:	20000ce0 	.word	0x20000ce0
 8007768:	20000bd8 	.word	0x20000bd8
 800776c:	20000cb6 	.word	0x20000cb6
 8007770:	20000ce1 	.word	0x20000ce1
		} else {
			kapi1butonkontrol=0;
 8007774:	4b8b      	ldr	r3, [pc, #556]	; (80079a4 <checkAktifCalisma+0xdd0>)
 8007776:	2200      	movs	r2, #0
 8007778:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800777a:	4b8b      	ldr	r3, [pc, #556]	; (80079a8 <checkAktifCalisma+0xdd4>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	2b02      	cmp	r3, #2
 8007780:	d121      	bne.n	80077c6 <checkAktifCalisma+0xbf2>
 8007782:	4b8a      	ldr	r3, [pc, #552]	; (80079ac <checkAktifCalisma+0xdd8>)
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	2b01      	cmp	r3, #1
 8007788:	d003      	beq.n	8007792 <checkAktifCalisma+0xbbe>
 800778a:	4b88      	ldr	r3, [pc, #544]	; (80079ac <checkAktifCalisma+0xdd8>)
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	2b03      	cmp	r3, #3
 8007790:	d119      	bne.n	80077c6 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8007792:	2104      	movs	r1, #4
 8007794:	4886      	ldr	r0, [pc, #536]	; (80079b0 <checkAktifCalisma+0xddc>)
 8007796:	f002 fd81 	bl	800a29c <HAL_GPIO_ReadPin>
 800779a:	4603      	mov	r3, r0
 800779c:	2b01      	cmp	r3, #1
 800779e:	d003      	beq.n	80077a8 <checkAktifCalisma+0xbd4>
 80077a0:	4b84      	ldr	r3, [pc, #528]	; (80079b4 <checkAktifCalisma+0xde0>)
 80077a2:	781b      	ldrb	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d10e      	bne.n	80077c6 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80077a8:	2102      	movs	r1, #2
 80077aa:	4881      	ldr	r0, [pc, #516]	; (80079b0 <checkAktifCalisma+0xddc>)
 80077ac:	f002 fd76 	bl	800a29c <HAL_GPIO_ReadPin>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d107      	bne.n	80077c6 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 80077b6:	4b80      	ldr	r3, [pc, #512]	; (80079b8 <checkAktifCalisma+0xde4>)
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 80077be:	4b7f      	ldr	r3, [pc, #508]	; (80079bc <checkAktifCalisma+0xde8>)
 80077c0:	2201      	movs	r2, #1
 80077c2:	701a      	strb	r2, [r3, #0]
 80077c4:	e002      	b.n	80077cc <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 80077c6:	4b7d      	ldr	r3, [pc, #500]	; (80079bc <checkAktifCalisma+0xde8>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80077cc:	4b75      	ldr	r3, [pc, #468]	; (80079a4 <checkAktifCalisma+0xdd0>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d107      	bne.n	80077e4 <checkAktifCalisma+0xc10>
 80077d4:	4b79      	ldr	r3, [pc, #484]	; (80079bc <checkAktifCalisma+0xde8>)
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d103      	bne.n	80077e4 <checkAktifCalisma+0xc10>
 80077dc:	4b78      	ldr	r3, [pc, #480]	; (80079c0 <checkAktifCalisma+0xdec>)
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d005      	beq.n	80077f0 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80077e4:	2201      	movs	r2, #1
 80077e6:	2180      	movs	r1, #128	; 0x80
 80077e8:	4876      	ldr	r0, [pc, #472]	; (80079c4 <checkAktifCalisma+0xdf0>)
 80077ea:	f002 fd6e 	bl	800a2ca <HAL_GPIO_WritePin>
 80077ee:	e004      	b.n	80077fa <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80077f0:	2200      	movs	r2, #0
 80077f2:	2180      	movs	r1, #128	; 0x80
 80077f4:	4873      	ldr	r0, [pc, #460]	; (80079c4 <checkAktifCalisma+0xdf0>)
 80077f6:	f002 fd68 	bl	800a2ca <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80077fa:	4b73      	ldr	r3, [pc, #460]	; (80079c8 <checkAktifCalisma+0xdf4>)
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d141      	bne.n	8007886 <checkAktifCalisma+0xcb2>
 8007802:	4b6a      	ldr	r3, [pc, #424]	; (80079ac <checkAktifCalisma+0xdd8>)
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d003      	beq.n	8007812 <checkAktifCalisma+0xc3e>
 800780a:	4b68      	ldr	r3, [pc, #416]	; (80079ac <checkAktifCalisma+0xdd8>)
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	2b03      	cmp	r3, #3
 8007810:	d139      	bne.n	8007886 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007812:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007816:	4866      	ldr	r0, [pc, #408]	; (80079b0 <checkAktifCalisma+0xddc>)
 8007818:	f002 fd40 	bl	800a29c <HAL_GPIO_ReadPin>
 800781c:	4603      	mov	r3, r0
 800781e:	2b00      	cmp	r3, #0
 8007820:	d103      	bne.n	800782a <checkAktifCalisma+0xc56>
 8007822:	4b6a      	ldr	r3, [pc, #424]	; (80079cc <checkAktifCalisma+0xdf8>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00b      	beq.n	8007842 <checkAktifCalisma+0xc6e>
 800782a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800782e:	4868      	ldr	r0, [pc, #416]	; (80079d0 <checkAktifCalisma+0xdfc>)
 8007830:	f002 fd34 	bl	800a29c <HAL_GPIO_ReadPin>
 8007834:	4603      	mov	r3, r0
 8007836:	2b00      	cmp	r3, #0
 8007838:	d125      	bne.n	8007886 <checkAktifCalisma+0xcb2>
 800783a:	4b64      	ldr	r3, [pc, #400]	; (80079cc <checkAktifCalisma+0xdf8>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d121      	bne.n	8007886 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007842:	2102      	movs	r1, #2
 8007844:	485a      	ldr	r0, [pc, #360]	; (80079b0 <checkAktifCalisma+0xddc>)
 8007846:	f002 fd29 	bl	800a29c <HAL_GPIO_ReadPin>
 800784a:	4603      	mov	r3, r0
 800784c:	2b01      	cmp	r3, #1
 800784e:	d11a      	bne.n	8007886 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007850:	2104      	movs	r1, #4
 8007852:	4857      	ldr	r0, [pc, #348]	; (80079b0 <checkAktifCalisma+0xddc>)
 8007854:	f002 fd22 	bl	800a29c <HAL_GPIO_ReadPin>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d113      	bne.n	8007886 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 800785e:	4b56      	ldr	r3, [pc, #344]	; (80079b8 <checkAktifCalisma+0xde4>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00f      	beq.n	8007886 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8007866:	4b5b      	ldr	r3, [pc, #364]	; (80079d4 <checkAktifCalisma+0xe00>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	f083 0301 	eor.w	r3, r3, #1
 800786e:	b2db      	uxtb	r3, r3
 8007870:	2b00      	cmp	r3, #0
 8007872:	d008      	beq.n	8007886 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8007874:	4b58      	ldr	r3, [pc, #352]	; (80079d8 <checkAktifCalisma+0xe04>)
 8007876:	2201      	movs	r2, #1
 8007878:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800787a:	4b58      	ldr	r3, [pc, #352]	; (80079dc <checkAktifCalisma+0xe08>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a58      	ldr	r2, [pc, #352]	; (80079e0 <checkAktifCalisma+0xe0c>)
 8007880:	6013      	str	r3, [r2, #0]
			bekle();
 8007882:	f7fe ff71 	bl	8006768 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8007886:	4b55      	ldr	r3, [pc, #340]	; (80079dc <checkAktifCalisma+0xe08>)
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	4b55      	ldr	r3, [pc, #340]	; (80079e0 <checkAktifCalisma+0xe0c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	4a54      	ldr	r2, [pc, #336]	; (80079e4 <checkAktifCalisma+0xe10>)
 8007892:	7812      	ldrb	r2, [r2, #0]
 8007894:	4293      	cmp	r3, r2
 8007896:	d20d      	bcs.n	80078b4 <checkAktifCalisma+0xce0>
 8007898:	2102      	movs	r1, #2
 800789a:	4845      	ldr	r0, [pc, #276]	; (80079b0 <checkAktifCalisma+0xddc>)
 800789c:	f002 fcfe 	bl	800a29c <HAL_GPIO_ReadPin>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d006      	beq.n	80078b4 <checkAktifCalisma+0xce0>
 80078a6:	4b44      	ldr	r3, [pc, #272]	; (80079b8 <checkAktifCalisma+0xde4>)
 80078a8:	781b      	ldrb	r3, [r3, #0]
 80078aa:	f083 0301 	eor.w	r3, r3, #1
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d002      	beq.n	80078ba <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 80078b4:	4b48      	ldr	r3, [pc, #288]	; (80079d8 <checkAktifCalisma+0xe04>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80078ba:	4b43      	ldr	r3, [pc, #268]	; (80079c8 <checkAktifCalisma+0xdf4>)
 80078bc:	781b      	ldrb	r3, [r3, #0]
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d135      	bne.n	800792e <checkAktifCalisma+0xd5a>
 80078c2:	4b3a      	ldr	r3, [pc, #232]	; (80079ac <checkAktifCalisma+0xdd8>)
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d003      	beq.n	80078d2 <checkAktifCalisma+0xcfe>
 80078ca:	4b38      	ldr	r3, [pc, #224]	; (80079ac <checkAktifCalisma+0xdd8>)
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	2b03      	cmp	r3, #3
 80078d0:	d12d      	bne.n	800792e <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80078d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078d6:	4836      	ldr	r0, [pc, #216]	; (80079b0 <checkAktifCalisma+0xddc>)
 80078d8:	f002 fce0 	bl	800a29c <HAL_GPIO_ReadPin>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d103      	bne.n	80078ea <checkAktifCalisma+0xd16>
 80078e2:	4b3a      	ldr	r3, [pc, #232]	; (80079cc <checkAktifCalisma+0xdf8>)
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00b      	beq.n	8007902 <checkAktifCalisma+0xd2e>
 80078ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80078ee:	4838      	ldr	r0, [pc, #224]	; (80079d0 <checkAktifCalisma+0xdfc>)
 80078f0:	f002 fcd4 	bl	800a29c <HAL_GPIO_ReadPin>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d119      	bne.n	800792e <checkAktifCalisma+0xd5a>
 80078fa:	4b34      	ldr	r3, [pc, #208]	; (80079cc <checkAktifCalisma+0xdf8>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d115      	bne.n	800792e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007902:	2102      	movs	r1, #2
 8007904:	482a      	ldr	r0, [pc, #168]	; (80079b0 <checkAktifCalisma+0xddc>)
 8007906:	f002 fcc9 	bl	800a29c <HAL_GPIO_ReadPin>
 800790a:	4603      	mov	r3, r0
 800790c:	2b01      	cmp	r3, #1
 800790e:	d10e      	bne.n	800792e <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007910:	2104      	movs	r1, #4
 8007912:	4827      	ldr	r0, [pc, #156]	; (80079b0 <checkAktifCalisma+0xddc>)
 8007914:	f002 fcc2 	bl	800a29c <HAL_GPIO_ReadPin>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d107      	bne.n	800792e <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 800791e:	4b26      	ldr	r3, [pc, #152]	; (80079b8 <checkAktifCalisma+0xde4>)
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d003      	beq.n	800792e <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8007926:	4b30      	ldr	r3, [pc, #192]	; (80079e8 <checkAktifCalisma+0xe14>)
 8007928:	2201      	movs	r2, #1
 800792a:	701a      	strb	r2, [r3, #0]
 800792c:	e002      	b.n	8007934 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 800792e:	4b2e      	ldr	r3, [pc, #184]	; (80079e8 <checkAktifCalisma+0xe14>)
 8007930:	2200      	movs	r2, #0
 8007932:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007934:	4b24      	ldr	r3, [pc, #144]	; (80079c8 <checkAktifCalisma+0xdf4>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	2b02      	cmp	r3, #2
 800793a:	d11d      	bne.n	8007978 <checkAktifCalisma+0xda4>
 800793c:	4b1b      	ldr	r3, [pc, #108]	; (80079ac <checkAktifCalisma+0xdd8>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d003      	beq.n	800794c <checkAktifCalisma+0xd78>
 8007944:	4b19      	ldr	r3, [pc, #100]	; (80079ac <checkAktifCalisma+0xdd8>)
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	2b03      	cmp	r3, #3
 800794a:	d115      	bne.n	8007978 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800794c:	2102      	movs	r1, #2
 800794e:	4818      	ldr	r0, [pc, #96]	; (80079b0 <checkAktifCalisma+0xddc>)
 8007950:	f002 fca4 	bl	800a29c <HAL_GPIO_ReadPin>
 8007954:	4603      	mov	r3, r0
 8007956:	2b01      	cmp	r3, #1
 8007958:	d10e      	bne.n	8007978 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800795a:	2104      	movs	r1, #4
 800795c:	4814      	ldr	r0, [pc, #80]	; (80079b0 <checkAktifCalisma+0xddc>)
 800795e:	f002 fc9d 	bl	800a29c <HAL_GPIO_ReadPin>
 8007962:	4603      	mov	r3, r0
 8007964:	2b00      	cmp	r3, #0
 8007966:	d107      	bne.n	8007978 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8007968:	4b13      	ldr	r3, [pc, #76]	; (80079b8 <checkAktifCalisma+0xde4>)
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8007970:	4b1e      	ldr	r3, [pc, #120]	; (80079ec <checkAktifCalisma+0xe18>)
 8007972:	2201      	movs	r2, #1
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	e002      	b.n	800797e <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8007978:	4b1c      	ldr	r3, [pc, #112]	; (80079ec <checkAktifCalisma+0xe18>)
 800797a:	2200      	movs	r2, #0
 800797c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 800797e:	4b1a      	ldr	r3, [pc, #104]	; (80079e8 <checkAktifCalisma+0xe14>)
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d107      	bne.n	8007996 <checkAktifCalisma+0xdc2>
 8007986:	4b19      	ldr	r3, [pc, #100]	; (80079ec <checkAktifCalisma+0xe18>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d103      	bne.n	8007996 <checkAktifCalisma+0xdc2>
 800798e:	4b12      	ldr	r3, [pc, #72]	; (80079d8 <checkAktifCalisma+0xe04>)
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d02c      	beq.n	80079f0 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007996:	2201      	movs	r2, #1
 8007998:	2140      	movs	r1, #64	; 0x40
 800799a:	480a      	ldr	r0, [pc, #40]	; (80079c4 <checkAktifCalisma+0xdf0>)
 800799c:	f002 fc95 	bl	800a2ca <HAL_GPIO_WritePin>
 80079a0:	e02b      	b.n	80079fa <checkAktifCalisma+0xe26>
 80079a2:	bf00      	nop
 80079a4:	20000ce1 	.word	0x20000ce1
 80079a8:	20000ca6 	.word	0x20000ca6
 80079ac:	20000ca5 	.word	0x20000ca5
 80079b0:	40011000 	.word	0x40011000
 80079b4:	20000ca3 	.word	0x20000ca3
 80079b8:	20000cdf 	.word	0x20000cdf
 80079bc:	20000ce2 	.word	0x20000ce2
 80079c0:	20000ce0 	.word	0x20000ce0
 80079c4:	40010800 	.word	0x40010800
 80079c8:	20000ca7 	.word	0x20000ca7
 80079cc:	20000ca9 	.word	0x20000ca9
 80079d0:	40010c00 	.word	0x40010c00
 80079d4:	20000ccc 	.word	0x20000ccc
 80079d8:	20000ce3 	.word	0x20000ce3
 80079dc:	20000bd4 	.word	0x20000bd4
 80079e0:	20000bd8 	.word	0x20000bd8
 80079e4:	20000cb7 	.word	0x20000cb7
 80079e8:	20000ce4 	.word	0x20000ce4
 80079ec:	20000ce5 	.word	0x20000ce5
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80079f0:	2200      	movs	r2, #0
 80079f2:	2140      	movs	r1, #64	; 0x40
 80079f4:	488d      	ldr	r0, [pc, #564]	; (8007c2c <checkAktifCalisma+0x1058>)
 80079f6:	f002 fc68 	bl	800a2ca <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 80079fa:	4b8d      	ldr	r3, [pc, #564]	; (8007c30 <checkAktifCalisma+0x105c>)
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d003      	beq.n	8007a0a <checkAktifCalisma+0xe36>
 8007a02:	4b8b      	ldr	r3, [pc, #556]	; (8007c30 <checkAktifCalisma+0x105c>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d115      	bne.n	8007a36 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8007a0a:	2104      	movs	r1, #4
 8007a0c:	4889      	ldr	r0, [pc, #548]	; (8007c34 <checkAktifCalisma+0x1060>)
 8007a0e:	f002 fc45 	bl	800a29c <HAL_GPIO_ReadPin>
 8007a12:	4603      	mov	r3, r0
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d003      	beq.n	8007a20 <checkAktifCalisma+0xe4c>
 8007a18:	4b87      	ldr	r3, [pc, #540]	; (8007c38 <checkAktifCalisma+0x1064>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10a      	bne.n	8007a36 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8007a20:	2102      	movs	r1, #2
 8007a22:	4884      	ldr	r0, [pc, #528]	; (8007c34 <checkAktifCalisma+0x1060>)
 8007a24:	f002 fc3a 	bl	800a29c <HAL_GPIO_ReadPin>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d103      	bne.n	8007a36 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8007a2e:	4b83      	ldr	r3, [pc, #524]	; (8007c3c <checkAktifCalisma+0x1068>)
 8007a30:	2201      	movs	r2, #1
 8007a32:	701a      	strb	r2, [r3, #0]
 8007a34:	e002      	b.n	8007a3c <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8007a36:	4b81      	ldr	r3, [pc, #516]	; (8007c3c <checkAktifCalisma+0x1068>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8007a3c:	4b7c      	ldr	r3, [pc, #496]	; (8007c30 <checkAktifCalisma+0x105c>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d003      	beq.n	8007a4c <checkAktifCalisma+0xe78>
 8007a44:	4b7a      	ldr	r3, [pc, #488]	; (8007c30 <checkAktifCalisma+0x105c>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d111      	bne.n	8007a70 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007a4c:	2102      	movs	r1, #2
 8007a4e:	4879      	ldr	r0, [pc, #484]	; (8007c34 <checkAktifCalisma+0x1060>)
 8007a50:	f002 fc24 	bl	800a29c <HAL_GPIO_ReadPin>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d10a      	bne.n	8007a70 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8007a5a:	2104      	movs	r1, #4
 8007a5c:	4875      	ldr	r0, [pc, #468]	; (8007c34 <checkAktifCalisma+0x1060>)
 8007a5e:	f002 fc1d 	bl	800a29c <HAL_GPIO_ReadPin>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d103      	bne.n	8007a70 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8007a68:	4b75      	ldr	r3, [pc, #468]	; (8007c40 <checkAktifCalisma+0x106c>)
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	701a      	strb	r2, [r3, #0]
 8007a6e:	e002      	b.n	8007a76 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8007a70:	4b73      	ldr	r3, [pc, #460]	; (8007c40 <checkAktifCalisma+0x106c>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8007a76:	4b71      	ldr	r3, [pc, #452]	; (8007c3c <checkAktifCalisma+0x1068>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d00f      	beq.n	8007a9e <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8007a7e:	4b71      	ldr	r3, [pc, #452]	; (8007c44 <checkAktifCalisma+0x1070>)
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d10b      	bne.n	8007a9e <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8007a86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007a8a:	486f      	ldr	r0, [pc, #444]	; (8007c48 <checkAktifCalisma+0x1074>)
 8007a8c:	f002 fc06 	bl	800a29c <HAL_GPIO_ReadPin>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d103      	bne.n	8007a9e <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8007a96:	4b6d      	ldr	r3, [pc, #436]	; (8007c4c <checkAktifCalisma+0x1078>)
 8007a98:	2201      	movs	r2, #1
 8007a9a:	701a      	strb	r2, [r3, #0]
 8007a9c:	e002      	b.n	8007aa4 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8007a9e:	4b6b      	ldr	r3, [pc, #428]	; (8007c4c <checkAktifCalisma+0x1078>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8007aa4:	4b66      	ldr	r3, [pc, #408]	; (8007c40 <checkAktifCalisma+0x106c>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d00f      	beq.n	8007acc <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8007aac:	4b65      	ldr	r3, [pc, #404]	; (8007c44 <checkAktifCalisma+0x1070>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d10b      	bne.n	8007acc <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8007ab4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007ab8:	4863      	ldr	r0, [pc, #396]	; (8007c48 <checkAktifCalisma+0x1074>)
 8007aba:	f002 fbef 	bl	800a29c <HAL_GPIO_ReadPin>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d103      	bne.n	8007acc <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8007ac4:	4b62      	ldr	r3, [pc, #392]	; (8007c50 <checkAktifCalisma+0x107c>)
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	701a      	strb	r2, [r3, #0]
 8007aca:	e002      	b.n	8007ad2 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8007acc:	4b60      	ldr	r3, [pc, #384]	; (8007c50 <checkAktifCalisma+0x107c>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007ad2:	4b60      	ldr	r3, [pc, #384]	; (8007c54 <checkAktifCalisma+0x1080>)
 8007ad4:	781b      	ldrb	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d137      	bne.n	8007b4a <checkAktifCalisma+0xf76>
 8007ada:	4b5f      	ldr	r3, [pc, #380]	; (8007c58 <checkAktifCalisma+0x1084>)
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	2b02      	cmp	r3, #2
 8007ae0:	d003      	beq.n	8007aea <checkAktifCalisma+0xf16>
 8007ae2:	4b5d      	ldr	r3, [pc, #372]	; (8007c58 <checkAktifCalisma+0x1084>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d12f      	bne.n	8007b4a <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007aea:	4b54      	ldr	r3, [pc, #336]	; (8007c3c <checkAktifCalisma+0x1068>)
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d103      	bne.n	8007afa <checkAktifCalisma+0xf26>
 8007af2:	4b53      	ldr	r3, [pc, #332]	; (8007c40 <checkAktifCalisma+0x106c>)
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d027      	beq.n	8007b4a <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8007afa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007afe:	484d      	ldr	r0, [pc, #308]	; (8007c34 <checkAktifCalisma+0x1060>)
 8007b00:	f002 fbcc 	bl	800a29c <HAL_GPIO_ReadPin>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d103      	bne.n	8007b12 <checkAktifCalisma+0xf3e>
 8007b0a:	4b4e      	ldr	r3, [pc, #312]	; (8007c44 <checkAktifCalisma+0x1070>)
 8007b0c:	781b      	ldrb	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d007      	beq.n	8007b22 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8007b12:	4b4e      	ldr	r3, [pc, #312]	; (8007c4c <checkAktifCalisma+0x1078>)
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d103      	bne.n	8007b22 <checkAktifCalisma+0xf4e>
 8007b1a:	4b4d      	ldr	r3, [pc, #308]	; (8007c50 <checkAktifCalisma+0x107c>)
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d013      	beq.n	8007b4a <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8007b22:	4b4e      	ldr	r3, [pc, #312]	; (8007c5c <checkAktifCalisma+0x1088>)
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00f      	beq.n	8007b4a <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8007b2a:	4b4d      	ldr	r3, [pc, #308]	; (8007c60 <checkAktifCalisma+0x108c>)
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	f083 0301 	eor.w	r3, r3, #1
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d008      	beq.n	8007b4a <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8007b38:	4b4a      	ldr	r3, [pc, #296]	; (8007c64 <checkAktifCalisma+0x1090>)
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8007b3e:	4b4a      	ldr	r3, [pc, #296]	; (8007c68 <checkAktifCalisma+0x1094>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a4a      	ldr	r2, [pc, #296]	; (8007c6c <checkAktifCalisma+0x1098>)
 8007b44:	6013      	str	r3, [r2, #0]
			bekle();
 8007b46:	f7fe fe0f 	bl	8006768 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8007b4a:	4b47      	ldr	r3, [pc, #284]	; (8007c68 <checkAktifCalisma+0x1094>)
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	4b47      	ldr	r3, [pc, #284]	; (8007c6c <checkAktifCalisma+0x1098>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	4a46      	ldr	r2, [pc, #280]	; (8007c70 <checkAktifCalisma+0x109c>)
 8007b56:	7812      	ldrb	r2, [r2, #0]
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d214      	bcs.n	8007b86 <checkAktifCalisma+0xfb2>
 8007b5c:	4b37      	ldr	r3, [pc, #220]	; (8007c3c <checkAktifCalisma+0x1068>)
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	f083 0301 	eor.w	r3, r3, #1
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d006      	beq.n	8007b78 <checkAktifCalisma+0xfa4>
 8007b6a:	4b35      	ldr	r3, [pc, #212]	; (8007c40 <checkAktifCalisma+0x106c>)
 8007b6c:	781b      	ldrb	r3, [r3, #0]
 8007b6e:	f083 0301 	eor.w	r3, r3, #1
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d106      	bne.n	8007b86 <checkAktifCalisma+0xfb2>
 8007b78:	4b38      	ldr	r3, [pc, #224]	; (8007c5c <checkAktifCalisma+0x1088>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	f083 0301 	eor.w	r3, r3, #1
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d002      	beq.n	8007b8c <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8007b86:	4b37      	ldr	r3, [pc, #220]	; (8007c64 <checkAktifCalisma+0x1090>)
 8007b88:	2200      	movs	r2, #0
 8007b8a:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007b8c:	4b31      	ldr	r3, [pc, #196]	; (8007c54 <checkAktifCalisma+0x1080>)
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d12b      	bne.n	8007bec <checkAktifCalisma+0x1018>
 8007b94:	4b30      	ldr	r3, [pc, #192]	; (8007c58 <checkAktifCalisma+0x1084>)
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d003      	beq.n	8007ba4 <checkAktifCalisma+0xfd0>
 8007b9c:	4b2e      	ldr	r3, [pc, #184]	; (8007c58 <checkAktifCalisma+0x1084>)
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	2b03      	cmp	r3, #3
 8007ba2:	d123      	bne.n	8007bec <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007ba4:	4b25      	ldr	r3, [pc, #148]	; (8007c3c <checkAktifCalisma+0x1068>)
 8007ba6:	781b      	ldrb	r3, [r3, #0]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d103      	bne.n	8007bb4 <checkAktifCalisma+0xfe0>
 8007bac:	4b24      	ldr	r3, [pc, #144]	; (8007c40 <checkAktifCalisma+0x106c>)
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d01b      	beq.n	8007bec <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8007bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007bb8:	481e      	ldr	r0, [pc, #120]	; (8007c34 <checkAktifCalisma+0x1060>)
 8007bba:	f002 fb6f 	bl	800a29c <HAL_GPIO_ReadPin>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d103      	bne.n	8007bcc <checkAktifCalisma+0xff8>
 8007bc4:	4b1f      	ldr	r3, [pc, #124]	; (8007c44 <checkAktifCalisma+0x1070>)
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d007      	beq.n	8007bdc <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8007bcc:	4b1f      	ldr	r3, [pc, #124]	; (8007c4c <checkAktifCalisma+0x1078>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d103      	bne.n	8007bdc <checkAktifCalisma+0x1008>
 8007bd4:	4b1e      	ldr	r3, [pc, #120]	; (8007c50 <checkAktifCalisma+0x107c>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d007      	beq.n	8007bec <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8007bdc:	4b1f      	ldr	r3, [pc, #124]	; (8007c5c <checkAktifCalisma+0x1088>)
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d003      	beq.n	8007bec <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8007be4:	4b23      	ldr	r3, [pc, #140]	; (8007c74 <checkAktifCalisma+0x10a0>)
 8007be6:	2201      	movs	r2, #1
 8007be8:	701a      	strb	r2, [r3, #0]
 8007bea:	e002      	b.n	8007bf2 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8007bec:	4b21      	ldr	r3, [pc, #132]	; (8007c74 <checkAktifCalisma+0x10a0>)
 8007bee:	2200      	movs	r2, #0
 8007bf0:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007bf2:	4b18      	ldr	r3, [pc, #96]	; (8007c54 <checkAktifCalisma+0x1080>)
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d140      	bne.n	8007c7c <checkAktifCalisma+0x10a8>
 8007bfa:	4b17      	ldr	r3, [pc, #92]	; (8007c58 <checkAktifCalisma+0x1084>)
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	2b02      	cmp	r3, #2
 8007c00:	d003      	beq.n	8007c0a <checkAktifCalisma+0x1036>
 8007c02:	4b15      	ldr	r3, [pc, #84]	; (8007c58 <checkAktifCalisma+0x1084>)
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	2b03      	cmp	r3, #3
 8007c08:	d138      	bne.n	8007c7c <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007c0a:	4b0c      	ldr	r3, [pc, #48]	; (8007c3c <checkAktifCalisma+0x1068>)
 8007c0c:	781b      	ldrb	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d103      	bne.n	8007c1a <checkAktifCalisma+0x1046>
 8007c12:	4b0b      	ldr	r3, [pc, #44]	; (8007c40 <checkAktifCalisma+0x106c>)
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d030      	beq.n	8007c7c <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8007c1a:	4b10      	ldr	r3, [pc, #64]	; (8007c5c <checkAktifCalisma+0x1088>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d02c      	beq.n	8007c7c <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8007c22:	4b15      	ldr	r3, [pc, #84]	; (8007c78 <checkAktifCalisma+0x10a4>)
 8007c24:	2201      	movs	r2, #1
 8007c26:	701a      	strb	r2, [r3, #0]
 8007c28:	e02b      	b.n	8007c82 <checkAktifCalisma+0x10ae>
 8007c2a:	bf00      	nop
 8007c2c:	40010800 	.word	0x40010800
 8007c30:	20000caa 	.word	0x20000caa
 8007c34:	40011000 	.word	0x40011000
 8007c38:	20000ca3 	.word	0x20000ca3
 8007c3c:	20000ce9 	.word	0x20000ce9
 8007c40:	20000cea 	.word	0x20000cea
 8007c44:	20000ca9 	.word	0x20000ca9
 8007c48:	40010c00 	.word	0x40010c00
 8007c4c:	20000cf9 	.word	0x20000cf9
 8007c50:	20000cfa 	.word	0x20000cfa
 8007c54:	20000ca8 	.word	0x20000ca8
 8007c58:	20000ca5 	.word	0x20000ca5
 8007c5c:	20000cdf 	.word	0x20000cdf
 8007c60:	20000ccc 	.word	0x20000ccc
 8007c64:	20000ce6 	.word	0x20000ce6
 8007c68:	20000bd4 	.word	0x20000bd4
 8007c6c:	20000bd8 	.word	0x20000bd8
 8007c70:	20000cb8 	.word	0x20000cb8
 8007c74:	20000ce7 	.word	0x20000ce7
 8007c78:	20000ce8 	.word	0x20000ce8
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8007c7c:	4b89      	ldr	r3, [pc, #548]	; (8007ea4 <checkAktifCalisma+0x12d0>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8007c82:	4b89      	ldr	r3, [pc, #548]	; (8007ea8 <checkAktifCalisma+0x12d4>)
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d107      	bne.n	8007c9a <checkAktifCalisma+0x10c6>
 8007c8a:	4b88      	ldr	r3, [pc, #544]	; (8007eac <checkAktifCalisma+0x12d8>)
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d103      	bne.n	8007c9a <checkAktifCalisma+0x10c6>
 8007c92:	4b84      	ldr	r3, [pc, #528]	; (8007ea4 <checkAktifCalisma+0x12d0>)
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d005      	beq.n	8007ca6 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	2120      	movs	r1, #32
 8007c9e:	4884      	ldr	r0, [pc, #528]	; (8007eb0 <checkAktifCalisma+0x12dc>)
 8007ca0:	f002 fb13 	bl	800a2ca <HAL_GPIO_WritePin>
 8007ca4:	e004      	b.n	8007cb0 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2120      	movs	r1, #32
 8007caa:	4881      	ldr	r0, [pc, #516]	; (8007eb0 <checkAktifCalisma+0x12dc>)
 8007cac:	f002 fb0d 	bl	800a2ca <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8007cb0:	4b80      	ldr	r3, [pc, #512]	; (8007eb4 <checkAktifCalisma+0x12e0>)
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d00e      	beq.n	8007cd6 <checkAktifCalisma+0x1102>
 8007cb8:	2102      	movs	r1, #2
 8007cba:	487f      	ldr	r0, [pc, #508]	; (8007eb8 <checkAktifCalisma+0x12e4>)
 8007cbc:	f002 faee 	bl	800a29c <HAL_GPIO_ReadPin>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d107      	bne.n	8007cd6 <checkAktifCalisma+0x1102>
 8007cc6:	4b7d      	ldr	r3, [pc, #500]	; (8007ebc <checkAktifCalisma+0x12e8>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d103      	bne.n	8007cd6 <checkAktifCalisma+0x1102>
 8007cce:	4b7c      	ldr	r3, [pc, #496]	; (8007ec0 <checkAktifCalisma+0x12ec>)
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d112      	bne.n	8007cfc <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8007cd6:	4b7b      	ldr	r3, [pc, #492]	; (8007ec4 <checkAktifCalisma+0x12f0>)
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d066      	beq.n	8007dac <checkAktifCalisma+0x11d8>
 8007cde:	2104      	movs	r1, #4
 8007ce0:	4875      	ldr	r0, [pc, #468]	; (8007eb8 <checkAktifCalisma+0x12e4>)
 8007ce2:	f002 fadb 	bl	800a29c <HAL_GPIO_ReadPin>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d15f      	bne.n	8007dac <checkAktifCalisma+0x11d8>
 8007cec:	4b73      	ldr	r3, [pc, #460]	; (8007ebc <checkAktifCalisma+0x12e8>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d05b      	beq.n	8007dac <checkAktifCalisma+0x11d8>
 8007cf4:	4b72      	ldr	r3, [pc, #456]	; (8007ec0 <checkAktifCalisma+0x12ec>)
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d057      	beq.n	8007dac <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8007cfc:	4b72      	ldr	r3, [pc, #456]	; (8007ec8 <checkAktifCalisma+0x12f4>)
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	3301      	adds	r3, #1
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	4b70      	ldr	r3, [pc, #448]	; (8007ec8 <checkAktifCalisma+0x12f4>)
 8007d06:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8007d08:	4b6f      	ldr	r3, [pc, #444]	; (8007ec8 <checkAktifCalisma+0x12f4>)
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	2b09      	cmp	r3, #9
 8007d0e:	d908      	bls.n	8007d22 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8007d10:	4b6d      	ldr	r3, [pc, #436]	; (8007ec8 <checkAktifCalisma+0x12f4>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8007d16:	4b6d      	ldr	r3, [pc, #436]	; (8007ecc <checkAktifCalisma+0x12f8>)
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	b2da      	uxtb	r2, r3
 8007d1e:	4b6b      	ldr	r3, [pc, #428]	; (8007ecc <checkAktifCalisma+0x12f8>)
 8007d20:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8007d22:	4b6a      	ldr	r3, [pc, #424]	; (8007ecc <checkAktifCalisma+0x12f8>)
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	2b09      	cmp	r3, #9
 8007d28:	d908      	bls.n	8007d3c <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8007d2a:	4b68      	ldr	r3, [pc, #416]	; (8007ecc <checkAktifCalisma+0x12f8>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8007d30:	4b67      	ldr	r3, [pc, #412]	; (8007ed0 <checkAktifCalisma+0x12fc>)
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	3301      	adds	r3, #1
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	4b65      	ldr	r3, [pc, #404]	; (8007ed0 <checkAktifCalisma+0x12fc>)
 8007d3a:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8007d3c:	4b64      	ldr	r3, [pc, #400]	; (8007ed0 <checkAktifCalisma+0x12fc>)
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	2b09      	cmp	r3, #9
 8007d42:	d908      	bls.n	8007d56 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8007d44:	4b62      	ldr	r3, [pc, #392]	; (8007ed0 <checkAktifCalisma+0x12fc>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8007d4a:	4b62      	ldr	r3, [pc, #392]	; (8007ed4 <checkAktifCalisma+0x1300>)
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	4b60      	ldr	r3, [pc, #384]	; (8007ed4 <checkAktifCalisma+0x1300>)
 8007d54:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8007d56:	4b5f      	ldr	r3, [pc, #380]	; (8007ed4 <checkAktifCalisma+0x1300>)
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	2b09      	cmp	r3, #9
 8007d5c:	d908      	bls.n	8007d70 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8007d5e:	4b5d      	ldr	r3, [pc, #372]	; (8007ed4 <checkAktifCalisma+0x1300>)
 8007d60:	2200      	movs	r2, #0
 8007d62:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8007d64:	4b5c      	ldr	r3, [pc, #368]	; (8007ed8 <checkAktifCalisma+0x1304>)
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	4b5a      	ldr	r3, [pc, #360]	; (8007ed8 <checkAktifCalisma+0x1304>)
 8007d6e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007d70:	4b59      	ldr	r3, [pc, #356]	; (8007ed8 <checkAktifCalisma+0x1304>)
 8007d72:	781a      	ldrb	r2, [r3, #0]
 8007d74:	4b59      	ldr	r3, [pc, #356]	; (8007edc <checkAktifCalisma+0x1308>)
 8007d76:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007d7a:	4b56      	ldr	r3, [pc, #344]	; (8007ed4 <checkAktifCalisma+0x1300>)
 8007d7c:	781a      	ldrb	r2, [r3, #0]
 8007d7e:	4b57      	ldr	r3, [pc, #348]	; (8007edc <checkAktifCalisma+0x1308>)
 8007d80:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007d82:	4b53      	ldr	r3, [pc, #332]	; (8007ed0 <checkAktifCalisma+0x12fc>)
 8007d84:	781a      	ldrb	r2, [r3, #0]
 8007d86:	4b55      	ldr	r3, [pc, #340]	; (8007edc <checkAktifCalisma+0x1308>)
 8007d88:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007d8a:	4b50      	ldr	r3, [pc, #320]	; (8007ecc <checkAktifCalisma+0x12f8>)
 8007d8c:	781a      	ldrb	r2, [r3, #0]
 8007d8e:	4b53      	ldr	r3, [pc, #332]	; (8007edc <checkAktifCalisma+0x1308>)
 8007d90:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007d92:	4b4d      	ldr	r3, [pc, #308]	; (8007ec8 <checkAktifCalisma+0x12f4>)
 8007d94:	781a      	ldrb	r2, [r3, #0]
 8007d96:	4b51      	ldr	r3, [pc, #324]	; (8007edc <checkAktifCalisma+0x1308>)
 8007d98:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8007d9a:	4b51      	ldr	r3, [pc, #324]	; (8007ee0 <checkAktifCalisma+0x130c>)
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8007da0:	4b44      	ldr	r3, [pc, #272]	; (8007eb4 <checkAktifCalisma+0x12e0>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8007da6:	4b47      	ldr	r3, [pc, #284]	; (8007ec4 <checkAktifCalisma+0x12f0>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8007dac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007db0:	484c      	ldr	r0, [pc, #304]	; (8007ee4 <checkAktifCalisma+0x1310>)
 8007db2:	f002 fa73 	bl	800a29c <HAL_GPIO_ReadPin>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d016      	beq.n	8007dea <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8007dbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007dc0:	4848      	ldr	r0, [pc, #288]	; (8007ee4 <checkAktifCalisma+0x1310>)
 8007dc2:	f002 fa6b 	bl	800a29c <HAL_GPIO_ReadPin>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00e      	beq.n	8007dea <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8007dcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007dd0:	4844      	ldr	r0, [pc, #272]	; (8007ee4 <checkAktifCalisma+0x1310>)
 8007dd2:	f002 fa63 	bl	800a29c <HAL_GPIO_ReadPin>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d006      	beq.n	8007dea <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8007ddc:	2140      	movs	r1, #64	; 0x40
 8007dde:	4836      	ldr	r0, [pc, #216]	; (8007eb8 <checkAktifCalisma+0x12e4>)
 8007de0:	f002 fa5c 	bl	800a29c <HAL_GPIO_ReadPin>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d103      	bne.n	8007df2 <checkAktifCalisma+0x121e>
			startBasili=1;
 8007dea:	4b3f      	ldr	r3, [pc, #252]	; (8007ee8 <checkAktifCalisma+0x1314>)
 8007dec:	2201      	movs	r2, #1
 8007dee:	701a      	strb	r2, [r3, #0]
 8007df0:	e002      	b.n	8007df8 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8007df2:	4b3d      	ldr	r3, [pc, #244]	; (8007ee8 <checkAktifCalisma+0x1314>)
 8007df4:	2200      	movs	r2, #0
 8007df6:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8007df8:	4b3b      	ldr	r3, [pc, #236]	; (8007ee8 <checkAktifCalisma+0x1314>)
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d014      	beq.n	8007e2a <checkAktifCalisma+0x1256>
 8007e00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007e04:	4837      	ldr	r0, [pc, #220]	; (8007ee4 <checkAktifCalisma+0x1310>)
 8007e06:	f002 fa49 	bl	800a29c <HAL_GPIO_ReadPin>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b01      	cmp	r3, #1
 8007e0e:	d10c      	bne.n	8007e2a <checkAktifCalisma+0x1256>
			hataVar=1;
 8007e10:	4b36      	ldr	r3, [pc, #216]	; (8007eec <checkAktifCalisma+0x1318>)
 8007e12:	2201      	movs	r2, #1
 8007e14:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8007e16:	2001      	movs	r0, #1
 8007e18:	f7fe f874 	bl	8005f04 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8007e1c:	2001      	movs	r0, #1
 8007e1e:	f7fe fc27 	bl	8006670 <hata2EEPROM>
			acilstophatasi=1;
 8007e22:	4b33      	ldr	r3, [pc, #204]	; (8007ef0 <checkAktifCalisma+0x131c>)
 8007e24:	2201      	movs	r2, #1
 8007e26:	701a      	strb	r2, [r3, #0]
 8007e28:	e018      	b.n	8007e5c <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8007e2a:	4b31      	ldr	r3, [pc, #196]	; (8007ef0 <checkAktifCalisma+0x131c>)
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d014      	beq.n	8007e5c <checkAktifCalisma+0x1288>
 8007e32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007e36:	482b      	ldr	r0, [pc, #172]	; (8007ee4 <checkAktifCalisma+0x1310>)
 8007e38:	f002 fa30 	bl	800a29c <HAL_GPIO_ReadPin>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10c      	bne.n	8007e5c <checkAktifCalisma+0x1288>
 8007e42:	4b29      	ldr	r3, [pc, #164]	; (8007ee8 <checkAktifCalisma+0x1314>)
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	f083 0301 	eor.w	r3, r3, #1
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d005      	beq.n	8007e5c <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 8007e50:	4b27      	ldr	r3, [pc, #156]	; (8007ef0 <checkAktifCalisma+0x131c>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8007e56:	2001      	movs	r0, #1
 8007e58:	f7fe f800 	bl	8005e5c <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8007e5c:	4b25      	ldr	r3, [pc, #148]	; (8007ef4 <checkAktifCalisma+0x1320>)
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	f083 0301 	eor.w	r3, r3, #1
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d04c      	beq.n	8007f04 <checkAktifCalisma+0x1330>
 8007e6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007e6e:	481d      	ldr	r0, [pc, #116]	; (8007ee4 <checkAktifCalisma+0x1310>)
 8007e70:	f002 fa14 	bl	800a29c <HAL_GPIO_ReadPin>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d003      	beq.n	8007e82 <checkAktifCalisma+0x12ae>
 8007e7a:	4b1f      	ldr	r3, [pc, #124]	; (8007ef8 <checkAktifCalisma+0x1324>)
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d040      	beq.n	8007f04 <checkAktifCalisma+0x1330>
 8007e82:	4b1e      	ldr	r3, [pc, #120]	; (8007efc <checkAktifCalisma+0x1328>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d13c      	bne.n	8007f04 <checkAktifCalisma+0x1330>
			hataVar=1;
 8007e8a:	4b18      	ldr	r3, [pc, #96]	; (8007eec <checkAktifCalisma+0x1318>)
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8007e90:	2002      	movs	r0, #2
 8007e92:	f7fe f837 	bl	8005f04 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8007e96:	2002      	movs	r0, #2
 8007e98:	f7fe fbea 	bl	8006670 <hata2EEPROM>
			emniyetCercevesihatasi=1;
 8007e9c:	4b18      	ldr	r3, [pc, #96]	; (8007f00 <checkAktifCalisma+0x132c>)
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	701a      	strb	r2, [r3, #0]
 8007ea2:	e047      	b.n	8007f34 <checkAktifCalisma+0x1360>
 8007ea4:	20000ce8 	.word	0x20000ce8
 8007ea8:	20000ce7 	.word	0x20000ce7
 8007eac:	20000ce6 	.word	0x20000ce6
 8007eb0:	40010800 	.word	0x40010800
 8007eb4:	20000cdc 	.word	0x20000cdc
 8007eb8:	40011000 	.word	0x40011000
 8007ebc:	20000ca3 	.word	0x20000ca3
 8007ec0:	20000cdf 	.word	0x20000cdf
 8007ec4:	20000cdd 	.word	0x20000cdd
 8007ec8:	20000c9a 	.word	0x20000c9a
 8007ecc:	20000c9b 	.word	0x20000c9b
 8007ed0:	200009c2 	.word	0x200009c2
 8007ed4:	200009c3 	.word	0x200009c3
 8007ed8:	20000c9c 	.word	0x20000c9c
 8007edc:	20000b38 	.word	0x20000b38
 8007ee0:	20000cc9 	.word	0x20000cc9
 8007ee4:	40010c00 	.word	0x40010c00
 8007ee8:	20000ceb 	.word	0x20000ceb
 8007eec:	20000cf2 	.word	0x20000cf2
 8007ef0:	20000ced 	.word	0x20000ced
 8007ef4:	20000cf4 	.word	0x20000cf4
 8007ef8:	20000cfe 	.word	0x20000cfe
 8007efc:	20000ca1 	.word	0x20000ca1
 8007f00:	20000cee 	.word	0x20000cee
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8007f04:	4b97      	ldr	r3, [pc, #604]	; (8008164 <checkAktifCalisma+0x1590>)
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d013      	beq.n	8007f34 <checkAktifCalisma+0x1360>
 8007f0c:	4b96      	ldr	r3, [pc, #600]	; (8008168 <checkAktifCalisma+0x1594>)
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d00f      	beq.n	8007f34 <checkAktifCalisma+0x1360>
 8007f14:	4b95      	ldr	r3, [pc, #596]	; (800816c <checkAktifCalisma+0x1598>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	f083 0301 	eor.w	r3, r3, #1
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d008      	beq.n	8007f34 <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 8007f22:	4b90      	ldr	r3, [pc, #576]	; (8008164 <checkAktifCalisma+0x1590>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8007f28:	4b91      	ldr	r3, [pc, #580]	; (8008170 <checkAktifCalisma+0x159c>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8007f2e:	2002      	movs	r0, #2
 8007f30:	f7fd ff94 	bl	8005e5c <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8007f34:	4b8f      	ldr	r3, [pc, #572]	; (8008174 <checkAktifCalisma+0x15a0>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d11c      	bne.n	8007f76 <checkAktifCalisma+0x13a2>
 8007f3c:	4b8e      	ldr	r3, [pc, #568]	; (8008178 <checkAktifCalisma+0x15a4>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d118      	bne.n	8007f76 <checkAktifCalisma+0x13a2>
 8007f44:	4b8d      	ldr	r3, [pc, #564]	; (800817c <checkAktifCalisma+0x15a8>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d014      	beq.n	8007f76 <checkAktifCalisma+0x13a2>
 8007f4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007f50:	488b      	ldr	r0, [pc, #556]	; (8008180 <checkAktifCalisma+0x15ac>)
 8007f52:	f002 f9a3 	bl	800a29c <HAL_GPIO_ReadPin>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d10c      	bne.n	8007f76 <checkAktifCalisma+0x13a2>
			hataVar=1;
 8007f5c:	4b89      	ldr	r3, [pc, #548]	; (8008184 <checkAktifCalisma+0x15b0>)
 8007f5e:	2201      	movs	r2, #1
 8007f60:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8007f62:	2003      	movs	r0, #3
 8007f64:	f7fd ffce 	bl	8005f04 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8007f68:	2003      	movs	r0, #3
 8007f6a:	f7fe fb81 	bl	8006670 <hata2EEPROM>
			basinchatasi=1;
 8007f6e:	4b86      	ldr	r3, [pc, #536]	; (8008188 <checkAktifCalisma+0x15b4>)
 8007f70:	2201      	movs	r2, #1
 8007f72:	701a      	strb	r2, [r3, #0]
 8007f74:	e015      	b.n	8007fa2 <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8007f76:	4b84      	ldr	r3, [pc, #528]	; (8008188 <checkAktifCalisma+0x15b4>)
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d011      	beq.n	8007fa2 <checkAktifCalisma+0x13ce>
 8007f7e:	4b7d      	ldr	r3, [pc, #500]	; (8008174 <checkAktifCalisma+0x15a0>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d10d      	bne.n	8007fa2 <checkAktifCalisma+0x13ce>
 8007f86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007f8a:	4880      	ldr	r0, [pc, #512]	; (800818c <checkAktifCalisma+0x15b8>)
 8007f8c:	f002 f986 	bl	800a29c <HAL_GPIO_ReadPin>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d105      	bne.n	8007fa2 <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 8007f96:	4b7c      	ldr	r3, [pc, #496]	; (8008188 <checkAktifCalisma+0x15b4>)
 8007f98:	2200      	movs	r2, #0
 8007f9a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8007f9c:	2003      	movs	r0, #3
 8007f9e:	f7fd ff5d 	bl	8005e5c <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007fa2:	4b7b      	ldr	r3, [pc, #492]	; (8008190 <checkAktifCalisma+0x15bc>)
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d103      	bne.n	8007fb2 <checkAktifCalisma+0x13de>
 8007faa:	4b7a      	ldr	r3, [pc, #488]	; (8008194 <checkAktifCalisma+0x15c0>)
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d01c      	beq.n	8007fec <checkAktifCalisma+0x1418>
 8007fb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007fb6:	4878      	ldr	r0, [pc, #480]	; (8008198 <checkAktifCalisma+0x15c4>)
 8007fb8:	f002 f970 	bl	800a29c <HAL_GPIO_ReadPin>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d114      	bne.n	8007fec <checkAktifCalisma+0x1418>
 8007fc2:	4b76      	ldr	r3, [pc, #472]	; (800819c <checkAktifCalisma+0x15c8>)
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d003      	beq.n	8007fd2 <checkAktifCalisma+0x13fe>
 8007fca:	4b74      	ldr	r3, [pc, #464]	; (800819c <checkAktifCalisma+0x15c8>)
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	d10c      	bne.n	8007fec <checkAktifCalisma+0x1418>
			hataVar=1;
 8007fd2:	4b6c      	ldr	r3, [pc, #432]	; (8008184 <checkAktifCalisma+0x15b0>)
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8007fd8:	2004      	movs	r0, #4
 8007fda:	f7fd ff93 	bl	8005f04 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8007fde:	2004      	movs	r0, #4
 8007fe0:	f7fe fb46 	bl	8006670 <hata2EEPROM>
			katkapisivicihatasi=1;
 8007fe4:	4b6e      	ldr	r3, [pc, #440]	; (80081a0 <checkAktifCalisma+0x15cc>)
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	701a      	strb	r2, [r3, #0]
 8007fea:	e01f      	b.n	800802c <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8007fec:	4b6c      	ldr	r3, [pc, #432]	; (80081a0 <checkAktifCalisma+0x15cc>)
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d01b      	beq.n	800802c <checkAktifCalisma+0x1458>
 8007ff4:	4b6b      	ldr	r3, [pc, #428]	; (80081a4 <checkAktifCalisma+0x15d0>)
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d017      	beq.n	800802c <checkAktifCalisma+0x1458>
 8007ffc:	4b64      	ldr	r3, [pc, #400]	; (8008190 <checkAktifCalisma+0x15bc>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	f083 0301 	eor.w	r3, r3, #1
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d010      	beq.n	800802c <checkAktifCalisma+0x1458>
 800800a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800800e:	4862      	ldr	r0, [pc, #392]	; (8008198 <checkAktifCalisma+0x15c4>)
 8008010:	f002 f944 	bl	800a29c <HAL_GPIO_ReadPin>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d108      	bne.n	800802c <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 800801a:	4b61      	ldr	r3, [pc, #388]	; (80081a0 <checkAktifCalisma+0x15cc>)
 800801c:	2200      	movs	r2, #0
 800801e:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8008020:	4b5c      	ldr	r3, [pc, #368]	; (8008194 <checkAktifCalisma+0x15c0>)
 8008022:	2200      	movs	r2, #0
 8008024:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8008026:	2004      	movs	r0, #4
 8008028:	f7fd ff18 	bl	8005e5c <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800802c:	4b58      	ldr	r3, [pc, #352]	; (8008190 <checkAktifCalisma+0x15bc>)
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d103      	bne.n	800803c <checkAktifCalisma+0x1468>
 8008034:	4b5c      	ldr	r3, [pc, #368]	; (80081a8 <checkAktifCalisma+0x15d4>)
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d01c      	beq.n	8008076 <checkAktifCalisma+0x14a2>
 800803c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008040:	4855      	ldr	r0, [pc, #340]	; (8008198 <checkAktifCalisma+0x15c4>)
 8008042:	f002 f92b 	bl	800a29c <HAL_GPIO_ReadPin>
 8008046:	4603      	mov	r3, r0
 8008048:	2b01      	cmp	r3, #1
 800804a:	d114      	bne.n	8008076 <checkAktifCalisma+0x14a2>
 800804c:	4b53      	ldr	r3, [pc, #332]	; (800819c <checkAktifCalisma+0x15c8>)
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	2b01      	cmp	r3, #1
 8008052:	d003      	beq.n	800805c <checkAktifCalisma+0x1488>
 8008054:	4b51      	ldr	r3, [pc, #324]	; (800819c <checkAktifCalisma+0x15c8>)
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b03      	cmp	r3, #3
 800805a:	d10c      	bne.n	8008076 <checkAktifCalisma+0x14a2>
			hataVar=1;
 800805c:	4b49      	ldr	r3, [pc, #292]	; (8008184 <checkAktifCalisma+0x15b0>)
 800805e:	2201      	movs	r2, #1
 8008060:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8008062:	2005      	movs	r0, #5
 8008064:	f7fd ff4e 	bl	8005f04 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8008068:	2005      	movs	r0, #5
 800806a:	f7fe fb01 	bl	8006670 <hata2EEPROM>
			tablakapisivicihatasi=1;
 800806e:	4b4f      	ldr	r3, [pc, #316]	; (80081ac <checkAktifCalisma+0x15d8>)
 8008070:	2201      	movs	r2, #1
 8008072:	701a      	strb	r2, [r3, #0]
 8008074:	e023      	b.n	80080be <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8008076:	4b4d      	ldr	r3, [pc, #308]	; (80081ac <checkAktifCalisma+0x15d8>)
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d01f      	beq.n	80080be <checkAktifCalisma+0x14ea>
 800807e:	4b49      	ldr	r3, [pc, #292]	; (80081a4 <checkAktifCalisma+0x15d0>)
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d01b      	beq.n	80080be <checkAktifCalisma+0x14ea>
 8008086:	4b42      	ldr	r3, [pc, #264]	; (8008190 <checkAktifCalisma+0x15bc>)
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	f083 0301 	eor.w	r3, r3, #1
 800808e:	b2db      	uxtb	r3, r3
 8008090:	2b00      	cmp	r3, #0
 8008092:	d014      	beq.n	80080be <checkAktifCalisma+0x14ea>
 8008094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008098:	483f      	ldr	r0, [pc, #252]	; (8008198 <checkAktifCalisma+0x15c4>)
 800809a:	f002 f8ff 	bl	800a29c <HAL_GPIO_ReadPin>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10c      	bne.n	80080be <checkAktifCalisma+0x14ea>
 80080a4:	4b3f      	ldr	r3, [pc, #252]	; (80081a4 <checkAktifCalisma+0x15d0>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d008      	beq.n	80080be <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 80080ac:	4b3f      	ldr	r3, [pc, #252]	; (80081ac <checkAktifCalisma+0x15d8>)
 80080ae:	2200      	movs	r2, #0
 80080b0:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80080b2:	4b3d      	ldr	r3, [pc, #244]	; (80081a8 <checkAktifCalisma+0x15d4>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80080b8:	2005      	movs	r0, #5
 80080ba:	f7fd fecf 	bl	8005e5c <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80080be:	4b2f      	ldr	r3, [pc, #188]	; (800817c <checkAktifCalisma+0x15a8>)
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d107      	bne.n	80080d6 <checkAktifCalisma+0x1502>
 80080c6:	4b29      	ldr	r3, [pc, #164]	; (800816c <checkAktifCalisma+0x1598>)
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d103      	bne.n	80080d6 <checkAktifCalisma+0x1502>
 80080ce:	4b38      	ldr	r3, [pc, #224]	; (80081b0 <checkAktifCalisma+0x15dc>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d014      	beq.n	8008100 <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 80080d6:	4b37      	ldr	r3, [pc, #220]	; (80081b4 <checkAktifCalisma+0x15e0>)
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	4b37      	ldr	r3, [pc, #220]	; (80081b8 <checkAktifCalisma+0x15e4>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	4a36      	ldr	r2, [pc, #216]	; (80081bc <checkAktifCalisma+0x15e8>)
 80080e2:	7812      	ldrb	r2, [r2, #0]
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d30b      	bcc.n	8008100 <checkAktifCalisma+0x152c>
			  	hataVar=1;
 80080e8:	4b26      	ldr	r3, [pc, #152]	; (8008184 <checkAktifCalisma+0x15b0>)
 80080ea:	2201      	movs	r2, #1
 80080ec:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 80080ee:	2006      	movs	r0, #6
 80080f0:	f7fd ff08 	bl	8005f04 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 80080f4:	2006      	movs	r0, #6
 80080f6:	f7fe fabb 	bl	8006670 <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 80080fa:	4b31      	ldr	r3, [pc, #196]	; (80081c0 <checkAktifCalisma+0x15ec>)
 80080fc:	2201      	movs	r2, #1
 80080fe:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8008100:	4b2f      	ldr	r3, [pc, #188]	; (80081c0 <checkAktifCalisma+0x15ec>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d013      	beq.n	8008130 <checkAktifCalisma+0x155c>
 8008108:	2108      	movs	r1, #8
 800810a:	4823      	ldr	r0, [pc, #140]	; (8008198 <checkAktifCalisma+0x15c4>)
 800810c:	f002 f8c6 	bl	800a29c <HAL_GPIO_ReadPin>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00c      	beq.n	8008130 <checkAktifCalisma+0x155c>
 8008116:	4b1e      	ldr	r3, [pc, #120]	; (8008190 <checkAktifCalisma+0x15bc>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	f083 0301 	eor.w	r3, r3, #1
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	d005      	beq.n	8008130 <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 8008124:	4b26      	ldr	r3, [pc, #152]	; (80081c0 <checkAktifCalisma+0x15ec>)
 8008126:	2200      	movs	r2, #0
 8008128:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 800812a:	2006      	movs	r0, #6
 800812c:	f7fd fe96 	bl	8005e5c <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8008130:	4b24      	ldr	r3, [pc, #144]	; (80081c4 <checkAktifCalisma+0x15f0>)
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d10b      	bne.n	8008150 <checkAktifCalisma+0x157c>
 8008138:	4b0c      	ldr	r3, [pc, #48]	; (800816c <checkAktifCalisma+0x1598>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d107      	bne.n	8008150 <checkAktifCalisma+0x157c>
 8008140:	4b21      	ldr	r3, [pc, #132]	; (80081c8 <checkAktifCalisma+0x15f4>)
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d103      	bne.n	8008150 <checkAktifCalisma+0x157c>
 8008148:	4b19      	ldr	r3, [pc, #100]	; (80081b0 <checkAktifCalisma+0x15dc>)
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d03f      	beq.n	80081d0 <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 8008150:	4b1e      	ldr	r3, [pc, #120]	; (80081cc <checkAktifCalisma+0x15f8>)
 8008152:	2200      	movs	r2, #0
 8008154:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8008156:	4b0f      	ldr	r3, [pc, #60]	; (8008194 <checkAktifCalisma+0x15c0>)
 8008158:	2201      	movs	r2, #1
 800815a:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 800815c:	4b12      	ldr	r3, [pc, #72]	; (80081a8 <checkAktifCalisma+0x15d4>)
 800815e:	2201      	movs	r2, #1
 8008160:	701a      	strb	r2, [r3, #0]
 8008162:	e03c      	b.n	80081de <checkAktifCalisma+0x160a>
 8008164:	20000cee 	.word	0x20000cee
 8008168:	20000cf4 	.word	0x20000cf4
 800816c:	20000cd5 	.word	0x20000cd5
 8008170:	20000cfe 	.word	0x20000cfe
 8008174:	20000ca0 	.word	0x20000ca0
 8008178:	20000ca4 	.word	0x20000ca4
 800817c:	20000cf1 	.word	0x20000cf1
 8008180:	40011000 	.word	0x40011000
 8008184:	20000cf2 	.word	0x20000cf2
 8008188:	20000cfb 	.word	0x20000cfb
 800818c:	40010c00 	.word	0x40010c00
 8008190:	20000ceb 	.word	0x20000ceb
 8008194:	20000cff 	.word	0x20000cff
 8008198:	40010800 	.word	0x40010800
 800819c:	20000ca5 	.word	0x20000ca5
 80081a0:	20000cfc 	.word	0x20000cfc
 80081a4:	20000cdf 	.word	0x20000cdf
 80081a8:	20000d00 	.word	0x20000d00
 80081ac:	20000cfd 	.word	0x20000cfd
 80081b0:	20000cd4 	.word	0x20000cd4
 80081b4:	20000bd4 	.word	0x20000bd4
 80081b8:	20000be8 	.word	0x20000be8
 80081bc:	20000cb5 	.word	0x20000cb5
 80081c0:	20000cec 	.word	0x20000cec
 80081c4:	20000cd2 	.word	0x20000cd2
 80081c8:	20000cd3 	.word	0x20000cd3
 80081cc:	20000cf3 	.word	0x20000cf3
		} else {
			makineCalisiyor=1;
 80081d0:	4b1e      	ldr	r3, [pc, #120]	; (800824c <checkAktifCalisma+0x1678>)
 80081d2:	2201      	movs	r2, #1
 80081d4:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80081d6:	4b1e      	ldr	r3, [pc, #120]	; (8008250 <checkAktifCalisma+0x167c>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a1e      	ldr	r2, [pc, #120]	; (8008254 <checkAktifCalisma+0x1680>)
 80081dc:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80081de:	4b1e      	ldr	r3, [pc, #120]	; (8008258 <checkAktifCalisma+0x1684>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d02f      	beq.n	8008246 <checkAktifCalisma+0x1672>
 80081e6:	4b1d      	ldr	r3, [pc, #116]	; (800825c <checkAktifCalisma+0x1688>)
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	f083 0301 	eor.w	r3, r3, #1
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d028      	beq.n	8008246 <checkAktifCalisma+0x1672>
 80081f4:	4b1a      	ldr	r3, [pc, #104]	; (8008260 <checkAktifCalisma+0x168c>)
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	f083 0301 	eor.w	r3, r3, #1
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d021      	beq.n	8008246 <checkAktifCalisma+0x1672>
 8008202:	4b18      	ldr	r3, [pc, #96]	; (8008264 <checkAktifCalisma+0x1690>)
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	f083 0301 	eor.w	r3, r3, #1
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b00      	cmp	r3, #0
 800820e:	d01a      	beq.n	8008246 <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8008210:	4b15      	ldr	r3, [pc, #84]	; (8008268 <checkAktifCalisma+0x1694>)
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	f083 0301 	eor.w	r3, r3, #1
 8008218:	b2db      	uxtb	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d013      	beq.n	8008246 <checkAktifCalisma+0x1672>
 800821e:	4b13      	ldr	r3, [pc, #76]	; (800826c <checkAktifCalisma+0x1698>)
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	f083 0301 	eor.w	r3, r3, #1
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00c      	beq.n	8008246 <checkAktifCalisma+0x1672>
 800822c:	4b10      	ldr	r3, [pc, #64]	; (8008270 <checkAktifCalisma+0x169c>)
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	f083 0301 	eor.w	r3, r3, #1
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d005      	beq.n	8008246 <checkAktifCalisma+0x1672>
			hataVar=0;
 800823a:	4b07      	ldr	r3, [pc, #28]	; (8008258 <checkAktifCalisma+0x1684>)
 800823c:	2200      	movs	r2, #0
 800823e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8008240:	2007      	movs	r0, #7
 8008242:	f7fd fe0b 	bl	8005e5c <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8008246:	bf00      	nop
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20000cf3 	.word	0x20000cf3
 8008250:	20000bd4 	.word	0x20000bd4
 8008254:	20000be8 	.word	0x20000be8
 8008258:	20000cf2 	.word	0x20000cf2
 800825c:	20000ced 	.word	0x20000ced
 8008260:	20000cee 	.word	0x20000cee
 8008264:	20000cfb 	.word	0x20000cfb
 8008268:	20000cfc 	.word	0x20000cfc
 800826c:	20000cfd 	.word	0x20000cfd
 8008270:	20000cec 	.word	0x20000cec

08008274 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8008274:	b580      	push	{r7, lr}
 8008276:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8008278:	4b8b      	ldr	r3, [pc, #556]	; (80084a8 <checkDemoModCalisma+0x234>)
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	2b01      	cmp	r3, #1
 800827e:	f040 8229 	bne.w	80086d4 <checkDemoModCalisma+0x460>
 8008282:	4b8a      	ldr	r3, [pc, #552]	; (80084ac <checkDemoModCalisma+0x238>)
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 8224 	beq.w	80086d4 <checkDemoModCalisma+0x460>
 800828c:	4b88      	ldr	r3, [pc, #544]	; (80084b0 <checkDemoModCalisma+0x23c>)
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	f040 821f 	bne.w	80086d4 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8008296:	2102      	movs	r1, #2
 8008298:	4886      	ldr	r0, [pc, #536]	; (80084b4 <checkDemoModCalisma+0x240>)
 800829a:	f001 ffff 	bl	800a29c <HAL_GPIO_ReadPin>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d11d      	bne.n	80082e0 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 80082a4:	4b84      	ldr	r3, [pc, #528]	; (80084b8 <checkDemoModCalisma+0x244>)
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	f083 0301 	eor.w	r3, r3, #1
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d016      	beq.n	80082e0 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 80082b2:	4b82      	ldr	r3, [pc, #520]	; (80084bc <checkDemoModCalisma+0x248>)
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	f083 0301 	eor.w	r3, r3, #1
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d00f      	beq.n	80082e0 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 80082c0:	4b7f      	ldr	r3, [pc, #508]	; (80084c0 <checkDemoModCalisma+0x24c>)
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	f083 0301 	eor.w	r3, r3, #1
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d008      	beq.n	80082e0 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80082ce:	2201      	movs	r2, #1
 80082d0:	2104      	movs	r1, #4
 80082d2:	487c      	ldr	r0, [pc, #496]	; (80084c4 <checkDemoModCalisma+0x250>)
 80082d4:	f001 fff9 	bl	800a2ca <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 80082d8:	4b7b      	ldr	r3, [pc, #492]	; (80084c8 <checkDemoModCalisma+0x254>)
 80082da:	2201      	movs	r2, #1
 80082dc:	701a      	strb	r2, [r3, #0]
 80082de:	e00e      	b.n	80082fe <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80082e0:	2102      	movs	r1, #2
 80082e2:	4874      	ldr	r0, [pc, #464]	; (80084b4 <checkDemoModCalisma+0x240>)
 80082e4:	f001 ffda 	bl	800a29c <HAL_GPIO_ReadPin>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d107      	bne.n	80082fe <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80082ee:	2200      	movs	r2, #0
 80082f0:	2104      	movs	r1, #4
 80082f2:	4874      	ldr	r0, [pc, #464]	; (80084c4 <checkDemoModCalisma+0x250>)
 80082f4:	f001 ffe9 	bl	800a2ca <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 80082f8:	4b73      	ldr	r3, [pc, #460]	; (80084c8 <checkDemoModCalisma+0x254>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 80082fe:	4b72      	ldr	r3, [pc, #456]	; (80084c8 <checkDemoModCalisma+0x254>)
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d10b      	bne.n	800831e <checkDemoModCalisma+0xaa>
 8008306:	4b6d      	ldr	r3, [pc, #436]	; (80084bc <checkDemoModCalisma+0x248>)
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d107      	bne.n	800831e <checkDemoModCalisma+0xaa>
 800830e:	4b6c      	ldr	r3, [pc, #432]	; (80084c0 <checkDemoModCalisma+0x24c>)
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d103      	bne.n	800831e <checkDemoModCalisma+0xaa>
 8008316:	4b68      	ldr	r3, [pc, #416]	; (80084b8 <checkDemoModCalisma+0x244>)
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00c      	beq.n	8008338 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800831e:	2201      	movs	r2, #1
 8008320:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008324:	4867      	ldr	r0, [pc, #412]	; (80084c4 <checkDemoModCalisma+0x250>)
 8008326:	f001 ffd0 	bl	800a2ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800832a:	2201      	movs	r2, #1
 800832c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008330:	4864      	ldr	r0, [pc, #400]	; (80084c4 <checkDemoModCalisma+0x250>)
 8008332:	f001 ffca 	bl	800a2ca <HAL_GPIO_WritePin>
 8008336:	e00b      	b.n	8008350 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008338:	2200      	movs	r2, #0
 800833a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800833e:	4861      	ldr	r0, [pc, #388]	; (80084c4 <checkDemoModCalisma+0x250>)
 8008340:	f001 ffc3 	bl	800a2ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008344:	2200      	movs	r2, #0
 8008346:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800834a:	485e      	ldr	r0, [pc, #376]	; (80084c4 <checkDemoModCalisma+0x250>)
 800834c:	f001 ffbd 	bl	800a2ca <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8008350:	2102      	movs	r1, #2
 8008352:	4858      	ldr	r0, [pc, #352]	; (80084b4 <checkDemoModCalisma+0x240>)
 8008354:	f001 ffa2 	bl	800a29c <HAL_GPIO_ReadPin>
 8008358:	4603      	mov	r3, r0
 800835a:	2b01      	cmp	r3, #1
 800835c:	d10d      	bne.n	800837a <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800835e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008362:	4854      	ldr	r0, [pc, #336]	; (80084b4 <checkDemoModCalisma+0x240>)
 8008364:	f001 ff9a 	bl	800a29c <HAL_GPIO_ReadPin>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d105      	bne.n	800837a <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 800836e:	4b56      	ldr	r3, [pc, #344]	; (80084c8 <checkDemoModCalisma+0x254>)
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	f083 0301 	eor.w	r3, r3, #1
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800837a:	2102      	movs	r1, #2
 800837c:	484d      	ldr	r0, [pc, #308]	; (80084b4 <checkDemoModCalisma+0x240>)
 800837e:	f001 ff8d 	bl	800a29c <HAL_GPIO_ReadPin>
 8008382:	4603      	mov	r3, r0
 8008384:	2b01      	cmp	r3, #1
 8008386:	d125      	bne.n	80083d4 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8008388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800838c:	4849      	ldr	r0, [pc, #292]	; (80084b4 <checkDemoModCalisma+0x240>)
 800838e:	f001 ff85 	bl	800a29c <HAL_GPIO_ReadPin>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d11d      	bne.n	80083d4 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8008398:	4b4b      	ldr	r3, [pc, #300]	; (80084c8 <checkDemoModCalisma+0x254>)
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	f083 0301 	eor.w	r3, r3, #1
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d016      	beq.n	80083d4 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 80083a6:	4b44      	ldr	r3, [pc, #272]	; (80084b8 <checkDemoModCalisma+0x244>)
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	f083 0301 	eor.w	r3, r3, #1
 80083ae:	b2db      	uxtb	r3, r3
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d00f      	beq.n	80083d4 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80083b4:	4b42      	ldr	r3, [pc, #264]	; (80084c0 <checkDemoModCalisma+0x24c>)
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	f083 0301 	eor.w	r3, r3, #1
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d008      	beq.n	80083d4 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80083c2:	2201      	movs	r2, #1
 80083c4:	2120      	movs	r1, #32
 80083c6:	483b      	ldr	r0, [pc, #236]	; (80084b4 <checkDemoModCalisma+0x240>)
 80083c8:	f001 ff7f 	bl	800a2ca <HAL_GPIO_WritePin>
			demoDevYukari=1;
 80083cc:	4b3b      	ldr	r3, [pc, #236]	; (80084bc <checkDemoModCalisma+0x248>)
 80083ce:	2201      	movs	r2, #1
 80083d0:	701a      	strb	r2, [r3, #0]
 80083d2:	e007      	b.n	80083e4 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80083d4:	2200      	movs	r2, #0
 80083d6:	2120      	movs	r1, #32
 80083d8:	4836      	ldr	r0, [pc, #216]	; (80084b4 <checkDemoModCalisma+0x240>)
 80083da:	f001 ff76 	bl	800a2ca <HAL_GPIO_WritePin>
			demoDevYukari=0;
 80083de:	4b37      	ldr	r3, [pc, #220]	; (80084bc <checkDemoModCalisma+0x248>)
 80083e0:	2200      	movs	r2, #0
 80083e2:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80083e4:	2102      	movs	r1, #2
 80083e6:	4833      	ldr	r0, [pc, #204]	; (80084b4 <checkDemoModCalisma+0x240>)
 80083e8:	f001 ff58 	bl	800a29c <HAL_GPIO_ReadPin>
 80083ec:	4603      	mov	r3, r0
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d125      	bne.n	800843e <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80083f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80083f6:	482f      	ldr	r0, [pc, #188]	; (80084b4 <checkDemoModCalisma+0x240>)
 80083f8:	f001 ff50 	bl	800a29c <HAL_GPIO_ReadPin>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d11d      	bne.n	800843e <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8008402:	4b31      	ldr	r3, [pc, #196]	; (80084c8 <checkDemoModCalisma+0x254>)
 8008404:	781b      	ldrb	r3, [r3, #0]
 8008406:	f083 0301 	eor.w	r3, r3, #1
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b00      	cmp	r3, #0
 800840e:	d016      	beq.n	800843e <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8008410:	4b2a      	ldr	r3, [pc, #168]	; (80084bc <checkDemoModCalisma+0x248>)
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	f083 0301 	eor.w	r3, r3, #1
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d00f      	beq.n	800843e <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 800841e:	4b26      	ldr	r3, [pc, #152]	; (80084b8 <checkDemoModCalisma+0x244>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	f083 0301 	eor.w	r3, r3, #1
 8008426:	b2db      	uxtb	r3, r3
 8008428:	2b00      	cmp	r3, #0
 800842a:	d008      	beq.n	800843e <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 800842c:	2201      	movs	r2, #1
 800842e:	2110      	movs	r1, #16
 8008430:	4820      	ldr	r0, [pc, #128]	; (80084b4 <checkDemoModCalisma+0x240>)
 8008432:	f001 ff4a 	bl	800a2ca <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8008436:	4b22      	ldr	r3, [pc, #136]	; (80084c0 <checkDemoModCalisma+0x24c>)
 8008438:	2201      	movs	r2, #1
 800843a:	701a      	strb	r2, [r3, #0]
 800843c:	e007      	b.n	800844e <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800843e:	2200      	movs	r2, #0
 8008440:	2110      	movs	r1, #16
 8008442:	481c      	ldr	r0, [pc, #112]	; (80084b4 <checkDemoModCalisma+0x240>)
 8008444:	f001 ff41 	bl	800a2ca <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8008448:	4b1d      	ldr	r3, [pc, #116]	; (80084c0 <checkDemoModCalisma+0x24c>)
 800844a:	2200      	movs	r2, #0
 800844c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800844e:	2104      	movs	r1, #4
 8008450:	4818      	ldr	r0, [pc, #96]	; (80084b4 <checkDemoModCalisma+0x240>)
 8008452:	f001 ff23 	bl	800a29c <HAL_GPIO_ReadPin>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d139      	bne.n	80084d0 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 800845c:	4b1a      	ldr	r3, [pc, #104]	; (80084c8 <checkDemoModCalisma+0x254>)
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	f083 0301 	eor.w	r3, r3, #1
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d032      	beq.n	80084d0 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 800846a:	4b15      	ldr	r3, [pc, #84]	; (80084c0 <checkDemoModCalisma+0x24c>)
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	f083 0301 	eor.w	r3, r3, #1
 8008472:	b2db      	uxtb	r3, r3
 8008474:	2b00      	cmp	r3, #0
 8008476:	d02b      	beq.n	80084d0 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8008478:	4b10      	ldr	r3, [pc, #64]	; (80084bc <checkDemoModCalisma+0x248>)
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	f083 0301 	eor.w	r3, r3, #1
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b00      	cmp	r3, #0
 8008484:	d024      	beq.n	80084d0 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8008486:	2201      	movs	r2, #1
 8008488:	2102      	movs	r1, #2
 800848a:	480e      	ldr	r0, [pc, #56]	; (80084c4 <checkDemoModCalisma+0x250>)
 800848c:	f001 ff1d 	bl	800a2ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8008490:	2201      	movs	r2, #1
 8008492:	2101      	movs	r1, #1
 8008494:	480b      	ldr	r0, [pc, #44]	; (80084c4 <checkDemoModCalisma+0x250>)
 8008496:	f001 ff18 	bl	800a2ca <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 800849a:	4b07      	ldr	r3, [pc, #28]	; (80084b8 <checkDemoModCalisma+0x244>)
 800849c:	2201      	movs	r2, #1
 800849e:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 80084a0:	4b0a      	ldr	r3, [pc, #40]	; (80084cc <checkDemoModCalisma+0x258>)
 80084a2:	2201      	movs	r2, #1
 80084a4:	701a      	strb	r2, [r3, #0]
 80084a6:	e027      	b.n	80084f8 <checkDemoModCalisma+0x284>
 80084a8:	20000cbb 	.word	0x20000cbb
 80084ac:	20000cef 	.word	0x20000cef
 80084b0:	20000cba 	.word	0x20000cba
 80084b4:	40011000 	.word	0x40011000
 80084b8:	20000cf6 	.word	0x20000cf6
 80084bc:	20000cf7 	.word	0x20000cf7
 80084c0:	20000cf8 	.word	0x20000cf8
 80084c4:	40010c00 	.word	0x40010c00
 80084c8:	20000cf5 	.word	0x20000cf5
 80084cc:	20000cdb 	.word	0x20000cdb
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80084d0:	2104      	movs	r1, #4
 80084d2:	48a0      	ldr	r0, [pc, #640]	; (8008754 <checkDemoModCalisma+0x4e0>)
 80084d4:	f001 fee2 	bl	800a29c <HAL_GPIO_ReadPin>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d10c      	bne.n	80084f8 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80084de:	2200      	movs	r2, #0
 80084e0:	2102      	movs	r1, #2
 80084e2:	489d      	ldr	r0, [pc, #628]	; (8008758 <checkDemoModCalisma+0x4e4>)
 80084e4:	f001 fef1 	bl	800a2ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80084e8:	2200      	movs	r2, #0
 80084ea:	2101      	movs	r1, #1
 80084ec:	489a      	ldr	r0, [pc, #616]	; (8008758 <checkDemoModCalisma+0x4e4>)
 80084ee:	f001 feec 	bl	800a2ca <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 80084f2:	4b9a      	ldr	r3, [pc, #616]	; (800875c <checkDemoModCalisma+0x4e8>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 80084f8:	2104      	movs	r1, #4
 80084fa:	4896      	ldr	r0, [pc, #600]	; (8008754 <checkDemoModCalisma+0x4e0>)
 80084fc:	f001 fece 	bl	800a29c <HAL_GPIO_ReadPin>
 8008500:	4603      	mov	r3, r0
 8008502:	2b01      	cmp	r3, #1
 8008504:	d10d      	bne.n	8008522 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8008506:	2201      	movs	r2, #1
 8008508:	2180      	movs	r1, #128	; 0x80
 800850a:	4895      	ldr	r0, [pc, #596]	; (8008760 <checkDemoModCalisma+0x4ec>)
 800850c:	f001 fedd 	bl	800a2ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8008510:	2201      	movs	r2, #1
 8008512:	2120      	movs	r1, #32
 8008514:	4892      	ldr	r0, [pc, #584]	; (8008760 <checkDemoModCalisma+0x4ec>)
 8008516:	f001 fed8 	bl	800a2ca <HAL_GPIO_WritePin>
			timer3 = millis;
 800851a:	4b92      	ldr	r3, [pc, #584]	; (8008764 <checkDemoModCalisma+0x4f0>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a92      	ldr	r2, [pc, #584]	; (8008768 <checkDemoModCalisma+0x4f4>)
 8008520:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8008522:	4b90      	ldr	r3, [pc, #576]	; (8008764 <checkDemoModCalisma+0x4f0>)
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	4b90      	ldr	r3, [pc, #576]	; (8008768 <checkDemoModCalisma+0x4f4>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	2b04      	cmp	r3, #4
 800852e:	d909      	bls.n	8008544 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008530:	2200      	movs	r2, #0
 8008532:	2180      	movs	r1, #128	; 0x80
 8008534:	488a      	ldr	r0, [pc, #552]	; (8008760 <checkDemoModCalisma+0x4ec>)
 8008536:	f001 fec8 	bl	800a2ca <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800853a:	2200      	movs	r2, #0
 800853c:	2120      	movs	r1, #32
 800853e:	4888      	ldr	r0, [pc, #544]	; (8008760 <checkDemoModCalisma+0x4ec>)
 8008540:	f001 fec3 	bl	800a2ca <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8008544:	2102      	movs	r1, #2
 8008546:	4883      	ldr	r0, [pc, #524]	; (8008754 <checkDemoModCalisma+0x4e0>)
 8008548:	f001 fea8 	bl	800a29c <HAL_GPIO_ReadPin>
 800854c:	4603      	mov	r3, r0
 800854e:	2b01      	cmp	r3, #1
 8008550:	d108      	bne.n	8008564 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8008552:	2201      	movs	r2, #1
 8008554:	2140      	movs	r1, #64	; 0x40
 8008556:	4882      	ldr	r0, [pc, #520]	; (8008760 <checkDemoModCalisma+0x4ec>)
 8008558:	f001 feb7 	bl	800a2ca <HAL_GPIO_WritePin>
			timer3 = millis;
 800855c:	4b81      	ldr	r3, [pc, #516]	; (8008764 <checkDemoModCalisma+0x4f0>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a81      	ldr	r2, [pc, #516]	; (8008768 <checkDemoModCalisma+0x4f4>)
 8008562:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8008564:	4b7f      	ldr	r3, [pc, #508]	; (8008764 <checkDemoModCalisma+0x4f0>)
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	4b7f      	ldr	r3, [pc, #508]	; (8008768 <checkDemoModCalisma+0x4f4>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	2b04      	cmp	r3, #4
 8008570:	d904      	bls.n	800857c <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008572:	2200      	movs	r2, #0
 8008574:	2140      	movs	r1, #64	; 0x40
 8008576:	487a      	ldr	r0, [pc, #488]	; (8008760 <checkDemoModCalisma+0x4ec>)
 8008578:	f001 fea7 	bl	800a2ca <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 800857c:	4b7b      	ldr	r3, [pc, #492]	; (800876c <checkDemoModCalisma+0x4f8>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d058      	beq.n	8008636 <checkDemoModCalisma+0x3c2>
 8008584:	4b7a      	ldr	r3, [pc, #488]	; (8008770 <checkDemoModCalisma+0x4fc>)
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d054      	beq.n	8008636 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 800858c:	4b79      	ldr	r3, [pc, #484]	; (8008774 <checkDemoModCalisma+0x500>)
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	3301      	adds	r3, #1
 8008592:	b2da      	uxtb	r2, r3
 8008594:	4b77      	ldr	r3, [pc, #476]	; (8008774 <checkDemoModCalisma+0x500>)
 8008596:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8008598:	4b76      	ldr	r3, [pc, #472]	; (8008774 <checkDemoModCalisma+0x500>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	2b09      	cmp	r3, #9
 800859e:	d908      	bls.n	80085b2 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 80085a0:	4b74      	ldr	r3, [pc, #464]	; (8008774 <checkDemoModCalisma+0x500>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 80085a6:	4b74      	ldr	r3, [pc, #464]	; (8008778 <checkDemoModCalisma+0x504>)
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	3301      	adds	r3, #1
 80085ac:	b2da      	uxtb	r2, r3
 80085ae:	4b72      	ldr	r3, [pc, #456]	; (8008778 <checkDemoModCalisma+0x504>)
 80085b0:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 80085b2:	4b71      	ldr	r3, [pc, #452]	; (8008778 <checkDemoModCalisma+0x504>)
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	2b09      	cmp	r3, #9
 80085b8:	d908      	bls.n	80085cc <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80085ba:	4b6f      	ldr	r3, [pc, #444]	; (8008778 <checkDemoModCalisma+0x504>)
 80085bc:	2200      	movs	r2, #0
 80085be:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80085c0:	4b6e      	ldr	r3, [pc, #440]	; (800877c <checkDemoModCalisma+0x508>)
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	3301      	adds	r3, #1
 80085c6:	b2da      	uxtb	r2, r3
 80085c8:	4b6c      	ldr	r3, [pc, #432]	; (800877c <checkDemoModCalisma+0x508>)
 80085ca:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 80085cc:	4b6b      	ldr	r3, [pc, #428]	; (800877c <checkDemoModCalisma+0x508>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	2b09      	cmp	r3, #9
 80085d2:	d908      	bls.n	80085e6 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 80085d4:	4b69      	ldr	r3, [pc, #420]	; (800877c <checkDemoModCalisma+0x508>)
 80085d6:	2200      	movs	r2, #0
 80085d8:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 80085da:	4b69      	ldr	r3, [pc, #420]	; (8008780 <checkDemoModCalisma+0x50c>)
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	3301      	adds	r3, #1
 80085e0:	b2da      	uxtb	r2, r3
 80085e2:	4b67      	ldr	r3, [pc, #412]	; (8008780 <checkDemoModCalisma+0x50c>)
 80085e4:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 80085e6:	4b66      	ldr	r3, [pc, #408]	; (8008780 <checkDemoModCalisma+0x50c>)
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	2b09      	cmp	r3, #9
 80085ec:	d908      	bls.n	8008600 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 80085ee:	4b64      	ldr	r3, [pc, #400]	; (8008780 <checkDemoModCalisma+0x50c>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 80085f4:	4b63      	ldr	r3, [pc, #396]	; (8008784 <checkDemoModCalisma+0x510>)
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	3301      	adds	r3, #1
 80085fa:	b2da      	uxtb	r2, r3
 80085fc:	4b61      	ldr	r3, [pc, #388]	; (8008784 <checkDemoModCalisma+0x510>)
 80085fe:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8008600:	4b60      	ldr	r3, [pc, #384]	; (8008784 <checkDemoModCalisma+0x510>)
 8008602:	781a      	ldrb	r2, [r3, #0]
 8008604:	4b60      	ldr	r3, [pc, #384]	; (8008788 <checkDemoModCalisma+0x514>)
 8008606:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800860a:	4b5d      	ldr	r3, [pc, #372]	; (8008780 <checkDemoModCalisma+0x50c>)
 800860c:	781a      	ldrb	r2, [r3, #0]
 800860e:	4b5e      	ldr	r3, [pc, #376]	; (8008788 <checkDemoModCalisma+0x514>)
 8008610:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8008612:	4b5a      	ldr	r3, [pc, #360]	; (800877c <checkDemoModCalisma+0x508>)
 8008614:	781a      	ldrb	r2, [r3, #0]
 8008616:	4b5c      	ldr	r3, [pc, #368]	; (8008788 <checkDemoModCalisma+0x514>)
 8008618:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800861a:	4b57      	ldr	r3, [pc, #348]	; (8008778 <checkDemoModCalisma+0x504>)
 800861c:	781a      	ldrb	r2, [r3, #0]
 800861e:	4b5a      	ldr	r3, [pc, #360]	; (8008788 <checkDemoModCalisma+0x514>)
 8008620:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8008622:	4b54      	ldr	r3, [pc, #336]	; (8008774 <checkDemoModCalisma+0x500>)
 8008624:	781a      	ldrb	r2, [r3, #0]
 8008626:	4b58      	ldr	r3, [pc, #352]	; (8008788 <checkDemoModCalisma+0x514>)
 8008628:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 800862a:	4b58      	ldr	r3, [pc, #352]	; (800878c <checkDemoModCalisma+0x518>)
 800862c:	2201      	movs	r2, #1
 800862e:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8008630:	4b4f      	ldr	r3, [pc, #316]	; (8008770 <checkDemoModCalisma+0x4fc>)
 8008632:	2200      	movs	r2, #0
 8008634:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8008636:	4b56      	ldr	r3, [pc, #344]	; (8008790 <checkDemoModCalisma+0x51c>)
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	2b00      	cmp	r3, #0
 800863c:	f040 8087 	bne.w	800874e <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8008640:	4a54      	ldr	r2, [pc, #336]	; (8008794 <checkDemoModCalisma+0x520>)
 8008642:	2101      	movs	r1, #1
 8008644:	2002      	movs	r0, #2
 8008646:	f7f8 f9b5 	bl	80009b4 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 800864a:	4a53      	ldr	r2, [pc, #332]	; (8008798 <checkDemoModCalisma+0x524>)
 800864c:	2101      	movs	r1, #1
 800864e:	2001      	movs	r0, #1
 8008650:	f7f8 f9b0 	bl	80009b4 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8008654:	4b4b      	ldr	r3, [pc, #300]	; (8008784 <checkDemoModCalisma+0x510>)
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	220a      	movs	r2, #10
 800865a:	4950      	ldr	r1, [pc, #320]	; (800879c <checkDemoModCalisma+0x528>)
 800865c:	4618      	mov	r0, r3
 800865e:	f004 fea5 	bl	800d3ac <itoa>
			lcd_print(2,12,snum);
 8008662:	4a4e      	ldr	r2, [pc, #312]	; (800879c <checkDemoModCalisma+0x528>)
 8008664:	210c      	movs	r1, #12
 8008666:	2002      	movs	r0, #2
 8008668:	f7f8 f9a4 	bl	80009b4 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 800866c:	4b44      	ldr	r3, [pc, #272]	; (8008780 <checkDemoModCalisma+0x50c>)
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	220a      	movs	r2, #10
 8008672:	494a      	ldr	r1, [pc, #296]	; (800879c <checkDemoModCalisma+0x528>)
 8008674:	4618      	mov	r0, r3
 8008676:	f004 fe99 	bl	800d3ac <itoa>
			lcd_print(2,13,snum);
 800867a:	4a48      	ldr	r2, [pc, #288]	; (800879c <checkDemoModCalisma+0x528>)
 800867c:	210d      	movs	r1, #13
 800867e:	2002      	movs	r0, #2
 8008680:	f7f8 f998 	bl	80009b4 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8008684:	4b3d      	ldr	r3, [pc, #244]	; (800877c <checkDemoModCalisma+0x508>)
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	220a      	movs	r2, #10
 800868a:	4944      	ldr	r1, [pc, #272]	; (800879c <checkDemoModCalisma+0x528>)
 800868c:	4618      	mov	r0, r3
 800868e:	f004 fe8d 	bl	800d3ac <itoa>
			lcd_print(2,14,snum);
 8008692:	4a42      	ldr	r2, [pc, #264]	; (800879c <checkDemoModCalisma+0x528>)
 8008694:	210e      	movs	r1, #14
 8008696:	2002      	movs	r0, #2
 8008698:	f7f8 f98c 	bl	80009b4 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 800869c:	4b36      	ldr	r3, [pc, #216]	; (8008778 <checkDemoModCalisma+0x504>)
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	220a      	movs	r2, #10
 80086a2:	493e      	ldr	r1, [pc, #248]	; (800879c <checkDemoModCalisma+0x528>)
 80086a4:	4618      	mov	r0, r3
 80086a6:	f004 fe81 	bl	800d3ac <itoa>
			lcd_print(2,15,snum);
 80086aa:	4a3c      	ldr	r2, [pc, #240]	; (800879c <checkDemoModCalisma+0x528>)
 80086ac:	210f      	movs	r1, #15
 80086ae:	2002      	movs	r0, #2
 80086b0:	f7f8 f980 	bl	80009b4 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 80086b4:	4b2f      	ldr	r3, [pc, #188]	; (8008774 <checkDemoModCalisma+0x500>)
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	220a      	movs	r2, #10
 80086ba:	4938      	ldr	r1, [pc, #224]	; (800879c <checkDemoModCalisma+0x528>)
 80086bc:	4618      	mov	r0, r3
 80086be:	f004 fe75 	bl	800d3ac <itoa>
			lcd_print(2,16,snum);
 80086c2:	4a36      	ldr	r2, [pc, #216]	; (800879c <checkDemoModCalisma+0x528>)
 80086c4:	2110      	movs	r1, #16
 80086c6:	2002      	movs	r0, #2
 80086c8:	f7f8 f974 	bl	80009b4 <lcd_print>
			mesajYazildi=1;
 80086cc:	4b34      	ldr	r3, [pc, #208]	; (80087a0 <checkDemoModCalisma+0x52c>)
 80086ce:	2201      	movs	r2, #1
 80086d0:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 80086d2:	e03c      	b.n	800874e <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 80086d4:	4b33      	ldr	r3, [pc, #204]	; (80087a4 <checkDemoModCalisma+0x530>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d003      	beq.n	80086e4 <checkDemoModCalisma+0x470>
 80086dc:	4b2c      	ldr	r3, [pc, #176]	; (8008790 <checkDemoModCalisma+0x51c>)
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d134      	bne.n	800874e <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80086e4:	2200      	movs	r2, #0
 80086e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80086ea:	481b      	ldr	r0, [pc, #108]	; (8008758 <checkDemoModCalisma+0x4e4>)
 80086ec:	f001 fded 	bl	800a2ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80086f0:	2200      	movs	r2, #0
 80086f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80086f6:	4818      	ldr	r0, [pc, #96]	; (8008758 <checkDemoModCalisma+0x4e4>)
 80086f8:	f001 fde7 	bl	800a2ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80086fc:	2200      	movs	r2, #0
 80086fe:	2104      	movs	r1, #4
 8008700:	4815      	ldr	r0, [pc, #84]	; (8008758 <checkDemoModCalisma+0x4e4>)
 8008702:	f001 fde2 	bl	800a2ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008706:	2200      	movs	r2, #0
 8008708:	2102      	movs	r1, #2
 800870a:	4813      	ldr	r0, [pc, #76]	; (8008758 <checkDemoModCalisma+0x4e4>)
 800870c:	f001 fddd 	bl	800a2ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008710:	2200      	movs	r2, #0
 8008712:	2101      	movs	r1, #1
 8008714:	4810      	ldr	r0, [pc, #64]	; (8008758 <checkDemoModCalisma+0x4e4>)
 8008716:	f001 fdd8 	bl	800a2ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800871a:	2200      	movs	r2, #0
 800871c:	2120      	movs	r1, #32
 800871e:	480d      	ldr	r0, [pc, #52]	; (8008754 <checkDemoModCalisma+0x4e0>)
 8008720:	f001 fdd3 	bl	800a2ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008724:	2200      	movs	r2, #0
 8008726:	2110      	movs	r1, #16
 8008728:	480a      	ldr	r0, [pc, #40]	; (8008754 <checkDemoModCalisma+0x4e0>)
 800872a:	f001 fdce 	bl	800a2ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800872e:	2200      	movs	r2, #0
 8008730:	2180      	movs	r1, #128	; 0x80
 8008732:	480b      	ldr	r0, [pc, #44]	; (8008760 <checkDemoModCalisma+0x4ec>)
 8008734:	f001 fdc9 	bl	800a2ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008738:	2200      	movs	r2, #0
 800873a:	2140      	movs	r1, #64	; 0x40
 800873c:	4808      	ldr	r0, [pc, #32]	; (8008760 <checkDemoModCalisma+0x4ec>)
 800873e:	f001 fdc4 	bl	800a2ca <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008742:	2200      	movs	r2, #0
 8008744:	2120      	movs	r1, #32
 8008746:	4806      	ldr	r0, [pc, #24]	; (8008760 <checkDemoModCalisma+0x4ec>)
 8008748:	f001 fdbf 	bl	800a2ca <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 800874c:	e7ff      	b.n	800874e <checkDemoModCalisma+0x4da>
 800874e:	bf00      	nop
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	40011000 	.word	0x40011000
 8008758:	40010c00 	.word	0x40010c00
 800875c:	20000cf6 	.word	0x20000cf6
 8008760:	40010800 	.word	0x40010800
 8008764:	20000bd4 	.word	0x20000bd4
 8008768:	20000be4 	.word	0x20000be4
 800876c:	20000cf5 	.word	0x20000cf5
 8008770:	20000cdb 	.word	0x20000cdb
 8008774:	20000c9a 	.word	0x20000c9a
 8008778:	20000c9b 	.word	0x20000c9b
 800877c:	200009c2 	.word	0x200009c2
 8008780:	200009c3 	.word	0x200009c3
 8008784:	20000c9c 	.word	0x20000c9c
 8008788:	20000b38 	.word	0x20000b38
 800878c:	20000cc9 	.word	0x20000cc9
 8008790:	20000cba 	.word	0x20000cba
 8008794:	0800ec10 	.word	0x0800ec10
 8008798:	0800ec1c 	.word	0x0800ec1c
 800879c:	20000bcc 	.word	0x20000bcc
 80087a0:	20000cd1 	.word	0x20000cd1
 80087a4:	20000cbb 	.word	0x20000cbb

080087a8 <mergeData>:

char* mergeData() {
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b09e      	sub	sp, #120	; 0x78
 80087ac:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 80087ae:	2300      	movs	r3, #0
 80087b0:	643b      	str	r3, [r7, #64]	; 0x40
 80087b2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80087b6:	2229      	movs	r2, #41	; 0x29
 80087b8:	2100      	movs	r1, #0
 80087ba:	4618      	mov	r0, r3
 80087bc:	f004 ff0e 	bl	800d5dc <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80087c0:	4b6a      	ldr	r3, [pc, #424]	; (800896c <mergeData+0x1c4>)
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	713b      	strb	r3, [r7, #4]
 80087c6:	4b6a      	ldr	r3, [pc, #424]	; (8008970 <mergeData+0x1c8>)
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	717b      	strb	r3, [r7, #5]
 80087cc:	4b69      	ldr	r3, [pc, #420]	; (8008974 <mergeData+0x1cc>)
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	71bb      	strb	r3, [r7, #6]
 80087d2:	4b69      	ldr	r3, [pc, #420]	; (8008978 <mergeData+0x1d0>)
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	71fb      	strb	r3, [r7, #7]
 80087d8:	4b68      	ldr	r3, [pc, #416]	; (800897c <mergeData+0x1d4>)
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	723b      	strb	r3, [r7, #8]
 80087de:	4b68      	ldr	r3, [pc, #416]	; (8008980 <mergeData+0x1d8>)
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	727b      	strb	r3, [r7, #9]
 80087e4:	4b67      	ldr	r3, [pc, #412]	; (8008984 <mergeData+0x1dc>)
 80087e6:	781b      	ldrb	r3, [r3, #0]
 80087e8:	72bb      	strb	r3, [r7, #10]
 80087ea:	4b67      	ldr	r3, [pc, #412]	; (8008988 <mergeData+0x1e0>)
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	72fb      	strb	r3, [r7, #11]
 80087f0:	4b66      	ldr	r3, [pc, #408]	; (800898c <mergeData+0x1e4>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	733b      	strb	r3, [r7, #12]
 80087f6:	4b66      	ldr	r3, [pc, #408]	; (8008990 <mergeData+0x1e8>)
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	737b      	strb	r3, [r7, #13]
 80087fc:	4b65      	ldr	r3, [pc, #404]	; (8008994 <mergeData+0x1ec>)
 80087fe:	781b      	ldrb	r3, [r3, #0]
 8008800:	73bb      	strb	r3, [r7, #14]
 8008802:	4b65      	ldr	r3, [pc, #404]	; (8008998 <mergeData+0x1f0>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	73fb      	strb	r3, [r7, #15]
 8008808:	4b64      	ldr	r3, [pc, #400]	; (800899c <mergeData+0x1f4>)
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	743b      	strb	r3, [r7, #16]
 800880e:	4b64      	ldr	r3, [pc, #400]	; (80089a0 <mergeData+0x1f8>)
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	747b      	strb	r3, [r7, #17]
 8008814:	4b63      	ldr	r3, [pc, #396]	; (80089a4 <mergeData+0x1fc>)
 8008816:	781b      	ldrb	r3, [r3, #0]
 8008818:	74bb      	strb	r3, [r7, #18]
 800881a:	4b63      	ldr	r3, [pc, #396]	; (80089a8 <mergeData+0x200>)
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	74fb      	strb	r3, [r7, #19]
 8008820:	4b62      	ldr	r3, [pc, #392]	; (80089ac <mergeData+0x204>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	753b      	strb	r3, [r7, #20]
 8008826:	4b62      	ldr	r3, [pc, #392]	; (80089b0 <mergeData+0x208>)
 8008828:	781b      	ldrb	r3, [r3, #0]
 800882a:	757b      	strb	r3, [r7, #21]
 800882c:	4b61      	ldr	r3, [pc, #388]	; (80089b4 <mergeData+0x20c>)
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	75bb      	strb	r3, [r7, #22]
 8008832:	4b61      	ldr	r3, [pc, #388]	; (80089b8 <mergeData+0x210>)
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	75fb      	strb	r3, [r7, #23]
 8008838:	4b60      	ldr	r3, [pc, #384]	; (80089bc <mergeData+0x214>)
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	763b      	strb	r3, [r7, #24]
 800883e:	4b60      	ldr	r3, [pc, #384]	; (80089c0 <mergeData+0x218>)
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	767b      	strb	r3, [r7, #25]
 8008844:	4b5f      	ldr	r3, [pc, #380]	; (80089c4 <mergeData+0x21c>)
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	76bb      	strb	r3, [r7, #26]
 800884a:	4b5f      	ldr	r3, [pc, #380]	; (80089c8 <mergeData+0x220>)
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	76fb      	strb	r3, [r7, #27]
 8008850:	4b5e      	ldr	r3, [pc, #376]	; (80089cc <mergeData+0x224>)
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	773b      	strb	r3, [r7, #28]
 8008856:	4b5e      	ldr	r3, [pc, #376]	; (80089d0 <mergeData+0x228>)
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	777b      	strb	r3, [r7, #29]
 800885c:	4b5d      	ldr	r3, [pc, #372]	; (80089d4 <mergeData+0x22c>)
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	77bb      	strb	r3, [r7, #30]
 8008862:	4b5d      	ldr	r3, [pc, #372]	; (80089d8 <mergeData+0x230>)
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	77fb      	strb	r3, [r7, #31]
 8008868:	4b5c      	ldr	r3, [pc, #368]	; (80089dc <mergeData+0x234>)
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	f887 3020 	strb.w	r3, [r7, #32]
 8008870:	4b5b      	ldr	r3, [pc, #364]	; (80089e0 <mergeData+0x238>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8008878:	4b5a      	ldr	r3, [pc, #360]	; (80089e4 <mergeData+0x23c>)
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008880:	4b59      	ldr	r3, [pc, #356]	; (80089e8 <mergeData+0x240>)
 8008882:	781b      	ldrb	r3, [r3, #0]
 8008884:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008888:	4b58      	ldr	r3, [pc, #352]	; (80089ec <mergeData+0x244>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 8008890:	4b57      	ldr	r3, [pc, #348]	; (80089f0 <mergeData+0x248>)
 8008892:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 8008896:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 800889a:	4b55      	ldr	r3, [pc, #340]	; (80089f0 <mergeData+0x248>)
 800889c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80088a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 80088a4:	4b52      	ldr	r3, [pc, #328]	; (80089f0 <mergeData+0x248>)
 80088a6:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80088aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 80088ae:	4b50      	ldr	r3, [pc, #320]	; (80089f0 <mergeData+0x248>)
 80088b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80088b4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 80088b8:	4b4d      	ldr	r3, [pc, #308]	; (80089f0 <mergeData+0x248>)
 80088ba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80088be:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 80088c2:	4b4b      	ldr	r3, [pc, #300]	; (80089f0 <mergeData+0x248>)
 80088c4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 80088c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 80088cc:	4b48      	ldr	r3, [pc, #288]	; (80089f0 <mergeData+0x248>)
 80088ce:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 80088d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 80088d6:	4b46      	ldr	r3, [pc, #280]	; (80089f0 <mergeData+0x248>)
 80088d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 80088dc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 80088e0:	4b43      	ldr	r3, [pc, #268]	; (80089f0 <mergeData+0x248>)
 80088e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80088e6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 80088ea:	4b41      	ldr	r3, [pc, #260]	; (80089f0 <mergeData+0x248>)
 80088ec:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80088f0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 80088f4:	4b3e      	ldr	r3, [pc, #248]	; (80089f0 <mergeData+0x248>)
 80088f6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80088fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80088fe:	4b3d      	ldr	r3, [pc, #244]	; (80089f4 <mergeData+0x24c>)
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008906:	2300      	movs	r3, #0
 8008908:	677b      	str	r3, [r7, #116]	; 0x74
 800890a:	e015      	b.n	8008938 <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 800890c:	1d3a      	adds	r2, r7, #4
 800890e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008910:	4413      	add	r3, r2
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	461a      	mov	r2, r3
 8008916:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800891a:	4937      	ldr	r1, [pc, #220]	; (80089f8 <mergeData+0x250>)
 800891c:	4618      	mov	r0, r3
 800891e:	f004 fe3d 	bl	800d59c <siprintf>
	    strcat(combinedString, temp);
 8008922:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008926:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800892a:	4611      	mov	r1, r2
 800892c:	4618      	mov	r0, r3
 800892e:	f004 fe5d 	bl	800d5ec <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008932:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008934:	3301      	adds	r3, #1
 8008936:	677b      	str	r3, [r7, #116]	; 0x74
 8008938:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800893a:	2b2c      	cmp	r3, #44	; 0x2c
 800893c:	d9e6      	bls.n	800890c <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 800893e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008942:	4618      	mov	r0, r3
 8008944:	f7f7 fc6e 	bl	8000224 <strlen>
 8008948:	4603      	mov	r3, r0
 800894a:	3301      	adds	r3, #1
 800894c:	4618      	mov	r0, r3
 800894e:	f004 fd2f 	bl	800d3b0 <malloc>
 8008952:	4603      	mov	r3, r0
 8008954:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 8008956:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800895a:	4619      	mov	r1, r3
 800895c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800895e:	f004 fec7 	bl	800d6f0 <strcpy>
	return result;
 8008962:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8008964:	4618      	mov	r0, r3
 8008966:	3778      	adds	r7, #120	; 0x78
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	20000cac 	.word	0x20000cac
 8008970:	20000c9e 	.word	0x20000c9e
 8008974:	20000ca1 	.word	0x20000ca1
 8008978:	20000ca2 	.word	0x20000ca2
 800897c:	20000ca3 	.word	0x20000ca3
 8008980:	20000caa 	.word	0x20000caa
 8008984:	20000ca4 	.word	0x20000ca4
 8008988:	20000ca5 	.word	0x20000ca5
 800898c:	20000ca9 	.word	0x20000ca9
 8008990:	20000ca6 	.word	0x20000ca6
 8008994:	20000cb6 	.word	0x20000cb6
 8008998:	20000ca7 	.word	0x20000ca7
 800899c:	20000cb7 	.word	0x20000cb7
 80089a0:	20000ca8 	.word	0x20000ca8
 80089a4:	20000cb8 	.word	0x20000cb8
 80089a8:	20000cab 	.word	0x20000cab
 80089ac:	20000cad 	.word	0x20000cad
 80089b0:	20000cae 	.word	0x20000cae
 80089b4:	20000caf 	.word	0x20000caf
 80089b8:	20000cb0 	.word	0x20000cb0
 80089bc:	20000cb1 	.word	0x20000cb1
 80089c0:	20000cb2 	.word	0x20000cb2
 80089c4:	20000cb3 	.word	0x20000cb3
 80089c8:	20000cb4 	.word	0x20000cb4
 80089cc:	20000cb5 	.word	0x20000cb5
 80089d0:	20000cb9 	.word	0x20000cb9
 80089d4:	20000cbb 	.word	0x20000cbb
 80089d8:	20000c9a 	.word	0x20000c9a
 80089dc:	20000c9b 	.word	0x20000c9b
 80089e0:	200009c2 	.word	0x200009c2
 80089e4:	200009c3 	.word	0x200009c3
 80089e8:	20000c9c 	.word	0x20000c9c
 80089ec:	20000cbe 	.word	0x20000cbe
 80089f0:	20000b38 	.word	0x20000b38
 80089f4:	20000940 	.word	0x20000940
 80089f8:	0800ec30 	.word	0x0800ec30

080089fc <mainLoop>:

void mainLoop() {
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b084      	sub	sp, #16
 8008a00:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8008a02:	f7fd fffb 	bl	80069fc <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8008a06:	2101      	movs	r1, #1
 8008a08:	48ac      	ldr	r0, [pc, #688]	; (8008cbc <mainLoop+0x2c0>)
 8008a0a:	f001 fc47 	bl	800a29c <HAL_GPIO_ReadPin>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d136      	bne.n	8008a82 <mainLoop+0x86>
 8008a14:	2108      	movs	r1, #8
 8008a16:	48aa      	ldr	r0, [pc, #680]	; (8008cc0 <mainLoop+0x2c4>)
 8008a18:	f001 fc40 	bl	800a29c <HAL_GPIO_ReadPin>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d12f      	bne.n	8008a82 <mainLoop+0x86>
 8008a22:	2102      	movs	r1, #2
 8008a24:	48a5      	ldr	r0, [pc, #660]	; (8008cbc <mainLoop+0x2c0>)
 8008a26:	f001 fc39 	bl	800a29c <HAL_GPIO_ReadPin>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d128      	bne.n	8008a82 <mainLoop+0x86>
 8008a30:	2104      	movs	r1, #4
 8008a32:	48a2      	ldr	r0, [pc, #648]	; (8008cbc <mainLoop+0x2c0>)
 8008a34:	f001 fc32 	bl	800a29c <HAL_GPIO_ReadPin>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d121      	bne.n	8008a82 <mainLoop+0x86>
 8008a3e:	2108      	movs	r1, #8
 8008a40:	489e      	ldr	r0, [pc, #632]	; (8008cbc <mainLoop+0x2c0>)
 8008a42:	f001 fc2b 	bl	800a29c <HAL_GPIO_ReadPin>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d11a      	bne.n	8008a82 <mainLoop+0x86>
 8008a4c:	2180      	movs	r1, #128	; 0x80
 8008a4e:	489c      	ldr	r0, [pc, #624]	; (8008cc0 <mainLoop+0x2c4>)
 8008a50:	f001 fc24 	bl	800a29c <HAL_GPIO_ReadPin>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d113      	bne.n	8008a82 <mainLoop+0x86>
 8008a5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008a5e:	4898      	ldr	r0, [pc, #608]	; (8008cc0 <mainLoop+0x2c4>)
 8008a60:	f001 fc1c 	bl	800a29c <HAL_GPIO_ReadPin>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d10b      	bne.n	8008a82 <mainLoop+0x86>
 8008a6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008a6e:	4894      	ldr	r0, [pc, #592]	; (8008cc0 <mainLoop+0x2c4>)
 8008a70:	f001 fc14 	bl	800a29c <HAL_GPIO_ReadPin>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d103      	bne.n	8008a82 <mainLoop+0x86>
			butonKontrol=0;
 8008a7a:	4b92      	ldr	r3, [pc, #584]	; (8008cc4 <mainLoop+0x2c8>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	701a      	strb	r2, [r3, #0]
 8008a80:	e003      	b.n	8008a8a <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8008a82:	4b91      	ldr	r3, [pc, #580]	; (8008cc8 <mainLoop+0x2cc>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a91      	ldr	r2, [pc, #580]	; (8008ccc <mainLoop+0x2d0>)
 8008a88:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8008a8a:	4b91      	ldr	r3, [pc, #580]	; (8008cd0 <mainLoop+0x2d4>)
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d039      	beq.n	8008b06 <mainLoop+0x10a>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008a92:	bf00      	nop
 8008a94:	488f      	ldr	r0, [pc, #572]	; (8008cd4 <mainLoop+0x2d8>)
 8008a96:	f002 fa2a 	bl	800aeee <HAL_I2C_GetError>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b04      	cmp	r3, #4
 8008a9e:	d0f9      	beq.n	8008a94 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008aa0:	bf00      	nop
 8008aa2:	488c      	ldr	r0, [pc, #560]	; (8008cd4 <mainLoop+0x2d8>)
 8008aa4:	f002 fa16 	bl	800aed4 <HAL_I2C_GetState>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b20      	cmp	r3, #32
 8008aac:	d1f9      	bne.n	8008aa2 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8008aae:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008ab2:	9302      	str	r3, [sp, #8]
 8008ab4:	233f      	movs	r3, #63	; 0x3f
 8008ab6:	9301      	str	r3, [sp, #4]
 8008ab8:	4b87      	ldr	r3, [pc, #540]	; (8008cd8 <mainLoop+0x2dc>)
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	233f      	movs	r3, #63	; 0x3f
 8008abe:	2200      	movs	r2, #0
 8008ac0:	21a0      	movs	r1, #160	; 0xa0
 8008ac2:	4884      	ldr	r0, [pc, #528]	; (8008cd4 <mainLoop+0x2d8>)
 8008ac4:	f001 fea4 	bl	800a810 <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 8008ac8:	2005      	movs	r0, #5
 8008aca:	f000 fe17 	bl	80096fc <HAL_Delay>

		  hafizaYaz=0;
 8008ace:	4b80      	ldr	r3, [pc, #512]	; (8008cd0 <mainLoop+0x2d4>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8008ad4:	4b81      	ldr	r3, [pc, #516]	; (8008cdc <mainLoop+0x2e0>)
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d105      	bne.n	8008ae8 <mainLoop+0xec>
			  lcd_print(2,1,"Data yazildi    ");
 8008adc:	4a80      	ldr	r2, [pc, #512]	; (8008ce0 <mainLoop+0x2e4>)
 8008ade:	2101      	movs	r1, #1
 8008ae0:	2002      	movs	r0, #2
 8008ae2:	f7f7 ff67 	bl	80009b4 <lcd_print>
 8008ae6:	e008      	b.n	8008afa <mainLoop+0xfe>
		  } else if(dilSecim==1) {
 8008ae8:	4b7c      	ldr	r3, [pc, #496]	; (8008cdc <mainLoop+0x2e0>)
 8008aea:	781b      	ldrb	r3, [r3, #0]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d104      	bne.n	8008afa <mainLoop+0xfe>
			  lcd_print(2,1,"Data Wrote      ");
 8008af0:	4a7c      	ldr	r2, [pc, #496]	; (8008ce4 <mainLoop+0x2e8>)
 8008af2:	2101      	movs	r1, #1
 8008af4:	2002      	movs	r0, #2
 8008af6:	f7f7 ff5d 	bl	80009b4 <lcd_print>
		  }

		  HAL_Delay(1000);
 8008afa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008afe:	f000 fdfd 	bl	80096fc <HAL_Delay>
		  lcd_clear();
 8008b02:	f7f7 ff83 	bl	8000a0c <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8008b06:	4b78      	ldr	r3, [pc, #480]	; (8008ce8 <mainLoop+0x2ec>)
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	f083 0301 	eor.w	r3, r3, #1
 8008b0e:	b2db      	uxtb	r3, r3
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d06e      	beq.n	8008bf2 <mainLoop+0x1f6>
 8008b14:	486f      	ldr	r0, [pc, #444]	; (8008cd4 <mainLoop+0x2d8>)
 8008b16:	f002 f9dd 	bl	800aed4 <HAL_I2C_GetState>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b20      	cmp	r3, #32
 8008b1e:	d168      	bne.n	8008bf2 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8008b20:	4b72      	ldr	r3, [pc, #456]	; (8008cec <mainLoop+0x2f0>)
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	f083 0301 	eor.w	r3, r3, #1
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d044      	beq.n	8008bb8 <mainLoop+0x1bc>
			  lcd_print(1,1,"   **EEPROM**   ");
 8008b2e:	4a70      	ldr	r2, [pc, #448]	; (8008cf0 <mainLoop+0x2f4>)
 8008b30:	2101      	movs	r1, #1
 8008b32:	2001      	movs	r0, #1
 8008b34:	f7f7 ff3e 	bl	80009b4 <lcd_print>
			  if(dilSecim==0) {
 8008b38:	4b68      	ldr	r3, [pc, #416]	; (8008cdc <mainLoop+0x2e0>)
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d105      	bne.n	8008b4c <mainLoop+0x150>
				  lcd_print(2,1,"Data Okunuyor...");
 8008b40:	4a6c      	ldr	r2, [pc, #432]	; (8008cf4 <mainLoop+0x2f8>)
 8008b42:	2101      	movs	r1, #1
 8008b44:	2002      	movs	r0, #2
 8008b46:	f7f7 ff35 	bl	80009b4 <lcd_print>
 8008b4a:	e008      	b.n	8008b5e <mainLoop+0x162>
			  } else if(dilSecim==1) {
 8008b4c:	4b63      	ldr	r3, [pc, #396]	; (8008cdc <mainLoop+0x2e0>)
 8008b4e:	781b      	ldrb	r3, [r3, #0]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d104      	bne.n	8008b5e <mainLoop+0x162>
				  lcd_print(2,1,"Data Reading... ");
 8008b54:	4a68      	ldr	r2, [pc, #416]	; (8008cf8 <mainLoop+0x2fc>)
 8008b56:	2101      	movs	r1, #1
 8008b58:	2002      	movs	r0, #2
 8008b5a:	f7f7 ff2b 	bl	80009b4 <lcd_print>
			  }
			  HAL_Delay(1000);
 8008b5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008b62:	f000 fdcb 	bl	80096fc <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008b66:	bf00      	nop
 8008b68:	485a      	ldr	r0, [pc, #360]	; (8008cd4 <mainLoop+0x2d8>)
 8008b6a:	f002 f9c0 	bl	800aeee <HAL_I2C_GetError>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b04      	cmp	r3, #4
 8008b72:	d0f9      	beq.n	8008b68 <mainLoop+0x16c>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8008b74:	e003      	b.n	8008b7e <mainLoop+0x182>
				  HAL_Delay(1000);
 8008b76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008b7a:	f000 fdbf 	bl	80096fc <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8008b7e:	4855      	ldr	r0, [pc, #340]	; (8008cd4 <mainLoop+0x2d8>)
 8008b80:	f002 f9a8 	bl	800aed4 <HAL_I2C_GetState>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b20      	cmp	r3, #32
 8008b88:	d1f5      	bne.n	8008b76 <mainLoop+0x17a>
			  }

			  if(dilSecim==0) {
 8008b8a:	4b54      	ldr	r3, [pc, #336]	; (8008cdc <mainLoop+0x2e0>)
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d105      	bne.n	8008b9e <mainLoop+0x1a2>
				  lcd_print(2,1,"Data Okundu.    ");
 8008b92:	4a5a      	ldr	r2, [pc, #360]	; (8008cfc <mainLoop+0x300>)
 8008b94:	2101      	movs	r1, #1
 8008b96:	2002      	movs	r0, #2
 8008b98:	f7f7 ff0c 	bl	80009b4 <lcd_print>
 8008b9c:	e008      	b.n	8008bb0 <mainLoop+0x1b4>
			  } else if(dilSecim==1) {
 8008b9e:	4b4f      	ldr	r3, [pc, #316]	; (8008cdc <mainLoop+0x2e0>)
 8008ba0:	781b      	ldrb	r3, [r3, #0]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d104      	bne.n	8008bb0 <mainLoop+0x1b4>
				  lcd_print(2,1,"Data Read.      ");
 8008ba6:	4a56      	ldr	r2, [pc, #344]	; (8008d00 <mainLoop+0x304>)
 8008ba8:	2101      	movs	r1, #1
 8008baa:	2002      	movs	r0, #2
 8008bac:	f7f7 ff02 	bl	80009b4 <lcd_print>
			  }

			  ilkOkuma=1;
 8008bb0:	4b4e      	ldr	r3, [pc, #312]	; (8008cec <mainLoop+0x2f0>)
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	701a      	strb	r2, [r3, #0]
 8008bb6:	e014      	b.n	8008be2 <mainLoop+0x1e6>
		  } else {
			  if(dilSecim==0) {
 8008bb8:	4b48      	ldr	r3, [pc, #288]	; (8008cdc <mainLoop+0x2e0>)
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d105      	bne.n	8008bcc <mainLoop+0x1d0>
				  lcd_print(2,1,"Deger Kaydedildi");
 8008bc0:	4a50      	ldr	r2, [pc, #320]	; (8008d04 <mainLoop+0x308>)
 8008bc2:	2101      	movs	r1, #1
 8008bc4:	2002      	movs	r0, #2
 8008bc6:	f7f7 fef5 	bl	80009b4 <lcd_print>
 8008bca:	e008      	b.n	8008bde <mainLoop+0x1e2>
			  } else if(dilSecim==1) {
 8008bcc:	4b43      	ldr	r3, [pc, #268]	; (8008cdc <mainLoop+0x2e0>)
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d104      	bne.n	8008bde <mainLoop+0x1e2>
				  lcd_print(2,1,"Value Saved     ");
 8008bd4:	4a4c      	ldr	r2, [pc, #304]	; (8008d08 <mainLoop+0x30c>)
 8008bd6:	2101      	movs	r1, #1
 8008bd8:	2002      	movs	r0, #2
 8008bda:	f7f7 feeb 	bl	80009b4 <lcd_print>
			  }
			  lcd_clear();
 8008bde:	f7f7 ff15 	bl	8000a0c <lcd_clear>
		  }

		  lcd_clear();
 8008be2:	f7f7 ff13 	bl	8000a0c <lcd_clear>

		  eepromKontrol(1);
 8008be6:	2001      	movs	r0, #1
 8008be8:	f7fd faa2 	bl	8006130 <eepromKontrol>
		  hafizaOku=1;
 8008bec:	4b3e      	ldr	r3, [pc, #248]	; (8008ce8 <mainLoop+0x2ec>)
 8008bee:	2201      	movs	r2, #1
 8008bf0:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8008bf2:	4b46      	ldr	r3, [pc, #280]	; (8008d0c <mainLoop+0x310>)
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d11c      	bne.n	8008c34 <mainLoop+0x238>
 8008bfa:	4b45      	ldr	r3, [pc, #276]	; (8008d10 <mainLoop+0x314>)
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	f083 0301 	eor.w	r3, r3, #1
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d015      	beq.n	8008c34 <mainLoop+0x238>
 8008c08:	4b42      	ldr	r3, [pc, #264]	; (8008d14 <mainLoop+0x318>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d111      	bne.n	8008c34 <mainLoop+0x238>
			lcd_clear();
 8008c10:	f7f7 fefc 	bl	8000a0c <lcd_clear>
			HAL_Delay(10);
 8008c14:	200a      	movs	r0, #10
 8008c16:	f000 fd71 	bl	80096fc <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8008c1a:	4a3f      	ldr	r2, [pc, #252]	; (8008d18 <mainLoop+0x31c>)
 8008c1c:	2101      	movs	r1, #1
 8008c1e:	2001      	movs	r0, #1
 8008c20:	f7f7 fec8 	bl	80009b4 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8008c24:	4a3d      	ldr	r2, [pc, #244]	; (8008d1c <mainLoop+0x320>)
 8008c26:	2101      	movs	r1, #1
 8008c28:	2002      	movs	r0, #2
 8008c2a:	f7f7 fec3 	bl	80009b4 <lcd_print>
			mesajYazildi=1;
 8008c2e:	4b38      	ldr	r3, [pc, #224]	; (8008d10 <mainLoop+0x314>)
 8008c30:	2201      	movs	r2, #1
 8008c32:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8008c34:	4b35      	ldr	r3, [pc, #212]	; (8008d0c <mainLoop+0x310>)
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d112      	bne.n	8008c62 <mainLoop+0x266>
 8008c3c:	2102      	movs	r1, #2
 8008c3e:	481f      	ldr	r0, [pc, #124]	; (8008cbc <mainLoop+0x2c0>)
 8008c40:	f001 fb2c 	bl	800a29c <HAL_GPIO_ReadPin>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d10b      	bne.n	8008c62 <mainLoop+0x266>
 8008c4a:	2104      	movs	r1, #4
 8008c4c:	481b      	ldr	r0, [pc, #108]	; (8008cbc <mainLoop+0x2c0>)
 8008c4e:	f001 fb25 	bl	800a29c <HAL_GPIO_ReadPin>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d104      	bne.n	8008c62 <mainLoop+0x266>
			menuGiris=1;
 8008c58:	4b2c      	ldr	r3, [pc, #176]	; (8008d0c <mainLoop+0x310>)
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8008c5e:	f7f7 fed5 	bl	8000a0c <lcd_clear>
		}

		if(menuGiris==1) {
 8008c62:	4b2a      	ldr	r3, [pc, #168]	; (8008d0c <mainLoop+0x310>)
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d102      	bne.n	8008c70 <mainLoop+0x274>
			menu(&hi2c1);
 8008c6a:	481a      	ldr	r0, [pc, #104]	; (8008cd4 <mainLoop+0x2d8>)
 8008c6c:	f7f8 ffde 	bl	8001c2c <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8008c70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008c74:	4812      	ldr	r0, [pc, #72]	; (8008cc0 <mainLoop+0x2c4>)
 8008c76:	f001 fb40 	bl	800a2fa <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8008c7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008c7e:	4828      	ldr	r0, [pc, #160]	; (8008d20 <mainLoop+0x324>)
 8008c80:	f001 fb0c 	bl	800a29c <HAL_GPIO_ReadPin>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d10a      	bne.n	8008ca0 <mainLoop+0x2a4>
 8008c8a:	4b26      	ldr	r3, [pc, #152]	; (8008d24 <mainLoop+0x328>)
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	f083 0301 	eor.w	r3, r3, #1
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d003      	beq.n	8008ca0 <mainLoop+0x2a4>
			stopVar=1;
 8008c98:	4b23      	ldr	r3, [pc, #140]	; (8008d28 <mainLoop+0x32c>)
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	701a      	strb	r2, [r3, #0]
 8008c9e:	e002      	b.n	8008ca6 <mainLoop+0x2aa>
		} else {
			stopVar=0;
 8008ca0:	4b21      	ldr	r3, [pc, #132]	; (8008d28 <mainLoop+0x32c>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8008ca6:	f7fd fec9 	bl	8006a3c <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8008caa:	f7fd fefb 	bl	8006aa4 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8008cae:	f7fd ff3f 	bl	8006b30 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8008cb2:	f7fd ff8f 	bl	8006bd4 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8008cb6:	f7ff fadd 	bl	8008274 <checkDemoModCalisma>
		checkLCDBacklight();
 8008cba:	e6a2      	b.n	8008a02 <mainLoop+0x6>
 8008cbc:	40010800 	.word	0x40010800
 8008cc0:	40011000 	.word	0x40011000
 8008cc4:	20000ccc 	.word	0x20000ccc
 8008cc8:	20000bd4 	.word	0x20000bd4
 8008ccc:	20000bf0 	.word	0x20000bf0
 8008cd0:	20000cc9 	.word	0x20000cc9
 8008cd4:	20000e5c 	.word	0x20000e5c
 8008cd8:	20000b38 	.word	0x20000b38
 8008cdc:	20000cbe 	.word	0x20000cbe
 8008ce0:	0800ec34 	.word	0x0800ec34
 8008ce4:	0800ec48 	.word	0x0800ec48
 8008ce8:	20000cca 	.word	0x20000cca
 8008cec:	20000ccb 	.word	0x20000ccb
 8008cf0:	0800ec5c 	.word	0x0800ec5c
 8008cf4:	0800ec70 	.word	0x0800ec70
 8008cf8:	0800ec84 	.word	0x0800ec84
 8008cfc:	0800ec98 	.word	0x0800ec98
 8008d00:	0800ecac 	.word	0x0800ecac
 8008d04:	0800ecc0 	.word	0x0800ecc0
 8008d08:	0800ecd4 	.word	0x0800ecd4
 8008d0c:	20000cba 	.word	0x20000cba
 8008d10:	20000cd1 	.word	0x20000cd1
 8008d14:	20000cbb 	.word	0x20000cbb
 8008d18:	0800eb98 	.word	0x0800eb98
 8008d1c:	0800ebac 	.word	0x0800ebac
 8008d20:	40010c00 	.word	0x40010c00
 8008d24:	20000cf2 	.word	0x20000cf2
 8008d28:	20000cef 	.word	0x20000cef

08008d2c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008d34:	4b04      	ldr	r3, [pc, #16]	; (8008d48 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	3301      	adds	r3, #1
 8008d3a:	4a03      	ldr	r2, [pc, #12]	; (8008d48 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008d3c:	6013      	str	r3, [r2, #0]
}
 8008d3e:	bf00      	nop
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bc80      	pop	{r7}
 8008d46:	4770      	bx	lr
 8008d48:	20000bd4 	.word	0x20000bd4

08008d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008d50:	f000 fc72 	bl	8009638 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008d54:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008d58:	f000 fcd0 	bl	80096fc <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008d5c:	f000 f8a2 	bl	8008ea4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008d60:	f000 f9c4 	bl	80090ec <MX_GPIO_Init>
  MX_CAN_Init();
 8008d64:	f000 f8e4 	bl	8008f30 <MX_CAN_Init>
  MX_I2C1_Init();
 8008d68:	f000 f916 	bl	8008f98 <MX_I2C1_Init>
  MX_TIM1_Init();
 8008d6c:	f000 f942 	bl	8008ff4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008d70:	f000 f992 	bl	8009098 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008d74:	2201      	movs	r2, #1
 8008d76:	2140      	movs	r1, #64	; 0x40
 8008d78:	4840      	ldr	r0, [pc, #256]	; (8008e7c <main+0x130>)
 8008d7a:	f001 faa6 	bl	800a2ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008d7e:	2201      	movs	r2, #1
 8008d80:	2180      	movs	r1, #128	; 0x80
 8008d82:	483e      	ldr	r0, [pc, #248]	; (8008e7c <main+0x130>)
 8008d84:	f001 faa1 	bl	800a2ca <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008d88:	200a      	movs	r0, #10
 8008d8a:	f000 fcb7 	bl	80096fc <HAL_Delay>
  lcd_init();
 8008d8e:	f7f7 fddf 	bl	8000950 <lcd_init>
  HAL_Delay(10);
 8008d92:	200a      	movs	r0, #10
 8008d94:	f000 fcb2 	bl	80096fc <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8008d98:	4839      	ldr	r0, [pc, #228]	; (8008e80 <main+0x134>)
 8008d9a:	f003 f949 	bl	800c030 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008d9e:	bf00      	nop
 8008da0:	4838      	ldr	r0, [pc, #224]	; (8008e84 <main+0x138>)
 8008da2:	f002 f8a4 	bl	800aeee <HAL_I2C_GetError>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b04      	cmp	r3, #4
 8008daa:	d0f9      	beq.n	8008da0 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008dac:	bf00      	nop
 8008dae:	4835      	ldr	r0, [pc, #212]	; (8008e84 <main+0x138>)
 8008db0:	f002 f890 	bl	800aed4 <HAL_I2C_GetState>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b20      	cmp	r3, #32
 8008db8:	d1f9      	bne.n	8008dae <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008dc0:	482e      	ldr	r0, [pc, #184]	; (8008e7c <main+0x130>)
 8008dc2:	f001 fa82 	bl	800a2ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008dcc:	482b      	ldr	r0, [pc, #172]	; (8008e7c <main+0x130>)
 8008dce:	f001 fa7c 	bl	800a2ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	2104      	movs	r1, #4
 8008dd6:	4829      	ldr	r0, [pc, #164]	; (8008e7c <main+0x130>)
 8008dd8:	f001 fa77 	bl	800a2ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008ddc:	2200      	movs	r2, #0
 8008dde:	2102      	movs	r1, #2
 8008de0:	4826      	ldr	r0, [pc, #152]	; (8008e7c <main+0x130>)
 8008de2:	f001 fa72 	bl	800a2ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008de6:	2200      	movs	r2, #0
 8008de8:	2101      	movs	r1, #1
 8008dea:	4824      	ldr	r0, [pc, #144]	; (8008e7c <main+0x130>)
 8008dec:	f001 fa6d 	bl	800a2ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008df0:	2200      	movs	r2, #0
 8008df2:	2120      	movs	r1, #32
 8008df4:	4824      	ldr	r0, [pc, #144]	; (8008e88 <main+0x13c>)
 8008df6:	f001 fa68 	bl	800a2ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	2110      	movs	r1, #16
 8008dfe:	4822      	ldr	r0, [pc, #136]	; (8008e88 <main+0x13c>)
 8008e00:	f001 fa63 	bl	800a2ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008e04:	2200      	movs	r2, #0
 8008e06:	2180      	movs	r1, #128	; 0x80
 8008e08:	4820      	ldr	r0, [pc, #128]	; (8008e8c <main+0x140>)
 8008e0a:	f001 fa5e 	bl	800a2ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008e0e:	2200      	movs	r2, #0
 8008e10:	2140      	movs	r1, #64	; 0x40
 8008e12:	481e      	ldr	r0, [pc, #120]	; (8008e8c <main+0x140>)
 8008e14:	f001 fa59 	bl	800a2ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008e18:	2200      	movs	r2, #0
 8008e1a:	2120      	movs	r1, #32
 8008e1c:	481b      	ldr	r0, [pc, #108]	; (8008e8c <main+0x140>)
 8008e1e:	f001 fa54 	bl	800a2ca <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008e22:	2200      	movs	r2, #0
 8008e24:	2110      	movs	r1, #16
 8008e26:	4819      	ldr	r0, [pc, #100]	; (8008e8c <main+0x140>)
 8008e28:	f001 fa4f 	bl	800a2ca <HAL_GPIO_WritePin>

  i2cTest();
 8008e2c:	f7fd fd38 	bl	80068a0 <i2cTest>
  HAL_Delay(100);
 8008e30:	2064      	movs	r0, #100	; 0x64
 8008e32:	f000 fc63 	bl	80096fc <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8008e36:	4a16      	ldr	r2, [pc, #88]	; (8008e90 <main+0x144>)
 8008e38:	2101      	movs	r1, #1
 8008e3a:	2001      	movs	r0, #1
 8008e3c:	f7f7 fdba 	bl	80009b4 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8008e40:	4a14      	ldr	r2, [pc, #80]	; (8008e94 <main+0x148>)
 8008e42:	2101      	movs	r1, #1
 8008e44:	2002      	movs	r0, #2
 8008e46:	f7f7 fdb5 	bl	80009b4 <lcd_print>
  HAL_Delay(1000);
 8008e4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008e4e:	f000 fc55 	bl	80096fc <HAL_Delay>
  lcd_clear();
 8008e52:	f7f7 fddb 	bl	8000a0c <lcd_clear>

  eepromKontrol(0);
 8008e56:	2000      	movs	r0, #0
 8008e58:	f7fd f96a 	bl	8006130 <eepromKontrol>
  iotModeStartup(&hi2c1, &huart1);
 8008e5c:	490e      	ldr	r1, [pc, #56]	; (8008e98 <main+0x14c>)
 8008e5e:	4809      	ldr	r0, [pc, #36]	; (8008e84 <main+0x138>)
 8008e60:	f7f8 f854 	bl	8000f0c <iotModeStartup>

  lcd_clear();
 8008e64:	f7f7 fdd2 	bl	8000a0c <lcd_clear>
  HAL_Delay(200);
 8008e68:	20c8      	movs	r0, #200	; 0xc8
 8008e6a:	f000 fc47 	bl	80096fc <HAL_Delay>

  backLightTimer = millis;
 8008e6e:	4b0b      	ldr	r3, [pc, #44]	; (8008e9c <main+0x150>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a0b      	ldr	r2, [pc, #44]	; (8008ea0 <main+0x154>)
 8008e74:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008e76:	f7ff fdc1 	bl	80089fc <mainLoop>
 8008e7a:	e7fc      	b.n	8008e76 <main+0x12a>
 8008e7c:	40010c00 	.word	0x40010c00
 8008e80:	20000eb0 	.word	0x20000eb0
 8008e84:	20000e5c 	.word	0x20000e5c
 8008e88:	40011000 	.word	0x40011000
 8008e8c:	40010800 	.word	0x40010800
 8008e90:	0800ece8 	.word	0x0800ece8
 8008e94:	0800ecfc 	.word	0x0800ecfc
 8008e98:	20000ef8 	.word	0x20000ef8
 8008e9c:	20000bd4 	.word	0x20000bd4
 8008ea0:	20000bf0 	.word	0x20000bf0

08008ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b090      	sub	sp, #64	; 0x40
 8008ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008eaa:	f107 0318 	add.w	r3, r7, #24
 8008eae:	2228      	movs	r2, #40	; 0x28
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f004 fb92 	bl	800d5dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008eb8:	1d3b      	adds	r3, r7, #4
 8008eba:	2200      	movs	r2, #0
 8008ebc:	601a      	str	r2, [r3, #0]
 8008ebe:	605a      	str	r2, [r3, #4]
 8008ec0:	609a      	str	r2, [r3, #8]
 8008ec2:	60da      	str	r2, [r3, #12]
 8008ec4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008eca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ece:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008ed8:	2302      	movs	r3, #2
 8008eda:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008edc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008ee0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008ee2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008ee8:	f107 0318 	add.w	r3, r7, #24
 8008eec:	4618      	mov	r0, r3
 8008eee:	f002 fc3f 	bl	800b770 <HAL_RCC_OscConfig>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d001      	beq.n	8008efc <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008ef8:	f000 f9a2 	bl	8009240 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008efc:	230f      	movs	r3, #15
 8008efe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008f00:	2302      	movs	r3, #2
 8008f02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008f04:	2300      	movs	r3, #0
 8008f06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008f12:	1d3b      	adds	r3, r7, #4
 8008f14:	2102      	movs	r1, #2
 8008f16:	4618      	mov	r0, r3
 8008f18:	f002 feac 	bl	800bc74 <HAL_RCC_ClockConfig>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d001      	beq.n	8008f26 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008f22:	f000 f98d 	bl	8009240 <Error_Handler>
  }
}
 8008f26:	bf00      	nop
 8008f28:	3740      	adds	r7, #64	; 0x40
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
	...

08008f30 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008f34:	4b16      	ldr	r3, [pc, #88]	; (8008f90 <MX_CAN_Init+0x60>)
 8008f36:	4a17      	ldr	r2, [pc, #92]	; (8008f94 <MX_CAN_Init+0x64>)
 8008f38:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008f3a:	4b15      	ldr	r3, [pc, #84]	; (8008f90 <MX_CAN_Init+0x60>)
 8008f3c:	2210      	movs	r2, #16
 8008f3e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008f40:	4b13      	ldr	r3, [pc, #76]	; (8008f90 <MX_CAN_Init+0x60>)
 8008f42:	2200      	movs	r2, #0
 8008f44:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008f46:	4b12      	ldr	r3, [pc, #72]	; (8008f90 <MX_CAN_Init+0x60>)
 8008f48:	2200      	movs	r2, #0
 8008f4a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008f4c:	4b10      	ldr	r3, [pc, #64]	; (8008f90 <MX_CAN_Init+0x60>)
 8008f4e:	2200      	movs	r2, #0
 8008f50:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008f52:	4b0f      	ldr	r3, [pc, #60]	; (8008f90 <MX_CAN_Init+0x60>)
 8008f54:	2200      	movs	r2, #0
 8008f56:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008f58:	4b0d      	ldr	r3, [pc, #52]	; (8008f90 <MX_CAN_Init+0x60>)
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008f5e:	4b0c      	ldr	r3, [pc, #48]	; (8008f90 <MX_CAN_Init+0x60>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008f64:	4b0a      	ldr	r3, [pc, #40]	; (8008f90 <MX_CAN_Init+0x60>)
 8008f66:	2200      	movs	r2, #0
 8008f68:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008f6a:	4b09      	ldr	r3, [pc, #36]	; (8008f90 <MX_CAN_Init+0x60>)
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008f70:	4b07      	ldr	r3, [pc, #28]	; (8008f90 <MX_CAN_Init+0x60>)
 8008f72:	2200      	movs	r2, #0
 8008f74:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008f76:	4b06      	ldr	r3, [pc, #24]	; (8008f90 <MX_CAN_Init+0x60>)
 8008f78:	2200      	movs	r2, #0
 8008f7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008f7c:	4804      	ldr	r0, [pc, #16]	; (8008f90 <MX_CAN_Init+0x60>)
 8008f7e:	f000 fbe1 	bl	8009744 <HAL_CAN_Init>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008f88:	f000 f95a 	bl	8009240 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008f8c:	bf00      	nop
 8008f8e:	bd80      	pop	{r7, pc}
 8008f90:	20000e34 	.word	0x20000e34
 8008f94:	40006400 	.word	0x40006400

08008f98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008f9c:	4b12      	ldr	r3, [pc, #72]	; (8008fe8 <MX_I2C1_Init+0x50>)
 8008f9e:	4a13      	ldr	r2, [pc, #76]	; (8008fec <MX_I2C1_Init+0x54>)
 8008fa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008fa2:	4b11      	ldr	r3, [pc, #68]	; (8008fe8 <MX_I2C1_Init+0x50>)
 8008fa4:	4a12      	ldr	r2, [pc, #72]	; (8008ff0 <MX_I2C1_Init+0x58>)
 8008fa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008fa8:	4b0f      	ldr	r3, [pc, #60]	; (8008fe8 <MX_I2C1_Init+0x50>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008fae:	4b0e      	ldr	r3, [pc, #56]	; (8008fe8 <MX_I2C1_Init+0x50>)
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008fb4:	4b0c      	ldr	r3, [pc, #48]	; (8008fe8 <MX_I2C1_Init+0x50>)
 8008fb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008fba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008fbc:	4b0a      	ldr	r3, [pc, #40]	; (8008fe8 <MX_I2C1_Init+0x50>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008fc2:	4b09      	ldr	r3, [pc, #36]	; (8008fe8 <MX_I2C1_Init+0x50>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008fc8:	4b07      	ldr	r3, [pc, #28]	; (8008fe8 <MX_I2C1_Init+0x50>)
 8008fca:	2200      	movs	r2, #0
 8008fcc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008fce:	4b06      	ldr	r3, [pc, #24]	; (8008fe8 <MX_I2C1_Init+0x50>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008fd4:	4804      	ldr	r0, [pc, #16]	; (8008fe8 <MX_I2C1_Init+0x50>)
 8008fd6:	f001 f9a9 	bl	800a32c <HAL_I2C_Init>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d001      	beq.n	8008fe4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008fe0:	f000 f92e 	bl	8009240 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008fe4:	bf00      	nop
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	20000e5c 	.word	0x20000e5c
 8008fec:	40005400 	.word	0x40005400
 8008ff0:	00061a80 	.word	0x00061a80

08008ff4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008ffa:	f107 0308 	add.w	r3, r7, #8
 8008ffe:	2200      	movs	r2, #0
 8009000:	601a      	str	r2, [r3, #0]
 8009002:	605a      	str	r2, [r3, #4]
 8009004:	609a      	str	r2, [r3, #8]
 8009006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009008:	463b      	mov	r3, r7
 800900a:	2200      	movs	r2, #0
 800900c:	601a      	str	r2, [r3, #0]
 800900e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009010:	4b1f      	ldr	r3, [pc, #124]	; (8009090 <MX_TIM1_Init+0x9c>)
 8009012:	4a20      	ldr	r2, [pc, #128]	; (8009094 <MX_TIM1_Init+0xa0>)
 8009014:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8009016:	4b1e      	ldr	r3, [pc, #120]	; (8009090 <MX_TIM1_Init+0x9c>)
 8009018:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800901c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800901e:	4b1c      	ldr	r3, [pc, #112]	; (8009090 <MX_TIM1_Init+0x9c>)
 8009020:	2200      	movs	r2, #0
 8009022:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8009024:	4b1a      	ldr	r3, [pc, #104]	; (8009090 <MX_TIM1_Init+0x9c>)
 8009026:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800902a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800902c:	4b18      	ldr	r3, [pc, #96]	; (8009090 <MX_TIM1_Init+0x9c>)
 800902e:	2200      	movs	r2, #0
 8009030:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009032:	4b17      	ldr	r3, [pc, #92]	; (8009090 <MX_TIM1_Init+0x9c>)
 8009034:	2200      	movs	r2, #0
 8009036:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009038:	4b15      	ldr	r3, [pc, #84]	; (8009090 <MX_TIM1_Init+0x9c>)
 800903a:	2200      	movs	r2, #0
 800903c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800903e:	4814      	ldr	r0, [pc, #80]	; (8009090 <MX_TIM1_Init+0x9c>)
 8009040:	f002 ffa6 	bl	800bf90 <HAL_TIM_Base_Init>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d001      	beq.n	800904e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800904a:	f000 f8f9 	bl	8009240 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800904e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009052:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009054:	f107 0308 	add.w	r3, r7, #8
 8009058:	4619      	mov	r1, r3
 800905a:	480d      	ldr	r0, [pc, #52]	; (8009090 <MX_TIM1_Init+0x9c>)
 800905c:	f003 f950 	bl	800c300 <HAL_TIM_ConfigClockSource>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d001      	beq.n	800906a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8009066:	f000 f8eb 	bl	8009240 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800906a:	2300      	movs	r3, #0
 800906c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800906e:	2300      	movs	r3, #0
 8009070:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009072:	463b      	mov	r3, r7
 8009074:	4619      	mov	r1, r3
 8009076:	4806      	ldr	r0, [pc, #24]	; (8009090 <MX_TIM1_Init+0x9c>)
 8009078:	f003 fb3e 	bl	800c6f8 <HAL_TIMEx_MasterConfigSynchronization>
 800907c:	4603      	mov	r3, r0
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8009082:	f000 f8dd 	bl	8009240 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8009086:	bf00      	nop
 8009088:	3718      	adds	r7, #24
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	20000eb0 	.word	0x20000eb0
 8009094:	40012c00 	.word	0x40012c00

08009098 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800909c:	4b11      	ldr	r3, [pc, #68]	; (80090e4 <MX_USART1_UART_Init+0x4c>)
 800909e:	4a12      	ldr	r2, [pc, #72]	; (80090e8 <MX_USART1_UART_Init+0x50>)
 80090a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80090a2:	4b10      	ldr	r3, [pc, #64]	; (80090e4 <MX_USART1_UART_Init+0x4c>)
 80090a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80090a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80090aa:	4b0e      	ldr	r3, [pc, #56]	; (80090e4 <MX_USART1_UART_Init+0x4c>)
 80090ac:	2200      	movs	r2, #0
 80090ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80090b0:	4b0c      	ldr	r3, [pc, #48]	; (80090e4 <MX_USART1_UART_Init+0x4c>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80090b6:	4b0b      	ldr	r3, [pc, #44]	; (80090e4 <MX_USART1_UART_Init+0x4c>)
 80090b8:	2200      	movs	r2, #0
 80090ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80090bc:	4b09      	ldr	r3, [pc, #36]	; (80090e4 <MX_USART1_UART_Init+0x4c>)
 80090be:	220c      	movs	r2, #12
 80090c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80090c2:	4b08      	ldr	r3, [pc, #32]	; (80090e4 <MX_USART1_UART_Init+0x4c>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80090c8:	4b06      	ldr	r3, [pc, #24]	; (80090e4 <MX_USART1_UART_Init+0x4c>)
 80090ca:	2200      	movs	r2, #0
 80090cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80090ce:	4805      	ldr	r0, [pc, #20]	; (80090e4 <MX_USART1_UART_Init+0x4c>)
 80090d0:	f003 fb90 	bl	800c7f4 <HAL_UART_Init>
 80090d4:	4603      	mov	r3, r0
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d001      	beq.n	80090de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80090da:	f000 f8b1 	bl	8009240 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80090de:	bf00      	nop
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	20000ef8 	.word	0x20000ef8
 80090e8:	40013800 	.word	0x40013800

080090ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b088      	sub	sp, #32
 80090f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090f2:	f107 0310 	add.w	r3, r7, #16
 80090f6:	2200      	movs	r2, #0
 80090f8:	601a      	str	r2, [r3, #0]
 80090fa:	605a      	str	r2, [r3, #4]
 80090fc:	609a      	str	r2, [r3, #8]
 80090fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009100:	4b4b      	ldr	r3, [pc, #300]	; (8009230 <MX_GPIO_Init+0x144>)
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	4a4a      	ldr	r2, [pc, #296]	; (8009230 <MX_GPIO_Init+0x144>)
 8009106:	f043 0310 	orr.w	r3, r3, #16
 800910a:	6193      	str	r3, [r2, #24]
 800910c:	4b48      	ldr	r3, [pc, #288]	; (8009230 <MX_GPIO_Init+0x144>)
 800910e:	699b      	ldr	r3, [r3, #24]
 8009110:	f003 0310 	and.w	r3, r3, #16
 8009114:	60fb      	str	r3, [r7, #12]
 8009116:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009118:	4b45      	ldr	r3, [pc, #276]	; (8009230 <MX_GPIO_Init+0x144>)
 800911a:	699b      	ldr	r3, [r3, #24]
 800911c:	4a44      	ldr	r2, [pc, #272]	; (8009230 <MX_GPIO_Init+0x144>)
 800911e:	f043 0320 	orr.w	r3, r3, #32
 8009122:	6193      	str	r3, [r2, #24]
 8009124:	4b42      	ldr	r3, [pc, #264]	; (8009230 <MX_GPIO_Init+0x144>)
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	f003 0320 	and.w	r3, r3, #32
 800912c:	60bb      	str	r3, [r7, #8]
 800912e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009130:	4b3f      	ldr	r3, [pc, #252]	; (8009230 <MX_GPIO_Init+0x144>)
 8009132:	699b      	ldr	r3, [r3, #24]
 8009134:	4a3e      	ldr	r2, [pc, #248]	; (8009230 <MX_GPIO_Init+0x144>)
 8009136:	f043 0304 	orr.w	r3, r3, #4
 800913a:	6193      	str	r3, [r2, #24]
 800913c:	4b3c      	ldr	r3, [pc, #240]	; (8009230 <MX_GPIO_Init+0x144>)
 800913e:	699b      	ldr	r3, [r3, #24]
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	607b      	str	r3, [r7, #4]
 8009146:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009148:	4b39      	ldr	r3, [pc, #228]	; (8009230 <MX_GPIO_Init+0x144>)
 800914a:	699b      	ldr	r3, [r3, #24]
 800914c:	4a38      	ldr	r2, [pc, #224]	; (8009230 <MX_GPIO_Init+0x144>)
 800914e:	f043 0308 	orr.w	r3, r3, #8
 8009152:	6193      	str	r3, [r2, #24]
 8009154:	4b36      	ldr	r3, [pc, #216]	; (8009230 <MX_GPIO_Init+0x144>)
 8009156:	699b      	ldr	r3, [r3, #24]
 8009158:	f003 0308 	and.w	r3, r3, #8
 800915c:	603b      	str	r3, [r7, #0]
 800915e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8009160:	2200      	movs	r2, #0
 8009162:	21f0      	movs	r1, #240	; 0xf0
 8009164:	4833      	ldr	r0, [pc, #204]	; (8009234 <MX_GPIO_Init+0x148>)
 8009166:	f001 f8b0 	bl	800a2ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800916a:	2200      	movs	r2, #0
 800916c:	f241 0130 	movw	r1, #4144	; 0x1030
 8009170:	4831      	ldr	r0, [pc, #196]	; (8009238 <MX_GPIO_Init+0x14c>)
 8009172:	f001 f8aa 	bl	800a2ca <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8009176:	2200      	movs	r2, #0
 8009178:	f640 4107 	movw	r1, #3079	; 0xc07
 800917c:	482f      	ldr	r0, [pc, #188]	; (800923c <MX_GPIO_Init+0x150>)
 800917e:	f001 f8a4 	bl	800a2ca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8009182:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8009186:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009188:	2300      	movs	r3, #0
 800918a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800918c:	2300      	movs	r3, #0
 800918e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009190:	f107 0310 	add.w	r3, r7, #16
 8009194:	4619      	mov	r1, r3
 8009196:	4828      	ldr	r0, [pc, #160]	; (8009238 <MX_GPIO_Init+0x14c>)
 8009198:	f000 fe20 	bl	8009ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 800919c:	f248 130f 	movw	r3, #33039	; 0x810f
 80091a0:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80091a2:	2300      	movs	r3, #0
 80091a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091a6:	2300      	movs	r3, #0
 80091a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091aa:	f107 0310 	add.w	r3, r7, #16
 80091ae:	4619      	mov	r1, r3
 80091b0:	4820      	ldr	r0, [pc, #128]	; (8009234 <MX_GPIO_Init+0x148>)
 80091b2:	f000 fe13 	bl	8009ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80091b6:	23f0      	movs	r3, #240	; 0xf0
 80091b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80091ba:	2301      	movs	r3, #1
 80091bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091be:	2300      	movs	r3, #0
 80091c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091c2:	2302      	movs	r3, #2
 80091c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80091c6:	f107 0310 	add.w	r3, r7, #16
 80091ca:	4619      	mov	r1, r3
 80091cc:	4819      	ldr	r0, [pc, #100]	; (8009234 <MX_GPIO_Init+0x148>)
 80091ce:	f000 fe05 	bl	8009ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80091d2:	f241 0330 	movw	r3, #4144	; 0x1030
 80091d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80091d8:	2301      	movs	r3, #1
 80091da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091dc:	2300      	movs	r3, #0
 80091de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091e0:	2302      	movs	r3, #2
 80091e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80091e4:	f107 0310 	add.w	r3, r7, #16
 80091e8:	4619      	mov	r1, r3
 80091ea:	4813      	ldr	r0, [pc, #76]	; (8009238 <MX_GPIO_Init+0x14c>)
 80091ec:	f000 fdf6 	bl	8009ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80091f0:	f640 4307 	movw	r3, #3079	; 0xc07
 80091f4:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80091f6:	2301      	movs	r3, #1
 80091f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80091fa:	2300      	movs	r3, #0
 80091fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80091fe:	2302      	movs	r3, #2
 8009200:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009202:	f107 0310 	add.w	r3, r7, #16
 8009206:	4619      	mov	r1, r3
 8009208:	480c      	ldr	r0, [pc, #48]	; (800923c <MX_GPIO_Init+0x150>)
 800920a:	f000 fde7 	bl	8009ddc <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800920e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8009212:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009214:	2300      	movs	r3, #0
 8009216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009218:	2300      	movs	r3, #0
 800921a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800921c:	f107 0310 	add.w	r3, r7, #16
 8009220:	4619      	mov	r1, r3
 8009222:	4806      	ldr	r0, [pc, #24]	; (800923c <MX_GPIO_Init+0x150>)
 8009224:	f000 fdda 	bl	8009ddc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8009228:	bf00      	nop
 800922a:	3720      	adds	r7, #32
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}
 8009230:	40021000 	.word	0x40021000
 8009234:	40010800 	.word	0x40010800
 8009238:	40011000 	.word	0x40011000
 800923c:	40010c00 	.word	0x40010c00

08009240 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009240:	b480      	push	{r7}
 8009242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8009244:	bf00      	nop
 8009246:	46bd      	mov	sp, r7
 8009248:	bc80      	pop	{r7}
 800924a:	4770      	bx	lr

0800924c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8009252:	4b15      	ldr	r3, [pc, #84]	; (80092a8 <HAL_MspInit+0x5c>)
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	4a14      	ldr	r2, [pc, #80]	; (80092a8 <HAL_MspInit+0x5c>)
 8009258:	f043 0301 	orr.w	r3, r3, #1
 800925c:	6193      	str	r3, [r2, #24]
 800925e:	4b12      	ldr	r3, [pc, #72]	; (80092a8 <HAL_MspInit+0x5c>)
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	f003 0301 	and.w	r3, r3, #1
 8009266:	60bb      	str	r3, [r7, #8]
 8009268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800926a:	4b0f      	ldr	r3, [pc, #60]	; (80092a8 <HAL_MspInit+0x5c>)
 800926c:	69db      	ldr	r3, [r3, #28]
 800926e:	4a0e      	ldr	r2, [pc, #56]	; (80092a8 <HAL_MspInit+0x5c>)
 8009270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009274:	61d3      	str	r3, [r2, #28]
 8009276:	4b0c      	ldr	r3, [pc, #48]	; (80092a8 <HAL_MspInit+0x5c>)
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800927e:	607b      	str	r3, [r7, #4]
 8009280:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8009282:	4b0a      	ldr	r3, [pc, #40]	; (80092ac <HAL_MspInit+0x60>)
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	60fb      	str	r3, [r7, #12]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800928e:	60fb      	str	r3, [r7, #12]
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009296:	60fb      	str	r3, [r7, #12]
 8009298:	4a04      	ldr	r2, [pc, #16]	; (80092ac <HAL_MspInit+0x60>)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800929e:	bf00      	nop
 80092a0:	3714      	adds	r7, #20
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bc80      	pop	{r7}
 80092a6:	4770      	bx	lr
 80092a8:	40021000 	.word	0x40021000
 80092ac:	40010000 	.word	0x40010000

080092b0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b088      	sub	sp, #32
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092b8:	f107 0310 	add.w	r3, r7, #16
 80092bc:	2200      	movs	r2, #0
 80092be:	601a      	str	r2, [r3, #0]
 80092c0:	605a      	str	r2, [r3, #4]
 80092c2:	609a      	str	r2, [r3, #8]
 80092c4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a1c      	ldr	r2, [pc, #112]	; (800933c <HAL_CAN_MspInit+0x8c>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d131      	bne.n	8009334 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80092d0:	4b1b      	ldr	r3, [pc, #108]	; (8009340 <HAL_CAN_MspInit+0x90>)
 80092d2:	69db      	ldr	r3, [r3, #28]
 80092d4:	4a1a      	ldr	r2, [pc, #104]	; (8009340 <HAL_CAN_MspInit+0x90>)
 80092d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80092da:	61d3      	str	r3, [r2, #28]
 80092dc:	4b18      	ldr	r3, [pc, #96]	; (8009340 <HAL_CAN_MspInit+0x90>)
 80092de:	69db      	ldr	r3, [r3, #28]
 80092e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092e4:	60fb      	str	r3, [r7, #12]
 80092e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092e8:	4b15      	ldr	r3, [pc, #84]	; (8009340 <HAL_CAN_MspInit+0x90>)
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	4a14      	ldr	r2, [pc, #80]	; (8009340 <HAL_CAN_MspInit+0x90>)
 80092ee:	f043 0304 	orr.w	r3, r3, #4
 80092f2:	6193      	str	r3, [r2, #24]
 80092f4:	4b12      	ldr	r3, [pc, #72]	; (8009340 <HAL_CAN_MspInit+0x90>)
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	f003 0304 	and.w	r3, r3, #4
 80092fc:	60bb      	str	r3, [r7, #8]
 80092fe:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009300:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009304:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009306:	2300      	movs	r3, #0
 8009308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800930a:	2300      	movs	r3, #0
 800930c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800930e:	f107 0310 	add.w	r3, r7, #16
 8009312:	4619      	mov	r1, r3
 8009314:	480b      	ldr	r0, [pc, #44]	; (8009344 <HAL_CAN_MspInit+0x94>)
 8009316:	f000 fd61 	bl	8009ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800931a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800931e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009320:	2302      	movs	r3, #2
 8009322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009324:	2303      	movs	r3, #3
 8009326:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009328:	f107 0310 	add.w	r3, r7, #16
 800932c:	4619      	mov	r1, r3
 800932e:	4805      	ldr	r0, [pc, #20]	; (8009344 <HAL_CAN_MspInit+0x94>)
 8009330:	f000 fd54 	bl	8009ddc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8009334:	bf00      	nop
 8009336:	3720      	adds	r7, #32
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	40006400 	.word	0x40006400
 8009340:	40021000 	.word	0x40021000
 8009344:	40010800 	.word	0x40010800

08009348 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b088      	sub	sp, #32
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009350:	f107 0310 	add.w	r3, r7, #16
 8009354:	2200      	movs	r2, #0
 8009356:	601a      	str	r2, [r3, #0]
 8009358:	605a      	str	r2, [r3, #4]
 800935a:	609a      	str	r2, [r3, #8]
 800935c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a15      	ldr	r2, [pc, #84]	; (80093b8 <HAL_I2C_MspInit+0x70>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d123      	bne.n	80093b0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009368:	4b14      	ldr	r3, [pc, #80]	; (80093bc <HAL_I2C_MspInit+0x74>)
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	4a13      	ldr	r2, [pc, #76]	; (80093bc <HAL_I2C_MspInit+0x74>)
 800936e:	f043 0308 	orr.w	r3, r3, #8
 8009372:	6193      	str	r3, [r2, #24]
 8009374:	4b11      	ldr	r3, [pc, #68]	; (80093bc <HAL_I2C_MspInit+0x74>)
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	f003 0308 	and.w	r3, r3, #8
 800937c:	60fb      	str	r3, [r7, #12]
 800937e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009380:	23c0      	movs	r3, #192	; 0xc0
 8009382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009384:	2312      	movs	r3, #18
 8009386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009388:	2303      	movs	r3, #3
 800938a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800938c:	f107 0310 	add.w	r3, r7, #16
 8009390:	4619      	mov	r1, r3
 8009392:	480b      	ldr	r0, [pc, #44]	; (80093c0 <HAL_I2C_MspInit+0x78>)
 8009394:	f000 fd22 	bl	8009ddc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009398:	4b08      	ldr	r3, [pc, #32]	; (80093bc <HAL_I2C_MspInit+0x74>)
 800939a:	69db      	ldr	r3, [r3, #28]
 800939c:	4a07      	ldr	r2, [pc, #28]	; (80093bc <HAL_I2C_MspInit+0x74>)
 800939e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80093a2:	61d3      	str	r3, [r2, #28]
 80093a4:	4b05      	ldr	r3, [pc, #20]	; (80093bc <HAL_I2C_MspInit+0x74>)
 80093a6:	69db      	ldr	r3, [r3, #28]
 80093a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093ac:	60bb      	str	r3, [r7, #8]
 80093ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80093b0:	bf00      	nop
 80093b2:	3720      	adds	r7, #32
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	40005400 	.word	0x40005400
 80093bc:	40021000 	.word	0x40021000
 80093c0:	40010c00 	.word	0x40010c00

080093c4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a0a      	ldr	r2, [pc, #40]	; (80093fc <HAL_I2C_MspDeInit+0x38>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d10d      	bne.n	80093f2 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80093d6:	4b0a      	ldr	r3, [pc, #40]	; (8009400 <HAL_I2C_MspDeInit+0x3c>)
 80093d8:	69db      	ldr	r3, [r3, #28]
 80093da:	4a09      	ldr	r2, [pc, #36]	; (8009400 <HAL_I2C_MspDeInit+0x3c>)
 80093dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80093e0:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80093e2:	2140      	movs	r1, #64	; 0x40
 80093e4:	4807      	ldr	r0, [pc, #28]	; (8009404 <HAL_I2C_MspDeInit+0x40>)
 80093e6:	f000 fe8d 	bl	800a104 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80093ea:	2180      	movs	r1, #128	; 0x80
 80093ec:	4805      	ldr	r0, [pc, #20]	; (8009404 <HAL_I2C_MspDeInit+0x40>)
 80093ee:	f000 fe89 	bl	800a104 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80093f2:	bf00      	nop
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	40005400 	.word	0x40005400
 8009400:	40021000 	.word	0x40021000
 8009404:	40010c00 	.word	0x40010c00

08009408 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a0d      	ldr	r2, [pc, #52]	; (800944c <HAL_TIM_Base_MspInit+0x44>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d113      	bne.n	8009442 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800941a:	4b0d      	ldr	r3, [pc, #52]	; (8009450 <HAL_TIM_Base_MspInit+0x48>)
 800941c:	699b      	ldr	r3, [r3, #24]
 800941e:	4a0c      	ldr	r2, [pc, #48]	; (8009450 <HAL_TIM_Base_MspInit+0x48>)
 8009420:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009424:	6193      	str	r3, [r2, #24]
 8009426:	4b0a      	ldr	r3, [pc, #40]	; (8009450 <HAL_TIM_Base_MspInit+0x48>)
 8009428:	699b      	ldr	r3, [r3, #24]
 800942a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800942e:	60fb      	str	r3, [r7, #12]
 8009430:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8009432:	2200      	movs	r2, #0
 8009434:	2100      	movs	r1, #0
 8009436:	2019      	movs	r0, #25
 8009438:	f000 fb57 	bl	8009aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800943c:	2019      	movs	r0, #25
 800943e:	f000 fb70 	bl	8009b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8009442:	bf00      	nop
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	40012c00 	.word	0x40012c00
 8009450:	40021000 	.word	0x40021000

08009454 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b088      	sub	sp, #32
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800945c:	f107 0310 	add.w	r3, r7, #16
 8009460:	2200      	movs	r2, #0
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	605a      	str	r2, [r3, #4]
 8009466:	609a      	str	r2, [r3, #8]
 8009468:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a20      	ldr	r2, [pc, #128]	; (80094f0 <HAL_UART_MspInit+0x9c>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d139      	bne.n	80094e8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009474:	4b1f      	ldr	r3, [pc, #124]	; (80094f4 <HAL_UART_MspInit+0xa0>)
 8009476:	699b      	ldr	r3, [r3, #24]
 8009478:	4a1e      	ldr	r2, [pc, #120]	; (80094f4 <HAL_UART_MspInit+0xa0>)
 800947a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800947e:	6193      	str	r3, [r2, #24]
 8009480:	4b1c      	ldr	r3, [pc, #112]	; (80094f4 <HAL_UART_MspInit+0xa0>)
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009488:	60fb      	str	r3, [r7, #12]
 800948a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800948c:	4b19      	ldr	r3, [pc, #100]	; (80094f4 <HAL_UART_MspInit+0xa0>)
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	4a18      	ldr	r2, [pc, #96]	; (80094f4 <HAL_UART_MspInit+0xa0>)
 8009492:	f043 0304 	orr.w	r3, r3, #4
 8009496:	6193      	str	r3, [r2, #24]
 8009498:	4b16      	ldr	r3, [pc, #88]	; (80094f4 <HAL_UART_MspInit+0xa0>)
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	f003 0304 	and.w	r3, r3, #4
 80094a0:	60bb      	str	r3, [r7, #8]
 80094a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80094a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80094a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094aa:	2302      	movs	r3, #2
 80094ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80094ae:	2303      	movs	r3, #3
 80094b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094b2:	f107 0310 	add.w	r3, r7, #16
 80094b6:	4619      	mov	r1, r3
 80094b8:	480f      	ldr	r0, [pc, #60]	; (80094f8 <HAL_UART_MspInit+0xa4>)
 80094ba:	f000 fc8f 	bl	8009ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80094be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80094c4:	2300      	movs	r3, #0
 80094c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094c8:	2300      	movs	r3, #0
 80094ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094cc:	f107 0310 	add.w	r3, r7, #16
 80094d0:	4619      	mov	r1, r3
 80094d2:	4809      	ldr	r0, [pc, #36]	; (80094f8 <HAL_UART_MspInit+0xa4>)
 80094d4:	f000 fc82 	bl	8009ddc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80094d8:	2200      	movs	r2, #0
 80094da:	2100      	movs	r1, #0
 80094dc:	2025      	movs	r0, #37	; 0x25
 80094de:	f000 fb04 	bl	8009aea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80094e2:	2025      	movs	r0, #37	; 0x25
 80094e4:	f000 fb1d 	bl	8009b22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80094e8:	bf00      	nop
 80094ea:	3720      	adds	r7, #32
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	40013800 	.word	0x40013800
 80094f4:	40021000 	.word	0x40021000
 80094f8:	40010800 	.word	0x40010800

080094fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80094fc:	b480      	push	{r7}
 80094fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009500:	e7fe      	b.n	8009500 <NMI_Handler+0x4>

08009502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009502:	b480      	push	{r7}
 8009504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009506:	e7fe      	b.n	8009506 <HardFault_Handler+0x4>

08009508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009508:	b480      	push	{r7}
 800950a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800950c:	e7fe      	b.n	800950c <MemManage_Handler+0x4>

0800950e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800950e:	b480      	push	{r7}
 8009510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009512:	e7fe      	b.n	8009512 <BusFault_Handler+0x4>

08009514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009514:	b480      	push	{r7}
 8009516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009518:	e7fe      	b.n	8009518 <UsageFault_Handler+0x4>

0800951a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800951a:	b480      	push	{r7}
 800951c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800951e:	bf00      	nop
 8009520:	46bd      	mov	sp, r7
 8009522:	bc80      	pop	{r7}
 8009524:	4770      	bx	lr

08009526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009526:	b480      	push	{r7}
 8009528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800952a:	bf00      	nop
 800952c:	46bd      	mov	sp, r7
 800952e:	bc80      	pop	{r7}
 8009530:	4770      	bx	lr

08009532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009532:	b480      	push	{r7}
 8009534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009536:	bf00      	nop
 8009538:	46bd      	mov	sp, r7
 800953a:	bc80      	pop	{r7}
 800953c:	4770      	bx	lr

0800953e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009542:	f000 f8bf 	bl	80096c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009546:	bf00      	nop
 8009548:	bd80      	pop	{r7, pc}
	...

0800954c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009550:	4802      	ldr	r0, [pc, #8]	; (800955c <TIM1_UP_IRQHandler+0x10>)
 8009552:	f002 fdcd 	bl	800c0f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009556:	bf00      	nop
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	20000eb0 	.word	0x20000eb0

08009560 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009564:	4802      	ldr	r0, [pc, #8]	; (8009570 <USART1_IRQHandler+0x10>)
 8009566:	f003 f9ef 	bl	800c948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800956a:	bf00      	nop
 800956c:	bd80      	pop	{r7, pc}
 800956e:	bf00      	nop
 8009570:	20000ef8 	.word	0x20000ef8

08009574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800957c:	4a14      	ldr	r2, [pc, #80]	; (80095d0 <_sbrk+0x5c>)
 800957e:	4b15      	ldr	r3, [pc, #84]	; (80095d4 <_sbrk+0x60>)
 8009580:	1ad3      	subs	r3, r2, r3
 8009582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009588:	4b13      	ldr	r3, [pc, #76]	; (80095d8 <_sbrk+0x64>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d102      	bne.n	8009596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009590:	4b11      	ldr	r3, [pc, #68]	; (80095d8 <_sbrk+0x64>)
 8009592:	4a12      	ldr	r2, [pc, #72]	; (80095dc <_sbrk+0x68>)
 8009594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009596:	4b10      	ldr	r3, [pc, #64]	; (80095d8 <_sbrk+0x64>)
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4413      	add	r3, r2
 800959e:	693a      	ldr	r2, [r7, #16]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d207      	bcs.n	80095b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80095a4:	f004 f878 	bl	800d698 <__errno>
 80095a8:	4603      	mov	r3, r0
 80095aa:	220c      	movs	r2, #12
 80095ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80095ae:	f04f 33ff 	mov.w	r3, #4294967295
 80095b2:	e009      	b.n	80095c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80095b4:	4b08      	ldr	r3, [pc, #32]	; (80095d8 <_sbrk+0x64>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80095ba:	4b07      	ldr	r3, [pc, #28]	; (80095d8 <_sbrk+0x64>)
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4413      	add	r3, r2
 80095c2:	4a05      	ldr	r2, [pc, #20]	; (80095d8 <_sbrk+0x64>)
 80095c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80095c6:	68fb      	ldr	r3, [r7, #12]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3718      	adds	r7, #24
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	2000c000 	.word	0x2000c000
 80095d4:	00000400 	.word	0x00000400
 80095d8:	20000f40 	.word	0x20000f40
 80095dc:	20001090 	.word	0x20001090

080095e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80095e0:	b480      	push	{r7}
 80095e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80095e4:	bf00      	nop
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bc80      	pop	{r7}
 80095ea:	4770      	bx	lr

080095ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80095ec:	480c      	ldr	r0, [pc, #48]	; (8009620 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80095ee:	490d      	ldr	r1, [pc, #52]	; (8009624 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80095f0:	4a0d      	ldr	r2, [pc, #52]	; (8009628 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80095f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80095f4:	e002      	b.n	80095fc <LoopCopyDataInit>

080095f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80095f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80095f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80095fa:	3304      	adds	r3, #4

080095fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80095fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80095fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009600:	d3f9      	bcc.n	80095f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009602:	4a0a      	ldr	r2, [pc, #40]	; (800962c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009604:	4c0a      	ldr	r4, [pc, #40]	; (8009630 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009608:	e001      	b.n	800960e <LoopFillZerobss>

0800960a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800960a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800960c:	3204      	adds	r2, #4

0800960e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800960e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009610:	d3fb      	bcc.n	800960a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009612:	f7ff ffe5 	bl	80095e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009616:	f004 f845 	bl	800d6a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800961a:	f7ff fb97 	bl	8008d4c <main>
  bx lr
 800961e:	4770      	bx	lr
  ldr r0, =_sdata
 8009620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009624:	20000a20 	.word	0x20000a20
  ldr r2, =_sidata
 8009628:	0800ed9c 	.word	0x0800ed9c
  ldr r2, =_sbss
 800962c:	20000a20 	.word	0x20000a20
  ldr r4, =_ebss
 8009630:	20001090 	.word	0x20001090

08009634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009634:	e7fe      	b.n	8009634 <ADC1_2_IRQHandler>
	...

08009638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800963c:	4b08      	ldr	r3, [pc, #32]	; (8009660 <HAL_Init+0x28>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a07      	ldr	r2, [pc, #28]	; (8009660 <HAL_Init+0x28>)
 8009642:	f043 0310 	orr.w	r3, r3, #16
 8009646:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009648:	2003      	movs	r0, #3
 800964a:	f000 fa43 	bl	8009ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800964e:	200f      	movs	r0, #15
 8009650:	f000 f808 	bl	8009664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009654:	f7ff fdfa 	bl	800924c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	40022000 	.word	0x40022000

08009664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800966c:	4b12      	ldr	r3, [pc, #72]	; (80096b8 <HAL_InitTick+0x54>)
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	4b12      	ldr	r3, [pc, #72]	; (80096bc <HAL_InitTick+0x58>)
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	4619      	mov	r1, r3
 8009676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800967a:	fbb3 f3f1 	udiv	r3, r3, r1
 800967e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009682:	4618      	mov	r0, r3
 8009684:	f000 fa5b 	bl	8009b3e <HAL_SYSTICK_Config>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	d001      	beq.n	8009692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800968e:	2301      	movs	r3, #1
 8009690:	e00e      	b.n	80096b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2b0f      	cmp	r3, #15
 8009696:	d80a      	bhi.n	80096ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009698:	2200      	movs	r2, #0
 800969a:	6879      	ldr	r1, [r7, #4]
 800969c:	f04f 30ff 	mov.w	r0, #4294967295
 80096a0:	f000 fa23 	bl	8009aea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80096a4:	4a06      	ldr	r2, [pc, #24]	; (80096c0 <HAL_InitTick+0x5c>)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	e000      	b.n	80096b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	200009c4 	.word	0x200009c4
 80096bc:	200009cc 	.word	0x200009cc
 80096c0:	200009c8 	.word	0x200009c8

080096c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80096c4:	b480      	push	{r7}
 80096c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80096c8:	4b05      	ldr	r3, [pc, #20]	; (80096e0 <HAL_IncTick+0x1c>)
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	461a      	mov	r2, r3
 80096ce:	4b05      	ldr	r3, [pc, #20]	; (80096e4 <HAL_IncTick+0x20>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	4413      	add	r3, r2
 80096d4:	4a03      	ldr	r2, [pc, #12]	; (80096e4 <HAL_IncTick+0x20>)
 80096d6:	6013      	str	r3, [r2, #0]
}
 80096d8:	bf00      	nop
 80096da:	46bd      	mov	sp, r7
 80096dc:	bc80      	pop	{r7}
 80096de:	4770      	bx	lr
 80096e0:	200009cc 	.word	0x200009cc
 80096e4:	20000f44 	.word	0x20000f44

080096e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80096e8:	b480      	push	{r7}
 80096ea:	af00      	add	r7, sp, #0
  return uwTick;
 80096ec:	4b02      	ldr	r3, [pc, #8]	; (80096f8 <HAL_GetTick+0x10>)
 80096ee:	681b      	ldr	r3, [r3, #0]
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bc80      	pop	{r7}
 80096f6:	4770      	bx	lr
 80096f8:	20000f44 	.word	0x20000f44

080096fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009704:	f7ff fff0 	bl	80096e8 <HAL_GetTick>
 8009708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009714:	d005      	beq.n	8009722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009716:	4b0a      	ldr	r3, [pc, #40]	; (8009740 <HAL_Delay+0x44>)
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	461a      	mov	r2, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	4413      	add	r3, r2
 8009720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009722:	bf00      	nop
 8009724:	f7ff ffe0 	bl	80096e8 <HAL_GetTick>
 8009728:	4602      	mov	r2, r0
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	1ad3      	subs	r3, r2, r3
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	429a      	cmp	r2, r3
 8009732:	d8f7      	bhi.n	8009724 <HAL_Delay+0x28>
  {
  }
}
 8009734:	bf00      	nop
 8009736:	bf00      	nop
 8009738:	3710      	adds	r7, #16
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	200009cc 	.word	0x200009cc

08009744 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d101      	bne.n	8009756 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e0ed      	b.n	8009932 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 3020 	ldrb.w	r3, [r3, #32]
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b00      	cmp	r3, #0
 8009760:	d102      	bne.n	8009768 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f7ff fda4 	bl	80092b0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	681a      	ldr	r2, [r3, #0]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f042 0201 	orr.w	r2, r2, #1
 8009776:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009778:	f7ff ffb6 	bl	80096e8 <HAL_GetTick>
 800977c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800977e:	e012      	b.n	80097a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009780:	f7ff ffb2 	bl	80096e8 <HAL_GetTick>
 8009784:	4602      	mov	r2, r0
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	2b0a      	cmp	r3, #10
 800978c:	d90b      	bls.n	80097a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009792:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2205      	movs	r2, #5
 800979e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	e0c5      	b.n	8009932 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	685b      	ldr	r3, [r3, #4]
 80097ac:	f003 0301 	and.w	r3, r3, #1
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d0e5      	beq.n	8009780 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f022 0202 	bic.w	r2, r2, #2
 80097c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80097c4:	f7ff ff90 	bl	80096e8 <HAL_GetTick>
 80097c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80097ca:	e012      	b.n	80097f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80097cc:	f7ff ff8c 	bl	80096e8 <HAL_GetTick>
 80097d0:	4602      	mov	r2, r0
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	1ad3      	subs	r3, r2, r3
 80097d6:	2b0a      	cmp	r3, #10
 80097d8:	d90b      	bls.n	80097f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2205      	movs	r2, #5
 80097ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	e09f      	b.n	8009932 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	f003 0302 	and.w	r3, r3, #2
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d1e5      	bne.n	80097cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	7e1b      	ldrb	r3, [r3, #24]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d108      	bne.n	800981a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009816:	601a      	str	r2, [r3, #0]
 8009818:	e007      	b.n	800982a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009828:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	7e5b      	ldrb	r3, [r3, #25]
 800982e:	2b01      	cmp	r3, #1
 8009830:	d108      	bne.n	8009844 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009840:	601a      	str	r2, [r3, #0]
 8009842:	e007      	b.n	8009854 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009852:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	7e9b      	ldrb	r3, [r3, #26]
 8009858:	2b01      	cmp	r3, #1
 800985a:	d108      	bne.n	800986e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f042 0220 	orr.w	r2, r2, #32
 800986a:	601a      	str	r2, [r3, #0]
 800986c:	e007      	b.n	800987e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f022 0220 	bic.w	r2, r2, #32
 800987c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	7edb      	ldrb	r3, [r3, #27]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d108      	bne.n	8009898 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f022 0210 	bic.w	r2, r2, #16
 8009894:	601a      	str	r2, [r3, #0]
 8009896:	e007      	b.n	80098a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f042 0210 	orr.w	r2, r2, #16
 80098a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	7f1b      	ldrb	r3, [r3, #28]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d108      	bne.n	80098c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f042 0208 	orr.w	r2, r2, #8
 80098be:	601a      	str	r2, [r3, #0]
 80098c0:	e007      	b.n	80098d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f022 0208 	bic.w	r2, r2, #8
 80098d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	7f5b      	ldrb	r3, [r3, #29]
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d108      	bne.n	80098ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f042 0204 	orr.w	r2, r2, #4
 80098e8:	601a      	str	r2, [r3, #0]
 80098ea:	e007      	b.n	80098fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f022 0204 	bic.w	r2, r2, #4
 80098fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	689a      	ldr	r2, [r3, #8]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	431a      	orrs	r2, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	431a      	orrs	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	695b      	ldr	r3, [r3, #20]
 8009910:	ea42 0103 	orr.w	r1, r2, r3
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	1e5a      	subs	r2, r3, #1
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	430a      	orrs	r2, r1
 8009920:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
	...

0800993c <__NVIC_SetPriorityGrouping>:
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f003 0307 	and.w	r3, r3, #7
 800994a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800994c:	4b0c      	ldr	r3, [pc, #48]	; (8009980 <__NVIC_SetPriorityGrouping+0x44>)
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009958:	4013      	ands	r3, r2
 800995a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800996c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800996e:	4a04      	ldr	r2, [pc, #16]	; (8009980 <__NVIC_SetPriorityGrouping+0x44>)
 8009970:	68bb      	ldr	r3, [r7, #8]
 8009972:	60d3      	str	r3, [r2, #12]
}
 8009974:	bf00      	nop
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	bc80      	pop	{r7}
 800997c:	4770      	bx	lr
 800997e:	bf00      	nop
 8009980:	e000ed00 	.word	0xe000ed00

08009984 <__NVIC_GetPriorityGrouping>:
{
 8009984:	b480      	push	{r7}
 8009986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009988:	4b04      	ldr	r3, [pc, #16]	; (800999c <__NVIC_GetPriorityGrouping+0x18>)
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	0a1b      	lsrs	r3, r3, #8
 800998e:	f003 0307 	and.w	r3, r3, #7
}
 8009992:	4618      	mov	r0, r3
 8009994:	46bd      	mov	sp, r7
 8009996:	bc80      	pop	{r7}
 8009998:	4770      	bx	lr
 800999a:	bf00      	nop
 800999c:	e000ed00 	.word	0xe000ed00

080099a0 <__NVIC_EnableIRQ>:
{
 80099a0:	b480      	push	{r7}
 80099a2:	b083      	sub	sp, #12
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	4603      	mov	r3, r0
 80099a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	db0b      	blt.n	80099ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80099b2:	79fb      	ldrb	r3, [r7, #7]
 80099b4:	f003 021f 	and.w	r2, r3, #31
 80099b8:	4906      	ldr	r1, [pc, #24]	; (80099d4 <__NVIC_EnableIRQ+0x34>)
 80099ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099be:	095b      	lsrs	r3, r3, #5
 80099c0:	2001      	movs	r0, #1
 80099c2:	fa00 f202 	lsl.w	r2, r0, r2
 80099c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80099ca:	bf00      	nop
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bc80      	pop	{r7}
 80099d2:	4770      	bx	lr
 80099d4:	e000e100 	.word	0xe000e100

080099d8 <__NVIC_SetPriority>:
{
 80099d8:	b480      	push	{r7}
 80099da:	b083      	sub	sp, #12
 80099dc:	af00      	add	r7, sp, #0
 80099de:	4603      	mov	r3, r0
 80099e0:	6039      	str	r1, [r7, #0]
 80099e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	db0a      	blt.n	8009a02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	b2da      	uxtb	r2, r3
 80099f0:	490c      	ldr	r1, [pc, #48]	; (8009a24 <__NVIC_SetPriority+0x4c>)
 80099f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099f6:	0112      	lsls	r2, r2, #4
 80099f8:	b2d2      	uxtb	r2, r2
 80099fa:	440b      	add	r3, r1
 80099fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009a00:	e00a      	b.n	8009a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	b2da      	uxtb	r2, r3
 8009a06:	4908      	ldr	r1, [pc, #32]	; (8009a28 <__NVIC_SetPriority+0x50>)
 8009a08:	79fb      	ldrb	r3, [r7, #7]
 8009a0a:	f003 030f 	and.w	r3, r3, #15
 8009a0e:	3b04      	subs	r3, #4
 8009a10:	0112      	lsls	r2, r2, #4
 8009a12:	b2d2      	uxtb	r2, r2
 8009a14:	440b      	add	r3, r1
 8009a16:	761a      	strb	r2, [r3, #24]
}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bc80      	pop	{r7}
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	e000e100 	.word	0xe000e100
 8009a28:	e000ed00 	.word	0xe000ed00

08009a2c <NVIC_EncodePriority>:
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b089      	sub	sp, #36	; 0x24
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f003 0307 	and.w	r3, r3, #7
 8009a3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	f1c3 0307 	rsb	r3, r3, #7
 8009a46:	2b04      	cmp	r3, #4
 8009a48:	bf28      	it	cs
 8009a4a:	2304      	movcs	r3, #4
 8009a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	3304      	adds	r3, #4
 8009a52:	2b06      	cmp	r3, #6
 8009a54:	d902      	bls.n	8009a5c <NVIC_EncodePriority+0x30>
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	3b03      	subs	r3, #3
 8009a5a:	e000      	b.n	8009a5e <NVIC_EncodePriority+0x32>
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009a60:	f04f 32ff 	mov.w	r2, #4294967295
 8009a64:	69bb      	ldr	r3, [r7, #24]
 8009a66:	fa02 f303 	lsl.w	r3, r2, r3
 8009a6a:	43da      	mvns	r2, r3
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	401a      	ands	r2, r3
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009a74:	f04f 31ff 	mov.w	r1, #4294967295
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009a7e:	43d9      	mvns	r1, r3
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009a84:	4313      	orrs	r3, r2
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3724      	adds	r7, #36	; 0x24
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bc80      	pop	{r7}
 8009a8e:	4770      	bx	lr

08009a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009aa0:	d301      	bcc.n	8009aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e00f      	b.n	8009ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009aa6:	4a0a      	ldr	r2, [pc, #40]	; (8009ad0 <SysTick_Config+0x40>)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009aae:	210f      	movs	r1, #15
 8009ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab4:	f7ff ff90 	bl	80099d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009ab8:	4b05      	ldr	r3, [pc, #20]	; (8009ad0 <SysTick_Config+0x40>)
 8009aba:	2200      	movs	r2, #0
 8009abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009abe:	4b04      	ldr	r3, [pc, #16]	; (8009ad0 <SysTick_Config+0x40>)
 8009ac0:	2207      	movs	r2, #7
 8009ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009ac4:	2300      	movs	r3, #0
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3708      	adds	r7, #8
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	e000e010 	.word	0xe000e010

08009ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b082      	sub	sp, #8
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f7ff ff2d 	bl	800993c <__NVIC_SetPriorityGrouping>
}
 8009ae2:	bf00      	nop
 8009ae4:	3708      	adds	r7, #8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b086      	sub	sp, #24
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	4603      	mov	r3, r0
 8009af2:	60b9      	str	r1, [r7, #8]
 8009af4:	607a      	str	r2, [r7, #4]
 8009af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009af8:	2300      	movs	r3, #0
 8009afa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009afc:	f7ff ff42 	bl	8009984 <__NVIC_GetPriorityGrouping>
 8009b00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	68b9      	ldr	r1, [r7, #8]
 8009b06:	6978      	ldr	r0, [r7, #20]
 8009b08:	f7ff ff90 	bl	8009a2c <NVIC_EncodePriority>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009b12:	4611      	mov	r1, r2
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7ff ff5f 	bl	80099d8 <__NVIC_SetPriority>
}
 8009b1a:	bf00      	nop
 8009b1c:	3718      	adds	r7, #24
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b082      	sub	sp, #8
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	4603      	mov	r3, r0
 8009b2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7ff ff35 	bl	80099a0 <__NVIC_EnableIRQ>
}
 8009b36:	bf00      	nop
 8009b38:	3708      	adds	r7, #8
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b082      	sub	sp, #8
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7ff ffa2 	bl	8009a90 <SysTick_Config>
 8009b4c:	4603      	mov	r3, r0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009b56:	b480      	push	{r7}
 8009b58:	b085      	sub	sp, #20
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b02      	cmp	r3, #2
 8009b6c:	d008      	beq.n	8009b80 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2204      	movs	r2, #4
 8009b72:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e020      	b.n	8009bc2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f022 020e 	bic.w	r2, r2, #14
 8009b8e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f022 0201 	bic.w	r2, r2, #1
 8009b9e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ba8:	2101      	movs	r1, #1
 8009baa:	fa01 f202 	lsl.w	r2, r1, r2
 8009bae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3714      	adds	r7, #20
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bc80      	pop	{r7}
 8009bca:	4770      	bx	lr

08009bcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	2b02      	cmp	r3, #2
 8009be2:	d005      	beq.n	8009bf0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2204      	movs	r2, #4
 8009be8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	73fb      	strb	r3, [r7, #15]
 8009bee:	e0d6      	b.n	8009d9e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f022 020e 	bic.w	r2, r2, #14
 8009bfe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	681a      	ldr	r2, [r3, #0]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f022 0201 	bic.w	r2, r2, #1
 8009c0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	461a      	mov	r2, r3
 8009c16:	4b64      	ldr	r3, [pc, #400]	; (8009da8 <HAL_DMA_Abort_IT+0x1dc>)
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d958      	bls.n	8009cce <HAL_DMA_Abort_IT+0x102>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a62      	ldr	r2, [pc, #392]	; (8009dac <HAL_DMA_Abort_IT+0x1e0>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d04f      	beq.n	8009cc6 <HAL_DMA_Abort_IT+0xfa>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a61      	ldr	r2, [pc, #388]	; (8009db0 <HAL_DMA_Abort_IT+0x1e4>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d048      	beq.n	8009cc2 <HAL_DMA_Abort_IT+0xf6>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a5f      	ldr	r2, [pc, #380]	; (8009db4 <HAL_DMA_Abort_IT+0x1e8>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d040      	beq.n	8009cbc <HAL_DMA_Abort_IT+0xf0>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a5e      	ldr	r2, [pc, #376]	; (8009db8 <HAL_DMA_Abort_IT+0x1ec>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d038      	beq.n	8009cb6 <HAL_DMA_Abort_IT+0xea>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	4a5c      	ldr	r2, [pc, #368]	; (8009dbc <HAL_DMA_Abort_IT+0x1f0>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d030      	beq.n	8009cb0 <HAL_DMA_Abort_IT+0xe4>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a5b      	ldr	r2, [pc, #364]	; (8009dc0 <HAL_DMA_Abort_IT+0x1f4>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d028      	beq.n	8009caa <HAL_DMA_Abort_IT+0xde>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a52      	ldr	r2, [pc, #328]	; (8009da8 <HAL_DMA_Abort_IT+0x1dc>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d020      	beq.n	8009ca4 <HAL_DMA_Abort_IT+0xd8>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a57      	ldr	r2, [pc, #348]	; (8009dc4 <HAL_DMA_Abort_IT+0x1f8>)
 8009c68:	4293      	cmp	r3, r2
 8009c6a:	d019      	beq.n	8009ca0 <HAL_DMA_Abort_IT+0xd4>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4a55      	ldr	r2, [pc, #340]	; (8009dc8 <HAL_DMA_Abort_IT+0x1fc>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d012      	beq.n	8009c9c <HAL_DMA_Abort_IT+0xd0>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a54      	ldr	r2, [pc, #336]	; (8009dcc <HAL_DMA_Abort_IT+0x200>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d00a      	beq.n	8009c96 <HAL_DMA_Abort_IT+0xca>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a52      	ldr	r2, [pc, #328]	; (8009dd0 <HAL_DMA_Abort_IT+0x204>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d102      	bne.n	8009c90 <HAL_DMA_Abort_IT+0xc4>
 8009c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c8e:	e01b      	b.n	8009cc8 <HAL_DMA_Abort_IT+0xfc>
 8009c90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009c94:	e018      	b.n	8009cc8 <HAL_DMA_Abort_IT+0xfc>
 8009c96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c9a:	e015      	b.n	8009cc8 <HAL_DMA_Abort_IT+0xfc>
 8009c9c:	2310      	movs	r3, #16
 8009c9e:	e013      	b.n	8009cc8 <HAL_DMA_Abort_IT+0xfc>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	e011      	b.n	8009cc8 <HAL_DMA_Abort_IT+0xfc>
 8009ca4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ca8:	e00e      	b.n	8009cc8 <HAL_DMA_Abort_IT+0xfc>
 8009caa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009cae:	e00b      	b.n	8009cc8 <HAL_DMA_Abort_IT+0xfc>
 8009cb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009cb4:	e008      	b.n	8009cc8 <HAL_DMA_Abort_IT+0xfc>
 8009cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cba:	e005      	b.n	8009cc8 <HAL_DMA_Abort_IT+0xfc>
 8009cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009cc0:	e002      	b.n	8009cc8 <HAL_DMA_Abort_IT+0xfc>
 8009cc2:	2310      	movs	r3, #16
 8009cc4:	e000      	b.n	8009cc8 <HAL_DMA_Abort_IT+0xfc>
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	4a42      	ldr	r2, [pc, #264]	; (8009dd4 <HAL_DMA_Abort_IT+0x208>)
 8009cca:	6053      	str	r3, [r2, #4]
 8009ccc:	e057      	b.n	8009d7e <HAL_DMA_Abort_IT+0x1b2>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a36      	ldr	r2, [pc, #216]	; (8009dac <HAL_DMA_Abort_IT+0x1e0>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d04f      	beq.n	8009d78 <HAL_DMA_Abort_IT+0x1ac>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a34      	ldr	r2, [pc, #208]	; (8009db0 <HAL_DMA_Abort_IT+0x1e4>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d048      	beq.n	8009d74 <HAL_DMA_Abort_IT+0x1a8>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a33      	ldr	r2, [pc, #204]	; (8009db4 <HAL_DMA_Abort_IT+0x1e8>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d040      	beq.n	8009d6e <HAL_DMA_Abort_IT+0x1a2>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a31      	ldr	r2, [pc, #196]	; (8009db8 <HAL_DMA_Abort_IT+0x1ec>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d038      	beq.n	8009d68 <HAL_DMA_Abort_IT+0x19c>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a30      	ldr	r2, [pc, #192]	; (8009dbc <HAL_DMA_Abort_IT+0x1f0>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d030      	beq.n	8009d62 <HAL_DMA_Abort_IT+0x196>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a2e      	ldr	r2, [pc, #184]	; (8009dc0 <HAL_DMA_Abort_IT+0x1f4>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d028      	beq.n	8009d5c <HAL_DMA_Abort_IT+0x190>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a26      	ldr	r2, [pc, #152]	; (8009da8 <HAL_DMA_Abort_IT+0x1dc>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d020      	beq.n	8009d56 <HAL_DMA_Abort_IT+0x18a>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a2a      	ldr	r2, [pc, #168]	; (8009dc4 <HAL_DMA_Abort_IT+0x1f8>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d019      	beq.n	8009d52 <HAL_DMA_Abort_IT+0x186>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a29      	ldr	r2, [pc, #164]	; (8009dc8 <HAL_DMA_Abort_IT+0x1fc>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d012      	beq.n	8009d4e <HAL_DMA_Abort_IT+0x182>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a27      	ldr	r2, [pc, #156]	; (8009dcc <HAL_DMA_Abort_IT+0x200>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d00a      	beq.n	8009d48 <HAL_DMA_Abort_IT+0x17c>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a26      	ldr	r2, [pc, #152]	; (8009dd0 <HAL_DMA_Abort_IT+0x204>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d102      	bne.n	8009d42 <HAL_DMA_Abort_IT+0x176>
 8009d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d40:	e01b      	b.n	8009d7a <HAL_DMA_Abort_IT+0x1ae>
 8009d42:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d46:	e018      	b.n	8009d7a <HAL_DMA_Abort_IT+0x1ae>
 8009d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d4c:	e015      	b.n	8009d7a <HAL_DMA_Abort_IT+0x1ae>
 8009d4e:	2310      	movs	r3, #16
 8009d50:	e013      	b.n	8009d7a <HAL_DMA_Abort_IT+0x1ae>
 8009d52:	2301      	movs	r3, #1
 8009d54:	e011      	b.n	8009d7a <HAL_DMA_Abort_IT+0x1ae>
 8009d56:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d5a:	e00e      	b.n	8009d7a <HAL_DMA_Abort_IT+0x1ae>
 8009d5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009d60:	e00b      	b.n	8009d7a <HAL_DMA_Abort_IT+0x1ae>
 8009d62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d66:	e008      	b.n	8009d7a <HAL_DMA_Abort_IT+0x1ae>
 8009d68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d6c:	e005      	b.n	8009d7a <HAL_DMA_Abort_IT+0x1ae>
 8009d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d72:	e002      	b.n	8009d7a <HAL_DMA_Abort_IT+0x1ae>
 8009d74:	2310      	movs	r3, #16
 8009d76:	e000      	b.n	8009d7a <HAL_DMA_Abort_IT+0x1ae>
 8009d78:	2301      	movs	r3, #1
 8009d7a:	4a17      	ldr	r2, [pc, #92]	; (8009dd8 <HAL_DMA_Abort_IT+0x20c>)
 8009d7c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2201      	movs	r2, #1
 8009d82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d003      	beq.n	8009d9e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	4798      	blx	r3
    } 
  }
  return status;
 8009d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3710      	adds	r7, #16
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	40020080 	.word	0x40020080
 8009dac:	40020008 	.word	0x40020008
 8009db0:	4002001c 	.word	0x4002001c
 8009db4:	40020030 	.word	0x40020030
 8009db8:	40020044 	.word	0x40020044
 8009dbc:	40020058 	.word	0x40020058
 8009dc0:	4002006c 	.word	0x4002006c
 8009dc4:	40020408 	.word	0x40020408
 8009dc8:	4002041c 	.word	0x4002041c
 8009dcc:	40020430 	.word	0x40020430
 8009dd0:	40020444 	.word	0x40020444
 8009dd4:	40020400 	.word	0x40020400
 8009dd8:	40020000 	.word	0x40020000

08009ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b08b      	sub	sp, #44	; 0x2c
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009de6:	2300      	movs	r3, #0
 8009de8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009dea:	2300      	movs	r3, #0
 8009dec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009dee:	e179      	b.n	800a0e4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009df0:	2201      	movs	r2, #1
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df4:	fa02 f303 	lsl.w	r3, r2, r3
 8009df8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	69fa      	ldr	r2, [r7, #28]
 8009e00:	4013      	ands	r3, r2
 8009e02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009e04:	69ba      	ldr	r2, [r7, #24]
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	429a      	cmp	r2, r3
 8009e0a:	f040 8168 	bne.w	800a0de <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	4a96      	ldr	r2, [pc, #600]	; (800a06c <HAL_GPIO_Init+0x290>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d05e      	beq.n	8009ed6 <HAL_GPIO_Init+0xfa>
 8009e18:	4a94      	ldr	r2, [pc, #592]	; (800a06c <HAL_GPIO_Init+0x290>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d875      	bhi.n	8009f0a <HAL_GPIO_Init+0x12e>
 8009e1e:	4a94      	ldr	r2, [pc, #592]	; (800a070 <HAL_GPIO_Init+0x294>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d058      	beq.n	8009ed6 <HAL_GPIO_Init+0xfa>
 8009e24:	4a92      	ldr	r2, [pc, #584]	; (800a070 <HAL_GPIO_Init+0x294>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d86f      	bhi.n	8009f0a <HAL_GPIO_Init+0x12e>
 8009e2a:	4a92      	ldr	r2, [pc, #584]	; (800a074 <HAL_GPIO_Init+0x298>)
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d052      	beq.n	8009ed6 <HAL_GPIO_Init+0xfa>
 8009e30:	4a90      	ldr	r2, [pc, #576]	; (800a074 <HAL_GPIO_Init+0x298>)
 8009e32:	4293      	cmp	r3, r2
 8009e34:	d869      	bhi.n	8009f0a <HAL_GPIO_Init+0x12e>
 8009e36:	4a90      	ldr	r2, [pc, #576]	; (800a078 <HAL_GPIO_Init+0x29c>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d04c      	beq.n	8009ed6 <HAL_GPIO_Init+0xfa>
 8009e3c:	4a8e      	ldr	r2, [pc, #568]	; (800a078 <HAL_GPIO_Init+0x29c>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d863      	bhi.n	8009f0a <HAL_GPIO_Init+0x12e>
 8009e42:	4a8e      	ldr	r2, [pc, #568]	; (800a07c <HAL_GPIO_Init+0x2a0>)
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d046      	beq.n	8009ed6 <HAL_GPIO_Init+0xfa>
 8009e48:	4a8c      	ldr	r2, [pc, #560]	; (800a07c <HAL_GPIO_Init+0x2a0>)
 8009e4a:	4293      	cmp	r3, r2
 8009e4c:	d85d      	bhi.n	8009f0a <HAL_GPIO_Init+0x12e>
 8009e4e:	2b12      	cmp	r3, #18
 8009e50:	d82a      	bhi.n	8009ea8 <HAL_GPIO_Init+0xcc>
 8009e52:	2b12      	cmp	r3, #18
 8009e54:	d859      	bhi.n	8009f0a <HAL_GPIO_Init+0x12e>
 8009e56:	a201      	add	r2, pc, #4	; (adr r2, 8009e5c <HAL_GPIO_Init+0x80>)
 8009e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5c:	08009ed7 	.word	0x08009ed7
 8009e60:	08009eb1 	.word	0x08009eb1
 8009e64:	08009ec3 	.word	0x08009ec3
 8009e68:	08009f05 	.word	0x08009f05
 8009e6c:	08009f0b 	.word	0x08009f0b
 8009e70:	08009f0b 	.word	0x08009f0b
 8009e74:	08009f0b 	.word	0x08009f0b
 8009e78:	08009f0b 	.word	0x08009f0b
 8009e7c:	08009f0b 	.word	0x08009f0b
 8009e80:	08009f0b 	.word	0x08009f0b
 8009e84:	08009f0b 	.word	0x08009f0b
 8009e88:	08009f0b 	.word	0x08009f0b
 8009e8c:	08009f0b 	.word	0x08009f0b
 8009e90:	08009f0b 	.word	0x08009f0b
 8009e94:	08009f0b 	.word	0x08009f0b
 8009e98:	08009f0b 	.word	0x08009f0b
 8009e9c:	08009f0b 	.word	0x08009f0b
 8009ea0:	08009eb9 	.word	0x08009eb9
 8009ea4:	08009ecd 	.word	0x08009ecd
 8009ea8:	4a75      	ldr	r2, [pc, #468]	; (800a080 <HAL_GPIO_Init+0x2a4>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d013      	beq.n	8009ed6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009eae:	e02c      	b.n	8009f0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	623b      	str	r3, [r7, #32]
          break;
 8009eb6:	e029      	b.n	8009f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	68db      	ldr	r3, [r3, #12]
 8009ebc:	3304      	adds	r3, #4
 8009ebe:	623b      	str	r3, [r7, #32]
          break;
 8009ec0:	e024      	b.n	8009f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	68db      	ldr	r3, [r3, #12]
 8009ec6:	3308      	adds	r3, #8
 8009ec8:	623b      	str	r3, [r7, #32]
          break;
 8009eca:	e01f      	b.n	8009f0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	330c      	adds	r3, #12
 8009ed2:	623b      	str	r3, [r7, #32]
          break;
 8009ed4:	e01a      	b.n	8009f0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d102      	bne.n	8009ee4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009ede:	2304      	movs	r3, #4
 8009ee0:	623b      	str	r3, [r7, #32]
          break;
 8009ee2:	e013      	b.n	8009f0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d105      	bne.n	8009ef8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009eec:	2308      	movs	r3, #8
 8009eee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	69fa      	ldr	r2, [r7, #28]
 8009ef4:	611a      	str	r2, [r3, #16]
          break;
 8009ef6:	e009      	b.n	8009f0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009ef8:	2308      	movs	r3, #8
 8009efa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	69fa      	ldr	r2, [r7, #28]
 8009f00:	615a      	str	r2, [r3, #20]
          break;
 8009f02:	e003      	b.n	8009f0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009f04:	2300      	movs	r3, #0
 8009f06:	623b      	str	r3, [r7, #32]
          break;
 8009f08:	e000      	b.n	8009f0c <HAL_GPIO_Init+0x130>
          break;
 8009f0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009f0c:	69bb      	ldr	r3, [r7, #24]
 8009f0e:	2bff      	cmp	r3, #255	; 0xff
 8009f10:	d801      	bhi.n	8009f16 <HAL_GPIO_Init+0x13a>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	e001      	b.n	8009f1a <HAL_GPIO_Init+0x13e>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	3304      	adds	r3, #4
 8009f1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	2bff      	cmp	r3, #255	; 0xff
 8009f20:	d802      	bhi.n	8009f28 <HAL_GPIO_Init+0x14c>
 8009f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f24:	009b      	lsls	r3, r3, #2
 8009f26:	e002      	b.n	8009f2e <HAL_GPIO_Init+0x152>
 8009f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2a:	3b08      	subs	r3, #8
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	210f      	movs	r1, #15
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	fa01 f303 	lsl.w	r3, r1, r3
 8009f3c:	43db      	mvns	r3, r3
 8009f3e:	401a      	ands	r2, r3
 8009f40:	6a39      	ldr	r1, [r7, #32]
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	fa01 f303 	lsl.w	r3, r1, r3
 8009f48:	431a      	orrs	r2, r3
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	f000 80c1 	beq.w	800a0de <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009f5c:	4b49      	ldr	r3, [pc, #292]	; (800a084 <HAL_GPIO_Init+0x2a8>)
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	4a48      	ldr	r2, [pc, #288]	; (800a084 <HAL_GPIO_Init+0x2a8>)
 8009f62:	f043 0301 	orr.w	r3, r3, #1
 8009f66:	6193      	str	r3, [r2, #24]
 8009f68:	4b46      	ldr	r3, [pc, #280]	; (800a084 <HAL_GPIO_Init+0x2a8>)
 8009f6a:	699b      	ldr	r3, [r3, #24]
 8009f6c:	f003 0301 	and.w	r3, r3, #1
 8009f70:	60bb      	str	r3, [r7, #8]
 8009f72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009f74:	4a44      	ldr	r2, [pc, #272]	; (800a088 <HAL_GPIO_Init+0x2ac>)
 8009f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f78:	089b      	lsrs	r3, r3, #2
 8009f7a:	3302      	adds	r3, #2
 8009f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009f80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f84:	f003 0303 	and.w	r3, r3, #3
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	220f      	movs	r2, #15
 8009f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f90:	43db      	mvns	r3, r3
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	4013      	ands	r3, r2
 8009f96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	4a3c      	ldr	r2, [pc, #240]	; (800a08c <HAL_GPIO_Init+0x2b0>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d01f      	beq.n	8009fe0 <HAL_GPIO_Init+0x204>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	4a3b      	ldr	r2, [pc, #236]	; (800a090 <HAL_GPIO_Init+0x2b4>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d019      	beq.n	8009fdc <HAL_GPIO_Init+0x200>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a3a      	ldr	r2, [pc, #232]	; (800a094 <HAL_GPIO_Init+0x2b8>)
 8009fac:	4293      	cmp	r3, r2
 8009fae:	d013      	beq.n	8009fd8 <HAL_GPIO_Init+0x1fc>
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a39      	ldr	r2, [pc, #228]	; (800a098 <HAL_GPIO_Init+0x2bc>)
 8009fb4:	4293      	cmp	r3, r2
 8009fb6:	d00d      	beq.n	8009fd4 <HAL_GPIO_Init+0x1f8>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	4a38      	ldr	r2, [pc, #224]	; (800a09c <HAL_GPIO_Init+0x2c0>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d007      	beq.n	8009fd0 <HAL_GPIO_Init+0x1f4>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	4a37      	ldr	r2, [pc, #220]	; (800a0a0 <HAL_GPIO_Init+0x2c4>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d101      	bne.n	8009fcc <HAL_GPIO_Init+0x1f0>
 8009fc8:	2305      	movs	r3, #5
 8009fca:	e00a      	b.n	8009fe2 <HAL_GPIO_Init+0x206>
 8009fcc:	2306      	movs	r3, #6
 8009fce:	e008      	b.n	8009fe2 <HAL_GPIO_Init+0x206>
 8009fd0:	2304      	movs	r3, #4
 8009fd2:	e006      	b.n	8009fe2 <HAL_GPIO_Init+0x206>
 8009fd4:	2303      	movs	r3, #3
 8009fd6:	e004      	b.n	8009fe2 <HAL_GPIO_Init+0x206>
 8009fd8:	2302      	movs	r3, #2
 8009fda:	e002      	b.n	8009fe2 <HAL_GPIO_Init+0x206>
 8009fdc:	2301      	movs	r3, #1
 8009fde:	e000      	b.n	8009fe2 <HAL_GPIO_Init+0x206>
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fe4:	f002 0203 	and.w	r2, r2, #3
 8009fe8:	0092      	lsls	r2, r2, #2
 8009fea:	4093      	lsls	r3, r2
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009ff2:	4925      	ldr	r1, [pc, #148]	; (800a088 <HAL_GPIO_Init+0x2ac>)
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff6:	089b      	lsrs	r3, r3, #2
 8009ff8:	3302      	adds	r3, #2
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d006      	beq.n	800a01a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a00c:	4b25      	ldr	r3, [pc, #148]	; (800a0a4 <HAL_GPIO_Init+0x2c8>)
 800a00e:	689a      	ldr	r2, [r3, #8]
 800a010:	4924      	ldr	r1, [pc, #144]	; (800a0a4 <HAL_GPIO_Init+0x2c8>)
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	4313      	orrs	r3, r2
 800a016:	608b      	str	r3, [r1, #8]
 800a018:	e006      	b.n	800a028 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a01a:	4b22      	ldr	r3, [pc, #136]	; (800a0a4 <HAL_GPIO_Init+0x2c8>)
 800a01c:	689a      	ldr	r2, [r3, #8]
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	43db      	mvns	r3, r3
 800a022:	4920      	ldr	r1, [pc, #128]	; (800a0a4 <HAL_GPIO_Init+0x2c8>)
 800a024:	4013      	ands	r3, r2
 800a026:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a030:	2b00      	cmp	r3, #0
 800a032:	d006      	beq.n	800a042 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a034:	4b1b      	ldr	r3, [pc, #108]	; (800a0a4 <HAL_GPIO_Init+0x2c8>)
 800a036:	68da      	ldr	r2, [r3, #12]
 800a038:	491a      	ldr	r1, [pc, #104]	; (800a0a4 <HAL_GPIO_Init+0x2c8>)
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	4313      	orrs	r3, r2
 800a03e:	60cb      	str	r3, [r1, #12]
 800a040:	e006      	b.n	800a050 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a042:	4b18      	ldr	r3, [pc, #96]	; (800a0a4 <HAL_GPIO_Init+0x2c8>)
 800a044:	68da      	ldr	r2, [r3, #12]
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	43db      	mvns	r3, r3
 800a04a:	4916      	ldr	r1, [pc, #88]	; (800a0a4 <HAL_GPIO_Init+0x2c8>)
 800a04c:	4013      	ands	r3, r2
 800a04e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d025      	beq.n	800a0a8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a05c:	4b11      	ldr	r3, [pc, #68]	; (800a0a4 <HAL_GPIO_Init+0x2c8>)
 800a05e:	685a      	ldr	r2, [r3, #4]
 800a060:	4910      	ldr	r1, [pc, #64]	; (800a0a4 <HAL_GPIO_Init+0x2c8>)
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	4313      	orrs	r3, r2
 800a066:	604b      	str	r3, [r1, #4]
 800a068:	e025      	b.n	800a0b6 <HAL_GPIO_Init+0x2da>
 800a06a:	bf00      	nop
 800a06c:	10320000 	.word	0x10320000
 800a070:	10310000 	.word	0x10310000
 800a074:	10220000 	.word	0x10220000
 800a078:	10210000 	.word	0x10210000
 800a07c:	10120000 	.word	0x10120000
 800a080:	10110000 	.word	0x10110000
 800a084:	40021000 	.word	0x40021000
 800a088:	40010000 	.word	0x40010000
 800a08c:	40010800 	.word	0x40010800
 800a090:	40010c00 	.word	0x40010c00
 800a094:	40011000 	.word	0x40011000
 800a098:	40011400 	.word	0x40011400
 800a09c:	40011800 	.word	0x40011800
 800a0a0:	40011c00 	.word	0x40011c00
 800a0a4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a0a8:	4b15      	ldr	r3, [pc, #84]	; (800a100 <HAL_GPIO_Init+0x324>)
 800a0aa:	685a      	ldr	r2, [r3, #4]
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	43db      	mvns	r3, r3
 800a0b0:	4913      	ldr	r1, [pc, #76]	; (800a100 <HAL_GPIO_Init+0x324>)
 800a0b2:	4013      	ands	r3, r2
 800a0b4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d006      	beq.n	800a0d0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a0c2:	4b0f      	ldr	r3, [pc, #60]	; (800a100 <HAL_GPIO_Init+0x324>)
 800a0c4:	681a      	ldr	r2, [r3, #0]
 800a0c6:	490e      	ldr	r1, [pc, #56]	; (800a100 <HAL_GPIO_Init+0x324>)
 800a0c8:	69bb      	ldr	r3, [r7, #24]
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	600b      	str	r3, [r1, #0]
 800a0ce:	e006      	b.n	800a0de <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a0d0:	4b0b      	ldr	r3, [pc, #44]	; (800a100 <HAL_GPIO_Init+0x324>)
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	43db      	mvns	r3, r3
 800a0d8:	4909      	ldr	r1, [pc, #36]	; (800a100 <HAL_GPIO_Init+0x324>)
 800a0da:	4013      	ands	r3, r2
 800a0dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	f47f ae7e 	bne.w	8009df0 <HAL_GPIO_Init+0x14>
  }
}
 800a0f4:	bf00      	nop
 800a0f6:	bf00      	nop
 800a0f8:	372c      	adds	r7, #44	; 0x2c
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bc80      	pop	{r7}
 800a0fe:	4770      	bx	lr
 800a100:	40010400 	.word	0x40010400

0800a104 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a104:	b480      	push	{r7}
 800a106:	b089      	sub	sp, #36	; 0x24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a10e:	2300      	movs	r3, #0
 800a110:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800a112:	e0a6      	b.n	800a262 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a114:	2201      	movs	r2, #1
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	fa02 f303 	lsl.w	r3, r2, r3
 800a11c:	683a      	ldr	r2, [r7, #0]
 800a11e:	4013      	ands	r3, r2
 800a120:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	2b00      	cmp	r3, #0
 800a126:	f000 8099 	beq.w	800a25c <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800a12a:	4a54      	ldr	r2, [pc, #336]	; (800a27c <HAL_GPIO_DeInit+0x178>)
 800a12c:	69fb      	ldr	r3, [r7, #28]
 800a12e:	089b      	lsrs	r3, r3, #2
 800a130:	3302      	adds	r3, #2
 800a132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a136:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	f003 0303 	and.w	r3, r3, #3
 800a13e:	009b      	lsls	r3, r3, #2
 800a140:	220f      	movs	r2, #15
 800a142:	fa02 f303 	lsl.w	r3, r2, r3
 800a146:	697a      	ldr	r2, [r7, #20]
 800a148:	4013      	ands	r3, r2
 800a14a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a4c      	ldr	r2, [pc, #304]	; (800a280 <HAL_GPIO_DeInit+0x17c>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d01f      	beq.n	800a194 <HAL_GPIO_DeInit+0x90>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a4b      	ldr	r2, [pc, #300]	; (800a284 <HAL_GPIO_DeInit+0x180>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d019      	beq.n	800a190 <HAL_GPIO_DeInit+0x8c>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a4a      	ldr	r2, [pc, #296]	; (800a288 <HAL_GPIO_DeInit+0x184>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d013      	beq.n	800a18c <HAL_GPIO_DeInit+0x88>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a49      	ldr	r2, [pc, #292]	; (800a28c <HAL_GPIO_DeInit+0x188>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d00d      	beq.n	800a188 <HAL_GPIO_DeInit+0x84>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a48      	ldr	r2, [pc, #288]	; (800a290 <HAL_GPIO_DeInit+0x18c>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d007      	beq.n	800a184 <HAL_GPIO_DeInit+0x80>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a47      	ldr	r2, [pc, #284]	; (800a294 <HAL_GPIO_DeInit+0x190>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d101      	bne.n	800a180 <HAL_GPIO_DeInit+0x7c>
 800a17c:	2305      	movs	r3, #5
 800a17e:	e00a      	b.n	800a196 <HAL_GPIO_DeInit+0x92>
 800a180:	2306      	movs	r3, #6
 800a182:	e008      	b.n	800a196 <HAL_GPIO_DeInit+0x92>
 800a184:	2304      	movs	r3, #4
 800a186:	e006      	b.n	800a196 <HAL_GPIO_DeInit+0x92>
 800a188:	2303      	movs	r3, #3
 800a18a:	e004      	b.n	800a196 <HAL_GPIO_DeInit+0x92>
 800a18c:	2302      	movs	r3, #2
 800a18e:	e002      	b.n	800a196 <HAL_GPIO_DeInit+0x92>
 800a190:	2301      	movs	r3, #1
 800a192:	e000      	b.n	800a196 <HAL_GPIO_DeInit+0x92>
 800a194:	2300      	movs	r3, #0
 800a196:	69fa      	ldr	r2, [r7, #28]
 800a198:	f002 0203 	and.w	r2, r2, #3
 800a19c:	0092      	lsls	r2, r2, #2
 800a19e:	4093      	lsls	r3, r2
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d132      	bne.n	800a20c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800a1a6:	4b3c      	ldr	r3, [pc, #240]	; (800a298 <HAL_GPIO_DeInit+0x194>)
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	43db      	mvns	r3, r3
 800a1ae:	493a      	ldr	r1, [pc, #232]	; (800a298 <HAL_GPIO_DeInit+0x194>)
 800a1b0:	4013      	ands	r3, r2
 800a1b2:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800a1b4:	4b38      	ldr	r3, [pc, #224]	; (800a298 <HAL_GPIO_DeInit+0x194>)
 800a1b6:	685a      	ldr	r2, [r3, #4]
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	43db      	mvns	r3, r3
 800a1bc:	4936      	ldr	r1, [pc, #216]	; (800a298 <HAL_GPIO_DeInit+0x194>)
 800a1be:	4013      	ands	r3, r2
 800a1c0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800a1c2:	4b35      	ldr	r3, [pc, #212]	; (800a298 <HAL_GPIO_DeInit+0x194>)
 800a1c4:	68da      	ldr	r2, [r3, #12]
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	43db      	mvns	r3, r3
 800a1ca:	4933      	ldr	r1, [pc, #204]	; (800a298 <HAL_GPIO_DeInit+0x194>)
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800a1d0:	4b31      	ldr	r3, [pc, #196]	; (800a298 <HAL_GPIO_DeInit+0x194>)
 800a1d2:	689a      	ldr	r2, [r3, #8]
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	43db      	mvns	r3, r3
 800a1d8:	492f      	ldr	r1, [pc, #188]	; (800a298 <HAL_GPIO_DeInit+0x194>)
 800a1da:	4013      	ands	r3, r2
 800a1dc:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	f003 0303 	and.w	r3, r3, #3
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	220f      	movs	r2, #15
 800a1e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1ec:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a1ee:	4a23      	ldr	r2, [pc, #140]	; (800a27c <HAL_GPIO_DeInit+0x178>)
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	089b      	lsrs	r3, r3, #2
 800a1f4:	3302      	adds	r3, #2
 800a1f6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	43da      	mvns	r2, r3
 800a1fe:	481f      	ldr	r0, [pc, #124]	; (800a27c <HAL_GPIO_DeInit+0x178>)
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	089b      	lsrs	r3, r3, #2
 800a204:	400a      	ands	r2, r1
 800a206:	3302      	adds	r3, #2
 800a208:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	2bff      	cmp	r3, #255	; 0xff
 800a210:	d801      	bhi.n	800a216 <HAL_GPIO_DeInit+0x112>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	e001      	b.n	800a21a <HAL_GPIO_DeInit+0x116>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	3304      	adds	r3, #4
 800a21a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	2bff      	cmp	r3, #255	; 0xff
 800a220:	d802      	bhi.n	800a228 <HAL_GPIO_DeInit+0x124>
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	009b      	lsls	r3, r3, #2
 800a226:	e002      	b.n	800a22e <HAL_GPIO_DeInit+0x12a>
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	3b08      	subs	r3, #8
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	210f      	movs	r1, #15
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	fa01 f303 	lsl.w	r3, r1, r3
 800a23c:	43db      	mvns	r3, r3
 800a23e:	401a      	ands	r2, r3
 800a240:	2104      	movs	r1, #4
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	fa01 f303 	lsl.w	r3, r1, r3
 800a248:	431a      	orrs	r2, r3
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	68da      	ldr	r2, [r3, #12]
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	43db      	mvns	r3, r3
 800a256:	401a      	ands	r2, r3
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	3301      	adds	r3, #1
 800a260:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a262:	683a      	ldr	r2, [r7, #0]
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	fa22 f303 	lsr.w	r3, r2, r3
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	f47f af52 	bne.w	800a114 <HAL_GPIO_DeInit+0x10>
  }
}
 800a270:	bf00      	nop
 800a272:	bf00      	nop
 800a274:	3724      	adds	r7, #36	; 0x24
 800a276:	46bd      	mov	sp, r7
 800a278:	bc80      	pop	{r7}
 800a27a:	4770      	bx	lr
 800a27c:	40010000 	.word	0x40010000
 800a280:	40010800 	.word	0x40010800
 800a284:	40010c00 	.word	0x40010c00
 800a288:	40011000 	.word	0x40011000
 800a28c:	40011400 	.word	0x40011400
 800a290:	40011800 	.word	0x40011800
 800a294:	40011c00 	.word	0x40011c00
 800a298:	40010400 	.word	0x40010400

0800a29c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	689a      	ldr	r2, [r3, #8]
 800a2ac:	887b      	ldrh	r3, [r7, #2]
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d002      	beq.n	800a2ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	73fb      	strb	r3, [r7, #15]
 800a2b8:	e001      	b.n	800a2be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a2be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	3714      	adds	r7, #20
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bc80      	pop	{r7}
 800a2c8:	4770      	bx	lr

0800a2ca <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a2ca:	b480      	push	{r7}
 800a2cc:	b083      	sub	sp, #12
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	807b      	strh	r3, [r7, #2]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a2da:	787b      	ldrb	r3, [r7, #1]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d003      	beq.n	800a2e8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a2e0:	887a      	ldrh	r2, [r7, #2]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a2e6:	e003      	b.n	800a2f0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a2e8:	887b      	ldrh	r3, [r7, #2]
 800a2ea:	041a      	lsls	r2, r3, #16
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	611a      	str	r2, [r3, #16]
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bc80      	pop	{r7}
 800a2f8:	4770      	bx	lr

0800a2fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b085      	sub	sp, #20
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	460b      	mov	r3, r1
 800a304:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a30c:	887a      	ldrh	r2, [r7, #2]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	4013      	ands	r3, r2
 800a312:	041a      	lsls	r2, r3, #16
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	43d9      	mvns	r1, r3
 800a318:	887b      	ldrh	r3, [r7, #2]
 800a31a:	400b      	ands	r3, r1
 800a31c:	431a      	orrs	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	611a      	str	r2, [r3, #16]
}
 800a322:	bf00      	nop
 800a324:	3714      	adds	r7, #20
 800a326:	46bd      	mov	sp, r7
 800a328:	bc80      	pop	{r7}
 800a32a:	4770      	bx	lr

0800a32c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b084      	sub	sp, #16
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e12b      	b.n	800a596 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b00      	cmp	r3, #0
 800a348:	d106      	bne.n	800a358 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f7fe fff8 	bl	8009348 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2224      	movs	r2, #36	; 0x24
 800a35c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f022 0201 	bic.w	r2, r2, #1
 800a36e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a37e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a38e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a390:	f001 fdb8 	bl	800bf04 <HAL_RCC_GetPCLK1Freq>
 800a394:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	685b      	ldr	r3, [r3, #4]
 800a39a:	4a81      	ldr	r2, [pc, #516]	; (800a5a0 <HAL_I2C_Init+0x274>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d807      	bhi.n	800a3b0 <HAL_I2C_Init+0x84>
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	4a80      	ldr	r2, [pc, #512]	; (800a5a4 <HAL_I2C_Init+0x278>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	bf94      	ite	ls
 800a3a8:	2301      	movls	r3, #1
 800a3aa:	2300      	movhi	r3, #0
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	e006      	b.n	800a3be <HAL_I2C_Init+0x92>
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	4a7d      	ldr	r2, [pc, #500]	; (800a5a8 <HAL_I2C_Init+0x27c>)
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	bf94      	ite	ls
 800a3b8:	2301      	movls	r3, #1
 800a3ba:	2300      	movhi	r3, #0
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d001      	beq.n	800a3c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e0e7      	b.n	800a596 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	4a78      	ldr	r2, [pc, #480]	; (800a5ac <HAL_I2C_Init+0x280>)
 800a3ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ce:	0c9b      	lsrs	r3, r3, #18
 800a3d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	68ba      	ldr	r2, [r7, #8]
 800a3e2:	430a      	orrs	r2, r1
 800a3e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	6a1b      	ldr	r3, [r3, #32]
 800a3ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	4a6a      	ldr	r2, [pc, #424]	; (800a5a0 <HAL_I2C_Init+0x274>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d802      	bhi.n	800a400 <HAL_I2C_Init+0xd4>
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	e009      	b.n	800a414 <HAL_I2C_Init+0xe8>
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a406:	fb02 f303 	mul.w	r3, r2, r3
 800a40a:	4a69      	ldr	r2, [pc, #420]	; (800a5b0 <HAL_I2C_Init+0x284>)
 800a40c:	fba2 2303 	umull	r2, r3, r2, r3
 800a410:	099b      	lsrs	r3, r3, #6
 800a412:	3301      	adds	r3, #1
 800a414:	687a      	ldr	r2, [r7, #4]
 800a416:	6812      	ldr	r2, [r2, #0]
 800a418:	430b      	orrs	r3, r1
 800a41a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a426:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	495c      	ldr	r1, [pc, #368]	; (800a5a0 <HAL_I2C_Init+0x274>)
 800a430:	428b      	cmp	r3, r1
 800a432:	d819      	bhi.n	800a468 <HAL_I2C_Init+0x13c>
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	1e59      	subs	r1, r3, #1
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	005b      	lsls	r3, r3, #1
 800a43e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a442:	1c59      	adds	r1, r3, #1
 800a444:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a448:	400b      	ands	r3, r1
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d00a      	beq.n	800a464 <HAL_I2C_Init+0x138>
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	1e59      	subs	r1, r3, #1
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	685b      	ldr	r3, [r3, #4]
 800a456:	005b      	lsls	r3, r3, #1
 800a458:	fbb1 f3f3 	udiv	r3, r1, r3
 800a45c:	3301      	adds	r3, #1
 800a45e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a462:	e051      	b.n	800a508 <HAL_I2C_Init+0x1dc>
 800a464:	2304      	movs	r3, #4
 800a466:	e04f      	b.n	800a508 <HAL_I2C_Init+0x1dc>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d111      	bne.n	800a494 <HAL_I2C_Init+0x168>
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	1e58      	subs	r0, r3, #1
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6859      	ldr	r1, [r3, #4]
 800a478:	460b      	mov	r3, r1
 800a47a:	005b      	lsls	r3, r3, #1
 800a47c:	440b      	add	r3, r1
 800a47e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a482:	3301      	adds	r3, #1
 800a484:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a488:	2b00      	cmp	r3, #0
 800a48a:	bf0c      	ite	eq
 800a48c:	2301      	moveq	r3, #1
 800a48e:	2300      	movne	r3, #0
 800a490:	b2db      	uxtb	r3, r3
 800a492:	e012      	b.n	800a4ba <HAL_I2C_Init+0x18e>
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	1e58      	subs	r0, r3, #1
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6859      	ldr	r1, [r3, #4]
 800a49c:	460b      	mov	r3, r1
 800a49e:	009b      	lsls	r3, r3, #2
 800a4a0:	440b      	add	r3, r1
 800a4a2:	0099      	lsls	r1, r3, #2
 800a4a4:	440b      	add	r3, r1
 800a4a6:	fbb0 f3f3 	udiv	r3, r0, r3
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	bf0c      	ite	eq
 800a4b4:	2301      	moveq	r3, #1
 800a4b6:	2300      	movne	r3, #0
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d001      	beq.n	800a4c2 <HAL_I2C_Init+0x196>
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e022      	b.n	800a508 <HAL_I2C_Init+0x1dc>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d10e      	bne.n	800a4e8 <HAL_I2C_Init+0x1bc>
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	1e58      	subs	r0, r3, #1
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6859      	ldr	r1, [r3, #4]
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	005b      	lsls	r3, r3, #1
 800a4d6:	440b      	add	r3, r1
 800a4d8:	fbb0 f3f3 	udiv	r3, r0, r3
 800a4dc:	3301      	adds	r3, #1
 800a4de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a4e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4e6:	e00f      	b.n	800a508 <HAL_I2C_Init+0x1dc>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	1e58      	subs	r0, r3, #1
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6859      	ldr	r1, [r3, #4]
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	440b      	add	r3, r1
 800a4f6:	0099      	lsls	r1, r3, #2
 800a4f8:	440b      	add	r3, r1
 800a4fa:	fbb0 f3f3 	udiv	r3, r0, r3
 800a4fe:	3301      	adds	r3, #1
 800a500:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a504:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a508:	6879      	ldr	r1, [r7, #4]
 800a50a:	6809      	ldr	r1, [r1, #0]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	69da      	ldr	r2, [r3, #28]
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	6a1b      	ldr	r3, [r3, #32]
 800a522:	431a      	orrs	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	430a      	orrs	r2, r1
 800a52a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a536:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	6911      	ldr	r1, [r2, #16]
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	68d2      	ldr	r2, [r2, #12]
 800a542:	4311      	orrs	r1, r2
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	6812      	ldr	r2, [r2, #0]
 800a548:	430b      	orrs	r3, r1
 800a54a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	695a      	ldr	r2, [r3, #20]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	431a      	orrs	r2, r3
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	430a      	orrs	r2, r1
 800a566:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	f042 0201 	orr.w	r2, r2, #1
 800a576:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2200      	movs	r2, #0
 800a57c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2220      	movs	r2, #32
 800a582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	000186a0 	.word	0x000186a0
 800a5a4:	001e847f 	.word	0x001e847f
 800a5a8:	003d08ff 	.word	0x003d08ff
 800a5ac:	431bde83 	.word	0x431bde83
 800a5b0:	10624dd3 	.word	0x10624dd3

0800a5b4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b082      	sub	sp, #8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d101      	bne.n	800a5c6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e021      	b.n	800a60a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2224      	movs	r2, #36	; 0x24
 800a5ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f022 0201 	bic.w	r2, r2, #1
 800a5dc:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f7fe fef0 	bl	80093c4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2200      	movs	r2, #0
 800a604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3708      	adds	r7, #8
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
	...

0800a614 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b088      	sub	sp, #32
 800a618:	af02      	add	r7, sp, #8
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	607a      	str	r2, [r7, #4]
 800a61e:	461a      	mov	r2, r3
 800a620:	460b      	mov	r3, r1
 800a622:	817b      	strh	r3, [r7, #10]
 800a624:	4613      	mov	r3, r2
 800a626:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a628:	f7ff f85e 	bl	80096e8 <HAL_GetTick>
 800a62c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a634:	b2db      	uxtb	r3, r3
 800a636:	2b20      	cmp	r3, #32
 800a638:	f040 80e0 	bne.w	800a7fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	9300      	str	r3, [sp, #0]
 800a640:	2319      	movs	r3, #25
 800a642:	2201      	movs	r2, #1
 800a644:	4970      	ldr	r1, [pc, #448]	; (800a808 <HAL_I2C_Master_Transmit+0x1f4>)
 800a646:	68f8      	ldr	r0, [r7, #12]
 800a648:	f000 fe5c 	bl	800b304 <I2C_WaitOnFlagUntilTimeout>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d001      	beq.n	800a656 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a652:	2302      	movs	r3, #2
 800a654:	e0d3      	b.n	800a7fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d101      	bne.n	800a664 <HAL_I2C_Master_Transmit+0x50>
 800a660:	2302      	movs	r3, #2
 800a662:	e0cc      	b.n	800a7fe <HAL_I2C_Master_Transmit+0x1ea>
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 0301 	and.w	r3, r3, #1
 800a676:	2b01      	cmp	r3, #1
 800a678:	d007      	beq.n	800a68a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	681a      	ldr	r2, [r3, #0]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f042 0201 	orr.w	r2, r2, #1
 800a688:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a698:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2221      	movs	r2, #33	; 0x21
 800a69e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2210      	movs	r2, #16
 800a6a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	893a      	ldrh	r2, [r7, #8]
 800a6ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	4a50      	ldr	r2, [pc, #320]	; (800a80c <HAL_I2C_Master_Transmit+0x1f8>)
 800a6ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a6cc:	8979      	ldrh	r1, [r7, #10]
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	6a3a      	ldr	r2, [r7, #32]
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f000 fc16 	bl	800af04 <I2C_MasterRequestWrite>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d001      	beq.n	800a6e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	e08d      	b.n	800a7fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	613b      	str	r3, [r7, #16]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	695b      	ldr	r3, [r3, #20]
 800a6ec:	613b      	str	r3, [r7, #16]
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	699b      	ldr	r3, [r3, #24]
 800a6f4:	613b      	str	r3, [r7, #16]
 800a6f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a6f8:	e066      	b.n	800a7c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6fa:	697a      	ldr	r2, [r7, #20]
 800a6fc:	6a39      	ldr	r1, [r7, #32]
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f000 ff1a 	bl	800b538 <I2C_WaitOnTXEFlagUntilTimeout>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00d      	beq.n	800a726 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a70e:	2b04      	cmp	r3, #4
 800a710:	d107      	bne.n	800a722 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	681a      	ldr	r2, [r3, #0]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a720:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a722:	2301      	movs	r3, #1
 800a724:	e06b      	b.n	800a7fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72a:	781a      	ldrb	r2, [r3, #0]
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a736:	1c5a      	adds	r2, r3, #1
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a740:	b29b      	uxth	r3, r3
 800a742:	3b01      	subs	r3, #1
 800a744:	b29a      	uxth	r2, r3
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a74e:	3b01      	subs	r3, #1
 800a750:	b29a      	uxth	r2, r3
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	695b      	ldr	r3, [r3, #20]
 800a75c:	f003 0304 	and.w	r3, r3, #4
 800a760:	2b04      	cmp	r3, #4
 800a762:	d11b      	bne.n	800a79c <HAL_I2C_Master_Transmit+0x188>
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d017      	beq.n	800a79c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a770:	781a      	ldrb	r2, [r3, #0]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77c:	1c5a      	adds	r2, r3, #1
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a786:	b29b      	uxth	r3, r3
 800a788:	3b01      	subs	r3, #1
 800a78a:	b29a      	uxth	r2, r3
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a794:	3b01      	subs	r3, #1
 800a796:	b29a      	uxth	r2, r3
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a79c:	697a      	ldr	r2, [r7, #20]
 800a79e:	6a39      	ldr	r1, [r7, #32]
 800a7a0:	68f8      	ldr	r0, [r7, #12]
 800a7a2:	f000 ff11 	bl	800b5c8 <I2C_WaitOnBTFFlagUntilTimeout>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d00d      	beq.n	800a7c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b0:	2b04      	cmp	r3, #4
 800a7b2:	d107      	bne.n	800a7c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681a      	ldr	r2, [r3, #0]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	e01a      	b.n	800a7fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d194      	bne.n	800a6fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	681a      	ldr	r2, [r3, #0]
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a7de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2220      	movs	r2, #32
 800a7e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	e000      	b.n	800a7fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a7fc:	2302      	movs	r3, #2
  }
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3718      	adds	r7, #24
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	00100002 	.word	0x00100002
 800a80c:	ffff0000 	.word	0xffff0000

0800a810 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b088      	sub	sp, #32
 800a814:	af02      	add	r7, sp, #8
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	4608      	mov	r0, r1
 800a81a:	4611      	mov	r1, r2
 800a81c:	461a      	mov	r2, r3
 800a81e:	4603      	mov	r3, r0
 800a820:	817b      	strh	r3, [r7, #10]
 800a822:	460b      	mov	r3, r1
 800a824:	813b      	strh	r3, [r7, #8]
 800a826:	4613      	mov	r3, r2
 800a828:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a82a:	f7fe ff5d 	bl	80096e8 <HAL_GetTick>
 800a82e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a836:	b2db      	uxtb	r3, r3
 800a838:	2b20      	cmp	r3, #32
 800a83a:	f040 80d9 	bne.w	800a9f0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	9300      	str	r3, [sp, #0]
 800a842:	2319      	movs	r3, #25
 800a844:	2201      	movs	r2, #1
 800a846:	496d      	ldr	r1, [pc, #436]	; (800a9fc <HAL_I2C_Mem_Write+0x1ec>)
 800a848:	68f8      	ldr	r0, [r7, #12]
 800a84a:	f000 fd5b 	bl	800b304 <I2C_WaitOnFlagUntilTimeout>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d001      	beq.n	800a858 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a854:	2302      	movs	r3, #2
 800a856:	e0cc      	b.n	800a9f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d101      	bne.n	800a866 <HAL_I2C_Mem_Write+0x56>
 800a862:	2302      	movs	r3, #2
 800a864:	e0c5      	b.n	800a9f2 <HAL_I2C_Mem_Write+0x1e2>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2201      	movs	r2, #1
 800a86a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 0301 	and.w	r3, r3, #1
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d007      	beq.n	800a88c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f042 0201 	orr.w	r2, r2, #1
 800a88a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a89a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2221      	movs	r2, #33	; 0x21
 800a8a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2240      	movs	r2, #64	; 0x40
 800a8a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	6a3a      	ldr	r2, [r7, #32]
 800a8b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a8bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8c2:	b29a      	uxth	r2, r3
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	4a4d      	ldr	r2, [pc, #308]	; (800aa00 <HAL_I2C_Mem_Write+0x1f0>)
 800a8cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a8ce:	88f8      	ldrh	r0, [r7, #6]
 800a8d0:	893a      	ldrh	r2, [r7, #8]
 800a8d2:	8979      	ldrh	r1, [r7, #10]
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	9301      	str	r3, [sp, #4]
 800a8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8da:	9300      	str	r3, [sp, #0]
 800a8dc:	4603      	mov	r3, r0
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	f000 fb92 	bl	800b008 <I2C_RequestMemoryWrite>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d052      	beq.n	800a990 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e081      	b.n	800a9f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f000 fe20 	bl	800b538 <I2C_WaitOnTXEFlagUntilTimeout>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00d      	beq.n	800a91a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a902:	2b04      	cmp	r3, #4
 800a904:	d107      	bne.n	800a916 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a914:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e06b      	b.n	800a9f2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91e:	781a      	ldrb	r2, [r3, #0]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a92a:	1c5a      	adds	r2, r3, #1
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a934:	3b01      	subs	r3, #1
 800a936:	b29a      	uxth	r2, r3
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a940:	b29b      	uxth	r3, r3
 800a942:	3b01      	subs	r3, #1
 800a944:	b29a      	uxth	r2, r3
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	695b      	ldr	r3, [r3, #20]
 800a950:	f003 0304 	and.w	r3, r3, #4
 800a954:	2b04      	cmp	r3, #4
 800a956:	d11b      	bne.n	800a990 <HAL_I2C_Mem_Write+0x180>
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d017      	beq.n	800a990 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a964:	781a      	ldrb	r2, [r3, #0]
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a970:	1c5a      	adds	r2, r3, #1
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a97a:	3b01      	subs	r3, #1
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a986:	b29b      	uxth	r3, r3
 800a988:	3b01      	subs	r3, #1
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a994:	2b00      	cmp	r3, #0
 800a996:	d1aa      	bne.n	800a8ee <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a998:	697a      	ldr	r2, [r7, #20]
 800a99a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f000 fe13 	bl	800b5c8 <I2C_WaitOnBTFFlagUntilTimeout>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00d      	beq.n	800a9c4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ac:	2b04      	cmp	r3, #4
 800a9ae:	d107      	bne.n	800a9c0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9be:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e016      	b.n	800a9f2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2220      	movs	r2, #32
 800a9d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	e000      	b.n	800a9f2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a9f0:	2302      	movs	r3, #2
  }
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3718      	adds	r7, #24
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}
 800a9fa:	bf00      	nop
 800a9fc:	00100002 	.word	0x00100002
 800aa00:	ffff0000 	.word	0xffff0000

0800aa04 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b08c      	sub	sp, #48	; 0x30
 800aa08:	af02      	add	r7, sp, #8
 800aa0a:	60f8      	str	r0, [r7, #12]
 800aa0c:	4608      	mov	r0, r1
 800aa0e:	4611      	mov	r1, r2
 800aa10:	461a      	mov	r2, r3
 800aa12:	4603      	mov	r3, r0
 800aa14:	817b      	strh	r3, [r7, #10]
 800aa16:	460b      	mov	r3, r1
 800aa18:	813b      	strh	r3, [r7, #8]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800aa22:	f7fe fe61 	bl	80096e8 <HAL_GetTick>
 800aa26:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	2b20      	cmp	r3, #32
 800aa32:	f040 8244 	bne.w	800aebe <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa38:	9300      	str	r3, [sp, #0]
 800aa3a:	2319      	movs	r3, #25
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	4982      	ldr	r1, [pc, #520]	; (800ac48 <HAL_I2C_Mem_Read+0x244>)
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f000 fc5f 	bl	800b304 <I2C_WaitOnFlagUntilTimeout>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d001      	beq.n	800aa50 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	e237      	b.n	800aec0 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d101      	bne.n	800aa5e <HAL_I2C_Mem_Read+0x5a>
 800aa5a:	2302      	movs	r3, #2
 800aa5c:	e230      	b.n	800aec0 <HAL_I2C_Mem_Read+0x4bc>
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2201      	movs	r2, #1
 800aa62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f003 0301 	and.w	r3, r3, #1
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d007      	beq.n	800aa84 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f042 0201 	orr.w	r2, r2, #1
 800aa82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	681a      	ldr	r2, [r3, #0]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800aa92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2222      	movs	r2, #34	; 0x22
 800aa98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	2240      	movs	r2, #64	; 0x40
 800aaa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800aab4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaba:	b29a      	uxth	r2, r3
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	4a62      	ldr	r2, [pc, #392]	; (800ac4c <HAL_I2C_Mem_Read+0x248>)
 800aac4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aac6:	88f8      	ldrh	r0, [r7, #6]
 800aac8:	893a      	ldrh	r2, [r7, #8]
 800aaca:	8979      	ldrh	r1, [r7, #10]
 800aacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aace:	9301      	str	r3, [sp, #4]
 800aad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aad2:	9300      	str	r3, [sp, #0]
 800aad4:	4603      	mov	r3, r0
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f000 fb2c 	bl	800b134 <I2C_RequestMemoryRead>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d001      	beq.n	800aae6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800aae2:	2301      	movs	r3, #1
 800aae4:	e1ec      	b.n	800aec0 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d113      	bne.n	800ab16 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aaee:	2300      	movs	r3, #0
 800aaf0:	61fb      	str	r3, [r7, #28]
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	695b      	ldr	r3, [r3, #20]
 800aaf8:	61fb      	str	r3, [r7, #28]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	699b      	ldr	r3, [r3, #24]
 800ab00:	61fb      	str	r3, [r7, #28]
 800ab02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab12:	601a      	str	r2, [r3, #0]
 800ab14:	e1c0      	b.n	800ae98 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d11e      	bne.n	800ab5c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab2e:	b672      	cpsid	i
}
 800ab30:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab32:	2300      	movs	r3, #0
 800ab34:	61bb      	str	r3, [r7, #24]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	695b      	ldr	r3, [r3, #20]
 800ab3c:	61bb      	str	r3, [r7, #24]
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	699b      	ldr	r3, [r3, #24]
 800ab44:	61bb      	str	r3, [r7, #24]
 800ab46:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800ab58:	b662      	cpsie	i
}
 800ab5a:	e035      	b.n	800abc8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d11e      	bne.n	800aba2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ab74:	b672      	cpsid	i
}
 800ab76:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab78:	2300      	movs	r3, #0
 800ab7a:	617b      	str	r3, [r7, #20]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	695b      	ldr	r3, [r3, #20]
 800ab82:	617b      	str	r3, [r7, #20]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	699b      	ldr	r3, [r3, #24]
 800ab8a:	617b      	str	r3, [r7, #20]
 800ab8c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	681a      	ldr	r2, [r3, #0]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ab9c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800ab9e:	b662      	cpsie	i
}
 800aba0:	e012      	b.n	800abc8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800abb0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800abb2:	2300      	movs	r3, #0
 800abb4:	613b      	str	r3, [r7, #16]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	695b      	ldr	r3, [r3, #20]
 800abbc:	613b      	str	r3, [r7, #16]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	699b      	ldr	r3, [r3, #24]
 800abc4:	613b      	str	r3, [r7, #16]
 800abc6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800abc8:	e166      	b.n	800ae98 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abce:	2b03      	cmp	r3, #3
 800abd0:	f200 811f 	bhi.w	800ae12 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d123      	bne.n	800ac24 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800abdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abde:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800abe0:	68f8      	ldr	r0, [r7, #12]
 800abe2:	f000 fd39 	bl	800b658 <I2C_WaitOnRXNEFlagUntilTimeout>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d001      	beq.n	800abf0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800abec:	2301      	movs	r3, #1
 800abee:	e167      	b.n	800aec0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	691a      	ldr	r2, [r3, #16]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfa:	b2d2      	uxtb	r2, r2
 800abfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac02:	1c5a      	adds	r2, r3, #1
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac0c:	3b01      	subs	r3, #1
 800ac0e:	b29a      	uxth	r2, r3
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	b29a      	uxth	r2, r3
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ac22:	e139      	b.n	800ae98 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d152      	bne.n	800acd2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ac2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac2e:	9300      	str	r3, [sp, #0]
 800ac30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac32:	2200      	movs	r2, #0
 800ac34:	4906      	ldr	r1, [pc, #24]	; (800ac50 <HAL_I2C_Mem_Read+0x24c>)
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f000 fb64 	bl	800b304 <I2C_WaitOnFlagUntilTimeout>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d008      	beq.n	800ac54 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	e13c      	b.n	800aec0 <HAL_I2C_Mem_Read+0x4bc>
 800ac46:	bf00      	nop
 800ac48:	00100002 	.word	0x00100002
 800ac4c:	ffff0000 	.word	0xffff0000
 800ac50:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800ac54:	b672      	cpsid	i
}
 800ac56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	691a      	ldr	r2, [r3, #16]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac72:	b2d2      	uxtb	r2, r2
 800ac74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7a:	1c5a      	adds	r2, r3, #1
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac84:	3b01      	subs	r3, #1
 800ac86:	b29a      	uxth	r2, r3
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	3b01      	subs	r3, #1
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800ac9a:	b662      	cpsie	i
}
 800ac9c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	691a      	ldr	r2, [r3, #16]
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca8:	b2d2      	uxtb	r2, r2
 800acaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb0:	1c5a      	adds	r2, r3, #1
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800acba:	3b01      	subs	r3, #1
 800acbc:	b29a      	uxth	r2, r3
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	3b01      	subs	r3, #1
 800acca:	b29a      	uxth	r2, r3
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	855a      	strh	r2, [r3, #42]	; 0x2a
 800acd0:	e0e2      	b.n	800ae98 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800acd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd4:	9300      	str	r3, [sp, #0]
 800acd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acd8:	2200      	movs	r2, #0
 800acda:	497b      	ldr	r1, [pc, #492]	; (800aec8 <HAL_I2C_Mem_Read+0x4c4>)
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f000 fb11 	bl	800b304 <I2C_WaitOnFlagUntilTimeout>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d001      	beq.n	800acec <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800ace8:	2301      	movs	r3, #1
 800acea:	e0e9      	b.n	800aec0 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	681a      	ldr	r2, [r3, #0]
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800acfa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800acfc:	b672      	cpsid	i
}
 800acfe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	691a      	ldr	r2, [r3, #16]
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0a:	b2d2      	uxtb	r2, r2
 800ad0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad12:	1c5a      	adds	r2, r3, #1
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ad1c:	3b01      	subs	r3, #1
 800ad1e:	b29a      	uxth	r2, r3
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	b29a      	uxth	r2, r3
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800ad32:	4b66      	ldr	r3, [pc, #408]	; (800aecc <HAL_I2C_Mem_Read+0x4c8>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	08db      	lsrs	r3, r3, #3
 800ad38:	4a65      	ldr	r2, [pc, #404]	; (800aed0 <HAL_I2C_Mem_Read+0x4cc>)
 800ad3a:	fba2 2303 	umull	r2, r3, r2, r3
 800ad3e:	0a1a      	lsrs	r2, r3, #8
 800ad40:	4613      	mov	r3, r2
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	4413      	add	r3, r2
 800ad46:	00da      	lsls	r2, r3, #3
 800ad48:	1ad3      	subs	r3, r2, r3
 800ad4a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800ad4c:	6a3b      	ldr	r3, [r7, #32]
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800ad52:	6a3b      	ldr	r3, [r7, #32]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d118      	bne.n	800ad8a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2220      	movs	r2, #32
 800ad62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad72:	f043 0220 	orr.w	r2, r3, #32
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800ad7a:	b662      	cpsie	i
}
 800ad7c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2200      	movs	r2, #0
 800ad82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800ad86:	2301      	movs	r3, #1
 800ad88:	e09a      	b.n	800aec0 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	695b      	ldr	r3, [r3, #20]
 800ad90:	f003 0304 	and.w	r3, r3, #4
 800ad94:	2b04      	cmp	r3, #4
 800ad96:	d1d9      	bne.n	800ad4c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	681a      	ldr	r2, [r3, #0]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ada6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	691a      	ldr	r2, [r3, #16]
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb2:	b2d2      	uxtb	r2, r2
 800adb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adba:	1c5a      	adds	r2, r3, #1
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adc4:	3b01      	subs	r3, #1
 800adc6:	b29a      	uxth	r2, r3
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800add0:	b29b      	uxth	r3, r3
 800add2:	3b01      	subs	r3, #1
 800add4:	b29a      	uxth	r2, r3
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800adda:	b662      	cpsie	i
}
 800addc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	691a      	ldr	r2, [r3, #16]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade8:	b2d2      	uxtb	r2, r2
 800adea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf0:	1c5a      	adds	r2, r3, #1
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adfa:	3b01      	subs	r3, #1
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae06:	b29b      	uxth	r3, r3
 800ae08:	3b01      	subs	r3, #1
 800ae0a:	b29a      	uxth	r2, r3
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ae10:	e042      	b.n	800ae98 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f000 fc1e 	bl	800b658 <I2C_WaitOnRXNEFlagUntilTimeout>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d001      	beq.n	800ae26 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800ae22:	2301      	movs	r3, #1
 800ae24:	e04c      	b.n	800aec0 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	691a      	ldr	r2, [r3, #16]
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae30:	b2d2      	uxtb	r2, r2
 800ae32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae38:	1c5a      	adds	r2, r3, #1
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae42:	3b01      	subs	r3, #1
 800ae44:	b29a      	uxth	r2, r3
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	3b01      	subs	r3, #1
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	695b      	ldr	r3, [r3, #20]
 800ae5e:	f003 0304 	and.w	r3, r3, #4
 800ae62:	2b04      	cmp	r3, #4
 800ae64:	d118      	bne.n	800ae98 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	691a      	ldr	r2, [r3, #16]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae70:	b2d2      	uxtb	r2, r2
 800ae72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae78:	1c5a      	adds	r2, r3, #1
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae82:	3b01      	subs	r3, #1
 800ae84:	b29a      	uxth	r2, r3
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	3b01      	subs	r3, #1
 800ae92:	b29a      	uxth	r2, r3
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f47f ae94 	bne.w	800abca <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2220      	movs	r2, #32
 800aea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800aeba:	2300      	movs	r3, #0
 800aebc:	e000      	b.n	800aec0 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800aebe:	2302      	movs	r3, #2
  }
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3728      	adds	r7, #40	; 0x28
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	00010004 	.word	0x00010004
 800aecc:	200009c4 	.word	0x200009c4
 800aed0:	14f8b589 	.word	0x14f8b589

0800aed4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aee2:	b2db      	uxtb	r3, r3
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	370c      	adds	r7, #12
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bc80      	pop	{r7}
 800aeec:	4770      	bx	lr

0800aeee <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800aeee:	b480      	push	{r7}
 800aef0:	b083      	sub	sp, #12
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	370c      	adds	r7, #12
 800aefe:	46bd      	mov	sp, r7
 800af00:	bc80      	pop	{r7}
 800af02:	4770      	bx	lr

0800af04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b088      	sub	sp, #32
 800af08:	af02      	add	r7, sp, #8
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	607a      	str	r2, [r7, #4]
 800af0e:	603b      	str	r3, [r7, #0]
 800af10:	460b      	mov	r3, r1
 800af12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	2b08      	cmp	r3, #8
 800af1e:	d006      	beq.n	800af2e <I2C_MasterRequestWrite+0x2a>
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	2b01      	cmp	r3, #1
 800af24:	d003      	beq.n	800af2e <I2C_MasterRequestWrite+0x2a>
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800af2c:	d108      	bne.n	800af40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af3c:	601a      	str	r2, [r3, #0]
 800af3e:	e00b      	b.n	800af58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af44:	2b12      	cmp	r3, #18
 800af46:	d107      	bne.n	800af58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	2200      	movs	r2, #0
 800af60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800af64:	68f8      	ldr	r0, [r7, #12]
 800af66:	f000 f9cd 	bl	800b304 <I2C_WaitOnFlagUntilTimeout>
 800af6a:	4603      	mov	r3, r0
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d00d      	beq.n	800af8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af7e:	d103      	bne.n	800af88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800af88:	2303      	movs	r3, #3
 800af8a:	e035      	b.n	800aff8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	691b      	ldr	r3, [r3, #16]
 800af90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af94:	d108      	bne.n	800afa8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800af96:	897b      	ldrh	r3, [r7, #10]
 800af98:	b2db      	uxtb	r3, r3
 800af9a:	461a      	mov	r2, r3
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800afa4:	611a      	str	r2, [r3, #16]
 800afa6:	e01b      	b.n	800afe0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800afa8:	897b      	ldrh	r3, [r7, #10]
 800afaa:	11db      	asrs	r3, r3, #7
 800afac:	b2db      	uxtb	r3, r3
 800afae:	f003 0306 	and.w	r3, r3, #6
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	f063 030f 	orn	r3, r3, #15
 800afb8:	b2da      	uxtb	r2, r3
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	687a      	ldr	r2, [r7, #4]
 800afc4:	490e      	ldr	r1, [pc, #56]	; (800b000 <I2C_MasterRequestWrite+0xfc>)
 800afc6:	68f8      	ldr	r0, [r7, #12]
 800afc8:	f000 fa16 	bl	800b3f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800afcc:	4603      	mov	r3, r0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d001      	beq.n	800afd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800afd2:	2301      	movs	r3, #1
 800afd4:	e010      	b.n	800aff8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800afd6:	897b      	ldrh	r3, [r7, #10]
 800afd8:	b2da      	uxtb	r2, r3
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	4907      	ldr	r1, [pc, #28]	; (800b004 <I2C_MasterRequestWrite+0x100>)
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	f000 fa06 	bl	800b3f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d001      	beq.n	800aff6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800aff2:	2301      	movs	r3, #1
 800aff4:	e000      	b.n	800aff8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800aff6:	2300      	movs	r3, #0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3718      	adds	r7, #24
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}
 800b000:	00010008 	.word	0x00010008
 800b004:	00010002 	.word	0x00010002

0800b008 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b088      	sub	sp, #32
 800b00c:	af02      	add	r7, sp, #8
 800b00e:	60f8      	str	r0, [r7, #12]
 800b010:	4608      	mov	r0, r1
 800b012:	4611      	mov	r1, r2
 800b014:	461a      	mov	r2, r3
 800b016:	4603      	mov	r3, r0
 800b018:	817b      	strh	r3, [r7, #10]
 800b01a:	460b      	mov	r3, r1
 800b01c:	813b      	strh	r3, [r7, #8]
 800b01e:	4613      	mov	r3, r2
 800b020:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b030:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	6a3b      	ldr	r3, [r7, #32]
 800b038:	2200      	movs	r2, #0
 800b03a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f000 f960 	bl	800b304 <I2C_WaitOnFlagUntilTimeout>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d00d      	beq.n	800b066 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b058:	d103      	bne.n	800b062 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b060:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b062:	2303      	movs	r3, #3
 800b064:	e05f      	b.n	800b126 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b066:	897b      	ldrh	r3, [r7, #10]
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	461a      	mov	r2, r3
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b074:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b078:	6a3a      	ldr	r2, [r7, #32]
 800b07a:	492d      	ldr	r1, [pc, #180]	; (800b130 <I2C_RequestMemoryWrite+0x128>)
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	f000 f9bb 	bl	800b3f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d001      	beq.n	800b08c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	e04c      	b.n	800b126 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b08c:	2300      	movs	r3, #0
 800b08e:	617b      	str	r3, [r7, #20]
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	695b      	ldr	r3, [r3, #20]
 800b096:	617b      	str	r3, [r7, #20]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	699b      	ldr	r3, [r3, #24]
 800b09e:	617b      	str	r3, [r7, #20]
 800b0a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0a4:	6a39      	ldr	r1, [r7, #32]
 800b0a6:	68f8      	ldr	r0, [r7, #12]
 800b0a8:	f000 fa46 	bl	800b538 <I2C_WaitOnTXEFlagUntilTimeout>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00d      	beq.n	800b0ce <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b6:	2b04      	cmp	r3, #4
 800b0b8:	d107      	bne.n	800b0ca <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	e02b      	b.n	800b126 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b0ce:	88fb      	ldrh	r3, [r7, #6]
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d105      	bne.n	800b0e0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b0d4:	893b      	ldrh	r3, [r7, #8]
 800b0d6:	b2da      	uxtb	r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	611a      	str	r2, [r3, #16]
 800b0de:	e021      	b.n	800b124 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b0e0:	893b      	ldrh	r3, [r7, #8]
 800b0e2:	0a1b      	lsrs	r3, r3, #8
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	b2da      	uxtb	r2, r3
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0f0:	6a39      	ldr	r1, [r7, #32]
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f000 fa20 	bl	800b538 <I2C_WaitOnTXEFlagUntilTimeout>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d00d      	beq.n	800b11a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b102:	2b04      	cmp	r3, #4
 800b104:	d107      	bne.n	800b116 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b114:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	e005      	b.n	800b126 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b11a:	893b      	ldrh	r3, [r7, #8]
 800b11c:	b2da      	uxtb	r2, r3
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b124:	2300      	movs	r3, #0
}
 800b126:	4618      	mov	r0, r3
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop
 800b130:	00010002 	.word	0x00010002

0800b134 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b088      	sub	sp, #32
 800b138:	af02      	add	r7, sp, #8
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	4608      	mov	r0, r1
 800b13e:	4611      	mov	r1, r2
 800b140:	461a      	mov	r2, r3
 800b142:	4603      	mov	r3, r0
 800b144:	817b      	strh	r3, [r7, #10]
 800b146:	460b      	mov	r3, r1
 800b148:	813b      	strh	r3, [r7, #8]
 800b14a:	4613      	mov	r3, r2
 800b14c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b15c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b16c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b170:	9300      	str	r3, [sp, #0]
 800b172:	6a3b      	ldr	r3, [r7, #32]
 800b174:	2200      	movs	r2, #0
 800b176:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f000 f8c2 	bl	800b304 <I2C_WaitOnFlagUntilTimeout>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d00d      	beq.n	800b1a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b190:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b194:	d103      	bne.n	800b19e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b19c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	e0aa      	b.n	800b2f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b1a2:	897b      	ldrh	r3, [r7, #10]
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	461a      	mov	r2, r3
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b1b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b4:	6a3a      	ldr	r2, [r7, #32]
 800b1b6:	4952      	ldr	r1, [pc, #328]	; (800b300 <I2C_RequestMemoryRead+0x1cc>)
 800b1b8:	68f8      	ldr	r0, [r7, #12]
 800b1ba:	f000 f91d 	bl	800b3f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d001      	beq.n	800b1c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e097      	b.n	800b2f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	617b      	str	r3, [r7, #20]
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	695b      	ldr	r3, [r3, #20]
 800b1d2:	617b      	str	r3, [r7, #20]
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	699b      	ldr	r3, [r3, #24]
 800b1da:	617b      	str	r3, [r7, #20]
 800b1dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b1de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1e0:	6a39      	ldr	r1, [r7, #32]
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f000 f9a8 	bl	800b538 <I2C_WaitOnTXEFlagUntilTimeout>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d00d      	beq.n	800b20a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f2:	2b04      	cmp	r3, #4
 800b1f4:	d107      	bne.n	800b206 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	681a      	ldr	r2, [r3, #0]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b204:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b206:	2301      	movs	r3, #1
 800b208:	e076      	b.n	800b2f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b20a:	88fb      	ldrh	r3, [r7, #6]
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d105      	bne.n	800b21c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b210:	893b      	ldrh	r3, [r7, #8]
 800b212:	b2da      	uxtb	r2, r3
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	611a      	str	r2, [r3, #16]
 800b21a:	e021      	b.n	800b260 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b21c:	893b      	ldrh	r3, [r7, #8]
 800b21e:	0a1b      	lsrs	r3, r3, #8
 800b220:	b29b      	uxth	r3, r3
 800b222:	b2da      	uxtb	r2, r3
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b22a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b22c:	6a39      	ldr	r1, [r7, #32]
 800b22e:	68f8      	ldr	r0, [r7, #12]
 800b230:	f000 f982 	bl	800b538 <I2C_WaitOnTXEFlagUntilTimeout>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00d      	beq.n	800b256 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b23e:	2b04      	cmp	r3, #4
 800b240:	d107      	bne.n	800b252 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	681a      	ldr	r2, [r3, #0]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b250:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b252:	2301      	movs	r3, #1
 800b254:	e050      	b.n	800b2f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b256:	893b      	ldrh	r3, [r7, #8]
 800b258:	b2da      	uxtb	r2, r3
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b262:	6a39      	ldr	r1, [r7, #32]
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f000 f967 	bl	800b538 <I2C_WaitOnTXEFlagUntilTimeout>
 800b26a:	4603      	mov	r3, r0
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d00d      	beq.n	800b28c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b274:	2b04      	cmp	r3, #4
 800b276:	d107      	bne.n	800b288 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b286:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b288:	2301      	movs	r3, #1
 800b28a:	e035      	b.n	800b2f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b29a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	6a3b      	ldr	r3, [r7, #32]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b2a8:	68f8      	ldr	r0, [r7, #12]
 800b2aa:	f000 f82b 	bl	800b304 <I2C_WaitOnFlagUntilTimeout>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00d      	beq.n	800b2d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2c2:	d103      	bne.n	800b2cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b2ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b2cc:	2303      	movs	r3, #3
 800b2ce:	e013      	b.n	800b2f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b2d0:	897b      	ldrh	r3, [r7, #10]
 800b2d2:	b2db      	uxtb	r3, r3
 800b2d4:	f043 0301 	orr.w	r3, r3, #1
 800b2d8:	b2da      	uxtb	r2, r3
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e2:	6a3a      	ldr	r2, [r7, #32]
 800b2e4:	4906      	ldr	r1, [pc, #24]	; (800b300 <I2C_RequestMemoryRead+0x1cc>)
 800b2e6:	68f8      	ldr	r0, [r7, #12]
 800b2e8:	f000 f886 	bl	800b3f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d001      	beq.n	800b2f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e000      	b.n	800b2f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3718      	adds	r7, #24
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}
 800b300:	00010002 	.word	0x00010002

0800b304 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	60f8      	str	r0, [r7, #12]
 800b30c:	60b9      	str	r1, [r7, #8]
 800b30e:	603b      	str	r3, [r7, #0]
 800b310:	4613      	mov	r3, r2
 800b312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b314:	e048      	b.n	800b3a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b31c:	d044      	beq.n	800b3a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b31e:	f7fe f9e3 	bl	80096e8 <HAL_GetTick>
 800b322:	4602      	mov	r2, r0
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	1ad3      	subs	r3, r2, r3
 800b328:	683a      	ldr	r2, [r7, #0]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d302      	bcc.n	800b334 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d139      	bne.n	800b3a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	0c1b      	lsrs	r3, r3, #16
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	2b01      	cmp	r3, #1
 800b33c:	d10d      	bne.n	800b35a <I2C_WaitOnFlagUntilTimeout+0x56>
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	695b      	ldr	r3, [r3, #20]
 800b344:	43da      	mvns	r2, r3
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	4013      	ands	r3, r2
 800b34a:	b29b      	uxth	r3, r3
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	bf0c      	ite	eq
 800b350:	2301      	moveq	r3, #1
 800b352:	2300      	movne	r3, #0
 800b354:	b2db      	uxtb	r3, r3
 800b356:	461a      	mov	r2, r3
 800b358:	e00c      	b.n	800b374 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	699b      	ldr	r3, [r3, #24]
 800b360:	43da      	mvns	r2, r3
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	4013      	ands	r3, r2
 800b366:	b29b      	uxth	r3, r3
 800b368:	2b00      	cmp	r3, #0
 800b36a:	bf0c      	ite	eq
 800b36c:	2301      	moveq	r3, #1
 800b36e:	2300      	movne	r3, #0
 800b370:	b2db      	uxtb	r3, r3
 800b372:	461a      	mov	r2, r3
 800b374:	79fb      	ldrb	r3, [r7, #7]
 800b376:	429a      	cmp	r2, r3
 800b378:	d116      	bne.n	800b3a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2200      	movs	r2, #0
 800b37e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2220      	movs	r2, #32
 800b384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2200      	movs	r2, #0
 800b38c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b394:	f043 0220 	orr.w	r2, r3, #32
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	e023      	b.n	800b3f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	0c1b      	lsrs	r3, r3, #16
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d10d      	bne.n	800b3ce <I2C_WaitOnFlagUntilTimeout+0xca>
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	695b      	ldr	r3, [r3, #20]
 800b3b8:	43da      	mvns	r2, r3
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	4013      	ands	r3, r2
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	bf0c      	ite	eq
 800b3c4:	2301      	moveq	r3, #1
 800b3c6:	2300      	movne	r3, #0
 800b3c8:	b2db      	uxtb	r3, r3
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	e00c      	b.n	800b3e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	699b      	ldr	r3, [r3, #24]
 800b3d4:	43da      	mvns	r2, r3
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	4013      	ands	r3, r2
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	bf0c      	ite	eq
 800b3e0:	2301      	moveq	r3, #1
 800b3e2:	2300      	movne	r3, #0
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	79fb      	ldrb	r3, [r7, #7]
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d093      	beq.n	800b316 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b3ee:	2300      	movs	r3, #0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b084      	sub	sp, #16
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
 800b404:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b406:	e071      	b.n	800b4ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	695b      	ldr	r3, [r3, #20]
 800b40e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b416:	d123      	bne.n	800b460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b426:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b430:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2200      	movs	r2, #0
 800b436:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2220      	movs	r2, #32
 800b43c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2200      	movs	r2, #0
 800b444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b44c:	f043 0204 	orr.w	r2, r3, #4
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2200      	movs	r2, #0
 800b458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b45c:	2301      	movs	r3, #1
 800b45e:	e067      	b.n	800b530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b466:	d041      	beq.n	800b4ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b468:	f7fe f93e 	bl	80096e8 <HAL_GetTick>
 800b46c:	4602      	mov	r2, r0
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	1ad3      	subs	r3, r2, r3
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	429a      	cmp	r2, r3
 800b476:	d302      	bcc.n	800b47e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d136      	bne.n	800b4ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	0c1b      	lsrs	r3, r3, #16
 800b482:	b2db      	uxtb	r3, r3
 800b484:	2b01      	cmp	r3, #1
 800b486:	d10c      	bne.n	800b4a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	695b      	ldr	r3, [r3, #20]
 800b48e:	43da      	mvns	r2, r3
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	4013      	ands	r3, r2
 800b494:	b29b      	uxth	r3, r3
 800b496:	2b00      	cmp	r3, #0
 800b498:	bf14      	ite	ne
 800b49a:	2301      	movne	r3, #1
 800b49c:	2300      	moveq	r3, #0
 800b49e:	b2db      	uxtb	r3, r3
 800b4a0:	e00b      	b.n	800b4ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	699b      	ldr	r3, [r3, #24]
 800b4a8:	43da      	mvns	r2, r3
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	4013      	ands	r3, r2
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	bf14      	ite	ne
 800b4b4:	2301      	movne	r3, #1
 800b4b6:	2300      	moveq	r3, #0
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d016      	beq.n	800b4ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2220      	movs	r2, #32
 800b4c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d8:	f043 0220 	orr.w	r2, r3, #32
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e021      	b.n	800b530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	0c1b      	lsrs	r3, r3, #16
 800b4f0:	b2db      	uxtb	r3, r3
 800b4f2:	2b01      	cmp	r3, #1
 800b4f4:	d10c      	bne.n	800b510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	695b      	ldr	r3, [r3, #20]
 800b4fc:	43da      	mvns	r2, r3
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	4013      	ands	r3, r2
 800b502:	b29b      	uxth	r3, r3
 800b504:	2b00      	cmp	r3, #0
 800b506:	bf14      	ite	ne
 800b508:	2301      	movne	r3, #1
 800b50a:	2300      	moveq	r3, #0
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	e00b      	b.n	800b528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	699b      	ldr	r3, [r3, #24]
 800b516:	43da      	mvns	r2, r3
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	4013      	ands	r3, r2
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	2b00      	cmp	r3, #0
 800b520:	bf14      	ite	ne
 800b522:	2301      	movne	r3, #1
 800b524:	2300      	moveq	r3, #0
 800b526:	b2db      	uxtb	r3, r3
 800b528:	2b00      	cmp	r3, #0
 800b52a:	f47f af6d 	bne.w	800b408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b52e:	2300      	movs	r3, #0
}
 800b530:	4618      	mov	r0, r3
 800b532:	3710      	adds	r7, #16
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	60f8      	str	r0, [r7, #12]
 800b540:	60b9      	str	r1, [r7, #8]
 800b542:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b544:	e034      	b.n	800b5b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b546:	68f8      	ldr	r0, [r7, #12]
 800b548:	f000 f8e3 	bl	800b712 <I2C_IsAcknowledgeFailed>
 800b54c:	4603      	mov	r3, r0
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d001      	beq.n	800b556 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b552:	2301      	movs	r3, #1
 800b554:	e034      	b.n	800b5c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b55c:	d028      	beq.n	800b5b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b55e:	f7fe f8c3 	bl	80096e8 <HAL_GetTick>
 800b562:	4602      	mov	r2, r0
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	1ad3      	subs	r3, r2, r3
 800b568:	68ba      	ldr	r2, [r7, #8]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d302      	bcc.n	800b574 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d11d      	bne.n	800b5b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	695b      	ldr	r3, [r3, #20]
 800b57a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b57e:	2b80      	cmp	r3, #128	; 0x80
 800b580:	d016      	beq.n	800b5b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2200      	movs	r2, #0
 800b586:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	2220      	movs	r2, #32
 800b58c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	2200      	movs	r2, #0
 800b594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b59c:	f043 0220 	orr.w	r2, r3, #32
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	e007      	b.n	800b5c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	695b      	ldr	r3, [r3, #20]
 800b5b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5ba:	2b80      	cmp	r3, #128	; 0x80
 800b5bc:	d1c3      	bne.n	800b546 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b5be:	2300      	movs	r3, #0
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b084      	sub	sp, #16
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	60f8      	str	r0, [r7, #12]
 800b5d0:	60b9      	str	r1, [r7, #8]
 800b5d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b5d4:	e034      	b.n	800b640 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b5d6:	68f8      	ldr	r0, [r7, #12]
 800b5d8:	f000 f89b 	bl	800b712 <I2C_IsAcknowledgeFailed>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d001      	beq.n	800b5e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e034      	b.n	800b650 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ec:	d028      	beq.n	800b640 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5ee:	f7fe f87b 	bl	80096e8 <HAL_GetTick>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	1ad3      	subs	r3, r2, r3
 800b5f8:	68ba      	ldr	r2, [r7, #8]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d302      	bcc.n	800b604 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d11d      	bne.n	800b640 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	695b      	ldr	r3, [r3, #20]
 800b60a:	f003 0304 	and.w	r3, r3, #4
 800b60e:	2b04      	cmp	r3, #4
 800b610:	d016      	beq.n	800b640 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2200      	movs	r2, #0
 800b616:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2220      	movs	r2, #32
 800b61c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2200      	movs	r2, #0
 800b624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b62c:	f043 0220 	orr.w	r2, r3, #32
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2200      	movs	r2, #0
 800b638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b63c:	2301      	movs	r3, #1
 800b63e:	e007      	b.n	800b650 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	695b      	ldr	r3, [r3, #20]
 800b646:	f003 0304 	and.w	r3, r3, #4
 800b64a:	2b04      	cmp	r3, #4
 800b64c:	d1c3      	bne.n	800b5d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b64e:	2300      	movs	r3, #0
}
 800b650:	4618      	mov	r0, r3
 800b652:	3710      	adds	r7, #16
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}

0800b658 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b664:	e049      	b.n	800b6fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	695b      	ldr	r3, [r3, #20]
 800b66c:	f003 0310 	and.w	r3, r3, #16
 800b670:	2b10      	cmp	r3, #16
 800b672:	d119      	bne.n	800b6a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f06f 0210 	mvn.w	r2, #16
 800b67c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2220      	movs	r2, #32
 800b688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2200      	movs	r2, #0
 800b690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	e030      	b.n	800b70a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6a8:	f7fe f81e 	bl	80096e8 <HAL_GetTick>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	68ba      	ldr	r2, [r7, #8]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d302      	bcc.n	800b6be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d11d      	bne.n	800b6fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	695b      	ldr	r3, [r3, #20]
 800b6c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6c8:	2b40      	cmp	r3, #64	; 0x40
 800b6ca:	d016      	beq.n	800b6fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2220      	movs	r2, #32
 800b6d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6e6:	f043 0220 	orr.w	r2, r3, #32
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	e007      	b.n	800b70a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	695b      	ldr	r3, [r3, #20]
 800b700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b704:	2b40      	cmp	r3, #64	; 0x40
 800b706:	d1ae      	bne.n	800b666 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b708:	2300      	movs	r3, #0
}
 800b70a:	4618      	mov	r0, r3
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}

0800b712 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b712:	b480      	push	{r7}
 800b714:	b083      	sub	sp, #12
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	695b      	ldr	r3, [r3, #20]
 800b720:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b728:	d11b      	bne.n	800b762 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b732:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2220      	movs	r2, #32
 800b73e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2200      	movs	r2, #0
 800b746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b74e:	f043 0204 	orr.w	r2, r3, #4
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	2200      	movs	r2, #0
 800b75a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b75e:	2301      	movs	r3, #1
 800b760:	e000      	b.n	800b764 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b762:	2300      	movs	r3, #0
}
 800b764:	4618      	mov	r0, r3
 800b766:	370c      	adds	r7, #12
 800b768:	46bd      	mov	sp, r7
 800b76a:	bc80      	pop	{r7}
 800b76c:	4770      	bx	lr
	...

0800b770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b086      	sub	sp, #24
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d101      	bne.n	800b782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b77e:	2301      	movs	r3, #1
 800b780:	e272      	b.n	800bc68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f003 0301 	and.w	r3, r3, #1
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	f000 8087 	beq.w	800b89e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b790:	4b92      	ldr	r3, [pc, #584]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	f003 030c 	and.w	r3, r3, #12
 800b798:	2b04      	cmp	r3, #4
 800b79a:	d00c      	beq.n	800b7b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b79c:	4b8f      	ldr	r3, [pc, #572]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	f003 030c 	and.w	r3, r3, #12
 800b7a4:	2b08      	cmp	r3, #8
 800b7a6:	d112      	bne.n	800b7ce <HAL_RCC_OscConfig+0x5e>
 800b7a8:	4b8c      	ldr	r3, [pc, #560]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7b4:	d10b      	bne.n	800b7ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b7b6:	4b89      	ldr	r3, [pc, #548]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d06c      	beq.n	800b89c <HAL_RCC_OscConfig+0x12c>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	685b      	ldr	r3, [r3, #4]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d168      	bne.n	800b89c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	e24c      	b.n	800bc68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7d6:	d106      	bne.n	800b7e6 <HAL_RCC_OscConfig+0x76>
 800b7d8:	4b80      	ldr	r3, [pc, #512]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a7f      	ldr	r2, [pc, #508]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b7de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7e2:	6013      	str	r3, [r2, #0]
 800b7e4:	e02e      	b.n	800b844 <HAL_RCC_OscConfig+0xd4>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	685b      	ldr	r3, [r3, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d10c      	bne.n	800b808 <HAL_RCC_OscConfig+0x98>
 800b7ee:	4b7b      	ldr	r3, [pc, #492]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4a7a      	ldr	r2, [pc, #488]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b7f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7f8:	6013      	str	r3, [r2, #0]
 800b7fa:	4b78      	ldr	r3, [pc, #480]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a77      	ldr	r2, [pc, #476]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b800:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b804:	6013      	str	r3, [r2, #0]
 800b806:	e01d      	b.n	800b844 <HAL_RCC_OscConfig+0xd4>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b810:	d10c      	bne.n	800b82c <HAL_RCC_OscConfig+0xbc>
 800b812:	4b72      	ldr	r3, [pc, #456]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4a71      	ldr	r2, [pc, #452]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b81c:	6013      	str	r3, [r2, #0]
 800b81e:	4b6f      	ldr	r3, [pc, #444]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	4a6e      	ldr	r2, [pc, #440]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b828:	6013      	str	r3, [r2, #0]
 800b82a:	e00b      	b.n	800b844 <HAL_RCC_OscConfig+0xd4>
 800b82c:	4b6b      	ldr	r3, [pc, #428]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a6a      	ldr	r2, [pc, #424]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b836:	6013      	str	r3, [r2, #0]
 800b838:	4b68      	ldr	r3, [pc, #416]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a67      	ldr	r2, [pc, #412]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b83e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b842:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	685b      	ldr	r3, [r3, #4]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d013      	beq.n	800b874 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b84c:	f7fd ff4c 	bl	80096e8 <HAL_GetTick>
 800b850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b852:	e008      	b.n	800b866 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b854:	f7fd ff48 	bl	80096e8 <HAL_GetTick>
 800b858:	4602      	mov	r2, r0
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	1ad3      	subs	r3, r2, r3
 800b85e:	2b64      	cmp	r3, #100	; 0x64
 800b860:	d901      	bls.n	800b866 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b862:	2303      	movs	r3, #3
 800b864:	e200      	b.n	800bc68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b866:	4b5d      	ldr	r3, [pc, #372]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d0f0      	beq.n	800b854 <HAL_RCC_OscConfig+0xe4>
 800b872:	e014      	b.n	800b89e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b874:	f7fd ff38 	bl	80096e8 <HAL_GetTick>
 800b878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b87a:	e008      	b.n	800b88e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b87c:	f7fd ff34 	bl	80096e8 <HAL_GetTick>
 800b880:	4602      	mov	r2, r0
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	1ad3      	subs	r3, r2, r3
 800b886:	2b64      	cmp	r3, #100	; 0x64
 800b888:	d901      	bls.n	800b88e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b88a:	2303      	movs	r3, #3
 800b88c:	e1ec      	b.n	800bc68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b88e:	4b53      	ldr	r3, [pc, #332]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b896:	2b00      	cmp	r3, #0
 800b898:	d1f0      	bne.n	800b87c <HAL_RCC_OscConfig+0x10c>
 800b89a:	e000      	b.n	800b89e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b89c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f003 0302 	and.w	r3, r3, #2
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d063      	beq.n	800b972 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b8aa:	4b4c      	ldr	r3, [pc, #304]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	f003 030c 	and.w	r3, r3, #12
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d00b      	beq.n	800b8ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b8b6:	4b49      	ldr	r3, [pc, #292]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	f003 030c 	and.w	r3, r3, #12
 800b8be:	2b08      	cmp	r3, #8
 800b8c0:	d11c      	bne.n	800b8fc <HAL_RCC_OscConfig+0x18c>
 800b8c2:	4b46      	ldr	r3, [pc, #280]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d116      	bne.n	800b8fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b8ce:	4b43      	ldr	r3, [pc, #268]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f003 0302 	and.w	r3, r3, #2
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d005      	beq.n	800b8e6 <HAL_RCC_OscConfig+0x176>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	691b      	ldr	r3, [r3, #16]
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d001      	beq.n	800b8e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e1c0      	b.n	800bc68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8e6:	4b3d      	ldr	r3, [pc, #244]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	695b      	ldr	r3, [r3, #20]
 800b8f2:	00db      	lsls	r3, r3, #3
 800b8f4:	4939      	ldr	r1, [pc, #228]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b8fa:	e03a      	b.n	800b972 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	691b      	ldr	r3, [r3, #16]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d020      	beq.n	800b946 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b904:	4b36      	ldr	r3, [pc, #216]	; (800b9e0 <HAL_RCC_OscConfig+0x270>)
 800b906:	2201      	movs	r2, #1
 800b908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b90a:	f7fd feed 	bl	80096e8 <HAL_GetTick>
 800b90e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b910:	e008      	b.n	800b924 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b912:	f7fd fee9 	bl	80096e8 <HAL_GetTick>
 800b916:	4602      	mov	r2, r0
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	1ad3      	subs	r3, r2, r3
 800b91c:	2b02      	cmp	r3, #2
 800b91e:	d901      	bls.n	800b924 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b920:	2303      	movs	r3, #3
 800b922:	e1a1      	b.n	800bc68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b924:	4b2d      	ldr	r3, [pc, #180]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f003 0302 	and.w	r3, r3, #2
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d0f0      	beq.n	800b912 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b930:	4b2a      	ldr	r3, [pc, #168]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	695b      	ldr	r3, [r3, #20]
 800b93c:	00db      	lsls	r3, r3, #3
 800b93e:	4927      	ldr	r1, [pc, #156]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b940:	4313      	orrs	r3, r2
 800b942:	600b      	str	r3, [r1, #0]
 800b944:	e015      	b.n	800b972 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b946:	4b26      	ldr	r3, [pc, #152]	; (800b9e0 <HAL_RCC_OscConfig+0x270>)
 800b948:	2200      	movs	r2, #0
 800b94a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b94c:	f7fd fecc 	bl	80096e8 <HAL_GetTick>
 800b950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b952:	e008      	b.n	800b966 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b954:	f7fd fec8 	bl	80096e8 <HAL_GetTick>
 800b958:	4602      	mov	r2, r0
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	1ad3      	subs	r3, r2, r3
 800b95e:	2b02      	cmp	r3, #2
 800b960:	d901      	bls.n	800b966 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b962:	2303      	movs	r3, #3
 800b964:	e180      	b.n	800bc68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b966:	4b1d      	ldr	r3, [pc, #116]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f003 0302 	and.w	r3, r3, #2
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d1f0      	bne.n	800b954 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f003 0308 	and.w	r3, r3, #8
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d03a      	beq.n	800b9f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	699b      	ldr	r3, [r3, #24]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d019      	beq.n	800b9ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b986:	4b17      	ldr	r3, [pc, #92]	; (800b9e4 <HAL_RCC_OscConfig+0x274>)
 800b988:	2201      	movs	r2, #1
 800b98a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b98c:	f7fd feac 	bl	80096e8 <HAL_GetTick>
 800b990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b992:	e008      	b.n	800b9a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b994:	f7fd fea8 	bl	80096e8 <HAL_GetTick>
 800b998:	4602      	mov	r2, r0
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	1ad3      	subs	r3, r2, r3
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	d901      	bls.n	800b9a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b9a2:	2303      	movs	r3, #3
 800b9a4:	e160      	b.n	800bc68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b9a6:	4b0d      	ldr	r3, [pc, #52]	; (800b9dc <HAL_RCC_OscConfig+0x26c>)
 800b9a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9aa:	f003 0302 	and.w	r3, r3, #2
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d0f0      	beq.n	800b994 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b9b2:	2001      	movs	r0, #1
 800b9b4:	f000 face 	bl	800bf54 <RCC_Delay>
 800b9b8:	e01c      	b.n	800b9f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b9ba:	4b0a      	ldr	r3, [pc, #40]	; (800b9e4 <HAL_RCC_OscConfig+0x274>)
 800b9bc:	2200      	movs	r2, #0
 800b9be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b9c0:	f7fd fe92 	bl	80096e8 <HAL_GetTick>
 800b9c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b9c6:	e00f      	b.n	800b9e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b9c8:	f7fd fe8e 	bl	80096e8 <HAL_GetTick>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	1ad3      	subs	r3, r2, r3
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d908      	bls.n	800b9e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b9d6:	2303      	movs	r3, #3
 800b9d8:	e146      	b.n	800bc68 <HAL_RCC_OscConfig+0x4f8>
 800b9da:	bf00      	nop
 800b9dc:	40021000 	.word	0x40021000
 800b9e0:	42420000 	.word	0x42420000
 800b9e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b9e8:	4b92      	ldr	r3, [pc, #584]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800b9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ec:	f003 0302 	and.w	r3, r3, #2
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d1e9      	bne.n	800b9c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f003 0304 	and.w	r3, r3, #4
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	f000 80a6 	beq.w	800bb4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba02:	2300      	movs	r3, #0
 800ba04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ba06:	4b8b      	ldr	r3, [pc, #556]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800ba08:	69db      	ldr	r3, [r3, #28]
 800ba0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d10d      	bne.n	800ba2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba12:	4b88      	ldr	r3, [pc, #544]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800ba14:	69db      	ldr	r3, [r3, #28]
 800ba16:	4a87      	ldr	r2, [pc, #540]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800ba18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba1c:	61d3      	str	r3, [r2, #28]
 800ba1e:	4b85      	ldr	r3, [pc, #532]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800ba20:	69db      	ldr	r3, [r3, #28]
 800ba22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba26:	60bb      	str	r3, [r7, #8]
 800ba28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba2e:	4b82      	ldr	r3, [pc, #520]	; (800bc38 <HAL_RCC_OscConfig+0x4c8>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d118      	bne.n	800ba6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ba3a:	4b7f      	ldr	r3, [pc, #508]	; (800bc38 <HAL_RCC_OscConfig+0x4c8>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a7e      	ldr	r2, [pc, #504]	; (800bc38 <HAL_RCC_OscConfig+0x4c8>)
 800ba40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ba46:	f7fd fe4f 	bl	80096e8 <HAL_GetTick>
 800ba4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba4c:	e008      	b.n	800ba60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba4e:	f7fd fe4b 	bl	80096e8 <HAL_GetTick>
 800ba52:	4602      	mov	r2, r0
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	1ad3      	subs	r3, r2, r3
 800ba58:	2b64      	cmp	r3, #100	; 0x64
 800ba5a:	d901      	bls.n	800ba60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	e103      	b.n	800bc68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba60:	4b75      	ldr	r3, [pc, #468]	; (800bc38 <HAL_RCC_OscConfig+0x4c8>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d0f0      	beq.n	800ba4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d106      	bne.n	800ba82 <HAL_RCC_OscConfig+0x312>
 800ba74:	4b6f      	ldr	r3, [pc, #444]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800ba76:	6a1b      	ldr	r3, [r3, #32]
 800ba78:	4a6e      	ldr	r2, [pc, #440]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800ba7a:	f043 0301 	orr.w	r3, r3, #1
 800ba7e:	6213      	str	r3, [r2, #32]
 800ba80:	e02d      	b.n	800bade <HAL_RCC_OscConfig+0x36e>
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d10c      	bne.n	800baa4 <HAL_RCC_OscConfig+0x334>
 800ba8a:	4b6a      	ldr	r3, [pc, #424]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800ba8c:	6a1b      	ldr	r3, [r3, #32]
 800ba8e:	4a69      	ldr	r2, [pc, #420]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800ba90:	f023 0301 	bic.w	r3, r3, #1
 800ba94:	6213      	str	r3, [r2, #32]
 800ba96:	4b67      	ldr	r3, [pc, #412]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800ba98:	6a1b      	ldr	r3, [r3, #32]
 800ba9a:	4a66      	ldr	r2, [pc, #408]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800ba9c:	f023 0304 	bic.w	r3, r3, #4
 800baa0:	6213      	str	r3, [r2, #32]
 800baa2:	e01c      	b.n	800bade <HAL_RCC_OscConfig+0x36e>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	68db      	ldr	r3, [r3, #12]
 800baa8:	2b05      	cmp	r3, #5
 800baaa:	d10c      	bne.n	800bac6 <HAL_RCC_OscConfig+0x356>
 800baac:	4b61      	ldr	r3, [pc, #388]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800baae:	6a1b      	ldr	r3, [r3, #32]
 800bab0:	4a60      	ldr	r2, [pc, #384]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800bab2:	f043 0304 	orr.w	r3, r3, #4
 800bab6:	6213      	str	r3, [r2, #32]
 800bab8:	4b5e      	ldr	r3, [pc, #376]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800baba:	6a1b      	ldr	r3, [r3, #32]
 800babc:	4a5d      	ldr	r2, [pc, #372]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800babe:	f043 0301 	orr.w	r3, r3, #1
 800bac2:	6213      	str	r3, [r2, #32]
 800bac4:	e00b      	b.n	800bade <HAL_RCC_OscConfig+0x36e>
 800bac6:	4b5b      	ldr	r3, [pc, #364]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800bac8:	6a1b      	ldr	r3, [r3, #32]
 800baca:	4a5a      	ldr	r2, [pc, #360]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800bacc:	f023 0301 	bic.w	r3, r3, #1
 800bad0:	6213      	str	r3, [r2, #32]
 800bad2:	4b58      	ldr	r3, [pc, #352]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800bad4:	6a1b      	ldr	r3, [r3, #32]
 800bad6:	4a57      	ldr	r2, [pc, #348]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800bad8:	f023 0304 	bic.w	r3, r3, #4
 800badc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	68db      	ldr	r3, [r3, #12]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d015      	beq.n	800bb12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bae6:	f7fd fdff 	bl	80096e8 <HAL_GetTick>
 800baea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800baec:	e00a      	b.n	800bb04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800baee:	f7fd fdfb 	bl	80096e8 <HAL_GetTick>
 800baf2:	4602      	mov	r2, r0
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	1ad3      	subs	r3, r2, r3
 800baf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bafc:	4293      	cmp	r3, r2
 800bafe:	d901      	bls.n	800bb04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800bb00:	2303      	movs	r3, #3
 800bb02:	e0b1      	b.n	800bc68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb04:	4b4b      	ldr	r3, [pc, #300]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800bb06:	6a1b      	ldr	r3, [r3, #32]
 800bb08:	f003 0302 	and.w	r3, r3, #2
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d0ee      	beq.n	800baee <HAL_RCC_OscConfig+0x37e>
 800bb10:	e014      	b.n	800bb3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bb12:	f7fd fde9 	bl	80096e8 <HAL_GetTick>
 800bb16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bb18:	e00a      	b.n	800bb30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb1a:	f7fd fde5 	bl	80096e8 <HAL_GetTick>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	1ad3      	subs	r3, r2, r3
 800bb24:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d901      	bls.n	800bb30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800bb2c:	2303      	movs	r3, #3
 800bb2e:	e09b      	b.n	800bc68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bb30:	4b40      	ldr	r3, [pc, #256]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800bb32:	6a1b      	ldr	r3, [r3, #32]
 800bb34:	f003 0302 	and.w	r3, r3, #2
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d1ee      	bne.n	800bb1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800bb3c:	7dfb      	ldrb	r3, [r7, #23]
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d105      	bne.n	800bb4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bb42:	4b3c      	ldr	r3, [pc, #240]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800bb44:	69db      	ldr	r3, [r3, #28]
 800bb46:	4a3b      	ldr	r2, [pc, #236]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800bb48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	69db      	ldr	r3, [r3, #28]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	f000 8087 	beq.w	800bc66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bb58:	4b36      	ldr	r3, [pc, #216]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	f003 030c 	and.w	r3, r3, #12
 800bb60:	2b08      	cmp	r3, #8
 800bb62:	d061      	beq.n	800bc28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	69db      	ldr	r3, [r3, #28]
 800bb68:	2b02      	cmp	r3, #2
 800bb6a:	d146      	bne.n	800bbfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb6c:	4b33      	ldr	r3, [pc, #204]	; (800bc3c <HAL_RCC_OscConfig+0x4cc>)
 800bb6e:	2200      	movs	r2, #0
 800bb70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb72:	f7fd fdb9 	bl	80096e8 <HAL_GetTick>
 800bb76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bb78:	e008      	b.n	800bb8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb7a:	f7fd fdb5 	bl	80096e8 <HAL_GetTick>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	693b      	ldr	r3, [r7, #16]
 800bb82:	1ad3      	subs	r3, r2, r3
 800bb84:	2b02      	cmp	r3, #2
 800bb86:	d901      	bls.n	800bb8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800bb88:	2303      	movs	r3, #3
 800bb8a:	e06d      	b.n	800bc68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bb8c:	4b29      	ldr	r3, [pc, #164]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1f0      	bne.n	800bb7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6a1b      	ldr	r3, [r3, #32]
 800bb9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bba0:	d108      	bne.n	800bbb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800bba2:	4b24      	ldr	r3, [pc, #144]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	4921      	ldr	r1, [pc, #132]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bbb4:	4b1f      	ldr	r3, [pc, #124]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800bbb6:	685b      	ldr	r3, [r3, #4]
 800bbb8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	6a19      	ldr	r1, [r3, #32]
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbc4:	430b      	orrs	r3, r1
 800bbc6:	491b      	ldr	r1, [pc, #108]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bbcc:	4b1b      	ldr	r3, [pc, #108]	; (800bc3c <HAL_RCC_OscConfig+0x4cc>)
 800bbce:	2201      	movs	r2, #1
 800bbd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bbd2:	f7fd fd89 	bl	80096e8 <HAL_GetTick>
 800bbd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bbd8:	e008      	b.n	800bbec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bbda:	f7fd fd85 	bl	80096e8 <HAL_GetTick>
 800bbde:	4602      	mov	r2, r0
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	1ad3      	subs	r3, r2, r3
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d901      	bls.n	800bbec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800bbe8:	2303      	movs	r3, #3
 800bbea:	e03d      	b.n	800bc68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bbec:	4b11      	ldr	r3, [pc, #68]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d0f0      	beq.n	800bbda <HAL_RCC_OscConfig+0x46a>
 800bbf8:	e035      	b.n	800bc66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bbfa:	4b10      	ldr	r3, [pc, #64]	; (800bc3c <HAL_RCC_OscConfig+0x4cc>)
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc00:	f7fd fd72 	bl	80096e8 <HAL_GetTick>
 800bc04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bc06:	e008      	b.n	800bc1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc08:	f7fd fd6e 	bl	80096e8 <HAL_GetTick>
 800bc0c:	4602      	mov	r2, r0
 800bc0e:	693b      	ldr	r3, [r7, #16]
 800bc10:	1ad3      	subs	r3, r2, r3
 800bc12:	2b02      	cmp	r3, #2
 800bc14:	d901      	bls.n	800bc1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800bc16:	2303      	movs	r3, #3
 800bc18:	e026      	b.n	800bc68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bc1a:	4b06      	ldr	r3, [pc, #24]	; (800bc34 <HAL_RCC_OscConfig+0x4c4>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1f0      	bne.n	800bc08 <HAL_RCC_OscConfig+0x498>
 800bc26:	e01e      	b.n	800bc66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	69db      	ldr	r3, [r3, #28]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d107      	bne.n	800bc40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800bc30:	2301      	movs	r3, #1
 800bc32:	e019      	b.n	800bc68 <HAL_RCC_OscConfig+0x4f8>
 800bc34:	40021000 	.word	0x40021000
 800bc38:	40007000 	.word	0x40007000
 800bc3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800bc40:	4b0b      	ldr	r3, [pc, #44]	; (800bc70 <HAL_RCC_OscConfig+0x500>)
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6a1b      	ldr	r3, [r3, #32]
 800bc50:	429a      	cmp	r2, r3
 800bc52:	d106      	bne.n	800bc62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bc5e:	429a      	cmp	r2, r3
 800bc60:	d001      	beq.n	800bc66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	e000      	b.n	800bc68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800bc66:	2300      	movs	r3, #0
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3718      	adds	r7, #24
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}
 800bc70:	40021000 	.word	0x40021000

0800bc74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d101      	bne.n	800bc88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	e0d0      	b.n	800be2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bc88:	4b6a      	ldr	r3, [pc, #424]	; (800be34 <HAL_RCC_ClockConfig+0x1c0>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f003 0307 	and.w	r3, r3, #7
 800bc90:	683a      	ldr	r2, [r7, #0]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d910      	bls.n	800bcb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc96:	4b67      	ldr	r3, [pc, #412]	; (800be34 <HAL_RCC_ClockConfig+0x1c0>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f023 0207 	bic.w	r2, r3, #7
 800bc9e:	4965      	ldr	r1, [pc, #404]	; (800be34 <HAL_RCC_ClockConfig+0x1c0>)
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	4313      	orrs	r3, r2
 800bca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bca6:	4b63      	ldr	r3, [pc, #396]	; (800be34 <HAL_RCC_ClockConfig+0x1c0>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f003 0307 	and.w	r3, r3, #7
 800bcae:	683a      	ldr	r2, [r7, #0]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	d001      	beq.n	800bcb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	e0b8      	b.n	800be2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f003 0302 	and.w	r3, r3, #2
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d020      	beq.n	800bd06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f003 0304 	and.w	r3, r3, #4
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d005      	beq.n	800bcdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bcd0:	4b59      	ldr	r3, [pc, #356]	; (800be38 <HAL_RCC_ClockConfig+0x1c4>)
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	4a58      	ldr	r2, [pc, #352]	; (800be38 <HAL_RCC_ClockConfig+0x1c4>)
 800bcd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800bcda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f003 0308 	and.w	r3, r3, #8
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d005      	beq.n	800bcf4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bce8:	4b53      	ldr	r3, [pc, #332]	; (800be38 <HAL_RCC_ClockConfig+0x1c4>)
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	4a52      	ldr	r2, [pc, #328]	; (800be38 <HAL_RCC_ClockConfig+0x1c4>)
 800bcee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800bcf2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bcf4:	4b50      	ldr	r3, [pc, #320]	; (800be38 <HAL_RCC_ClockConfig+0x1c4>)
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	494d      	ldr	r1, [pc, #308]	; (800be38 <HAL_RCC_ClockConfig+0x1c4>)
 800bd02:	4313      	orrs	r3, r2
 800bd04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f003 0301 	and.w	r3, r3, #1
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d040      	beq.n	800bd94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	685b      	ldr	r3, [r3, #4]
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d107      	bne.n	800bd2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd1a:	4b47      	ldr	r3, [pc, #284]	; (800be38 <HAL_RCC_ClockConfig+0x1c4>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d115      	bne.n	800bd52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd26:	2301      	movs	r3, #1
 800bd28:	e07f      	b.n	800be2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	2b02      	cmp	r3, #2
 800bd30:	d107      	bne.n	800bd42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bd32:	4b41      	ldr	r3, [pc, #260]	; (800be38 <HAL_RCC_ClockConfig+0x1c4>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d109      	bne.n	800bd52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e073      	b.n	800be2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd42:	4b3d      	ldr	r3, [pc, #244]	; (800be38 <HAL_RCC_ClockConfig+0x1c4>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f003 0302 	and.w	r3, r3, #2
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d101      	bne.n	800bd52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e06b      	b.n	800be2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bd52:	4b39      	ldr	r3, [pc, #228]	; (800be38 <HAL_RCC_ClockConfig+0x1c4>)
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	f023 0203 	bic.w	r2, r3, #3
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	4936      	ldr	r1, [pc, #216]	; (800be38 <HAL_RCC_ClockConfig+0x1c4>)
 800bd60:	4313      	orrs	r3, r2
 800bd62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bd64:	f7fd fcc0 	bl	80096e8 <HAL_GetTick>
 800bd68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd6a:	e00a      	b.n	800bd82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bd6c:	f7fd fcbc 	bl	80096e8 <HAL_GetTick>
 800bd70:	4602      	mov	r2, r0
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	1ad3      	subs	r3, r2, r3
 800bd76:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d901      	bls.n	800bd82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bd7e:	2303      	movs	r3, #3
 800bd80:	e053      	b.n	800be2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd82:	4b2d      	ldr	r3, [pc, #180]	; (800be38 <HAL_RCC_ClockConfig+0x1c4>)
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	f003 020c 	and.w	r2, r3, #12
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d1eb      	bne.n	800bd6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bd94:	4b27      	ldr	r3, [pc, #156]	; (800be34 <HAL_RCC_ClockConfig+0x1c0>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f003 0307 	and.w	r3, r3, #7
 800bd9c:	683a      	ldr	r2, [r7, #0]
 800bd9e:	429a      	cmp	r2, r3
 800bda0:	d210      	bcs.n	800bdc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bda2:	4b24      	ldr	r3, [pc, #144]	; (800be34 <HAL_RCC_ClockConfig+0x1c0>)
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	f023 0207 	bic.w	r2, r3, #7
 800bdaa:	4922      	ldr	r1, [pc, #136]	; (800be34 <HAL_RCC_ClockConfig+0x1c0>)
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	4313      	orrs	r3, r2
 800bdb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdb2:	4b20      	ldr	r3, [pc, #128]	; (800be34 <HAL_RCC_ClockConfig+0x1c0>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	f003 0307 	and.w	r3, r3, #7
 800bdba:	683a      	ldr	r2, [r7, #0]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d001      	beq.n	800bdc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	e032      	b.n	800be2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f003 0304 	and.w	r3, r3, #4
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d008      	beq.n	800bde2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bdd0:	4b19      	ldr	r3, [pc, #100]	; (800be38 <HAL_RCC_ClockConfig+0x1c4>)
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	4916      	ldr	r1, [pc, #88]	; (800be38 <HAL_RCC_ClockConfig+0x1c4>)
 800bdde:	4313      	orrs	r3, r2
 800bde0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f003 0308 	and.w	r3, r3, #8
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d009      	beq.n	800be02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bdee:	4b12      	ldr	r3, [pc, #72]	; (800be38 <HAL_RCC_ClockConfig+0x1c4>)
 800bdf0:	685b      	ldr	r3, [r3, #4]
 800bdf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	00db      	lsls	r3, r3, #3
 800bdfc:	490e      	ldr	r1, [pc, #56]	; (800be38 <HAL_RCC_ClockConfig+0x1c4>)
 800bdfe:	4313      	orrs	r3, r2
 800be00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800be02:	f000 f821 	bl	800be48 <HAL_RCC_GetSysClockFreq>
 800be06:	4602      	mov	r2, r0
 800be08:	4b0b      	ldr	r3, [pc, #44]	; (800be38 <HAL_RCC_ClockConfig+0x1c4>)
 800be0a:	685b      	ldr	r3, [r3, #4]
 800be0c:	091b      	lsrs	r3, r3, #4
 800be0e:	f003 030f 	and.w	r3, r3, #15
 800be12:	490a      	ldr	r1, [pc, #40]	; (800be3c <HAL_RCC_ClockConfig+0x1c8>)
 800be14:	5ccb      	ldrb	r3, [r1, r3]
 800be16:	fa22 f303 	lsr.w	r3, r2, r3
 800be1a:	4a09      	ldr	r2, [pc, #36]	; (800be40 <HAL_RCC_ClockConfig+0x1cc>)
 800be1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800be1e:	4b09      	ldr	r3, [pc, #36]	; (800be44 <HAL_RCC_ClockConfig+0x1d0>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4618      	mov	r0, r3
 800be24:	f7fd fc1e 	bl	8009664 <HAL_InitTick>

  return HAL_OK;
 800be28:	2300      	movs	r3, #0
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3710      	adds	r7, #16
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	40022000 	.word	0x40022000
 800be38:	40021000 	.word	0x40021000
 800be3c:	0800ed10 	.word	0x0800ed10
 800be40:	200009c4 	.word	0x200009c4
 800be44:	200009c8 	.word	0x200009c8

0800be48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800be48:	b480      	push	{r7}
 800be4a:	b087      	sub	sp, #28
 800be4c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800be4e:	2300      	movs	r3, #0
 800be50:	60fb      	str	r3, [r7, #12]
 800be52:	2300      	movs	r3, #0
 800be54:	60bb      	str	r3, [r7, #8]
 800be56:	2300      	movs	r3, #0
 800be58:	617b      	str	r3, [r7, #20]
 800be5a:	2300      	movs	r3, #0
 800be5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800be5e:	2300      	movs	r3, #0
 800be60:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800be62:	4b1e      	ldr	r3, [pc, #120]	; (800bedc <HAL_RCC_GetSysClockFreq+0x94>)
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f003 030c 	and.w	r3, r3, #12
 800be6e:	2b04      	cmp	r3, #4
 800be70:	d002      	beq.n	800be78 <HAL_RCC_GetSysClockFreq+0x30>
 800be72:	2b08      	cmp	r3, #8
 800be74:	d003      	beq.n	800be7e <HAL_RCC_GetSysClockFreq+0x36>
 800be76:	e027      	b.n	800bec8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800be78:	4b19      	ldr	r3, [pc, #100]	; (800bee0 <HAL_RCC_GetSysClockFreq+0x98>)
 800be7a:	613b      	str	r3, [r7, #16]
      break;
 800be7c:	e027      	b.n	800bece <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	0c9b      	lsrs	r3, r3, #18
 800be82:	f003 030f 	and.w	r3, r3, #15
 800be86:	4a17      	ldr	r2, [pc, #92]	; (800bee4 <HAL_RCC_GetSysClockFreq+0x9c>)
 800be88:	5cd3      	ldrb	r3, [r2, r3]
 800be8a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be92:	2b00      	cmp	r3, #0
 800be94:	d010      	beq.n	800beb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800be96:	4b11      	ldr	r3, [pc, #68]	; (800bedc <HAL_RCC_GetSysClockFreq+0x94>)
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	0c5b      	lsrs	r3, r3, #17
 800be9c:	f003 0301 	and.w	r3, r3, #1
 800bea0:	4a11      	ldr	r2, [pc, #68]	; (800bee8 <HAL_RCC_GetSysClockFreq+0xa0>)
 800bea2:	5cd3      	ldrb	r3, [r2, r3]
 800bea4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	4a0d      	ldr	r2, [pc, #52]	; (800bee0 <HAL_RCC_GetSysClockFreq+0x98>)
 800beaa:	fb03 f202 	mul.w	r2, r3, r2
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800beb4:	617b      	str	r3, [r7, #20]
 800beb6:	e004      	b.n	800bec2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4a0c      	ldr	r2, [pc, #48]	; (800beec <HAL_RCC_GetSysClockFreq+0xa4>)
 800bebc:	fb02 f303 	mul.w	r3, r2, r3
 800bec0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	613b      	str	r3, [r7, #16]
      break;
 800bec6:	e002      	b.n	800bece <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800bec8:	4b05      	ldr	r3, [pc, #20]	; (800bee0 <HAL_RCC_GetSysClockFreq+0x98>)
 800beca:	613b      	str	r3, [r7, #16]
      break;
 800becc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bece:	693b      	ldr	r3, [r7, #16]
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	371c      	adds	r7, #28
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bc80      	pop	{r7}
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	40021000 	.word	0x40021000
 800bee0:	007a1200 	.word	0x007a1200
 800bee4:	0800ed28 	.word	0x0800ed28
 800bee8:	0800ed38 	.word	0x0800ed38
 800beec:	003d0900 	.word	0x003d0900

0800bef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bef0:	b480      	push	{r7}
 800bef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bef4:	4b02      	ldr	r3, [pc, #8]	; (800bf00 <HAL_RCC_GetHCLKFreq+0x10>)
 800bef6:	681b      	ldr	r3, [r3, #0]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	46bd      	mov	sp, r7
 800befc:	bc80      	pop	{r7}
 800befe:	4770      	bx	lr
 800bf00:	200009c4 	.word	0x200009c4

0800bf04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bf08:	f7ff fff2 	bl	800bef0 <HAL_RCC_GetHCLKFreq>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	4b05      	ldr	r3, [pc, #20]	; (800bf24 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bf10:	685b      	ldr	r3, [r3, #4]
 800bf12:	0a1b      	lsrs	r3, r3, #8
 800bf14:	f003 0307 	and.w	r3, r3, #7
 800bf18:	4903      	ldr	r1, [pc, #12]	; (800bf28 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bf1a:	5ccb      	ldrb	r3, [r1, r3]
 800bf1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	40021000 	.word	0x40021000
 800bf28:	0800ed20 	.word	0x0800ed20

0800bf2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bf30:	f7ff ffde 	bl	800bef0 <HAL_RCC_GetHCLKFreq>
 800bf34:	4602      	mov	r2, r0
 800bf36:	4b05      	ldr	r3, [pc, #20]	; (800bf4c <HAL_RCC_GetPCLK2Freq+0x20>)
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	0adb      	lsrs	r3, r3, #11
 800bf3c:	f003 0307 	and.w	r3, r3, #7
 800bf40:	4903      	ldr	r1, [pc, #12]	; (800bf50 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bf42:	5ccb      	ldrb	r3, [r1, r3]
 800bf44:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	40021000 	.word	0x40021000
 800bf50:	0800ed20 	.word	0x0800ed20

0800bf54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b085      	sub	sp, #20
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800bf5c:	4b0a      	ldr	r3, [pc, #40]	; (800bf88 <RCC_Delay+0x34>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a0a      	ldr	r2, [pc, #40]	; (800bf8c <RCC_Delay+0x38>)
 800bf62:	fba2 2303 	umull	r2, r3, r2, r3
 800bf66:	0a5b      	lsrs	r3, r3, #9
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	fb02 f303 	mul.w	r3, r2, r3
 800bf6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800bf70:	bf00      	nop
  }
  while (Delay --);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	1e5a      	subs	r2, r3, #1
 800bf76:	60fa      	str	r2, [r7, #12]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d1f9      	bne.n	800bf70 <RCC_Delay+0x1c>
}
 800bf7c:	bf00      	nop
 800bf7e:	bf00      	nop
 800bf80:	3714      	adds	r7, #20
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bc80      	pop	{r7}
 800bf86:	4770      	bx	lr
 800bf88:	200009c4 	.word	0x200009c4
 800bf8c:	10624dd3 	.word	0x10624dd3

0800bf90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d101      	bne.n	800bfa2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bf9e:	2301      	movs	r3, #1
 800bfa0:	e041      	b.n	800c026 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d106      	bne.n	800bfbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f7fd fa26 	bl	8009408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2202      	movs	r2, #2
 800bfc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	3304      	adds	r3, #4
 800bfcc:	4619      	mov	r1, r3
 800bfce:	4610      	mov	r0, r2
 800bfd0:	f000 fa82 	bl	800c4d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2201      	movs	r2, #1
 800bfe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2201      	movs	r2, #1
 800bff0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2201      	movs	r2, #1
 800bff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2201      	movs	r2, #1
 800c000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2201      	movs	r2, #1
 800c008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2201      	movs	r2, #1
 800c010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2201      	movs	r2, #1
 800c018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2201      	movs	r2, #1
 800c020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	3708      	adds	r7, #8
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}
	...

0800c030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c030:	b480      	push	{r7}
 800c032:	b085      	sub	sp, #20
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	2b01      	cmp	r3, #1
 800c042:	d001      	beq.n	800c048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c044:	2301      	movs	r3, #1
 800c046:	e044      	b.n	800c0d2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2202      	movs	r2, #2
 800c04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	68da      	ldr	r2, [r3, #12]
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f042 0201 	orr.w	r2, r2, #1
 800c05e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	4a1d      	ldr	r2, [pc, #116]	; (800c0dc <HAL_TIM_Base_Start_IT+0xac>)
 800c066:	4293      	cmp	r3, r2
 800c068:	d018      	beq.n	800c09c <HAL_TIM_Base_Start_IT+0x6c>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	4a1c      	ldr	r2, [pc, #112]	; (800c0e0 <HAL_TIM_Base_Start_IT+0xb0>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d013      	beq.n	800c09c <HAL_TIM_Base_Start_IT+0x6c>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c07c:	d00e      	beq.n	800c09c <HAL_TIM_Base_Start_IT+0x6c>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4a18      	ldr	r2, [pc, #96]	; (800c0e4 <HAL_TIM_Base_Start_IT+0xb4>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d009      	beq.n	800c09c <HAL_TIM_Base_Start_IT+0x6c>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	4a16      	ldr	r2, [pc, #88]	; (800c0e8 <HAL_TIM_Base_Start_IT+0xb8>)
 800c08e:	4293      	cmp	r3, r2
 800c090:	d004      	beq.n	800c09c <HAL_TIM_Base_Start_IT+0x6c>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a15      	ldr	r2, [pc, #84]	; (800c0ec <HAL_TIM_Base_Start_IT+0xbc>)
 800c098:	4293      	cmp	r3, r2
 800c09a:	d111      	bne.n	800c0c0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	689b      	ldr	r3, [r3, #8]
 800c0a2:	f003 0307 	and.w	r3, r3, #7
 800c0a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2b06      	cmp	r3, #6
 800c0ac:	d010      	beq.n	800c0d0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	f042 0201 	orr.w	r2, r2, #1
 800c0bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c0be:	e007      	b.n	800c0d0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f042 0201 	orr.w	r2, r2, #1
 800c0ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3714      	adds	r7, #20
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bc80      	pop	{r7}
 800c0da:	4770      	bx	lr
 800c0dc:	40012c00 	.word	0x40012c00
 800c0e0:	40013400 	.word	0x40013400
 800c0e4:	40000400 	.word	0x40000400
 800c0e8:	40000800 	.word	0x40000800
 800c0ec:	40000c00 	.word	0x40000c00

0800c0f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	691b      	ldr	r3, [r3, #16]
 800c0fe:	f003 0302 	and.w	r3, r3, #2
 800c102:	2b02      	cmp	r3, #2
 800c104:	d122      	bne.n	800c14c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	68db      	ldr	r3, [r3, #12]
 800c10c:	f003 0302 	and.w	r3, r3, #2
 800c110:	2b02      	cmp	r3, #2
 800c112:	d11b      	bne.n	800c14c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f06f 0202 	mvn.w	r2, #2
 800c11c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2201      	movs	r2, #1
 800c122:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	699b      	ldr	r3, [r3, #24]
 800c12a:	f003 0303 	and.w	r3, r3, #3
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d003      	beq.n	800c13a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f000 f9b4 	bl	800c4a0 <HAL_TIM_IC_CaptureCallback>
 800c138:	e005      	b.n	800c146 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	f000 f9a7 	bl	800c48e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 f9b6 	bl	800c4b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	691b      	ldr	r3, [r3, #16]
 800c152:	f003 0304 	and.w	r3, r3, #4
 800c156:	2b04      	cmp	r3, #4
 800c158:	d122      	bne.n	800c1a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	f003 0304 	and.w	r3, r3, #4
 800c164:	2b04      	cmp	r3, #4
 800c166:	d11b      	bne.n	800c1a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f06f 0204 	mvn.w	r2, #4
 800c170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2202      	movs	r2, #2
 800c176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	699b      	ldr	r3, [r3, #24]
 800c17e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c182:	2b00      	cmp	r3, #0
 800c184:	d003      	beq.n	800c18e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f000 f98a 	bl	800c4a0 <HAL_TIM_IC_CaptureCallback>
 800c18c:	e005      	b.n	800c19a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c18e:	6878      	ldr	r0, [r7, #4]
 800c190:	f000 f97d 	bl	800c48e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 f98c 	bl	800c4b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	691b      	ldr	r3, [r3, #16]
 800c1a6:	f003 0308 	and.w	r3, r3, #8
 800c1aa:	2b08      	cmp	r3, #8
 800c1ac:	d122      	bne.n	800c1f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	68db      	ldr	r3, [r3, #12]
 800c1b4:	f003 0308 	and.w	r3, r3, #8
 800c1b8:	2b08      	cmp	r3, #8
 800c1ba:	d11b      	bne.n	800c1f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	f06f 0208 	mvn.w	r2, #8
 800c1c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2204      	movs	r2, #4
 800c1ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	69db      	ldr	r3, [r3, #28]
 800c1d2:	f003 0303 	and.w	r3, r3, #3
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d003      	beq.n	800c1e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 f960 	bl	800c4a0 <HAL_TIM_IC_CaptureCallback>
 800c1e0:	e005      	b.n	800c1ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 f953 	bl	800c48e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 f962 	bl	800c4b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	691b      	ldr	r3, [r3, #16]
 800c1fa:	f003 0310 	and.w	r3, r3, #16
 800c1fe:	2b10      	cmp	r3, #16
 800c200:	d122      	bne.n	800c248 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	68db      	ldr	r3, [r3, #12]
 800c208:	f003 0310 	and.w	r3, r3, #16
 800c20c:	2b10      	cmp	r3, #16
 800c20e:	d11b      	bne.n	800c248 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f06f 0210 	mvn.w	r2, #16
 800c218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2208      	movs	r2, #8
 800c21e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	69db      	ldr	r3, [r3, #28]
 800c226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d003      	beq.n	800c236 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 f936 	bl	800c4a0 <HAL_TIM_IC_CaptureCallback>
 800c234:	e005      	b.n	800c242 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 f929 	bl	800c48e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 f938 	bl	800c4b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	691b      	ldr	r3, [r3, #16]
 800c24e:	f003 0301 	and.w	r3, r3, #1
 800c252:	2b01      	cmp	r3, #1
 800c254:	d10e      	bne.n	800c274 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	68db      	ldr	r3, [r3, #12]
 800c25c:	f003 0301 	and.w	r3, r3, #1
 800c260:	2b01      	cmp	r3, #1
 800c262:	d107      	bne.n	800c274 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f06f 0201 	mvn.w	r2, #1
 800c26c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f7fc fd5c 	bl	8008d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	691b      	ldr	r3, [r3, #16]
 800c27a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c27e:	2b80      	cmp	r3, #128	; 0x80
 800c280:	d10e      	bne.n	800c2a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68db      	ldr	r3, [r3, #12]
 800c288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c28c:	2b80      	cmp	r3, #128	; 0x80
 800c28e:	d107      	bne.n	800c2a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 faa1 	bl	800c7e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	691b      	ldr	r3, [r3, #16]
 800c2a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2aa:	2b40      	cmp	r3, #64	; 0x40
 800c2ac:	d10e      	bne.n	800c2cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2b8:	2b40      	cmp	r3, #64	; 0x40
 800c2ba:	d107      	bne.n	800c2cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c2c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 f8fc 	bl	800c4c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	691b      	ldr	r3, [r3, #16]
 800c2d2:	f003 0320 	and.w	r3, r3, #32
 800c2d6:	2b20      	cmp	r3, #32
 800c2d8:	d10e      	bne.n	800c2f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	68db      	ldr	r3, [r3, #12]
 800c2e0:	f003 0320 	and.w	r3, r3, #32
 800c2e4:	2b20      	cmp	r3, #32
 800c2e6:	d107      	bne.n	800c2f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f06f 0220 	mvn.w	r2, #32
 800c2f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 fa6c 	bl	800c7d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c2f8:	bf00      	nop
 800c2fa:	3708      	adds	r7, #8
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c30a:	2300      	movs	r3, #0
 800c30c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c314:	2b01      	cmp	r3, #1
 800c316:	d101      	bne.n	800c31c <HAL_TIM_ConfigClockSource+0x1c>
 800c318:	2302      	movs	r3, #2
 800c31a:	e0b4      	b.n	800c486 <HAL_TIM_ConfigClockSource+0x186>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2201      	movs	r2, #1
 800c320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2202      	movs	r2, #2
 800c328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	689b      	ldr	r3, [r3, #8]
 800c332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c33a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c342:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	68ba      	ldr	r2, [r7, #8]
 800c34a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c354:	d03e      	beq.n	800c3d4 <HAL_TIM_ConfigClockSource+0xd4>
 800c356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c35a:	f200 8087 	bhi.w	800c46c <HAL_TIM_ConfigClockSource+0x16c>
 800c35e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c362:	f000 8086 	beq.w	800c472 <HAL_TIM_ConfigClockSource+0x172>
 800c366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c36a:	d87f      	bhi.n	800c46c <HAL_TIM_ConfigClockSource+0x16c>
 800c36c:	2b70      	cmp	r3, #112	; 0x70
 800c36e:	d01a      	beq.n	800c3a6 <HAL_TIM_ConfigClockSource+0xa6>
 800c370:	2b70      	cmp	r3, #112	; 0x70
 800c372:	d87b      	bhi.n	800c46c <HAL_TIM_ConfigClockSource+0x16c>
 800c374:	2b60      	cmp	r3, #96	; 0x60
 800c376:	d050      	beq.n	800c41a <HAL_TIM_ConfigClockSource+0x11a>
 800c378:	2b60      	cmp	r3, #96	; 0x60
 800c37a:	d877      	bhi.n	800c46c <HAL_TIM_ConfigClockSource+0x16c>
 800c37c:	2b50      	cmp	r3, #80	; 0x50
 800c37e:	d03c      	beq.n	800c3fa <HAL_TIM_ConfigClockSource+0xfa>
 800c380:	2b50      	cmp	r3, #80	; 0x50
 800c382:	d873      	bhi.n	800c46c <HAL_TIM_ConfigClockSource+0x16c>
 800c384:	2b40      	cmp	r3, #64	; 0x40
 800c386:	d058      	beq.n	800c43a <HAL_TIM_ConfigClockSource+0x13a>
 800c388:	2b40      	cmp	r3, #64	; 0x40
 800c38a:	d86f      	bhi.n	800c46c <HAL_TIM_ConfigClockSource+0x16c>
 800c38c:	2b30      	cmp	r3, #48	; 0x30
 800c38e:	d064      	beq.n	800c45a <HAL_TIM_ConfigClockSource+0x15a>
 800c390:	2b30      	cmp	r3, #48	; 0x30
 800c392:	d86b      	bhi.n	800c46c <HAL_TIM_ConfigClockSource+0x16c>
 800c394:	2b20      	cmp	r3, #32
 800c396:	d060      	beq.n	800c45a <HAL_TIM_ConfigClockSource+0x15a>
 800c398:	2b20      	cmp	r3, #32
 800c39a:	d867      	bhi.n	800c46c <HAL_TIM_ConfigClockSource+0x16c>
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d05c      	beq.n	800c45a <HAL_TIM_ConfigClockSource+0x15a>
 800c3a0:	2b10      	cmp	r3, #16
 800c3a2:	d05a      	beq.n	800c45a <HAL_TIM_ConfigClockSource+0x15a>
 800c3a4:	e062      	b.n	800c46c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c3b6:	f000 f980 	bl	800c6ba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c3c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	68ba      	ldr	r2, [r7, #8]
 800c3d0:	609a      	str	r2, [r3, #8]
      break;
 800c3d2:	e04f      	b.n	800c474 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c3e0:	683b      	ldr	r3, [r7, #0]
 800c3e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c3e4:	f000 f969 	bl	800c6ba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	689a      	ldr	r2, [r3, #8]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c3f6:	609a      	str	r2, [r3, #8]
      break;
 800c3f8:	e03c      	b.n	800c474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c406:	461a      	mov	r2, r3
 800c408:	f000 f8e0 	bl	800c5cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2150      	movs	r1, #80	; 0x50
 800c412:	4618      	mov	r0, r3
 800c414:	f000 f937 	bl	800c686 <TIM_ITRx_SetConfig>
      break;
 800c418:	e02c      	b.n	800c474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c426:	461a      	mov	r2, r3
 800c428:	f000 f8fe 	bl	800c628 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	2160      	movs	r1, #96	; 0x60
 800c432:	4618      	mov	r0, r3
 800c434:	f000 f927 	bl	800c686 <TIM_ITRx_SetConfig>
      break;
 800c438:	e01c      	b.n	800c474 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c446:	461a      	mov	r2, r3
 800c448:	f000 f8c0 	bl	800c5cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2140      	movs	r1, #64	; 0x40
 800c452:	4618      	mov	r0, r3
 800c454:	f000 f917 	bl	800c686 <TIM_ITRx_SetConfig>
      break;
 800c458:	e00c      	b.n	800c474 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681a      	ldr	r2, [r3, #0]
 800c45e:	683b      	ldr	r3, [r7, #0]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4619      	mov	r1, r3
 800c464:	4610      	mov	r0, r2
 800c466:	f000 f90e 	bl	800c686 <TIM_ITRx_SetConfig>
      break;
 800c46a:	e003      	b.n	800c474 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c46c:	2301      	movs	r3, #1
 800c46e:	73fb      	strb	r3, [r7, #15]
      break;
 800c470:	e000      	b.n	800c474 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c472:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2200      	movs	r2, #0
 800c480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c484:	7bfb      	ldrb	r3, [r7, #15]
}
 800c486:	4618      	mov	r0, r3
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c48e:	b480      	push	{r7}
 800c490:	b083      	sub	sp, #12
 800c492:	af00      	add	r7, sp, #0
 800c494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c496:	bf00      	nop
 800c498:	370c      	adds	r7, #12
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bc80      	pop	{r7}
 800c49e:	4770      	bx	lr

0800c4a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c4a8:	bf00      	nop
 800c4aa:	370c      	adds	r7, #12
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bc80      	pop	{r7}
 800c4b0:	4770      	bx	lr

0800c4b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c4b2:	b480      	push	{r7}
 800c4b4:	b083      	sub	sp, #12
 800c4b6:	af00      	add	r7, sp, #0
 800c4b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c4ba:	bf00      	nop
 800c4bc:	370c      	adds	r7, #12
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bc80      	pop	{r7}
 800c4c2:	4770      	bx	lr

0800c4c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b083      	sub	sp, #12
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c4cc:	bf00      	nop
 800c4ce:	370c      	adds	r7, #12
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bc80      	pop	{r7}
 800c4d4:	4770      	bx	lr
	...

0800c4d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b085      	sub	sp, #20
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4a33      	ldr	r2, [pc, #204]	; (800c5b8 <TIM_Base_SetConfig+0xe0>)
 800c4ec:	4293      	cmp	r3, r2
 800c4ee:	d013      	beq.n	800c518 <TIM_Base_SetConfig+0x40>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	4a32      	ldr	r2, [pc, #200]	; (800c5bc <TIM_Base_SetConfig+0xe4>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d00f      	beq.n	800c518 <TIM_Base_SetConfig+0x40>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4fe:	d00b      	beq.n	800c518 <TIM_Base_SetConfig+0x40>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	4a2f      	ldr	r2, [pc, #188]	; (800c5c0 <TIM_Base_SetConfig+0xe8>)
 800c504:	4293      	cmp	r3, r2
 800c506:	d007      	beq.n	800c518 <TIM_Base_SetConfig+0x40>
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	4a2e      	ldr	r2, [pc, #184]	; (800c5c4 <TIM_Base_SetConfig+0xec>)
 800c50c:	4293      	cmp	r3, r2
 800c50e:	d003      	beq.n	800c518 <TIM_Base_SetConfig+0x40>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	4a2d      	ldr	r2, [pc, #180]	; (800c5c8 <TIM_Base_SetConfig+0xf0>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d108      	bne.n	800c52a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c51e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	68fa      	ldr	r2, [r7, #12]
 800c526:	4313      	orrs	r3, r2
 800c528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	4a22      	ldr	r2, [pc, #136]	; (800c5b8 <TIM_Base_SetConfig+0xe0>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d013      	beq.n	800c55a <TIM_Base_SetConfig+0x82>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	4a21      	ldr	r2, [pc, #132]	; (800c5bc <TIM_Base_SetConfig+0xe4>)
 800c536:	4293      	cmp	r3, r2
 800c538:	d00f      	beq.n	800c55a <TIM_Base_SetConfig+0x82>
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c540:	d00b      	beq.n	800c55a <TIM_Base_SetConfig+0x82>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	4a1e      	ldr	r2, [pc, #120]	; (800c5c0 <TIM_Base_SetConfig+0xe8>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d007      	beq.n	800c55a <TIM_Base_SetConfig+0x82>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	4a1d      	ldr	r2, [pc, #116]	; (800c5c4 <TIM_Base_SetConfig+0xec>)
 800c54e:	4293      	cmp	r3, r2
 800c550:	d003      	beq.n	800c55a <TIM_Base_SetConfig+0x82>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	4a1c      	ldr	r2, [pc, #112]	; (800c5c8 <TIM_Base_SetConfig+0xf0>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d108      	bne.n	800c56c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	68db      	ldr	r3, [r3, #12]
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	4313      	orrs	r3, r2
 800c56a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	695b      	ldr	r3, [r3, #20]
 800c576:	4313      	orrs	r3, r2
 800c578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	68fa      	ldr	r2, [r7, #12]
 800c57e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	689a      	ldr	r2, [r3, #8]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	681a      	ldr	r2, [r3, #0]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	4a09      	ldr	r2, [pc, #36]	; (800c5b8 <TIM_Base_SetConfig+0xe0>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d003      	beq.n	800c5a0 <TIM_Base_SetConfig+0xc8>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	4a08      	ldr	r2, [pc, #32]	; (800c5bc <TIM_Base_SetConfig+0xe4>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d103      	bne.n	800c5a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	691a      	ldr	r2, [r3, #16]
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	615a      	str	r2, [r3, #20]
}
 800c5ae:	bf00      	nop
 800c5b0:	3714      	adds	r7, #20
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bc80      	pop	{r7}
 800c5b6:	4770      	bx	lr
 800c5b8:	40012c00 	.word	0x40012c00
 800c5bc:	40013400 	.word	0x40013400
 800c5c0:	40000400 	.word	0x40000400
 800c5c4:	40000800 	.word	0x40000800
 800c5c8:	40000c00 	.word	0x40000c00

0800c5cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c5cc:	b480      	push	{r7}
 800c5ce:	b087      	sub	sp, #28
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	60f8      	str	r0, [r7, #12]
 800c5d4:	60b9      	str	r1, [r7, #8]
 800c5d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	6a1b      	ldr	r3, [r3, #32]
 800c5dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	6a1b      	ldr	r3, [r3, #32]
 800c5e2:	f023 0201 	bic.w	r2, r3, #1
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	699b      	ldr	r3, [r3, #24]
 800c5ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c5f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	011b      	lsls	r3, r3, #4
 800c5fc:	693a      	ldr	r2, [r7, #16]
 800c5fe:	4313      	orrs	r3, r2
 800c600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	f023 030a 	bic.w	r3, r3, #10
 800c608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c60a:	697a      	ldr	r2, [r7, #20]
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	4313      	orrs	r3, r2
 800c610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	693a      	ldr	r2, [r7, #16]
 800c616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	697a      	ldr	r2, [r7, #20]
 800c61c:	621a      	str	r2, [r3, #32]
}
 800c61e:	bf00      	nop
 800c620:	371c      	adds	r7, #28
 800c622:	46bd      	mov	sp, r7
 800c624:	bc80      	pop	{r7}
 800c626:	4770      	bx	lr

0800c628 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c628:	b480      	push	{r7}
 800c62a:	b087      	sub	sp, #28
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	60f8      	str	r0, [r7, #12]
 800c630:	60b9      	str	r1, [r7, #8]
 800c632:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	6a1b      	ldr	r3, [r3, #32]
 800c638:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	6a1b      	ldr	r3, [r3, #32]
 800c63e:	f023 0210 	bic.w	r2, r3, #16
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	699b      	ldr	r3, [r3, #24]
 800c64a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c652:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	031b      	lsls	r3, r3, #12
 800c658:	693a      	ldr	r2, [r7, #16]
 800c65a:	4313      	orrs	r3, r2
 800c65c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c664:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	011b      	lsls	r3, r3, #4
 800c66a:	697a      	ldr	r2, [r7, #20]
 800c66c:	4313      	orrs	r3, r2
 800c66e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	693a      	ldr	r2, [r7, #16]
 800c674:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	697a      	ldr	r2, [r7, #20]
 800c67a:	621a      	str	r2, [r3, #32]
}
 800c67c:	bf00      	nop
 800c67e:	371c      	adds	r7, #28
 800c680:	46bd      	mov	sp, r7
 800c682:	bc80      	pop	{r7}
 800c684:	4770      	bx	lr

0800c686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c686:	b480      	push	{r7}
 800c688:	b085      	sub	sp, #20
 800c68a:	af00      	add	r7, sp, #0
 800c68c:	6078      	str	r0, [r7, #4]
 800c68e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c69c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c69e:	683a      	ldr	r2, [r7, #0]
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	f043 0307 	orr.w	r3, r3, #7
 800c6a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	609a      	str	r2, [r3, #8]
}
 800c6b0:	bf00      	nop
 800c6b2:	3714      	adds	r7, #20
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bc80      	pop	{r7}
 800c6b8:	4770      	bx	lr

0800c6ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c6ba:	b480      	push	{r7}
 800c6bc:	b087      	sub	sp, #28
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	60f8      	str	r0, [r7, #12]
 800c6c2:	60b9      	str	r1, [r7, #8]
 800c6c4:	607a      	str	r2, [r7, #4]
 800c6c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	689b      	ldr	r3, [r3, #8]
 800c6cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c6d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	021a      	lsls	r2, r3, #8
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	431a      	orrs	r2, r3
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	697a      	ldr	r2, [r7, #20]
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	697a      	ldr	r2, [r7, #20]
 800c6ec:	609a      	str	r2, [r3, #8]
}
 800c6ee:	bf00      	nop
 800c6f0:	371c      	adds	r7, #28
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bc80      	pop	{r7}
 800c6f6:	4770      	bx	lr

0800c6f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b085      	sub	sp, #20
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c708:	2b01      	cmp	r3, #1
 800c70a:	d101      	bne.n	800c710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c70c:	2302      	movs	r3, #2
 800c70e:	e050      	b.n	800c7b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2201      	movs	r2, #1
 800c714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2202      	movs	r2, #2
 800c71c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	689b      	ldr	r3, [r3, #8]
 800c72e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c736:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	68fa      	ldr	r2, [r7, #12]
 800c73e:	4313      	orrs	r3, r2
 800c740:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	68fa      	ldr	r2, [r7, #12]
 800c748:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	4a1b      	ldr	r2, [pc, #108]	; (800c7bc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c750:	4293      	cmp	r3, r2
 800c752:	d018      	beq.n	800c786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a19      	ldr	r2, [pc, #100]	; (800c7c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c75a:	4293      	cmp	r3, r2
 800c75c:	d013      	beq.n	800c786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c766:	d00e      	beq.n	800c786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4a15      	ldr	r2, [pc, #84]	; (800c7c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d009      	beq.n	800c786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	4a14      	ldr	r2, [pc, #80]	; (800c7c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d004      	beq.n	800c786 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4a12      	ldr	r2, [pc, #72]	; (800c7cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c782:	4293      	cmp	r3, r2
 800c784:	d10c      	bne.n	800c7a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c78c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	68ba      	ldr	r2, [r7, #8]
 800c794:	4313      	orrs	r3, r2
 800c796:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	68ba      	ldr	r2, [r7, #8]
 800c79e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c7b0:	2300      	movs	r3, #0
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3714      	adds	r7, #20
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bc80      	pop	{r7}
 800c7ba:	4770      	bx	lr
 800c7bc:	40012c00 	.word	0x40012c00
 800c7c0:	40013400 	.word	0x40013400
 800c7c4:	40000400 	.word	0x40000400
 800c7c8:	40000800 	.word	0x40000800
 800c7cc:	40000c00 	.word	0x40000c00

0800c7d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b083      	sub	sp, #12
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c7d8:	bf00      	nop
 800c7da:	370c      	adds	r7, #12
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bc80      	pop	{r7}
 800c7e0:	4770      	bx	lr

0800c7e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c7e2:	b480      	push	{r7}
 800c7e4:	b083      	sub	sp, #12
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c7ea:	bf00      	nop
 800c7ec:	370c      	adds	r7, #12
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bc80      	pop	{r7}
 800c7f2:	4770      	bx	lr

0800c7f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d101      	bne.n	800c806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c802:	2301      	movs	r3, #1
 800c804:	e042      	b.n	800c88c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c80c:	b2db      	uxtb	r3, r3
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d106      	bne.n	800c820 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2200      	movs	r2, #0
 800c816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f7fc fe1a 	bl	8009454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2224      	movs	r2, #36	; 0x24
 800c824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	68da      	ldr	r2, [r3, #12]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c836:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f000 fd11 	bl	800d260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	691a      	ldr	r2, [r3, #16]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c84c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	695a      	ldr	r2, [r3, #20]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c85c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	68da      	ldr	r2, [r3, #12]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c86c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2200      	movs	r2, #0
 800c872:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2220      	movs	r2, #32
 800c878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2220      	movs	r2, #32
 800c880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2200      	movs	r2, #0
 800c888:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c88a:	2300      	movs	r3, #0
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3708      	adds	r7, #8
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c894:	b480      	push	{r7}
 800c896:	b085      	sub	sp, #20
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	4613      	mov	r3, r2
 800c8a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	2b20      	cmp	r3, #32
 800c8ac:	d121      	bne.n	800c8f2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d002      	beq.n	800c8ba <HAL_UART_Transmit_IT+0x26>
 800c8b4:	88fb      	ldrh	r3, [r7, #6]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d101      	bne.n	800c8be <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	e01a      	b.n	800c8f4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	68ba      	ldr	r2, [r7, #8]
 800c8c2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	88fa      	ldrh	r2, [r7, #6]
 800c8c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	88fa      	ldrh	r2, [r7, #6]
 800c8ce:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	2221      	movs	r2, #33	; 0x21
 800c8da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	68da      	ldr	r2, [r3, #12]
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c8ec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	e000      	b.n	800c8f4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c8f2:	2302      	movs	r3, #2
  }
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3714      	adds	r7, #20
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bc80      	pop	{r7}
 800c8fc:	4770      	bx	lr

0800c8fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c8fe:	b580      	push	{r7, lr}
 800c900:	b084      	sub	sp, #16
 800c902:	af00      	add	r7, sp, #0
 800c904:	60f8      	str	r0, [r7, #12]
 800c906:	60b9      	str	r1, [r7, #8]
 800c908:	4613      	mov	r3, r2
 800c90a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c912:	b2db      	uxtb	r3, r3
 800c914:	2b20      	cmp	r3, #32
 800c916:	d112      	bne.n	800c93e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d002      	beq.n	800c924 <HAL_UART_Receive_IT+0x26>
 800c91e:	88fb      	ldrh	r3, [r7, #6]
 800c920:	2b00      	cmp	r3, #0
 800c922:	d101      	bne.n	800c928 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c924:	2301      	movs	r3, #1
 800c926:	e00b      	b.n	800c940 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	2200      	movs	r2, #0
 800c92c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c92e:	88fb      	ldrh	r3, [r7, #6]
 800c930:	461a      	mov	r2, r3
 800c932:	68b9      	ldr	r1, [r7, #8]
 800c934:	68f8      	ldr	r0, [r7, #12]
 800c936:	f000 fabf 	bl	800ceb8 <UART_Start_Receive_IT>
 800c93a:	4603      	mov	r3, r0
 800c93c:	e000      	b.n	800c940 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800c93e:	2302      	movs	r3, #2
  }
}
 800c940:	4618      	mov	r0, r3
 800c942:	3710      	adds	r7, #16
 800c944:	46bd      	mov	sp, r7
 800c946:	bd80      	pop	{r7, pc}

0800c948 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b0ba      	sub	sp, #232	; 0xe8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	68db      	ldr	r3, [r3, #12]
 800c960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	695b      	ldr	r3, [r3, #20]
 800c96a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c96e:	2300      	movs	r3, #0
 800c970:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c974:	2300      	movs	r3, #0
 800c976:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c97a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c97e:	f003 030f 	and.w	r3, r3, #15
 800c982:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d10f      	bne.n	800c9ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c98e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c992:	f003 0320 	and.w	r3, r3, #32
 800c996:	2b00      	cmp	r3, #0
 800c998:	d009      	beq.n	800c9ae <HAL_UART_IRQHandler+0x66>
 800c99a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c99e:	f003 0320 	and.w	r3, r3, #32
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d003      	beq.n	800c9ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f000 fb9c 	bl	800d0e4 <UART_Receive_IT>
      return;
 800c9ac:	e25b      	b.n	800ce66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c9ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	f000 80de 	beq.w	800cb74 <HAL_UART_IRQHandler+0x22c>
 800c9b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c9bc:	f003 0301 	and.w	r3, r3, #1
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d106      	bne.n	800c9d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c9c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	f000 80d1 	beq.w	800cb74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c9d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9d6:	f003 0301 	and.w	r3, r3, #1
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d00b      	beq.n	800c9f6 <HAL_UART_IRQHandler+0xae>
 800c9de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d005      	beq.n	800c9f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9ee:	f043 0201 	orr.w	r2, r3, #1
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c9f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c9fa:	f003 0304 	and.w	r3, r3, #4
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d00b      	beq.n	800ca1a <HAL_UART_IRQHandler+0xd2>
 800ca02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca06:	f003 0301 	and.w	r3, r3, #1
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d005      	beq.n	800ca1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca12:	f043 0202 	orr.w	r2, r3, #2
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ca1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca1e:	f003 0302 	and.w	r3, r3, #2
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00b      	beq.n	800ca3e <HAL_UART_IRQHandler+0xf6>
 800ca26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca2a:	f003 0301 	and.w	r3, r3, #1
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d005      	beq.n	800ca3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca36:	f043 0204 	orr.w	r2, r3, #4
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ca3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca42:	f003 0308 	and.w	r3, r3, #8
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d011      	beq.n	800ca6e <HAL_UART_IRQHandler+0x126>
 800ca4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca4e:	f003 0320 	and.w	r3, r3, #32
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d105      	bne.n	800ca62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ca56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca5a:	f003 0301 	and.w	r3, r3, #1
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d005      	beq.n	800ca6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca66:	f043 0208 	orr.w	r2, r3, #8
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	f000 81f2 	beq.w	800ce5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ca78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca7c:	f003 0320 	and.w	r3, r3, #32
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d008      	beq.n	800ca96 <HAL_UART_IRQHandler+0x14e>
 800ca84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca88:	f003 0320 	and.w	r3, r3, #32
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d002      	beq.n	800ca96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ca90:	6878      	ldr	r0, [r7, #4]
 800ca92:	f000 fb27 	bl	800d0e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	695b      	ldr	r3, [r3, #20]
 800ca9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	bf14      	ite	ne
 800caa4:	2301      	movne	r3, #1
 800caa6:	2300      	moveq	r3, #0
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cab2:	f003 0308 	and.w	r3, r3, #8
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d103      	bne.n	800cac2 <HAL_UART_IRQHandler+0x17a>
 800caba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d04f      	beq.n	800cb62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	f000 fa31 	bl	800cf2a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	695b      	ldr	r3, [r3, #20]
 800cace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d041      	beq.n	800cb5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	3314      	adds	r3, #20
 800cadc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cae0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cae4:	e853 3f00 	ldrex	r3, [r3]
 800cae8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800caec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800caf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800caf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	3314      	adds	r3, #20
 800cafe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cb02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cb06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cb0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cb12:	e841 2300 	strex	r3, r2, [r1]
 800cb16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cb1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d1d9      	bne.n	800cad6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d013      	beq.n	800cb52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb2e:	4a7e      	ldr	r2, [pc, #504]	; (800cd28 <HAL_UART_IRQHandler+0x3e0>)
 800cb30:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb36:	4618      	mov	r0, r3
 800cb38:	f7fd f848 	bl	8009bcc <HAL_DMA_Abort_IT>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d016      	beq.n	800cb70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cb46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cb4c:	4610      	mov	r0, r2
 800cb4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb50:	e00e      	b.n	800cb70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 f99c 	bl	800ce90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb58:	e00a      	b.n	800cb70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f000 f998 	bl	800ce90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb60:	e006      	b.n	800cb70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 f994 	bl	800ce90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800cb6e:	e175      	b.n	800ce5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cb70:	bf00      	nop
    return;
 800cb72:	e173      	b.n	800ce5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb78:	2b01      	cmp	r3, #1
 800cb7a:	f040 814f 	bne.w	800ce1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800cb7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb82:	f003 0310 	and.w	r3, r3, #16
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	f000 8148 	beq.w	800ce1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800cb8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb90:	f003 0310 	and.w	r3, r3, #16
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	f000 8141 	beq.w	800ce1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	60bb      	str	r3, [r7, #8]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	60bb      	str	r3, [r7, #8]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	60bb      	str	r3, [r7, #8]
 800cbae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	695b      	ldr	r3, [r3, #20]
 800cbb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	f000 80b6 	beq.w	800cd2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cbcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	f000 8145 	beq.w	800ce60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cbda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	f080 813e 	bcs.w	800ce60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800cbea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbf0:	699b      	ldr	r3, [r3, #24]
 800cbf2:	2b20      	cmp	r3, #32
 800cbf4:	f000 8088 	beq.w	800cd08 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	330c      	adds	r3, #12
 800cbfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cc06:	e853 3f00 	ldrex	r3, [r3]
 800cc0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cc0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cc12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cc16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	330c      	adds	r3, #12
 800cc20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800cc24:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cc28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cc30:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cc34:	e841 2300 	strex	r3, r2, [r1]
 800cc38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cc3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d1d9      	bne.n	800cbf8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	3314      	adds	r3, #20
 800cc4a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc4e:	e853 3f00 	ldrex	r3, [r3]
 800cc52:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cc54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cc56:	f023 0301 	bic.w	r3, r3, #1
 800cc5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	3314      	adds	r3, #20
 800cc64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cc68:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cc6c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc6e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cc70:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cc74:	e841 2300 	strex	r3, r2, [r1]
 800cc78:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cc7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d1e1      	bne.n	800cc44 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	3314      	adds	r3, #20
 800cc86:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc8a:	e853 3f00 	ldrex	r3, [r3]
 800cc8e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cc90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	3314      	adds	r3, #20
 800cca0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cca4:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cca6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ccaa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ccac:	e841 2300 	strex	r3, r2, [r1]
 800ccb0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ccb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d1e3      	bne.n	800cc80 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2220      	movs	r2, #32
 800ccbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	330c      	adds	r3, #12
 800cccc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccd0:	e853 3f00 	ldrex	r3, [r3]
 800ccd4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ccd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccd8:	f023 0310 	bic.w	r3, r3, #16
 800ccdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	330c      	adds	r3, #12
 800cce6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ccea:	65ba      	str	r2, [r7, #88]	; 0x58
 800ccec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ccf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ccf2:	e841 2300 	strex	r3, r2, [r1]
 800ccf6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ccf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d1e3      	bne.n	800ccc6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7fc ff27 	bl	8009b56 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	2202      	movs	r2, #2
 800cd0c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	1ad3      	subs	r3, r2, r3
 800cd1a:	b29b      	uxth	r3, r3
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 f8bf 	bl	800cea2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cd24:	e09c      	b.n	800ce60 <HAL_UART_IRQHandler+0x518>
 800cd26:	bf00      	nop
 800cd28:	0800cfef 	.word	0x0800cfef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	1ad3      	subs	r3, r2, r3
 800cd38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	f000 808e 	beq.w	800ce64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800cd48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	f000 8089 	beq.w	800ce64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	330c      	adds	r3, #12
 800cd58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5c:	e853 3f00 	ldrex	r3, [r3]
 800cd60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cd62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cd68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	330c      	adds	r3, #12
 800cd72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cd76:	647a      	str	r2, [r7, #68]	; 0x44
 800cd78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cd7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd7e:	e841 2300 	strex	r3, r2, [r1]
 800cd82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cd84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d1e3      	bne.n	800cd52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	3314      	adds	r3, #20
 800cd90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd94:	e853 3f00 	ldrex	r3, [r3]
 800cd98:	623b      	str	r3, [r7, #32]
   return(result);
 800cd9a:	6a3b      	ldr	r3, [r7, #32]
 800cd9c:	f023 0301 	bic.w	r3, r3, #1
 800cda0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	3314      	adds	r3, #20
 800cdaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800cdae:	633a      	str	r2, [r7, #48]	; 0x30
 800cdb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cdb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdb6:	e841 2300 	strex	r3, r2, [r1]
 800cdba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cdbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d1e3      	bne.n	800cd8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2220      	movs	r2, #32
 800cdc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	330c      	adds	r3, #12
 800cdd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	e853 3f00 	ldrex	r3, [r3]
 800cdde:	60fb      	str	r3, [r7, #12]
   return(result);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f023 0310 	bic.w	r3, r3, #16
 800cde6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	330c      	adds	r3, #12
 800cdf0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cdf4:	61fa      	str	r2, [r7, #28]
 800cdf6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdf8:	69b9      	ldr	r1, [r7, #24]
 800cdfa:	69fa      	ldr	r2, [r7, #28]
 800cdfc:	e841 2300 	strex	r3, r2, [r1]
 800ce00:	617b      	str	r3, [r7, #20]
   return(result);
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d1e3      	bne.n	800cdd0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2202      	movs	r2, #2
 800ce0c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ce0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ce12:	4619      	mov	r1, r3
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f000 f844 	bl	800cea2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ce1a:	e023      	b.n	800ce64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ce1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d009      	beq.n	800ce3c <HAL_UART_IRQHandler+0x4f4>
 800ce28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d003      	beq.n	800ce3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f000 f8ee 	bl	800d016 <UART_Transmit_IT>
    return;
 800ce3a:	e014      	b.n	800ce66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ce3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d00e      	beq.n	800ce66 <HAL_UART_IRQHandler+0x51e>
 800ce48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d008      	beq.n	800ce66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 f92d 	bl	800d0b4 <UART_EndTransmit_IT>
    return;
 800ce5a:	e004      	b.n	800ce66 <HAL_UART_IRQHandler+0x51e>
    return;
 800ce5c:	bf00      	nop
 800ce5e:	e002      	b.n	800ce66 <HAL_UART_IRQHandler+0x51e>
      return;
 800ce60:	bf00      	nop
 800ce62:	e000      	b.n	800ce66 <HAL_UART_IRQHandler+0x51e>
      return;
 800ce64:	bf00      	nop
  }
}
 800ce66:	37e8      	adds	r7, #232	; 0xe8
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b083      	sub	sp, #12
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ce74:	bf00      	nop
 800ce76:	370c      	adds	r7, #12
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bc80      	pop	{r7}
 800ce7c:	4770      	bx	lr

0800ce7e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ce7e:	b480      	push	{r7}
 800ce80:	b083      	sub	sp, #12
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ce86:	bf00      	nop
 800ce88:	370c      	adds	r7, #12
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bc80      	pop	{r7}
 800ce8e:	4770      	bx	lr

0800ce90 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ce98:	bf00      	nop
 800ce9a:	370c      	adds	r7, #12
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bc80      	pop	{r7}
 800cea0:	4770      	bx	lr

0800cea2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cea2:	b480      	push	{r7}
 800cea4:	b083      	sub	sp, #12
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
 800ceaa:	460b      	mov	r3, r1
 800ceac:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ceae:	bf00      	nop
 800ceb0:	370c      	adds	r7, #12
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bc80      	pop	{r7}
 800ceb6:	4770      	bx	lr

0800ceb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b085      	sub	sp, #20
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	4613      	mov	r3, r2
 800cec4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	68ba      	ldr	r2, [r7, #8]
 800ceca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	88fa      	ldrh	r2, [r7, #6]
 800ced0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	88fa      	ldrh	r2, [r7, #6]
 800ced6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2200      	movs	r2, #0
 800cedc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2222      	movs	r2, #34	; 0x22
 800cee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	691b      	ldr	r3, [r3, #16]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d007      	beq.n	800cefe <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	68da      	ldr	r2, [r3, #12]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cefc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	695a      	ldr	r2, [r3, #20]
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f042 0201 	orr.w	r2, r2, #1
 800cf0c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	68da      	ldr	r2, [r3, #12]
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f042 0220 	orr.w	r2, r2, #32
 800cf1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cf1e:	2300      	movs	r3, #0
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3714      	adds	r7, #20
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bc80      	pop	{r7}
 800cf28:	4770      	bx	lr

0800cf2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cf2a:	b480      	push	{r7}
 800cf2c:	b095      	sub	sp, #84	; 0x54
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	330c      	adds	r3, #12
 800cf38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf3c:	e853 3f00 	ldrex	r3, [r3]
 800cf40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cf48:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	330c      	adds	r3, #12
 800cf50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cf52:	643a      	str	r2, [r7, #64]	; 0x40
 800cf54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cf58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cf5a:	e841 2300 	strex	r3, r2, [r1]
 800cf5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cf60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d1e5      	bne.n	800cf32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	3314      	adds	r3, #20
 800cf6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf6e:	6a3b      	ldr	r3, [r7, #32]
 800cf70:	e853 3f00 	ldrex	r3, [r3]
 800cf74:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf76:	69fb      	ldr	r3, [r7, #28]
 800cf78:	f023 0301 	bic.w	r3, r3, #1
 800cf7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	3314      	adds	r3, #20
 800cf84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cf86:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cf88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf8e:	e841 2300 	strex	r3, r2, [r1]
 800cf92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d1e5      	bne.n	800cf66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf9e:	2b01      	cmp	r3, #1
 800cfa0:	d119      	bne.n	800cfd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	330c      	adds	r3, #12
 800cfa8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	e853 3f00 	ldrex	r3, [r3]
 800cfb0:	60bb      	str	r3, [r7, #8]
   return(result);
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	f023 0310 	bic.w	r3, r3, #16
 800cfb8:	647b      	str	r3, [r7, #68]	; 0x44
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	330c      	adds	r3, #12
 800cfc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cfc2:	61ba      	str	r2, [r7, #24]
 800cfc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfc6:	6979      	ldr	r1, [r7, #20]
 800cfc8:	69ba      	ldr	r2, [r7, #24]
 800cfca:	e841 2300 	strex	r3, r2, [r1]
 800cfce:	613b      	str	r3, [r7, #16]
   return(result);
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d1e5      	bne.n	800cfa2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2220      	movs	r2, #32
 800cfda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	631a      	str	r2, [r3, #48]	; 0x30
}
 800cfe4:	bf00      	nop
 800cfe6:	3754      	adds	r7, #84	; 0x54
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bc80      	pop	{r7}
 800cfec:	4770      	bx	lr

0800cfee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cfee:	b580      	push	{r7, lr}
 800cff0:	b084      	sub	sp, #16
 800cff2:	af00      	add	r7, sp, #0
 800cff4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cffa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2200      	movs	r2, #0
 800d000:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2200      	movs	r2, #0
 800d006:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d008:	68f8      	ldr	r0, [r7, #12]
 800d00a:	f7ff ff41 	bl	800ce90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d00e:	bf00      	nop
 800d010:	3710      	adds	r7, #16
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}

0800d016 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d016:	b480      	push	{r7}
 800d018:	b085      	sub	sp, #20
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d024:	b2db      	uxtb	r3, r3
 800d026:	2b21      	cmp	r3, #33	; 0x21
 800d028:	d13e      	bne.n	800d0a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	689b      	ldr	r3, [r3, #8]
 800d02e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d032:	d114      	bne.n	800d05e <UART_Transmit_IT+0x48>
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	691b      	ldr	r3, [r3, #16]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d110      	bne.n	800d05e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	6a1b      	ldr	r3, [r3, #32]
 800d040:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	881b      	ldrh	r3, [r3, #0]
 800d046:	461a      	mov	r2, r3
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d050:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6a1b      	ldr	r3, [r3, #32]
 800d056:	1c9a      	adds	r2, r3, #2
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	621a      	str	r2, [r3, #32]
 800d05c:	e008      	b.n	800d070 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6a1b      	ldr	r3, [r3, #32]
 800d062:	1c59      	adds	r1, r3, #1
 800d064:	687a      	ldr	r2, [r7, #4]
 800d066:	6211      	str	r1, [r2, #32]
 800d068:	781a      	ldrb	r2, [r3, #0]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d074:	b29b      	uxth	r3, r3
 800d076:	3b01      	subs	r3, #1
 800d078:	b29b      	uxth	r3, r3
 800d07a:	687a      	ldr	r2, [r7, #4]
 800d07c:	4619      	mov	r1, r3
 800d07e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d080:	2b00      	cmp	r3, #0
 800d082:	d10f      	bne.n	800d0a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	68da      	ldr	r2, [r3, #12]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d092:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	68da      	ldr	r2, [r3, #12]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d0a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	e000      	b.n	800d0aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d0a8:	2302      	movs	r3, #2
  }
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3714      	adds	r7, #20
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bc80      	pop	{r7}
 800d0b2:	4770      	bx	lr

0800d0b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b082      	sub	sp, #8
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	68da      	ldr	r2, [r3, #12]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d0ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2220      	movs	r2, #32
 800d0d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f7ff fec9 	bl	800ce6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d0da:	2300      	movs	r3, #0
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	3708      	adds	r7, #8
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bd80      	pop	{r7, pc}

0800d0e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b08c      	sub	sp, #48	; 0x30
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	2b22      	cmp	r3, #34	; 0x22
 800d0f6:	f040 80ae 	bne.w	800d256 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	689b      	ldr	r3, [r3, #8]
 800d0fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d102:	d117      	bne.n	800d134 <UART_Receive_IT+0x50>
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	691b      	ldr	r3, [r3, #16]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d113      	bne.n	800d134 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d10c:	2300      	movs	r3, #0
 800d10e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d114:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	b29b      	uxth	r3, r3
 800d11e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d122:	b29a      	uxth	r2, r3
 800d124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d126:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d12c:	1c9a      	adds	r2, r3, #2
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	629a      	str	r2, [r3, #40]	; 0x28
 800d132:	e026      	b.n	800d182 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d138:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800d13a:	2300      	movs	r3, #0
 800d13c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	689b      	ldr	r3, [r3, #8]
 800d142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d146:	d007      	beq.n	800d158 <UART_Receive_IT+0x74>
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	689b      	ldr	r3, [r3, #8]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d10a      	bne.n	800d166 <UART_Receive_IT+0x82>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	691b      	ldr	r3, [r3, #16]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d106      	bne.n	800d166 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	b2da      	uxtb	r2, r3
 800d160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d162:	701a      	strb	r2, [r3, #0]
 800d164:	e008      	b.n	800d178 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d172:	b2da      	uxtb	r2, r3
 800d174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d176:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d17c:	1c5a      	adds	r2, r3, #1
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d186:	b29b      	uxth	r3, r3
 800d188:	3b01      	subs	r3, #1
 800d18a:	b29b      	uxth	r3, r3
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	4619      	mov	r1, r3
 800d190:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d192:	2b00      	cmp	r3, #0
 800d194:	d15d      	bne.n	800d252 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	68da      	ldr	r2, [r3, #12]
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f022 0220 	bic.w	r2, r2, #32
 800d1a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	68da      	ldr	r2, [r3, #12]
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d1b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	695a      	ldr	r2, [r3, #20]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f022 0201 	bic.w	r2, r2, #1
 800d1c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2220      	movs	r2, #32
 800d1ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d135      	bne.n	800d248 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	330c      	adds	r3, #12
 800d1e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	e853 3f00 	ldrex	r3, [r3]
 800d1f0:	613b      	str	r3, [r7, #16]
   return(result);
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	f023 0310 	bic.w	r3, r3, #16
 800d1f8:	627b      	str	r3, [r7, #36]	; 0x24
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	330c      	adds	r3, #12
 800d200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d202:	623a      	str	r2, [r7, #32]
 800d204:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d206:	69f9      	ldr	r1, [r7, #28]
 800d208:	6a3a      	ldr	r2, [r7, #32]
 800d20a:	e841 2300 	strex	r3, r2, [r1]
 800d20e:	61bb      	str	r3, [r7, #24]
   return(result);
 800d210:	69bb      	ldr	r3, [r7, #24]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d1e5      	bne.n	800d1e2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	f003 0310 	and.w	r3, r3, #16
 800d220:	2b10      	cmp	r3, #16
 800d222:	d10a      	bne.n	800d23a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d224:	2300      	movs	r3, #0
 800d226:	60fb      	str	r3, [r7, #12]
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	60fb      	str	r3, [r7, #12]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	685b      	ldr	r3, [r3, #4]
 800d236:	60fb      	str	r3, [r7, #12]
 800d238:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d23e:	4619      	mov	r1, r3
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f7ff fe2e 	bl	800cea2 <HAL_UARTEx_RxEventCallback>
 800d246:	e002      	b.n	800d24e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f7ff fe18 	bl	800ce7e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d24e:	2300      	movs	r3, #0
 800d250:	e002      	b.n	800d258 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d252:	2300      	movs	r3, #0
 800d254:	e000      	b.n	800d258 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d256:	2302      	movs	r3, #2
  }
}
 800d258:	4618      	mov	r0, r3
 800d25a:	3730      	adds	r7, #48	; 0x30
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	691b      	ldr	r3, [r3, #16]
 800d26e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	68da      	ldr	r2, [r3, #12]
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	430a      	orrs	r2, r1
 800d27c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	689a      	ldr	r2, [r3, #8]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	691b      	ldr	r3, [r3, #16]
 800d286:	431a      	orrs	r2, r3
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	695b      	ldr	r3, [r3, #20]
 800d28c:	4313      	orrs	r3, r2
 800d28e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	68db      	ldr	r3, [r3, #12]
 800d296:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800d29a:	f023 030c 	bic.w	r3, r3, #12
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	6812      	ldr	r2, [r2, #0]
 800d2a2:	68b9      	ldr	r1, [r7, #8]
 800d2a4:	430b      	orrs	r3, r1
 800d2a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	695b      	ldr	r3, [r3, #20]
 800d2ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	699a      	ldr	r2, [r3, #24]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	430a      	orrs	r2, r1
 800d2bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	4a2c      	ldr	r2, [pc, #176]	; (800d374 <UART_SetConfig+0x114>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d103      	bne.n	800d2d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800d2c8:	f7fe fe30 	bl	800bf2c <HAL_RCC_GetPCLK2Freq>
 800d2cc:	60f8      	str	r0, [r7, #12]
 800d2ce:	e002      	b.n	800d2d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800d2d0:	f7fe fe18 	bl	800bf04 <HAL_RCC_GetPCLK1Freq>
 800d2d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d2d6:	68fa      	ldr	r2, [r7, #12]
 800d2d8:	4613      	mov	r3, r2
 800d2da:	009b      	lsls	r3, r3, #2
 800d2dc:	4413      	add	r3, r2
 800d2de:	009a      	lsls	r2, r3, #2
 800d2e0:	441a      	add	r2, r3
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	009b      	lsls	r3, r3, #2
 800d2e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2ec:	4a22      	ldr	r2, [pc, #136]	; (800d378 <UART_SetConfig+0x118>)
 800d2ee:	fba2 2303 	umull	r2, r3, r2, r3
 800d2f2:	095b      	lsrs	r3, r3, #5
 800d2f4:	0119      	lsls	r1, r3, #4
 800d2f6:	68fa      	ldr	r2, [r7, #12]
 800d2f8:	4613      	mov	r3, r2
 800d2fa:	009b      	lsls	r3, r3, #2
 800d2fc:	4413      	add	r3, r2
 800d2fe:	009a      	lsls	r2, r3, #2
 800d300:	441a      	add	r2, r3
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	685b      	ldr	r3, [r3, #4]
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	fbb2 f2f3 	udiv	r2, r2, r3
 800d30c:	4b1a      	ldr	r3, [pc, #104]	; (800d378 <UART_SetConfig+0x118>)
 800d30e:	fba3 0302 	umull	r0, r3, r3, r2
 800d312:	095b      	lsrs	r3, r3, #5
 800d314:	2064      	movs	r0, #100	; 0x64
 800d316:	fb00 f303 	mul.w	r3, r0, r3
 800d31a:	1ad3      	subs	r3, r2, r3
 800d31c:	011b      	lsls	r3, r3, #4
 800d31e:	3332      	adds	r3, #50	; 0x32
 800d320:	4a15      	ldr	r2, [pc, #84]	; (800d378 <UART_SetConfig+0x118>)
 800d322:	fba2 2303 	umull	r2, r3, r2, r3
 800d326:	095b      	lsrs	r3, r3, #5
 800d328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d32c:	4419      	add	r1, r3
 800d32e:	68fa      	ldr	r2, [r7, #12]
 800d330:	4613      	mov	r3, r2
 800d332:	009b      	lsls	r3, r3, #2
 800d334:	4413      	add	r3, r2
 800d336:	009a      	lsls	r2, r3, #2
 800d338:	441a      	add	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	685b      	ldr	r3, [r3, #4]
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	fbb2 f2f3 	udiv	r2, r2, r3
 800d344:	4b0c      	ldr	r3, [pc, #48]	; (800d378 <UART_SetConfig+0x118>)
 800d346:	fba3 0302 	umull	r0, r3, r3, r2
 800d34a:	095b      	lsrs	r3, r3, #5
 800d34c:	2064      	movs	r0, #100	; 0x64
 800d34e:	fb00 f303 	mul.w	r3, r0, r3
 800d352:	1ad3      	subs	r3, r2, r3
 800d354:	011b      	lsls	r3, r3, #4
 800d356:	3332      	adds	r3, #50	; 0x32
 800d358:	4a07      	ldr	r2, [pc, #28]	; (800d378 <UART_SetConfig+0x118>)
 800d35a:	fba2 2303 	umull	r2, r3, r2, r3
 800d35e:	095b      	lsrs	r3, r3, #5
 800d360:	f003 020f 	and.w	r2, r3, #15
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	440a      	add	r2, r1
 800d36a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800d36c:	bf00      	nop
 800d36e:	3710      	adds	r7, #16
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	40013800 	.word	0x40013800
 800d378:	51eb851f 	.word	0x51eb851f

0800d37c <__itoa>:
 800d37c:	1e93      	subs	r3, r2, #2
 800d37e:	2b22      	cmp	r3, #34	; 0x22
 800d380:	b510      	push	{r4, lr}
 800d382:	460c      	mov	r4, r1
 800d384:	d904      	bls.n	800d390 <__itoa+0x14>
 800d386:	2300      	movs	r3, #0
 800d388:	461c      	mov	r4, r3
 800d38a:	700b      	strb	r3, [r1, #0]
 800d38c:	4620      	mov	r0, r4
 800d38e:	bd10      	pop	{r4, pc}
 800d390:	2a0a      	cmp	r2, #10
 800d392:	d109      	bne.n	800d3a8 <__itoa+0x2c>
 800d394:	2800      	cmp	r0, #0
 800d396:	da07      	bge.n	800d3a8 <__itoa+0x2c>
 800d398:	232d      	movs	r3, #45	; 0x2d
 800d39a:	700b      	strb	r3, [r1, #0]
 800d39c:	2101      	movs	r1, #1
 800d39e:	4240      	negs	r0, r0
 800d3a0:	4421      	add	r1, r4
 800d3a2:	f000 f8b9 	bl	800d518 <__utoa>
 800d3a6:	e7f1      	b.n	800d38c <__itoa+0x10>
 800d3a8:	2100      	movs	r1, #0
 800d3aa:	e7f9      	b.n	800d3a0 <__itoa+0x24>

0800d3ac <itoa>:
 800d3ac:	f7ff bfe6 	b.w	800d37c <__itoa>

0800d3b0 <malloc>:
 800d3b0:	4b02      	ldr	r3, [pc, #8]	; (800d3bc <malloc+0xc>)
 800d3b2:	4601      	mov	r1, r0
 800d3b4:	6818      	ldr	r0, [r3, #0]
 800d3b6:	f000 b823 	b.w	800d400 <_malloc_r>
 800d3ba:	bf00      	nop
 800d3bc:	20000a1c 	.word	0x20000a1c

0800d3c0 <sbrk_aligned>:
 800d3c0:	b570      	push	{r4, r5, r6, lr}
 800d3c2:	4e0e      	ldr	r6, [pc, #56]	; (800d3fc <sbrk_aligned+0x3c>)
 800d3c4:	460c      	mov	r4, r1
 800d3c6:	6831      	ldr	r1, [r6, #0]
 800d3c8:	4605      	mov	r5, r0
 800d3ca:	b911      	cbnz	r1, 800d3d2 <sbrk_aligned+0x12>
 800d3cc:	f000 f954 	bl	800d678 <_sbrk_r>
 800d3d0:	6030      	str	r0, [r6, #0]
 800d3d2:	4621      	mov	r1, r4
 800d3d4:	4628      	mov	r0, r5
 800d3d6:	f000 f94f 	bl	800d678 <_sbrk_r>
 800d3da:	1c43      	adds	r3, r0, #1
 800d3dc:	d00a      	beq.n	800d3f4 <sbrk_aligned+0x34>
 800d3de:	1cc4      	adds	r4, r0, #3
 800d3e0:	f024 0403 	bic.w	r4, r4, #3
 800d3e4:	42a0      	cmp	r0, r4
 800d3e6:	d007      	beq.n	800d3f8 <sbrk_aligned+0x38>
 800d3e8:	1a21      	subs	r1, r4, r0
 800d3ea:	4628      	mov	r0, r5
 800d3ec:	f000 f944 	bl	800d678 <_sbrk_r>
 800d3f0:	3001      	adds	r0, #1
 800d3f2:	d101      	bne.n	800d3f8 <sbrk_aligned+0x38>
 800d3f4:	f04f 34ff 	mov.w	r4, #4294967295
 800d3f8:	4620      	mov	r0, r4
 800d3fa:	bd70      	pop	{r4, r5, r6, pc}
 800d3fc:	20000f4c 	.word	0x20000f4c

0800d400 <_malloc_r>:
 800d400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d404:	1ccd      	adds	r5, r1, #3
 800d406:	f025 0503 	bic.w	r5, r5, #3
 800d40a:	3508      	adds	r5, #8
 800d40c:	2d0c      	cmp	r5, #12
 800d40e:	bf38      	it	cc
 800d410:	250c      	movcc	r5, #12
 800d412:	2d00      	cmp	r5, #0
 800d414:	4607      	mov	r7, r0
 800d416:	db01      	blt.n	800d41c <_malloc_r+0x1c>
 800d418:	42a9      	cmp	r1, r5
 800d41a:	d905      	bls.n	800d428 <_malloc_r+0x28>
 800d41c:	230c      	movs	r3, #12
 800d41e:	2600      	movs	r6, #0
 800d420:	603b      	str	r3, [r7, #0]
 800d422:	4630      	mov	r0, r6
 800d424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d428:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d4fc <_malloc_r+0xfc>
 800d42c:	f000 f868 	bl	800d500 <__malloc_lock>
 800d430:	f8d8 3000 	ldr.w	r3, [r8]
 800d434:	461c      	mov	r4, r3
 800d436:	bb5c      	cbnz	r4, 800d490 <_malloc_r+0x90>
 800d438:	4629      	mov	r1, r5
 800d43a:	4638      	mov	r0, r7
 800d43c:	f7ff ffc0 	bl	800d3c0 <sbrk_aligned>
 800d440:	1c43      	adds	r3, r0, #1
 800d442:	4604      	mov	r4, r0
 800d444:	d155      	bne.n	800d4f2 <_malloc_r+0xf2>
 800d446:	f8d8 4000 	ldr.w	r4, [r8]
 800d44a:	4626      	mov	r6, r4
 800d44c:	2e00      	cmp	r6, #0
 800d44e:	d145      	bne.n	800d4dc <_malloc_r+0xdc>
 800d450:	2c00      	cmp	r4, #0
 800d452:	d048      	beq.n	800d4e6 <_malloc_r+0xe6>
 800d454:	6823      	ldr	r3, [r4, #0]
 800d456:	4631      	mov	r1, r6
 800d458:	4638      	mov	r0, r7
 800d45a:	eb04 0903 	add.w	r9, r4, r3
 800d45e:	f000 f90b 	bl	800d678 <_sbrk_r>
 800d462:	4581      	cmp	r9, r0
 800d464:	d13f      	bne.n	800d4e6 <_malloc_r+0xe6>
 800d466:	6821      	ldr	r1, [r4, #0]
 800d468:	4638      	mov	r0, r7
 800d46a:	1a6d      	subs	r5, r5, r1
 800d46c:	4629      	mov	r1, r5
 800d46e:	f7ff ffa7 	bl	800d3c0 <sbrk_aligned>
 800d472:	3001      	adds	r0, #1
 800d474:	d037      	beq.n	800d4e6 <_malloc_r+0xe6>
 800d476:	6823      	ldr	r3, [r4, #0]
 800d478:	442b      	add	r3, r5
 800d47a:	6023      	str	r3, [r4, #0]
 800d47c:	f8d8 3000 	ldr.w	r3, [r8]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d038      	beq.n	800d4f6 <_malloc_r+0xf6>
 800d484:	685a      	ldr	r2, [r3, #4]
 800d486:	42a2      	cmp	r2, r4
 800d488:	d12b      	bne.n	800d4e2 <_malloc_r+0xe2>
 800d48a:	2200      	movs	r2, #0
 800d48c:	605a      	str	r2, [r3, #4]
 800d48e:	e00f      	b.n	800d4b0 <_malloc_r+0xb0>
 800d490:	6822      	ldr	r2, [r4, #0]
 800d492:	1b52      	subs	r2, r2, r5
 800d494:	d41f      	bmi.n	800d4d6 <_malloc_r+0xd6>
 800d496:	2a0b      	cmp	r2, #11
 800d498:	d917      	bls.n	800d4ca <_malloc_r+0xca>
 800d49a:	1961      	adds	r1, r4, r5
 800d49c:	42a3      	cmp	r3, r4
 800d49e:	6025      	str	r5, [r4, #0]
 800d4a0:	bf18      	it	ne
 800d4a2:	6059      	strne	r1, [r3, #4]
 800d4a4:	6863      	ldr	r3, [r4, #4]
 800d4a6:	bf08      	it	eq
 800d4a8:	f8c8 1000 	streq.w	r1, [r8]
 800d4ac:	5162      	str	r2, [r4, r5]
 800d4ae:	604b      	str	r3, [r1, #4]
 800d4b0:	4638      	mov	r0, r7
 800d4b2:	f104 060b 	add.w	r6, r4, #11
 800d4b6:	f000 f829 	bl	800d50c <__malloc_unlock>
 800d4ba:	f026 0607 	bic.w	r6, r6, #7
 800d4be:	1d23      	adds	r3, r4, #4
 800d4c0:	1af2      	subs	r2, r6, r3
 800d4c2:	d0ae      	beq.n	800d422 <_malloc_r+0x22>
 800d4c4:	1b9b      	subs	r3, r3, r6
 800d4c6:	50a3      	str	r3, [r4, r2]
 800d4c8:	e7ab      	b.n	800d422 <_malloc_r+0x22>
 800d4ca:	42a3      	cmp	r3, r4
 800d4cc:	6862      	ldr	r2, [r4, #4]
 800d4ce:	d1dd      	bne.n	800d48c <_malloc_r+0x8c>
 800d4d0:	f8c8 2000 	str.w	r2, [r8]
 800d4d4:	e7ec      	b.n	800d4b0 <_malloc_r+0xb0>
 800d4d6:	4623      	mov	r3, r4
 800d4d8:	6864      	ldr	r4, [r4, #4]
 800d4da:	e7ac      	b.n	800d436 <_malloc_r+0x36>
 800d4dc:	4634      	mov	r4, r6
 800d4de:	6876      	ldr	r6, [r6, #4]
 800d4e0:	e7b4      	b.n	800d44c <_malloc_r+0x4c>
 800d4e2:	4613      	mov	r3, r2
 800d4e4:	e7cc      	b.n	800d480 <_malloc_r+0x80>
 800d4e6:	230c      	movs	r3, #12
 800d4e8:	4638      	mov	r0, r7
 800d4ea:	603b      	str	r3, [r7, #0]
 800d4ec:	f000 f80e 	bl	800d50c <__malloc_unlock>
 800d4f0:	e797      	b.n	800d422 <_malloc_r+0x22>
 800d4f2:	6025      	str	r5, [r4, #0]
 800d4f4:	e7dc      	b.n	800d4b0 <_malloc_r+0xb0>
 800d4f6:	605b      	str	r3, [r3, #4]
 800d4f8:	deff      	udf	#255	; 0xff
 800d4fa:	bf00      	nop
 800d4fc:	20000f48 	.word	0x20000f48

0800d500 <__malloc_lock>:
 800d500:	4801      	ldr	r0, [pc, #4]	; (800d508 <__malloc_lock+0x8>)
 800d502:	f000 b8f3 	b.w	800d6ec <__retarget_lock_acquire_recursive>
 800d506:	bf00      	nop
 800d508:	2000108c 	.word	0x2000108c

0800d50c <__malloc_unlock>:
 800d50c:	4801      	ldr	r0, [pc, #4]	; (800d514 <__malloc_unlock+0x8>)
 800d50e:	f000 b8ee 	b.w	800d6ee <__retarget_lock_release_recursive>
 800d512:	bf00      	nop
 800d514:	2000108c 	.word	0x2000108c

0800d518 <__utoa>:
 800d518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d51a:	b08b      	sub	sp, #44	; 0x2c
 800d51c:	4605      	mov	r5, r0
 800d51e:	460b      	mov	r3, r1
 800d520:	466e      	mov	r6, sp
 800d522:	4c1d      	ldr	r4, [pc, #116]	; (800d598 <__utoa+0x80>)
 800d524:	f104 0c20 	add.w	ip, r4, #32
 800d528:	4637      	mov	r7, r6
 800d52a:	6820      	ldr	r0, [r4, #0]
 800d52c:	6861      	ldr	r1, [r4, #4]
 800d52e:	3408      	adds	r4, #8
 800d530:	c703      	stmia	r7!, {r0, r1}
 800d532:	4564      	cmp	r4, ip
 800d534:	463e      	mov	r6, r7
 800d536:	d1f7      	bne.n	800d528 <__utoa+0x10>
 800d538:	7921      	ldrb	r1, [r4, #4]
 800d53a:	6820      	ldr	r0, [r4, #0]
 800d53c:	7139      	strb	r1, [r7, #4]
 800d53e:	1e91      	subs	r1, r2, #2
 800d540:	2922      	cmp	r1, #34	; 0x22
 800d542:	6038      	str	r0, [r7, #0]
 800d544:	f04f 0100 	mov.w	r1, #0
 800d548:	d904      	bls.n	800d554 <__utoa+0x3c>
 800d54a:	7019      	strb	r1, [r3, #0]
 800d54c:	460b      	mov	r3, r1
 800d54e:	4618      	mov	r0, r3
 800d550:	b00b      	add	sp, #44	; 0x2c
 800d552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d554:	1e58      	subs	r0, r3, #1
 800d556:	4684      	mov	ip, r0
 800d558:	fbb5 f7f2 	udiv	r7, r5, r2
 800d55c:	fb02 5617 	mls	r6, r2, r7, r5
 800d560:	3628      	adds	r6, #40	; 0x28
 800d562:	446e      	add	r6, sp
 800d564:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d568:	460c      	mov	r4, r1
 800d56a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d56e:	462e      	mov	r6, r5
 800d570:	42b2      	cmp	r2, r6
 800d572:	463d      	mov	r5, r7
 800d574:	f101 0101 	add.w	r1, r1, #1
 800d578:	d9ee      	bls.n	800d558 <__utoa+0x40>
 800d57a:	2200      	movs	r2, #0
 800d57c:	545a      	strb	r2, [r3, r1]
 800d57e:	1919      	adds	r1, r3, r4
 800d580:	1aa5      	subs	r5, r4, r2
 800d582:	42aa      	cmp	r2, r5
 800d584:	dae3      	bge.n	800d54e <__utoa+0x36>
 800d586:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d58a:	780e      	ldrb	r6, [r1, #0]
 800d58c:	3201      	adds	r2, #1
 800d58e:	7006      	strb	r6, [r0, #0]
 800d590:	f801 5901 	strb.w	r5, [r1], #-1
 800d594:	e7f4      	b.n	800d580 <__utoa+0x68>
 800d596:	bf00      	nop
 800d598:	0800ed3a 	.word	0x0800ed3a

0800d59c <siprintf>:
 800d59c:	b40e      	push	{r1, r2, r3}
 800d59e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d5a2:	b500      	push	{lr}
 800d5a4:	b09c      	sub	sp, #112	; 0x70
 800d5a6:	ab1d      	add	r3, sp, #116	; 0x74
 800d5a8:	9002      	str	r0, [sp, #8]
 800d5aa:	9006      	str	r0, [sp, #24]
 800d5ac:	9107      	str	r1, [sp, #28]
 800d5ae:	9104      	str	r1, [sp, #16]
 800d5b0:	4808      	ldr	r0, [pc, #32]	; (800d5d4 <siprintf+0x38>)
 800d5b2:	4909      	ldr	r1, [pc, #36]	; (800d5d8 <siprintf+0x3c>)
 800d5b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5b8:	9105      	str	r1, [sp, #20]
 800d5ba:	6800      	ldr	r0, [r0, #0]
 800d5bc:	a902      	add	r1, sp, #8
 800d5be:	9301      	str	r3, [sp, #4]
 800d5c0:	f000 f940 	bl	800d844 <_svfiprintf_r>
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	9b02      	ldr	r3, [sp, #8]
 800d5c8:	701a      	strb	r2, [r3, #0]
 800d5ca:	b01c      	add	sp, #112	; 0x70
 800d5cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5d0:	b003      	add	sp, #12
 800d5d2:	4770      	bx	lr
 800d5d4:	20000a1c 	.word	0x20000a1c
 800d5d8:	ffff0208 	.word	0xffff0208

0800d5dc <memset>:
 800d5dc:	4603      	mov	r3, r0
 800d5de:	4402      	add	r2, r0
 800d5e0:	4293      	cmp	r3, r2
 800d5e2:	d100      	bne.n	800d5e6 <memset+0xa>
 800d5e4:	4770      	bx	lr
 800d5e6:	f803 1b01 	strb.w	r1, [r3], #1
 800d5ea:	e7f9      	b.n	800d5e0 <memset+0x4>

0800d5ec <strcat>:
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	b510      	push	{r4, lr}
 800d5f0:	7814      	ldrb	r4, [r2, #0]
 800d5f2:	4613      	mov	r3, r2
 800d5f4:	3201      	adds	r2, #1
 800d5f6:	2c00      	cmp	r4, #0
 800d5f8:	d1fa      	bne.n	800d5f0 <strcat+0x4>
 800d5fa:	3b01      	subs	r3, #1
 800d5fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d600:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d604:	2a00      	cmp	r2, #0
 800d606:	d1f9      	bne.n	800d5fc <strcat+0x10>
 800d608:	bd10      	pop	{r4, pc}

0800d60a <strchr>:
 800d60a:	4603      	mov	r3, r0
 800d60c:	b2c9      	uxtb	r1, r1
 800d60e:	4618      	mov	r0, r3
 800d610:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d614:	b112      	cbz	r2, 800d61c <strchr+0x12>
 800d616:	428a      	cmp	r2, r1
 800d618:	d1f9      	bne.n	800d60e <strchr+0x4>
 800d61a:	4770      	bx	lr
 800d61c:	2900      	cmp	r1, #0
 800d61e:	bf18      	it	ne
 800d620:	2000      	movne	r0, #0
 800d622:	4770      	bx	lr

0800d624 <strncpy>:
 800d624:	4603      	mov	r3, r0
 800d626:	b510      	push	{r4, lr}
 800d628:	3901      	subs	r1, #1
 800d62a:	b132      	cbz	r2, 800d63a <strncpy+0x16>
 800d62c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d630:	3a01      	subs	r2, #1
 800d632:	f803 4b01 	strb.w	r4, [r3], #1
 800d636:	2c00      	cmp	r4, #0
 800d638:	d1f7      	bne.n	800d62a <strncpy+0x6>
 800d63a:	2100      	movs	r1, #0
 800d63c:	441a      	add	r2, r3
 800d63e:	4293      	cmp	r3, r2
 800d640:	d100      	bne.n	800d644 <strncpy+0x20>
 800d642:	bd10      	pop	{r4, pc}
 800d644:	f803 1b01 	strb.w	r1, [r3], #1
 800d648:	e7f9      	b.n	800d63e <strncpy+0x1a>

0800d64a <strstr>:
 800d64a:	780a      	ldrb	r2, [r1, #0]
 800d64c:	b570      	push	{r4, r5, r6, lr}
 800d64e:	b96a      	cbnz	r2, 800d66c <strstr+0x22>
 800d650:	bd70      	pop	{r4, r5, r6, pc}
 800d652:	429a      	cmp	r2, r3
 800d654:	d109      	bne.n	800d66a <strstr+0x20>
 800d656:	460c      	mov	r4, r1
 800d658:	4605      	mov	r5, r0
 800d65a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d0f6      	beq.n	800d650 <strstr+0x6>
 800d662:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800d666:	429e      	cmp	r6, r3
 800d668:	d0f7      	beq.n	800d65a <strstr+0x10>
 800d66a:	3001      	adds	r0, #1
 800d66c:	7803      	ldrb	r3, [r0, #0]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d1ef      	bne.n	800d652 <strstr+0x8>
 800d672:	4618      	mov	r0, r3
 800d674:	e7ec      	b.n	800d650 <strstr+0x6>
	...

0800d678 <_sbrk_r>:
 800d678:	b538      	push	{r3, r4, r5, lr}
 800d67a:	2300      	movs	r3, #0
 800d67c:	4d05      	ldr	r5, [pc, #20]	; (800d694 <_sbrk_r+0x1c>)
 800d67e:	4604      	mov	r4, r0
 800d680:	4608      	mov	r0, r1
 800d682:	602b      	str	r3, [r5, #0]
 800d684:	f7fb ff76 	bl	8009574 <_sbrk>
 800d688:	1c43      	adds	r3, r0, #1
 800d68a:	d102      	bne.n	800d692 <_sbrk_r+0x1a>
 800d68c:	682b      	ldr	r3, [r5, #0]
 800d68e:	b103      	cbz	r3, 800d692 <_sbrk_r+0x1a>
 800d690:	6023      	str	r3, [r4, #0]
 800d692:	bd38      	pop	{r3, r4, r5, pc}
 800d694:	20001088 	.word	0x20001088

0800d698 <__errno>:
 800d698:	4b01      	ldr	r3, [pc, #4]	; (800d6a0 <__errno+0x8>)
 800d69a:	6818      	ldr	r0, [r3, #0]
 800d69c:	4770      	bx	lr
 800d69e:	bf00      	nop
 800d6a0:	20000a1c 	.word	0x20000a1c

0800d6a4 <__libc_init_array>:
 800d6a4:	b570      	push	{r4, r5, r6, lr}
 800d6a6:	2600      	movs	r6, #0
 800d6a8:	4d0c      	ldr	r5, [pc, #48]	; (800d6dc <__libc_init_array+0x38>)
 800d6aa:	4c0d      	ldr	r4, [pc, #52]	; (800d6e0 <__libc_init_array+0x3c>)
 800d6ac:	1b64      	subs	r4, r4, r5
 800d6ae:	10a4      	asrs	r4, r4, #2
 800d6b0:	42a6      	cmp	r6, r4
 800d6b2:	d109      	bne.n	800d6c8 <__libc_init_array+0x24>
 800d6b4:	f000 fbc6 	bl	800de44 <_init>
 800d6b8:	2600      	movs	r6, #0
 800d6ba:	4d0a      	ldr	r5, [pc, #40]	; (800d6e4 <__libc_init_array+0x40>)
 800d6bc:	4c0a      	ldr	r4, [pc, #40]	; (800d6e8 <__libc_init_array+0x44>)
 800d6be:	1b64      	subs	r4, r4, r5
 800d6c0:	10a4      	asrs	r4, r4, #2
 800d6c2:	42a6      	cmp	r6, r4
 800d6c4:	d105      	bne.n	800d6d2 <__libc_init_array+0x2e>
 800d6c6:	bd70      	pop	{r4, r5, r6, pc}
 800d6c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6cc:	4798      	blx	r3
 800d6ce:	3601      	adds	r6, #1
 800d6d0:	e7ee      	b.n	800d6b0 <__libc_init_array+0xc>
 800d6d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6d6:	4798      	blx	r3
 800d6d8:	3601      	adds	r6, #1
 800d6da:	e7f2      	b.n	800d6c2 <__libc_init_array+0x1e>
 800d6dc:	0800ed94 	.word	0x0800ed94
 800d6e0:	0800ed94 	.word	0x0800ed94
 800d6e4:	0800ed94 	.word	0x0800ed94
 800d6e8:	0800ed98 	.word	0x0800ed98

0800d6ec <__retarget_lock_acquire_recursive>:
 800d6ec:	4770      	bx	lr

0800d6ee <__retarget_lock_release_recursive>:
 800d6ee:	4770      	bx	lr

0800d6f0 <strcpy>:
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d6f6:	f803 2b01 	strb.w	r2, [r3], #1
 800d6fa:	2a00      	cmp	r2, #0
 800d6fc:	d1f9      	bne.n	800d6f2 <strcpy+0x2>
 800d6fe:	4770      	bx	lr

0800d700 <_free_r>:
 800d700:	b538      	push	{r3, r4, r5, lr}
 800d702:	4605      	mov	r5, r0
 800d704:	2900      	cmp	r1, #0
 800d706:	d040      	beq.n	800d78a <_free_r+0x8a>
 800d708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d70c:	1f0c      	subs	r4, r1, #4
 800d70e:	2b00      	cmp	r3, #0
 800d710:	bfb8      	it	lt
 800d712:	18e4      	addlt	r4, r4, r3
 800d714:	f7ff fef4 	bl	800d500 <__malloc_lock>
 800d718:	4a1c      	ldr	r2, [pc, #112]	; (800d78c <_free_r+0x8c>)
 800d71a:	6813      	ldr	r3, [r2, #0]
 800d71c:	b933      	cbnz	r3, 800d72c <_free_r+0x2c>
 800d71e:	6063      	str	r3, [r4, #4]
 800d720:	6014      	str	r4, [r2, #0]
 800d722:	4628      	mov	r0, r5
 800d724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d728:	f7ff bef0 	b.w	800d50c <__malloc_unlock>
 800d72c:	42a3      	cmp	r3, r4
 800d72e:	d908      	bls.n	800d742 <_free_r+0x42>
 800d730:	6820      	ldr	r0, [r4, #0]
 800d732:	1821      	adds	r1, r4, r0
 800d734:	428b      	cmp	r3, r1
 800d736:	bf01      	itttt	eq
 800d738:	6819      	ldreq	r1, [r3, #0]
 800d73a:	685b      	ldreq	r3, [r3, #4]
 800d73c:	1809      	addeq	r1, r1, r0
 800d73e:	6021      	streq	r1, [r4, #0]
 800d740:	e7ed      	b.n	800d71e <_free_r+0x1e>
 800d742:	461a      	mov	r2, r3
 800d744:	685b      	ldr	r3, [r3, #4]
 800d746:	b10b      	cbz	r3, 800d74c <_free_r+0x4c>
 800d748:	42a3      	cmp	r3, r4
 800d74a:	d9fa      	bls.n	800d742 <_free_r+0x42>
 800d74c:	6811      	ldr	r1, [r2, #0]
 800d74e:	1850      	adds	r0, r2, r1
 800d750:	42a0      	cmp	r0, r4
 800d752:	d10b      	bne.n	800d76c <_free_r+0x6c>
 800d754:	6820      	ldr	r0, [r4, #0]
 800d756:	4401      	add	r1, r0
 800d758:	1850      	adds	r0, r2, r1
 800d75a:	4283      	cmp	r3, r0
 800d75c:	6011      	str	r1, [r2, #0]
 800d75e:	d1e0      	bne.n	800d722 <_free_r+0x22>
 800d760:	6818      	ldr	r0, [r3, #0]
 800d762:	685b      	ldr	r3, [r3, #4]
 800d764:	4408      	add	r0, r1
 800d766:	6010      	str	r0, [r2, #0]
 800d768:	6053      	str	r3, [r2, #4]
 800d76a:	e7da      	b.n	800d722 <_free_r+0x22>
 800d76c:	d902      	bls.n	800d774 <_free_r+0x74>
 800d76e:	230c      	movs	r3, #12
 800d770:	602b      	str	r3, [r5, #0]
 800d772:	e7d6      	b.n	800d722 <_free_r+0x22>
 800d774:	6820      	ldr	r0, [r4, #0]
 800d776:	1821      	adds	r1, r4, r0
 800d778:	428b      	cmp	r3, r1
 800d77a:	bf01      	itttt	eq
 800d77c:	6819      	ldreq	r1, [r3, #0]
 800d77e:	685b      	ldreq	r3, [r3, #4]
 800d780:	1809      	addeq	r1, r1, r0
 800d782:	6021      	streq	r1, [r4, #0]
 800d784:	6063      	str	r3, [r4, #4]
 800d786:	6054      	str	r4, [r2, #4]
 800d788:	e7cb      	b.n	800d722 <_free_r+0x22>
 800d78a:	bd38      	pop	{r3, r4, r5, pc}
 800d78c:	20000f48 	.word	0x20000f48

0800d790 <__ssputs_r>:
 800d790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d794:	461f      	mov	r7, r3
 800d796:	688e      	ldr	r6, [r1, #8]
 800d798:	4682      	mov	sl, r0
 800d79a:	42be      	cmp	r6, r7
 800d79c:	460c      	mov	r4, r1
 800d79e:	4690      	mov	r8, r2
 800d7a0:	680b      	ldr	r3, [r1, #0]
 800d7a2:	d82c      	bhi.n	800d7fe <__ssputs_r+0x6e>
 800d7a4:	898a      	ldrh	r2, [r1, #12]
 800d7a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d7aa:	d026      	beq.n	800d7fa <__ssputs_r+0x6a>
 800d7ac:	6965      	ldr	r5, [r4, #20]
 800d7ae:	6909      	ldr	r1, [r1, #16]
 800d7b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d7b4:	eba3 0901 	sub.w	r9, r3, r1
 800d7b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d7bc:	1c7b      	adds	r3, r7, #1
 800d7be:	444b      	add	r3, r9
 800d7c0:	106d      	asrs	r5, r5, #1
 800d7c2:	429d      	cmp	r5, r3
 800d7c4:	bf38      	it	cc
 800d7c6:	461d      	movcc	r5, r3
 800d7c8:	0553      	lsls	r3, r2, #21
 800d7ca:	d527      	bpl.n	800d81c <__ssputs_r+0x8c>
 800d7cc:	4629      	mov	r1, r5
 800d7ce:	f7ff fe17 	bl	800d400 <_malloc_r>
 800d7d2:	4606      	mov	r6, r0
 800d7d4:	b360      	cbz	r0, 800d830 <__ssputs_r+0xa0>
 800d7d6:	464a      	mov	r2, r9
 800d7d8:	6921      	ldr	r1, [r4, #16]
 800d7da:	f000 faed 	bl	800ddb8 <memcpy>
 800d7de:	89a3      	ldrh	r3, [r4, #12]
 800d7e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d7e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7e8:	81a3      	strh	r3, [r4, #12]
 800d7ea:	6126      	str	r6, [r4, #16]
 800d7ec:	444e      	add	r6, r9
 800d7ee:	6026      	str	r6, [r4, #0]
 800d7f0:	463e      	mov	r6, r7
 800d7f2:	6165      	str	r5, [r4, #20]
 800d7f4:	eba5 0509 	sub.w	r5, r5, r9
 800d7f8:	60a5      	str	r5, [r4, #8]
 800d7fa:	42be      	cmp	r6, r7
 800d7fc:	d900      	bls.n	800d800 <__ssputs_r+0x70>
 800d7fe:	463e      	mov	r6, r7
 800d800:	4632      	mov	r2, r6
 800d802:	4641      	mov	r1, r8
 800d804:	6820      	ldr	r0, [r4, #0]
 800d806:	f000 faaf 	bl	800dd68 <memmove>
 800d80a:	2000      	movs	r0, #0
 800d80c:	68a3      	ldr	r3, [r4, #8]
 800d80e:	1b9b      	subs	r3, r3, r6
 800d810:	60a3      	str	r3, [r4, #8]
 800d812:	6823      	ldr	r3, [r4, #0]
 800d814:	4433      	add	r3, r6
 800d816:	6023      	str	r3, [r4, #0]
 800d818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d81c:	462a      	mov	r2, r5
 800d81e:	f000 fad9 	bl	800ddd4 <_realloc_r>
 800d822:	4606      	mov	r6, r0
 800d824:	2800      	cmp	r0, #0
 800d826:	d1e0      	bne.n	800d7ea <__ssputs_r+0x5a>
 800d828:	4650      	mov	r0, sl
 800d82a:	6921      	ldr	r1, [r4, #16]
 800d82c:	f7ff ff68 	bl	800d700 <_free_r>
 800d830:	230c      	movs	r3, #12
 800d832:	f8ca 3000 	str.w	r3, [sl]
 800d836:	89a3      	ldrh	r3, [r4, #12]
 800d838:	f04f 30ff 	mov.w	r0, #4294967295
 800d83c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d840:	81a3      	strh	r3, [r4, #12]
 800d842:	e7e9      	b.n	800d818 <__ssputs_r+0x88>

0800d844 <_svfiprintf_r>:
 800d844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d848:	4698      	mov	r8, r3
 800d84a:	898b      	ldrh	r3, [r1, #12]
 800d84c:	4607      	mov	r7, r0
 800d84e:	061b      	lsls	r3, r3, #24
 800d850:	460d      	mov	r5, r1
 800d852:	4614      	mov	r4, r2
 800d854:	b09d      	sub	sp, #116	; 0x74
 800d856:	d50e      	bpl.n	800d876 <_svfiprintf_r+0x32>
 800d858:	690b      	ldr	r3, [r1, #16]
 800d85a:	b963      	cbnz	r3, 800d876 <_svfiprintf_r+0x32>
 800d85c:	2140      	movs	r1, #64	; 0x40
 800d85e:	f7ff fdcf 	bl	800d400 <_malloc_r>
 800d862:	6028      	str	r0, [r5, #0]
 800d864:	6128      	str	r0, [r5, #16]
 800d866:	b920      	cbnz	r0, 800d872 <_svfiprintf_r+0x2e>
 800d868:	230c      	movs	r3, #12
 800d86a:	603b      	str	r3, [r7, #0]
 800d86c:	f04f 30ff 	mov.w	r0, #4294967295
 800d870:	e0d0      	b.n	800da14 <_svfiprintf_r+0x1d0>
 800d872:	2340      	movs	r3, #64	; 0x40
 800d874:	616b      	str	r3, [r5, #20]
 800d876:	2300      	movs	r3, #0
 800d878:	9309      	str	r3, [sp, #36]	; 0x24
 800d87a:	2320      	movs	r3, #32
 800d87c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d880:	2330      	movs	r3, #48	; 0x30
 800d882:	f04f 0901 	mov.w	r9, #1
 800d886:	f8cd 800c 	str.w	r8, [sp, #12]
 800d88a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800da2c <_svfiprintf_r+0x1e8>
 800d88e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d892:	4623      	mov	r3, r4
 800d894:	469a      	mov	sl, r3
 800d896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d89a:	b10a      	cbz	r2, 800d8a0 <_svfiprintf_r+0x5c>
 800d89c:	2a25      	cmp	r2, #37	; 0x25
 800d89e:	d1f9      	bne.n	800d894 <_svfiprintf_r+0x50>
 800d8a0:	ebba 0b04 	subs.w	fp, sl, r4
 800d8a4:	d00b      	beq.n	800d8be <_svfiprintf_r+0x7a>
 800d8a6:	465b      	mov	r3, fp
 800d8a8:	4622      	mov	r2, r4
 800d8aa:	4629      	mov	r1, r5
 800d8ac:	4638      	mov	r0, r7
 800d8ae:	f7ff ff6f 	bl	800d790 <__ssputs_r>
 800d8b2:	3001      	adds	r0, #1
 800d8b4:	f000 80a9 	beq.w	800da0a <_svfiprintf_r+0x1c6>
 800d8b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8ba:	445a      	add	r2, fp
 800d8bc:	9209      	str	r2, [sp, #36]	; 0x24
 800d8be:	f89a 3000 	ldrb.w	r3, [sl]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	f000 80a1 	beq.w	800da0a <_svfiprintf_r+0x1c6>
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	f04f 32ff 	mov.w	r2, #4294967295
 800d8ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8d2:	f10a 0a01 	add.w	sl, sl, #1
 800d8d6:	9304      	str	r3, [sp, #16]
 800d8d8:	9307      	str	r3, [sp, #28]
 800d8da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8de:	931a      	str	r3, [sp, #104]	; 0x68
 800d8e0:	4654      	mov	r4, sl
 800d8e2:	2205      	movs	r2, #5
 800d8e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8e8:	4850      	ldr	r0, [pc, #320]	; (800da2c <_svfiprintf_r+0x1e8>)
 800d8ea:	f000 fa57 	bl	800dd9c <memchr>
 800d8ee:	9a04      	ldr	r2, [sp, #16]
 800d8f0:	b9d8      	cbnz	r0, 800d92a <_svfiprintf_r+0xe6>
 800d8f2:	06d0      	lsls	r0, r2, #27
 800d8f4:	bf44      	itt	mi
 800d8f6:	2320      	movmi	r3, #32
 800d8f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d8fc:	0711      	lsls	r1, r2, #28
 800d8fe:	bf44      	itt	mi
 800d900:	232b      	movmi	r3, #43	; 0x2b
 800d902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d906:	f89a 3000 	ldrb.w	r3, [sl]
 800d90a:	2b2a      	cmp	r3, #42	; 0x2a
 800d90c:	d015      	beq.n	800d93a <_svfiprintf_r+0xf6>
 800d90e:	4654      	mov	r4, sl
 800d910:	2000      	movs	r0, #0
 800d912:	f04f 0c0a 	mov.w	ip, #10
 800d916:	9a07      	ldr	r2, [sp, #28]
 800d918:	4621      	mov	r1, r4
 800d91a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d91e:	3b30      	subs	r3, #48	; 0x30
 800d920:	2b09      	cmp	r3, #9
 800d922:	d94d      	bls.n	800d9c0 <_svfiprintf_r+0x17c>
 800d924:	b1b0      	cbz	r0, 800d954 <_svfiprintf_r+0x110>
 800d926:	9207      	str	r2, [sp, #28]
 800d928:	e014      	b.n	800d954 <_svfiprintf_r+0x110>
 800d92a:	eba0 0308 	sub.w	r3, r0, r8
 800d92e:	fa09 f303 	lsl.w	r3, r9, r3
 800d932:	4313      	orrs	r3, r2
 800d934:	46a2      	mov	sl, r4
 800d936:	9304      	str	r3, [sp, #16]
 800d938:	e7d2      	b.n	800d8e0 <_svfiprintf_r+0x9c>
 800d93a:	9b03      	ldr	r3, [sp, #12]
 800d93c:	1d19      	adds	r1, r3, #4
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	9103      	str	r1, [sp, #12]
 800d942:	2b00      	cmp	r3, #0
 800d944:	bfbb      	ittet	lt
 800d946:	425b      	neglt	r3, r3
 800d948:	f042 0202 	orrlt.w	r2, r2, #2
 800d94c:	9307      	strge	r3, [sp, #28]
 800d94e:	9307      	strlt	r3, [sp, #28]
 800d950:	bfb8      	it	lt
 800d952:	9204      	strlt	r2, [sp, #16]
 800d954:	7823      	ldrb	r3, [r4, #0]
 800d956:	2b2e      	cmp	r3, #46	; 0x2e
 800d958:	d10c      	bne.n	800d974 <_svfiprintf_r+0x130>
 800d95a:	7863      	ldrb	r3, [r4, #1]
 800d95c:	2b2a      	cmp	r3, #42	; 0x2a
 800d95e:	d134      	bne.n	800d9ca <_svfiprintf_r+0x186>
 800d960:	9b03      	ldr	r3, [sp, #12]
 800d962:	3402      	adds	r4, #2
 800d964:	1d1a      	adds	r2, r3, #4
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	9203      	str	r2, [sp, #12]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	bfb8      	it	lt
 800d96e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d972:	9305      	str	r3, [sp, #20]
 800d974:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800da30 <_svfiprintf_r+0x1ec>
 800d978:	2203      	movs	r2, #3
 800d97a:	4650      	mov	r0, sl
 800d97c:	7821      	ldrb	r1, [r4, #0]
 800d97e:	f000 fa0d 	bl	800dd9c <memchr>
 800d982:	b138      	cbz	r0, 800d994 <_svfiprintf_r+0x150>
 800d984:	2240      	movs	r2, #64	; 0x40
 800d986:	9b04      	ldr	r3, [sp, #16]
 800d988:	eba0 000a 	sub.w	r0, r0, sl
 800d98c:	4082      	lsls	r2, r0
 800d98e:	4313      	orrs	r3, r2
 800d990:	3401      	adds	r4, #1
 800d992:	9304      	str	r3, [sp, #16]
 800d994:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d998:	2206      	movs	r2, #6
 800d99a:	4826      	ldr	r0, [pc, #152]	; (800da34 <_svfiprintf_r+0x1f0>)
 800d99c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9a0:	f000 f9fc 	bl	800dd9c <memchr>
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	d038      	beq.n	800da1a <_svfiprintf_r+0x1d6>
 800d9a8:	4b23      	ldr	r3, [pc, #140]	; (800da38 <_svfiprintf_r+0x1f4>)
 800d9aa:	bb1b      	cbnz	r3, 800d9f4 <_svfiprintf_r+0x1b0>
 800d9ac:	9b03      	ldr	r3, [sp, #12]
 800d9ae:	3307      	adds	r3, #7
 800d9b0:	f023 0307 	bic.w	r3, r3, #7
 800d9b4:	3308      	adds	r3, #8
 800d9b6:	9303      	str	r3, [sp, #12]
 800d9b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9ba:	4433      	add	r3, r6
 800d9bc:	9309      	str	r3, [sp, #36]	; 0x24
 800d9be:	e768      	b.n	800d892 <_svfiprintf_r+0x4e>
 800d9c0:	460c      	mov	r4, r1
 800d9c2:	2001      	movs	r0, #1
 800d9c4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9c8:	e7a6      	b.n	800d918 <_svfiprintf_r+0xd4>
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	f04f 0c0a 	mov.w	ip, #10
 800d9d0:	4619      	mov	r1, r3
 800d9d2:	3401      	adds	r4, #1
 800d9d4:	9305      	str	r3, [sp, #20]
 800d9d6:	4620      	mov	r0, r4
 800d9d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9dc:	3a30      	subs	r2, #48	; 0x30
 800d9de:	2a09      	cmp	r2, #9
 800d9e0:	d903      	bls.n	800d9ea <_svfiprintf_r+0x1a6>
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d0c6      	beq.n	800d974 <_svfiprintf_r+0x130>
 800d9e6:	9105      	str	r1, [sp, #20]
 800d9e8:	e7c4      	b.n	800d974 <_svfiprintf_r+0x130>
 800d9ea:	4604      	mov	r4, r0
 800d9ec:	2301      	movs	r3, #1
 800d9ee:	fb0c 2101 	mla	r1, ip, r1, r2
 800d9f2:	e7f0      	b.n	800d9d6 <_svfiprintf_r+0x192>
 800d9f4:	ab03      	add	r3, sp, #12
 800d9f6:	9300      	str	r3, [sp, #0]
 800d9f8:	462a      	mov	r2, r5
 800d9fa:	4638      	mov	r0, r7
 800d9fc:	4b0f      	ldr	r3, [pc, #60]	; (800da3c <_svfiprintf_r+0x1f8>)
 800d9fe:	a904      	add	r1, sp, #16
 800da00:	f3af 8000 	nop.w
 800da04:	1c42      	adds	r2, r0, #1
 800da06:	4606      	mov	r6, r0
 800da08:	d1d6      	bne.n	800d9b8 <_svfiprintf_r+0x174>
 800da0a:	89ab      	ldrh	r3, [r5, #12]
 800da0c:	065b      	lsls	r3, r3, #25
 800da0e:	f53f af2d 	bmi.w	800d86c <_svfiprintf_r+0x28>
 800da12:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da14:	b01d      	add	sp, #116	; 0x74
 800da16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da1a:	ab03      	add	r3, sp, #12
 800da1c:	9300      	str	r3, [sp, #0]
 800da1e:	462a      	mov	r2, r5
 800da20:	4638      	mov	r0, r7
 800da22:	4b06      	ldr	r3, [pc, #24]	; (800da3c <_svfiprintf_r+0x1f8>)
 800da24:	a904      	add	r1, sp, #16
 800da26:	f000 f87d 	bl	800db24 <_printf_i>
 800da2a:	e7eb      	b.n	800da04 <_svfiprintf_r+0x1c0>
 800da2c:	0800ed5f 	.word	0x0800ed5f
 800da30:	0800ed65 	.word	0x0800ed65
 800da34:	0800ed69 	.word	0x0800ed69
 800da38:	00000000 	.word	0x00000000
 800da3c:	0800d791 	.word	0x0800d791

0800da40 <_printf_common>:
 800da40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da44:	4616      	mov	r6, r2
 800da46:	4699      	mov	r9, r3
 800da48:	688a      	ldr	r2, [r1, #8]
 800da4a:	690b      	ldr	r3, [r1, #16]
 800da4c:	4607      	mov	r7, r0
 800da4e:	4293      	cmp	r3, r2
 800da50:	bfb8      	it	lt
 800da52:	4613      	movlt	r3, r2
 800da54:	6033      	str	r3, [r6, #0]
 800da56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da5a:	460c      	mov	r4, r1
 800da5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da60:	b10a      	cbz	r2, 800da66 <_printf_common+0x26>
 800da62:	3301      	adds	r3, #1
 800da64:	6033      	str	r3, [r6, #0]
 800da66:	6823      	ldr	r3, [r4, #0]
 800da68:	0699      	lsls	r1, r3, #26
 800da6a:	bf42      	ittt	mi
 800da6c:	6833      	ldrmi	r3, [r6, #0]
 800da6e:	3302      	addmi	r3, #2
 800da70:	6033      	strmi	r3, [r6, #0]
 800da72:	6825      	ldr	r5, [r4, #0]
 800da74:	f015 0506 	ands.w	r5, r5, #6
 800da78:	d106      	bne.n	800da88 <_printf_common+0x48>
 800da7a:	f104 0a19 	add.w	sl, r4, #25
 800da7e:	68e3      	ldr	r3, [r4, #12]
 800da80:	6832      	ldr	r2, [r6, #0]
 800da82:	1a9b      	subs	r3, r3, r2
 800da84:	42ab      	cmp	r3, r5
 800da86:	dc2b      	bgt.n	800dae0 <_printf_common+0xa0>
 800da88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da8c:	1e13      	subs	r3, r2, #0
 800da8e:	6822      	ldr	r2, [r4, #0]
 800da90:	bf18      	it	ne
 800da92:	2301      	movne	r3, #1
 800da94:	0692      	lsls	r2, r2, #26
 800da96:	d430      	bmi.n	800dafa <_printf_common+0xba>
 800da98:	4649      	mov	r1, r9
 800da9a:	4638      	mov	r0, r7
 800da9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800daa0:	47c0      	blx	r8
 800daa2:	3001      	adds	r0, #1
 800daa4:	d023      	beq.n	800daee <_printf_common+0xae>
 800daa6:	6823      	ldr	r3, [r4, #0]
 800daa8:	6922      	ldr	r2, [r4, #16]
 800daaa:	f003 0306 	and.w	r3, r3, #6
 800daae:	2b04      	cmp	r3, #4
 800dab0:	bf14      	ite	ne
 800dab2:	2500      	movne	r5, #0
 800dab4:	6833      	ldreq	r3, [r6, #0]
 800dab6:	f04f 0600 	mov.w	r6, #0
 800daba:	bf08      	it	eq
 800dabc:	68e5      	ldreq	r5, [r4, #12]
 800dabe:	f104 041a 	add.w	r4, r4, #26
 800dac2:	bf08      	it	eq
 800dac4:	1aed      	subeq	r5, r5, r3
 800dac6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800daca:	bf08      	it	eq
 800dacc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dad0:	4293      	cmp	r3, r2
 800dad2:	bfc4      	itt	gt
 800dad4:	1a9b      	subgt	r3, r3, r2
 800dad6:	18ed      	addgt	r5, r5, r3
 800dad8:	42b5      	cmp	r5, r6
 800dada:	d11a      	bne.n	800db12 <_printf_common+0xd2>
 800dadc:	2000      	movs	r0, #0
 800dade:	e008      	b.n	800daf2 <_printf_common+0xb2>
 800dae0:	2301      	movs	r3, #1
 800dae2:	4652      	mov	r2, sl
 800dae4:	4649      	mov	r1, r9
 800dae6:	4638      	mov	r0, r7
 800dae8:	47c0      	blx	r8
 800daea:	3001      	adds	r0, #1
 800daec:	d103      	bne.n	800daf6 <_printf_common+0xb6>
 800daee:	f04f 30ff 	mov.w	r0, #4294967295
 800daf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daf6:	3501      	adds	r5, #1
 800daf8:	e7c1      	b.n	800da7e <_printf_common+0x3e>
 800dafa:	2030      	movs	r0, #48	; 0x30
 800dafc:	18e1      	adds	r1, r4, r3
 800dafe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800db02:	1c5a      	adds	r2, r3, #1
 800db04:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800db08:	4422      	add	r2, r4
 800db0a:	3302      	adds	r3, #2
 800db0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800db10:	e7c2      	b.n	800da98 <_printf_common+0x58>
 800db12:	2301      	movs	r3, #1
 800db14:	4622      	mov	r2, r4
 800db16:	4649      	mov	r1, r9
 800db18:	4638      	mov	r0, r7
 800db1a:	47c0      	blx	r8
 800db1c:	3001      	adds	r0, #1
 800db1e:	d0e6      	beq.n	800daee <_printf_common+0xae>
 800db20:	3601      	adds	r6, #1
 800db22:	e7d9      	b.n	800dad8 <_printf_common+0x98>

0800db24 <_printf_i>:
 800db24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db28:	7e0f      	ldrb	r7, [r1, #24]
 800db2a:	4691      	mov	r9, r2
 800db2c:	2f78      	cmp	r7, #120	; 0x78
 800db2e:	4680      	mov	r8, r0
 800db30:	460c      	mov	r4, r1
 800db32:	469a      	mov	sl, r3
 800db34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800db3a:	d807      	bhi.n	800db4c <_printf_i+0x28>
 800db3c:	2f62      	cmp	r7, #98	; 0x62
 800db3e:	d80a      	bhi.n	800db56 <_printf_i+0x32>
 800db40:	2f00      	cmp	r7, #0
 800db42:	f000 80d5 	beq.w	800dcf0 <_printf_i+0x1cc>
 800db46:	2f58      	cmp	r7, #88	; 0x58
 800db48:	f000 80c1 	beq.w	800dcce <_printf_i+0x1aa>
 800db4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db54:	e03a      	b.n	800dbcc <_printf_i+0xa8>
 800db56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db5a:	2b15      	cmp	r3, #21
 800db5c:	d8f6      	bhi.n	800db4c <_printf_i+0x28>
 800db5e:	a101      	add	r1, pc, #4	; (adr r1, 800db64 <_printf_i+0x40>)
 800db60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db64:	0800dbbd 	.word	0x0800dbbd
 800db68:	0800dbd1 	.word	0x0800dbd1
 800db6c:	0800db4d 	.word	0x0800db4d
 800db70:	0800db4d 	.word	0x0800db4d
 800db74:	0800db4d 	.word	0x0800db4d
 800db78:	0800db4d 	.word	0x0800db4d
 800db7c:	0800dbd1 	.word	0x0800dbd1
 800db80:	0800db4d 	.word	0x0800db4d
 800db84:	0800db4d 	.word	0x0800db4d
 800db88:	0800db4d 	.word	0x0800db4d
 800db8c:	0800db4d 	.word	0x0800db4d
 800db90:	0800dcd7 	.word	0x0800dcd7
 800db94:	0800dbfd 	.word	0x0800dbfd
 800db98:	0800dc91 	.word	0x0800dc91
 800db9c:	0800db4d 	.word	0x0800db4d
 800dba0:	0800db4d 	.word	0x0800db4d
 800dba4:	0800dcf9 	.word	0x0800dcf9
 800dba8:	0800db4d 	.word	0x0800db4d
 800dbac:	0800dbfd 	.word	0x0800dbfd
 800dbb0:	0800db4d 	.word	0x0800db4d
 800dbb4:	0800db4d 	.word	0x0800db4d
 800dbb8:	0800dc99 	.word	0x0800dc99
 800dbbc:	682b      	ldr	r3, [r5, #0]
 800dbbe:	1d1a      	adds	r2, r3, #4
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	602a      	str	r2, [r5, #0]
 800dbc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dbc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dbcc:	2301      	movs	r3, #1
 800dbce:	e0a0      	b.n	800dd12 <_printf_i+0x1ee>
 800dbd0:	6820      	ldr	r0, [r4, #0]
 800dbd2:	682b      	ldr	r3, [r5, #0]
 800dbd4:	0607      	lsls	r7, r0, #24
 800dbd6:	f103 0104 	add.w	r1, r3, #4
 800dbda:	6029      	str	r1, [r5, #0]
 800dbdc:	d501      	bpl.n	800dbe2 <_printf_i+0xbe>
 800dbde:	681e      	ldr	r6, [r3, #0]
 800dbe0:	e003      	b.n	800dbea <_printf_i+0xc6>
 800dbe2:	0646      	lsls	r6, r0, #25
 800dbe4:	d5fb      	bpl.n	800dbde <_printf_i+0xba>
 800dbe6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800dbea:	2e00      	cmp	r6, #0
 800dbec:	da03      	bge.n	800dbf6 <_printf_i+0xd2>
 800dbee:	232d      	movs	r3, #45	; 0x2d
 800dbf0:	4276      	negs	r6, r6
 800dbf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbf6:	230a      	movs	r3, #10
 800dbf8:	4859      	ldr	r0, [pc, #356]	; (800dd60 <_printf_i+0x23c>)
 800dbfa:	e012      	b.n	800dc22 <_printf_i+0xfe>
 800dbfc:	682b      	ldr	r3, [r5, #0]
 800dbfe:	6820      	ldr	r0, [r4, #0]
 800dc00:	1d19      	adds	r1, r3, #4
 800dc02:	6029      	str	r1, [r5, #0]
 800dc04:	0605      	lsls	r5, r0, #24
 800dc06:	d501      	bpl.n	800dc0c <_printf_i+0xe8>
 800dc08:	681e      	ldr	r6, [r3, #0]
 800dc0a:	e002      	b.n	800dc12 <_printf_i+0xee>
 800dc0c:	0641      	lsls	r1, r0, #25
 800dc0e:	d5fb      	bpl.n	800dc08 <_printf_i+0xe4>
 800dc10:	881e      	ldrh	r6, [r3, #0]
 800dc12:	2f6f      	cmp	r7, #111	; 0x6f
 800dc14:	bf0c      	ite	eq
 800dc16:	2308      	moveq	r3, #8
 800dc18:	230a      	movne	r3, #10
 800dc1a:	4851      	ldr	r0, [pc, #324]	; (800dd60 <_printf_i+0x23c>)
 800dc1c:	2100      	movs	r1, #0
 800dc1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dc22:	6865      	ldr	r5, [r4, #4]
 800dc24:	2d00      	cmp	r5, #0
 800dc26:	bfa8      	it	ge
 800dc28:	6821      	ldrge	r1, [r4, #0]
 800dc2a:	60a5      	str	r5, [r4, #8]
 800dc2c:	bfa4      	itt	ge
 800dc2e:	f021 0104 	bicge.w	r1, r1, #4
 800dc32:	6021      	strge	r1, [r4, #0]
 800dc34:	b90e      	cbnz	r6, 800dc3a <_printf_i+0x116>
 800dc36:	2d00      	cmp	r5, #0
 800dc38:	d04b      	beq.n	800dcd2 <_printf_i+0x1ae>
 800dc3a:	4615      	mov	r5, r2
 800dc3c:	fbb6 f1f3 	udiv	r1, r6, r3
 800dc40:	fb03 6711 	mls	r7, r3, r1, r6
 800dc44:	5dc7      	ldrb	r7, [r0, r7]
 800dc46:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dc4a:	4637      	mov	r7, r6
 800dc4c:	42bb      	cmp	r3, r7
 800dc4e:	460e      	mov	r6, r1
 800dc50:	d9f4      	bls.n	800dc3c <_printf_i+0x118>
 800dc52:	2b08      	cmp	r3, #8
 800dc54:	d10b      	bne.n	800dc6e <_printf_i+0x14a>
 800dc56:	6823      	ldr	r3, [r4, #0]
 800dc58:	07de      	lsls	r6, r3, #31
 800dc5a:	d508      	bpl.n	800dc6e <_printf_i+0x14a>
 800dc5c:	6923      	ldr	r3, [r4, #16]
 800dc5e:	6861      	ldr	r1, [r4, #4]
 800dc60:	4299      	cmp	r1, r3
 800dc62:	bfde      	ittt	le
 800dc64:	2330      	movle	r3, #48	; 0x30
 800dc66:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dc6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dc6e:	1b52      	subs	r2, r2, r5
 800dc70:	6122      	str	r2, [r4, #16]
 800dc72:	464b      	mov	r3, r9
 800dc74:	4621      	mov	r1, r4
 800dc76:	4640      	mov	r0, r8
 800dc78:	f8cd a000 	str.w	sl, [sp]
 800dc7c:	aa03      	add	r2, sp, #12
 800dc7e:	f7ff fedf 	bl	800da40 <_printf_common>
 800dc82:	3001      	adds	r0, #1
 800dc84:	d14a      	bne.n	800dd1c <_printf_i+0x1f8>
 800dc86:	f04f 30ff 	mov.w	r0, #4294967295
 800dc8a:	b004      	add	sp, #16
 800dc8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc90:	6823      	ldr	r3, [r4, #0]
 800dc92:	f043 0320 	orr.w	r3, r3, #32
 800dc96:	6023      	str	r3, [r4, #0]
 800dc98:	2778      	movs	r7, #120	; 0x78
 800dc9a:	4832      	ldr	r0, [pc, #200]	; (800dd64 <_printf_i+0x240>)
 800dc9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800dca0:	6823      	ldr	r3, [r4, #0]
 800dca2:	6829      	ldr	r1, [r5, #0]
 800dca4:	061f      	lsls	r7, r3, #24
 800dca6:	f851 6b04 	ldr.w	r6, [r1], #4
 800dcaa:	d402      	bmi.n	800dcb2 <_printf_i+0x18e>
 800dcac:	065f      	lsls	r7, r3, #25
 800dcae:	bf48      	it	mi
 800dcb0:	b2b6      	uxthmi	r6, r6
 800dcb2:	07df      	lsls	r7, r3, #31
 800dcb4:	bf48      	it	mi
 800dcb6:	f043 0320 	orrmi.w	r3, r3, #32
 800dcba:	6029      	str	r1, [r5, #0]
 800dcbc:	bf48      	it	mi
 800dcbe:	6023      	strmi	r3, [r4, #0]
 800dcc0:	b91e      	cbnz	r6, 800dcca <_printf_i+0x1a6>
 800dcc2:	6823      	ldr	r3, [r4, #0]
 800dcc4:	f023 0320 	bic.w	r3, r3, #32
 800dcc8:	6023      	str	r3, [r4, #0]
 800dcca:	2310      	movs	r3, #16
 800dccc:	e7a6      	b.n	800dc1c <_printf_i+0xf8>
 800dcce:	4824      	ldr	r0, [pc, #144]	; (800dd60 <_printf_i+0x23c>)
 800dcd0:	e7e4      	b.n	800dc9c <_printf_i+0x178>
 800dcd2:	4615      	mov	r5, r2
 800dcd4:	e7bd      	b.n	800dc52 <_printf_i+0x12e>
 800dcd6:	682b      	ldr	r3, [r5, #0]
 800dcd8:	6826      	ldr	r6, [r4, #0]
 800dcda:	1d18      	adds	r0, r3, #4
 800dcdc:	6961      	ldr	r1, [r4, #20]
 800dcde:	6028      	str	r0, [r5, #0]
 800dce0:	0635      	lsls	r5, r6, #24
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	d501      	bpl.n	800dcea <_printf_i+0x1c6>
 800dce6:	6019      	str	r1, [r3, #0]
 800dce8:	e002      	b.n	800dcf0 <_printf_i+0x1cc>
 800dcea:	0670      	lsls	r0, r6, #25
 800dcec:	d5fb      	bpl.n	800dce6 <_printf_i+0x1c2>
 800dcee:	8019      	strh	r1, [r3, #0]
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	4615      	mov	r5, r2
 800dcf4:	6123      	str	r3, [r4, #16]
 800dcf6:	e7bc      	b.n	800dc72 <_printf_i+0x14e>
 800dcf8:	682b      	ldr	r3, [r5, #0]
 800dcfa:	2100      	movs	r1, #0
 800dcfc:	1d1a      	adds	r2, r3, #4
 800dcfe:	602a      	str	r2, [r5, #0]
 800dd00:	681d      	ldr	r5, [r3, #0]
 800dd02:	6862      	ldr	r2, [r4, #4]
 800dd04:	4628      	mov	r0, r5
 800dd06:	f000 f849 	bl	800dd9c <memchr>
 800dd0a:	b108      	cbz	r0, 800dd10 <_printf_i+0x1ec>
 800dd0c:	1b40      	subs	r0, r0, r5
 800dd0e:	6060      	str	r0, [r4, #4]
 800dd10:	6863      	ldr	r3, [r4, #4]
 800dd12:	6123      	str	r3, [r4, #16]
 800dd14:	2300      	movs	r3, #0
 800dd16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd1a:	e7aa      	b.n	800dc72 <_printf_i+0x14e>
 800dd1c:	462a      	mov	r2, r5
 800dd1e:	4649      	mov	r1, r9
 800dd20:	4640      	mov	r0, r8
 800dd22:	6923      	ldr	r3, [r4, #16]
 800dd24:	47d0      	blx	sl
 800dd26:	3001      	adds	r0, #1
 800dd28:	d0ad      	beq.n	800dc86 <_printf_i+0x162>
 800dd2a:	6823      	ldr	r3, [r4, #0]
 800dd2c:	079b      	lsls	r3, r3, #30
 800dd2e:	d413      	bmi.n	800dd58 <_printf_i+0x234>
 800dd30:	68e0      	ldr	r0, [r4, #12]
 800dd32:	9b03      	ldr	r3, [sp, #12]
 800dd34:	4298      	cmp	r0, r3
 800dd36:	bfb8      	it	lt
 800dd38:	4618      	movlt	r0, r3
 800dd3a:	e7a6      	b.n	800dc8a <_printf_i+0x166>
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	4632      	mov	r2, r6
 800dd40:	4649      	mov	r1, r9
 800dd42:	4640      	mov	r0, r8
 800dd44:	47d0      	blx	sl
 800dd46:	3001      	adds	r0, #1
 800dd48:	d09d      	beq.n	800dc86 <_printf_i+0x162>
 800dd4a:	3501      	adds	r5, #1
 800dd4c:	68e3      	ldr	r3, [r4, #12]
 800dd4e:	9903      	ldr	r1, [sp, #12]
 800dd50:	1a5b      	subs	r3, r3, r1
 800dd52:	42ab      	cmp	r3, r5
 800dd54:	dcf2      	bgt.n	800dd3c <_printf_i+0x218>
 800dd56:	e7eb      	b.n	800dd30 <_printf_i+0x20c>
 800dd58:	2500      	movs	r5, #0
 800dd5a:	f104 0619 	add.w	r6, r4, #25
 800dd5e:	e7f5      	b.n	800dd4c <_printf_i+0x228>
 800dd60:	0800ed70 	.word	0x0800ed70
 800dd64:	0800ed81 	.word	0x0800ed81

0800dd68 <memmove>:
 800dd68:	4288      	cmp	r0, r1
 800dd6a:	b510      	push	{r4, lr}
 800dd6c:	eb01 0402 	add.w	r4, r1, r2
 800dd70:	d902      	bls.n	800dd78 <memmove+0x10>
 800dd72:	4284      	cmp	r4, r0
 800dd74:	4623      	mov	r3, r4
 800dd76:	d807      	bhi.n	800dd88 <memmove+0x20>
 800dd78:	1e43      	subs	r3, r0, #1
 800dd7a:	42a1      	cmp	r1, r4
 800dd7c:	d008      	beq.n	800dd90 <memmove+0x28>
 800dd7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd86:	e7f8      	b.n	800dd7a <memmove+0x12>
 800dd88:	4601      	mov	r1, r0
 800dd8a:	4402      	add	r2, r0
 800dd8c:	428a      	cmp	r2, r1
 800dd8e:	d100      	bne.n	800dd92 <memmove+0x2a>
 800dd90:	bd10      	pop	{r4, pc}
 800dd92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd9a:	e7f7      	b.n	800dd8c <memmove+0x24>

0800dd9c <memchr>:
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	b510      	push	{r4, lr}
 800dda0:	b2c9      	uxtb	r1, r1
 800dda2:	4402      	add	r2, r0
 800dda4:	4293      	cmp	r3, r2
 800dda6:	4618      	mov	r0, r3
 800dda8:	d101      	bne.n	800ddae <memchr+0x12>
 800ddaa:	2000      	movs	r0, #0
 800ddac:	e003      	b.n	800ddb6 <memchr+0x1a>
 800ddae:	7804      	ldrb	r4, [r0, #0]
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	428c      	cmp	r4, r1
 800ddb4:	d1f6      	bne.n	800dda4 <memchr+0x8>
 800ddb6:	bd10      	pop	{r4, pc}

0800ddb8 <memcpy>:
 800ddb8:	440a      	add	r2, r1
 800ddba:	4291      	cmp	r1, r2
 800ddbc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ddc0:	d100      	bne.n	800ddc4 <memcpy+0xc>
 800ddc2:	4770      	bx	lr
 800ddc4:	b510      	push	{r4, lr}
 800ddc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddca:	4291      	cmp	r1, r2
 800ddcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddd0:	d1f9      	bne.n	800ddc6 <memcpy+0xe>
 800ddd2:	bd10      	pop	{r4, pc}

0800ddd4 <_realloc_r>:
 800ddd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddd8:	4680      	mov	r8, r0
 800ddda:	4614      	mov	r4, r2
 800dddc:	460e      	mov	r6, r1
 800ddde:	b921      	cbnz	r1, 800ddea <_realloc_r+0x16>
 800dde0:	4611      	mov	r1, r2
 800dde2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dde6:	f7ff bb0b 	b.w	800d400 <_malloc_r>
 800ddea:	b92a      	cbnz	r2, 800ddf8 <_realloc_r+0x24>
 800ddec:	f7ff fc88 	bl	800d700 <_free_r>
 800ddf0:	4625      	mov	r5, r4
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddf8:	f000 f81b 	bl	800de32 <_malloc_usable_size_r>
 800ddfc:	4284      	cmp	r4, r0
 800ddfe:	4607      	mov	r7, r0
 800de00:	d802      	bhi.n	800de08 <_realloc_r+0x34>
 800de02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de06:	d812      	bhi.n	800de2e <_realloc_r+0x5a>
 800de08:	4621      	mov	r1, r4
 800de0a:	4640      	mov	r0, r8
 800de0c:	f7ff faf8 	bl	800d400 <_malloc_r>
 800de10:	4605      	mov	r5, r0
 800de12:	2800      	cmp	r0, #0
 800de14:	d0ed      	beq.n	800ddf2 <_realloc_r+0x1e>
 800de16:	42bc      	cmp	r4, r7
 800de18:	4622      	mov	r2, r4
 800de1a:	4631      	mov	r1, r6
 800de1c:	bf28      	it	cs
 800de1e:	463a      	movcs	r2, r7
 800de20:	f7ff ffca 	bl	800ddb8 <memcpy>
 800de24:	4631      	mov	r1, r6
 800de26:	4640      	mov	r0, r8
 800de28:	f7ff fc6a 	bl	800d700 <_free_r>
 800de2c:	e7e1      	b.n	800ddf2 <_realloc_r+0x1e>
 800de2e:	4635      	mov	r5, r6
 800de30:	e7df      	b.n	800ddf2 <_realloc_r+0x1e>

0800de32 <_malloc_usable_size_r>:
 800de32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de36:	1f18      	subs	r0, r3, #4
 800de38:	2b00      	cmp	r3, #0
 800de3a:	bfbc      	itt	lt
 800de3c:	580b      	ldrlt	r3, [r1, r0]
 800de3e:	18c0      	addlt	r0, r0, r3
 800de40:	4770      	bx	lr
	...

0800de44 <_init>:
 800de44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de46:	bf00      	nop
 800de48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de4a:	bc08      	pop	{r3}
 800de4c:	469e      	mov	lr, r3
 800de4e:	4770      	bx	lr

0800de50 <_fini>:
 800de50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de52:	bf00      	nop
 800de54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de56:	bc08      	pop	{r3}
 800de58:	469e      	mov	lr, r3
 800de5a:	4770      	bx	lr
