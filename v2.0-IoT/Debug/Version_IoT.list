
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ab4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e94  08006c98  08006c98  00016c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b2c  08007b2c  00020970  2**0
                  CONTENTS
  4 .ARM          00000000  08007b2c  08007b2c  00020970  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b2c  08007b2c  00020970  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b2c  08007b2c  00017b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b30  08007b30  00017b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000970  20000000  08007b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  20000970  080084a4  00020970  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000eb8  080084a4  00020eb8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020970  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020999  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001316c  00000000  00000000  000209dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026af  00000000  00000000  00033b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  000361f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd9  00000000  00000000  00037378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af02  00000000  00000000  00038151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018390  00000000  00000000  00053053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fc03  00000000  00000000  0006b3e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005040  00000000  00000000  0010afe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00110028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000970 	.word	0x20000970
 8000200:	00000000 	.word	0x00000000
 8000204:	08006c80 	.word	0x08006c80

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000974 	.word	0x20000974
 8000220:	08006c80 	.word	0x08006c80

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b0c6      	sub	sp, #280	; 0x118
 8000238:	af02      	add	r7, sp, #8
 800023a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800023e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000242:	6018      	str	r0, [r3, #0]
 8000244:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800024c:	6019      	str	r1, [r3, #0]
 800024e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000252:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000256:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 8000258:	4a31      	ldr	r2, [pc, #196]	; (8000320 <sendMachineData+0xec>)
 800025a:	4932      	ldr	r1, [pc, #200]	; (8000324 <sendMachineData+0xf0>)
 800025c:	4832      	ldr	r0, [pc, #200]	; (8000328 <sendMachineData+0xf4>)
 800025e:	f006 f8f1 	bl	8006444 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000262:	4831      	ldr	r0, [pc, #196]	; (8000328 <sendMachineData+0xf4>)
 8000264:	f7ff ffde 	bl	8000224 <strlen>
 8000268:	4603      	mov	r3, r0
 800026a:	b29a      	uxth	r2, r3
 800026c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000274:	492c      	ldr	r1, [pc, #176]	; (8000328 <sendMachineData+0xf4>)
 8000276:	6818      	ldr	r0, [r3, #0]
 8000278:	f005 fb18 	bl	80058ac <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800027c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000280:	f002 fbf0 	bl	8002a64 <HAL_Delay>

	sprintf(local_txA,
 8000284:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000288:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800028c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000290:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000294:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000298:	4924      	ldr	r1, [pc, #144]	; (800032c <sendMachineData+0xf8>)
 800029a:	9100      	str	r1, [sp, #0]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	6812      	ldr	r2, [r2, #0]
 80002a0:	4923      	ldr	r1, [pc, #140]	; (8000330 <sendMachineData+0xfc>)
 80002a2:	f006 f8cf 	bl	8006444 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 80002a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ffba 	bl	8000224 <strlen>
 80002b0:	4603      	mov	r3, r0
 80002b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80002be:	491d      	ldr	r1, [pc, #116]	; (8000334 <sendMachineData+0x100>)
 80002c0:	4618      	mov	r0, r3
 80002c2:	f006 f8bf 	bl	8006444 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 80002c6:	f107 0310 	add.w	r3, r7, #16
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ffaa 	bl	8000224 <strlen>
 80002d0:	4603      	mov	r3, r0
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	f107 0110 	add.w	r1, r7, #16
 80002d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80002dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80002e0:	6818      	ldr	r0, [r3, #0]
 80002e2:	f005 fae3 	bl	80058ac <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002ea:	f002 fbbb 	bl	8002a64 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 80002ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000300:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000304:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000308:	6818      	ldr	r0, [r3, #0]
 800030a:	f005 facf 	bl	80058ac <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800030e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000312:	f002 fba7 	bl	8002a64 <HAL_Delay>
}
 8000316:	bf00      	nop
 8000318:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	08006d0c 	.word	0x08006d0c
 8000324:	08006d1c 	.word	0x08006d1c
 8000328:	2000098c 	.word	0x2000098c
 800032c:	08006d98 	.word	0x08006d98
 8000330:	08006d3c 	.word	0x08006d3c
 8000334:	08006dac 	.word	0x08006dac

08000338 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af02      	add	r7, sp, #8
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	f023 030f 	bic.w	r3, r3, #15
 8000348:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	011b      	lsls	r3, r3, #4
 800034e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000350:	7b7b      	ldrb	r3, [r7, #13]
 8000352:	f043 030c 	orr.w	r3, r3, #12
 8000356:	b2db      	uxtb	r3, r3
 8000358:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800035a:	7b7b      	ldrb	r3, [r7, #13]
 800035c:	f043 0308 	orr.w	r3, r3, #8
 8000360:	b2db      	uxtb	r3, r3
 8000362:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000364:	7b3b      	ldrb	r3, [r7, #12]
 8000366:	f043 030c 	orr.w	r3, r3, #12
 800036a:	b2db      	uxtb	r3, r3
 800036c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800036e:	7b3b      	ldrb	r3, [r7, #12]
 8000370:	f043 0308 	orr.w	r3, r3, #8
 8000374:	b2db      	uxtb	r3, r3
 8000376:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000378:	bf00      	nop
 800037a:	4825      	ldr	r0, [pc, #148]	; (8000410 <lcd_send_cmd+0xd8>)
 800037c:	f003 fe59 	bl	8004032 <HAL_I2C_GetError>
 8000380:	4603      	mov	r3, r0
 8000382:	2b04      	cmp	r3, #4
 8000384:	d0f9      	beq.n	800037a <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000386:	bf00      	nop
 8000388:	4821      	ldr	r0, [pc, #132]	; (8000410 <lcd_send_cmd+0xd8>)
 800038a:	f003 fe45 	bl	8004018 <HAL_I2C_GetState>
 800038e:	4603      	mov	r3, r0
 8000390:	2b20      	cmp	r3, #32
 8000392:	d1f9      	bne.n	8000388 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000394:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <lcd_send_cmd+0xdc>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d116      	bne.n	80003ca <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800039c:	2300      	movs	r3, #0
 800039e:	73fb      	strb	r3, [r7, #15]
 80003a0:	e00f      	b.n	80003c2 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80003a2:	7bfb      	ldrb	r3, [r7, #15]
 80003a4:	3310      	adds	r3, #16
 80003a6:	443b      	add	r3, r7
 80003a8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	f022 0208 	bic.w	r2, r2, #8
 80003b2:	b2d2      	uxtb	r2, r2
 80003b4:	3310      	adds	r3, #16
 80003b6:	443b      	add	r3, r7
 80003b8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	3301      	adds	r3, #1
 80003c0:	73fb      	strb	r3, [r7, #15]
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	2b03      	cmp	r3, #3
 80003c6:	d9ec      	bls.n	80003a2 <lcd_send_cmd+0x6a>
 80003c8:	e015      	b.n	80003f6 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80003ca:	2300      	movs	r3, #0
 80003cc:	73bb      	strb	r3, [r7, #14]
 80003ce:	e00f      	b.n	80003f0 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80003d0:	7bbb      	ldrb	r3, [r7, #14]
 80003d2:	3310      	adds	r3, #16
 80003d4:	443b      	add	r3, r7
 80003d6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003da:	7bbb      	ldrb	r3, [r7, #14]
 80003dc:	f042 0208 	orr.w	r2, r2, #8
 80003e0:	b2d2      	uxtb	r2, r2
 80003e2:	3310      	adds	r3, #16
 80003e4:	443b      	add	r3, r7
 80003e6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003ea:	7bbb      	ldrb	r3, [r7, #14]
 80003ec:	3301      	adds	r3, #1
 80003ee:	73bb      	strb	r3, [r7, #14]
 80003f0:	7bbb      	ldrb	r3, [r7, #14]
 80003f2:	2b03      	cmp	r3, #3
 80003f4:	d9ec      	bls.n	80003d0 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003f6:	f107 0208 	add.w	r2, r7, #8
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2304      	movs	r3, #4
 8000400:	214e      	movs	r1, #78	; 0x4e
 8000402:	4803      	ldr	r0, [pc, #12]	; (8000410 <lcd_send_cmd+0xd8>)
 8000404:	f003 faa2 	bl	800394c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000408:	bf00      	nop
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000c84 	.word	0x20000c84
 8000414:	20000a86 	.word	0x20000a86

08000418 <lcd_send_data>:

void lcd_send_data (char data) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af02      	add	r7, sp, #8
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	f023 030f 	bic.w	r3, r3, #15
 8000428:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	011b      	lsls	r3, r3, #4
 800042e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000430:	7b7b      	ldrb	r3, [r7, #13]
 8000432:	f043 030d 	orr.w	r3, r3, #13
 8000436:	b2db      	uxtb	r3, r3
 8000438:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800043a:	7b7b      	ldrb	r3, [r7, #13]
 800043c:	f043 0309 	orr.w	r3, r3, #9
 8000440:	b2db      	uxtb	r3, r3
 8000442:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000444:	7b3b      	ldrb	r3, [r7, #12]
 8000446:	f043 030d 	orr.w	r3, r3, #13
 800044a:	b2db      	uxtb	r3, r3
 800044c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800044e:	7b3b      	ldrb	r3, [r7, #12]
 8000450:	f043 0309 	orr.w	r3, r3, #9
 8000454:	b2db      	uxtb	r3, r3
 8000456:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000458:	bf00      	nop
 800045a:	4825      	ldr	r0, [pc, #148]	; (80004f0 <lcd_send_data+0xd8>)
 800045c:	f003 fde9 	bl	8004032 <HAL_I2C_GetError>
 8000460:	4603      	mov	r3, r0
 8000462:	2b04      	cmp	r3, #4
 8000464:	d0f9      	beq.n	800045a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000466:	bf00      	nop
 8000468:	4821      	ldr	r0, [pc, #132]	; (80004f0 <lcd_send_data+0xd8>)
 800046a:	f003 fdd5 	bl	8004018 <HAL_I2C_GetState>
 800046e:	4603      	mov	r3, r0
 8000470:	2b20      	cmp	r3, #32
 8000472:	d1f9      	bne.n	8000468 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000474:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <lcd_send_data+0xdc>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d116      	bne.n	80004aa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800047c:	2300      	movs	r3, #0
 800047e:	73fb      	strb	r3, [r7, #15]
 8000480:	e00f      	b.n	80004a2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	3310      	adds	r3, #16
 8000486:	443b      	add	r3, r7
 8000488:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800048c:	7bfb      	ldrb	r3, [r7, #15]
 800048e:	f022 0208 	bic.w	r2, r2, #8
 8000492:	b2d2      	uxtb	r2, r2
 8000494:	3310      	adds	r3, #16
 8000496:	443b      	add	r3, r7
 8000498:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	3301      	adds	r3, #1
 80004a0:	73fb      	strb	r3, [r7, #15]
 80004a2:	7bfb      	ldrb	r3, [r7, #15]
 80004a4:	2b03      	cmp	r3, #3
 80004a6:	d9ec      	bls.n	8000482 <lcd_send_data+0x6a>
 80004a8:	e015      	b.n	80004d6 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80004aa:	2300      	movs	r3, #0
 80004ac:	73bb      	strb	r3, [r7, #14]
 80004ae:	e00f      	b.n	80004d0 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80004b0:	7bbb      	ldrb	r3, [r7, #14]
 80004b2:	3310      	adds	r3, #16
 80004b4:	443b      	add	r3, r7
 80004b6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004ba:	7bbb      	ldrb	r3, [r7, #14]
 80004bc:	f042 0208 	orr.w	r2, r2, #8
 80004c0:	b2d2      	uxtb	r2, r2
 80004c2:	3310      	adds	r3, #16
 80004c4:	443b      	add	r3, r7
 80004c6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80004ca:	7bbb      	ldrb	r3, [r7, #14]
 80004cc:	3301      	adds	r3, #1
 80004ce:	73bb      	strb	r3, [r7, #14]
 80004d0:	7bbb      	ldrb	r3, [r7, #14]
 80004d2:	2b03      	cmp	r3, #3
 80004d4:	d9ec      	bls.n	80004b0 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004d6:	f107 0208 	add.w	r2, r7, #8
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2304      	movs	r3, #4
 80004e0:	214e      	movs	r1, #78	; 0x4e
 80004e2:	4803      	ldr	r0, [pc, #12]	; (80004f0 <lcd_send_data+0xd8>)
 80004e4:	f003 fa32 	bl	800394c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000c84 	.word	0x20000c84
 80004f4:	20000a86 	.word	0x20000a86

080004f8 <lcd_send_string>:

void lcd_send_string (char *str) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000500:	e006      	b.n	8000510 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	1c5a      	adds	r2, r3, #1
 8000506:	607a      	str	r2, [r7, #4]
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ff84 	bl	8000418 <lcd_send_data>
	while (*str) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d1f4      	bne.n	8000502 <lcd_send_string+0xa>
	}
}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af02      	add	r7, sp, #8
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	f023 030f 	bic.w	r3, r3, #15
 8000534:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	011b      	lsls	r3, r3, #4
 800053a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800053c:	7b7b      	ldrb	r3, [r7, #13]
 800053e:	f043 030d 	orr.w	r3, r3, #13
 8000542:	b2db      	uxtb	r3, r3
 8000544:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000546:	7b7b      	ldrb	r3, [r7, #13]
 8000548:	f043 0309 	orr.w	r3, r3, #9
 800054c:	b2db      	uxtb	r3, r3
 800054e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8000550:	7b3b      	ldrb	r3, [r7, #12]
 8000552:	f043 030d 	orr.w	r3, r3, #13
 8000556:	b2db      	uxtb	r3, r3
 8000558:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 800055a:	7b3b      	ldrb	r3, [r7, #12]
 800055c:	f043 0309 	orr.w	r3, r3, #9
 8000560:	b2db      	uxtb	r3, r3
 8000562:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000564:	bf00      	nop
 8000566:	4825      	ldr	r0, [pc, #148]	; (80005fc <lcd_send_char+0xd8>)
 8000568:	f003 fd63 	bl	8004032 <HAL_I2C_GetError>
 800056c:	4603      	mov	r3, r0
 800056e:	2b04      	cmp	r3, #4
 8000570:	d0f9      	beq.n	8000566 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000572:	bf00      	nop
 8000574:	4821      	ldr	r0, [pc, #132]	; (80005fc <lcd_send_char+0xd8>)
 8000576:	f003 fd4f 	bl	8004018 <HAL_I2C_GetState>
 800057a:	4603      	mov	r3, r0
 800057c:	2b20      	cmp	r3, #32
 800057e:	d1f9      	bne.n	8000574 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <lcd_send_char+0xdc>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d116      	bne.n	80005b6 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e00f      	b.n	80005ae <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	3310      	adds	r3, #16
 8000592:	443b      	add	r3, r7
 8000594:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	f022 0208 	bic.w	r2, r2, #8
 800059e:	b2d2      	uxtb	r2, r2
 80005a0:	3310      	adds	r3, #16
 80005a2:	443b      	add	r3, r7
 80005a4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	3301      	adds	r3, #1
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d9ec      	bls.n	800058e <lcd_send_char+0x6a>
 80005b4:	e015      	b.n	80005e2 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80005b6:	2300      	movs	r3, #0
 80005b8:	73bb      	strb	r3, [r7, #14]
 80005ba:	e00f      	b.n	80005dc <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80005bc:	7bbb      	ldrb	r3, [r7, #14]
 80005be:	3310      	adds	r3, #16
 80005c0:	443b      	add	r3, r7
 80005c2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005c6:	7bbb      	ldrb	r3, [r7, #14]
 80005c8:	f042 0208 	orr.w	r2, r2, #8
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	3310      	adds	r3, #16
 80005d0:	443b      	add	r3, r7
 80005d2:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80005d6:	7bbb      	ldrb	r3, [r7, #14]
 80005d8:	3301      	adds	r3, #1
 80005da:	73bb      	strb	r3, [r7, #14]
 80005dc:	7bbb      	ldrb	r3, [r7, #14]
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d9ec      	bls.n	80005bc <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80005e2:	f107 0208 	add.w	r2, r7, #8
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2304      	movs	r3, #4
 80005ec:	214e      	movs	r1, #78	; 0x4e
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <lcd_send_char+0xd8>)
 80005f0:	f003 f9ac 	bl	800394c <HAL_I2C_Master_Transmit>
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000c84 	.word	0x20000c84
 8000600:	20000a86 	.word	0x20000a86

08000604 <lcd_init>:

void lcd_init (void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000608:	2002      	movs	r0, #2
 800060a:	f7ff fe95 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800060e:	2028      	movs	r0, #40	; 0x28
 8000610:	f7ff fe92 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000614:	200c      	movs	r0, #12
 8000616:	f7ff fe8f 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800061a:	2080      	movs	r0, #128	; 0x80
 800061c:	f7ff fe8c 	bl	8000338 <lcd_send_cmd>
	lcd_backlight(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f000 f857 	bl	80006d4 <lcd_backlight>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}

0800062a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	4603      	mov	r3, r0
 8000632:	460a      	mov	r2, r1
 8000634:	71fb      	strb	r3, [r7, #7]
 8000636:	4613      	mov	r3, r2
 8000638:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d106      	bne.n	800064e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	337f      	adds	r3, #127	; 0x7f
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fe76 	bl	8000338 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800064c:	e008      	b.n	8000660 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b02      	cmp	r3, #2
 8000652:	d105      	bne.n	8000660 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	3b41      	subs	r3, #65	; 0x41
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fe6c 	bl	8000338 <lcd_send_cmd>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	603a      	str	r2, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	460b      	mov	r3, r1
 8000676:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000678:	79ba      	ldrb	r2, [r7, #6]
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4611      	mov	r1, r2
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffd3 	bl	800062a <lcd_gotoxy>
	lcd_send_string(str);
 8000684:	6838      	ldr	r0, [r7, #0]
 8000686:	f7ff ff37 	bl	80004f8 <lcd_send_string>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	460b      	mov	r3, r1
 800069e:	71bb      	strb	r3, [r7, #6]
 80006a0:	4613      	mov	r3, r2
 80006a2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80006a4:	79ba      	ldrb	r2, [r7, #6]
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffbd 	bl	800062a <lcd_gotoxy>
    lcd_send_char(ch);
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff36 	bl	8000524 <lcd_send_char>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <lcd_clear>:

void lcd_clear(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff fe37 	bl	8000338 <lcd_send_cmd>
    HAL_Delay(2);
 80006ca:	2002      	movs	r0, #2
 80006cc:	f002 f9ca 	bl	8002a64 <HAL_Delay>

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 80006de:	4a05      	ldr	r2, [pc, #20]	; (80006f4 <lcd_backlight+0x20>)
 80006e0:	79fb      	ldrb	r3, [r7, #7]
 80006e2:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 80006e4:	2000      	movs	r0, #0
 80006e6:	f7ff fe27 	bl	8000338 <lcd_send_cmd>
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000a86 	.word	0x20000a86

080006f8 <lcd_cursor>:

void lcd_cursor(int state) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d106      	bne.n	8000714 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8000706:	200e      	movs	r0, #14
 8000708:	f7ff fe16 	bl	8000338 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 800070c:	200f      	movs	r0, #15
 800070e:	f7ff fe13 	bl	8000338 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8000712:	e002      	b.n	800071a <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8000714:	200c      	movs	r0, #12
 8000716:	f7ff fe0f 	bl	8000338 <lcd_send_cmd>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 8000722:	b580      	push	{r7, lr}
 8000724:	b084      	sub	sp, #16
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f7ff fd7a 	bl	8000224 <strlen>
 8000730:	4603      	mov	r3, r0
 8000732:	3301      	adds	r3, #1
 8000734:	4618      	mov	r0, r3
 8000736:	f005 fdd1 	bl	80062dc <malloc>
 800073a:	4603      	mov	r3, r0
 800073c:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d003      	beq.n	800074c <copyText+0x2a>
        strcpy(result, text);
 8000744:	6879      	ldr	r1, [r7, #4]
 8000746:	68f8      	ldr	r0, [r7, #12]
 8000748:	f005 fef0 	bl	800652c <strcpy>
    }
    return result;
 800074c:	68fb      	ldr	r3, [r7, #12]
}
 800074e:	4618      	mov	r0, r3
 8000750:	3710      	adds	r7, #16
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <loadMenuTexts>:
			NVIC_SystemReset();
		}
	}
}

void loadMenuTexts(uint8_t dilSecim) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8000762:	48a9      	ldr	r0, [pc, #676]	; (8000a08 <loadMenuTexts+0x2b0>)
 8000764:	f7ff ffdd 	bl	8000722 <copyText>
 8000768:	4603      	mov	r3, r0
 800076a:	4aa8      	ldr	r2, [pc, #672]	; (8000a0c <loadMenuTexts+0x2b4>)
 800076c:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 800076e:	48a8      	ldr	r0, [pc, #672]	; (8000a10 <loadMenuTexts+0x2b8>)
 8000770:	f7ff ffd7 	bl	8000722 <copyText>
 8000774:	4603      	mov	r3, r0
 8000776:	4aa7      	ldr	r2, [pc, #668]	; (8000a14 <loadMenuTexts+0x2bc>)
 8000778:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 800077a:	48a7      	ldr	r0, [pc, #668]	; (8000a18 <loadMenuTexts+0x2c0>)
 800077c:	f7ff ffd1 	bl	8000722 <copyText>
 8000780:	4603      	mov	r3, r0
 8000782:	4aa6      	ldr	r2, [pc, #664]	; (8000a1c <loadMenuTexts+0x2c4>)
 8000784:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8000786:	48a6      	ldr	r0, [pc, #664]	; (8000a20 <loadMenuTexts+0x2c8>)
 8000788:	f7ff ffcb 	bl	8000722 <copyText>
 800078c:	4603      	mov	r3, r0
 800078e:	4aa5      	ldr	r2, [pc, #660]	; (8000a24 <loadMenuTexts+0x2cc>)
 8000790:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8000792:	48a5      	ldr	r0, [pc, #660]	; (8000a28 <loadMenuTexts+0x2d0>)
 8000794:	f7ff ffc5 	bl	8000722 <copyText>
 8000798:	4603      	mov	r3, r0
 800079a:	4aa4      	ldr	r2, [pc, #656]	; (8000a2c <loadMenuTexts+0x2d4>)
 800079c:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 800079e:	48a4      	ldr	r0, [pc, #656]	; (8000a30 <loadMenuTexts+0x2d8>)
 80007a0:	f7ff ffbf 	bl	8000722 <copyText>
 80007a4:	4603      	mov	r3, r0
 80007a6:	4aa3      	ldr	r2, [pc, #652]	; (8000a34 <loadMenuTexts+0x2dc>)
 80007a8:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 80007aa:	48a3      	ldr	r0, [pc, #652]	; (8000a38 <loadMenuTexts+0x2e0>)
 80007ac:	f7ff ffb9 	bl	8000722 <copyText>
 80007b0:	4603      	mov	r3, r0
 80007b2:	4aa2      	ldr	r2, [pc, #648]	; (8000a3c <loadMenuTexts+0x2e4>)
 80007b4:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	f040 82d1 	bne.w	8000d60 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 80007be:	48a0      	ldr	r0, [pc, #640]	; (8000a40 <loadMenuTexts+0x2e8>)
 80007c0:	f7ff ffaf 	bl	8000722 <copyText>
 80007c4:	4603      	mov	r3, r0
 80007c6:	4a9f      	ldr	r2, [pc, #636]	; (8000a44 <loadMenuTexts+0x2ec>)
 80007c8:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 80007ca:	489f      	ldr	r0, [pc, #636]	; (8000a48 <loadMenuTexts+0x2f0>)
 80007cc:	f7ff ffa9 	bl	8000722 <copyText>
 80007d0:	4603      	mov	r3, r0
 80007d2:	4a9e      	ldr	r2, [pc, #632]	; (8000a4c <loadMenuTexts+0x2f4>)
 80007d4:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 80007d6:	489e      	ldr	r0, [pc, #632]	; (8000a50 <loadMenuTexts+0x2f8>)
 80007d8:	f7ff ffa3 	bl	8000722 <copyText>
 80007dc:	4603      	mov	r3, r0
 80007de:	4a9d      	ldr	r2, [pc, #628]	; (8000a54 <loadMenuTexts+0x2fc>)
 80007e0:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 80007e2:	489d      	ldr	r0, [pc, #628]	; (8000a58 <loadMenuTexts+0x300>)
 80007e4:	f7ff ff9d 	bl	8000722 <copyText>
 80007e8:	4603      	mov	r3, r0
 80007ea:	4a9c      	ldr	r2, [pc, #624]	; (8000a5c <loadMenuTexts+0x304>)
 80007ec:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 80007ee:	489c      	ldr	r0, [pc, #624]	; (8000a60 <loadMenuTexts+0x308>)
 80007f0:	f7ff ff97 	bl	8000722 <copyText>
 80007f4:	4603      	mov	r3, r0
 80007f6:	4a9b      	ldr	r2, [pc, #620]	; (8000a64 <loadMenuTexts+0x30c>)
 80007f8:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 80007fa:	489b      	ldr	r0, [pc, #620]	; (8000a68 <loadMenuTexts+0x310>)
 80007fc:	f7ff ff91 	bl	8000722 <copyText>
 8000800:	4603      	mov	r3, r0
 8000802:	4a9a      	ldr	r2, [pc, #616]	; (8000a6c <loadMenuTexts+0x314>)
 8000804:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8000806:	489a      	ldr	r0, [pc, #616]	; (8000a70 <loadMenuTexts+0x318>)
 8000808:	f7ff ff8b 	bl	8000722 <copyText>
 800080c:	4603      	mov	r3, r0
 800080e:	4a99      	ldr	r2, [pc, #612]	; (8000a74 <loadMenuTexts+0x31c>)
 8000810:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8000812:	4899      	ldr	r0, [pc, #612]	; (8000a78 <loadMenuTexts+0x320>)
 8000814:	f7ff ff85 	bl	8000722 <copyText>
 8000818:	4603      	mov	r3, r0
 800081a:	4a98      	ldr	r2, [pc, #608]	; (8000a7c <loadMenuTexts+0x324>)
 800081c:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 800081e:	4898      	ldr	r0, [pc, #608]	; (8000a80 <loadMenuTexts+0x328>)
 8000820:	f7ff ff7f 	bl	8000722 <copyText>
 8000824:	4603      	mov	r3, r0
 8000826:	4a97      	ldr	r2, [pc, #604]	; (8000a84 <loadMenuTexts+0x32c>)
 8000828:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 800082a:	4897      	ldr	r0, [pc, #604]	; (8000a88 <loadMenuTexts+0x330>)
 800082c:	f7ff ff79 	bl	8000722 <copyText>
 8000830:	4603      	mov	r3, r0
 8000832:	4a96      	ldr	r2, [pc, #600]	; (8000a8c <loadMenuTexts+0x334>)
 8000834:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8000836:	4896      	ldr	r0, [pc, #600]	; (8000a90 <loadMenuTexts+0x338>)
 8000838:	f7ff ff73 	bl	8000722 <copyText>
 800083c:	4603      	mov	r3, r0
 800083e:	4a95      	ldr	r2, [pc, #596]	; (8000a94 <loadMenuTexts+0x33c>)
 8000840:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8000842:	4895      	ldr	r0, [pc, #596]	; (8000a98 <loadMenuTexts+0x340>)
 8000844:	f7ff ff6d 	bl	8000722 <copyText>
 8000848:	4603      	mov	r3, r0
 800084a:	4a94      	ldr	r2, [pc, #592]	; (8000a9c <loadMenuTexts+0x344>)
 800084c:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 800084e:	4894      	ldr	r0, [pc, #592]	; (8000aa0 <loadMenuTexts+0x348>)
 8000850:	f7ff ff67 	bl	8000722 <copyText>
 8000854:	4603      	mov	r3, r0
 8000856:	4a93      	ldr	r2, [pc, #588]	; (8000aa4 <loadMenuTexts+0x34c>)
 8000858:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 800085a:	4893      	ldr	r0, [pc, #588]	; (8000aa8 <loadMenuTexts+0x350>)
 800085c:	f7ff ff61 	bl	8000722 <copyText>
 8000860:	4603      	mov	r3, r0
 8000862:	4a92      	ldr	r2, [pc, #584]	; (8000aac <loadMenuTexts+0x354>)
 8000864:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8000866:	4892      	ldr	r0, [pc, #584]	; (8000ab0 <loadMenuTexts+0x358>)
 8000868:	f7ff ff5b 	bl	8000722 <copyText>
 800086c:	4603      	mov	r3, r0
 800086e:	4a91      	ldr	r2, [pc, #580]	; (8000ab4 <loadMenuTexts+0x35c>)
 8000870:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8000872:	4891      	ldr	r0, [pc, #580]	; (8000ab8 <loadMenuTexts+0x360>)
 8000874:	f7ff ff55 	bl	8000722 <copyText>
 8000878:	4603      	mov	r3, r0
 800087a:	4a90      	ldr	r2, [pc, #576]	; (8000abc <loadMenuTexts+0x364>)
 800087c:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 800087e:	4890      	ldr	r0, [pc, #576]	; (8000ac0 <loadMenuTexts+0x368>)
 8000880:	f7ff ff4f 	bl	8000722 <copyText>
 8000884:	4603      	mov	r3, r0
 8000886:	4a8f      	ldr	r2, [pc, #572]	; (8000ac4 <loadMenuTexts+0x36c>)
 8000888:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 800088a:	488f      	ldr	r0, [pc, #572]	; (8000ac8 <loadMenuTexts+0x370>)
 800088c:	f7ff ff49 	bl	8000722 <copyText>
 8000890:	4603      	mov	r3, r0
 8000892:	4a8e      	ldr	r2, [pc, #568]	; (8000acc <loadMenuTexts+0x374>)
 8000894:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8000896:	488e      	ldr	r0, [pc, #568]	; (8000ad0 <loadMenuTexts+0x378>)
 8000898:	f7ff ff43 	bl	8000722 <copyText>
 800089c:	4603      	mov	r3, r0
 800089e:	4a8d      	ldr	r2, [pc, #564]	; (8000ad4 <loadMenuTexts+0x37c>)
 80008a0:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 80008a2:	488d      	ldr	r0, [pc, #564]	; (8000ad8 <loadMenuTexts+0x380>)
 80008a4:	f7ff ff3d 	bl	8000722 <copyText>
 80008a8:	4603      	mov	r3, r0
 80008aa:	4a8c      	ldr	r2, [pc, #560]	; (8000adc <loadMenuTexts+0x384>)
 80008ac:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 80008ae:	488c      	ldr	r0, [pc, #560]	; (8000ae0 <loadMenuTexts+0x388>)
 80008b0:	f7ff ff37 	bl	8000722 <copyText>
 80008b4:	4603      	mov	r3, r0
 80008b6:	4a8b      	ldr	r2, [pc, #556]	; (8000ae4 <loadMenuTexts+0x38c>)
 80008b8:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 80008ba:	488b      	ldr	r0, [pc, #556]	; (8000ae8 <loadMenuTexts+0x390>)
 80008bc:	f7ff ff31 	bl	8000722 <copyText>
 80008c0:	4603      	mov	r3, r0
 80008c2:	4a8a      	ldr	r2, [pc, #552]	; (8000aec <loadMenuTexts+0x394>)
 80008c4:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 80008c6:	488a      	ldr	r0, [pc, #552]	; (8000af0 <loadMenuTexts+0x398>)
 80008c8:	f7ff ff2b 	bl	8000722 <copyText>
 80008cc:	4603      	mov	r3, r0
 80008ce:	4a89      	ldr	r2, [pc, #548]	; (8000af4 <loadMenuTexts+0x39c>)
 80008d0:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 80008d2:	4889      	ldr	r0, [pc, #548]	; (8000af8 <loadMenuTexts+0x3a0>)
 80008d4:	f7ff ff25 	bl	8000722 <copyText>
 80008d8:	4603      	mov	r3, r0
 80008da:	4a88      	ldr	r2, [pc, #544]	; (8000afc <loadMenuTexts+0x3a4>)
 80008dc:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 80008de:	4888      	ldr	r0, [pc, #544]	; (8000b00 <loadMenuTexts+0x3a8>)
 80008e0:	f7ff ff1f 	bl	8000722 <copyText>
 80008e4:	4603      	mov	r3, r0
 80008e6:	4a87      	ldr	r2, [pc, #540]	; (8000b04 <loadMenuTexts+0x3ac>)
 80008e8:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 80008ea:	4887      	ldr	r0, [pc, #540]	; (8000b08 <loadMenuTexts+0x3b0>)
 80008ec:	f7ff ff19 	bl	8000722 <copyText>
 80008f0:	4603      	mov	r3, r0
 80008f2:	4a86      	ldr	r2, [pc, #536]	; (8000b0c <loadMenuTexts+0x3b4>)
 80008f4:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 80008f6:	4886      	ldr	r0, [pc, #536]	; (8000b10 <loadMenuTexts+0x3b8>)
 80008f8:	f7ff ff13 	bl	8000722 <copyText>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4a85      	ldr	r2, [pc, #532]	; (8000b14 <loadMenuTexts+0x3bc>)
 8000900:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8000902:	4885      	ldr	r0, [pc, #532]	; (8000b18 <loadMenuTexts+0x3c0>)
 8000904:	f7ff ff0d 	bl	8000722 <copyText>
 8000908:	4603      	mov	r3, r0
 800090a:	4a84      	ldr	r2, [pc, #528]	; (8000b1c <loadMenuTexts+0x3c4>)
 800090c:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 800090e:	4884      	ldr	r0, [pc, #528]	; (8000b20 <loadMenuTexts+0x3c8>)
 8000910:	f7ff ff07 	bl	8000722 <copyText>
 8000914:	4603      	mov	r3, r0
 8000916:	4a83      	ldr	r2, [pc, #524]	; (8000b24 <loadMenuTexts+0x3cc>)
 8000918:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 800091a:	4883      	ldr	r0, [pc, #524]	; (8000b28 <loadMenuTexts+0x3d0>)
 800091c:	f7ff ff01 	bl	8000722 <copyText>
 8000920:	4603      	mov	r3, r0
 8000922:	4a82      	ldr	r2, [pc, #520]	; (8000b2c <loadMenuTexts+0x3d4>)
 8000924:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8000926:	4882      	ldr	r0, [pc, #520]	; (8000b30 <loadMenuTexts+0x3d8>)
 8000928:	f7ff fefb 	bl	8000722 <copyText>
 800092c:	4603      	mov	r3, r0
 800092e:	4a81      	ldr	r2, [pc, #516]	; (8000b34 <loadMenuTexts+0x3dc>)
 8000930:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8000932:	4881      	ldr	r0, [pc, #516]	; (8000b38 <loadMenuTexts+0x3e0>)
 8000934:	f7ff fef5 	bl	8000722 <copyText>
 8000938:	4603      	mov	r3, r0
 800093a:	4a80      	ldr	r2, [pc, #512]	; (8000b3c <loadMenuTexts+0x3e4>)
 800093c:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 800093e:	4880      	ldr	r0, [pc, #512]	; (8000b40 <loadMenuTexts+0x3e8>)
 8000940:	f7ff feef 	bl	8000722 <copyText>
 8000944:	4603      	mov	r3, r0
 8000946:	4a7f      	ldr	r2, [pc, #508]	; (8000b44 <loadMenuTexts+0x3ec>)
 8000948:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 800094a:	487f      	ldr	r0, [pc, #508]	; (8000b48 <loadMenuTexts+0x3f0>)
 800094c:	f7ff fee9 	bl	8000722 <copyText>
 8000950:	4603      	mov	r3, r0
 8000952:	4a7e      	ldr	r2, [pc, #504]	; (8000b4c <loadMenuTexts+0x3f4>)
 8000954:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8000956:	487e      	ldr	r0, [pc, #504]	; (8000b50 <loadMenuTexts+0x3f8>)
 8000958:	f7ff fee3 	bl	8000722 <copyText>
 800095c:	4603      	mov	r3, r0
 800095e:	4a7d      	ldr	r2, [pc, #500]	; (8000b54 <loadMenuTexts+0x3fc>)
 8000960:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8000962:	487d      	ldr	r0, [pc, #500]	; (8000b58 <loadMenuTexts+0x400>)
 8000964:	f7ff fedd 	bl	8000722 <copyText>
 8000968:	4603      	mov	r3, r0
 800096a:	4a7c      	ldr	r2, [pc, #496]	; (8000b5c <loadMenuTexts+0x404>)
 800096c:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 800096e:	487c      	ldr	r0, [pc, #496]	; (8000b60 <loadMenuTexts+0x408>)
 8000970:	f7ff fed7 	bl	8000722 <copyText>
 8000974:	4603      	mov	r3, r0
 8000976:	4a7b      	ldr	r2, [pc, #492]	; (8000b64 <loadMenuTexts+0x40c>)
 8000978:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 800097a:	487b      	ldr	r0, [pc, #492]	; (8000b68 <loadMenuTexts+0x410>)
 800097c:	f7ff fed1 	bl	8000722 <copyText>
 8000980:	4603      	mov	r3, r0
 8000982:	4a7a      	ldr	r2, [pc, #488]	; (8000b6c <loadMenuTexts+0x414>)
 8000984:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8000986:	487a      	ldr	r0, [pc, #488]	; (8000b70 <loadMenuTexts+0x418>)
 8000988:	f7ff fecb 	bl	8000722 <copyText>
 800098c:	4603      	mov	r3, r0
 800098e:	4a79      	ldr	r2, [pc, #484]	; (8000b74 <loadMenuTexts+0x41c>)
 8000990:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8000992:	4879      	ldr	r0, [pc, #484]	; (8000b78 <loadMenuTexts+0x420>)
 8000994:	f7ff fec5 	bl	8000722 <copyText>
 8000998:	4603      	mov	r3, r0
 800099a:	4a78      	ldr	r2, [pc, #480]	; (8000b7c <loadMenuTexts+0x424>)
 800099c:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 800099e:	4878      	ldr	r0, [pc, #480]	; (8000b80 <loadMenuTexts+0x428>)
 80009a0:	f7ff febf 	bl	8000722 <copyText>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4a77      	ldr	r2, [pc, #476]	; (8000b84 <loadMenuTexts+0x42c>)
 80009a8:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 80009aa:	4877      	ldr	r0, [pc, #476]	; (8000b88 <loadMenuTexts+0x430>)
 80009ac:	f7ff feb9 	bl	8000722 <copyText>
 80009b0:	4603      	mov	r3, r0
 80009b2:	4a76      	ldr	r2, [pc, #472]	; (8000b8c <loadMenuTexts+0x434>)
 80009b4:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 80009b6:	4876      	ldr	r0, [pc, #472]	; (8000b90 <loadMenuTexts+0x438>)
 80009b8:	f7ff feb3 	bl	8000722 <copyText>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a75      	ldr	r2, [pc, #468]	; (8000b94 <loadMenuTexts+0x43c>)
 80009c0:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 80009c2:	4875      	ldr	r0, [pc, #468]	; (8000b98 <loadMenuTexts+0x440>)
 80009c4:	f7ff fead 	bl	8000722 <copyText>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4a74      	ldr	r2, [pc, #464]	; (8000b9c <loadMenuTexts+0x444>)
 80009cc:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 80009ce:	4874      	ldr	r0, [pc, #464]	; (8000ba0 <loadMenuTexts+0x448>)
 80009d0:	f7ff fea7 	bl	8000722 <copyText>
 80009d4:	4603      	mov	r3, r0
 80009d6:	4a73      	ldr	r2, [pc, #460]	; (8000ba4 <loadMenuTexts+0x44c>)
 80009d8:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 80009da:	4873      	ldr	r0, [pc, #460]	; (8000ba8 <loadMenuTexts+0x450>)
 80009dc:	f7ff fea1 	bl	8000722 <copyText>
 80009e0:	4603      	mov	r3, r0
 80009e2:	4a72      	ldr	r2, [pc, #456]	; (8000bac <loadMenuTexts+0x454>)
 80009e4:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 80009e6:	4872      	ldr	r0, [pc, #456]	; (8000bb0 <loadMenuTexts+0x458>)
 80009e8:	f7ff fe9b 	bl	8000722 <copyText>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4a71      	ldr	r2, [pc, #452]	; (8000bb4 <loadMenuTexts+0x45c>)
 80009f0:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 80009f2:	4871      	ldr	r0, [pc, #452]	; (8000bb8 <loadMenuTexts+0x460>)
 80009f4:	f7ff fe95 	bl	8000722 <copyText>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4a70      	ldr	r2, [pc, #448]	; (8000bbc <loadMenuTexts+0x464>)
 80009fc:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 80009fe:	4870      	ldr	r0, [pc, #448]	; (8000bc0 <loadMenuTexts+0x468>)
 8000a00:	f7ff fe8f 	bl	8000722 <copyText>
 8000a04:	4603      	mov	r3, r0
 8000a06:	e0dd      	b.n	8000bc4 <loadMenuTexts+0x46c>
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000afc 	.word	0x20000afc
 8000a10:	20000010 	.word	0x20000010
 8000a14:	20000b00 	.word	0x20000b00
 8000a18:	20000020 	.word	0x20000020
 8000a1c:	20000b58 	.word	0x20000b58
 8000a20:	20000030 	.word	0x20000030
 8000a24:	20000b88 	.word	0x20000b88
 8000a28:	20000040 	.word	0x20000040
 8000a2c:	20000b90 	.word	0x20000b90
 8000a30:	20000050 	.word	0x20000050
 8000a34:	20000c08 	.word	0x20000c08
 8000a38:	20000060 	.word	0x20000060
 8000a3c:	20000c0c 	.word	0x20000c0c
 8000a40:	20000070 	.word	0x20000070
 8000a44:	20000b04 	.word	0x20000b04
 8000a48:	20000080 	.word	0x20000080
 8000a4c:	20000b08 	.word	0x20000b08
 8000a50:	20000090 	.word	0x20000090
 8000a54:	20000b0c 	.word	0x20000b0c
 8000a58:	200000a0 	.word	0x200000a0
 8000a5c:	20000b10 	.word	0x20000b10
 8000a60:	200000b0 	.word	0x200000b0
 8000a64:	20000b14 	.word	0x20000b14
 8000a68:	200000c0 	.word	0x200000c0
 8000a6c:	20000b18 	.word	0x20000b18
 8000a70:	200000d0 	.word	0x200000d0
 8000a74:	20000b1c 	.word	0x20000b1c
 8000a78:	200000e0 	.word	0x200000e0
 8000a7c:	20000b20 	.word	0x20000b20
 8000a80:	200000f0 	.word	0x200000f0
 8000a84:	20000b24 	.word	0x20000b24
 8000a88:	20000100 	.word	0x20000100
 8000a8c:	20000b28 	.word	0x20000b28
 8000a90:	20000110 	.word	0x20000110
 8000a94:	20000b2c 	.word	0x20000b2c
 8000a98:	20000120 	.word	0x20000120
 8000a9c:	20000b30 	.word	0x20000b30
 8000aa0:	20000130 	.word	0x20000130
 8000aa4:	20000b34 	.word	0x20000b34
 8000aa8:	20000140 	.word	0x20000140
 8000aac:	20000b38 	.word	0x20000b38
 8000ab0:	20000150 	.word	0x20000150
 8000ab4:	20000b3c 	.word	0x20000b3c
 8000ab8:	20000160 	.word	0x20000160
 8000abc:	20000b40 	.word	0x20000b40
 8000ac0:	20000170 	.word	0x20000170
 8000ac4:	20000b44 	.word	0x20000b44
 8000ac8:	20000180 	.word	0x20000180
 8000acc:	20000b48 	.word	0x20000b48
 8000ad0:	20000190 	.word	0x20000190
 8000ad4:	20000b4c 	.word	0x20000b4c
 8000ad8:	200001a0 	.word	0x200001a0
 8000adc:	20000b50 	.word	0x20000b50
 8000ae0:	200001b0 	.word	0x200001b0
 8000ae4:	20000b54 	.word	0x20000b54
 8000ae8:	200001c0 	.word	0x200001c0
 8000aec:	20000b5c 	.word	0x20000b5c
 8000af0:	200001d0 	.word	0x200001d0
 8000af4:	20000b60 	.word	0x20000b60
 8000af8:	200001e0 	.word	0x200001e0
 8000afc:	20000b64 	.word	0x20000b64
 8000b00:	200001f0 	.word	0x200001f0
 8000b04:	20000b68 	.word	0x20000b68
 8000b08:	20000200 	.word	0x20000200
 8000b0c:	20000b6c 	.word	0x20000b6c
 8000b10:	20000210 	.word	0x20000210
 8000b14:	20000b70 	.word	0x20000b70
 8000b18:	20000220 	.word	0x20000220
 8000b1c:	20000b74 	.word	0x20000b74
 8000b20:	20000230 	.word	0x20000230
 8000b24:	20000b78 	.word	0x20000b78
 8000b28:	20000240 	.word	0x20000240
 8000b2c:	20000b7c 	.word	0x20000b7c
 8000b30:	20000250 	.word	0x20000250
 8000b34:	20000b80 	.word	0x20000b80
 8000b38:	20000260 	.word	0x20000260
 8000b3c:	20000b84 	.word	0x20000b84
 8000b40:	20000270 	.word	0x20000270
 8000b44:	20000b8c 	.word	0x20000b8c
 8000b48:	20000280 	.word	0x20000280
 8000b4c:	20000b94 	.word	0x20000b94
 8000b50:	20000290 	.word	0x20000290
 8000b54:	20000b98 	.word	0x20000b98
 8000b58:	200002a0 	.word	0x200002a0
 8000b5c:	20000b9c 	.word	0x20000b9c
 8000b60:	200002b0 	.word	0x200002b0
 8000b64:	20000ba0 	.word	0x20000ba0
 8000b68:	200002c0 	.word	0x200002c0
 8000b6c:	20000ba4 	.word	0x20000ba4
 8000b70:	200002d0 	.word	0x200002d0
 8000b74:	20000ba8 	.word	0x20000ba8
 8000b78:	200002e0 	.word	0x200002e0
 8000b7c:	20000bac 	.word	0x20000bac
 8000b80:	200002f0 	.word	0x200002f0
 8000b84:	20000bb0 	.word	0x20000bb0
 8000b88:	20000300 	.word	0x20000300
 8000b8c:	20000bb4 	.word	0x20000bb4
 8000b90:	20000310 	.word	0x20000310
 8000b94:	20000bb8 	.word	0x20000bb8
 8000b98:	20000320 	.word	0x20000320
 8000b9c:	20000bbc 	.word	0x20000bbc
 8000ba0:	20000330 	.word	0x20000330
 8000ba4:	20000bc0 	.word	0x20000bc0
 8000ba8:	20000340 	.word	0x20000340
 8000bac:	20000bc4 	.word	0x20000bc4
 8000bb0:	20000350 	.word	0x20000350
 8000bb4:	20000bc8 	.word	0x20000bc8
 8000bb8:	20000360 	.word	0x20000360
 8000bbc:	20000bcc 	.word	0x20000bcc
 8000bc0:	20000370 	.word	0x20000370
 8000bc4:	4a3d      	ldr	r2, [pc, #244]	; (8000cbc <loadMenuTexts+0x564>)
 8000bc6:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8000bc8:	483d      	ldr	r0, [pc, #244]	; (8000cc0 <loadMenuTexts+0x568>)
 8000bca:	f7ff fdaa 	bl	8000722 <copyText>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4a3c      	ldr	r2, [pc, #240]	; (8000cc4 <loadMenuTexts+0x56c>)
 8000bd2:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8000bd4:	483c      	ldr	r0, [pc, #240]	; (8000cc8 <loadMenuTexts+0x570>)
 8000bd6:	f7ff fda4 	bl	8000722 <copyText>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4a3b      	ldr	r2, [pc, #236]	; (8000ccc <loadMenuTexts+0x574>)
 8000bde:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8000be0:	483b      	ldr	r0, [pc, #236]	; (8000cd0 <loadMenuTexts+0x578>)
 8000be2:	f7ff fd9e 	bl	8000722 <copyText>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4a3a      	ldr	r2, [pc, #232]	; (8000cd4 <loadMenuTexts+0x57c>)
 8000bea:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8000bec:	483a      	ldr	r0, [pc, #232]	; (8000cd8 <loadMenuTexts+0x580>)
 8000bee:	f7ff fd98 	bl	8000722 <copyText>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4a39      	ldr	r2, [pc, #228]	; (8000cdc <loadMenuTexts+0x584>)
 8000bf6:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8000bf8:	4839      	ldr	r0, [pc, #228]	; (8000ce0 <loadMenuTexts+0x588>)
 8000bfa:	f7ff fd92 	bl	8000722 <copyText>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a38      	ldr	r2, [pc, #224]	; (8000ce4 <loadMenuTexts+0x58c>)
 8000c02:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8000c04:	4838      	ldr	r0, [pc, #224]	; (8000ce8 <loadMenuTexts+0x590>)
 8000c06:	f7ff fd8c 	bl	8000722 <copyText>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a37      	ldr	r2, [pc, #220]	; (8000cec <loadMenuTexts+0x594>)
 8000c0e:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8000c10:	4837      	ldr	r0, [pc, #220]	; (8000cf0 <loadMenuTexts+0x598>)
 8000c12:	f7ff fd86 	bl	8000722 <copyText>
 8000c16:	4603      	mov	r3, r0
 8000c18:	4a36      	ldr	r2, [pc, #216]	; (8000cf4 <loadMenuTexts+0x59c>)
 8000c1a:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8000c1c:	4836      	ldr	r0, [pc, #216]	; (8000cf8 <loadMenuTexts+0x5a0>)
 8000c1e:	f7ff fd80 	bl	8000722 <copyText>
 8000c22:	4603      	mov	r3, r0
 8000c24:	4a35      	ldr	r2, [pc, #212]	; (8000cfc <loadMenuTexts+0x5a4>)
 8000c26:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8000c28:	4835      	ldr	r0, [pc, #212]	; (8000d00 <loadMenuTexts+0x5a8>)
 8000c2a:	f7ff fd7a 	bl	8000722 <copyText>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	4a34      	ldr	r2, [pc, #208]	; (8000d04 <loadMenuTexts+0x5ac>)
 8000c32:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8000c34:	4834      	ldr	r0, [pc, #208]	; (8000d08 <loadMenuTexts+0x5b0>)
 8000c36:	f7ff fd74 	bl	8000722 <copyText>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	4a33      	ldr	r2, [pc, #204]	; (8000d0c <loadMenuTexts+0x5b4>)
 8000c3e:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8000c40:	4833      	ldr	r0, [pc, #204]	; (8000d10 <loadMenuTexts+0x5b8>)
 8000c42:	f7ff fd6e 	bl	8000722 <copyText>
 8000c46:	4603      	mov	r3, r0
 8000c48:	4a32      	ldr	r2, [pc, #200]	; (8000d14 <loadMenuTexts+0x5bc>)
 8000c4a:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8000c4c:	4832      	ldr	r0, [pc, #200]	; (8000d18 <loadMenuTexts+0x5c0>)
 8000c4e:	f7ff fd68 	bl	8000722 <copyText>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4a31      	ldr	r2, [pc, #196]	; (8000d1c <loadMenuTexts+0x5c4>)
 8000c56:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8000c58:	4831      	ldr	r0, [pc, #196]	; (8000d20 <loadMenuTexts+0x5c8>)
 8000c5a:	f7ff fd62 	bl	8000722 <copyText>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	4a30      	ldr	r2, [pc, #192]	; (8000d24 <loadMenuTexts+0x5cc>)
 8000c62:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8000c64:	4830      	ldr	r0, [pc, #192]	; (8000d28 <loadMenuTexts+0x5d0>)
 8000c66:	f7ff fd5c 	bl	8000722 <copyText>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	4a2f      	ldr	r2, [pc, #188]	; (8000d2c <loadMenuTexts+0x5d4>)
 8000c6e:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 8000c70:	482f      	ldr	r0, [pc, #188]	; (8000d30 <loadMenuTexts+0x5d8>)
 8000c72:	f7ff fd56 	bl	8000722 <copyText>
 8000c76:	4603      	mov	r3, r0
 8000c78:	4a2e      	ldr	r2, [pc, #184]	; (8000d34 <loadMenuTexts+0x5dc>)
 8000c7a:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8000c7c:	482e      	ldr	r0, [pc, #184]	; (8000d38 <loadMenuTexts+0x5e0>)
 8000c7e:	f7ff fd50 	bl	8000722 <copyText>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4a2d      	ldr	r2, [pc, #180]	; (8000d3c <loadMenuTexts+0x5e4>)
 8000c86:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8000c88:	482d      	ldr	r0, [pc, #180]	; (8000d40 <loadMenuTexts+0x5e8>)
 8000c8a:	f7ff fd4a 	bl	8000722 <copyText>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a2c      	ldr	r2, [pc, #176]	; (8000d44 <loadMenuTexts+0x5ec>)
 8000c92:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8000c94:	482c      	ldr	r0, [pc, #176]	; (8000d48 <loadMenuTexts+0x5f0>)
 8000c96:	f7ff fd44 	bl	8000722 <copyText>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	4a2b      	ldr	r2, [pc, #172]	; (8000d4c <loadMenuTexts+0x5f4>)
 8000c9e:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 8000ca0:	482b      	ldr	r0, [pc, #172]	; (8000d50 <loadMenuTexts+0x5f8>)
 8000ca2:	f7ff fd3e 	bl	8000722 <copyText>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	4a2a      	ldr	r2, [pc, #168]	; (8000d54 <loadMenuTexts+0x5fc>)
 8000caa:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 8000cac:	482a      	ldr	r0, [pc, #168]	; (8000d58 <loadMenuTexts+0x600>)
 8000cae:	f7ff fd38 	bl	8000722 <copyText>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	4a29      	ldr	r2, [pc, #164]	; (8000d5c <loadMenuTexts+0x604>)
 8000cb6:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8000cb8:	e2d3      	b.n	8001262 <loadMenuTexts+0xb0a>
 8000cba:	bf00      	nop
 8000cbc:	20000bd0 	.word	0x20000bd0
 8000cc0:	20000380 	.word	0x20000380
 8000cc4:	20000bd4 	.word	0x20000bd4
 8000cc8:	20000390 	.word	0x20000390
 8000ccc:	20000bd8 	.word	0x20000bd8
 8000cd0:	200003a0 	.word	0x200003a0
 8000cd4:	20000bdc 	.word	0x20000bdc
 8000cd8:	200003b0 	.word	0x200003b0
 8000cdc:	20000be0 	.word	0x20000be0
 8000ce0:	200003c0 	.word	0x200003c0
 8000ce4:	20000be4 	.word	0x20000be4
 8000ce8:	200003d0 	.word	0x200003d0
 8000cec:	20000be8 	.word	0x20000be8
 8000cf0:	200003e0 	.word	0x200003e0
 8000cf4:	20000bec 	.word	0x20000bec
 8000cf8:	200003f0 	.word	0x200003f0
 8000cfc:	20000bf0 	.word	0x20000bf0
 8000d00:	20000400 	.word	0x20000400
 8000d04:	20000bf4 	.word	0x20000bf4
 8000d08:	20000410 	.word	0x20000410
 8000d0c:	20000bf8 	.word	0x20000bf8
 8000d10:	20000420 	.word	0x20000420
 8000d14:	20000bfc 	.word	0x20000bfc
 8000d18:	20000430 	.word	0x20000430
 8000d1c:	20000c00 	.word	0x20000c00
 8000d20:	20000440 	.word	0x20000440
 8000d24:	20000c04 	.word	0x20000c04
 8000d28:	20000450 	.word	0x20000450
 8000d2c:	20000c10 	.word	0x20000c10
 8000d30:	20000460 	.word	0x20000460
 8000d34:	20000c14 	.word	0x20000c14
 8000d38:	20000470 	.word	0x20000470
 8000d3c:	20000c18 	.word	0x20000c18
 8000d40:	20000480 	.word	0x20000480
 8000d44:	20000c1c 	.word	0x20000c1c
 8000d48:	20000490 	.word	0x20000490
 8000d4c:	20000c20 	.word	0x20000c20
 8000d50:	200004a0 	.word	0x200004a0
 8000d54:	20000c24 	.word	0x20000c24
 8000d58:	200004b0 	.word	0x200004b0
 8000d5c:	20000c28 	.word	0x20000c28
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 8000d60:	48a9      	ldr	r0, [pc, #676]	; (8001008 <loadMenuTexts+0x8b0>)
 8000d62:	f7ff fcde 	bl	8000722 <copyText>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4aa8      	ldr	r2, [pc, #672]	; (800100c <loadMenuTexts+0x8b4>)
 8000d6a:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 8000d6c:	48a8      	ldr	r0, [pc, #672]	; (8001010 <loadMenuTexts+0x8b8>)
 8000d6e:	f7ff fcd8 	bl	8000722 <copyText>
 8000d72:	4603      	mov	r3, r0
 8000d74:	4aa7      	ldr	r2, [pc, #668]	; (8001014 <loadMenuTexts+0x8bc>)
 8000d76:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8000d78:	48a7      	ldr	r0, [pc, #668]	; (8001018 <loadMenuTexts+0x8c0>)
 8000d7a:	f7ff fcd2 	bl	8000722 <copyText>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	4aa6      	ldr	r2, [pc, #664]	; (800101c <loadMenuTexts+0x8c4>)
 8000d82:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8000d84:	48a6      	ldr	r0, [pc, #664]	; (8001020 <loadMenuTexts+0x8c8>)
 8000d86:	f7ff fccc 	bl	8000722 <copyText>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4aa5      	ldr	r2, [pc, #660]	; (8001024 <loadMenuTexts+0x8cc>)
 8000d8e:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 8000d90:	48a5      	ldr	r0, [pc, #660]	; (8001028 <loadMenuTexts+0x8d0>)
 8000d92:	f7ff fcc6 	bl	8000722 <copyText>
 8000d96:	4603      	mov	r3, r0
 8000d98:	4aa4      	ldr	r2, [pc, #656]	; (800102c <loadMenuTexts+0x8d4>)
 8000d9a:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 8000d9c:	48a4      	ldr	r0, [pc, #656]	; (8001030 <loadMenuTexts+0x8d8>)
 8000d9e:	f7ff fcc0 	bl	8000722 <copyText>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4aa3      	ldr	r2, [pc, #652]	; (8001034 <loadMenuTexts+0x8dc>)
 8000da6:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 8000da8:	48a3      	ldr	r0, [pc, #652]	; (8001038 <loadMenuTexts+0x8e0>)
 8000daa:	f7ff fcba 	bl	8000722 <copyText>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4aa2      	ldr	r2, [pc, #648]	; (800103c <loadMenuTexts+0x8e4>)
 8000db2:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8000db4:	48a2      	ldr	r0, [pc, #648]	; (8001040 <loadMenuTexts+0x8e8>)
 8000db6:	f7ff fcb4 	bl	8000722 <copyText>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	4aa1      	ldr	r2, [pc, #644]	; (8001044 <loadMenuTexts+0x8ec>)
 8000dbe:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8000dc0:	48a1      	ldr	r0, [pc, #644]	; (8001048 <loadMenuTexts+0x8f0>)
 8000dc2:	f7ff fcae 	bl	8000722 <copyText>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	4aa0      	ldr	r2, [pc, #640]	; (800104c <loadMenuTexts+0x8f4>)
 8000dca:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 8000dcc:	48a0      	ldr	r0, [pc, #640]	; (8001050 <loadMenuTexts+0x8f8>)
 8000dce:	f7ff fca8 	bl	8000722 <copyText>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a9f      	ldr	r2, [pc, #636]	; (8001054 <loadMenuTexts+0x8fc>)
 8000dd6:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 8000dd8:	489f      	ldr	r0, [pc, #636]	; (8001058 <loadMenuTexts+0x900>)
 8000dda:	f7ff fca2 	bl	8000722 <copyText>
 8000dde:	4603      	mov	r3, r0
 8000de0:	4a9e      	ldr	r2, [pc, #632]	; (800105c <loadMenuTexts+0x904>)
 8000de2:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8000de4:	489e      	ldr	r0, [pc, #632]	; (8001060 <loadMenuTexts+0x908>)
 8000de6:	f7ff fc9c 	bl	8000722 <copyText>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a9d      	ldr	r2, [pc, #628]	; (8001064 <loadMenuTexts+0x90c>)
 8000dee:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8000df0:	489d      	ldr	r0, [pc, #628]	; (8001068 <loadMenuTexts+0x910>)
 8000df2:	f7ff fc96 	bl	8000722 <copyText>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4a9c      	ldr	r2, [pc, #624]	; (800106c <loadMenuTexts+0x914>)
 8000dfa:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8000dfc:	489c      	ldr	r0, [pc, #624]	; (8001070 <loadMenuTexts+0x918>)
 8000dfe:	f7ff fc90 	bl	8000722 <copyText>
 8000e02:	4603      	mov	r3, r0
 8000e04:	4a9b      	ldr	r2, [pc, #620]	; (8001074 <loadMenuTexts+0x91c>)
 8000e06:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8000e08:	489b      	ldr	r0, [pc, #620]	; (8001078 <loadMenuTexts+0x920>)
 8000e0a:	f7ff fc8a 	bl	8000722 <copyText>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	4a9a      	ldr	r2, [pc, #616]	; (800107c <loadMenuTexts+0x924>)
 8000e12:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8000e14:	489a      	ldr	r0, [pc, #616]	; (8001080 <loadMenuTexts+0x928>)
 8000e16:	f7ff fc84 	bl	8000722 <copyText>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a99      	ldr	r2, [pc, #612]	; (8001084 <loadMenuTexts+0x92c>)
 8000e1e:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8000e20:	4899      	ldr	r0, [pc, #612]	; (8001088 <loadMenuTexts+0x930>)
 8000e22:	f7ff fc7e 	bl	8000722 <copyText>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4a98      	ldr	r2, [pc, #608]	; (800108c <loadMenuTexts+0x934>)
 8000e2a:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8000e2c:	4898      	ldr	r0, [pc, #608]	; (8001090 <loadMenuTexts+0x938>)
 8000e2e:	f7ff fc78 	bl	8000722 <copyText>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4a97      	ldr	r2, [pc, #604]	; (8001094 <loadMenuTexts+0x93c>)
 8000e36:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8000e38:	4897      	ldr	r0, [pc, #604]	; (8001098 <loadMenuTexts+0x940>)
 8000e3a:	f7ff fc72 	bl	8000722 <copyText>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	4a96      	ldr	r2, [pc, #600]	; (800109c <loadMenuTexts+0x944>)
 8000e42:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8000e44:	4896      	ldr	r0, [pc, #600]	; (80010a0 <loadMenuTexts+0x948>)
 8000e46:	f7ff fc6c 	bl	8000722 <copyText>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	4a95      	ldr	r2, [pc, #596]	; (80010a4 <loadMenuTexts+0x94c>)
 8000e4e:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8000e50:	4895      	ldr	r0, [pc, #596]	; (80010a8 <loadMenuTexts+0x950>)
 8000e52:	f7ff fc66 	bl	8000722 <copyText>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4a94      	ldr	r2, [pc, #592]	; (80010ac <loadMenuTexts+0x954>)
 8000e5a:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8000e5c:	4894      	ldr	r0, [pc, #592]	; (80010b0 <loadMenuTexts+0x958>)
 8000e5e:	f7ff fc60 	bl	8000722 <copyText>
 8000e62:	4603      	mov	r3, r0
 8000e64:	4a93      	ldr	r2, [pc, #588]	; (80010b4 <loadMenuTexts+0x95c>)
 8000e66:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 8000e68:	4893      	ldr	r0, [pc, #588]	; (80010b8 <loadMenuTexts+0x960>)
 8000e6a:	f7ff fc5a 	bl	8000722 <copyText>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	4a92      	ldr	r2, [pc, #584]	; (80010bc <loadMenuTexts+0x964>)
 8000e72:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8000e74:	4892      	ldr	r0, [pc, #584]	; (80010c0 <loadMenuTexts+0x968>)
 8000e76:	f7ff fc54 	bl	8000722 <copyText>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4a91      	ldr	r2, [pc, #580]	; (80010c4 <loadMenuTexts+0x96c>)
 8000e7e:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8000e80:	4891      	ldr	r0, [pc, #580]	; (80010c8 <loadMenuTexts+0x970>)
 8000e82:	f7ff fc4e 	bl	8000722 <copyText>
 8000e86:	4603      	mov	r3, r0
 8000e88:	4a90      	ldr	r2, [pc, #576]	; (80010cc <loadMenuTexts+0x974>)
 8000e8a:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8000e8c:	4890      	ldr	r0, [pc, #576]	; (80010d0 <loadMenuTexts+0x978>)
 8000e8e:	f7ff fc48 	bl	8000722 <copyText>
 8000e92:	4603      	mov	r3, r0
 8000e94:	4a8f      	ldr	r2, [pc, #572]	; (80010d4 <loadMenuTexts+0x97c>)
 8000e96:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 8000e98:	488f      	ldr	r0, [pc, #572]	; (80010d8 <loadMenuTexts+0x980>)
 8000e9a:	f7ff fc42 	bl	8000722 <copyText>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	4a8e      	ldr	r2, [pc, #568]	; (80010dc <loadMenuTexts+0x984>)
 8000ea2:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 8000ea4:	488e      	ldr	r0, [pc, #568]	; (80010e0 <loadMenuTexts+0x988>)
 8000ea6:	f7ff fc3c 	bl	8000722 <copyText>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4a8d      	ldr	r2, [pc, #564]	; (80010e4 <loadMenuTexts+0x98c>)
 8000eae:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8000eb0:	488d      	ldr	r0, [pc, #564]	; (80010e8 <loadMenuTexts+0x990>)
 8000eb2:	f7ff fc36 	bl	8000722 <copyText>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4a8c      	ldr	r2, [pc, #560]	; (80010ec <loadMenuTexts+0x994>)
 8000eba:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 8000ebc:	488c      	ldr	r0, [pc, #560]	; (80010f0 <loadMenuTexts+0x998>)
 8000ebe:	f7ff fc30 	bl	8000722 <copyText>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	4a8b      	ldr	r2, [pc, #556]	; (80010f4 <loadMenuTexts+0x99c>)
 8000ec6:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8000ec8:	488b      	ldr	r0, [pc, #556]	; (80010f8 <loadMenuTexts+0x9a0>)
 8000eca:	f7ff fc2a 	bl	8000722 <copyText>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4a8a      	ldr	r2, [pc, #552]	; (80010fc <loadMenuTexts+0x9a4>)
 8000ed2:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8000ed4:	488a      	ldr	r0, [pc, #552]	; (8001100 <loadMenuTexts+0x9a8>)
 8000ed6:	f7ff fc24 	bl	8000722 <copyText>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4a89      	ldr	r2, [pc, #548]	; (8001104 <loadMenuTexts+0x9ac>)
 8000ede:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8000ee0:	4889      	ldr	r0, [pc, #548]	; (8001108 <loadMenuTexts+0x9b0>)
 8000ee2:	f7ff fc1e 	bl	8000722 <copyText>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4a88      	ldr	r2, [pc, #544]	; (800110c <loadMenuTexts+0x9b4>)
 8000eea:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 8000eec:	4888      	ldr	r0, [pc, #544]	; (8001110 <loadMenuTexts+0x9b8>)
 8000eee:	f7ff fc18 	bl	8000722 <copyText>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	4a87      	ldr	r2, [pc, #540]	; (8001114 <loadMenuTexts+0x9bc>)
 8000ef6:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 8000ef8:	4887      	ldr	r0, [pc, #540]	; (8001118 <loadMenuTexts+0x9c0>)
 8000efa:	f7ff fc12 	bl	8000722 <copyText>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4a86      	ldr	r2, [pc, #536]	; (800111c <loadMenuTexts+0x9c4>)
 8000f02:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8000f04:	4886      	ldr	r0, [pc, #536]	; (8001120 <loadMenuTexts+0x9c8>)
 8000f06:	f7ff fc0c 	bl	8000722 <copyText>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4a85      	ldr	r2, [pc, #532]	; (8001124 <loadMenuTexts+0x9cc>)
 8000f0e:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8000f10:	4885      	ldr	r0, [pc, #532]	; (8001128 <loadMenuTexts+0x9d0>)
 8000f12:	f7ff fc06 	bl	8000722 <copyText>
 8000f16:	4603      	mov	r3, r0
 8000f18:	4a84      	ldr	r2, [pc, #528]	; (800112c <loadMenuTexts+0x9d4>)
 8000f1a:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8000f1c:	4884      	ldr	r0, [pc, #528]	; (8001130 <loadMenuTexts+0x9d8>)
 8000f1e:	f7ff fc00 	bl	8000722 <copyText>
 8000f22:	4603      	mov	r3, r0
 8000f24:	4a83      	ldr	r2, [pc, #524]	; (8001134 <loadMenuTexts+0x9dc>)
 8000f26:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 8000f28:	4883      	ldr	r0, [pc, #524]	; (8001138 <loadMenuTexts+0x9e0>)
 8000f2a:	f7ff fbfa 	bl	8000722 <copyText>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4a82      	ldr	r2, [pc, #520]	; (800113c <loadMenuTexts+0x9e4>)
 8000f32:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8000f34:	4882      	ldr	r0, [pc, #520]	; (8001140 <loadMenuTexts+0x9e8>)
 8000f36:	f7ff fbf4 	bl	8000722 <copyText>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a81      	ldr	r2, [pc, #516]	; (8001144 <loadMenuTexts+0x9ec>)
 8000f3e:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 8000f40:	4881      	ldr	r0, [pc, #516]	; (8001148 <loadMenuTexts+0x9f0>)
 8000f42:	f7ff fbee 	bl	8000722 <copyText>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4a80      	ldr	r2, [pc, #512]	; (800114c <loadMenuTexts+0x9f4>)
 8000f4a:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 8000f4c:	4880      	ldr	r0, [pc, #512]	; (8001150 <loadMenuTexts+0x9f8>)
 8000f4e:	f7ff fbe8 	bl	8000722 <copyText>
 8000f52:	4603      	mov	r3, r0
 8000f54:	4a7f      	ldr	r2, [pc, #508]	; (8001154 <loadMenuTexts+0x9fc>)
 8000f56:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 8000f58:	487f      	ldr	r0, [pc, #508]	; (8001158 <loadMenuTexts+0xa00>)
 8000f5a:	f7ff fbe2 	bl	8000722 <copyText>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	4a7e      	ldr	r2, [pc, #504]	; (800115c <loadMenuTexts+0xa04>)
 8000f62:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 8000f64:	487e      	ldr	r0, [pc, #504]	; (8001160 <loadMenuTexts+0xa08>)
 8000f66:	f7ff fbdc 	bl	8000722 <copyText>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a7d      	ldr	r2, [pc, #500]	; (8001164 <loadMenuTexts+0xa0c>)
 8000f6e:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 8000f70:	487d      	ldr	r0, [pc, #500]	; (8001168 <loadMenuTexts+0xa10>)
 8000f72:	f7ff fbd6 	bl	8000722 <copyText>
 8000f76:	4603      	mov	r3, r0
 8000f78:	4a7c      	ldr	r2, [pc, #496]	; (800116c <loadMenuTexts+0xa14>)
 8000f7a:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 8000f7c:	487c      	ldr	r0, [pc, #496]	; (8001170 <loadMenuTexts+0xa18>)
 8000f7e:	f7ff fbd0 	bl	8000722 <copyText>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a7b      	ldr	r2, [pc, #492]	; (8001174 <loadMenuTexts+0xa1c>)
 8000f86:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 8000f88:	487b      	ldr	r0, [pc, #492]	; (8001178 <loadMenuTexts+0xa20>)
 8000f8a:	f7ff fbca 	bl	8000722 <copyText>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4a7a      	ldr	r2, [pc, #488]	; (800117c <loadMenuTexts+0xa24>)
 8000f92:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 8000f94:	487a      	ldr	r0, [pc, #488]	; (8001180 <loadMenuTexts+0xa28>)
 8000f96:	f7ff fbc4 	bl	8000722 <copyText>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a79      	ldr	r2, [pc, #484]	; (8001184 <loadMenuTexts+0xa2c>)
 8000f9e:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 8000fa0:	4879      	ldr	r0, [pc, #484]	; (8001188 <loadMenuTexts+0xa30>)
 8000fa2:	f7ff fbbe 	bl	8000722 <copyText>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4a78      	ldr	r2, [pc, #480]	; (800118c <loadMenuTexts+0xa34>)
 8000faa:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 8000fac:	4878      	ldr	r0, [pc, #480]	; (8001190 <loadMenuTexts+0xa38>)
 8000fae:	f7ff fbb8 	bl	8000722 <copyText>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4a77      	ldr	r2, [pc, #476]	; (8001194 <loadMenuTexts+0xa3c>)
 8000fb6:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 8000fb8:	4877      	ldr	r0, [pc, #476]	; (8001198 <loadMenuTexts+0xa40>)
 8000fba:	f7ff fbb2 	bl	8000722 <copyText>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4a76      	ldr	r2, [pc, #472]	; (800119c <loadMenuTexts+0xa44>)
 8000fc2:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 8000fc4:	4876      	ldr	r0, [pc, #472]	; (80011a0 <loadMenuTexts+0xa48>)
 8000fc6:	f7ff fbac 	bl	8000722 <copyText>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a75      	ldr	r2, [pc, #468]	; (80011a4 <loadMenuTexts+0xa4c>)
 8000fce:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8000fd0:	4875      	ldr	r0, [pc, #468]	; (80011a8 <loadMenuTexts+0xa50>)
 8000fd2:	f7ff fba6 	bl	8000722 <copyText>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4a74      	ldr	r2, [pc, #464]	; (80011ac <loadMenuTexts+0xa54>)
 8000fda:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 8000fdc:	4874      	ldr	r0, [pc, #464]	; (80011b0 <loadMenuTexts+0xa58>)
 8000fde:	f7ff fba0 	bl	8000722 <copyText>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a73      	ldr	r2, [pc, #460]	; (80011b4 <loadMenuTexts+0xa5c>)
 8000fe6:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 8000fe8:	4873      	ldr	r0, [pc, #460]	; (80011b8 <loadMenuTexts+0xa60>)
 8000fea:	f7ff fb9a 	bl	8000722 <copyText>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4a72      	ldr	r2, [pc, #456]	; (80011bc <loadMenuTexts+0xa64>)
 8000ff2:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 8000ff4:	4872      	ldr	r0, [pc, #456]	; (80011c0 <loadMenuTexts+0xa68>)
 8000ff6:	f7ff fb94 	bl	8000722 <copyText>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a71      	ldr	r2, [pc, #452]	; (80011c4 <loadMenuTexts+0xa6c>)
 8000ffe:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8001000:	4871      	ldr	r0, [pc, #452]	; (80011c8 <loadMenuTexts+0xa70>)
 8001002:	f7ff fb8e 	bl	8000722 <copyText>
 8001006:	e0e1      	b.n	80011cc <loadMenuTexts+0xa74>
 8001008:	200004c0 	.word	0x200004c0
 800100c:	20000b04 	.word	0x20000b04
 8001010:	200004d0 	.word	0x200004d0
 8001014:	20000b08 	.word	0x20000b08
 8001018:	200004e0 	.word	0x200004e0
 800101c:	20000b0c 	.word	0x20000b0c
 8001020:	200004f0 	.word	0x200004f0
 8001024:	20000b10 	.word	0x20000b10
 8001028:	20000500 	.word	0x20000500
 800102c:	20000b14 	.word	0x20000b14
 8001030:	20000510 	.word	0x20000510
 8001034:	20000b18 	.word	0x20000b18
 8001038:	20000520 	.word	0x20000520
 800103c:	20000b1c 	.word	0x20000b1c
 8001040:	20000530 	.word	0x20000530
 8001044:	20000b20 	.word	0x20000b20
 8001048:	20000540 	.word	0x20000540
 800104c:	20000b24 	.word	0x20000b24
 8001050:	20000550 	.word	0x20000550
 8001054:	20000b28 	.word	0x20000b28
 8001058:	20000560 	.word	0x20000560
 800105c:	20000b2c 	.word	0x20000b2c
 8001060:	20000570 	.word	0x20000570
 8001064:	20000b30 	.word	0x20000b30
 8001068:	20000580 	.word	0x20000580
 800106c:	20000b34 	.word	0x20000b34
 8001070:	20000590 	.word	0x20000590
 8001074:	20000b38 	.word	0x20000b38
 8001078:	200005a0 	.word	0x200005a0
 800107c:	20000b3c 	.word	0x20000b3c
 8001080:	200005b0 	.word	0x200005b0
 8001084:	20000b40 	.word	0x20000b40
 8001088:	200005c0 	.word	0x200005c0
 800108c:	20000b44 	.word	0x20000b44
 8001090:	200005d0 	.word	0x200005d0
 8001094:	20000b48 	.word	0x20000b48
 8001098:	200005e0 	.word	0x200005e0
 800109c:	20000b4c 	.word	0x20000b4c
 80010a0:	200005f0 	.word	0x200005f0
 80010a4:	20000b50 	.word	0x20000b50
 80010a8:	20000600 	.word	0x20000600
 80010ac:	20000b54 	.word	0x20000b54
 80010b0:	20000610 	.word	0x20000610
 80010b4:	20000b5c 	.word	0x20000b5c
 80010b8:	20000620 	.word	0x20000620
 80010bc:	20000b60 	.word	0x20000b60
 80010c0:	20000630 	.word	0x20000630
 80010c4:	20000b64 	.word	0x20000b64
 80010c8:	20000640 	.word	0x20000640
 80010cc:	20000b68 	.word	0x20000b68
 80010d0:	20000650 	.word	0x20000650
 80010d4:	20000b6c 	.word	0x20000b6c
 80010d8:	20000660 	.word	0x20000660
 80010dc:	20000b70 	.word	0x20000b70
 80010e0:	20000670 	.word	0x20000670
 80010e4:	20000b74 	.word	0x20000b74
 80010e8:	20000680 	.word	0x20000680
 80010ec:	20000b78 	.word	0x20000b78
 80010f0:	20000690 	.word	0x20000690
 80010f4:	20000b7c 	.word	0x20000b7c
 80010f8:	200006a0 	.word	0x200006a0
 80010fc:	20000b80 	.word	0x20000b80
 8001100:	200006b0 	.word	0x200006b0
 8001104:	20000b84 	.word	0x20000b84
 8001108:	200006c0 	.word	0x200006c0
 800110c:	20000b8c 	.word	0x20000b8c
 8001110:	200006d0 	.word	0x200006d0
 8001114:	20000b94 	.word	0x20000b94
 8001118:	200006e0 	.word	0x200006e0
 800111c:	20000b98 	.word	0x20000b98
 8001120:	200006f0 	.word	0x200006f0
 8001124:	20000b9c 	.word	0x20000b9c
 8001128:	20000700 	.word	0x20000700
 800112c:	20000ba0 	.word	0x20000ba0
 8001130:	20000710 	.word	0x20000710
 8001134:	20000ba4 	.word	0x20000ba4
 8001138:	20000720 	.word	0x20000720
 800113c:	20000ba8 	.word	0x20000ba8
 8001140:	20000730 	.word	0x20000730
 8001144:	20000bac 	.word	0x20000bac
 8001148:	20000740 	.word	0x20000740
 800114c:	20000bb0 	.word	0x20000bb0
 8001150:	20000750 	.word	0x20000750
 8001154:	20000bb4 	.word	0x20000bb4
 8001158:	20000760 	.word	0x20000760
 800115c:	20000bb8 	.word	0x20000bb8
 8001160:	20000770 	.word	0x20000770
 8001164:	20000bbc 	.word	0x20000bbc
 8001168:	20000780 	.word	0x20000780
 800116c:	20000bc0 	.word	0x20000bc0
 8001170:	20000790 	.word	0x20000790
 8001174:	20000bc4 	.word	0x20000bc4
 8001178:	200007a0 	.word	0x200007a0
 800117c:	20000bc8 	.word	0x20000bc8
 8001180:	200007b0 	.word	0x200007b0
 8001184:	20000bcc 	.word	0x20000bcc
 8001188:	200007c0 	.word	0x200007c0
 800118c:	20000bd0 	.word	0x20000bd0
 8001190:	200007d0 	.word	0x200007d0
 8001194:	20000bd4 	.word	0x20000bd4
 8001198:	200007e0 	.word	0x200007e0
 800119c:	20000bd8 	.word	0x20000bd8
 80011a0:	200007f0 	.word	0x200007f0
 80011a4:	20000bdc 	.word	0x20000bdc
 80011a8:	20000800 	.word	0x20000800
 80011ac:	20000be0 	.word	0x20000be0
 80011b0:	20000810 	.word	0x20000810
 80011b4:	20000be4 	.word	0x20000be4
 80011b8:	20000820 	.word	0x20000820
 80011bc:	20000be8 	.word	0x20000be8
 80011c0:	20000830 	.word	0x20000830
 80011c4:	20000bec 	.word	0x20000bec
 80011c8:	20000840 	.word	0x20000840
 80011cc:	4603      	mov	r3, r0
 80011ce:	4a27      	ldr	r2, [pc, #156]	; (800126c <loadMenuTexts+0xb14>)
 80011d0:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 80011d2:	4827      	ldr	r0, [pc, #156]	; (8001270 <loadMenuTexts+0xb18>)
 80011d4:	f7ff faa5 	bl	8000722 <copyText>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a26      	ldr	r2, [pc, #152]	; (8001274 <loadMenuTexts+0xb1c>)
 80011dc:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 80011de:	4826      	ldr	r0, [pc, #152]	; (8001278 <loadMenuTexts+0xb20>)
 80011e0:	f7ff fa9f 	bl	8000722 <copyText>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4a25      	ldr	r2, [pc, #148]	; (800127c <loadMenuTexts+0xb24>)
 80011e8:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 80011ea:	4825      	ldr	r0, [pc, #148]	; (8001280 <loadMenuTexts+0xb28>)
 80011ec:	f7ff fa99 	bl	8000722 <copyText>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a24      	ldr	r2, [pc, #144]	; (8001284 <loadMenuTexts+0xb2c>)
 80011f4:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 80011f6:	4824      	ldr	r0, [pc, #144]	; (8001288 <loadMenuTexts+0xb30>)
 80011f8:	f7ff fa93 	bl	8000722 <copyText>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4a23      	ldr	r2, [pc, #140]	; (800128c <loadMenuTexts+0xb34>)
 8001200:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 8001202:	4823      	ldr	r0, [pc, #140]	; (8001290 <loadMenuTexts+0xb38>)
 8001204:	f7ff fa8d 	bl	8000722 <copyText>
 8001208:	4603      	mov	r3, r0
 800120a:	4a22      	ldr	r2, [pc, #136]	; (8001294 <loadMenuTexts+0xb3c>)
 800120c:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 800120e:	4822      	ldr	r0, [pc, #136]	; (8001298 <loadMenuTexts+0xb40>)
 8001210:	f7ff fa87 	bl	8000722 <copyText>
 8001214:	4603      	mov	r3, r0
 8001216:	4a21      	ldr	r2, [pc, #132]	; (800129c <loadMenuTexts+0xb44>)
 8001218:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 800121a:	4821      	ldr	r0, [pc, #132]	; (80012a0 <loadMenuTexts+0xb48>)
 800121c:	f7ff fa81 	bl	8000722 <copyText>
 8001220:	4603      	mov	r3, r0
 8001222:	4a20      	ldr	r2, [pc, #128]	; (80012a4 <loadMenuTexts+0xb4c>)
 8001224:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 8001226:	4820      	ldr	r0, [pc, #128]	; (80012a8 <loadMenuTexts+0xb50>)
 8001228:	f7ff fa7b 	bl	8000722 <copyText>
 800122c:	4603      	mov	r3, r0
 800122e:	4a1f      	ldr	r2, [pc, #124]	; (80012ac <loadMenuTexts+0xb54>)
 8001230:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 8001232:	481f      	ldr	r0, [pc, #124]	; (80012b0 <loadMenuTexts+0xb58>)
 8001234:	f7ff fa75 	bl	8000722 <copyText>
 8001238:	4603      	mov	r3, r0
 800123a:	4a1e      	ldr	r2, [pc, #120]	; (80012b4 <loadMenuTexts+0xb5c>)
 800123c:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 800123e:	481e      	ldr	r0, [pc, #120]	; (80012b8 <loadMenuTexts+0xb60>)
 8001240:	f7ff fa6f 	bl	8000722 <copyText>
 8001244:	4603      	mov	r3, r0
 8001246:	4a1d      	ldr	r2, [pc, #116]	; (80012bc <loadMenuTexts+0xb64>)
 8001248:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 800124a:	481d      	ldr	r0, [pc, #116]	; (80012c0 <loadMenuTexts+0xb68>)
 800124c:	f7ff fa69 	bl	8000722 <copyText>
 8001250:	4603      	mov	r3, r0
 8001252:	4a1c      	ldr	r2, [pc, #112]	; (80012c4 <loadMenuTexts+0xb6c>)
 8001254:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 8001256:	481c      	ldr	r0, [pc, #112]	; (80012c8 <loadMenuTexts+0xb70>)
 8001258:	f7ff fa63 	bl	8000722 <copyText>
 800125c:	4603      	mov	r3, r0
 800125e:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <loadMenuTexts+0xb74>)
 8001260:	6013      	str	r3, [r2, #0]
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000bf0 	.word	0x20000bf0
 8001270:	20000850 	.word	0x20000850
 8001274:	20000bf4 	.word	0x20000bf4
 8001278:	20000860 	.word	0x20000860
 800127c:	20000bf8 	.word	0x20000bf8
 8001280:	20000870 	.word	0x20000870
 8001284:	20000bfc 	.word	0x20000bfc
 8001288:	20000880 	.word	0x20000880
 800128c:	20000c00 	.word	0x20000c00
 8001290:	20000890 	.word	0x20000890
 8001294:	20000c04 	.word	0x20000c04
 8001298:	200008a0 	.word	0x200008a0
 800129c:	20000c10 	.word	0x20000c10
 80012a0:	200008b0 	.word	0x200008b0
 80012a4:	20000c14 	.word	0x20000c14
 80012a8:	200008c0 	.word	0x200008c0
 80012ac:	20000c18 	.word	0x20000c18
 80012b0:	200008d0 	.word	0x200008d0
 80012b4:	20000c1c 	.word	0x20000c1c
 80012b8:	200008e0 	.word	0x200008e0
 80012bc:	20000c20 	.word	0x20000c20
 80012c0:	200008f0 	.word	0x200008f0
 80012c4:	20000c24 	.word	0x20000c24
 80012c8:	20000900 	.word	0x20000900
 80012cc:	20000c28 	.word	0x20000c28

080012d0 <convertAndSendData>:
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}

void convertAndSendData() {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 80012d6:	4a14      	ldr	r2, [pc, #80]	; (8001328 <convertAndSendData+0x58>)
 80012d8:	2101      	movs	r1, #1
 80012da:	2001      	movs	r0, #1
 80012dc:	f7ff f9c4 	bl	8000668 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 80012e0:	4a12      	ldr	r2, [pc, #72]	; (800132c <convertAndSendData+0x5c>)
 80012e2:	2101      	movs	r1, #1
 80012e4:	2002      	movs	r0, #2
 80012e6:	f7ff f9bf 	bl	8000668 <lcd_print>
	for(int i=0; i<2; i++) {
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	e00a      	b.n	8001306 <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 80012f0:	f000 fb4c 	bl	800198c <mergeData>
 80012f4:	4603      	mov	r3, r0
 80012f6:	461a      	mov	r2, r3
 80012f8:	490d      	ldr	r1, [pc, #52]	; (8001330 <convertAndSendData+0x60>)
 80012fa:	480e      	ldr	r0, [pc, #56]	; (8001334 <convertAndSendData+0x64>)
 80012fc:	f7fe ff9a 	bl	8000234 <sendMachineData>
	for(int i=0; i<2; i++) {
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3301      	adds	r3, #1
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b01      	cmp	r3, #1
 800130a:	ddf1      	ble.n	80012f0 <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 800130c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001310:	f001 fba8 	bl	8002a64 <HAL_Delay>
	lcd_clear();
 8001314:	f7ff f9d4 	bl	80006c0 <lcd_clear>
	HAL_Delay(500);
 8001318:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800131c:	f001 fba2 	bl	8002a64 <HAL_Delay>
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	080078e0 	.word	0x080078e0
 800132c:	080078ec 	.word	0x080078ec
 8001330:	20000c2c 	.word	0x20000c2c
 8001334:	20000d20 	.word	0x20000d20

08001338 <eepromKontrol>:

void eepromKontrol(int type) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af04      	add	r7, sp, #16
 800133e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8001340:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001344:	9302      	str	r3, [sp, #8]
 8001346:	233f      	movs	r3, #63	; 0x3f
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	4b9c      	ldr	r3, [pc, #624]	; (80015bc <eepromKontrol+0x284>)
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	233f      	movs	r3, #63	; 0x3f
 8001350:	2200      	movs	r2, #0
 8001352:	21a0      	movs	r1, #160	; 0xa0
 8001354:	489a      	ldr	r0, [pc, #616]	; (80015c0 <eepromKontrol+0x288>)
 8001356:	f002 fbf7 	bl	8003b48 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 800135a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800135e:	f001 fb81 	bl	8002a64 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8001362:	4b96      	ldr	r3, [pc, #600]	; (80015bc <eepromKontrol+0x284>)
 8001364:	78da      	ldrb	r2, [r3, #3]
 8001366:	4b97      	ldr	r3, [pc, #604]	; (80015c4 <eepromKontrol+0x28c>)
 8001368:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800136a:	4b94      	ldr	r3, [pc, #592]	; (80015bc <eepromKontrol+0x284>)
 800136c:	785a      	ldrb	r2, [r3, #1]
 800136e:	4b96      	ldr	r3, [pc, #600]	; (80015c8 <eepromKontrol+0x290>)
 8001370:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8001372:	4b92      	ldr	r3, [pc, #584]	; (80015bc <eepromKontrol+0x284>)
 8001374:	789a      	ldrb	r2, [r3, #2]
 8001376:	4b95      	ldr	r3, [pc, #596]	; (80015cc <eepromKontrol+0x294>)
 8001378:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800137a:	4b90      	ldr	r3, [pc, #576]	; (80015bc <eepromKontrol+0x284>)
 800137c:	791a      	ldrb	r2, [r3, #4]
 800137e:	4b94      	ldr	r3, [pc, #592]	; (80015d0 <eepromKontrol+0x298>)
 8001380:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8001382:	4b8e      	ldr	r3, [pc, #568]	; (80015bc <eepromKontrol+0x284>)
 8001384:	795a      	ldrb	r2, [r3, #5]
 8001386:	4b93      	ldr	r3, [pc, #588]	; (80015d4 <eepromKontrol+0x29c>)
 8001388:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800138a:	4b8c      	ldr	r3, [pc, #560]	; (80015bc <eepromKontrol+0x284>)
 800138c:	799a      	ldrb	r2, [r3, #6]
 800138e:	4b92      	ldr	r3, [pc, #584]	; (80015d8 <eepromKontrol+0x2a0>)
 8001390:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8001392:	4b8a      	ldr	r3, [pc, #552]	; (80015bc <eepromKontrol+0x284>)
 8001394:	79da      	ldrb	r2, [r3, #7]
 8001396:	4b91      	ldr	r3, [pc, #580]	; (80015dc <eepromKontrol+0x2a4>)
 8001398:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 800139a:	4b88      	ldr	r3, [pc, #544]	; (80015bc <eepromKontrol+0x284>)
 800139c:	7a1a      	ldrb	r2, [r3, #8]
 800139e:	4b90      	ldr	r3, [pc, #576]	; (80015e0 <eepromKontrol+0x2a8>)
 80013a0:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 80013a2:	4b86      	ldr	r3, [pc, #536]	; (80015bc <eepromKontrol+0x284>)
 80013a4:	7a5a      	ldrb	r2, [r3, #9]
 80013a6:	4b8f      	ldr	r3, [pc, #572]	; (80015e4 <eepromKontrol+0x2ac>)
 80013a8:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80013aa:	4b84      	ldr	r3, [pc, #528]	; (80015bc <eepromKontrol+0x284>)
 80013ac:	7a9a      	ldrb	r2, [r3, #10]
 80013ae:	4b8e      	ldr	r3, [pc, #568]	; (80015e8 <eepromKontrol+0x2b0>)
 80013b0:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80013b2:	4b82      	ldr	r3, [pc, #520]	; (80015bc <eepromKontrol+0x284>)
 80013b4:	7ada      	ldrb	r2, [r3, #11]
 80013b6:	4b8d      	ldr	r3, [pc, #564]	; (80015ec <eepromKontrol+0x2b4>)
 80013b8:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80013ba:	4b80      	ldr	r3, [pc, #512]	; (80015bc <eepromKontrol+0x284>)
 80013bc:	7b1a      	ldrb	r2, [r3, #12]
 80013be:	4b8c      	ldr	r3, [pc, #560]	; (80015f0 <eepromKontrol+0x2b8>)
 80013c0:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80013c2:	4b7e      	ldr	r3, [pc, #504]	; (80015bc <eepromKontrol+0x284>)
 80013c4:	7b5a      	ldrb	r2, [r3, #13]
 80013c6:	4b8b      	ldr	r3, [pc, #556]	; (80015f4 <eepromKontrol+0x2bc>)
 80013c8:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80013ca:	4b7c      	ldr	r3, [pc, #496]	; (80015bc <eepromKontrol+0x284>)
 80013cc:	7b9a      	ldrb	r2, [r3, #14]
 80013ce:	4b8a      	ldr	r3, [pc, #552]	; (80015f8 <eepromKontrol+0x2c0>)
 80013d0:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80013d2:	4b7a      	ldr	r3, [pc, #488]	; (80015bc <eepromKontrol+0x284>)
 80013d4:	7bda      	ldrb	r2, [r3, #15]
 80013d6:	4b89      	ldr	r3, [pc, #548]	; (80015fc <eepromKontrol+0x2c4>)
 80013d8:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80013da:	4b78      	ldr	r3, [pc, #480]	; (80015bc <eepromKontrol+0x284>)
 80013dc:	7c1a      	ldrb	r2, [r3, #16]
 80013de:	4b88      	ldr	r3, [pc, #544]	; (8001600 <eepromKontrol+0x2c8>)
 80013e0:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80013e2:	4b76      	ldr	r3, [pc, #472]	; (80015bc <eepromKontrol+0x284>)
 80013e4:	7c5a      	ldrb	r2, [r3, #17]
 80013e6:	4b87      	ldr	r3, [pc, #540]	; (8001604 <eepromKontrol+0x2cc>)
 80013e8:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80013ea:	4b74      	ldr	r3, [pc, #464]	; (80015bc <eepromKontrol+0x284>)
 80013ec:	7c9a      	ldrb	r2, [r3, #18]
 80013ee:	4b86      	ldr	r3, [pc, #536]	; (8001608 <eepromKontrol+0x2d0>)
 80013f0:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80013f2:	4b72      	ldr	r3, [pc, #456]	; (80015bc <eepromKontrol+0x284>)
 80013f4:	7cda      	ldrb	r2, [r3, #19]
 80013f6:	4b85      	ldr	r3, [pc, #532]	; (800160c <eepromKontrol+0x2d4>)
 80013f8:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80013fa:	4b70      	ldr	r3, [pc, #448]	; (80015bc <eepromKontrol+0x284>)
 80013fc:	7d1a      	ldrb	r2, [r3, #20]
 80013fe:	4b84      	ldr	r3, [pc, #528]	; (8001610 <eepromKontrol+0x2d8>)
 8001400:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8001402:	4b6e      	ldr	r3, [pc, #440]	; (80015bc <eepromKontrol+0x284>)
 8001404:	7d5a      	ldrb	r2, [r3, #21]
 8001406:	4b83      	ldr	r3, [pc, #524]	; (8001614 <eepromKontrol+0x2dc>)
 8001408:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 800140a:	4b6c      	ldr	r3, [pc, #432]	; (80015bc <eepromKontrol+0x284>)
 800140c:	7d9a      	ldrb	r2, [r3, #22]
 800140e:	4b82      	ldr	r3, [pc, #520]	; (8001618 <eepromKontrol+0x2e0>)
 8001410:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8001412:	4b6a      	ldr	r3, [pc, #424]	; (80015bc <eepromKontrol+0x284>)
 8001414:	7dda      	ldrb	r2, [r3, #23]
 8001416:	4b81      	ldr	r3, [pc, #516]	; (800161c <eepromKontrol+0x2e4>)
 8001418:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 800141a:	4b68      	ldr	r3, [pc, #416]	; (80015bc <eepromKontrol+0x284>)
 800141c:	7e1a      	ldrb	r2, [r3, #24]
 800141e:	4b80      	ldr	r3, [pc, #512]	; (8001620 <eepromKontrol+0x2e8>)
 8001420:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8001422:	4b66      	ldr	r3, [pc, #408]	; (80015bc <eepromKontrol+0x284>)
 8001424:	7e5a      	ldrb	r2, [r3, #25]
 8001426:	4b7f      	ldr	r3, [pc, #508]	; (8001624 <eepromKontrol+0x2ec>)
 8001428:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 800142a:	4b64      	ldr	r3, [pc, #400]	; (80015bc <eepromKontrol+0x284>)
 800142c:	7e9a      	ldrb	r2, [r3, #26]
 800142e:	4b7e      	ldr	r3, [pc, #504]	; (8001628 <eepromKontrol+0x2f0>)
 8001430:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8001432:	4b62      	ldr	r3, [pc, #392]	; (80015bc <eepromKontrol+0x284>)
 8001434:	7eda      	ldrb	r2, [r3, #27]
 8001436:	4b7d      	ldr	r3, [pc, #500]	; (800162c <eepromKontrol+0x2f4>)
 8001438:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 800143a:	4b60      	ldr	r3, [pc, #384]	; (80015bc <eepromKontrol+0x284>)
 800143c:	7f1a      	ldrb	r2, [r3, #28]
 800143e:	4b7c      	ldr	r3, [pc, #496]	; (8001630 <eepromKontrol+0x2f8>)
 8001440:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8001442:	4b5e      	ldr	r3, [pc, #376]	; (80015bc <eepromKontrol+0x284>)
 8001444:	7f5a      	ldrb	r2, [r3, #29]
 8001446:	4b7b      	ldr	r3, [pc, #492]	; (8001634 <eepromKontrol+0x2fc>)
 8001448:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 800144a:	4b5c      	ldr	r3, [pc, #368]	; (80015bc <eepromKontrol+0x284>)
 800144c:	7f9a      	ldrb	r2, [r3, #30]
 800144e:	4b7a      	ldr	r3, [pc, #488]	; (8001638 <eepromKontrol+0x300>)
 8001450:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8001452:	4b5a      	ldr	r3, [pc, #360]	; (80015bc <eepromKontrol+0x284>)
 8001454:	7fda      	ldrb	r2, [r3, #31]
 8001456:	4b79      	ldr	r3, [pc, #484]	; (800163c <eepromKontrol+0x304>)
 8001458:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 800145a:	4b58      	ldr	r3, [pc, #352]	; (80015bc <eepromKontrol+0x284>)
 800145c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001460:	4b77      	ldr	r3, [pc, #476]	; (8001640 <eepromKontrol+0x308>)
 8001462:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8001464:	4b55      	ldr	r3, [pc, #340]	; (80015bc <eepromKontrol+0x284>)
 8001466:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800146a:	4b76      	ldr	r3, [pc, #472]	; (8001644 <eepromKontrol+0x30c>)
 800146c:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[37];
 800146e:	4b53      	ldr	r3, [pc, #332]	; (80015bc <eepromKontrol+0x284>)
 8001470:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8001474:	4b74      	ldr	r3, [pc, #464]	; (8001648 <eepromKontrol+0x310>)
 8001476:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8001478:	4b50      	ldr	r3, [pc, #320]	; (80015bc <eepromKontrol+0x284>)
 800147a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800147e:	4b73      	ldr	r3, [pc, #460]	; (800164c <eepromKontrol+0x314>)
 8001480:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8001482:	4b4e      	ldr	r3, [pc, #312]	; (80015bc <eepromKontrol+0x284>)
 8001484:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8001488:	4b71      	ldr	r3, [pc, #452]	; (8001650 <eepromKontrol+0x318>)
 800148a:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 800148c:	4b4b      	ldr	r3, [pc, #300]	; (80015bc <eepromKontrol+0x284>)
 800148e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001492:	4b70      	ldr	r3, [pc, #448]	; (8001654 <eepromKontrol+0x31c>)
 8001494:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8001496:	4b49      	ldr	r3, [pc, #292]	; (80015bc <eepromKontrol+0x284>)
 8001498:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800149c:	4b6e      	ldr	r3, [pc, #440]	; (8001658 <eepromKontrol+0x320>)
 800149e:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 80014a0:	4b46      	ldr	r3, [pc, #280]	; (80015bc <eepromKontrol+0x284>)
 80014a2:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80014a6:	4b6d      	ldr	r3, [pc, #436]	; (800165c <eepromKontrol+0x324>)
 80014a8:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80014aa:	4b44      	ldr	r3, [pc, #272]	; (80015bc <eepromKontrol+0x284>)
 80014ac:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80014b0:	4b6b      	ldr	r3, [pc, #428]	; (8001660 <eepromKontrol+0x328>)
 80014b2:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80014b4:	4b41      	ldr	r3, [pc, #260]	; (80015bc <eepromKontrol+0x284>)
 80014b6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80014ba:	4b6a      	ldr	r3, [pc, #424]	; (8001664 <eepromKontrol+0x32c>)
 80014bc:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80014be:	4b3f      	ldr	r3, [pc, #252]	; (80015bc <eepromKontrol+0x284>)
 80014c0:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80014c4:	4b68      	ldr	r3, [pc, #416]	; (8001668 <eepromKontrol+0x330>)
 80014c6:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80014c8:	4b3c      	ldr	r3, [pc, #240]	; (80015bc <eepromKontrol+0x284>)
 80014ca:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80014ce:	4b67      	ldr	r3, [pc, #412]	; (800166c <eepromKontrol+0x334>)
 80014d0:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80014d2:	4b3a      	ldr	r3, [pc, #232]	; (80015bc <eepromKontrol+0x284>)
 80014d4:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80014d8:	4b65      	ldr	r3, [pc, #404]	; (8001670 <eepromKontrol+0x338>)
 80014da:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80014dc:	4b37      	ldr	r3, [pc, #220]	; (80015bc <eepromKontrol+0x284>)
 80014de:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80014e2:	4b64      	ldr	r3, [pc, #400]	; (8001674 <eepromKontrol+0x33c>)
 80014e4:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80014e6:	4b35      	ldr	r3, [pc, #212]	; (80015bc <eepromKontrol+0x284>)
 80014e8:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80014ec:	4b62      	ldr	r3, [pc, #392]	; (8001678 <eepromKontrol+0x340>)
 80014ee:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80014f0:	4b32      	ldr	r3, [pc, #200]	; (80015bc <eepromKontrol+0x284>)
 80014f2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80014f6:	4b61      	ldr	r3, [pc, #388]	; (800167c <eepromKontrol+0x344>)
 80014f8:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 80014fa:	4b52      	ldr	r3, [pc, #328]	; (8001644 <eepromKontrol+0x30c>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f92a 	bl	8000758 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8001504:	4b4e      	ldr	r3, [pc, #312]	; (8001640 <eepromKontrol+0x308>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b09      	cmp	r3, #9
 800150a:	d902      	bls.n	8001512 <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 800150c:	4b4c      	ldr	r3, [pc, #304]	; (8001640 <eepromKontrol+0x308>)
 800150e:	2200      	movs	r2, #0
 8001510:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8001512:	4b4a      	ldr	r3, [pc, #296]	; (800163c <eepromKontrol+0x304>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b09      	cmp	r3, #9
 8001518:	d902      	bls.n	8001520 <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 800151a:	4b48      	ldr	r3, [pc, #288]	; (800163c <eepromKontrol+0x304>)
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8001520:	4b45      	ldr	r3, [pc, #276]	; (8001638 <eepromKontrol+0x300>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b09      	cmp	r3, #9
 8001526:	d902      	bls.n	800152e <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8001528:	4b43      	ldr	r3, [pc, #268]	; (8001638 <eepromKontrol+0x300>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 800152e:	4b41      	ldr	r3, [pc, #260]	; (8001634 <eepromKontrol+0x2fc>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	2b09      	cmp	r3, #9
 8001534:	d902      	bls.n	800153c <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8001536:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <eepromKontrol+0x2fc>)
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 800153c:	4b3c      	ldr	r3, [pc, #240]	; (8001630 <eepromKontrol+0x2f8>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b09      	cmp	r3, #9
 8001542:	d902      	bls.n	800154a <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8001544:	4b3a      	ldr	r3, [pc, #232]	; (8001630 <eepromKontrol+0x2f8>)
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 800154a:	4b1f      	ldr	r3, [pc, #124]	; (80015c8 <eepromKontrol+0x290>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d902      	bls.n	8001558 <eepromKontrol+0x220>
	    calismaSekli=0;
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <eepromKontrol+0x290>)
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8001558:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <eepromKontrol+0x294>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d902      	bls.n	8001566 <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8001560:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <eepromKontrol+0x294>)
 8001562:	2201      	movs	r2, #1
 8001564:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8001566:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <eepromKontrol+0x298>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d902      	bls.n	8001574 <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <eepromKontrol+0x298>)
 8001570:	2200      	movs	r2, #0
 8001572:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8001574:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <eepromKontrol+0x29c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d902      	bls.n	8001582 <eepromKontrol+0x24a>
	    altLimit=1;
 800157c:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <eepromKontrol+0x29c>)
 800157e:	2201      	movs	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <eepromKontrol+0x2a0>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b01      	cmp	r3, #1
 8001588:	d902      	bls.n	8001590 <eepromKontrol+0x258>
	    basincSalteri=1;
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <eepromKontrol+0x2a0>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <eepromKontrol+0x2a4>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b03      	cmp	r3, #3
 8001596:	d902      	bls.n	800159e <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8001598:	4b10      	ldr	r3, [pc, #64]	; (80015dc <eepromKontrol+0x2a4>)
 800159a:	2203      	movs	r2, #3
 800159c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 800159e:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <eepromKontrol+0x31c>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d902      	bls.n	80015ac <eepromKontrol+0x274>
	    kapiAcTipi=0;
 80015a6:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <eepromKontrol+0x31c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <eepromKontrol+0x2a8>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d965      	bls.n	8001680 <eepromKontrol+0x348>
	    kapi1Tip=1;
 80015b4:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <eepromKontrol+0x2a8>)
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	e061      	b.n	8001680 <eepromKontrol+0x348>
 80015bc:	20000a88 	.word	0x20000a88
 80015c0:	20000c84 	.word	0x20000c84
 80015c4:	20000ac7 	.word	0x20000ac7
 80015c8:	20000ad4 	.word	0x20000ad4
 80015cc:	20000ad5 	.word	0x20000ad5
 80015d0:	20000ad6 	.word	0x20000ad6
 80015d4:	20000ad7 	.word	0x20000ad7
 80015d8:	20000ad8 	.word	0x20000ad8
 80015dc:	20000ad9 	.word	0x20000ad9
 80015e0:	20000ada 	.word	0x20000ada
 80015e4:	20000aea 	.word	0x20000aea
 80015e8:	20000adb 	.word	0x20000adb
 80015ec:	20000aeb 	.word	0x20000aeb
 80015f0:	20000adc 	.word	0x20000adc
 80015f4:	20000aec 	.word	0x20000aec
 80015f8:	20000adf 	.word	0x20000adf
 80015fc:	20000ae0 	.word	0x20000ae0
 8001600:	20000ae1 	.word	0x20000ae1
 8001604:	20000ae2 	.word	0x20000ae2
 8001608:	20000ae3 	.word	0x20000ae3
 800160c:	20000ae4 	.word	0x20000ae4
 8001610:	20000ae5 	.word	0x20000ae5
 8001614:	20000ae6 	.word	0x20000ae6
 8001618:	20000ae7 	.word	0x20000ae7
 800161c:	20000ae8 	.word	0x20000ae8
 8001620:	20000ae9 	.word	0x20000ae9
 8001624:	20000aed 	.word	0x20000aed
 8001628:	20000aee 	.word	0x20000aee
 800162c:	20000ad0 	.word	0x20000ad0
 8001630:	20000ad1 	.word	0x20000ad1
 8001634:	20000ad2 	.word	0x20000ad2
 8001638:	20000911 	.word	0x20000911
 800163c:	20000912 	.word	0x20000912
 8001640:	20000ad3 	.word	0x20000ad3
 8001644:	20000af1 	.word	0x20000af1
 8001648:	20000aef 	.word	0x20000aef
 800164c:	20000ade 	.word	0x20000ade
 8001650:	20000af0 	.word	0x20000af0
 8001654:	20000add 	.word	0x20000add
 8001658:	20000af2 	.word	0x20000af2
 800165c:	20000af3 	.word	0x20000af3
 8001660:	20000af4 	.word	0x20000af4
 8001664:	20000af5 	.word	0x20000af5
 8001668:	20000af6 	.word	0x20000af6
 800166c:	20000af7 	.word	0x20000af7
 8001670:	20000af8 	.word	0x20000af8
 8001674:	20000af9 	.word	0x20000af9
 8001678:	20000afa 	.word	0x20000afa
 800167c:	20000afb 	.word	0x20000afb
	}

	if(kapi1AcSure>5) {
 8001680:	4b55      	ldr	r3, [pc, #340]	; (80017d8 <eepromKontrol+0x4a0>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b05      	cmp	r3, #5
 8001686:	d902      	bls.n	800168e <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8001688:	4b53      	ldr	r3, [pc, #332]	; (80017d8 <eepromKontrol+0x4a0>)
 800168a:	2205      	movs	r2, #5
 800168c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800168e:	4b53      	ldr	r3, [pc, #332]	; (80017dc <eepromKontrol+0x4a4>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d902      	bls.n	800169c <eepromKontrol+0x364>
	    kapi2Tip=1;
 8001696:	4b51      	ldr	r3, [pc, #324]	; (80017dc <eepromKontrol+0x4a4>)
 8001698:	2201      	movs	r2, #1
 800169a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800169c:	4b50      	ldr	r3, [pc, #320]	; (80017e0 <eepromKontrol+0x4a8>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b05      	cmp	r3, #5
 80016a2:	d902      	bls.n	80016aa <eepromKontrol+0x372>
	    kapi2AcSure=5;
 80016a4:	4b4e      	ldr	r3, [pc, #312]	; (80017e0 <eepromKontrol+0x4a8>)
 80016a6:	2205      	movs	r2, #5
 80016a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80016aa:	4b4e      	ldr	r3, [pc, #312]	; (80017e4 <eepromKontrol+0x4ac>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d902      	bls.n	80016b8 <eepromKontrol+0x380>
	    kapitablaTip=1;
 80016b2:	4b4c      	ldr	r3, [pc, #304]	; (80017e4 <eepromKontrol+0x4ac>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80016b8:	4b4b      	ldr	r3, [pc, #300]	; (80017e8 <eepromKontrol+0x4b0>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d902      	bls.n	80016c6 <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 80016c0:	4b49      	ldr	r3, [pc, #292]	; (80017e8 <eepromKontrol+0x4b0>)
 80016c2:	2202      	movs	r2, #2
 80016c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80016c6:	4b49      	ldr	r3, [pc, #292]	; (80017ec <eepromKontrol+0x4b4>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b05      	cmp	r3, #5
 80016cc:	d902      	bls.n	80016d4 <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 80016ce:	4b47      	ldr	r3, [pc, #284]	; (80017ec <eepromKontrol+0x4b4>)
 80016d0:	2205      	movs	r2, #5
 80016d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80016d4:	4b46      	ldr	r3, [pc, #280]	; (80017f0 <eepromKontrol+0x4b8>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d902      	bls.n	80016e2 <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 80016dc:	4b44      	ldr	r3, [pc, #272]	; (80017f0 <eepromKontrol+0x4b8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80016e2:	4b44      	ldr	r3, [pc, #272]	; (80017f4 <eepromKontrol+0x4bc>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d902      	bls.n	80016f0 <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 80016ea:	4b42      	ldr	r3, [pc, #264]	; (80017f4 <eepromKontrol+0x4bc>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80016f0:	4b41      	ldr	r3, [pc, #260]	; (80017f8 <eepromKontrol+0x4c0>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d902      	bls.n	80016fe <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 80016f8:	4b3f      	ldr	r3, [pc, #252]	; (80017f8 <eepromKontrol+0x4c0>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80016fe:	4b3f      	ldr	r3, [pc, #252]	; (80017fc <eepromKontrol+0x4c4>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d902      	bls.n	800170c <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 8001706:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <eepromKontrol+0x4c4>)
 8001708:	2201      	movs	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800170c:	4b3c      	ldr	r3, [pc, #240]	; (8001800 <eepromKontrol+0x4c8>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d902      	bls.n	800171a <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 8001714:	4b3a      	ldr	r3, [pc, #232]	; (8001800 <eepromKontrol+0x4c8>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800171a:	4b3a      	ldr	r3, [pc, #232]	; (8001804 <eepromKontrol+0x4cc>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d902      	bls.n	8001728 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 8001722:	4b38      	ldr	r3, [pc, #224]	; (8001804 <eepromKontrol+0x4cc>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8001728:	4b37      	ldr	r3, [pc, #220]	; (8001808 <eepromKontrol+0x4d0>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b05      	cmp	r3, #5
 800172e:	d902      	bls.n	8001736 <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8001730:	4b35      	ldr	r3, [pc, #212]	; (8001808 <eepromKontrol+0x4d0>)
 8001732:	2200      	movs	r2, #0
 8001734:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8001736:	4b35      	ldr	r3, [pc, #212]	; (800180c <eepromKontrol+0x4d4>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b05      	cmp	r3, #5
 800173c:	d902      	bls.n	8001744 <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 800173e:	4b33      	ldr	r3, [pc, #204]	; (800180c <eepromKontrol+0x4d4>)
 8001740:	2200      	movs	r2, #0
 8001742:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8001744:	4b32      	ldr	r3, [pc, #200]	; (8001810 <eepromKontrol+0x4d8>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b05      	cmp	r3, #5
 800174a:	d902      	bls.n	8001752 <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 800174c:	4b30      	ldr	r3, [pc, #192]	; (8001810 <eepromKontrol+0x4d8>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8001752:	4b30      	ldr	r3, [pc, #192]	; (8001814 <eepromKontrol+0x4dc>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b05      	cmp	r3, #5
 8001758:	d902      	bls.n	8001760 <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 800175a:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <eepromKontrol+0x4dc>)
 800175c:	2200      	movs	r2, #0
 800175e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8001760:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <eepromKontrol+0x4e0>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2bb4      	cmp	r3, #180	; 0xb4
 8001766:	d902      	bls.n	800176e <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8001768:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <eepromKontrol+0x4e0>)
 800176a:	223c      	movs	r2, #60	; 0x3c
 800176c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800176e:	4b2b      	ldr	r3, [pc, #172]	; (800181c <eepromKontrol+0x4e4>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d902      	bls.n	800177c <eepromKontrol+0x444>
	    buzzer=0;
 8001776:	4b29      	ldr	r3, [pc, #164]	; (800181c <eepromKontrol+0x4e4>)
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800177c:	4b28      	ldr	r3, [pc, #160]	; (8001820 <eepromKontrol+0x4e8>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d902      	bls.n	800178a <eepromKontrol+0x452>
	    demoMode=0;
 8001784:	4b26      	ldr	r3, [pc, #152]	; (8001820 <eepromKontrol+0x4e8>)
 8001786:	2200      	movs	r2, #0
 8001788:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800178a:	4b26      	ldr	r3, [pc, #152]	; (8001824 <eepromKontrol+0x4ec>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d902      	bls.n	8001798 <eepromKontrol+0x460>
	    calismaSayModu=0;
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <eepromKontrol+0x4ec>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8001798:	4b23      	ldr	r3, [pc, #140]	; (8001828 <eepromKontrol+0x4f0>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d902      	bls.n	80017a6 <eepromKontrol+0x46e>
	    dilSecim=0;
 80017a0:	4b21      	ldr	r3, [pc, #132]	; (8001828 <eepromKontrol+0x4f0>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80017a6:	4b21      	ldr	r3, [pc, #132]	; (800182c <eepromKontrol+0x4f4>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d902      	bls.n	80017b4 <eepromKontrol+0x47c>
		iotMode=0;
 80017ae:	4b1f      	ldr	r3, [pc, #124]	; (800182c <eepromKontrol+0x4f4>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 80017b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017b8:	f001 f954 	bl	8002a64 <HAL_Delay>

	if(iotMode == 1 && type == 1) {
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <eepromKontrol+0x4f4>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d104      	bne.n	80017ce <eepromKontrol+0x496>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <eepromKontrol+0x496>
		convertAndSendData();
 80017ca:	f7ff fd81 	bl	80012d0 <convertAndSendData>
	}
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000aea 	.word	0x20000aea
 80017dc:	20000adb 	.word	0x20000adb
 80017e0:	20000aeb 	.word	0x20000aeb
 80017e4:	20000adc 	.word	0x20000adc
 80017e8:	20000ade 	.word	0x20000ade
 80017ec:	20000aec 	.word	0x20000aec
 80017f0:	20000adf 	.word	0x20000adf
 80017f4:	20000ae0 	.word	0x20000ae0
 80017f8:	20000ae1 	.word	0x20000ae1
 80017fc:	20000ae2 	.word	0x20000ae2
 8001800:	20000ae3 	.word	0x20000ae3
 8001804:	20000ae4 	.word	0x20000ae4
 8001808:	20000ae5 	.word	0x20000ae5
 800180c:	20000ae6 	.word	0x20000ae6
 8001810:	20000ae7 	.word	0x20000ae7
 8001814:	20000ae8 	.word	0x20000ae8
 8001818:	20000ae9 	.word	0x20000ae9
 800181c:	20000aed 	.word	0x20000aed
 8001820:	20000aee 	.word	0x20000aee
 8001824:	20000af0 	.word	0x20000af0
 8001828:	20000af1 	.word	0x20000af1
 800182c:	20000aef 	.word	0x20000aef

08001830 <i2cTest>:
    	butonKontrol = 1;
    }

}

void i2cTest() {
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8001836:	463b      	mov	r3, r7
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8001842:	4b50      	ldr	r3, [pc, #320]	; (8001984 <i2cTest+0x154>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b4e      	ldr	r3, [pc, #312]	; (8001984 <i2cTest+0x154>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0201 	bic.w	r2, r2, #1
 8001850:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8001852:	484c      	ldr	r0, [pc, #304]	; (8001984 <i2cTest+0x154>)
 8001854:	f002 f84a 	bl	80038ec <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001858:	23c0      	movs	r3, #192	; 0xc0
 800185a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 800185c:	2311      	movs	r3, #17
 800185e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8001860:	2301      	movs	r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8001864:	2303      	movs	r3, #3
 8001866:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8001868:	463b      	mov	r3, r7
 800186a:	4619      	mov	r1, r3
 800186c:	4846      	ldr	r0, [pc, #280]	; (8001988 <i2cTest+0x158>)
 800186e:	f001 fc69 	bl	8003144 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001872:	2201      	movs	r2, #1
 8001874:	2140      	movs	r1, #64	; 0x40
 8001876:	4844      	ldr	r0, [pc, #272]	; (8001988 <i2cTest+0x158>)
 8001878:	f001 fedb 	bl	8003632 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800187c:	2201      	movs	r2, #1
 800187e:	2180      	movs	r1, #128	; 0x80
 8001880:	4841      	ldr	r0, [pc, #260]	; (8001988 <i2cTest+0x158>)
 8001882:	f001 fed6 	bl	8003632 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8001886:	200a      	movs	r0, #10
 8001888:	f001 f8ec 	bl	8002a64 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800188c:	bf00      	nop
 800188e:	2140      	movs	r1, #64	; 0x40
 8001890:	483d      	ldr	r0, [pc, #244]	; (8001988 <i2cTest+0x158>)
 8001892:	f001 feb7 	bl	8003604 <HAL_GPIO_ReadPin>
 8001896:	4603      	mov	r3, r0
 8001898:	2b01      	cmp	r3, #1
 800189a:	d006      	beq.n	80018aa <i2cTest+0x7a>
 800189c:	2180      	movs	r1, #128	; 0x80
 800189e:	483a      	ldr	r0, [pc, #232]	; (8001988 <i2cTest+0x158>)
 80018a0:	f001 feb0 	bl	8003604 <HAL_GPIO_ReadPin>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d1f1      	bne.n	800188e <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	4836      	ldr	r0, [pc, #216]	; (8001988 <i2cTest+0x158>)
 80018b0:	f001 febf 	bl	8003632 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 80018b4:	200a      	movs	r0, #10
 80018b6:	f001 f8d5 	bl	8002a64 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 80018ba:	bf00      	nop
 80018bc:	2180      	movs	r1, #128	; 0x80
 80018be:	4832      	ldr	r0, [pc, #200]	; (8001988 <i2cTest+0x158>)
 80018c0:	f001 fea0 	bl	8003604 <HAL_GPIO_ReadPin>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d0f8      	beq.n	80018bc <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2140      	movs	r1, #64	; 0x40
 80018ce:	482e      	ldr	r0, [pc, #184]	; (8001988 <i2cTest+0x158>)
 80018d0:	f001 feaf 	bl	8003632 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80018d4:	200a      	movs	r0, #10
 80018d6:	f001 f8c5 	bl	8002a64 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 80018da:	bf00      	nop
 80018dc:	2140      	movs	r1, #64	; 0x40
 80018de:	482a      	ldr	r0, [pc, #168]	; (8001988 <i2cTest+0x158>)
 80018e0:	f001 fe90 	bl	8003604 <HAL_GPIO_ReadPin>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d0f8      	beq.n	80018dc <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80018ea:	2201      	movs	r2, #1
 80018ec:	2140      	movs	r1, #64	; 0x40
 80018ee:	4826      	ldr	r0, [pc, #152]	; (8001988 <i2cTest+0x158>)
 80018f0:	f001 fe9f 	bl	8003632 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80018f4:	200a      	movs	r0, #10
 80018f6:	f001 f8b5 	bl	8002a64 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 80018fa:	bf00      	nop
 80018fc:	2140      	movs	r1, #64	; 0x40
 80018fe:	4822      	ldr	r0, [pc, #136]	; (8001988 <i2cTest+0x158>)
 8001900:	f001 fe80 	bl	8003604 <HAL_GPIO_ReadPin>
 8001904:	4603      	mov	r3, r0
 8001906:	2b01      	cmp	r3, #1
 8001908:	d1f8      	bne.n	80018fc <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800190a:	2201      	movs	r2, #1
 800190c:	2180      	movs	r1, #128	; 0x80
 800190e:	481e      	ldr	r0, [pc, #120]	; (8001988 <i2cTest+0x158>)
 8001910:	f001 fe8f 	bl	8003632 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001914:	200a      	movs	r0, #10
 8001916:	f001 f8a5 	bl	8002a64 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800191a:	bf00      	nop
 800191c:	2180      	movs	r1, #128	; 0x80
 800191e:	481a      	ldr	r0, [pc, #104]	; (8001988 <i2cTest+0x158>)
 8001920:	f001 fe70 	bl	8003604 <HAL_GPIO_ReadPin>
 8001924:	4603      	mov	r3, r0
 8001926:	2b01      	cmp	r3, #1
 8001928:	d1f8      	bne.n	800191c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800192a:	23c0      	movs	r3, #192	; 0xc0
 800192c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 800192e:	2312      	movs	r3, #18
 8001930:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8001932:	2301      	movs	r3, #1
 8001934:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8001936:	2303      	movs	r3, #3
 8001938:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800193a:	463b      	mov	r3, r7
 800193c:	4619      	mov	r1, r3
 800193e:	4812      	ldr	r0, [pc, #72]	; (8001988 <i2cTest+0x158>)
 8001940:	f001 fc00 	bl	8003144 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <i2cTest+0x154>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <i2cTest+0x154>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001952:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8001954:	4b0b      	ldr	r3, [pc, #44]	; (8001984 <i2cTest+0x154>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b0a      	ldr	r3, [pc, #40]	; (8001984 <i2cTest+0x154>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001962:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <i2cTest+0x154>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <i2cTest+0x154>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 0201 	orr.w	r2, r2, #1
 8001972:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8001974:	4803      	ldr	r0, [pc, #12]	; (8001984 <i2cTest+0x154>)
 8001976:	f001 fe75 	bl	8003664 <HAL_I2C_Init>
}
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000c84 	.word	0x20000c84
 8001988:	40010c00 	.word	0x40010c00

0800198c <mergeData>:
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}

char* mergeData() {
 800198c:	b580      	push	{r7, lr}
 800198e:	b09e      	sub	sp, #120	; 0x78
 8001990:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8001992:	2300      	movs	r3, #0
 8001994:	643b      	str	r3, [r7, #64]	; 0x40
 8001996:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800199a:	2229      	movs	r2, #41	; 0x29
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f004 fd70 	bl	8006484 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80019a4:	4b6a      	ldr	r3, [pc, #424]	; (8001b50 <mergeData+0x1c4>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	713b      	strb	r3, [r7, #4]
 80019aa:	4b6a      	ldr	r3, [pc, #424]	; (8001b54 <mergeData+0x1c8>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	717b      	strb	r3, [r7, #5]
 80019b0:	4b69      	ldr	r3, [pc, #420]	; (8001b58 <mergeData+0x1cc>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	71bb      	strb	r3, [r7, #6]
 80019b6:	4b69      	ldr	r3, [pc, #420]	; (8001b5c <mergeData+0x1d0>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	71fb      	strb	r3, [r7, #7]
 80019bc:	4b68      	ldr	r3, [pc, #416]	; (8001b60 <mergeData+0x1d4>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	723b      	strb	r3, [r7, #8]
 80019c2:	4b68      	ldr	r3, [pc, #416]	; (8001b64 <mergeData+0x1d8>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	727b      	strb	r3, [r7, #9]
 80019c8:	4b67      	ldr	r3, [pc, #412]	; (8001b68 <mergeData+0x1dc>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	72bb      	strb	r3, [r7, #10]
 80019ce:	4b67      	ldr	r3, [pc, #412]	; (8001b6c <mergeData+0x1e0>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	72fb      	strb	r3, [r7, #11]
 80019d4:	4b66      	ldr	r3, [pc, #408]	; (8001b70 <mergeData+0x1e4>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	733b      	strb	r3, [r7, #12]
 80019da:	4b66      	ldr	r3, [pc, #408]	; (8001b74 <mergeData+0x1e8>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	737b      	strb	r3, [r7, #13]
 80019e0:	4b65      	ldr	r3, [pc, #404]	; (8001b78 <mergeData+0x1ec>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	73bb      	strb	r3, [r7, #14]
 80019e6:	4b65      	ldr	r3, [pc, #404]	; (8001b7c <mergeData+0x1f0>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	73fb      	strb	r3, [r7, #15]
 80019ec:	4b64      	ldr	r3, [pc, #400]	; (8001b80 <mergeData+0x1f4>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	743b      	strb	r3, [r7, #16]
 80019f2:	4b64      	ldr	r3, [pc, #400]	; (8001b84 <mergeData+0x1f8>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	747b      	strb	r3, [r7, #17]
 80019f8:	4b63      	ldr	r3, [pc, #396]	; (8001b88 <mergeData+0x1fc>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	74bb      	strb	r3, [r7, #18]
 80019fe:	4b63      	ldr	r3, [pc, #396]	; (8001b8c <mergeData+0x200>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	74fb      	strb	r3, [r7, #19]
 8001a04:	4b62      	ldr	r3, [pc, #392]	; (8001b90 <mergeData+0x204>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	753b      	strb	r3, [r7, #20]
 8001a0a:	4b62      	ldr	r3, [pc, #392]	; (8001b94 <mergeData+0x208>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	757b      	strb	r3, [r7, #21]
 8001a10:	4b61      	ldr	r3, [pc, #388]	; (8001b98 <mergeData+0x20c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	75bb      	strb	r3, [r7, #22]
 8001a16:	4b61      	ldr	r3, [pc, #388]	; (8001b9c <mergeData+0x210>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	75fb      	strb	r3, [r7, #23]
 8001a1c:	4b60      	ldr	r3, [pc, #384]	; (8001ba0 <mergeData+0x214>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	763b      	strb	r3, [r7, #24]
 8001a22:	4b60      	ldr	r3, [pc, #384]	; (8001ba4 <mergeData+0x218>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	767b      	strb	r3, [r7, #25]
 8001a28:	4b5f      	ldr	r3, [pc, #380]	; (8001ba8 <mergeData+0x21c>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	76bb      	strb	r3, [r7, #26]
 8001a2e:	4b5f      	ldr	r3, [pc, #380]	; (8001bac <mergeData+0x220>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	76fb      	strb	r3, [r7, #27]
 8001a34:	4b5e      	ldr	r3, [pc, #376]	; (8001bb0 <mergeData+0x224>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	773b      	strb	r3, [r7, #28]
 8001a3a:	4b5e      	ldr	r3, [pc, #376]	; (8001bb4 <mergeData+0x228>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	777b      	strb	r3, [r7, #29]
 8001a40:	4b5d      	ldr	r3, [pc, #372]	; (8001bb8 <mergeData+0x22c>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	77bb      	strb	r3, [r7, #30]
 8001a46:	4b5d      	ldr	r3, [pc, #372]	; (8001bbc <mergeData+0x230>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	77fb      	strb	r3, [r7, #31]
 8001a4c:	4b5c      	ldr	r3, [pc, #368]	; (8001bc0 <mergeData+0x234>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	f887 3020 	strb.w	r3, [r7, #32]
 8001a54:	4b5b      	ldr	r3, [pc, #364]	; (8001bc4 <mergeData+0x238>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001a5c:	4b5a      	ldr	r3, [pc, #360]	; (8001bc8 <mergeData+0x23c>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001a64:	4b59      	ldr	r3, [pc, #356]	; (8001bcc <mergeData+0x240>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001a6c:	4b58      	ldr	r3, [pc, #352]	; (8001bd0 <mergeData+0x244>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 8001a74:	4b57      	ldr	r3, [pc, #348]	; (8001bd4 <mergeData+0x248>)
 8001a76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 8001a7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 8001a7e:	4b55      	ldr	r3, [pc, #340]	; (8001bd4 <mergeData+0x248>)
 8001a80:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8001a84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 8001a88:	4b52      	ldr	r3, [pc, #328]	; (8001bd4 <mergeData+0x248>)
 8001a8a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8001a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 8001a92:	4b50      	ldr	r3, [pc, #320]	; (8001bd4 <mergeData+0x248>)
 8001a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8001a98:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 8001a9c:	4b4d      	ldr	r3, [pc, #308]	; (8001bd4 <mergeData+0x248>)
 8001a9e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8001aa2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 8001aa6:	4b4b      	ldr	r3, [pc, #300]	; (8001bd4 <mergeData+0x248>)
 8001aa8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8001aac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 8001ab0:	4b48      	ldr	r3, [pc, #288]	; (8001bd4 <mergeData+0x248>)
 8001ab2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8001ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 8001aba:	4b46      	ldr	r3, [pc, #280]	; (8001bd4 <mergeData+0x248>)
 8001abc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8001ac0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 8001ac4:	4b43      	ldr	r3, [pc, #268]	; (8001bd4 <mergeData+0x248>)
 8001ac6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8001aca:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 8001ace:	4b41      	ldr	r3, [pc, #260]	; (8001bd4 <mergeData+0x248>)
 8001ad0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8001ad4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 8001ad8:	4b3e      	ldr	r3, [pc, #248]	; (8001bd4 <mergeData+0x248>)
 8001ada:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8001ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <mergeData+0x24c>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8001aea:	2300      	movs	r3, #0
 8001aec:	677b      	str	r3, [r7, #116]	; 0x74
 8001aee:	e015      	b.n	8001b1c <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 8001af0:	1d3a      	adds	r2, r7, #4
 8001af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001af4:	4413      	add	r3, r2
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001afe:	4937      	ldr	r1, [pc, #220]	; (8001bdc <mergeData+0x250>)
 8001b00:	4618      	mov	r0, r3
 8001b02:	f004 fc9f 	bl	8006444 <siprintf>
	    strcat(combinedString, temp);
 8001b06:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001b0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f004 fcbf 	bl	8006494 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8001b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b18:	3301      	adds	r3, #1
 8001b1a:	677b      	str	r3, [r7, #116]	; 0x74
 8001b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001b1e:	2b2c      	cmp	r3, #44	; 0x2c
 8001b20:	d9e6      	bls.n	8001af0 <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8001b22:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fb7c 	bl	8000224 <strlen>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	3301      	adds	r3, #1
 8001b30:	4618      	mov	r0, r3
 8001b32:	f004 fbd3 	bl	80062dc <malloc>
 8001b36:	4603      	mov	r3, r0
 8001b38:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 8001b3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b3e:	4619      	mov	r1, r3
 8001b40:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001b42:	f004 fcf3 	bl	800652c <strcpy>
	return result;
 8001b46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3778      	adds	r7, #120	; 0x78
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000ae0 	.word	0x20000ae0
 8001b54:	20000ad4 	.word	0x20000ad4
 8001b58:	20000ad5 	.word	0x20000ad5
 8001b5c:	20000ad6 	.word	0x20000ad6
 8001b60:	20000ad7 	.word	0x20000ad7
 8001b64:	20000ade 	.word	0x20000ade
 8001b68:	20000ad8 	.word	0x20000ad8
 8001b6c:	20000ad9 	.word	0x20000ad9
 8001b70:	20000add 	.word	0x20000add
 8001b74:	20000ada 	.word	0x20000ada
 8001b78:	20000aea 	.word	0x20000aea
 8001b7c:	20000adb 	.word	0x20000adb
 8001b80:	20000aeb 	.word	0x20000aeb
 8001b84:	20000adc 	.word	0x20000adc
 8001b88:	20000aec 	.word	0x20000aec
 8001b8c:	20000adf 	.word	0x20000adf
 8001b90:	20000ae1 	.word	0x20000ae1
 8001b94:	20000ae2 	.word	0x20000ae2
 8001b98:	20000ae3 	.word	0x20000ae3
 8001b9c:	20000ae4 	.word	0x20000ae4
 8001ba0:	20000ae5 	.word	0x20000ae5
 8001ba4:	20000ae6 	.word	0x20000ae6
 8001ba8:	20000ae7 	.word	0x20000ae7
 8001bac:	20000ae8 	.word	0x20000ae8
 8001bb0:	20000ae9 	.word	0x20000ae9
 8001bb4:	20000aed 	.word	0x20000aed
 8001bb8:	20000aee 	.word	0x20000aee
 8001bbc:	20000ad1 	.word	0x20000ad1
 8001bc0:	20000ad2 	.word	0x20000ad2
 8001bc4:	20000911 	.word	0x20000911
 8001bc8:	20000912 	.word	0x20000912
 8001bcc:	20000ad3 	.word	0x20000ad3
 8001bd0:	20000af1 	.word	0x20000af1
 8001bd4:	20000a88 	.word	0x20000a88
 8001bd8:	20000910 	.word	0x20000910
 8001bdc:	0800791c 	.word	0x0800791c

08001be0 <printTemplate>:
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
	}
}

void printTemplate(int type, int page) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
	if(type == 1 && page == 0) {
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d13e      	bne.n	8001c6e <printTemplate+0x8e>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d13b      	bne.n	8001c6e <printTemplate+0x8e>
		lcd_print(1, 1, "ID: ");
 8001bf6:	4a52      	ldr	r2, [pc, #328]	; (8001d40 <printTemplate+0x160>)
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	f7fe fd34 	bl	8000668 <lcd_print>
		lcd_print(2, 3, "0");
 8001c00:	4a50      	ldr	r2, [pc, #320]	; (8001d44 <printTemplate+0x164>)
 8001c02:	2103      	movs	r1, #3
 8001c04:	2002      	movs	r0, #2
 8001c06:	f7fe fd2f 	bl	8000668 <lcd_print>
		lcd_print(2, 4, "1");
 8001c0a:	4a4f      	ldr	r2, [pc, #316]	; (8001d48 <printTemplate+0x168>)
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	2002      	movs	r0, #2
 8001c10:	f7fe fd2a 	bl	8000668 <lcd_print>
		lcd_print(2, 5, "2");
 8001c14:	4a4d      	ldr	r2, [pc, #308]	; (8001d4c <printTemplate+0x16c>)
 8001c16:	2105      	movs	r1, #5
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f7fe fd25 	bl	8000668 <lcd_print>
		lcd_print(2, 6, "3");
 8001c1e:	4a4c      	ldr	r2, [pc, #304]	; (8001d50 <printTemplate+0x170>)
 8001c20:	2106      	movs	r1, #6
 8001c22:	2002      	movs	r0, #2
 8001c24:	f7fe fd20 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "4");
 8001c28:	4a4a      	ldr	r2, [pc, #296]	; (8001d54 <printTemplate+0x174>)
 8001c2a:	2107      	movs	r1, #7
 8001c2c:	2002      	movs	r0, #2
 8001c2e:	f7fe fd1b 	bl	8000668 <lcd_print>
		lcd_print(2, 10, "5");
 8001c32:	4a49      	ldr	r2, [pc, #292]	; (8001d58 <printTemplate+0x178>)
 8001c34:	210a      	movs	r1, #10
 8001c36:	2002      	movs	r0, #2
 8001c38:	f7fe fd16 	bl	8000668 <lcd_print>
		lcd_print(2, 11, "6");
 8001c3c:	4a47      	ldr	r2, [pc, #284]	; (8001d5c <printTemplate+0x17c>)
 8001c3e:	210b      	movs	r1, #11
 8001c40:	2002      	movs	r0, #2
 8001c42:	f7fe fd11 	bl	8000668 <lcd_print>
		lcd_print(2, 12, "7");
 8001c46:	4a46      	ldr	r2, [pc, #280]	; (8001d60 <printTemplate+0x180>)
 8001c48:	210c      	movs	r1, #12
 8001c4a:	2002      	movs	r0, #2
 8001c4c:	f7fe fd0c 	bl	8000668 <lcd_print>
		lcd_print(2, 13, "8");
 8001c50:	4a44      	ldr	r2, [pc, #272]	; (8001d64 <printTemplate+0x184>)
 8001c52:	210d      	movs	r1, #13
 8001c54:	2002      	movs	r0, #2
 8001c56:	f7fe fd07 	bl	8000668 <lcd_print>
		lcd_print(2, 14, "9");
 8001c5a:	4a43      	ldr	r2, [pc, #268]	; (8001d68 <printTemplate+0x188>)
 8001c5c:	210e      	movs	r1, #14
 8001c5e:	2002      	movs	r0, #2
 8001c60:	f7fe fd02 	bl	8000668 <lcd_print>
		lcd_gotoxy(2, 3);
 8001c64:	2103      	movs	r1, #3
 8001c66:	2002      	movs	r0, #2
 8001c68:	f7fe fcdf 	bl	800062a <lcd_gotoxy>
			HAL_Delay(100);
			lcd_print(1, 1, "SSID: ");
			lcd_print(2, 1, "#$%^&*()-_+=<>?");
		}
	}
}
 8001c6c:	e063      	b.n	8001d36 <printTemplate+0x156>
	} else if(type == 2 && page == 1) {
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d160      	bne.n	8001d36 <printTemplate+0x156>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d15d      	bne.n	8001d36 <printTemplate+0x156>
		if(page == 1) {
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d10f      	bne.n	8001ca0 <printTemplate+0xc0>
			lcd_clear();
 8001c80:	f7fe fd1e 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8001c84:	2064      	movs	r0, #100	; 0x64
 8001c86:	f000 feed 	bl	8002a64 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001c8a:	4a38      	ldr	r2, [pc, #224]	; (8001d6c <printTemplate+0x18c>)
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	2001      	movs	r0, #1
 8001c90:	f7fe fcea 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001c94:	4a36      	ldr	r2, [pc, #216]	; (8001d70 <printTemplate+0x190>)
 8001c96:	2101      	movs	r1, #1
 8001c98:	2002      	movs	r0, #2
 8001c9a:	f7fe fce5 	bl	8000668 <lcd_print>
}
 8001c9e:	e04a      	b.n	8001d36 <printTemplate+0x156>
		} else if(page == 2) {
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d10f      	bne.n	8001cc6 <printTemplate+0xe6>
			lcd_clear();
 8001ca6:	f7fe fd0b 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8001caa:	2064      	movs	r0, #100	; 0x64
 8001cac:	f000 feda 	bl	8002a64 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001cb0:	4a2e      	ldr	r2, [pc, #184]	; (8001d6c <printTemplate+0x18c>)
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	f7fe fcd7 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001cba:	4a2e      	ldr	r2, [pc, #184]	; (8001d74 <printTemplate+0x194>)
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	2002      	movs	r0, #2
 8001cc0:	f7fe fcd2 	bl	8000668 <lcd_print>
}
 8001cc4:	e037      	b.n	8001d36 <printTemplate+0x156>
		} else if(page == 3) {
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d10f      	bne.n	8001cec <printTemplate+0x10c>
			lcd_clear();
 8001ccc:	f7fe fcf8 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8001cd0:	2064      	movs	r0, #100	; 0x64
 8001cd2:	f000 fec7 	bl	8002a64 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001cd6:	4a25      	ldr	r2, [pc, #148]	; (8001d6c <printTemplate+0x18c>)
 8001cd8:	2101      	movs	r1, #1
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f7fe fcc4 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001ce0:	4a25      	ldr	r2, [pc, #148]	; (8001d78 <printTemplate+0x198>)
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	2002      	movs	r0, #2
 8001ce6:	f7fe fcbf 	bl	8000668 <lcd_print>
}
 8001cea:	e024      	b.n	8001d36 <printTemplate+0x156>
		} else if(page == 4) {
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d10f      	bne.n	8001d12 <printTemplate+0x132>
			lcd_clear();
 8001cf2:	f7fe fce5 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8001cf6:	2064      	movs	r0, #100	; 0x64
 8001cf8:	f000 feb4 	bl	8002a64 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001cfc:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <printTemplate+0x18c>)
 8001cfe:	2101      	movs	r1, #1
 8001d00:	2001      	movs	r0, #1
 8001d02:	f7fe fcb1 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8001d06:	4a1d      	ldr	r2, [pc, #116]	; (8001d7c <printTemplate+0x19c>)
 8001d08:	2101      	movs	r1, #1
 8001d0a:	2002      	movs	r0, #2
 8001d0c:	f7fe fcac 	bl	8000668 <lcd_print>
}
 8001d10:	e011      	b.n	8001d36 <printTemplate+0x156>
		} else if(page == 5) {
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	2b05      	cmp	r3, #5
 8001d16:	d10e      	bne.n	8001d36 <printTemplate+0x156>
			lcd_clear();
 8001d18:	f7fe fcd2 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8001d1c:	2064      	movs	r0, #100	; 0x64
 8001d1e:	f000 fea1 	bl	8002a64 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001d22:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <printTemplate+0x18c>)
 8001d24:	2101      	movs	r1, #1
 8001d26:	2001      	movs	r0, #1
 8001d28:	f7fe fc9e 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>?");
 8001d2c:	4a14      	ldr	r2, [pc, #80]	; (8001d80 <printTemplate+0x1a0>)
 8001d2e:	2101      	movs	r1, #1
 8001d30:	2002      	movs	r0, #2
 8001d32:	f7fe fc99 	bl	8000668 <lcd_print>
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	080079d4 	.word	0x080079d4
 8001d44:	080079dc 	.word	0x080079dc
 8001d48:	080078bc 	.word	0x080078bc
 8001d4c:	080078cc 	.word	0x080078cc
 8001d50:	080078d0 	.word	0x080078d0
 8001d54:	080078d4 	.word	0x080078d4
 8001d58:	080078d8 	.word	0x080078d8
 8001d5c:	080078dc 	.word	0x080078dc
 8001d60:	080079e0 	.word	0x080079e0
 8001d64:	080079e4 	.word	0x080079e4
 8001d68:	080079e8 	.word	0x080079e8
 8001d6c:	080079ec 	.word	0x080079ec
 8001d70:	080079f4 	.word	0x080079f4
 8001d74:	08007a08 	.word	0x08007a08
 8001d78:	08007a1c 	.word	0x08007a1c
 8001d7c:	08007a30 	.word	0x08007a30
 8001d80:	08007a44 	.word	0x08007a44

08001d84 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition, int page) {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b096      	sub	sp, #88	; 0x58
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
	char characters[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_+=<>?";
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <getCharFromCursorPosition+0x34>)
 8001d90:	f107 0308 	add.w	r3, r7, #8
 8001d94:	4611      	mov	r1, r2
 8001d96:	2250      	movs	r2, #80	; 0x50
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f004 fbcf 	bl	800653c <memcpy>
    return characters[cursorPosition * page - 1];
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	fb02 f303 	mul.w	r3, r2, r3
 8001da6:	3b01      	subs	r3, #1
 8001da8:	3358      	adds	r3, #88	; 0x58
 8001daa:	443b      	add	r3, r7
 8001dac:	f813 3c50 	ldrb.w	r3, [r3, #-80]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3758      	adds	r7, #88	; 0x58
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	08007a54 	.word	0x08007a54

08001dbc <takeWifiSSID>:

        lcd_gotoxy(2, cursorPosition);
    }
}

void takeWifiSSID() {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
    lcd_cursor(1);
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f7fe fc98 	bl	80006f8 <lcd_cursor>

    int cursorPosition = 1;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	60fb      	str	r3, [r7, #12]
    int page = 1;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	60bb      	str	r3, [r7, #8]
    int wifiNameLoc = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	607b      	str	r3, [r7, #4]
    int writeLoc = 7;
 8001dd4:	2307      	movs	r3, #7
 8001dd6:	603b      	str	r3, [r7, #0]

    printTemplate(2, 1);
 8001dd8:	2101      	movs	r1, #1
 8001dda:	2002      	movs	r0, #2
 8001ddc:	f7ff ff00 	bl	8001be0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001de0:	2108      	movs	r1, #8
 8001de2:	48a5      	ldr	r0, [pc, #660]	; (8002078 <takeWifiSSID+0x2bc>)
 8001de4:	f001 fc0e 	bl	8003604 <HAL_GPIO_ReadPin>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d103      	bne.n	8001df6 <takeWifiSSID+0x3a>
            lcd_cursor(0);
 8001dee:	2000      	movs	r0, #0
 8001df0:	f7fe fc82 	bl	80006f8 <lcd_cursor>
            break;
 8001df4:	e13b      	b.n	800206e <takeWifiSSID+0x2b2>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001df6:	2101      	movs	r1, #1
 8001df8:	489f      	ldr	r0, [pc, #636]	; (8002078 <takeWifiSSID+0x2bc>)
 8001dfa:	f001 fc03 	bl	8003604 <HAL_GPIO_ReadPin>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	f040 8084 	bne.w	8001f0e <takeWifiSSID+0x152>
            if (cursorPosition == 16) {
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2b10      	cmp	r3, #16
 8001e0a:	d15f      	bne.n	8001ecc <takeWifiSSID+0x110>
            	if(page == 1) {
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d114      	bne.n	8001e3c <takeWifiSSID+0x80>
            		cursorPosition = 1;
 8001e12:	2301      	movs	r3, #1
 8001e14:	60fb      	str	r3, [r7, #12]
            		page++;
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	60bb      	str	r3, [r7, #8]
            		lcd_clear();
 8001e1c:	f7fe fc50 	bl	80006c0 <lcd_clear>
            		HAL_Delay(100);
 8001e20:	2064      	movs	r0, #100	; 0x64
 8001e22:	f000 fe1f 	bl	8002a64 <HAL_Delay>
            		lcd_print(1, 1, "SSID: ");
 8001e26:	4a95      	ldr	r2, [pc, #596]	; (800207c <takeWifiSSID+0x2c0>)
 8001e28:	2101      	movs	r1, #1
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f7fe fc1c 	bl	8000668 <lcd_print>
            		lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001e30:	4a93      	ldr	r2, [pc, #588]	; (8002080 <takeWifiSSID+0x2c4>)
 8001e32:	2101      	movs	r1, #1
 8001e34:	2002      	movs	r0, #2
 8001e36:	f7fe fc17 	bl	8000668 <lcd_print>
 8001e3a:	e064      	b.n	8001f06 <takeWifiSSID+0x14a>
            	} else if(page == 2) {
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d114      	bne.n	8001e6c <takeWifiSSID+0xb0>
            		cursorPosition = 1;
 8001e42:	2301      	movs	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
            		page++;
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
            		lcd_clear();
 8001e4c:	f7fe fc38 	bl	80006c0 <lcd_clear>
            		HAL_Delay(100);
 8001e50:	2064      	movs	r0, #100	; 0x64
 8001e52:	f000 fe07 	bl	8002a64 <HAL_Delay>
            		lcd_print(1, 1, "SSID: ");
 8001e56:	4a89      	ldr	r2, [pc, #548]	; (800207c <takeWifiSSID+0x2c0>)
 8001e58:	2101      	movs	r1, #1
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f7fe fc04 	bl	8000668 <lcd_print>
            		lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001e60:	4a88      	ldr	r2, [pc, #544]	; (8002084 <takeWifiSSID+0x2c8>)
 8001e62:	2101      	movs	r1, #1
 8001e64:	2002      	movs	r0, #2
 8001e66:	f7fe fbff 	bl	8000668 <lcd_print>
 8001e6a:	e04c      	b.n	8001f06 <takeWifiSSID+0x14a>
            	} else if(page == 3) {
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d114      	bne.n	8001e9c <takeWifiSSID+0xe0>
            		cursorPosition = 1;
 8001e72:	2301      	movs	r3, #1
 8001e74:	60fb      	str	r3, [r7, #12]
            		page++;
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	60bb      	str	r3, [r7, #8]
            		lcd_clear();
 8001e7c:	f7fe fc20 	bl	80006c0 <lcd_clear>
            		HAL_Delay(100);
 8001e80:	2064      	movs	r0, #100	; 0x64
 8001e82:	f000 fdef 	bl	8002a64 <HAL_Delay>
            		lcd_print(1, 1, "SSID: ");
 8001e86:	4a7d      	ldr	r2, [pc, #500]	; (800207c <takeWifiSSID+0x2c0>)
 8001e88:	2101      	movs	r1, #1
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f7fe fbec 	bl	8000668 <lcd_print>
            		lcd_print(2, 1, "WXYZ0123456789!@");
 8001e90:	4a7d      	ldr	r2, [pc, #500]	; (8002088 <takeWifiSSID+0x2cc>)
 8001e92:	2101      	movs	r1, #1
 8001e94:	2002      	movs	r0, #2
 8001e96:	f7fe fbe7 	bl	8000668 <lcd_print>
 8001e9a:	e034      	b.n	8001f06 <takeWifiSSID+0x14a>
            	} else if(page == 4) {
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d131      	bne.n	8001f06 <takeWifiSSID+0x14a>
            		cursorPosition = 1;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	60fb      	str	r3, [r7, #12]
            		page++;
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	60bb      	str	r3, [r7, #8]
            		lcd_clear();
 8001eac:	f7fe fc08 	bl	80006c0 <lcd_clear>
            		HAL_Delay(100);
 8001eb0:	2064      	movs	r0, #100	; 0x64
 8001eb2:	f000 fdd7 	bl	8002a64 <HAL_Delay>
            		lcd_print(1, 1, "SSID: ");
 8001eb6:	4a71      	ldr	r2, [pc, #452]	; (800207c <takeWifiSSID+0x2c0>)
 8001eb8:	2101      	movs	r1, #1
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f7fe fbd4 	bl	8000668 <lcd_print>
            		lcd_print(2, 1, "#$%^&*()-_+=<>?");
 8001ec0:	4a72      	ldr	r2, [pc, #456]	; (800208c <takeWifiSSID+0x2d0>)
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	2002      	movs	r0, #2
 8001ec6:	f7fe fbcf 	bl	8000668 <lcd_print>
 8001eca:	e01c      	b.n	8001f06 <takeWifiSSID+0x14a>
            	}
            } else if(cursorPosition == 15 && page == 5) {
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b0f      	cmp	r3, #15
 8001ed0:	d116      	bne.n	8001f00 <takeWifiSSID+0x144>
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d113      	bne.n	8001f00 <takeWifiSSID+0x144>
            	cursorPosition = 1;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	60fb      	str	r3, [r7, #12]
            	page = 1;
 8001edc:	2301      	movs	r3, #1
 8001ede:	60bb      	str	r3, [r7, #8]
            	lcd_clear();
 8001ee0:	f7fe fbee 	bl	80006c0 <lcd_clear>
            	HAL_Delay(100);
 8001ee4:	2064      	movs	r0, #100	; 0x64
 8001ee6:	f000 fdbd 	bl	8002a64 <HAL_Delay>
            	lcd_print(1, 1, "SSID: ");
 8001eea:	4a64      	ldr	r2, [pc, #400]	; (800207c <takeWifiSSID+0x2c0>)
 8001eec:	2101      	movs	r1, #1
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f7fe fbba 	bl	8000668 <lcd_print>
            	lcd_print(2, 1, "abcdefghijklmnop");
 8001ef4:	4a66      	ldr	r2, [pc, #408]	; (8002090 <takeWifiSSID+0x2d4>)
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	2002      	movs	r0, #2
 8001efa:	f7fe fbb5 	bl	8000668 <lcd_print>
 8001efe:	e002      	b.n	8001f06 <takeWifiSSID+0x14a>
            } else {
            	cursorPosition++;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	3301      	adds	r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(350);
 8001f06:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001f0a:	f000 fdab 	bl	8002a64 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001f0e:	2108      	movs	r1, #8
 8001f10:	4860      	ldr	r0, [pc, #384]	; (8002094 <takeWifiSSID+0x2d8>)
 8001f12:	f001 fb77 	bl	8003604 <HAL_GPIO_ReadPin>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d17c      	bne.n	8002016 <takeWifiSSID+0x25a>
            if(cursorPosition == 1) {
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d172      	bne.n	8002008 <takeWifiSSID+0x24c>
            	if(page == 1) {
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d113      	bne.n	8001f50 <takeWifiSSID+0x194>
            		cursorPosition = 16;
 8001f28:	2310      	movs	r3, #16
 8001f2a:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8001f2c:	2305      	movs	r3, #5
 8001f2e:	60bb      	str	r3, [r7, #8]
            		lcd_clear();
 8001f30:	f7fe fbc6 	bl	80006c0 <lcd_clear>
            		HAL_Delay(100);
 8001f34:	2064      	movs	r0, #100	; 0x64
 8001f36:	f000 fd95 	bl	8002a64 <HAL_Delay>
            		lcd_print(1, 1, "SSID: ");
 8001f3a:	4a50      	ldr	r2, [pc, #320]	; (800207c <takeWifiSSID+0x2c0>)
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f7fe fb92 	bl	8000668 <lcd_print>
            		lcd_print(2, 1, "#$%^&*()-_+=<>?");
 8001f44:	4a51      	ldr	r2, [pc, #324]	; (800208c <takeWifiSSID+0x2d0>)
 8001f46:	2101      	movs	r1, #1
 8001f48:	2002      	movs	r0, #2
 8001f4a:	f7fe fb8d 	bl	8000668 <lcd_print>
 8001f4e:	e05e      	b.n	800200e <takeWifiSSID+0x252>
            	} else if(page == 2) {
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d113      	bne.n	8001f7e <takeWifiSSID+0x1c2>
            		cursorPosition = 16;
 8001f56:	2310      	movs	r3, #16
 8001f58:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	60bb      	str	r3, [r7, #8]
            		lcd_clear();
 8001f5e:	f7fe fbaf 	bl	80006c0 <lcd_clear>
            		HAL_Delay(100);
 8001f62:	2064      	movs	r0, #100	; 0x64
 8001f64:	f000 fd7e 	bl	8002a64 <HAL_Delay>
            		lcd_print(1, 1, "SSID: ");
 8001f68:	4a44      	ldr	r2, [pc, #272]	; (800207c <takeWifiSSID+0x2c0>)
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f7fe fb7b 	bl	8000668 <lcd_print>
            		lcd_print(2, 1, "abcdefghijklmnop");
 8001f72:	4a47      	ldr	r2, [pc, #284]	; (8002090 <takeWifiSSID+0x2d4>)
 8001f74:	2101      	movs	r1, #1
 8001f76:	2002      	movs	r0, #2
 8001f78:	f7fe fb76 	bl	8000668 <lcd_print>
 8001f7c:	e047      	b.n	800200e <takeWifiSSID+0x252>
            	} else if(page == 3) {
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d113      	bne.n	8001fac <takeWifiSSID+0x1f0>
            		cursorPosition = 16;
 8001f84:	2310      	movs	r3, #16
 8001f86:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	60bb      	str	r3, [r7, #8]
            		lcd_clear();
 8001f8c:	f7fe fb98 	bl	80006c0 <lcd_clear>
            		HAL_Delay(100);
 8001f90:	2064      	movs	r0, #100	; 0x64
 8001f92:	f000 fd67 	bl	8002a64 <HAL_Delay>
            		lcd_print(1, 1, "SSID: ");
 8001f96:	4a39      	ldr	r2, [pc, #228]	; (800207c <takeWifiSSID+0x2c0>)
 8001f98:	2101      	movs	r1, #1
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	f7fe fb64 	bl	8000668 <lcd_print>
            		lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001fa0:	4a37      	ldr	r2, [pc, #220]	; (8002080 <takeWifiSSID+0x2c4>)
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	2002      	movs	r0, #2
 8001fa6:	f7fe fb5f 	bl	8000668 <lcd_print>
 8001faa:	e030      	b.n	800200e <takeWifiSSID+0x252>
            	} else if(page == 4) {
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d113      	bne.n	8001fda <takeWifiSSID+0x21e>
            		cursorPosition = 16;
 8001fb2:	2310      	movs	r3, #16
 8001fb4:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	60bb      	str	r3, [r7, #8]
            		lcd_clear();
 8001fba:	f7fe fb81 	bl	80006c0 <lcd_clear>
            		HAL_Delay(100);
 8001fbe:	2064      	movs	r0, #100	; 0x64
 8001fc0:	f000 fd50 	bl	8002a64 <HAL_Delay>
            		lcd_print(1, 1, "SSID: ");
 8001fc4:	4a2d      	ldr	r2, [pc, #180]	; (800207c <takeWifiSSID+0x2c0>)
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f7fe fb4d 	bl	8000668 <lcd_print>
            		lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8001fce:	4a2d      	ldr	r2, [pc, #180]	; (8002084 <takeWifiSSID+0x2c8>)
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	2002      	movs	r0, #2
 8001fd4:	f7fe fb48 	bl	8000668 <lcd_print>
 8001fd8:	e019      	b.n	800200e <takeWifiSSID+0x252>
            	} else if(page == 5) {
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2b05      	cmp	r3, #5
 8001fde:	d116      	bne.n	800200e <takeWifiSSID+0x252>
            		cursorPosition = 16;
 8001fe0:	2310      	movs	r3, #16
 8001fe2:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8001fe4:	2304      	movs	r3, #4
 8001fe6:	60bb      	str	r3, [r7, #8]
            		lcd_clear();
 8001fe8:	f7fe fb6a 	bl	80006c0 <lcd_clear>
            		HAL_Delay(100);
 8001fec:	2064      	movs	r0, #100	; 0x64
 8001fee:	f000 fd39 	bl	8002a64 <HAL_Delay>
            		lcd_print(1, 1, "SSID: ");
 8001ff2:	4a22      	ldr	r2, [pc, #136]	; (800207c <takeWifiSSID+0x2c0>)
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f7fe fb36 	bl	8000668 <lcd_print>
            		lcd_print(2, 1, "WXYZ0123456789!@");
 8001ffc:	4a22      	ldr	r2, [pc, #136]	; (8002088 <takeWifiSSID+0x2cc>)
 8001ffe:	2101      	movs	r1, #1
 8002000:	2002      	movs	r0, #2
 8002002:	f7fe fb31 	bl	8000668 <lcd_print>
 8002006:	e002      	b.n	800200e <takeWifiSSID+0x252>
            	}
            } else {
            	cursorPosition--;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	3b01      	subs	r3, #1
 800200c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(350);
 800200e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8002012:	f000 fd27 	bl	8002a64 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8002016:	2102      	movs	r1, #2
 8002018:	4817      	ldr	r0, [pc, #92]	; (8002078 <takeWifiSSID+0x2bc>)
 800201a:	f001 faf3 	bl	8003604 <HAL_GPIO_ReadPin>
 800201e:	4603      	mov	r3, r0
 8002020:	2b01      	cmp	r3, #1
 8002022:	d11d      	bne.n	8002060 <takeWifiSSID+0x2a4>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(cursorPosition, page);
 8002024:	68b9      	ldr	r1, [r7, #8]
 8002026:	68f8      	ldr	r0, [r7, #12]
 8002028:	f7ff feac 	bl	8001d84 <getCharFromCursorPosition>
 800202c:	4603      	mov	r3, r0
 800202e:	4619      	mov	r1, r3
 8002030:	4a19      	ldr	r2, [pc, #100]	; (8002098 <takeWifiSSID+0x2dc>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4413      	add	r3, r2
 8002036:	460a      	mov	r2, r1
 8002038:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	b2d9      	uxtb	r1, r3
 800203e:	4a16      	ldr	r2, [pc, #88]	; (8002098 <takeWifiSSID+0x2dc>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4413      	add	r3, r2
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	2001      	movs	r0, #1
 800204a:	f7fe fb22 	bl	8000692 <lcd_print_char>

            writeLoc++;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	3301      	adds	r3, #1
 8002052:	603b      	str	r3, [r7, #0]
            wifiNameLoc++;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3301      	adds	r3, #1
 8002058:	607b      	str	r3, [r7, #4]

            HAL_Delay(250);
 800205a:	20fa      	movs	r0, #250	; 0xfa
 800205c:	f000 fd02 	bl	8002a64 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	4619      	mov	r1, r3
 8002066:	2002      	movs	r0, #2
 8002068:	f7fe fadf 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800206c:	e6b8      	b.n	8001de0 <takeWifiSSID+0x24>
    }
}
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40010800 	.word	0x40010800
 800207c:	080079ec 	.word	0x080079ec
 8002080:	08007a08 	.word	0x08007a08
 8002084:	08007a1c 	.word	0x08007a1c
 8002088:	08007a30 	.word	0x08007a30
 800208c:	08007a44 	.word	0x08007a44
 8002090:	080079f4 	.word	0x080079f4
 8002094:	40011000 	.word	0x40011000
 8002098:	20000c38 	.word	0x20000c38

0800209c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80020a4:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	3301      	adds	r3, #1
 80020aa:	4a03      	ldr	r2, [pc, #12]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80020ac:	6013      	str	r3, [r2, #0]
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	20000ac8 	.word	0x20000ac8

080020bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020c0:	f000 fc6e 	bl	80029a0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 80020c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020c8:	f000 fccc 	bl	8002a64 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020cc:	f000 f89e 	bl	800220c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020d0:	f000 f9c0 	bl	8002454 <MX_GPIO_Init>
  MX_CAN_Init();
 80020d4:	f000 f8e0 	bl	8002298 <MX_CAN_Init>
  MX_I2C1_Init();
 80020d8:	f000 f912 	bl	8002300 <MX_I2C1_Init>
  MX_TIM1_Init();
 80020dc:	f000 f93e 	bl	800235c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80020e0:	f000 f98e 	bl	8002400 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80020e4:	2201      	movs	r2, #1
 80020e6:	2140      	movs	r1, #64	; 0x40
 80020e8:	483e      	ldr	r0, [pc, #248]	; (80021e4 <main+0x128>)
 80020ea:	f001 faa2 	bl	8003632 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80020ee:	2201      	movs	r2, #1
 80020f0:	2180      	movs	r1, #128	; 0x80
 80020f2:	483c      	ldr	r0, [pc, #240]	; (80021e4 <main+0x128>)
 80020f4:	f001 fa9d 	bl	8003632 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80020f8:	200a      	movs	r0, #10
 80020fa:	f000 fcb3 	bl	8002a64 <HAL_Delay>
  lcd_init();
 80020fe:	f7fe fa81 	bl	8000604 <lcd_init>
  HAL_Delay(10);
 8002102:	200a      	movs	r0, #10
 8002104:	f000 fcae 	bl	8002a64 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8002108:	4837      	ldr	r0, [pc, #220]	; (80021e8 <main+0x12c>)
 800210a:	f002 ff9d 	bl	8005048 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800210e:	bf00      	nop
 8002110:	4836      	ldr	r0, [pc, #216]	; (80021ec <main+0x130>)
 8002112:	f001 ff8e 	bl	8004032 <HAL_I2C_GetError>
 8002116:	4603      	mov	r3, r0
 8002118:	2b04      	cmp	r3, #4
 800211a:	d0f9      	beq.n	8002110 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800211c:	bf00      	nop
 800211e:	4833      	ldr	r0, [pc, #204]	; (80021ec <main+0x130>)
 8002120:	f001 ff7a 	bl	8004018 <HAL_I2C_GetState>
 8002124:	4603      	mov	r3, r0
 8002126:	2b20      	cmp	r3, #32
 8002128:	d1f9      	bne.n	800211e <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800212a:	2200      	movs	r2, #0
 800212c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002130:	482c      	ldr	r0, [pc, #176]	; (80021e4 <main+0x128>)
 8002132:	f001 fa7e 	bl	8003632 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8002136:	2200      	movs	r2, #0
 8002138:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800213c:	4829      	ldr	r0, [pc, #164]	; (80021e4 <main+0x128>)
 800213e:	f001 fa78 	bl	8003632 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	2104      	movs	r1, #4
 8002146:	4827      	ldr	r0, [pc, #156]	; (80021e4 <main+0x128>)
 8002148:	f001 fa73 	bl	8003632 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800214c:	2200      	movs	r2, #0
 800214e:	2102      	movs	r1, #2
 8002150:	4824      	ldr	r0, [pc, #144]	; (80021e4 <main+0x128>)
 8002152:	f001 fa6e 	bl	8003632 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8002156:	2200      	movs	r2, #0
 8002158:	2101      	movs	r1, #1
 800215a:	4822      	ldr	r0, [pc, #136]	; (80021e4 <main+0x128>)
 800215c:	f001 fa69 	bl	8003632 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8002160:	2200      	movs	r2, #0
 8002162:	2120      	movs	r1, #32
 8002164:	4822      	ldr	r0, [pc, #136]	; (80021f0 <main+0x134>)
 8002166:	f001 fa64 	bl	8003632 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800216a:	2200      	movs	r2, #0
 800216c:	2110      	movs	r1, #16
 800216e:	4820      	ldr	r0, [pc, #128]	; (80021f0 <main+0x134>)
 8002170:	f001 fa5f 	bl	8003632 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8002174:	2200      	movs	r2, #0
 8002176:	2180      	movs	r1, #128	; 0x80
 8002178:	481e      	ldr	r0, [pc, #120]	; (80021f4 <main+0x138>)
 800217a:	f001 fa5a 	bl	8003632 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800217e:	2200      	movs	r2, #0
 8002180:	2140      	movs	r1, #64	; 0x40
 8002182:	481c      	ldr	r0, [pc, #112]	; (80021f4 <main+0x138>)
 8002184:	f001 fa55 	bl	8003632 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8002188:	2200      	movs	r2, #0
 800218a:	2120      	movs	r1, #32
 800218c:	4819      	ldr	r0, [pc, #100]	; (80021f4 <main+0x138>)
 800218e:	f001 fa50 	bl	8003632 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8002192:	2200      	movs	r2, #0
 8002194:	2110      	movs	r1, #16
 8002196:	4817      	ldr	r0, [pc, #92]	; (80021f4 <main+0x138>)
 8002198:	f001 fa4b 	bl	8003632 <HAL_GPIO_WritePin>

  i2cTest();
 800219c:	f7ff fb48 	bl	8001830 <i2cTest>
  HAL_Delay(100);
 80021a0:	2064      	movs	r0, #100	; 0x64
 80021a2:	f000 fc5f 	bl	8002a64 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 80021a6:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <main+0x13c>)
 80021a8:	2101      	movs	r1, #1
 80021aa:	2001      	movs	r0, #1
 80021ac:	f7fe fa5c 	bl	8000668 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 80021b0:	4a12      	ldr	r2, [pc, #72]	; (80021fc <main+0x140>)
 80021b2:	2101      	movs	r1, #1
 80021b4:	2002      	movs	r0, #2
 80021b6:	f7fe fa57 	bl	8000668 <lcd_print>
  HAL_Delay(1000);
 80021ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021be:	f000 fc51 	bl	8002a64 <HAL_Delay>
  lcd_clear();
 80021c2:	f7fe fa7d 	bl	80006c0 <lcd_clear>

  eepromKontrol(0);
 80021c6:	2000      	movs	r0, #0
 80021c8:	f7ff f8b6 	bl	8001338 <eepromKontrol>

  /*if(strlen(machineID) == 0) {
	  takeMachineID();
  }*/

  if(strlen(wifiSSID) == 0) {
 80021cc:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <main+0x144>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <main+0x11c>
	 takeWifiSSID();
 80021d4:	f7ff fdf2 	bl	8001dbc <takeWifiSSID>
  	  HAL_Delay(500);
    }*/

  //lcd_clear();

  backLightTimer = millis;
 80021d8:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <main+0x148>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0a      	ldr	r2, [pc, #40]	; (8002208 <main+0x14c>)
 80021de:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <main+0x124>
 80021e2:	bf00      	nop
 80021e4:	40010c00 	.word	0x40010c00
 80021e8:	20000cd8 	.word	0x20000cd8
 80021ec:	20000c84 	.word	0x20000c84
 80021f0:	40011000 	.word	0x40011000
 80021f4:	40010800 	.word	0x40010800
 80021f8:	08007aa4 	.word	0x08007aa4
 80021fc:	08007ab8 	.word	0x08007ab8
 8002200:	20000c38 	.word	0x20000c38
 8002204:	20000ac8 	.word	0x20000ac8
 8002208:	20000acc 	.word	0x20000acc

0800220c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b090      	sub	sp, #64	; 0x40
 8002210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002212:	f107 0318 	add.w	r3, r7, #24
 8002216:	2228      	movs	r2, #40	; 0x28
 8002218:	2100      	movs	r1, #0
 800221a:	4618      	mov	r0, r3
 800221c:	f004 f932 	bl	8006484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	60da      	str	r2, [r3, #12]
 800222c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800222e:	2301      	movs	r3, #1
 8002230:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002236:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002238:	2300      	movs	r3, #0
 800223a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800223c:	2301      	movs	r3, #1
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002240:	2302      	movs	r3, #2
 8002242:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002248:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800224a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800224e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002250:	f107 0318 	add.w	r3, r7, #24
 8002254:	4618      	mov	r0, r3
 8002256:	f002 fa97 	bl	8004788 <HAL_RCC_OscConfig>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002260:	f000 f9a2 	bl	80025a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002264:	230f      	movs	r3, #15
 8002266:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002268:	2302      	movs	r3, #2
 800226a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800226c:	2300      	movs	r3, #0
 800226e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002274:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	2102      	movs	r1, #2
 800227e:	4618      	mov	r0, r3
 8002280:	f002 fd04 	bl	8004c8c <HAL_RCC_ClockConfig>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800228a:	f000 f98d 	bl	80025a8 <Error_Handler>
  }
}
 800228e:	bf00      	nop
 8002290:	3740      	adds	r7, #64	; 0x40
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800229c:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <MX_CAN_Init+0x60>)
 800229e:	4a17      	ldr	r2, [pc, #92]	; (80022fc <MX_CAN_Init+0x64>)
 80022a0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80022a2:	4b15      	ldr	r3, [pc, #84]	; (80022f8 <MX_CAN_Init+0x60>)
 80022a4:	2210      	movs	r2, #16
 80022a6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80022a8:	4b13      	ldr	r3, [pc, #76]	; (80022f8 <MX_CAN_Init+0x60>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80022ae:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <MX_CAN_Init+0x60>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80022b4:	4b10      	ldr	r3, [pc, #64]	; (80022f8 <MX_CAN_Init+0x60>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80022ba:	4b0f      	ldr	r3, [pc, #60]	; (80022f8 <MX_CAN_Init+0x60>)
 80022bc:	2200      	movs	r2, #0
 80022be:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80022c0:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <MX_CAN_Init+0x60>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80022c6:	4b0c      	ldr	r3, [pc, #48]	; (80022f8 <MX_CAN_Init+0x60>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <MX_CAN_Init+0x60>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <MX_CAN_Init+0x60>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80022d8:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <MX_CAN_Init+0x60>)
 80022da:	2200      	movs	r2, #0
 80022dc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <MX_CAN_Init+0x60>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80022e4:	4804      	ldr	r0, [pc, #16]	; (80022f8 <MX_CAN_Init+0x60>)
 80022e6:	f000 fbe1 	bl	8002aac <HAL_CAN_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80022f0:	f000 f95a 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000c5c 	.word	0x20000c5c
 80022fc:	40006400 	.word	0x40006400

08002300 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <MX_I2C1_Init+0x50>)
 8002306:	4a13      	ldr	r2, [pc, #76]	; (8002354 <MX_I2C1_Init+0x54>)
 8002308:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <MX_I2C1_Init+0x50>)
 800230c:	4a12      	ldr	r2, [pc, #72]	; (8002358 <MX_I2C1_Init+0x58>)
 800230e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002310:	4b0f      	ldr	r3, [pc, #60]	; (8002350 <MX_I2C1_Init+0x50>)
 8002312:	2200      	movs	r2, #0
 8002314:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002316:	4b0e      	ldr	r3, [pc, #56]	; (8002350 <MX_I2C1_Init+0x50>)
 8002318:	2200      	movs	r2, #0
 800231a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <MX_I2C1_Init+0x50>)
 800231e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002322:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002324:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <MX_I2C1_Init+0x50>)
 8002326:	2200      	movs	r2, #0
 8002328:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800232a:	4b09      	ldr	r3, [pc, #36]	; (8002350 <MX_I2C1_Init+0x50>)
 800232c:	2200      	movs	r2, #0
 800232e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002330:	4b07      	ldr	r3, [pc, #28]	; (8002350 <MX_I2C1_Init+0x50>)
 8002332:	2200      	movs	r2, #0
 8002334:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <MX_I2C1_Init+0x50>)
 8002338:	2200      	movs	r2, #0
 800233a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800233c:	4804      	ldr	r0, [pc, #16]	; (8002350 <MX_I2C1_Init+0x50>)
 800233e:	f001 f991 	bl	8003664 <HAL_I2C_Init>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002348:	f000 f92e 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000c84 	.word	0x20000c84
 8002354:	40005400 	.word	0x40005400
 8002358:	00061a80 	.word	0x00061a80

0800235c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002362:	f107 0308 	add.w	r3, r7, #8
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
 800236c:	609a      	str	r2, [r3, #8]
 800236e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002370:	463b      	mov	r3, r7
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002378:	4b1f      	ldr	r3, [pc, #124]	; (80023f8 <MX_TIM1_Init+0x9c>)
 800237a:	4a20      	ldr	r2, [pc, #128]	; (80023fc <MX_TIM1_Init+0xa0>)
 800237c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800237e:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <MX_TIM1_Init+0x9c>)
 8002380:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8002384:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002386:	4b1c      	ldr	r3, [pc, #112]	; (80023f8 <MX_TIM1_Init+0x9c>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800238c:	4b1a      	ldr	r3, [pc, #104]	; (80023f8 <MX_TIM1_Init+0x9c>)
 800238e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8002392:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002394:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <MX_TIM1_Init+0x9c>)
 8002396:	2200      	movs	r2, #0
 8002398:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800239a:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <MX_TIM1_Init+0x9c>)
 800239c:	2200      	movs	r2, #0
 800239e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a0:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <MX_TIM1_Init+0x9c>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023a6:	4814      	ldr	r0, [pc, #80]	; (80023f8 <MX_TIM1_Init+0x9c>)
 80023a8:	f002 fdfe 	bl	8004fa8 <HAL_TIM_Base_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80023b2:	f000 f8f9 	bl	80025a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023bc:	f107 0308 	add.w	r3, r7, #8
 80023c0:	4619      	mov	r1, r3
 80023c2:	480d      	ldr	r0, [pc, #52]	; (80023f8 <MX_TIM1_Init+0x9c>)
 80023c4:	f002 ffa8 	bl	8005318 <HAL_TIM_ConfigClockSource>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80023ce:	f000 f8eb 	bl	80025a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d2:	2300      	movs	r3, #0
 80023d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d6:	2300      	movs	r3, #0
 80023d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023da:	463b      	mov	r3, r7
 80023dc:	4619      	mov	r1, r3
 80023de:	4806      	ldr	r0, [pc, #24]	; (80023f8 <MX_TIM1_Init+0x9c>)
 80023e0:	f003 f996 	bl	8005710 <HAL_TIMEx_MasterConfigSynchronization>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80023ea:	f000 f8dd 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000cd8 	.word	0x20000cd8
 80023fc:	40012c00 	.word	0x40012c00

08002400 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <MX_USART1_UART_Init+0x4c>)
 8002406:	4a12      	ldr	r2, [pc, #72]	; (8002450 <MX_USART1_UART_Init+0x50>)
 8002408:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800240a:	4b10      	ldr	r3, [pc, #64]	; (800244c <MX_USART1_UART_Init+0x4c>)
 800240c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002410:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002412:	4b0e      	ldr	r3, [pc, #56]	; (800244c <MX_USART1_UART_Init+0x4c>)
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <MX_USART1_UART_Init+0x4c>)
 800241a:	2200      	movs	r2, #0
 800241c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <MX_USART1_UART_Init+0x4c>)
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002424:	4b09      	ldr	r3, [pc, #36]	; (800244c <MX_USART1_UART_Init+0x4c>)
 8002426:	220c      	movs	r2, #12
 8002428:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <MX_USART1_UART_Init+0x4c>)
 800242c:	2200      	movs	r2, #0
 800242e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <MX_USART1_UART_Init+0x4c>)
 8002432:	2200      	movs	r2, #0
 8002434:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002436:	4805      	ldr	r0, [pc, #20]	; (800244c <MX_USART1_UART_Init+0x4c>)
 8002438:	f003 f9e8 	bl	800580c <HAL_UART_Init>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002442:	f000 f8b1 	bl	80025a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000d20 	.word	0x20000d20
 8002450:	40013800 	.word	0x40013800

08002454 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800245a:	f107 0310 	add.w	r3, r7, #16
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002468:	4b4b      	ldr	r3, [pc, #300]	; (8002598 <MX_GPIO_Init+0x144>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	4a4a      	ldr	r2, [pc, #296]	; (8002598 <MX_GPIO_Init+0x144>)
 800246e:	f043 0310 	orr.w	r3, r3, #16
 8002472:	6193      	str	r3, [r2, #24]
 8002474:	4b48      	ldr	r3, [pc, #288]	; (8002598 <MX_GPIO_Init+0x144>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002480:	4b45      	ldr	r3, [pc, #276]	; (8002598 <MX_GPIO_Init+0x144>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	4a44      	ldr	r2, [pc, #272]	; (8002598 <MX_GPIO_Init+0x144>)
 8002486:	f043 0320 	orr.w	r3, r3, #32
 800248a:	6193      	str	r3, [r2, #24]
 800248c:	4b42      	ldr	r3, [pc, #264]	; (8002598 <MX_GPIO_Init+0x144>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002498:	4b3f      	ldr	r3, [pc, #252]	; (8002598 <MX_GPIO_Init+0x144>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	4a3e      	ldr	r2, [pc, #248]	; (8002598 <MX_GPIO_Init+0x144>)
 800249e:	f043 0304 	orr.w	r3, r3, #4
 80024a2:	6193      	str	r3, [r2, #24]
 80024a4:	4b3c      	ldr	r3, [pc, #240]	; (8002598 <MX_GPIO_Init+0x144>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b0:	4b39      	ldr	r3, [pc, #228]	; (8002598 <MX_GPIO_Init+0x144>)
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	4a38      	ldr	r2, [pc, #224]	; (8002598 <MX_GPIO_Init+0x144>)
 80024b6:	f043 0308 	orr.w	r3, r3, #8
 80024ba:	6193      	str	r3, [r2, #24]
 80024bc:	4b36      	ldr	r3, [pc, #216]	; (8002598 <MX_GPIO_Init+0x144>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 80024c8:	2200      	movs	r2, #0
 80024ca:	21f0      	movs	r1, #240	; 0xf0
 80024cc:	4833      	ldr	r0, [pc, #204]	; (800259c <MX_GPIO_Init+0x148>)
 80024ce:	f001 f8b0 	bl	8003632 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80024d2:	2200      	movs	r2, #0
 80024d4:	f241 0130 	movw	r1, #4144	; 0x1030
 80024d8:	4831      	ldr	r0, [pc, #196]	; (80025a0 <MX_GPIO_Init+0x14c>)
 80024da:	f001 f8aa 	bl	8003632 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80024de:	2200      	movs	r2, #0
 80024e0:	f640 4107 	movw	r1, #3079	; 0xc07
 80024e4:	482f      	ldr	r0, [pc, #188]	; (80025a4 <MX_GPIO_Init+0x150>)
 80024e6:	f001 f8a4 	bl	8003632 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80024ea:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80024ee:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024f8:	f107 0310 	add.w	r3, r7, #16
 80024fc:	4619      	mov	r1, r3
 80024fe:	4828      	ldr	r0, [pc, #160]	; (80025a0 <MX_GPIO_Init+0x14c>)
 8002500:	f000 fe20 	bl	8003144 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8002504:	f248 130f 	movw	r3, #33039	; 0x810f
 8002508:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002512:	f107 0310 	add.w	r3, r7, #16
 8002516:	4619      	mov	r1, r3
 8002518:	4820      	ldr	r0, [pc, #128]	; (800259c <MX_GPIO_Init+0x148>)
 800251a:	f000 fe13 	bl	8003144 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800251e:	23f0      	movs	r3, #240	; 0xf0
 8002520:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002522:	2301      	movs	r3, #1
 8002524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	2302      	movs	r3, #2
 800252c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252e:	f107 0310 	add.w	r3, r7, #16
 8002532:	4619      	mov	r1, r3
 8002534:	4819      	ldr	r0, [pc, #100]	; (800259c <MX_GPIO_Init+0x148>)
 8002536:	f000 fe05 	bl	8003144 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800253a:	f241 0330 	movw	r3, #4144	; 0x1030
 800253e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002540:	2301      	movs	r3, #1
 8002542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002548:	2302      	movs	r3, #2
 800254a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800254c:	f107 0310 	add.w	r3, r7, #16
 8002550:	4619      	mov	r1, r3
 8002552:	4813      	ldr	r0, [pc, #76]	; (80025a0 <MX_GPIO_Init+0x14c>)
 8002554:	f000 fdf6 	bl	8003144 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8002558:	f640 4307 	movw	r3, #3079	; 0xc07
 800255c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800255e:	2301      	movs	r3, #1
 8002560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002566:	2302      	movs	r3, #2
 8002568:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256a:	f107 0310 	add.w	r3, r7, #16
 800256e:	4619      	mov	r1, r3
 8002570:	480c      	ldr	r0, [pc, #48]	; (80025a4 <MX_GPIO_Init+0x150>)
 8002572:	f000 fde7 	bl	8003144 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8002576:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800257a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002584:	f107 0310 	add.w	r3, r7, #16
 8002588:	4619      	mov	r1, r3
 800258a:	4806      	ldr	r0, [pc, #24]	; (80025a4 <MX_GPIO_Init+0x150>)
 800258c:	f000 fdda 	bl	8003144 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002590:	bf00      	nop
 8002592:	3720      	adds	r7, #32
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000
 800259c:	40010800 	.word	0x40010800
 80025a0:	40011000 	.word	0x40011000
 80025a4:	40010c00 	.word	0x40010c00

080025a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr

080025b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <HAL_MspInit+0x5c>)
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	4a14      	ldr	r2, [pc, #80]	; (8002610 <HAL_MspInit+0x5c>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	6193      	str	r3, [r2, #24]
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_MspInit+0x5c>)
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025d2:	4b0f      	ldr	r3, [pc, #60]	; (8002610 <HAL_MspInit+0x5c>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	4a0e      	ldr	r2, [pc, #56]	; (8002610 <HAL_MspInit+0x5c>)
 80025d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025dc:	61d3      	str	r3, [r2, #28]
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <HAL_MspInit+0x5c>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	607b      	str	r3, [r7, #4]
 80025e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <HAL_MspInit+0x60>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	4a04      	ldr	r2, [pc, #16]	; (8002614 <HAL_MspInit+0x60>)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002606:	bf00      	nop
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	40021000 	.word	0x40021000
 8002614:	40010000 	.word	0x40010000

08002618 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 0310 	add.w	r3, r7, #16
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1c      	ldr	r2, [pc, #112]	; (80026a4 <HAL_CAN_MspInit+0x8c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d131      	bne.n	800269c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002638:	4b1b      	ldr	r3, [pc, #108]	; (80026a8 <HAL_CAN_MspInit+0x90>)
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	4a1a      	ldr	r2, [pc, #104]	; (80026a8 <HAL_CAN_MspInit+0x90>)
 800263e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002642:	61d3      	str	r3, [r2, #28]
 8002644:	4b18      	ldr	r3, [pc, #96]	; (80026a8 <HAL_CAN_MspInit+0x90>)
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002650:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <HAL_CAN_MspInit+0x90>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	4a14      	ldr	r2, [pc, #80]	; (80026a8 <HAL_CAN_MspInit+0x90>)
 8002656:	f043 0304 	orr.w	r3, r3, #4
 800265a:	6193      	str	r3, [r2, #24]
 800265c:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_CAN_MspInit+0x90>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	60bb      	str	r3, [r7, #8]
 8002666:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002668:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800266c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002676:	f107 0310 	add.w	r3, r7, #16
 800267a:	4619      	mov	r1, r3
 800267c:	480b      	ldr	r0, [pc, #44]	; (80026ac <HAL_CAN_MspInit+0x94>)
 800267e:	f000 fd61 	bl	8003144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	2302      	movs	r3, #2
 800268a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800268c:	2303      	movs	r3, #3
 800268e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002690:	f107 0310 	add.w	r3, r7, #16
 8002694:	4619      	mov	r1, r3
 8002696:	4805      	ldr	r0, [pc, #20]	; (80026ac <HAL_CAN_MspInit+0x94>)
 8002698:	f000 fd54 	bl	8003144 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800269c:	bf00      	nop
 800269e:	3720      	adds	r7, #32
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	40006400 	.word	0x40006400
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40010800 	.word	0x40010800

080026b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b8:	f107 0310 	add.w	r3, r7, #16
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	605a      	str	r2, [r3, #4]
 80026c2:	609a      	str	r2, [r3, #8]
 80026c4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a15      	ldr	r2, [pc, #84]	; (8002720 <HAL_I2C_MspInit+0x70>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d123      	bne.n	8002718 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026d0:	4b14      	ldr	r3, [pc, #80]	; (8002724 <HAL_I2C_MspInit+0x74>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	4a13      	ldr	r2, [pc, #76]	; (8002724 <HAL_I2C_MspInit+0x74>)
 80026d6:	f043 0308 	orr.w	r3, r3, #8
 80026da:	6193      	str	r3, [r2, #24]
 80026dc:	4b11      	ldr	r3, [pc, #68]	; (8002724 <HAL_I2C_MspInit+0x74>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	f003 0308 	and.w	r3, r3, #8
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026e8:	23c0      	movs	r3, #192	; 0xc0
 80026ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ec:	2312      	movs	r3, #18
 80026ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026f0:	2303      	movs	r3, #3
 80026f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f4:	f107 0310 	add.w	r3, r7, #16
 80026f8:	4619      	mov	r1, r3
 80026fa:	480b      	ldr	r0, [pc, #44]	; (8002728 <HAL_I2C_MspInit+0x78>)
 80026fc:	f000 fd22 	bl	8003144 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002700:	4b08      	ldr	r3, [pc, #32]	; (8002724 <HAL_I2C_MspInit+0x74>)
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	4a07      	ldr	r2, [pc, #28]	; (8002724 <HAL_I2C_MspInit+0x74>)
 8002706:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800270a:	61d3      	str	r3, [r2, #28]
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <HAL_I2C_MspInit+0x74>)
 800270e:	69db      	ldr	r3, [r3, #28]
 8002710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002718:	bf00      	nop
 800271a:	3720      	adds	r7, #32
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40005400 	.word	0x40005400
 8002724:	40021000 	.word	0x40021000
 8002728:	40010c00 	.word	0x40010c00

0800272c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0a      	ldr	r2, [pc, #40]	; (8002764 <HAL_I2C_MspDeInit+0x38>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d10d      	bne.n	800275a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <HAL_I2C_MspDeInit+0x3c>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	4a09      	ldr	r2, [pc, #36]	; (8002768 <HAL_I2C_MspDeInit+0x3c>)
 8002744:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002748:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800274a:	2140      	movs	r1, #64	; 0x40
 800274c:	4807      	ldr	r0, [pc, #28]	; (800276c <HAL_I2C_MspDeInit+0x40>)
 800274e:	f000 fe8d 	bl	800346c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8002752:	2180      	movs	r1, #128	; 0x80
 8002754:	4805      	ldr	r0, [pc, #20]	; (800276c <HAL_I2C_MspDeInit+0x40>)
 8002756:	f000 fe89 	bl	800346c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40005400 	.word	0x40005400
 8002768:	40021000 	.word	0x40021000
 800276c:	40010c00 	.word	0x40010c00

08002770 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a0d      	ldr	r2, [pc, #52]	; (80027b4 <HAL_TIM_Base_MspInit+0x44>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d113      	bne.n	80027aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002782:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <HAL_TIM_Base_MspInit+0x48>)
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	4a0c      	ldr	r2, [pc, #48]	; (80027b8 <HAL_TIM_Base_MspInit+0x48>)
 8002788:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800278c:	6193      	str	r3, [r2, #24]
 800278e:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <HAL_TIM_Base_MspInit+0x48>)
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	2100      	movs	r1, #0
 800279e:	2019      	movs	r0, #25
 80027a0:	f000 fb57 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80027a4:	2019      	movs	r0, #25
 80027a6:	f000 fb70 	bl	8002e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40012c00 	.word	0x40012c00
 80027b8:	40021000 	.word	0x40021000

080027bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c4:	f107 0310 	add.w	r3, r7, #16
 80027c8:	2200      	movs	r2, #0
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	605a      	str	r2, [r3, #4]
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a20      	ldr	r2, [pc, #128]	; (8002858 <HAL_UART_MspInit+0x9c>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d139      	bne.n	8002850 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027dc:	4b1f      	ldr	r3, [pc, #124]	; (800285c <HAL_UART_MspInit+0xa0>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	4a1e      	ldr	r2, [pc, #120]	; (800285c <HAL_UART_MspInit+0xa0>)
 80027e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e6:	6193      	str	r3, [r2, #24]
 80027e8:	4b1c      	ldr	r3, [pc, #112]	; (800285c <HAL_UART_MspInit+0xa0>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f4:	4b19      	ldr	r3, [pc, #100]	; (800285c <HAL_UART_MspInit+0xa0>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	4a18      	ldr	r2, [pc, #96]	; (800285c <HAL_UART_MspInit+0xa0>)
 80027fa:	f043 0304 	orr.w	r3, r3, #4
 80027fe:	6193      	str	r3, [r2, #24]
 8002800:	4b16      	ldr	r3, [pc, #88]	; (800285c <HAL_UART_MspInit+0xa0>)
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800280c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002810:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002812:	2302      	movs	r3, #2
 8002814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002816:	2303      	movs	r3, #3
 8002818:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281a:	f107 0310 	add.w	r3, r7, #16
 800281e:	4619      	mov	r1, r3
 8002820:	480f      	ldr	r0, [pc, #60]	; (8002860 <HAL_UART_MspInit+0xa4>)
 8002822:	f000 fc8f 	bl	8003144 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002826:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800282a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002834:	f107 0310 	add.w	r3, r7, #16
 8002838:	4619      	mov	r1, r3
 800283a:	4809      	ldr	r0, [pc, #36]	; (8002860 <HAL_UART_MspInit+0xa4>)
 800283c:	f000 fc82 	bl	8003144 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002840:	2200      	movs	r2, #0
 8002842:	2100      	movs	r1, #0
 8002844:	2025      	movs	r0, #37	; 0x25
 8002846:	f000 fb04 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800284a:	2025      	movs	r0, #37	; 0x25
 800284c:	f000 fb1d 	bl	8002e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002850:	bf00      	nop
 8002852:	3720      	adds	r7, #32
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40013800 	.word	0x40013800
 800285c:	40021000 	.word	0x40021000
 8002860:	40010800 	.word	0x40010800

08002864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002868:	e7fe      	b.n	8002868 <NMI_Handler+0x4>

0800286a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800286e:	e7fe      	b.n	800286e <HardFault_Handler+0x4>

08002870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002874:	e7fe      	b.n	8002874 <MemManage_Handler+0x4>

08002876 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800287a:	e7fe      	b.n	800287a <BusFault_Handler+0x4>

0800287c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002880:	e7fe      	b.n	8002880 <UsageFault_Handler+0x4>

08002882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002882:	b480      	push	{r7}
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002886:	bf00      	nop
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr

0800288e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002892:	bf00      	nop
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800289a:	b480      	push	{r7}
 800289c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr

080028a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028aa:	f000 f8bf 	bl	8002a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028ae:	bf00      	nop
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80028b8:	4802      	ldr	r0, [pc, #8]	; (80028c4 <TIM1_UP_IRQHandler+0x10>)
 80028ba:	f002 fc25 	bl	8005108 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000cd8 	.word	0x20000cd8

080028c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80028cc:	4802      	ldr	r0, [pc, #8]	; (80028d8 <USART1_IRQHandler+0x10>)
 80028ce:	f003 f823 	bl	8005918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	20000d20 	.word	0x20000d20

080028dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028e4:	4a14      	ldr	r2, [pc, #80]	; (8002938 <_sbrk+0x5c>)
 80028e6:	4b15      	ldr	r3, [pc, #84]	; (800293c <_sbrk+0x60>)
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028f0:	4b13      	ldr	r3, [pc, #76]	; (8002940 <_sbrk+0x64>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d102      	bne.n	80028fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028f8:	4b11      	ldr	r3, [pc, #68]	; (8002940 <_sbrk+0x64>)
 80028fa:	4a12      	ldr	r2, [pc, #72]	; (8002944 <_sbrk+0x68>)
 80028fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028fe:	4b10      	ldr	r3, [pc, #64]	; (8002940 <_sbrk+0x64>)
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4413      	add	r3, r2
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	429a      	cmp	r2, r3
 800290a:	d207      	bcs.n	800291c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800290c:	f003 fde2 	bl	80064d4 <__errno>
 8002910:	4603      	mov	r3, r0
 8002912:	220c      	movs	r2, #12
 8002914:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002916:	f04f 33ff 	mov.w	r3, #4294967295
 800291a:	e009      	b.n	8002930 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <_sbrk+0x64>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002922:	4b07      	ldr	r3, [pc, #28]	; (8002940 <_sbrk+0x64>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4413      	add	r3, r2
 800292a:	4a05      	ldr	r2, [pc, #20]	; (8002940 <_sbrk+0x64>)
 800292c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800292e:	68fb      	ldr	r3, [r7, #12]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	2000c000 	.word	0x2000c000
 800293c:	00000400 	.word	0x00000400
 8002940:	20000d68 	.word	0x20000d68
 8002944:	20000eb8 	.word	0x20000eb8

08002948 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	bc80      	pop	{r7}
 8002952:	4770      	bx	lr

08002954 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002954:	480c      	ldr	r0, [pc, #48]	; (8002988 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002956:	490d      	ldr	r1, [pc, #52]	; (800298c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002958:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800295a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800295c:	e002      	b.n	8002964 <LoopCopyDataInit>

0800295e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800295e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002962:	3304      	adds	r3, #4

08002964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002968:	d3f9      	bcc.n	800295e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800296a:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800296c:	4c0a      	ldr	r4, [pc, #40]	; (8002998 <LoopFillZerobss+0x22>)
  movs r3, #0
 800296e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002970:	e001      	b.n	8002976 <LoopFillZerobss>

08002972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002974:	3204      	adds	r2, #4

08002976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002978:	d3fb      	bcc.n	8002972 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800297a:	f7ff ffe5 	bl	8002948 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800297e:	f003 fdaf 	bl	80064e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002982:	f7ff fb9b 	bl	80020bc <main>
  bx lr
 8002986:	4770      	bx	lr
  ldr r0, =_sdata
 8002988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800298c:	20000970 	.word	0x20000970
  ldr r2, =_sidata
 8002990:	08007b34 	.word	0x08007b34
  ldr r2, =_sbss
 8002994:	20000970 	.word	0x20000970
  ldr r4, =_ebss
 8002998:	20000eb8 	.word	0x20000eb8

0800299c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800299c:	e7fe      	b.n	800299c <ADC1_2_IRQHandler>
	...

080029a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029a4:	4b08      	ldr	r3, [pc, #32]	; (80029c8 <HAL_Init+0x28>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a07      	ldr	r2, [pc, #28]	; (80029c8 <HAL_Init+0x28>)
 80029aa:	f043 0310 	orr.w	r3, r3, #16
 80029ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029b0:	2003      	movs	r0, #3
 80029b2:	f000 fa43 	bl	8002e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029b6:	200f      	movs	r0, #15
 80029b8:	f000 f808 	bl	80029cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029bc:	f7ff fdfa 	bl	80025b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40022000 	.word	0x40022000

080029cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029d4:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <HAL_InitTick+0x54>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b12      	ldr	r3, [pc, #72]	; (8002a24 <HAL_InitTick+0x58>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	4619      	mov	r1, r3
 80029de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ea:	4618      	mov	r0, r3
 80029ec:	f000 fa5b 	bl	8002ea6 <HAL_SYSTICK_Config>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e00e      	b.n	8002a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b0f      	cmp	r3, #15
 80029fe:	d80a      	bhi.n	8002a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a00:	2200      	movs	r2, #0
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	f04f 30ff 	mov.w	r0, #4294967295
 8002a08:	f000 fa23 	bl	8002e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a0c:	4a06      	ldr	r2, [pc, #24]	; (8002a28 <HAL_InitTick+0x5c>)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	e000      	b.n	8002a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	20000914 	.word	0x20000914
 8002a24:	2000091c 	.word	0x2000091c
 8002a28:	20000918 	.word	0x20000918

08002a2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a30:	4b05      	ldr	r3, [pc, #20]	; (8002a48 <HAL_IncTick+0x1c>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	461a      	mov	r2, r3
 8002a36:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_IncTick+0x20>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a03      	ldr	r2, [pc, #12]	; (8002a4c <HAL_IncTick+0x20>)
 8002a3e:	6013      	str	r3, [r2, #0]
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	2000091c 	.word	0x2000091c
 8002a4c:	20000d6c 	.word	0x20000d6c

08002a50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return uwTick;
 8002a54:	4b02      	ldr	r3, [pc, #8]	; (8002a60 <HAL_GetTick+0x10>)
 8002a56:	681b      	ldr	r3, [r3, #0]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr
 8002a60:	20000d6c 	.word	0x20000d6c

08002a64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a6c:	f7ff fff0 	bl	8002a50 <HAL_GetTick>
 8002a70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d005      	beq.n	8002a8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a7e:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <HAL_Delay+0x44>)
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	461a      	mov	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4413      	add	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a8a:	bf00      	nop
 8002a8c:	f7ff ffe0 	bl	8002a50 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d8f7      	bhi.n	8002a8c <HAL_Delay+0x28>
  {
  }
}
 8002a9c:	bf00      	nop
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	2000091c 	.word	0x2000091c

08002aac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e0ed      	b.n	8002c9a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d102      	bne.n	8002ad0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff fda4 	bl	8002618 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0201 	orr.w	r2, r2, #1
 8002ade:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ae0:	f7ff ffb6 	bl	8002a50 <HAL_GetTick>
 8002ae4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ae6:	e012      	b.n	8002b0e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ae8:	f7ff ffb2 	bl	8002a50 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b0a      	cmp	r3, #10
 8002af4:	d90b      	bls.n	8002b0e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2205      	movs	r2, #5
 8002b06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e0c5      	b.n	8002c9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0e5      	beq.n	8002ae8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0202 	bic.w	r2, r2, #2
 8002b2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b2c:	f7ff ff90 	bl	8002a50 <HAL_GetTick>
 8002b30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b32:	e012      	b.n	8002b5a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b34:	f7ff ff8c 	bl	8002a50 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b0a      	cmp	r3, #10
 8002b40:	d90b      	bls.n	8002b5a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2205      	movs	r2, #5
 8002b52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e09f      	b.n	8002c9a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1e5      	bne.n	8002b34 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	7e1b      	ldrb	r3, [r3, #24]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d108      	bne.n	8002b82 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	e007      	b.n	8002b92 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b90:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	7e5b      	ldrb	r3, [r3, #25]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d108      	bne.n	8002bac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	e007      	b.n	8002bbc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	7e9b      	ldrb	r3, [r3, #26]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d108      	bne.n	8002bd6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0220 	orr.w	r2, r2, #32
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	e007      	b.n	8002be6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0220 	bic.w	r2, r2, #32
 8002be4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	7edb      	ldrb	r3, [r3, #27]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d108      	bne.n	8002c00 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0210 	bic.w	r2, r2, #16
 8002bfc:	601a      	str	r2, [r3, #0]
 8002bfe:	e007      	b.n	8002c10 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0210 	orr.w	r2, r2, #16
 8002c0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	7f1b      	ldrb	r3, [r3, #28]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d108      	bne.n	8002c2a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f042 0208 	orr.w	r2, r2, #8
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	e007      	b.n	8002c3a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0208 	bic.w	r2, r2, #8
 8002c38:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	7f5b      	ldrb	r3, [r3, #29]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d108      	bne.n	8002c54 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0204 	orr.w	r2, r2, #4
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	e007      	b.n	8002c64 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0204 	bic.w	r2, r2, #4
 8002c62:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	431a      	orrs	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	695b      	ldr	r3, [r3, #20]
 8002c78:	ea42 0103 	orr.w	r1, r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	1e5a      	subs	r2, r3, #1
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cba:	68ba      	ldr	r2, [r7, #8]
 8002cbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ccc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cd6:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	60d3      	str	r3, [r2, #12]
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf0:	4b04      	ldr	r3, [pc, #16]	; (8002d04 <__NVIC_GetPriorityGrouping+0x18>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	0a1b      	lsrs	r3, r3, #8
 8002cf6:	f003 0307 	and.w	r3, r3, #7
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	4603      	mov	r3, r0
 8002d10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	db0b      	blt.n	8002d32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d1a:	79fb      	ldrb	r3, [r7, #7]
 8002d1c:	f003 021f 	and.w	r2, r3, #31
 8002d20:	4906      	ldr	r1, [pc, #24]	; (8002d3c <__NVIC_EnableIRQ+0x34>)
 8002d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d26:	095b      	lsrs	r3, r3, #5
 8002d28:	2001      	movs	r0, #1
 8002d2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr
 8002d3c:	e000e100 	.word	0xe000e100

08002d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	6039      	str	r1, [r7, #0]
 8002d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	db0a      	blt.n	8002d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	490c      	ldr	r1, [pc, #48]	; (8002d8c <__NVIC_SetPriority+0x4c>)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	0112      	lsls	r2, r2, #4
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	440b      	add	r3, r1
 8002d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d68:	e00a      	b.n	8002d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4908      	ldr	r1, [pc, #32]	; (8002d90 <__NVIC_SetPriority+0x50>)
 8002d70:	79fb      	ldrb	r3, [r7, #7]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	3b04      	subs	r3, #4
 8002d78:	0112      	lsls	r2, r2, #4
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	761a      	strb	r2, [r3, #24]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	e000e100 	.word	0xe000e100
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b089      	sub	sp, #36	; 0x24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	f1c3 0307 	rsb	r3, r3, #7
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	bf28      	it	cs
 8002db2:	2304      	movcs	r3, #4
 8002db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	3304      	adds	r3, #4
 8002dba:	2b06      	cmp	r3, #6
 8002dbc:	d902      	bls.n	8002dc4 <NVIC_EncodePriority+0x30>
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3b03      	subs	r3, #3
 8002dc2:	e000      	b.n	8002dc6 <NVIC_EncodePriority+0x32>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43da      	mvns	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	401a      	ands	r2, r3
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	fa01 f303 	lsl.w	r3, r1, r3
 8002de6:	43d9      	mvns	r1, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	4313      	orrs	r3, r2
         );
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3724      	adds	r7, #36	; 0x24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bc80      	pop	{r7}
 8002df6:	4770      	bx	lr

08002df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e08:	d301      	bcc.n	8002e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00f      	b.n	8002e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <SysTick_Config+0x40>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e16:	210f      	movs	r1, #15
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1c:	f7ff ff90 	bl	8002d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <SysTick_Config+0x40>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e26:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <SysTick_Config+0x40>)
 8002e28:	2207      	movs	r2, #7
 8002e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	e000e010 	.word	0xe000e010

08002e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ff2d 	bl	8002ca4 <__NVIC_SetPriorityGrouping>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e64:	f7ff ff42 	bl	8002cec <__NVIC_GetPriorityGrouping>
 8002e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	6978      	ldr	r0, [r7, #20]
 8002e70:	f7ff ff90 	bl	8002d94 <NVIC_EncodePriority>
 8002e74:	4602      	mov	r2, r0
 8002e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff5f 	bl	8002d40 <__NVIC_SetPriority>
}
 8002e82:	bf00      	nop
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4603      	mov	r3, r0
 8002e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff35 	bl	8002d08 <__NVIC_EnableIRQ>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff ffa2 	bl	8002df8 <SysTick_Config>
 8002eb4:	4603      	mov	r3, r0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b085      	sub	sp, #20
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d008      	beq.n	8002ee8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2204      	movs	r2, #4
 8002eda:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e020      	b.n	8002f2a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 020e 	bic.w	r2, r2, #14
 8002ef6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f10:	2101      	movs	r1, #1
 8002f12:	fa01 f202 	lsl.w	r2, r1, r2
 8002f16:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d005      	beq.n	8002f58 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2204      	movs	r2, #4
 8002f50:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
 8002f56:	e0d6      	b.n	8003106 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 020e 	bic.w	r2, r2, #14
 8002f66:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0201 	bic.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	4b64      	ldr	r3, [pc, #400]	; (8003110 <HAL_DMA_Abort_IT+0x1dc>)
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d958      	bls.n	8003036 <HAL_DMA_Abort_IT+0x102>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a62      	ldr	r2, [pc, #392]	; (8003114 <HAL_DMA_Abort_IT+0x1e0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d04f      	beq.n	800302e <HAL_DMA_Abort_IT+0xfa>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a61      	ldr	r2, [pc, #388]	; (8003118 <HAL_DMA_Abort_IT+0x1e4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d048      	beq.n	800302a <HAL_DMA_Abort_IT+0xf6>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a5f      	ldr	r2, [pc, #380]	; (800311c <HAL_DMA_Abort_IT+0x1e8>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d040      	beq.n	8003024 <HAL_DMA_Abort_IT+0xf0>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a5e      	ldr	r2, [pc, #376]	; (8003120 <HAL_DMA_Abort_IT+0x1ec>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d038      	beq.n	800301e <HAL_DMA_Abort_IT+0xea>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a5c      	ldr	r2, [pc, #368]	; (8003124 <HAL_DMA_Abort_IT+0x1f0>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d030      	beq.n	8003018 <HAL_DMA_Abort_IT+0xe4>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a5b      	ldr	r2, [pc, #364]	; (8003128 <HAL_DMA_Abort_IT+0x1f4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d028      	beq.n	8003012 <HAL_DMA_Abort_IT+0xde>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a52      	ldr	r2, [pc, #328]	; (8003110 <HAL_DMA_Abort_IT+0x1dc>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d020      	beq.n	800300c <HAL_DMA_Abort_IT+0xd8>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a57      	ldr	r2, [pc, #348]	; (800312c <HAL_DMA_Abort_IT+0x1f8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d019      	beq.n	8003008 <HAL_DMA_Abort_IT+0xd4>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a55      	ldr	r2, [pc, #340]	; (8003130 <HAL_DMA_Abort_IT+0x1fc>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d012      	beq.n	8003004 <HAL_DMA_Abort_IT+0xd0>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a54      	ldr	r2, [pc, #336]	; (8003134 <HAL_DMA_Abort_IT+0x200>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00a      	beq.n	8002ffe <HAL_DMA_Abort_IT+0xca>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a52      	ldr	r2, [pc, #328]	; (8003138 <HAL_DMA_Abort_IT+0x204>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d102      	bne.n	8002ff8 <HAL_DMA_Abort_IT+0xc4>
 8002ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ff6:	e01b      	b.n	8003030 <HAL_DMA_Abort_IT+0xfc>
 8002ff8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ffc:	e018      	b.n	8003030 <HAL_DMA_Abort_IT+0xfc>
 8002ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003002:	e015      	b.n	8003030 <HAL_DMA_Abort_IT+0xfc>
 8003004:	2310      	movs	r3, #16
 8003006:	e013      	b.n	8003030 <HAL_DMA_Abort_IT+0xfc>
 8003008:	2301      	movs	r3, #1
 800300a:	e011      	b.n	8003030 <HAL_DMA_Abort_IT+0xfc>
 800300c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003010:	e00e      	b.n	8003030 <HAL_DMA_Abort_IT+0xfc>
 8003012:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003016:	e00b      	b.n	8003030 <HAL_DMA_Abort_IT+0xfc>
 8003018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800301c:	e008      	b.n	8003030 <HAL_DMA_Abort_IT+0xfc>
 800301e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003022:	e005      	b.n	8003030 <HAL_DMA_Abort_IT+0xfc>
 8003024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003028:	e002      	b.n	8003030 <HAL_DMA_Abort_IT+0xfc>
 800302a:	2310      	movs	r3, #16
 800302c:	e000      	b.n	8003030 <HAL_DMA_Abort_IT+0xfc>
 800302e:	2301      	movs	r3, #1
 8003030:	4a42      	ldr	r2, [pc, #264]	; (800313c <HAL_DMA_Abort_IT+0x208>)
 8003032:	6053      	str	r3, [r2, #4]
 8003034:	e057      	b.n	80030e6 <HAL_DMA_Abort_IT+0x1b2>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a36      	ldr	r2, [pc, #216]	; (8003114 <HAL_DMA_Abort_IT+0x1e0>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d04f      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x1ac>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a34      	ldr	r2, [pc, #208]	; (8003118 <HAL_DMA_Abort_IT+0x1e4>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d048      	beq.n	80030dc <HAL_DMA_Abort_IT+0x1a8>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a33      	ldr	r2, [pc, #204]	; (800311c <HAL_DMA_Abort_IT+0x1e8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d040      	beq.n	80030d6 <HAL_DMA_Abort_IT+0x1a2>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a31      	ldr	r2, [pc, #196]	; (8003120 <HAL_DMA_Abort_IT+0x1ec>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d038      	beq.n	80030d0 <HAL_DMA_Abort_IT+0x19c>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a30      	ldr	r2, [pc, #192]	; (8003124 <HAL_DMA_Abort_IT+0x1f0>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d030      	beq.n	80030ca <HAL_DMA_Abort_IT+0x196>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a2e      	ldr	r2, [pc, #184]	; (8003128 <HAL_DMA_Abort_IT+0x1f4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d028      	beq.n	80030c4 <HAL_DMA_Abort_IT+0x190>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a26      	ldr	r2, [pc, #152]	; (8003110 <HAL_DMA_Abort_IT+0x1dc>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d020      	beq.n	80030be <HAL_DMA_Abort_IT+0x18a>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a2a      	ldr	r2, [pc, #168]	; (800312c <HAL_DMA_Abort_IT+0x1f8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d019      	beq.n	80030ba <HAL_DMA_Abort_IT+0x186>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a29      	ldr	r2, [pc, #164]	; (8003130 <HAL_DMA_Abort_IT+0x1fc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d012      	beq.n	80030b6 <HAL_DMA_Abort_IT+0x182>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a27      	ldr	r2, [pc, #156]	; (8003134 <HAL_DMA_Abort_IT+0x200>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00a      	beq.n	80030b0 <HAL_DMA_Abort_IT+0x17c>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a26      	ldr	r2, [pc, #152]	; (8003138 <HAL_DMA_Abort_IT+0x204>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d102      	bne.n	80030aa <HAL_DMA_Abort_IT+0x176>
 80030a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030a8:	e01b      	b.n	80030e2 <HAL_DMA_Abort_IT+0x1ae>
 80030aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ae:	e018      	b.n	80030e2 <HAL_DMA_Abort_IT+0x1ae>
 80030b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030b4:	e015      	b.n	80030e2 <HAL_DMA_Abort_IT+0x1ae>
 80030b6:	2310      	movs	r3, #16
 80030b8:	e013      	b.n	80030e2 <HAL_DMA_Abort_IT+0x1ae>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e011      	b.n	80030e2 <HAL_DMA_Abort_IT+0x1ae>
 80030be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030c2:	e00e      	b.n	80030e2 <HAL_DMA_Abort_IT+0x1ae>
 80030c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030c8:	e00b      	b.n	80030e2 <HAL_DMA_Abort_IT+0x1ae>
 80030ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ce:	e008      	b.n	80030e2 <HAL_DMA_Abort_IT+0x1ae>
 80030d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030d4:	e005      	b.n	80030e2 <HAL_DMA_Abort_IT+0x1ae>
 80030d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030da:	e002      	b.n	80030e2 <HAL_DMA_Abort_IT+0x1ae>
 80030dc:	2310      	movs	r3, #16
 80030de:	e000      	b.n	80030e2 <HAL_DMA_Abort_IT+0x1ae>
 80030e0:	2301      	movs	r3, #1
 80030e2:	4a17      	ldr	r2, [pc, #92]	; (8003140 <HAL_DMA_Abort_IT+0x20c>)
 80030e4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	4798      	blx	r3
    } 
  }
  return status;
 8003106:	7bfb      	ldrb	r3, [r7, #15]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40020080 	.word	0x40020080
 8003114:	40020008 	.word	0x40020008
 8003118:	4002001c 	.word	0x4002001c
 800311c:	40020030 	.word	0x40020030
 8003120:	40020044 	.word	0x40020044
 8003124:	40020058 	.word	0x40020058
 8003128:	4002006c 	.word	0x4002006c
 800312c:	40020408 	.word	0x40020408
 8003130:	4002041c 	.word	0x4002041c
 8003134:	40020430 	.word	0x40020430
 8003138:	40020444 	.word	0x40020444
 800313c:	40020400 	.word	0x40020400
 8003140:	40020000 	.word	0x40020000

08003144 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003144:	b480      	push	{r7}
 8003146:	b08b      	sub	sp, #44	; 0x2c
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800314e:	2300      	movs	r3, #0
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003152:	2300      	movs	r3, #0
 8003154:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003156:	e179      	b.n	800344c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003158:	2201      	movs	r2, #1
 800315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69fa      	ldr	r2, [r7, #28]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	429a      	cmp	r2, r3
 8003172:	f040 8168 	bne.w	8003446 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	4a96      	ldr	r2, [pc, #600]	; (80033d4 <HAL_GPIO_Init+0x290>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d05e      	beq.n	800323e <HAL_GPIO_Init+0xfa>
 8003180:	4a94      	ldr	r2, [pc, #592]	; (80033d4 <HAL_GPIO_Init+0x290>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d875      	bhi.n	8003272 <HAL_GPIO_Init+0x12e>
 8003186:	4a94      	ldr	r2, [pc, #592]	; (80033d8 <HAL_GPIO_Init+0x294>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d058      	beq.n	800323e <HAL_GPIO_Init+0xfa>
 800318c:	4a92      	ldr	r2, [pc, #584]	; (80033d8 <HAL_GPIO_Init+0x294>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d86f      	bhi.n	8003272 <HAL_GPIO_Init+0x12e>
 8003192:	4a92      	ldr	r2, [pc, #584]	; (80033dc <HAL_GPIO_Init+0x298>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d052      	beq.n	800323e <HAL_GPIO_Init+0xfa>
 8003198:	4a90      	ldr	r2, [pc, #576]	; (80033dc <HAL_GPIO_Init+0x298>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d869      	bhi.n	8003272 <HAL_GPIO_Init+0x12e>
 800319e:	4a90      	ldr	r2, [pc, #576]	; (80033e0 <HAL_GPIO_Init+0x29c>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d04c      	beq.n	800323e <HAL_GPIO_Init+0xfa>
 80031a4:	4a8e      	ldr	r2, [pc, #568]	; (80033e0 <HAL_GPIO_Init+0x29c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d863      	bhi.n	8003272 <HAL_GPIO_Init+0x12e>
 80031aa:	4a8e      	ldr	r2, [pc, #568]	; (80033e4 <HAL_GPIO_Init+0x2a0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d046      	beq.n	800323e <HAL_GPIO_Init+0xfa>
 80031b0:	4a8c      	ldr	r2, [pc, #560]	; (80033e4 <HAL_GPIO_Init+0x2a0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d85d      	bhi.n	8003272 <HAL_GPIO_Init+0x12e>
 80031b6:	2b12      	cmp	r3, #18
 80031b8:	d82a      	bhi.n	8003210 <HAL_GPIO_Init+0xcc>
 80031ba:	2b12      	cmp	r3, #18
 80031bc:	d859      	bhi.n	8003272 <HAL_GPIO_Init+0x12e>
 80031be:	a201      	add	r2, pc, #4	; (adr r2, 80031c4 <HAL_GPIO_Init+0x80>)
 80031c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c4:	0800323f 	.word	0x0800323f
 80031c8:	08003219 	.word	0x08003219
 80031cc:	0800322b 	.word	0x0800322b
 80031d0:	0800326d 	.word	0x0800326d
 80031d4:	08003273 	.word	0x08003273
 80031d8:	08003273 	.word	0x08003273
 80031dc:	08003273 	.word	0x08003273
 80031e0:	08003273 	.word	0x08003273
 80031e4:	08003273 	.word	0x08003273
 80031e8:	08003273 	.word	0x08003273
 80031ec:	08003273 	.word	0x08003273
 80031f0:	08003273 	.word	0x08003273
 80031f4:	08003273 	.word	0x08003273
 80031f8:	08003273 	.word	0x08003273
 80031fc:	08003273 	.word	0x08003273
 8003200:	08003273 	.word	0x08003273
 8003204:	08003273 	.word	0x08003273
 8003208:	08003221 	.word	0x08003221
 800320c:	08003235 	.word	0x08003235
 8003210:	4a75      	ldr	r2, [pc, #468]	; (80033e8 <HAL_GPIO_Init+0x2a4>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d013      	beq.n	800323e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003216:	e02c      	b.n	8003272 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	623b      	str	r3, [r7, #32]
          break;
 800321e:	e029      	b.n	8003274 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	3304      	adds	r3, #4
 8003226:	623b      	str	r3, [r7, #32]
          break;
 8003228:	e024      	b.n	8003274 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	3308      	adds	r3, #8
 8003230:	623b      	str	r3, [r7, #32]
          break;
 8003232:	e01f      	b.n	8003274 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	330c      	adds	r3, #12
 800323a:	623b      	str	r3, [r7, #32]
          break;
 800323c:	e01a      	b.n	8003274 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d102      	bne.n	800324c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003246:	2304      	movs	r3, #4
 8003248:	623b      	str	r3, [r7, #32]
          break;
 800324a:	e013      	b.n	8003274 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d105      	bne.n	8003260 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003254:	2308      	movs	r3, #8
 8003256:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	69fa      	ldr	r2, [r7, #28]
 800325c:	611a      	str	r2, [r3, #16]
          break;
 800325e:	e009      	b.n	8003274 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003260:	2308      	movs	r3, #8
 8003262:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69fa      	ldr	r2, [r7, #28]
 8003268:	615a      	str	r2, [r3, #20]
          break;
 800326a:	e003      	b.n	8003274 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800326c:	2300      	movs	r3, #0
 800326e:	623b      	str	r3, [r7, #32]
          break;
 8003270:	e000      	b.n	8003274 <HAL_GPIO_Init+0x130>
          break;
 8003272:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2bff      	cmp	r3, #255	; 0xff
 8003278:	d801      	bhi.n	800327e <HAL_GPIO_Init+0x13a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	e001      	b.n	8003282 <HAL_GPIO_Init+0x13e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3304      	adds	r3, #4
 8003282:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2bff      	cmp	r3, #255	; 0xff
 8003288:	d802      	bhi.n	8003290 <HAL_GPIO_Init+0x14c>
 800328a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	e002      	b.n	8003296 <HAL_GPIO_Init+0x152>
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	3b08      	subs	r3, #8
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	210f      	movs	r1, #15
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	fa01 f303 	lsl.w	r3, r1, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	401a      	ands	r2, r3
 80032a8:	6a39      	ldr	r1, [r7, #32]
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	fa01 f303 	lsl.w	r3, r1, r3
 80032b0:	431a      	orrs	r2, r3
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 80c1 	beq.w	8003446 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032c4:	4b49      	ldr	r3, [pc, #292]	; (80033ec <HAL_GPIO_Init+0x2a8>)
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	4a48      	ldr	r2, [pc, #288]	; (80033ec <HAL_GPIO_Init+0x2a8>)
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	6193      	str	r3, [r2, #24]
 80032d0:	4b46      	ldr	r3, [pc, #280]	; (80033ec <HAL_GPIO_Init+0x2a8>)
 80032d2:	699b      	ldr	r3, [r3, #24]
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032dc:	4a44      	ldr	r2, [pc, #272]	; (80033f0 <HAL_GPIO_Init+0x2ac>)
 80032de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e0:	089b      	lsrs	r3, r3, #2
 80032e2:	3302      	adds	r3, #2
 80032e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	f003 0303 	and.w	r3, r3, #3
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	220f      	movs	r2, #15
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	43db      	mvns	r3, r3
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	4013      	ands	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a3c      	ldr	r2, [pc, #240]	; (80033f4 <HAL_GPIO_Init+0x2b0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d01f      	beq.n	8003348 <HAL_GPIO_Init+0x204>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a3b      	ldr	r2, [pc, #236]	; (80033f8 <HAL_GPIO_Init+0x2b4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d019      	beq.n	8003344 <HAL_GPIO_Init+0x200>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a3a      	ldr	r2, [pc, #232]	; (80033fc <HAL_GPIO_Init+0x2b8>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d013      	beq.n	8003340 <HAL_GPIO_Init+0x1fc>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a39      	ldr	r2, [pc, #228]	; (8003400 <HAL_GPIO_Init+0x2bc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00d      	beq.n	800333c <HAL_GPIO_Init+0x1f8>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a38      	ldr	r2, [pc, #224]	; (8003404 <HAL_GPIO_Init+0x2c0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d007      	beq.n	8003338 <HAL_GPIO_Init+0x1f4>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a37      	ldr	r2, [pc, #220]	; (8003408 <HAL_GPIO_Init+0x2c4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d101      	bne.n	8003334 <HAL_GPIO_Init+0x1f0>
 8003330:	2305      	movs	r3, #5
 8003332:	e00a      	b.n	800334a <HAL_GPIO_Init+0x206>
 8003334:	2306      	movs	r3, #6
 8003336:	e008      	b.n	800334a <HAL_GPIO_Init+0x206>
 8003338:	2304      	movs	r3, #4
 800333a:	e006      	b.n	800334a <HAL_GPIO_Init+0x206>
 800333c:	2303      	movs	r3, #3
 800333e:	e004      	b.n	800334a <HAL_GPIO_Init+0x206>
 8003340:	2302      	movs	r3, #2
 8003342:	e002      	b.n	800334a <HAL_GPIO_Init+0x206>
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <HAL_GPIO_Init+0x206>
 8003348:	2300      	movs	r3, #0
 800334a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800334c:	f002 0203 	and.w	r2, r2, #3
 8003350:	0092      	lsls	r2, r2, #2
 8003352:	4093      	lsls	r3, r2
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800335a:	4925      	ldr	r1, [pc, #148]	; (80033f0 <HAL_GPIO_Init+0x2ac>)
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	089b      	lsrs	r3, r3, #2
 8003360:	3302      	adds	r3, #2
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d006      	beq.n	8003382 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003374:	4b25      	ldr	r3, [pc, #148]	; (800340c <HAL_GPIO_Init+0x2c8>)
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	4924      	ldr	r1, [pc, #144]	; (800340c <HAL_GPIO_Init+0x2c8>)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	4313      	orrs	r3, r2
 800337e:	608b      	str	r3, [r1, #8]
 8003380:	e006      	b.n	8003390 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003382:	4b22      	ldr	r3, [pc, #136]	; (800340c <HAL_GPIO_Init+0x2c8>)
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	43db      	mvns	r3, r3
 800338a:	4920      	ldr	r1, [pc, #128]	; (800340c <HAL_GPIO_Init+0x2c8>)
 800338c:	4013      	ands	r3, r2
 800338e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d006      	beq.n	80033aa <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800339c:	4b1b      	ldr	r3, [pc, #108]	; (800340c <HAL_GPIO_Init+0x2c8>)
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	491a      	ldr	r1, [pc, #104]	; (800340c <HAL_GPIO_Init+0x2c8>)
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60cb      	str	r3, [r1, #12]
 80033a8:	e006      	b.n	80033b8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033aa:	4b18      	ldr	r3, [pc, #96]	; (800340c <HAL_GPIO_Init+0x2c8>)
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	43db      	mvns	r3, r3
 80033b2:	4916      	ldr	r1, [pc, #88]	; (800340c <HAL_GPIO_Init+0x2c8>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d025      	beq.n	8003410 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033c4:	4b11      	ldr	r3, [pc, #68]	; (800340c <HAL_GPIO_Init+0x2c8>)
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	4910      	ldr	r1, [pc, #64]	; (800340c <HAL_GPIO_Init+0x2c8>)
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	604b      	str	r3, [r1, #4]
 80033d0:	e025      	b.n	800341e <HAL_GPIO_Init+0x2da>
 80033d2:	bf00      	nop
 80033d4:	10320000 	.word	0x10320000
 80033d8:	10310000 	.word	0x10310000
 80033dc:	10220000 	.word	0x10220000
 80033e0:	10210000 	.word	0x10210000
 80033e4:	10120000 	.word	0x10120000
 80033e8:	10110000 	.word	0x10110000
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40010000 	.word	0x40010000
 80033f4:	40010800 	.word	0x40010800
 80033f8:	40010c00 	.word	0x40010c00
 80033fc:	40011000 	.word	0x40011000
 8003400:	40011400 	.word	0x40011400
 8003404:	40011800 	.word	0x40011800
 8003408:	40011c00 	.word	0x40011c00
 800340c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003410:	4b15      	ldr	r3, [pc, #84]	; (8003468 <HAL_GPIO_Init+0x324>)
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	43db      	mvns	r3, r3
 8003418:	4913      	ldr	r1, [pc, #76]	; (8003468 <HAL_GPIO_Init+0x324>)
 800341a:	4013      	ands	r3, r2
 800341c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d006      	beq.n	8003438 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800342a:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <HAL_GPIO_Init+0x324>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	490e      	ldr	r1, [pc, #56]	; (8003468 <HAL_GPIO_Init+0x324>)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	600b      	str	r3, [r1, #0]
 8003436:	e006      	b.n	8003446 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <HAL_GPIO_Init+0x324>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	43db      	mvns	r3, r3
 8003440:	4909      	ldr	r1, [pc, #36]	; (8003468 <HAL_GPIO_Init+0x324>)
 8003442:	4013      	ands	r3, r2
 8003444:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	3301      	adds	r3, #1
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	fa22 f303 	lsr.w	r3, r2, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	f47f ae7e 	bne.w	8003158 <HAL_GPIO_Init+0x14>
  }
}
 800345c:	bf00      	nop
 800345e:	bf00      	nop
 8003460:	372c      	adds	r7, #44	; 0x2c
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr
 8003468:	40010400 	.word	0x40010400

0800346c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800346c:	b480      	push	{r7}
 800346e:	b089      	sub	sp, #36	; 0x24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800347a:	e0a6      	b.n	80035ca <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800347c:	2201      	movs	r2, #1
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	4013      	ands	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 8099 	beq.w	80035c4 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8003492:	4a54      	ldr	r2, [pc, #336]	; (80035e4 <HAL_GPIO_DeInit+0x178>)
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	089b      	lsrs	r3, r3, #2
 8003498:	3302      	adds	r3, #2
 800349a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800349e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	220f      	movs	r2, #15
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4013      	ands	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a4c      	ldr	r2, [pc, #304]	; (80035e8 <HAL_GPIO_DeInit+0x17c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d01f      	beq.n	80034fc <HAL_GPIO_DeInit+0x90>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a4b      	ldr	r2, [pc, #300]	; (80035ec <HAL_GPIO_DeInit+0x180>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d019      	beq.n	80034f8 <HAL_GPIO_DeInit+0x8c>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a4a      	ldr	r2, [pc, #296]	; (80035f0 <HAL_GPIO_DeInit+0x184>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d013      	beq.n	80034f4 <HAL_GPIO_DeInit+0x88>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a49      	ldr	r2, [pc, #292]	; (80035f4 <HAL_GPIO_DeInit+0x188>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00d      	beq.n	80034f0 <HAL_GPIO_DeInit+0x84>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a48      	ldr	r2, [pc, #288]	; (80035f8 <HAL_GPIO_DeInit+0x18c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d007      	beq.n	80034ec <HAL_GPIO_DeInit+0x80>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a47      	ldr	r2, [pc, #284]	; (80035fc <HAL_GPIO_DeInit+0x190>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d101      	bne.n	80034e8 <HAL_GPIO_DeInit+0x7c>
 80034e4:	2305      	movs	r3, #5
 80034e6:	e00a      	b.n	80034fe <HAL_GPIO_DeInit+0x92>
 80034e8:	2306      	movs	r3, #6
 80034ea:	e008      	b.n	80034fe <HAL_GPIO_DeInit+0x92>
 80034ec:	2304      	movs	r3, #4
 80034ee:	e006      	b.n	80034fe <HAL_GPIO_DeInit+0x92>
 80034f0:	2303      	movs	r3, #3
 80034f2:	e004      	b.n	80034fe <HAL_GPIO_DeInit+0x92>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e002      	b.n	80034fe <HAL_GPIO_DeInit+0x92>
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <HAL_GPIO_DeInit+0x92>
 80034fc:	2300      	movs	r3, #0
 80034fe:	69fa      	ldr	r2, [r7, #28]
 8003500:	f002 0203 	and.w	r2, r2, #3
 8003504:	0092      	lsls	r2, r2, #2
 8003506:	4093      	lsls	r3, r2
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	429a      	cmp	r2, r3
 800350c:	d132      	bne.n	8003574 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800350e:	4b3c      	ldr	r3, [pc, #240]	; (8003600 <HAL_GPIO_DeInit+0x194>)
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	43db      	mvns	r3, r3
 8003516:	493a      	ldr	r1, [pc, #232]	; (8003600 <HAL_GPIO_DeInit+0x194>)
 8003518:	4013      	ands	r3, r2
 800351a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800351c:	4b38      	ldr	r3, [pc, #224]	; (8003600 <HAL_GPIO_DeInit+0x194>)
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	43db      	mvns	r3, r3
 8003524:	4936      	ldr	r1, [pc, #216]	; (8003600 <HAL_GPIO_DeInit+0x194>)
 8003526:	4013      	ands	r3, r2
 8003528:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800352a:	4b35      	ldr	r3, [pc, #212]	; (8003600 <HAL_GPIO_DeInit+0x194>)
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	43db      	mvns	r3, r3
 8003532:	4933      	ldr	r1, [pc, #204]	; (8003600 <HAL_GPIO_DeInit+0x194>)
 8003534:	4013      	ands	r3, r2
 8003536:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003538:	4b31      	ldr	r3, [pc, #196]	; (8003600 <HAL_GPIO_DeInit+0x194>)
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	43db      	mvns	r3, r3
 8003540:	492f      	ldr	r1, [pc, #188]	; (8003600 <HAL_GPIO_DeInit+0x194>)
 8003542:	4013      	ands	r3, r2
 8003544:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	220f      	movs	r2, #15
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8003556:	4a23      	ldr	r2, [pc, #140]	; (80035e4 <HAL_GPIO_DeInit+0x178>)
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	089b      	lsrs	r3, r3, #2
 800355c:	3302      	adds	r3, #2
 800355e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	43da      	mvns	r2, r3
 8003566:	481f      	ldr	r0, [pc, #124]	; (80035e4 <HAL_GPIO_DeInit+0x178>)
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	089b      	lsrs	r3, r3, #2
 800356c:	400a      	ands	r2, r1
 800356e:	3302      	adds	r3, #2
 8003570:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2bff      	cmp	r3, #255	; 0xff
 8003578:	d801      	bhi.n	800357e <HAL_GPIO_DeInit+0x112>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	e001      	b.n	8003582 <HAL_GPIO_DeInit+0x116>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3304      	adds	r3, #4
 8003582:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	2bff      	cmp	r3, #255	; 0xff
 8003588:	d802      	bhi.n	8003590 <HAL_GPIO_DeInit+0x124>
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	e002      	b.n	8003596 <HAL_GPIO_DeInit+0x12a>
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	3b08      	subs	r3, #8
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	210f      	movs	r1, #15
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	fa01 f303 	lsl.w	r3, r1, r3
 80035a4:	43db      	mvns	r3, r3
 80035a6:	401a      	ands	r2, r3
 80035a8:	2104      	movs	r1, #4
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	fa01 f303 	lsl.w	r3, r1, r3
 80035b0:	431a      	orrs	r2, r3
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	43db      	mvns	r3, r3
 80035be:	401a      	ands	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	3301      	adds	r3, #1
 80035c8:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	fa22 f303 	lsr.w	r3, r2, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f47f af52 	bne.w	800347c <HAL_GPIO_DeInit+0x10>
  }
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	3724      	adds	r7, #36	; 0x24
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	40010000 	.word	0x40010000
 80035e8:	40010800 	.word	0x40010800
 80035ec:	40010c00 	.word	0x40010c00
 80035f0:	40011000 	.word	0x40011000
 80035f4:	40011400 	.word	0x40011400
 80035f8:	40011800 	.word	0x40011800
 80035fc:	40011c00 	.word	0x40011c00
 8003600:	40010400 	.word	0x40010400

08003604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	887b      	ldrh	r3, [r7, #2]
 8003616:	4013      	ands	r3, r2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d002      	beq.n	8003622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
 8003620:	e001      	b.n	8003626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003622:	2300      	movs	r3, #0
 8003624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003626:	7bfb      	ldrb	r3, [r7, #15]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr

08003632 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	460b      	mov	r3, r1
 800363c:	807b      	strh	r3, [r7, #2]
 800363e:	4613      	mov	r3, r2
 8003640:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003642:	787b      	ldrb	r3, [r7, #1]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003648:	887a      	ldrh	r2, [r7, #2]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800364e:	e003      	b.n	8003658 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003650:	887b      	ldrh	r3, [r7, #2]
 8003652:	041a      	lsls	r2, r3, #16
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	611a      	str	r2, [r3, #16]
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	bc80      	pop	{r7}
 8003660:	4770      	bx	lr
	...

08003664 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e12b      	b.n	80038ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff f810 	bl	80026b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2224      	movs	r2, #36	; 0x24
 8003694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0201 	bic.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036c8:	f001 fc28 	bl	8004f1c <HAL_RCC_GetPCLK1Freq>
 80036cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	4a81      	ldr	r2, [pc, #516]	; (80038d8 <HAL_I2C_Init+0x274>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d807      	bhi.n	80036e8 <HAL_I2C_Init+0x84>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	4a80      	ldr	r2, [pc, #512]	; (80038dc <HAL_I2C_Init+0x278>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	bf94      	ite	ls
 80036e0:	2301      	movls	r3, #1
 80036e2:	2300      	movhi	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	e006      	b.n	80036f6 <HAL_I2C_Init+0x92>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	4a7d      	ldr	r2, [pc, #500]	; (80038e0 <HAL_I2C_Init+0x27c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	bf94      	ite	ls
 80036f0:	2301      	movls	r3, #1
 80036f2:	2300      	movhi	r3, #0
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e0e7      	b.n	80038ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	4a78      	ldr	r2, [pc, #480]	; (80038e4 <HAL_I2C_Init+0x280>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	0c9b      	lsrs	r3, r3, #18
 8003708:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	4a6a      	ldr	r2, [pc, #424]	; (80038d8 <HAL_I2C_Init+0x274>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d802      	bhi.n	8003738 <HAL_I2C_Init+0xd4>
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	3301      	adds	r3, #1
 8003736:	e009      	b.n	800374c <HAL_I2C_Init+0xe8>
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800373e:	fb02 f303 	mul.w	r3, r2, r3
 8003742:	4a69      	ldr	r2, [pc, #420]	; (80038e8 <HAL_I2C_Init+0x284>)
 8003744:	fba2 2303 	umull	r2, r3, r2, r3
 8003748:	099b      	lsrs	r3, r3, #6
 800374a:	3301      	adds	r3, #1
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	430b      	orrs	r3, r1
 8003752:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	69db      	ldr	r3, [r3, #28]
 800375a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800375e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	495c      	ldr	r1, [pc, #368]	; (80038d8 <HAL_I2C_Init+0x274>)
 8003768:	428b      	cmp	r3, r1
 800376a:	d819      	bhi.n	80037a0 <HAL_I2C_Init+0x13c>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	1e59      	subs	r1, r3, #1
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	fbb1 f3f3 	udiv	r3, r1, r3
 800377a:	1c59      	adds	r1, r3, #1
 800377c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003780:	400b      	ands	r3, r1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00a      	beq.n	800379c <HAL_I2C_Init+0x138>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1e59      	subs	r1, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	fbb1 f3f3 	udiv	r3, r1, r3
 8003794:	3301      	adds	r3, #1
 8003796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379a:	e051      	b.n	8003840 <HAL_I2C_Init+0x1dc>
 800379c:	2304      	movs	r3, #4
 800379e:	e04f      	b.n	8003840 <HAL_I2C_Init+0x1dc>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d111      	bne.n	80037cc <HAL_I2C_Init+0x168>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1e58      	subs	r0, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6859      	ldr	r1, [r3, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	440b      	add	r3, r1
 80037b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ba:	3301      	adds	r3, #1
 80037bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bf0c      	ite	eq
 80037c4:	2301      	moveq	r3, #1
 80037c6:	2300      	movne	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	e012      	b.n	80037f2 <HAL_I2C_Init+0x18e>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1e58      	subs	r0, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6859      	ldr	r1, [r3, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	0099      	lsls	r1, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e2:	3301      	adds	r3, #1
 80037e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bf0c      	ite	eq
 80037ec:	2301      	moveq	r3, #1
 80037ee:	2300      	movne	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_I2C_Init+0x196>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e022      	b.n	8003840 <HAL_I2C_Init+0x1dc>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10e      	bne.n	8003820 <HAL_I2C_Init+0x1bc>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1e58      	subs	r0, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6859      	ldr	r1, [r3, #4]
 800380a:	460b      	mov	r3, r1
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	440b      	add	r3, r1
 8003810:	fbb0 f3f3 	udiv	r3, r0, r3
 8003814:	3301      	adds	r3, #1
 8003816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800381e:	e00f      	b.n	8003840 <HAL_I2C_Init+0x1dc>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	1e58      	subs	r0, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6859      	ldr	r1, [r3, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	0099      	lsls	r1, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	fbb0 f3f3 	udiv	r3, r0, r3
 8003836:	3301      	adds	r3, #1
 8003838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800383c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	6809      	ldr	r1, [r1, #0]
 8003844:	4313      	orrs	r3, r2
 8003846:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69da      	ldr	r2, [r3, #28]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800386e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6911      	ldr	r1, [r2, #16]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68d2      	ldr	r2, [r2, #12]
 800387a:	4311      	orrs	r1, r2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	430b      	orrs	r3, r1
 8003882:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695a      	ldr	r2, [r3, #20]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	000186a0 	.word	0x000186a0
 80038dc:	001e847f 	.word	0x001e847f
 80038e0:	003d08ff 	.word	0x003d08ff
 80038e4:	431bde83 	.word	0x431bde83
 80038e8:	10624dd3 	.word	0x10624dd3

080038ec <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e021      	b.n	8003942 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2224      	movs	r2, #36	; 0x24
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0201 	bic.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7fe ff08 	bl	800272c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af02      	add	r7, sp, #8
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	607a      	str	r2, [r7, #4]
 8003956:	461a      	mov	r2, r3
 8003958:	460b      	mov	r3, r1
 800395a:	817b      	strh	r3, [r7, #10]
 800395c:	4613      	mov	r3, r2
 800395e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003960:	f7ff f876 	bl	8002a50 <HAL_GetTick>
 8003964:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b20      	cmp	r3, #32
 8003970:	f040 80e0 	bne.w	8003b34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	2319      	movs	r3, #25
 800397a:	2201      	movs	r2, #1
 800397c:	4970      	ldr	r1, [pc, #448]	; (8003b40 <HAL_I2C_Master_Transmit+0x1f4>)
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f000 fccc 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800398a:	2302      	movs	r3, #2
 800398c:	e0d3      	b.n	8003b36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_I2C_Master_Transmit+0x50>
 8003998:	2302      	movs	r3, #2
 800399a:	e0cc      	b.n	8003b36 <HAL_I2C_Master_Transmit+0x1ea>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d007      	beq.n	80039c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f042 0201 	orr.w	r2, r2, #1
 80039c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2221      	movs	r2, #33	; 0x21
 80039d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2210      	movs	r2, #16
 80039de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	893a      	ldrh	r2, [r7, #8]
 80039f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4a50      	ldr	r2, [pc, #320]	; (8003b44 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a04:	8979      	ldrh	r1, [r7, #10]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	6a3a      	ldr	r2, [r7, #32]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 fb1c 	bl	8004048 <I2C_MasterRequestWrite>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e08d      	b.n	8003b36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	613b      	str	r3, [r7, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	613b      	str	r3, [r7, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a30:	e066      	b.n	8003b00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	6a39      	ldr	r1, [r7, #32]
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 fd8a 	bl	8004550 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00d      	beq.n	8003a5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	d107      	bne.n	8003a5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e06b      	b.n	8003b36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	781a      	ldrb	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f003 0304 	and.w	r3, r3, #4
 8003a98:	2b04      	cmp	r3, #4
 8003a9a:	d11b      	bne.n	8003ad4 <HAL_I2C_Master_Transmit+0x188>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d017      	beq.n	8003ad4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	781a      	ldrb	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	6a39      	ldr	r1, [r7, #32]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fd81 	bl	80045e0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00d      	beq.n	8003b00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d107      	bne.n	8003afc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003afa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e01a      	b.n	8003b36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d194      	bne.n	8003a32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	e000      	b.n	8003b36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b34:	2302      	movs	r3, #2
  }
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	00100002 	.word	0x00100002
 8003b44:	ffff0000 	.word	0xffff0000

08003b48 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b08c      	sub	sp, #48	; 0x30
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	4608      	mov	r0, r1
 8003b52:	4611      	mov	r1, r2
 8003b54:	461a      	mov	r2, r3
 8003b56:	4603      	mov	r3, r0
 8003b58:	817b      	strh	r3, [r7, #10]
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	813b      	strh	r3, [r7, #8]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b66:	f7fe ff73 	bl	8002a50 <HAL_GetTick>
 8003b6a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	f040 8244 	bne.w	8004002 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	2319      	movs	r3, #25
 8003b80:	2201      	movs	r2, #1
 8003b82:	4982      	ldr	r1, [pc, #520]	; (8003d8c <HAL_I2C_Mem_Read+0x244>)
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 fbc9 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
 8003b92:	e237      	b.n	8004004 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_I2C_Mem_Read+0x5a>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e230      	b.n	8004004 <HAL_I2C_Mem_Read+0x4bc>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d007      	beq.n	8003bc8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0201 	orr.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2222      	movs	r2, #34	; 0x22
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2240      	movs	r2, #64	; 0x40
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003bf8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4a62      	ldr	r2, [pc, #392]	; (8003d90 <HAL_I2C_Mem_Read+0x248>)
 8003c08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c0a:	88f8      	ldrh	r0, [r7, #6]
 8003c0c:	893a      	ldrh	r2, [r7, #8]
 8003c0e:	8979      	ldrh	r1, [r7, #10]
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	9301      	str	r3, [sp, #4]
 8003c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	4603      	mov	r3, r0
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fa96 	bl	800414c <I2C_RequestMemoryRead>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e1ec      	b.n	8004004 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d113      	bne.n	8003c5a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	695b      	ldr	r3, [r3, #20]
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	61fb      	str	r3, [r7, #28]
 8003c46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	e1c0      	b.n	8003fdc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d11e      	bne.n	8003ca0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c70:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c72:	b672      	cpsid	i
}
 8003c74:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c76:	2300      	movs	r3, #0
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	61bb      	str	r3, [r7, #24]
 8003c8a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c9a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c9c:	b662      	cpsie	i
}
 8003c9e:	e035      	b.n	8003d0c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d11e      	bne.n	8003ce6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cb6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003cb8:	b672      	cpsid	i
}
 8003cba:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003ce2:	b662      	cpsie	i
}
 8003ce4:	e012      	b.n	8003d0c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cf4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	613b      	str	r3, [r7, #16]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	613b      	str	r3, [r7, #16]
 8003d0a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003d0c:	e166      	b.n	8003fdc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	f200 811f 	bhi.w	8003f56 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d123      	bne.n	8003d68 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 fca3 	bl	8004670 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e167      	b.n	8004004 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691a      	ldr	r2, [r3, #16]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d66:	e139      	b.n	8003fdc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d152      	bne.n	8003e16 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d76:	2200      	movs	r2, #0
 8003d78:	4906      	ldr	r1, [pc, #24]	; (8003d94 <HAL_I2C_Mem_Read+0x24c>)
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 face 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d008      	beq.n	8003d98 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e13c      	b.n	8004004 <HAL_I2C_Mem_Read+0x4bc>
 8003d8a:	bf00      	nop
 8003d8c:	00100002 	.word	0x00100002
 8003d90:	ffff0000 	.word	0xffff0000
 8003d94:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003d98:	b672      	cpsid	i
}
 8003d9a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003daa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691a      	ldr	r2, [r3, #16]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003dde:	b662      	cpsie	i
}
 8003de0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df4:	1c5a      	adds	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e14:	e0e2      	b.n	8003fdc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e18:	9300      	str	r3, [sp, #0]
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	497b      	ldr	r1, [pc, #492]	; (800400c <HAL_I2C_Mem_Read+0x4c4>)
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 fa7b 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e0e9      	b.n	8004004 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e40:	b672      	cpsid	i
}
 8003e42:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	1c5a      	adds	r2, r3, #1
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e76:	4b66      	ldr	r3, [pc, #408]	; (8004010 <HAL_I2C_Mem_Read+0x4c8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	08db      	lsrs	r3, r3, #3
 8003e7c:	4a65      	ldr	r2, [pc, #404]	; (8004014 <HAL_I2C_Mem_Read+0x4cc>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	0a1a      	lsrs	r2, r3, #8
 8003e84:	4613      	mov	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	00da      	lsls	r2, r3, #3
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	3b01      	subs	r3, #1
 8003e94:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d118      	bne.n	8003ece <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	f043 0220 	orr.w	r2, r3, #32
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003ebe:	b662      	cpsie	i
}
 8003ec0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e09a      	b.n	8004004 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695b      	ldr	r3, [r3, #20]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d1d9      	bne.n	8003e90 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f1e:	b662      	cpsie	i
}
 8003f20:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f54:	e042      	b.n	8003fdc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fb88 	bl	8004670 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e04c      	b.n	8004004 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d118      	bne.n	8003fdc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f47f ae94 	bne.w	8003d0e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	e000      	b.n	8004004 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8004002:	2302      	movs	r3, #2
  }
}
 8004004:	4618      	mov	r0, r3
 8004006:	3728      	adds	r7, #40	; 0x28
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	00010004 	.word	0x00010004
 8004010:	20000914 	.word	0x20000914
 8004014:	14f8b589 	.word	0x14f8b589

08004018 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004026:	b2db      	uxtb	r3, r3
}
 8004028:	4618      	mov	r0, r3
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	bc80      	pop	{r7}
 8004030:	4770      	bx	lr

08004032 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800403e:	4618      	mov	r0, r3
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr

08004048 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	460b      	mov	r3, r1
 8004056:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	2b08      	cmp	r3, #8
 8004062:	d006      	beq.n	8004072 <I2C_MasterRequestWrite+0x2a>
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d003      	beq.n	8004072 <I2C_MasterRequestWrite+0x2a>
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004070:	d108      	bne.n	8004084 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	e00b      	b.n	800409c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	2b12      	cmp	r3, #18
 800408a:	d107      	bne.n	800409c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800409a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f000 f937 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00d      	beq.n	80040d0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040c2:	d103      	bne.n	80040cc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e035      	b.n	800413c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040d8:	d108      	bne.n	80040ec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040da:	897b      	ldrh	r3, [r7, #10]
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040e8:	611a      	str	r2, [r3, #16]
 80040ea:	e01b      	b.n	8004124 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040ec:	897b      	ldrh	r3, [r7, #10]
 80040ee:	11db      	asrs	r3, r3, #7
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	f003 0306 	and.w	r3, r3, #6
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	f063 030f 	orn	r3, r3, #15
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	490e      	ldr	r1, [pc, #56]	; (8004144 <I2C_MasterRequestWrite+0xfc>)
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 f980 	bl	8004410 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e010      	b.n	800413c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800411a:	897b      	ldrh	r3, [r7, #10]
 800411c:	b2da      	uxtb	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	4907      	ldr	r1, [pc, #28]	; (8004148 <I2C_MasterRequestWrite+0x100>)
 800412a:	68f8      	ldr	r0, [r7, #12]
 800412c:	f000 f970 	bl	8004410 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	00010008 	.word	0x00010008
 8004148:	00010002 	.word	0x00010002

0800414c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af02      	add	r7, sp, #8
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	4608      	mov	r0, r1
 8004156:	4611      	mov	r1, r2
 8004158:	461a      	mov	r2, r3
 800415a:	4603      	mov	r3, r0
 800415c:	817b      	strh	r3, [r7, #10]
 800415e:	460b      	mov	r3, r1
 8004160:	813b      	strh	r3, [r7, #8]
 8004162:	4613      	mov	r3, r2
 8004164:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004174:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004184:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	2200      	movs	r2, #0
 800418e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f000 f8c2 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00d      	beq.n	80041ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ac:	d103      	bne.n	80041b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e0aa      	b.n	8004310 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041ba:	897b      	ldrh	r3, [r7, #10]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	6a3a      	ldr	r2, [r7, #32]
 80041ce:	4952      	ldr	r1, [pc, #328]	; (8004318 <I2C_RequestMemoryRead+0x1cc>)
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f91d 	bl	8004410 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e097      	b.n	8004310 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041e0:	2300      	movs	r3, #0
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f8:	6a39      	ldr	r1, [r7, #32]
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f000 f9a8 	bl	8004550 <I2C_WaitOnTXEFlagUntilTimeout>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00d      	beq.n	8004222 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	2b04      	cmp	r3, #4
 800420c:	d107      	bne.n	800421e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800421c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e076      	b.n	8004310 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004222:	88fb      	ldrh	r3, [r7, #6]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d105      	bne.n	8004234 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004228:	893b      	ldrh	r3, [r7, #8]
 800422a:	b2da      	uxtb	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	611a      	str	r2, [r3, #16]
 8004232:	e021      	b.n	8004278 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004234:	893b      	ldrh	r3, [r7, #8]
 8004236:	0a1b      	lsrs	r3, r3, #8
 8004238:	b29b      	uxth	r3, r3
 800423a:	b2da      	uxtb	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004244:	6a39      	ldr	r1, [r7, #32]
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f982 	bl	8004550 <I2C_WaitOnTXEFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00d      	beq.n	800426e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	2b04      	cmp	r3, #4
 8004258:	d107      	bne.n	800426a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004268:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e050      	b.n	8004310 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800426e:	893b      	ldrh	r3, [r7, #8]
 8004270:	b2da      	uxtb	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427a:	6a39      	ldr	r1, [r7, #32]
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f967 	bl	8004550 <I2C_WaitOnTXEFlagUntilTimeout>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00d      	beq.n	80042a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428c:	2b04      	cmp	r3, #4
 800428e:	d107      	bne.n	80042a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800429e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e035      	b.n	8004310 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 f82b 	bl	800431c <I2C_WaitOnFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00d      	beq.n	80042e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042da:	d103      	bne.n	80042e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e013      	b.n	8004310 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042e8:	897b      	ldrh	r3, [r7, #10]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f043 0301 	orr.w	r3, r3, #1
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	6a3a      	ldr	r2, [r7, #32]
 80042fc:	4906      	ldr	r1, [pc, #24]	; (8004318 <I2C_RequestMemoryRead+0x1cc>)
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 f886 	bl	8004410 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e000      	b.n	8004310 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	3718      	adds	r7, #24
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	00010002 	.word	0x00010002

0800431c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	4613      	mov	r3, r2
 800432a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800432c:	e048      	b.n	80043c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d044      	beq.n	80043c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004336:	f7fe fb8b 	bl	8002a50 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d302      	bcc.n	800434c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d139      	bne.n	80043c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	0c1b      	lsrs	r3, r3, #16
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b01      	cmp	r3, #1
 8004354:	d10d      	bne.n	8004372 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	43da      	mvns	r2, r3
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4013      	ands	r3, r2
 8004362:	b29b      	uxth	r3, r3
 8004364:	2b00      	cmp	r3, #0
 8004366:	bf0c      	ite	eq
 8004368:	2301      	moveq	r3, #1
 800436a:	2300      	movne	r3, #0
 800436c:	b2db      	uxtb	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	e00c      	b.n	800438c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	43da      	mvns	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	4013      	ands	r3, r2
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	bf0c      	ite	eq
 8004384:	2301      	moveq	r3, #1
 8004386:	2300      	movne	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	461a      	mov	r2, r3
 800438c:	79fb      	ldrb	r3, [r7, #7]
 800438e:	429a      	cmp	r2, r3
 8004390:	d116      	bne.n	80043c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ac:	f043 0220 	orr.w	r2, r3, #32
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e023      	b.n	8004408 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	0c1b      	lsrs	r3, r3, #16
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d10d      	bne.n	80043e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	43da      	mvns	r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	4013      	ands	r3, r2
 80043d6:	b29b      	uxth	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bf0c      	ite	eq
 80043dc:	2301      	moveq	r3, #1
 80043de:	2300      	movne	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	461a      	mov	r2, r3
 80043e4:	e00c      	b.n	8004400 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	43da      	mvns	r2, r3
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	4013      	ands	r3, r2
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	bf0c      	ite	eq
 80043f8:	2301      	moveq	r3, #1
 80043fa:	2300      	movne	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	461a      	mov	r2, r3
 8004400:	79fb      	ldrb	r3, [r7, #7]
 8004402:	429a      	cmp	r2, r3
 8004404:	d093      	beq.n	800432e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800441e:	e071      	b.n	8004504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800442a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800442e:	d123      	bne.n	8004478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004448:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	f043 0204 	orr.w	r2, r3, #4
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e067      	b.n	8004548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800447e:	d041      	beq.n	8004504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004480:	f7fe fae6 	bl	8002a50 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	429a      	cmp	r2, r3
 800448e:	d302      	bcc.n	8004496 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d136      	bne.n	8004504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	0c1b      	lsrs	r3, r3, #16
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b01      	cmp	r3, #1
 800449e:	d10c      	bne.n	80044ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	43da      	mvns	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4013      	ands	r3, r2
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	bf14      	ite	ne
 80044b2:	2301      	movne	r3, #1
 80044b4:	2300      	moveq	r3, #0
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	e00b      	b.n	80044d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	43da      	mvns	r2, r3
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	4013      	ands	r3, r2
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	bf14      	ite	ne
 80044cc:	2301      	movne	r3, #1
 80044ce:	2300      	moveq	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d016      	beq.n	8004504 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	f043 0220 	orr.w	r2, r3, #32
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e021      	b.n	8004548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	0c1b      	lsrs	r3, r3, #16
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b01      	cmp	r3, #1
 800450c:	d10c      	bne.n	8004528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	43da      	mvns	r2, r3
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	4013      	ands	r3, r2
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	bf14      	ite	ne
 8004520:	2301      	movne	r3, #1
 8004522:	2300      	moveq	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	e00b      	b.n	8004540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	43da      	mvns	r2, r3
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	4013      	ands	r3, r2
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	bf14      	ite	ne
 800453a:	2301      	movne	r3, #1
 800453c:	2300      	moveq	r3, #0
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b00      	cmp	r3, #0
 8004542:	f47f af6d 	bne.w	8004420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800455c:	e034      	b.n	80045c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 f8e3 	bl	800472a <I2C_IsAcknowledgeFailed>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e034      	b.n	80045d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004574:	d028      	beq.n	80045c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004576:	f7fe fa6b 	bl	8002a50 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	429a      	cmp	r2, r3
 8004584:	d302      	bcc.n	800458c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d11d      	bne.n	80045c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004596:	2b80      	cmp	r3, #128	; 0x80
 8004598:	d016      	beq.n	80045c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	f043 0220 	orr.w	r2, r3, #32
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e007      	b.n	80045d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d2:	2b80      	cmp	r3, #128	; 0x80
 80045d4:	d1c3      	bne.n	800455e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045ec:	e034      	b.n	8004658 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 f89b 	bl	800472a <I2C_IsAcknowledgeFailed>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e034      	b.n	8004668 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004604:	d028      	beq.n	8004658 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004606:	f7fe fa23 	bl	8002a50 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	429a      	cmp	r2, r3
 8004614:	d302      	bcc.n	800461c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d11d      	bne.n	8004658 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b04      	cmp	r3, #4
 8004628:	d016      	beq.n	8004658 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	f043 0220 	orr.w	r2, r3, #32
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e007      	b.n	8004668 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b04      	cmp	r3, #4
 8004664:	d1c3      	bne.n	80045ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004666:	2300      	movs	r3, #0
}
 8004668:	4618      	mov	r0, r3
 800466a:	3710      	adds	r7, #16
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b084      	sub	sp, #16
 8004674:	af00      	add	r7, sp, #0
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	60b9      	str	r1, [r7, #8]
 800467a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800467c:	e049      	b.n	8004712 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	f003 0310 	and.w	r3, r3, #16
 8004688:	2b10      	cmp	r3, #16
 800468a:	d119      	bne.n	80046c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f06f 0210 	mvn.w	r2, #16
 8004694:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2200      	movs	r2, #0
 800469a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e030      	b.n	8004722 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c0:	f7fe f9c6 	bl	8002a50 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d302      	bcc.n	80046d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d11d      	bne.n	8004712 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	695b      	ldr	r3, [r3, #20]
 80046dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e0:	2b40      	cmp	r3, #64	; 0x40
 80046e2:	d016      	beq.n	8004712 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2200      	movs	r2, #0
 80046e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	f043 0220 	orr.w	r2, r3, #32
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e007      	b.n	8004722 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695b      	ldr	r3, [r3, #20]
 8004718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800471c:	2b40      	cmp	r3, #64	; 0x40
 800471e:	d1ae      	bne.n	800467e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}

0800472a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800472a:	b480      	push	{r7}
 800472c:	b083      	sub	sp, #12
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800473c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004740:	d11b      	bne.n	800477a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800474a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f043 0204 	orr.w	r2, r3, #4
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	bc80      	pop	{r7}
 8004784:	4770      	bx	lr
	...

08004788 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e272      	b.n	8004c80 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	f000 8087 	beq.w	80048b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047a8:	4b92      	ldr	r3, [pc, #584]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f003 030c 	and.w	r3, r3, #12
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	d00c      	beq.n	80047ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80047b4:	4b8f      	ldr	r3, [pc, #572]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f003 030c 	and.w	r3, r3, #12
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d112      	bne.n	80047e6 <HAL_RCC_OscConfig+0x5e>
 80047c0:	4b8c      	ldr	r3, [pc, #560]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047cc:	d10b      	bne.n	80047e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ce:	4b89      	ldr	r3, [pc, #548]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d06c      	beq.n	80048b4 <HAL_RCC_OscConfig+0x12c>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d168      	bne.n	80048b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e24c      	b.n	8004c80 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ee:	d106      	bne.n	80047fe <HAL_RCC_OscConfig+0x76>
 80047f0:	4b80      	ldr	r3, [pc, #512]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a7f      	ldr	r2, [pc, #508]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 80047f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	e02e      	b.n	800485c <HAL_RCC_OscConfig+0xd4>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10c      	bne.n	8004820 <HAL_RCC_OscConfig+0x98>
 8004806:	4b7b      	ldr	r3, [pc, #492]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a7a      	ldr	r2, [pc, #488]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 800480c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004810:	6013      	str	r3, [r2, #0]
 8004812:	4b78      	ldr	r3, [pc, #480]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a77      	ldr	r2, [pc, #476]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 8004818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800481c:	6013      	str	r3, [r2, #0]
 800481e:	e01d      	b.n	800485c <HAL_RCC_OscConfig+0xd4>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004828:	d10c      	bne.n	8004844 <HAL_RCC_OscConfig+0xbc>
 800482a:	4b72      	ldr	r3, [pc, #456]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a71      	ldr	r2, [pc, #452]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 8004830:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	4b6f      	ldr	r3, [pc, #444]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a6e      	ldr	r2, [pc, #440]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 800483c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004840:	6013      	str	r3, [r2, #0]
 8004842:	e00b      	b.n	800485c <HAL_RCC_OscConfig+0xd4>
 8004844:	4b6b      	ldr	r3, [pc, #428]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a6a      	ldr	r2, [pc, #424]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 800484a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800484e:	6013      	str	r3, [r2, #0]
 8004850:	4b68      	ldr	r3, [pc, #416]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a67      	ldr	r2, [pc, #412]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 8004856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800485a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d013      	beq.n	800488c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004864:	f7fe f8f4 	bl	8002a50 <HAL_GetTick>
 8004868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800486c:	f7fe f8f0 	bl	8002a50 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b64      	cmp	r3, #100	; 0x64
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e200      	b.n	8004c80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800487e:	4b5d      	ldr	r3, [pc, #372]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0xe4>
 800488a:	e014      	b.n	80048b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488c:	f7fe f8e0 	bl	8002a50 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004894:	f7fe f8dc 	bl	8002a50 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b64      	cmp	r3, #100	; 0x64
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e1ec      	b.n	8004c80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048a6:	4b53      	ldr	r3, [pc, #332]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1f0      	bne.n	8004894 <HAL_RCC_OscConfig+0x10c>
 80048b2:	e000      	b.n	80048b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d063      	beq.n	800498a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048c2:	4b4c      	ldr	r3, [pc, #304]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f003 030c 	and.w	r3, r3, #12
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00b      	beq.n	80048e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80048ce:	4b49      	ldr	r3, [pc, #292]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f003 030c 	and.w	r3, r3, #12
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d11c      	bne.n	8004914 <HAL_RCC_OscConfig+0x18c>
 80048da:	4b46      	ldr	r3, [pc, #280]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d116      	bne.n	8004914 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048e6:	4b43      	ldr	r3, [pc, #268]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d005      	beq.n	80048fe <HAL_RCC_OscConfig+0x176>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d001      	beq.n	80048fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e1c0      	b.n	8004c80 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048fe:	4b3d      	ldr	r3, [pc, #244]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	4939      	ldr	r1, [pc, #228]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 800490e:	4313      	orrs	r3, r2
 8004910:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004912:	e03a      	b.n	800498a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d020      	beq.n	800495e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800491c:	4b36      	ldr	r3, [pc, #216]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 800491e:	2201      	movs	r2, #1
 8004920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004922:	f7fe f895 	bl	8002a50 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800492a:	f7fe f891 	bl	8002a50 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e1a1      	b.n	8004c80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800493c:	4b2d      	ldr	r3, [pc, #180]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d0f0      	beq.n	800492a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004948:	4b2a      	ldr	r3, [pc, #168]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	00db      	lsls	r3, r3, #3
 8004956:	4927      	ldr	r1, [pc, #156]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 8004958:	4313      	orrs	r3, r2
 800495a:	600b      	str	r3, [r1, #0]
 800495c:	e015      	b.n	800498a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800495e:	4b26      	ldr	r3, [pc, #152]	; (80049f8 <HAL_RCC_OscConfig+0x270>)
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004964:	f7fe f874 	bl	8002a50 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800496c:	f7fe f870 	bl	8002a50 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e180      	b.n	8004c80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800497e:	4b1d      	ldr	r3, [pc, #116]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1f0      	bne.n	800496c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d03a      	beq.n	8004a0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d019      	beq.n	80049d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800499e:	4b17      	ldr	r3, [pc, #92]	; (80049fc <HAL_RCC_OscConfig+0x274>)
 80049a0:	2201      	movs	r2, #1
 80049a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049a4:	f7fe f854 	bl	8002a50 <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049aa:	e008      	b.n	80049be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ac:	f7fe f850 	bl	8002a50 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b02      	cmp	r3, #2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e160      	b.n	8004c80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049be:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <HAL_RCC_OscConfig+0x26c>)
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0f0      	beq.n	80049ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80049ca:	2001      	movs	r0, #1
 80049cc:	f000 face 	bl	8004f6c <RCC_Delay>
 80049d0:	e01c      	b.n	8004a0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049d2:	4b0a      	ldr	r3, [pc, #40]	; (80049fc <HAL_RCC_OscConfig+0x274>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049d8:	f7fe f83a 	bl	8002a50 <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049de:	e00f      	b.n	8004a00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049e0:	f7fe f836 	bl	8002a50 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d908      	bls.n	8004a00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e146      	b.n	8004c80 <HAL_RCC_OscConfig+0x4f8>
 80049f2:	bf00      	nop
 80049f4:	40021000 	.word	0x40021000
 80049f8:	42420000 	.word	0x42420000
 80049fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a00:	4b92      	ldr	r3, [pc, #584]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e9      	bne.n	80049e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f000 80a6 	beq.w	8004b66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a1e:	4b8b      	ldr	r3, [pc, #556]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10d      	bne.n	8004a46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a2a:	4b88      	ldr	r3, [pc, #544]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	4a87      	ldr	r2, [pc, #540]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a34:	61d3      	str	r3, [r2, #28]
 8004a36:	4b85      	ldr	r3, [pc, #532]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a3e:	60bb      	str	r3, [r7, #8]
 8004a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a42:	2301      	movs	r3, #1
 8004a44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a46:	4b82      	ldr	r3, [pc, #520]	; (8004c50 <HAL_RCC_OscConfig+0x4c8>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d118      	bne.n	8004a84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a52:	4b7f      	ldr	r3, [pc, #508]	; (8004c50 <HAL_RCC_OscConfig+0x4c8>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a7e      	ldr	r2, [pc, #504]	; (8004c50 <HAL_RCC_OscConfig+0x4c8>)
 8004a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a5e:	f7fd fff7 	bl	8002a50 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a64:	e008      	b.n	8004a78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a66:	f7fd fff3 	bl	8002a50 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b64      	cmp	r3, #100	; 0x64
 8004a72:	d901      	bls.n	8004a78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e103      	b.n	8004c80 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a78:	4b75      	ldr	r3, [pc, #468]	; (8004c50 <HAL_RCC_OscConfig+0x4c8>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d0f0      	beq.n	8004a66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d106      	bne.n	8004a9a <HAL_RCC_OscConfig+0x312>
 8004a8c:	4b6f      	ldr	r3, [pc, #444]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004a8e:	6a1b      	ldr	r3, [r3, #32]
 8004a90:	4a6e      	ldr	r2, [pc, #440]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	6213      	str	r3, [r2, #32]
 8004a98:	e02d      	b.n	8004af6 <HAL_RCC_OscConfig+0x36e>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCC_OscConfig+0x334>
 8004aa2:	4b6a      	ldr	r3, [pc, #424]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	4a69      	ldr	r2, [pc, #420]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004aa8:	f023 0301 	bic.w	r3, r3, #1
 8004aac:	6213      	str	r3, [r2, #32]
 8004aae:	4b67      	ldr	r3, [pc, #412]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	4a66      	ldr	r2, [pc, #408]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004ab4:	f023 0304 	bic.w	r3, r3, #4
 8004ab8:	6213      	str	r3, [r2, #32]
 8004aba:	e01c      	b.n	8004af6 <HAL_RCC_OscConfig+0x36e>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	2b05      	cmp	r3, #5
 8004ac2:	d10c      	bne.n	8004ade <HAL_RCC_OscConfig+0x356>
 8004ac4:	4b61      	ldr	r3, [pc, #388]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	4a60      	ldr	r2, [pc, #384]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004aca:	f043 0304 	orr.w	r3, r3, #4
 8004ace:	6213      	str	r3, [r2, #32]
 8004ad0:	4b5e      	ldr	r3, [pc, #376]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	4a5d      	ldr	r2, [pc, #372]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004ad6:	f043 0301 	orr.w	r3, r3, #1
 8004ada:	6213      	str	r3, [r2, #32]
 8004adc:	e00b      	b.n	8004af6 <HAL_RCC_OscConfig+0x36e>
 8004ade:	4b5b      	ldr	r3, [pc, #364]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	4a5a      	ldr	r2, [pc, #360]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004ae4:	f023 0301 	bic.w	r3, r3, #1
 8004ae8:	6213      	str	r3, [r2, #32]
 8004aea:	4b58      	ldr	r3, [pc, #352]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	4a57      	ldr	r2, [pc, #348]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004af0:	f023 0304 	bic.w	r3, r3, #4
 8004af4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d015      	beq.n	8004b2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004afe:	f7fd ffa7 	bl	8002a50 <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b04:	e00a      	b.n	8004b1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b06:	f7fd ffa3 	bl	8002a50 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e0b1      	b.n	8004c80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b1c:	4b4b      	ldr	r3, [pc, #300]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0ee      	beq.n	8004b06 <HAL_RCC_OscConfig+0x37e>
 8004b28:	e014      	b.n	8004b54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b2a:	f7fd ff91 	bl	8002a50 <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b30:	e00a      	b.n	8004b48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b32:	f7fd ff8d 	bl	8002a50 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e09b      	b.n	8004c80 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b48:	4b40      	ldr	r3, [pc, #256]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1ee      	bne.n	8004b32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004b54:	7dfb      	ldrb	r3, [r7, #23]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d105      	bne.n	8004b66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b5a:	4b3c      	ldr	r3, [pc, #240]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	4a3b      	ldr	r2, [pc, #236]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 8087 	beq.w	8004c7e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b70:	4b36      	ldr	r3, [pc, #216]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f003 030c 	and.w	r3, r3, #12
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d061      	beq.n	8004c40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d146      	bne.n	8004c12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b84:	4b33      	ldr	r3, [pc, #204]	; (8004c54 <HAL_RCC_OscConfig+0x4cc>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8a:	f7fd ff61 	bl	8002a50 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b92:	f7fd ff5d 	bl	8002a50 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e06d      	b.n	8004c80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ba4:	4b29      	ldr	r3, [pc, #164]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1f0      	bne.n	8004b92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb8:	d108      	bne.n	8004bcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004bba:	4b24      	ldr	r3, [pc, #144]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	4921      	ldr	r1, [pc, #132]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bcc:	4b1f      	ldr	r3, [pc, #124]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a19      	ldr	r1, [r3, #32]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	430b      	orrs	r3, r1
 8004bde:	491b      	ldr	r1, [pc, #108]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004be4:	4b1b      	ldr	r3, [pc, #108]	; (8004c54 <HAL_RCC_OscConfig+0x4cc>)
 8004be6:	2201      	movs	r2, #1
 8004be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bea:	f7fd ff31 	bl	8002a50 <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf2:	f7fd ff2d 	bl	8002a50 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e03d      	b.n	8004c80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c04:	4b11      	ldr	r3, [pc, #68]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0f0      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x46a>
 8004c10:	e035      	b.n	8004c7e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c12:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <HAL_RCC_OscConfig+0x4cc>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c18:	f7fd ff1a 	bl	8002a50 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c20:	f7fd ff16 	bl	8002a50 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e026      	b.n	8004c80 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c32:	4b06      	ldr	r3, [pc, #24]	; (8004c4c <HAL_RCC_OscConfig+0x4c4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f0      	bne.n	8004c20 <HAL_RCC_OscConfig+0x498>
 8004c3e:	e01e      	b.n	8004c7e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d107      	bne.n	8004c58 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e019      	b.n	8004c80 <HAL_RCC_OscConfig+0x4f8>
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	40007000 	.word	0x40007000
 8004c54:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004c58:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <HAL_RCC_OscConfig+0x500>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d106      	bne.n	8004c7a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d001      	beq.n	8004c7e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e000      	b.n	8004c80 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	40021000 	.word	0x40021000

08004c8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e0d0      	b.n	8004e42 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ca0:	4b6a      	ldr	r3, [pc, #424]	; (8004e4c <HAL_RCC_ClockConfig+0x1c0>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d910      	bls.n	8004cd0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cae:	4b67      	ldr	r3, [pc, #412]	; (8004e4c <HAL_RCC_ClockConfig+0x1c0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f023 0207 	bic.w	r2, r3, #7
 8004cb6:	4965      	ldr	r1, [pc, #404]	; (8004e4c <HAL_RCC_ClockConfig+0x1c0>)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cbe:	4b63      	ldr	r3, [pc, #396]	; (8004e4c <HAL_RCC_ClockConfig+0x1c0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d001      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e0b8      	b.n	8004e42 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d020      	beq.n	8004d1e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d005      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ce8:	4b59      	ldr	r3, [pc, #356]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	4a58      	ldr	r2, [pc, #352]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004cee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004cf2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0308 	and.w	r3, r3, #8
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d005      	beq.n	8004d0c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d00:	4b53      	ldr	r3, [pc, #332]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	4a52      	ldr	r2, [pc, #328]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004d06:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004d0a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d0c:	4b50      	ldr	r3, [pc, #320]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	494d      	ldr	r1, [pc, #308]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d040      	beq.n	8004dac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d107      	bne.n	8004d42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d32:	4b47      	ldr	r3, [pc, #284]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d115      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e07f      	b.n	8004e42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d107      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d4a:	4b41      	ldr	r3, [pc, #260]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e073      	b.n	8004e42 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d5a:	4b3d      	ldr	r3, [pc, #244]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e06b      	b.n	8004e42 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d6a:	4b39      	ldr	r3, [pc, #228]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f023 0203 	bic.w	r2, r3, #3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	4936      	ldr	r1, [pc, #216]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d7c:	f7fd fe68 	bl	8002a50 <HAL_GetTick>
 8004d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d82:	e00a      	b.n	8004d9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d84:	f7fd fe64 	bl	8002a50 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e053      	b.n	8004e42 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9a:	4b2d      	ldr	r3, [pc, #180]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	f003 020c 	and.w	r2, r3, #12
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d1eb      	bne.n	8004d84 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dac:	4b27      	ldr	r3, [pc, #156]	; (8004e4c <HAL_RCC_ClockConfig+0x1c0>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d210      	bcs.n	8004ddc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dba:	4b24      	ldr	r3, [pc, #144]	; (8004e4c <HAL_RCC_ClockConfig+0x1c0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f023 0207 	bic.w	r2, r3, #7
 8004dc2:	4922      	ldr	r1, [pc, #136]	; (8004e4c <HAL_RCC_ClockConfig+0x1c0>)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dca:	4b20      	ldr	r3, [pc, #128]	; (8004e4c <HAL_RCC_ClockConfig+0x1c0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d001      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e032      	b.n	8004e42 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d008      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004de8:	4b19      	ldr	r3, [pc, #100]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	4916      	ldr	r1, [pc, #88]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d009      	beq.n	8004e1a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e06:	4b12      	ldr	r3, [pc, #72]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	490e      	ldr	r1, [pc, #56]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e1a:	f000 f821 	bl	8004e60 <HAL_RCC_GetSysClockFreq>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	091b      	lsrs	r3, r3, #4
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	490a      	ldr	r1, [pc, #40]	; (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e2c:	5ccb      	ldrb	r3, [r1, r3]
 8004e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e32:	4a09      	ldr	r2, [pc, #36]	; (8004e58 <HAL_RCC_ClockConfig+0x1cc>)
 8004e34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e36:	4b09      	ldr	r3, [pc, #36]	; (8004e5c <HAL_RCC_ClockConfig+0x1d0>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7fd fdc6 	bl	80029cc <HAL_InitTick>

  return HAL_OK;
 8004e40:	2300      	movs	r3, #0
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	40022000 	.word	0x40022000
 8004e50:	40021000 	.word	0x40021000
 8004e54:	08007acc 	.word	0x08007acc
 8004e58:	20000914 	.word	0x20000914
 8004e5c:	20000918 	.word	0x20000918

08004e60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	60fb      	str	r3, [r7, #12]
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60bb      	str	r3, [r7, #8]
 8004e6e:	2300      	movs	r3, #0
 8004e70:	617b      	str	r3, [r7, #20]
 8004e72:	2300      	movs	r3, #0
 8004e74:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004e7a:	4b1e      	ldr	r3, [pc, #120]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f003 030c 	and.w	r3, r3, #12
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d002      	beq.n	8004e90 <HAL_RCC_GetSysClockFreq+0x30>
 8004e8a:	2b08      	cmp	r3, #8
 8004e8c:	d003      	beq.n	8004e96 <HAL_RCC_GetSysClockFreq+0x36>
 8004e8e:	e027      	b.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e90:	4b19      	ldr	r3, [pc, #100]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004e92:	613b      	str	r3, [r7, #16]
      break;
 8004e94:	e027      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	0c9b      	lsrs	r3, r3, #18
 8004e9a:	f003 030f 	and.w	r3, r3, #15
 8004e9e:	4a17      	ldr	r2, [pc, #92]	; (8004efc <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ea0:	5cd3      	ldrb	r3, [r2, r3]
 8004ea2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d010      	beq.n	8004ed0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004eae:	4b11      	ldr	r3, [pc, #68]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x94>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	0c5b      	lsrs	r3, r3, #17
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	4a11      	ldr	r2, [pc, #68]	; (8004f00 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004eba:	5cd3      	ldrb	r3, [r2, r3]
 8004ebc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a0d      	ldr	r2, [pc, #52]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ec2:	fb03 f202 	mul.w	r2, r3, r2
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	e004      	b.n	8004eda <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a0c      	ldr	r2, [pc, #48]	; (8004f04 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004ed4:	fb02 f303 	mul.w	r3, r2, r3
 8004ed8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	613b      	str	r3, [r7, #16]
      break;
 8004ede:	e002      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ee0:	4b05      	ldr	r3, [pc, #20]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004ee2:	613b      	str	r3, [r7, #16]
      break;
 8004ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ee6:	693b      	ldr	r3, [r7, #16]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	371c      	adds	r7, #28
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bc80      	pop	{r7}
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	007a1200 	.word	0x007a1200
 8004efc:	08007ae4 	.word	0x08007ae4
 8004f00:	08007af4 	.word	0x08007af4
 8004f04:	003d0900 	.word	0x003d0900

08004f08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f0c:	4b02      	ldr	r3, [pc, #8]	; (8004f18 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bc80      	pop	{r7}
 8004f16:	4770      	bx	lr
 8004f18:	20000914 	.word	0x20000914

08004f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f20:	f7ff fff2 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8004f24:	4602      	mov	r2, r0
 8004f26:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	0a1b      	lsrs	r3, r3, #8
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	4903      	ldr	r1, [pc, #12]	; (8004f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f32:	5ccb      	ldrb	r3, [r1, r3]
 8004f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	08007adc 	.word	0x08007adc

08004f44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f48:	f7ff ffde 	bl	8004f08 <HAL_RCC_GetHCLKFreq>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	4b05      	ldr	r3, [pc, #20]	; (8004f64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	0adb      	lsrs	r3, r3, #11
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	4903      	ldr	r1, [pc, #12]	; (8004f68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f5a:	5ccb      	ldrb	r3, [r1, r3]
 8004f5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40021000 	.word	0x40021000
 8004f68:	08007adc 	.word	0x08007adc

08004f6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004f74:	4b0a      	ldr	r3, [pc, #40]	; (8004fa0 <RCC_Delay+0x34>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a0a      	ldr	r2, [pc, #40]	; (8004fa4 <RCC_Delay+0x38>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	0a5b      	lsrs	r3, r3, #9
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	fb02 f303 	mul.w	r3, r2, r3
 8004f86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004f88:	bf00      	nop
  }
  while (Delay --);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	1e5a      	subs	r2, r3, #1
 8004f8e:	60fa      	str	r2, [r7, #12]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f9      	bne.n	8004f88 <RCC_Delay+0x1c>
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop
 8004f98:	3714      	adds	r7, #20
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bc80      	pop	{r7}
 8004f9e:	4770      	bx	lr
 8004fa0:	20000914 	.word	0x20000914
 8004fa4:	10624dd3 	.word	0x10624dd3

08004fa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e041      	b.n	800503e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d106      	bne.n	8004fd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f7fd fbce 	bl	8002770 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	f000 fa82 	bl	80054f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2201      	movs	r2, #1
 8005000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
	...

08005048 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b01      	cmp	r3, #1
 800505a:	d001      	beq.n	8005060 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e044      	b.n	80050ea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2202      	movs	r2, #2
 8005064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a1d      	ldr	r2, [pc, #116]	; (80050f4 <HAL_TIM_Base_Start_IT+0xac>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d018      	beq.n	80050b4 <HAL_TIM_Base_Start_IT+0x6c>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a1c      	ldr	r2, [pc, #112]	; (80050f8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d013      	beq.n	80050b4 <HAL_TIM_Base_Start_IT+0x6c>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005094:	d00e      	beq.n	80050b4 <HAL_TIM_Base_Start_IT+0x6c>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a18      	ldr	r2, [pc, #96]	; (80050fc <HAL_TIM_Base_Start_IT+0xb4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d009      	beq.n	80050b4 <HAL_TIM_Base_Start_IT+0x6c>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a16      	ldr	r2, [pc, #88]	; (8005100 <HAL_TIM_Base_Start_IT+0xb8>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d004      	beq.n	80050b4 <HAL_TIM_Base_Start_IT+0x6c>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a15      	ldr	r2, [pc, #84]	; (8005104 <HAL_TIM_Base_Start_IT+0xbc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d111      	bne.n	80050d8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2b06      	cmp	r3, #6
 80050c4:	d010      	beq.n	80050e8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f042 0201 	orr.w	r2, r2, #1
 80050d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050d6:	e007      	b.n	80050e8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr
 80050f4:	40012c00 	.word	0x40012c00
 80050f8:	40013400 	.word	0x40013400
 80050fc:	40000400 	.word	0x40000400
 8005100:	40000800 	.word	0x40000800
 8005104:	40000c00 	.word	0x40000c00

08005108 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b02      	cmp	r3, #2
 800511c:	d122      	bne.n	8005164 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b02      	cmp	r3, #2
 800512a:	d11b      	bne.n	8005164 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0202 	mvn.w	r2, #2
 8005134:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2201      	movs	r2, #1
 800513a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f9b4 	bl	80054b8 <HAL_TIM_IC_CaptureCallback>
 8005150:	e005      	b.n	800515e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f9a7 	bl	80054a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f9b6 	bl	80054ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f003 0304 	and.w	r3, r3, #4
 800516e:	2b04      	cmp	r3, #4
 8005170:	d122      	bne.n	80051b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b04      	cmp	r3, #4
 800517e:	d11b      	bne.n	80051b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f06f 0204 	mvn.w	r2, #4
 8005188:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2202      	movs	r2, #2
 800518e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f98a 	bl	80054b8 <HAL_TIM_IC_CaptureCallback>
 80051a4:	e005      	b.n	80051b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f97d 	bl	80054a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f98c 	bl	80054ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b08      	cmp	r3, #8
 80051c4:	d122      	bne.n	800520c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f003 0308 	and.w	r3, r3, #8
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d11b      	bne.n	800520c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f06f 0208 	mvn.w	r2, #8
 80051dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2204      	movs	r2, #4
 80051e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	f003 0303 	and.w	r3, r3, #3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f960 	bl	80054b8 <HAL_TIM_IC_CaptureCallback>
 80051f8:	e005      	b.n	8005206 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f953 	bl	80054a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f962 	bl	80054ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f003 0310 	and.w	r3, r3, #16
 8005216:	2b10      	cmp	r3, #16
 8005218:	d122      	bne.n	8005260 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	2b10      	cmp	r3, #16
 8005226:	d11b      	bne.n	8005260 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0210 	mvn.w	r2, #16
 8005230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2208      	movs	r2, #8
 8005236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 f936 	bl	80054b8 <HAL_TIM_IC_CaptureCallback>
 800524c:	e005      	b.n	800525a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 f929 	bl	80054a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f938 	bl	80054ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b01      	cmp	r3, #1
 800526c:	d10e      	bne.n	800528c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b01      	cmp	r3, #1
 800527a:	d107      	bne.n	800528c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f06f 0201 	mvn.w	r2, #1
 8005284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7fc ff08 	bl	800209c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005296:	2b80      	cmp	r3, #128	; 0x80
 8005298:	d10e      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a4:	2b80      	cmp	r3, #128	; 0x80
 80052a6:	d107      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 faa1 	bl	80057fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c2:	2b40      	cmp	r3, #64	; 0x40
 80052c4:	d10e      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d0:	2b40      	cmp	r3, #64	; 0x40
 80052d2:	d107      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f8fc 	bl	80054dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 0320 	and.w	r3, r3, #32
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d10e      	bne.n	8005310 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0320 	and.w	r3, r3, #32
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	d107      	bne.n	8005310 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0220 	mvn.w	r2, #32
 8005308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fa6c 	bl	80057e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005310:	bf00      	nop
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_TIM_ConfigClockSource+0x1c>
 8005330:	2302      	movs	r3, #2
 8005332:	e0b4      	b.n	800549e <HAL_TIM_ConfigClockSource+0x186>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800535a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800536c:	d03e      	beq.n	80053ec <HAL_TIM_ConfigClockSource+0xd4>
 800536e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005372:	f200 8087 	bhi.w	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 8005376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537a:	f000 8086 	beq.w	800548a <HAL_TIM_ConfigClockSource+0x172>
 800537e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005382:	d87f      	bhi.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 8005384:	2b70      	cmp	r3, #112	; 0x70
 8005386:	d01a      	beq.n	80053be <HAL_TIM_ConfigClockSource+0xa6>
 8005388:	2b70      	cmp	r3, #112	; 0x70
 800538a:	d87b      	bhi.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 800538c:	2b60      	cmp	r3, #96	; 0x60
 800538e:	d050      	beq.n	8005432 <HAL_TIM_ConfigClockSource+0x11a>
 8005390:	2b60      	cmp	r3, #96	; 0x60
 8005392:	d877      	bhi.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 8005394:	2b50      	cmp	r3, #80	; 0x50
 8005396:	d03c      	beq.n	8005412 <HAL_TIM_ConfigClockSource+0xfa>
 8005398:	2b50      	cmp	r3, #80	; 0x50
 800539a:	d873      	bhi.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 800539c:	2b40      	cmp	r3, #64	; 0x40
 800539e:	d058      	beq.n	8005452 <HAL_TIM_ConfigClockSource+0x13a>
 80053a0:	2b40      	cmp	r3, #64	; 0x40
 80053a2:	d86f      	bhi.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 80053a4:	2b30      	cmp	r3, #48	; 0x30
 80053a6:	d064      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x15a>
 80053a8:	2b30      	cmp	r3, #48	; 0x30
 80053aa:	d86b      	bhi.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 80053ac:	2b20      	cmp	r3, #32
 80053ae:	d060      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x15a>
 80053b0:	2b20      	cmp	r3, #32
 80053b2:	d867      	bhi.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d05c      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x15a>
 80053b8:	2b10      	cmp	r3, #16
 80053ba:	d05a      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x15a>
 80053bc:	e062      	b.n	8005484 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053ce:	f000 f980 	bl	80056d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	609a      	str	r2, [r3, #8]
      break;
 80053ea:	e04f      	b.n	800548c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053fc:	f000 f969 	bl	80056d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800540e:	609a      	str	r2, [r3, #8]
      break;
 8005410:	e03c      	b.n	800548c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800541e:	461a      	mov	r2, r3
 8005420:	f000 f8e0 	bl	80055e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2150      	movs	r1, #80	; 0x50
 800542a:	4618      	mov	r0, r3
 800542c:	f000 f937 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 8005430:	e02c      	b.n	800548c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800543e:	461a      	mov	r2, r3
 8005440:	f000 f8fe 	bl	8005640 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2160      	movs	r1, #96	; 0x60
 800544a:	4618      	mov	r0, r3
 800544c:	f000 f927 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 8005450:	e01c      	b.n	800548c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800545e:	461a      	mov	r2, r3
 8005460:	f000 f8c0 	bl	80055e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2140      	movs	r1, #64	; 0x40
 800546a:	4618      	mov	r0, r3
 800546c:	f000 f917 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 8005470:	e00c      	b.n	800548c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4619      	mov	r1, r3
 800547c:	4610      	mov	r0, r2
 800547e:	f000 f90e 	bl	800569e <TIM_ITRx_SetConfig>
      break;
 8005482:	e003      	b.n	800548c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	73fb      	strb	r3, [r7, #15]
      break;
 8005488:	e000      	b.n	800548c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800548a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800549c:	7bfb      	ldrb	r3, [r7, #15]
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054a6:	b480      	push	{r7}
 80054a8:	b083      	sub	sp, #12
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr

080054b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bc80      	pop	{r7}
 80054c8:	4770      	bx	lr

080054ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bc80      	pop	{r7}
 80054da:	4770      	bx	lr

080054dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bc80      	pop	{r7}
 80054ec:	4770      	bx	lr
	...

080054f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a33      	ldr	r2, [pc, #204]	; (80055d0 <TIM_Base_SetConfig+0xe0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d013      	beq.n	8005530 <TIM_Base_SetConfig+0x40>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a32      	ldr	r2, [pc, #200]	; (80055d4 <TIM_Base_SetConfig+0xe4>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00f      	beq.n	8005530 <TIM_Base_SetConfig+0x40>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005516:	d00b      	beq.n	8005530 <TIM_Base_SetConfig+0x40>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a2f      	ldr	r2, [pc, #188]	; (80055d8 <TIM_Base_SetConfig+0xe8>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d007      	beq.n	8005530 <TIM_Base_SetConfig+0x40>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a2e      	ldr	r2, [pc, #184]	; (80055dc <TIM_Base_SetConfig+0xec>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d003      	beq.n	8005530 <TIM_Base_SetConfig+0x40>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a2d      	ldr	r2, [pc, #180]	; (80055e0 <TIM_Base_SetConfig+0xf0>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d108      	bne.n	8005542 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a22      	ldr	r2, [pc, #136]	; (80055d0 <TIM_Base_SetConfig+0xe0>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d013      	beq.n	8005572 <TIM_Base_SetConfig+0x82>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a21      	ldr	r2, [pc, #132]	; (80055d4 <TIM_Base_SetConfig+0xe4>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00f      	beq.n	8005572 <TIM_Base_SetConfig+0x82>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005558:	d00b      	beq.n	8005572 <TIM_Base_SetConfig+0x82>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a1e      	ldr	r2, [pc, #120]	; (80055d8 <TIM_Base_SetConfig+0xe8>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d007      	beq.n	8005572 <TIM_Base_SetConfig+0x82>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a1d      	ldr	r2, [pc, #116]	; (80055dc <TIM_Base_SetConfig+0xec>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d003      	beq.n	8005572 <TIM_Base_SetConfig+0x82>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a1c      	ldr	r2, [pc, #112]	; (80055e0 <TIM_Base_SetConfig+0xf0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d108      	bne.n	8005584 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	4313      	orrs	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	689a      	ldr	r2, [r3, #8]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a09      	ldr	r2, [pc, #36]	; (80055d0 <TIM_Base_SetConfig+0xe0>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d003      	beq.n	80055b8 <TIM_Base_SetConfig+0xc8>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a08      	ldr	r2, [pc, #32]	; (80055d4 <TIM_Base_SetConfig+0xe4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d103      	bne.n	80055c0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	691a      	ldr	r2, [r3, #16]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	615a      	str	r2, [r3, #20]
}
 80055c6:	bf00      	nop
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bc80      	pop	{r7}
 80055ce:	4770      	bx	lr
 80055d0:	40012c00 	.word	0x40012c00
 80055d4:	40013400 	.word	0x40013400
 80055d8:	40000400 	.word	0x40000400
 80055dc:	40000800 	.word	0x40000800
 80055e0:	40000c00 	.word	0x40000c00

080055e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f023 0201 	bic.w	r2, r3, #1
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800560e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f023 030a 	bic.w	r3, r3, #10
 8005620:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	621a      	str	r2, [r3, #32]
}
 8005636:	bf00      	nop
 8005638:	371c      	adds	r7, #28
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr

08005640 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005640:	b480      	push	{r7}
 8005642:	b087      	sub	sp, #28
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f023 0210 	bic.w	r2, r3, #16
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800566a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	031b      	lsls	r3, r3, #12
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800567c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	697a      	ldr	r2, [r7, #20]
 8005684:	4313      	orrs	r3, r2
 8005686:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	621a      	str	r2, [r3, #32]
}
 8005694:	bf00      	nop
 8005696:	371c      	adds	r7, #28
 8005698:	46bd      	mov	sp, r7
 800569a:	bc80      	pop	{r7}
 800569c:	4770      	bx	lr

0800569e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800569e:	b480      	push	{r7}
 80056a0:	b085      	sub	sp, #20
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f043 0307 	orr.w	r3, r3, #7
 80056c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	68fa      	ldr	r2, [r7, #12]
 80056c6:	609a      	str	r2, [r3, #8]
}
 80056c8:	bf00      	nop
 80056ca:	3714      	adds	r7, #20
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr

080056d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b087      	sub	sp, #28
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	607a      	str	r2, [r7, #4]
 80056de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	021a      	lsls	r2, r3, #8
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	431a      	orrs	r2, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	697a      	ldr	r2, [r7, #20]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	609a      	str	r2, [r3, #8]
}
 8005706:	bf00      	nop
 8005708:	371c      	adds	r7, #28
 800570a:	46bd      	mov	sp, r7
 800570c:	bc80      	pop	{r7}
 800570e:	4770      	bx	lr

08005710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005724:	2302      	movs	r3, #2
 8005726:	e050      	b.n	80057ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800574e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a1b      	ldr	r2, [pc, #108]	; (80057d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d018      	beq.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a19      	ldr	r2, [pc, #100]	; (80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d013      	beq.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577e:	d00e      	beq.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a15      	ldr	r2, [pc, #84]	; (80057dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d009      	beq.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a14      	ldr	r2, [pc, #80]	; (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d004      	beq.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a12      	ldr	r2, [pc, #72]	; (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d10c      	bne.n	80057b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bc80      	pop	{r7}
 80057d2:	4770      	bx	lr
 80057d4:	40012c00 	.word	0x40012c00
 80057d8:	40013400 	.word	0x40013400
 80057dc:	40000400 	.word	0x40000400
 80057e0:	40000800 	.word	0x40000800
 80057e4:	40000c00 	.word	0x40000c00

080057e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bc80      	pop	{r7}
 80057f8:	4770      	bx	lr

080057fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057fa:	b480      	push	{r7}
 80057fc:	b083      	sub	sp, #12
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005802:	bf00      	nop
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	bc80      	pop	{r7}
 800580a:	4770      	bx	lr

0800580c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e042      	b.n	80058a4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d106      	bne.n	8005838 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f7fc ffc2 	bl	80027bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2224      	movs	r2, #36	; 0x24
 800583c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68da      	ldr	r2, [r3, #12]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800584e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fcb5 	bl	80061c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005864:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695a      	ldr	r2, [r3, #20]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005874:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005884:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2220      	movs	r2, #32
 8005890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3708      	adds	r7, #8
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	4613      	mov	r3, r2
 80058b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b20      	cmp	r3, #32
 80058c4:	d121      	bne.n	800590a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <HAL_UART_Transmit_IT+0x26>
 80058cc:	88fb      	ldrh	r3, [r7, #6]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e01a      	b.n	800590c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	88fa      	ldrh	r2, [r7, #6]
 80058e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	88fa      	ldrh	r2, [r7, #6]
 80058e6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2221      	movs	r2, #33	; 0x21
 80058f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68da      	ldr	r2, [r3, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005904:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	e000      	b.n	800590c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800590a:	2302      	movs	r3, #2
  }
}
 800590c:	4618      	mov	r0, r3
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	bc80      	pop	{r7}
 8005914:	4770      	bx	lr
	...

08005918 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b0ba      	sub	sp, #232	; 0xe8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800593e:	2300      	movs	r3, #0
 8005940:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005944:	2300      	movs	r3, #0
 8005946:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800594a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005956:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10f      	bne.n	800597e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800595e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d009      	beq.n	800597e <HAL_UART_IRQHandler+0x66>
 800596a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d003      	beq.n	800597e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fb63 	bl	8006042 <UART_Receive_IT>
      return;
 800597c:	e25b      	b.n	8005e36 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800597e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 80de 	beq.w	8005b44 <HAL_UART_IRQHandler+0x22c>
 8005988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d106      	bne.n	80059a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005998:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800599c:	2b00      	cmp	r3, #0
 800599e:	f000 80d1 	beq.w	8005b44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a6:	f003 0301 	and.w	r3, r3, #1
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00b      	beq.n	80059c6 <HAL_UART_IRQHandler+0xae>
 80059ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d005      	beq.n	80059c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059be:	f043 0201 	orr.w	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00b      	beq.n	80059ea <HAL_UART_IRQHandler+0xd2>
 80059d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d005      	beq.n	80059ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e2:	f043 0202 	orr.w	r2, r3, #2
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00b      	beq.n	8005a0e <HAL_UART_IRQHandler+0xf6>
 80059f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d005      	beq.n	8005a0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a06:	f043 0204 	orr.w	r2, r3, #4
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d011      	beq.n	8005a3e <HAL_UART_IRQHandler+0x126>
 8005a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d105      	bne.n	8005a32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d005      	beq.n	8005a3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a36:	f043 0208 	orr.w	r2, r3, #8
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 81f2 	beq.w	8005e2c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a4c:	f003 0320 	and.w	r3, r3, #32
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d008      	beq.n	8005a66 <HAL_UART_IRQHandler+0x14e>
 8005a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 faee 	bl	8006042 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	bf14      	ite	ne
 8005a74:	2301      	movne	r3, #1
 8005a76:	2300      	moveq	r3, #0
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d103      	bne.n	8005a92 <HAL_UART_IRQHandler+0x17a>
 8005a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d04f      	beq.n	8005b32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f9f8 	bl	8005e88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d041      	beq.n	8005b2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3314      	adds	r3, #20
 8005aac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005abc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3314      	adds	r3, #20
 8005ace:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ad2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ada:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ade:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005aea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1d9      	bne.n	8005aa6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d013      	beq.n	8005b22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afe:	4a7e      	ldr	r2, [pc, #504]	; (8005cf8 <HAL_UART_IRQHandler+0x3e0>)
 8005b00:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b06:	4618      	mov	r0, r3
 8005b08:	f7fd fa14 	bl	8002f34 <HAL_DMA_Abort_IT>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d016      	beq.n	8005b40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b20:	e00e      	b.n	8005b40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 f99c 	bl	8005e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b28:	e00a      	b.n	8005b40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 f998 	bl	8005e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b30:	e006      	b.n	8005b40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f000 f994 	bl	8005e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005b3e:	e175      	b.n	8005e2c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b40:	bf00      	nop
    return;
 8005b42:	e173      	b.n	8005e2c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	f040 814f 	bne.w	8005dec <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b52:	f003 0310 	and.w	r3, r3, #16
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 8148 	beq.w	8005dec <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b60:	f003 0310 	and.w	r3, r3, #16
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 8141 	beq.w	8005dec <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	60bb      	str	r3, [r7, #8]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	60bb      	str	r3, [r7, #8]
 8005b7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 80b6 	beq.w	8005cfc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	f000 8145 	beq.w	8005e30 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005baa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	f080 813e 	bcs.w	8005e30 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc0:	699b      	ldr	r3, [r3, #24]
 8005bc2:	2b20      	cmp	r3, #32
 8005bc4:	f000 8088 	beq.w	8005cd8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	330c      	adds	r3, #12
 8005bce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bd6:	e853 3f00 	ldrex	r3, [r3]
 8005bda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005be2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005be6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	330c      	adds	r3, #12
 8005bf0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005bf4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bf8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c00:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c04:	e841 2300 	strex	r3, r2, [r1]
 8005c08:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1d9      	bne.n	8005bc8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3314      	adds	r3, #20
 8005c1a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c1e:	e853 3f00 	ldrex	r3, [r3]
 8005c22:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c26:	f023 0301 	bic.w	r3, r3, #1
 8005c2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	3314      	adds	r3, #20
 8005c34:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c38:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c3c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c40:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c44:	e841 2300 	strex	r3, r2, [r1]
 8005c48:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d1e1      	bne.n	8005c14 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3314      	adds	r3, #20
 8005c56:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c5a:	e853 3f00 	ldrex	r3, [r3]
 8005c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3314      	adds	r3, #20
 8005c70:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c74:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c76:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c78:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c7c:	e841 2300 	strex	r3, r2, [r1]
 8005c80:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d1e3      	bne.n	8005c50 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2220      	movs	r2, #32
 8005c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	330c      	adds	r3, #12
 8005c9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ca6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ca8:	f023 0310 	bic.w	r3, r3, #16
 8005cac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	330c      	adds	r3, #12
 8005cb6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005cba:	65ba      	str	r2, [r7, #88]	; 0x58
 8005cbc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005cc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cc2:	e841 2300 	strex	r3, r2, [r1]
 8005cc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1e3      	bne.n	8005c96 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f7fd f8f3 	bl	8002ebe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	4619      	mov	r1, r3
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 f8bf 	bl	8005e72 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cf4:	e09c      	b.n	8005e30 <HAL_UART_IRQHandler+0x518>
 8005cf6:	bf00      	nop
 8005cf8:	08005f4d 	.word	0x08005f4d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 808e 	beq.w	8005e34 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005d18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 8089 	beq.w	8005e34 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	330c      	adds	r3, #12
 8005d28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2c:	e853 3f00 	ldrex	r3, [r3]
 8005d30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	330c      	adds	r3, #12
 8005d42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d46:	647a      	str	r2, [r7, #68]	; 0x44
 8005d48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d4e:	e841 2300 	strex	r3, r2, [r1]
 8005d52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1e3      	bne.n	8005d22 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3314      	adds	r3, #20
 8005d60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d64:	e853 3f00 	ldrex	r3, [r3]
 8005d68:	623b      	str	r3, [r7, #32]
   return(result);
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	f023 0301 	bic.w	r3, r3, #1
 8005d70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3314      	adds	r3, #20
 8005d7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d7e:	633a      	str	r2, [r7, #48]	; 0x30
 8005d80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1e3      	bne.n	8005d5a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2220      	movs	r2, #32
 8005d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	330c      	adds	r3, #12
 8005da6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	e853 3f00 	ldrex	r3, [r3]
 8005dae:	60fb      	str	r3, [r7, #12]
   return(result);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0310 	bic.w	r3, r3, #16
 8005db6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	330c      	adds	r3, #12
 8005dc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005dc4:	61fa      	str	r2, [r7, #28]
 8005dc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc8:	69b9      	ldr	r1, [r7, #24]
 8005dca:	69fa      	ldr	r2, [r7, #28]
 8005dcc:	e841 2300 	strex	r3, r2, [r1]
 8005dd0:	617b      	str	r3, [r7, #20]
   return(result);
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1e3      	bne.n	8005da0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005de2:	4619      	mov	r1, r3
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f844 	bl	8005e72 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005dea:	e023      	b.n	8005e34 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d009      	beq.n	8005e0c <HAL_UART_IRQHandler+0x4f4>
 8005df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d003      	beq.n	8005e0c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 f8b5 	bl	8005f74 <UART_Transmit_IT>
    return;
 8005e0a:	e014      	b.n	8005e36 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00e      	beq.n	8005e36 <HAL_UART_IRQHandler+0x51e>
 8005e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d008      	beq.n	8005e36 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f8f4 	bl	8006012 <UART_EndTransmit_IT>
    return;
 8005e2a:	e004      	b.n	8005e36 <HAL_UART_IRQHandler+0x51e>
    return;
 8005e2c:	bf00      	nop
 8005e2e:	e002      	b.n	8005e36 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e30:	bf00      	nop
 8005e32:	e000      	b.n	8005e36 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e34:	bf00      	nop
  }
}
 8005e36:	37e8      	adds	r7, #232	; 0xe8
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bc80      	pop	{r7}
 8005e4c:	4770      	bx	lr

08005e4e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e4e:	b480      	push	{r7}
 8005e50:	b083      	sub	sp, #12
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005e56:	bf00      	nop
 8005e58:	370c      	adds	r7, #12
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bc80      	pop	{r7}
 8005e5e:	4770      	bx	lr

08005e60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bc80      	pop	{r7}
 8005e70:	4770      	bx	lr

08005e72 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e7e:	bf00      	nop
 8005e80:	370c      	adds	r7, #12
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bc80      	pop	{r7}
 8005e86:	4770      	bx	lr

08005e88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b095      	sub	sp, #84	; 0x54
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	330c      	adds	r3, #12
 8005e96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9a:	e853 3f00 	ldrex	r3, [r3]
 8005e9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	330c      	adds	r3, #12
 8005eae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005eb0:	643a      	str	r2, [r7, #64]	; 0x40
 8005eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005eb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005eb8:	e841 2300 	strex	r3, r2, [r1]
 8005ebc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d1e5      	bne.n	8005e90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3314      	adds	r3, #20
 8005eca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ecc:	6a3b      	ldr	r3, [r7, #32]
 8005ece:	e853 3f00 	ldrex	r3, [r3]
 8005ed2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	f023 0301 	bic.w	r3, r3, #1
 8005eda:	64bb      	str	r3, [r7, #72]	; 0x48
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	3314      	adds	r3, #20
 8005ee2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ee4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005eea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005eec:	e841 2300 	strex	r3, r2, [r1]
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1e5      	bne.n	8005ec4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d119      	bne.n	8005f34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	330c      	adds	r3, #12
 8005f06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f023 0310 	bic.w	r3, r3, #16
 8005f16:	647b      	str	r3, [r7, #68]	; 0x44
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	330c      	adds	r3, #12
 8005f1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f20:	61ba      	str	r2, [r7, #24]
 8005f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f24:	6979      	ldr	r1, [r7, #20]
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	e841 2300 	strex	r3, r2, [r1]
 8005f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1e5      	bne.n	8005f00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2220      	movs	r2, #32
 8005f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005f42:	bf00      	nop
 8005f44:	3754      	adds	r7, #84	; 0x54
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bc80      	pop	{r7}
 8005f4a:	4770      	bx	lr

08005f4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f7ff ff7a 	bl	8005e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f6c:	bf00      	nop
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b21      	cmp	r3, #33	; 0x21
 8005f86:	d13e      	bne.n	8006006 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f90:	d114      	bne.n	8005fbc <UART_Transmit_IT+0x48>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d110      	bne.n	8005fbc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	1c9a      	adds	r2, r3, #2
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	621a      	str	r2, [r3, #32]
 8005fba:	e008      	b.n	8005fce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	1c59      	adds	r1, r3, #1
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6211      	str	r1, [r2, #32]
 8005fc6:	781a      	ldrb	r2, [r3, #0]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10f      	bne.n	8006002 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68da      	ldr	r2, [r3, #12]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ff0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006000:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006002:	2300      	movs	r3, #0
 8006004:	e000      	b.n	8006008 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006006:	2302      	movs	r3, #2
  }
}
 8006008:	4618      	mov	r0, r3
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	bc80      	pop	{r7}
 8006010:	4770      	bx	lr

08006012 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006012:	b580      	push	{r7, lr}
 8006014:	b082      	sub	sp, #8
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68da      	ldr	r2, [r3, #12]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006028:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2220      	movs	r2, #32
 800602e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff ff02 	bl	8005e3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b08c      	sub	sp, #48	; 0x30
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b22      	cmp	r3, #34	; 0x22
 8006054:	f040 80ae 	bne.w	80061b4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006060:	d117      	bne.n	8006092 <UART_Receive_IT+0x50>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d113      	bne.n	8006092 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800606a:	2300      	movs	r3, #0
 800606c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006072:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	b29b      	uxth	r3, r3
 800607c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006080:	b29a      	uxth	r2, r3
 8006082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006084:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608a:	1c9a      	adds	r2, r3, #2
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	629a      	str	r2, [r3, #40]	; 0x28
 8006090:	e026      	b.n	80060e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006096:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006098:	2300      	movs	r3, #0
 800609a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060a4:	d007      	beq.n	80060b6 <UART_Receive_IT+0x74>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10a      	bne.n	80060c4 <UART_Receive_IT+0x82>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d106      	bne.n	80060c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	b2da      	uxtb	r2, r3
 80060be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	e008      	b.n	80060d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	3b01      	subs	r3, #1
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	4619      	mov	r1, r3
 80060ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d15d      	bne.n	80061b0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 0220 	bic.w	r2, r2, #32
 8006102:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68da      	ldr	r2, [r3, #12]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006112:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695a      	ldr	r2, [r3, #20]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f022 0201 	bic.w	r2, r2, #1
 8006122:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2220      	movs	r2, #32
 8006128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006136:	2b01      	cmp	r3, #1
 8006138:	d135      	bne.n	80061a6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	330c      	adds	r3, #12
 8006146:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	e853 3f00 	ldrex	r3, [r3]
 800614e:	613b      	str	r3, [r7, #16]
   return(result);
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f023 0310 	bic.w	r3, r3, #16
 8006156:	627b      	str	r3, [r7, #36]	; 0x24
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	330c      	adds	r3, #12
 800615e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006160:	623a      	str	r2, [r7, #32]
 8006162:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	69f9      	ldr	r1, [r7, #28]
 8006166:	6a3a      	ldr	r2, [r7, #32]
 8006168:	e841 2300 	strex	r3, r2, [r1]
 800616c:	61bb      	str	r3, [r7, #24]
   return(result);
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e5      	bne.n	8006140 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0310 	and.w	r3, r3, #16
 800617e:	2b10      	cmp	r3, #16
 8006180:	d10a      	bne.n	8006198 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	60fb      	str	r3, [r7, #12]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	60fb      	str	r3, [r7, #12]
 8006196:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800619c:	4619      	mov	r1, r3
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff fe67 	bl	8005e72 <HAL_UARTEx_RxEventCallback>
 80061a4:	e002      	b.n	80061ac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f7ff fe51 	bl	8005e4e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80061ac:	2300      	movs	r3, #0
 80061ae:	e002      	b.n	80061b6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	e000      	b.n	80061b6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80061b4:	2302      	movs	r3, #2
  }
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3730      	adds	r7, #48	; 0x30
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
	...

080061c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68da      	ldr	r2, [r3, #12]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	431a      	orrs	r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80061fa:	f023 030c 	bic.w	r3, r3, #12
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6812      	ldr	r2, [r2, #0]
 8006202:	68b9      	ldr	r1, [r7, #8]
 8006204:	430b      	orrs	r3, r1
 8006206:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	430a      	orrs	r2, r1
 800621c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a2c      	ldr	r2, [pc, #176]	; (80062d4 <UART_SetConfig+0x114>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d103      	bne.n	8006230 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006228:	f7fe fe8c 	bl	8004f44 <HAL_RCC_GetPCLK2Freq>
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	e002      	b.n	8006236 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006230:	f7fe fe74 	bl	8004f1c <HAL_RCC_GetPCLK1Freq>
 8006234:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4613      	mov	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	009a      	lsls	r2, r3, #2
 8006240:	441a      	add	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	fbb2 f3f3 	udiv	r3, r2, r3
 800624c:	4a22      	ldr	r2, [pc, #136]	; (80062d8 <UART_SetConfig+0x118>)
 800624e:	fba2 2303 	umull	r2, r3, r2, r3
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	0119      	lsls	r1, r3, #4
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	4613      	mov	r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	009a      	lsls	r2, r3, #2
 8006260:	441a      	add	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	fbb2 f2f3 	udiv	r2, r2, r3
 800626c:	4b1a      	ldr	r3, [pc, #104]	; (80062d8 <UART_SetConfig+0x118>)
 800626e:	fba3 0302 	umull	r0, r3, r3, r2
 8006272:	095b      	lsrs	r3, r3, #5
 8006274:	2064      	movs	r0, #100	; 0x64
 8006276:	fb00 f303 	mul.w	r3, r0, r3
 800627a:	1ad3      	subs	r3, r2, r3
 800627c:	011b      	lsls	r3, r3, #4
 800627e:	3332      	adds	r3, #50	; 0x32
 8006280:	4a15      	ldr	r2, [pc, #84]	; (80062d8 <UART_SetConfig+0x118>)
 8006282:	fba2 2303 	umull	r2, r3, r2, r3
 8006286:	095b      	lsrs	r3, r3, #5
 8006288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800628c:	4419      	add	r1, r3
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	4613      	mov	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	009a      	lsls	r2, r3, #2
 8006298:	441a      	add	r2, r3
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80062a4:	4b0c      	ldr	r3, [pc, #48]	; (80062d8 <UART_SetConfig+0x118>)
 80062a6:	fba3 0302 	umull	r0, r3, r3, r2
 80062aa:	095b      	lsrs	r3, r3, #5
 80062ac:	2064      	movs	r0, #100	; 0x64
 80062ae:	fb00 f303 	mul.w	r3, r0, r3
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	011b      	lsls	r3, r3, #4
 80062b6:	3332      	adds	r3, #50	; 0x32
 80062b8:	4a07      	ldr	r2, [pc, #28]	; (80062d8 <UART_SetConfig+0x118>)
 80062ba:	fba2 2303 	umull	r2, r3, r2, r3
 80062be:	095b      	lsrs	r3, r3, #5
 80062c0:	f003 020f 	and.w	r2, r3, #15
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	440a      	add	r2, r1
 80062ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80062cc:	bf00      	nop
 80062ce:	3710      	adds	r7, #16
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	40013800 	.word	0x40013800
 80062d8:	51eb851f 	.word	0x51eb851f

080062dc <malloc>:
 80062dc:	4b02      	ldr	r3, [pc, #8]	; (80062e8 <malloc+0xc>)
 80062de:	4601      	mov	r1, r0
 80062e0:	6818      	ldr	r0, [r3, #0]
 80062e2:	f000 b823 	b.w	800632c <_malloc_r>
 80062e6:	bf00      	nop
 80062e8:	2000096c 	.word	0x2000096c

080062ec <sbrk_aligned>:
 80062ec:	b570      	push	{r4, r5, r6, lr}
 80062ee:	4e0e      	ldr	r6, [pc, #56]	; (8006328 <sbrk_aligned+0x3c>)
 80062f0:	460c      	mov	r4, r1
 80062f2:	6831      	ldr	r1, [r6, #0]
 80062f4:	4605      	mov	r5, r0
 80062f6:	b911      	cbnz	r1, 80062fe <sbrk_aligned+0x12>
 80062f8:	f000 f8dc 	bl	80064b4 <_sbrk_r>
 80062fc:	6030      	str	r0, [r6, #0]
 80062fe:	4621      	mov	r1, r4
 8006300:	4628      	mov	r0, r5
 8006302:	f000 f8d7 	bl	80064b4 <_sbrk_r>
 8006306:	1c43      	adds	r3, r0, #1
 8006308:	d00a      	beq.n	8006320 <sbrk_aligned+0x34>
 800630a:	1cc4      	adds	r4, r0, #3
 800630c:	f024 0403 	bic.w	r4, r4, #3
 8006310:	42a0      	cmp	r0, r4
 8006312:	d007      	beq.n	8006324 <sbrk_aligned+0x38>
 8006314:	1a21      	subs	r1, r4, r0
 8006316:	4628      	mov	r0, r5
 8006318:	f000 f8cc 	bl	80064b4 <_sbrk_r>
 800631c:	3001      	adds	r0, #1
 800631e:	d101      	bne.n	8006324 <sbrk_aligned+0x38>
 8006320:	f04f 34ff 	mov.w	r4, #4294967295
 8006324:	4620      	mov	r0, r4
 8006326:	bd70      	pop	{r4, r5, r6, pc}
 8006328:	20000d74 	.word	0x20000d74

0800632c <_malloc_r>:
 800632c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006330:	1ccd      	adds	r5, r1, #3
 8006332:	f025 0503 	bic.w	r5, r5, #3
 8006336:	3508      	adds	r5, #8
 8006338:	2d0c      	cmp	r5, #12
 800633a:	bf38      	it	cc
 800633c:	250c      	movcc	r5, #12
 800633e:	2d00      	cmp	r5, #0
 8006340:	4607      	mov	r7, r0
 8006342:	db01      	blt.n	8006348 <_malloc_r+0x1c>
 8006344:	42a9      	cmp	r1, r5
 8006346:	d905      	bls.n	8006354 <_malloc_r+0x28>
 8006348:	230c      	movs	r3, #12
 800634a:	2600      	movs	r6, #0
 800634c:	603b      	str	r3, [r7, #0]
 800634e:	4630      	mov	r0, r6
 8006350:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006354:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006428 <_malloc_r+0xfc>
 8006358:	f000 f868 	bl	800642c <__malloc_lock>
 800635c:	f8d8 3000 	ldr.w	r3, [r8]
 8006360:	461c      	mov	r4, r3
 8006362:	bb5c      	cbnz	r4, 80063bc <_malloc_r+0x90>
 8006364:	4629      	mov	r1, r5
 8006366:	4638      	mov	r0, r7
 8006368:	f7ff ffc0 	bl	80062ec <sbrk_aligned>
 800636c:	1c43      	adds	r3, r0, #1
 800636e:	4604      	mov	r4, r0
 8006370:	d155      	bne.n	800641e <_malloc_r+0xf2>
 8006372:	f8d8 4000 	ldr.w	r4, [r8]
 8006376:	4626      	mov	r6, r4
 8006378:	2e00      	cmp	r6, #0
 800637a:	d145      	bne.n	8006408 <_malloc_r+0xdc>
 800637c:	2c00      	cmp	r4, #0
 800637e:	d048      	beq.n	8006412 <_malloc_r+0xe6>
 8006380:	6823      	ldr	r3, [r4, #0]
 8006382:	4631      	mov	r1, r6
 8006384:	4638      	mov	r0, r7
 8006386:	eb04 0903 	add.w	r9, r4, r3
 800638a:	f000 f893 	bl	80064b4 <_sbrk_r>
 800638e:	4581      	cmp	r9, r0
 8006390:	d13f      	bne.n	8006412 <_malloc_r+0xe6>
 8006392:	6821      	ldr	r1, [r4, #0]
 8006394:	4638      	mov	r0, r7
 8006396:	1a6d      	subs	r5, r5, r1
 8006398:	4629      	mov	r1, r5
 800639a:	f7ff ffa7 	bl	80062ec <sbrk_aligned>
 800639e:	3001      	adds	r0, #1
 80063a0:	d037      	beq.n	8006412 <_malloc_r+0xe6>
 80063a2:	6823      	ldr	r3, [r4, #0]
 80063a4:	442b      	add	r3, r5
 80063a6:	6023      	str	r3, [r4, #0]
 80063a8:	f8d8 3000 	ldr.w	r3, [r8]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d038      	beq.n	8006422 <_malloc_r+0xf6>
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	42a2      	cmp	r2, r4
 80063b4:	d12b      	bne.n	800640e <_malloc_r+0xe2>
 80063b6:	2200      	movs	r2, #0
 80063b8:	605a      	str	r2, [r3, #4]
 80063ba:	e00f      	b.n	80063dc <_malloc_r+0xb0>
 80063bc:	6822      	ldr	r2, [r4, #0]
 80063be:	1b52      	subs	r2, r2, r5
 80063c0:	d41f      	bmi.n	8006402 <_malloc_r+0xd6>
 80063c2:	2a0b      	cmp	r2, #11
 80063c4:	d917      	bls.n	80063f6 <_malloc_r+0xca>
 80063c6:	1961      	adds	r1, r4, r5
 80063c8:	42a3      	cmp	r3, r4
 80063ca:	6025      	str	r5, [r4, #0]
 80063cc:	bf18      	it	ne
 80063ce:	6059      	strne	r1, [r3, #4]
 80063d0:	6863      	ldr	r3, [r4, #4]
 80063d2:	bf08      	it	eq
 80063d4:	f8c8 1000 	streq.w	r1, [r8]
 80063d8:	5162      	str	r2, [r4, r5]
 80063da:	604b      	str	r3, [r1, #4]
 80063dc:	4638      	mov	r0, r7
 80063de:	f104 060b 	add.w	r6, r4, #11
 80063e2:	f000 f829 	bl	8006438 <__malloc_unlock>
 80063e6:	f026 0607 	bic.w	r6, r6, #7
 80063ea:	1d23      	adds	r3, r4, #4
 80063ec:	1af2      	subs	r2, r6, r3
 80063ee:	d0ae      	beq.n	800634e <_malloc_r+0x22>
 80063f0:	1b9b      	subs	r3, r3, r6
 80063f2:	50a3      	str	r3, [r4, r2]
 80063f4:	e7ab      	b.n	800634e <_malloc_r+0x22>
 80063f6:	42a3      	cmp	r3, r4
 80063f8:	6862      	ldr	r2, [r4, #4]
 80063fa:	d1dd      	bne.n	80063b8 <_malloc_r+0x8c>
 80063fc:	f8c8 2000 	str.w	r2, [r8]
 8006400:	e7ec      	b.n	80063dc <_malloc_r+0xb0>
 8006402:	4623      	mov	r3, r4
 8006404:	6864      	ldr	r4, [r4, #4]
 8006406:	e7ac      	b.n	8006362 <_malloc_r+0x36>
 8006408:	4634      	mov	r4, r6
 800640a:	6876      	ldr	r6, [r6, #4]
 800640c:	e7b4      	b.n	8006378 <_malloc_r+0x4c>
 800640e:	4613      	mov	r3, r2
 8006410:	e7cc      	b.n	80063ac <_malloc_r+0x80>
 8006412:	230c      	movs	r3, #12
 8006414:	4638      	mov	r0, r7
 8006416:	603b      	str	r3, [r7, #0]
 8006418:	f000 f80e 	bl	8006438 <__malloc_unlock>
 800641c:	e797      	b.n	800634e <_malloc_r+0x22>
 800641e:	6025      	str	r5, [r4, #0]
 8006420:	e7dc      	b.n	80063dc <_malloc_r+0xb0>
 8006422:	605b      	str	r3, [r3, #4]
 8006424:	deff      	udf	#255	; 0xff
 8006426:	bf00      	nop
 8006428:	20000d70 	.word	0x20000d70

0800642c <__malloc_lock>:
 800642c:	4801      	ldr	r0, [pc, #4]	; (8006434 <__malloc_lock+0x8>)
 800642e:	f000 b87b 	b.w	8006528 <__retarget_lock_acquire_recursive>
 8006432:	bf00      	nop
 8006434:	20000eb4 	.word	0x20000eb4

08006438 <__malloc_unlock>:
 8006438:	4801      	ldr	r0, [pc, #4]	; (8006440 <__malloc_unlock+0x8>)
 800643a:	f000 b876 	b.w	800652a <__retarget_lock_release_recursive>
 800643e:	bf00      	nop
 8006440:	20000eb4 	.word	0x20000eb4

08006444 <siprintf>:
 8006444:	b40e      	push	{r1, r2, r3}
 8006446:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800644a:	b500      	push	{lr}
 800644c:	b09c      	sub	sp, #112	; 0x70
 800644e:	ab1d      	add	r3, sp, #116	; 0x74
 8006450:	9002      	str	r0, [sp, #8]
 8006452:	9006      	str	r0, [sp, #24]
 8006454:	9107      	str	r1, [sp, #28]
 8006456:	9104      	str	r1, [sp, #16]
 8006458:	4808      	ldr	r0, [pc, #32]	; (800647c <siprintf+0x38>)
 800645a:	4909      	ldr	r1, [pc, #36]	; (8006480 <siprintf+0x3c>)
 800645c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006460:	9105      	str	r1, [sp, #20]
 8006462:	6800      	ldr	r0, [r0, #0]
 8006464:	a902      	add	r1, sp, #8
 8006466:	9301      	str	r3, [sp, #4]
 8006468:	f000 f918 	bl	800669c <_svfiprintf_r>
 800646c:	2200      	movs	r2, #0
 800646e:	9b02      	ldr	r3, [sp, #8]
 8006470:	701a      	strb	r2, [r3, #0]
 8006472:	b01c      	add	sp, #112	; 0x70
 8006474:	f85d eb04 	ldr.w	lr, [sp], #4
 8006478:	b003      	add	sp, #12
 800647a:	4770      	bx	lr
 800647c:	2000096c 	.word	0x2000096c
 8006480:	ffff0208 	.word	0xffff0208

08006484 <memset>:
 8006484:	4603      	mov	r3, r0
 8006486:	4402      	add	r2, r0
 8006488:	4293      	cmp	r3, r2
 800648a:	d100      	bne.n	800648e <memset+0xa>
 800648c:	4770      	bx	lr
 800648e:	f803 1b01 	strb.w	r1, [r3], #1
 8006492:	e7f9      	b.n	8006488 <memset+0x4>

08006494 <strcat>:
 8006494:	4602      	mov	r2, r0
 8006496:	b510      	push	{r4, lr}
 8006498:	7814      	ldrb	r4, [r2, #0]
 800649a:	4613      	mov	r3, r2
 800649c:	3201      	adds	r2, #1
 800649e:	2c00      	cmp	r4, #0
 80064a0:	d1fa      	bne.n	8006498 <strcat+0x4>
 80064a2:	3b01      	subs	r3, #1
 80064a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064ac:	2a00      	cmp	r2, #0
 80064ae:	d1f9      	bne.n	80064a4 <strcat+0x10>
 80064b0:	bd10      	pop	{r4, pc}
	...

080064b4 <_sbrk_r>:
 80064b4:	b538      	push	{r3, r4, r5, lr}
 80064b6:	2300      	movs	r3, #0
 80064b8:	4d05      	ldr	r5, [pc, #20]	; (80064d0 <_sbrk_r+0x1c>)
 80064ba:	4604      	mov	r4, r0
 80064bc:	4608      	mov	r0, r1
 80064be:	602b      	str	r3, [r5, #0]
 80064c0:	f7fc fa0c 	bl	80028dc <_sbrk>
 80064c4:	1c43      	adds	r3, r0, #1
 80064c6:	d102      	bne.n	80064ce <_sbrk_r+0x1a>
 80064c8:	682b      	ldr	r3, [r5, #0]
 80064ca:	b103      	cbz	r3, 80064ce <_sbrk_r+0x1a>
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	bd38      	pop	{r3, r4, r5, pc}
 80064d0:	20000eb0 	.word	0x20000eb0

080064d4 <__errno>:
 80064d4:	4b01      	ldr	r3, [pc, #4]	; (80064dc <__errno+0x8>)
 80064d6:	6818      	ldr	r0, [r3, #0]
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	2000096c 	.word	0x2000096c

080064e0 <__libc_init_array>:
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	2600      	movs	r6, #0
 80064e4:	4d0c      	ldr	r5, [pc, #48]	; (8006518 <__libc_init_array+0x38>)
 80064e6:	4c0d      	ldr	r4, [pc, #52]	; (800651c <__libc_init_array+0x3c>)
 80064e8:	1b64      	subs	r4, r4, r5
 80064ea:	10a4      	asrs	r4, r4, #2
 80064ec:	42a6      	cmp	r6, r4
 80064ee:	d109      	bne.n	8006504 <__libc_init_array+0x24>
 80064f0:	f000 fbc6 	bl	8006c80 <_init>
 80064f4:	2600      	movs	r6, #0
 80064f6:	4d0a      	ldr	r5, [pc, #40]	; (8006520 <__libc_init_array+0x40>)
 80064f8:	4c0a      	ldr	r4, [pc, #40]	; (8006524 <__libc_init_array+0x44>)
 80064fa:	1b64      	subs	r4, r4, r5
 80064fc:	10a4      	asrs	r4, r4, #2
 80064fe:	42a6      	cmp	r6, r4
 8006500:	d105      	bne.n	800650e <__libc_init_array+0x2e>
 8006502:	bd70      	pop	{r4, r5, r6, pc}
 8006504:	f855 3b04 	ldr.w	r3, [r5], #4
 8006508:	4798      	blx	r3
 800650a:	3601      	adds	r6, #1
 800650c:	e7ee      	b.n	80064ec <__libc_init_array+0xc>
 800650e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006512:	4798      	blx	r3
 8006514:	3601      	adds	r6, #1
 8006516:	e7f2      	b.n	80064fe <__libc_init_array+0x1e>
 8006518:	08007b2c 	.word	0x08007b2c
 800651c:	08007b2c 	.word	0x08007b2c
 8006520:	08007b2c 	.word	0x08007b2c
 8006524:	08007b30 	.word	0x08007b30

08006528 <__retarget_lock_acquire_recursive>:
 8006528:	4770      	bx	lr

0800652a <__retarget_lock_release_recursive>:
 800652a:	4770      	bx	lr

0800652c <strcpy>:
 800652c:	4603      	mov	r3, r0
 800652e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006532:	f803 2b01 	strb.w	r2, [r3], #1
 8006536:	2a00      	cmp	r2, #0
 8006538:	d1f9      	bne.n	800652e <strcpy+0x2>
 800653a:	4770      	bx	lr

0800653c <memcpy>:
 800653c:	440a      	add	r2, r1
 800653e:	4291      	cmp	r1, r2
 8006540:	f100 33ff 	add.w	r3, r0, #4294967295
 8006544:	d100      	bne.n	8006548 <memcpy+0xc>
 8006546:	4770      	bx	lr
 8006548:	b510      	push	{r4, lr}
 800654a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800654e:	4291      	cmp	r1, r2
 8006550:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006554:	d1f9      	bne.n	800654a <memcpy+0xe>
 8006556:	bd10      	pop	{r4, pc}

08006558 <_free_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	4605      	mov	r5, r0
 800655c:	2900      	cmp	r1, #0
 800655e:	d040      	beq.n	80065e2 <_free_r+0x8a>
 8006560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006564:	1f0c      	subs	r4, r1, #4
 8006566:	2b00      	cmp	r3, #0
 8006568:	bfb8      	it	lt
 800656a:	18e4      	addlt	r4, r4, r3
 800656c:	f7ff ff5e 	bl	800642c <__malloc_lock>
 8006570:	4a1c      	ldr	r2, [pc, #112]	; (80065e4 <_free_r+0x8c>)
 8006572:	6813      	ldr	r3, [r2, #0]
 8006574:	b933      	cbnz	r3, 8006584 <_free_r+0x2c>
 8006576:	6063      	str	r3, [r4, #4]
 8006578:	6014      	str	r4, [r2, #0]
 800657a:	4628      	mov	r0, r5
 800657c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006580:	f7ff bf5a 	b.w	8006438 <__malloc_unlock>
 8006584:	42a3      	cmp	r3, r4
 8006586:	d908      	bls.n	800659a <_free_r+0x42>
 8006588:	6820      	ldr	r0, [r4, #0]
 800658a:	1821      	adds	r1, r4, r0
 800658c:	428b      	cmp	r3, r1
 800658e:	bf01      	itttt	eq
 8006590:	6819      	ldreq	r1, [r3, #0]
 8006592:	685b      	ldreq	r3, [r3, #4]
 8006594:	1809      	addeq	r1, r1, r0
 8006596:	6021      	streq	r1, [r4, #0]
 8006598:	e7ed      	b.n	8006576 <_free_r+0x1e>
 800659a:	461a      	mov	r2, r3
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	b10b      	cbz	r3, 80065a4 <_free_r+0x4c>
 80065a0:	42a3      	cmp	r3, r4
 80065a2:	d9fa      	bls.n	800659a <_free_r+0x42>
 80065a4:	6811      	ldr	r1, [r2, #0]
 80065a6:	1850      	adds	r0, r2, r1
 80065a8:	42a0      	cmp	r0, r4
 80065aa:	d10b      	bne.n	80065c4 <_free_r+0x6c>
 80065ac:	6820      	ldr	r0, [r4, #0]
 80065ae:	4401      	add	r1, r0
 80065b0:	1850      	adds	r0, r2, r1
 80065b2:	4283      	cmp	r3, r0
 80065b4:	6011      	str	r1, [r2, #0]
 80065b6:	d1e0      	bne.n	800657a <_free_r+0x22>
 80065b8:	6818      	ldr	r0, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	4408      	add	r0, r1
 80065be:	6010      	str	r0, [r2, #0]
 80065c0:	6053      	str	r3, [r2, #4]
 80065c2:	e7da      	b.n	800657a <_free_r+0x22>
 80065c4:	d902      	bls.n	80065cc <_free_r+0x74>
 80065c6:	230c      	movs	r3, #12
 80065c8:	602b      	str	r3, [r5, #0]
 80065ca:	e7d6      	b.n	800657a <_free_r+0x22>
 80065cc:	6820      	ldr	r0, [r4, #0]
 80065ce:	1821      	adds	r1, r4, r0
 80065d0:	428b      	cmp	r3, r1
 80065d2:	bf01      	itttt	eq
 80065d4:	6819      	ldreq	r1, [r3, #0]
 80065d6:	685b      	ldreq	r3, [r3, #4]
 80065d8:	1809      	addeq	r1, r1, r0
 80065da:	6021      	streq	r1, [r4, #0]
 80065dc:	6063      	str	r3, [r4, #4]
 80065de:	6054      	str	r4, [r2, #4]
 80065e0:	e7cb      	b.n	800657a <_free_r+0x22>
 80065e2:	bd38      	pop	{r3, r4, r5, pc}
 80065e4:	20000d70 	.word	0x20000d70

080065e8 <__ssputs_r>:
 80065e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065ec:	461f      	mov	r7, r3
 80065ee:	688e      	ldr	r6, [r1, #8]
 80065f0:	4682      	mov	sl, r0
 80065f2:	42be      	cmp	r6, r7
 80065f4:	460c      	mov	r4, r1
 80065f6:	4690      	mov	r8, r2
 80065f8:	680b      	ldr	r3, [r1, #0]
 80065fa:	d82c      	bhi.n	8006656 <__ssputs_r+0x6e>
 80065fc:	898a      	ldrh	r2, [r1, #12]
 80065fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006602:	d026      	beq.n	8006652 <__ssputs_r+0x6a>
 8006604:	6965      	ldr	r5, [r4, #20]
 8006606:	6909      	ldr	r1, [r1, #16]
 8006608:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800660c:	eba3 0901 	sub.w	r9, r3, r1
 8006610:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006614:	1c7b      	adds	r3, r7, #1
 8006616:	444b      	add	r3, r9
 8006618:	106d      	asrs	r5, r5, #1
 800661a:	429d      	cmp	r5, r3
 800661c:	bf38      	it	cc
 800661e:	461d      	movcc	r5, r3
 8006620:	0553      	lsls	r3, r2, #21
 8006622:	d527      	bpl.n	8006674 <__ssputs_r+0x8c>
 8006624:	4629      	mov	r1, r5
 8006626:	f7ff fe81 	bl	800632c <_malloc_r>
 800662a:	4606      	mov	r6, r0
 800662c:	b360      	cbz	r0, 8006688 <__ssputs_r+0xa0>
 800662e:	464a      	mov	r2, r9
 8006630:	6921      	ldr	r1, [r4, #16]
 8006632:	f7ff ff83 	bl	800653c <memcpy>
 8006636:	89a3      	ldrh	r3, [r4, #12]
 8006638:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800663c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006640:	81a3      	strh	r3, [r4, #12]
 8006642:	6126      	str	r6, [r4, #16]
 8006644:	444e      	add	r6, r9
 8006646:	6026      	str	r6, [r4, #0]
 8006648:	463e      	mov	r6, r7
 800664a:	6165      	str	r5, [r4, #20]
 800664c:	eba5 0509 	sub.w	r5, r5, r9
 8006650:	60a5      	str	r5, [r4, #8]
 8006652:	42be      	cmp	r6, r7
 8006654:	d900      	bls.n	8006658 <__ssputs_r+0x70>
 8006656:	463e      	mov	r6, r7
 8006658:	4632      	mov	r2, r6
 800665a:	4641      	mov	r1, r8
 800665c:	6820      	ldr	r0, [r4, #0]
 800665e:	f000 faaf 	bl	8006bc0 <memmove>
 8006662:	2000      	movs	r0, #0
 8006664:	68a3      	ldr	r3, [r4, #8]
 8006666:	1b9b      	subs	r3, r3, r6
 8006668:	60a3      	str	r3, [r4, #8]
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	4433      	add	r3, r6
 800666e:	6023      	str	r3, [r4, #0]
 8006670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006674:	462a      	mov	r2, r5
 8006676:	f000 facb 	bl	8006c10 <_realloc_r>
 800667a:	4606      	mov	r6, r0
 800667c:	2800      	cmp	r0, #0
 800667e:	d1e0      	bne.n	8006642 <__ssputs_r+0x5a>
 8006680:	4650      	mov	r0, sl
 8006682:	6921      	ldr	r1, [r4, #16]
 8006684:	f7ff ff68 	bl	8006558 <_free_r>
 8006688:	230c      	movs	r3, #12
 800668a:	f8ca 3000 	str.w	r3, [sl]
 800668e:	89a3      	ldrh	r3, [r4, #12]
 8006690:	f04f 30ff 	mov.w	r0, #4294967295
 8006694:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006698:	81a3      	strh	r3, [r4, #12]
 800669a:	e7e9      	b.n	8006670 <__ssputs_r+0x88>

0800669c <_svfiprintf_r>:
 800669c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a0:	4698      	mov	r8, r3
 80066a2:	898b      	ldrh	r3, [r1, #12]
 80066a4:	4607      	mov	r7, r0
 80066a6:	061b      	lsls	r3, r3, #24
 80066a8:	460d      	mov	r5, r1
 80066aa:	4614      	mov	r4, r2
 80066ac:	b09d      	sub	sp, #116	; 0x74
 80066ae:	d50e      	bpl.n	80066ce <_svfiprintf_r+0x32>
 80066b0:	690b      	ldr	r3, [r1, #16]
 80066b2:	b963      	cbnz	r3, 80066ce <_svfiprintf_r+0x32>
 80066b4:	2140      	movs	r1, #64	; 0x40
 80066b6:	f7ff fe39 	bl	800632c <_malloc_r>
 80066ba:	6028      	str	r0, [r5, #0]
 80066bc:	6128      	str	r0, [r5, #16]
 80066be:	b920      	cbnz	r0, 80066ca <_svfiprintf_r+0x2e>
 80066c0:	230c      	movs	r3, #12
 80066c2:	603b      	str	r3, [r7, #0]
 80066c4:	f04f 30ff 	mov.w	r0, #4294967295
 80066c8:	e0d0      	b.n	800686c <_svfiprintf_r+0x1d0>
 80066ca:	2340      	movs	r3, #64	; 0x40
 80066cc:	616b      	str	r3, [r5, #20]
 80066ce:	2300      	movs	r3, #0
 80066d0:	9309      	str	r3, [sp, #36]	; 0x24
 80066d2:	2320      	movs	r3, #32
 80066d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066d8:	2330      	movs	r3, #48	; 0x30
 80066da:	f04f 0901 	mov.w	r9, #1
 80066de:	f8cd 800c 	str.w	r8, [sp, #12]
 80066e2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006884 <_svfiprintf_r+0x1e8>
 80066e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066ea:	4623      	mov	r3, r4
 80066ec:	469a      	mov	sl, r3
 80066ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066f2:	b10a      	cbz	r2, 80066f8 <_svfiprintf_r+0x5c>
 80066f4:	2a25      	cmp	r2, #37	; 0x25
 80066f6:	d1f9      	bne.n	80066ec <_svfiprintf_r+0x50>
 80066f8:	ebba 0b04 	subs.w	fp, sl, r4
 80066fc:	d00b      	beq.n	8006716 <_svfiprintf_r+0x7a>
 80066fe:	465b      	mov	r3, fp
 8006700:	4622      	mov	r2, r4
 8006702:	4629      	mov	r1, r5
 8006704:	4638      	mov	r0, r7
 8006706:	f7ff ff6f 	bl	80065e8 <__ssputs_r>
 800670a:	3001      	adds	r0, #1
 800670c:	f000 80a9 	beq.w	8006862 <_svfiprintf_r+0x1c6>
 8006710:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006712:	445a      	add	r2, fp
 8006714:	9209      	str	r2, [sp, #36]	; 0x24
 8006716:	f89a 3000 	ldrb.w	r3, [sl]
 800671a:	2b00      	cmp	r3, #0
 800671c:	f000 80a1 	beq.w	8006862 <_svfiprintf_r+0x1c6>
 8006720:	2300      	movs	r3, #0
 8006722:	f04f 32ff 	mov.w	r2, #4294967295
 8006726:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800672a:	f10a 0a01 	add.w	sl, sl, #1
 800672e:	9304      	str	r3, [sp, #16]
 8006730:	9307      	str	r3, [sp, #28]
 8006732:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006736:	931a      	str	r3, [sp, #104]	; 0x68
 8006738:	4654      	mov	r4, sl
 800673a:	2205      	movs	r2, #5
 800673c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006740:	4850      	ldr	r0, [pc, #320]	; (8006884 <_svfiprintf_r+0x1e8>)
 8006742:	f000 fa57 	bl	8006bf4 <memchr>
 8006746:	9a04      	ldr	r2, [sp, #16]
 8006748:	b9d8      	cbnz	r0, 8006782 <_svfiprintf_r+0xe6>
 800674a:	06d0      	lsls	r0, r2, #27
 800674c:	bf44      	itt	mi
 800674e:	2320      	movmi	r3, #32
 8006750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006754:	0711      	lsls	r1, r2, #28
 8006756:	bf44      	itt	mi
 8006758:	232b      	movmi	r3, #43	; 0x2b
 800675a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800675e:	f89a 3000 	ldrb.w	r3, [sl]
 8006762:	2b2a      	cmp	r3, #42	; 0x2a
 8006764:	d015      	beq.n	8006792 <_svfiprintf_r+0xf6>
 8006766:	4654      	mov	r4, sl
 8006768:	2000      	movs	r0, #0
 800676a:	f04f 0c0a 	mov.w	ip, #10
 800676e:	9a07      	ldr	r2, [sp, #28]
 8006770:	4621      	mov	r1, r4
 8006772:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006776:	3b30      	subs	r3, #48	; 0x30
 8006778:	2b09      	cmp	r3, #9
 800677a:	d94d      	bls.n	8006818 <_svfiprintf_r+0x17c>
 800677c:	b1b0      	cbz	r0, 80067ac <_svfiprintf_r+0x110>
 800677e:	9207      	str	r2, [sp, #28]
 8006780:	e014      	b.n	80067ac <_svfiprintf_r+0x110>
 8006782:	eba0 0308 	sub.w	r3, r0, r8
 8006786:	fa09 f303 	lsl.w	r3, r9, r3
 800678a:	4313      	orrs	r3, r2
 800678c:	46a2      	mov	sl, r4
 800678e:	9304      	str	r3, [sp, #16]
 8006790:	e7d2      	b.n	8006738 <_svfiprintf_r+0x9c>
 8006792:	9b03      	ldr	r3, [sp, #12]
 8006794:	1d19      	adds	r1, r3, #4
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	9103      	str	r1, [sp, #12]
 800679a:	2b00      	cmp	r3, #0
 800679c:	bfbb      	ittet	lt
 800679e:	425b      	neglt	r3, r3
 80067a0:	f042 0202 	orrlt.w	r2, r2, #2
 80067a4:	9307      	strge	r3, [sp, #28]
 80067a6:	9307      	strlt	r3, [sp, #28]
 80067a8:	bfb8      	it	lt
 80067aa:	9204      	strlt	r2, [sp, #16]
 80067ac:	7823      	ldrb	r3, [r4, #0]
 80067ae:	2b2e      	cmp	r3, #46	; 0x2e
 80067b0:	d10c      	bne.n	80067cc <_svfiprintf_r+0x130>
 80067b2:	7863      	ldrb	r3, [r4, #1]
 80067b4:	2b2a      	cmp	r3, #42	; 0x2a
 80067b6:	d134      	bne.n	8006822 <_svfiprintf_r+0x186>
 80067b8:	9b03      	ldr	r3, [sp, #12]
 80067ba:	3402      	adds	r4, #2
 80067bc:	1d1a      	adds	r2, r3, #4
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	9203      	str	r2, [sp, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	bfb8      	it	lt
 80067c6:	f04f 33ff 	movlt.w	r3, #4294967295
 80067ca:	9305      	str	r3, [sp, #20]
 80067cc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006888 <_svfiprintf_r+0x1ec>
 80067d0:	2203      	movs	r2, #3
 80067d2:	4650      	mov	r0, sl
 80067d4:	7821      	ldrb	r1, [r4, #0]
 80067d6:	f000 fa0d 	bl	8006bf4 <memchr>
 80067da:	b138      	cbz	r0, 80067ec <_svfiprintf_r+0x150>
 80067dc:	2240      	movs	r2, #64	; 0x40
 80067de:	9b04      	ldr	r3, [sp, #16]
 80067e0:	eba0 000a 	sub.w	r0, r0, sl
 80067e4:	4082      	lsls	r2, r0
 80067e6:	4313      	orrs	r3, r2
 80067e8:	3401      	adds	r4, #1
 80067ea:	9304      	str	r3, [sp, #16]
 80067ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067f0:	2206      	movs	r2, #6
 80067f2:	4826      	ldr	r0, [pc, #152]	; (800688c <_svfiprintf_r+0x1f0>)
 80067f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067f8:	f000 f9fc 	bl	8006bf4 <memchr>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d038      	beq.n	8006872 <_svfiprintf_r+0x1d6>
 8006800:	4b23      	ldr	r3, [pc, #140]	; (8006890 <_svfiprintf_r+0x1f4>)
 8006802:	bb1b      	cbnz	r3, 800684c <_svfiprintf_r+0x1b0>
 8006804:	9b03      	ldr	r3, [sp, #12]
 8006806:	3307      	adds	r3, #7
 8006808:	f023 0307 	bic.w	r3, r3, #7
 800680c:	3308      	adds	r3, #8
 800680e:	9303      	str	r3, [sp, #12]
 8006810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006812:	4433      	add	r3, r6
 8006814:	9309      	str	r3, [sp, #36]	; 0x24
 8006816:	e768      	b.n	80066ea <_svfiprintf_r+0x4e>
 8006818:	460c      	mov	r4, r1
 800681a:	2001      	movs	r0, #1
 800681c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006820:	e7a6      	b.n	8006770 <_svfiprintf_r+0xd4>
 8006822:	2300      	movs	r3, #0
 8006824:	f04f 0c0a 	mov.w	ip, #10
 8006828:	4619      	mov	r1, r3
 800682a:	3401      	adds	r4, #1
 800682c:	9305      	str	r3, [sp, #20]
 800682e:	4620      	mov	r0, r4
 8006830:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006834:	3a30      	subs	r2, #48	; 0x30
 8006836:	2a09      	cmp	r2, #9
 8006838:	d903      	bls.n	8006842 <_svfiprintf_r+0x1a6>
 800683a:	2b00      	cmp	r3, #0
 800683c:	d0c6      	beq.n	80067cc <_svfiprintf_r+0x130>
 800683e:	9105      	str	r1, [sp, #20]
 8006840:	e7c4      	b.n	80067cc <_svfiprintf_r+0x130>
 8006842:	4604      	mov	r4, r0
 8006844:	2301      	movs	r3, #1
 8006846:	fb0c 2101 	mla	r1, ip, r1, r2
 800684a:	e7f0      	b.n	800682e <_svfiprintf_r+0x192>
 800684c:	ab03      	add	r3, sp, #12
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	462a      	mov	r2, r5
 8006852:	4638      	mov	r0, r7
 8006854:	4b0f      	ldr	r3, [pc, #60]	; (8006894 <_svfiprintf_r+0x1f8>)
 8006856:	a904      	add	r1, sp, #16
 8006858:	f3af 8000 	nop.w
 800685c:	1c42      	adds	r2, r0, #1
 800685e:	4606      	mov	r6, r0
 8006860:	d1d6      	bne.n	8006810 <_svfiprintf_r+0x174>
 8006862:	89ab      	ldrh	r3, [r5, #12]
 8006864:	065b      	lsls	r3, r3, #25
 8006866:	f53f af2d 	bmi.w	80066c4 <_svfiprintf_r+0x28>
 800686a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800686c:	b01d      	add	sp, #116	; 0x74
 800686e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006872:	ab03      	add	r3, sp, #12
 8006874:	9300      	str	r3, [sp, #0]
 8006876:	462a      	mov	r2, r5
 8006878:	4638      	mov	r0, r7
 800687a:	4b06      	ldr	r3, [pc, #24]	; (8006894 <_svfiprintf_r+0x1f8>)
 800687c:	a904      	add	r1, sp, #16
 800687e:	f000 f87d 	bl	800697c <_printf_i>
 8006882:	e7eb      	b.n	800685c <_svfiprintf_r+0x1c0>
 8006884:	08007af6 	.word	0x08007af6
 8006888:	08007afc 	.word	0x08007afc
 800688c:	08007b00 	.word	0x08007b00
 8006890:	00000000 	.word	0x00000000
 8006894:	080065e9 	.word	0x080065e9

08006898 <_printf_common>:
 8006898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800689c:	4616      	mov	r6, r2
 800689e:	4699      	mov	r9, r3
 80068a0:	688a      	ldr	r2, [r1, #8]
 80068a2:	690b      	ldr	r3, [r1, #16]
 80068a4:	4607      	mov	r7, r0
 80068a6:	4293      	cmp	r3, r2
 80068a8:	bfb8      	it	lt
 80068aa:	4613      	movlt	r3, r2
 80068ac:	6033      	str	r3, [r6, #0]
 80068ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80068b2:	460c      	mov	r4, r1
 80068b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068b8:	b10a      	cbz	r2, 80068be <_printf_common+0x26>
 80068ba:	3301      	adds	r3, #1
 80068bc:	6033      	str	r3, [r6, #0]
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	0699      	lsls	r1, r3, #26
 80068c2:	bf42      	ittt	mi
 80068c4:	6833      	ldrmi	r3, [r6, #0]
 80068c6:	3302      	addmi	r3, #2
 80068c8:	6033      	strmi	r3, [r6, #0]
 80068ca:	6825      	ldr	r5, [r4, #0]
 80068cc:	f015 0506 	ands.w	r5, r5, #6
 80068d0:	d106      	bne.n	80068e0 <_printf_common+0x48>
 80068d2:	f104 0a19 	add.w	sl, r4, #25
 80068d6:	68e3      	ldr	r3, [r4, #12]
 80068d8:	6832      	ldr	r2, [r6, #0]
 80068da:	1a9b      	subs	r3, r3, r2
 80068dc:	42ab      	cmp	r3, r5
 80068de:	dc2b      	bgt.n	8006938 <_printf_common+0xa0>
 80068e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068e4:	1e13      	subs	r3, r2, #0
 80068e6:	6822      	ldr	r2, [r4, #0]
 80068e8:	bf18      	it	ne
 80068ea:	2301      	movne	r3, #1
 80068ec:	0692      	lsls	r2, r2, #26
 80068ee:	d430      	bmi.n	8006952 <_printf_common+0xba>
 80068f0:	4649      	mov	r1, r9
 80068f2:	4638      	mov	r0, r7
 80068f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068f8:	47c0      	blx	r8
 80068fa:	3001      	adds	r0, #1
 80068fc:	d023      	beq.n	8006946 <_printf_common+0xae>
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	6922      	ldr	r2, [r4, #16]
 8006902:	f003 0306 	and.w	r3, r3, #6
 8006906:	2b04      	cmp	r3, #4
 8006908:	bf14      	ite	ne
 800690a:	2500      	movne	r5, #0
 800690c:	6833      	ldreq	r3, [r6, #0]
 800690e:	f04f 0600 	mov.w	r6, #0
 8006912:	bf08      	it	eq
 8006914:	68e5      	ldreq	r5, [r4, #12]
 8006916:	f104 041a 	add.w	r4, r4, #26
 800691a:	bf08      	it	eq
 800691c:	1aed      	subeq	r5, r5, r3
 800691e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006922:	bf08      	it	eq
 8006924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006928:	4293      	cmp	r3, r2
 800692a:	bfc4      	itt	gt
 800692c:	1a9b      	subgt	r3, r3, r2
 800692e:	18ed      	addgt	r5, r5, r3
 8006930:	42b5      	cmp	r5, r6
 8006932:	d11a      	bne.n	800696a <_printf_common+0xd2>
 8006934:	2000      	movs	r0, #0
 8006936:	e008      	b.n	800694a <_printf_common+0xb2>
 8006938:	2301      	movs	r3, #1
 800693a:	4652      	mov	r2, sl
 800693c:	4649      	mov	r1, r9
 800693e:	4638      	mov	r0, r7
 8006940:	47c0      	blx	r8
 8006942:	3001      	adds	r0, #1
 8006944:	d103      	bne.n	800694e <_printf_common+0xb6>
 8006946:	f04f 30ff 	mov.w	r0, #4294967295
 800694a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694e:	3501      	adds	r5, #1
 8006950:	e7c1      	b.n	80068d6 <_printf_common+0x3e>
 8006952:	2030      	movs	r0, #48	; 0x30
 8006954:	18e1      	adds	r1, r4, r3
 8006956:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006960:	4422      	add	r2, r4
 8006962:	3302      	adds	r3, #2
 8006964:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006968:	e7c2      	b.n	80068f0 <_printf_common+0x58>
 800696a:	2301      	movs	r3, #1
 800696c:	4622      	mov	r2, r4
 800696e:	4649      	mov	r1, r9
 8006970:	4638      	mov	r0, r7
 8006972:	47c0      	blx	r8
 8006974:	3001      	adds	r0, #1
 8006976:	d0e6      	beq.n	8006946 <_printf_common+0xae>
 8006978:	3601      	adds	r6, #1
 800697a:	e7d9      	b.n	8006930 <_printf_common+0x98>

0800697c <_printf_i>:
 800697c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006980:	7e0f      	ldrb	r7, [r1, #24]
 8006982:	4691      	mov	r9, r2
 8006984:	2f78      	cmp	r7, #120	; 0x78
 8006986:	4680      	mov	r8, r0
 8006988:	460c      	mov	r4, r1
 800698a:	469a      	mov	sl, r3
 800698c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800698e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006992:	d807      	bhi.n	80069a4 <_printf_i+0x28>
 8006994:	2f62      	cmp	r7, #98	; 0x62
 8006996:	d80a      	bhi.n	80069ae <_printf_i+0x32>
 8006998:	2f00      	cmp	r7, #0
 800699a:	f000 80d5 	beq.w	8006b48 <_printf_i+0x1cc>
 800699e:	2f58      	cmp	r7, #88	; 0x58
 80069a0:	f000 80c1 	beq.w	8006b26 <_printf_i+0x1aa>
 80069a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80069ac:	e03a      	b.n	8006a24 <_printf_i+0xa8>
 80069ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80069b2:	2b15      	cmp	r3, #21
 80069b4:	d8f6      	bhi.n	80069a4 <_printf_i+0x28>
 80069b6:	a101      	add	r1, pc, #4	; (adr r1, 80069bc <_printf_i+0x40>)
 80069b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069bc:	08006a15 	.word	0x08006a15
 80069c0:	08006a29 	.word	0x08006a29
 80069c4:	080069a5 	.word	0x080069a5
 80069c8:	080069a5 	.word	0x080069a5
 80069cc:	080069a5 	.word	0x080069a5
 80069d0:	080069a5 	.word	0x080069a5
 80069d4:	08006a29 	.word	0x08006a29
 80069d8:	080069a5 	.word	0x080069a5
 80069dc:	080069a5 	.word	0x080069a5
 80069e0:	080069a5 	.word	0x080069a5
 80069e4:	080069a5 	.word	0x080069a5
 80069e8:	08006b2f 	.word	0x08006b2f
 80069ec:	08006a55 	.word	0x08006a55
 80069f0:	08006ae9 	.word	0x08006ae9
 80069f4:	080069a5 	.word	0x080069a5
 80069f8:	080069a5 	.word	0x080069a5
 80069fc:	08006b51 	.word	0x08006b51
 8006a00:	080069a5 	.word	0x080069a5
 8006a04:	08006a55 	.word	0x08006a55
 8006a08:	080069a5 	.word	0x080069a5
 8006a0c:	080069a5 	.word	0x080069a5
 8006a10:	08006af1 	.word	0x08006af1
 8006a14:	682b      	ldr	r3, [r5, #0]
 8006a16:	1d1a      	adds	r2, r3, #4
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	602a      	str	r2, [r5, #0]
 8006a1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a24:	2301      	movs	r3, #1
 8006a26:	e0a0      	b.n	8006b6a <_printf_i+0x1ee>
 8006a28:	6820      	ldr	r0, [r4, #0]
 8006a2a:	682b      	ldr	r3, [r5, #0]
 8006a2c:	0607      	lsls	r7, r0, #24
 8006a2e:	f103 0104 	add.w	r1, r3, #4
 8006a32:	6029      	str	r1, [r5, #0]
 8006a34:	d501      	bpl.n	8006a3a <_printf_i+0xbe>
 8006a36:	681e      	ldr	r6, [r3, #0]
 8006a38:	e003      	b.n	8006a42 <_printf_i+0xc6>
 8006a3a:	0646      	lsls	r6, r0, #25
 8006a3c:	d5fb      	bpl.n	8006a36 <_printf_i+0xba>
 8006a3e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006a42:	2e00      	cmp	r6, #0
 8006a44:	da03      	bge.n	8006a4e <_printf_i+0xd2>
 8006a46:	232d      	movs	r3, #45	; 0x2d
 8006a48:	4276      	negs	r6, r6
 8006a4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a4e:	230a      	movs	r3, #10
 8006a50:	4859      	ldr	r0, [pc, #356]	; (8006bb8 <_printf_i+0x23c>)
 8006a52:	e012      	b.n	8006a7a <_printf_i+0xfe>
 8006a54:	682b      	ldr	r3, [r5, #0]
 8006a56:	6820      	ldr	r0, [r4, #0]
 8006a58:	1d19      	adds	r1, r3, #4
 8006a5a:	6029      	str	r1, [r5, #0]
 8006a5c:	0605      	lsls	r5, r0, #24
 8006a5e:	d501      	bpl.n	8006a64 <_printf_i+0xe8>
 8006a60:	681e      	ldr	r6, [r3, #0]
 8006a62:	e002      	b.n	8006a6a <_printf_i+0xee>
 8006a64:	0641      	lsls	r1, r0, #25
 8006a66:	d5fb      	bpl.n	8006a60 <_printf_i+0xe4>
 8006a68:	881e      	ldrh	r6, [r3, #0]
 8006a6a:	2f6f      	cmp	r7, #111	; 0x6f
 8006a6c:	bf0c      	ite	eq
 8006a6e:	2308      	moveq	r3, #8
 8006a70:	230a      	movne	r3, #10
 8006a72:	4851      	ldr	r0, [pc, #324]	; (8006bb8 <_printf_i+0x23c>)
 8006a74:	2100      	movs	r1, #0
 8006a76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a7a:	6865      	ldr	r5, [r4, #4]
 8006a7c:	2d00      	cmp	r5, #0
 8006a7e:	bfa8      	it	ge
 8006a80:	6821      	ldrge	r1, [r4, #0]
 8006a82:	60a5      	str	r5, [r4, #8]
 8006a84:	bfa4      	itt	ge
 8006a86:	f021 0104 	bicge.w	r1, r1, #4
 8006a8a:	6021      	strge	r1, [r4, #0]
 8006a8c:	b90e      	cbnz	r6, 8006a92 <_printf_i+0x116>
 8006a8e:	2d00      	cmp	r5, #0
 8006a90:	d04b      	beq.n	8006b2a <_printf_i+0x1ae>
 8006a92:	4615      	mov	r5, r2
 8006a94:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a98:	fb03 6711 	mls	r7, r3, r1, r6
 8006a9c:	5dc7      	ldrb	r7, [r0, r7]
 8006a9e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006aa2:	4637      	mov	r7, r6
 8006aa4:	42bb      	cmp	r3, r7
 8006aa6:	460e      	mov	r6, r1
 8006aa8:	d9f4      	bls.n	8006a94 <_printf_i+0x118>
 8006aaa:	2b08      	cmp	r3, #8
 8006aac:	d10b      	bne.n	8006ac6 <_printf_i+0x14a>
 8006aae:	6823      	ldr	r3, [r4, #0]
 8006ab0:	07de      	lsls	r6, r3, #31
 8006ab2:	d508      	bpl.n	8006ac6 <_printf_i+0x14a>
 8006ab4:	6923      	ldr	r3, [r4, #16]
 8006ab6:	6861      	ldr	r1, [r4, #4]
 8006ab8:	4299      	cmp	r1, r3
 8006aba:	bfde      	ittt	le
 8006abc:	2330      	movle	r3, #48	; 0x30
 8006abe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ac2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006ac6:	1b52      	subs	r2, r2, r5
 8006ac8:	6122      	str	r2, [r4, #16]
 8006aca:	464b      	mov	r3, r9
 8006acc:	4621      	mov	r1, r4
 8006ace:	4640      	mov	r0, r8
 8006ad0:	f8cd a000 	str.w	sl, [sp]
 8006ad4:	aa03      	add	r2, sp, #12
 8006ad6:	f7ff fedf 	bl	8006898 <_printf_common>
 8006ada:	3001      	adds	r0, #1
 8006adc:	d14a      	bne.n	8006b74 <_printf_i+0x1f8>
 8006ade:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae2:	b004      	add	sp, #16
 8006ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	f043 0320 	orr.w	r3, r3, #32
 8006aee:	6023      	str	r3, [r4, #0]
 8006af0:	2778      	movs	r7, #120	; 0x78
 8006af2:	4832      	ldr	r0, [pc, #200]	; (8006bbc <_printf_i+0x240>)
 8006af4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	6829      	ldr	r1, [r5, #0]
 8006afc:	061f      	lsls	r7, r3, #24
 8006afe:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b02:	d402      	bmi.n	8006b0a <_printf_i+0x18e>
 8006b04:	065f      	lsls	r7, r3, #25
 8006b06:	bf48      	it	mi
 8006b08:	b2b6      	uxthmi	r6, r6
 8006b0a:	07df      	lsls	r7, r3, #31
 8006b0c:	bf48      	it	mi
 8006b0e:	f043 0320 	orrmi.w	r3, r3, #32
 8006b12:	6029      	str	r1, [r5, #0]
 8006b14:	bf48      	it	mi
 8006b16:	6023      	strmi	r3, [r4, #0]
 8006b18:	b91e      	cbnz	r6, 8006b22 <_printf_i+0x1a6>
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	f023 0320 	bic.w	r3, r3, #32
 8006b20:	6023      	str	r3, [r4, #0]
 8006b22:	2310      	movs	r3, #16
 8006b24:	e7a6      	b.n	8006a74 <_printf_i+0xf8>
 8006b26:	4824      	ldr	r0, [pc, #144]	; (8006bb8 <_printf_i+0x23c>)
 8006b28:	e7e4      	b.n	8006af4 <_printf_i+0x178>
 8006b2a:	4615      	mov	r5, r2
 8006b2c:	e7bd      	b.n	8006aaa <_printf_i+0x12e>
 8006b2e:	682b      	ldr	r3, [r5, #0]
 8006b30:	6826      	ldr	r6, [r4, #0]
 8006b32:	1d18      	adds	r0, r3, #4
 8006b34:	6961      	ldr	r1, [r4, #20]
 8006b36:	6028      	str	r0, [r5, #0]
 8006b38:	0635      	lsls	r5, r6, #24
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	d501      	bpl.n	8006b42 <_printf_i+0x1c6>
 8006b3e:	6019      	str	r1, [r3, #0]
 8006b40:	e002      	b.n	8006b48 <_printf_i+0x1cc>
 8006b42:	0670      	lsls	r0, r6, #25
 8006b44:	d5fb      	bpl.n	8006b3e <_printf_i+0x1c2>
 8006b46:	8019      	strh	r1, [r3, #0]
 8006b48:	2300      	movs	r3, #0
 8006b4a:	4615      	mov	r5, r2
 8006b4c:	6123      	str	r3, [r4, #16]
 8006b4e:	e7bc      	b.n	8006aca <_printf_i+0x14e>
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	2100      	movs	r1, #0
 8006b54:	1d1a      	adds	r2, r3, #4
 8006b56:	602a      	str	r2, [r5, #0]
 8006b58:	681d      	ldr	r5, [r3, #0]
 8006b5a:	6862      	ldr	r2, [r4, #4]
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	f000 f849 	bl	8006bf4 <memchr>
 8006b62:	b108      	cbz	r0, 8006b68 <_printf_i+0x1ec>
 8006b64:	1b40      	subs	r0, r0, r5
 8006b66:	6060      	str	r0, [r4, #4]
 8006b68:	6863      	ldr	r3, [r4, #4]
 8006b6a:	6123      	str	r3, [r4, #16]
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b72:	e7aa      	b.n	8006aca <_printf_i+0x14e>
 8006b74:	462a      	mov	r2, r5
 8006b76:	4649      	mov	r1, r9
 8006b78:	4640      	mov	r0, r8
 8006b7a:	6923      	ldr	r3, [r4, #16]
 8006b7c:	47d0      	blx	sl
 8006b7e:	3001      	adds	r0, #1
 8006b80:	d0ad      	beq.n	8006ade <_printf_i+0x162>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	079b      	lsls	r3, r3, #30
 8006b86:	d413      	bmi.n	8006bb0 <_printf_i+0x234>
 8006b88:	68e0      	ldr	r0, [r4, #12]
 8006b8a:	9b03      	ldr	r3, [sp, #12]
 8006b8c:	4298      	cmp	r0, r3
 8006b8e:	bfb8      	it	lt
 8006b90:	4618      	movlt	r0, r3
 8006b92:	e7a6      	b.n	8006ae2 <_printf_i+0x166>
 8006b94:	2301      	movs	r3, #1
 8006b96:	4632      	mov	r2, r6
 8006b98:	4649      	mov	r1, r9
 8006b9a:	4640      	mov	r0, r8
 8006b9c:	47d0      	blx	sl
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	d09d      	beq.n	8006ade <_printf_i+0x162>
 8006ba2:	3501      	adds	r5, #1
 8006ba4:	68e3      	ldr	r3, [r4, #12]
 8006ba6:	9903      	ldr	r1, [sp, #12]
 8006ba8:	1a5b      	subs	r3, r3, r1
 8006baa:	42ab      	cmp	r3, r5
 8006bac:	dcf2      	bgt.n	8006b94 <_printf_i+0x218>
 8006bae:	e7eb      	b.n	8006b88 <_printf_i+0x20c>
 8006bb0:	2500      	movs	r5, #0
 8006bb2:	f104 0619 	add.w	r6, r4, #25
 8006bb6:	e7f5      	b.n	8006ba4 <_printf_i+0x228>
 8006bb8:	08007b07 	.word	0x08007b07
 8006bbc:	08007b18 	.word	0x08007b18

08006bc0 <memmove>:
 8006bc0:	4288      	cmp	r0, r1
 8006bc2:	b510      	push	{r4, lr}
 8006bc4:	eb01 0402 	add.w	r4, r1, r2
 8006bc8:	d902      	bls.n	8006bd0 <memmove+0x10>
 8006bca:	4284      	cmp	r4, r0
 8006bcc:	4623      	mov	r3, r4
 8006bce:	d807      	bhi.n	8006be0 <memmove+0x20>
 8006bd0:	1e43      	subs	r3, r0, #1
 8006bd2:	42a1      	cmp	r1, r4
 8006bd4:	d008      	beq.n	8006be8 <memmove+0x28>
 8006bd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006bde:	e7f8      	b.n	8006bd2 <memmove+0x12>
 8006be0:	4601      	mov	r1, r0
 8006be2:	4402      	add	r2, r0
 8006be4:	428a      	cmp	r2, r1
 8006be6:	d100      	bne.n	8006bea <memmove+0x2a>
 8006be8:	bd10      	pop	{r4, pc}
 8006bea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bf2:	e7f7      	b.n	8006be4 <memmove+0x24>

08006bf4 <memchr>:
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	b510      	push	{r4, lr}
 8006bf8:	b2c9      	uxtb	r1, r1
 8006bfa:	4402      	add	r2, r0
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	4618      	mov	r0, r3
 8006c00:	d101      	bne.n	8006c06 <memchr+0x12>
 8006c02:	2000      	movs	r0, #0
 8006c04:	e003      	b.n	8006c0e <memchr+0x1a>
 8006c06:	7804      	ldrb	r4, [r0, #0]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	428c      	cmp	r4, r1
 8006c0c:	d1f6      	bne.n	8006bfc <memchr+0x8>
 8006c0e:	bd10      	pop	{r4, pc}

08006c10 <_realloc_r>:
 8006c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c14:	4680      	mov	r8, r0
 8006c16:	4614      	mov	r4, r2
 8006c18:	460e      	mov	r6, r1
 8006c1a:	b921      	cbnz	r1, 8006c26 <_realloc_r+0x16>
 8006c1c:	4611      	mov	r1, r2
 8006c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c22:	f7ff bb83 	b.w	800632c <_malloc_r>
 8006c26:	b92a      	cbnz	r2, 8006c34 <_realloc_r+0x24>
 8006c28:	f7ff fc96 	bl	8006558 <_free_r>
 8006c2c:	4625      	mov	r5, r4
 8006c2e:	4628      	mov	r0, r5
 8006c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c34:	f000 f81b 	bl	8006c6e <_malloc_usable_size_r>
 8006c38:	4284      	cmp	r4, r0
 8006c3a:	4607      	mov	r7, r0
 8006c3c:	d802      	bhi.n	8006c44 <_realloc_r+0x34>
 8006c3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c42:	d812      	bhi.n	8006c6a <_realloc_r+0x5a>
 8006c44:	4621      	mov	r1, r4
 8006c46:	4640      	mov	r0, r8
 8006c48:	f7ff fb70 	bl	800632c <_malloc_r>
 8006c4c:	4605      	mov	r5, r0
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	d0ed      	beq.n	8006c2e <_realloc_r+0x1e>
 8006c52:	42bc      	cmp	r4, r7
 8006c54:	4622      	mov	r2, r4
 8006c56:	4631      	mov	r1, r6
 8006c58:	bf28      	it	cs
 8006c5a:	463a      	movcs	r2, r7
 8006c5c:	f7ff fc6e 	bl	800653c <memcpy>
 8006c60:	4631      	mov	r1, r6
 8006c62:	4640      	mov	r0, r8
 8006c64:	f7ff fc78 	bl	8006558 <_free_r>
 8006c68:	e7e1      	b.n	8006c2e <_realloc_r+0x1e>
 8006c6a:	4635      	mov	r5, r6
 8006c6c:	e7df      	b.n	8006c2e <_realloc_r+0x1e>

08006c6e <_malloc_usable_size_r>:
 8006c6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c72:	1f18      	subs	r0, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	bfbc      	itt	lt
 8006c78:	580b      	ldrlt	r3, [r1, r0]
 8006c7a:	18c0      	addlt	r0, r0, r3
 8006c7c:	4770      	bx	lr
	...

08006c80 <_init>:
 8006c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c82:	bf00      	nop
 8006c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c86:	bc08      	pop	{r3}
 8006c88:	469e      	mov	lr, r3
 8006c8a:	4770      	bx	lr

08006c8c <_fini>:
 8006c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8e:	bf00      	nop
 8006c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c92:	bc08      	pop	{r3}
 8006c94:	469e      	mov	lr, r3
 8006c96:	4770      	bx	lr
