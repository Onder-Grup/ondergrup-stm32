
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca64  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fdc  0800cc48  0800cc48  0001cc48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc24  0800dc24  00020104  2**0
                  CONTENTS
  4 .ARM          00000000  0800dc24  0800dc24  00020104  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dc24  0800dc24  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc24  0800dc24  0001dc24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc28  0800dc28  0001dc28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800dc2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000104  0800dd30  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e0  0800dd30  000204e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002012d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016701  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034ea  00000000  00000000  00036871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00039d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e67  00000000  00000000  0003aff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6a5  00000000  00000000  0003be5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c0bb  00000000  00000000  00058504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009eec2  00000000  00000000  000745bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052e4  00000000  00000000  00113484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00118768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000104 	.word	0x20000104
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cc30 	.word	0x0800cc30

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000108 	.word	0x20000108
 8000220:	0800cc30 	.word	0x0800cc30

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:

#include "EEPROMProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void eepromKontrol() {
 8000234:	b5b0      	push	{r4, r5, r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	; 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	; (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	; 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	; 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	; (80004bc <eepromKontrol+0x288>)
 8000250:	f009 fb2c 	bl	80098ac <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000258:	f008 f9a4 	bl	80085a4 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	; (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	; (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	; (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	; (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	; (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	; (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	; (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	; (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	; (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	; (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	; (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	; (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	; (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	; (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	; (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	; (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	; (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	; (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	; (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	; (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	; (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	; (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	; (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	; (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	; (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	; (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	; (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	; (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	; (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	; (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	; (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	; (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	; (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	; (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	; (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	; (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	; (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	; (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	; (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	; (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	; (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	; (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	; (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	; (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	; (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	; (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	; (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	; (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	; (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	; (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	; (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	; (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	; (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	; (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	; (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	; (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	; (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	; (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	; (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	; (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	; (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	; (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	; (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	; (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	; (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	; (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	; (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	; (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	; (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	; (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	; (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	; (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	; (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	; (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	; (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	; (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	; (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	; (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	; (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	; (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	; (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	; (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	; (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	; (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	; (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	; (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	; (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	; (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	; (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	; (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	; (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	; (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	; (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[102];
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2066 	ldrb.w	r2, [r3, #102]	; 0x66
 80003fa:	4b60      	ldr	r3, [pc, #384]	; (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	; (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	; (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	; (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	; (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	; (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	; (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	; (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	; (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	; (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	; (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	; (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	; (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	; (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	; (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	; (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	; (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	; (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	; (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000120 	.word	0x20000120
 80004bc:	200002ac 	.word	0x200002ac
 80004c0:	200001f5 	.word	0x200001f5
 80004c4:	2000021d 	.word	0x2000021d
 80004c8:	20000220 	.word	0x20000220
 80004cc:	20000221 	.word	0x20000221
 80004d0:	20000222 	.word	0x20000222
 80004d4:	20000223 	.word	0x20000223
 80004d8:	20000224 	.word	0x20000224
 80004dc:	20000225 	.word	0x20000225
 80004e0:	20000235 	.word	0x20000235
 80004e4:	20000226 	.word	0x20000226
 80004e8:	20000236 	.word	0x20000236
 80004ec:	20000227 	.word	0x20000227
 80004f0:	20000237 	.word	0x20000237
 80004f4:	2000022a 	.word	0x2000022a
 80004f8:	2000022b 	.word	0x2000022b
 80004fc:	2000022c 	.word	0x2000022c
 8000500:	2000022d 	.word	0x2000022d
 8000504:	2000022e 	.word	0x2000022e
 8000508:	2000022f 	.word	0x2000022f
 800050c:	20000230 	.word	0x20000230
 8000510:	20000231 	.word	0x20000231
 8000514:	20000232 	.word	0x20000232
 8000518:	20000233 	.word	0x20000233
 800051c:	20000234 	.word	0x20000234
 8000520:	20000238 	.word	0x20000238
 8000524:	2000023a 	.word	0x2000023a
 8000528:	20000218 	.word	0x20000218
 800052c:	20000219 	.word	0x20000219
 8000530:	2000021a 	.word	0x2000021a
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	2000021b 	.word	0x2000021b
 8000540:	2000023d 	.word	0x2000023d
 8000544:	2000023b 	.word	0x2000023b
 8000548:	20000229 	.word	0x20000229
 800054c:	2000023c 	.word	0x2000023c
 8000550:	20000228 	.word	0x20000228
 8000554:	2000023e 	.word	0x2000023e
 8000558:	2000023f 	.word	0x2000023f
 800055c:	20000240 	.word	0x20000240
 8000560:	20000241 	.word	0x20000241
 8000564:	20000242 	.word	0x20000242
 8000568:	20000243 	.word	0x20000243
 800056c:	20000244 	.word	0x20000244
 8000570:	20000245 	.word	0x20000245
 8000574:	20000246 	.word	0x20000246
 8000578:	20000247 	.word	0x20000247
 800057c:	200001f4 	.word	0x200001f4
	}

	if(kapi1AcSure>5) {
 8000580:	4b62      	ldr	r3, [pc, #392]	; (800070c <eepromKontrol+0x4d8>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b60      	ldr	r3, [pc, #384]	; (800070c <eepromKontrol+0x4d8>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b60      	ldr	r3, [pc, #384]	; (8000710 <eepromKontrol+0x4dc>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b5e      	ldr	r3, [pc, #376]	; (8000710 <eepromKontrol+0x4dc>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b5d      	ldr	r3, [pc, #372]	; (8000714 <eepromKontrol+0x4e0>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b5b      	ldr	r3, [pc, #364]	; (8000714 <eepromKontrol+0x4e0>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b5b      	ldr	r3, [pc, #364]	; (8000718 <eepromKontrol+0x4e4>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b59      	ldr	r3, [pc, #356]	; (8000718 <eepromKontrol+0x4e4>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b58      	ldr	r3, [pc, #352]	; (800071c <eepromKontrol+0x4e8>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b56      	ldr	r3, [pc, #344]	; (800071c <eepromKontrol+0x4e8>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b56      	ldr	r3, [pc, #344]	; (8000720 <eepromKontrol+0x4ec>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b54      	ldr	r3, [pc, #336]	; (8000720 <eepromKontrol+0x4ec>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b53      	ldr	r3, [pc, #332]	; (8000724 <eepromKontrol+0x4f0>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b51      	ldr	r3, [pc, #324]	; (8000724 <eepromKontrol+0x4f0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b51      	ldr	r3, [pc, #324]	; (8000728 <eepromKontrol+0x4f4>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b4f      	ldr	r3, [pc, #316]	; (8000728 <eepromKontrol+0x4f4>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b4e      	ldr	r3, [pc, #312]	; (800072c <eepromKontrol+0x4f8>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b4c      	ldr	r3, [pc, #304]	; (800072c <eepromKontrol+0x4f8>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b4c      	ldr	r3, [pc, #304]	; (8000730 <eepromKontrol+0x4fc>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b4a      	ldr	r3, [pc, #296]	; (8000730 <eepromKontrol+0x4fc>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b49      	ldr	r3, [pc, #292]	; (8000734 <eepromKontrol+0x500>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b47      	ldr	r3, [pc, #284]	; (8000734 <eepromKontrol+0x500>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b47      	ldr	r3, [pc, #284]	; (8000738 <eepromKontrol+0x504>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b45      	ldr	r3, [pc, #276]	; (8000738 <eepromKontrol+0x504>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b44      	ldr	r3, [pc, #272]	; (800073c <eepromKontrol+0x508>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b42      	ldr	r3, [pc, #264]	; (800073c <eepromKontrol+0x508>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b42      	ldr	r3, [pc, #264]	; (8000740 <eepromKontrol+0x50c>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b40      	ldr	r3, [pc, #256]	; (8000740 <eepromKontrol+0x50c>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b3f      	ldr	r3, [pc, #252]	; (8000744 <eepromKontrol+0x510>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b3d      	ldr	r3, [pc, #244]	; (8000744 <eepromKontrol+0x510>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b3d      	ldr	r3, [pc, #244]	; (8000748 <eepromKontrol+0x514>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b3b      	ldr	r3, [pc, #236]	; (8000748 <eepromKontrol+0x514>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b3a      	ldr	r3, [pc, #232]	; (800074c <eepromKontrol+0x518>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	; 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b38      	ldr	r3, [pc, #224]	; (800074c <eepromKontrol+0x518>)
 800066a:	223c      	movs	r2, #60	; 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b38      	ldr	r3, [pc, #224]	; (8000750 <eepromKontrol+0x51c>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b36      	ldr	r3, [pc, #216]	; (8000750 <eepromKontrol+0x51c>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b35      	ldr	r3, [pc, #212]	; (8000754 <eepromKontrol+0x520>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b33      	ldr	r3, [pc, #204]	; (8000754 <eepromKontrol+0x520>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b33      	ldr	r3, [pc, #204]	; (8000758 <eepromKontrol+0x524>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b31      	ldr	r3, [pc, #196]	; (8000758 <eepromKontrol+0x524>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b30      	ldr	r3, [pc, #192]	; (800075c <eepromKontrol+0x528>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b2e      	ldr	r3, [pc, #184]	; (800075c <eepromKontrol+0x528>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <eepromKontrol+0x52c>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <eepromKontrol+0x52c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[idStartPos], 12);
 80006b4:	4b2b      	ldr	r3, [pc, #172]	; (8000764 <eepromKontrol+0x530>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a2b      	ldr	r2, [pc, #172]	; (8000768 <eepromKontrol+0x534>)
 80006ba:	441a      	add	r2, r3
 80006bc:	4b2b      	ldr	r3, [pc, #172]	; (800076c <eepromKontrol+0x538>)
 80006be:	6810      	ldr	r0, [r2, #0]
 80006c0:	6851      	ldr	r1, [r2, #4]
 80006c2:	6892      	ldr	r2, [r2, #8]
 80006c4:	6018      	str	r0, [r3, #0]
 80006c6:	6059      	str	r1, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
	memcpy(wifiSSIDInt, &eepromData[ssidStartPos], 20);
 80006ca:	4b29      	ldr	r3, [pc, #164]	; (8000770 <eepromKontrol+0x53c>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	4a26      	ldr	r2, [pc, #152]	; (8000768 <eepromKontrol+0x534>)
 80006d0:	441a      	add	r2, r3
 80006d2:	4b28      	ldr	r3, [pc, #160]	; (8000774 <eepromKontrol+0x540>)
 80006d4:	6811      	ldr	r1, [r2, #0]
 80006d6:	6855      	ldr	r5, [r2, #4]
 80006d8:	6894      	ldr	r4, [r2, #8]
 80006da:	68d0      	ldr	r0, [r2, #12]
 80006dc:	6019      	str	r1, [r3, #0]
 80006de:	605d      	str	r5, [r3, #4]
 80006e0:	609c      	str	r4, [r3, #8]
 80006e2:	60d8      	str	r0, [r3, #12]
 80006e4:	6911      	ldr	r1, [r2, #16]
 80006e6:	6119      	str	r1, [r3, #16]
	memcpy(wifiPassInt, &eepromData[passStartPos], 20);
 80006e8:	4b23      	ldr	r3, [pc, #140]	; (8000778 <eepromKontrol+0x544>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a1e      	ldr	r2, [pc, #120]	; (8000768 <eepromKontrol+0x534>)
 80006ee:	441a      	add	r2, r3
 80006f0:	4b22      	ldr	r3, [pc, #136]	; (800077c <eepromKontrol+0x548>)
 80006f2:	6811      	ldr	r1, [r2, #0]
 80006f4:	6855      	ldr	r5, [r2, #4]
 80006f6:	6894      	ldr	r4, [r2, #8]
 80006f8:	68d0      	ldr	r0, [r2, #12]
 80006fa:	6019      	str	r1, [r3, #0]
 80006fc:	605d      	str	r5, [r3, #4]
 80006fe:	609c      	str	r4, [r3, #8]
 8000700:	60d8      	str	r0, [r3, #12]
 8000702:	6911      	ldr	r1, [r2, #16]
 8000704:	6119      	str	r1, [r3, #16]
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	bdb0      	pop	{r4, r5, r7, pc}
 800070c:	20000235 	.word	0x20000235
 8000710:	20000226 	.word	0x20000226
 8000714:	20000236 	.word	0x20000236
 8000718:	20000227 	.word	0x20000227
 800071c:	20000229 	.word	0x20000229
 8000720:	20000237 	.word	0x20000237
 8000724:	2000022a 	.word	0x2000022a
 8000728:	2000022b 	.word	0x2000022b
 800072c:	2000022c 	.word	0x2000022c
 8000730:	2000022d 	.word	0x2000022d
 8000734:	2000022e 	.word	0x2000022e
 8000738:	2000022f 	.word	0x2000022f
 800073c:	20000230 	.word	0x20000230
 8000740:	20000231 	.word	0x20000231
 8000744:	20000232 	.word	0x20000232
 8000748:	20000233 	.word	0x20000233
 800074c:	20000234 	.word	0x20000234
 8000750:	20000238 	.word	0x20000238
 8000754:	2000023a 	.word	0x2000023a
 8000758:	2000023c 	.word	0x2000023c
 800075c:	2000023d 	.word	0x2000023d
 8000760:	2000023b 	.word	0x2000023b
 8000764:	20000004 	.word	0x20000004
 8000768:	20000120 	.word	0x20000120
 800076c:	20000198 	.word	0x20000198
 8000770:	20000008 	.word	0x20000008
 8000774:	200001cc 	.word	0x200001cc
 8000778:	2000000c 	.word	0x2000000c
 800077c:	200001e0 	.word	0x200001e0

08000780 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000788:	4a04      	ldr	r2, [pc, #16]	; (800079c <getCharFromCursorPosition+0x1c>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
}
 8000790:	4618      	mov	r0, r3
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	bc80      	pop	{r7}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	20000024 	.word	0x20000024

080007a0 <sendATCommand>:
#include "ESP8266.h"

#include "SystemDefaults.h"

void sendATCommand(UART_HandleTypeDef *huart1, const char *cmd, uint16_t delayAfter) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	60f8      	str	r0, [r7, #12]
 80007a8:	60b9      	str	r1, [r7, #8]
 80007aa:	4613      	mov	r3, r2
 80007ac:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(huart1, (uint8_t*)cmd, strlen(cmd));
 80007ae:	68b8      	ldr	r0, [r7, #8]
 80007b0:	f7ff fd38 	bl	8000224 <strlen>
 80007b4:	4603      	mov	r3, r0
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	461a      	mov	r2, r3
 80007ba:	68b9      	ldr	r1, [r7, #8]
 80007bc:	68f8      	ldr	r0, [r7, #12]
 80007be:	f00a ffbd 	bl	800b73c <HAL_UART_Transmit_IT>
    HAL_Delay(delayAfter);
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f007 feed 	bl	80085a4 <HAL_Delay>
}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <ESP8266_Init>:

void ESP8266_Init(UART_HandleTypeDef *huart, const char *wifiSS, const char *wifiPA) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b0a0      	sub	sp, #128	; 0x80
 80007d8:	af02      	add	r7, sp, #8
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
    sendATCommand(huart, "AT+RESTORE\r\n", 1000);
 80007e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007e4:	4915      	ldr	r1, [pc, #84]	; (800083c <ESP8266_Init+0x68>)
 80007e6:	68f8      	ldr	r0, [r7, #12]
 80007e8:	f7ff ffda 	bl	80007a0 <sendATCommand>
    sendATCommand(huart, "AT+RST\r\n", 1000);
 80007ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007f0:	4913      	ldr	r1, [pc, #76]	; (8000840 <ESP8266_Init+0x6c>)
 80007f2:	68f8      	ldr	r0, [r7, #12]
 80007f4:	f7ff ffd4 	bl	80007a0 <sendATCommand>
    sendATCommand(huart, "AT\r\n", 2000);
 80007f8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80007fc:	4911      	ldr	r1, [pc, #68]	; (8000844 <ESP8266_Init+0x70>)
 80007fe:	68f8      	ldr	r0, [r7, #12]
 8000800:	f7ff ffce 	bl	80007a0 <sendATCommand>
    sendATCommand(huart, "AT+CWMODE=1\r\n", 2000);
 8000804:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000808:	490f      	ldr	r1, [pc, #60]	; (8000848 <ESP8266_Init+0x74>)
 800080a:	68f8      	ldr	r0, [r7, #12]
 800080c:	f7ff ffc8 	bl	80007a0 <sendATCommand>

    char cmd[100];
    snprintf(cmd, sizeof(cmd), "AT+CWJAP_DEF=\"%s\",\"%s\"\r\n", wifiSS, wifiPA);
 8000810:	f107 0014 	add.w	r0, r7, #20
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	4a0c      	ldr	r2, [pc, #48]	; (800084c <ESP8266_Init+0x78>)
 800081c:	2164      	movs	r1, #100	; 0x64
 800081e:	f00b fd67 	bl	800c2f0 <sniprintf>
    sendATCommand(huart, cmd, 2000);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800082a:	4619      	mov	r1, r3
 800082c:	68f8      	ldr	r0, [r7, #12]
 800082e:	f7ff ffb7 	bl	80007a0 <sendATCommand>
}
 8000832:	bf00      	nop
 8000834:	3778      	adds	r7, #120	; 0x78
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	0800cc48 	.word	0x0800cc48
 8000840:	0800cc58 	.word	0x0800cc58
 8000844:	0800cc64 	.word	0x0800cc64
 8000848:	0800cc6c 	.word	0x0800cc6c
 800084c:	0800cc7c 	.word	0x0800cc7c

08000850 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart, const char *machineID, const char *machineData) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b0c6      	sub	sp, #280	; 0x118
 8000854:	af02      	add	r7, sp, #8
 8000856:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800085a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800085e:	6018      	str	r0, [r3, #0]
 8000860:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8000868:	6019      	str	r1, [r3, #0]
 800086a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800086e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000872:	601a      	str	r2, [r3, #0]
    char cmd[200];
    snprintf(cmd, sizeof(cmd), "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000874:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000878:	4b23      	ldr	r3, [pc, #140]	; (8000908 <sendMachineData+0xb8>)
 800087a:	4a24      	ldr	r2, [pc, #144]	; (800090c <sendMachineData+0xbc>)
 800087c:	21c8      	movs	r1, #200	; 0xc8
 800087e:	f00b fd37 	bl	800c2f0 <sniprintf>
    sendATCommand(huart, cmd, 4000);
 8000882:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000886:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800088a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800088e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000892:	6818      	ldr	r0, [r3, #0]
 8000894:	f7ff ff84 	bl	80007a0 <sendATCommand>

    int len = snprintf(cmd, sizeof(cmd),
 8000898:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800089c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80008a0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80008a4:	4a1a      	ldr	r2, [pc, #104]	; (8000910 <sendMachineData+0xc0>)
 80008a6:	9201      	str	r2, [sp, #4]
 80008a8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80008ac:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80008b0:	6812      	ldr	r2, [r2, #0]
 80008b2:	9200      	str	r2, [sp, #0]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <sendMachineData+0xc4>)
 80008b8:	21c8      	movs	r1, #200	; 0xc8
 80008ba:	f00b fd19 	bl	800c2f0 <sniprintf>
 80008be:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
        "GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n",
        machineID, machineData, mainServerWithPort);

    char lenCmd[50];
    snprintf(lenCmd, sizeof(lenCmd), "AT+CIPSEND=%d\r\n", len);
 80008c2:	f107 0010 	add.w	r0, r7, #16
 80008c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80008ca:	4a13      	ldr	r2, [pc, #76]	; (8000918 <sendMachineData+0xc8>)
 80008cc:	2132      	movs	r1, #50	; 0x32
 80008ce:	f00b fd0f 	bl	800c2f0 <sniprintf>
    sendATCommand(huart, lenCmd, 4000);
 80008d2:	f107 0110 	add.w	r1, r7, #16
 80008d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80008de:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80008e2:	6818      	ldr	r0, [r3, #0]
 80008e4:	f7ff ff5c 	bl	80007a0 <sendATCommand>
    sendATCommand(huart, cmd, 4000);
 80008e8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80008ec:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80008f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80008f4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80008f8:	6818      	ldr	r0, [r3, #0]
 80008fa:	f7ff ff51 	bl	80007a0 <sendATCommand>
}
 80008fe:	bf00      	nop
 8000900:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	0800cc98 	.word	0x0800cc98
 800090c:	0800cca8 	.word	0x0800cca8
 8000910:	0800cd24 	.word	0x0800cd24
 8000914:	0800ccc8 	.word	0x0800ccc8
 8000918:	0800cd38 	.word	0x0800cd38

0800091c <hata2EEPROM>:

#include "ErrorProcess.h"
#include "main.h"
#include "GlobalVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 800091c:	b590      	push	{r4, r7, lr}
 800091e:	b089      	sub	sp, #36	; 0x24
 8000920:	af04      	add	r7, sp, #16
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000926:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <hata2EEPROM+0xa4>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	1e5a      	subs	r2, r3, #1
 800092c:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <hata2EEPROM+0xa8>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4413      	add	r3, r2
 8000932:	4a25      	ldr	r2, [pc, #148]	; (80009c8 <hata2EEPROM+0xac>)
 8000934:	5cd3      	ldrb	r3, [r2, r3]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d002      	beq.n	8000940 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 800093a:	f000 f92b 	bl	8000b94 <eepromDataFillWithEmpty>
		goto veriEkleme;
 800093e:	e000      	b.n	8000942 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000940:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	e012      	b.n	800096e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <hata2EEPROM+0xa8>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	4413      	add	r3, r2
 8000950:	4a1d      	ldr	r2, [pc, #116]	; (80009c8 <hata2EEPROM+0xac>)
 8000952:	5cd3      	ldrb	r3, [r2, r3]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d107      	bne.n	8000968 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000958:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <hata2EEPROM+0xa8>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	4413      	add	r3, r2
 8000960:	4919      	ldr	r1, [pc, #100]	; (80009c8 <hata2EEPROM+0xac>)
 8000962:	79fa      	ldrb	r2, [r7, #7]
 8000964:	54ca      	strb	r2, [r1, r3]
					break;
 8000966:	e007      	b.n	8000978 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	3301      	adds	r3, #1
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <hata2EEPROM+0xa4>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	429a      	cmp	r2, r3
 8000976:	dbe7      	blt.n	8000948 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <hata2EEPROM+0xa8>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	b299      	uxth	r1, r3
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <hata2EEPROM+0xa4>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	b298      	uxth	r0, r3
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <hata2EEPROM+0xa8>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a0f      	ldr	r2, [pc, #60]	; (80009c8 <hata2EEPROM+0xac>)
 800098a:	4413      	add	r3, r2
 800098c:	4a0c      	ldr	r2, [pc, #48]	; (80009c0 <hata2EEPROM+0xa4>)
 800098e:	6812      	ldr	r2, [r2, #0]
 8000990:	b292      	uxth	r2, r2
 8000992:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8000996:	9402      	str	r4, [sp, #8]
 8000998:	9201      	str	r2, [sp, #4]
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	4603      	mov	r3, r0
 800099e:	460a      	mov	r2, r1
 80009a0:	21a0      	movs	r1, #160	; 0xa0
 80009a2:	480a      	ldr	r0, [pc, #40]	; (80009cc <hata2EEPROM+0xb0>)
 80009a4:	f008 fe88 	bl	80096b8 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80009a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009ac:	f007 fdfa 	bl	80085a4 <HAL_Delay>
	eepromKontrol(1);
 80009b0:	2001      	movs	r0, #1
 80009b2:	f7ff fc3f 	bl	8000234 <eepromKontrol>
}
 80009b6:	bf00      	nop
 80009b8:	3714      	adds	r7, #20
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd90      	pop	{r4, r7, pc}
 80009be:	bf00      	nop
 80009c0:	200000a0 	.word	0x200000a0
 80009c4:	200000a4 	.word	0x200000a4
 80009c8:	20000120 	.word	0x20000120
 80009cc:	200002ac 	.word	0x200002ac

080009d0 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d11d      	bne.n	8000a1c <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 80009e0:	4b62      	ldr	r3, [pc, #392]	; (8000b6c <hataKoduLcdGoster+0x19c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d105      	bne.n	80009f4 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU");
 80009e8:	4a61      	ldr	r2, [pc, #388]	; (8000b70 <hataKoduLcdGoster+0x1a0>)
 80009ea:	2101      	movs	r1, #1
 80009ec:	2001      	movs	r0, #1
 80009ee:	f007 f883 	bl	8007af8 <lcd_print>
 80009f2:	e008      	b.n	8000a06 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 80009f4:	4b5d      	ldr	r3, [pc, #372]	; (8000b6c <hataKoduLcdGoster+0x19c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d104      	bne.n	8000a06 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE");
 80009fc:	4a5d      	ldr	r2, [pc, #372]	; (8000b74 <hataKoduLcdGoster+0x1a4>)
 80009fe:	2101      	movs	r1, #1
 8000a00:	2001      	movs	r0, #1
 8000a02:	f007 f879 	bl	8007af8 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8000a06:	4a5c      	ldr	r2, [pc, #368]	; (8000b78 <hataKoduLcdGoster+0x1a8>)
 8000a08:	2101      	movs	r1, #1
 8000a0a:	2002      	movs	r0, #2
 8000a0c:	f007 f874 	bl	8007af8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a10:	4a5a      	ldr	r2, [pc, #360]	; (8000b7c <hataKoduLcdGoster+0x1ac>)
 8000a12:	2107      	movs	r1, #7
 8000a14:	2002      	movs	r0, #2
 8000a16:	f007 f86f 	bl	8007af8 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000a1a:	e0a3      	b.n	8000b64 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d11d      	bne.n	8000a5e <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8000a22:	4b52      	ldr	r3, [pc, #328]	; (8000b6c <hataKoduLcdGoster+0x19c>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d105      	bne.n	8000a36 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU");
 8000a2a:	4a51      	ldr	r2, [pc, #324]	; (8000b70 <hataKoduLcdGoster+0x1a0>)
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f007 f862 	bl	8007af8 <lcd_print>
 8000a34:	e008      	b.n	8000a48 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <hataKoduLcdGoster+0x19c>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d104      	bne.n	8000a48 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE");
 8000a3e:	4a4d      	ldr	r2, [pc, #308]	; (8000b74 <hataKoduLcdGoster+0x1a4>)
 8000a40:	2101      	movs	r1, #1
 8000a42:	2001      	movs	r0, #1
 8000a44:	f007 f858 	bl	8007af8 <lcd_print>
		lcd_print(2, 2, "2");
 8000a48:	4a4d      	ldr	r2, [pc, #308]	; (8000b80 <hataKoduLcdGoster+0x1b0>)
 8000a4a:	2102      	movs	r1, #2
 8000a4c:	2002      	movs	r0, #2
 8000a4e:	f007 f853 	bl	8007af8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a52:	4a4a      	ldr	r2, [pc, #296]	; (8000b7c <hataKoduLcdGoster+0x1ac>)
 8000a54:	2107      	movs	r1, #7
 8000a56:	2002      	movs	r0, #2
 8000a58:	f007 f84e 	bl	8007af8 <lcd_print>
}
 8000a5c:	e082      	b.n	8000b64 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	2b03      	cmp	r3, #3
 8000a62:	d11d      	bne.n	8000aa0 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8000a64:	4b41      	ldr	r3, [pc, #260]	; (8000b6c <hataKoduLcdGoster+0x19c>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d105      	bne.n	8000a78 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU");
 8000a6c:	4a40      	ldr	r2, [pc, #256]	; (8000b70 <hataKoduLcdGoster+0x1a0>)
 8000a6e:	2101      	movs	r1, #1
 8000a70:	2001      	movs	r0, #1
 8000a72:	f007 f841 	bl	8007af8 <lcd_print>
 8000a76:	e008      	b.n	8000a8a <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8000a78:	4b3c      	ldr	r3, [pc, #240]	; (8000b6c <hataKoduLcdGoster+0x19c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d104      	bne.n	8000a8a <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE");
 8000a80:	4a3c      	ldr	r2, [pc, #240]	; (8000b74 <hataKoduLcdGoster+0x1a4>)
 8000a82:	2101      	movs	r1, #1
 8000a84:	2001      	movs	r0, #1
 8000a86:	f007 f837 	bl	8007af8 <lcd_print>
		lcd_print(2, 3, "3");
 8000a8a:	4a3e      	ldr	r2, [pc, #248]	; (8000b84 <hataKoduLcdGoster+0x1b4>)
 8000a8c:	2103      	movs	r1, #3
 8000a8e:	2002      	movs	r0, #2
 8000a90:	f007 f832 	bl	8007af8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a94:	4a39      	ldr	r2, [pc, #228]	; (8000b7c <hataKoduLcdGoster+0x1ac>)
 8000a96:	2107      	movs	r1, #7
 8000a98:	2002      	movs	r0, #2
 8000a9a:	f007 f82d 	bl	8007af8 <lcd_print>
}
 8000a9e:	e061      	b.n	8000b64 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2b04      	cmp	r3, #4
 8000aa4:	d11d      	bne.n	8000ae2 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8000aa6:	4b31      	ldr	r3, [pc, #196]	; (8000b6c <hataKoduLcdGoster+0x19c>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d105      	bne.n	8000aba <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU");
 8000aae:	4a30      	ldr	r2, [pc, #192]	; (8000b70 <hataKoduLcdGoster+0x1a0>)
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f007 f820 	bl	8007af8 <lcd_print>
 8000ab8:	e008      	b.n	8000acc <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8000aba:	4b2c      	ldr	r3, [pc, #176]	; (8000b6c <hataKoduLcdGoster+0x19c>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d104      	bne.n	8000acc <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE");
 8000ac2:	4a2c      	ldr	r2, [pc, #176]	; (8000b74 <hataKoduLcdGoster+0x1a4>)
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	f007 f816 	bl	8007af8 <lcd_print>
		lcd_print(2, 4, "4");
 8000acc:	4a2e      	ldr	r2, [pc, #184]	; (8000b88 <hataKoduLcdGoster+0x1b8>)
 8000ace:	2104      	movs	r1, #4
 8000ad0:	2002      	movs	r0, #2
 8000ad2:	f007 f811 	bl	8007af8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000ad6:	4a29      	ldr	r2, [pc, #164]	; (8000b7c <hataKoduLcdGoster+0x1ac>)
 8000ad8:	2107      	movs	r1, #7
 8000ada:	2002      	movs	r0, #2
 8000adc:	f007 f80c 	bl	8007af8 <lcd_print>
}
 8000ae0:	e040      	b.n	8000b64 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b05      	cmp	r3, #5
 8000ae6:	d11d      	bne.n	8000b24 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8000ae8:	4b20      	ldr	r3, [pc, #128]	; (8000b6c <hataKoduLcdGoster+0x19c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d105      	bne.n	8000afc <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU");
 8000af0:	4a1f      	ldr	r2, [pc, #124]	; (8000b70 <hataKoduLcdGoster+0x1a0>)
 8000af2:	2101      	movs	r1, #1
 8000af4:	2001      	movs	r0, #1
 8000af6:	f006 ffff 	bl	8007af8 <lcd_print>
 8000afa:	e008      	b.n	8000b0e <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <hataKoduLcdGoster+0x19c>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d104      	bne.n	8000b0e <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE");
 8000b04:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <hataKoduLcdGoster+0x1a4>)
 8000b06:	2101      	movs	r1, #1
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f006 fff5 	bl	8007af8 <lcd_print>
		lcd_print(2, 5, "5");
 8000b0e:	4a1f      	ldr	r2, [pc, #124]	; (8000b8c <hataKoduLcdGoster+0x1bc>)
 8000b10:	2105      	movs	r1, #5
 8000b12:	2002      	movs	r0, #2
 8000b14:	f006 fff0 	bl	8007af8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b18:	4a18      	ldr	r2, [pc, #96]	; (8000b7c <hataKoduLcdGoster+0x1ac>)
 8000b1a:	2107      	movs	r1, #7
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f006 ffeb 	bl	8007af8 <lcd_print>
}
 8000b22:	e01f      	b.n	8000b64 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	2b06      	cmp	r3, #6
 8000b28:	d11c      	bne.n	8000b64 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <hataKoduLcdGoster+0x19c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d105      	bne.n	8000b3e <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU");
 8000b32:	4a0f      	ldr	r2, [pc, #60]	; (8000b70 <hataKoduLcdGoster+0x1a0>)
 8000b34:	2101      	movs	r1, #1
 8000b36:	2001      	movs	r0, #1
 8000b38:	f006 ffde 	bl	8007af8 <lcd_print>
 8000b3c:	e008      	b.n	8000b50 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <hataKoduLcdGoster+0x19c>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d104      	bne.n	8000b50 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE");
 8000b46:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <hataKoduLcdGoster+0x1a4>)
 8000b48:	2101      	movs	r1, #1
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f006 ffd4 	bl	8007af8 <lcd_print>
		lcd_print(2, 6, "6");
 8000b50:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <hataKoduLcdGoster+0x1c0>)
 8000b52:	2106      	movs	r1, #6
 8000b54:	2002      	movs	r0, #2
 8000b56:	f006 ffcf 	bl	8007af8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b5a:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <hataKoduLcdGoster+0x1ac>)
 8000b5c:	2107      	movs	r1, #7
 8000b5e:	2002      	movs	r0, #2
 8000b60:	f006 ffca 	bl	8007af8 <lcd_print>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000023d 	.word	0x2000023d
 8000b70:	0800cdc4 	.word	0x0800cdc4
 8000b74:	0800cdd4 	.word	0x0800cdd4
 8000b78:	0800cde4 	.word	0x0800cde4
 8000b7c:	0800cde8 	.word	0x0800cde8
 8000b80:	0800cdf4 	.word	0x0800cdf4
 8000b84:	0800cdf8 	.word	0x0800cdf8
 8000b88:	0800cdfc 	.word	0x0800cdfc
 8000b8c:	0800ce00 	.word	0x0800ce00
 8000b90:	0800ce04 	.word	0x0800ce04

08000b94 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	607b      	str	r3, [r7, #4]
 8000b9e:	e009      	b.n	8000bb4 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <eepromDataFillWithEmpty+0x38>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba8:	4a09      	ldr	r2, [pc, #36]	; (8000bd0 <eepromDataFillWithEmpty+0x3c>)
 8000baa:	2100      	movs	r1, #0
 8000bac:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <eepromDataFillWithEmpty+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	dbf0      	blt.n	8000ba0 <eepromDataFillWithEmpty+0xc>
	}
}
 8000bbe:	bf00      	nop
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000078 	.word	0x20000078
 8000bd0:	20000120 	.word	0x20000120
 8000bd4:	200000a0 	.word	0x200000a0

08000bd8 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000bde:	463b      	mov	r3, r7
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000bea:	4b50      	ldr	r3, [pc, #320]	; (8000d2c <i2cTest+0x154>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b4e      	ldr	r3, [pc, #312]	; (8000d2c <i2cTest+0x154>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f022 0201 	bic.w	r2, r2, #1
 8000bf8:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000bfa:	484c      	ldr	r0, [pc, #304]	; (8000d2c <i2cTest+0x154>)
 8000bfc:	f008 fc2e 	bl	800945c <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c00:	23c0      	movs	r3, #192	; 0xc0
 8000c02:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000c04:	2311      	movs	r3, #17
 8000c06:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000c10:	463b      	mov	r3, r7
 8000c12:	4619      	mov	r1, r3
 8000c14:	4846      	ldr	r0, [pc, #280]	; (8000d30 <i2cTest+0x158>)
 8000c16:	f008 f835 	bl	8008c84 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	2140      	movs	r1, #64	; 0x40
 8000c1e:	4844      	ldr	r0, [pc, #272]	; (8000d30 <i2cTest+0x158>)
 8000c20:	f008 faa7 	bl	8009172 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2180      	movs	r1, #128	; 0x80
 8000c28:	4841      	ldr	r0, [pc, #260]	; (8000d30 <i2cTest+0x158>)
 8000c2a:	f008 faa2 	bl	8009172 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000c2e:	200a      	movs	r0, #10
 8000c30:	f007 fcb8 	bl	80085a4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000c34:	bf00      	nop
 8000c36:	2140      	movs	r1, #64	; 0x40
 8000c38:	483d      	ldr	r0, [pc, #244]	; (8000d30 <i2cTest+0x158>)
 8000c3a:	f008 fa83 	bl	8009144 <HAL_GPIO_ReadPin>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d006      	beq.n	8000c52 <i2cTest+0x7a>
 8000c44:	2180      	movs	r1, #128	; 0x80
 8000c46:	483a      	ldr	r0, [pc, #232]	; (8000d30 <i2cTest+0x158>)
 8000c48:	f008 fa7c 	bl	8009144 <HAL_GPIO_ReadPin>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d1f1      	bne.n	8000c36 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2180      	movs	r1, #128	; 0x80
 8000c56:	4836      	ldr	r0, [pc, #216]	; (8000d30 <i2cTest+0x158>)
 8000c58:	f008 fa8b 	bl	8009172 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000c5c:	200a      	movs	r0, #10
 8000c5e:	f007 fca1 	bl	80085a4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000c62:	bf00      	nop
 8000c64:	2180      	movs	r1, #128	; 0x80
 8000c66:	4832      	ldr	r0, [pc, #200]	; (8000d30 <i2cTest+0x158>)
 8000c68:	f008 fa6c 	bl	8009144 <HAL_GPIO_ReadPin>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d0f8      	beq.n	8000c64 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	2140      	movs	r1, #64	; 0x40
 8000c76:	482e      	ldr	r0, [pc, #184]	; (8000d30 <i2cTest+0x158>)
 8000c78:	f008 fa7b 	bl	8009172 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c7c:	200a      	movs	r0, #10
 8000c7e:	f007 fc91 	bl	80085a4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000c82:	bf00      	nop
 8000c84:	2140      	movs	r1, #64	; 0x40
 8000c86:	482a      	ldr	r0, [pc, #168]	; (8000d30 <i2cTest+0x158>)
 8000c88:	f008 fa5c 	bl	8009144 <HAL_GPIO_ReadPin>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d0f8      	beq.n	8000c84 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2140      	movs	r1, #64	; 0x40
 8000c96:	4826      	ldr	r0, [pc, #152]	; (8000d30 <i2cTest+0x158>)
 8000c98:	f008 fa6b 	bl	8009172 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c9c:	200a      	movs	r0, #10
 8000c9e:	f007 fc81 	bl	80085a4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000ca2:	bf00      	nop
 8000ca4:	2140      	movs	r1, #64	; 0x40
 8000ca6:	4822      	ldr	r0, [pc, #136]	; (8000d30 <i2cTest+0x158>)
 8000ca8:	f008 fa4c 	bl	8009144 <HAL_GPIO_ReadPin>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d1f8      	bne.n	8000ca4 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	481e      	ldr	r0, [pc, #120]	; (8000d30 <i2cTest+0x158>)
 8000cb8:	f008 fa5b 	bl	8009172 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000cbc:	200a      	movs	r0, #10
 8000cbe:	f007 fc71 	bl	80085a4 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000cc2:	bf00      	nop
 8000cc4:	2180      	movs	r1, #128	; 0x80
 8000cc6:	481a      	ldr	r0, [pc, #104]	; (8000d30 <i2cTest+0x158>)
 8000cc8:	f008 fa3c 	bl	8009144 <HAL_GPIO_ReadPin>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d1f8      	bne.n	8000cc4 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cd2:	23c0      	movs	r3, #192	; 0xc0
 8000cd4:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000cd6:	2312      	movs	r3, #18
 8000cd8:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4812      	ldr	r0, [pc, #72]	; (8000d30 <i2cTest+0x158>)
 8000ce8:	f007 ffcc 	bl	8008c84 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <i2cTest+0x154>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681a      	ldr	r2, [r3, #0]
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <i2cTest+0x154>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000cfa:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <i2cTest+0x154>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <i2cTest+0x154>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d0a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <i2cTest+0x154>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <i2cTest+0x154>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f042 0201 	orr.w	r2, r2, #1
 8000d1a:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000d1c:	4803      	ldr	r0, [pc, #12]	; (8000d2c <i2cTest+0x154>)
 8000d1e:	f008 fa59 	bl	80091d4 <HAL_I2C_Init>
}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	200002ac 	.word	0x200002ac
 8000d30:	40010c00 	.word	0x40010c00

08000d34 <printTemplate>:
 *      Author: hidirektor
 */

#include "IoTMenu.h"

void printTemplate(int type, int page) {
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000d3e:	20c8      	movs	r0, #200	; 0xc8
 8000d40:	f007 fc30 	bl	80085a4 <HAL_Delay>
	lcd_clear();
 8000d44:	f006 ff04 	bl	8007b50 <lcd_clear>
	if(type == 1 && page == 0) {
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d143      	bne.n	8000dd6 <printTemplate+0xa2>
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d140      	bne.n	8000dd6 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000d54:	4a9d      	ldr	r2, [pc, #628]	; (8000fcc <printTemplate+0x298>)
 8000d56:	2101      	movs	r1, #1
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f006 fecd 	bl	8007af8 <lcd_print>
		lcd_print(2, 3, "0");
 8000d5e:	4a9c      	ldr	r2, [pc, #624]	; (8000fd0 <printTemplate+0x29c>)
 8000d60:	2103      	movs	r1, #3
 8000d62:	2002      	movs	r0, #2
 8000d64:	f006 fec8 	bl	8007af8 <lcd_print>
		lcd_print(2, 4, "1");
 8000d68:	4a9a      	ldr	r2, [pc, #616]	; (8000fd4 <printTemplate+0x2a0>)
 8000d6a:	2104      	movs	r1, #4
 8000d6c:	2002      	movs	r0, #2
 8000d6e:	f006 fec3 	bl	8007af8 <lcd_print>
		lcd_print(2, 5, "2");
 8000d72:	4a99      	ldr	r2, [pc, #612]	; (8000fd8 <printTemplate+0x2a4>)
 8000d74:	2105      	movs	r1, #5
 8000d76:	2002      	movs	r0, #2
 8000d78:	f006 febe 	bl	8007af8 <lcd_print>
		lcd_print(2, 6, "3");
 8000d7c:	4a97      	ldr	r2, [pc, #604]	; (8000fdc <printTemplate+0x2a8>)
 8000d7e:	2106      	movs	r1, #6
 8000d80:	2002      	movs	r0, #2
 8000d82:	f006 feb9 	bl	8007af8 <lcd_print>
		lcd_print(2, 7, "4");
 8000d86:	4a96      	ldr	r2, [pc, #600]	; (8000fe0 <printTemplate+0x2ac>)
 8000d88:	2107      	movs	r1, #7
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	f006 feb4 	bl	8007af8 <lcd_print>
		lcd_print(2, 10, "5");
 8000d90:	4a94      	ldr	r2, [pc, #592]	; (8000fe4 <printTemplate+0x2b0>)
 8000d92:	210a      	movs	r1, #10
 8000d94:	2002      	movs	r0, #2
 8000d96:	f006 feaf 	bl	8007af8 <lcd_print>
		lcd_print(2, 11, "6");
 8000d9a:	4a93      	ldr	r2, [pc, #588]	; (8000fe8 <printTemplate+0x2b4>)
 8000d9c:	210b      	movs	r1, #11
 8000d9e:	2002      	movs	r0, #2
 8000da0:	f006 feaa 	bl	8007af8 <lcd_print>
		lcd_print(2, 12, "7");
 8000da4:	4a91      	ldr	r2, [pc, #580]	; (8000fec <printTemplate+0x2b8>)
 8000da6:	210c      	movs	r1, #12
 8000da8:	2002      	movs	r0, #2
 8000daa:	f006 fea5 	bl	8007af8 <lcd_print>
		lcd_print(2, 13, "8");
 8000dae:	4a90      	ldr	r2, [pc, #576]	; (8000ff0 <printTemplate+0x2bc>)
 8000db0:	210d      	movs	r1, #13
 8000db2:	2002      	movs	r0, #2
 8000db4:	f006 fea0 	bl	8007af8 <lcd_print>
		lcd_print(2, 14, "9");
 8000db8:	4a8e      	ldr	r2, [pc, #568]	; (8000ff4 <printTemplate+0x2c0>)
 8000dba:	210e      	movs	r1, #14
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	f006 fe9b 	bl	8007af8 <lcd_print>
		lcd_print(1, 5, machineID);
 8000dc2:	4a8d      	ldr	r2, [pc, #564]	; (8000ff8 <printTemplate+0x2c4>)
 8000dc4:	2105      	movs	r1, #5
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f006 fe96 	bl	8007af8 <lcd_print>
		lcd_gotoxy(2, 3);
 8000dcc:	2103      	movs	r1, #3
 8000dce:	2002      	movs	r0, #2
 8000dd0:	f006 fe73 	bl	8007aba <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000dd4:	e0f5      	b.n	8000fc2 <printTemplate+0x28e>
	} else if(type == 2) {
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d178      	bne.n	8000ece <printTemplate+0x19a>
		if(page == 1) {
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d114      	bne.n	8000e0c <printTemplate+0xd8>
			lcd_clear();
 8000de2:	f006 feb5 	bl	8007b50 <lcd_clear>
			HAL_Delay(100);
 8000de6:	2064      	movs	r0, #100	; 0x64
 8000de8:	f007 fbdc 	bl	80085a4 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000dec:	4a83      	ldr	r2, [pc, #524]	; (8000ffc <printTemplate+0x2c8>)
 8000dee:	2101      	movs	r1, #1
 8000df0:	2001      	movs	r0, #1
 8000df2:	f006 fe81 	bl	8007af8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000df6:	4a82      	ldr	r2, [pc, #520]	; (8001000 <printTemplate+0x2cc>)
 8000df8:	2107      	movs	r1, #7
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f006 fe7c 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000e00:	4a80      	ldr	r2, [pc, #512]	; (8001004 <printTemplate+0x2d0>)
 8000e02:	2101      	movs	r1, #1
 8000e04:	2002      	movs	r0, #2
 8000e06:	f006 fe77 	bl	8007af8 <lcd_print>
}
 8000e0a:	e0da      	b.n	8000fc2 <printTemplate+0x28e>
		} else if(page == 2) {
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d114      	bne.n	8000e3c <printTemplate+0x108>
			lcd_clear();
 8000e12:	f006 fe9d 	bl	8007b50 <lcd_clear>
			HAL_Delay(100);
 8000e16:	2064      	movs	r0, #100	; 0x64
 8000e18:	f007 fbc4 	bl	80085a4 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e1c:	4a77      	ldr	r2, [pc, #476]	; (8000ffc <printTemplate+0x2c8>)
 8000e1e:	2101      	movs	r1, #1
 8000e20:	2001      	movs	r0, #1
 8000e22:	f006 fe69 	bl	8007af8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e26:	4a76      	ldr	r2, [pc, #472]	; (8001000 <printTemplate+0x2cc>)
 8000e28:	2107      	movs	r1, #7
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f006 fe64 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000e30:	4a75      	ldr	r2, [pc, #468]	; (8001008 <printTemplate+0x2d4>)
 8000e32:	2101      	movs	r1, #1
 8000e34:	2002      	movs	r0, #2
 8000e36:	f006 fe5f 	bl	8007af8 <lcd_print>
}
 8000e3a:	e0c2      	b.n	8000fc2 <printTemplate+0x28e>
		} else if(page == 3) {
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d114      	bne.n	8000e6c <printTemplate+0x138>
			lcd_clear();
 8000e42:	f006 fe85 	bl	8007b50 <lcd_clear>
			HAL_Delay(100);
 8000e46:	2064      	movs	r0, #100	; 0x64
 8000e48:	f007 fbac 	bl	80085a4 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e4c:	4a6b      	ldr	r2, [pc, #428]	; (8000ffc <printTemplate+0x2c8>)
 8000e4e:	2101      	movs	r1, #1
 8000e50:	2001      	movs	r0, #1
 8000e52:	f006 fe51 	bl	8007af8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e56:	4a6a      	ldr	r2, [pc, #424]	; (8001000 <printTemplate+0x2cc>)
 8000e58:	2107      	movs	r1, #7
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f006 fe4c 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000e60:	4a6a      	ldr	r2, [pc, #424]	; (800100c <printTemplate+0x2d8>)
 8000e62:	2101      	movs	r1, #1
 8000e64:	2002      	movs	r0, #2
 8000e66:	f006 fe47 	bl	8007af8 <lcd_print>
}
 8000e6a:	e0aa      	b.n	8000fc2 <printTemplate+0x28e>
		} else if(page == 4) {
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	2b04      	cmp	r3, #4
 8000e70:	d114      	bne.n	8000e9c <printTemplate+0x168>
			lcd_clear();
 8000e72:	f006 fe6d 	bl	8007b50 <lcd_clear>
			HAL_Delay(100);
 8000e76:	2064      	movs	r0, #100	; 0x64
 8000e78:	f007 fb94 	bl	80085a4 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e7c:	4a5f      	ldr	r2, [pc, #380]	; (8000ffc <printTemplate+0x2c8>)
 8000e7e:	2101      	movs	r1, #1
 8000e80:	2001      	movs	r0, #1
 8000e82:	f006 fe39 	bl	8007af8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e86:	4a5e      	ldr	r2, [pc, #376]	; (8001000 <printTemplate+0x2cc>)
 8000e88:	2107      	movs	r1, #7
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f006 fe34 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000e90:	4a5f      	ldr	r2, [pc, #380]	; (8001010 <printTemplate+0x2dc>)
 8000e92:	2101      	movs	r1, #1
 8000e94:	2002      	movs	r0, #2
 8000e96:	f006 fe2f 	bl	8007af8 <lcd_print>
}
 8000e9a:	e092      	b.n	8000fc2 <printTemplate+0x28e>
		} else if(page == 5) {
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	2b05      	cmp	r3, #5
 8000ea0:	f040 808f 	bne.w	8000fc2 <printTemplate+0x28e>
			lcd_clear();
 8000ea4:	f006 fe54 	bl	8007b50 <lcd_clear>
			HAL_Delay(100);
 8000ea8:	2064      	movs	r0, #100	; 0x64
 8000eaa:	f007 fb7b 	bl	80085a4 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000eae:	4a53      	ldr	r2, [pc, #332]	; (8000ffc <printTemplate+0x2c8>)
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	f006 fe20 	bl	8007af8 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000eb8:	4a51      	ldr	r2, [pc, #324]	; (8001000 <printTemplate+0x2cc>)
 8000eba:	2107      	movs	r1, #7
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f006 fe1b 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000ec2:	4a54      	ldr	r2, [pc, #336]	; (8001014 <printTemplate+0x2e0>)
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	f006 fe16 	bl	8007af8 <lcd_print>
}
 8000ecc:	e079      	b.n	8000fc2 <printTemplate+0x28e>
	} else if(type == 3) {
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d176      	bne.n	8000fc2 <printTemplate+0x28e>
		if(page == 1) {
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d114      	bne.n	8000f04 <printTemplate+0x1d0>
			lcd_clear();
 8000eda:	f006 fe39 	bl	8007b50 <lcd_clear>
			HAL_Delay(100);
 8000ede:	2064      	movs	r0, #100	; 0x64
 8000ee0:	f007 fb60 	bl	80085a4 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ee4:	4a4c      	ldr	r2, [pc, #304]	; (8001018 <printTemplate+0x2e4>)
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f006 fe05 	bl	8007af8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000eee:	4a4b      	ldr	r2, [pc, #300]	; (800101c <printTemplate+0x2e8>)
 8000ef0:	2107      	movs	r1, #7
 8000ef2:	2001      	movs	r0, #1
 8000ef4:	f006 fe00 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000ef8:	4a42      	ldr	r2, [pc, #264]	; (8001004 <printTemplate+0x2d0>)
 8000efa:	2101      	movs	r1, #1
 8000efc:	2002      	movs	r0, #2
 8000efe:	f006 fdfb 	bl	8007af8 <lcd_print>
}
 8000f02:	e05e      	b.n	8000fc2 <printTemplate+0x28e>
		} else if(page == 2) {
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	d114      	bne.n	8000f34 <printTemplate+0x200>
			lcd_clear();
 8000f0a:	f006 fe21 	bl	8007b50 <lcd_clear>
			HAL_Delay(100);
 8000f0e:	2064      	movs	r0, #100	; 0x64
 8000f10:	f007 fb48 	bl	80085a4 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f14:	4a40      	ldr	r2, [pc, #256]	; (8001018 <printTemplate+0x2e4>)
 8000f16:	2101      	movs	r1, #1
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f006 fded 	bl	8007af8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f1e:	4a3f      	ldr	r2, [pc, #252]	; (800101c <printTemplate+0x2e8>)
 8000f20:	2107      	movs	r1, #7
 8000f22:	2001      	movs	r0, #1
 8000f24:	f006 fde8 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000f28:	4a37      	ldr	r2, [pc, #220]	; (8001008 <printTemplate+0x2d4>)
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	2002      	movs	r0, #2
 8000f2e:	f006 fde3 	bl	8007af8 <lcd_print>
}
 8000f32:	e046      	b.n	8000fc2 <printTemplate+0x28e>
		} else if(page == 3) {
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d114      	bne.n	8000f64 <printTemplate+0x230>
			lcd_clear();
 8000f3a:	f006 fe09 	bl	8007b50 <lcd_clear>
			HAL_Delay(100);
 8000f3e:	2064      	movs	r0, #100	; 0x64
 8000f40:	f007 fb30 	bl	80085a4 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f44:	4a34      	ldr	r2, [pc, #208]	; (8001018 <printTemplate+0x2e4>)
 8000f46:	2101      	movs	r1, #1
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f006 fdd5 	bl	8007af8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f4e:	4a33      	ldr	r2, [pc, #204]	; (800101c <printTemplate+0x2e8>)
 8000f50:	2107      	movs	r1, #7
 8000f52:	2001      	movs	r0, #1
 8000f54:	f006 fdd0 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000f58:	4a2c      	ldr	r2, [pc, #176]	; (800100c <printTemplate+0x2d8>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	2002      	movs	r0, #2
 8000f5e:	f006 fdcb 	bl	8007af8 <lcd_print>
}
 8000f62:	e02e      	b.n	8000fc2 <printTemplate+0x28e>
		} else if(page == 4) {
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	2b04      	cmp	r3, #4
 8000f68:	d114      	bne.n	8000f94 <printTemplate+0x260>
			lcd_clear();
 8000f6a:	f006 fdf1 	bl	8007b50 <lcd_clear>
			HAL_Delay(100);
 8000f6e:	2064      	movs	r0, #100	; 0x64
 8000f70:	f007 fb18 	bl	80085a4 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000f74:	4a28      	ldr	r2, [pc, #160]	; (8001018 <printTemplate+0x2e4>)
 8000f76:	2101      	movs	r1, #1
 8000f78:	2001      	movs	r0, #1
 8000f7a:	f006 fdbd 	bl	8007af8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f7e:	4a27      	ldr	r2, [pc, #156]	; (800101c <printTemplate+0x2e8>)
 8000f80:	2107      	movs	r1, #7
 8000f82:	2001      	movs	r0, #1
 8000f84:	f006 fdb8 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000f88:	4a21      	ldr	r2, [pc, #132]	; (8001010 <printTemplate+0x2dc>)
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	f006 fdb3 	bl	8007af8 <lcd_print>
}
 8000f92:	e016      	b.n	8000fc2 <printTemplate+0x28e>
		} else if(page == 5) {
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2b05      	cmp	r3, #5
 8000f98:	d113      	bne.n	8000fc2 <printTemplate+0x28e>
			lcd_clear();
 8000f9a:	f006 fdd9 	bl	8007b50 <lcd_clear>
			HAL_Delay(100);
 8000f9e:	2064      	movs	r0, #100	; 0x64
 8000fa0:	f007 fb00 	bl	80085a4 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000fa4:	4a1c      	ldr	r2, [pc, #112]	; (8001018 <printTemplate+0x2e4>)
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	2001      	movs	r0, #1
 8000faa:	f006 fda5 	bl	8007af8 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fae:	4a1b      	ldr	r2, [pc, #108]	; (800101c <printTemplate+0x2e8>)
 8000fb0:	2107      	movs	r1, #7
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f006 fda0 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000fb8:	4a16      	ldr	r2, [pc, #88]	; (8001014 <printTemplate+0x2e0>)
 8000fba:	2101      	movs	r1, #1
 8000fbc:	2002      	movs	r0, #2
 8000fbe:	f006 fd9b 	bl	8007af8 <lcd_print>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	0800ce08 	.word	0x0800ce08
 8000fd0:	0800ce10 	.word	0x0800ce10
 8000fd4:	0800ce14 	.word	0x0800ce14
 8000fd8:	0800ce18 	.word	0x0800ce18
 8000fdc:	0800ce1c 	.word	0x0800ce1c
 8000fe0:	0800ce20 	.word	0x0800ce20
 8000fe4:	0800ce24 	.word	0x0800ce24
 8000fe8:	0800ce28 	.word	0x0800ce28
 8000fec:	0800ce2c 	.word	0x0800ce2c
 8000ff0:	0800ce30 	.word	0x0800ce30
 8000ff4:	0800ce34 	.word	0x0800ce34
 8000ff8:	20000198 	.word	0x20000198
 8000ffc:	0800ce38 	.word	0x0800ce38
 8001000:	200001a4 	.word	0x200001a4
 8001004:	0800ce40 	.word	0x0800ce40
 8001008:	0800ce54 	.word	0x0800ce54
 800100c:	0800ce68 	.word	0x0800ce68
 8001010:	0800ce7c 	.word	0x0800ce7c
 8001014:	0800ce90 	.word	0x0800ce90
 8001018:	0800cea4 	.word	0x0800cea4
 800101c:	200001b8 	.word	0x200001b8

08001020 <checkSlideVal>:

int checkSlideVal(int state) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d111      	bne.n	8001052 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800102e:	2101      	movs	r1, #1
 8001030:	4813      	ldr	r0, [pc, #76]	; (8001080 <checkSlideVal+0x60>)
 8001032:	f008 f887 	bl	8009144 <HAL_GPIO_ReadPin>
 8001036:	4603      	mov	r3, r0
 8001038:	2b01      	cmp	r3, #1
 800103a:	d101      	bne.n	8001040 <checkSlideVal+0x20>
			return 34;
 800103c:	2322      	movs	r3, #34	; 0x22
 800103e:	e01b      	b.n	8001078 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001040:	2108      	movs	r1, #8
 8001042:	4810      	ldr	r0, [pc, #64]	; (8001084 <checkSlideVal+0x64>)
 8001044:	f008 f87e 	bl	8009144 <HAL_GPIO_ReadPin>
 8001048:	4603      	mov	r3, r0
 800104a:	2b01      	cmp	r3, #1
 800104c:	d113      	bne.n	8001076 <checkSlideVal+0x56>
			return 32;
 800104e:	2320      	movs	r3, #32
 8001050:	e012      	b.n	8001078 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001052:	2101      	movs	r1, #1
 8001054:	480a      	ldr	r0, [pc, #40]	; (8001080 <checkSlideVal+0x60>)
 8001056:	f008 f875 	bl	8009144 <HAL_GPIO_ReadPin>
 800105a:	4603      	mov	r3, r0
 800105c:	2b01      	cmp	r3, #1
 800105e:	d101      	bne.n	8001064 <checkSlideVal+0x44>
			return 35;
 8001060:	2323      	movs	r3, #35	; 0x23
 8001062:	e009      	b.n	8001078 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001064:	2108      	movs	r1, #8
 8001066:	4807      	ldr	r0, [pc, #28]	; (8001084 <checkSlideVal+0x64>)
 8001068:	f008 f86c 	bl	8009144 <HAL_GPIO_ReadPin>
 800106c:	4603      	mov	r3, r0
 800106e:	2b01      	cmp	r3, #1
 8001070:	d101      	bne.n	8001076 <checkSlideVal+0x56>
			return 33;
 8001072:	2321      	movs	r3, #33	; 0x21
 8001074:	e000      	b.n	8001078 <checkSlideVal+0x58>
		}
	}
	return 0;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40010800 	.word	0x40010800
 8001084:	40011000 	.word	0x40011000

08001088 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b08a      	sub	sp, #40	; 0x28
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
 8001094:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f7ff f8c4 	bl	8000224 <strlen>
 800109c:	4603      	mov	r3, r0
 800109e:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 80010a0:	2301      	movs	r3, #1
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 80010a4:	e08a      	b.n	80011bc <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 80010a6:	6838      	ldr	r0, [r7, #0]
 80010a8:	f7ff ffba 	bl	8001020 <checkSlideVal>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	dd07      	ble.n	80010c2 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 80010b2:	6838      	ldr	r0, [r7, #0]
 80010b4:	f7ff ffb4 	bl	8001020 <checkSlideVal>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	4b44      	ldr	r3, [pc, #272]	; (80011d0 <slideText+0x148>)
 80010be:	701a      	strb	r2, [r3, #0]
			break;
 80010c0:	e081      	b.n	80011c6 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
 80010c6:	e075      	b.n	80011b4 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 80010c8:	6838      	ldr	r0, [r7, #0]
 80010ca:	f7ff ffa9 	bl	8001020 <checkSlideVal>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	dd09      	ble.n	80010e8 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 80010d4:	6838      	ldr	r0, [r7, #0]
 80010d6:	f7ff ffa3 	bl	8001020 <checkSlideVal>
 80010da:	4603      	mov	r3, r0
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b3c      	ldr	r3, [pc, #240]	; (80011d0 <slideText+0x148>)
 80010e0:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80010e6:	e069      	b.n	80011bc <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	6a3b      	ldr	r3, [r7, #32]
 80010ec:	4413      	add	r3, r2
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	e029      	b.n	8001146 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 80010f2:	6838      	ldr	r0, [r7, #0]
 80010f4:	f7ff ff94 	bl	8001020 <checkSlideVal>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	dd0b      	ble.n	8001116 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 80010fe:	6838      	ldr	r0, [r7, #0]
 8001100:	f7ff ff8e 	bl	8001020 <checkSlideVal>
 8001104:	4603      	mov	r3, r0
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b31      	ldr	r3, [pc, #196]	; (80011d0 <slideText+0x148>)
 800110a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800110c:	7dfb      	ldrb	r3, [r7, #23]
 800110e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001114:	e01d      	b.n	8001152 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	b2d8      	uxtb	r0, r3
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	b2da      	uxtb	r2, r3
 800111e:	6a3b      	ldr	r3, [r7, #32]
 8001120:	b2db      	uxtb	r3, r3
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	b2d9      	uxtb	r1, r3
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	461a      	mov	r2, r3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	f006 fcf4 	bl	8007b22 <lcd_print_char>
				HAL_Delay(30);
 800113a:	201e      	movs	r0, #30
 800113c:	f007 fa32 	bl	80085a4 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	3301      	adds	r3, #1
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	7dfa      	ldrb	r2, [r7, #23]
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4413      	add	r3, r2
 800114c:	69fa      	ldr	r2, [r7, #28]
 800114e:	429a      	cmp	r2, r3
 8001150:	dbcf      	blt.n	80010f2 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001152:	7dfb      	ldrb	r3, [r7, #23]
 8001154:	3b01      	subs	r3, #1
 8001156:	61bb      	str	r3, [r7, #24]
 8001158:	e023      	b.n	80011a2 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 800115a:	6838      	ldr	r0, [r7, #0]
 800115c:	f7ff ff60 	bl	8001020 <checkSlideVal>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	dd0b      	ble.n	800117e <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 8001166:	6838      	ldr	r0, [r7, #0]
 8001168:	f7ff ff5a 	bl	8001020 <checkSlideVal>
 800116c:	4603      	mov	r3, r0
 800116e:	b2da      	uxtb	r2, r3
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <slideText+0x148>)
 8001172:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001174:	7dfb      	ldrb	r3, [r7, #23]
 8001176:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800117c:	e017      	b.n	80011ae <slideText+0x126>
				}
			     if(j >= startPos) {
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	429a      	cmp	r2, r3
 8001184:	db0a      	blt.n	800119c <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	b2d1      	uxtb	r1, r2
 800118e:	2220      	movs	r2, #32
 8001190:	4618      	mov	r0, r3
 8001192:	f006 fcc6 	bl	8007b22 <lcd_print_char>
			    	 HAL_Delay(30);
 8001196:	201e      	movs	r0, #30
 8001198:	f007 fa04 	bl	80085a4 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	3b01      	subs	r3, #1
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	7dfa      	ldrb	r2, [r7, #23]
 80011a4:	6a3b      	ldr	r3, [r7, #32]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dad5      	bge.n	800115a <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 80011ae:	6a3b      	ldr	r3, [r7, #32]
 80011b0:	3301      	adds	r3, #1
 80011b2:	623b      	str	r3, [r7, #32]
 80011b4:	7dfb      	ldrb	r3, [r7, #23]
 80011b6:	6a3a      	ldr	r2, [r7, #32]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	db85      	blt.n	80010c8 <slideText+0x40>
	while(mainLoopVal == 1) {
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	2b01      	cmp	r3, #1
 80011c0:	f43f af71 	beq.w	80010a6 <slideText+0x1e>
			     }
			}
		}
	}
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2000021c 	.word	0x2000021c

080011d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011d8:	f3bf 8f4f 	dsb	sy
}
 80011dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <__NVIC_SystemReset+0x24>)
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80011e6:	4904      	ldr	r1, [pc, #16]	; (80011f8 <__NVIC_SystemReset+0x24>)
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__NVIC_SystemReset+0x28>)
 80011ea:	4313      	orrs	r3, r2
 80011ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80011ee:	f3bf 8f4f 	dsb	sy
}
 80011f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <__NVIC_SystemReset+0x20>
 80011f8:	e000ed00 	.word	0xe000ed00
 80011fc:	05fa0004 	.word	0x05fa0004

08001200 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "WifiProcess.h"
#include "IoTMenu.h"

void menu() {
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001206:	2101      	movs	r1, #1
 8001208:	488e      	ldr	r0, [pc, #568]	; (8001444 <menu+0x244>)
 800120a:	f007 ff9b 	bl	8009144 <HAL_GPIO_ReadPin>
 800120e:	4603      	mov	r3, r0
 8001210:	2b01      	cmp	r3, #1
 8001212:	f040 808e 	bne.w	8001332 <menu+0x132>
 8001216:	4b8c      	ldr	r3, [pc, #560]	; (8001448 <menu+0x248>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	f083 0301 	eor.w	r3, r3, #1
 800121e:	b2db      	uxtb	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	f000 8086 	beq.w	8001332 <menu+0x132>
		menuSayac = menuSayac+1;
 8001226:	4b89      	ldr	r3, [pc, #548]	; (800144c <menu+0x24c>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b87      	ldr	r3, [pc, #540]	; (800144c <menu+0x24c>)
 8001230:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001232:	4b86      	ldr	r3, [pc, #536]	; (800144c <menu+0x24c>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b24      	cmp	r3, #36	; 0x24
 8001238:	d102      	bne.n	8001240 <menu+0x40>
			menuSayac = 1;
 800123a:	4b84      	ldr	r3, [pc, #528]	; (800144c <menu+0x24c>)
 800123c:	2201      	movs	r2, #1
 800123e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001240:	4b82      	ldr	r3, [pc, #520]	; (800144c <menu+0x24c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b12      	cmp	r3, #18
 8001246:	d106      	bne.n	8001256 <menu+0x56>
 8001248:	4b81      	ldr	r3, [pc, #516]	; (8001450 <menu+0x250>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d102      	bne.n	8001256 <menu+0x56>
			menuSayac = 21;
 8001250:	4b7e      	ldr	r3, [pc, #504]	; (800144c <menu+0x24c>)
 8001252:	2215      	movs	r2, #21
 8001254:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001256:	4b7d      	ldr	r3, [pc, #500]	; (800144c <menu+0x24c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b08      	cmp	r3, #8
 800125c:	d106      	bne.n	800126c <menu+0x6c>
 800125e:	4b7d      	ldr	r3, [pc, #500]	; (8001454 <menu+0x254>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d102      	bne.n	800126c <menu+0x6c>
			menuSayac = 16;
 8001266:	4b79      	ldr	r3, [pc, #484]	; (800144c <menu+0x24c>)
 8001268:	2210      	movs	r2, #16
 800126a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800126c:	4b77      	ldr	r3, [pc, #476]	; (800144c <menu+0x24c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b0d      	cmp	r3, #13
 8001272:	d106      	bne.n	8001282 <menu+0x82>
 8001274:	4b77      	ldr	r3, [pc, #476]	; (8001454 <menu+0x254>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d102      	bne.n	8001282 <menu+0x82>
			menuSayac = 16;
 800127c:	4b73      	ldr	r3, [pc, #460]	; (800144c <menu+0x24c>)
 800127e:	2210      	movs	r2, #16
 8001280:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001282:	4b72      	ldr	r3, [pc, #456]	; (800144c <menu+0x24c>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b09      	cmp	r3, #9
 8001288:	d106      	bne.n	8001298 <menu+0x98>
 800128a:	4b72      	ldr	r3, [pc, #456]	; (8001454 <menu+0x254>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d102      	bne.n	8001298 <menu+0x98>
			menuSayac = 13;
 8001292:	4b6e      	ldr	r3, [pc, #440]	; (800144c <menu+0x24c>)
 8001294:	220d      	movs	r2, #13
 8001296:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001298:	4b6c      	ldr	r3, [pc, #432]	; (800144c <menu+0x24c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b0a      	cmp	r3, #10
 800129e:	d10a      	bne.n	80012b6 <menu+0xb6>
 80012a0:	4b6d      	ldr	r3, [pc, #436]	; (8001458 <menu+0x258>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d003      	beq.n	80012b0 <menu+0xb0>
 80012a8:	4b6b      	ldr	r3, [pc, #428]	; (8001458 <menu+0x258>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d102      	bne.n	80012b6 <menu+0xb6>
			menuSayac = 11;
 80012b0:	4b66      	ldr	r3, [pc, #408]	; (800144c <menu+0x24c>)
 80012b2:	220b      	movs	r2, #11
 80012b4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80012b6:	4b65      	ldr	r3, [pc, #404]	; (800144c <menu+0x24c>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b0c      	cmp	r3, #12
 80012bc:	d10e      	bne.n	80012dc <menu+0xdc>
 80012be:	4b67      	ldr	r3, [pc, #412]	; (800145c <menu+0x25c>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d003      	beq.n	80012ce <menu+0xce>
 80012c6:	4b65      	ldr	r3, [pc, #404]	; (800145c <menu+0x25c>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d106      	bne.n	80012dc <menu+0xdc>
 80012ce:	4b61      	ldr	r3, [pc, #388]	; (8001454 <menu+0x254>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d102      	bne.n	80012dc <menu+0xdc>
			menuSayac = 16;
 80012d6:	4b5d      	ldr	r3, [pc, #372]	; (800144c <menu+0x24c>)
 80012d8:	2210      	movs	r2, #16
 80012da:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80012dc:	4b5b      	ldr	r3, [pc, #364]	; (800144c <menu+0x24c>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b0c      	cmp	r3, #12
 80012e2:	d10e      	bne.n	8001302 <menu+0x102>
 80012e4:	4b5d      	ldr	r3, [pc, #372]	; (800145c <menu+0x25c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d003      	beq.n	80012f4 <menu+0xf4>
 80012ec:	4b5b      	ldr	r3, [pc, #364]	; (800145c <menu+0x25c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d106      	bne.n	8001302 <menu+0x102>
 80012f4:	4b57      	ldr	r3, [pc, #348]	; (8001454 <menu+0x254>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b03      	cmp	r3, #3
 80012fa:	d102      	bne.n	8001302 <menu+0x102>
			menuSayac = 13;
 80012fc:	4b53      	ldr	r3, [pc, #332]	; (800144c <menu+0x24c>)
 80012fe:	220d      	movs	r2, #13
 8001300:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001302:	4b52      	ldr	r3, [pc, #328]	; (800144c <menu+0x24c>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b0f      	cmp	r3, #15
 8001308:	d106      	bne.n	8001318 <menu+0x118>
 800130a:	4b55      	ldr	r3, [pc, #340]	; (8001460 <menu+0x260>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d102      	bne.n	8001318 <menu+0x118>
			menuSayac = 16;
 8001312:	4b4e      	ldr	r3, [pc, #312]	; (800144c <menu+0x24c>)
 8001314:	2210      	movs	r2, #16
 8001316:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001318:	4b4c      	ldr	r3, [pc, #304]	; (800144c <menu+0x24c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b18      	cmp	r3, #24
 800131e:	d106      	bne.n	800132e <menu+0x12e>
 8001320:	4b4b      	ldr	r3, [pc, #300]	; (8001450 <menu+0x250>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <menu+0x12e>
			menuSayac = 26;
 8001328:	4b48      	ldr	r3, [pc, #288]	; (800144c <menu+0x24c>)
 800132a:	221a      	movs	r2, #26
 800132c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800132e:	f003 fb33 	bl	8004998 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001332:	2108      	movs	r1, #8
 8001334:	484b      	ldr	r0, [pc, #300]	; (8001464 <menu+0x264>)
 8001336:	f007 ff05 	bl	8009144 <HAL_GPIO_ReadPin>
 800133a:	4603      	mov	r3, r0
 800133c:	2b01      	cmp	r3, #1
 800133e:	d175      	bne.n	800142c <menu+0x22c>
 8001340:	4b41      	ldr	r3, [pc, #260]	; (8001448 <menu+0x248>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	f083 0301 	eor.w	r3, r3, #1
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d06e      	beq.n	800142c <menu+0x22c>
		if (menuSayac <= 1) {
 800134e:	4b3f      	ldr	r3, [pc, #252]	; (800144c <menu+0x24c>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b01      	cmp	r3, #1
 8001354:	d802      	bhi.n	800135c <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001356:	4b3d      	ldr	r3, [pc, #244]	; (800144c <menu+0x24c>)
 8001358:	2224      	movs	r2, #36	; 0x24
 800135a:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800135c:	4b3b      	ldr	r3, [pc, #236]	; (800144c <menu+0x24c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	3b01      	subs	r3, #1
 8001362:	b2da      	uxtb	r2, r3
 8001364:	4b39      	ldr	r3, [pc, #228]	; (800144c <menu+0x24c>)
 8001366:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001368:	4b38      	ldr	r3, [pc, #224]	; (800144c <menu+0x24c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b14      	cmp	r3, #20
 800136e:	d106      	bne.n	800137e <menu+0x17e>
 8001370:	4b37      	ldr	r3, [pc, #220]	; (8001450 <menu+0x250>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d102      	bne.n	800137e <menu+0x17e>
			menuSayac = 17;
 8001378:	4b34      	ldr	r3, [pc, #208]	; (800144c <menu+0x24c>)
 800137a:	2211      	movs	r2, #17
 800137c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800137e:	4b33      	ldr	r3, [pc, #204]	; (800144c <menu+0x24c>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b0f      	cmp	r3, #15
 8001384:	d106      	bne.n	8001394 <menu+0x194>
 8001386:	4b33      	ldr	r3, [pc, #204]	; (8001454 <menu+0x254>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d102      	bne.n	8001394 <menu+0x194>
			menuSayac = 7;
 800138e:	4b2f      	ldr	r3, [pc, #188]	; (800144c <menu+0x24c>)
 8001390:	2207      	movs	r2, #7
 8001392:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001394:	4b2d      	ldr	r3, [pc, #180]	; (800144c <menu+0x24c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b0f      	cmp	r3, #15
 800139a:	d106      	bne.n	80013aa <menu+0x1aa>
 800139c:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <menu+0x254>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d102      	bne.n	80013aa <menu+0x1aa>
			menuSayac = 12;
 80013a4:	4b29      	ldr	r3, [pc, #164]	; (800144c <menu+0x24c>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80013aa:	4b28      	ldr	r3, [pc, #160]	; (800144c <menu+0x24c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b0c      	cmp	r3, #12
 80013b0:	d106      	bne.n	80013c0 <menu+0x1c0>
 80013b2:	4b28      	ldr	r3, [pc, #160]	; (8001454 <menu+0x254>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d102      	bne.n	80013c0 <menu+0x1c0>
			menuSayac = 8;
 80013ba:	4b24      	ldr	r3, [pc, #144]	; (800144c <menu+0x24c>)
 80013bc:	2208      	movs	r2, #8
 80013be:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <menu+0x24c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2b0a      	cmp	r3, #10
 80013c6:	d10a      	bne.n	80013de <menu+0x1de>
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <menu+0x258>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d003      	beq.n	80013d8 <menu+0x1d8>
 80013d0:	4b21      	ldr	r3, [pc, #132]	; (8001458 <menu+0x258>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d102      	bne.n	80013de <menu+0x1de>
			menuSayac = 9;
 80013d8:	4b1c      	ldr	r3, [pc, #112]	; (800144c <menu+0x24c>)
 80013da:	2209      	movs	r2, #9
 80013dc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80013de:	4b1b      	ldr	r3, [pc, #108]	; (800144c <menu+0x24c>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b0c      	cmp	r3, #12
 80013e4:	d10a      	bne.n	80013fc <menu+0x1fc>
 80013e6:	4b1d      	ldr	r3, [pc, #116]	; (800145c <menu+0x25c>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d003      	beq.n	80013f6 <menu+0x1f6>
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <menu+0x25c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d102      	bne.n	80013fc <menu+0x1fc>
			menuSayac = 11;
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <menu+0x24c>)
 80013f8:	220b      	movs	r2, #11
 80013fa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <menu+0x24c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b0f      	cmp	r3, #15
 8001402:	d106      	bne.n	8001412 <menu+0x212>
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <menu+0x260>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d102      	bne.n	8001412 <menu+0x212>
			menuSayac = 14;
 800140c:	4b0f      	ldr	r3, [pc, #60]	; (800144c <menu+0x24c>)
 800140e:	220e      	movs	r2, #14
 8001410:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <menu+0x24c>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b19      	cmp	r3, #25
 8001418:	d106      	bne.n	8001428 <menu+0x228>
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <menu+0x250>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d102      	bne.n	8001428 <menu+0x228>
			menuSayac = 23;
 8001422:	4b0a      	ldr	r3, [pc, #40]	; (800144c <menu+0x24c>)
 8001424:	2217      	movs	r2, #23
 8001426:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001428:	f003 fab6 	bl	8004998 <bekle>
	}

	if (menuSayac == 0) {
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <menu+0x24c>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d133      	bne.n	800149c <menu+0x29c>
		if(dilSecim == 0) {
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <menu+0x268>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d121      	bne.n	8001480 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 800143c:	4a0b      	ldr	r2, [pc, #44]	; (800146c <menu+0x26c>)
 800143e:	2101      	movs	r1, #1
 8001440:	2001      	movs	r0, #1
 8001442:	e015      	b.n	8001470 <menu+0x270>
 8001444:	40010800 	.word	0x40010800
 8001448:	2000024b 	.word	0x2000024b
 800144c:	2000021c 	.word	0x2000021c
 8001450:	2000022b 	.word	0x2000022b
 8001454:	20000224 	.word	0x20000224
 8001458:	20000225 	.word	0x20000225
 800145c:	20000226 	.word	0x20000226
 8001460:	20000227 	.word	0x20000227
 8001464:	40011000 	.word	0x40011000
 8001468:	2000023d 	.word	0x2000023d
 800146c:	0800ceac 	.word	0x0800ceac
 8001470:	f006 fb42 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001474:	4a94      	ldr	r2, [pc, #592]	; (80016c8 <menu+0x4c8>)
 8001476:	2101      	movs	r1, #1
 8001478:	2002      	movs	r0, #2
 800147a:	f006 fb3d 	bl	8007af8 <lcd_print>
 800147e:	e00d      	b.n	800149c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001480:	4b92      	ldr	r3, [pc, #584]	; (80016cc <menu+0x4cc>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d109      	bne.n	800149c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001488:	4a91      	ldr	r2, [pc, #580]	; (80016d0 <menu+0x4d0>)
 800148a:	2101      	movs	r1, #1
 800148c:	2001      	movs	r0, #1
 800148e:	f006 fb33 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001492:	4a90      	ldr	r2, [pc, #576]	; (80016d4 <menu+0x4d4>)
 8001494:	2101      	movs	r1, #1
 8001496:	2002      	movs	r0, #2
 8001498:	f006 fb2e 	bl	8007af8 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 800149c:	4b8e      	ldr	r3, [pc, #568]	; (80016d8 <menu+0x4d8>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	f040 82b5 	bne.w	8001a10 <menu+0x810>
		if(dilSecim == 0) {
 80014a6:	4b89      	ldr	r3, [pc, #548]	; (80016cc <menu+0x4cc>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d105      	bne.n	80014ba <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 80014ae:	4a8b      	ldr	r2, [pc, #556]	; (80016dc <menu+0x4dc>)
 80014b0:	2101      	movs	r1, #1
 80014b2:	2001      	movs	r0, #1
 80014b4:	f006 fb20 	bl	8007af8 <lcd_print>
 80014b8:	e008      	b.n	80014cc <menu+0x2cc>
		} else if(dilSecim == 1) {
 80014ba:	4b84      	ldr	r3, [pc, #528]	; (80016cc <menu+0x4cc>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d104      	bne.n	80014cc <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 80014c2:	4a87      	ldr	r2, [pc, #540]	; (80016e0 <menu+0x4e0>)
 80014c4:	2101      	movs	r1, #1
 80014c6:	2001      	movs	r0, #1
 80014c8:	f006 fb16 	bl	8007af8 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 80014cc:	4b85      	ldr	r3, [pc, #532]	; (80016e4 <menu+0x4e4>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d123      	bne.n	800151c <menu+0x31c>
			if(dilSecim == 0) {
 80014d4:	4b7d      	ldr	r3, [pc, #500]	; (80016cc <menu+0x4cc>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d105      	bne.n	80014e8 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 80014dc:	4a82      	ldr	r2, [pc, #520]	; (80016e8 <menu+0x4e8>)
 80014de:	2101      	movs	r1, #1
 80014e0:	2002      	movs	r0, #2
 80014e2:	f006 fb09 	bl	8007af8 <lcd_print>
 80014e6:	e008      	b.n	80014fa <menu+0x2fa>

			} else if(dilSecim == 1) {
 80014e8:	4b78      	ldr	r3, [pc, #480]	; (80016cc <menu+0x4cc>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d104      	bne.n	80014fa <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80014f0:	4a7e      	ldr	r2, [pc, #504]	; (80016ec <menu+0x4ec>)
 80014f2:	2101      	movs	r1, #1
 80014f4:	2002      	movs	r0, #2
 80014f6:	f006 faff 	bl	8007af8 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80014fa:	4a7d      	ldr	r2, [pc, #500]	; (80016f0 <menu+0x4f0>)
 80014fc:	210f      	movs	r1, #15
 80014fe:	2002      	movs	r0, #2
 8001500:	f006 fafa 	bl	8007af8 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001504:	4b7b      	ldr	r3, [pc, #492]	; (80016f4 <menu+0x4f4>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	220a      	movs	r2, #10
 800150a:	497b      	ldr	r1, [pc, #492]	; (80016f8 <menu+0x4f8>)
 800150c:	4618      	mov	r0, r3
 800150e:	f00a fe45 	bl	800c19c <itoa>
			lcd_print(2, 14, snum);
 8001512:	4a79      	ldr	r2, [pc, #484]	; (80016f8 <menu+0x4f8>)
 8001514:	210e      	movs	r1, #14
 8001516:	2002      	movs	r0, #2
 8001518:	f006 faee 	bl	8007af8 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800151c:	4b71      	ldr	r3, [pc, #452]	; (80016e4 <menu+0x4e4>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d123      	bne.n	800156c <menu+0x36c>
			if(dilSecim == 0) {
 8001524:	4b69      	ldr	r3, [pc, #420]	; (80016cc <menu+0x4cc>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d105      	bne.n	8001538 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 800152c:	4a73      	ldr	r2, [pc, #460]	; (80016fc <menu+0x4fc>)
 800152e:	2101      	movs	r1, #1
 8001530:	2002      	movs	r0, #2
 8001532:	f006 fae1 	bl	8007af8 <lcd_print>
 8001536:	e008      	b.n	800154a <menu+0x34a>
			} else if(dilSecim == 1) {
 8001538:	4b64      	ldr	r3, [pc, #400]	; (80016cc <menu+0x4cc>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d104      	bne.n	800154a <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001540:	4a6f      	ldr	r2, [pc, #444]	; (8001700 <menu+0x500>)
 8001542:	2101      	movs	r1, #1
 8001544:	2002      	movs	r0, #2
 8001546:	f006 fad7 	bl	8007af8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800154a:	4a6e      	ldr	r2, [pc, #440]	; (8001704 <menu+0x504>)
 800154c:	210f      	movs	r1, #15
 800154e:	2002      	movs	r0, #2
 8001550:	f006 fad2 	bl	8007af8 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001554:	4b6c      	ldr	r3, [pc, #432]	; (8001708 <menu+0x508>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	220a      	movs	r2, #10
 800155a:	4967      	ldr	r1, [pc, #412]	; (80016f8 <menu+0x4f8>)
 800155c:	4618      	mov	r0, r3
 800155e:	f00a fe1d 	bl	800c19c <itoa>
			lcd_print(2, 14, snum);
 8001562:	4a65      	ldr	r2, [pc, #404]	; (80016f8 <menu+0x4f8>)
 8001564:	210e      	movs	r1, #14
 8001566:	2002      	movs	r0, #2
 8001568:	f006 fac6 	bl	8007af8 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800156c:	4b5d      	ldr	r3, [pc, #372]	; (80016e4 <menu+0x4e4>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d123      	bne.n	80015bc <menu+0x3bc>
			if(dilSecim == 0) {
 8001574:	4b55      	ldr	r3, [pc, #340]	; (80016cc <menu+0x4cc>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d105      	bne.n	8001588 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 800157c:	4a63      	ldr	r2, [pc, #396]	; (800170c <menu+0x50c>)
 800157e:	2101      	movs	r1, #1
 8001580:	2002      	movs	r0, #2
 8001582:	f006 fab9 	bl	8007af8 <lcd_print>
 8001586:	e008      	b.n	800159a <menu+0x39a>
			} else if(dilSecim == 1) {
 8001588:	4b50      	ldr	r3, [pc, #320]	; (80016cc <menu+0x4cc>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d104      	bne.n	800159a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001590:	4a5f      	ldr	r2, [pc, #380]	; (8001710 <menu+0x510>)
 8001592:	2101      	movs	r1, #1
 8001594:	2002      	movs	r0, #2
 8001596:	f006 faaf 	bl	8007af8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800159a:	4a5a      	ldr	r2, [pc, #360]	; (8001704 <menu+0x504>)
 800159c:	210f      	movs	r1, #15
 800159e:	2002      	movs	r0, #2
 80015a0:	f006 faaa 	bl	8007af8 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80015a4:	4b5b      	ldr	r3, [pc, #364]	; (8001714 <menu+0x514>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	220a      	movs	r2, #10
 80015aa:	4953      	ldr	r1, [pc, #332]	; (80016f8 <menu+0x4f8>)
 80015ac:	4618      	mov	r0, r3
 80015ae:	f00a fdf5 	bl	800c19c <itoa>
			lcd_print(2, 14, snum);
 80015b2:	4a51      	ldr	r2, [pc, #324]	; (80016f8 <menu+0x4f8>)
 80015b4:	210e      	movs	r1, #14
 80015b6:	2002      	movs	r0, #2
 80015b8:	f006 fa9e 	bl	8007af8 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80015bc:	4b49      	ldr	r3, [pc, #292]	; (80016e4 <menu+0x4e4>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d123      	bne.n	800160c <menu+0x40c>
			if(dilSecim == 0) {
 80015c4:	4b41      	ldr	r3, [pc, #260]	; (80016cc <menu+0x4cc>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d105      	bne.n	80015d8 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 80015cc:	4a52      	ldr	r2, [pc, #328]	; (8001718 <menu+0x518>)
 80015ce:	2101      	movs	r1, #1
 80015d0:	2002      	movs	r0, #2
 80015d2:	f006 fa91 	bl	8007af8 <lcd_print>
 80015d6:	e008      	b.n	80015ea <menu+0x3ea>
			} else if(dilSecim == 1) {
 80015d8:	4b3c      	ldr	r3, [pc, #240]	; (80016cc <menu+0x4cc>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d104      	bne.n	80015ea <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 80015e0:	4a4e      	ldr	r2, [pc, #312]	; (800171c <menu+0x51c>)
 80015e2:	2101      	movs	r1, #1
 80015e4:	2002      	movs	r0, #2
 80015e6:	f006 fa87 	bl	8007af8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80015ea:	4a46      	ldr	r2, [pc, #280]	; (8001704 <menu+0x504>)
 80015ec:	210f      	movs	r1, #15
 80015ee:	2002      	movs	r0, #2
 80015f0:	f006 fa82 	bl	8007af8 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80015f4:	4b4a      	ldr	r3, [pc, #296]	; (8001720 <menu+0x520>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	220a      	movs	r2, #10
 80015fa:	493f      	ldr	r1, [pc, #252]	; (80016f8 <menu+0x4f8>)
 80015fc:	4618      	mov	r0, r3
 80015fe:	f00a fdcd 	bl	800c19c <itoa>
			lcd_print(2, 14, snum);
 8001602:	4a3d      	ldr	r2, [pc, #244]	; (80016f8 <menu+0x4f8>)
 8001604:	210e      	movs	r1, #14
 8001606:	2002      	movs	r0, #2
 8001608:	f006 fa76 	bl	8007af8 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800160c:	4b35      	ldr	r3, [pc, #212]	; (80016e4 <menu+0x4e4>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b04      	cmp	r3, #4
 8001612:	d123      	bne.n	800165c <menu+0x45c>
			if(dilSecim == 0) {
 8001614:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <menu+0x4cc>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d105      	bne.n	8001628 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 800161c:	4a41      	ldr	r2, [pc, #260]	; (8001724 <menu+0x524>)
 800161e:	2101      	movs	r1, #1
 8001620:	2002      	movs	r0, #2
 8001622:	f006 fa69 	bl	8007af8 <lcd_print>
 8001626:	e008      	b.n	800163a <menu+0x43a>
			} else if(dilSecim == 1) {
 8001628:	4b28      	ldr	r3, [pc, #160]	; (80016cc <menu+0x4cc>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d104      	bne.n	800163a <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001630:	4a3d      	ldr	r2, [pc, #244]	; (8001728 <menu+0x528>)
 8001632:	2101      	movs	r1, #1
 8001634:	2002      	movs	r0, #2
 8001636:	f006 fa5f 	bl	8007af8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800163a:	4a32      	ldr	r2, [pc, #200]	; (8001704 <menu+0x504>)
 800163c:	210f      	movs	r1, #15
 800163e:	2002      	movs	r0, #2
 8001640:	f006 fa5a 	bl	8007af8 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001644:	4b39      	ldr	r3, [pc, #228]	; (800172c <menu+0x52c>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	220a      	movs	r2, #10
 800164a:	492b      	ldr	r1, [pc, #172]	; (80016f8 <menu+0x4f8>)
 800164c:	4618      	mov	r0, r3
 800164e:	f00a fda5 	bl	800c19c <itoa>
			lcd_print(2, 14, snum);
 8001652:	4a29      	ldr	r2, [pc, #164]	; (80016f8 <menu+0x4f8>)
 8001654:	210e      	movs	r1, #14
 8001656:	2002      	movs	r0, #2
 8001658:	f006 fa4e 	bl	8007af8 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800165c:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <menu+0x4e4>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b05      	cmp	r3, #5
 8001662:	d123      	bne.n	80016ac <menu+0x4ac>
			if(dilSecim == 0) {
 8001664:	4b19      	ldr	r3, [pc, #100]	; (80016cc <menu+0x4cc>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d105      	bne.n	8001678 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 800166c:	4a30      	ldr	r2, [pc, #192]	; (8001730 <menu+0x530>)
 800166e:	2101      	movs	r1, #1
 8001670:	2002      	movs	r0, #2
 8001672:	f006 fa41 	bl	8007af8 <lcd_print>
 8001676:	e008      	b.n	800168a <menu+0x48a>
			} else if(dilSecim == 1) {
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <menu+0x4cc>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d104      	bne.n	800168a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001680:	4a2c      	ldr	r2, [pc, #176]	; (8001734 <menu+0x534>)
 8001682:	2101      	movs	r1, #1
 8001684:	2002      	movs	r0, #2
 8001686:	f006 fa37 	bl	8007af8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800168a:	4a1e      	ldr	r2, [pc, #120]	; (8001704 <menu+0x504>)
 800168c:	210f      	movs	r1, #15
 800168e:	2002      	movs	r0, #2
 8001690:	f006 fa32 	bl	8007af8 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001694:	4b28      	ldr	r3, [pc, #160]	; (8001738 <menu+0x538>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	220a      	movs	r2, #10
 800169a:	4917      	ldr	r1, [pc, #92]	; (80016f8 <menu+0x4f8>)
 800169c:	4618      	mov	r0, r3
 800169e:	f00a fd7d 	bl	800c19c <itoa>
			lcd_print(2, 14, snum);
 80016a2:	4a15      	ldr	r2, [pc, #84]	; (80016f8 <menu+0x4f8>)
 80016a4:	210e      	movs	r1, #14
 80016a6:	2002      	movs	r0, #2
 80016a8:	f006 fa26 	bl	8007af8 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80016ac:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <menu+0x4e4>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b06      	cmp	r3, #6
 80016b2:	d15f      	bne.n	8001774 <menu+0x574>
			if(dilSecim == 0) {
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <menu+0x4cc>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d141      	bne.n	8001740 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 80016bc:	4a1f      	ldr	r2, [pc, #124]	; (800173c <menu+0x53c>)
 80016be:	2101      	movs	r1, #1
 80016c0:	2002      	movs	r0, #2
 80016c2:	f006 fa19 	bl	8007af8 <lcd_print>
 80016c6:	e044      	b.n	8001752 <menu+0x552>
 80016c8:	0800cec0 	.word	0x0800cec0
 80016cc:	2000023d 	.word	0x2000023d
 80016d0:	0800ced4 	.word	0x0800ced4
 80016d4:	0800cee8 	.word	0x0800cee8
 80016d8:	2000021c 	.word	0x2000021c
 80016dc:	0800cefc 	.word	0x0800cefc
 80016e0:	0800cf10 	.word	0x0800cf10
 80016e4:	2000021e 	.word	0x2000021e
 80016e8:	0800cf24 	.word	0x0800cf24
 80016ec:	0800cf34 	.word	0x0800cf34
 80016f0:	0800cf44 	.word	0x0800cf44
 80016f4:	2000023e 	.word	0x2000023e
 80016f8:	20000190 	.word	0x20000190
 80016fc:	0800cf48 	.word	0x0800cf48
 8001700:	0800cf58 	.word	0x0800cf58
 8001704:	0800cf68 	.word	0x0800cf68
 8001708:	2000023f 	.word	0x2000023f
 800170c:	0800cf6c 	.word	0x0800cf6c
 8001710:	0800cf7c 	.word	0x0800cf7c
 8001714:	20000240 	.word	0x20000240
 8001718:	0800cf8c 	.word	0x0800cf8c
 800171c:	0800cf9c 	.word	0x0800cf9c
 8001720:	20000241 	.word	0x20000241
 8001724:	0800cfac 	.word	0x0800cfac
 8001728:	0800cfbc 	.word	0x0800cfbc
 800172c:	20000242 	.word	0x20000242
 8001730:	0800cfcc 	.word	0x0800cfcc
 8001734:	0800cfdc 	.word	0x0800cfdc
 8001738:	20000243 	.word	0x20000243
 800173c:	0800cfec 	.word	0x0800cfec
			} else if(dilSecim == 1) {
 8001740:	4b4f      	ldr	r3, [pc, #316]	; (8001880 <menu+0x680>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d104      	bne.n	8001752 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001748:	4a4e      	ldr	r2, [pc, #312]	; (8001884 <menu+0x684>)
 800174a:	2101      	movs	r1, #1
 800174c:	2002      	movs	r0, #2
 800174e:	f006 f9d3 	bl	8007af8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001752:	4a4d      	ldr	r2, [pc, #308]	; (8001888 <menu+0x688>)
 8001754:	210f      	movs	r1, #15
 8001756:	2002      	movs	r0, #2
 8001758:	f006 f9ce 	bl	8007af8 <lcd_print>
			itoa(hataKayit7, snum, 10);
 800175c:	4b4b      	ldr	r3, [pc, #300]	; (800188c <menu+0x68c>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	220a      	movs	r2, #10
 8001762:	494b      	ldr	r1, [pc, #300]	; (8001890 <menu+0x690>)
 8001764:	4618      	mov	r0, r3
 8001766:	f00a fd19 	bl	800c19c <itoa>
			lcd_print(2, 14, snum);
 800176a:	4a49      	ldr	r2, [pc, #292]	; (8001890 <menu+0x690>)
 800176c:	210e      	movs	r1, #14
 800176e:	2002      	movs	r0, #2
 8001770:	f006 f9c2 	bl	8007af8 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001774:	4b47      	ldr	r3, [pc, #284]	; (8001894 <menu+0x694>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b07      	cmp	r3, #7
 800177a:	d123      	bne.n	80017c4 <menu+0x5c4>
			if(dilSecim == 0) {
 800177c:	4b40      	ldr	r3, [pc, #256]	; (8001880 <menu+0x680>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d105      	bne.n	8001790 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001784:	4a44      	ldr	r2, [pc, #272]	; (8001898 <menu+0x698>)
 8001786:	2101      	movs	r1, #1
 8001788:	2002      	movs	r0, #2
 800178a:	f006 f9b5 	bl	8007af8 <lcd_print>
 800178e:	e008      	b.n	80017a2 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001790:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <menu+0x680>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d104      	bne.n	80017a2 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001798:	4a40      	ldr	r2, [pc, #256]	; (800189c <menu+0x69c>)
 800179a:	2101      	movs	r1, #1
 800179c:	2002      	movs	r0, #2
 800179e:	f006 f9ab 	bl	8007af8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017a2:	4a39      	ldr	r2, [pc, #228]	; (8001888 <menu+0x688>)
 80017a4:	210f      	movs	r1, #15
 80017a6:	2002      	movs	r0, #2
 80017a8:	f006 f9a6 	bl	8007af8 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80017ac:	4b3c      	ldr	r3, [pc, #240]	; (80018a0 <menu+0x6a0>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	220a      	movs	r2, #10
 80017b2:	4937      	ldr	r1, [pc, #220]	; (8001890 <menu+0x690>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f00a fcf1 	bl	800c19c <itoa>
			lcd_print(2, 14, snum);
 80017ba:	4a35      	ldr	r2, [pc, #212]	; (8001890 <menu+0x690>)
 80017bc:	210e      	movs	r1, #14
 80017be:	2002      	movs	r0, #2
 80017c0:	f006 f99a 	bl	8007af8 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80017c4:	4b33      	ldr	r3, [pc, #204]	; (8001894 <menu+0x694>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d123      	bne.n	8001814 <menu+0x614>
			if(dilSecim == 0) {
 80017cc:	4b2c      	ldr	r3, [pc, #176]	; (8001880 <menu+0x680>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d105      	bne.n	80017e0 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 80017d4:	4a33      	ldr	r2, [pc, #204]	; (80018a4 <menu+0x6a4>)
 80017d6:	2101      	movs	r1, #1
 80017d8:	2002      	movs	r0, #2
 80017da:	f006 f98d 	bl	8007af8 <lcd_print>
 80017de:	e008      	b.n	80017f2 <menu+0x5f2>
			} else if(dilSecim == 1) {
 80017e0:	4b27      	ldr	r3, [pc, #156]	; (8001880 <menu+0x680>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d104      	bne.n	80017f2 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 80017e8:	4a2f      	ldr	r2, [pc, #188]	; (80018a8 <menu+0x6a8>)
 80017ea:	2101      	movs	r1, #1
 80017ec:	2002      	movs	r0, #2
 80017ee:	f006 f983 	bl	8007af8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017f2:	4a25      	ldr	r2, [pc, #148]	; (8001888 <menu+0x688>)
 80017f4:	210f      	movs	r1, #15
 80017f6:	2002      	movs	r0, #2
 80017f8:	f006 f97e 	bl	8007af8 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80017fc:	4b2b      	ldr	r3, [pc, #172]	; (80018ac <menu+0x6ac>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	220a      	movs	r2, #10
 8001802:	4923      	ldr	r1, [pc, #140]	; (8001890 <menu+0x690>)
 8001804:	4618      	mov	r0, r3
 8001806:	f00a fcc9 	bl	800c19c <itoa>
			lcd_print(2, 14, snum);
 800180a:	4a21      	ldr	r2, [pc, #132]	; (8001890 <menu+0x690>)
 800180c:	210e      	movs	r1, #14
 800180e:	2002      	movs	r0, #2
 8001810:	f006 f972 	bl	8007af8 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <menu+0x694>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b09      	cmp	r3, #9
 800181a:	d123      	bne.n	8001864 <menu+0x664>
			if(dilSecim == 0) {
 800181c:	4b18      	ldr	r3, [pc, #96]	; (8001880 <menu+0x680>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d105      	bne.n	8001830 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001824:	4a22      	ldr	r2, [pc, #136]	; (80018b0 <menu+0x6b0>)
 8001826:	2101      	movs	r1, #1
 8001828:	2002      	movs	r0, #2
 800182a:	f006 f965 	bl	8007af8 <lcd_print>
 800182e:	e008      	b.n	8001842 <menu+0x642>
			} else if(dilSecim == 1) {
 8001830:	4b13      	ldr	r3, [pc, #76]	; (8001880 <menu+0x680>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d104      	bne.n	8001842 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001838:	4a1e      	ldr	r2, [pc, #120]	; (80018b4 <menu+0x6b4>)
 800183a:	2101      	movs	r1, #1
 800183c:	2002      	movs	r0, #2
 800183e:	f006 f95b 	bl	8007af8 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001842:	4a1d      	ldr	r2, [pc, #116]	; (80018b8 <menu+0x6b8>)
 8001844:	2110      	movs	r1, #16
 8001846:	2002      	movs	r0, #2
 8001848:	f006 f956 	bl	8007af8 <lcd_print>
			itoa(hataKayit10, snum, 10);
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <menu+0x6bc>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	220a      	movs	r2, #10
 8001852:	490f      	ldr	r1, [pc, #60]	; (8001890 <menu+0x690>)
 8001854:	4618      	mov	r0, r3
 8001856:	f00a fca1 	bl	800c19c <itoa>
			lcd_print(2, 15, snum);
 800185a:	4a0d      	ldr	r2, [pc, #52]	; (8001890 <menu+0x690>)
 800185c:	210f      	movs	r1, #15
 800185e:	2002      	movs	r0, #2
 8001860:	f006 f94a 	bl	8007af8 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <menu+0x694>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b0a      	cmp	r3, #10
 800186a:	d134      	bne.n	80018d6 <menu+0x6d6>
			if(dilSecim == 0) {
 800186c:	4b04      	ldr	r3, [pc, #16]	; (8001880 <menu+0x680>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d127      	bne.n	80018c4 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001874:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <menu+0x6c0>)
 8001876:	2101      	movs	r1, #1
 8001878:	2002      	movs	r0, #2
 800187a:	f006 f93d 	bl	8007af8 <lcd_print>
 800187e:	e02a      	b.n	80018d6 <menu+0x6d6>
 8001880:	2000023d 	.word	0x2000023d
 8001884:	0800cffc 	.word	0x0800cffc
 8001888:	0800cf68 	.word	0x0800cf68
 800188c:	20000244 	.word	0x20000244
 8001890:	20000190 	.word	0x20000190
 8001894:	2000021e 	.word	0x2000021e
 8001898:	0800d00c 	.word	0x0800d00c
 800189c:	0800d01c 	.word	0x0800d01c
 80018a0:	20000245 	.word	0x20000245
 80018a4:	0800d02c 	.word	0x0800d02c
 80018a8:	0800d03c 	.word	0x0800d03c
 80018ac:	20000246 	.word	0x20000246
 80018b0:	0800d04c 	.word	0x0800d04c
 80018b4:	0800d05c 	.word	0x0800d05c
 80018b8:	0800d06c 	.word	0x0800d06c
 80018bc:	20000247 	.word	0x20000247
 80018c0:	0800d070 	.word	0x0800d070
			} else if(dilSecim == 1) {
 80018c4:	4b82      	ldr	r3, [pc, #520]	; (8001ad0 <menu+0x8d0>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d104      	bne.n	80018d6 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 80018cc:	4a81      	ldr	r2, [pc, #516]	; (8001ad4 <menu+0x8d4>)
 80018ce:	2101      	movs	r1, #1
 80018d0:	2002      	movs	r0, #2
 80018d2:	f006 f911 	bl	8007af8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80018d6:	2102      	movs	r1, #2
 80018d8:	487f      	ldr	r0, [pc, #508]	; (8001ad8 <menu+0x8d8>)
 80018da:	f007 fc33 	bl	8009144 <HAL_GPIO_ReadPin>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d119      	bne.n	8001918 <menu+0x718>
 80018e4:	4b7d      	ldr	r3, [pc, #500]	; (8001adc <menu+0x8dc>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	f083 0301 	eor.w	r3, r3, #1
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d012      	beq.n	8001918 <menu+0x718>
 80018f2:	4b7b      	ldr	r3, [pc, #492]	; (8001ae0 <menu+0x8e0>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10e      	bne.n	8001918 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 80018fa:	4b7a      	ldr	r3, [pc, #488]	; (8001ae4 <menu+0x8e4>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4b78      	ldr	r3, [pc, #480]	; (8001ae4 <menu+0x8e4>)
 8001904:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001906:	4b77      	ldr	r3, [pc, #476]	; (8001ae4 <menu+0x8e4>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b0a      	cmp	r3, #10
 800190c:	d902      	bls.n	8001914 <menu+0x714>
				hataGostermeSirasi = 0;
 800190e:	4b75      	ldr	r3, [pc, #468]	; (8001ae4 <menu+0x8e4>)
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001914:	f003 f840 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001918:	2104      	movs	r1, #4
 800191a:	486f      	ldr	r0, [pc, #444]	; (8001ad8 <menu+0x8d8>)
 800191c:	f007 fc12 	bl	8009144 <HAL_GPIO_ReadPin>
 8001920:	4603      	mov	r3, r0
 8001922:	2b01      	cmp	r3, #1
 8001924:	d119      	bne.n	800195a <menu+0x75a>
 8001926:	4b6d      	ldr	r3, [pc, #436]	; (8001adc <menu+0x8dc>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	f083 0301 	eor.w	r3, r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d012      	beq.n	800195a <menu+0x75a>
 8001934:	4b6a      	ldr	r3, [pc, #424]	; (8001ae0 <menu+0x8e0>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10e      	bne.n	800195a <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 800193c:	4b69      	ldr	r3, [pc, #420]	; (8001ae4 <menu+0x8e4>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	3b01      	subs	r3, #1
 8001942:	b2da      	uxtb	r2, r3
 8001944:	4b67      	ldr	r3, [pc, #412]	; (8001ae4 <menu+0x8e4>)
 8001946:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001948:	4b66      	ldr	r3, [pc, #408]	; (8001ae4 <menu+0x8e4>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b0b      	cmp	r3, #11
 800194e:	d902      	bls.n	8001956 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001950:	4b64      	ldr	r3, [pc, #400]	; (8001ae4 <menu+0x8e4>)
 8001952:	220a      	movs	r2, #10
 8001954:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001956:	f003 f81f 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 800195a:	2108      	movs	r1, #8
 800195c:	485e      	ldr	r0, [pc, #376]	; (8001ad8 <menu+0x8d8>)
 800195e:	f007 fbf1 	bl	8009144 <HAL_GPIO_ReadPin>
 8001962:	4603      	mov	r3, r0
 8001964:	2b01      	cmp	r3, #1
 8001966:	d153      	bne.n	8001a10 <menu+0x810>
 8001968:	4b5c      	ldr	r3, [pc, #368]	; (8001adc <menu+0x8dc>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	f083 0301 	eor.w	r3, r3, #1
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d04c      	beq.n	8001a10 <menu+0x810>
 8001976:	4b5b      	ldr	r3, [pc, #364]	; (8001ae4 <menu+0x8e4>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b0a      	cmp	r3, #10
 800197c:	d148      	bne.n	8001a10 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 800197e:	4b5a      	ldr	r3, [pc, #360]	; (8001ae8 <menu+0x8e8>)
 8001980:	2200      	movs	r2, #0
 8001982:	701a      	strb	r2, [r3, #0]
 8001984:	4b59      	ldr	r3, [pc, #356]	; (8001aec <menu+0x8ec>)
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 800198c:	4b58      	ldr	r3, [pc, #352]	; (8001af0 <menu+0x8f0>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
 8001992:	4b56      	ldr	r3, [pc, #344]	; (8001aec <menu+0x8ec>)
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 800199a:	4b56      	ldr	r3, [pc, #344]	; (8001af4 <menu+0x8f4>)
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
 80019a0:	4b52      	ldr	r3, [pc, #328]	; (8001aec <menu+0x8ec>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 80019a8:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <menu+0x8f8>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
 80019ae:	4b4f      	ldr	r3, [pc, #316]	; (8001aec <menu+0x8ec>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 80019b6:	4b51      	ldr	r3, [pc, #324]	; (8001afc <menu+0x8fc>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	4b4b      	ldr	r3, [pc, #300]	; (8001aec <menu+0x8ec>)
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 80019c4:	4b4e      	ldr	r3, [pc, #312]	; (8001b00 <menu+0x900>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
 80019ca:	4b48      	ldr	r3, [pc, #288]	; (8001aec <menu+0x8ec>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 80019d2:	4b4c      	ldr	r3, [pc, #304]	; (8001b04 <menu+0x904>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	701a      	strb	r2, [r3, #0]
 80019d8:	4b44      	ldr	r3, [pc, #272]	; (8001aec <menu+0x8ec>)
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 80019e0:	4b49      	ldr	r3, [pc, #292]	; (8001b08 <menu+0x908>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	4b41      	ldr	r3, [pc, #260]	; (8001aec <menu+0x8ec>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 80019ee:	4b47      	ldr	r3, [pc, #284]	; (8001b0c <menu+0x90c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
 80019f4:	4b3d      	ldr	r3, [pc, #244]	; (8001aec <menu+0x8ec>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 80019fc:	4b44      	ldr	r3, [pc, #272]	; (8001b10 <menu+0x910>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
 8001a02:	4b3a      	ldr	r3, [pc, #232]	; (8001aec <menu+0x8ec>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001a0a:	4b42      	ldr	r3, [pc, #264]	; (8001b14 <menu+0x914>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001a10:	4b41      	ldr	r3, [pc, #260]	; (8001b18 <menu+0x918>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	f040 80fc 	bne.w	8001c12 <menu+0xa12>
		if(dilSecim == 0) {
 8001a1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <menu+0x8d0>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d105      	bne.n	8001a2e <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001a22:	4a3e      	ldr	r2, [pc, #248]	; (8001b1c <menu+0x91c>)
 8001a24:	2101      	movs	r1, #1
 8001a26:	2001      	movs	r0, #1
 8001a28:	f006 f866 	bl	8007af8 <lcd_print>
 8001a2c:	e008      	b.n	8001a40 <menu+0x840>
		} else if(dilSecim == 1) {
 8001a2e:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <menu+0x8d0>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d104      	bne.n	8001a40 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001a36:	4a3a      	ldr	r2, [pc, #232]	; (8001b20 <menu+0x920>)
 8001a38:	2101      	movs	r1, #1
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f006 f85c 	bl	8007af8 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001a40:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <menu+0x8e0>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d003      	beq.n	8001a50 <menu+0x850>
 8001a48:	4b25      	ldr	r3, [pc, #148]	; (8001ae0 <menu+0x8e0>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d112      	bne.n	8001a76 <menu+0x876>
			if(dilSecim == 0) {
 8001a50:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <menu+0x8d0>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d105      	bne.n	8001a64 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001a58:	4a32      	ldr	r2, [pc, #200]	; (8001b24 <menu+0x924>)
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	f006 f84b 	bl	8007af8 <lcd_print>
 8001a62:	e008      	b.n	8001a76 <menu+0x876>
			} else if(dilSecim == 1) {
 8001a64:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <menu+0x8d0>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d104      	bne.n	8001a76 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001a6c:	4a2e      	ldr	r2, [pc, #184]	; (8001b28 <menu+0x928>)
 8001a6e:	2101      	movs	r1, #1
 8001a70:	2002      	movs	r0, #2
 8001a72:	f006 f841 	bl	8007af8 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001a76:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <menu+0x92c>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d116      	bne.n	8001aac <menu+0x8ac>
 8001a7e:	4b18      	ldr	r3, [pc, #96]	; (8001ae0 <menu+0x8e0>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d112      	bne.n	8001aac <menu+0x8ac>
			if(dilSecim == 0) {
 8001a86:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <menu+0x8d0>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d105      	bne.n	8001a9a <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001a8e:	4a28      	ldr	r2, [pc, #160]	; (8001b30 <menu+0x930>)
 8001a90:	2101      	movs	r1, #1
 8001a92:	2002      	movs	r0, #2
 8001a94:	f006 f830 	bl	8007af8 <lcd_print>
 8001a98:	e008      	b.n	8001aac <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <menu+0x8d0>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d104      	bne.n	8001aac <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001aa2:	4a24      	ldr	r2, [pc, #144]	; (8001b34 <menu+0x934>)
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	f006 f826 	bl	8007af8 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001aac:	4b1f      	ldr	r3, [pc, #124]	; (8001b2c <menu+0x92c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d14c      	bne.n	8001b4e <menu+0x94e>
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <menu+0x8e0>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d148      	bne.n	8001b4e <menu+0x94e>
			if(dilSecim == 0) {
 8001abc:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <menu+0x8d0>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d13b      	bne.n	8001b3c <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001ac4:	4a1c      	ldr	r2, [pc, #112]	; (8001b38 <menu+0x938>)
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	2002      	movs	r0, #2
 8001aca:	f006 f815 	bl	8007af8 <lcd_print>
 8001ace:	e03e      	b.n	8001b4e <menu+0x94e>
 8001ad0:	2000023d 	.word	0x2000023d
 8001ad4:	0800d084 	.word	0x0800d084
 8001ad8:	40010800 	.word	0x40010800
 8001adc:	2000024b 	.word	0x2000024b
 8001ae0:	2000022b 	.word	0x2000022b
 8001ae4:	2000021e 	.word	0x2000021e
 8001ae8:	2000023e 	.word	0x2000023e
 8001aec:	20000120 	.word	0x20000120
 8001af0:	2000023f 	.word	0x2000023f
 8001af4:	20000240 	.word	0x20000240
 8001af8:	20000241 	.word	0x20000241
 8001afc:	20000242 	.word	0x20000242
 8001b00:	20000243 	.word	0x20000243
 8001b04:	20000244 	.word	0x20000244
 8001b08:	20000245 	.word	0x20000245
 8001b0c:	20000246 	.word	0x20000246
 8001b10:	20000247 	.word	0x20000247
 8001b14:	20000248 	.word	0x20000248
 8001b18:	2000021c 	.word	0x2000021c
 8001b1c:	0800d098 	.word	0x0800d098
 8001b20:	0800d0ac 	.word	0x0800d0ac
 8001b24:	0800d0c0 	.word	0x0800d0c0
 8001b28:	0800d0d4 	.word	0x0800d0d4
 8001b2c:	2000021d 	.word	0x2000021d
 8001b30:	0800d0e8 	.word	0x0800d0e8
 8001b34:	0800d0f8 	.word	0x0800d0f8
 8001b38:	0800d108 	.word	0x0800d108
			} else if(dilSecim == 1) {
 8001b3c:	4b98      	ldr	r3, [pc, #608]	; (8001da0 <menu+0xba0>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d104      	bne.n	8001b4e <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001b44:	4a97      	ldr	r2, [pc, #604]	; (8001da4 <menu+0xba4>)
 8001b46:	2101      	movs	r1, #1
 8001b48:	2002      	movs	r0, #2
 8001b4a:	f005 ffd5 	bl	8007af8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b4e:	2102      	movs	r1, #2
 8001b50:	4895      	ldr	r0, [pc, #596]	; (8001da8 <menu+0xba8>)
 8001b52:	f007 faf7 	bl	8009144 <HAL_GPIO_ReadPin>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d119      	bne.n	8001b90 <menu+0x990>
 8001b5c:	4b93      	ldr	r3, [pc, #588]	; (8001dac <menu+0xbac>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	f083 0301 	eor.w	r3, r3, #1
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d012      	beq.n	8001b90 <menu+0x990>
 8001b6a:	4b91      	ldr	r3, [pc, #580]	; (8001db0 <menu+0xbb0>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10e      	bne.n	8001b90 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001b72:	4b90      	ldr	r3, [pc, #576]	; (8001db4 <menu+0xbb4>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4b8e      	ldr	r3, [pc, #568]	; (8001db4 <menu+0xbb4>)
 8001b7c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001b7e:	4b8d      	ldr	r3, [pc, #564]	; (8001db4 <menu+0xbb4>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d902      	bls.n	8001b8c <menu+0x98c>
				calismaSekli = 0;
 8001b86:	4b8b      	ldr	r3, [pc, #556]	; (8001db4 <menu+0xbb4>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b8c:	f002 ff04 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b90:	2104      	movs	r1, #4
 8001b92:	4885      	ldr	r0, [pc, #532]	; (8001da8 <menu+0xba8>)
 8001b94:	f007 fad6 	bl	8009144 <HAL_GPIO_ReadPin>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d119      	bne.n	8001bd2 <menu+0x9d2>
 8001b9e:	4b83      	ldr	r3, [pc, #524]	; (8001dac <menu+0xbac>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	f083 0301 	eor.w	r3, r3, #1
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d012      	beq.n	8001bd2 <menu+0x9d2>
 8001bac:	4b80      	ldr	r3, [pc, #512]	; (8001db0 <menu+0xbb0>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10e      	bne.n	8001bd2 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001bb4:	4b7f      	ldr	r3, [pc, #508]	; (8001db4 <menu+0xbb4>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	4b7d      	ldr	r3, [pc, #500]	; (8001db4 <menu+0xbb4>)
 8001bbe:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001bc0:	4b7c      	ldr	r3, [pc, #496]	; (8001db4 <menu+0xbb4>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d002      	beq.n	8001bce <menu+0x9ce>
	    		calismaSekli = 1;
 8001bc8:	4b7a      	ldr	r3, [pc, #488]	; (8001db4 <menu+0xbb4>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001bce:	f002 fee3 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bd2:	2108      	movs	r1, #8
 8001bd4:	4874      	ldr	r0, [pc, #464]	; (8001da8 <menu+0xba8>)
 8001bd6:	f007 fab5 	bl	8009144 <HAL_GPIO_ReadPin>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d118      	bne.n	8001c12 <menu+0xa12>
 8001be0:	4b72      	ldr	r3, [pc, #456]	; (8001dac <menu+0xbac>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	f083 0301 	eor.w	r3, r3, #1
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d011      	beq.n	8001c12 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001bee:	4b71      	ldr	r3, [pc, #452]	; (8001db4 <menu+0xbb4>)
 8001bf0:	781a      	ldrb	r2, [r3, #0]
 8001bf2:	4b71      	ldr	r3, [pc, #452]	; (8001db8 <menu+0xbb8>)
 8001bf4:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001bf6:	4b6f      	ldr	r3, [pc, #444]	; (8001db4 <menu+0xbb4>)
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d106      	bne.n	8001c0c <menu+0xa0c>
				altLimit = 1;
 8001bfe:	4b6f      	ldr	r3, [pc, #444]	; (8001dbc <menu+0xbbc>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001c04:	4b6d      	ldr	r3, [pc, #436]	; (8001dbc <menu+0xbbc>)
 8001c06:	781a      	ldrb	r2, [r3, #0]
 8001c08:	4b6b      	ldr	r3, [pc, #428]	; (8001db8 <menu+0xbb8>)
 8001c0a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001c0c:	4b6c      	ldr	r3, [pc, #432]	; (8001dc0 <menu+0xbc0>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001c12:	4b6c      	ldr	r3, [pc, #432]	; (8001dc4 <menu+0xbc4>)
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	f040 8083 	bne.w	8001d22 <menu+0xb22>
		if(dilSecim == 0) {
 8001c1c:	4b60      	ldr	r3, [pc, #384]	; (8001da0 <menu+0xba0>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d105      	bne.n	8001c30 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001c24:	4a68      	ldr	r2, [pc, #416]	; (8001dc8 <menu+0xbc8>)
 8001c26:	2101      	movs	r1, #1
 8001c28:	2001      	movs	r0, #1
 8001c2a:	f005 ff65 	bl	8007af8 <lcd_print>
 8001c2e:	e008      	b.n	8001c42 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001c30:	4b5b      	ldr	r3, [pc, #364]	; (8001da0 <menu+0xba0>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d104      	bne.n	8001c42 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001c38:	4a64      	ldr	r2, [pc, #400]	; (8001dcc <menu+0xbcc>)
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	f005 ff5b 	bl	8007af8 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001c42:	4b63      	ldr	r3, [pc, #396]	; (8001dd0 <menu+0xbd0>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d113      	bne.n	8001c72 <menu+0xa72>
			if(dilSecim == 0) {
 8001c4a:	4b55      	ldr	r3, [pc, #340]	; (8001da0 <menu+0xba0>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d105      	bne.n	8001c5e <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001c52:	4a60      	ldr	r2, [pc, #384]	; (8001dd4 <menu+0xbd4>)
 8001c54:	2101      	movs	r1, #1
 8001c56:	2002      	movs	r0, #2
 8001c58:	f005 ff4e 	bl	8007af8 <lcd_print>
 8001c5c:	e012      	b.n	8001c84 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001c5e:	4b50      	ldr	r3, [pc, #320]	; (8001da0 <menu+0xba0>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d10e      	bne.n	8001c84 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001c66:	4a5c      	ldr	r2, [pc, #368]	; (8001dd8 <menu+0xbd8>)
 8001c68:	2101      	movs	r1, #1
 8001c6a:	2002      	movs	r0, #2
 8001c6c:	f005 ff44 	bl	8007af8 <lcd_print>
 8001c70:	e008      	b.n	8001c84 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001c72:	4b57      	ldr	r3, [pc, #348]	; (8001dd0 <menu+0xbd0>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d104      	bne.n	8001c84 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001c7a:	4a58      	ldr	r2, [pc, #352]	; (8001ddc <menu+0xbdc>)
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	2002      	movs	r0, #2
 8001c80:	f005 ff3a 	bl	8007af8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c84:	2102      	movs	r1, #2
 8001c86:	4848      	ldr	r0, [pc, #288]	; (8001da8 <menu+0xba8>)
 8001c88:	f007 fa5c 	bl	8009144 <HAL_GPIO_ReadPin>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d115      	bne.n	8001cbe <menu+0xabe>
 8001c92:	4b46      	ldr	r3, [pc, #280]	; (8001dac <menu+0xbac>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	f083 0301 	eor.w	r3, r3, #1
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00e      	beq.n	8001cbe <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001ca0:	4b4b      	ldr	r3, [pc, #300]	; (8001dd0 <menu+0xbd0>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	4b49      	ldr	r3, [pc, #292]	; (8001dd0 <menu+0xbd0>)
 8001caa:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001cac:	4b48      	ldr	r3, [pc, #288]	; (8001dd0 <menu+0xbd0>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d902      	bls.n	8001cba <menu+0xaba>
				emniyetCercevesi = 0;
 8001cb4:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <menu+0xbd0>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cba:	f002 fe6d 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cbe:	2104      	movs	r1, #4
 8001cc0:	4839      	ldr	r0, [pc, #228]	; (8001da8 <menu+0xba8>)
 8001cc2:	f007 fa3f 	bl	8009144 <HAL_GPIO_ReadPin>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d115      	bne.n	8001cf8 <menu+0xaf8>
 8001ccc:	4b37      	ldr	r3, [pc, #220]	; (8001dac <menu+0xbac>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	f083 0301 	eor.w	r3, r3, #1
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00e      	beq.n	8001cf8 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001cda:	4b3d      	ldr	r3, [pc, #244]	; (8001dd0 <menu+0xbd0>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4b3b      	ldr	r3, [pc, #236]	; (8001dd0 <menu+0xbd0>)
 8001ce4:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001ce6:	4b3a      	ldr	r3, [pc, #232]	; (8001dd0 <menu+0xbd0>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001cee:	4b38      	ldr	r3, [pc, #224]	; (8001dd0 <menu+0xbd0>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001cf4:	f002 fe50 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001cf8:	2108      	movs	r1, #8
 8001cfa:	482b      	ldr	r0, [pc, #172]	; (8001da8 <menu+0xba8>)
 8001cfc:	f007 fa22 	bl	8009144 <HAL_GPIO_ReadPin>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d10d      	bne.n	8001d22 <menu+0xb22>
 8001d06:	4b29      	ldr	r3, [pc, #164]	; (8001dac <menu+0xbac>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	f083 0301 	eor.w	r3, r3, #1
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d006      	beq.n	8001d22 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001d14:	4b2e      	ldr	r3, [pc, #184]	; (8001dd0 <menu+0xbd0>)
 8001d16:	781a      	ldrb	r2, [r3, #0]
 8001d18:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <menu+0xbb8>)
 8001d1a:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001d1c:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <menu+0xbc0>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001d22:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <menu+0xbc4>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	f040 80ba 	bne.w	8001ea0 <menu+0xca0>
		if(dilSecim == 0) {
 8001d2c:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <menu+0xba0>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d105      	bne.n	8001d40 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001d34:	4a2a      	ldr	r2, [pc, #168]	; (8001de0 <menu+0xbe0>)
 8001d36:	2101      	movs	r1, #1
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f005 fedd 	bl	8007af8 <lcd_print>
 8001d3e:	e008      	b.n	8001d52 <menu+0xb52>
		} else if(dilSecim == 1) {
 8001d40:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <menu+0xba0>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d104      	bne.n	8001d52 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001d48:	4a26      	ldr	r2, [pc, #152]	; (8001de4 <menu+0xbe4>)
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f005 fed3 	bl	8007af8 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001d52:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <menu+0xbe8>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d113      	bne.n	8001d82 <menu+0xb82>
			if(dilSecim == 0) {
 8001d5a:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <menu+0xba0>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d105      	bne.n	8001d6e <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8001d62:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <menu+0xbd4>)
 8001d64:	2101      	movs	r1, #1
 8001d66:	2002      	movs	r0, #2
 8001d68:	f005 fec6 	bl	8007af8 <lcd_print>
 8001d6c:	e049      	b.n	8001e02 <menu+0xc02>
			} else if(dilSecim == 1) {
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <menu+0xba0>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d145      	bne.n	8001e02 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8001d76:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <menu+0xbd8>)
 8001d78:	2101      	movs	r1, #1
 8001d7a:	2002      	movs	r0, #2
 8001d7c:	f005 febc 	bl	8007af8 <lcd_print>
 8001d80:	e03f      	b.n	8001e02 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8001d82:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <menu+0xbe8>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d13b      	bne.n	8001e02 <menu+0xc02>
			if(dilSecim == 0) {
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <menu+0xba0>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d12e      	bne.n	8001df0 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8001d92:	4a16      	ldr	r2, [pc, #88]	; (8001dec <menu+0xbec>)
 8001d94:	2101      	movs	r1, #1
 8001d96:	2002      	movs	r0, #2
 8001d98:	f005 feae 	bl	8007af8 <lcd_print>
 8001d9c:	e031      	b.n	8001e02 <menu+0xc02>
 8001d9e:	bf00      	nop
 8001da0:	2000023d 	.word	0x2000023d
 8001da4:	0800d118 	.word	0x0800d118
 8001da8:	40010800 	.word	0x40010800
 8001dac:	2000024b 	.word	0x2000024b
 8001db0:	2000022b 	.word	0x2000022b
 8001db4:	2000021d 	.word	0x2000021d
 8001db8:	20000120 	.word	0x20000120
 8001dbc:	20000222 	.word	0x20000222
 8001dc0:	20000248 	.word	0x20000248
 8001dc4:	2000021c 	.word	0x2000021c
 8001dc8:	0800d128 	.word	0x0800d128
 8001dcc:	0800d13c 	.word	0x0800d13c
 8001dd0:	20000220 	.word	0x20000220
 8001dd4:	0800d150 	.word	0x0800d150
 8001dd8:	0800d164 	.word	0x0800d164
 8001ddc:	0800d178 	.word	0x0800d178
 8001de0:	0800d188 	.word	0x0800d188
 8001de4:	0800d19c 	.word	0x0800d19c
 8001de8:	20000221 	.word	0x20000221
 8001dec:	0800d1b0 	.word	0x0800d1b0
			} else if(dilSecim == 1) {
 8001df0:	4b92      	ldr	r3, [pc, #584]	; (800203c <menu+0xe3c>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d104      	bne.n	8001e02 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 8001df8:	4a91      	ldr	r2, [pc, #580]	; (8002040 <menu+0xe40>)
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	2002      	movs	r0, #2
 8001dfe:	f005 fe7b 	bl	8007af8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e02:	2102      	movs	r1, #2
 8001e04:	488f      	ldr	r0, [pc, #572]	; (8002044 <menu+0xe44>)
 8001e06:	f007 f99d 	bl	8009144 <HAL_GPIO_ReadPin>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d115      	bne.n	8001e3c <menu+0xc3c>
 8001e10:	4b8d      	ldr	r3, [pc, #564]	; (8002048 <menu+0xe48>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	f083 0301 	eor.w	r3, r3, #1
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00e      	beq.n	8001e3c <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001e1e:	4b8b      	ldr	r3, [pc, #556]	; (800204c <menu+0xe4c>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	3301      	adds	r3, #1
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	4b89      	ldr	r3, [pc, #548]	; (800204c <menu+0xe4c>)
 8001e28:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001e2a:	4b88      	ldr	r3, [pc, #544]	; (800204c <menu+0xe4c>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d902      	bls.n	8001e38 <menu+0xc38>
				yavaslamaLimit = 0;
 8001e32:	4b86      	ldr	r3, [pc, #536]	; (800204c <menu+0xe4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e38:	f002 fdae 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e3c:	2104      	movs	r1, #4
 8001e3e:	4881      	ldr	r0, [pc, #516]	; (8002044 <menu+0xe44>)
 8001e40:	f007 f980 	bl	8009144 <HAL_GPIO_ReadPin>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d115      	bne.n	8001e76 <menu+0xc76>
 8001e4a:	4b7f      	ldr	r3, [pc, #508]	; (8002048 <menu+0xe48>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	f083 0301 	eor.w	r3, r3, #1
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00e      	beq.n	8001e76 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001e58:	4b7c      	ldr	r3, [pc, #496]	; (800204c <menu+0xe4c>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	4b7a      	ldr	r3, [pc, #488]	; (800204c <menu+0xe4c>)
 8001e62:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001e64:	4b79      	ldr	r3, [pc, #484]	; (800204c <menu+0xe4c>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001e6c:	4b77      	ldr	r3, [pc, #476]	; (800204c <menu+0xe4c>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e72:	f002 fd91 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e76:	2108      	movs	r1, #8
 8001e78:	4872      	ldr	r0, [pc, #456]	; (8002044 <menu+0xe44>)
 8001e7a:	f007 f963 	bl	8009144 <HAL_GPIO_ReadPin>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d10d      	bne.n	8001ea0 <menu+0xca0>
 8001e84:	4b70      	ldr	r3, [pc, #448]	; (8002048 <menu+0xe48>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	f083 0301 	eor.w	r3, r3, #1
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d006      	beq.n	8001ea0 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8001e92:	4b6e      	ldr	r3, [pc, #440]	; (800204c <menu+0xe4c>)
 8001e94:	781a      	ldrb	r2, [r3, #0]
 8001e96:	4b6e      	ldr	r3, [pc, #440]	; (8002050 <menu+0xe50>)
 8001e98:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001e9a:	4b6e      	ldr	r3, [pc, #440]	; (8002054 <menu+0xe54>)
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001ea0:	4b6d      	ldr	r3, [pc, #436]	; (8002058 <menu+0xe58>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b05      	cmp	r3, #5
 8001ea6:	f040 80b9 	bne.w	800201c <menu+0xe1c>
		if(dilSecim == 0) {
 8001eaa:	4b64      	ldr	r3, [pc, #400]	; (800203c <menu+0xe3c>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d105      	bne.n	8001ebe <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8001eb2:	4a6a      	ldr	r2, [pc, #424]	; (800205c <menu+0xe5c>)
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	2001      	movs	r0, #1
 8001eb8:	f005 fe1e 	bl	8007af8 <lcd_print>
 8001ebc:	e008      	b.n	8001ed0 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001ebe:	4b5f      	ldr	r3, [pc, #380]	; (800203c <menu+0xe3c>)
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d104      	bne.n	8001ed0 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8001ec6:	4a66      	ldr	r2, [pc, #408]	; (8002060 <menu+0xe60>)
 8001ec8:	2101      	movs	r1, #1
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f005 fe14 	bl	8007af8 <lcd_print>
		}

		if(altLimit == 0) {
 8001ed0:	4b64      	ldr	r3, [pc, #400]	; (8002064 <menu+0xe64>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d113      	bne.n	8001f00 <menu+0xd00>
			if(dilSecim == 0) {
 8001ed8:	4b58      	ldr	r3, [pc, #352]	; (800203c <menu+0xe3c>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d105      	bne.n	8001eec <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8001ee0:	4a61      	ldr	r2, [pc, #388]	; (8002068 <menu+0xe68>)
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	2002      	movs	r0, #2
 8001ee6:	f005 fe07 	bl	8007af8 <lcd_print>
 8001eea:	e020      	b.n	8001f2e <menu+0xd2e>
			} else if(dilSecim == 1) {
 8001eec:	4b53      	ldr	r3, [pc, #332]	; (800203c <menu+0xe3c>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d11c      	bne.n	8001f2e <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8001ef4:	4a5d      	ldr	r2, [pc, #372]	; (800206c <menu+0xe6c>)
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	2002      	movs	r0, #2
 8001efa:	f005 fdfd 	bl	8007af8 <lcd_print>
 8001efe:	e016      	b.n	8001f2e <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8001f00:	4b58      	ldr	r3, [pc, #352]	; (8002064 <menu+0xe64>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d112      	bne.n	8001f2e <menu+0xd2e>
			if(dilSecim == 0){
 8001f08:	4b4c      	ldr	r3, [pc, #304]	; (800203c <menu+0xe3c>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d105      	bne.n	8001f1c <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8001f10:	4a57      	ldr	r2, [pc, #348]	; (8002070 <menu+0xe70>)
 8001f12:	2101      	movs	r1, #1
 8001f14:	2002      	movs	r0, #2
 8001f16:	f005 fdef 	bl	8007af8 <lcd_print>
 8001f1a:	e008      	b.n	8001f2e <menu+0xd2e>
			} else if(dilSecim == 1){
 8001f1c:	4b47      	ldr	r3, [pc, #284]	; (800203c <menu+0xe3c>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d104      	bne.n	8001f2e <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8001f24:	4a46      	ldr	r2, [pc, #280]	; (8002040 <menu+0xe40>)
 8001f26:	2101      	movs	r1, #1
 8001f28:	2002      	movs	r0, #2
 8001f2a:	f005 fde5 	bl	8007af8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001f2e:	2102      	movs	r1, #2
 8001f30:	4844      	ldr	r0, [pc, #272]	; (8002044 <menu+0xe44>)
 8001f32:	f007 f907 	bl	8009144 <HAL_GPIO_ReadPin>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d119      	bne.n	8001f70 <menu+0xd70>
 8001f3c:	4b42      	ldr	r3, [pc, #264]	; (8002048 <menu+0xe48>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	f083 0301 	eor.w	r3, r3, #1
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d012      	beq.n	8001f70 <menu+0xd70>
 8001f4a:	4b4a      	ldr	r3, [pc, #296]	; (8002074 <menu+0xe74>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10e      	bne.n	8001f70 <menu+0xd70>
			altLimit = altLimit + 1;
 8001f52:	4b44      	ldr	r3, [pc, #272]	; (8002064 <menu+0xe64>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	3301      	adds	r3, #1
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4b42      	ldr	r3, [pc, #264]	; (8002064 <menu+0xe64>)
 8001f5c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001f5e:	4b41      	ldr	r3, [pc, #260]	; (8002064 <menu+0xe64>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d902      	bls.n	8001f6c <menu+0xd6c>
				altLimit = 0;
 8001f66:	4b3f      	ldr	r3, [pc, #252]	; (8002064 <menu+0xe64>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f6c:	f002 fd14 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001f70:	2104      	movs	r1, #4
 8001f72:	4834      	ldr	r0, [pc, #208]	; (8002044 <menu+0xe44>)
 8001f74:	f007 f8e6 	bl	8009144 <HAL_GPIO_ReadPin>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d119      	bne.n	8001fb2 <menu+0xdb2>
 8001f7e:	4b32      	ldr	r3, [pc, #200]	; (8002048 <menu+0xe48>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	f083 0301 	eor.w	r3, r3, #1
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d012      	beq.n	8001fb2 <menu+0xdb2>
 8001f8c:	4b39      	ldr	r3, [pc, #228]	; (8002074 <menu+0xe74>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10e      	bne.n	8001fb2 <menu+0xdb2>
			altLimit = altLimit - 1;
 8001f94:	4b33      	ldr	r3, [pc, #204]	; (8002064 <menu+0xe64>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	4b31      	ldr	r3, [pc, #196]	; (8002064 <menu+0xe64>)
 8001f9e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001fa0:	4b30      	ldr	r3, [pc, #192]	; (8002064 <menu+0xe64>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <menu+0xdae>
		   		altLimit = 1;
 8001fa8:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <menu+0xe64>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001fae:	f002 fcf3 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fb2:	2108      	movs	r1, #8
 8001fb4:	4823      	ldr	r0, [pc, #140]	; (8002044 <menu+0xe44>)
 8001fb6:	f007 f8c5 	bl	8009144 <HAL_GPIO_ReadPin>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d12d      	bne.n	800201c <menu+0xe1c>
 8001fc0:	4b21      	ldr	r3, [pc, #132]	; (8002048 <menu+0xe48>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	f083 0301 	eor.w	r3, r3, #1
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d026      	beq.n	800201c <menu+0xe1c>
			eepromData[5] = altLimit;
 8001fce:	4b25      	ldr	r3, [pc, #148]	; (8002064 <menu+0xe64>)
 8001fd0:	781a      	ldrb	r2, [r3, #0]
 8001fd2:	4b1f      	ldr	r3, [pc, #124]	; (8002050 <menu+0xe50>)
 8001fd4:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001fd6:	4b23      	ldr	r3, [pc, #140]	; (8002064 <menu+0xe64>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d110      	bne.n	8002000 <menu+0xe00>
 8001fde:	4b26      	ldr	r3, [pc, #152]	; (8002078 <menu+0xe78>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <menu+0xdee>
 8001fe6:	4b24      	ldr	r3, [pc, #144]	; (8002078 <menu+0xe78>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d108      	bne.n	8002000 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8001fee:	4b22      	ldr	r3, [pc, #136]	; (8002078 <menu+0xe78>)
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001ff4:	4b20      	ldr	r3, [pc, #128]	; (8002078 <menu+0xe78>)
 8001ff6:	781a      	ldrb	r2, [r3, #0]
 8001ff8:	4b15      	ldr	r3, [pc, #84]	; (8002050 <menu+0xe50>)
 8001ffa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001ffe:	e00a      	b.n	8002016 <menu+0xe16>
			} else if(altLimit == 0) {
 8002000:	4b18      	ldr	r3, [pc, #96]	; (8002064 <menu+0xe64>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d106      	bne.n	8002016 <menu+0xe16>
				platformSilindirTipi = 0;
 8002008:	4b1c      	ldr	r3, [pc, #112]	; (800207c <menu+0xe7c>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <menu+0xe7c>)
 8002010:	781a      	ldrb	r2, [r3, #0]
 8002012:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <menu+0xe50>)
 8002014:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <menu+0xe54>)
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 800201c:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <menu+0xe58>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	2b06      	cmp	r3, #6
 8002022:	f040 80b6 	bne.w	8002192 <menu+0xf92>
		if(dilSecim == 0) {
 8002026:	4b05      	ldr	r3, [pc, #20]	; (800203c <menu+0xe3c>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d12a      	bne.n	8002084 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 800202e:	4a14      	ldr	r2, [pc, #80]	; (8002080 <menu+0xe80>)
 8002030:	2101      	movs	r1, #1
 8002032:	2001      	movs	r0, #1
 8002034:	f005 fd60 	bl	8007af8 <lcd_print>
 8002038:	e02d      	b.n	8002096 <menu+0xe96>
 800203a:	bf00      	nop
 800203c:	2000023d 	.word	0x2000023d
 8002040:	0800d1c4 	.word	0x0800d1c4
 8002044:	40010800 	.word	0x40010800
 8002048:	2000024b 	.word	0x2000024b
 800204c:	20000221 	.word	0x20000221
 8002050:	20000120 	.word	0x20000120
 8002054:	20000248 	.word	0x20000248
 8002058:	2000021c 	.word	0x2000021c
 800205c:	0800d1d8 	.word	0x0800d1d8
 8002060:	0800d1ec 	.word	0x0800d1ec
 8002064:	20000222 	.word	0x20000222
 8002068:	0800d150 	.word	0x0800d150
 800206c:	0800d164 	.word	0x0800d164
 8002070:	0800d1b0 	.word	0x0800d1b0
 8002074:	2000021d 	.word	0x2000021d
 8002078:	20000229 	.word	0x20000229
 800207c:	2000022f 	.word	0x2000022f
 8002080:	0800d200 	.word	0x0800d200
		} else if(dilSecim == 1){
 8002084:	4b7a      	ldr	r3, [pc, #488]	; (8002270 <menu+0x1070>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d104      	bne.n	8002096 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800208c:	4a79      	ldr	r2, [pc, #484]	; (8002274 <menu+0x1074>)
 800208e:	2101      	movs	r1, #1
 8002090:	2001      	movs	r0, #1
 8002092:	f005 fd31 	bl	8007af8 <lcd_print>
		}
		if(basincSalteri == 0){
 8002096:	4b78      	ldr	r3, [pc, #480]	; (8002278 <menu+0x1078>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d113      	bne.n	80020c6 <menu+0xec6>
			if(dilSecim == 0) {
 800209e:	4b74      	ldr	r3, [pc, #464]	; (8002270 <menu+0x1070>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d105      	bne.n	80020b2 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80020a6:	4a75      	ldr	r2, [pc, #468]	; (800227c <menu+0x107c>)
 80020a8:	2101      	movs	r1, #1
 80020aa:	2002      	movs	r0, #2
 80020ac:	f005 fd24 	bl	8007af8 <lcd_print>
 80020b0:	e020      	b.n	80020f4 <menu+0xef4>
			} else if(dilSecim == 1){
 80020b2:	4b6f      	ldr	r3, [pc, #444]	; (8002270 <menu+0x1070>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d11c      	bne.n	80020f4 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 80020ba:	4a71      	ldr	r2, [pc, #452]	; (8002280 <menu+0x1080>)
 80020bc:	2101      	movs	r1, #1
 80020be:	2002      	movs	r0, #2
 80020c0:	f005 fd1a 	bl	8007af8 <lcd_print>
 80020c4:	e016      	b.n	80020f4 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 80020c6:	4b6c      	ldr	r3, [pc, #432]	; (8002278 <menu+0x1078>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d112      	bne.n	80020f4 <menu+0xef4>
			if(dilSecim == 0) {
 80020ce:	4b68      	ldr	r3, [pc, #416]	; (8002270 <menu+0x1070>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d105      	bne.n	80020e2 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 80020d6:	4a6b      	ldr	r2, [pc, #428]	; (8002284 <menu+0x1084>)
 80020d8:	2101      	movs	r1, #1
 80020da:	2002      	movs	r0, #2
 80020dc:	f005 fd0c 	bl	8007af8 <lcd_print>
 80020e0:	e008      	b.n	80020f4 <menu+0xef4>
			} else if(dilSecim == 1) {
 80020e2:	4b63      	ldr	r3, [pc, #396]	; (8002270 <menu+0x1070>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d104      	bne.n	80020f4 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 80020ea:	4a67      	ldr	r2, [pc, #412]	; (8002288 <menu+0x1088>)
 80020ec:	2101      	movs	r1, #1
 80020ee:	2002      	movs	r0, #2
 80020f0:	f005 fd02 	bl	8007af8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80020f4:	2102      	movs	r1, #2
 80020f6:	4865      	ldr	r0, [pc, #404]	; (800228c <menu+0x108c>)
 80020f8:	f007 f824 	bl	8009144 <HAL_GPIO_ReadPin>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d115      	bne.n	800212e <menu+0xf2e>
 8002102:	4b63      	ldr	r3, [pc, #396]	; (8002290 <menu+0x1090>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	f083 0301 	eor.w	r3, r3, #1
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00e      	beq.n	800212e <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002110:	4b59      	ldr	r3, [pc, #356]	; (8002278 <menu+0x1078>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	b2da      	uxtb	r2, r3
 8002118:	4b57      	ldr	r3, [pc, #348]	; (8002278 <menu+0x1078>)
 800211a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 800211c:	4b56      	ldr	r3, [pc, #344]	; (8002278 <menu+0x1078>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d902      	bls.n	800212a <menu+0xf2a>
				basincSalteri = 0;
 8002124:	4b54      	ldr	r3, [pc, #336]	; (8002278 <menu+0x1078>)
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800212a:	f002 fc35 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800212e:	2104      	movs	r1, #4
 8002130:	4856      	ldr	r0, [pc, #344]	; (800228c <menu+0x108c>)
 8002132:	f007 f807 	bl	8009144 <HAL_GPIO_ReadPin>
 8002136:	4603      	mov	r3, r0
 8002138:	2b01      	cmp	r3, #1
 800213a:	d115      	bne.n	8002168 <menu+0xf68>
 800213c:	4b54      	ldr	r3, [pc, #336]	; (8002290 <menu+0x1090>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	f083 0301 	eor.w	r3, r3, #1
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00e      	beq.n	8002168 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800214a:	4b4b      	ldr	r3, [pc, #300]	; (8002278 <menu+0x1078>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	3b01      	subs	r3, #1
 8002150:	b2da      	uxtb	r2, r3
 8002152:	4b49      	ldr	r3, [pc, #292]	; (8002278 <menu+0x1078>)
 8002154:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002156:	4b48      	ldr	r3, [pc, #288]	; (8002278 <menu+0x1078>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d002      	beq.n	8002164 <menu+0xf64>
		   		basincSalteri = 1;
 800215e:	4b46      	ldr	r3, [pc, #280]	; (8002278 <menu+0x1078>)
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002164:	f002 fc18 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002168:	2108      	movs	r1, #8
 800216a:	4848      	ldr	r0, [pc, #288]	; (800228c <menu+0x108c>)
 800216c:	f006 ffea 	bl	8009144 <HAL_GPIO_ReadPin>
 8002170:	4603      	mov	r3, r0
 8002172:	2b01      	cmp	r3, #1
 8002174:	d10d      	bne.n	8002192 <menu+0xf92>
 8002176:	4b46      	ldr	r3, [pc, #280]	; (8002290 <menu+0x1090>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	f083 0301 	eor.w	r3, r3, #1
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d006      	beq.n	8002192 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002184:	4b3c      	ldr	r3, [pc, #240]	; (8002278 <menu+0x1078>)
 8002186:	781a      	ldrb	r2, [r3, #0]
 8002188:	4b42      	ldr	r3, [pc, #264]	; (8002294 <menu+0x1094>)
 800218a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800218c:	4b42      	ldr	r3, [pc, #264]	; (8002298 <menu+0x1098>)
 800218e:	2201      	movs	r2, #1
 8002190:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002192:	4b42      	ldr	r3, [pc, #264]	; (800229c <menu+0x109c>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b07      	cmp	r3, #7
 8002198:	f040 80f5 	bne.w	8002386 <menu+0x1186>
		if(dilSecim == 0) {
 800219c:	4b34      	ldr	r3, [pc, #208]	; (8002270 <menu+0x1070>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d105      	bne.n	80021b0 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80021a4:	4a3e      	ldr	r2, [pc, #248]	; (80022a0 <menu+0x10a0>)
 80021a6:	2101      	movs	r1, #1
 80021a8:	2001      	movs	r0, #1
 80021aa:	f005 fca5 	bl	8007af8 <lcd_print>
 80021ae:	e008      	b.n	80021c2 <menu+0xfc2>
		} else if(dilSecim == 1){
 80021b0:	4b2f      	ldr	r3, [pc, #188]	; (8002270 <menu+0x1070>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d104      	bne.n	80021c2 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80021b8:	4a3a      	ldr	r2, [pc, #232]	; (80022a4 <menu+0x10a4>)
 80021ba:	2101      	movs	r1, #1
 80021bc:	2001      	movs	r0, #1
 80021be:	f005 fc9b 	bl	8007af8 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80021c2:	4b39      	ldr	r3, [pc, #228]	; (80022a8 <menu+0x10a8>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d113      	bne.n	80021f2 <menu+0xff2>
			if(dilSecim == 0) {
 80021ca:	4b29      	ldr	r3, [pc, #164]	; (8002270 <menu+0x1070>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d105      	bne.n	80021de <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 80021d2:	4a2a      	ldr	r2, [pc, #168]	; (800227c <menu+0x107c>)
 80021d4:	2101      	movs	r1, #1
 80021d6:	2002      	movs	r0, #2
 80021d8:	f005 fc8e 	bl	8007af8 <lcd_print>
 80021dc:	e079      	b.n	80022d2 <menu+0x10d2>
			} else if(dilSecim == 1){
 80021de:	4b24      	ldr	r3, [pc, #144]	; (8002270 <menu+0x1070>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d175      	bne.n	80022d2 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 80021e6:	4a26      	ldr	r2, [pc, #152]	; (8002280 <menu+0x1080>)
 80021e8:	2101      	movs	r1, #1
 80021ea:	2002      	movs	r0, #2
 80021ec:	f005 fc84 	bl	8007af8 <lcd_print>
 80021f0:	e06f      	b.n	80022d2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80021f2:	4b2d      	ldr	r3, [pc, #180]	; (80022a8 <menu+0x10a8>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d113      	bne.n	8002222 <menu+0x1022>
			if(dilSecim == 0) {
 80021fa:	4b1d      	ldr	r3, [pc, #116]	; (8002270 <menu+0x1070>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d105      	bne.n	800220e <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002202:	4a2a      	ldr	r2, [pc, #168]	; (80022ac <menu+0x10ac>)
 8002204:	2101      	movs	r1, #1
 8002206:	2002      	movs	r0, #2
 8002208:	f005 fc76 	bl	8007af8 <lcd_print>
 800220c:	e061      	b.n	80022d2 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800220e:	4b18      	ldr	r3, [pc, #96]	; (8002270 <menu+0x1070>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d15d      	bne.n	80022d2 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 8002216:	4a26      	ldr	r2, [pc, #152]	; (80022b0 <menu+0x10b0>)
 8002218:	2101      	movs	r1, #1
 800221a:	2002      	movs	r0, #2
 800221c:	f005 fc6c 	bl	8007af8 <lcd_print>
 8002220:	e057      	b.n	80022d2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 8002222:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <menu+0x10a8>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d113      	bne.n	8002252 <menu+0x1052>
			if(dilSecim == 0) {
 800222a:	4b11      	ldr	r3, [pc, #68]	; (8002270 <menu+0x1070>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d105      	bne.n	800223e <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002232:	4a20      	ldr	r2, [pc, #128]	; (80022b4 <menu+0x10b4>)
 8002234:	2101      	movs	r1, #1
 8002236:	2002      	movs	r0, #2
 8002238:	f005 fc5e 	bl	8007af8 <lcd_print>
 800223c:	e049      	b.n	80022d2 <menu+0x10d2>
			} else if(dilSecim == 1) {
 800223e:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <menu+0x1070>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d145      	bne.n	80022d2 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 8002246:	4a1c      	ldr	r2, [pc, #112]	; (80022b8 <menu+0x10b8>)
 8002248:	2101      	movs	r1, #1
 800224a:	2002      	movs	r0, #2
 800224c:	f005 fc54 	bl	8007af8 <lcd_print>
 8002250:	e03f      	b.n	80022d2 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002252:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <menu+0x10a8>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d13b      	bne.n	80022d2 <menu+0x10d2>
			if(dilSecim == 0) {
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <menu+0x1070>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d12e      	bne.n	80022c0 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002262:	4a16      	ldr	r2, [pc, #88]	; (80022bc <menu+0x10bc>)
 8002264:	2101      	movs	r1, #1
 8002266:	2002      	movs	r0, #2
 8002268:	f005 fc46 	bl	8007af8 <lcd_print>
 800226c:	e031      	b.n	80022d2 <menu+0x10d2>
 800226e:	bf00      	nop
 8002270:	2000023d 	.word	0x2000023d
 8002274:	0800d210 	.word	0x0800d210
 8002278:	20000223 	.word	0x20000223
 800227c:	0800d150 	.word	0x0800d150
 8002280:	0800d164 	.word	0x0800d164
 8002284:	0800d1b0 	.word	0x0800d1b0
 8002288:	0800d1c4 	.word	0x0800d1c4
 800228c:	40010800 	.word	0x40010800
 8002290:	2000024b 	.word	0x2000024b
 8002294:	20000120 	.word	0x20000120
 8002298:	20000248 	.word	0x20000248
 800229c:	2000021c 	.word	0x2000021c
 80022a0:	0800d220 	.word	0x0800d220
 80022a4:	0800d234 	.word	0x0800d234
 80022a8:	20000224 	.word	0x20000224
 80022ac:	0800d248 	.word	0x0800d248
 80022b0:	0800d25c 	.word	0x0800d25c
 80022b4:	0800d270 	.word	0x0800d270
 80022b8:	0800d284 	.word	0x0800d284
 80022bc:	0800d298 	.word	0x0800d298
			} else if(dilSecim == 1){
 80022c0:	4b99      	ldr	r3, [pc, #612]	; (8002528 <menu+0x1328>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d104      	bne.n	80022d2 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80022c8:	4a98      	ldr	r2, [pc, #608]	; (800252c <menu+0x132c>)
 80022ca:	2101      	movs	r1, #1
 80022cc:	2002      	movs	r0, #2
 80022ce:	f005 fc13 	bl	8007af8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80022d2:	2102      	movs	r1, #2
 80022d4:	4896      	ldr	r0, [pc, #600]	; (8002530 <menu+0x1330>)
 80022d6:	f006 ff35 	bl	8009144 <HAL_GPIO_ReadPin>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d115      	bne.n	800230c <menu+0x110c>
 80022e0:	4b94      	ldr	r3, [pc, #592]	; (8002534 <menu+0x1334>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	f083 0301 	eor.w	r3, r3, #1
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00e      	beq.n	800230c <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80022ee:	4b92      	ldr	r3, [pc, #584]	; (8002538 <menu+0x1338>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4b90      	ldr	r3, [pc, #576]	; (8002538 <menu+0x1338>)
 80022f8:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80022fa:	4b8f      	ldr	r3, [pc, #572]	; (8002538 <menu+0x1338>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b03      	cmp	r3, #3
 8002300:	d902      	bls.n	8002308 <menu+0x1108>
				kapiSecimleri = 0;
 8002302:	4b8d      	ldr	r3, [pc, #564]	; (8002538 <menu+0x1338>)
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002308:	f002 fb46 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800230c:	2104      	movs	r1, #4
 800230e:	4888      	ldr	r0, [pc, #544]	; (8002530 <menu+0x1330>)
 8002310:	f006 ff18 	bl	8009144 <HAL_GPIO_ReadPin>
 8002314:	4603      	mov	r3, r0
 8002316:	2b01      	cmp	r3, #1
 8002318:	d115      	bne.n	8002346 <menu+0x1146>
 800231a:	4b86      	ldr	r3, [pc, #536]	; (8002534 <menu+0x1334>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	f083 0301 	eor.w	r3, r3, #1
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00e      	beq.n	8002346 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 8002328:	4b83      	ldr	r3, [pc, #524]	; (8002538 <menu+0x1338>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	3b01      	subs	r3, #1
 800232e:	b2da      	uxtb	r2, r3
 8002330:	4b81      	ldr	r3, [pc, #516]	; (8002538 <menu+0x1338>)
 8002332:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002334:	4b80      	ldr	r3, [pc, #512]	; (8002538 <menu+0x1338>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b04      	cmp	r3, #4
 800233a:	d902      	bls.n	8002342 <menu+0x1142>
		   		kapiSecimleri = 3;
 800233c:	4b7e      	ldr	r3, [pc, #504]	; (8002538 <menu+0x1338>)
 800233e:	2203      	movs	r2, #3
 8002340:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002342:	f002 fb29 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002346:	2108      	movs	r1, #8
 8002348:	4879      	ldr	r0, [pc, #484]	; (8002530 <menu+0x1330>)
 800234a:	f006 fefb 	bl	8009144 <HAL_GPIO_ReadPin>
 800234e:	4603      	mov	r3, r0
 8002350:	2b01      	cmp	r3, #1
 8002352:	d118      	bne.n	8002386 <menu+0x1186>
 8002354:	4b77      	ldr	r3, [pc, #476]	; (8002534 <menu+0x1334>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	f083 0301 	eor.w	r3, r3, #1
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d011      	beq.n	8002386 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002362:	4b75      	ldr	r3, [pc, #468]	; (8002538 <menu+0x1338>)
 8002364:	781a      	ldrb	r2, [r3, #0]
 8002366:	4b75      	ldr	r3, [pc, #468]	; (800253c <menu+0x133c>)
 8002368:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800236a:	4b73      	ldr	r3, [pc, #460]	; (8002538 <menu+0x1338>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d006      	beq.n	8002380 <menu+0x1180>
				altLimit = 1;
 8002372:	4b73      	ldr	r3, [pc, #460]	; (8002540 <menu+0x1340>)
 8002374:	2201      	movs	r2, #1
 8002376:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002378:	4b71      	ldr	r3, [pc, #452]	; (8002540 <menu+0x1340>)
 800237a:	781a      	ldrb	r2, [r3, #0]
 800237c:	4b6f      	ldr	r3, [pc, #444]	; (800253c <menu+0x133c>)
 800237e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002380:	4b70      	ldr	r3, [pc, #448]	; (8002544 <menu+0x1344>)
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002386:	4b70      	ldr	r3, [pc, #448]	; (8002548 <menu+0x1348>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b08      	cmp	r3, #8
 800238c:	f040 8092 	bne.w	80024b4 <menu+0x12b4>
		if(dilSecim == 0) {
 8002390:	4b65      	ldr	r3, [pc, #404]	; (8002528 <menu+0x1328>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d105      	bne.n	80023a4 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002398:	4a6c      	ldr	r2, [pc, #432]	; (800254c <menu+0x134c>)
 800239a:	2101      	movs	r1, #1
 800239c:	2001      	movs	r0, #1
 800239e:	f005 fbab 	bl	8007af8 <lcd_print>
 80023a2:	e008      	b.n	80023b6 <menu+0x11b6>
		} else if(dilSecim == 1) {
 80023a4:	4b60      	ldr	r3, [pc, #384]	; (8002528 <menu+0x1328>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d104      	bne.n	80023b6 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 80023ac:	4a68      	ldr	r2, [pc, #416]	; (8002550 <menu+0x1350>)
 80023ae:	2101      	movs	r1, #1
 80023b0:	2001      	movs	r0, #1
 80023b2:	f005 fba1 	bl	8007af8 <lcd_print>
		}

		if(kapiAcTipi == 0){
 80023b6:	4b67      	ldr	r3, [pc, #412]	; (8002554 <menu+0x1354>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d113      	bne.n	80023e6 <menu+0x11e6>
			if(dilSecim == 0) {
 80023be:	4b5a      	ldr	r3, [pc, #360]	; (8002528 <menu+0x1328>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d105      	bne.n	80023d2 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 80023c6:	4a64      	ldr	r2, [pc, #400]	; (8002558 <menu+0x1358>)
 80023c8:	2101      	movs	r1, #1
 80023ca:	2002      	movs	r0, #2
 80023cc:	f005 fb94 	bl	8007af8 <lcd_print>
 80023d0:	e020      	b.n	8002414 <menu+0x1214>
			} else if(dilSecim == 1) {
 80023d2:	4b55      	ldr	r3, [pc, #340]	; (8002528 <menu+0x1328>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d11c      	bne.n	8002414 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 80023da:	4a60      	ldr	r2, [pc, #384]	; (800255c <menu+0x135c>)
 80023dc:	2101      	movs	r1, #1
 80023de:	2002      	movs	r0, #2
 80023e0:	f005 fb8a 	bl	8007af8 <lcd_print>
 80023e4:	e016      	b.n	8002414 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 80023e6:	4b5b      	ldr	r3, [pc, #364]	; (8002554 <menu+0x1354>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d112      	bne.n	8002414 <menu+0x1214>
			if(dilSecim == 0){
 80023ee:	4b4e      	ldr	r3, [pc, #312]	; (8002528 <menu+0x1328>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d105      	bne.n	8002402 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80023f6:	4a5a      	ldr	r2, [pc, #360]	; (8002560 <menu+0x1360>)
 80023f8:	2101      	movs	r1, #1
 80023fa:	2002      	movs	r0, #2
 80023fc:	f005 fb7c 	bl	8007af8 <lcd_print>
 8002400:	e008      	b.n	8002414 <menu+0x1214>
			} else if(dilSecim == 1){
 8002402:	4b49      	ldr	r3, [pc, #292]	; (8002528 <menu+0x1328>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d104      	bne.n	8002414 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800240a:	4a56      	ldr	r2, [pc, #344]	; (8002564 <menu+0x1364>)
 800240c:	2101      	movs	r1, #1
 800240e:	2002      	movs	r0, #2
 8002410:	f005 fb72 	bl	8007af8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002414:	2102      	movs	r1, #2
 8002416:	4846      	ldr	r0, [pc, #280]	; (8002530 <menu+0x1330>)
 8002418:	f006 fe94 	bl	8009144 <HAL_GPIO_ReadPin>
 800241c:	4603      	mov	r3, r0
 800241e:	2b01      	cmp	r3, #1
 8002420:	d115      	bne.n	800244e <menu+0x124e>
 8002422:	4b44      	ldr	r3, [pc, #272]	; (8002534 <menu+0x1334>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	f083 0301 	eor.w	r3, r3, #1
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00e      	beq.n	800244e <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002430:	4b48      	ldr	r3, [pc, #288]	; (8002554 <menu+0x1354>)
 8002432:	781b      	ldrb	r3, [r3, #0]
 8002434:	3301      	adds	r3, #1
 8002436:	b2da      	uxtb	r2, r3
 8002438:	4b46      	ldr	r3, [pc, #280]	; (8002554 <menu+0x1354>)
 800243a:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800243c:	4b45      	ldr	r3, [pc, #276]	; (8002554 <menu+0x1354>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d902      	bls.n	800244a <menu+0x124a>
				kapiAcTipi = 0;
 8002444:	4b43      	ldr	r3, [pc, #268]	; (8002554 <menu+0x1354>)
 8002446:	2200      	movs	r2, #0
 8002448:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800244a:	f002 faa5 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800244e:	2104      	movs	r1, #4
 8002450:	4837      	ldr	r0, [pc, #220]	; (8002530 <menu+0x1330>)
 8002452:	f006 fe77 	bl	8009144 <HAL_GPIO_ReadPin>
 8002456:	4603      	mov	r3, r0
 8002458:	2b01      	cmp	r3, #1
 800245a:	d115      	bne.n	8002488 <menu+0x1288>
 800245c:	4b35      	ldr	r3, [pc, #212]	; (8002534 <menu+0x1334>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	f083 0301 	eor.w	r3, r3, #1
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00e      	beq.n	8002488 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800246a:	4b3a      	ldr	r3, [pc, #232]	; (8002554 <menu+0x1354>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	3b01      	subs	r3, #1
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4b38      	ldr	r3, [pc, #224]	; (8002554 <menu+0x1354>)
 8002474:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002476:	4b37      	ldr	r3, [pc, #220]	; (8002554 <menu+0x1354>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <menu+0x1284>
		   		kapiAcTipi = 1;
 800247e:	4b35      	ldr	r3, [pc, #212]	; (8002554 <menu+0x1354>)
 8002480:	2201      	movs	r2, #1
 8002482:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002484:	f002 fa88 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002488:	2108      	movs	r1, #8
 800248a:	4829      	ldr	r0, [pc, #164]	; (8002530 <menu+0x1330>)
 800248c:	f006 fe5a 	bl	8009144 <HAL_GPIO_ReadPin>
 8002490:	4603      	mov	r3, r0
 8002492:	2b01      	cmp	r3, #1
 8002494:	d10e      	bne.n	80024b4 <menu+0x12b4>
 8002496:	4b27      	ldr	r3, [pc, #156]	; (8002534 <menu+0x1334>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	f083 0301 	eor.w	r3, r3, #1
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d007      	beq.n	80024b4 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80024a4:	4b2b      	ldr	r3, [pc, #172]	; (8002554 <menu+0x1354>)
 80024a6:	781a      	ldrb	r2, [r3, #0]
 80024a8:	4b24      	ldr	r3, [pc, #144]	; (800253c <menu+0x133c>)
 80024aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 80024ae:	4b25      	ldr	r3, [pc, #148]	; (8002544 <menu+0x1344>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80024b4:	4b24      	ldr	r3, [pc, #144]	; (8002548 <menu+0x1348>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b09      	cmp	r3, #9
 80024ba:	f040 80b9 	bne.w	8002630 <menu+0x1430>
		if(dilSecim == 0){
 80024be:	4b1a      	ldr	r3, [pc, #104]	; (8002528 <menu+0x1328>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d105      	bne.n	80024d2 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 80024c6:	4a28      	ldr	r2, [pc, #160]	; (8002568 <menu+0x1368>)
 80024c8:	2101      	movs	r1, #1
 80024ca:	2001      	movs	r0, #1
 80024cc:	f005 fb14 	bl	8007af8 <lcd_print>
 80024d0:	e008      	b.n	80024e4 <menu+0x12e4>
		} else if(dilSecim == 1) {
 80024d2:	4b15      	ldr	r3, [pc, #84]	; (8002528 <menu+0x1328>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d104      	bne.n	80024e4 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 80024da:	4a24      	ldr	r2, [pc, #144]	; (800256c <menu+0x136c>)
 80024dc:	2101      	movs	r1, #1
 80024de:	2001      	movs	r0, #1
 80024e0:	f005 fb0a 	bl	8007af8 <lcd_print>
		}

		if(kapi1Tip == 0) {
 80024e4:	4b22      	ldr	r3, [pc, #136]	; (8002570 <menu+0x1370>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d105      	bne.n	80024f8 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 80024ec:	4a21      	ldr	r2, [pc, #132]	; (8002574 <menu+0x1374>)
 80024ee:	2101      	movs	r1, #1
 80024f0:	2002      	movs	r0, #2
 80024f2:	f005 fb01 	bl	8007af8 <lcd_print>
 80024f6:	e04c      	b.n	8002592 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80024f8:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <menu+0x1370>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d13f      	bne.n	8002580 <menu+0x1380>
			if(dilSecim == 0){
 8002500:	4b09      	ldr	r3, [pc, #36]	; (8002528 <menu+0x1328>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d105      	bne.n	8002514 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8002508:	4a1b      	ldr	r2, [pc, #108]	; (8002578 <menu+0x1378>)
 800250a:	2101      	movs	r1, #1
 800250c:	2002      	movs	r0, #2
 800250e:	f005 faf3 	bl	8007af8 <lcd_print>
 8002512:	e03e      	b.n	8002592 <menu+0x1392>
			} else if(dilSecim == 1) {
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <menu+0x1328>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d13a      	bne.n	8002592 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 800251c:	4a17      	ldr	r2, [pc, #92]	; (800257c <menu+0x137c>)
 800251e:	2101      	movs	r1, #1
 8002520:	2002      	movs	r0, #2
 8002522:	f005 fae9 	bl	8007af8 <lcd_print>
 8002526:	e034      	b.n	8002592 <menu+0x1392>
 8002528:	2000023d 	.word	0x2000023d
 800252c:	0800d2ac 	.word	0x0800d2ac
 8002530:	40010800 	.word	0x40010800
 8002534:	2000024b 	.word	0x2000024b
 8002538:	20000224 	.word	0x20000224
 800253c:	20000120 	.word	0x20000120
 8002540:	20000222 	.word	0x20000222
 8002544:	20000248 	.word	0x20000248
 8002548:	2000021c 	.word	0x2000021c
 800254c:	0800d2c0 	.word	0x0800d2c0
 8002550:	0800d2d4 	.word	0x0800d2d4
 8002554:	20000228 	.word	0x20000228
 8002558:	0800d2e8 	.word	0x0800d2e8
 800255c:	0800d2f8 	.word	0x0800d2f8
 8002560:	0800d308 	.word	0x0800d308
 8002564:	0800d31c 	.word	0x0800d31c
 8002568:	0800d330 	.word	0x0800d330
 800256c:	0800d344 	.word	0x0800d344
 8002570:	20000225 	.word	0x20000225
 8002574:	0800d358 	.word	0x0800d358
 8002578:	0800d36c 	.word	0x0800d36c
 800257c:	0800d37c 	.word	0x0800d37c
			}
		} else if(kapi1Tip == 2) {
 8002580:	4b8a      	ldr	r3, [pc, #552]	; (80027ac <menu+0x15ac>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d104      	bne.n	8002592 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002588:	4a89      	ldr	r2, [pc, #548]	; (80027b0 <menu+0x15b0>)
 800258a:	2101      	movs	r1, #1
 800258c:	2002      	movs	r0, #2
 800258e:	f005 fab3 	bl	8007af8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002592:	2102      	movs	r1, #2
 8002594:	4887      	ldr	r0, [pc, #540]	; (80027b4 <menu+0x15b4>)
 8002596:	f006 fdd5 	bl	8009144 <HAL_GPIO_ReadPin>
 800259a:	4603      	mov	r3, r0
 800259c:	2b01      	cmp	r3, #1
 800259e:	d115      	bne.n	80025cc <menu+0x13cc>
 80025a0:	4b85      	ldr	r3, [pc, #532]	; (80027b8 <menu+0x15b8>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	f083 0301 	eor.w	r3, r3, #1
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00e      	beq.n	80025cc <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 80025ae:	4b7f      	ldr	r3, [pc, #508]	; (80027ac <menu+0x15ac>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	3301      	adds	r3, #1
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4b7d      	ldr	r3, [pc, #500]	; (80027ac <menu+0x15ac>)
 80025b8:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80025ba:	4b7c      	ldr	r3, [pc, #496]	; (80027ac <menu+0x15ac>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d902      	bls.n	80025c8 <menu+0x13c8>
				kapi1Tip = 0;
 80025c2:	4b7a      	ldr	r3, [pc, #488]	; (80027ac <menu+0x15ac>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025c8:	f002 f9e6 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025cc:	2104      	movs	r1, #4
 80025ce:	4879      	ldr	r0, [pc, #484]	; (80027b4 <menu+0x15b4>)
 80025d0:	f006 fdb8 	bl	8009144 <HAL_GPIO_ReadPin>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d115      	bne.n	8002606 <menu+0x1406>
 80025da:	4b77      	ldr	r3, [pc, #476]	; (80027b8 <menu+0x15b8>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	f083 0301 	eor.w	r3, r3, #1
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00e      	beq.n	8002606 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 80025e8:	4b70      	ldr	r3, [pc, #448]	; (80027ac <menu+0x15ac>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	4b6e      	ldr	r3, [pc, #440]	; (80027ac <menu+0x15ac>)
 80025f2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80025f4:	4b6d      	ldr	r3, [pc, #436]	; (80027ac <menu+0x15ac>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d902      	bls.n	8002602 <menu+0x1402>
		   		kapi1Tip = 2;
 80025fc:	4b6b      	ldr	r3, [pc, #428]	; (80027ac <menu+0x15ac>)
 80025fe:	2202      	movs	r2, #2
 8002600:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002602:	f002 f9c9 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002606:	2108      	movs	r1, #8
 8002608:	486a      	ldr	r0, [pc, #424]	; (80027b4 <menu+0x15b4>)
 800260a:	f006 fd9b 	bl	8009144 <HAL_GPIO_ReadPin>
 800260e:	4603      	mov	r3, r0
 8002610:	2b01      	cmp	r3, #1
 8002612:	d10d      	bne.n	8002630 <menu+0x1430>
 8002614:	4b68      	ldr	r3, [pc, #416]	; (80027b8 <menu+0x15b8>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	f083 0301 	eor.w	r3, r3, #1
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d006      	beq.n	8002630 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8002622:	4b62      	ldr	r3, [pc, #392]	; (80027ac <menu+0x15ac>)
 8002624:	781a      	ldrb	r2, [r3, #0]
 8002626:	4b65      	ldr	r3, [pc, #404]	; (80027bc <menu+0x15bc>)
 8002628:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800262a:	4b65      	ldr	r3, [pc, #404]	; (80027c0 <menu+0x15c0>)
 800262c:	2201      	movs	r2, #1
 800262e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002630:	4b64      	ldr	r3, [pc, #400]	; (80027c4 <menu+0x15c4>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b0a      	cmp	r3, #10
 8002636:	d17f      	bne.n	8002738 <menu+0x1538>
		if(dilSecim == 0) {
 8002638:	4b63      	ldr	r3, [pc, #396]	; (80027c8 <menu+0x15c8>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10a      	bne.n	8002656 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002640:	4a62      	ldr	r2, [pc, #392]	; (80027cc <menu+0x15cc>)
 8002642:	2101      	movs	r1, #1
 8002644:	2001      	movs	r0, #1
 8002646:	f005 fa57 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800264a:	4a61      	ldr	r2, [pc, #388]	; (80027d0 <menu+0x15d0>)
 800264c:	2101      	movs	r1, #1
 800264e:	2002      	movs	r0, #2
 8002650:	f005 fa52 	bl	8007af8 <lcd_print>
 8002654:	e00d      	b.n	8002672 <menu+0x1472>
		} else if(dilSecim == 1) {
 8002656:	4b5c      	ldr	r3, [pc, #368]	; (80027c8 <menu+0x15c8>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d109      	bne.n	8002672 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800265e:	4a5d      	ldr	r2, [pc, #372]	; (80027d4 <menu+0x15d4>)
 8002660:	2101      	movs	r1, #1
 8002662:	2001      	movs	r0, #1
 8002664:	f005 fa48 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002668:	4a5b      	ldr	r2, [pc, #364]	; (80027d8 <menu+0x15d8>)
 800266a:	2101      	movs	r1, #1
 800266c:	2002      	movs	r0, #2
 800266e:	f005 fa43 	bl	8007af8 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002672:	4b5a      	ldr	r3, [pc, #360]	; (80027dc <menu+0x15dc>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	220a      	movs	r2, #10
 8002678:	4959      	ldr	r1, [pc, #356]	; (80027e0 <menu+0x15e0>)
 800267a:	4618      	mov	r0, r3
 800267c:	f009 fd8e 	bl	800c19c <itoa>
		lcd_print(2,16,snum);
 8002680:	4a57      	ldr	r2, [pc, #348]	; (80027e0 <menu+0x15e0>)
 8002682:	2110      	movs	r1, #16
 8002684:	2002      	movs	r0, #2
 8002686:	f005 fa37 	bl	8007af8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800268a:	2102      	movs	r1, #2
 800268c:	4849      	ldr	r0, [pc, #292]	; (80027b4 <menu+0x15b4>)
 800268e:	f006 fd59 	bl	8009144 <HAL_GPIO_ReadPin>
 8002692:	4603      	mov	r3, r0
 8002694:	2b01      	cmp	r3, #1
 8002696:	d119      	bne.n	80026cc <menu+0x14cc>
 8002698:	4b47      	ldr	r3, [pc, #284]	; (80027b8 <menu+0x15b8>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	f083 0301 	eor.w	r3, r3, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d012      	beq.n	80026cc <menu+0x14cc>
 80026a6:	4b41      	ldr	r3, [pc, #260]	; (80027ac <menu+0x15ac>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10e      	bne.n	80026cc <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 80026ae:	4b4b      	ldr	r3, [pc, #300]	; (80027dc <menu+0x15dc>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	3301      	adds	r3, #1
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4b49      	ldr	r3, [pc, #292]	; (80027dc <menu+0x15dc>)
 80026b8:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80026ba:	4b48      	ldr	r3, [pc, #288]	; (80027dc <menu+0x15dc>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b05      	cmp	r3, #5
 80026c0:	d902      	bls.n	80026c8 <menu+0x14c8>
				kapi1AcSure = 0;
 80026c2:	4b46      	ldr	r3, [pc, #280]	; (80027dc <menu+0x15dc>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026c8:	f002 f966 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80026cc:	2104      	movs	r1, #4
 80026ce:	4839      	ldr	r0, [pc, #228]	; (80027b4 <menu+0x15b4>)
 80026d0:	f006 fd38 	bl	8009144 <HAL_GPIO_ReadPin>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d119      	bne.n	800270e <menu+0x150e>
 80026da:	4b37      	ldr	r3, [pc, #220]	; (80027b8 <menu+0x15b8>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	f083 0301 	eor.w	r3, r3, #1
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d012      	beq.n	800270e <menu+0x150e>
 80026e8:	4b30      	ldr	r3, [pc, #192]	; (80027ac <menu+0x15ac>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10e      	bne.n	800270e <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 80026f0:	4b3a      	ldr	r3, [pc, #232]	; (80027dc <menu+0x15dc>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	4b38      	ldr	r3, [pc, #224]	; (80027dc <menu+0x15dc>)
 80026fa:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80026fc:	4b37      	ldr	r3, [pc, #220]	; (80027dc <menu+0x15dc>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b06      	cmp	r3, #6
 8002702:	d902      	bls.n	800270a <menu+0x150a>
		   		kapi1AcSure = 5;
 8002704:	4b35      	ldr	r3, [pc, #212]	; (80027dc <menu+0x15dc>)
 8002706:	2205      	movs	r2, #5
 8002708:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800270a:	f002 f945 	bl	8004998 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800270e:	2108      	movs	r1, #8
 8002710:	4828      	ldr	r0, [pc, #160]	; (80027b4 <menu+0x15b4>)
 8002712:	f006 fd17 	bl	8009144 <HAL_GPIO_ReadPin>
 8002716:	4603      	mov	r3, r0
 8002718:	2b01      	cmp	r3, #1
 800271a:	d10d      	bne.n	8002738 <menu+0x1538>
 800271c:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <menu+0x15b8>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	f083 0301 	eor.w	r3, r3, #1
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d006      	beq.n	8002738 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 800272a:	4b2c      	ldr	r3, [pc, #176]	; (80027dc <menu+0x15dc>)
 800272c:	781a      	ldrb	r2, [r3, #0]
 800272e:	4b23      	ldr	r3, [pc, #140]	; (80027bc <menu+0x15bc>)
 8002730:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002732:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <menu+0x15c0>)
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002738:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <menu+0x15c4>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b0b      	cmp	r3, #11
 800273e:	f040 80b5 	bne.w	80028ac <menu+0x16ac>
		if(dilSecim == 0) {
 8002742:	4b21      	ldr	r3, [pc, #132]	; (80027c8 <menu+0x15c8>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d105      	bne.n	8002756 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 800274a:	4a26      	ldr	r2, [pc, #152]	; (80027e4 <menu+0x15e4>)
 800274c:	2101      	movs	r1, #1
 800274e:	2001      	movs	r0, #1
 8002750:	f005 f9d2 	bl	8007af8 <lcd_print>
 8002754:	e008      	b.n	8002768 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002756:	4b1c      	ldr	r3, [pc, #112]	; (80027c8 <menu+0x15c8>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b01      	cmp	r3, #1
 800275c:	d104      	bne.n	8002768 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 800275e:	4a22      	ldr	r2, [pc, #136]	; (80027e8 <menu+0x15e8>)
 8002760:	2101      	movs	r1, #1
 8002762:	2001      	movs	r0, #1
 8002764:	f005 f9c8 	bl	8007af8 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002768:	4b20      	ldr	r3, [pc, #128]	; (80027ec <menu+0x15ec>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d105      	bne.n	800277c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002770:	4a1f      	ldr	r2, [pc, #124]	; (80027f0 <menu+0x15f0>)
 8002772:	2101      	movs	r1, #1
 8002774:	2002      	movs	r0, #2
 8002776:	f005 f9bf 	bl	8007af8 <lcd_print>
 800277a:	e048      	b.n	800280e <menu+0x160e>
		} else if(kapi2Tip == 1) {
 800277c:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <menu+0x15ec>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d13b      	bne.n	80027fc <menu+0x15fc>
			if(dilSecim == 0) {
 8002784:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <menu+0x15c8>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d105      	bne.n	8002798 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 800278c:	4a19      	ldr	r2, [pc, #100]	; (80027f4 <menu+0x15f4>)
 800278e:	2101      	movs	r1, #1
 8002790:	2002      	movs	r0, #2
 8002792:	f005 f9b1 	bl	8007af8 <lcd_print>
 8002796:	e03a      	b.n	800280e <menu+0x160e>
			} else if(dilSecim == 1) {
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <menu+0x15c8>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d136      	bne.n	800280e <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 80027a0:	4a15      	ldr	r2, [pc, #84]	; (80027f8 <menu+0x15f8>)
 80027a2:	2101      	movs	r1, #1
 80027a4:	2002      	movs	r0, #2
 80027a6:	f005 f9a7 	bl	8007af8 <lcd_print>
 80027aa:	e030      	b.n	800280e <menu+0x160e>
 80027ac:	20000225 	.word	0x20000225
 80027b0:	0800d390 	.word	0x0800d390
 80027b4:	40010800 	.word	0x40010800
 80027b8:	2000024b 	.word	0x2000024b
 80027bc:	20000120 	.word	0x20000120
 80027c0:	20000248 	.word	0x20000248
 80027c4:	2000021c 	.word	0x2000021c
 80027c8:	2000023d 	.word	0x2000023d
 80027cc:	0800d3a0 	.word	0x0800d3a0
 80027d0:	0800d3b4 	.word	0x0800d3b4
 80027d4:	0800d3c4 	.word	0x0800d3c4
 80027d8:	0800d3d8 	.word	0x0800d3d8
 80027dc:	20000235 	.word	0x20000235
 80027e0:	20000190 	.word	0x20000190
 80027e4:	0800d3e8 	.word	0x0800d3e8
 80027e8:	0800d3fc 	.word	0x0800d3fc
 80027ec:	20000226 	.word	0x20000226
 80027f0:	0800d358 	.word	0x0800d358
 80027f4:	0800d36c 	.word	0x0800d36c
 80027f8:	0800d37c 	.word	0x0800d37c
			}
		} else if(kapi2Tip == 2) {
 80027fc:	4b8a      	ldr	r3, [pc, #552]	; (8002a28 <menu+0x1828>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d104      	bne.n	800280e <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002804:	4a89      	ldr	r2, [pc, #548]	; (8002a2c <menu+0x182c>)
 8002806:	2101      	movs	r1, #1
 8002808:	2002      	movs	r0, #2
 800280a:	f005 f975 	bl	8007af8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800280e:	2102      	movs	r1, #2
 8002810:	4887      	ldr	r0, [pc, #540]	; (8002a30 <menu+0x1830>)
 8002812:	f006 fc97 	bl	8009144 <HAL_GPIO_ReadPin>
 8002816:	4603      	mov	r3, r0
 8002818:	2b01      	cmp	r3, #1
 800281a:	d115      	bne.n	8002848 <menu+0x1648>
 800281c:	4b85      	ldr	r3, [pc, #532]	; (8002a34 <menu+0x1834>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	f083 0301 	eor.w	r3, r3, #1
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d00e      	beq.n	8002848 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 800282a:	4b7f      	ldr	r3, [pc, #508]	; (8002a28 <menu+0x1828>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	3301      	adds	r3, #1
 8002830:	b2da      	uxtb	r2, r3
 8002832:	4b7d      	ldr	r3, [pc, #500]	; (8002a28 <menu+0x1828>)
 8002834:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002836:	4b7c      	ldr	r3, [pc, #496]	; (8002a28 <menu+0x1828>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d902      	bls.n	8002844 <menu+0x1644>
				kapi2Tip = 0;
 800283e:	4b7a      	ldr	r3, [pc, #488]	; (8002a28 <menu+0x1828>)
 8002840:	2200      	movs	r2, #0
 8002842:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002844:	f002 f8a8 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002848:	2104      	movs	r1, #4
 800284a:	4879      	ldr	r0, [pc, #484]	; (8002a30 <menu+0x1830>)
 800284c:	f006 fc7a 	bl	8009144 <HAL_GPIO_ReadPin>
 8002850:	4603      	mov	r3, r0
 8002852:	2b01      	cmp	r3, #1
 8002854:	d115      	bne.n	8002882 <menu+0x1682>
 8002856:	4b77      	ldr	r3, [pc, #476]	; (8002a34 <menu+0x1834>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	f083 0301 	eor.w	r3, r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00e      	beq.n	8002882 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002864:	4b70      	ldr	r3, [pc, #448]	; (8002a28 <menu+0x1828>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	3b01      	subs	r3, #1
 800286a:	b2da      	uxtb	r2, r3
 800286c:	4b6e      	ldr	r3, [pc, #440]	; (8002a28 <menu+0x1828>)
 800286e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002870:	4b6d      	ldr	r3, [pc, #436]	; (8002a28 <menu+0x1828>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b03      	cmp	r3, #3
 8002876:	d902      	bls.n	800287e <menu+0x167e>
		   		kapi2Tip = 2;
 8002878:	4b6b      	ldr	r3, [pc, #428]	; (8002a28 <menu+0x1828>)
 800287a:	2202      	movs	r2, #2
 800287c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800287e:	f002 f88b 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002882:	2108      	movs	r1, #8
 8002884:	486a      	ldr	r0, [pc, #424]	; (8002a30 <menu+0x1830>)
 8002886:	f006 fc5d 	bl	8009144 <HAL_GPIO_ReadPin>
 800288a:	4603      	mov	r3, r0
 800288c:	2b01      	cmp	r3, #1
 800288e:	d10d      	bne.n	80028ac <menu+0x16ac>
 8002890:	4b68      	ldr	r3, [pc, #416]	; (8002a34 <menu+0x1834>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	f083 0301 	eor.w	r3, r3, #1
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d006      	beq.n	80028ac <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 800289e:	4b62      	ldr	r3, [pc, #392]	; (8002a28 <menu+0x1828>)
 80028a0:	781a      	ldrb	r2, [r3, #0]
 80028a2:	4b65      	ldr	r3, [pc, #404]	; (8002a38 <menu+0x1838>)
 80028a4:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80028a6:	4b65      	ldr	r3, [pc, #404]	; (8002a3c <menu+0x183c>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80028ac:	4b64      	ldr	r3, [pc, #400]	; (8002a40 <menu+0x1840>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b0c      	cmp	r3, #12
 80028b2:	d17f      	bne.n	80029b4 <menu+0x17b4>
		if(dilSecim == 0) {
 80028b4:	4b63      	ldr	r3, [pc, #396]	; (8002a44 <menu+0x1844>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10a      	bne.n	80028d2 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 80028bc:	4a62      	ldr	r2, [pc, #392]	; (8002a48 <menu+0x1848>)
 80028be:	2101      	movs	r1, #1
 80028c0:	2001      	movs	r0, #1
 80028c2:	f005 f919 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80028c6:	4a61      	ldr	r2, [pc, #388]	; (8002a4c <menu+0x184c>)
 80028c8:	2101      	movs	r1, #1
 80028ca:	2002      	movs	r0, #2
 80028cc:	f005 f914 	bl	8007af8 <lcd_print>
 80028d0:	e00d      	b.n	80028ee <menu+0x16ee>
		} else if(dilSecim == 1) {
 80028d2:	4b5c      	ldr	r3, [pc, #368]	; (8002a44 <menu+0x1844>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d109      	bne.n	80028ee <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 80028da:	4a5d      	ldr	r2, [pc, #372]	; (8002a50 <menu+0x1850>)
 80028dc:	2101      	movs	r1, #1
 80028de:	2001      	movs	r0, #1
 80028e0:	f005 f90a 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80028e4:	4a5b      	ldr	r2, [pc, #364]	; (8002a54 <menu+0x1854>)
 80028e6:	2101      	movs	r1, #1
 80028e8:	2002      	movs	r0, #2
 80028ea:	f005 f905 	bl	8007af8 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 80028ee:	4b5a      	ldr	r3, [pc, #360]	; (8002a58 <menu+0x1858>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	220a      	movs	r2, #10
 80028f4:	4959      	ldr	r1, [pc, #356]	; (8002a5c <menu+0x185c>)
 80028f6:	4618      	mov	r0, r3
 80028f8:	f009 fc50 	bl	800c19c <itoa>
		lcd_print(2,16,snum);
 80028fc:	4a57      	ldr	r2, [pc, #348]	; (8002a5c <menu+0x185c>)
 80028fe:	2110      	movs	r1, #16
 8002900:	2002      	movs	r0, #2
 8002902:	f005 f8f9 	bl	8007af8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002906:	2102      	movs	r1, #2
 8002908:	4849      	ldr	r0, [pc, #292]	; (8002a30 <menu+0x1830>)
 800290a:	f006 fc1b 	bl	8009144 <HAL_GPIO_ReadPin>
 800290e:	4603      	mov	r3, r0
 8002910:	2b01      	cmp	r3, #1
 8002912:	d119      	bne.n	8002948 <menu+0x1748>
 8002914:	4b47      	ldr	r3, [pc, #284]	; (8002a34 <menu+0x1834>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	f083 0301 	eor.w	r3, r3, #1
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d012      	beq.n	8002948 <menu+0x1748>
 8002922:	4b41      	ldr	r3, [pc, #260]	; (8002a28 <menu+0x1828>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10e      	bne.n	8002948 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 800292a:	4b4b      	ldr	r3, [pc, #300]	; (8002a58 <menu+0x1858>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	3301      	adds	r3, #1
 8002930:	b2da      	uxtb	r2, r3
 8002932:	4b49      	ldr	r3, [pc, #292]	; (8002a58 <menu+0x1858>)
 8002934:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002936:	4b48      	ldr	r3, [pc, #288]	; (8002a58 <menu+0x1858>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b05      	cmp	r3, #5
 800293c:	d902      	bls.n	8002944 <menu+0x1744>
				kapi2AcSure = 0;
 800293e:	4b46      	ldr	r3, [pc, #280]	; (8002a58 <menu+0x1858>)
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002944:	f002 f828 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002948:	2104      	movs	r1, #4
 800294a:	4839      	ldr	r0, [pc, #228]	; (8002a30 <menu+0x1830>)
 800294c:	f006 fbfa 	bl	8009144 <HAL_GPIO_ReadPin>
 8002950:	4603      	mov	r3, r0
 8002952:	2b01      	cmp	r3, #1
 8002954:	d119      	bne.n	800298a <menu+0x178a>
 8002956:	4b37      	ldr	r3, [pc, #220]	; (8002a34 <menu+0x1834>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	f083 0301 	eor.w	r3, r3, #1
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d012      	beq.n	800298a <menu+0x178a>
 8002964:	4b30      	ldr	r3, [pc, #192]	; (8002a28 <menu+0x1828>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10e      	bne.n	800298a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 800296c:	4b3a      	ldr	r3, [pc, #232]	; (8002a58 <menu+0x1858>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	3b01      	subs	r3, #1
 8002972:	b2da      	uxtb	r2, r3
 8002974:	4b38      	ldr	r3, [pc, #224]	; (8002a58 <menu+0x1858>)
 8002976:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002978:	4b37      	ldr	r3, [pc, #220]	; (8002a58 <menu+0x1858>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b06      	cmp	r3, #6
 800297e:	d902      	bls.n	8002986 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002980:	4b35      	ldr	r3, [pc, #212]	; (8002a58 <menu+0x1858>)
 8002982:	2205      	movs	r2, #5
 8002984:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002986:	f002 f807 	bl	8004998 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800298a:	2108      	movs	r1, #8
 800298c:	4828      	ldr	r0, [pc, #160]	; (8002a30 <menu+0x1830>)
 800298e:	f006 fbd9 	bl	8009144 <HAL_GPIO_ReadPin>
 8002992:	4603      	mov	r3, r0
 8002994:	2b01      	cmp	r3, #1
 8002996:	d10d      	bne.n	80029b4 <menu+0x17b4>
 8002998:	4b26      	ldr	r3, [pc, #152]	; (8002a34 <menu+0x1834>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	f083 0301 	eor.w	r3, r3, #1
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d006      	beq.n	80029b4 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 80029a6:	4b2c      	ldr	r3, [pc, #176]	; (8002a58 <menu+0x1858>)
 80029a8:	781a      	ldrb	r2, [r3, #0]
 80029aa:	4b23      	ldr	r3, [pc, #140]	; (8002a38 <menu+0x1838>)
 80029ac:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80029ae:	4b23      	ldr	r3, [pc, #140]	; (8002a3c <menu+0x183c>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80029b4:	4b22      	ldr	r3, [pc, #136]	; (8002a40 <menu+0x1840>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b0d      	cmp	r3, #13
 80029ba:	f040 80b5 	bne.w	8002b28 <menu+0x1928>
		if(dilSecim == 0) {
 80029be:	4b21      	ldr	r3, [pc, #132]	; (8002a44 <menu+0x1844>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d105      	bne.n	80029d2 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 80029c6:	4a26      	ldr	r2, [pc, #152]	; (8002a60 <menu+0x1860>)
 80029c8:	2101      	movs	r1, #1
 80029ca:	2001      	movs	r0, #1
 80029cc:	f005 f894 	bl	8007af8 <lcd_print>
 80029d0:	e008      	b.n	80029e4 <menu+0x17e4>
		} else if(dilSecim == 1){
 80029d2:	4b1c      	ldr	r3, [pc, #112]	; (8002a44 <menu+0x1844>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d104      	bne.n	80029e4 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 80029da:	4a22      	ldr	r2, [pc, #136]	; (8002a64 <menu+0x1864>)
 80029dc:	2101      	movs	r1, #1
 80029de:	2001      	movs	r0, #1
 80029e0:	f005 f88a 	bl	8007af8 <lcd_print>
		}

		if(kapitablaTip == 0) {
 80029e4:	4b20      	ldr	r3, [pc, #128]	; (8002a68 <menu+0x1868>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d105      	bne.n	80029f8 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 80029ec:	4a1f      	ldr	r2, [pc, #124]	; (8002a6c <menu+0x186c>)
 80029ee:	2101      	movs	r1, #1
 80029f0:	2002      	movs	r0, #2
 80029f2:	f005 f881 	bl	8007af8 <lcd_print>
 80029f6:	e048      	b.n	8002a8a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <menu+0x1868>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d13b      	bne.n	8002a78 <menu+0x1878>
			if(dilSecim == 0) {
 8002a00:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <menu+0x1844>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d105      	bne.n	8002a14 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002a08:	4a19      	ldr	r2, [pc, #100]	; (8002a70 <menu+0x1870>)
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	2002      	movs	r0, #2
 8002a0e:	f005 f873 	bl	8007af8 <lcd_print>
 8002a12:	e03a      	b.n	8002a8a <menu+0x188a>
			} else if(dilSecim == 1) {
 8002a14:	4b0b      	ldr	r3, [pc, #44]	; (8002a44 <menu+0x1844>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d136      	bne.n	8002a8a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002a1c:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <menu+0x1874>)
 8002a1e:	2101      	movs	r1, #1
 8002a20:	2002      	movs	r0, #2
 8002a22:	f005 f869 	bl	8007af8 <lcd_print>
 8002a26:	e030      	b.n	8002a8a <menu+0x188a>
 8002a28:	20000226 	.word	0x20000226
 8002a2c:	0800d390 	.word	0x0800d390
 8002a30:	40010800 	.word	0x40010800
 8002a34:	2000024b 	.word	0x2000024b
 8002a38:	20000120 	.word	0x20000120
 8002a3c:	20000248 	.word	0x20000248
 8002a40:	2000021c 	.word	0x2000021c
 8002a44:	2000023d 	.word	0x2000023d
 8002a48:	0800d410 	.word	0x0800d410
 8002a4c:	0800d3b4 	.word	0x0800d3b4
 8002a50:	0800d424 	.word	0x0800d424
 8002a54:	0800d3d8 	.word	0x0800d3d8
 8002a58:	20000236 	.word	0x20000236
 8002a5c:	20000190 	.word	0x20000190
 8002a60:	0800d438 	.word	0x0800d438
 8002a64:	0800d44c 	.word	0x0800d44c
 8002a68:	20000227 	.word	0x20000227
 8002a6c:	0800d358 	.word	0x0800d358
 8002a70:	0800d36c 	.word	0x0800d36c
 8002a74:	0800d37c 	.word	0x0800d37c
			}
		} else if(kapitablaTip == 2) {
 8002a78:	4b5b      	ldr	r3, [pc, #364]	; (8002be8 <menu+0x19e8>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d104      	bne.n	8002a8a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002a80:	4a5a      	ldr	r2, [pc, #360]	; (8002bec <menu+0x19ec>)
 8002a82:	2101      	movs	r1, #1
 8002a84:	2002      	movs	r0, #2
 8002a86:	f005 f837 	bl	8007af8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	4858      	ldr	r0, [pc, #352]	; (8002bf0 <menu+0x19f0>)
 8002a8e:	f006 fb59 	bl	8009144 <HAL_GPIO_ReadPin>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d115      	bne.n	8002ac4 <menu+0x18c4>
 8002a98:	4b56      	ldr	r3, [pc, #344]	; (8002bf4 <menu+0x19f4>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	f083 0301 	eor.w	r3, r3, #1
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00e      	beq.n	8002ac4 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002aa6:	4b50      	ldr	r3, [pc, #320]	; (8002be8 <menu+0x19e8>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	4b4e      	ldr	r3, [pc, #312]	; (8002be8 <menu+0x19e8>)
 8002ab0:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002ab2:	4b4d      	ldr	r3, [pc, #308]	; (8002be8 <menu+0x19e8>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d902      	bls.n	8002ac0 <menu+0x18c0>
				kapitablaTip = 0;
 8002aba:	4b4b      	ldr	r3, [pc, #300]	; (8002be8 <menu+0x19e8>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ac0:	f001 ff6a 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ac4:	2104      	movs	r1, #4
 8002ac6:	484a      	ldr	r0, [pc, #296]	; (8002bf0 <menu+0x19f0>)
 8002ac8:	f006 fb3c 	bl	8009144 <HAL_GPIO_ReadPin>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d115      	bne.n	8002afe <menu+0x18fe>
 8002ad2:	4b48      	ldr	r3, [pc, #288]	; (8002bf4 <menu+0x19f4>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	f083 0301 	eor.w	r3, r3, #1
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00e      	beq.n	8002afe <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002ae0:	4b41      	ldr	r3, [pc, #260]	; (8002be8 <menu+0x19e8>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	4b3f      	ldr	r3, [pc, #252]	; (8002be8 <menu+0x19e8>)
 8002aea:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002aec:	4b3e      	ldr	r3, [pc, #248]	; (8002be8 <menu+0x19e8>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	2b03      	cmp	r3, #3
 8002af2:	d902      	bls.n	8002afa <menu+0x18fa>
		   		kapitablaTip = 2;
 8002af4:	4b3c      	ldr	r3, [pc, #240]	; (8002be8 <menu+0x19e8>)
 8002af6:	2202      	movs	r2, #2
 8002af8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002afa:	f001 ff4d 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002afe:	2108      	movs	r1, #8
 8002b00:	483b      	ldr	r0, [pc, #236]	; (8002bf0 <menu+0x19f0>)
 8002b02:	f006 fb1f 	bl	8009144 <HAL_GPIO_ReadPin>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d10d      	bne.n	8002b28 <menu+0x1928>
 8002b0c:	4b39      	ldr	r3, [pc, #228]	; (8002bf4 <menu+0x19f4>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	f083 0301 	eor.w	r3, r3, #1
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d006      	beq.n	8002b28 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002b1a:	4b33      	ldr	r3, [pc, #204]	; (8002be8 <menu+0x19e8>)
 8002b1c:	781a      	ldrb	r2, [r3, #0]
 8002b1e:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <menu+0x19f8>)
 8002b20:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002b22:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <menu+0x19fc>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002b28:	4b35      	ldr	r3, [pc, #212]	; (8002c00 <menu+0x1a00>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	2b0e      	cmp	r3, #14
 8002b2e:	f040 80f2 	bne.w	8002d16 <menu+0x1b16>
		if(dilSecim == 0) {
 8002b32:	4b34      	ldr	r3, [pc, #208]	; (8002c04 <menu+0x1a04>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d105      	bne.n	8002b46 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002b3a:	4a33      	ldr	r2, [pc, #204]	; (8002c08 <menu+0x1a08>)
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	2001      	movs	r0, #1
 8002b40:	f004 ffda 	bl	8007af8 <lcd_print>
 8002b44:	e008      	b.n	8002b58 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002b46:	4b2f      	ldr	r3, [pc, #188]	; (8002c04 <menu+0x1a04>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d104      	bne.n	8002b58 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002b4e:	4a2f      	ldr	r2, [pc, #188]	; (8002c0c <menu+0x1a0c>)
 8002b50:	2101      	movs	r1, #1
 8002b52:	2001      	movs	r0, #1
 8002b54:	f004 ffd0 	bl	8007af8 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002b58:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <menu+0x1a10>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d113      	bne.n	8002b88 <menu+0x1988>
			if(dilSecim == 0){
 8002b60:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <menu+0x1a04>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d105      	bne.n	8002b74 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002b68:	4a2a      	ldr	r2, [pc, #168]	; (8002c14 <menu+0x1a14>)
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	2002      	movs	r0, #2
 8002b6e:	f004 ffc3 	bl	8007af8 <lcd_print>
 8002b72:	e071      	b.n	8002c58 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002b74:	4b23      	ldr	r3, [pc, #140]	; (8002c04 <menu+0x1a04>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d16d      	bne.n	8002c58 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002b7c:	4a26      	ldr	r2, [pc, #152]	; (8002c18 <menu+0x1a18>)
 8002b7e:	2101      	movs	r1, #1
 8002b80:	2002      	movs	r0, #2
 8002b82:	f004 ffb9 	bl	8007af8 <lcd_print>
 8002b86:	e067      	b.n	8002c58 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002b88:	4b21      	ldr	r3, [pc, #132]	; (8002c10 <menu+0x1a10>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d112      	bne.n	8002bb6 <menu+0x19b6>
			if(dilSecim == 0){
 8002b90:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <menu+0x1a04>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d104      	bne.n	8002ba2 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002b98:	4a20      	ldr	r2, [pc, #128]	; (8002c1c <menu+0x1a1c>)
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	2002      	movs	r0, #2
 8002b9e:	f004 ffab 	bl	8007af8 <lcd_print>
			}
			if(dilSecim == 1){
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <menu+0x1a04>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d156      	bne.n	8002c58 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002baa:	4a1d      	ldr	r2, [pc, #116]	; (8002c20 <menu+0x1a20>)
 8002bac:	2101      	movs	r1, #1
 8002bae:	2002      	movs	r0, #2
 8002bb0:	f004 ffa2 	bl	8007af8 <lcd_print>
 8002bb4:	e050      	b.n	8002c58 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002bb6:	4b16      	ldr	r3, [pc, #88]	; (8002c10 <menu+0x1a10>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d136      	bne.n	8002c2c <menu+0x1a2c>
			if(dilSecim == 0){
 8002bbe:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <menu+0x1a04>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d105      	bne.n	8002bd2 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002bc6:	4a17      	ldr	r2, [pc, #92]	; (8002c24 <menu+0x1a24>)
 8002bc8:	2101      	movs	r1, #1
 8002bca:	2002      	movs	r0, #2
 8002bcc:	f004 ff94 	bl	8007af8 <lcd_print>
 8002bd0:	e042      	b.n	8002c58 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002bd2:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <menu+0x1a04>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d13e      	bne.n	8002c58 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002bda:	4a13      	ldr	r2, [pc, #76]	; (8002c28 <menu+0x1a28>)
 8002bdc:	2101      	movs	r1, #1
 8002bde:	2002      	movs	r0, #2
 8002be0:	f004 ff8a 	bl	8007af8 <lcd_print>
 8002be4:	e038      	b.n	8002c58 <menu+0x1a58>
 8002be6:	bf00      	nop
 8002be8:	20000227 	.word	0x20000227
 8002bec:	0800d390 	.word	0x0800d390
 8002bf0:	40010800 	.word	0x40010800
 8002bf4:	2000024b 	.word	0x2000024b
 8002bf8:	20000120 	.word	0x20000120
 8002bfc:	20000248 	.word	0x20000248
 8002c00:	2000021c 	.word	0x2000021c
 8002c04:	2000023d 	.word	0x2000023d
 8002c08:	0800d460 	.word	0x0800d460
 8002c0c:	0800d474 	.word	0x0800d474
 8002c10:	20000229 	.word	0x20000229
 8002c14:	0800d488 	.word	0x0800d488
 8002c18:	0800d498 	.word	0x0800d498
 8002c1c:	0800d4a8 	.word	0x0800d4a8
 8002c20:	0800d4b8 	.word	0x0800d4b8
 8002c24:	0800d4c8 	.word	0x0800d4c8
 8002c28:	0800d4dc 	.word	0x0800d4dc
			}
		} else if(kapiTablaAcKonum == 3) {
 8002c2c:	4b9b      	ldr	r3, [pc, #620]	; (8002e9c <menu+0x1c9c>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b03      	cmp	r3, #3
 8002c32:	d111      	bne.n	8002c58 <menu+0x1a58>
			if(dilSecim == 0) {
 8002c34:	4b9a      	ldr	r3, [pc, #616]	; (8002ea0 <menu+0x1ca0>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d104      	bne.n	8002c46 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002c3c:	4a99      	ldr	r2, [pc, #612]	; (8002ea4 <menu+0x1ca4>)
 8002c3e:	2101      	movs	r1, #1
 8002c40:	2002      	movs	r0, #2
 8002c42:	f004 ff59 	bl	8007af8 <lcd_print>
			}
			if(dilSecim == 1) {
 8002c46:	4b96      	ldr	r3, [pc, #600]	; (8002ea0 <menu+0x1ca0>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d104      	bne.n	8002c58 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002c4e:	4a96      	ldr	r2, [pc, #600]	; (8002ea8 <menu+0x1ca8>)
 8002c50:	2101      	movs	r1, #1
 8002c52:	2002      	movs	r0, #2
 8002c54:	f004 ff50 	bl	8007af8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c58:	2102      	movs	r1, #2
 8002c5a:	4894      	ldr	r0, [pc, #592]	; (8002eac <menu+0x1cac>)
 8002c5c:	f006 fa72 	bl	8009144 <HAL_GPIO_ReadPin>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d115      	bne.n	8002c92 <menu+0x1a92>
 8002c66:	4b92      	ldr	r3, [pc, #584]	; (8002eb0 <menu+0x1cb0>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	f083 0301 	eor.w	r3, r3, #1
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d00e      	beq.n	8002c92 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002c74:	4b89      	ldr	r3, [pc, #548]	; (8002e9c <menu+0x1c9c>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	3301      	adds	r3, #1
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	4b87      	ldr	r3, [pc, #540]	; (8002e9c <menu+0x1c9c>)
 8002c7e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002c80:	4b86      	ldr	r3, [pc, #536]	; (8002e9c <menu+0x1c9c>)
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d902      	bls.n	8002c8e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002c88:	4b84      	ldr	r3, [pc, #528]	; (8002e9c <menu+0x1c9c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c8e:	f001 fe83 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c92:	2104      	movs	r1, #4
 8002c94:	4885      	ldr	r0, [pc, #532]	; (8002eac <menu+0x1cac>)
 8002c96:	f006 fa55 	bl	8009144 <HAL_GPIO_ReadPin>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d115      	bne.n	8002ccc <menu+0x1acc>
 8002ca0:	4b83      	ldr	r3, [pc, #524]	; (8002eb0 <menu+0x1cb0>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	f083 0301 	eor.w	r3, r3, #1
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00e      	beq.n	8002ccc <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002cae:	4b7b      	ldr	r3, [pc, #492]	; (8002e9c <menu+0x1c9c>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	4b79      	ldr	r3, [pc, #484]	; (8002e9c <menu+0x1c9c>)
 8002cb8:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002cba:	4b78      	ldr	r3, [pc, #480]	; (8002e9c <menu+0x1c9c>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b03      	cmp	r3, #3
 8002cc0:	d902      	bls.n	8002cc8 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002cc2:	4b76      	ldr	r3, [pc, #472]	; (8002e9c <menu+0x1c9c>)
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002cc8:	f001 fe66 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ccc:	2108      	movs	r1, #8
 8002cce:	4877      	ldr	r0, [pc, #476]	; (8002eac <menu+0x1cac>)
 8002cd0:	f006 fa38 	bl	8009144 <HAL_GPIO_ReadPin>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d11d      	bne.n	8002d16 <menu+0x1b16>
 8002cda:	4b75      	ldr	r3, [pc, #468]	; (8002eb0 <menu+0x1cb0>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	f083 0301 	eor.w	r3, r3, #1
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d016      	beq.n	8002d16 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002ce8:	4b6c      	ldr	r3, [pc, #432]	; (8002e9c <menu+0x1c9c>)
 8002cea:	781a      	ldrb	r2, [r3, #0]
 8002cec:	4b71      	ldr	r3, [pc, #452]	; (8002eb4 <menu+0x1cb4>)
 8002cee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002cf2:	4b6a      	ldr	r3, [pc, #424]	; (8002e9c <menu+0x1c9c>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <menu+0x1b02>
 8002cfa:	4b68      	ldr	r3, [pc, #416]	; (8002e9c <menu+0x1c9c>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d106      	bne.n	8002d10 <menu+0x1b10>
				altLimit = 1;
 8002d02:	4b6d      	ldr	r3, [pc, #436]	; (8002eb8 <menu+0x1cb8>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002d08:	4b6b      	ldr	r3, [pc, #428]	; (8002eb8 <menu+0x1cb8>)
 8002d0a:	781a      	ldrb	r2, [r3, #0]
 8002d0c:	4b69      	ldr	r3, [pc, #420]	; (8002eb4 <menu+0x1cb4>)
 8002d0e:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002d10:	4b6a      	ldr	r3, [pc, #424]	; (8002ebc <menu+0x1cbc>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002d16:	4b6a      	ldr	r3, [pc, #424]	; (8002ec0 <menu+0x1cc0>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b0f      	cmp	r3, #15
 8002d1c:	d17f      	bne.n	8002e1e <menu+0x1c1e>
		if(dilSecim == 0) {
 8002d1e:	4b60      	ldr	r3, [pc, #384]	; (8002ea0 <menu+0x1ca0>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10a      	bne.n	8002d3c <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002d26:	4a67      	ldr	r2, [pc, #412]	; (8002ec4 <menu+0x1cc4>)
 8002d28:	2101      	movs	r1, #1
 8002d2a:	2001      	movs	r0, #1
 8002d2c:	f004 fee4 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002d30:	4a65      	ldr	r2, [pc, #404]	; (8002ec8 <menu+0x1cc8>)
 8002d32:	2101      	movs	r1, #1
 8002d34:	2002      	movs	r0, #2
 8002d36:	f004 fedf 	bl	8007af8 <lcd_print>
 8002d3a:	e00d      	b.n	8002d58 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002d3c:	4b58      	ldr	r3, [pc, #352]	; (8002ea0 <menu+0x1ca0>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d109      	bne.n	8002d58 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002d44:	4a61      	ldr	r2, [pc, #388]	; (8002ecc <menu+0x1ccc>)
 8002d46:	2101      	movs	r1, #1
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f004 fed5 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002d4e:	4a60      	ldr	r2, [pc, #384]	; (8002ed0 <menu+0x1cd0>)
 8002d50:	2101      	movs	r1, #1
 8002d52:	2002      	movs	r0, #2
 8002d54:	f004 fed0 	bl	8007af8 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002d58:	4b5e      	ldr	r3, [pc, #376]	; (8002ed4 <menu+0x1cd4>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	220a      	movs	r2, #10
 8002d5e:	495e      	ldr	r1, [pc, #376]	; (8002ed8 <menu+0x1cd8>)
 8002d60:	4618      	mov	r0, r3
 8002d62:	f009 fa1b 	bl	800c19c <itoa>
		lcd_print(2,16,snum);
 8002d66:	4a5c      	ldr	r2, [pc, #368]	; (8002ed8 <menu+0x1cd8>)
 8002d68:	2110      	movs	r1, #16
 8002d6a:	2002      	movs	r0, #2
 8002d6c:	f004 fec4 	bl	8007af8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002d70:	2102      	movs	r1, #2
 8002d72:	484e      	ldr	r0, [pc, #312]	; (8002eac <menu+0x1cac>)
 8002d74:	f006 f9e6 	bl	8009144 <HAL_GPIO_ReadPin>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d119      	bne.n	8002db2 <menu+0x1bb2>
 8002d7e:	4b4c      	ldr	r3, [pc, #304]	; (8002eb0 <menu+0x1cb0>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	f083 0301 	eor.w	r3, r3, #1
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d012      	beq.n	8002db2 <menu+0x1bb2>
 8002d8c:	4b53      	ldr	r3, [pc, #332]	; (8002edc <menu+0x1cdc>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10e      	bne.n	8002db2 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002d94:	4b4f      	ldr	r3, [pc, #316]	; (8002ed4 <menu+0x1cd4>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	4b4d      	ldr	r3, [pc, #308]	; (8002ed4 <menu+0x1cd4>)
 8002d9e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002da0:	4b4c      	ldr	r3, [pc, #304]	; (8002ed4 <menu+0x1cd4>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d902      	bls.n	8002dae <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002da8:	4b4a      	ldr	r3, [pc, #296]	; (8002ed4 <menu+0x1cd4>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002dae:	f001 fdf3 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002db2:	2104      	movs	r1, #4
 8002db4:	483d      	ldr	r0, [pc, #244]	; (8002eac <menu+0x1cac>)
 8002db6:	f006 f9c5 	bl	8009144 <HAL_GPIO_ReadPin>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d119      	bne.n	8002df4 <menu+0x1bf4>
 8002dc0:	4b3b      	ldr	r3, [pc, #236]	; (8002eb0 <menu+0x1cb0>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	f083 0301 	eor.w	r3, r3, #1
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d012      	beq.n	8002df4 <menu+0x1bf4>
 8002dce:	4b43      	ldr	r3, [pc, #268]	; (8002edc <menu+0x1cdc>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10e      	bne.n	8002df4 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002dd6:	4b3f      	ldr	r3, [pc, #252]	; (8002ed4 <menu+0x1cd4>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	4b3d      	ldr	r3, [pc, #244]	; (8002ed4 <menu+0x1cd4>)
 8002de0:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002de2:	4b3c      	ldr	r3, [pc, #240]	; (8002ed4 <menu+0x1cd4>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b06      	cmp	r3, #6
 8002de8:	d902      	bls.n	8002df0 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 8002dea:	4b3a      	ldr	r3, [pc, #232]	; (8002ed4 <menu+0x1cd4>)
 8002dec:	2205      	movs	r2, #5
 8002dee:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002df0:	f001 fdd2 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002df4:	2108      	movs	r1, #8
 8002df6:	482d      	ldr	r0, [pc, #180]	; (8002eac <menu+0x1cac>)
 8002df8:	f006 f9a4 	bl	8009144 <HAL_GPIO_ReadPin>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d10d      	bne.n	8002e1e <menu+0x1c1e>
 8002e02:	4b2b      	ldr	r3, [pc, #172]	; (8002eb0 <menu+0x1cb0>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	f083 0301 	eor.w	r3, r3, #1
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d006      	beq.n	8002e1e <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8002e10:	4b30      	ldr	r3, [pc, #192]	; (8002ed4 <menu+0x1cd4>)
 8002e12:	781a      	ldrb	r2, [r3, #0]
 8002e14:	4b27      	ldr	r3, [pc, #156]	; (8002eb4 <menu+0x1cb4>)
 8002e16:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002e18:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <menu+0x1cbc>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002e1e:	4b28      	ldr	r3, [pc, #160]	; (8002ec0 <menu+0x1cc0>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b10      	cmp	r3, #16
 8002e24:	f040 80bc 	bne.w	8002fa0 <menu+0x1da0>
		if(dilSecim == 0) {
 8002e28:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <menu+0x1ca0>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d105      	bne.n	8002e3c <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8002e30:	4a2b      	ldr	r2, [pc, #172]	; (8002ee0 <menu+0x1ce0>)
 8002e32:	2101      	movs	r1, #1
 8002e34:	2001      	movs	r0, #1
 8002e36:	f004 fe5f 	bl	8007af8 <lcd_print>
 8002e3a:	e008      	b.n	8002e4e <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002e3c:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <menu+0x1ca0>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d104      	bne.n	8002e4e <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8002e44:	4a27      	ldr	r2, [pc, #156]	; (8002ee4 <menu+0x1ce4>)
 8002e46:	2101      	movs	r1, #1
 8002e48:	2001      	movs	r0, #1
 8002e4a:	f004 fe55 	bl	8007af8 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002e4e:	4b26      	ldr	r3, [pc, #152]	; (8002ee8 <menu+0x1ce8>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d113      	bne.n	8002e7e <menu+0x1c7e>
			if(dilSecim == 0) {
 8002e56:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <menu+0x1ca0>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d105      	bne.n	8002e6a <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002e5e:	4a11      	ldr	r2, [pc, #68]	; (8002ea4 <menu+0x1ca4>)
 8002e60:	2101      	movs	r1, #1
 8002e62:	2002      	movs	r0, #2
 8002e64:	f004 fe48 	bl	8007af8 <lcd_print>
 8002e68:	e04b      	b.n	8002f02 <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002e6a:	4b0d      	ldr	r3, [pc, #52]	; (8002ea0 <menu+0x1ca0>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d147      	bne.n	8002f02 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8002e72:	4a0d      	ldr	r2, [pc, #52]	; (8002ea8 <menu+0x1ca8>)
 8002e74:	2101      	movs	r1, #1
 8002e76:	2002      	movs	r0, #2
 8002e78:	f004 fe3e 	bl	8007af8 <lcd_print>
 8002e7c:	e041      	b.n	8002f02 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002e7e:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <menu+0x1ce8>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d13d      	bne.n	8002f02 <menu+0x1d02>
			if(dilSecim == 0) {
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <menu+0x1ca0>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d130      	bne.n	8002ef0 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002e8e:	4a17      	ldr	r2, [pc, #92]	; (8002eec <menu+0x1cec>)
 8002e90:	2101      	movs	r1, #1
 8002e92:	2002      	movs	r0, #2
 8002e94:	f004 fe30 	bl	8007af8 <lcd_print>
 8002e98:	e033      	b.n	8002f02 <menu+0x1d02>
 8002e9a:	bf00      	nop
 8002e9c:	20000229 	.word	0x20000229
 8002ea0:	2000023d 	.word	0x2000023d
 8002ea4:	0800d150 	.word	0x0800d150
 8002ea8:	0800d164 	.word	0x0800d164
 8002eac:	40010800 	.word	0x40010800
 8002eb0:	2000024b 	.word	0x2000024b
 8002eb4:	20000120 	.word	0x20000120
 8002eb8:	20000222 	.word	0x20000222
 8002ebc:	20000248 	.word	0x20000248
 8002ec0:	2000021c 	.word	0x2000021c
 8002ec4:	0800d4f0 	.word	0x0800d4f0
 8002ec8:	0800d3b4 	.word	0x0800d3b4
 8002ecc:	0800d504 	.word	0x0800d504
 8002ed0:	0800d3d8 	.word	0x0800d3d8
 8002ed4:	20000237 	.word	0x20000237
 8002ed8:	20000190 	.word	0x20000190
 8002edc:	20000227 	.word	0x20000227
 8002ee0:	0800d518 	.word	0x0800d518
 8002ee4:	0800d52c 	.word	0x0800d52c
 8002ee8:	2000022a 	.word	0x2000022a
 8002eec:	0800d1b0 	.word	0x0800d1b0
			} else if(dilSecim == 1) {
 8002ef0:	4b99      	ldr	r3, [pc, #612]	; (8003158 <menu+0x1f58>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d104      	bne.n	8002f02 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 8002ef8:	4a98      	ldr	r2, [pc, #608]	; (800315c <menu+0x1f5c>)
 8002efa:	2101      	movs	r1, #1
 8002efc:	2002      	movs	r0, #2
 8002efe:	f004 fdfb 	bl	8007af8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f02:	2102      	movs	r1, #2
 8002f04:	4896      	ldr	r0, [pc, #600]	; (8003160 <menu+0x1f60>)
 8002f06:	f006 f91d 	bl	8009144 <HAL_GPIO_ReadPin>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d115      	bne.n	8002f3c <menu+0x1d3c>
 8002f10:	4b94      	ldr	r3, [pc, #592]	; (8003164 <menu+0x1f64>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	f083 0301 	eor.w	r3, r3, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00e      	beq.n	8002f3c <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002f1e:	4b92      	ldr	r3, [pc, #584]	; (8003168 <menu+0x1f68>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	4b90      	ldr	r3, [pc, #576]	; (8003168 <menu+0x1f68>)
 8002f28:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002f2a:	4b8f      	ldr	r3, [pc, #572]	; (8003168 <menu+0x1f68>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d902      	bls.n	8002f38 <menu+0x1d38>
				yukariYavasLimit = 0;
 8002f32:	4b8d      	ldr	r3, [pc, #564]	; (8003168 <menu+0x1f68>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f38:	f001 fd2e 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f3c:	2104      	movs	r1, #4
 8002f3e:	4888      	ldr	r0, [pc, #544]	; (8003160 <menu+0x1f60>)
 8002f40:	f006 f900 	bl	8009144 <HAL_GPIO_ReadPin>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d115      	bne.n	8002f76 <menu+0x1d76>
 8002f4a:	4b86      	ldr	r3, [pc, #536]	; (8003164 <menu+0x1f64>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	f083 0301 	eor.w	r3, r3, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00e      	beq.n	8002f76 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002f58:	4b83      	ldr	r3, [pc, #524]	; (8003168 <menu+0x1f68>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	4b81      	ldr	r3, [pc, #516]	; (8003168 <menu+0x1f68>)
 8002f62:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002f64:	4b80      	ldr	r3, [pc, #512]	; (8003168 <menu+0x1f68>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8002f6c:	4b7e      	ldr	r3, [pc, #504]	; (8003168 <menu+0x1f68>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f72:	f001 fd11 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f76:	2108      	movs	r1, #8
 8002f78:	4879      	ldr	r0, [pc, #484]	; (8003160 <menu+0x1f60>)
 8002f7a:	f006 f8e3 	bl	8009144 <HAL_GPIO_ReadPin>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d10d      	bne.n	8002fa0 <menu+0x1da0>
 8002f84:	4b77      	ldr	r3, [pc, #476]	; (8003164 <menu+0x1f64>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	f083 0301 	eor.w	r3, r3, #1
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d006      	beq.n	8002fa0 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8002f92:	4b75      	ldr	r3, [pc, #468]	; (8003168 <menu+0x1f68>)
 8002f94:	781a      	ldrb	r2, [r3, #0]
 8002f96:	4b75      	ldr	r3, [pc, #468]	; (800316c <menu+0x1f6c>)
 8002f98:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002f9a:	4b75      	ldr	r3, [pc, #468]	; (8003170 <menu+0x1f70>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002fa0:	4b74      	ldr	r3, [pc, #464]	; (8003174 <menu+0x1f74>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b11      	cmp	r3, #17
 8002fa6:	f040 80c3 	bne.w	8003130 <menu+0x1f30>
		if(dilSecim == 0) {
 8002faa:	4b6b      	ldr	r3, [pc, #428]	; (8003158 <menu+0x1f58>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d105      	bne.n	8002fbe <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8002fb2:	4a71      	ldr	r2, [pc, #452]	; (8003178 <menu+0x1f78>)
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	2001      	movs	r0, #1
 8002fb8:	f004 fd9e 	bl	8007af8 <lcd_print>
 8002fbc:	e008      	b.n	8002fd0 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8002fbe:	4b66      	ldr	r3, [pc, #408]	; (8003158 <menu+0x1f58>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d104      	bne.n	8002fd0 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8002fc6:	4a6d      	ldr	r2, [pc, #436]	; (800317c <menu+0x1f7c>)
 8002fc8:	2101      	movs	r1, #1
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f004 fd94 	bl	8007af8 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002fd0:	4b6b      	ldr	r3, [pc, #428]	; (8003180 <menu+0x1f80>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d113      	bne.n	8003000 <menu+0x1e00>
			if(dilSecim == 0){
 8002fd8:	4b5f      	ldr	r3, [pc, #380]	; (8003158 <menu+0x1f58>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d105      	bne.n	8002fec <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8002fe0:	4a68      	ldr	r2, [pc, #416]	; (8003184 <menu+0x1f84>)
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	2002      	movs	r0, #2
 8002fe6:	f004 fd87 	bl	8007af8 <lcd_print>
 8002fea:	e038      	b.n	800305e <menu+0x1e5e>
			} else if(dilSecim == 1){
 8002fec:	4b5a      	ldr	r3, [pc, #360]	; (8003158 <menu+0x1f58>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d134      	bne.n	800305e <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8002ff4:	4a64      	ldr	r2, [pc, #400]	; (8003188 <menu+0x1f88>)
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	2002      	movs	r0, #2
 8002ffa:	f004 fd7d 	bl	8007af8 <lcd_print>
 8002ffe:	e02e      	b.n	800305e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003000:	4b5f      	ldr	r3, [pc, #380]	; (8003180 <menu+0x1f80>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d113      	bne.n	8003030 <menu+0x1e30>
			if(dilSecim == 0){
 8003008:	4b53      	ldr	r3, [pc, #332]	; (8003158 <menu+0x1f58>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d105      	bne.n	800301c <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003010:	4a5e      	ldr	r2, [pc, #376]	; (800318c <menu+0x1f8c>)
 8003012:	2101      	movs	r1, #1
 8003014:	2002      	movs	r0, #2
 8003016:	f004 fd6f 	bl	8007af8 <lcd_print>
 800301a:	e020      	b.n	800305e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800301c:	4b4e      	ldr	r3, [pc, #312]	; (8003158 <menu+0x1f58>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d11c      	bne.n	800305e <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8003024:	4a5a      	ldr	r2, [pc, #360]	; (8003190 <menu+0x1f90>)
 8003026:	2101      	movs	r1, #1
 8003028:	2002      	movs	r0, #2
 800302a:	f004 fd65 	bl	8007af8 <lcd_print>
 800302e:	e016      	b.n	800305e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003030:	4b53      	ldr	r3, [pc, #332]	; (8003180 <menu+0x1f80>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d112      	bne.n	800305e <menu+0x1e5e>
			if(dilSecim == 0) {
 8003038:	4b47      	ldr	r3, [pc, #284]	; (8003158 <menu+0x1f58>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d105      	bne.n	800304c <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8003040:	4a54      	ldr	r2, [pc, #336]	; (8003194 <menu+0x1f94>)
 8003042:	2101      	movs	r1, #1
 8003044:	2002      	movs	r0, #2
 8003046:	f004 fd57 	bl	8007af8 <lcd_print>
 800304a:	e008      	b.n	800305e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800304c:	4b42      	ldr	r3, [pc, #264]	; (8003158 <menu+0x1f58>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d104      	bne.n	800305e <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003054:	4a50      	ldr	r2, [pc, #320]	; (8003198 <menu+0x1f98>)
 8003056:	2101      	movs	r1, #1
 8003058:	2002      	movs	r0, #2
 800305a:	f004 fd4d 	bl	8007af8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800305e:	2102      	movs	r1, #2
 8003060:	483f      	ldr	r0, [pc, #252]	; (8003160 <menu+0x1f60>)
 8003062:	f006 f86f 	bl	8009144 <HAL_GPIO_ReadPin>
 8003066:	4603      	mov	r3, r0
 8003068:	2b01      	cmp	r3, #1
 800306a:	d115      	bne.n	8003098 <menu+0x1e98>
 800306c:	4b3d      	ldr	r3, [pc, #244]	; (8003164 <menu+0x1f64>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	f083 0301 	eor.w	r3, r3, #1
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00e      	beq.n	8003098 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800307a:	4b41      	ldr	r3, [pc, #260]	; (8003180 <menu+0x1f80>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	3301      	adds	r3, #1
 8003080:	b2da      	uxtb	r2, r3
 8003082:	4b3f      	ldr	r3, [pc, #252]	; (8003180 <menu+0x1f80>)
 8003084:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003086:	4b3e      	ldr	r3, [pc, #248]	; (8003180 <menu+0x1f80>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d902      	bls.n	8003094 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800308e:	4b3c      	ldr	r3, [pc, #240]	; (8003180 <menu+0x1f80>)
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003094:	f001 fc80 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003098:	2104      	movs	r1, #4
 800309a:	4831      	ldr	r0, [pc, #196]	; (8003160 <menu+0x1f60>)
 800309c:	f006 f852 	bl	8009144 <HAL_GPIO_ReadPin>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d115      	bne.n	80030d2 <menu+0x1ed2>
 80030a6:	4b2f      	ldr	r3, [pc, #188]	; (8003164 <menu+0x1f64>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	f083 0301 	eor.w	r3, r3, #1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00e      	beq.n	80030d2 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80030b4:	4b32      	ldr	r3, [pc, #200]	; (8003180 <menu+0x1f80>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	4b30      	ldr	r3, [pc, #192]	; (8003180 <menu+0x1f80>)
 80030be:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80030c0:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <menu+0x1f80>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d902      	bls.n	80030ce <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 80030c8:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <menu+0x1f80>)
 80030ca:	2202      	movs	r2, #2
 80030cc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030ce:	f001 fc63 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030d2:	2108      	movs	r1, #8
 80030d4:	4822      	ldr	r0, [pc, #136]	; (8003160 <menu+0x1f60>)
 80030d6:	f006 f835 	bl	8009144 <HAL_GPIO_ReadPin>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d127      	bne.n	8003130 <menu+0x1f30>
 80030e0:	4b20      	ldr	r3, [pc, #128]	; (8003164 <menu+0x1f64>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	f083 0301 	eor.w	r3, r3, #1
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d020      	beq.n	8003130 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <menu+0x1f80>)
 80030f0:	781a      	ldrb	r2, [r3, #0]
 80030f2:	4b1e      	ldr	r3, [pc, #120]	; (800316c <menu+0x1f6c>)
 80030f4:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80030f6:	4b22      	ldr	r3, [pc, #136]	; (8003180 <menu+0x1f80>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d003      	beq.n	8003106 <menu+0x1f06>
 80030fe:	4b20      	ldr	r3, [pc, #128]	; (8003180 <menu+0x1f80>)
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d106      	bne.n	8003114 <menu+0x1f14>
				calismaSekli = 0;
 8003106:	4b25      	ldr	r3, [pc, #148]	; (800319c <menu+0x1f9c>)
 8003108:	2200      	movs	r2, #0
 800310a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 800310c:	4b23      	ldr	r3, [pc, #140]	; (800319c <menu+0x1f9c>)
 800310e:	781a      	ldrb	r2, [r3, #0]
 8003110:	4b16      	ldr	r3, [pc, #88]	; (800316c <menu+0x1f6c>)
 8003112:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003114:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <menu+0x1f80>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d106      	bne.n	800312a <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 800311c:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <menu+0x1fa0>)
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003122:	4b1f      	ldr	r3, [pc, #124]	; (80031a0 <menu+0x1fa0>)
 8003124:	781a      	ldrb	r2, [r3, #0]
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <menu+0x1f6c>)
 8003128:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800312a:	4b11      	ldr	r3, [pc, #68]	; (8003170 <menu+0x1f70>)
 800312c:	2201      	movs	r2, #1
 800312e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003130:	4b10      	ldr	r3, [pc, #64]	; (8003174 <menu+0x1f74>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b12      	cmp	r3, #18
 8003136:	f040 80d5 	bne.w	80032e4 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800313a:	4b11      	ldr	r3, [pc, #68]	; (8003180 <menu+0x1f80>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b02      	cmp	r3, #2
 8003140:	d13c      	bne.n	80031bc <menu+0x1fbc>
			if(dilSecim == 0) {
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <menu+0x1f58>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d12e      	bne.n	80031a8 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800314a:	4a16      	ldr	r2, [pc, #88]	; (80031a4 <menu+0x1fa4>)
 800314c:	2101      	movs	r1, #1
 800314e:	2001      	movs	r0, #1
 8003150:	f004 fcd2 	bl	8007af8 <lcd_print>
 8003154:	e048      	b.n	80031e8 <menu+0x1fe8>
 8003156:	bf00      	nop
 8003158:	2000023d 	.word	0x2000023d
 800315c:	0800d1c4 	.word	0x0800d1c4
 8003160:	40010800 	.word	0x40010800
 8003164:	2000024b 	.word	0x2000024b
 8003168:	2000022a 	.word	0x2000022a
 800316c:	20000120 	.word	0x20000120
 8003170:	20000248 	.word	0x20000248
 8003174:	2000021c 	.word	0x2000021c
 8003178:	0800d540 	.word	0x0800d540
 800317c:	0800d554 	.word	0x0800d554
 8003180:	2000022b 	.word	0x2000022b
 8003184:	0800d568 	.word	0x0800d568
 8003188:	0800d578 	.word	0x0800d578
 800318c:	0800d588 	.word	0x0800d588
 8003190:	0800d598 	.word	0x0800d598
 8003194:	0800d150 	.word	0x0800d150
 8003198:	0800d164 	.word	0x0800d164
 800319c:	2000021d 	.word	0x2000021d
 80031a0:	2000022e 	.word	0x2000022e
 80031a4:	0800d5a8 	.word	0x0800d5a8
			} else if(dilSecim == 1) {
 80031a8:	4b7b      	ldr	r3, [pc, #492]	; (8003398 <menu+0x2198>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d11b      	bne.n	80031e8 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80031b0:	4a7a      	ldr	r2, [pc, #488]	; (800339c <menu+0x219c>)
 80031b2:	2101      	movs	r1, #1
 80031b4:	2001      	movs	r0, #1
 80031b6:	f004 fc9f 	bl	8007af8 <lcd_print>
 80031ba:	e015      	b.n	80031e8 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80031bc:	4b78      	ldr	r3, [pc, #480]	; (80033a0 <menu+0x21a0>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d111      	bne.n	80031e8 <menu+0x1fe8>
			if(dilSecim == 0){
 80031c4:	4b74      	ldr	r3, [pc, #464]	; (8003398 <menu+0x2198>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d104      	bne.n	80031d6 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80031cc:	4a75      	ldr	r2, [pc, #468]	; (80033a4 <menu+0x21a4>)
 80031ce:	2101      	movs	r1, #1
 80031d0:	2001      	movs	r0, #1
 80031d2:	f004 fc91 	bl	8007af8 <lcd_print>
			}
			if(dilSecim == 1){
 80031d6:	4b70      	ldr	r3, [pc, #448]	; (8003398 <menu+0x2198>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d104      	bne.n	80031e8 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80031de:	4a72      	ldr	r2, [pc, #456]	; (80033a8 <menu+0x21a8>)
 80031e0:	2101      	movs	r1, #1
 80031e2:	2001      	movs	r0, #1
 80031e4:	f004 fc88 	bl	8007af8 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80031e8:	4b70      	ldr	r3, [pc, #448]	; (80033ac <menu+0x21ac>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d113      	bne.n	8003218 <menu+0x2018>
			if(dilSecim == 0) {
 80031f0:	4b69      	ldr	r3, [pc, #420]	; (8003398 <menu+0x2198>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d105      	bne.n	8003204 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80031f8:	4a6d      	ldr	r2, [pc, #436]	; (80033b0 <menu+0x21b0>)
 80031fa:	2101      	movs	r1, #1
 80031fc:	2002      	movs	r0, #2
 80031fe:	f004 fc7b 	bl	8007af8 <lcd_print>
 8003202:	e020      	b.n	8003246 <menu+0x2046>
			} else if(dilSecim == 1){
 8003204:	4b64      	ldr	r3, [pc, #400]	; (8003398 <menu+0x2198>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d11c      	bne.n	8003246 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 800320c:	4a69      	ldr	r2, [pc, #420]	; (80033b4 <menu+0x21b4>)
 800320e:	2101      	movs	r1, #1
 8003210:	2002      	movs	r0, #2
 8003212:	f004 fc71 	bl	8007af8 <lcd_print>
 8003216:	e016      	b.n	8003246 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003218:	4b64      	ldr	r3, [pc, #400]	; (80033ac <menu+0x21ac>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d112      	bne.n	8003246 <menu+0x2046>
			if(dilSecim == 0){
 8003220:	4b5d      	ldr	r3, [pc, #372]	; (8003398 <menu+0x2198>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d105      	bne.n	8003234 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 8003228:	4a63      	ldr	r2, [pc, #396]	; (80033b8 <menu+0x21b8>)
 800322a:	2101      	movs	r1, #1
 800322c:	2002      	movs	r0, #2
 800322e:	f004 fc63 	bl	8007af8 <lcd_print>
 8003232:	e008      	b.n	8003246 <menu+0x2046>
			} else if(dilSecim == 1){
 8003234:	4b58      	ldr	r3, [pc, #352]	; (8003398 <menu+0x2198>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d104      	bne.n	8003246 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 800323c:	4a5f      	ldr	r2, [pc, #380]	; (80033bc <menu+0x21bc>)
 800323e:	2101      	movs	r1, #1
 8003240:	2002      	movs	r0, #2
 8003242:	f004 fc59 	bl	8007af8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003246:	2102      	movs	r1, #2
 8003248:	485d      	ldr	r0, [pc, #372]	; (80033c0 <menu+0x21c0>)
 800324a:	f005 ff7b 	bl	8009144 <HAL_GPIO_ReadPin>
 800324e:	4603      	mov	r3, r0
 8003250:	2b01      	cmp	r3, #1
 8003252:	d115      	bne.n	8003280 <menu+0x2080>
 8003254:	4b5b      	ldr	r3, [pc, #364]	; (80033c4 <menu+0x21c4>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	f083 0301 	eor.w	r3, r3, #1
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00e      	beq.n	8003280 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003262:	4b52      	ldr	r3, [pc, #328]	; (80033ac <menu+0x21ac>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	b2da      	uxtb	r2, r3
 800326a:	4b50      	ldr	r3, [pc, #320]	; (80033ac <menu+0x21ac>)
 800326c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800326e:	4b4f      	ldr	r3, [pc, #316]	; (80033ac <menu+0x21ac>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d902      	bls.n	800327c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003276:	4b4d      	ldr	r3, [pc, #308]	; (80033ac <menu+0x21ac>)
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800327c:	f001 fb8c 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003280:	2104      	movs	r1, #4
 8003282:	484f      	ldr	r0, [pc, #316]	; (80033c0 <menu+0x21c0>)
 8003284:	f005 ff5e 	bl	8009144 <HAL_GPIO_ReadPin>
 8003288:	4603      	mov	r3, r0
 800328a:	2b01      	cmp	r3, #1
 800328c:	d115      	bne.n	80032ba <menu+0x20ba>
 800328e:	4b4d      	ldr	r3, [pc, #308]	; (80033c4 <menu+0x21c4>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	f083 0301 	eor.w	r3, r3, #1
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00e      	beq.n	80032ba <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800329c:	4b43      	ldr	r3, [pc, #268]	; (80033ac <menu+0x21ac>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	4b41      	ldr	r3, [pc, #260]	; (80033ac <menu+0x21ac>)
 80032a6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80032a8:	4b40      	ldr	r3, [pc, #256]	; (80033ac <menu+0x21ac>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 80032b0:	4b3e      	ldr	r3, [pc, #248]	; (80033ac <menu+0x21ac>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032b6:	f001 fb6f 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ba:	2108      	movs	r1, #8
 80032bc:	4840      	ldr	r0, [pc, #256]	; (80033c0 <menu+0x21c0>)
 80032be:	f005 ff41 	bl	8009144 <HAL_GPIO_ReadPin>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d10d      	bne.n	80032e4 <menu+0x20e4>
 80032c8:	4b3e      	ldr	r3, [pc, #248]	; (80033c4 <menu+0x21c4>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	f083 0301 	eor.w	r3, r3, #1
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d006      	beq.n	80032e4 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 80032d6:	4b35      	ldr	r3, [pc, #212]	; (80033ac <menu+0x21ac>)
 80032d8:	781a      	ldrb	r2, [r3, #0]
 80032da:	4b3b      	ldr	r3, [pc, #236]	; (80033c8 <menu+0x21c8>)
 80032dc:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80032de:	4b3b      	ldr	r3, [pc, #236]	; (80033cc <menu+0x21cc>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80032e4:	4b3a      	ldr	r3, [pc, #232]	; (80033d0 <menu+0x21d0>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b13      	cmp	r3, #19
 80032ea:	f040 80d5 	bne.w	8003498 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80032ee:	4b2c      	ldr	r3, [pc, #176]	; (80033a0 <menu+0x21a0>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d113      	bne.n	800331e <menu+0x211e>
			if(dilSecim == 0) {
 80032f6:	4b28      	ldr	r3, [pc, #160]	; (8003398 <menu+0x2198>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d105      	bne.n	800330a <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80032fe:	4a35      	ldr	r2, [pc, #212]	; (80033d4 <menu+0x21d4>)
 8003300:	2101      	movs	r1, #1
 8003302:	2001      	movs	r0, #1
 8003304:	f004 fbf8 	bl	8007af8 <lcd_print>
 8003308:	e01f      	b.n	800334a <menu+0x214a>
			} else if(dilSecim == 1) {
 800330a:	4b23      	ldr	r3, [pc, #140]	; (8003398 <menu+0x2198>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d11b      	bne.n	800334a <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003312:	4a31      	ldr	r2, [pc, #196]	; (80033d8 <menu+0x21d8>)
 8003314:	2101      	movs	r1, #1
 8003316:	2001      	movs	r0, #1
 8003318:	f004 fbee 	bl	8007af8 <lcd_print>
 800331c:	e015      	b.n	800334a <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800331e:	4b20      	ldr	r3, [pc, #128]	; (80033a0 <menu+0x21a0>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d111      	bne.n	800334a <menu+0x214a>
			if(dilSecim == 0) {
 8003326:	4b1c      	ldr	r3, [pc, #112]	; (8003398 <menu+0x2198>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d104      	bne.n	8003338 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 800332e:	4a2b      	ldr	r2, [pc, #172]	; (80033dc <menu+0x21dc>)
 8003330:	2101      	movs	r1, #1
 8003332:	2001      	movs	r0, #1
 8003334:	f004 fbe0 	bl	8007af8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003338:	4b17      	ldr	r3, [pc, #92]	; (8003398 <menu+0x2198>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d104      	bne.n	800334a <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003340:	4a27      	ldr	r2, [pc, #156]	; (80033e0 <menu+0x21e0>)
 8003342:	2101      	movs	r1, #1
 8003344:	2001      	movs	r0, #1
 8003346:	f004 fbd7 	bl	8007af8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800334a:	4b26      	ldr	r3, [pc, #152]	; (80033e4 <menu+0x21e4>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d113      	bne.n	800337a <menu+0x217a>
			if(dilSecim == 0) {
 8003352:	4b11      	ldr	r3, [pc, #68]	; (8003398 <menu+0x2198>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d105      	bne.n	8003366 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800335a:	4a15      	ldr	r2, [pc, #84]	; (80033b0 <menu+0x21b0>)
 800335c:	2101      	movs	r1, #1
 800335e:	2002      	movs	r0, #2
 8003360:	f004 fbca 	bl	8007af8 <lcd_print>
 8003364:	e049      	b.n	80033fa <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003366:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <menu+0x2198>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d145      	bne.n	80033fa <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800336e:	4a11      	ldr	r2, [pc, #68]	; (80033b4 <menu+0x21b4>)
 8003370:	2101      	movs	r1, #1
 8003372:	2002      	movs	r0, #2
 8003374:	f004 fbc0 	bl	8007af8 <lcd_print>
 8003378:	e03f      	b.n	80033fa <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800337a:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <menu+0x21e4>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d13b      	bne.n	80033fa <menu+0x21fa>
			if(dilSecim == 0) {
 8003382:	4b05      	ldr	r3, [pc, #20]	; (8003398 <menu+0x2198>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d12e      	bne.n	80033e8 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800338a:	4a0b      	ldr	r2, [pc, #44]	; (80033b8 <menu+0x21b8>)
 800338c:	2101      	movs	r1, #1
 800338e:	2002      	movs	r0, #2
 8003390:	f004 fbb2 	bl	8007af8 <lcd_print>
 8003394:	e031      	b.n	80033fa <menu+0x21fa>
 8003396:	bf00      	nop
 8003398:	2000023d 	.word	0x2000023d
 800339c:	0800d5bc 	.word	0x0800d5bc
 80033a0:	2000022b 	.word	0x2000022b
 80033a4:	0800d5cc 	.word	0x0800d5cc
 80033a8:	0800d5e0 	.word	0x0800d5e0
 80033ac:	2000022c 	.word	0x2000022c
 80033b0:	0800d150 	.word	0x0800d150
 80033b4:	0800d164 	.word	0x0800d164
 80033b8:	0800d1b0 	.word	0x0800d1b0
 80033bc:	0800d1c4 	.word	0x0800d1c4
 80033c0:	40010800 	.word	0x40010800
 80033c4:	2000024b 	.word	0x2000024b
 80033c8:	20000120 	.word	0x20000120
 80033cc:	20000248 	.word	0x20000248
 80033d0:	2000021c 	.word	0x2000021c
 80033d4:	0800d5f4 	.word	0x0800d5f4
 80033d8:	0800d608 	.word	0x0800d608
 80033dc:	0800d61c 	.word	0x0800d61c
 80033e0:	0800d630 	.word	0x0800d630
 80033e4:	2000022d 	.word	0x2000022d
			} else if(dilSecim == 1) {
 80033e8:	4b90      	ldr	r3, [pc, #576]	; (800362c <menu+0x242c>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d104      	bne.n	80033fa <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80033f0:	4a8f      	ldr	r2, [pc, #572]	; (8003630 <menu+0x2430>)
 80033f2:	2101      	movs	r1, #1
 80033f4:	2002      	movs	r0, #2
 80033f6:	f004 fb7f 	bl	8007af8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033fa:	2102      	movs	r1, #2
 80033fc:	488d      	ldr	r0, [pc, #564]	; (8003634 <menu+0x2434>)
 80033fe:	f005 fea1 	bl	8009144 <HAL_GPIO_ReadPin>
 8003402:	4603      	mov	r3, r0
 8003404:	2b01      	cmp	r3, #1
 8003406:	d115      	bne.n	8003434 <menu+0x2234>
 8003408:	4b8b      	ldr	r3, [pc, #556]	; (8003638 <menu+0x2438>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	f083 0301 	eor.w	r3, r3, #1
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00e      	beq.n	8003434 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003416:	4b89      	ldr	r3, [pc, #548]	; (800363c <menu+0x243c>)
 8003418:	781b      	ldrb	r3, [r3, #0]
 800341a:	3301      	adds	r3, #1
 800341c:	b2da      	uxtb	r2, r3
 800341e:	4b87      	ldr	r3, [pc, #540]	; (800363c <menu+0x243c>)
 8003420:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003422:	4b86      	ldr	r3, [pc, #536]	; (800363c <menu+0x243c>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d902      	bls.n	8003430 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 800342a:	4b84      	ldr	r3, [pc, #528]	; (800363c <menu+0x243c>)
 800342c:	2200      	movs	r2, #0
 800342e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003430:	f001 fab2 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003434:	2104      	movs	r1, #4
 8003436:	487f      	ldr	r0, [pc, #508]	; (8003634 <menu+0x2434>)
 8003438:	f005 fe84 	bl	8009144 <HAL_GPIO_ReadPin>
 800343c:	4603      	mov	r3, r0
 800343e:	2b01      	cmp	r3, #1
 8003440:	d115      	bne.n	800346e <menu+0x226e>
 8003442:	4b7d      	ldr	r3, [pc, #500]	; (8003638 <menu+0x2438>)
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	f083 0301 	eor.w	r3, r3, #1
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00e      	beq.n	800346e <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003450:	4b7a      	ldr	r3, [pc, #488]	; (800363c <menu+0x243c>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	3b01      	subs	r3, #1
 8003456:	b2da      	uxtb	r2, r3
 8003458:	4b78      	ldr	r3, [pc, #480]	; (800363c <menu+0x243c>)
 800345a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 800345c:	4b77      	ldr	r3, [pc, #476]	; (800363c <menu+0x243c>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003464:	4b75      	ldr	r3, [pc, #468]	; (800363c <menu+0x243c>)
 8003466:	2201      	movs	r2, #1
 8003468:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800346a:	f001 fa95 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800346e:	2108      	movs	r1, #8
 8003470:	4870      	ldr	r0, [pc, #448]	; (8003634 <menu+0x2434>)
 8003472:	f005 fe67 	bl	8009144 <HAL_GPIO_ReadPin>
 8003476:	4603      	mov	r3, r0
 8003478:	2b01      	cmp	r3, #1
 800347a:	d10d      	bne.n	8003498 <menu+0x2298>
 800347c:	4b6e      	ldr	r3, [pc, #440]	; (8003638 <menu+0x2438>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	f083 0301 	eor.w	r3, r3, #1
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d006      	beq.n	8003498 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800348a:	4b6c      	ldr	r3, [pc, #432]	; (800363c <menu+0x243c>)
 800348c:	781a      	ldrb	r2, [r3, #0]
 800348e:	4b6c      	ldr	r3, [pc, #432]	; (8003640 <menu+0x2440>)
 8003490:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003492:	4b6c      	ldr	r3, [pc, #432]	; (8003644 <menu+0x2444>)
 8003494:	2201      	movs	r2, #1
 8003496:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003498:	4b6b      	ldr	r3, [pc, #428]	; (8003648 <menu+0x2448>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b14      	cmp	r3, #20
 800349e:	f040 80b5 	bne.w	800360c <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 80034a2:	4b6a      	ldr	r3, [pc, #424]	; (800364c <menu+0x244c>)
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d113      	bne.n	80034d2 <menu+0x22d2>
			if(dilSecim == 0) {
 80034aa:	4b60      	ldr	r3, [pc, #384]	; (800362c <menu+0x242c>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d105      	bne.n	80034be <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 80034b2:	4a67      	ldr	r2, [pc, #412]	; (8003650 <menu+0x2450>)
 80034b4:	2101      	movs	r1, #1
 80034b6:	2001      	movs	r0, #1
 80034b8:	f004 fb1e 	bl	8007af8 <lcd_print>
 80034bc:	e020      	b.n	8003500 <menu+0x2300>
			} else if(dilSecim == 1) {
 80034be:	4b5b      	ldr	r3, [pc, #364]	; (800362c <menu+0x242c>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d11c      	bne.n	8003500 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 80034c6:	4a63      	ldr	r2, [pc, #396]	; (8003654 <menu+0x2454>)
 80034c8:	2101      	movs	r1, #1
 80034ca:	2001      	movs	r0, #1
 80034cc:	f004 fb14 	bl	8007af8 <lcd_print>
 80034d0:	e016      	b.n	8003500 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 80034d2:	4b5e      	ldr	r3, [pc, #376]	; (800364c <menu+0x244c>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d112      	bne.n	8003500 <menu+0x2300>
			if(dilSecim == 0) {
 80034da:	4b54      	ldr	r3, [pc, #336]	; (800362c <menu+0x242c>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d105      	bne.n	80034ee <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 80034e2:	4a5d      	ldr	r2, [pc, #372]	; (8003658 <menu+0x2458>)
 80034e4:	2101      	movs	r1, #1
 80034e6:	2001      	movs	r0, #1
 80034e8:	f004 fb06 	bl	8007af8 <lcd_print>
 80034ec:	e008      	b.n	8003500 <menu+0x2300>
			} else if(dilSecim == 1) {
 80034ee:	4b4f      	ldr	r3, [pc, #316]	; (800362c <menu+0x242c>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d104      	bne.n	8003500 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80034f6:	4a59      	ldr	r2, [pc, #356]	; (800365c <menu+0x245c>)
 80034f8:	2101      	movs	r1, #1
 80034fa:	2001      	movs	r0, #1
 80034fc:	f004 fafc 	bl	8007af8 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003500:	4b57      	ldr	r3, [pc, #348]	; (8003660 <menu+0x2460>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d113      	bne.n	8003530 <menu+0x2330>
			if(dilSecim == 0) {
 8003508:	4b48      	ldr	r3, [pc, #288]	; (800362c <menu+0x242c>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d105      	bne.n	800351c <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003510:	4a54      	ldr	r2, [pc, #336]	; (8003664 <menu+0x2464>)
 8003512:	2101      	movs	r1, #1
 8003514:	2002      	movs	r0, #2
 8003516:	f004 faef 	bl	8007af8 <lcd_print>
 800351a:	e020      	b.n	800355e <menu+0x235e>
			} else if(dilSecim == 1) {
 800351c:	4b43      	ldr	r3, [pc, #268]	; (800362c <menu+0x242c>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d11c      	bne.n	800355e <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003524:	4a50      	ldr	r2, [pc, #320]	; (8003668 <menu+0x2468>)
 8003526:	2101      	movs	r1, #1
 8003528:	2002      	movs	r0, #2
 800352a:	f004 fae5 	bl	8007af8 <lcd_print>
 800352e:	e016      	b.n	800355e <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003530:	4b4b      	ldr	r3, [pc, #300]	; (8003660 <menu+0x2460>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d112      	bne.n	800355e <menu+0x235e>
			if(dilSecim == 0) {
 8003538:	4b3c      	ldr	r3, [pc, #240]	; (800362c <menu+0x242c>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d105      	bne.n	800354c <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003540:	4a4a      	ldr	r2, [pc, #296]	; (800366c <menu+0x246c>)
 8003542:	2101      	movs	r1, #1
 8003544:	2002      	movs	r0, #2
 8003546:	f004 fad7 	bl	8007af8 <lcd_print>
 800354a:	e008      	b.n	800355e <menu+0x235e>
			} else if(dilSecim == 1) {
 800354c:	4b37      	ldr	r3, [pc, #220]	; (800362c <menu+0x242c>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d104      	bne.n	800355e <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003554:	4a46      	ldr	r2, [pc, #280]	; (8003670 <menu+0x2470>)
 8003556:	2101      	movs	r1, #1
 8003558:	2002      	movs	r0, #2
 800355a:	f004 facd 	bl	8007af8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800355e:	2102      	movs	r1, #2
 8003560:	4834      	ldr	r0, [pc, #208]	; (8003634 <menu+0x2434>)
 8003562:	f005 fdef 	bl	8009144 <HAL_GPIO_ReadPin>
 8003566:	4603      	mov	r3, r0
 8003568:	2b01      	cmp	r3, #1
 800356a:	d119      	bne.n	80035a0 <menu+0x23a0>
 800356c:	4b32      	ldr	r3, [pc, #200]	; (8003638 <menu+0x2438>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	f083 0301 	eor.w	r3, r3, #1
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d012      	beq.n	80035a0 <menu+0x23a0>
 800357a:	4b34      	ldr	r3, [pc, #208]	; (800364c <menu+0x244c>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b02      	cmp	r3, #2
 8003580:	d10e      	bne.n	80035a0 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003582:	4b37      	ldr	r3, [pc, #220]	; (8003660 <menu+0x2460>)
 8003584:	781b      	ldrb	r3, [r3, #0]
 8003586:	3301      	adds	r3, #1
 8003588:	b2da      	uxtb	r2, r3
 800358a:	4b35      	ldr	r3, [pc, #212]	; (8003660 <menu+0x2460>)
 800358c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800358e:	4b34      	ldr	r3, [pc, #208]	; (8003660 <menu+0x2460>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d902      	bls.n	800359c <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003596:	4b32      	ldr	r3, [pc, #200]	; (8003660 <menu+0x2460>)
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800359c:	f001 f9fc 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80035a0:	2104      	movs	r1, #4
 80035a2:	4824      	ldr	r0, [pc, #144]	; (8003634 <menu+0x2434>)
 80035a4:	f005 fdce 	bl	8009144 <HAL_GPIO_ReadPin>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d119      	bne.n	80035e2 <menu+0x23e2>
 80035ae:	4b22      	ldr	r3, [pc, #136]	; (8003638 <menu+0x2438>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	f083 0301 	eor.w	r3, r3, #1
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d012      	beq.n	80035e2 <menu+0x23e2>
 80035bc:	4b23      	ldr	r3, [pc, #140]	; (800364c <menu+0x244c>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d10e      	bne.n	80035e2 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80035c4:	4b26      	ldr	r3, [pc, #152]	; (8003660 <menu+0x2460>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	4b24      	ldr	r3, [pc, #144]	; (8003660 <menu+0x2460>)
 80035ce:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80035d0:	4b23      	ldr	r3, [pc, #140]	; (8003660 <menu+0x2460>)
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 80035d8:	4b21      	ldr	r3, [pc, #132]	; (8003660 <menu+0x2460>)
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035de:	f001 f9db 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035e2:	2108      	movs	r1, #8
 80035e4:	4813      	ldr	r0, [pc, #76]	; (8003634 <menu+0x2434>)
 80035e6:	f005 fdad 	bl	8009144 <HAL_GPIO_ReadPin>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d10d      	bne.n	800360c <menu+0x240c>
 80035f0:	4b11      	ldr	r3, [pc, #68]	; (8003638 <menu+0x2438>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	f083 0301 	eor.w	r3, r3, #1
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d006      	beq.n	800360c <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80035fe:	4b18      	ldr	r3, [pc, #96]	; (8003660 <menu+0x2460>)
 8003600:	781a      	ldrb	r2, [r3, #0]
 8003602:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <menu+0x2440>)
 8003604:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003606:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <menu+0x2444>)
 8003608:	2201      	movs	r2, #1
 800360a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800360c:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <menu+0x2448>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b15      	cmp	r3, #21
 8003612:	f040 80c2 	bne.w	800379a <menu+0x259a>
		if(dilSecim == 0) {
 8003616:	4b05      	ldr	r3, [pc, #20]	; (800362c <menu+0x242c>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d12c      	bne.n	8003678 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800361e:	4a15      	ldr	r2, [pc, #84]	; (8003674 <menu+0x2474>)
 8003620:	2101      	movs	r1, #1
 8003622:	2001      	movs	r0, #1
 8003624:	f004 fa68 	bl	8007af8 <lcd_print>
 8003628:	e02f      	b.n	800368a <menu+0x248a>
 800362a:	bf00      	nop
 800362c:	2000023d 	.word	0x2000023d
 8003630:	0800d1c4 	.word	0x0800d1c4
 8003634:	40010800 	.word	0x40010800
 8003638:	2000024b 	.word	0x2000024b
 800363c:	2000022d 	.word	0x2000022d
 8003640:	20000120 	.word	0x20000120
 8003644:	20000248 	.word	0x20000248
 8003648:	2000021c 	.word	0x2000021c
 800364c:	2000022b 	.word	0x2000022b
 8003650:	0800d644 	.word	0x0800d644
 8003654:	0800d658 	.word	0x0800d658
 8003658:	0800d66c 	.word	0x0800d66c
 800365c:	0800d680 	.word	0x0800d680
 8003660:	2000022e 	.word	0x2000022e
 8003664:	0800d694 	.word	0x0800d694
 8003668:	0800d6a8 	.word	0x0800d6a8
 800366c:	0800d6b8 	.word	0x0800d6b8
 8003670:	0800d6cc 	.word	0x0800d6cc
 8003674:	0800d6dc 	.word	0x0800d6dc
		} else if(dilSecim == 1) {
 8003678:	4b9c      	ldr	r3, [pc, #624]	; (80038ec <menu+0x26ec>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b01      	cmp	r3, #1
 800367e:	d104      	bne.n	800368a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003680:	4a9b      	ldr	r2, [pc, #620]	; (80038f0 <menu+0x26f0>)
 8003682:	2101      	movs	r1, #1
 8003684:	2001      	movs	r0, #1
 8003686:	f004 fa37 	bl	8007af8 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800368a:	4b9a      	ldr	r3, [pc, #616]	; (80038f4 <menu+0x26f4>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d112      	bne.n	80036b8 <menu+0x24b8>
			if(dilSecim == 0) {
 8003692:	4b96      	ldr	r3, [pc, #600]	; (80038ec <menu+0x26ec>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d104      	bne.n	80036a4 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 800369a:	4a97      	ldr	r2, [pc, #604]	; (80038f8 <menu+0x26f8>)
 800369c:	2101      	movs	r1, #1
 800369e:	2002      	movs	r0, #2
 80036a0:	f004 fa2a 	bl	8007af8 <lcd_print>
			}
			if(dilSecim == 1) {
 80036a4:	4b91      	ldr	r3, [pc, #580]	; (80038ec <menu+0x26ec>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d11c      	bne.n	80036e6 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 80036ac:	4a93      	ldr	r2, [pc, #588]	; (80038fc <menu+0x26fc>)
 80036ae:	2101      	movs	r1, #1
 80036b0:	2002      	movs	r0, #2
 80036b2:	f004 fa21 	bl	8007af8 <lcd_print>
 80036b6:	e016      	b.n	80036e6 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 80036b8:	4b8e      	ldr	r3, [pc, #568]	; (80038f4 <menu+0x26f4>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d112      	bne.n	80036e6 <menu+0x24e6>
			if(dilSecim == 0) {
 80036c0:	4b8a      	ldr	r3, [pc, #552]	; (80038ec <menu+0x26ec>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d105      	bne.n	80036d4 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 80036c8:	4a8d      	ldr	r2, [pc, #564]	; (8003900 <menu+0x2700>)
 80036ca:	2101      	movs	r1, #1
 80036cc:	2002      	movs	r0, #2
 80036ce:	f004 fa13 	bl	8007af8 <lcd_print>
 80036d2:	e008      	b.n	80036e6 <menu+0x24e6>
			} else if(dilSecim == 1) {
 80036d4:	4b85      	ldr	r3, [pc, #532]	; (80038ec <menu+0x26ec>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d104      	bne.n	80036e6 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 80036dc:	4a89      	ldr	r2, [pc, #548]	; (8003904 <menu+0x2704>)
 80036de:	2101      	movs	r1, #1
 80036e0:	2002      	movs	r0, #2
 80036e2:	f004 fa09 	bl	8007af8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036e6:	2102      	movs	r1, #2
 80036e8:	4887      	ldr	r0, [pc, #540]	; (8003908 <menu+0x2708>)
 80036ea:	f005 fd2b 	bl	8009144 <HAL_GPIO_ReadPin>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d115      	bne.n	8003720 <menu+0x2520>
 80036f4:	4b85      	ldr	r3, [pc, #532]	; (800390c <menu+0x270c>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	f083 0301 	eor.w	r3, r3, #1
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00e      	beq.n	8003720 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003702:	4b7c      	ldr	r3, [pc, #496]	; (80038f4 <menu+0x26f4>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	3301      	adds	r3, #1
 8003708:	b2da      	uxtb	r2, r3
 800370a:	4b7a      	ldr	r3, [pc, #488]	; (80038f4 <menu+0x26f4>)
 800370c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800370e:	4b79      	ldr	r3, [pc, #484]	; (80038f4 <menu+0x26f4>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d902      	bls.n	800371c <menu+0x251c>
				platformSilindirTipi = 0;
 8003716:	4b77      	ldr	r3, [pc, #476]	; (80038f4 <menu+0x26f4>)
 8003718:	2200      	movs	r2, #0
 800371a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800371c:	f001 f93c 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003720:	2104      	movs	r1, #4
 8003722:	4879      	ldr	r0, [pc, #484]	; (8003908 <menu+0x2708>)
 8003724:	f005 fd0e 	bl	8009144 <HAL_GPIO_ReadPin>
 8003728:	4603      	mov	r3, r0
 800372a:	2b01      	cmp	r3, #1
 800372c:	d115      	bne.n	800375a <menu+0x255a>
 800372e:	4b77      	ldr	r3, [pc, #476]	; (800390c <menu+0x270c>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	f083 0301 	eor.w	r3, r3, #1
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00e      	beq.n	800375a <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 800373c:	4b6d      	ldr	r3, [pc, #436]	; (80038f4 <menu+0x26f4>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	3b01      	subs	r3, #1
 8003742:	b2da      	uxtb	r2, r3
 8003744:	4b6b      	ldr	r3, [pc, #428]	; (80038f4 <menu+0x26f4>)
 8003746:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003748:	4b6a      	ldr	r3, [pc, #424]	; (80038f4 <menu+0x26f4>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d002      	beq.n	8003756 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003750:	4b68      	ldr	r3, [pc, #416]	; (80038f4 <menu+0x26f4>)
 8003752:	2201      	movs	r2, #1
 8003754:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003756:	f001 f91f 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800375a:	2108      	movs	r1, #8
 800375c:	486a      	ldr	r0, [pc, #424]	; (8003908 <menu+0x2708>)
 800375e:	f005 fcf1 	bl	8009144 <HAL_GPIO_ReadPin>
 8003762:	4603      	mov	r3, r0
 8003764:	2b01      	cmp	r3, #1
 8003766:	d118      	bne.n	800379a <menu+0x259a>
 8003768:	4b68      	ldr	r3, [pc, #416]	; (800390c <menu+0x270c>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	f083 0301 	eor.w	r3, r3, #1
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d011      	beq.n	800379a <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003776:	4b5f      	ldr	r3, [pc, #380]	; (80038f4 <menu+0x26f4>)
 8003778:	781a      	ldrb	r2, [r3, #0]
 800377a:	4b65      	ldr	r3, [pc, #404]	; (8003910 <menu+0x2710>)
 800377c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 800377e:	4b5d      	ldr	r3, [pc, #372]	; (80038f4 <menu+0x26f4>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d106      	bne.n	8003794 <menu+0x2594>
				altLimit = 1;
 8003786:	4b63      	ldr	r3, [pc, #396]	; (8003914 <menu+0x2714>)
 8003788:	2201      	movs	r2, #1
 800378a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800378c:	4b61      	ldr	r3, [pc, #388]	; (8003914 <menu+0x2714>)
 800378e:	781a      	ldrb	r2, [r3, #0]
 8003790:	4b5f      	ldr	r3, [pc, #380]	; (8003910 <menu+0x2710>)
 8003792:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003794:	4b60      	ldr	r3, [pc, #384]	; (8003918 <menu+0x2718>)
 8003796:	2201      	movs	r2, #1
 8003798:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 800379a:	4b60      	ldr	r3, [pc, #384]	; (800391c <menu+0x271c>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b16      	cmp	r3, #22
 80037a0:	f040 8081 	bne.w	80038a6 <menu+0x26a6>
		if(dilSecim == 0) {
 80037a4:	4b51      	ldr	r3, [pc, #324]	; (80038ec <menu+0x26ec>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d105      	bne.n	80037b8 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 80037ac:	4a5c      	ldr	r2, [pc, #368]	; (8003920 <menu+0x2720>)
 80037ae:	2101      	movs	r1, #1
 80037b0:	2001      	movs	r0, #1
 80037b2:	f004 f9a1 	bl	8007af8 <lcd_print>
 80037b6:	e008      	b.n	80037ca <menu+0x25ca>
		} else if(dilSecim == 1) {
 80037b8:	4b4c      	ldr	r3, [pc, #304]	; (80038ec <menu+0x26ec>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d104      	bne.n	80037ca <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 80037c0:	4a58      	ldr	r2, [pc, #352]	; (8003924 <menu+0x2724>)
 80037c2:	2101      	movs	r1, #1
 80037c4:	2001      	movs	r0, #1
 80037c6:	f004 f997 	bl	8007af8 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 80037ca:	4b48      	ldr	r3, [pc, #288]	; (80038ec <menu+0x26ec>)
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d105      	bne.n	80037de <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 80037d2:	4a55      	ldr	r2, [pc, #340]	; (8003928 <menu+0x2728>)
 80037d4:	2101      	movs	r1, #1
 80037d6:	2002      	movs	r0, #2
 80037d8:	f004 f98e 	bl	8007af8 <lcd_print>
 80037dc:	e008      	b.n	80037f0 <menu+0x25f0>
			} else if(dilSecim == 1){
 80037de:	4b43      	ldr	r3, [pc, #268]	; (80038ec <menu+0x26ec>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d104      	bne.n	80037f0 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 80037e6:	4a51      	ldr	r2, [pc, #324]	; (800392c <menu+0x272c>)
 80037e8:	2101      	movs	r1, #1
 80037ea:	2002      	movs	r0, #2
 80037ec:	f004 f984 	bl	8007af8 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 80037f0:	4b4f      	ldr	r3, [pc, #316]	; (8003930 <menu+0x2730>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	220a      	movs	r2, #10
 80037f6:	494f      	ldr	r1, [pc, #316]	; (8003934 <menu+0x2734>)
 80037f8:	4618      	mov	r0, r3
 80037fa:	f008 fccf 	bl	800c19c <itoa>
		lcd_print(2,16,snum);
 80037fe:	4a4d      	ldr	r2, [pc, #308]	; (8003934 <menu+0x2734>)
 8003800:	2110      	movs	r1, #16
 8003802:	2002      	movs	r0, #2
 8003804:	f004 f978 	bl	8007af8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003808:	2102      	movs	r1, #2
 800380a:	483f      	ldr	r0, [pc, #252]	; (8003908 <menu+0x2708>)
 800380c:	f005 fc9a 	bl	8009144 <HAL_GPIO_ReadPin>
 8003810:	4603      	mov	r3, r0
 8003812:	2b01      	cmp	r3, #1
 8003814:	d115      	bne.n	8003842 <menu+0x2642>
 8003816:	4b3d      	ldr	r3, [pc, #244]	; (800390c <menu+0x270c>)
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	f083 0301 	eor.w	r3, r3, #1
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00e      	beq.n	8003842 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003824:	4b42      	ldr	r3, [pc, #264]	; (8003930 <menu+0x2730>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	3301      	adds	r3, #1
 800382a:	b2da      	uxtb	r2, r3
 800382c:	4b40      	ldr	r3, [pc, #256]	; (8003930 <menu+0x2730>)
 800382e:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003830:	4b3f      	ldr	r3, [pc, #252]	; (8003930 <menu+0x2730>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2b05      	cmp	r3, #5
 8003836:	d902      	bls.n	800383e <menu+0x263e>
				yukariValfTmr = 0;
 8003838:	4b3d      	ldr	r3, [pc, #244]	; (8003930 <menu+0x2730>)
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800383e:	f001 f8ab 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003842:	2104      	movs	r1, #4
 8003844:	4830      	ldr	r0, [pc, #192]	; (8003908 <menu+0x2708>)
 8003846:	f005 fc7d 	bl	8009144 <HAL_GPIO_ReadPin>
 800384a:	4603      	mov	r3, r0
 800384c:	2b01      	cmp	r3, #1
 800384e:	d115      	bne.n	800387c <menu+0x267c>
 8003850:	4b2e      	ldr	r3, [pc, #184]	; (800390c <menu+0x270c>)
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	f083 0301 	eor.w	r3, r3, #1
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00e      	beq.n	800387c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 800385e:	4b34      	ldr	r3, [pc, #208]	; (8003930 <menu+0x2730>)
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	3b01      	subs	r3, #1
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4b32      	ldr	r3, [pc, #200]	; (8003930 <menu+0x2730>)
 8003868:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 800386a:	4b31      	ldr	r3, [pc, #196]	; (8003930 <menu+0x2730>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b06      	cmp	r3, #6
 8003870:	d902      	bls.n	8003878 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003872:	4b2f      	ldr	r3, [pc, #188]	; (8003930 <menu+0x2730>)
 8003874:	2205      	movs	r2, #5
 8003876:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003878:	f001 f88e 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800387c:	2108      	movs	r1, #8
 800387e:	4822      	ldr	r0, [pc, #136]	; (8003908 <menu+0x2708>)
 8003880:	f005 fc60 	bl	8009144 <HAL_GPIO_ReadPin>
 8003884:	4603      	mov	r3, r0
 8003886:	2b01      	cmp	r3, #1
 8003888:	d10d      	bne.n	80038a6 <menu+0x26a6>
 800388a:	4b20      	ldr	r3, [pc, #128]	; (800390c <menu+0x270c>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	f083 0301 	eor.w	r3, r3, #1
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d006      	beq.n	80038a6 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003898:	4b25      	ldr	r3, [pc, #148]	; (8003930 <menu+0x2730>)
 800389a:	781a      	ldrb	r2, [r3, #0]
 800389c:	4b1c      	ldr	r3, [pc, #112]	; (8003910 <menu+0x2710>)
 800389e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <menu+0x2718>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80038a6:	4b1d      	ldr	r3, [pc, #116]	; (800391c <menu+0x271c>)
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b17      	cmp	r3, #23
 80038ac:	f040 80ac 	bne.w	8003a08 <menu+0x2808>
		if(dilSecim == 0) {
 80038b0:	4b0e      	ldr	r3, [pc, #56]	; (80038ec <menu+0x26ec>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d105      	bne.n	80038c4 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 80038b8:	4a1f      	ldr	r2, [pc, #124]	; (8003938 <menu+0x2738>)
 80038ba:	2101      	movs	r1, #1
 80038bc:	2001      	movs	r0, #1
 80038be:	f004 f91b 	bl	8007af8 <lcd_print>
 80038c2:	e008      	b.n	80038d6 <menu+0x26d6>
		} else if(dilSecim == 1) {
 80038c4:	4b09      	ldr	r3, [pc, #36]	; (80038ec <menu+0x26ec>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d104      	bne.n	80038d6 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 80038cc:	4a1b      	ldr	r2, [pc, #108]	; (800393c <menu+0x273c>)
 80038ce:	2101      	movs	r1, #1
 80038d0:	2001      	movs	r0, #1
 80038d2:	f004 f911 	bl	8007af8 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 80038d6:	4b05      	ldr	r3, [pc, #20]	; (80038ec <menu+0x26ec>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d130      	bne.n	8003940 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 80038de:	4a12      	ldr	r2, [pc, #72]	; (8003928 <menu+0x2728>)
 80038e0:	2101      	movs	r1, #1
 80038e2:	2002      	movs	r0, #2
 80038e4:	f004 f908 	bl	8007af8 <lcd_print>
 80038e8:	e033      	b.n	8003952 <menu+0x2752>
 80038ea:	bf00      	nop
 80038ec:	2000023d 	.word	0x2000023d
 80038f0:	0800d6f0 	.word	0x0800d6f0
 80038f4:	2000022f 	.word	0x2000022f
 80038f8:	0800d694 	.word	0x0800d694
 80038fc:	0800d6a8 	.word	0x0800d6a8
 8003900:	0800d6b8 	.word	0x0800d6b8
 8003904:	0800d6cc 	.word	0x0800d6cc
 8003908:	40010800 	.word	0x40010800
 800390c:	2000024b 	.word	0x2000024b
 8003910:	20000120 	.word	0x20000120
 8003914:	20000222 	.word	0x20000222
 8003918:	20000248 	.word	0x20000248
 800391c:	2000021c 	.word	0x2000021c
 8003920:	0800d700 	.word	0x0800d700
 8003924:	0800d714 	.word	0x0800d714
 8003928:	0800d3b4 	.word	0x0800d3b4
 800392c:	0800d728 	.word	0x0800d728
 8003930:	20000230 	.word	0x20000230
 8003934:	20000190 	.word	0x20000190
 8003938:	0800d738 	.word	0x0800d738
 800393c:	0800d74c 	.word	0x0800d74c
			} else if(dilSecim == 1) {
 8003940:	4b98      	ldr	r3, [pc, #608]	; (8003ba4 <menu+0x29a4>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d104      	bne.n	8003952 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003948:	4a97      	ldr	r2, [pc, #604]	; (8003ba8 <menu+0x29a8>)
 800394a:	2101      	movs	r1, #1
 800394c:	2002      	movs	r0, #2
 800394e:	f004 f8d3 	bl	8007af8 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003952:	4b96      	ldr	r3, [pc, #600]	; (8003bac <menu+0x29ac>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	220a      	movs	r2, #10
 8003958:	4995      	ldr	r1, [pc, #596]	; (8003bb0 <menu+0x29b0>)
 800395a:	4618      	mov	r0, r3
 800395c:	f008 fc1e 	bl	800c19c <itoa>
		lcd_print(2,16,snum);
 8003960:	4a93      	ldr	r2, [pc, #588]	; (8003bb0 <menu+0x29b0>)
 8003962:	2110      	movs	r1, #16
 8003964:	2002      	movs	r0, #2
 8003966:	f004 f8c7 	bl	8007af8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800396a:	2102      	movs	r1, #2
 800396c:	4891      	ldr	r0, [pc, #580]	; (8003bb4 <menu+0x29b4>)
 800396e:	f005 fbe9 	bl	8009144 <HAL_GPIO_ReadPin>
 8003972:	4603      	mov	r3, r0
 8003974:	2b01      	cmp	r3, #1
 8003976:	d115      	bne.n	80039a4 <menu+0x27a4>
 8003978:	4b8f      	ldr	r3, [pc, #572]	; (8003bb8 <menu+0x29b8>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	f083 0301 	eor.w	r3, r3, #1
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00e      	beq.n	80039a4 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003986:	4b89      	ldr	r3, [pc, #548]	; (8003bac <menu+0x29ac>)
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	3301      	adds	r3, #1
 800398c:	b2da      	uxtb	r2, r3
 800398e:	4b87      	ldr	r3, [pc, #540]	; (8003bac <menu+0x29ac>)
 8003990:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003992:	4b86      	ldr	r3, [pc, #536]	; (8003bac <menu+0x29ac>)
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	2b05      	cmp	r3, #5
 8003998:	d902      	bls.n	80039a0 <menu+0x27a0>
				asagiValfTmr = 0;
 800399a:	4b84      	ldr	r3, [pc, #528]	; (8003bac <menu+0x29ac>)
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039a0:	f000 fffa 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039a4:	2104      	movs	r1, #4
 80039a6:	4883      	ldr	r0, [pc, #524]	; (8003bb4 <menu+0x29b4>)
 80039a8:	f005 fbcc 	bl	8009144 <HAL_GPIO_ReadPin>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d115      	bne.n	80039de <menu+0x27de>
 80039b2:	4b81      	ldr	r3, [pc, #516]	; (8003bb8 <menu+0x29b8>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	f083 0301 	eor.w	r3, r3, #1
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00e      	beq.n	80039de <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 80039c0:	4b7a      	ldr	r3, [pc, #488]	; (8003bac <menu+0x29ac>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	b2da      	uxtb	r2, r3
 80039c8:	4b78      	ldr	r3, [pc, #480]	; (8003bac <menu+0x29ac>)
 80039ca:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 80039cc:	4b77      	ldr	r3, [pc, #476]	; (8003bac <menu+0x29ac>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	2b06      	cmp	r3, #6
 80039d2:	d902      	bls.n	80039da <menu+0x27da>
		   		asagiValfTmr = 5;
 80039d4:	4b75      	ldr	r3, [pc, #468]	; (8003bac <menu+0x29ac>)
 80039d6:	2205      	movs	r2, #5
 80039d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039da:	f000 ffdd 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039de:	2108      	movs	r1, #8
 80039e0:	4874      	ldr	r0, [pc, #464]	; (8003bb4 <menu+0x29b4>)
 80039e2:	f005 fbaf 	bl	8009144 <HAL_GPIO_ReadPin>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d10d      	bne.n	8003a08 <menu+0x2808>
 80039ec:	4b72      	ldr	r3, [pc, #456]	; (8003bb8 <menu+0x29b8>)
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	f083 0301 	eor.w	r3, r3, #1
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d006      	beq.n	8003a08 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 80039fa:	4b6c      	ldr	r3, [pc, #432]	; (8003bac <menu+0x29ac>)
 80039fc:	781a      	ldrb	r2, [r3, #0]
 80039fe:	4b6f      	ldr	r3, [pc, #444]	; (8003bbc <menu+0x29bc>)
 8003a00:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003a02:	4b6f      	ldr	r3, [pc, #444]	; (8003bc0 <menu+0x29c0>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003a08:	4b6e      	ldr	r3, [pc, #440]	; (8003bc4 <menu+0x29c4>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b18      	cmp	r3, #24
 8003a0e:	f040 809d 	bne.w	8003b4c <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003a12:	4b6d      	ldr	r3, [pc, #436]	; (8003bc8 <menu+0x29c8>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d113      	bne.n	8003a42 <menu+0x2842>
			if(dilSecim == 0) {
 8003a1a:	4b62      	ldr	r3, [pc, #392]	; (8003ba4 <menu+0x29a4>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d105      	bne.n	8003a2e <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003a22:	4a6a      	ldr	r2, [pc, #424]	; (8003bcc <menu+0x29cc>)
 8003a24:	2101      	movs	r1, #1
 8003a26:	2001      	movs	r0, #1
 8003a28:	f004 f866 	bl	8007af8 <lcd_print>
 8003a2c:	e020      	b.n	8003a70 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003a2e:	4b5d      	ldr	r3, [pc, #372]	; (8003ba4 <menu+0x29a4>)
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d11c      	bne.n	8003a70 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003a36:	4a66      	ldr	r2, [pc, #408]	; (8003bd0 <menu+0x29d0>)
 8003a38:	2101      	movs	r1, #1
 8003a3a:	2001      	movs	r0, #1
 8003a3c:	f004 f85c 	bl	8007af8 <lcd_print>
 8003a40:	e016      	b.n	8003a70 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003a42:	4b61      	ldr	r3, [pc, #388]	; (8003bc8 <menu+0x29c8>)
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d112      	bne.n	8003a70 <menu+0x2870>
			if(dilSecim == 0) {
 8003a4a:	4b56      	ldr	r3, [pc, #344]	; (8003ba4 <menu+0x29a4>)
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d105      	bne.n	8003a5e <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003a52:	4a60      	ldr	r2, [pc, #384]	; (8003bd4 <menu+0x29d4>)
 8003a54:	2101      	movs	r1, #1
 8003a56:	2001      	movs	r0, #1
 8003a58:	f004 f84e 	bl	8007af8 <lcd_print>
 8003a5c:	e008      	b.n	8003a70 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003a5e:	4b51      	ldr	r3, [pc, #324]	; (8003ba4 <menu+0x29a4>)
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d104      	bne.n	8003a70 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003a66:	4a5c      	ldr	r2, [pc, #368]	; (8003bd8 <menu+0x29d8>)
 8003a68:	2101      	movs	r1, #1
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	f004 f844 	bl	8007af8 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003a70:	4b4c      	ldr	r3, [pc, #304]	; (8003ba4 <menu+0x29a4>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d105      	bne.n	8003a84 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a78:	4a58      	ldr	r2, [pc, #352]	; (8003bdc <menu+0x29dc>)
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	2002      	movs	r0, #2
 8003a7e:	f004 f83b 	bl	8007af8 <lcd_print>
 8003a82:	e008      	b.n	8003a96 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003a84:	4b47      	ldr	r3, [pc, #284]	; (8003ba4 <menu+0x29a4>)
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d104      	bne.n	8003a96 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003a8c:	4a46      	ldr	r2, [pc, #280]	; (8003ba8 <menu+0x29a8>)
 8003a8e:	2101      	movs	r1, #1
 8003a90:	2002      	movs	r0, #2
 8003a92:	f004 f831 	bl	8007af8 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003a96:	4b52      	ldr	r3, [pc, #328]	; (8003be0 <menu+0x29e0>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	220a      	movs	r2, #10
 8003a9c:	4944      	ldr	r1, [pc, #272]	; (8003bb0 <menu+0x29b0>)
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f008 fb7c 	bl	800c19c <itoa>
		lcd_print(2, 16, snum);
 8003aa4:	4a42      	ldr	r2, [pc, #264]	; (8003bb0 <menu+0x29b0>)
 8003aa6:	2110      	movs	r1, #16
 8003aa8:	2002      	movs	r0, #2
 8003aaa:	f004 f825 	bl	8007af8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aae:	2102      	movs	r1, #2
 8003ab0:	4840      	ldr	r0, [pc, #256]	; (8003bb4 <menu+0x29b4>)
 8003ab2:	f005 fb47 	bl	8009144 <HAL_GPIO_ReadPin>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d115      	bne.n	8003ae8 <menu+0x28e8>
 8003abc:	4b3e      	ldr	r3, [pc, #248]	; (8003bb8 <menu+0x29b8>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	f083 0301 	eor.w	r3, r3, #1
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00e      	beq.n	8003ae8 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003aca:	4b45      	ldr	r3, [pc, #276]	; (8003be0 <menu+0x29e0>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	4b43      	ldr	r3, [pc, #268]	; (8003be0 <menu+0x29e0>)
 8003ad4:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003ad6:	4b42      	ldr	r3, [pc, #264]	; (8003be0 <menu+0x29e0>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b05      	cmp	r3, #5
 8003adc:	d902      	bls.n	8003ae4 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003ade:	4b40      	ldr	r3, [pc, #256]	; (8003be0 <menu+0x29e0>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ae4:	f000 ff58 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ae8:	2104      	movs	r1, #4
 8003aea:	4832      	ldr	r0, [pc, #200]	; (8003bb4 <menu+0x29b4>)
 8003aec:	f005 fb2a 	bl	8009144 <HAL_GPIO_ReadPin>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d115      	bne.n	8003b22 <menu+0x2922>
 8003af6:	4b30      	ldr	r3, [pc, #192]	; (8003bb8 <menu+0x29b8>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	f083 0301 	eor.w	r3, r3, #1
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00e      	beq.n	8003b22 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003b04:	4b36      	ldr	r3, [pc, #216]	; (8003be0 <menu+0x29e0>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	4b34      	ldr	r3, [pc, #208]	; (8003be0 <menu+0x29e0>)
 8003b0e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003b10:	4b33      	ldr	r3, [pc, #204]	; (8003be0 <menu+0x29e0>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b06      	cmp	r3, #6
 8003b16:	d902      	bls.n	8003b1e <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003b18:	4b31      	ldr	r3, [pc, #196]	; (8003be0 <menu+0x29e0>)
 8003b1a:	2205      	movs	r2, #5
 8003b1c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b1e:	f000 ff3b 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b22:	2108      	movs	r1, #8
 8003b24:	4823      	ldr	r0, [pc, #140]	; (8003bb4 <menu+0x29b4>)
 8003b26:	f005 fb0d 	bl	8009144 <HAL_GPIO_ReadPin>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d10d      	bne.n	8003b4c <menu+0x294c>
 8003b30:	4b21      	ldr	r3, [pc, #132]	; (8003bb8 <menu+0x29b8>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	f083 0301 	eor.w	r3, r3, #1
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d006      	beq.n	8003b4c <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003b3e:	4b28      	ldr	r3, [pc, #160]	; (8003be0 <menu+0x29e0>)
 8003b40:	781a      	ldrb	r2, [r3, #0]
 8003b42:	4b1e      	ldr	r3, [pc, #120]	; (8003bbc <menu+0x29bc>)
 8003b44:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003b46:	4b1e      	ldr	r3, [pc, #120]	; (8003bc0 <menu+0x29c0>)
 8003b48:	2201      	movs	r2, #1
 8003b4a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003b4c:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <menu+0x29c4>)
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	2b19      	cmp	r3, #25
 8003b52:	f040 80c4 	bne.w	8003cde <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003b56:	4b1c      	ldr	r3, [pc, #112]	; (8003bc8 <menu+0x29c8>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d113      	bne.n	8003b86 <menu+0x2986>
			if(dilSecim == 0) {
 8003b5e:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <menu+0x29a4>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d105      	bne.n	8003b72 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003b66:	4a1f      	ldr	r2, [pc, #124]	; (8003be4 <menu+0x29e4>)
 8003b68:	2101      	movs	r1, #1
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	f003 ffc4 	bl	8007af8 <lcd_print>
 8003b70:	e047      	b.n	8003c02 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003b72:	4b0c      	ldr	r3, [pc, #48]	; (8003ba4 <menu+0x29a4>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d143      	bne.n	8003c02 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003b7a:	4a1b      	ldr	r2, [pc, #108]	; (8003be8 <menu+0x29e8>)
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	2001      	movs	r0, #1
 8003b80:	f003 ffba 	bl	8007af8 <lcd_print>
 8003b84:	e03d      	b.n	8003c02 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003b86:	4b10      	ldr	r3, [pc, #64]	; (8003bc8 <menu+0x29c8>)
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d139      	bne.n	8003c02 <menu+0x2a02>
			if(dilSecim == 0) {
 8003b8e:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <menu+0x29a4>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d12c      	bne.n	8003bf0 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003b96:	4a15      	ldr	r2, [pc, #84]	; (8003bec <menu+0x29ec>)
 8003b98:	2101      	movs	r1, #1
 8003b9a:	2001      	movs	r0, #1
 8003b9c:	f003 ffac 	bl	8007af8 <lcd_print>
 8003ba0:	e02f      	b.n	8003c02 <menu+0x2a02>
 8003ba2:	bf00      	nop
 8003ba4:	2000023d 	.word	0x2000023d
 8003ba8:	0800d728 	.word	0x0800d728
 8003bac:	20000231 	.word	0x20000231
 8003bb0:	20000190 	.word	0x20000190
 8003bb4:	40010800 	.word	0x40010800
 8003bb8:	2000024b 	.word	0x2000024b
 8003bbc:	20000120 	.word	0x20000120
 8003bc0:	20000248 	.word	0x20000248
 8003bc4:	2000021c 	.word	0x2000021c
 8003bc8:	2000022b 	.word	0x2000022b
 8003bcc:	0800d760 	.word	0x0800d760
 8003bd0:	0800d774 	.word	0x0800d774
 8003bd4:	0800d788 	.word	0x0800d788
 8003bd8:	0800d79c 	.word	0x0800d79c
 8003bdc:	0800d3b4 	.word	0x0800d3b4
 8003be0:	20000232 	.word	0x20000232
 8003be4:	0800d7b0 	.word	0x0800d7b0
 8003be8:	0800d7c4 	.word	0x0800d7c4
 8003bec:	0800d7d8 	.word	0x0800d7d8
			} else if(dilSecim == 1) {
 8003bf0:	4b73      	ldr	r3, [pc, #460]	; (8003dc0 <menu+0x2bc0>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d104      	bne.n	8003c02 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003bf8:	4a72      	ldr	r2, [pc, #456]	; (8003dc4 <menu+0x2bc4>)
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	2001      	movs	r0, #1
 8003bfe:	f003 ff7b 	bl	8007af8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003c02:	4b6f      	ldr	r3, [pc, #444]	; (8003dc0 <menu+0x2bc0>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d105      	bne.n	8003c16 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c0a:	4a6f      	ldr	r2, [pc, #444]	; (8003dc8 <menu+0x2bc8>)
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	2002      	movs	r0, #2
 8003c10:	f003 ff72 	bl	8007af8 <lcd_print>
 8003c14:	e008      	b.n	8003c28 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003c16:	4b6a      	ldr	r3, [pc, #424]	; (8003dc0 <menu+0x2bc0>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d104      	bne.n	8003c28 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003c1e:	4a6b      	ldr	r2, [pc, #428]	; (8003dcc <menu+0x2bcc>)
 8003c20:	2101      	movs	r1, #1
 8003c22:	2002      	movs	r0, #2
 8003c24:	f003 ff68 	bl	8007af8 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003c28:	4b69      	ldr	r3, [pc, #420]	; (8003dd0 <menu+0x2bd0>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	220a      	movs	r2, #10
 8003c2e:	4969      	ldr	r1, [pc, #420]	; (8003dd4 <menu+0x2bd4>)
 8003c30:	4618      	mov	r0, r3
 8003c32:	f008 fab3 	bl	800c19c <itoa>
		lcd_print(2,16,snum);
 8003c36:	4a67      	ldr	r2, [pc, #412]	; (8003dd4 <menu+0x2bd4>)
 8003c38:	2110      	movs	r1, #16
 8003c3a:	2002      	movs	r0, #2
 8003c3c:	f003 ff5c 	bl	8007af8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c40:	2102      	movs	r1, #2
 8003c42:	4865      	ldr	r0, [pc, #404]	; (8003dd8 <menu+0x2bd8>)
 8003c44:	f005 fa7e 	bl	8009144 <HAL_GPIO_ReadPin>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d115      	bne.n	8003c7a <menu+0x2a7a>
 8003c4e:	4b63      	ldr	r3, [pc, #396]	; (8003ddc <menu+0x2bdc>)
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	f083 0301 	eor.w	r3, r3, #1
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00e      	beq.n	8003c7a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003c5c:	4b5c      	ldr	r3, [pc, #368]	; (8003dd0 <menu+0x2bd0>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	4b5a      	ldr	r3, [pc, #360]	; (8003dd0 <menu+0x2bd0>)
 8003c66:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003c68:	4b59      	ldr	r3, [pc, #356]	; (8003dd0 <menu+0x2bd0>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b05      	cmp	r3, #5
 8003c6e:	d902      	bls.n	8003c76 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003c70:	4b57      	ldr	r3, [pc, #348]	; (8003dd0 <menu+0x2bd0>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c76:	f000 fe8f 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c7a:	2104      	movs	r1, #4
 8003c7c:	4856      	ldr	r0, [pc, #344]	; (8003dd8 <menu+0x2bd8>)
 8003c7e:	f005 fa61 	bl	8009144 <HAL_GPIO_ReadPin>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d115      	bne.n	8003cb4 <menu+0x2ab4>
 8003c88:	4b54      	ldr	r3, [pc, #336]	; (8003ddc <menu+0x2bdc>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	f083 0301 	eor.w	r3, r3, #1
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00e      	beq.n	8003cb4 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003c96:	4b4e      	ldr	r3, [pc, #312]	; (8003dd0 <menu+0x2bd0>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	4b4c      	ldr	r3, [pc, #304]	; (8003dd0 <menu+0x2bd0>)
 8003ca0:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003ca2:	4b4b      	ldr	r3, [pc, #300]	; (8003dd0 <menu+0x2bd0>)
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b06      	cmp	r3, #6
 8003ca8:	d902      	bls.n	8003cb0 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003caa:	4b49      	ldr	r3, [pc, #292]	; (8003dd0 <menu+0x2bd0>)
 8003cac:	2205      	movs	r2, #5
 8003cae:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003cb0:	f000 fe72 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cb4:	2108      	movs	r1, #8
 8003cb6:	4848      	ldr	r0, [pc, #288]	; (8003dd8 <menu+0x2bd8>)
 8003cb8:	f005 fa44 	bl	8009144 <HAL_GPIO_ReadPin>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d10d      	bne.n	8003cde <menu+0x2ade>
 8003cc2:	4b46      	ldr	r3, [pc, #280]	; (8003ddc <menu+0x2bdc>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	f083 0301 	eor.w	r3, r3, #1
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d006      	beq.n	8003cde <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003cd0:	4b3f      	ldr	r3, [pc, #252]	; (8003dd0 <menu+0x2bd0>)
 8003cd2:	781a      	ldrb	r2, [r3, #0]
 8003cd4:	4b42      	ldr	r3, [pc, #264]	; (8003de0 <menu+0x2be0>)
 8003cd6:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003cd8:	4b42      	ldr	r3, [pc, #264]	; (8003de4 <menu+0x2be4>)
 8003cda:	2201      	movs	r2, #1
 8003cdc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003cde:	4b42      	ldr	r3, [pc, #264]	; (8003de8 <menu+0x2be8>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b1a      	cmp	r3, #26
 8003ce4:	f040 80ec 	bne.w	8003ec0 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003ce8:	4b35      	ldr	r3, [pc, #212]	; (8003dc0 <menu+0x2bc0>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d105      	bne.n	8003cfc <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003cf0:	4a3e      	ldr	r2, [pc, #248]	; (8003dec <menu+0x2bec>)
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	2001      	movs	r0, #1
 8003cf6:	f003 feff 	bl	8007af8 <lcd_print>
 8003cfa:	e008      	b.n	8003d0e <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003cfc:	4b30      	ldr	r3, [pc, #192]	; (8003dc0 <menu+0x2bc0>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d104      	bne.n	8003d0e <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003d04:	4a3a      	ldr	r2, [pc, #232]	; (8003df0 <menu+0x2bf0>)
 8003d06:	2101      	movs	r1, #1
 8003d08:	2001      	movs	r0, #1
 8003d0a:	f003 fef5 	bl	8007af8 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003d0e:	4b39      	ldr	r3, [pc, #228]	; (8003df4 <menu+0x2bf4>)
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	2b63      	cmp	r3, #99	; 0x63
 8003d14:	d91e      	bls.n	8003d54 <menu+0x2b54>
			if(dilSecim == 0) {
 8003d16:	4b2a      	ldr	r3, [pc, #168]	; (8003dc0 <menu+0x2bc0>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d104      	bne.n	8003d28 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d1e:	4a2a      	ldr	r2, [pc, #168]	; (8003dc8 <menu+0x2bc8>)
 8003d20:	2101      	movs	r1, #1
 8003d22:	2002      	movs	r0, #2
 8003d24:	f003 fee8 	bl	8007af8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003d28:	4b25      	ldr	r3, [pc, #148]	; (8003dc0 <menu+0x2bc0>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d104      	bne.n	8003d3a <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003d30:	4a26      	ldr	r2, [pc, #152]	; (8003dcc <menu+0x2bcc>)
 8003d32:	2101      	movs	r1, #1
 8003d34:	2002      	movs	r0, #2
 8003d36:	f003 fedf 	bl	8007af8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003d3a:	4b2e      	ldr	r3, [pc, #184]	; (8003df4 <menu+0x2bf4>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	220a      	movs	r2, #10
 8003d40:	4924      	ldr	r1, [pc, #144]	; (8003dd4 <menu+0x2bd4>)
 8003d42:	4618      	mov	r0, r3
 8003d44:	f008 fa2a 	bl	800c19c <itoa>
			lcd_print(2,14,snum);
 8003d48:	4a22      	ldr	r2, [pc, #136]	; (8003dd4 <menu+0x2bd4>)
 8003d4a:	210e      	movs	r1, #14
 8003d4c:	2002      	movs	r0, #2
 8003d4e:	f003 fed3 	bl	8007af8 <lcd_print>
 8003d52:	e066      	b.n	8003e22 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003d54:	4b27      	ldr	r3, [pc, #156]	; (8003df4 <menu+0x2bf4>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b09      	cmp	r3, #9
 8003d5a:	d923      	bls.n	8003da4 <menu+0x2ba4>
 8003d5c:	4b25      	ldr	r3, [pc, #148]	; (8003df4 <menu+0x2bf4>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b63      	cmp	r3, #99	; 0x63
 8003d62:	d81f      	bhi.n	8003da4 <menu+0x2ba4>
			if(dilSecim == 0) {
 8003d64:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <menu+0x2bc0>)
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d105      	bne.n	8003d78 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d6c:	4a16      	ldr	r2, [pc, #88]	; (8003dc8 <menu+0x2bc8>)
 8003d6e:	2101      	movs	r1, #1
 8003d70:	2002      	movs	r0, #2
 8003d72:	f003 fec1 	bl	8007af8 <lcd_print>
 8003d76:	e008      	b.n	8003d8a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003d78:	4b11      	ldr	r3, [pc, #68]	; (8003dc0 <menu+0x2bc0>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d104      	bne.n	8003d8a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003d80:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <menu+0x2bcc>)
 8003d82:	2101      	movs	r1, #1
 8003d84:	2002      	movs	r0, #2
 8003d86:	f003 feb7 	bl	8007af8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003d8a:	4b1a      	ldr	r3, [pc, #104]	; (8003df4 <menu+0x2bf4>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	220a      	movs	r2, #10
 8003d90:	4910      	ldr	r1, [pc, #64]	; (8003dd4 <menu+0x2bd4>)
 8003d92:	4618      	mov	r0, r3
 8003d94:	f008 fa02 	bl	800c19c <itoa>
			lcd_print(2, 15, snum);
 8003d98:	4a0e      	ldr	r2, [pc, #56]	; (8003dd4 <menu+0x2bd4>)
 8003d9a:	210f      	movs	r1, #15
 8003d9c:	2002      	movs	r0, #2
 8003d9e:	f003 feab 	bl	8007af8 <lcd_print>
 8003da2:	e03e      	b.n	8003e22 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8003da4:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <menu+0x2bf4>)
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b09      	cmp	r3, #9
 8003daa:	d83a      	bhi.n	8003e22 <menu+0x2c22>
			if(dilSecim == 0) {
 8003dac:	4b04      	ldr	r3, [pc, #16]	; (8003dc0 <menu+0x2bc0>)
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d121      	bne.n	8003df8 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8003db4:	4a04      	ldr	r2, [pc, #16]	; (8003dc8 <menu+0x2bc8>)
 8003db6:	2101      	movs	r1, #1
 8003db8:	2002      	movs	r0, #2
 8003dba:	f003 fe9d 	bl	8007af8 <lcd_print>
 8003dbe:	e024      	b.n	8003e0a <menu+0x2c0a>
 8003dc0:	2000023d 	.word	0x2000023d
 8003dc4:	0800d7ec 	.word	0x0800d7ec
 8003dc8:	0800d3b4 	.word	0x0800d3b4
 8003dcc:	0800d728 	.word	0x0800d728
 8003dd0:	20000233 	.word	0x20000233
 8003dd4:	20000190 	.word	0x20000190
 8003dd8:	40010800 	.word	0x40010800
 8003ddc:	2000024b 	.word	0x2000024b
 8003de0:	20000120 	.word	0x20000120
 8003de4:	20000248 	.word	0x20000248
 8003de8:	2000021c 	.word	0x2000021c
 8003dec:	0800d800 	.word	0x0800d800
 8003df0:	0800d814 	.word	0x0800d814
 8003df4:	20000234 	.word	0x20000234
			} else if(dilSecim == 1) {
 8003df8:	4b8f      	ldr	r3, [pc, #572]	; (8004038 <menu+0x2e38>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d104      	bne.n	8003e0a <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8003e00:	4a8e      	ldr	r2, [pc, #568]	; (800403c <menu+0x2e3c>)
 8003e02:	2101      	movs	r1, #1
 8003e04:	2002      	movs	r0, #2
 8003e06:	f003 fe77 	bl	8007af8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003e0a:	4b8d      	ldr	r3, [pc, #564]	; (8004040 <menu+0x2e40>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	220a      	movs	r2, #10
 8003e10:	498c      	ldr	r1, [pc, #560]	; (8004044 <menu+0x2e44>)
 8003e12:	4618      	mov	r0, r3
 8003e14:	f008 f9c2 	bl	800c19c <itoa>
			lcd_print(2, 16, snum);
 8003e18:	4a8a      	ldr	r2, [pc, #552]	; (8004044 <menu+0x2e44>)
 8003e1a:	2110      	movs	r1, #16
 8003e1c:	2002      	movs	r0, #2
 8003e1e:	f003 fe6b 	bl	8007af8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e22:	2102      	movs	r1, #2
 8003e24:	4888      	ldr	r0, [pc, #544]	; (8004048 <menu+0x2e48>)
 8003e26:	f005 f98d 	bl	8009144 <HAL_GPIO_ReadPin>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d115      	bne.n	8003e5c <menu+0x2c5c>
 8003e30:	4b86      	ldr	r3, [pc, #536]	; (800404c <menu+0x2e4c>)
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	f083 0301 	eor.w	r3, r3, #1
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00e      	beq.n	8003e5c <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003e3e:	4b80      	ldr	r3, [pc, #512]	; (8004040 <menu+0x2e40>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	3301      	adds	r3, #1
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	4b7e      	ldr	r3, [pc, #504]	; (8004040 <menu+0x2e40>)
 8003e48:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003e4a:	4b7d      	ldr	r3, [pc, #500]	; (8004040 <menu+0x2e40>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2bb4      	cmp	r3, #180	; 0xb4
 8003e50:	d902      	bls.n	8003e58 <menu+0x2c58>
				makineCalismaTmr = 0;
 8003e52:	4b7b      	ldr	r3, [pc, #492]	; (8004040 <menu+0x2e40>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e58:	f000 fd9e 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e5c:	2104      	movs	r1, #4
 8003e5e:	487a      	ldr	r0, [pc, #488]	; (8004048 <menu+0x2e48>)
 8003e60:	f005 f970 	bl	8009144 <HAL_GPIO_ReadPin>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d115      	bne.n	8003e96 <menu+0x2c96>
 8003e6a:	4b78      	ldr	r3, [pc, #480]	; (800404c <menu+0x2e4c>)
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	f083 0301 	eor.w	r3, r3, #1
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00e      	beq.n	8003e96 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003e78:	4b71      	ldr	r3, [pc, #452]	; (8004040 <menu+0x2e40>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b2da      	uxtb	r2, r3
 8003e80:	4b6f      	ldr	r3, [pc, #444]	; (8004040 <menu+0x2e40>)
 8003e82:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003e84:	4b6e      	ldr	r3, [pc, #440]	; (8004040 <menu+0x2e40>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2bb5      	cmp	r3, #181	; 0xb5
 8003e8a:	d902      	bls.n	8003e92 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003e8c:	4b6c      	ldr	r3, [pc, #432]	; (8004040 <menu+0x2e40>)
 8003e8e:	22b4      	movs	r2, #180	; 0xb4
 8003e90:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e92:	f000 fd81 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e96:	2108      	movs	r1, #8
 8003e98:	486b      	ldr	r0, [pc, #428]	; (8004048 <menu+0x2e48>)
 8003e9a:	f005 f953 	bl	8009144 <HAL_GPIO_ReadPin>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d10d      	bne.n	8003ec0 <menu+0x2cc0>
 8003ea4:	4b69      	ldr	r3, [pc, #420]	; (800404c <menu+0x2e4c>)
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	f083 0301 	eor.w	r3, r3, #1
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d006      	beq.n	8003ec0 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8003eb2:	4b63      	ldr	r3, [pc, #396]	; (8004040 <menu+0x2e40>)
 8003eb4:	781a      	ldrb	r2, [r3, #0]
 8003eb6:	4b66      	ldr	r3, [pc, #408]	; (8004050 <menu+0x2e50>)
 8003eb8:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003eba:	4b66      	ldr	r3, [pc, #408]	; (8004054 <menu+0x2e54>)
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003ec0:	4b65      	ldr	r3, [pc, #404]	; (8004058 <menu+0x2e58>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	2b1b      	cmp	r3, #27
 8003ec6:	f040 8083 	bne.w	8003fd0 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003eca:	4a64      	ldr	r2, [pc, #400]	; (800405c <menu+0x2e5c>)
 8003ecc:	2101      	movs	r1, #1
 8003ece:	2001      	movs	r0, #1
 8003ed0:	f003 fe12 	bl	8007af8 <lcd_print>

		if(buzzer == 0) {
 8003ed4:	4b62      	ldr	r3, [pc, #392]	; (8004060 <menu+0x2e60>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d113      	bne.n	8003f04 <menu+0x2d04>
			if(dilSecim == 0) {
 8003edc:	4b56      	ldr	r3, [pc, #344]	; (8004038 <menu+0x2e38>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d105      	bne.n	8003ef0 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8003ee4:	4a5f      	ldr	r2, [pc, #380]	; (8004064 <menu+0x2e64>)
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	2002      	movs	r0, #2
 8003eea:	f003 fe05 	bl	8007af8 <lcd_print>
 8003eee:	e020      	b.n	8003f32 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003ef0:	4b51      	ldr	r3, [pc, #324]	; (8004038 <menu+0x2e38>)
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d11c      	bne.n	8003f32 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 8003ef8:	4a5b      	ldr	r2, [pc, #364]	; (8004068 <menu+0x2e68>)
 8003efa:	2101      	movs	r1, #1
 8003efc:	2002      	movs	r0, #2
 8003efe:	f003 fdfb 	bl	8007af8 <lcd_print>
 8003f02:	e016      	b.n	8003f32 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8003f04:	4b56      	ldr	r3, [pc, #344]	; (8004060 <menu+0x2e60>)
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d112      	bne.n	8003f32 <menu+0x2d32>
			if(dilSecim == 0) {
 8003f0c:	4b4a      	ldr	r3, [pc, #296]	; (8004038 <menu+0x2e38>)
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d105      	bne.n	8003f20 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8003f14:	4a55      	ldr	r2, [pc, #340]	; (800406c <menu+0x2e6c>)
 8003f16:	2101      	movs	r1, #1
 8003f18:	2002      	movs	r0, #2
 8003f1a:	f003 fded 	bl	8007af8 <lcd_print>
 8003f1e:	e008      	b.n	8003f32 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8003f20:	4b45      	ldr	r3, [pc, #276]	; (8004038 <menu+0x2e38>)
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d104      	bne.n	8003f32 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 8003f28:	4a51      	ldr	r2, [pc, #324]	; (8004070 <menu+0x2e70>)
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	2002      	movs	r0, #2
 8003f2e:	f003 fde3 	bl	8007af8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f32:	2102      	movs	r1, #2
 8003f34:	4844      	ldr	r0, [pc, #272]	; (8004048 <menu+0x2e48>)
 8003f36:	f005 f905 	bl	8009144 <HAL_GPIO_ReadPin>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d115      	bne.n	8003f6c <menu+0x2d6c>
 8003f40:	4b42      	ldr	r3, [pc, #264]	; (800404c <menu+0x2e4c>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	f083 0301 	eor.w	r3, r3, #1
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00e      	beq.n	8003f6c <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003f4e:	4b44      	ldr	r3, [pc, #272]	; (8004060 <menu+0x2e60>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	3301      	adds	r3, #1
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	4b42      	ldr	r3, [pc, #264]	; (8004060 <menu+0x2e60>)
 8003f58:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003f5a:	4b41      	ldr	r3, [pc, #260]	; (8004060 <menu+0x2e60>)
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d902      	bls.n	8003f68 <menu+0x2d68>
				buzzer = 0;
 8003f62:	4b3f      	ldr	r3, [pc, #252]	; (8004060 <menu+0x2e60>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f68:	f000 fd16 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f6c:	2104      	movs	r1, #4
 8003f6e:	4836      	ldr	r0, [pc, #216]	; (8004048 <menu+0x2e48>)
 8003f70:	f005 f8e8 	bl	8009144 <HAL_GPIO_ReadPin>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d115      	bne.n	8003fa6 <menu+0x2da6>
 8003f7a:	4b34      	ldr	r3, [pc, #208]	; (800404c <menu+0x2e4c>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	f083 0301 	eor.w	r3, r3, #1
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00e      	beq.n	8003fa6 <menu+0x2da6>
			buzzer = buzzer - 1;
 8003f88:	4b35      	ldr	r3, [pc, #212]	; (8004060 <menu+0x2e60>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	b2da      	uxtb	r2, r3
 8003f90:	4b33      	ldr	r3, [pc, #204]	; (8004060 <menu+0x2e60>)
 8003f92:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003f94:	4b32      	ldr	r3, [pc, #200]	; (8004060 <menu+0x2e60>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <menu+0x2da2>
		   		buzzer = 1;
 8003f9c:	4b30      	ldr	r3, [pc, #192]	; (8004060 <menu+0x2e60>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003fa2:	f000 fcf9 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fa6:	2108      	movs	r1, #8
 8003fa8:	4827      	ldr	r0, [pc, #156]	; (8004048 <menu+0x2e48>)
 8003faa:	f005 f8cb 	bl	8009144 <HAL_GPIO_ReadPin>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d10d      	bne.n	8003fd0 <menu+0x2dd0>
 8003fb4:	4b25      	ldr	r3, [pc, #148]	; (800404c <menu+0x2e4c>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	f083 0301 	eor.w	r3, r3, #1
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d006      	beq.n	8003fd0 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8003fc2:	4b27      	ldr	r3, [pc, #156]	; (8004060 <menu+0x2e60>)
 8003fc4:	781a      	ldrb	r2, [r3, #0]
 8003fc6:	4b22      	ldr	r3, [pc, #136]	; (8004050 <menu+0x2e50>)
 8003fc8:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003fca:	4b22      	ldr	r3, [pc, #136]	; (8004054 <menu+0x2e54>)
 8003fcc:	2201      	movs	r2, #1
 8003fce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003fd0:	4b21      	ldr	r3, [pc, #132]	; (8004058 <menu+0x2e58>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b1c      	cmp	r3, #28
 8003fd6:	f040 80ab 	bne.w	8004130 <menu+0x2f30>
		calismaSayModu = 0;
 8003fda:	4b26      	ldr	r3, [pc, #152]	; (8004074 <menu+0x2e74>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8003fe0:	4a25      	ldr	r2, [pc, #148]	; (8004078 <menu+0x2e78>)
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	f003 fd87 	bl	8007af8 <lcd_print>

		if(demoMode == 0) {
 8003fea:	4b24      	ldr	r3, [pc, #144]	; (800407c <menu+0x2e7c>)
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d113      	bne.n	800401a <menu+0x2e1a>
			if(dilSecim == 0) {
 8003ff2:	4b11      	ldr	r3, [pc, #68]	; (8004038 <menu+0x2e38>)
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d105      	bne.n	8004006 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 8003ffa:	4a1a      	ldr	r2, [pc, #104]	; (8004064 <menu+0x2e64>)
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	2002      	movs	r0, #2
 8004000:	f003 fd7a 	bl	8007af8 <lcd_print>
 8004004:	e045      	b.n	8004092 <menu+0x2e92>
			} else if(dilSecim == 1) {
 8004006:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <menu+0x2e38>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d141      	bne.n	8004092 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 800400e:	4a16      	ldr	r2, [pc, #88]	; (8004068 <menu+0x2e68>)
 8004010:	2101      	movs	r1, #1
 8004012:	2002      	movs	r0, #2
 8004014:	f003 fd70 	bl	8007af8 <lcd_print>
 8004018:	e03b      	b.n	8004092 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 800401a:	4b18      	ldr	r3, [pc, #96]	; (800407c <menu+0x2e7c>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b01      	cmp	r3, #1
 8004020:	d137      	bne.n	8004092 <menu+0x2e92>
			if(dilSecim == 0){
 8004022:	4b05      	ldr	r3, [pc, #20]	; (8004038 <menu+0x2e38>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d12a      	bne.n	8004080 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 800402a:	4a10      	ldr	r2, [pc, #64]	; (800406c <menu+0x2e6c>)
 800402c:	2101      	movs	r1, #1
 800402e:	2002      	movs	r0, #2
 8004030:	f003 fd62 	bl	8007af8 <lcd_print>
 8004034:	e02d      	b.n	8004092 <menu+0x2e92>
 8004036:	bf00      	nop
 8004038:	2000023d 	.word	0x2000023d
 800403c:	0800d728 	.word	0x0800d728
 8004040:	20000234 	.word	0x20000234
 8004044:	20000190 	.word	0x20000190
 8004048:	40010800 	.word	0x40010800
 800404c:	2000024b 	.word	0x2000024b
 8004050:	20000120 	.word	0x20000120
 8004054:	20000248 	.word	0x20000248
 8004058:	2000021c 	.word	0x2000021c
 800405c:	0800d828 	.word	0x0800d828
 8004060:	20000238 	.word	0x20000238
 8004064:	0800d150 	.word	0x0800d150
 8004068:	0800d164 	.word	0x0800d164
 800406c:	0800d1b0 	.word	0x0800d1b0
 8004070:	0800d1c4 	.word	0x0800d1c4
 8004074:	2000023c 	.word	0x2000023c
 8004078:	0800d83c 	.word	0x0800d83c
 800407c:	2000023a 	.word	0x2000023a
			} else if(dilSecim == 1) {
 8004080:	4b71      	ldr	r3, [pc, #452]	; (8004248 <menu+0x3048>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d104      	bne.n	8004092 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004088:	4a70      	ldr	r2, [pc, #448]	; (800424c <menu+0x304c>)
 800408a:	2101      	movs	r1, #1
 800408c:	2002      	movs	r0, #2
 800408e:	f003 fd33 	bl	8007af8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004092:	2102      	movs	r1, #2
 8004094:	486e      	ldr	r0, [pc, #440]	; (8004250 <menu+0x3050>)
 8004096:	f005 f855 	bl	8009144 <HAL_GPIO_ReadPin>
 800409a:	4603      	mov	r3, r0
 800409c:	2b01      	cmp	r3, #1
 800409e:	d115      	bne.n	80040cc <menu+0x2ecc>
 80040a0:	4b6c      	ldr	r3, [pc, #432]	; (8004254 <menu+0x3054>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	f083 0301 	eor.w	r3, r3, #1
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00e      	beq.n	80040cc <menu+0x2ecc>
			demoMode = demoMode + 1;
 80040ae:	4b6a      	ldr	r3, [pc, #424]	; (8004258 <menu+0x3058>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	3301      	adds	r3, #1
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	4b68      	ldr	r3, [pc, #416]	; (8004258 <menu+0x3058>)
 80040b8:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80040ba:	4b67      	ldr	r3, [pc, #412]	; (8004258 <menu+0x3058>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d902      	bls.n	80040c8 <menu+0x2ec8>
				demoMode = 0;
 80040c2:	4b65      	ldr	r3, [pc, #404]	; (8004258 <menu+0x3058>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80040c8:	f000 fc66 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80040cc:	2104      	movs	r1, #4
 80040ce:	4860      	ldr	r0, [pc, #384]	; (8004250 <menu+0x3050>)
 80040d0:	f005 f838 	bl	8009144 <HAL_GPIO_ReadPin>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d115      	bne.n	8004106 <menu+0x2f06>
 80040da:	4b5e      	ldr	r3, [pc, #376]	; (8004254 <menu+0x3054>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	f083 0301 	eor.w	r3, r3, #1
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00e      	beq.n	8004106 <menu+0x2f06>
			demoMode = demoMode - 1;
 80040e8:	4b5b      	ldr	r3, [pc, #364]	; (8004258 <menu+0x3058>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	4b59      	ldr	r3, [pc, #356]	; (8004258 <menu+0x3058>)
 80040f2:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80040f4:	4b58      	ldr	r3, [pc, #352]	; (8004258 <menu+0x3058>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d002      	beq.n	8004102 <menu+0x2f02>
		   		demoMode = 1;
 80040fc:	4b56      	ldr	r3, [pc, #344]	; (8004258 <menu+0x3058>)
 80040fe:	2201      	movs	r2, #1
 8004100:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004102:	f000 fc49 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004106:	2108      	movs	r1, #8
 8004108:	4851      	ldr	r0, [pc, #324]	; (8004250 <menu+0x3050>)
 800410a:	f005 f81b 	bl	8009144 <HAL_GPIO_ReadPin>
 800410e:	4603      	mov	r3, r0
 8004110:	2b01      	cmp	r3, #1
 8004112:	d10d      	bne.n	8004130 <menu+0x2f30>
 8004114:	4b4f      	ldr	r3, [pc, #316]	; (8004254 <menu+0x3054>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	f083 0301 	eor.w	r3, r3, #1
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d006      	beq.n	8004130 <menu+0x2f30>
			eepromData[26] = demoMode;
 8004122:	4b4d      	ldr	r3, [pc, #308]	; (8004258 <menu+0x3058>)
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	4b4d      	ldr	r3, [pc, #308]	; (800425c <menu+0x305c>)
 8004128:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800412a:	4b4d      	ldr	r3, [pc, #308]	; (8004260 <menu+0x3060>)
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004130:	4b4c      	ldr	r3, [pc, #304]	; (8004264 <menu+0x3064>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b1d      	cmp	r3, #29
 8004136:	f040 8132 	bne.w	800439e <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800413a:	4b4b      	ldr	r3, [pc, #300]	; (8004268 <menu+0x3068>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d113      	bne.n	800416a <menu+0x2f6a>
 8004142:	4b4a      	ldr	r3, [pc, #296]	; (800426c <menu+0x306c>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10f      	bne.n	800416a <menu+0x2f6a>
 800414a:	4b49      	ldr	r3, [pc, #292]	; (8004270 <menu+0x3070>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10b      	bne.n	800416a <menu+0x2f6a>
 8004152:	4b48      	ldr	r3, [pc, #288]	; (8004274 <menu+0x3074>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d107      	bne.n	800416a <menu+0x2f6a>
 800415a:	4b47      	ldr	r3, [pc, #284]	; (8004278 <menu+0x3078>)
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d103      	bne.n	800416a <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004162:	4b46      	ldr	r3, [pc, #280]	; (800427c <menu+0x307c>)
 8004164:	2200      	movs	r2, #0
 8004166:	701a      	strb	r2, [r3, #0]
 8004168:	e002      	b.n	8004170 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800416a:	4b44      	ldr	r3, [pc, #272]	; (800427c <menu+0x307c>)
 800416c:	2201      	movs	r2, #1
 800416e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004170:	4b43      	ldr	r3, [pc, #268]	; (8004280 <menu+0x3080>)
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d154      	bne.n	8004222 <menu+0x3022>
			if(dilSecim == 0) {
 8004178:	4b33      	ldr	r3, [pc, #204]	; (8004248 <menu+0x3048>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d105      	bne.n	800418c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004180:	4a40      	ldr	r2, [pc, #256]	; (8004284 <menu+0x3084>)
 8004182:	2101      	movs	r1, #1
 8004184:	2001      	movs	r0, #1
 8004186:	f003 fcb7 	bl	8007af8 <lcd_print>
 800418a:	e008      	b.n	800419e <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800418c:	4b2e      	ldr	r3, [pc, #184]	; (8004248 <menu+0x3048>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d104      	bne.n	800419e <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004194:	4a3c      	ldr	r2, [pc, #240]	; (8004288 <menu+0x3088>)
 8004196:	2101      	movs	r1, #1
 8004198:	2001      	movs	r0, #1
 800419a:	f003 fcad 	bl	8007af8 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800419e:	4b36      	ldr	r3, [pc, #216]	; (8004278 <menu+0x3078>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	220a      	movs	r2, #10
 80041a4:	4939      	ldr	r1, [pc, #228]	; (800428c <menu+0x308c>)
 80041a6:	4618      	mov	r0, r3
 80041a8:	f007 fff8 	bl	800c19c <itoa>
			lcd_print(2, 12, snum);
 80041ac:	4a37      	ldr	r2, [pc, #220]	; (800428c <menu+0x308c>)
 80041ae:	210c      	movs	r1, #12
 80041b0:	2002      	movs	r0, #2
 80041b2:	f003 fca1 	bl	8007af8 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80041b6:	4b2f      	ldr	r3, [pc, #188]	; (8004274 <menu+0x3074>)
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	220a      	movs	r2, #10
 80041bc:	4933      	ldr	r1, [pc, #204]	; (800428c <menu+0x308c>)
 80041be:	4618      	mov	r0, r3
 80041c0:	f007 ffec 	bl	800c19c <itoa>
			lcd_print(2, 13, snum);
 80041c4:	4a31      	ldr	r2, [pc, #196]	; (800428c <menu+0x308c>)
 80041c6:	210d      	movs	r1, #13
 80041c8:	2002      	movs	r0, #2
 80041ca:	f003 fc95 	bl	8007af8 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80041ce:	4b28      	ldr	r3, [pc, #160]	; (8004270 <menu+0x3070>)
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	220a      	movs	r2, #10
 80041d4:	492d      	ldr	r1, [pc, #180]	; (800428c <menu+0x308c>)
 80041d6:	4618      	mov	r0, r3
 80041d8:	f007 ffe0 	bl	800c19c <itoa>
			lcd_print(2, 14, snum);
 80041dc:	4a2b      	ldr	r2, [pc, #172]	; (800428c <menu+0x308c>)
 80041de:	210e      	movs	r1, #14
 80041e0:	2002      	movs	r0, #2
 80041e2:	f003 fc89 	bl	8007af8 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80041e6:	4b21      	ldr	r3, [pc, #132]	; (800426c <menu+0x306c>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	220a      	movs	r2, #10
 80041ec:	4927      	ldr	r1, [pc, #156]	; (800428c <menu+0x308c>)
 80041ee:	4618      	mov	r0, r3
 80041f0:	f007 ffd4 	bl	800c19c <itoa>
			lcd_print(2, 15, snum);
 80041f4:	4a25      	ldr	r2, [pc, #148]	; (800428c <menu+0x308c>)
 80041f6:	210f      	movs	r1, #15
 80041f8:	2002      	movs	r0, #2
 80041fa:	f003 fc7d 	bl	8007af8 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80041fe:	4b1a      	ldr	r3, [pc, #104]	; (8004268 <menu+0x3068>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	220a      	movs	r2, #10
 8004204:	4921      	ldr	r1, [pc, #132]	; (800428c <menu+0x308c>)
 8004206:	4618      	mov	r0, r3
 8004208:	f007 ffc8 	bl	800c19c <itoa>
			lcd_print(2, 16, snum);
 800420c:	4a1f      	ldr	r2, [pc, #124]	; (800428c <menu+0x308c>)
 800420e:	2110      	movs	r1, #16
 8004210:	2002      	movs	r0, #2
 8004212:	f003 fc71 	bl	8007af8 <lcd_print>

			lcd_print(2, 1, "           ");
 8004216:	4a1e      	ldr	r2, [pc, #120]	; (8004290 <menu+0x3090>)
 8004218:	2101      	movs	r1, #1
 800421a:	2002      	movs	r0, #2
 800421c:	f003 fc6c 	bl	8007af8 <lcd_print>
 8004220:	e048      	b.n	80042b4 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 8004222:	4b17      	ldr	r3, [pc, #92]	; (8004280 <menu+0x3080>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d144      	bne.n	80042b4 <menu+0x30b4>
			if(dilSecim == 0) {
 800422a:	4b07      	ldr	r3, [pc, #28]	; (8004248 <menu+0x3048>)
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d132      	bne.n	8004298 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004232:	4a14      	ldr	r2, [pc, #80]	; (8004284 <menu+0x3084>)
 8004234:	2101      	movs	r1, #1
 8004236:	2001      	movs	r0, #1
 8004238:	f003 fc5e 	bl	8007af8 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 800423c:	4a15      	ldr	r2, [pc, #84]	; (8004294 <menu+0x3094>)
 800423e:	2101      	movs	r1, #1
 8004240:	2002      	movs	r0, #2
 8004242:	f003 fc59 	bl	8007af8 <lcd_print>
 8004246:	e035      	b.n	80042b4 <menu+0x30b4>
 8004248:	2000023d 	.word	0x2000023d
 800424c:	0800d1c4 	.word	0x0800d1c4
 8004250:	40010800 	.word	0x40010800
 8004254:	2000024b 	.word	0x2000024b
 8004258:	2000023a 	.word	0x2000023a
 800425c:	20000120 	.word	0x20000120
 8004260:	20000248 	.word	0x20000248
 8004264:	2000021c 	.word	0x2000021c
 8004268:	20000219 	.word	0x20000219
 800426c:	2000021a 	.word	0x2000021a
 8004270:	20000000 	.word	0x20000000
 8004274:	20000001 	.word	0x20000001
 8004278:	2000021b 	.word	0x2000021b
 800427c:	2000025d 	.word	0x2000025d
 8004280:	2000023c 	.word	0x2000023c
 8004284:	0800d84c 	.word	0x0800d84c
 8004288:	0800d860 	.word	0x0800d860
 800428c:	20000190 	.word	0x20000190
 8004290:	0800d874 	.word	0x0800d874
 8004294:	0800d880 	.word	0x0800d880
			} else if(dilSecim == 1) {
 8004298:	4b94      	ldr	r3, [pc, #592]	; (80044ec <menu+0x32ec>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d109      	bne.n	80042b4 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80042a0:	4a93      	ldr	r2, [pc, #588]	; (80044f0 <menu+0x32f0>)
 80042a2:	2101      	movs	r1, #1
 80042a4:	2001      	movs	r0, #1
 80042a6:	f003 fc27 	bl	8007af8 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80042aa:	4a92      	ldr	r2, [pc, #584]	; (80044f4 <menu+0x32f4>)
 80042ac:	2101      	movs	r1, #1
 80042ae:	2002      	movs	r0, #2
 80042b0:	f003 fc22 	bl	8007af8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80042b4:	2102      	movs	r1, #2
 80042b6:	4890      	ldr	r0, [pc, #576]	; (80044f8 <menu+0x32f8>)
 80042b8:	f004 ff44 	bl	8009144 <HAL_GPIO_ReadPin>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d119      	bne.n	80042f6 <menu+0x30f6>
 80042c2:	4b8e      	ldr	r3, [pc, #568]	; (80044fc <menu+0x32fc>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	f083 0301 	eor.w	r3, r3, #1
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d012      	beq.n	80042f6 <menu+0x30f6>
 80042d0:	4b8b      	ldr	r3, [pc, #556]	; (8004500 <menu+0x3300>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00e      	beq.n	80042f6 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 80042d8:	4b8a      	ldr	r3, [pc, #552]	; (8004504 <menu+0x3304>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	3301      	adds	r3, #1
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	4b88      	ldr	r3, [pc, #544]	; (8004504 <menu+0x3304>)
 80042e2:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80042e4:	4b87      	ldr	r3, [pc, #540]	; (8004504 <menu+0x3304>)
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d902      	bls.n	80042f2 <menu+0x30f2>
				calismaSayModu = 0;
 80042ec:	4b85      	ldr	r3, [pc, #532]	; (8004504 <menu+0x3304>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80042f2:	f000 fb51 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80042f6:	2104      	movs	r1, #4
 80042f8:	487f      	ldr	r0, [pc, #508]	; (80044f8 <menu+0x32f8>)
 80042fa:	f004 ff23 	bl	8009144 <HAL_GPIO_ReadPin>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b01      	cmp	r3, #1
 8004302:	d119      	bne.n	8004338 <menu+0x3138>
 8004304:	4b7d      	ldr	r3, [pc, #500]	; (80044fc <menu+0x32fc>)
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	f083 0301 	eor.w	r3, r3, #1
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d012      	beq.n	8004338 <menu+0x3138>
 8004312:	4b7b      	ldr	r3, [pc, #492]	; (8004500 <menu+0x3300>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00e      	beq.n	8004338 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 800431a:	4b7a      	ldr	r3, [pc, #488]	; (8004504 <menu+0x3304>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	3b01      	subs	r3, #1
 8004320:	b2da      	uxtb	r2, r3
 8004322:	4b78      	ldr	r3, [pc, #480]	; (8004504 <menu+0x3304>)
 8004324:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004326:	4b77      	ldr	r3, [pc, #476]	; (8004504 <menu+0x3304>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <menu+0x3134>
		   		calismaSayModu = 1;
 800432e:	4b75      	ldr	r3, [pc, #468]	; (8004504 <menu+0x3304>)
 8004330:	2201      	movs	r2, #1
 8004332:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004334:	f000 fb30 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004338:	2108      	movs	r1, #8
 800433a:	486f      	ldr	r0, [pc, #444]	; (80044f8 <menu+0x32f8>)
 800433c:	f004 ff02 	bl	8009144 <HAL_GPIO_ReadPin>
 8004340:	4603      	mov	r3, r0
 8004342:	2b01      	cmp	r3, #1
 8004344:	d12b      	bne.n	800439e <menu+0x319e>
 8004346:	4b6d      	ldr	r3, [pc, #436]	; (80044fc <menu+0x32fc>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	f083 0301 	eor.w	r3, r3, #1
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d024      	beq.n	800439e <menu+0x319e>
			eepromData[32] = 0;
 8004354:	4b6c      	ldr	r3, [pc, #432]	; (8004508 <menu+0x3308>)
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 800435c:	4b6a      	ldr	r3, [pc, #424]	; (8004508 <menu+0x3308>)
 800435e:	2200      	movs	r2, #0
 8004360:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004362:	4b69      	ldr	r3, [pc, #420]	; (8004508 <menu+0x3308>)
 8004364:	2200      	movs	r2, #0
 8004366:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004368:	4b67      	ldr	r3, [pc, #412]	; (8004508 <menu+0x3308>)
 800436a:	2200      	movs	r2, #0
 800436c:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800436e:	4b66      	ldr	r3, [pc, #408]	; (8004508 <menu+0x3308>)
 8004370:	2200      	movs	r2, #0
 8004372:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004374:	4b65      	ldr	r3, [pc, #404]	; (800450c <menu+0x330c>)
 8004376:	2200      	movs	r2, #0
 8004378:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800437a:	4b65      	ldr	r3, [pc, #404]	; (8004510 <menu+0x3310>)
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004380:	4b64      	ldr	r3, [pc, #400]	; (8004514 <menu+0x3314>)
 8004382:	2200      	movs	r2, #0
 8004384:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004386:	4b64      	ldr	r3, [pc, #400]	; (8004518 <menu+0x3318>)
 8004388:	2200      	movs	r2, #0
 800438a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800438c:	4b63      	ldr	r3, [pc, #396]	; (800451c <menu+0x331c>)
 800438e:	2200      	movs	r2, #0
 8004390:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004392:	4b5c      	ldr	r3, [pc, #368]	; (8004504 <menu+0x3304>)
 8004394:	2200      	movs	r2, #0
 8004396:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004398:	4b61      	ldr	r3, [pc, #388]	; (8004520 <menu+0x3320>)
 800439a:	2201      	movs	r2, #1
 800439c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800439e:	4b61      	ldr	r3, [pc, #388]	; (8004524 <menu+0x3324>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b1e      	cmp	r3, #30
 80043a4:	d16f      	bne.n	8004486 <menu+0x3286>
		calismaSayModu = 0;
 80043a6:	4b57      	ldr	r3, [pc, #348]	; (8004504 <menu+0x3304>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 80043ac:	4b4f      	ldr	r3, [pc, #316]	; (80044ec <menu+0x32ec>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10a      	bne.n	80043ca <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 80043b4:	4a5c      	ldr	r2, [pc, #368]	; (8004528 <menu+0x3328>)
 80043b6:	2101      	movs	r1, #1
 80043b8:	2001      	movs	r0, #1
 80043ba:	f003 fb9d 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 80043be:	4a5b      	ldr	r2, [pc, #364]	; (800452c <menu+0x332c>)
 80043c0:	2101      	movs	r1, #1
 80043c2:	2002      	movs	r0, #2
 80043c4:	f003 fb98 	bl	8007af8 <lcd_print>
 80043c8:	e00d      	b.n	80043e6 <menu+0x31e6>
		} else if(dilSecim == 1) {
 80043ca:	4b48      	ldr	r3, [pc, #288]	; (80044ec <menu+0x32ec>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d109      	bne.n	80043e6 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80043d2:	4a57      	ldr	r2, [pc, #348]	; (8004530 <menu+0x3330>)
 80043d4:	2101      	movs	r1, #1
 80043d6:	2001      	movs	r0, #1
 80043d8:	f003 fb8e 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 80043dc:	4a55      	ldr	r2, [pc, #340]	; (8004534 <menu+0x3334>)
 80043de:	2101      	movs	r1, #1
 80043e0:	2002      	movs	r0, #2
 80043e2:	f003 fb89 	bl	8007af8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80043e6:	2102      	movs	r1, #2
 80043e8:	4843      	ldr	r0, [pc, #268]	; (80044f8 <menu+0x32f8>)
 80043ea:	f004 feab 	bl	8009144 <HAL_GPIO_ReadPin>
 80043ee:	4603      	mov	r3, r0
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d115      	bne.n	8004420 <menu+0x3220>
 80043f4:	4b41      	ldr	r3, [pc, #260]	; (80044fc <menu+0x32fc>)
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	f083 0301 	eor.w	r3, r3, #1
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00e      	beq.n	8004420 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8004402:	4b3a      	ldr	r3, [pc, #232]	; (80044ec <menu+0x32ec>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	3301      	adds	r3, #1
 8004408:	b2da      	uxtb	r2, r3
 800440a:	4b38      	ldr	r3, [pc, #224]	; (80044ec <menu+0x32ec>)
 800440c:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800440e:	4b37      	ldr	r3, [pc, #220]	; (80044ec <menu+0x32ec>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d902      	bls.n	800441c <menu+0x321c>
				dilSecim = 0;
 8004416:	4b35      	ldr	r3, [pc, #212]	; (80044ec <menu+0x32ec>)
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800441c:	f000 fabc 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004420:	2104      	movs	r1, #4
 8004422:	4835      	ldr	r0, [pc, #212]	; (80044f8 <menu+0x32f8>)
 8004424:	f004 fe8e 	bl	8009144 <HAL_GPIO_ReadPin>
 8004428:	4603      	mov	r3, r0
 800442a:	2b01      	cmp	r3, #1
 800442c:	d115      	bne.n	800445a <menu+0x325a>
 800442e:	4b33      	ldr	r3, [pc, #204]	; (80044fc <menu+0x32fc>)
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	f083 0301 	eor.w	r3, r3, #1
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00e      	beq.n	800445a <menu+0x325a>
			dilSecim = dilSecim - 1;
 800443c:	4b2b      	ldr	r3, [pc, #172]	; (80044ec <menu+0x32ec>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	3b01      	subs	r3, #1
 8004442:	b2da      	uxtb	r2, r3
 8004444:	4b29      	ldr	r3, [pc, #164]	; (80044ec <menu+0x32ec>)
 8004446:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004448:	4b28      	ldr	r3, [pc, #160]	; (80044ec <menu+0x32ec>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d002      	beq.n	8004456 <menu+0x3256>
		   		dilSecim = 1;
 8004450:	4b26      	ldr	r3, [pc, #152]	; (80044ec <menu+0x32ec>)
 8004452:	2201      	movs	r2, #1
 8004454:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004456:	f000 fa9f 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800445a:	2108      	movs	r1, #8
 800445c:	4826      	ldr	r0, [pc, #152]	; (80044f8 <menu+0x32f8>)
 800445e:	f004 fe71 	bl	8009144 <HAL_GPIO_ReadPin>
 8004462:	4603      	mov	r3, r0
 8004464:	2b01      	cmp	r3, #1
 8004466:	d10e      	bne.n	8004486 <menu+0x3286>
 8004468:	4b24      	ldr	r3, [pc, #144]	; (80044fc <menu+0x32fc>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	f083 0301 	eor.w	r3, r3, #1
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d007      	beq.n	8004486 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004476:	4b1d      	ldr	r3, [pc, #116]	; (80044ec <menu+0x32ec>)
 8004478:	781a      	ldrb	r2, [r3, #0]
 800447a:	4b23      	ldr	r3, [pc, #140]	; (8004508 <menu+0x3308>)
 800447c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004480:	4b27      	ldr	r3, [pc, #156]	; (8004520 <menu+0x3320>)
 8004482:	2201      	movs	r2, #1
 8004484:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004486:	4b27      	ldr	r3, [pc, #156]	; (8004524 <menu+0x3324>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b1f      	cmp	r3, #31
 800448c:	f040 80b7 	bne.w	80045fe <menu+0x33fe>
		calismaSayModu = 0;
 8004490:	4b1c      	ldr	r3, [pc, #112]	; (8004504 <menu+0x3304>)
 8004492:	2200      	movs	r2, #0
 8004494:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004496:	4a28      	ldr	r2, [pc, #160]	; (8004538 <menu+0x3338>)
 8004498:	2101      	movs	r1, #1
 800449a:	2001      	movs	r0, #1
 800449c:	f003 fb2c 	bl	8007af8 <lcd_print>

		if(iotMode == 0) {
 80044a0:	4b26      	ldr	r3, [pc, #152]	; (800453c <menu+0x333c>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d113      	bne.n	80044d0 <menu+0x32d0>
			if(dilSecim == 0) {
 80044a8:	4b10      	ldr	r3, [pc, #64]	; (80044ec <menu+0x32ec>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d105      	bne.n	80044bc <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 80044b0:	4a23      	ldr	r2, [pc, #140]	; (8004540 <menu+0x3340>)
 80044b2:	2101      	movs	r1, #1
 80044b4:	2002      	movs	r0, #2
 80044b6:	f003 fb1f 	bl	8007af8 <lcd_print>
 80044ba:	e050      	b.n	800455e <menu+0x335e>
			} else if(dilSecim == 1) {
 80044bc:	4b0b      	ldr	r3, [pc, #44]	; (80044ec <menu+0x32ec>)
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d14c      	bne.n	800455e <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 80044c4:	4a1f      	ldr	r2, [pc, #124]	; (8004544 <menu+0x3344>)
 80044c6:	2101      	movs	r1, #1
 80044c8:	2002      	movs	r0, #2
 80044ca:	f003 fb15 	bl	8007af8 <lcd_print>
 80044ce:	e046      	b.n	800455e <menu+0x335e>
			}
		} else if(iotMode == 1) {
 80044d0:	4b1a      	ldr	r3, [pc, #104]	; (800453c <menu+0x333c>)
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d142      	bne.n	800455e <menu+0x335e>
			if(dilSecim == 0) {
 80044d8:	4b04      	ldr	r3, [pc, #16]	; (80044ec <menu+0x32ec>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d135      	bne.n	800454c <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 80044e0:	4a19      	ldr	r2, [pc, #100]	; (8004548 <menu+0x3348>)
 80044e2:	2101      	movs	r1, #1
 80044e4:	2002      	movs	r0, #2
 80044e6:	f003 fb07 	bl	8007af8 <lcd_print>
 80044ea:	e038      	b.n	800455e <menu+0x335e>
 80044ec:	2000023d 	.word	0x2000023d
 80044f0:	0800d860 	.word	0x0800d860
 80044f4:	0800d894 	.word	0x0800d894
 80044f8:	40010800 	.word	0x40010800
 80044fc:	2000024b 	.word	0x2000024b
 8004500:	2000025d 	.word	0x2000025d
 8004504:	2000023c 	.word	0x2000023c
 8004508:	20000120 	.word	0x20000120
 800450c:	2000021b 	.word	0x2000021b
 8004510:	20000001 	.word	0x20000001
 8004514:	20000000 	.word	0x20000000
 8004518:	2000021a 	.word	0x2000021a
 800451c:	20000219 	.word	0x20000219
 8004520:	20000248 	.word	0x20000248
 8004524:	2000021c 	.word	0x2000021c
 8004528:	0800d8a8 	.word	0x0800d8a8
 800452c:	0800d8bc 	.word	0x0800d8bc
 8004530:	0800d8d0 	.word	0x0800d8d0
 8004534:	0800d8e4 	.word	0x0800d8e4
 8004538:	0800d8f8 	.word	0x0800d8f8
 800453c:	2000023b 	.word	0x2000023b
 8004540:	0800d150 	.word	0x0800d150
 8004544:	0800d164 	.word	0x0800d164
 8004548:	0800d1b0 	.word	0x0800d1b0
			} else if(dilSecim == 1) {
 800454c:	4bab      	ldr	r3, [pc, #684]	; (80047fc <menu+0x35fc>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d104      	bne.n	800455e <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004554:	4aaa      	ldr	r2, [pc, #680]	; (8004800 <menu+0x3600>)
 8004556:	2101      	movs	r1, #1
 8004558:	2002      	movs	r0, #2
 800455a:	f003 facd 	bl	8007af8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800455e:	2102      	movs	r1, #2
 8004560:	48a8      	ldr	r0, [pc, #672]	; (8004804 <menu+0x3604>)
 8004562:	f004 fdef 	bl	8009144 <HAL_GPIO_ReadPin>
 8004566:	4603      	mov	r3, r0
 8004568:	2b01      	cmp	r3, #1
 800456a:	d115      	bne.n	8004598 <menu+0x3398>
 800456c:	4ba6      	ldr	r3, [pc, #664]	; (8004808 <menu+0x3608>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	f083 0301 	eor.w	r3, r3, #1
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00e      	beq.n	8004598 <menu+0x3398>
			iotMode = iotMode + 1;
 800457a:	4ba4      	ldr	r3, [pc, #656]	; (800480c <menu+0x360c>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	3301      	adds	r3, #1
 8004580:	b2da      	uxtb	r2, r3
 8004582:	4ba2      	ldr	r3, [pc, #648]	; (800480c <menu+0x360c>)
 8004584:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004586:	4ba1      	ldr	r3, [pc, #644]	; (800480c <menu+0x360c>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d902      	bls.n	8004594 <menu+0x3394>
				iotMode = 0;
 800458e:	4b9f      	ldr	r3, [pc, #636]	; (800480c <menu+0x360c>)
 8004590:	2200      	movs	r2, #0
 8004592:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004594:	f000 fa00 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004598:	2104      	movs	r1, #4
 800459a:	489a      	ldr	r0, [pc, #616]	; (8004804 <menu+0x3604>)
 800459c:	f004 fdd2 	bl	8009144 <HAL_GPIO_ReadPin>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d115      	bne.n	80045d2 <menu+0x33d2>
 80045a6:	4b98      	ldr	r3, [pc, #608]	; (8004808 <menu+0x3608>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	f083 0301 	eor.w	r3, r3, #1
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00e      	beq.n	80045d2 <menu+0x33d2>
			iotMode = iotMode - 1;
 80045b4:	4b95      	ldr	r3, [pc, #596]	; (800480c <menu+0x360c>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	4b93      	ldr	r3, [pc, #588]	; (800480c <menu+0x360c>)
 80045be:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 80045c0:	4b92      	ldr	r3, [pc, #584]	; (800480c <menu+0x360c>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d002      	beq.n	80045ce <menu+0x33ce>
		   		iotMode = 1;
 80045c8:	4b90      	ldr	r3, [pc, #576]	; (800480c <menu+0x360c>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80045ce:	f000 f9e3 	bl	8004998 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045d2:	2108      	movs	r1, #8
 80045d4:	488b      	ldr	r0, [pc, #556]	; (8004804 <menu+0x3604>)
 80045d6:	f004 fdb5 	bl	8009144 <HAL_GPIO_ReadPin>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d10e      	bne.n	80045fe <menu+0x33fe>
 80045e0:	4b89      	ldr	r3, [pc, #548]	; (8004808 <menu+0x3608>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	f083 0301 	eor.w	r3, r3, #1
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d007      	beq.n	80045fe <menu+0x33fe>
			eepromData[48] = iotMode;
 80045ee:	4b87      	ldr	r3, [pc, #540]	; (800480c <menu+0x360c>)
 80045f0:	781a      	ldrb	r2, [r3, #0]
 80045f2:	4b87      	ldr	r3, [pc, #540]	; (8004810 <menu+0x3610>)
 80045f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 80045f8:	4b86      	ldr	r3, [pc, #536]	; (8004814 <menu+0x3614>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80045fe:	4b86      	ldr	r3, [pc, #536]	; (8004818 <menu+0x3618>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	2b20      	cmp	r3, #32
 8004604:	d13f      	bne.n	8004686 <menu+0x3486>
		calismaSayModu = 0;
 8004606:	4b85      	ldr	r3, [pc, #532]	; (800481c <menu+0x361c>)
 8004608:	2200      	movs	r2, #0
 800460a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800460c:	4b7b      	ldr	r3, [pc, #492]	; (80047fc <menu+0x35fc>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d105      	bne.n	8004620 <menu+0x3420>
			lcd_print(1, 1, "MAKINE ID       ");
 8004614:	4a82      	ldr	r2, [pc, #520]	; (8004820 <menu+0x3620>)
 8004616:	2101      	movs	r1, #1
 8004618:	2001      	movs	r0, #1
 800461a:	f003 fa6d 	bl	8007af8 <lcd_print>
 800461e:	e004      	b.n	800462a <menu+0x342a>
		} else {
			lcd_print(1, 1, "MACHINE ID      ");
 8004620:	4a80      	ldr	r2, [pc, #512]	; (8004824 <menu+0x3624>)
 8004622:	2101      	movs	r1, #1
 8004624:	2001      	movs	r0, #1
 8004626:	f003 fa67 	bl	8007af8 <lcd_print>
		}

		lcd_print(2, 1, machineID);
 800462a:	4a7f      	ldr	r2, [pc, #508]	; (8004828 <menu+0x3628>)
 800462c:	2101      	movs	r1, #1
 800462e:	2002      	movs	r0, #2
 8004630:	f003 fa62 	bl	8007af8 <lcd_print>
		lcd_print(2, 13, "    ");
 8004634:	4a7d      	ldr	r2, [pc, #500]	; (800482c <menu+0x362c>)
 8004636:	210d      	movs	r1, #13
 8004638:	2002      	movs	r0, #2
 800463a:	f003 fa5d 	bl	8007af8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800463e:	2102      	movs	r1, #2
 8004640:	4870      	ldr	r0, [pc, #448]	; (8004804 <menu+0x3604>)
 8004642:	f004 fd7f 	bl	8009144 <HAL_GPIO_ReadPin>
 8004646:	4603      	mov	r3, r0
 8004648:	2b01      	cmp	r3, #1
 800464a:	d11c      	bne.n	8004686 <menu+0x3486>
 800464c:	2104      	movs	r1, #4
 800464e:	486d      	ldr	r0, [pc, #436]	; (8004804 <menu+0x3604>)
 8004650:	f004 fd78 	bl	8009144 <HAL_GPIO_ReadPin>
 8004654:	4603      	mov	r3, r0
 8004656:	2b01      	cmp	r3, #1
 8004658:	d115      	bne.n	8004686 <menu+0x3486>
 800465a:	4b6b      	ldr	r3, [pc, #428]	; (8004808 <menu+0x3608>)
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	f083 0301 	eor.w	r3, r3, #1
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00e      	beq.n	8004686 <menu+0x3486>
			takeMachineID();
 8004668:	f002 faa2 	bl	8006bb0 <takeMachineID>

			HAL_Delay(250);
 800466c:	20fa      	movs	r0, #250	; 0xfa
 800466e:	f003 ff99 	bl	80085a4 <HAL_Delay>
			lcd_print(2, 1, machineID);
 8004672:	4a6d      	ldr	r2, [pc, #436]	; (8004828 <menu+0x3628>)
 8004674:	2101      	movs	r1, #1
 8004676:	2002      	movs	r0, #2
 8004678:	f003 fa3e 	bl	8007af8 <lcd_print>
			lcd_print(2, 13, "    ");
 800467c:	4a6b      	ldr	r2, [pc, #428]	; (800482c <menu+0x362c>)
 800467e:	210d      	movs	r1, #13
 8004680:	2002      	movs	r0, #2
 8004682:	f003 fa39 	bl	8007af8 <lcd_print>
		}
	}

	if (menuSayac == 33) {
 8004686:	4b64      	ldr	r3, [pc, #400]	; (8004818 <menu+0x3618>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	2b21      	cmp	r3, #33	; 0x21
 800468c:	d14f      	bne.n	800472e <menu+0x352e>
		calismaSayModu = 0;
 800468e:	4b63      	ldr	r3, [pc, #396]	; (800481c <menu+0x361c>)
 8004690:	2200      	movs	r2, #0
 8004692:	701a      	strb	r2, [r3, #0]

		int ssidLength = strlen(wifiSSID);
 8004694:	4866      	ldr	r0, [pc, #408]	; (8004830 <menu+0x3630>)
 8004696:	f7fb fdc5 	bl	8000224 <strlen>
 800469a:	4603      	mov	r3, r0
 800469c:	607b      	str	r3, [r7, #4]

		lcd_print(1, 1, "WIFI SSID       ");
 800469e:	4a65      	ldr	r2, [pc, #404]	; (8004834 <menu+0x3634>)
 80046a0:	2101      	movs	r1, #1
 80046a2:	2001      	movs	r0, #1
 80046a4:	f003 fa28 	bl	8007af8 <lcd_print>

		if(ssidLength <=16) {
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b10      	cmp	r3, #16
 80046ac:	dc0e      	bgt.n	80046cc <menu+0x34cc>
			lcd_print(2, 1, wifiSSID);
 80046ae:	4a60      	ldr	r2, [pc, #384]	; (8004830 <menu+0x3630>)
 80046b0:	2101      	movs	r1, #1
 80046b2:	2002      	movs	r0, #2
 80046b4:	f003 fa20 	bl	8007af8 <lcd_print>
			lcd_print(2, 1+ssidLength, emptyArray);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	3301      	adds	r3, #1
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	4a5d      	ldr	r2, [pc, #372]	; (8004838 <menu+0x3638>)
 80046c2:	4619      	mov	r1, r3
 80046c4:	2002      	movs	r0, #2
 80046c6:	f003 fa17 	bl	8007af8 <lcd_print>
 80046ca:	e005      	b.n	80046d8 <menu+0x34d8>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 80046cc:	2300      	movs	r3, #0
 80046ce:	2202      	movs	r2, #2
 80046d0:	2101      	movs	r1, #1
 80046d2:	4857      	ldr	r0, [pc, #348]	; (8004830 <menu+0x3630>)
 80046d4:	f7fc fcd8 	bl	8001088 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046d8:	2102      	movs	r1, #2
 80046da:	484a      	ldr	r0, [pc, #296]	; (8004804 <menu+0x3604>)
 80046dc:	f004 fd32 	bl	8009144 <HAL_GPIO_ReadPin>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d123      	bne.n	800472e <menu+0x352e>
 80046e6:	2104      	movs	r1, #4
 80046e8:	4846      	ldr	r0, [pc, #280]	; (8004804 <menu+0x3604>)
 80046ea:	f004 fd2b 	bl	8009144 <HAL_GPIO_ReadPin>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d11c      	bne.n	800472e <menu+0x352e>
 80046f4:	4b44      	ldr	r3, [pc, #272]	; (8004808 <menu+0x3608>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	f083 0301 	eor.w	r3, r3, #1
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d015      	beq.n	800472e <menu+0x352e>
			takeWifiSSID();
 8004702:	f002 fbab 	bl	8006e5c <takeWifiSSID>

			HAL_Delay(250);
 8004706:	20fa      	movs	r0, #250	; 0xfa
 8004708:	f003 ff4c 	bl	80085a4 <HAL_Delay>
			lcd_print(2, 1, wifiSSID);
 800470c:	4a48      	ldr	r2, [pc, #288]	; (8004830 <menu+0x3630>)
 800470e:	2101      	movs	r1, #1
 8004710:	2002      	movs	r0, #2
 8004712:	f003 f9f1 	bl	8007af8 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004716:	4846      	ldr	r0, [pc, #280]	; (8004830 <menu+0x3630>)
 8004718:	f7fb fd84 	bl	8000224 <strlen>
 800471c:	4603      	mov	r3, r0
 800471e:	b2db      	uxtb	r3, r3
 8004720:	3301      	adds	r3, #1
 8004722:	b2db      	uxtb	r3, r3
 8004724:	4a44      	ldr	r2, [pc, #272]	; (8004838 <menu+0x3638>)
 8004726:	4619      	mov	r1, r3
 8004728:	2002      	movs	r0, #2
 800472a:	f003 f9e5 	bl	8007af8 <lcd_print>
		}
	}

	if (menuSayac == 34) {
 800472e:	4b3a      	ldr	r3, [pc, #232]	; (8004818 <menu+0x3618>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b22      	cmp	r3, #34	; 0x22
 8004734:	d14f      	bne.n	80047d6 <menu+0x35d6>
		calismaSayModu = 0;
 8004736:	4b39      	ldr	r3, [pc, #228]	; (800481c <menu+0x361c>)
 8004738:	2200      	movs	r2, #0
 800473a:	701a      	strb	r2, [r3, #0]

		int passLength = strlen(wifiPass);
 800473c:	483f      	ldr	r0, [pc, #252]	; (800483c <menu+0x363c>)
 800473e:	f7fb fd71 	bl	8000224 <strlen>
 8004742:	4603      	mov	r3, r0
 8004744:	603b      	str	r3, [r7, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004746:	4a3e      	ldr	r2, [pc, #248]	; (8004840 <menu+0x3640>)
 8004748:	2101      	movs	r1, #1
 800474a:	2001      	movs	r0, #1
 800474c:	f003 f9d4 	bl	8007af8 <lcd_print>

		if(passLength <= 16) {
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2b10      	cmp	r3, #16
 8004754:	dc0e      	bgt.n	8004774 <menu+0x3574>
			lcd_print(2, 1, wifiPass);
 8004756:	4a39      	ldr	r2, [pc, #228]	; (800483c <menu+0x363c>)
 8004758:	2101      	movs	r1, #1
 800475a:	2002      	movs	r0, #2
 800475c:	f003 f9cc 	bl	8007af8 <lcd_print>
			lcd_print(2, 1+passLength, emptyArray);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	b2db      	uxtb	r3, r3
 8004764:	3301      	adds	r3, #1
 8004766:	b2db      	uxtb	r3, r3
 8004768:	4a33      	ldr	r2, [pc, #204]	; (8004838 <menu+0x3638>)
 800476a:	4619      	mov	r1, r3
 800476c:	2002      	movs	r0, #2
 800476e:	f003 f9c3 	bl	8007af8 <lcd_print>
 8004772:	e005      	b.n	8004780 <menu+0x3580>
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004774:	2301      	movs	r3, #1
 8004776:	2202      	movs	r2, #2
 8004778:	2101      	movs	r1, #1
 800477a:	4830      	ldr	r0, [pc, #192]	; (800483c <menu+0x363c>)
 800477c:	f7fc fc84 	bl	8001088 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004780:	2102      	movs	r1, #2
 8004782:	4820      	ldr	r0, [pc, #128]	; (8004804 <menu+0x3604>)
 8004784:	f004 fcde 	bl	8009144 <HAL_GPIO_ReadPin>
 8004788:	4603      	mov	r3, r0
 800478a:	2b01      	cmp	r3, #1
 800478c:	d123      	bne.n	80047d6 <menu+0x35d6>
 800478e:	2104      	movs	r1, #4
 8004790:	481c      	ldr	r0, [pc, #112]	; (8004804 <menu+0x3604>)
 8004792:	f004 fcd7 	bl	8009144 <HAL_GPIO_ReadPin>
 8004796:	4603      	mov	r3, r0
 8004798:	2b01      	cmp	r3, #1
 800479a:	d11c      	bne.n	80047d6 <menu+0x35d6>
 800479c:	4b1a      	ldr	r3, [pc, #104]	; (8004808 <menu+0x3608>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	f083 0301 	eor.w	r3, r3, #1
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d015      	beq.n	80047d6 <menu+0x35d6>
			takeWifiPass();
 80047aa:	f002 fcdf 	bl	800716c <takeWifiPass>

			HAL_Delay(250);
 80047ae:	20fa      	movs	r0, #250	; 0xfa
 80047b0:	f003 fef8 	bl	80085a4 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 80047b4:	4a21      	ldr	r2, [pc, #132]	; (800483c <menu+0x363c>)
 80047b6:	2101      	movs	r1, #1
 80047b8:	2002      	movs	r0, #2
 80047ba:	f003 f99d 	bl	8007af8 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 80047be:	481f      	ldr	r0, [pc, #124]	; (800483c <menu+0x363c>)
 80047c0:	f7fb fd30 	bl	8000224 <strlen>
 80047c4:	4603      	mov	r3, r0
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	3301      	adds	r3, #1
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	4a1a      	ldr	r2, [pc, #104]	; (8004838 <menu+0x3638>)
 80047ce:	4619      	mov	r1, r3
 80047d0:	2002      	movs	r0, #2
 80047d2:	f003 f991 	bl	8007af8 <lcd_print>
		}
	}

	if (menuSayac == 35) {
 80047d6:	4b10      	ldr	r3, [pc, #64]	; (8004818 <menu+0x3618>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	2b23      	cmp	r3, #35	; 0x23
 80047dc:	d175      	bne.n	80048ca <menu+0x36ca>
		if(dilSecim == 0) {
 80047de:	4b07      	ldr	r3, [pc, #28]	; (80047fc <menu+0x35fc>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d132      	bne.n	800484c <menu+0x364c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 80047e6:	4a17      	ldr	r2, [pc, #92]	; (8004844 <menu+0x3644>)
 80047e8:	2101      	movs	r1, #1
 80047ea:	2001      	movs	r0, #1
 80047ec:	f003 f984 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 80047f0:	4a15      	ldr	r2, [pc, #84]	; (8004848 <menu+0x3648>)
 80047f2:	2101      	movs	r1, #1
 80047f4:	2002      	movs	r0, #2
 80047f6:	f003 f97f 	bl	8007af8 <lcd_print>
 80047fa:	e035      	b.n	8004868 <menu+0x3668>
 80047fc:	2000023d 	.word	0x2000023d
 8004800:	0800d1c4 	.word	0x0800d1c4
 8004804:	40010800 	.word	0x40010800
 8004808:	2000024b 	.word	0x2000024b
 800480c:	2000023b 	.word	0x2000023b
 8004810:	20000120 	.word	0x20000120
 8004814:	20000248 	.word	0x20000248
 8004818:	2000021c 	.word	0x2000021c
 800481c:	2000023c 	.word	0x2000023c
 8004820:	0800d90c 	.word	0x0800d90c
 8004824:	0800d920 	.word	0x0800d920
 8004828:	20000198 	.word	0x20000198
 800482c:	0800d934 	.word	0x0800d934
 8004830:	200001a4 	.word	0x200001a4
 8004834:	0800d93c 	.word	0x0800d93c
 8004838:	20000010 	.word	0x20000010
 800483c:	200001b8 	.word	0x200001b8
 8004840:	0800d950 	.word	0x0800d950
 8004844:	0800d964 	.word	0x0800d964
 8004848:	0800d978 	.word	0x0800d978
		} else if(dilSecim == 1) {
 800484c:	4b21      	ldr	r3, [pc, #132]	; (80048d4 <menu+0x36d4>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d109      	bne.n	8004868 <menu+0x3668>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004854:	4a20      	ldr	r2, [pc, #128]	; (80048d8 <menu+0x36d8>)
 8004856:	2101      	movs	r1, #1
 8004858:	2001      	movs	r0, #1
 800485a:	f003 f94d 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 800485e:	4a1f      	ldr	r2, [pc, #124]	; (80048dc <menu+0x36dc>)
 8004860:	2101      	movs	r1, #1
 8004862:	2002      	movs	r0, #2
 8004864:	f003 f948 	bl	8007af8 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004868:	2108      	movs	r1, #8
 800486a:	481d      	ldr	r0, [pc, #116]	; (80048e0 <menu+0x36e0>)
 800486c:	f004 fc6a 	bl	8009144 <HAL_GPIO_ReadPin>
 8004870:	4603      	mov	r3, r0
 8004872:	2b01      	cmp	r3, #1
 8004874:	d129      	bne.n	80048ca <menu+0x36ca>
			menuGiris = 0;
 8004876:	4b1b      	ldr	r3, [pc, #108]	; (80048e4 <menu+0x36e4>)
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800487c:	bf00      	nop
 800487e:	481a      	ldr	r0, [pc, #104]	; (80048e8 <menu+0x36e8>)
 8004880:	f005 fa89 	bl	8009d96 <HAL_I2C_GetError>
 8004884:	4603      	mov	r3, r0
 8004886:	2b04      	cmp	r3, #4
 8004888:	d0f9      	beq.n	800487e <menu+0x367e>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800488a:	bf00      	nop
 800488c:	4816      	ldr	r0, [pc, #88]	; (80048e8 <menu+0x36e8>)
 800488e:	f005 fa75 	bl	8009d7c <HAL_I2C_GetState>
 8004892:	4603      	mov	r3, r0
 8004894:	2b20      	cmp	r3, #32
 8004896:	d1f9      	bne.n	800488c <menu+0x368c>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004898:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800489c:	9302      	str	r3, [sp, #8]
 800489e:	236e      	movs	r3, #110	; 0x6e
 80048a0:	9301      	str	r3, [sp, #4]
 80048a2:	4b12      	ldr	r3, [pc, #72]	; (80048ec <menu+0x36ec>)
 80048a4:	9300      	str	r3, [sp, #0]
 80048a6:	236e      	movs	r3, #110	; 0x6e
 80048a8:	2200      	movs	r2, #0
 80048aa:	21a0      	movs	r1, #160	; 0xa0
 80048ac:	480e      	ldr	r0, [pc, #56]	; (80048e8 <menu+0x36e8>)
 80048ae:	f004 ff03 	bl	80096b8 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 80048b2:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80048b6:	f003 fe75 	bl	80085a4 <HAL_Delay>

			lcd_clear();
 80048ba:	f003 f949 	bl	8007b50 <lcd_clear>
			HAL_Delay(500);
 80048be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80048c2:	f003 fe6f 	bl	80085a4 <HAL_Delay>
			NVIC_SystemReset();
 80048c6:	f7fc fc85 	bl	80011d4 <__NVIC_SystemReset>
		}
	}
}
 80048ca:	bf00      	nop
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	2000023d 	.word	0x2000023d
 80048d8:	0800d98c 	.word	0x0800d98c
 80048dc:	0800d9a0 	.word	0x0800d9a0
 80048e0:	40010800 	.word	0x40010800
 80048e4:	20000239 	.word	0x20000239
 80048e8:	200002ac 	.word	0x200002ac
 80048ec:	20000120 	.word	0x20000120

080048f0 <lcdUpdate>:
#include "ErrorProcess.h"
#include "EEPROMProcess.h"
#include "WifiProcess.h"
#include "Menu.h"

void lcdUpdate(uint8_t y) {
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	4603      	mov	r3, r0
 80048f8:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d105      	bne.n	800490c <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004900:	4a22      	ldr	r2, [pc, #136]	; (800498c <lcdUpdate+0x9c>)
 8004902:	2101      	movs	r1, #1
 8004904:	2002      	movs	r0, #2
 8004906:	f003 f8f7 	bl	8007af8 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 4, "ESP-RMK");
		lcd_print(2, 6, "RUN");
	}
}
 800490a:	e03b      	b.n	8004984 <lcdUpdate+0x94>
	} else if(y==2) {
 800490c:	79fb      	ldrb	r3, [r7, #7]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d105      	bne.n	800491e <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004912:	4a1e      	ldr	r2, [pc, #120]	; (800498c <lcdUpdate+0x9c>)
 8004914:	2102      	movs	r1, #2
 8004916:	2002      	movs	r0, #2
 8004918:	f003 f8ee 	bl	8007af8 <lcd_print>
}
 800491c:	e032      	b.n	8004984 <lcdUpdate+0x94>
	} else if(y==3) {
 800491e:	79fb      	ldrb	r3, [r7, #7]
 8004920:	2b03      	cmp	r3, #3
 8004922:	d105      	bne.n	8004930 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004924:	4a19      	ldr	r2, [pc, #100]	; (800498c <lcdUpdate+0x9c>)
 8004926:	2103      	movs	r1, #3
 8004928:	2002      	movs	r0, #2
 800492a:	f003 f8e5 	bl	8007af8 <lcd_print>
}
 800492e:	e029      	b.n	8004984 <lcdUpdate+0x94>
	} else if(y==4) {
 8004930:	79fb      	ldrb	r3, [r7, #7]
 8004932:	2b04      	cmp	r3, #4
 8004934:	d105      	bne.n	8004942 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8004936:	4a15      	ldr	r2, [pc, #84]	; (800498c <lcdUpdate+0x9c>)
 8004938:	2104      	movs	r1, #4
 800493a:	2002      	movs	r0, #2
 800493c:	f003 f8dc 	bl	8007af8 <lcd_print>
}
 8004940:	e020      	b.n	8004984 <lcdUpdate+0x94>
	} else if(y==5) {
 8004942:	79fb      	ldrb	r3, [r7, #7]
 8004944:	2b05      	cmp	r3, #5
 8004946:	d105      	bne.n	8004954 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8004948:	4a10      	ldr	r2, [pc, #64]	; (800498c <lcdUpdate+0x9c>)
 800494a:	2105      	movs	r1, #5
 800494c:	2002      	movs	r0, #2
 800494e:	f003 f8d3 	bl	8007af8 <lcd_print>
}
 8004952:	e017      	b.n	8004984 <lcdUpdate+0x94>
	} else if(y==6) {
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	2b06      	cmp	r3, #6
 8004958:	d105      	bne.n	8004966 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 800495a:	4a0c      	ldr	r2, [pc, #48]	; (800498c <lcdUpdate+0x9c>)
 800495c:	2106      	movs	r1, #6
 800495e:	2002      	movs	r0, #2
 8004960:	f003 f8ca 	bl	8007af8 <lcd_print>
}
 8004964:	e00e      	b.n	8004984 <lcdUpdate+0x94>
	} else if (y==7) {
 8004966:	79fb      	ldrb	r3, [r7, #7]
 8004968:	2b07      	cmp	r3, #7
 800496a:	d10b      	bne.n	8004984 <lcdUpdate+0x94>
		lcd_clear();
 800496c:	f003 f8f0 	bl	8007b50 <lcd_clear>
		lcd_print(1, 4, "ESP-RMK");
 8004970:	4a07      	ldr	r2, [pc, #28]	; (8004990 <lcdUpdate+0xa0>)
 8004972:	2104      	movs	r1, #4
 8004974:	2001      	movs	r0, #1
 8004976:	f003 f8bf 	bl	8007af8 <lcd_print>
		lcd_print(2, 6, "RUN");
 800497a:	4a06      	ldr	r2, [pc, #24]	; (8004994 <lcdUpdate+0xa4>)
 800497c:	2106      	movs	r1, #6
 800497e:	2002      	movs	r0, #2
 8004980:	f003 f8ba 	bl	8007af8 <lcd_print>
}
 8004984:	bf00      	nop
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	0800d9b4 	.word	0x0800d9b4
 8004990:	0800d9b8 	.word	0x0800d9b8
 8004994:	0800d9c0 	.word	0x0800d9c0

08004998 <bekle>:

void bekle() {
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
	timer1=millis;
 800499c:	4b47      	ldr	r3, [pc, #284]	; (8004abc <bekle+0x124>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a47      	ldr	r2, [pc, #284]	; (8004ac0 <bekle+0x128>)
 80049a2:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049a4:	e002      	b.n	80049ac <bekle+0x14>
    	butonKontrol = 1;
 80049a6:	4b47      	ldr	r3, [pc, #284]	; (8004ac4 <bekle+0x12c>)
 80049a8:	2201      	movs	r2, #1
 80049aa:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049ac:	2101      	movs	r1, #1
 80049ae:	4846      	ldr	r0, [pc, #280]	; (8004ac8 <bekle+0x130>)
 80049b0:	f004 fbc8 	bl	8009144 <HAL_GPIO_ReadPin>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d109      	bne.n	80049ce <bekle+0x36>
 80049ba:	4b40      	ldr	r3, [pc, #256]	; (8004abc <bekle+0x124>)
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	4b40      	ldr	r3, [pc, #256]	; (8004ac0 <bekle+0x128>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d0ef      	beq.n	80049a6 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049c6:	e002      	b.n	80049ce <bekle+0x36>
    	butonKontrol = 1;
 80049c8:	4b3e      	ldr	r3, [pc, #248]	; (8004ac4 <bekle+0x12c>)
 80049ca:	2201      	movs	r2, #1
 80049cc:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049ce:	2108      	movs	r1, #8
 80049d0:	483e      	ldr	r0, [pc, #248]	; (8004acc <bekle+0x134>)
 80049d2:	f004 fbb7 	bl	8009144 <HAL_GPIO_ReadPin>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d109      	bne.n	80049f0 <bekle+0x58>
 80049dc:	4b37      	ldr	r3, [pc, #220]	; (8004abc <bekle+0x124>)
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	4b37      	ldr	r3, [pc, #220]	; (8004ac0 <bekle+0x128>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d0ef      	beq.n	80049c8 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049e8:	e002      	b.n	80049f0 <bekle+0x58>
    	butonKontrol = 1;
 80049ea:	4b36      	ldr	r3, [pc, #216]	; (8004ac4 <bekle+0x12c>)
 80049ec:	2201      	movs	r2, #1
 80049ee:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80049f0:	2102      	movs	r1, #2
 80049f2:	4835      	ldr	r0, [pc, #212]	; (8004ac8 <bekle+0x130>)
 80049f4:	f004 fba6 	bl	8009144 <HAL_GPIO_ReadPin>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d109      	bne.n	8004a12 <bekle+0x7a>
 80049fe:	4b2f      	ldr	r3, [pc, #188]	; (8004abc <bekle+0x124>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	4b2f      	ldr	r3, [pc, #188]	; (8004ac0 <bekle+0x128>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d0ef      	beq.n	80049ea <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a0a:	e002      	b.n	8004a12 <bekle+0x7a>
    	butonKontrol = 1;
 8004a0c:	4b2d      	ldr	r3, [pc, #180]	; (8004ac4 <bekle+0x12c>)
 8004a0e:	2201      	movs	r2, #1
 8004a10:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a12:	2104      	movs	r1, #4
 8004a14:	482c      	ldr	r0, [pc, #176]	; (8004ac8 <bekle+0x130>)
 8004a16:	f004 fb95 	bl	8009144 <HAL_GPIO_ReadPin>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d109      	bne.n	8004a34 <bekle+0x9c>
 8004a20:	4b26      	ldr	r3, [pc, #152]	; (8004abc <bekle+0x124>)
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	4b26      	ldr	r3, [pc, #152]	; (8004ac0 <bekle+0x128>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d0ef      	beq.n	8004a0c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a2c:	e002      	b.n	8004a34 <bekle+0x9c>
    	butonKontrol = 1;
 8004a2e:	4b25      	ldr	r3, [pc, #148]	; (8004ac4 <bekle+0x12c>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004a34:	2108      	movs	r1, #8
 8004a36:	4824      	ldr	r0, [pc, #144]	; (8004ac8 <bekle+0x130>)
 8004a38:	f004 fb84 	bl	8009144 <HAL_GPIO_ReadPin>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d109      	bne.n	8004a56 <bekle+0xbe>
 8004a42:	4b1e      	ldr	r3, [pc, #120]	; (8004abc <bekle+0x124>)
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	4b1e      	ldr	r3, [pc, #120]	; (8004ac0 <bekle+0x128>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d0ef      	beq.n	8004a2e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a4e:	e002      	b.n	8004a56 <bekle+0xbe>
    	butonKontrol = 1;
 8004a50:	4b1c      	ldr	r3, [pc, #112]	; (8004ac4 <bekle+0x12c>)
 8004a52:	2201      	movs	r2, #1
 8004a54:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a56:	2180      	movs	r1, #128	; 0x80
 8004a58:	481c      	ldr	r0, [pc, #112]	; (8004acc <bekle+0x134>)
 8004a5a:	f004 fb73 	bl	8009144 <HAL_GPIO_ReadPin>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d109      	bne.n	8004a78 <bekle+0xe0>
 8004a64:	4b15      	ldr	r3, [pc, #84]	; (8004abc <bekle+0x124>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	4b15      	ldr	r3, [pc, #84]	; (8004ac0 <bekle+0x128>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d0ef      	beq.n	8004a50 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a70:	e002      	b.n	8004a78 <bekle+0xe0>
    	butonKontrol = 1;
 8004a72:	4b14      	ldr	r3, [pc, #80]	; (8004ac4 <bekle+0x12c>)
 8004a74:	2201      	movs	r2, #1
 8004a76:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a7c:	4813      	ldr	r0, [pc, #76]	; (8004acc <bekle+0x134>)
 8004a7e:	f004 fb61 	bl	8009144 <HAL_GPIO_ReadPin>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d109      	bne.n	8004a9c <bekle+0x104>
 8004a88:	4b0c      	ldr	r3, [pc, #48]	; (8004abc <bekle+0x124>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <bekle+0x128>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d0ee      	beq.n	8004a72 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a94:	e002      	b.n	8004a9c <bekle+0x104>
    	butonKontrol = 1;
 8004a96:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <bekle+0x12c>)
 8004a98:	2201      	movs	r2, #1
 8004a9a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004a9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004aa0:	480a      	ldr	r0, [pc, #40]	; (8004acc <bekle+0x134>)
 8004aa2:	f004 fb4f 	bl	8009144 <HAL_GPIO_ReadPin>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d105      	bne.n	8004ab8 <bekle+0x120>
 8004aac:	4b03      	ldr	r3, [pc, #12]	; (8004abc <bekle+0x124>)
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	4b03      	ldr	r3, [pc, #12]	; (8004ac0 <bekle+0x128>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d0ee      	beq.n	8004a96 <bekle+0xfe>
    }

}
 8004ab8:	bf00      	nop
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	200001f8 	.word	0x200001f8
 8004ac0:	20000200 	.word	0x20000200
 8004ac4:	2000024b 	.word	0x2000024b
 8004ac8:	40010800 	.word	0x40010800
 8004acc:	40011000 	.word	0x40011000

08004ad0 <checkLCDBacklight>:
		return 1;
	}
	return 0;
}

void checkLCDBacklight() {
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8004ad4:	4b07      	ldr	r3, [pc, #28]	; (8004af4 <checkLCDBacklight+0x24>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <checkLCDBacklight+0x28>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b3b      	cmp	r3, #59	; 0x3b
 8004ae0:	d903      	bls.n	8004aea <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	f003 f854 	bl	8007b90 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004ae8:	e002      	b.n	8004af0 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004aea:	2001      	movs	r0, #1
 8004aec:	f003 f850 	bl	8007b90 <lcd_backlight>
}
 8004af0:	bf00      	nop
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	200001f8 	.word	0x200001f8
 8004af8:	20000214 	.word	0x20000214

08004afc <checkBasincSalteri>:

void checkBasincSalteri() {
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004b00:	4b13      	ldr	r3, [pc, #76]	; (8004b50 <checkBasincSalteri+0x54>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d102      	bne.n	8004b0e <checkBasincSalteri+0x12>
		basincVar=1;
 8004b08:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <checkBasincSalteri+0x58>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004b0e:	4b10      	ldr	r3, [pc, #64]	; (8004b50 <checkBasincSalteri+0x54>)
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d119      	bne.n	8004b4a <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004b16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b1a:	480f      	ldr	r0, [pc, #60]	; (8004b58 <checkBasincSalteri+0x5c>)
 8004b1c:	f004 fb12 	bl	8009144 <HAL_GPIO_ReadPin>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10a      	bne.n	8004b3c <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004b26:	4b0d      	ldr	r3, [pc, #52]	; (8004b5c <checkBasincSalteri+0x60>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	4b0d      	ldr	r3, [pc, #52]	; (8004b60 <checkBasincSalteri+0x64>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d90a      	bls.n	8004b4a <checkBasincSalteri+0x4e>
				basincVar=1;
 8004b34:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <checkBasincSalteri+0x58>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004b3a:	e006      	b.n	8004b4a <checkBasincSalteri+0x4e>
			timer5=millis;
 8004b3c:	4b07      	ldr	r3, [pc, #28]	; (8004b5c <checkBasincSalteri+0x60>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a07      	ldr	r2, [pc, #28]	; (8004b60 <checkBasincSalteri+0x64>)
 8004b42:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004b44:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <checkBasincSalteri+0x58>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	701a      	strb	r2, [r3, #0]
}
 8004b4a:	bf00      	nop
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20000223 	.word	0x20000223
 8004b54:	2000021f 	.word	0x2000021f
 8004b58:	40011000 	.word	0x40011000
 8004b5c:	200001f8 	.word	0x200001f8
 8004b60:	20000210 	.word	0x20000210

08004b64 <checkBasGonder>:

void checkBasGonder() {
 8004b64:	b480      	push	{r7}
 8004b66:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004b68:	4b1b      	ldr	r3, [pc, #108]	; (8004bd8 <checkBasGonder+0x74>)
 8004b6a:	781b      	ldrb	r3, [r3, #0]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d10b      	bne.n	8004b88 <checkBasGonder+0x24>
 8004b70:	4b1a      	ldr	r3, [pc, #104]	; (8004bdc <checkBasGonder+0x78>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d007      	beq.n	8004b88 <checkBasGonder+0x24>
 8004b78:	4b19      	ldr	r3, [pc, #100]	; (8004be0 <checkBasGonder+0x7c>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d103      	bne.n	8004b88 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004b80:	4b18      	ldr	r3, [pc, #96]	; (8004be4 <checkBasGonder+0x80>)
 8004b82:	2201      	movs	r2, #1
 8004b84:	701a      	strb	r2, [r3, #0]
 8004b86:	e009      	b.n	8004b9c <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004b88:	4b14      	ldr	r3, [pc, #80]	; (8004bdc <checkBasGonder+0x78>)
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	f083 0301 	eor.w	r3, r3, #1
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004b96:	4b13      	ldr	r3, [pc, #76]	; (8004be4 <checkBasGonder+0x80>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004b9c:	4b0e      	ldr	r3, [pc, #56]	; (8004bd8 <checkBasGonder+0x74>)
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d10b      	bne.n	8004bbc <checkBasGonder+0x58>
 8004ba4:	4b10      	ldr	r3, [pc, #64]	; (8004be8 <checkBasGonder+0x84>)
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <checkBasGonder+0x58>
 8004bac:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <checkBasGonder+0x7c>)
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d103      	bne.n	8004bbc <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004bb4:	4b0d      	ldr	r3, [pc, #52]	; (8004bec <checkBasGonder+0x88>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004bba:	e009      	b.n	8004bd0 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <checkBasGonder+0x84>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	f083 0301 	eor.w	r3, r3, #1
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8004bca:	4b08      	ldr	r3, [pc, #32]	; (8004bec <checkBasGonder+0x88>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	701a      	strb	r2, [r3, #0]
}
 8004bd0:	bf00      	nop
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bc80      	pop	{r7}
 8004bd6:	4770      	bx	lr
 8004bd8:	2000021d 	.word	0x2000021d
 8004bdc:	20000251 	.word	0x20000251
 8004be0:	2000022b 	.word	0x2000022b
 8004be4:	20000258 	.word	0x20000258
 8004be8:	20000254 	.word	0x20000254
 8004bec:	20000259 	.word	0x20000259

08004bf0 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004bf4:	4b24      	ldr	r3, [pc, #144]	; (8004c88 <checkKapiSecimleri+0x98>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d102      	bne.n	8004c02 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004bfc:	4b23      	ldr	r3, [pc, #140]	; (8004c8c <checkKapiSecimleri+0x9c>)
 8004bfe:	2201      	movs	r2, #1
 8004c00:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004c02:	4b21      	ldr	r3, [pc, #132]	; (8004c88 <checkKapiSecimleri+0x98>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d10e      	bne.n	8004c28 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8004c0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c0e:	4820      	ldr	r0, [pc, #128]	; (8004c90 <checkKapiSecimleri+0xa0>)
 8004c10:	f004 fa98 	bl	8009144 <HAL_GPIO_ReadPin>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d103      	bne.n	8004c22 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004c1a:	4b1c      	ldr	r3, [pc, #112]	; (8004c8c <checkKapiSecimleri+0x9c>)
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	701a      	strb	r2, [r3, #0]
 8004c20:	e002      	b.n	8004c28 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004c22:	4b1a      	ldr	r3, [pc, #104]	; (8004c8c <checkKapiSecimleri+0x9c>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004c28:	4b17      	ldr	r3, [pc, #92]	; (8004c88 <checkKapiSecimleri+0x98>)
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d10e      	bne.n	8004c4e <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004c30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c34:	4816      	ldr	r0, [pc, #88]	; (8004c90 <checkKapiSecimleri+0xa0>)
 8004c36:	f004 fa85 	bl	8009144 <HAL_GPIO_ReadPin>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d103      	bne.n	8004c48 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004c40:	4b12      	ldr	r3, [pc, #72]	; (8004c8c <checkKapiSecimleri+0x9c>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	701a      	strb	r2, [r3, #0]
 8004c46:	e002      	b.n	8004c4e <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004c48:	4b10      	ldr	r3, [pc, #64]	; (8004c8c <checkKapiSecimleri+0x9c>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004c4e:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <checkKapiSecimleri+0x98>)
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d116      	bne.n	8004c84 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004c56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004c5a:	480d      	ldr	r0, [pc, #52]	; (8004c90 <checkKapiSecimleri+0xa0>)
 8004c5c:	f004 fa72 	bl	8009144 <HAL_GPIO_ReadPin>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10b      	bne.n	8004c7e <checkKapiSecimleri+0x8e>
 8004c66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c6a:	4809      	ldr	r0, [pc, #36]	; (8004c90 <checkKapiSecimleri+0xa0>)
 8004c6c:	f004 fa6a 	bl	8009144 <HAL_GPIO_ReadPin>
 8004c70:	4603      	mov	r3, r0
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d103      	bne.n	8004c7e <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004c76:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <checkKapiSecimleri+0x9c>)
 8004c78:	2201      	movs	r2, #1
 8004c7a:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004c7c:	e002      	b.n	8004c84 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004c7e:	4b03      	ldr	r3, [pc, #12]	; (8004c8c <checkKapiSecimleri+0x9c>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	701a      	strb	r2, [r3, #0]
}
 8004c84:	bf00      	nop
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	20000224 	.word	0x20000224
 8004c8c:	2000026f 	.word	0x2000026f
 8004c90:	40010800 	.word	0x40010800

08004c94 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004c98:	4b62      	ldr	r3, [pc, #392]	; (8004e24 <checkAktifCalisma+0x190>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	f041 833e 	bne.w	800631e <checkAktifCalisma+0x168a>
 8004ca2:	4b61      	ldr	r3, [pc, #388]	; (8004e28 <checkAktifCalisma+0x194>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f041 8339 	bne.w	800631e <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004cac:	4b5f      	ldr	r3, [pc, #380]	; (8004e2c <checkAktifCalisma+0x198>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d11a      	bne.n	8004cea <checkAktifCalisma+0x56>
 8004cb4:	4b5e      	ldr	r3, [pc, #376]	; (8004e30 <checkAktifCalisma+0x19c>)
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d116      	bne.n	8004cea <checkAktifCalisma+0x56>
 8004cbc:	4b5d      	ldr	r3, [pc, #372]	; (8004e34 <checkAktifCalisma+0x1a0>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <checkAktifCalisma+0x46>
 8004cc4:	4b5c      	ldr	r3, [pc, #368]	; (8004e38 <checkAktifCalisma+0x1a4>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	f083 0301 	eor.w	r3, r3, #1
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <checkAktifCalisma+0x46>
 8004cd2:	4b5a      	ldr	r3, [pc, #360]	; (8004e3c <checkAktifCalisma+0x1a8>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d007      	beq.n	8004cea <checkAktifCalisma+0x56>
 8004cda:	4b59      	ldr	r3, [pc, #356]	; (8004e40 <checkAktifCalisma+0x1ac>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d018      	beq.n	8004d14 <checkAktifCalisma+0x80>
 8004ce2:	4b58      	ldr	r3, [pc, #352]	; (8004e44 <checkAktifCalisma+0x1b0>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d114      	bne.n	8004d14 <checkAktifCalisma+0x80>
 8004cea:	4b57      	ldr	r3, [pc, #348]	; (8004e48 <checkAktifCalisma+0x1b4>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d010      	beq.n	8004d14 <checkAktifCalisma+0x80>
 8004cf2:	4b56      	ldr	r3, [pc, #344]	; (8004e4c <checkAktifCalisma+0x1b8>)
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00c      	beq.n	8004d14 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d00:	4853      	ldr	r0, [pc, #332]	; (8004e50 <checkAktifCalisma+0x1bc>)
 8004d02:	f004 fa36 	bl	8009172 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 8004d06:	4b53      	ldr	r3, [pc, #332]	; (8004e54 <checkAktifCalisma+0x1c0>)
 8004d08:	2201      	movs	r2, #1
 8004d0a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8004d0c:	4b52      	ldr	r3, [pc, #328]	; (8004e58 <checkAktifCalisma+0x1c4>)
 8004d0e:	2201      	movs	r2, #1
 8004d10:	701a      	strb	r2, [r3, #0]
 8004d12:	e008      	b.n	8004d26 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004d14:	2200      	movs	r2, #0
 8004d16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d1a:	484d      	ldr	r0, [pc, #308]	; (8004e50 <checkAktifCalisma+0x1bc>)
 8004d1c:	f004 fa29 	bl	8009172 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8004d20:	4b4c      	ldr	r3, [pc, #304]	; (8004e54 <checkAktifCalisma+0x1c0>)
 8004d22:	2200      	movs	r2, #0
 8004d24:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 8004d26:	4b40      	ldr	r3, [pc, #256]	; (8004e28 <checkAktifCalisma+0x194>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d160      	bne.n	8004df0 <checkAktifCalisma+0x15c>
 8004d2e:	4b46      	ldr	r3, [pc, #280]	; (8004e48 <checkAktifCalisma+0x1b4>)
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d05c      	beq.n	8004df0 <checkAktifCalisma+0x15c>
 8004d36:	4b45      	ldr	r3, [pc, #276]	; (8004e4c <checkAktifCalisma+0x1b8>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d058      	beq.n	8004df0 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004d3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d42:	4843      	ldr	r0, [pc, #268]	; (8004e50 <checkAktifCalisma+0x1bc>)
 8004d44:	f004 f9fe 	bl	8009144 <HAL_GPIO_ReadPin>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <checkAktifCalisma+0xc2>
 8004d4e:	4b43      	ldr	r3, [pc, #268]	; (8004e5c <checkAktifCalisma+0x1c8>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d04c      	beq.n	8004df0 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004d56:	2102      	movs	r1, #2
 8004d58:	4841      	ldr	r0, [pc, #260]	; (8004e60 <checkAktifCalisma+0x1cc>)
 8004d5a:	f004 f9f3 	bl	8009144 <HAL_GPIO_ReadPin>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d145      	bne.n	8004df0 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004d64:	4b3f      	ldr	r3, [pc, #252]	; (8004e64 <checkAktifCalisma+0x1d0>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d041      	beq.n	8004df0 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004d6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004d70:	4837      	ldr	r0, [pc, #220]	; (8004e50 <checkAktifCalisma+0x1bc>)
 8004d72:	f004 f9e7 	bl	8009144 <HAL_GPIO_ReadPin>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d10e      	bne.n	8004d9a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004d7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d80:	4833      	ldr	r0, [pc, #204]	; (8004e50 <checkAktifCalisma+0x1bc>)
 8004d82:	f004 f9df 	bl	8009144 <HAL_GPIO_ReadPin>
 8004d86:	4603      	mov	r3, r0
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d106      	bne.n	8004d9a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004d8c:	2140      	movs	r1, #64	; 0x40
 8004d8e:	4834      	ldr	r0, [pc, #208]	; (8004e60 <checkAktifCalisma+0x1cc>)
 8004d90:	f004 f9d8 	bl	8009144 <HAL_GPIO_ReadPin>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d003      	beq.n	8004da2 <checkAktifCalisma+0x10e>
 8004d9a:	4b24      	ldr	r3, [pc, #144]	; (8004e2c <checkAktifCalisma+0x198>)
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d026      	beq.n	8004df0 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8004da2:	4b24      	ldr	r3, [pc, #144]	; (8004e34 <checkAktifCalisma+0x1a0>)
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	f083 0301 	eor.w	r3, r3, #1
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d01f      	beq.n	8004df0 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8004db0:	4b1f      	ldr	r3, [pc, #124]	; (8004e30 <checkAktifCalisma+0x19c>)
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	f083 0301 	eor.w	r3, r3, #1
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d018      	beq.n	8004df0 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8004dbe:	4b20      	ldr	r3, [pc, #128]	; (8004e40 <checkAktifCalisma+0x1ac>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	f083 0301 	eor.w	r3, r3, #1
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d011      	beq.n	8004df0 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004dcc:	4b26      	ldr	r3, [pc, #152]	; (8004e68 <checkAktifCalisma+0x1d4>)
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	f083 0301 	eor.w	r3, r3, #1
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8004dda:	4b24      	ldr	r3, [pc, #144]	; (8004e6c <checkAktifCalisma+0x1d8>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	f083 0301 	eor.w	r3, r3, #1
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8004de8:	4b10      	ldr	r3, [pc, #64]	; (8004e2c <checkAktifCalisma+0x198>)
 8004dea:	2201      	movs	r2, #1
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	e002      	b.n	8004df6 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8004df0:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <checkAktifCalisma+0x198>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8004df6:	4b0d      	ldr	r3, [pc, #52]	; (8004e2c <checkAktifCalisma+0x198>)
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d03a      	beq.n	8004e74 <checkAktifCalisma+0x1e0>
 8004dfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004e02:	4817      	ldr	r0, [pc, #92]	; (8004e60 <checkAktifCalisma+0x1cc>)
 8004e04:	f004 f99e 	bl	8009144 <HAL_GPIO_ReadPin>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d132      	bne.n	8004e74 <checkAktifCalisma+0x1e0>
 8004e0e:	4b18      	ldr	r3, [pc, #96]	; (8004e70 <checkAktifCalisma+0x1dc>)
 8004e10:	781b      	ldrb	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d02e      	beq.n	8004e74 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004e16:	2201      	movs	r2, #1
 8004e18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e1c:	480c      	ldr	r0, [pc, #48]	; (8004e50 <checkAktifCalisma+0x1bc>)
 8004e1e:	f004 f9a8 	bl	8009172 <HAL_GPIO_WritePin>
 8004e22:	e02d      	b.n	8004e80 <checkAktifCalisma+0x1ec>
 8004e24:	2000023a 	.word	0x2000023a
 8004e28:	20000239 	.word	0x20000239
 8004e2c:	20000251 	.word	0x20000251
 8004e30:	20000252 	.word	0x20000252
 8004e34:	20000254 	.word	0x20000254
 8004e38:	2000024c 	.word	0x2000024c
 8004e3c:	2000022f 	.word	0x2000022f
 8004e40:	20000253 	.word	0x20000253
 8004e44:	2000022e 	.word	0x2000022e
 8004e48:	2000026e 	.word	0x2000026e
 8004e4c:	2000026f 	.word	0x2000026f
 8004e50:	40010c00 	.word	0x40010c00
 8004e54:	20000270 	.word	0x20000270
 8004e58:	2000025b 	.word	0x2000025b
 8004e5c:	20000258 	.word	0x20000258
 8004e60:	40011000 	.word	0x40011000
 8004e64:	2000021f 	.word	0x2000021f
 8004e68:	20000256 	.word	0x20000256
 8004e6c:	20000257 	.word	0x20000257
 8004e70:	2000022a 	.word	0x2000022a
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004e74:	2200      	movs	r2, #0
 8004e76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e7a:	4860      	ldr	r0, [pc, #384]	; (8004ffc <checkAktifCalisma+0x368>)
 8004e7c:	f004 f979 	bl	8009172 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004e80:	4b5f      	ldr	r3, [pc, #380]	; (8005000 <checkAktifCalisma+0x36c>)
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d013      	beq.n	8004eb0 <checkAktifCalisma+0x21c>
 8004e88:	4b5e      	ldr	r3, [pc, #376]	; (8005004 <checkAktifCalisma+0x370>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d007      	beq.n	8004ea0 <checkAktifCalisma+0x20c>
 8004e90:	4b5c      	ldr	r3, [pc, #368]	; (8005004 <checkAktifCalisma+0x370>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d003      	beq.n	8004ea0 <checkAktifCalisma+0x20c>
 8004e98:	4b5b      	ldr	r3, [pc, #364]	; (8005008 <checkAktifCalisma+0x374>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d107      	bne.n	8004eb0 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	2104      	movs	r1, #4
 8004ea4:	4855      	ldr	r0, [pc, #340]	; (8004ffc <checkAktifCalisma+0x368>)
 8004ea6:	f004 f964 	bl	8009172 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004eaa:	4b58      	ldr	r3, [pc, #352]	; (800500c <checkAktifCalisma+0x378>)
 8004eac:	2201      	movs	r2, #1
 8004eae:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004eb0:	4b56      	ldr	r3, [pc, #344]	; (800500c <checkAktifCalisma+0x378>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d02f      	beq.n	8004f18 <checkAktifCalisma+0x284>
 8004eb8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004ebc:	484f      	ldr	r0, [pc, #316]	; (8004ffc <checkAktifCalisma+0x368>)
 8004ebe:	f004 f941 	bl	8009144 <HAL_GPIO_ReadPin>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d106      	bne.n	8004ed6 <checkAktifCalisma+0x242>
 8004ec8:	4b51      	ldr	r3, [pc, #324]	; (8005010 <checkAktifCalisma+0x37c>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	f083 0301 	eor.w	r3, r3, #1
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d106      	bne.n	8004ee4 <checkAktifCalisma+0x250>
 8004ed6:	2102      	movs	r1, #2
 8004ed8:	484e      	ldr	r0, [pc, #312]	; (8005014 <checkAktifCalisma+0x380>)
 8004eda:	f004 f933 	bl	8009144 <HAL_GPIO_ReadPin>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d119      	bne.n	8004f18 <checkAktifCalisma+0x284>
 8004ee4:	4b4c      	ldr	r3, [pc, #304]	; (8005018 <checkAktifCalisma+0x384>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d015      	beq.n	8004f18 <checkAktifCalisma+0x284>
 8004eec:	4b4b      	ldr	r3, [pc, #300]	; (800501c <checkAktifCalisma+0x388>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d011      	beq.n	8004f18 <checkAktifCalisma+0x284>
 8004ef4:	4b4a      	ldr	r3, [pc, #296]	; (8005020 <checkAktifCalisma+0x38c>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00d      	beq.n	8004f18 <checkAktifCalisma+0x284>
 8004efc:	4b49      	ldr	r3, [pc, #292]	; (8005024 <checkAktifCalisma+0x390>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	f083 0301 	eor.w	r3, r3, #1
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d006      	beq.n	8004f18 <checkAktifCalisma+0x284>
			timer2=millis;
 8004f0a:	4b47      	ldr	r3, [pc, #284]	; (8005028 <checkAktifCalisma+0x394>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a47      	ldr	r2, [pc, #284]	; (800502c <checkAktifCalisma+0x398>)
 8004f10:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8004f12:	4b44      	ldr	r3, [pc, #272]	; (8005024 <checkAktifCalisma+0x390>)
 8004f14:	2201      	movs	r2, #1
 8004f16:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8004f18:	4b43      	ldr	r3, [pc, #268]	; (8005028 <checkAktifCalisma+0x394>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	4b43      	ldr	r3, [pc, #268]	; (800502c <checkAktifCalisma+0x398>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	4a43      	ldr	r2, [pc, #268]	; (8005030 <checkAktifCalisma+0x39c>)
 8004f24:	7812      	ldrb	r2, [r2, #0]
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d303      	bcc.n	8004f32 <checkAktifCalisma+0x29e>
 8004f2a:	4b3e      	ldr	r3, [pc, #248]	; (8005024 <checkAktifCalisma+0x390>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d111      	bne.n	8004f56 <checkAktifCalisma+0x2c2>
 8004f32:	4b39      	ldr	r3, [pc, #228]	; (8005018 <checkAktifCalisma+0x384>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	f083 0301 	eor.w	r3, r3, #1
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10a      	bne.n	8004f56 <checkAktifCalisma+0x2c2>
 8004f40:	4b36      	ldr	r3, [pc, #216]	; (800501c <checkAktifCalisma+0x388>)
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	f083 0301 	eor.w	r3, r3, #1
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d103      	bne.n	8004f56 <checkAktifCalisma+0x2c2>
 8004f4e:	4b34      	ldr	r3, [pc, #208]	; (8005020 <checkAktifCalisma+0x38c>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10a      	bne.n	8004f6c <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004f56:	2200      	movs	r2, #0
 8004f58:	2104      	movs	r1, #4
 8004f5a:	4828      	ldr	r0, [pc, #160]	; (8004ffc <checkAktifCalisma+0x368>)
 8004f5c:	f004 f909 	bl	8009172 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8004f60:	4b2a      	ldr	r3, [pc, #168]	; (800500c <checkAktifCalisma+0x378>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8004f66:	4b2f      	ldr	r3, [pc, #188]	; (8005024 <checkAktifCalisma+0x390>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8004f6c:	4b31      	ldr	r3, [pc, #196]	; (8005034 <checkAktifCalisma+0x3a0>)
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d102      	bne.n	8004f7a <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8004f74:	4b30      	ldr	r3, [pc, #192]	; (8005038 <checkAktifCalisma+0x3a4>)
 8004f76:	2201      	movs	r2, #1
 8004f78:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004f7a:	4b2e      	ldr	r3, [pc, #184]	; (8005034 <checkAktifCalisma+0x3a0>)
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d116      	bne.n	8004fb0 <checkAktifCalisma+0x31c>
 8004f82:	4b2e      	ldr	r3, [pc, #184]	; (800503c <checkAktifCalisma+0x3a8>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d112      	bne.n	8004fb0 <checkAktifCalisma+0x31c>
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	4821      	ldr	r0, [pc, #132]	; (8005014 <checkAktifCalisma+0x380>)
 8004f8e:	f004 f8d9 	bl	8009144 <HAL_GPIO_ReadPin>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10b      	bne.n	8004fb0 <checkAktifCalisma+0x31c>
 8004f98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f9c:	4817      	ldr	r0, [pc, #92]	; (8004ffc <checkAktifCalisma+0x368>)
 8004f9e:	f004 f8d1 	bl	8009144 <HAL_GPIO_ReadPin>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d103      	bne.n	8004fb0 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8004fa8:	4b23      	ldr	r3, [pc, #140]	; (8005038 <checkAktifCalisma+0x3a4>)
 8004faa:	2201      	movs	r2, #1
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	e011      	b.n	8004fd4 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8004fb0:	4b20      	ldr	r3, [pc, #128]	; (8005034 <checkAktifCalisma+0x3a0>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d10d      	bne.n	8004fd4 <checkAktifCalisma+0x340>
 8004fb8:	2101      	movs	r1, #1
 8004fba:	4816      	ldr	r0, [pc, #88]	; (8005014 <checkAktifCalisma+0x380>)
 8004fbc:	f004 f8c2 	bl	8009144 <HAL_GPIO_ReadPin>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d106      	bne.n	8004fd4 <checkAktifCalisma+0x340>
 8004fc6:	4b1d      	ldr	r3, [pc, #116]	; (800503c <checkAktifCalisma+0x3a8>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d102      	bne.n	8004fd4 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8004fce:	4b1a      	ldr	r3, [pc, #104]	; (8005038 <checkAktifCalisma+0x3a4>)
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8004fd4:	4b17      	ldr	r3, [pc, #92]	; (8005034 <checkAktifCalisma+0x3a0>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d134      	bne.n	8005046 <checkAktifCalisma+0x3b2>
 8004fdc:	4b17      	ldr	r3, [pc, #92]	; (800503c <checkAktifCalisma+0x3a8>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d130      	bne.n	8005046 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	480b      	ldr	r0, [pc, #44]	; (8005014 <checkAktifCalisma+0x380>)
 8004fe8:	f004 f8ac 	bl	8009144 <HAL_GPIO_ReadPin>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d126      	bne.n	8005040 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8004ff2:	4b11      	ldr	r3, [pc, #68]	; (8005038 <checkAktifCalisma+0x3a4>)
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	701a      	strb	r2, [r3, #0]
 8004ff8:	e025      	b.n	8005046 <checkAktifCalisma+0x3b2>
 8004ffa:	bf00      	nop
 8004ffc:	40010c00 	.word	0x40010c00
 8005000:	20000251 	.word	0x20000251
 8005004:	2000022b 	.word	0x2000022b
 8005008:	2000022f 	.word	0x2000022f
 800500c:	20000255 	.word	0x20000255
 8005010:	20000258 	.word	0x20000258
 8005014:	40011000 	.word	0x40011000
 8005018:	2000026e 	.word	0x2000026e
 800501c:	2000026f 	.word	0x2000026f
 8005020:	2000021f 	.word	0x2000021f
 8005024:	2000024d 	.word	0x2000024d
 8005028:	200001f8 	.word	0x200001f8
 800502c:	20000204 	.word	0x20000204
 8005030:	20000230 	.word	0x20000230
 8005034:	20000220 	.word	0x20000220
 8005038:	20000273 	.word	0x20000273
 800503c:	2000021d 	.word	0x2000021d
			} else {
				cerceveVar=0;
 8005040:	4b7f      	ldr	r3, [pc, #508]	; (8005240 <checkAktifCalisma+0x5ac>)
 8005042:	2200      	movs	r2, #0
 8005044:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8005046:	4b7f      	ldr	r3, [pc, #508]	; (8005244 <checkAktifCalisma+0x5b0>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d17c      	bne.n	8005148 <checkAktifCalisma+0x4b4>
 800504e:	4b7e      	ldr	r3, [pc, #504]	; (8005248 <checkAktifCalisma+0x5b4>)
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d078      	beq.n	8005148 <checkAktifCalisma+0x4b4>
 8005056:	4b7d      	ldr	r3, [pc, #500]	; (800524c <checkAktifCalisma+0x5b8>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d074      	beq.n	8005148 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800505e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005062:	487b      	ldr	r0, [pc, #492]	; (8005250 <checkAktifCalisma+0x5bc>)
 8005064:	f004 f86e 	bl	8009144 <HAL_GPIO_ReadPin>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <checkAktifCalisma+0x3e2>
 800506e:	4b79      	ldr	r3, [pc, #484]	; (8005254 <checkAktifCalisma+0x5c0>)
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d068      	beq.n	8005148 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8005076:	4b72      	ldr	r3, [pc, #456]	; (8005240 <checkAktifCalisma+0x5ac>)
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d064      	beq.n	8005148 <checkAktifCalisma+0x4b4>
 800507e:	4b76      	ldr	r3, [pc, #472]	; (8005258 <checkAktifCalisma+0x5c4>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	f083 0301 	eor.w	r3, r3, #1
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d05d      	beq.n	8005148 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 800508c:	2104      	movs	r1, #4
 800508e:	4873      	ldr	r0, [pc, #460]	; (800525c <checkAktifCalisma+0x5c8>)
 8005090:	f004 f858 	bl	8009144 <HAL_GPIO_ReadPin>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <checkAktifCalisma+0x40e>
 800509a:	4b71      	ldr	r3, [pc, #452]	; (8005260 <checkAktifCalisma+0x5cc>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d152      	bne.n	8005148 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80050a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050a6:	486a      	ldr	r0, [pc, #424]	; (8005250 <checkAktifCalisma+0x5bc>)
 80050a8:	f004 f84c 	bl	8009144 <HAL_GPIO_ReadPin>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d10e      	bne.n	80050d0 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80050b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80050b6:	4866      	ldr	r0, [pc, #408]	; (8005250 <checkAktifCalisma+0x5bc>)
 80050b8:	f004 f844 	bl	8009144 <HAL_GPIO_ReadPin>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d106      	bne.n	80050d0 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80050c2:	2140      	movs	r1, #64	; 0x40
 80050c4:	4865      	ldr	r0, [pc, #404]	; (800525c <checkAktifCalisma+0x5c8>)
 80050c6:	f004 f83d 	bl	8009144 <HAL_GPIO_ReadPin>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d003      	beq.n	80050d8 <checkAktifCalisma+0x444>
 80050d0:	4b64      	ldr	r3, [pc, #400]	; (8005264 <checkAktifCalisma+0x5d0>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d037      	beq.n	8005148 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 80050d8:	4b63      	ldr	r3, [pc, #396]	; (8005268 <checkAktifCalisma+0x5d4>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	f083 0301 	eor.w	r3, r3, #1
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d030      	beq.n	8005148 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 80050e6:	4b61      	ldr	r3, [pc, #388]	; (800526c <checkAktifCalisma+0x5d8>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	f083 0301 	eor.w	r3, r3, #1
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d029      	beq.n	8005148 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 80050f4:	4b5e      	ldr	r3, [pc, #376]	; (8005270 <checkAktifCalisma+0x5dc>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	f083 0301 	eor.w	r3, r3, #1
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d022      	beq.n	8005148 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8005102:	4b5c      	ldr	r3, [pc, #368]	; (8005274 <checkAktifCalisma+0x5e0>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	f083 0301 	eor.w	r3, r3, #1
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01b      	beq.n	8005148 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8005110:	4b59      	ldr	r3, [pc, #356]	; (8005278 <checkAktifCalisma+0x5e4>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	f083 0301 	eor.w	r3, r3, #1
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d014      	beq.n	8005148 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 800511e:	4b57      	ldr	r3, [pc, #348]	; (800527c <checkAktifCalisma+0x5e8>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	f083 0301 	eor.w	r3, r3, #1
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00d      	beq.n	8005148 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800512c:	2201      	movs	r2, #1
 800512e:	2102      	movs	r1, #2
 8005130:	4847      	ldr	r0, [pc, #284]	; (8005250 <checkAktifCalisma+0x5bc>)
 8005132:	f004 f81e 	bl	8009172 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8005136:	4b4b      	ldr	r3, [pc, #300]	; (8005264 <checkAktifCalisma+0x5d0>)
 8005138:	2201      	movs	r2, #1
 800513a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 800513c:	4b50      	ldr	r3, [pc, #320]	; (8005280 <checkAktifCalisma+0x5ec>)
 800513e:	2201      	movs	r2, #1
 8005140:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8005142:	4b50      	ldr	r3, [pc, #320]	; (8005284 <checkAktifCalisma+0x5f0>)
 8005144:	2201      	movs	r2, #1
 8005146:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8005148:	4b46      	ldr	r3, [pc, #280]	; (8005264 <checkAktifCalisma+0x5d0>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d033      	beq.n	80051b8 <checkAktifCalisma+0x524>
 8005150:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005154:	483e      	ldr	r0, [pc, #248]	; (8005250 <checkAktifCalisma+0x5bc>)
 8005156:	f003 fff5 	bl	8009144 <HAL_GPIO_ReadPin>
 800515a:	4603      	mov	r3, r0
 800515c:	2b01      	cmp	r3, #1
 800515e:	d106      	bne.n	800516e <checkAktifCalisma+0x4da>
 8005160:	4b3c      	ldr	r3, [pc, #240]	; (8005254 <checkAktifCalisma+0x5c0>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	f083 0301 	eor.w	r3, r3, #1
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10a      	bne.n	8005184 <checkAktifCalisma+0x4f0>
 800516e:	2104      	movs	r1, #4
 8005170:	483a      	ldr	r0, [pc, #232]	; (800525c <checkAktifCalisma+0x5c8>)
 8005172:	f003 ffe7 	bl	8009144 <HAL_GPIO_ReadPin>
 8005176:	4603      	mov	r3, r0
 8005178:	2b01      	cmp	r3, #1
 800517a:	d11d      	bne.n	80051b8 <checkAktifCalisma+0x524>
 800517c:	4b38      	ldr	r3, [pc, #224]	; (8005260 <checkAktifCalisma+0x5cc>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d019      	beq.n	80051b8 <checkAktifCalisma+0x524>
 8005184:	4b30      	ldr	r3, [pc, #192]	; (8005248 <checkAktifCalisma+0x5b4>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d015      	beq.n	80051b8 <checkAktifCalisma+0x524>
 800518c:	4b2f      	ldr	r3, [pc, #188]	; (800524c <checkAktifCalisma+0x5b8>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d011      	beq.n	80051b8 <checkAktifCalisma+0x524>
 8005194:	4b2a      	ldr	r3, [pc, #168]	; (8005240 <checkAktifCalisma+0x5ac>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00d      	beq.n	80051b8 <checkAktifCalisma+0x524>
 800519c:	4b3a      	ldr	r3, [pc, #232]	; (8005288 <checkAktifCalisma+0x5f4>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	f083 0301 	eor.w	r3, r3, #1
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d006      	beq.n	80051b8 <checkAktifCalisma+0x524>
			timer2=millis;
 80051aa:	4b38      	ldr	r3, [pc, #224]	; (800528c <checkAktifCalisma+0x5f8>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a38      	ldr	r2, [pc, #224]	; (8005290 <checkAktifCalisma+0x5fc>)
 80051b0:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 80051b2:	4b35      	ldr	r3, [pc, #212]	; (8005288 <checkAktifCalisma+0x5f4>)
 80051b4:	2201      	movs	r2, #1
 80051b6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80051b8:	4b34      	ldr	r3, [pc, #208]	; (800528c <checkAktifCalisma+0x5f8>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	4b34      	ldr	r3, [pc, #208]	; (8005290 <checkAktifCalisma+0x5fc>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	4a34      	ldr	r2, [pc, #208]	; (8005294 <checkAktifCalisma+0x600>)
 80051c4:	7812      	ldrb	r2, [r2, #0]
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d303      	bcc.n	80051d2 <checkAktifCalisma+0x53e>
 80051ca:	4b2f      	ldr	r3, [pc, #188]	; (8005288 <checkAktifCalisma+0x5f4>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d114      	bne.n	80051fc <checkAktifCalisma+0x568>
 80051d2:	4b1d      	ldr	r3, [pc, #116]	; (8005248 <checkAktifCalisma+0x5b4>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	f083 0301 	eor.w	r3, r3, #1
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10d      	bne.n	80051fc <checkAktifCalisma+0x568>
 80051e0:	4b1a      	ldr	r3, [pc, #104]	; (800524c <checkAktifCalisma+0x5b8>)
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	f083 0301 	eor.w	r3, r3, #1
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d106      	bne.n	80051fc <checkAktifCalisma+0x568>
 80051ee:	4b14      	ldr	r3, [pc, #80]	; (8005240 <checkAktifCalisma+0x5ac>)
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	f083 0301 	eor.w	r3, r3, #1
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80051fc:	2200      	movs	r2, #0
 80051fe:	2102      	movs	r1, #2
 8005200:	4813      	ldr	r0, [pc, #76]	; (8005250 <checkAktifCalisma+0x5bc>)
 8005202:	f003 ffb6 	bl	8009172 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8005206:	4b17      	ldr	r3, [pc, #92]	; (8005264 <checkAktifCalisma+0x5d0>)
 8005208:	2200      	movs	r2, #0
 800520a:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 800520c:	4b1e      	ldr	r3, [pc, #120]	; (8005288 <checkAktifCalisma+0x5f4>)
 800520e:	2200      	movs	r2, #0
 8005210:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005212:	4b14      	ldr	r3, [pc, #80]	; (8005264 <checkAktifCalisma+0x5d0>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d040      	beq.n	800529c <checkAktifCalisma+0x608>
 800521a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800521e:	480f      	ldr	r0, [pc, #60]	; (800525c <checkAktifCalisma+0x5c8>)
 8005220:	f003 ff90 	bl	8009144 <HAL_GPIO_ReadPin>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d138      	bne.n	800529c <checkAktifCalisma+0x608>
 800522a:	4b1b      	ldr	r3, [pc, #108]	; (8005298 <checkAktifCalisma+0x604>)
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d034      	beq.n	800529c <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005232:	2201      	movs	r2, #1
 8005234:	2101      	movs	r1, #1
 8005236:	4806      	ldr	r0, [pc, #24]	; (8005250 <checkAktifCalisma+0x5bc>)
 8005238:	f003 ff9b 	bl	8009172 <HAL_GPIO_WritePin>
 800523c:	e033      	b.n	80052a6 <checkAktifCalisma+0x612>
 800523e:	bf00      	nop
 8005240:	20000273 	.word	0x20000273
 8005244:	20000239 	.word	0x20000239
 8005248:	2000026e 	.word	0x2000026e
 800524c:	2000026f 	.word	0x2000026f
 8005250:	40010c00 	.word	0x40010c00
 8005254:	20000259 	.word	0x20000259
 8005258:	2000026d 	.word	0x2000026d
 800525c:	40011000 	.word	0x40011000
 8005260:	20000222 	.word	0x20000222
 8005264:	20000254 	.word	0x20000254
 8005268:	20000251 	.word	0x20000251
 800526c:	20000255 	.word	0x20000255
 8005270:	20000252 	.word	0x20000252
 8005274:	20000253 	.word	0x20000253
 8005278:	20000256 	.word	0x20000256
 800527c:	20000257 	.word	0x20000257
 8005280:	2000025c 	.word	0x2000025c
 8005284:	2000027d 	.word	0x2000027d
 8005288:	2000024c 	.word	0x2000024c
 800528c:	200001f8 	.word	0x200001f8
 8005290:	20000204 	.word	0x20000204
 8005294:	20000231 	.word	0x20000231
 8005298:	20000221 	.word	0x20000221
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800529c:	2200      	movs	r2, #0
 800529e:	2101      	movs	r1, #1
 80052a0:	4836      	ldr	r0, [pc, #216]	; (800537c <checkAktifCalisma+0x6e8>)
 80052a2:	f003 ff66 	bl	8009172 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80052a6:	4b36      	ldr	r3, [pc, #216]	; (8005380 <checkAktifCalisma+0x6ec>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f040 8080 	bne.w	80053b0 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80052b0:	4b34      	ldr	r3, [pc, #208]	; (8005384 <checkAktifCalisma+0x6f0>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d003      	beq.n	80052c0 <checkAktifCalisma+0x62c>
 80052b8:	4b32      	ldr	r3, [pc, #200]	; (8005384 <checkAktifCalisma+0x6f0>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d177      	bne.n	80053b0 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 80052c0:	4b31      	ldr	r3, [pc, #196]	; (8005388 <checkAktifCalisma+0x6f4>)
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d073      	beq.n	80053b0 <checkAktifCalisma+0x71c>
 80052c8:	4b30      	ldr	r3, [pc, #192]	; (800538c <checkAktifCalisma+0x6f8>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d06f      	beq.n	80053b0 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80052d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80052d4:	4829      	ldr	r0, [pc, #164]	; (800537c <checkAktifCalisma+0x6e8>)
 80052d6:	f003 ff35 	bl	8009144 <HAL_GPIO_ReadPin>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d167      	bne.n	80053b0 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80052e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052e4:	482a      	ldr	r0, [pc, #168]	; (8005390 <checkAktifCalisma+0x6fc>)
 80052e6:	f003 ff2d 	bl	8009144 <HAL_GPIO_ReadPin>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <checkAktifCalisma+0x664>
 80052f0:	4b28      	ldr	r3, [pc, #160]	; (8005394 <checkAktifCalisma+0x700>)
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d15b      	bne.n	80053b0 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80052f8:	2140      	movs	r1, #64	; 0x40
 80052fa:	4825      	ldr	r0, [pc, #148]	; (8005390 <checkAktifCalisma+0x6fc>)
 80052fc:	f003 ff22 	bl	8009144 <HAL_GPIO_ReadPin>
 8005300:	4603      	mov	r3, r0
 8005302:	2b01      	cmp	r3, #1
 8005304:	d10f      	bne.n	8005326 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005306:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800530a:	481c      	ldr	r0, [pc, #112]	; (800537c <checkAktifCalisma+0x6e8>)
 800530c:	f003 ff1a 	bl	8009144 <HAL_GPIO_ReadPin>
 8005310:	4603      	mov	r3, r0
 8005312:	2b01      	cmp	r3, #1
 8005314:	d107      	bne.n	8005326 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005316:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800531a:	4818      	ldr	r0, [pc, #96]	; (800537c <checkAktifCalisma+0x6e8>)
 800531c:	f003 ff12 	bl	8009144 <HAL_GPIO_ReadPin>
 8005320:	4603      	mov	r3, r0
 8005322:	2b01      	cmp	r3, #1
 8005324:	d003      	beq.n	800532e <checkAktifCalisma+0x69a>
 8005326:	4b1c      	ldr	r3, [pc, #112]	; (8005398 <checkAktifCalisma+0x704>)
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d040      	beq.n	80053b0 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 800532e:	4b1b      	ldr	r3, [pc, #108]	; (800539c <checkAktifCalisma+0x708>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	f083 0301 	eor.w	r3, r3, #1
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d039      	beq.n	80053b0 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 800533c:	4b18      	ldr	r3, [pc, #96]	; (80053a0 <checkAktifCalisma+0x70c>)
 800533e:	781b      	ldrb	r3, [r3, #0]
 8005340:	f083 0301 	eor.w	r3, r3, #1
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d032      	beq.n	80053b0 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 800534a:	4b16      	ldr	r3, [pc, #88]	; (80053a4 <checkAktifCalisma+0x710>)
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	f083 0301 	eor.w	r3, r3, #1
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d02b      	beq.n	80053b0 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8005358:	4b13      	ldr	r3, [pc, #76]	; (80053a8 <checkAktifCalisma+0x714>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	f083 0301 	eor.w	r3, r3, #1
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d024      	beq.n	80053b0 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8005366:	4b11      	ldr	r3, [pc, #68]	; (80053ac <checkAktifCalisma+0x718>)
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	f083 0301 	eor.w	r3, r3, #1
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d01d      	beq.n	80053b0 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8005374:	4b08      	ldr	r3, [pc, #32]	; (8005398 <checkAktifCalisma+0x704>)
 8005376:	2201      	movs	r2, #1
 8005378:	701a      	strb	r2, [r3, #0]
 800537a:	e01c      	b.n	80053b6 <checkAktifCalisma+0x722>
 800537c:	40010c00 	.word	0x40010c00
 8005380:	20000239 	.word	0x20000239
 8005384:	2000022b 	.word	0x2000022b
 8005388:	2000026e 	.word	0x2000026e
 800538c:	2000026f 	.word	0x2000026f
 8005390:	40011000 	.word	0x40011000
 8005394:	2000022c 	.word	0x2000022c
 8005398:	20000252 	.word	0x20000252
 800539c:	20000251 	.word	0x20000251
 80053a0:	20000255 	.word	0x20000255
 80053a4:	20000254 	.word	0x20000254
 80053a8:	20000253 	.word	0x20000253
 80053ac:	20000257 	.word	0x20000257
		} else {
			devmotoryukaricalisiyor=0;
 80053b0:	4b64      	ldr	r3, [pc, #400]	; (8005544 <checkAktifCalisma+0x8b0>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 80053b6:	4b63      	ldr	r3, [pc, #396]	; (8005544 <checkAktifCalisma+0x8b0>)
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d007      	beq.n	80053ce <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80053be:	2201      	movs	r2, #1
 80053c0:	2120      	movs	r1, #32
 80053c2:	4861      	ldr	r0, [pc, #388]	; (8005548 <checkAktifCalisma+0x8b4>)
 80053c4:	f003 fed5 	bl	8009172 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 80053c8:	4b60      	ldr	r3, [pc, #384]	; (800554c <checkAktifCalisma+0x8b8>)
 80053ca:	2201      	movs	r2, #1
 80053cc:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 80053ce:	4b5f      	ldr	r3, [pc, #380]	; (800554c <checkAktifCalisma+0x8b8>)
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d025      	beq.n	8005422 <checkAktifCalisma+0x78e>
 80053d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053da:	485d      	ldr	r0, [pc, #372]	; (8005550 <checkAktifCalisma+0x8bc>)
 80053dc:	f003 feb2 	bl	8009144 <HAL_GPIO_ReadPin>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d007      	beq.n	80053f6 <checkAktifCalisma+0x762>
 80053e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80053ea:	4857      	ldr	r0, [pc, #348]	; (8005548 <checkAktifCalisma+0x8b4>)
 80053ec:	f003 feaa 	bl	8009144 <HAL_GPIO_ReadPin>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d115      	bne.n	8005422 <checkAktifCalisma+0x78e>
 80053f6:	4b57      	ldr	r3, [pc, #348]	; (8005554 <checkAktifCalisma+0x8c0>)
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d011      	beq.n	8005422 <checkAktifCalisma+0x78e>
 80053fe:	4b56      	ldr	r3, [pc, #344]	; (8005558 <checkAktifCalisma+0x8c4>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00d      	beq.n	8005422 <checkAktifCalisma+0x78e>
 8005406:	4b55      	ldr	r3, [pc, #340]	; (800555c <checkAktifCalisma+0x8c8>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	f083 0301 	eor.w	r3, r3, #1
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d006      	beq.n	8005422 <checkAktifCalisma+0x78e>
			timer2=millis;
 8005414:	4b52      	ldr	r3, [pc, #328]	; (8005560 <checkAktifCalisma+0x8cc>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a52      	ldr	r2, [pc, #328]	; (8005564 <checkAktifCalisma+0x8d0>)
 800541a:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 800541c:	4b4f      	ldr	r3, [pc, #316]	; (800555c <checkAktifCalisma+0x8c8>)
 800541e:	2201      	movs	r2, #1
 8005420:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005422:	4b4f      	ldr	r3, [pc, #316]	; (8005560 <checkAktifCalisma+0x8cc>)
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	4b4f      	ldr	r3, [pc, #316]	; (8005564 <checkAktifCalisma+0x8d0>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	4a4e      	ldr	r2, [pc, #312]	; (8005568 <checkAktifCalisma+0x8d4>)
 800542e:	7812      	ldrb	r2, [r2, #0]
 8005430:	4293      	cmp	r3, r2
 8005432:	d303      	bcc.n	800543c <checkAktifCalisma+0x7a8>
 8005434:	4b49      	ldr	r3, [pc, #292]	; (800555c <checkAktifCalisma+0x8c8>)
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10d      	bne.n	8005458 <checkAktifCalisma+0x7c4>
 800543c:	4b45      	ldr	r3, [pc, #276]	; (8005554 <checkAktifCalisma+0x8c0>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	f083 0301 	eor.w	r3, r3, #1
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <checkAktifCalisma+0x7c4>
 800544a:	4b43      	ldr	r3, [pc, #268]	; (8005558 <checkAktifCalisma+0x8c4>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	f083 0301 	eor.w	r3, r3, #1
 8005452:	b2db      	uxtb	r3, r3
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005458:	2200      	movs	r2, #0
 800545a:	2120      	movs	r1, #32
 800545c:	483a      	ldr	r0, [pc, #232]	; (8005548 <checkAktifCalisma+0x8b4>)
 800545e:	f003 fe88 	bl	8009172 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8005462:	4b3a      	ldr	r3, [pc, #232]	; (800554c <checkAktifCalisma+0x8b8>)
 8005464:	2200      	movs	r2, #0
 8005466:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8005468:	4b3c      	ldr	r3, [pc, #240]	; (800555c <checkAktifCalisma+0x8c8>)
 800546a:	2200      	movs	r2, #0
 800546c:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 800546e:	4b3f      	ldr	r3, [pc, #252]	; (800556c <checkAktifCalisma+0x8d8>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	f040 8088 	bne.w	8005588 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005478:	4b3d      	ldr	r3, [pc, #244]	; (8005570 <checkAktifCalisma+0x8dc>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d003      	beq.n	8005488 <checkAktifCalisma+0x7f4>
 8005480:	4b3b      	ldr	r3, [pc, #236]	; (8005570 <checkAktifCalisma+0x8dc>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b02      	cmp	r3, #2
 8005486:	d17f      	bne.n	8005588 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8005488:	4b32      	ldr	r3, [pc, #200]	; (8005554 <checkAktifCalisma+0x8c0>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d07b      	beq.n	8005588 <checkAktifCalisma+0x8f4>
 8005490:	4b31      	ldr	r3, [pc, #196]	; (8005558 <checkAktifCalisma+0x8c4>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d077      	beq.n	8005588 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005498:	2140      	movs	r1, #64	; 0x40
 800549a:	482b      	ldr	r0, [pc, #172]	; (8005548 <checkAktifCalisma+0x8b4>)
 800549c:	f003 fe52 	bl	8009144 <HAL_GPIO_ReadPin>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d170      	bne.n	8005588 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80054a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80054aa:	4827      	ldr	r0, [pc, #156]	; (8005548 <checkAktifCalisma+0x8b4>)
 80054ac:	f003 fe4a 	bl	8009144 <HAL_GPIO_ReadPin>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d003      	beq.n	80054be <checkAktifCalisma+0x82a>
 80054b6:	4b2f      	ldr	r3, [pc, #188]	; (8005574 <checkAktifCalisma+0x8e0>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d164      	bne.n	8005588 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80054be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054c2:	4823      	ldr	r0, [pc, #140]	; (8005550 <checkAktifCalisma+0x8bc>)
 80054c4:	f003 fe3e 	bl	8009144 <HAL_GPIO_ReadPin>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d10f      	bne.n	80054ee <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80054ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80054d2:	481f      	ldr	r0, [pc, #124]	; (8005550 <checkAktifCalisma+0x8bc>)
 80054d4:	f003 fe36 	bl	8009144 <HAL_GPIO_ReadPin>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d107      	bne.n	80054ee <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 80054de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054e2:	481b      	ldr	r0, [pc, #108]	; (8005550 <checkAktifCalisma+0x8bc>)
 80054e4:	f003 fe2e 	bl	8009144 <HAL_GPIO_ReadPin>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d003      	beq.n	80054f6 <checkAktifCalisma+0x862>
 80054ee:	4b22      	ldr	r3, [pc, #136]	; (8005578 <checkAktifCalisma+0x8e4>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d048      	beq.n	8005588 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 80054f6:	4b21      	ldr	r3, [pc, #132]	; (800557c <checkAktifCalisma+0x8e8>)
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	f083 0301 	eor.w	r3, r3, #1
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d041      	beq.n	8005588 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8005504:	4b1e      	ldr	r3, [pc, #120]	; (8005580 <checkAktifCalisma+0x8ec>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	f083 0301 	eor.w	r3, r3, #1
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d03a      	beq.n	8005588 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8005512:	4b1c      	ldr	r3, [pc, #112]	; (8005584 <checkAktifCalisma+0x8f0>)
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	f083 0301 	eor.w	r3, r3, #1
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d033      	beq.n	8005588 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8005520:	4b0a      	ldr	r3, [pc, #40]	; (800554c <checkAktifCalisma+0x8b8>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	f083 0301 	eor.w	r3, r3, #1
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d02c      	beq.n	8005588 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 800552e:	4b05      	ldr	r3, [pc, #20]	; (8005544 <checkAktifCalisma+0x8b0>)
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	f083 0301 	eor.w	r3, r3, #1
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d025      	beq.n	8005588 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 800553c:	4b0e      	ldr	r3, [pc, #56]	; (8005578 <checkAktifCalisma+0x8e4>)
 800553e:	2201      	movs	r2, #1
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	e024      	b.n	800558e <checkAktifCalisma+0x8fa>
 8005544:	20000252 	.word	0x20000252
 8005548:	40011000 	.word	0x40011000
 800554c:	20000256 	.word	0x20000256
 8005550:	40010c00 	.word	0x40010c00
 8005554:	2000026e 	.word	0x2000026e
 8005558:	2000026f 	.word	0x2000026f
 800555c:	2000024e 	.word	0x2000024e
 8005560:	200001f8 	.word	0x200001f8
 8005564:	20000204 	.word	0x20000204
 8005568:	20000232 	.word	0x20000232
 800556c:	20000239 	.word	0x20000239
 8005570:	2000022b 	.word	0x2000022b
 8005574:	2000022d 	.word	0x2000022d
 8005578:	20000253 	.word	0x20000253
 800557c:	20000251 	.word	0x20000251
 8005580:	20000255 	.word	0x20000255
 8005584:	20000254 	.word	0x20000254
		} else {
			devmotorasagicalisiyor=0;
 8005588:	4b96      	ldr	r3, [pc, #600]	; (80057e4 <checkAktifCalisma+0xb50>)
 800558a:	2200      	movs	r2, #0
 800558c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 800558e:	4b95      	ldr	r3, [pc, #596]	; (80057e4 <checkAktifCalisma+0xb50>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d007      	beq.n	80055a6 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005596:	2201      	movs	r2, #1
 8005598:	2110      	movs	r1, #16
 800559a:	4893      	ldr	r0, [pc, #588]	; (80057e8 <checkAktifCalisma+0xb54>)
 800559c:	f003 fde9 	bl	8009172 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 80055a0:	4b92      	ldr	r3, [pc, #584]	; (80057ec <checkAktifCalisma+0xb58>)
 80055a2:	2201      	movs	r2, #1
 80055a4:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80055a6:	4b91      	ldr	r3, [pc, #580]	; (80057ec <checkAktifCalisma+0xb58>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d024      	beq.n	80055f8 <checkAktifCalisma+0x964>
 80055ae:	2140      	movs	r1, #64	; 0x40
 80055b0:	488d      	ldr	r0, [pc, #564]	; (80057e8 <checkAktifCalisma+0xb54>)
 80055b2:	f003 fdc7 	bl	8009144 <HAL_GPIO_ReadPin>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d007      	beq.n	80055cc <checkAktifCalisma+0x938>
 80055bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055c0:	4889      	ldr	r0, [pc, #548]	; (80057e8 <checkAktifCalisma+0xb54>)
 80055c2:	f003 fdbf 	bl	8009144 <HAL_GPIO_ReadPin>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d115      	bne.n	80055f8 <checkAktifCalisma+0x964>
 80055cc:	4b88      	ldr	r3, [pc, #544]	; (80057f0 <checkAktifCalisma+0xb5c>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d011      	beq.n	80055f8 <checkAktifCalisma+0x964>
 80055d4:	4b87      	ldr	r3, [pc, #540]	; (80057f4 <checkAktifCalisma+0xb60>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00d      	beq.n	80055f8 <checkAktifCalisma+0x964>
 80055dc:	4b86      	ldr	r3, [pc, #536]	; (80057f8 <checkAktifCalisma+0xb64>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	f083 0301 	eor.w	r3, r3, #1
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d006      	beq.n	80055f8 <checkAktifCalisma+0x964>
			timer2=millis;
 80055ea:	4b84      	ldr	r3, [pc, #528]	; (80057fc <checkAktifCalisma+0xb68>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a84      	ldr	r2, [pc, #528]	; (8005800 <checkAktifCalisma+0xb6c>)
 80055f0:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 80055f2:	4b81      	ldr	r3, [pc, #516]	; (80057f8 <checkAktifCalisma+0xb64>)
 80055f4:	2201      	movs	r2, #1
 80055f6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80055f8:	4b80      	ldr	r3, [pc, #512]	; (80057fc <checkAktifCalisma+0xb68>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	4b80      	ldr	r3, [pc, #512]	; (8005800 <checkAktifCalisma+0xb6c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	4a80      	ldr	r2, [pc, #512]	; (8005804 <checkAktifCalisma+0xb70>)
 8005604:	7812      	ldrb	r2, [r2, #0]
 8005606:	4293      	cmp	r3, r2
 8005608:	d303      	bcc.n	8005612 <checkAktifCalisma+0x97e>
 800560a:	4b7b      	ldr	r3, [pc, #492]	; (80057f8 <checkAktifCalisma+0xb64>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10d      	bne.n	800562e <checkAktifCalisma+0x99a>
 8005612:	4b77      	ldr	r3, [pc, #476]	; (80057f0 <checkAktifCalisma+0xb5c>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	f083 0301 	eor.w	r3, r3, #1
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d106      	bne.n	800562e <checkAktifCalisma+0x99a>
 8005620:	4b74      	ldr	r3, [pc, #464]	; (80057f4 <checkAktifCalisma+0xb60>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	f083 0301 	eor.w	r3, r3, #1
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800562e:	2200      	movs	r2, #0
 8005630:	2110      	movs	r1, #16
 8005632:	486d      	ldr	r0, [pc, #436]	; (80057e8 <checkAktifCalisma+0xb54>)
 8005634:	f003 fd9d 	bl	8009172 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8005638:	4b6c      	ldr	r3, [pc, #432]	; (80057ec <checkAktifCalisma+0xb58>)
 800563a:	2200      	movs	r2, #0
 800563c:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 800563e:	4b6e      	ldr	r3, [pc, #440]	; (80057f8 <checkAktifCalisma+0xb64>)
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005648:	486f      	ldr	r0, [pc, #444]	; (8005808 <checkAktifCalisma+0xb74>)
 800564a:	f003 fd7b 	bl	8009144 <HAL_GPIO_ReadPin>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d120      	bne.n	8005696 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005654:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005658:	486b      	ldr	r0, [pc, #428]	; (8005808 <checkAktifCalisma+0xb74>)
 800565a:	f003 fd73 	bl	8009144 <HAL_GPIO_ReadPin>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d118      	bne.n	8005696 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005664:	2104      	movs	r1, #4
 8005666:	4868      	ldr	r0, [pc, #416]	; (8005808 <checkAktifCalisma+0xb74>)
 8005668:	f003 fd6c 	bl	8009144 <HAL_GPIO_ReadPin>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d111      	bne.n	8005696 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005672:	2102      	movs	r1, #2
 8005674:	4864      	ldr	r0, [pc, #400]	; (8005808 <checkAktifCalisma+0xb74>)
 8005676:	f003 fd65 	bl	8009144 <HAL_GPIO_ReadPin>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10a      	bne.n	8005696 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005680:	2101      	movs	r1, #1
 8005682:	4861      	ldr	r0, [pc, #388]	; (8005808 <checkAktifCalisma+0xb74>)
 8005684:	f003 fd5e 	bl	8009144 <HAL_GPIO_ReadPin>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d103      	bne.n	8005696 <checkAktifCalisma+0xa02>
			makineStop=1;
 800568e:	4b5f      	ldr	r3, [pc, #380]	; (800580c <checkAktifCalisma+0xb78>)
 8005690:	2201      	movs	r2, #1
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	e002      	b.n	800569c <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8005696:	4b5d      	ldr	r3, [pc, #372]	; (800580c <checkAktifCalisma+0xb78>)
 8005698:	2200      	movs	r2, #0
 800569a:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800569c:	4b5c      	ldr	r3, [pc, #368]	; (8005810 <checkAktifCalisma+0xb7c>)
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d144      	bne.n	800572e <checkAktifCalisma+0xa9a>
 80056a4:	4b5b      	ldr	r3, [pc, #364]	; (8005814 <checkAktifCalisma+0xb80>)
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d003      	beq.n	80056b4 <checkAktifCalisma+0xa20>
 80056ac:	4b59      	ldr	r3, [pc, #356]	; (8005814 <checkAktifCalisma+0xb80>)
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	2b03      	cmp	r3, #3
 80056b2:	d13c      	bne.n	800572e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80056b4:	2180      	movs	r1, #128	; 0x80
 80056b6:	484c      	ldr	r0, [pc, #304]	; (80057e8 <checkAktifCalisma+0xb54>)
 80056b8:	f003 fd44 	bl	8009144 <HAL_GPIO_ReadPin>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d103      	bne.n	80056ca <checkAktifCalisma+0xa36>
 80056c2:	4b55      	ldr	r3, [pc, #340]	; (8005818 <checkAktifCalisma+0xb84>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00b      	beq.n	80056e2 <checkAktifCalisma+0xa4e>
 80056ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056ce:	484e      	ldr	r0, [pc, #312]	; (8005808 <checkAktifCalisma+0xb74>)
 80056d0:	f003 fd38 	bl	8009144 <HAL_GPIO_ReadPin>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d129      	bne.n	800572e <checkAktifCalisma+0xa9a>
 80056da:	4b4f      	ldr	r3, [pc, #316]	; (8005818 <checkAktifCalisma+0xb84>)
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d125      	bne.n	800572e <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80056e2:	2104      	movs	r1, #4
 80056e4:	4840      	ldr	r0, [pc, #256]	; (80057e8 <checkAktifCalisma+0xb54>)
 80056e6:	f003 fd2d 	bl	8009144 <HAL_GPIO_ReadPin>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d003      	beq.n	80056f8 <checkAktifCalisma+0xa64>
 80056f0:	4b4a      	ldr	r3, [pc, #296]	; (800581c <checkAktifCalisma+0xb88>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d11a      	bne.n	800572e <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80056f8:	2102      	movs	r1, #2
 80056fa:	483b      	ldr	r0, [pc, #236]	; (80057e8 <checkAktifCalisma+0xb54>)
 80056fc:	f003 fd22 	bl	8009144 <HAL_GPIO_ReadPin>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d113      	bne.n	800572e <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8005706:	4b46      	ldr	r3, [pc, #280]	; (8005820 <checkAktifCalisma+0xb8c>)
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	f083 0301 	eor.w	r3, r3, #1
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00c      	beq.n	800572e <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8005714:	4b3d      	ldr	r3, [pc, #244]	; (800580c <checkAktifCalisma+0xb78>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d008      	beq.n	800572e <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 800571c:	4b41      	ldr	r3, [pc, #260]	; (8005824 <checkAktifCalisma+0xb90>)
 800571e:	2201      	movs	r2, #1
 8005720:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005722:	4b36      	ldr	r3, [pc, #216]	; (80057fc <checkAktifCalisma+0xb68>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a40      	ldr	r2, [pc, #256]	; (8005828 <checkAktifCalisma+0xb94>)
 8005728:	6013      	str	r3, [r2, #0]
			bekle();
 800572a:	f7ff f935 	bl	8004998 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800572e:	4b33      	ldr	r3, [pc, #204]	; (80057fc <checkAktifCalisma+0xb68>)
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	4b3d      	ldr	r3, [pc, #244]	; (8005828 <checkAktifCalisma+0xb94>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	4a3c      	ldr	r2, [pc, #240]	; (800582c <checkAktifCalisma+0xb98>)
 800573a:	7812      	ldrb	r2, [r2, #0]
 800573c:	4293      	cmp	r3, r2
 800573e:	d211      	bcs.n	8005764 <checkAktifCalisma+0xad0>
 8005740:	2104      	movs	r1, #4
 8005742:	4829      	ldr	r0, [pc, #164]	; (80057e8 <checkAktifCalisma+0xb54>)
 8005744:	f003 fcfe 	bl	8009144 <HAL_GPIO_ReadPin>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00a      	beq.n	8005764 <checkAktifCalisma+0xad0>
 800574e:	4b33      	ldr	r3, [pc, #204]	; (800581c <checkAktifCalisma+0xb88>)
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d006      	beq.n	8005764 <checkAktifCalisma+0xad0>
 8005756:	4b2d      	ldr	r3, [pc, #180]	; (800580c <checkAktifCalisma+0xb78>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	f083 0301 	eor.w	r3, r3, #1
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d002      	beq.n	800576a <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8005764:	4b2f      	ldr	r3, [pc, #188]	; (8005824 <checkAktifCalisma+0xb90>)
 8005766:	2200      	movs	r2, #0
 8005768:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800576a:	4b29      	ldr	r3, [pc, #164]	; (8005810 <checkAktifCalisma+0xb7c>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	2b01      	cmp	r3, #1
 8005770:	d160      	bne.n	8005834 <checkAktifCalisma+0xba0>
 8005772:	4b28      	ldr	r3, [pc, #160]	; (8005814 <checkAktifCalisma+0xb80>)
 8005774:	781b      	ldrb	r3, [r3, #0]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d003      	beq.n	8005782 <checkAktifCalisma+0xaee>
 800577a:	4b26      	ldr	r3, [pc, #152]	; (8005814 <checkAktifCalisma+0xb80>)
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	2b03      	cmp	r3, #3
 8005780:	d158      	bne.n	8005834 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005782:	2104      	movs	r1, #4
 8005784:	4818      	ldr	r0, [pc, #96]	; (80057e8 <checkAktifCalisma+0xb54>)
 8005786:	f003 fcdd 	bl	8009144 <HAL_GPIO_ReadPin>
 800578a:	4603      	mov	r3, r0
 800578c:	2b01      	cmp	r3, #1
 800578e:	d003      	beq.n	8005798 <checkAktifCalisma+0xb04>
 8005790:	4b22      	ldr	r3, [pc, #136]	; (800581c <checkAktifCalisma+0xb88>)
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d14d      	bne.n	8005834 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005798:	2102      	movs	r1, #2
 800579a:	4813      	ldr	r0, [pc, #76]	; (80057e8 <checkAktifCalisma+0xb54>)
 800579c:	f003 fcd2 	bl	8009144 <HAL_GPIO_ReadPin>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d146      	bne.n	8005834 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80057a6:	2180      	movs	r1, #128	; 0x80
 80057a8:	480f      	ldr	r0, [pc, #60]	; (80057e8 <checkAktifCalisma+0xb54>)
 80057aa:	f003 fccb 	bl	8009144 <HAL_GPIO_ReadPin>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d103      	bne.n	80057bc <checkAktifCalisma+0xb28>
 80057b4:	4b18      	ldr	r3, [pc, #96]	; (8005818 <checkAktifCalisma+0xb84>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00b      	beq.n	80057d4 <checkAktifCalisma+0xb40>
 80057bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057c0:	4811      	ldr	r0, [pc, #68]	; (8005808 <checkAktifCalisma+0xb74>)
 80057c2:	f003 fcbf 	bl	8009144 <HAL_GPIO_ReadPin>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d133      	bne.n	8005834 <checkAktifCalisma+0xba0>
 80057cc:	4b12      	ldr	r3, [pc, #72]	; (8005818 <checkAktifCalisma+0xb84>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d12f      	bne.n	8005834 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 80057d4:	4b0d      	ldr	r3, [pc, #52]	; (800580c <checkAktifCalisma+0xb78>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d02b      	beq.n	8005834 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 80057dc:	4b14      	ldr	r3, [pc, #80]	; (8005830 <checkAktifCalisma+0xb9c>)
 80057de:	2201      	movs	r2, #1
 80057e0:	701a      	strb	r2, [r3, #0]
 80057e2:	e02a      	b.n	800583a <checkAktifCalisma+0xba6>
 80057e4:	20000253 	.word	0x20000253
 80057e8:	40011000 	.word	0x40011000
 80057ec:	20000257 	.word	0x20000257
 80057f0:	2000026e 	.word	0x2000026e
 80057f4:	2000026f 	.word	0x2000026f
 80057f8:	2000024f 	.word	0x2000024f
 80057fc:	200001f8 	.word	0x200001f8
 8005800:	20000204 	.word	0x20000204
 8005804:	20000232 	.word	0x20000232
 8005808:	40010c00 	.word	0x40010c00
 800580c:	2000025e 	.word	0x2000025e
 8005810:	20000225 	.word	0x20000225
 8005814:	20000224 	.word	0x20000224
 8005818:	20000228 	.word	0x20000228
 800581c:	20000222 	.word	0x20000222
 8005820:	2000024b 	.word	0x2000024b
 8005824:	2000025f 	.word	0x2000025f
 8005828:	200001fc 	.word	0x200001fc
 800582c:	20000235 	.word	0x20000235
 8005830:	20000260 	.word	0x20000260
		} else {
			kapi1butonkontrol=0;
 8005834:	4b8b      	ldr	r3, [pc, #556]	; (8005a64 <checkAktifCalisma+0xdd0>)
 8005836:	2200      	movs	r2, #0
 8005838:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800583a:	4b8b      	ldr	r3, [pc, #556]	; (8005a68 <checkAktifCalisma+0xdd4>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b02      	cmp	r3, #2
 8005840:	d121      	bne.n	8005886 <checkAktifCalisma+0xbf2>
 8005842:	4b8a      	ldr	r3, [pc, #552]	; (8005a6c <checkAktifCalisma+0xdd8>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d003      	beq.n	8005852 <checkAktifCalisma+0xbbe>
 800584a:	4b88      	ldr	r3, [pc, #544]	; (8005a6c <checkAktifCalisma+0xdd8>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b03      	cmp	r3, #3
 8005850:	d119      	bne.n	8005886 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005852:	2104      	movs	r1, #4
 8005854:	4886      	ldr	r0, [pc, #536]	; (8005a70 <checkAktifCalisma+0xddc>)
 8005856:	f003 fc75 	bl	8009144 <HAL_GPIO_ReadPin>
 800585a:	4603      	mov	r3, r0
 800585c:	2b01      	cmp	r3, #1
 800585e:	d003      	beq.n	8005868 <checkAktifCalisma+0xbd4>
 8005860:	4b84      	ldr	r3, [pc, #528]	; (8005a74 <checkAktifCalisma+0xde0>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10e      	bne.n	8005886 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005868:	2102      	movs	r1, #2
 800586a:	4881      	ldr	r0, [pc, #516]	; (8005a70 <checkAktifCalisma+0xddc>)
 800586c:	f003 fc6a 	bl	8009144 <HAL_GPIO_ReadPin>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d107      	bne.n	8005886 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8005876:	4b80      	ldr	r3, [pc, #512]	; (8005a78 <checkAktifCalisma+0xde4>)
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 800587e:	4b7f      	ldr	r3, [pc, #508]	; (8005a7c <checkAktifCalisma+0xde8>)
 8005880:	2201      	movs	r2, #1
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	e002      	b.n	800588c <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8005886:	4b7d      	ldr	r3, [pc, #500]	; (8005a7c <checkAktifCalisma+0xde8>)
 8005888:	2200      	movs	r2, #0
 800588a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 800588c:	4b75      	ldr	r3, [pc, #468]	; (8005a64 <checkAktifCalisma+0xdd0>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d107      	bne.n	80058a4 <checkAktifCalisma+0xc10>
 8005894:	4b79      	ldr	r3, [pc, #484]	; (8005a7c <checkAktifCalisma+0xde8>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d103      	bne.n	80058a4 <checkAktifCalisma+0xc10>
 800589c:	4b78      	ldr	r3, [pc, #480]	; (8005a80 <checkAktifCalisma+0xdec>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d005      	beq.n	80058b0 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80058a4:	2201      	movs	r2, #1
 80058a6:	2180      	movs	r1, #128	; 0x80
 80058a8:	4876      	ldr	r0, [pc, #472]	; (8005a84 <checkAktifCalisma+0xdf0>)
 80058aa:	f003 fc62 	bl	8009172 <HAL_GPIO_WritePin>
 80058ae:	e004      	b.n	80058ba <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80058b0:	2200      	movs	r2, #0
 80058b2:	2180      	movs	r1, #128	; 0x80
 80058b4:	4873      	ldr	r0, [pc, #460]	; (8005a84 <checkAktifCalisma+0xdf0>)
 80058b6:	f003 fc5c 	bl	8009172 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80058ba:	4b73      	ldr	r3, [pc, #460]	; (8005a88 <checkAktifCalisma+0xdf4>)
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d141      	bne.n	8005946 <checkAktifCalisma+0xcb2>
 80058c2:	4b6a      	ldr	r3, [pc, #424]	; (8005a6c <checkAktifCalisma+0xdd8>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d003      	beq.n	80058d2 <checkAktifCalisma+0xc3e>
 80058ca:	4b68      	ldr	r3, [pc, #416]	; (8005a6c <checkAktifCalisma+0xdd8>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d139      	bne.n	8005946 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80058d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80058d6:	4866      	ldr	r0, [pc, #408]	; (8005a70 <checkAktifCalisma+0xddc>)
 80058d8:	f003 fc34 	bl	8009144 <HAL_GPIO_ReadPin>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d103      	bne.n	80058ea <checkAktifCalisma+0xc56>
 80058e2:	4b6a      	ldr	r3, [pc, #424]	; (8005a8c <checkAktifCalisma+0xdf8>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00b      	beq.n	8005902 <checkAktifCalisma+0xc6e>
 80058ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80058ee:	4868      	ldr	r0, [pc, #416]	; (8005a90 <checkAktifCalisma+0xdfc>)
 80058f0:	f003 fc28 	bl	8009144 <HAL_GPIO_ReadPin>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d125      	bne.n	8005946 <checkAktifCalisma+0xcb2>
 80058fa:	4b64      	ldr	r3, [pc, #400]	; (8005a8c <checkAktifCalisma+0xdf8>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d121      	bne.n	8005946 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005902:	2102      	movs	r1, #2
 8005904:	485a      	ldr	r0, [pc, #360]	; (8005a70 <checkAktifCalisma+0xddc>)
 8005906:	f003 fc1d 	bl	8009144 <HAL_GPIO_ReadPin>
 800590a:	4603      	mov	r3, r0
 800590c:	2b01      	cmp	r3, #1
 800590e:	d11a      	bne.n	8005946 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005910:	2104      	movs	r1, #4
 8005912:	4857      	ldr	r0, [pc, #348]	; (8005a70 <checkAktifCalisma+0xddc>)
 8005914:	f003 fc16 	bl	8009144 <HAL_GPIO_ReadPin>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d113      	bne.n	8005946 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 800591e:	4b56      	ldr	r3, [pc, #344]	; (8005a78 <checkAktifCalisma+0xde4>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00f      	beq.n	8005946 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8005926:	4b5b      	ldr	r3, [pc, #364]	; (8005a94 <checkAktifCalisma+0xe00>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	f083 0301 	eor.w	r3, r3, #1
 800592e:	b2db      	uxtb	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d008      	beq.n	8005946 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8005934:	4b58      	ldr	r3, [pc, #352]	; (8005a98 <checkAktifCalisma+0xe04>)
 8005936:	2201      	movs	r2, #1
 8005938:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800593a:	4b58      	ldr	r3, [pc, #352]	; (8005a9c <checkAktifCalisma+0xe08>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a58      	ldr	r2, [pc, #352]	; (8005aa0 <checkAktifCalisma+0xe0c>)
 8005940:	6013      	str	r3, [r2, #0]
			bekle();
 8005942:	f7ff f829 	bl	8004998 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005946:	4b55      	ldr	r3, [pc, #340]	; (8005a9c <checkAktifCalisma+0xe08>)
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	4b55      	ldr	r3, [pc, #340]	; (8005aa0 <checkAktifCalisma+0xe0c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	4a54      	ldr	r2, [pc, #336]	; (8005aa4 <checkAktifCalisma+0xe10>)
 8005952:	7812      	ldrb	r2, [r2, #0]
 8005954:	4293      	cmp	r3, r2
 8005956:	d20d      	bcs.n	8005974 <checkAktifCalisma+0xce0>
 8005958:	2102      	movs	r1, #2
 800595a:	4845      	ldr	r0, [pc, #276]	; (8005a70 <checkAktifCalisma+0xddc>)
 800595c:	f003 fbf2 	bl	8009144 <HAL_GPIO_ReadPin>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d006      	beq.n	8005974 <checkAktifCalisma+0xce0>
 8005966:	4b44      	ldr	r3, [pc, #272]	; (8005a78 <checkAktifCalisma+0xde4>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	f083 0301 	eor.w	r3, r3, #1
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8005974:	4b48      	ldr	r3, [pc, #288]	; (8005a98 <checkAktifCalisma+0xe04>)
 8005976:	2200      	movs	r2, #0
 8005978:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800597a:	4b43      	ldr	r3, [pc, #268]	; (8005a88 <checkAktifCalisma+0xdf4>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d135      	bne.n	80059ee <checkAktifCalisma+0xd5a>
 8005982:	4b3a      	ldr	r3, [pc, #232]	; (8005a6c <checkAktifCalisma+0xdd8>)
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	2b01      	cmp	r3, #1
 8005988:	d003      	beq.n	8005992 <checkAktifCalisma+0xcfe>
 800598a:	4b38      	ldr	r3, [pc, #224]	; (8005a6c <checkAktifCalisma+0xdd8>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b03      	cmp	r3, #3
 8005990:	d12d      	bne.n	80059ee <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005992:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005996:	4836      	ldr	r0, [pc, #216]	; (8005a70 <checkAktifCalisma+0xddc>)
 8005998:	f003 fbd4 	bl	8009144 <HAL_GPIO_ReadPin>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d103      	bne.n	80059aa <checkAktifCalisma+0xd16>
 80059a2:	4b3a      	ldr	r3, [pc, #232]	; (8005a8c <checkAktifCalisma+0xdf8>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00b      	beq.n	80059c2 <checkAktifCalisma+0xd2e>
 80059aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80059ae:	4838      	ldr	r0, [pc, #224]	; (8005a90 <checkAktifCalisma+0xdfc>)
 80059b0:	f003 fbc8 	bl	8009144 <HAL_GPIO_ReadPin>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d119      	bne.n	80059ee <checkAktifCalisma+0xd5a>
 80059ba:	4b34      	ldr	r3, [pc, #208]	; (8005a8c <checkAktifCalisma+0xdf8>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d115      	bne.n	80059ee <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80059c2:	2102      	movs	r1, #2
 80059c4:	482a      	ldr	r0, [pc, #168]	; (8005a70 <checkAktifCalisma+0xddc>)
 80059c6:	f003 fbbd 	bl	8009144 <HAL_GPIO_ReadPin>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d10e      	bne.n	80059ee <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80059d0:	2104      	movs	r1, #4
 80059d2:	4827      	ldr	r0, [pc, #156]	; (8005a70 <checkAktifCalisma+0xddc>)
 80059d4:	f003 fbb6 	bl	8009144 <HAL_GPIO_ReadPin>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d107      	bne.n	80059ee <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 80059de:	4b26      	ldr	r3, [pc, #152]	; (8005a78 <checkAktifCalisma+0xde4>)
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 80059e6:	4b30      	ldr	r3, [pc, #192]	; (8005aa8 <checkAktifCalisma+0xe14>)
 80059e8:	2201      	movs	r2, #1
 80059ea:	701a      	strb	r2, [r3, #0]
 80059ec:	e002      	b.n	80059f4 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 80059ee:	4b2e      	ldr	r3, [pc, #184]	; (8005aa8 <checkAktifCalisma+0xe14>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80059f4:	4b24      	ldr	r3, [pc, #144]	; (8005a88 <checkAktifCalisma+0xdf4>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d11d      	bne.n	8005a38 <checkAktifCalisma+0xda4>
 80059fc:	4b1b      	ldr	r3, [pc, #108]	; (8005a6c <checkAktifCalisma+0xdd8>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d003      	beq.n	8005a0c <checkAktifCalisma+0xd78>
 8005a04:	4b19      	ldr	r3, [pc, #100]	; (8005a6c <checkAktifCalisma+0xdd8>)
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	2b03      	cmp	r3, #3
 8005a0a:	d115      	bne.n	8005a38 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a0c:	2102      	movs	r1, #2
 8005a0e:	4818      	ldr	r0, [pc, #96]	; (8005a70 <checkAktifCalisma+0xddc>)
 8005a10:	f003 fb98 	bl	8009144 <HAL_GPIO_ReadPin>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d10e      	bne.n	8005a38 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005a1a:	2104      	movs	r1, #4
 8005a1c:	4814      	ldr	r0, [pc, #80]	; (8005a70 <checkAktifCalisma+0xddc>)
 8005a1e:	f003 fb91 	bl	8009144 <HAL_GPIO_ReadPin>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d107      	bne.n	8005a38 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8005a28:	4b13      	ldr	r3, [pc, #76]	; (8005a78 <checkAktifCalisma+0xde4>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d003      	beq.n	8005a38 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8005a30:	4b1e      	ldr	r3, [pc, #120]	; (8005aac <checkAktifCalisma+0xe18>)
 8005a32:	2201      	movs	r2, #1
 8005a34:	701a      	strb	r2, [r3, #0]
 8005a36:	e002      	b.n	8005a3e <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8005a38:	4b1c      	ldr	r3, [pc, #112]	; (8005aac <checkAktifCalisma+0xe18>)
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005a3e:	4b1a      	ldr	r3, [pc, #104]	; (8005aa8 <checkAktifCalisma+0xe14>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d107      	bne.n	8005a56 <checkAktifCalisma+0xdc2>
 8005a46:	4b19      	ldr	r3, [pc, #100]	; (8005aac <checkAktifCalisma+0xe18>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d103      	bne.n	8005a56 <checkAktifCalisma+0xdc2>
 8005a4e:	4b12      	ldr	r3, [pc, #72]	; (8005a98 <checkAktifCalisma+0xe04>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d02c      	beq.n	8005ab0 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005a56:	2201      	movs	r2, #1
 8005a58:	2140      	movs	r1, #64	; 0x40
 8005a5a:	480a      	ldr	r0, [pc, #40]	; (8005a84 <checkAktifCalisma+0xdf0>)
 8005a5c:	f003 fb89 	bl	8009172 <HAL_GPIO_WritePin>
 8005a60:	e02b      	b.n	8005aba <checkAktifCalisma+0xe26>
 8005a62:	bf00      	nop
 8005a64:	20000260 	.word	0x20000260
 8005a68:	20000225 	.word	0x20000225
 8005a6c:	20000224 	.word	0x20000224
 8005a70:	40011000 	.word	0x40011000
 8005a74:	20000222 	.word	0x20000222
 8005a78:	2000025e 	.word	0x2000025e
 8005a7c:	20000261 	.word	0x20000261
 8005a80:	2000025f 	.word	0x2000025f
 8005a84:	40010800 	.word	0x40010800
 8005a88:	20000226 	.word	0x20000226
 8005a8c:	20000228 	.word	0x20000228
 8005a90:	40010c00 	.word	0x40010c00
 8005a94:	2000024b 	.word	0x2000024b
 8005a98:	20000262 	.word	0x20000262
 8005a9c:	200001f8 	.word	0x200001f8
 8005aa0:	200001fc 	.word	0x200001fc
 8005aa4:	20000236 	.word	0x20000236
 8005aa8:	20000263 	.word	0x20000263
 8005aac:	20000264 	.word	0x20000264
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	2140      	movs	r1, #64	; 0x40
 8005ab4:	488d      	ldr	r0, [pc, #564]	; (8005cec <checkAktifCalisma+0x1058>)
 8005ab6:	f003 fb5c 	bl	8009172 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8005aba:	4b8d      	ldr	r3, [pc, #564]	; (8005cf0 <checkAktifCalisma+0x105c>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <checkAktifCalisma+0xe36>
 8005ac2:	4b8b      	ldr	r3, [pc, #556]	; (8005cf0 <checkAktifCalisma+0x105c>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d115      	bne.n	8005af6 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005aca:	2104      	movs	r1, #4
 8005acc:	4889      	ldr	r0, [pc, #548]	; (8005cf4 <checkAktifCalisma+0x1060>)
 8005ace:	f003 fb39 	bl	8009144 <HAL_GPIO_ReadPin>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d003      	beq.n	8005ae0 <checkAktifCalisma+0xe4c>
 8005ad8:	4b87      	ldr	r3, [pc, #540]	; (8005cf8 <checkAktifCalisma+0x1064>)
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10a      	bne.n	8005af6 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005ae0:	2102      	movs	r1, #2
 8005ae2:	4884      	ldr	r0, [pc, #528]	; (8005cf4 <checkAktifCalisma+0x1060>)
 8005ae4:	f003 fb2e 	bl	8009144 <HAL_GPIO_ReadPin>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d103      	bne.n	8005af6 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8005aee:	4b83      	ldr	r3, [pc, #524]	; (8005cfc <checkAktifCalisma+0x1068>)
 8005af0:	2201      	movs	r2, #1
 8005af2:	701a      	strb	r2, [r3, #0]
 8005af4:	e002      	b.n	8005afc <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8005af6:	4b81      	ldr	r3, [pc, #516]	; (8005cfc <checkAktifCalisma+0x1068>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005afc:	4b7c      	ldr	r3, [pc, #496]	; (8005cf0 <checkAktifCalisma+0x105c>)
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d003      	beq.n	8005b0c <checkAktifCalisma+0xe78>
 8005b04:	4b7a      	ldr	r3, [pc, #488]	; (8005cf0 <checkAktifCalisma+0x105c>)
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	2b02      	cmp	r3, #2
 8005b0a:	d111      	bne.n	8005b30 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b0c:	2102      	movs	r1, #2
 8005b0e:	4879      	ldr	r0, [pc, #484]	; (8005cf4 <checkAktifCalisma+0x1060>)
 8005b10:	f003 fb18 	bl	8009144 <HAL_GPIO_ReadPin>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d10a      	bne.n	8005b30 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005b1a:	2104      	movs	r1, #4
 8005b1c:	4875      	ldr	r0, [pc, #468]	; (8005cf4 <checkAktifCalisma+0x1060>)
 8005b1e:	f003 fb11 	bl	8009144 <HAL_GPIO_ReadPin>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d103      	bne.n	8005b30 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8005b28:	4b75      	ldr	r3, [pc, #468]	; (8005d00 <checkAktifCalisma+0x106c>)
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	701a      	strb	r2, [r3, #0]
 8005b2e:	e002      	b.n	8005b36 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8005b30:	4b73      	ldr	r3, [pc, #460]	; (8005d00 <checkAktifCalisma+0x106c>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8005b36:	4b71      	ldr	r3, [pc, #452]	; (8005cfc <checkAktifCalisma+0x1068>)
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00f      	beq.n	8005b5e <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8005b3e:	4b71      	ldr	r3, [pc, #452]	; (8005d04 <checkAktifCalisma+0x1070>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d10b      	bne.n	8005b5e <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005b46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b4a:	486f      	ldr	r0, [pc, #444]	; (8005d08 <checkAktifCalisma+0x1074>)
 8005b4c:	f003 fafa 	bl	8009144 <HAL_GPIO_ReadPin>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d103      	bne.n	8005b5e <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8005b56:	4b6d      	ldr	r3, [pc, #436]	; (8005d0c <checkAktifCalisma+0x1078>)
 8005b58:	2201      	movs	r2, #1
 8005b5a:	701a      	strb	r2, [r3, #0]
 8005b5c:	e002      	b.n	8005b64 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8005b5e:	4b6b      	ldr	r3, [pc, #428]	; (8005d0c <checkAktifCalisma+0x1078>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8005b64:	4b66      	ldr	r3, [pc, #408]	; (8005d00 <checkAktifCalisma+0x106c>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00f      	beq.n	8005b8c <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8005b6c:	4b65      	ldr	r3, [pc, #404]	; (8005d04 <checkAktifCalisma+0x1070>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d10b      	bne.n	8005b8c <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005b74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005b78:	4863      	ldr	r0, [pc, #396]	; (8005d08 <checkAktifCalisma+0x1074>)
 8005b7a:	f003 fae3 	bl	8009144 <HAL_GPIO_ReadPin>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d103      	bne.n	8005b8c <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8005b84:	4b62      	ldr	r3, [pc, #392]	; (8005d10 <checkAktifCalisma+0x107c>)
 8005b86:	2201      	movs	r2, #1
 8005b88:	701a      	strb	r2, [r3, #0]
 8005b8a:	e002      	b.n	8005b92 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8005b8c:	4b60      	ldr	r3, [pc, #384]	; (8005d10 <checkAktifCalisma+0x107c>)
 8005b8e:	2200      	movs	r2, #0
 8005b90:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005b92:	4b60      	ldr	r3, [pc, #384]	; (8005d14 <checkAktifCalisma+0x1080>)
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d137      	bne.n	8005c0a <checkAktifCalisma+0xf76>
 8005b9a:	4b5f      	ldr	r3, [pc, #380]	; (8005d18 <checkAktifCalisma+0x1084>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d003      	beq.n	8005baa <checkAktifCalisma+0xf16>
 8005ba2:	4b5d      	ldr	r3, [pc, #372]	; (8005d18 <checkAktifCalisma+0x1084>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b03      	cmp	r3, #3
 8005ba8:	d12f      	bne.n	8005c0a <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005baa:	4b54      	ldr	r3, [pc, #336]	; (8005cfc <checkAktifCalisma+0x1068>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d103      	bne.n	8005bba <checkAktifCalisma+0xf26>
 8005bb2:	4b53      	ldr	r3, [pc, #332]	; (8005d00 <checkAktifCalisma+0x106c>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d027      	beq.n	8005c0a <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005bba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005bbe:	484d      	ldr	r0, [pc, #308]	; (8005cf4 <checkAktifCalisma+0x1060>)
 8005bc0:	f003 fac0 	bl	8009144 <HAL_GPIO_ReadPin>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d103      	bne.n	8005bd2 <checkAktifCalisma+0xf3e>
 8005bca:	4b4e      	ldr	r3, [pc, #312]	; (8005d04 <checkAktifCalisma+0x1070>)
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d007      	beq.n	8005be2 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005bd2:	4b4e      	ldr	r3, [pc, #312]	; (8005d0c <checkAktifCalisma+0x1078>)
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d103      	bne.n	8005be2 <checkAktifCalisma+0xf4e>
 8005bda:	4b4d      	ldr	r3, [pc, #308]	; (8005d10 <checkAktifCalisma+0x107c>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d013      	beq.n	8005c0a <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8005be2:	4b4e      	ldr	r3, [pc, #312]	; (8005d1c <checkAktifCalisma+0x1088>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00f      	beq.n	8005c0a <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8005bea:	4b4d      	ldr	r3, [pc, #308]	; (8005d20 <checkAktifCalisma+0x108c>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	f083 0301 	eor.w	r3, r3, #1
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d008      	beq.n	8005c0a <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8005bf8:	4b4a      	ldr	r3, [pc, #296]	; (8005d24 <checkAktifCalisma+0x1090>)
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8005bfe:	4b4a      	ldr	r3, [pc, #296]	; (8005d28 <checkAktifCalisma+0x1094>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a4a      	ldr	r2, [pc, #296]	; (8005d2c <checkAktifCalisma+0x1098>)
 8005c04:	6013      	str	r3, [r2, #0]
			bekle();
 8005c06:	f7fe fec7 	bl	8004998 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8005c0a:	4b47      	ldr	r3, [pc, #284]	; (8005d28 <checkAktifCalisma+0x1094>)
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	4b47      	ldr	r3, [pc, #284]	; (8005d2c <checkAktifCalisma+0x1098>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	4a46      	ldr	r2, [pc, #280]	; (8005d30 <checkAktifCalisma+0x109c>)
 8005c16:	7812      	ldrb	r2, [r2, #0]
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d214      	bcs.n	8005c46 <checkAktifCalisma+0xfb2>
 8005c1c:	4b37      	ldr	r3, [pc, #220]	; (8005cfc <checkAktifCalisma+0x1068>)
 8005c1e:	781b      	ldrb	r3, [r3, #0]
 8005c20:	f083 0301 	eor.w	r3, r3, #1
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d006      	beq.n	8005c38 <checkAktifCalisma+0xfa4>
 8005c2a:	4b35      	ldr	r3, [pc, #212]	; (8005d00 <checkAktifCalisma+0x106c>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	f083 0301 	eor.w	r3, r3, #1
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d106      	bne.n	8005c46 <checkAktifCalisma+0xfb2>
 8005c38:	4b38      	ldr	r3, [pc, #224]	; (8005d1c <checkAktifCalisma+0x1088>)
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	f083 0301 	eor.w	r3, r3, #1
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005c46:	4b37      	ldr	r3, [pc, #220]	; (8005d24 <checkAktifCalisma+0x1090>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005c4c:	4b31      	ldr	r3, [pc, #196]	; (8005d14 <checkAktifCalisma+0x1080>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d12b      	bne.n	8005cac <checkAktifCalisma+0x1018>
 8005c54:	4b30      	ldr	r3, [pc, #192]	; (8005d18 <checkAktifCalisma+0x1084>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d003      	beq.n	8005c64 <checkAktifCalisma+0xfd0>
 8005c5c:	4b2e      	ldr	r3, [pc, #184]	; (8005d18 <checkAktifCalisma+0x1084>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d123      	bne.n	8005cac <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005c64:	4b25      	ldr	r3, [pc, #148]	; (8005cfc <checkAktifCalisma+0x1068>)
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d103      	bne.n	8005c74 <checkAktifCalisma+0xfe0>
 8005c6c:	4b24      	ldr	r3, [pc, #144]	; (8005d00 <checkAktifCalisma+0x106c>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d01b      	beq.n	8005cac <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005c74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c78:	481e      	ldr	r0, [pc, #120]	; (8005cf4 <checkAktifCalisma+0x1060>)
 8005c7a:	f003 fa63 	bl	8009144 <HAL_GPIO_ReadPin>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d103      	bne.n	8005c8c <checkAktifCalisma+0xff8>
 8005c84:	4b1f      	ldr	r3, [pc, #124]	; (8005d04 <checkAktifCalisma+0x1070>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d007      	beq.n	8005c9c <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005c8c:	4b1f      	ldr	r3, [pc, #124]	; (8005d0c <checkAktifCalisma+0x1078>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d103      	bne.n	8005c9c <checkAktifCalisma+0x1008>
 8005c94:	4b1e      	ldr	r3, [pc, #120]	; (8005d10 <checkAktifCalisma+0x107c>)
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d007      	beq.n	8005cac <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005c9c:	4b1f      	ldr	r3, [pc, #124]	; (8005d1c <checkAktifCalisma+0x1088>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d003      	beq.n	8005cac <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005ca4:	4b23      	ldr	r3, [pc, #140]	; (8005d34 <checkAktifCalisma+0x10a0>)
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	e002      	b.n	8005cb2 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005cac:	4b21      	ldr	r3, [pc, #132]	; (8005d34 <checkAktifCalisma+0x10a0>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005cb2:	4b18      	ldr	r3, [pc, #96]	; (8005d14 <checkAktifCalisma+0x1080>)
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d140      	bne.n	8005d3c <checkAktifCalisma+0x10a8>
 8005cba:	4b17      	ldr	r3, [pc, #92]	; (8005d18 <checkAktifCalisma+0x1084>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b02      	cmp	r3, #2
 8005cc0:	d003      	beq.n	8005cca <checkAktifCalisma+0x1036>
 8005cc2:	4b15      	ldr	r3, [pc, #84]	; (8005d18 <checkAktifCalisma+0x1084>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	d138      	bne.n	8005d3c <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005cca:	4b0c      	ldr	r3, [pc, #48]	; (8005cfc <checkAktifCalisma+0x1068>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d103      	bne.n	8005cda <checkAktifCalisma+0x1046>
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	; (8005d00 <checkAktifCalisma+0x106c>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d030      	beq.n	8005d3c <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8005cda:	4b10      	ldr	r3, [pc, #64]	; (8005d1c <checkAktifCalisma+0x1088>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d02c      	beq.n	8005d3c <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 8005ce2:	4b15      	ldr	r3, [pc, #84]	; (8005d38 <checkAktifCalisma+0x10a4>)
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	701a      	strb	r2, [r3, #0]
 8005ce8:	e02b      	b.n	8005d42 <checkAktifCalisma+0x10ae>
 8005cea:	bf00      	nop
 8005cec:	40010800 	.word	0x40010800
 8005cf0:	20000229 	.word	0x20000229
 8005cf4:	40011000 	.word	0x40011000
 8005cf8:	20000222 	.word	0x20000222
 8005cfc:	20000268 	.word	0x20000268
 8005d00:	20000269 	.word	0x20000269
 8005d04:	20000228 	.word	0x20000228
 8005d08:	40010c00 	.word	0x40010c00
 8005d0c:	20000278 	.word	0x20000278
 8005d10:	20000279 	.word	0x20000279
 8005d14:	20000227 	.word	0x20000227
 8005d18:	20000224 	.word	0x20000224
 8005d1c:	2000025e 	.word	0x2000025e
 8005d20:	2000024b 	.word	0x2000024b
 8005d24:	20000265 	.word	0x20000265
 8005d28:	200001f8 	.word	0x200001f8
 8005d2c:	200001fc 	.word	0x200001fc
 8005d30:	20000237 	.word	0x20000237
 8005d34:	20000266 	.word	0x20000266
 8005d38:	20000267 	.word	0x20000267
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005d3c:	4b8b      	ldr	r3, [pc, #556]	; (8005f6c <checkAktifCalisma+0x12d8>)
 8005d3e:	2200      	movs	r2, #0
 8005d40:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005d42:	4b8b      	ldr	r3, [pc, #556]	; (8005f70 <checkAktifCalisma+0x12dc>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d107      	bne.n	8005d5a <checkAktifCalisma+0x10c6>
 8005d4a:	4b8a      	ldr	r3, [pc, #552]	; (8005f74 <checkAktifCalisma+0x12e0>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d103      	bne.n	8005d5a <checkAktifCalisma+0x10c6>
 8005d52:	4b86      	ldr	r3, [pc, #536]	; (8005f6c <checkAktifCalisma+0x12d8>)
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d005      	beq.n	8005d66 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	2120      	movs	r1, #32
 8005d5e:	4886      	ldr	r0, [pc, #536]	; (8005f78 <checkAktifCalisma+0x12e4>)
 8005d60:	f003 fa07 	bl	8009172 <HAL_GPIO_WritePin>
 8005d64:	e004      	b.n	8005d70 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005d66:	2200      	movs	r2, #0
 8005d68:	2120      	movs	r1, #32
 8005d6a:	4883      	ldr	r0, [pc, #524]	; (8005f78 <checkAktifCalisma+0x12e4>)
 8005d6c:	f003 fa01 	bl	8009172 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005d70:	4b82      	ldr	r3, [pc, #520]	; (8005f7c <checkAktifCalisma+0x12e8>)
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00e      	beq.n	8005d96 <checkAktifCalisma+0x1102>
 8005d78:	2102      	movs	r1, #2
 8005d7a:	4881      	ldr	r0, [pc, #516]	; (8005f80 <checkAktifCalisma+0x12ec>)
 8005d7c:	f003 f9e2 	bl	8009144 <HAL_GPIO_ReadPin>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d107      	bne.n	8005d96 <checkAktifCalisma+0x1102>
 8005d86:	4b7f      	ldr	r3, [pc, #508]	; (8005f84 <checkAktifCalisma+0x12f0>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d103      	bne.n	8005d96 <checkAktifCalisma+0x1102>
 8005d8e:	4b7e      	ldr	r3, [pc, #504]	; (8005f88 <checkAktifCalisma+0x12f4>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d112      	bne.n	8005dbc <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005d96:	4b7d      	ldr	r3, [pc, #500]	; (8005f8c <checkAktifCalisma+0x12f8>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d066      	beq.n	8005e6c <checkAktifCalisma+0x11d8>
 8005d9e:	2104      	movs	r1, #4
 8005da0:	4877      	ldr	r0, [pc, #476]	; (8005f80 <checkAktifCalisma+0x12ec>)
 8005da2:	f003 f9cf 	bl	8009144 <HAL_GPIO_ReadPin>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d15f      	bne.n	8005e6c <checkAktifCalisma+0x11d8>
 8005dac:	4b75      	ldr	r3, [pc, #468]	; (8005f84 <checkAktifCalisma+0x12f0>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d05b      	beq.n	8005e6c <checkAktifCalisma+0x11d8>
 8005db4:	4b74      	ldr	r3, [pc, #464]	; (8005f88 <checkAktifCalisma+0x12f4>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d057      	beq.n	8005e6c <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005dbc:	4b74      	ldr	r3, [pc, #464]	; (8005f90 <checkAktifCalisma+0x12fc>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	4b72      	ldr	r3, [pc, #456]	; (8005f90 <checkAktifCalisma+0x12fc>)
 8005dc6:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005dc8:	4b71      	ldr	r3, [pc, #452]	; (8005f90 <checkAktifCalisma+0x12fc>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b09      	cmp	r3, #9
 8005dce:	d908      	bls.n	8005de2 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8005dd0:	4b6f      	ldr	r3, [pc, #444]	; (8005f90 <checkAktifCalisma+0x12fc>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8005dd6:	4b6f      	ldr	r3, [pc, #444]	; (8005f94 <checkAktifCalisma+0x1300>)
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	4b6d      	ldr	r3, [pc, #436]	; (8005f94 <checkAktifCalisma+0x1300>)
 8005de0:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8005de2:	4b6c      	ldr	r3, [pc, #432]	; (8005f94 <checkAktifCalisma+0x1300>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b09      	cmp	r3, #9
 8005de8:	d908      	bls.n	8005dfc <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8005dea:	4b6a      	ldr	r3, [pc, #424]	; (8005f94 <checkAktifCalisma+0x1300>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8005df0:	4b69      	ldr	r3, [pc, #420]	; (8005f98 <checkAktifCalisma+0x1304>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	3301      	adds	r3, #1
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	4b67      	ldr	r3, [pc, #412]	; (8005f98 <checkAktifCalisma+0x1304>)
 8005dfa:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8005dfc:	4b66      	ldr	r3, [pc, #408]	; (8005f98 <checkAktifCalisma+0x1304>)
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b09      	cmp	r3, #9
 8005e02:	d908      	bls.n	8005e16 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8005e04:	4b64      	ldr	r3, [pc, #400]	; (8005f98 <checkAktifCalisma+0x1304>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8005e0a:	4b64      	ldr	r3, [pc, #400]	; (8005f9c <checkAktifCalisma+0x1308>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	4b62      	ldr	r3, [pc, #392]	; (8005f9c <checkAktifCalisma+0x1308>)
 8005e14:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8005e16:	4b61      	ldr	r3, [pc, #388]	; (8005f9c <checkAktifCalisma+0x1308>)
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	2b09      	cmp	r3, #9
 8005e1c:	d908      	bls.n	8005e30 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8005e1e:	4b5f      	ldr	r3, [pc, #380]	; (8005f9c <checkAktifCalisma+0x1308>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8005e24:	4b5e      	ldr	r3, [pc, #376]	; (8005fa0 <checkAktifCalisma+0x130c>)
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	4b5c      	ldr	r3, [pc, #368]	; (8005fa0 <checkAktifCalisma+0x130c>)
 8005e2e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005e30:	4b5b      	ldr	r3, [pc, #364]	; (8005fa0 <checkAktifCalisma+0x130c>)
 8005e32:	781a      	ldrb	r2, [r3, #0]
 8005e34:	4b5b      	ldr	r3, [pc, #364]	; (8005fa4 <checkAktifCalisma+0x1310>)
 8005e36:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005e3a:	4b58      	ldr	r3, [pc, #352]	; (8005f9c <checkAktifCalisma+0x1308>)
 8005e3c:	781a      	ldrb	r2, [r3, #0]
 8005e3e:	4b59      	ldr	r3, [pc, #356]	; (8005fa4 <checkAktifCalisma+0x1310>)
 8005e40:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005e42:	4b55      	ldr	r3, [pc, #340]	; (8005f98 <checkAktifCalisma+0x1304>)
 8005e44:	781a      	ldrb	r2, [r3, #0]
 8005e46:	4b57      	ldr	r3, [pc, #348]	; (8005fa4 <checkAktifCalisma+0x1310>)
 8005e48:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005e4a:	4b52      	ldr	r3, [pc, #328]	; (8005f94 <checkAktifCalisma+0x1300>)
 8005e4c:	781a      	ldrb	r2, [r3, #0]
 8005e4e:	4b55      	ldr	r3, [pc, #340]	; (8005fa4 <checkAktifCalisma+0x1310>)
 8005e50:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005e52:	4b4f      	ldr	r3, [pc, #316]	; (8005f90 <checkAktifCalisma+0x12fc>)
 8005e54:	781a      	ldrb	r2, [r3, #0]
 8005e56:	4b53      	ldr	r3, [pc, #332]	; (8005fa4 <checkAktifCalisma+0x1310>)
 8005e58:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005e5a:	4b53      	ldr	r3, [pc, #332]	; (8005fa8 <checkAktifCalisma+0x1314>)
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8005e60:	4b46      	ldr	r3, [pc, #280]	; (8005f7c <checkAktifCalisma+0x12e8>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005e66:	4b49      	ldr	r3, [pc, #292]	; (8005f8c <checkAktifCalisma+0x12f8>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005e6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e70:	484e      	ldr	r0, [pc, #312]	; (8005fac <checkAktifCalisma+0x1318>)
 8005e72:	f003 f967 	bl	8009144 <HAL_GPIO_ReadPin>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d016      	beq.n	8005eaa <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005e7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e80:	484a      	ldr	r0, [pc, #296]	; (8005fac <checkAktifCalisma+0x1318>)
 8005e82:	f003 f95f 	bl	8009144 <HAL_GPIO_ReadPin>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00e      	beq.n	8005eaa <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005e8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e90:	4846      	ldr	r0, [pc, #280]	; (8005fac <checkAktifCalisma+0x1318>)
 8005e92:	f003 f957 	bl	8009144 <HAL_GPIO_ReadPin>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d006      	beq.n	8005eaa <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005e9c:	2140      	movs	r1, #64	; 0x40
 8005e9e:	4838      	ldr	r0, [pc, #224]	; (8005f80 <checkAktifCalisma+0x12ec>)
 8005ea0:	f003 f950 	bl	8009144 <HAL_GPIO_ReadPin>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d103      	bne.n	8005eb2 <checkAktifCalisma+0x121e>
			startBasili=1;
 8005eaa:	4b41      	ldr	r3, [pc, #260]	; (8005fb0 <checkAktifCalisma+0x131c>)
 8005eac:	2201      	movs	r2, #1
 8005eae:	701a      	strb	r2, [r3, #0]
 8005eb0:	e002      	b.n	8005eb8 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8005eb2:	4b3f      	ldr	r3, [pc, #252]	; (8005fb0 <checkAktifCalisma+0x131c>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005eb8:	4b3d      	ldr	r3, [pc, #244]	; (8005fb0 <checkAktifCalisma+0x131c>)
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d016      	beq.n	8005eee <checkAktifCalisma+0x125a>
 8005ec0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005ec4:	4839      	ldr	r0, [pc, #228]	; (8005fac <checkAktifCalisma+0x1318>)
 8005ec6:	f003 f93d 	bl	8009144 <HAL_GPIO_ReadPin>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d10e      	bne.n	8005eee <checkAktifCalisma+0x125a>
			hataVar=1;
 8005ed0:	4b38      	ldr	r3, [pc, #224]	; (8005fb4 <checkAktifCalisma+0x1320>)
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8005ed6:	2001      	movs	r0, #1
 8005ed8:	f7fa fd7a 	bl	80009d0 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8005edc:	2001      	movs	r0, #1
 8005ede:	f7fa fd1d 	bl	800091c <hata2EEPROM>
			convertAndSendData();
 8005ee2:	f001 fbed 	bl	80076c0 <convertAndSendData>
			acilstophatasi=1;
 8005ee6:	4b34      	ldr	r3, [pc, #208]	; (8005fb8 <checkAktifCalisma+0x1324>)
 8005ee8:	2201      	movs	r2, #1
 8005eea:	701a      	strb	r2, [r3, #0]
 8005eec:	e018      	b.n	8005f20 <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005eee:	4b32      	ldr	r3, [pc, #200]	; (8005fb8 <checkAktifCalisma+0x1324>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d014      	beq.n	8005f20 <checkAktifCalisma+0x128c>
 8005ef6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005efa:	482c      	ldr	r0, [pc, #176]	; (8005fac <checkAktifCalisma+0x1318>)
 8005efc:	f003 f922 	bl	8009144 <HAL_GPIO_ReadPin>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10c      	bne.n	8005f20 <checkAktifCalisma+0x128c>
 8005f06:	4b2a      	ldr	r3, [pc, #168]	; (8005fb0 <checkAktifCalisma+0x131c>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	f083 0301 	eor.w	r3, r3, #1
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d005      	beq.n	8005f20 <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 8005f14:	4b28      	ldr	r3, [pc, #160]	; (8005fb8 <checkAktifCalisma+0x1324>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8005f1a:	2001      	movs	r0, #1
 8005f1c:	f7fe fce8 	bl	80048f0 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8005f20:	4b26      	ldr	r3, [pc, #152]	; (8005fbc <checkAktifCalisma+0x1328>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	f083 0301 	eor.w	r3, r3, #1
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d04e      	beq.n	8005fcc <checkAktifCalisma+0x1338>
 8005f2e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f32:	481e      	ldr	r0, [pc, #120]	; (8005fac <checkAktifCalisma+0x1318>)
 8005f34:	f003 f906 	bl	8009144 <HAL_GPIO_ReadPin>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <checkAktifCalisma+0x12b2>
 8005f3e:	4b20      	ldr	r3, [pc, #128]	; (8005fc0 <checkAktifCalisma+0x132c>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d042      	beq.n	8005fcc <checkAktifCalisma+0x1338>
 8005f46:	4b1f      	ldr	r3, [pc, #124]	; (8005fc4 <checkAktifCalisma+0x1330>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d13e      	bne.n	8005fcc <checkAktifCalisma+0x1338>
			hataVar=1;
 8005f4e:	4b19      	ldr	r3, [pc, #100]	; (8005fb4 <checkAktifCalisma+0x1320>)
 8005f50:	2201      	movs	r2, #1
 8005f52:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005f54:	2002      	movs	r0, #2
 8005f56:	f7fa fd3b 	bl	80009d0 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8005f5a:	2002      	movs	r0, #2
 8005f5c:	f7fa fcde 	bl	800091c <hata2EEPROM>
			convertAndSendData();
 8005f60:	f001 fbae 	bl	80076c0 <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005f64:	4b18      	ldr	r3, [pc, #96]	; (8005fc8 <checkAktifCalisma+0x1334>)
 8005f66:	2201      	movs	r2, #1
 8005f68:	701a      	strb	r2, [r3, #0]
 8005f6a:	e047      	b.n	8005ffc <checkAktifCalisma+0x1368>
 8005f6c:	20000267 	.word	0x20000267
 8005f70:	20000266 	.word	0x20000266
 8005f74:	20000265 	.word	0x20000265
 8005f78:	40010800 	.word	0x40010800
 8005f7c:	2000025b 	.word	0x2000025b
 8005f80:	40011000 	.word	0x40011000
 8005f84:	20000222 	.word	0x20000222
 8005f88:	2000025e 	.word	0x2000025e
 8005f8c:	2000025c 	.word	0x2000025c
 8005f90:	20000219 	.word	0x20000219
 8005f94:	2000021a 	.word	0x2000021a
 8005f98:	20000000 	.word	0x20000000
 8005f9c:	20000001 	.word	0x20000001
 8005fa0:	2000021b 	.word	0x2000021b
 8005fa4:	20000120 	.word	0x20000120
 8005fa8:	20000248 	.word	0x20000248
 8005fac:	40010c00 	.word	0x40010c00
 8005fb0:	2000026a 	.word	0x2000026a
 8005fb4:	20000271 	.word	0x20000271
 8005fb8:	2000026c 	.word	0x2000026c
 8005fbc:	20000273 	.word	0x20000273
 8005fc0:	2000027d 	.word	0x2000027d
 8005fc4:	20000220 	.word	0x20000220
 8005fc8:	2000026d 	.word	0x2000026d
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005fcc:	4b9b      	ldr	r3, [pc, #620]	; (800623c <checkAktifCalisma+0x15a8>)
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d013      	beq.n	8005ffc <checkAktifCalisma+0x1368>
 8005fd4:	4b9a      	ldr	r3, [pc, #616]	; (8006240 <checkAktifCalisma+0x15ac>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00f      	beq.n	8005ffc <checkAktifCalisma+0x1368>
 8005fdc:	4b99      	ldr	r3, [pc, #612]	; (8006244 <checkAktifCalisma+0x15b0>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	f083 0301 	eor.w	r3, r3, #1
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d008      	beq.n	8005ffc <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 8005fea:	4b94      	ldr	r3, [pc, #592]	; (800623c <checkAktifCalisma+0x15a8>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8005ff0:	4b95      	ldr	r3, [pc, #596]	; (8006248 <checkAktifCalisma+0x15b4>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8005ff6:	2002      	movs	r0, #2
 8005ff8:	f7fe fc7a 	bl	80048f0 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8005ffc:	4b93      	ldr	r3, [pc, #588]	; (800624c <checkAktifCalisma+0x15b8>)
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d11e      	bne.n	8006042 <checkAktifCalisma+0x13ae>
 8006004:	4b92      	ldr	r3, [pc, #584]	; (8006250 <checkAktifCalisma+0x15bc>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d11a      	bne.n	8006042 <checkAktifCalisma+0x13ae>
 800600c:	4b91      	ldr	r3, [pc, #580]	; (8006254 <checkAktifCalisma+0x15c0>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d016      	beq.n	8006042 <checkAktifCalisma+0x13ae>
 8006014:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006018:	488f      	ldr	r0, [pc, #572]	; (8006258 <checkAktifCalisma+0x15c4>)
 800601a:	f003 f893 	bl	8009144 <HAL_GPIO_ReadPin>
 800601e:	4603      	mov	r3, r0
 8006020:	2b01      	cmp	r3, #1
 8006022:	d10e      	bne.n	8006042 <checkAktifCalisma+0x13ae>
			hataVar=1;
 8006024:	4b8d      	ldr	r3, [pc, #564]	; (800625c <checkAktifCalisma+0x15c8>)
 8006026:	2201      	movs	r2, #1
 8006028:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 800602a:	2003      	movs	r0, #3
 800602c:	f7fa fcd0 	bl	80009d0 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8006030:	2003      	movs	r0, #3
 8006032:	f7fa fc73 	bl	800091c <hata2EEPROM>
			convertAndSendData();
 8006036:	f001 fb43 	bl	80076c0 <convertAndSendData>
			basinchatasi=1;
 800603a:	4b89      	ldr	r3, [pc, #548]	; (8006260 <checkAktifCalisma+0x15cc>)
 800603c:	2201      	movs	r2, #1
 800603e:	701a      	strb	r2, [r3, #0]
 8006040:	e015      	b.n	800606e <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8006042:	4b87      	ldr	r3, [pc, #540]	; (8006260 <checkAktifCalisma+0x15cc>)
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d011      	beq.n	800606e <checkAktifCalisma+0x13da>
 800604a:	4b80      	ldr	r3, [pc, #512]	; (800624c <checkAktifCalisma+0x15b8>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d10d      	bne.n	800606e <checkAktifCalisma+0x13da>
 8006052:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006056:	4883      	ldr	r0, [pc, #524]	; (8006264 <checkAktifCalisma+0x15d0>)
 8006058:	f003 f874 	bl	8009144 <HAL_GPIO_ReadPin>
 800605c:	4603      	mov	r3, r0
 800605e:	2b01      	cmp	r3, #1
 8006060:	d105      	bne.n	800606e <checkAktifCalisma+0x13da>
			basinchatasi=0;
 8006062:	4b7f      	ldr	r3, [pc, #508]	; (8006260 <checkAktifCalisma+0x15cc>)
 8006064:	2200      	movs	r2, #0
 8006066:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8006068:	2003      	movs	r0, #3
 800606a:	f7fe fc41 	bl	80048f0 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800606e:	4b7e      	ldr	r3, [pc, #504]	; (8006268 <checkAktifCalisma+0x15d4>)
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d103      	bne.n	800607e <checkAktifCalisma+0x13ea>
 8006076:	4b7d      	ldr	r3, [pc, #500]	; (800626c <checkAktifCalisma+0x15d8>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d01e      	beq.n	80060bc <checkAktifCalisma+0x1428>
 800607e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006082:	487b      	ldr	r0, [pc, #492]	; (8006270 <checkAktifCalisma+0x15dc>)
 8006084:	f003 f85e 	bl	8009144 <HAL_GPIO_ReadPin>
 8006088:	4603      	mov	r3, r0
 800608a:	2b01      	cmp	r3, #1
 800608c:	d116      	bne.n	80060bc <checkAktifCalisma+0x1428>
 800608e:	4b79      	ldr	r3, [pc, #484]	; (8006274 <checkAktifCalisma+0x15e0>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d003      	beq.n	800609e <checkAktifCalisma+0x140a>
 8006096:	4b77      	ldr	r3, [pc, #476]	; (8006274 <checkAktifCalisma+0x15e0>)
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	2b03      	cmp	r3, #3
 800609c:	d10e      	bne.n	80060bc <checkAktifCalisma+0x1428>
			hataVar=1;
 800609e:	4b6f      	ldr	r3, [pc, #444]	; (800625c <checkAktifCalisma+0x15c8>)
 80060a0:	2201      	movs	r2, #1
 80060a2:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 80060a4:	2004      	movs	r0, #4
 80060a6:	f7fa fc93 	bl	80009d0 <hataKoduLcdGoster>
			hata2EEPROM(4);
 80060aa:	2004      	movs	r0, #4
 80060ac:	f7fa fc36 	bl	800091c <hata2EEPROM>
			convertAndSendData();
 80060b0:	f001 fb06 	bl	80076c0 <convertAndSendData>
			katkapisivicihatasi=1;
 80060b4:	4b70      	ldr	r3, [pc, #448]	; (8006278 <checkAktifCalisma+0x15e4>)
 80060b6:	2201      	movs	r2, #1
 80060b8:	701a      	strb	r2, [r3, #0]
 80060ba:	e01f      	b.n	80060fc <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80060bc:	4b6e      	ldr	r3, [pc, #440]	; (8006278 <checkAktifCalisma+0x15e4>)
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d01b      	beq.n	80060fc <checkAktifCalisma+0x1468>
 80060c4:	4b6d      	ldr	r3, [pc, #436]	; (800627c <checkAktifCalisma+0x15e8>)
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d017      	beq.n	80060fc <checkAktifCalisma+0x1468>
 80060cc:	4b66      	ldr	r3, [pc, #408]	; (8006268 <checkAktifCalisma+0x15d4>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	f083 0301 	eor.w	r3, r3, #1
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d010      	beq.n	80060fc <checkAktifCalisma+0x1468>
 80060da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80060de:	4864      	ldr	r0, [pc, #400]	; (8006270 <checkAktifCalisma+0x15dc>)
 80060e0:	f003 f830 	bl	8009144 <HAL_GPIO_ReadPin>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d108      	bne.n	80060fc <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 80060ea:	4b63      	ldr	r3, [pc, #396]	; (8006278 <checkAktifCalisma+0x15e4>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 80060f0:	4b5e      	ldr	r3, [pc, #376]	; (800626c <checkAktifCalisma+0x15d8>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 80060f6:	2004      	movs	r0, #4
 80060f8:	f7fe fbfa 	bl	80048f0 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80060fc:	4b5a      	ldr	r3, [pc, #360]	; (8006268 <checkAktifCalisma+0x15d4>)
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d103      	bne.n	800610c <checkAktifCalisma+0x1478>
 8006104:	4b5e      	ldr	r3, [pc, #376]	; (8006280 <checkAktifCalisma+0x15ec>)
 8006106:	781b      	ldrb	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d01e      	beq.n	800614a <checkAktifCalisma+0x14b6>
 800610c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006110:	4857      	ldr	r0, [pc, #348]	; (8006270 <checkAktifCalisma+0x15dc>)
 8006112:	f003 f817 	bl	8009144 <HAL_GPIO_ReadPin>
 8006116:	4603      	mov	r3, r0
 8006118:	2b01      	cmp	r3, #1
 800611a:	d116      	bne.n	800614a <checkAktifCalisma+0x14b6>
 800611c:	4b55      	ldr	r3, [pc, #340]	; (8006274 <checkAktifCalisma+0x15e0>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d003      	beq.n	800612c <checkAktifCalisma+0x1498>
 8006124:	4b53      	ldr	r3, [pc, #332]	; (8006274 <checkAktifCalisma+0x15e0>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	2b03      	cmp	r3, #3
 800612a:	d10e      	bne.n	800614a <checkAktifCalisma+0x14b6>
			hataVar=1;
 800612c:	4b4b      	ldr	r3, [pc, #300]	; (800625c <checkAktifCalisma+0x15c8>)
 800612e:	2201      	movs	r2, #1
 8006130:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8006132:	2005      	movs	r0, #5
 8006134:	f7fa fc4c 	bl	80009d0 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8006138:	2005      	movs	r0, #5
 800613a:	f7fa fbef 	bl	800091c <hata2EEPROM>
			convertAndSendData();
 800613e:	f001 fabf 	bl	80076c0 <convertAndSendData>
			tablakapisivicihatasi=1;
 8006142:	4b50      	ldr	r3, [pc, #320]	; (8006284 <checkAktifCalisma+0x15f0>)
 8006144:	2201      	movs	r2, #1
 8006146:	701a      	strb	r2, [r3, #0]
 8006148:	e023      	b.n	8006192 <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 800614a:	4b4e      	ldr	r3, [pc, #312]	; (8006284 <checkAktifCalisma+0x15f0>)
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d01f      	beq.n	8006192 <checkAktifCalisma+0x14fe>
 8006152:	4b4a      	ldr	r3, [pc, #296]	; (800627c <checkAktifCalisma+0x15e8>)
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d01b      	beq.n	8006192 <checkAktifCalisma+0x14fe>
 800615a:	4b43      	ldr	r3, [pc, #268]	; (8006268 <checkAktifCalisma+0x15d4>)
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	f083 0301 	eor.w	r3, r3, #1
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d014      	beq.n	8006192 <checkAktifCalisma+0x14fe>
 8006168:	f44f 7180 	mov.w	r1, #256	; 0x100
 800616c:	4840      	ldr	r0, [pc, #256]	; (8006270 <checkAktifCalisma+0x15dc>)
 800616e:	f002 ffe9 	bl	8009144 <HAL_GPIO_ReadPin>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10c      	bne.n	8006192 <checkAktifCalisma+0x14fe>
 8006178:	4b40      	ldr	r3, [pc, #256]	; (800627c <checkAktifCalisma+0x15e8>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d008      	beq.n	8006192 <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 8006180:	4b40      	ldr	r3, [pc, #256]	; (8006284 <checkAktifCalisma+0x15f0>)
 8006182:	2200      	movs	r2, #0
 8006184:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8006186:	4b3e      	ldr	r3, [pc, #248]	; (8006280 <checkAktifCalisma+0x15ec>)
 8006188:	2200      	movs	r2, #0
 800618a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 800618c:	2005      	movs	r0, #5
 800618e:	f7fe fbaf 	bl	80048f0 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8006192:	4b30      	ldr	r3, [pc, #192]	; (8006254 <checkAktifCalisma+0x15c0>)
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d107      	bne.n	80061aa <checkAktifCalisma+0x1516>
 800619a:	4b2a      	ldr	r3, [pc, #168]	; (8006244 <checkAktifCalisma+0x15b0>)
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d103      	bne.n	80061aa <checkAktifCalisma+0x1516>
 80061a2:	4b39      	ldr	r3, [pc, #228]	; (8006288 <checkAktifCalisma+0x15f4>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d016      	beq.n	80061d8 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 80061aa:	4b38      	ldr	r3, [pc, #224]	; (800628c <checkAktifCalisma+0x15f8>)
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	4b38      	ldr	r3, [pc, #224]	; (8006290 <checkAktifCalisma+0x15fc>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	4a37      	ldr	r2, [pc, #220]	; (8006294 <checkAktifCalisma+0x1600>)
 80061b6:	7812      	ldrb	r2, [r2, #0]
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d30d      	bcc.n	80061d8 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 80061bc:	4b27      	ldr	r3, [pc, #156]	; (800625c <checkAktifCalisma+0x15c8>)
 80061be:	2201      	movs	r2, #1
 80061c0:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 80061c2:	2006      	movs	r0, #6
 80061c4:	f7fa fc04 	bl	80009d0 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 80061c8:	2006      	movs	r0, #6
 80061ca:	f7fa fba7 	bl	800091c <hata2EEPROM>
			  	convertAndSendData();
 80061ce:	f001 fa77 	bl	80076c0 <convertAndSendData>
			  	maksimumcalismahatasi=1;
 80061d2:	4b31      	ldr	r3, [pc, #196]	; (8006298 <checkAktifCalisma+0x1604>)
 80061d4:	2201      	movs	r2, #1
 80061d6:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80061d8:	4b2f      	ldr	r3, [pc, #188]	; (8006298 <checkAktifCalisma+0x1604>)
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d013      	beq.n	8006208 <checkAktifCalisma+0x1574>
 80061e0:	2108      	movs	r1, #8
 80061e2:	4823      	ldr	r0, [pc, #140]	; (8006270 <checkAktifCalisma+0x15dc>)
 80061e4:	f002 ffae 	bl	8009144 <HAL_GPIO_ReadPin>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00c      	beq.n	8006208 <checkAktifCalisma+0x1574>
 80061ee:	4b1e      	ldr	r3, [pc, #120]	; (8006268 <checkAktifCalisma+0x15d4>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	f083 0301 	eor.w	r3, r3, #1
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d005      	beq.n	8006208 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 80061fc:	4b26      	ldr	r3, [pc, #152]	; (8006298 <checkAktifCalisma+0x1604>)
 80061fe:	2200      	movs	r2, #0
 8006200:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8006202:	2006      	movs	r0, #6
 8006204:	f7fe fb74 	bl	80048f0 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006208:	4b24      	ldr	r3, [pc, #144]	; (800629c <checkAktifCalisma+0x1608>)
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d10b      	bne.n	8006228 <checkAktifCalisma+0x1594>
 8006210:	4b0c      	ldr	r3, [pc, #48]	; (8006244 <checkAktifCalisma+0x15b0>)
 8006212:	781b      	ldrb	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d107      	bne.n	8006228 <checkAktifCalisma+0x1594>
 8006218:	4b21      	ldr	r3, [pc, #132]	; (80062a0 <checkAktifCalisma+0x160c>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d103      	bne.n	8006228 <checkAktifCalisma+0x1594>
 8006220:	4b19      	ldr	r3, [pc, #100]	; (8006288 <checkAktifCalisma+0x15f4>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d03f      	beq.n	80062a8 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 8006228:	4b1e      	ldr	r3, [pc, #120]	; (80062a4 <checkAktifCalisma+0x1610>)
 800622a:	2200      	movs	r2, #0
 800622c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 800622e:	4b0f      	ldr	r3, [pc, #60]	; (800626c <checkAktifCalisma+0x15d8>)
 8006230:	2201      	movs	r2, #1
 8006232:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8006234:	4b12      	ldr	r3, [pc, #72]	; (8006280 <checkAktifCalisma+0x15ec>)
 8006236:	2201      	movs	r2, #1
 8006238:	701a      	strb	r2, [r3, #0]
 800623a:	e03c      	b.n	80062b6 <checkAktifCalisma+0x1622>
 800623c:	2000026d 	.word	0x2000026d
 8006240:	20000273 	.word	0x20000273
 8006244:	20000254 	.word	0x20000254
 8006248:	2000027d 	.word	0x2000027d
 800624c:	2000021f 	.word	0x2000021f
 8006250:	20000223 	.word	0x20000223
 8006254:	20000270 	.word	0x20000270
 8006258:	40011000 	.word	0x40011000
 800625c:	20000271 	.word	0x20000271
 8006260:	2000027a 	.word	0x2000027a
 8006264:	40010c00 	.word	0x40010c00
 8006268:	2000026a 	.word	0x2000026a
 800626c:	2000027e 	.word	0x2000027e
 8006270:	40010800 	.word	0x40010800
 8006274:	20000224 	.word	0x20000224
 8006278:	2000027b 	.word	0x2000027b
 800627c:	2000025e 	.word	0x2000025e
 8006280:	2000027f 	.word	0x2000027f
 8006284:	2000027c 	.word	0x2000027c
 8006288:	20000253 	.word	0x20000253
 800628c:	200001f8 	.word	0x200001f8
 8006290:	2000020c 	.word	0x2000020c
 8006294:	20000234 	.word	0x20000234
 8006298:	2000026b 	.word	0x2000026b
 800629c:	20000251 	.word	0x20000251
 80062a0:	20000252 	.word	0x20000252
 80062a4:	20000272 	.word	0x20000272
		} else {
			makineCalisiyor=1;
 80062a8:	4b1e      	ldr	r3, [pc, #120]	; (8006324 <checkAktifCalisma+0x1690>)
 80062aa:	2201      	movs	r2, #1
 80062ac:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80062ae:	4b1e      	ldr	r3, [pc, #120]	; (8006328 <checkAktifCalisma+0x1694>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a1e      	ldr	r2, [pc, #120]	; (800632c <checkAktifCalisma+0x1698>)
 80062b4:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80062b6:	4b1e      	ldr	r3, [pc, #120]	; (8006330 <checkAktifCalisma+0x169c>)
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d02f      	beq.n	800631e <checkAktifCalisma+0x168a>
 80062be:	4b1d      	ldr	r3, [pc, #116]	; (8006334 <checkAktifCalisma+0x16a0>)
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	f083 0301 	eor.w	r3, r3, #1
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d028      	beq.n	800631e <checkAktifCalisma+0x168a>
 80062cc:	4b1a      	ldr	r3, [pc, #104]	; (8006338 <checkAktifCalisma+0x16a4>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	f083 0301 	eor.w	r3, r3, #1
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d021      	beq.n	800631e <checkAktifCalisma+0x168a>
 80062da:	4b18      	ldr	r3, [pc, #96]	; (800633c <checkAktifCalisma+0x16a8>)
 80062dc:	781b      	ldrb	r3, [r3, #0]
 80062de:	f083 0301 	eor.w	r3, r3, #1
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d01a      	beq.n	800631e <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80062e8:	4b15      	ldr	r3, [pc, #84]	; (8006340 <checkAktifCalisma+0x16ac>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	f083 0301 	eor.w	r3, r3, #1
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d013      	beq.n	800631e <checkAktifCalisma+0x168a>
 80062f6:	4b13      	ldr	r3, [pc, #76]	; (8006344 <checkAktifCalisma+0x16b0>)
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	f083 0301 	eor.w	r3, r3, #1
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	d00c      	beq.n	800631e <checkAktifCalisma+0x168a>
 8006304:	4b10      	ldr	r3, [pc, #64]	; (8006348 <checkAktifCalisma+0x16b4>)
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	f083 0301 	eor.w	r3, r3, #1
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <checkAktifCalisma+0x168a>
			hataVar=0;
 8006312:	4b07      	ldr	r3, [pc, #28]	; (8006330 <checkAktifCalisma+0x169c>)
 8006314:	2200      	movs	r2, #0
 8006316:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8006318:	2007      	movs	r0, #7
 800631a:	f7fe fae9 	bl	80048f0 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 800631e:	bf00      	nop
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	20000272 	.word	0x20000272
 8006328:	200001f8 	.word	0x200001f8
 800632c:	2000020c 	.word	0x2000020c
 8006330:	20000271 	.word	0x20000271
 8006334:	2000026c 	.word	0x2000026c
 8006338:	2000026d 	.word	0x2000026d
 800633c:	2000027a 	.word	0x2000027a
 8006340:	2000027b 	.word	0x2000027b
 8006344:	2000027c 	.word	0x2000027c
 8006348:	2000026b 	.word	0x2000026b

0800634c <checkDemoModCalisma>:

void checkDemoModCalisma() {
 800634c:	b580      	push	{r7, lr}
 800634e:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006350:	4b8b      	ldr	r3, [pc, #556]	; (8006580 <checkDemoModCalisma+0x234>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b01      	cmp	r3, #1
 8006356:	f040 8229 	bne.w	80067ac <checkDemoModCalisma+0x460>
 800635a:	4b8a      	ldr	r3, [pc, #552]	; (8006584 <checkDemoModCalisma+0x238>)
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 8224 	beq.w	80067ac <checkDemoModCalisma+0x460>
 8006364:	4b88      	ldr	r3, [pc, #544]	; (8006588 <checkDemoModCalisma+0x23c>)
 8006366:	781b      	ldrb	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	f040 821f 	bne.w	80067ac <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800636e:	2102      	movs	r1, #2
 8006370:	4886      	ldr	r0, [pc, #536]	; (800658c <checkDemoModCalisma+0x240>)
 8006372:	f002 fee7 	bl	8009144 <HAL_GPIO_ReadPin>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d11d      	bne.n	80063b8 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 800637c:	4b84      	ldr	r3, [pc, #528]	; (8006590 <checkDemoModCalisma+0x244>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	f083 0301 	eor.w	r3, r3, #1
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d016      	beq.n	80063b8 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 800638a:	4b82      	ldr	r3, [pc, #520]	; (8006594 <checkDemoModCalisma+0x248>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	f083 0301 	eor.w	r3, r3, #1
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00f      	beq.n	80063b8 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8006398:	4b7f      	ldr	r3, [pc, #508]	; (8006598 <checkDemoModCalisma+0x24c>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	f083 0301 	eor.w	r3, r3, #1
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d008      	beq.n	80063b8 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80063a6:	2201      	movs	r2, #1
 80063a8:	2104      	movs	r1, #4
 80063aa:	487c      	ldr	r0, [pc, #496]	; (800659c <checkDemoModCalisma+0x250>)
 80063ac:	f002 fee1 	bl	8009172 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 80063b0:	4b7b      	ldr	r3, [pc, #492]	; (80065a0 <checkDemoModCalisma+0x254>)
 80063b2:	2201      	movs	r2, #1
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	e00e      	b.n	80063d6 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80063b8:	2102      	movs	r1, #2
 80063ba:	4874      	ldr	r0, [pc, #464]	; (800658c <checkDemoModCalisma+0x240>)
 80063bc:	f002 fec2 	bl	8009144 <HAL_GPIO_ReadPin>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d107      	bne.n	80063d6 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80063c6:	2200      	movs	r2, #0
 80063c8:	2104      	movs	r1, #4
 80063ca:	4874      	ldr	r0, [pc, #464]	; (800659c <checkDemoModCalisma+0x250>)
 80063cc:	f002 fed1 	bl	8009172 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 80063d0:	4b73      	ldr	r3, [pc, #460]	; (80065a0 <checkDemoModCalisma+0x254>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 80063d6:	4b72      	ldr	r3, [pc, #456]	; (80065a0 <checkDemoModCalisma+0x254>)
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10b      	bne.n	80063f6 <checkDemoModCalisma+0xaa>
 80063de:	4b6d      	ldr	r3, [pc, #436]	; (8006594 <checkDemoModCalisma+0x248>)
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d107      	bne.n	80063f6 <checkDemoModCalisma+0xaa>
 80063e6:	4b6c      	ldr	r3, [pc, #432]	; (8006598 <checkDemoModCalisma+0x24c>)
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d103      	bne.n	80063f6 <checkDemoModCalisma+0xaa>
 80063ee:	4b68      	ldr	r3, [pc, #416]	; (8006590 <checkDemoModCalisma+0x244>)
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00c      	beq.n	8006410 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80063f6:	2201      	movs	r2, #1
 80063f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80063fc:	4867      	ldr	r0, [pc, #412]	; (800659c <checkDemoModCalisma+0x250>)
 80063fe:	f002 feb8 	bl	8009172 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006402:	2201      	movs	r2, #1
 8006404:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006408:	4864      	ldr	r0, [pc, #400]	; (800659c <checkDemoModCalisma+0x250>)
 800640a:	f002 feb2 	bl	8009172 <HAL_GPIO_WritePin>
 800640e:	e00b      	b.n	8006428 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006410:	2200      	movs	r2, #0
 8006412:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006416:	4861      	ldr	r0, [pc, #388]	; (800659c <checkDemoModCalisma+0x250>)
 8006418:	f002 feab 	bl	8009172 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800641c:	2200      	movs	r2, #0
 800641e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006422:	485e      	ldr	r0, [pc, #376]	; (800659c <checkDemoModCalisma+0x250>)
 8006424:	f002 fea5 	bl	8009172 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006428:	2102      	movs	r1, #2
 800642a:	4858      	ldr	r0, [pc, #352]	; (800658c <checkDemoModCalisma+0x240>)
 800642c:	f002 fe8a 	bl	8009144 <HAL_GPIO_ReadPin>
 8006430:	4603      	mov	r3, r0
 8006432:	2b01      	cmp	r3, #1
 8006434:	d10d      	bne.n	8006452 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006436:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800643a:	4854      	ldr	r0, [pc, #336]	; (800658c <checkDemoModCalisma+0x240>)
 800643c:	f002 fe82 	bl	8009144 <HAL_GPIO_ReadPin>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d105      	bne.n	8006452 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8006446:	4b56      	ldr	r3, [pc, #344]	; (80065a0 <checkDemoModCalisma+0x254>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	f083 0301 	eor.w	r3, r3, #1
 800644e:	b2db      	uxtb	r3, r3
 8006450:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006452:	2102      	movs	r1, #2
 8006454:	484d      	ldr	r0, [pc, #308]	; (800658c <checkDemoModCalisma+0x240>)
 8006456:	f002 fe75 	bl	8009144 <HAL_GPIO_ReadPin>
 800645a:	4603      	mov	r3, r0
 800645c:	2b01      	cmp	r3, #1
 800645e:	d125      	bne.n	80064ac <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006460:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006464:	4849      	ldr	r0, [pc, #292]	; (800658c <checkDemoModCalisma+0x240>)
 8006466:	f002 fe6d 	bl	8009144 <HAL_GPIO_ReadPin>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d11d      	bne.n	80064ac <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8006470:	4b4b      	ldr	r3, [pc, #300]	; (80065a0 <checkDemoModCalisma+0x254>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	f083 0301 	eor.w	r3, r3, #1
 8006478:	b2db      	uxtb	r3, r3
 800647a:	2b00      	cmp	r3, #0
 800647c:	d016      	beq.n	80064ac <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 800647e:	4b44      	ldr	r3, [pc, #272]	; (8006590 <checkDemoModCalisma+0x244>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	f083 0301 	eor.w	r3, r3, #1
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00f      	beq.n	80064ac <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 800648c:	4b42      	ldr	r3, [pc, #264]	; (8006598 <checkDemoModCalisma+0x24c>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	f083 0301 	eor.w	r3, r3, #1
 8006494:	b2db      	uxtb	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	d008      	beq.n	80064ac <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800649a:	2201      	movs	r2, #1
 800649c:	2120      	movs	r1, #32
 800649e:	483b      	ldr	r0, [pc, #236]	; (800658c <checkDemoModCalisma+0x240>)
 80064a0:	f002 fe67 	bl	8009172 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 80064a4:	4b3b      	ldr	r3, [pc, #236]	; (8006594 <checkDemoModCalisma+0x248>)
 80064a6:	2201      	movs	r2, #1
 80064a8:	701a      	strb	r2, [r3, #0]
 80064aa:	e007      	b.n	80064bc <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80064ac:	2200      	movs	r2, #0
 80064ae:	2120      	movs	r1, #32
 80064b0:	4836      	ldr	r0, [pc, #216]	; (800658c <checkDemoModCalisma+0x240>)
 80064b2:	f002 fe5e 	bl	8009172 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 80064b6:	4b37      	ldr	r3, [pc, #220]	; (8006594 <checkDemoModCalisma+0x248>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80064bc:	2102      	movs	r1, #2
 80064be:	4833      	ldr	r0, [pc, #204]	; (800658c <checkDemoModCalisma+0x240>)
 80064c0:	f002 fe40 	bl	8009144 <HAL_GPIO_ReadPin>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d125      	bne.n	8006516 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80064ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80064ce:	482f      	ldr	r0, [pc, #188]	; (800658c <checkDemoModCalisma+0x240>)
 80064d0:	f002 fe38 	bl	8009144 <HAL_GPIO_ReadPin>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d11d      	bne.n	8006516 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 80064da:	4b31      	ldr	r3, [pc, #196]	; (80065a0 <checkDemoModCalisma+0x254>)
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	f083 0301 	eor.w	r3, r3, #1
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d016      	beq.n	8006516 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 80064e8:	4b2a      	ldr	r3, [pc, #168]	; (8006594 <checkDemoModCalisma+0x248>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	f083 0301 	eor.w	r3, r3, #1
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00f      	beq.n	8006516 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 80064f6:	4b26      	ldr	r3, [pc, #152]	; (8006590 <checkDemoModCalisma+0x244>)
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	f083 0301 	eor.w	r3, r3, #1
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	d008      	beq.n	8006516 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006504:	2201      	movs	r2, #1
 8006506:	2110      	movs	r1, #16
 8006508:	4820      	ldr	r0, [pc, #128]	; (800658c <checkDemoModCalisma+0x240>)
 800650a:	f002 fe32 	bl	8009172 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 800650e:	4b22      	ldr	r3, [pc, #136]	; (8006598 <checkDemoModCalisma+0x24c>)
 8006510:	2201      	movs	r2, #1
 8006512:	701a      	strb	r2, [r3, #0]
 8006514:	e007      	b.n	8006526 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006516:	2200      	movs	r2, #0
 8006518:	2110      	movs	r1, #16
 800651a:	481c      	ldr	r0, [pc, #112]	; (800658c <checkDemoModCalisma+0x240>)
 800651c:	f002 fe29 	bl	8009172 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8006520:	4b1d      	ldr	r3, [pc, #116]	; (8006598 <checkDemoModCalisma+0x24c>)
 8006522:	2200      	movs	r2, #0
 8006524:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006526:	2104      	movs	r1, #4
 8006528:	4818      	ldr	r0, [pc, #96]	; (800658c <checkDemoModCalisma+0x240>)
 800652a:	f002 fe0b 	bl	8009144 <HAL_GPIO_ReadPin>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d139      	bne.n	80065a8 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8006534:	4b1a      	ldr	r3, [pc, #104]	; (80065a0 <checkDemoModCalisma+0x254>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	f083 0301 	eor.w	r3, r3, #1
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d032      	beq.n	80065a8 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8006542:	4b15      	ldr	r3, [pc, #84]	; (8006598 <checkDemoModCalisma+0x24c>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	f083 0301 	eor.w	r3, r3, #1
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	d02b      	beq.n	80065a8 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8006550:	4b10      	ldr	r3, [pc, #64]	; (8006594 <checkDemoModCalisma+0x248>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	f083 0301 	eor.w	r3, r3, #1
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d024      	beq.n	80065a8 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800655e:	2201      	movs	r2, #1
 8006560:	2102      	movs	r1, #2
 8006562:	480e      	ldr	r0, [pc, #56]	; (800659c <checkDemoModCalisma+0x250>)
 8006564:	f002 fe05 	bl	8009172 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006568:	2201      	movs	r2, #1
 800656a:	2101      	movs	r1, #1
 800656c:	480b      	ldr	r0, [pc, #44]	; (800659c <checkDemoModCalisma+0x250>)
 800656e:	f002 fe00 	bl	8009172 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8006572:	4b07      	ldr	r3, [pc, #28]	; (8006590 <checkDemoModCalisma+0x244>)
 8006574:	2201      	movs	r2, #1
 8006576:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8006578:	4b0a      	ldr	r3, [pc, #40]	; (80065a4 <checkDemoModCalisma+0x258>)
 800657a:	2201      	movs	r2, #1
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	e027      	b.n	80065d0 <checkDemoModCalisma+0x284>
 8006580:	2000023a 	.word	0x2000023a
 8006584:	2000026e 	.word	0x2000026e
 8006588:	20000239 	.word	0x20000239
 800658c:	40011000 	.word	0x40011000
 8006590:	20000275 	.word	0x20000275
 8006594:	20000276 	.word	0x20000276
 8006598:	20000277 	.word	0x20000277
 800659c:	40010c00 	.word	0x40010c00
 80065a0:	20000274 	.word	0x20000274
 80065a4:	2000025a 	.word	0x2000025a
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80065a8:	2104      	movs	r1, #4
 80065aa:	48a0      	ldr	r0, [pc, #640]	; (800682c <checkDemoModCalisma+0x4e0>)
 80065ac:	f002 fdca 	bl	8009144 <HAL_GPIO_ReadPin>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d10c      	bne.n	80065d0 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80065b6:	2200      	movs	r2, #0
 80065b8:	2102      	movs	r1, #2
 80065ba:	489d      	ldr	r0, [pc, #628]	; (8006830 <checkDemoModCalisma+0x4e4>)
 80065bc:	f002 fdd9 	bl	8009172 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80065c0:	2200      	movs	r2, #0
 80065c2:	2101      	movs	r1, #1
 80065c4:	489a      	ldr	r0, [pc, #616]	; (8006830 <checkDemoModCalisma+0x4e4>)
 80065c6:	f002 fdd4 	bl	8009172 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 80065ca:	4b9a      	ldr	r3, [pc, #616]	; (8006834 <checkDemoModCalisma+0x4e8>)
 80065cc:	2200      	movs	r2, #0
 80065ce:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 80065d0:	2104      	movs	r1, #4
 80065d2:	4896      	ldr	r0, [pc, #600]	; (800682c <checkDemoModCalisma+0x4e0>)
 80065d4:	f002 fdb6 	bl	8009144 <HAL_GPIO_ReadPin>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d10d      	bne.n	80065fa <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80065de:	2201      	movs	r2, #1
 80065e0:	2180      	movs	r1, #128	; 0x80
 80065e2:	4895      	ldr	r0, [pc, #596]	; (8006838 <checkDemoModCalisma+0x4ec>)
 80065e4:	f002 fdc5 	bl	8009172 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80065e8:	2201      	movs	r2, #1
 80065ea:	2120      	movs	r1, #32
 80065ec:	4892      	ldr	r0, [pc, #584]	; (8006838 <checkDemoModCalisma+0x4ec>)
 80065ee:	f002 fdc0 	bl	8009172 <HAL_GPIO_WritePin>
			timer3 = millis;
 80065f2:	4b92      	ldr	r3, [pc, #584]	; (800683c <checkDemoModCalisma+0x4f0>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a92      	ldr	r2, [pc, #584]	; (8006840 <checkDemoModCalisma+0x4f4>)
 80065f8:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80065fa:	4b90      	ldr	r3, [pc, #576]	; (800683c <checkDemoModCalisma+0x4f0>)
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	4b90      	ldr	r3, [pc, #576]	; (8006840 <checkDemoModCalisma+0x4f4>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	2b04      	cmp	r3, #4
 8006606:	d909      	bls.n	800661c <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006608:	2200      	movs	r2, #0
 800660a:	2180      	movs	r1, #128	; 0x80
 800660c:	488a      	ldr	r0, [pc, #552]	; (8006838 <checkDemoModCalisma+0x4ec>)
 800660e:	f002 fdb0 	bl	8009172 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006612:	2200      	movs	r2, #0
 8006614:	2120      	movs	r1, #32
 8006616:	4888      	ldr	r0, [pc, #544]	; (8006838 <checkDemoModCalisma+0x4ec>)
 8006618:	f002 fdab 	bl	8009172 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800661c:	2102      	movs	r1, #2
 800661e:	4883      	ldr	r0, [pc, #524]	; (800682c <checkDemoModCalisma+0x4e0>)
 8006620:	f002 fd90 	bl	8009144 <HAL_GPIO_ReadPin>
 8006624:	4603      	mov	r3, r0
 8006626:	2b01      	cmp	r3, #1
 8006628:	d108      	bne.n	800663c <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800662a:	2201      	movs	r2, #1
 800662c:	2140      	movs	r1, #64	; 0x40
 800662e:	4882      	ldr	r0, [pc, #520]	; (8006838 <checkDemoModCalisma+0x4ec>)
 8006630:	f002 fd9f 	bl	8009172 <HAL_GPIO_WritePin>
			timer3 = millis;
 8006634:	4b81      	ldr	r3, [pc, #516]	; (800683c <checkDemoModCalisma+0x4f0>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a81      	ldr	r2, [pc, #516]	; (8006840 <checkDemoModCalisma+0x4f4>)
 800663a:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800663c:	4b7f      	ldr	r3, [pc, #508]	; (800683c <checkDemoModCalisma+0x4f0>)
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	4b7f      	ldr	r3, [pc, #508]	; (8006840 <checkDemoModCalisma+0x4f4>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	2b04      	cmp	r3, #4
 8006648:	d904      	bls.n	8006654 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800664a:	2200      	movs	r2, #0
 800664c:	2140      	movs	r1, #64	; 0x40
 800664e:	487a      	ldr	r0, [pc, #488]	; (8006838 <checkDemoModCalisma+0x4ec>)
 8006650:	f002 fd8f 	bl	8009172 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006654:	4b7b      	ldr	r3, [pc, #492]	; (8006844 <checkDemoModCalisma+0x4f8>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d058      	beq.n	800670e <checkDemoModCalisma+0x3c2>
 800665c:	4b7a      	ldr	r3, [pc, #488]	; (8006848 <checkDemoModCalisma+0x4fc>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d054      	beq.n	800670e <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8006664:	4b79      	ldr	r3, [pc, #484]	; (800684c <checkDemoModCalisma+0x500>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	3301      	adds	r3, #1
 800666a:	b2da      	uxtb	r2, r3
 800666c:	4b77      	ldr	r3, [pc, #476]	; (800684c <checkDemoModCalisma+0x500>)
 800666e:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8006670:	4b76      	ldr	r3, [pc, #472]	; (800684c <checkDemoModCalisma+0x500>)
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	2b09      	cmp	r3, #9
 8006676:	d908      	bls.n	800668a <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8006678:	4b74      	ldr	r3, [pc, #464]	; (800684c <checkDemoModCalisma+0x500>)
 800667a:	2200      	movs	r2, #0
 800667c:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 800667e:	4b74      	ldr	r3, [pc, #464]	; (8006850 <checkDemoModCalisma+0x504>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	3301      	adds	r3, #1
 8006684:	b2da      	uxtb	r2, r3
 8006686:	4b72      	ldr	r3, [pc, #456]	; (8006850 <checkDemoModCalisma+0x504>)
 8006688:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 800668a:	4b71      	ldr	r3, [pc, #452]	; (8006850 <checkDemoModCalisma+0x504>)
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	2b09      	cmp	r3, #9
 8006690:	d908      	bls.n	80066a4 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8006692:	4b6f      	ldr	r3, [pc, #444]	; (8006850 <checkDemoModCalisma+0x504>)
 8006694:	2200      	movs	r2, #0
 8006696:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8006698:	4b6e      	ldr	r3, [pc, #440]	; (8006854 <checkDemoModCalisma+0x508>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	3301      	adds	r3, #1
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	4b6c      	ldr	r3, [pc, #432]	; (8006854 <checkDemoModCalisma+0x508>)
 80066a2:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 80066a4:	4b6b      	ldr	r3, [pc, #428]	; (8006854 <checkDemoModCalisma+0x508>)
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2b09      	cmp	r3, #9
 80066aa:	d908      	bls.n	80066be <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 80066ac:	4b69      	ldr	r3, [pc, #420]	; (8006854 <checkDemoModCalisma+0x508>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 80066b2:	4b69      	ldr	r3, [pc, #420]	; (8006858 <checkDemoModCalisma+0x50c>)
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	3301      	adds	r3, #1
 80066b8:	b2da      	uxtb	r2, r3
 80066ba:	4b67      	ldr	r3, [pc, #412]	; (8006858 <checkDemoModCalisma+0x50c>)
 80066bc:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 80066be:	4b66      	ldr	r3, [pc, #408]	; (8006858 <checkDemoModCalisma+0x50c>)
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	2b09      	cmp	r3, #9
 80066c4:	d908      	bls.n	80066d8 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 80066c6:	4b64      	ldr	r3, [pc, #400]	; (8006858 <checkDemoModCalisma+0x50c>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 80066cc:	4b63      	ldr	r3, [pc, #396]	; (800685c <checkDemoModCalisma+0x510>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	3301      	adds	r3, #1
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	4b61      	ldr	r3, [pc, #388]	; (800685c <checkDemoModCalisma+0x510>)
 80066d6:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80066d8:	4b60      	ldr	r3, [pc, #384]	; (800685c <checkDemoModCalisma+0x510>)
 80066da:	781a      	ldrb	r2, [r3, #0]
 80066dc:	4b60      	ldr	r3, [pc, #384]	; (8006860 <checkDemoModCalisma+0x514>)
 80066de:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80066e2:	4b5d      	ldr	r3, [pc, #372]	; (8006858 <checkDemoModCalisma+0x50c>)
 80066e4:	781a      	ldrb	r2, [r3, #0]
 80066e6:	4b5e      	ldr	r3, [pc, #376]	; (8006860 <checkDemoModCalisma+0x514>)
 80066e8:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80066ea:	4b5a      	ldr	r3, [pc, #360]	; (8006854 <checkDemoModCalisma+0x508>)
 80066ec:	781a      	ldrb	r2, [r3, #0]
 80066ee:	4b5c      	ldr	r3, [pc, #368]	; (8006860 <checkDemoModCalisma+0x514>)
 80066f0:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80066f2:	4b57      	ldr	r3, [pc, #348]	; (8006850 <checkDemoModCalisma+0x504>)
 80066f4:	781a      	ldrb	r2, [r3, #0]
 80066f6:	4b5a      	ldr	r3, [pc, #360]	; (8006860 <checkDemoModCalisma+0x514>)
 80066f8:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80066fa:	4b54      	ldr	r3, [pc, #336]	; (800684c <checkDemoModCalisma+0x500>)
 80066fc:	781a      	ldrb	r2, [r3, #0]
 80066fe:	4b58      	ldr	r3, [pc, #352]	; (8006860 <checkDemoModCalisma+0x514>)
 8006700:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8006702:	4b58      	ldr	r3, [pc, #352]	; (8006864 <checkDemoModCalisma+0x518>)
 8006704:	2201      	movs	r2, #1
 8006706:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8006708:	4b4f      	ldr	r3, [pc, #316]	; (8006848 <checkDemoModCalisma+0x4fc>)
 800670a:	2200      	movs	r2, #0
 800670c:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 800670e:	4b56      	ldr	r3, [pc, #344]	; (8006868 <checkDemoModCalisma+0x51c>)
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	f040 8087 	bne.w	8006826 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8006718:	4a54      	ldr	r2, [pc, #336]	; (800686c <checkDemoModCalisma+0x520>)
 800671a:	2101      	movs	r1, #1
 800671c:	2002      	movs	r0, #2
 800671e:	f001 f9eb 	bl	8007af8 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8006722:	4a53      	ldr	r2, [pc, #332]	; (8006870 <checkDemoModCalisma+0x524>)
 8006724:	2101      	movs	r1, #1
 8006726:	2001      	movs	r0, #1
 8006728:	f001 f9e6 	bl	8007af8 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 800672c:	4b4b      	ldr	r3, [pc, #300]	; (800685c <checkDemoModCalisma+0x510>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	220a      	movs	r2, #10
 8006732:	4950      	ldr	r1, [pc, #320]	; (8006874 <checkDemoModCalisma+0x528>)
 8006734:	4618      	mov	r0, r3
 8006736:	f005 fd31 	bl	800c19c <itoa>
			lcd_print(2,12,snum);
 800673a:	4a4e      	ldr	r2, [pc, #312]	; (8006874 <checkDemoModCalisma+0x528>)
 800673c:	210c      	movs	r1, #12
 800673e:	2002      	movs	r0, #2
 8006740:	f001 f9da 	bl	8007af8 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8006744:	4b44      	ldr	r3, [pc, #272]	; (8006858 <checkDemoModCalisma+0x50c>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	220a      	movs	r2, #10
 800674a:	494a      	ldr	r1, [pc, #296]	; (8006874 <checkDemoModCalisma+0x528>)
 800674c:	4618      	mov	r0, r3
 800674e:	f005 fd25 	bl	800c19c <itoa>
			lcd_print(2,13,snum);
 8006752:	4a48      	ldr	r2, [pc, #288]	; (8006874 <checkDemoModCalisma+0x528>)
 8006754:	210d      	movs	r1, #13
 8006756:	2002      	movs	r0, #2
 8006758:	f001 f9ce 	bl	8007af8 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 800675c:	4b3d      	ldr	r3, [pc, #244]	; (8006854 <checkDemoModCalisma+0x508>)
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	220a      	movs	r2, #10
 8006762:	4944      	ldr	r1, [pc, #272]	; (8006874 <checkDemoModCalisma+0x528>)
 8006764:	4618      	mov	r0, r3
 8006766:	f005 fd19 	bl	800c19c <itoa>
			lcd_print(2,14,snum);
 800676a:	4a42      	ldr	r2, [pc, #264]	; (8006874 <checkDemoModCalisma+0x528>)
 800676c:	210e      	movs	r1, #14
 800676e:	2002      	movs	r0, #2
 8006770:	f001 f9c2 	bl	8007af8 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8006774:	4b36      	ldr	r3, [pc, #216]	; (8006850 <checkDemoModCalisma+0x504>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	220a      	movs	r2, #10
 800677a:	493e      	ldr	r1, [pc, #248]	; (8006874 <checkDemoModCalisma+0x528>)
 800677c:	4618      	mov	r0, r3
 800677e:	f005 fd0d 	bl	800c19c <itoa>
			lcd_print(2,15,snum);
 8006782:	4a3c      	ldr	r2, [pc, #240]	; (8006874 <checkDemoModCalisma+0x528>)
 8006784:	210f      	movs	r1, #15
 8006786:	2002      	movs	r0, #2
 8006788:	f001 f9b6 	bl	8007af8 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 800678c:	4b2f      	ldr	r3, [pc, #188]	; (800684c <checkDemoModCalisma+0x500>)
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	220a      	movs	r2, #10
 8006792:	4938      	ldr	r1, [pc, #224]	; (8006874 <checkDemoModCalisma+0x528>)
 8006794:	4618      	mov	r0, r3
 8006796:	f005 fd01 	bl	800c19c <itoa>
			lcd_print(2,16,snum);
 800679a:	4a36      	ldr	r2, [pc, #216]	; (8006874 <checkDemoModCalisma+0x528>)
 800679c:	2110      	movs	r1, #16
 800679e:	2002      	movs	r0, #2
 80067a0:	f001 f9aa 	bl	8007af8 <lcd_print>
			mesajYazildi=1;
 80067a4:	4b34      	ldr	r3, [pc, #208]	; (8006878 <checkDemoModCalisma+0x52c>)
 80067a6:	2201      	movs	r2, #1
 80067a8:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 80067aa:	e03c      	b.n	8006826 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 80067ac:	4b33      	ldr	r3, [pc, #204]	; (800687c <checkDemoModCalisma+0x530>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d003      	beq.n	80067bc <checkDemoModCalisma+0x470>
 80067b4:	4b2c      	ldr	r3, [pc, #176]	; (8006868 <checkDemoModCalisma+0x51c>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d134      	bne.n	8006826 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80067bc:	2200      	movs	r2, #0
 80067be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067c2:	481b      	ldr	r0, [pc, #108]	; (8006830 <checkDemoModCalisma+0x4e4>)
 80067c4:	f002 fcd5 	bl	8009172 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80067c8:	2200      	movs	r2, #0
 80067ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80067ce:	4818      	ldr	r0, [pc, #96]	; (8006830 <checkDemoModCalisma+0x4e4>)
 80067d0:	f002 fccf 	bl	8009172 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80067d4:	2200      	movs	r2, #0
 80067d6:	2104      	movs	r1, #4
 80067d8:	4815      	ldr	r0, [pc, #84]	; (8006830 <checkDemoModCalisma+0x4e4>)
 80067da:	f002 fcca 	bl	8009172 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80067de:	2200      	movs	r2, #0
 80067e0:	2102      	movs	r1, #2
 80067e2:	4813      	ldr	r0, [pc, #76]	; (8006830 <checkDemoModCalisma+0x4e4>)
 80067e4:	f002 fcc5 	bl	8009172 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80067e8:	2200      	movs	r2, #0
 80067ea:	2101      	movs	r1, #1
 80067ec:	4810      	ldr	r0, [pc, #64]	; (8006830 <checkDemoModCalisma+0x4e4>)
 80067ee:	f002 fcc0 	bl	8009172 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80067f2:	2200      	movs	r2, #0
 80067f4:	2120      	movs	r1, #32
 80067f6:	480d      	ldr	r0, [pc, #52]	; (800682c <checkDemoModCalisma+0x4e0>)
 80067f8:	f002 fcbb 	bl	8009172 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80067fc:	2200      	movs	r2, #0
 80067fe:	2110      	movs	r1, #16
 8006800:	480a      	ldr	r0, [pc, #40]	; (800682c <checkDemoModCalisma+0x4e0>)
 8006802:	f002 fcb6 	bl	8009172 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006806:	2200      	movs	r2, #0
 8006808:	2180      	movs	r1, #128	; 0x80
 800680a:	480b      	ldr	r0, [pc, #44]	; (8006838 <checkDemoModCalisma+0x4ec>)
 800680c:	f002 fcb1 	bl	8009172 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006810:	2200      	movs	r2, #0
 8006812:	2140      	movs	r1, #64	; 0x40
 8006814:	4808      	ldr	r0, [pc, #32]	; (8006838 <checkDemoModCalisma+0x4ec>)
 8006816:	f002 fcac 	bl	8009172 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800681a:	2200      	movs	r2, #0
 800681c:	2120      	movs	r1, #32
 800681e:	4806      	ldr	r0, [pc, #24]	; (8006838 <checkDemoModCalisma+0x4ec>)
 8006820:	f002 fca7 	bl	8009172 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8006824:	e7ff      	b.n	8006826 <checkDemoModCalisma+0x4da>
 8006826:	bf00      	nop
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	40011000 	.word	0x40011000
 8006830:	40010c00 	.word	0x40010c00
 8006834:	20000275 	.word	0x20000275
 8006838:	40010800 	.word	0x40010800
 800683c:	200001f8 	.word	0x200001f8
 8006840:	20000208 	.word	0x20000208
 8006844:	20000274 	.word	0x20000274
 8006848:	2000025a 	.word	0x2000025a
 800684c:	20000219 	.word	0x20000219
 8006850:	2000021a 	.word	0x2000021a
 8006854:	20000000 	.word	0x20000000
 8006858:	20000001 	.word	0x20000001
 800685c:	2000021b 	.word	0x2000021b
 8006860:	20000120 	.word	0x20000120
 8006864:	20000248 	.word	0x20000248
 8006868:	20000239 	.word	0x20000239
 800686c:	0800d9c4 	.word	0x0800d9c4
 8006870:	0800d9d0 	.word	0x0800d9d0
 8006874:	20000190 	.word	0x20000190
 8006878:	20000250 	.word	0x20000250
 800687c:	2000023a 	.word	0x2000023a

08006880 <mainLoop>:

void mainLoop() {
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006886:	f7fe f923 	bl	8004ad0 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 800688a:	2101      	movs	r1, #1
 800688c:	48ac      	ldr	r0, [pc, #688]	; (8006b40 <mainLoop+0x2c0>)
 800688e:	f002 fc59 	bl	8009144 <HAL_GPIO_ReadPin>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d136      	bne.n	8006906 <mainLoop+0x86>
 8006898:	2108      	movs	r1, #8
 800689a:	48aa      	ldr	r0, [pc, #680]	; (8006b44 <mainLoop+0x2c4>)
 800689c:	f002 fc52 	bl	8009144 <HAL_GPIO_ReadPin>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d12f      	bne.n	8006906 <mainLoop+0x86>
 80068a6:	2102      	movs	r1, #2
 80068a8:	48a5      	ldr	r0, [pc, #660]	; (8006b40 <mainLoop+0x2c0>)
 80068aa:	f002 fc4b 	bl	8009144 <HAL_GPIO_ReadPin>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d128      	bne.n	8006906 <mainLoop+0x86>
 80068b4:	2104      	movs	r1, #4
 80068b6:	48a2      	ldr	r0, [pc, #648]	; (8006b40 <mainLoop+0x2c0>)
 80068b8:	f002 fc44 	bl	8009144 <HAL_GPIO_ReadPin>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d121      	bne.n	8006906 <mainLoop+0x86>
 80068c2:	2108      	movs	r1, #8
 80068c4:	489e      	ldr	r0, [pc, #632]	; (8006b40 <mainLoop+0x2c0>)
 80068c6:	f002 fc3d 	bl	8009144 <HAL_GPIO_ReadPin>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d11a      	bne.n	8006906 <mainLoop+0x86>
 80068d0:	2180      	movs	r1, #128	; 0x80
 80068d2:	489c      	ldr	r0, [pc, #624]	; (8006b44 <mainLoop+0x2c4>)
 80068d4:	f002 fc36 	bl	8009144 <HAL_GPIO_ReadPin>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d113      	bne.n	8006906 <mainLoop+0x86>
 80068de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068e2:	4898      	ldr	r0, [pc, #608]	; (8006b44 <mainLoop+0x2c4>)
 80068e4:	f002 fc2e 	bl	8009144 <HAL_GPIO_ReadPin>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d10b      	bne.n	8006906 <mainLoop+0x86>
 80068ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068f2:	4894      	ldr	r0, [pc, #592]	; (8006b44 <mainLoop+0x2c4>)
 80068f4:	f002 fc26 	bl	8009144 <HAL_GPIO_ReadPin>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d103      	bne.n	8006906 <mainLoop+0x86>
			butonKontrol=0;
 80068fe:	4b92      	ldr	r3, [pc, #584]	; (8006b48 <mainLoop+0x2c8>)
 8006900:	2200      	movs	r2, #0
 8006902:	701a      	strb	r2, [r3, #0]
 8006904:	e003      	b.n	800690e <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8006906:	4b91      	ldr	r3, [pc, #580]	; (8006b4c <mainLoop+0x2cc>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a91      	ldr	r2, [pc, #580]	; (8006b50 <mainLoop+0x2d0>)
 800690c:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 800690e:	4b91      	ldr	r3, [pc, #580]	; (8006b54 <mainLoop+0x2d4>)
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d03a      	beq.n	800698c <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8006916:	bf00      	nop
 8006918:	488f      	ldr	r0, [pc, #572]	; (8006b58 <mainLoop+0x2d8>)
 800691a:	f003 fa3c 	bl	8009d96 <HAL_I2C_GetError>
 800691e:	4603      	mov	r3, r0
 8006920:	2b04      	cmp	r3, #4
 8006922:	d0f9      	beq.n	8006918 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8006924:	bf00      	nop
 8006926:	488c      	ldr	r0, [pc, #560]	; (8006b58 <mainLoop+0x2d8>)
 8006928:	f003 fa28 	bl	8009d7c <HAL_I2C_GetState>
 800692c:	4603      	mov	r3, r0
 800692e:	2b20      	cmp	r3, #32
 8006930:	d1f9      	bne.n	8006926 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006932:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006936:	9302      	str	r3, [sp, #8]
 8006938:	236e      	movs	r3, #110	; 0x6e
 800693a:	9301      	str	r3, [sp, #4]
 800693c:	4b87      	ldr	r3, [pc, #540]	; (8006b5c <mainLoop+0x2dc>)
 800693e:	9300      	str	r3, [sp, #0]
 8006940:	236e      	movs	r3, #110	; 0x6e
 8006942:	2200      	movs	r2, #0
 8006944:	21a0      	movs	r1, #160	; 0xa0
 8006946:	4884      	ldr	r0, [pc, #528]	; (8006b58 <mainLoop+0x2d8>)
 8006948:	f002 feb6 	bl	80096b8 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 800694c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006950:	f001 fe28 	bl	80085a4 <HAL_Delay>

		  hafizaYaz=0;
 8006954:	4b7f      	ldr	r3, [pc, #508]	; (8006b54 <mainLoop+0x2d4>)
 8006956:	2200      	movs	r2, #0
 8006958:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 800695a:	4b81      	ldr	r3, [pc, #516]	; (8006b60 <mainLoop+0x2e0>)
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d105      	bne.n	800696e <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8006962:	4a80      	ldr	r2, [pc, #512]	; (8006b64 <mainLoop+0x2e4>)
 8006964:	2101      	movs	r1, #1
 8006966:	2002      	movs	r0, #2
 8006968:	f001 f8c6 	bl	8007af8 <lcd_print>
 800696c:	e008      	b.n	8006980 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 800696e:	4b7c      	ldr	r3, [pc, #496]	; (8006b60 <mainLoop+0x2e0>)
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	2b01      	cmp	r3, #1
 8006974:	d104      	bne.n	8006980 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8006976:	4a7c      	ldr	r2, [pc, #496]	; (8006b68 <mainLoop+0x2e8>)
 8006978:	2101      	movs	r1, #1
 800697a:	2002      	movs	r0, #2
 800697c:	f001 f8bc 	bl	8007af8 <lcd_print>
		  }

		  HAL_Delay(1000);
 8006980:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006984:	f001 fe0e 	bl	80085a4 <HAL_Delay>
		  lcd_clear();
 8006988:	f001 f8e2 	bl	8007b50 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 800698c:	4b77      	ldr	r3, [pc, #476]	; (8006b6c <mainLoop+0x2ec>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	f083 0301 	eor.w	r3, r3, #1
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d06d      	beq.n	8006a76 <mainLoop+0x1f6>
 800699a:	486f      	ldr	r0, [pc, #444]	; (8006b58 <mainLoop+0x2d8>)
 800699c:	f003 f9ee 	bl	8009d7c <HAL_I2C_GetState>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	d167      	bne.n	8006a76 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 80069a6:	4b72      	ldr	r3, [pc, #456]	; (8006b70 <mainLoop+0x2f0>)
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	f083 0301 	eor.w	r3, r3, #1
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d044      	beq.n	8006a3e <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 80069b4:	4a6f      	ldr	r2, [pc, #444]	; (8006b74 <mainLoop+0x2f4>)
 80069b6:	2101      	movs	r1, #1
 80069b8:	2001      	movs	r0, #1
 80069ba:	f001 f89d 	bl	8007af8 <lcd_print>
			  if(dilSecim==0) {
 80069be:	4b68      	ldr	r3, [pc, #416]	; (8006b60 <mainLoop+0x2e0>)
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d105      	bne.n	80069d2 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 80069c6:	4a6c      	ldr	r2, [pc, #432]	; (8006b78 <mainLoop+0x2f8>)
 80069c8:	2101      	movs	r1, #1
 80069ca:	2002      	movs	r0, #2
 80069cc:	f001 f894 	bl	8007af8 <lcd_print>
 80069d0:	e008      	b.n	80069e4 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 80069d2:	4b63      	ldr	r3, [pc, #396]	; (8006b60 <mainLoop+0x2e0>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d104      	bne.n	80069e4 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 80069da:	4a68      	ldr	r2, [pc, #416]	; (8006b7c <mainLoop+0x2fc>)
 80069dc:	2101      	movs	r1, #1
 80069de:	2002      	movs	r0, #2
 80069e0:	f001 f88a 	bl	8007af8 <lcd_print>
			  }
			  HAL_Delay(1000);
 80069e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80069e8:	f001 fddc 	bl	80085a4 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80069ec:	bf00      	nop
 80069ee:	485a      	ldr	r0, [pc, #360]	; (8006b58 <mainLoop+0x2d8>)
 80069f0:	f003 f9d1 	bl	8009d96 <HAL_I2C_GetError>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d0f9      	beq.n	80069ee <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80069fa:	e003      	b.n	8006a04 <mainLoop+0x184>
				  HAL_Delay(1000);
 80069fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a00:	f001 fdd0 	bl	80085a4 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8006a04:	4854      	ldr	r0, [pc, #336]	; (8006b58 <mainLoop+0x2d8>)
 8006a06:	f003 f9b9 	bl	8009d7c <HAL_I2C_GetState>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b20      	cmp	r3, #32
 8006a0e:	d1f5      	bne.n	80069fc <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 8006a10:	4b53      	ldr	r3, [pc, #332]	; (8006b60 <mainLoop+0x2e0>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d105      	bne.n	8006a24 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8006a18:	4a59      	ldr	r2, [pc, #356]	; (8006b80 <mainLoop+0x300>)
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	2002      	movs	r0, #2
 8006a1e:	f001 f86b 	bl	8007af8 <lcd_print>
 8006a22:	e008      	b.n	8006a36 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8006a24:	4b4e      	ldr	r3, [pc, #312]	; (8006b60 <mainLoop+0x2e0>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d104      	bne.n	8006a36 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8006a2c:	4a55      	ldr	r2, [pc, #340]	; (8006b84 <mainLoop+0x304>)
 8006a2e:	2101      	movs	r1, #1
 8006a30:	2002      	movs	r0, #2
 8006a32:	f001 f861 	bl	8007af8 <lcd_print>
			  }

			  ilkOkuma=1;
 8006a36:	4b4e      	ldr	r3, [pc, #312]	; (8006b70 <mainLoop+0x2f0>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	701a      	strb	r2, [r3, #0]
 8006a3c:	e014      	b.n	8006a68 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 8006a3e:	4b48      	ldr	r3, [pc, #288]	; (8006b60 <mainLoop+0x2e0>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d105      	bne.n	8006a52 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8006a46:	4a50      	ldr	r2, [pc, #320]	; (8006b88 <mainLoop+0x308>)
 8006a48:	2101      	movs	r1, #1
 8006a4a:	2002      	movs	r0, #2
 8006a4c:	f001 f854 	bl	8007af8 <lcd_print>
 8006a50:	e008      	b.n	8006a64 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 8006a52:	4b43      	ldr	r3, [pc, #268]	; (8006b60 <mainLoop+0x2e0>)
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d104      	bne.n	8006a64 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8006a5a:	4a4c      	ldr	r2, [pc, #304]	; (8006b8c <mainLoop+0x30c>)
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	2002      	movs	r0, #2
 8006a60:	f001 f84a 	bl	8007af8 <lcd_print>
			  }
			  lcd_clear();
 8006a64:	f001 f874 	bl	8007b50 <lcd_clear>
		  }

		  lcd_clear();
 8006a68:	f001 f872 	bl	8007b50 <lcd_clear>

		  eepromKontrol();
 8006a6c:	f7f9 fbe2 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8006a70:	4b3e      	ldr	r3, [pc, #248]	; (8006b6c <mainLoop+0x2ec>)
 8006a72:	2201      	movs	r2, #1
 8006a74:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8006a76:	4b46      	ldr	r3, [pc, #280]	; (8006b90 <mainLoop+0x310>)
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d11c      	bne.n	8006ab8 <mainLoop+0x238>
 8006a7e:	4b45      	ldr	r3, [pc, #276]	; (8006b94 <mainLoop+0x314>)
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	f083 0301 	eor.w	r3, r3, #1
 8006a86:	b2db      	uxtb	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d015      	beq.n	8006ab8 <mainLoop+0x238>
 8006a8c:	4b42      	ldr	r3, [pc, #264]	; (8006b98 <mainLoop+0x318>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d111      	bne.n	8006ab8 <mainLoop+0x238>
			lcd_clear();
 8006a94:	f001 f85c 	bl	8007b50 <lcd_clear>
			HAL_Delay(10);
 8006a98:	200a      	movs	r0, #10
 8006a9a:	f001 fd83 	bl	80085a4 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8006a9e:	4a3f      	ldr	r2, [pc, #252]	; (8006b9c <mainLoop+0x31c>)
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	2001      	movs	r0, #1
 8006aa4:	f001 f828 	bl	8007af8 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8006aa8:	4a3d      	ldr	r2, [pc, #244]	; (8006ba0 <mainLoop+0x320>)
 8006aaa:	2101      	movs	r1, #1
 8006aac:	2002      	movs	r0, #2
 8006aae:	f001 f823 	bl	8007af8 <lcd_print>
			mesajYazildi=1;
 8006ab2:	4b38      	ldr	r3, [pc, #224]	; (8006b94 <mainLoop+0x314>)
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006ab8:	4b35      	ldr	r3, [pc, #212]	; (8006b90 <mainLoop+0x310>)
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d112      	bne.n	8006ae6 <mainLoop+0x266>
 8006ac0:	2102      	movs	r1, #2
 8006ac2:	481f      	ldr	r0, [pc, #124]	; (8006b40 <mainLoop+0x2c0>)
 8006ac4:	f002 fb3e 	bl	8009144 <HAL_GPIO_ReadPin>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d10b      	bne.n	8006ae6 <mainLoop+0x266>
 8006ace:	2104      	movs	r1, #4
 8006ad0:	481b      	ldr	r0, [pc, #108]	; (8006b40 <mainLoop+0x2c0>)
 8006ad2:	f002 fb37 	bl	8009144 <HAL_GPIO_ReadPin>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d104      	bne.n	8006ae6 <mainLoop+0x266>
			menuGiris=1;
 8006adc:	4b2c      	ldr	r3, [pc, #176]	; (8006b90 <mainLoop+0x310>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006ae2:	f001 f835 	bl	8007b50 <lcd_clear>
		}

		if(menuGiris==1) {
 8006ae6:	4b2a      	ldr	r3, [pc, #168]	; (8006b90 <mainLoop+0x310>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d101      	bne.n	8006af2 <mainLoop+0x272>
			menu();
 8006aee:	f7fa fb87 	bl	8001200 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006af2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006af6:	4813      	ldr	r0, [pc, #76]	; (8006b44 <mainLoop+0x2c4>)
 8006af8:	f002 fb53 	bl	80091a2 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006afc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b00:	4828      	ldr	r0, [pc, #160]	; (8006ba4 <mainLoop+0x324>)
 8006b02:	f002 fb1f 	bl	8009144 <HAL_GPIO_ReadPin>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10a      	bne.n	8006b22 <mainLoop+0x2a2>
 8006b0c:	4b26      	ldr	r3, [pc, #152]	; (8006ba8 <mainLoop+0x328>)
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	f083 0301 	eor.w	r3, r3, #1
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d003      	beq.n	8006b22 <mainLoop+0x2a2>
			stopVar=1;
 8006b1a:	4b24      	ldr	r3, [pc, #144]	; (8006bac <mainLoop+0x32c>)
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	e002      	b.n	8006b28 <mainLoop+0x2a8>
		} else {
			stopVar=0;
 8006b22:	4b22      	ldr	r3, [pc, #136]	; (8006bac <mainLoop+0x32c>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8006b28:	f7fd ffe8 	bl	8004afc <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8006b2c:	f7fe f81a 	bl	8004b64 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8006b30:	f7fe f85e 	bl	8004bf0 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8006b34:	f7fe f8ae 	bl	8004c94 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8006b38:	f7ff fc08 	bl	800634c <checkDemoModCalisma>
		checkLCDBacklight();
 8006b3c:	e6a3      	b.n	8006886 <mainLoop+0x6>
 8006b3e:	bf00      	nop
 8006b40:	40010800 	.word	0x40010800
 8006b44:	40011000 	.word	0x40011000
 8006b48:	2000024b 	.word	0x2000024b
 8006b4c:	200001f8 	.word	0x200001f8
 8006b50:	20000214 	.word	0x20000214
 8006b54:	20000248 	.word	0x20000248
 8006b58:	200002ac 	.word	0x200002ac
 8006b5c:	20000120 	.word	0x20000120
 8006b60:	2000023d 	.word	0x2000023d
 8006b64:	0800d9e4 	.word	0x0800d9e4
 8006b68:	0800d9f8 	.word	0x0800d9f8
 8006b6c:	20000249 	.word	0x20000249
 8006b70:	2000024a 	.word	0x2000024a
 8006b74:	0800da0c 	.word	0x0800da0c
 8006b78:	0800da20 	.word	0x0800da20
 8006b7c:	0800da34 	.word	0x0800da34
 8006b80:	0800da48 	.word	0x0800da48
 8006b84:	0800da5c 	.word	0x0800da5c
 8006b88:	0800da70 	.word	0x0800da70
 8006b8c:	0800da84 	.word	0x0800da84
 8006b90:	20000239 	.word	0x20000239
 8006b94:	20000250 	.word	0x20000250
 8006b98:	2000023a 	.word	0x2000023a
 8006b9c:	0800da98 	.word	0x0800da98
 8006ba0:	0800daac 	.word	0x0800daac
 8006ba4:	40010c00 	.word	0x40010c00
 8006ba8:	20000271 	.word	0x20000271
 8006bac:	2000026e 	.word	0x2000026e

08006bb0 <takeMachineID>:
#include "ESP8266.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "IoTMenu.h"

void takeMachineID() {
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b088      	sub	sp, #32
 8006bb4:	af04      	add	r7, sp, #16
	mainSection:
	lcd_cursor(1);
 8006bb6:	2001      	movs	r0, #1
 8006bb8:	f000 fffc 	bl	8007bb4 <lcd_cursor>

    int cursorPosition = 3;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	60fb      	str	r3, [r7, #12]
    int machineIDLoc = 0;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60bb      	str	r3, [r7, #8]
    int writeLoc = 5;
 8006bc4:	2305      	movs	r3, #5
 8006bc6:	607b      	str	r3, [r7, #4]

    memset(machineID, 0, sizeof(machineID));
 8006bc8:	220c      	movs	r2, #12
 8006bca:	2100      	movs	r1, #0
 8006bcc:	489b      	ldr	r0, [pc, #620]	; (8006e3c <takeMachineID+0x28c>)
 8006bce:	f005 fc40 	bl	800c452 <memset>
    HAL_Delay(100);
 8006bd2:	2064      	movs	r0, #100	; 0x64
 8006bd4:	f001 fce6 	bl	80085a4 <HAL_Delay>

    printTemplate(1, 0);
 8006bd8:	2100      	movs	r1, #0
 8006bda:	2001      	movs	r0, #1
 8006bdc:	f7fa f8aa 	bl	8000d34 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006be0:	2108      	movs	r1, #8
 8006be2:	4897      	ldr	r0, [pc, #604]	; (8006e40 <takeMachineID+0x290>)
 8006be4:	f002 faae 	bl	8009144 <HAL_GPIO_ReadPin>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d139      	bne.n	8006c62 <takeMachineID+0xb2>
        	lcd_cursor(0);
 8006bee:	2000      	movs	r0, #0
 8006bf0:	f000 ffe0 	bl	8007bb4 <lcd_cursor>

        	if(strlen(machineID) != machineIDCharacterLimit) {
 8006bf4:	4891      	ldr	r0, [pc, #580]	; (8006e3c <takeMachineID+0x28c>)
 8006bf6:	f7f9 fb15 	bl	8000224 <strlen>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b0c      	cmp	r3, #12
 8006bfe:	d010      	beq.n	8006c22 <takeMachineID+0x72>
        		lcd_clear();
 8006c00:	f000 ffa6 	bl	8007b50 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8006c04:	4a8f      	ldr	r2, [pc, #572]	; (8006e44 <takeMachineID+0x294>)
 8006c06:	2101      	movs	r1, #1
 8006c08:	2001      	movs	r0, #1
 8006c0a:	f000 ff75 	bl	8007af8 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8006c0e:	4a8e      	ldr	r2, [pc, #568]	; (8006e48 <takeMachineID+0x298>)
 8006c10:	2101      	movs	r1, #1
 8006c12:	2002      	movs	r0, #2
 8006c14:	f000 ff70 	bl	8007af8 <lcd_print>
        		HAL_Delay(1200);
 8006c18:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006c1c:	f001 fcc2 	bl	80085a4 <HAL_Delay>
        		goto mainSection;
 8006c20:	e7c9      	b.n	8006bb6 <takeMachineID+0x6>
        	}

        	memcpy(&eepromData[idStartPos], machineID, 12);
 8006c22:	4b8a      	ldr	r3, [pc, #552]	; (8006e4c <takeMachineID+0x29c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a8a      	ldr	r2, [pc, #552]	; (8006e50 <takeMachineID+0x2a0>)
 8006c28:	4413      	add	r3, r2
 8006c2a:	4a84      	ldr	r2, [pc, #528]	; (8006e3c <takeMachineID+0x28c>)
 8006c2c:	6810      	ldr	r0, [r2, #0]
 8006c2e:	6851      	ldr	r1, [r2, #4]
 8006c30:	6892      	ldr	r2, [r2, #8]
 8006c32:	6018      	str	r0, [r3, #0]
 8006c34:	6059      	str	r1, [r3, #4]
 8006c36:	609a      	str	r2, [r3, #8]
        	HAL_Delay(200);
 8006c38:	20c8      	movs	r0, #200	; 0xc8
 8006c3a:	f001 fcb3 	bl	80085a4 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006c3e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006c42:	9302      	str	r3, [sp, #8]
 8006c44:	236e      	movs	r3, #110	; 0x6e
 8006c46:	9301      	str	r3, [sp, #4]
 8006c48:	4b81      	ldr	r3, [pc, #516]	; (8006e50 <takeMachineID+0x2a0>)
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	236e      	movs	r3, #110	; 0x6e
 8006c4e:	2200      	movs	r2, #0
 8006c50:	21a0      	movs	r1, #160	; 0xa0
 8006c52:	4880      	ldr	r0, [pc, #512]	; (8006e54 <takeMachineID+0x2a4>)
 8006c54:	f002 fd30 	bl	80096b8 <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8006c58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006c5c:	f001 fca2 	bl	80085a4 <HAL_Delay>

            break;
 8006c60:	e0e7      	b.n	8006e32 <takeMachineID+0x282>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006c62:	2101      	movs	r1, #1
 8006c64:	4876      	ldr	r0, [pc, #472]	; (8006e40 <takeMachineID+0x290>)
 8006c66:	f002 fa6d 	bl	8009144 <HAL_GPIO_ReadPin>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d111      	bne.n	8006c94 <takeMachineID+0xe4>
        	if(cursorPosition == 7) {
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2b07      	cmp	r3, #7
 8006c74:	d102      	bne.n	8006c7c <takeMachineID+0xcc>
        		cursorPosition = 10;
 8006c76:	230a      	movs	r3, #10
 8006c78:	60fb      	str	r3, [r7, #12]
 8006c7a:	e008      	b.n	8006c8e <takeMachineID+0xde>
        	} else if (cursorPosition == 14) {
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2b0e      	cmp	r3, #14
 8006c80:	d102      	bne.n	8006c88 <takeMachineID+0xd8>
                cursorPosition = 3;
 8006c82:	2303      	movs	r3, #3
 8006c84:	60fb      	str	r3, [r7, #12]
 8006c86:	e002      	b.n	8006c8e <takeMachineID+0xde>
            } else {
            	cursorPosition++;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	60fb      	str	r3, [r7, #12]
            }

        	HAL_Delay(150);
 8006c8e:	2096      	movs	r0, #150	; 0x96
 8006c90:	f001 fc88 	bl	80085a4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006c94:	2108      	movs	r1, #8
 8006c96:	4870      	ldr	r0, [pc, #448]	; (8006e58 <takeMachineID+0x2a8>)
 8006c98:	f002 fa54 	bl	8009144 <HAL_GPIO_ReadPin>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d111      	bne.n	8006cc6 <takeMachineID+0x116>
            if (cursorPosition == 3) {
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d102      	bne.n	8006cae <takeMachineID+0xfe>
                cursorPosition = 14;
 8006ca8:	230e      	movs	r3, #14
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	e008      	b.n	8006cc0 <takeMachineID+0x110>
            } else if(cursorPosition == 10) {
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b0a      	cmp	r3, #10
 8006cb2:	d102      	bne.n	8006cba <takeMachineID+0x10a>
            	cursorPosition = 7;
 8006cb4:	2307      	movs	r3, #7
 8006cb6:	60fb      	str	r3, [r7, #12]
 8006cb8:	e002      	b.n	8006cc0 <takeMachineID+0x110>
            } else {
            	cursorPosition--;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8006cc0:	2096      	movs	r0, #150	; 0x96
 8006cc2:	f001 fc6f 	bl	80085a4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8006cc6:	2102      	movs	r1, #2
 8006cc8:	485d      	ldr	r0, [pc, #372]	; (8006e40 <takeMachineID+0x290>)
 8006cca:	f002 fa3b 	bl	8009144 <HAL_GPIO_ReadPin>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d171      	bne.n	8006db8 <takeMachineID+0x208>
        	if(cursorPosition == 3) {
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b03      	cmp	r3, #3
 8006cd8:	d105      	bne.n	8006ce6 <takeMachineID+0x136>
        		machineID[machineIDLoc] = '0';
 8006cda:	4a58      	ldr	r2, [pc, #352]	; (8006e3c <takeMachineID+0x28c>)
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4413      	add	r3, r2
 8006ce0:	2230      	movs	r2, #48	; 0x30
 8006ce2:	701a      	strb	r2, [r3, #0]
 8006ce4:	e04f      	b.n	8006d86 <takeMachineID+0x1d6>
        	} else if(cursorPosition == 4) {
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2b04      	cmp	r3, #4
 8006cea:	d105      	bne.n	8006cf8 <takeMachineID+0x148>
        		machineID[machineIDLoc] = '1';
 8006cec:	4a53      	ldr	r2, [pc, #332]	; (8006e3c <takeMachineID+0x28c>)
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	2231      	movs	r2, #49	; 0x31
 8006cf4:	701a      	strb	r2, [r3, #0]
 8006cf6:	e046      	b.n	8006d86 <takeMachineID+0x1d6>
        	} else if(cursorPosition == 5) {
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2b05      	cmp	r3, #5
 8006cfc:	d105      	bne.n	8006d0a <takeMachineID+0x15a>
        		machineID[machineIDLoc] = '2';
 8006cfe:	4a4f      	ldr	r2, [pc, #316]	; (8006e3c <takeMachineID+0x28c>)
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	4413      	add	r3, r2
 8006d04:	2232      	movs	r2, #50	; 0x32
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	e03d      	b.n	8006d86 <takeMachineID+0x1d6>
        	} else if(cursorPosition == 6) {
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2b06      	cmp	r3, #6
 8006d0e:	d105      	bne.n	8006d1c <takeMachineID+0x16c>
        		machineID[machineIDLoc] = '3';
 8006d10:	4a4a      	ldr	r2, [pc, #296]	; (8006e3c <takeMachineID+0x28c>)
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	4413      	add	r3, r2
 8006d16:	2233      	movs	r2, #51	; 0x33
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	e034      	b.n	8006d86 <takeMachineID+0x1d6>
        	} else if(cursorPosition == 7) {
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2b07      	cmp	r3, #7
 8006d20:	d105      	bne.n	8006d2e <takeMachineID+0x17e>
        		machineID[machineIDLoc] = '4';
 8006d22:	4a46      	ldr	r2, [pc, #280]	; (8006e3c <takeMachineID+0x28c>)
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	4413      	add	r3, r2
 8006d28:	2234      	movs	r2, #52	; 0x34
 8006d2a:	701a      	strb	r2, [r3, #0]
 8006d2c:	e02b      	b.n	8006d86 <takeMachineID+0x1d6>
        	} else if(cursorPosition == 10) {
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b0a      	cmp	r3, #10
 8006d32:	d105      	bne.n	8006d40 <takeMachineID+0x190>
        		machineID[machineIDLoc] = '5';
 8006d34:	4a41      	ldr	r2, [pc, #260]	; (8006e3c <takeMachineID+0x28c>)
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	4413      	add	r3, r2
 8006d3a:	2235      	movs	r2, #53	; 0x35
 8006d3c:	701a      	strb	r2, [r3, #0]
 8006d3e:	e022      	b.n	8006d86 <takeMachineID+0x1d6>
        	} else if(cursorPosition == 11) {
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2b0b      	cmp	r3, #11
 8006d44:	d105      	bne.n	8006d52 <takeMachineID+0x1a2>
        		machineID[machineIDLoc] = '6';
 8006d46:	4a3d      	ldr	r2, [pc, #244]	; (8006e3c <takeMachineID+0x28c>)
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	2236      	movs	r2, #54	; 0x36
 8006d4e:	701a      	strb	r2, [r3, #0]
 8006d50:	e019      	b.n	8006d86 <takeMachineID+0x1d6>
        	} else if(cursorPosition == 12) {
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b0c      	cmp	r3, #12
 8006d56:	d105      	bne.n	8006d64 <takeMachineID+0x1b4>
        		machineID[machineIDLoc] = '7';
 8006d58:	4a38      	ldr	r2, [pc, #224]	; (8006e3c <takeMachineID+0x28c>)
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	2237      	movs	r2, #55	; 0x37
 8006d60:	701a      	strb	r2, [r3, #0]
 8006d62:	e010      	b.n	8006d86 <takeMachineID+0x1d6>
        	} else if(cursorPosition == 13) {
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2b0d      	cmp	r3, #13
 8006d68:	d105      	bne.n	8006d76 <takeMachineID+0x1c6>
        		machineID[machineIDLoc] = '8';
 8006d6a:	4a34      	ldr	r2, [pc, #208]	; (8006e3c <takeMachineID+0x28c>)
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	4413      	add	r3, r2
 8006d70:	2238      	movs	r2, #56	; 0x38
 8006d72:	701a      	strb	r2, [r3, #0]
 8006d74:	e007      	b.n	8006d86 <takeMachineID+0x1d6>
        	} else if(cursorPosition == 14) {
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2b0e      	cmp	r3, #14
 8006d7a:	d104      	bne.n	8006d86 <takeMachineID+0x1d6>
        		machineID[machineIDLoc] = '9';
 8006d7c:	4a2f      	ldr	r2, [pc, #188]	; (8006e3c <takeMachineID+0x28c>)
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	4413      	add	r3, r2
 8006d82:	2239      	movs	r2, #57	; 0x39
 8006d84:	701a      	strb	r2, [r3, #0]
        	}

        	if(machineIDLoc == machineIDCharacterLimit - 1) {
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b0b      	cmp	r3, #11
 8006d8a:	d102      	bne.n	8006d92 <takeMachineID+0x1e2>
        		machineID[machineIDCharacterLimit] = '\0';
 8006d8c:	4b2b      	ldr	r3, [pc, #172]	; (8006e3c <takeMachineID+0x28c>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	731a      	strb	r2, [r3, #12]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	b2d9      	uxtb	r1, r3
 8006d96:	4a29      	ldr	r2, [pc, #164]	; (8006e3c <takeMachineID+0x28c>)
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	781b      	ldrb	r3, [r3, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	2001      	movs	r0, #1
 8006da2:	f000 febe 	bl	8007b22 <lcd_print_char>

        	writeLoc++;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3301      	adds	r3, #1
 8006daa:	607b      	str	r3, [r7, #4]
        	machineIDLoc++;
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	3301      	adds	r3, #1
 8006db0:	60bb      	str	r3, [r7, #8]

        	HAL_Delay(150);
 8006db2:	2096      	movs	r0, #150	; 0x96
 8006db4:	f001 fbf6 	bl	80085a4 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8006db8:	2104      	movs	r1, #4
 8006dba:	4821      	ldr	r0, [pc, #132]	; (8006e40 <takeMachineID+0x290>)
 8006dbc:	f002 f9c2 	bl	8009144 <HAL_GPIO_ReadPin>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d12e      	bne.n	8006e24 <takeMachineID+0x274>
            if(strlen(machineID) >= 1) {
 8006dc6:	4b1d      	ldr	r3, [pc, #116]	; (8006e3c <takeMachineID+0x28c>)
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d027      	beq.n	8006e1e <takeMachineID+0x26e>

                machineID[machineIDLoc] = '\0';
 8006dce:	4a1b      	ldr	r2, [pc, #108]	; (8006e3c <takeMachineID+0x28c>)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	3304      	adds	r3, #4
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	4619      	mov	r1, r3
 8006de2:	2001      	movs	r0, #1
 8006de4:	f000 febe 	bl	8007b64 <lcd_delete_char>
                HAL_Delay(50);
 8006de8:	2032      	movs	r0, #50	; 0x32
 8006dea:	f001 fbdb 	bl	80085a4 <HAL_Delay>

                if(writeLoc > 5) {
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b05      	cmp	r3, #5
 8006df2:	dd03      	ble.n	8006dfc <takeMachineID+0x24c>
                	writeLoc--;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	3b01      	subs	r3, #1
 8006df8:	607b      	str	r3, [r7, #4]
 8006dfa:	e004      	b.n	8006e06 <takeMachineID+0x256>
                } else if(writeLoc < 5) {
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2b04      	cmp	r3, #4
 8006e00:	dc01      	bgt.n	8006e06 <takeMachineID+0x256>
                	writeLoc = 5;
 8006e02:	2305      	movs	r3, #5
 8006e04:	607b      	str	r3, [r7, #4]
                }

                if(machineIDLoc > 0) {
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	dd03      	ble.n	8006e14 <takeMachineID+0x264>
                	machineIDLoc--;
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	60bb      	str	r3, [r7, #8]
 8006e12:	e004      	b.n	8006e1e <takeMachineID+0x26e>
                } else if(machineIDLoc < 0) {
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	da01      	bge.n	8006e1e <takeMachineID+0x26e>
                	machineIDLoc = 0;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60bb      	str	r3, [r7, #8]
                }
            }

            HAL_Delay(150);
 8006e1e:	2096      	movs	r0, #150	; 0x96
 8006e20:	f001 fbc0 	bl	80085a4 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	b2db      	uxtb	r3, r3
 8006e28:	4619      	mov	r1, r3
 8006e2a:	2002      	movs	r0, #2
 8006e2c:	f000 fe45 	bl	8007aba <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006e30:	e6d6      	b.n	8006be0 <takeMachineID+0x30>
    }
}
 8006e32:	bf00      	nop
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20000198 	.word	0x20000198
 8006e40:	40010800 	.word	0x40010800
 8006e44:	0800dac0 	.word	0x0800dac0
 8006e48:	0800dad4 	.word	0x0800dad4
 8006e4c:	20000004 	.word	0x20000004
 8006e50:	20000120 	.word	0x20000120
 8006e54:	200002ac 	.word	0x200002ac
 8006e58:	40011000 	.word	0x40011000

08006e5c <takeWifiSSID>:

void takeWifiSSID() {
 8006e5c:	b5b0      	push	{r4, r5, r7, lr}
 8006e5e:	b08a      	sub	sp, #40	; 0x28
 8006e60:	af04      	add	r7, sp, #16
	mainSSIDSection:
    lcd_cursor(1);
 8006e62:	2001      	movs	r0, #1
 8006e64:	f000 fea6 	bl	8007bb4 <lcd_cursor>

    memset(wifiSSID, 0, sizeof(wifiSSID));
 8006e68:	2214      	movs	r2, #20
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	48ac      	ldr	r0, [pc, #688]	; (8007120 <takeWifiSSID+0x2c4>)
 8006e6e:	f005 faf0 	bl	800c452 <memset>
    HAL_Delay(100);
 8006e72:	2064      	movs	r0, #100	; 0x64
 8006e74:	f001 fb96 	bl	80085a4 <HAL_Delay>

    int realCharPos = 1;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	617b      	str	r3, [r7, #20]
    int cursorPosition = 1;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	613b      	str	r3, [r7, #16]
    int page = 1;
 8006e80:	2301      	movs	r3, #1
 8006e82:	60fb      	str	r3, [r7, #12]
    int wifiNameLoc = 0;
 8006e84:	2300      	movs	r3, #0
 8006e86:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8006e88:	2307      	movs	r3, #7
 8006e8a:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	2002      	movs	r0, #2
 8006e90:	f7f9 ff50 	bl	8000d34 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8006e94:	2108      	movs	r1, #8
 8006e96:	48a3      	ldr	r0, [pc, #652]	; (8007124 <takeWifiSSID+0x2c8>)
 8006e98:	f002 f954 	bl	8009144 <HAL_GPIO_ReadPin>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d13d      	bne.n	8006f1e <takeWifiSSID+0xc2>
            lcd_cursor(0);
 8006ea2:	2000      	movs	r0, #0
 8006ea4:	f000 fe86 	bl	8007bb4 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8006ea8:	489d      	ldr	r0, [pc, #628]	; (8007120 <takeWifiSSID+0x2c4>)
 8006eaa:	f7f9 f9bb 	bl	8000224 <strlen>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b14      	cmp	r3, #20
 8006eb2:	d910      	bls.n	8006ed6 <takeWifiSSID+0x7a>
                lcd_clear();
 8006eb4:	f000 fe4c 	bl	8007b50 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8006eb8:	4a9b      	ldr	r2, [pc, #620]	; (8007128 <takeWifiSSID+0x2cc>)
 8006eba:	2101      	movs	r1, #1
 8006ebc:	2001      	movs	r0, #1
 8006ebe:	f000 fe1b 	bl	8007af8 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8006ec2:	4a9a      	ldr	r2, [pc, #616]	; (800712c <takeWifiSSID+0x2d0>)
 8006ec4:	2101      	movs	r1, #1
 8006ec6:	2002      	movs	r0, #2
 8006ec8:	f000 fe16 	bl	8007af8 <lcd_print>
                HAL_Delay(1200);
 8006ecc:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8006ed0:	f001 fb68 	bl	80085a4 <HAL_Delay>
                goto mainSSIDSection;
 8006ed4:	e7c5      	b.n	8006e62 <takeWifiSSID+0x6>
            }

            memcpy(&eepromData[ssidStartPos], wifiSSIDInt, 20);
 8006ed6:	4b96      	ldr	r3, [pc, #600]	; (8007130 <takeWifiSSID+0x2d4>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a96      	ldr	r2, [pc, #600]	; (8007134 <takeWifiSSID+0x2d8>)
 8006edc:	4413      	add	r3, r2
 8006ede:	4a96      	ldr	r2, [pc, #600]	; (8007138 <takeWifiSSID+0x2dc>)
 8006ee0:	6811      	ldr	r1, [r2, #0]
 8006ee2:	6855      	ldr	r5, [r2, #4]
 8006ee4:	6894      	ldr	r4, [r2, #8]
 8006ee6:	68d0      	ldr	r0, [r2, #12]
 8006ee8:	6019      	str	r1, [r3, #0]
 8006eea:	605d      	str	r5, [r3, #4]
 8006eec:	609c      	str	r4, [r3, #8]
 8006eee:	60d8      	str	r0, [r3, #12]
 8006ef0:	6911      	ldr	r1, [r2, #16]
 8006ef2:	6119      	str	r1, [r3, #16]
            HAL_Delay(200);
 8006ef4:	20c8      	movs	r0, #200	; 0xc8
 8006ef6:	f001 fb55 	bl	80085a4 <HAL_Delay>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8006efa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006efe:	9302      	str	r3, [sp, #8]
 8006f00:	236e      	movs	r3, #110	; 0x6e
 8006f02:	9301      	str	r3, [sp, #4]
 8006f04:	4b8b      	ldr	r3, [pc, #556]	; (8007134 <takeWifiSSID+0x2d8>)
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	236e      	movs	r3, #110	; 0x6e
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	21a0      	movs	r1, #160	; 0xa0
 8006f0e:	488b      	ldr	r0, [pc, #556]	; (800713c <takeWifiSSID+0x2e0>)
 8006f10:	f002 fbd2 	bl	80096b8 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8006f14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006f18:	f001 fb44 	bl	80085a4 <HAL_Delay>

            break;
 8006f1c:	e121      	b.n	8007162 <takeWifiSSID+0x306>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8006f1e:	2101      	movs	r1, #1
 8006f20:	4880      	ldr	r0, [pc, #512]	; (8007124 <takeWifiSSID+0x2c8>)
 8006f22:	f002 f90f 	bl	8009144 <HAL_GPIO_ReadPin>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d150      	bne.n	8006fce <takeWifiSSID+0x172>
        	realCharPos++;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	2b50      	cmp	r3, #80	; 0x50
 8006f36:	dd01      	ble.n	8006f3c <takeWifiSSID+0xe0>
        		realCharPos = 1;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	2b10      	cmp	r3, #16
 8006f40:	d13f      	bne.n	8006fc2 <takeWifiSSID+0x166>
            	if(page == 1) {
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d109      	bne.n	8006f5c <takeWifiSSID+0x100>
            		cursorPosition = 1;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	613b      	str	r3, [r7, #16]
            		page++;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 2);
 8006f52:	2102      	movs	r1, #2
 8006f54:	2002      	movs	r0, #2
 8006f56:	f7f9 feed 	bl	8000d34 <printTemplate>
 8006f5a:	e035      	b.n	8006fc8 <takeWifiSSID+0x16c>
            	} else if(page == 2) {
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d109      	bne.n	8006f76 <takeWifiSSID+0x11a>
            		cursorPosition = 1;
 8006f62:	2301      	movs	r3, #1
 8006f64:	613b      	str	r3, [r7, #16]
            		page++;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 3);
 8006f6c:	2103      	movs	r1, #3
 8006f6e:	2002      	movs	r0, #2
 8006f70:	f7f9 fee0 	bl	8000d34 <printTemplate>
 8006f74:	e028      	b.n	8006fc8 <takeWifiSSID+0x16c>
            	} else if(page == 3) {
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2b03      	cmp	r3, #3
 8006f7a:	d109      	bne.n	8006f90 <takeWifiSSID+0x134>
            		cursorPosition = 1;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	613b      	str	r3, [r7, #16]
            		page++;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	3301      	adds	r3, #1
 8006f84:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 4);
 8006f86:	2104      	movs	r1, #4
 8006f88:	2002      	movs	r0, #2
 8006f8a:	f7f9 fed3 	bl	8000d34 <printTemplate>
 8006f8e:	e01b      	b.n	8006fc8 <takeWifiSSID+0x16c>
            	} else if(page == 4) {
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2b04      	cmp	r3, #4
 8006f94:	d109      	bne.n	8006faa <takeWifiSSID+0x14e>
            		cursorPosition = 1;
 8006f96:	2301      	movs	r3, #1
 8006f98:	613b      	str	r3, [r7, #16]
            		page++;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 5);
 8006fa0:	2105      	movs	r1, #5
 8006fa2:	2002      	movs	r0, #2
 8006fa4:	f7f9 fec6 	bl	8000d34 <printTemplate>
 8006fa8:	e00e      	b.n	8006fc8 <takeWifiSSID+0x16c>
            	} else if(page == 5) {
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2b05      	cmp	r3, #5
 8006fae:	d10b      	bne.n	8006fc8 <takeWifiSSID+0x16c>
            		cursorPosition = 1;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	613b      	str	r3, [r7, #16]
            		page = 1;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 1);
 8006fb8:	2101      	movs	r1, #1
 8006fba:	2002      	movs	r0, #2
 8006fbc:	f7f9 feba 	bl	8000d34 <printTemplate>
 8006fc0:	e002      	b.n	8006fc8 <takeWifiSSID+0x16c>
            	}
            } else {
            	cursorPosition++;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 8006fc8:	2096      	movs	r0, #150	; 0x96
 8006fca:	f001 faeb 	bl	80085a4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8006fce:	2108      	movs	r1, #8
 8006fd0:	485b      	ldr	r0, [pc, #364]	; (8007140 <takeWifiSSID+0x2e4>)
 8006fd2:	f002 f8b7 	bl	8009144 <HAL_GPIO_ReadPin>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d14c      	bne.n	8007076 <takeWifiSSID+0x21a>
        	realCharPos--;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	dc01      	bgt.n	8006fec <takeWifiSSID+0x190>
        		realCharPos = 80;
 8006fe8:	2350      	movs	r3, #80	; 0x50
 8006fea:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d13b      	bne.n	800706a <takeWifiSSID+0x20e>
            	if(page == 1) {
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d108      	bne.n	800700a <takeWifiSSID+0x1ae>
            		cursorPosition = 16;
 8006ff8:	2310      	movs	r3, #16
 8006ffa:	613b      	str	r3, [r7, #16]
            		page = 5;
 8006ffc:	2305      	movs	r3, #5
 8006ffe:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 5);
 8007000:	2105      	movs	r1, #5
 8007002:	2002      	movs	r0, #2
 8007004:	f7f9 fe96 	bl	8000d34 <printTemplate>
 8007008:	e032      	b.n	8007070 <takeWifiSSID+0x214>
            	} else if(page == 2) {
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b02      	cmp	r3, #2
 800700e:	d108      	bne.n	8007022 <takeWifiSSID+0x1c6>
            		cursorPosition = 16;
 8007010:	2310      	movs	r3, #16
 8007012:	613b      	str	r3, [r7, #16]
            		page = 1;
 8007014:	2301      	movs	r3, #1
 8007016:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 1);
 8007018:	2101      	movs	r1, #1
 800701a:	2002      	movs	r0, #2
 800701c:	f7f9 fe8a 	bl	8000d34 <printTemplate>
 8007020:	e026      	b.n	8007070 <takeWifiSSID+0x214>
            	} else if(page == 3) {
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b03      	cmp	r3, #3
 8007026:	d108      	bne.n	800703a <takeWifiSSID+0x1de>
            		cursorPosition = 16;
 8007028:	2310      	movs	r3, #16
 800702a:	613b      	str	r3, [r7, #16]
            		page = 2;
 800702c:	2302      	movs	r3, #2
 800702e:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 2);
 8007030:	2102      	movs	r1, #2
 8007032:	2002      	movs	r0, #2
 8007034:	f7f9 fe7e 	bl	8000d34 <printTemplate>
 8007038:	e01a      	b.n	8007070 <takeWifiSSID+0x214>
            	} else if(page == 4) {
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2b04      	cmp	r3, #4
 800703e:	d108      	bne.n	8007052 <takeWifiSSID+0x1f6>
            		cursorPosition = 16;
 8007040:	2310      	movs	r3, #16
 8007042:	613b      	str	r3, [r7, #16]
            		page = 3;
 8007044:	2303      	movs	r3, #3
 8007046:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 3);
 8007048:	2103      	movs	r1, #3
 800704a:	2002      	movs	r0, #2
 800704c:	f7f9 fe72 	bl	8000d34 <printTemplate>
 8007050:	e00e      	b.n	8007070 <takeWifiSSID+0x214>
            	} else if(page == 5) {
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b05      	cmp	r3, #5
 8007056:	d10b      	bne.n	8007070 <takeWifiSSID+0x214>
            		cursorPosition = 16;
 8007058:	2310      	movs	r3, #16
 800705a:	613b      	str	r3, [r7, #16]
            		page = 4;
 800705c:	2304      	movs	r3, #4
 800705e:	60fb      	str	r3, [r7, #12]
            		printTemplate(2, 4);
 8007060:	2104      	movs	r1, #4
 8007062:	2002      	movs	r0, #2
 8007064:	f7f9 fe66 	bl	8000d34 <printTemplate>
 8007068:	e002      	b.n	8007070 <takeWifiSSID+0x214>
            	}
            } else {
            	cursorPosition--;
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	3b01      	subs	r3, #1
 800706e:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 8007070:	2096      	movs	r0, #150	; 0x96
 8007072:	f001 fa97 	bl	80085a4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007076:	2102      	movs	r1, #2
 8007078:	482a      	ldr	r0, [pc, #168]	; (8007124 <takeWifiSSID+0x2c8>)
 800707a:	f002 f863 	bl	8009144 <HAL_GPIO_ReadPin>
 800707e:	4603      	mov	r3, r0
 8007080:	2b01      	cmp	r3, #1
 8007082:	d11e      	bne.n	80070c2 <takeWifiSSID+0x266>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	3b01      	subs	r3, #1
 8007088:	4618      	mov	r0, r3
 800708a:	f7f9 fb79 	bl	8000780 <getCharFromCursorPosition>
 800708e:	4603      	mov	r3, r0
 8007090:	4619      	mov	r1, r3
 8007092:	4a23      	ldr	r2, [pc, #140]	; (8007120 <takeWifiSSID+0x2c4>)
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	4413      	add	r3, r2
 8007098:	460a      	mov	r2, r1
 800709a:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	b2d9      	uxtb	r1, r3
 80070a0:	4a1f      	ldr	r2, [pc, #124]	; (8007120 <takeWifiSSID+0x2c4>)
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	4413      	add	r3, r2
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	461a      	mov	r2, r3
 80070aa:	2001      	movs	r0, #1
 80070ac:	f000 fd39 	bl	8007b22 <lcd_print_char>

            writeLoc++;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3301      	adds	r3, #1
 80070b4:	607b      	str	r3, [r7, #4]
            wifiNameLoc++;
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	3301      	adds	r3, #1
 80070ba:	60bb      	str	r3, [r7, #8]

            HAL_Delay(150);
 80070bc:	2096      	movs	r0, #150	; 0x96
 80070be:	f001 fa71 	bl	80085a4 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80070c2:	2104      	movs	r1, #4
 80070c4:	4817      	ldr	r0, [pc, #92]	; (8007124 <takeWifiSSID+0x2c8>)
 80070c6:	f002 f83d 	bl	8009144 <HAL_GPIO_ReadPin>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d141      	bne.n	8007154 <takeWifiSSID+0x2f8>
        	if(strlen(wifiSSID) >= 1) {
 80070d0:	4b13      	ldr	r3, [pc, #76]	; (8007120 <takeWifiSSID+0x2c4>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d03a      	beq.n	800714e <takeWifiSSID+0x2f2>
        		wifiSSID[wifiNameLoc] = '\0';
 80070d8:	4a11      	ldr	r2, [pc, #68]	; (8007120 <takeWifiSSID+0x2c4>)
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	4413      	add	r3, r2
 80070de:	2200      	movs	r2, #0
 80070e0:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	3306      	adds	r3, #6
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	4619      	mov	r1, r3
 80070ec:	2001      	movs	r0, #1
 80070ee:	f000 fd39 	bl	8007b64 <lcd_delete_char>
        		HAL_Delay(50);
 80070f2:	2032      	movs	r0, #50	; 0x32
 80070f4:	f001 fa56 	bl	80085a4 <HAL_Delay>
        		if(writeLoc > 7) {
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b07      	cmp	r3, #7
 80070fc:	dd03      	ble.n	8007106 <takeWifiSSID+0x2aa>
        			writeLoc--;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	3b01      	subs	r3, #1
 8007102:	607b      	str	r3, [r7, #4]
 8007104:	e004      	b.n	8007110 <takeWifiSSID+0x2b4>
        		} else if(writeLoc < 7) {
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2b06      	cmp	r3, #6
 800710a:	dc01      	bgt.n	8007110 <takeWifiSSID+0x2b4>
        			writeLoc = 7;
 800710c:	2307      	movs	r3, #7
 800710e:	607b      	str	r3, [r7, #4]
        		}

        		if(wifiNameLoc > 0) {
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	dd16      	ble.n	8007144 <takeWifiSSID+0x2e8>
        			wifiNameLoc--;
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	3b01      	subs	r3, #1
 800711a:	60bb      	str	r3, [r7, #8]
 800711c:	e017      	b.n	800714e <takeWifiSSID+0x2f2>
 800711e:	bf00      	nop
 8007120:	200001a4 	.word	0x200001a4
 8007124:	40010800 	.word	0x40010800
 8007128:	0800dae8 	.word	0x0800dae8
 800712c:	0800dafc 	.word	0x0800dafc
 8007130:	20000008 	.word	0x20000008
 8007134:	20000120 	.word	0x20000120
 8007138:	200001cc 	.word	0x200001cc
 800713c:	200002ac 	.word	0x200002ac
 8007140:	40011000 	.word	0x40011000
        		} else if(wifiNameLoc < 0) {
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	2b00      	cmp	r3, #0
 8007148:	da01      	bge.n	800714e <takeWifiSSID+0x2f2>
        			wifiNameLoc = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	60bb      	str	r3, [r7, #8]
        		}
        	}

        	HAL_Delay(150);
 800714e:	2096      	movs	r0, #150	; 0x96
 8007150:	f001 fa28 	bl	80085a4 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	b2db      	uxtb	r3, r3
 8007158:	4619      	mov	r1, r3
 800715a:	2002      	movs	r0, #2
 800715c:	f000 fcad 	bl	8007aba <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007160:	e698      	b.n	8006e94 <takeWifiSSID+0x38>
    }
}
 8007162:	bf00      	nop
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bdb0      	pop	{r4, r5, r7, pc}
 800716a:	bf00      	nop

0800716c <takeWifiPass>:

void takeWifiPass() {
 800716c:	b5b0      	push	{r4, r5, r7, lr}
 800716e:	b08a      	sub	sp, #40	; 0x28
 8007170:	af04      	add	r7, sp, #16
	mainPASSSection:
    lcd_cursor(1);
 8007172:	2001      	movs	r0, #1
 8007174:	f000 fd1e 	bl	8007bb4 <lcd_cursor>

    memset(wifiPass, 0, sizeof(wifiPass));
 8007178:	2214      	movs	r2, #20
 800717a:	2100      	movs	r1, #0
 800717c:	48ac      	ldr	r0, [pc, #688]	; (8007430 <takeWifiPass+0x2c4>)
 800717e:	f005 f968 	bl	800c452 <memset>
    HAL_Delay(100);
 8007182:	2064      	movs	r0, #100	; 0x64
 8007184:	f001 fa0e 	bl	80085a4 <HAL_Delay>

    int realCharPos = 1;
 8007188:	2301      	movs	r3, #1
 800718a:	617b      	str	r3, [r7, #20]
    int cursorPosition = 1;
 800718c:	2301      	movs	r3, #1
 800718e:	613b      	str	r3, [r7, #16]
    int page = 1;
 8007190:	2301      	movs	r3, #1
 8007192:	60fb      	str	r3, [r7, #12]
    int wifiPassLoc = 0;
 8007194:	2300      	movs	r3, #0
 8007196:	60bb      	str	r3, [r7, #8]
    int writeLoc = 7;
 8007198:	2307      	movs	r3, #7
 800719a:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 800719c:	2101      	movs	r1, #1
 800719e:	2003      	movs	r0, #3
 80071a0:	f7f9 fdc8 	bl	8000d34 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80071a4:	2108      	movs	r1, #8
 80071a6:	48a3      	ldr	r0, [pc, #652]	; (8007434 <takeWifiPass+0x2c8>)
 80071a8:	f001 ffcc 	bl	8009144 <HAL_GPIO_ReadPin>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d13d      	bne.n	800722e <takeWifiPass+0xc2>
            lcd_cursor(0);
 80071b2:	2000      	movs	r0, #0
 80071b4:	f000 fcfe 	bl	8007bb4 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 80071b8:	489d      	ldr	r0, [pc, #628]	; (8007430 <takeWifiPass+0x2c4>)
 80071ba:	f7f9 f833 	bl	8000224 <strlen>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b14      	cmp	r3, #20
 80071c2:	d910      	bls.n	80071e6 <takeWifiPass+0x7a>
                lcd_clear();
 80071c4:	f000 fcc4 	bl	8007b50 <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 80071c8:	4a9b      	ldr	r2, [pc, #620]	; (8007438 <takeWifiPass+0x2cc>)
 80071ca:	2101      	movs	r1, #1
 80071cc:	2001      	movs	r0, #1
 80071ce:	f000 fc93 	bl	8007af8 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 80071d2:	4a9a      	ldr	r2, [pc, #616]	; (800743c <takeWifiPass+0x2d0>)
 80071d4:	2101      	movs	r1, #1
 80071d6:	2002      	movs	r0, #2
 80071d8:	f000 fc8e 	bl	8007af8 <lcd_print>
                HAL_Delay(1200);
 80071dc:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80071e0:	f001 f9e0 	bl	80085a4 <HAL_Delay>
                goto mainPASSSection;
 80071e4:	e7c5      	b.n	8007172 <takeWifiPass+0x6>
            }

            memcpy(&eepromData[passStartPos], wifiPassInt, 20);
 80071e6:	4b96      	ldr	r3, [pc, #600]	; (8007440 <takeWifiPass+0x2d4>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a96      	ldr	r2, [pc, #600]	; (8007444 <takeWifiPass+0x2d8>)
 80071ec:	4413      	add	r3, r2
 80071ee:	4a96      	ldr	r2, [pc, #600]	; (8007448 <takeWifiPass+0x2dc>)
 80071f0:	6811      	ldr	r1, [r2, #0]
 80071f2:	6855      	ldr	r5, [r2, #4]
 80071f4:	6894      	ldr	r4, [r2, #8]
 80071f6:	68d0      	ldr	r0, [r2, #12]
 80071f8:	6019      	str	r1, [r3, #0]
 80071fa:	605d      	str	r5, [r3, #4]
 80071fc:	609c      	str	r4, [r3, #8]
 80071fe:	60d8      	str	r0, [r3, #12]
 8007200:	6911      	ldr	r1, [r2, #16]
 8007202:	6119      	str	r1, [r3, #16]
            HAL_Delay(200);
 8007204:	20c8      	movs	r0, #200	; 0xc8
 8007206:	f001 f9cd 	bl	80085a4 <HAL_Delay>

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800720a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800720e:	9302      	str	r3, [sp, #8]
 8007210:	236e      	movs	r3, #110	; 0x6e
 8007212:	9301      	str	r3, [sp, #4]
 8007214:	4b8b      	ldr	r3, [pc, #556]	; (8007444 <takeWifiPass+0x2d8>)
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	236e      	movs	r3, #110	; 0x6e
 800721a:	2200      	movs	r2, #0
 800721c:	21a0      	movs	r1, #160	; 0xa0
 800721e:	488b      	ldr	r0, [pc, #556]	; (800744c <takeWifiPass+0x2e0>)
 8007220:	f002 fa4a 	bl	80096b8 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8007224:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007228:	f001 f9bc 	bl	80085a4 <HAL_Delay>

            break;
 800722c:	e121      	b.n	8007472 <takeWifiPass+0x306>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800722e:	2101      	movs	r1, #1
 8007230:	4880      	ldr	r0, [pc, #512]	; (8007434 <takeWifiPass+0x2c8>)
 8007232:	f001 ff87 	bl	8009144 <HAL_GPIO_ReadPin>
 8007236:	4603      	mov	r3, r0
 8007238:	2b01      	cmp	r3, #1
 800723a:	d150      	bne.n	80072de <takeWifiPass+0x172>
        	realCharPos++;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	3301      	adds	r3, #1
 8007240:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2b50      	cmp	r3, #80	; 0x50
 8007246:	dd01      	ble.n	800724c <takeWifiPass+0xe0>
        	    realCharPos = 1;
 8007248:	2301      	movs	r3, #1
 800724a:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	2b10      	cmp	r3, #16
 8007250:	d13f      	bne.n	80072d2 <takeWifiPass+0x166>
            	if(page == 1) {
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d109      	bne.n	800726c <takeWifiPass+0x100>
            		cursorPosition = 1;
 8007258:	2301      	movs	r3, #1
 800725a:	613b      	str	r3, [r7, #16]
            		page++;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	3301      	adds	r3, #1
 8007260:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 2);
 8007262:	2102      	movs	r1, #2
 8007264:	2003      	movs	r0, #3
 8007266:	f7f9 fd65 	bl	8000d34 <printTemplate>
 800726a:	e035      	b.n	80072d8 <takeWifiPass+0x16c>
            	} else if(page == 2) {
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2b02      	cmp	r3, #2
 8007270:	d109      	bne.n	8007286 <takeWifiPass+0x11a>
            		cursorPosition = 1;
 8007272:	2301      	movs	r3, #1
 8007274:	613b      	str	r3, [r7, #16]
            		page++;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	3301      	adds	r3, #1
 800727a:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 3);
 800727c:	2103      	movs	r1, #3
 800727e:	2003      	movs	r0, #3
 8007280:	f7f9 fd58 	bl	8000d34 <printTemplate>
 8007284:	e028      	b.n	80072d8 <takeWifiPass+0x16c>
            	} else if(page == 3) {
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2b03      	cmp	r3, #3
 800728a:	d109      	bne.n	80072a0 <takeWifiPass+0x134>
            		cursorPosition = 1;
 800728c:	2301      	movs	r3, #1
 800728e:	613b      	str	r3, [r7, #16]
            		page++;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	3301      	adds	r3, #1
 8007294:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 4);
 8007296:	2104      	movs	r1, #4
 8007298:	2003      	movs	r0, #3
 800729a:	f7f9 fd4b 	bl	8000d34 <printTemplate>
 800729e:	e01b      	b.n	80072d8 <takeWifiPass+0x16c>
            	} else if(page == 4) {
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2b04      	cmp	r3, #4
 80072a4:	d109      	bne.n	80072ba <takeWifiPass+0x14e>
            		cursorPosition = 1;
 80072a6:	2301      	movs	r3, #1
 80072a8:	613b      	str	r3, [r7, #16]
            		page++;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3301      	adds	r3, #1
 80072ae:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 5);
 80072b0:	2105      	movs	r1, #5
 80072b2:	2003      	movs	r0, #3
 80072b4:	f7f9 fd3e 	bl	8000d34 <printTemplate>
 80072b8:	e00e      	b.n	80072d8 <takeWifiPass+0x16c>
            	} else if(page == 5) {
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b05      	cmp	r3, #5
 80072be:	d10b      	bne.n	80072d8 <takeWifiPass+0x16c>
            		cursorPosition = 1;
 80072c0:	2301      	movs	r3, #1
 80072c2:	613b      	str	r3, [r7, #16]
            		page = 1;
 80072c4:	2301      	movs	r3, #1
 80072c6:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 1);
 80072c8:	2101      	movs	r1, #1
 80072ca:	2003      	movs	r0, #3
 80072cc:	f7f9 fd32 	bl	8000d34 <printTemplate>
 80072d0:	e002      	b.n	80072d8 <takeWifiPass+0x16c>
            	}
            } else {
            	cursorPosition++;
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	3301      	adds	r3, #1
 80072d6:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 80072d8:	2096      	movs	r0, #150	; 0x96
 80072da:	f001 f963 	bl	80085a4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80072de:	2108      	movs	r1, #8
 80072e0:	485b      	ldr	r0, [pc, #364]	; (8007450 <takeWifiPass+0x2e4>)
 80072e2:	f001 ff2f 	bl	8009144 <HAL_GPIO_ReadPin>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d14c      	bne.n	8007386 <takeWifiPass+0x21a>
        	realCharPos--;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	3b01      	subs	r3, #1
 80072f0:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	dc01      	bgt.n	80072fc <takeWifiPass+0x190>
        	    realCharPos = 80;
 80072f8:	2350      	movs	r3, #80	; 0x50
 80072fa:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d13b      	bne.n	800737a <takeWifiPass+0x20e>
            	if(page == 1) {
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d108      	bne.n	800731a <takeWifiPass+0x1ae>
            		cursorPosition = 16;
 8007308:	2310      	movs	r3, #16
 800730a:	613b      	str	r3, [r7, #16]
            		page = 5;
 800730c:	2305      	movs	r3, #5
 800730e:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 5);
 8007310:	2105      	movs	r1, #5
 8007312:	2003      	movs	r0, #3
 8007314:	f7f9 fd0e 	bl	8000d34 <printTemplate>
 8007318:	e032      	b.n	8007380 <takeWifiPass+0x214>
            	} else if(page == 2) {
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b02      	cmp	r3, #2
 800731e:	d108      	bne.n	8007332 <takeWifiPass+0x1c6>
            		cursorPosition = 16;
 8007320:	2310      	movs	r3, #16
 8007322:	613b      	str	r3, [r7, #16]
            		page = 1;
 8007324:	2301      	movs	r3, #1
 8007326:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 1);
 8007328:	2101      	movs	r1, #1
 800732a:	2003      	movs	r0, #3
 800732c:	f7f9 fd02 	bl	8000d34 <printTemplate>
 8007330:	e026      	b.n	8007380 <takeWifiPass+0x214>
            	} else if(page == 3) {
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2b03      	cmp	r3, #3
 8007336:	d108      	bne.n	800734a <takeWifiPass+0x1de>
            		cursorPosition = 16;
 8007338:	2310      	movs	r3, #16
 800733a:	613b      	str	r3, [r7, #16]
            		page = 2;
 800733c:	2302      	movs	r3, #2
 800733e:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 2);
 8007340:	2102      	movs	r1, #2
 8007342:	2003      	movs	r0, #3
 8007344:	f7f9 fcf6 	bl	8000d34 <printTemplate>
 8007348:	e01a      	b.n	8007380 <takeWifiPass+0x214>
            	} else if(page == 4) {
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2b04      	cmp	r3, #4
 800734e:	d108      	bne.n	8007362 <takeWifiPass+0x1f6>
            		cursorPosition = 16;
 8007350:	2310      	movs	r3, #16
 8007352:	613b      	str	r3, [r7, #16]
            		page = 3;
 8007354:	2303      	movs	r3, #3
 8007356:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 3);
 8007358:	2103      	movs	r1, #3
 800735a:	2003      	movs	r0, #3
 800735c:	f7f9 fcea 	bl	8000d34 <printTemplate>
 8007360:	e00e      	b.n	8007380 <takeWifiPass+0x214>
            	} else if(page == 5) {
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2b05      	cmp	r3, #5
 8007366:	d10b      	bne.n	8007380 <takeWifiPass+0x214>
            		cursorPosition = 16;
 8007368:	2310      	movs	r3, #16
 800736a:	613b      	str	r3, [r7, #16]
            		page = 4;
 800736c:	2304      	movs	r3, #4
 800736e:	60fb      	str	r3, [r7, #12]
            		printTemplate(3, 4);
 8007370:	2104      	movs	r1, #4
 8007372:	2003      	movs	r0, #3
 8007374:	f7f9 fcde 	bl	8000d34 <printTemplate>
 8007378:	e002      	b.n	8007380 <takeWifiPass+0x214>
            	}
            } else {
            	cursorPosition--;
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	3b01      	subs	r3, #1
 800737e:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(150);
 8007380:	2096      	movs	r0, #150	; 0x96
 8007382:	f001 f90f 	bl	80085a4 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007386:	2102      	movs	r1, #2
 8007388:	482a      	ldr	r0, [pc, #168]	; (8007434 <takeWifiPass+0x2c8>)
 800738a:	f001 fedb 	bl	8009144 <HAL_GPIO_ReadPin>
 800738e:	4603      	mov	r3, r0
 8007390:	2b01      	cmp	r3, #1
 8007392:	d11e      	bne.n	80073d2 <takeWifiPass+0x266>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	3b01      	subs	r3, #1
 8007398:	4618      	mov	r0, r3
 800739a:	f7f9 f9f1 	bl	8000780 <getCharFromCursorPosition>
 800739e:	4603      	mov	r3, r0
 80073a0:	4619      	mov	r1, r3
 80073a2:	4a23      	ldr	r2, [pc, #140]	; (8007430 <takeWifiPass+0x2c4>)
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	4413      	add	r3, r2
 80073a8:	460a      	mov	r2, r1
 80073aa:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	b2d9      	uxtb	r1, r3
 80073b0:	4a1f      	ldr	r2, [pc, #124]	; (8007430 <takeWifiPass+0x2c4>)
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	4413      	add	r3, r2
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	461a      	mov	r2, r3
 80073ba:	2001      	movs	r0, #1
 80073bc:	f000 fbb1 	bl	8007b22 <lcd_print_char>

            writeLoc++;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	3301      	adds	r3, #1
 80073c4:	607b      	str	r3, [r7, #4]
            wifiPassLoc++;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	3301      	adds	r3, #1
 80073ca:	60bb      	str	r3, [r7, #8]

            HAL_Delay(150);
 80073cc:	2096      	movs	r0, #150	; 0x96
 80073ce:	f001 f8e9 	bl	80085a4 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80073d2:	2104      	movs	r1, #4
 80073d4:	4817      	ldr	r0, [pc, #92]	; (8007434 <takeWifiPass+0x2c8>)
 80073d6:	f001 feb5 	bl	8009144 <HAL_GPIO_ReadPin>
 80073da:	4603      	mov	r3, r0
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d141      	bne.n	8007464 <takeWifiPass+0x2f8>
            if(strlen(wifiPass) >= 1) {
 80073e0:	4b13      	ldr	r3, [pc, #76]	; (8007430 <takeWifiPass+0x2c4>)
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d03a      	beq.n	800745e <takeWifiPass+0x2f2>
            	wifiPass[wifiPassLoc] = '\0';
 80073e8:	4a11      	ldr	r2, [pc, #68]	; (8007430 <takeWifiPass+0x2c4>)
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	4413      	add	r3, r2
 80073ee:	2200      	movs	r2, #0
 80073f0:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	3306      	adds	r3, #6
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	4619      	mov	r1, r3
 80073fc:	2001      	movs	r0, #1
 80073fe:	f000 fbb1 	bl	8007b64 <lcd_delete_char>
            	HAL_Delay(50);
 8007402:	2032      	movs	r0, #50	; 0x32
 8007404:	f001 f8ce 	bl	80085a4 <HAL_Delay>

            	if(writeLoc > 7) {
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b07      	cmp	r3, #7
 800740c:	dd03      	ble.n	8007416 <takeWifiPass+0x2aa>
            		writeLoc--;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	3b01      	subs	r3, #1
 8007412:	607b      	str	r3, [r7, #4]
 8007414:	e004      	b.n	8007420 <takeWifiPass+0x2b4>
            	} else if(writeLoc < 7) {
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2b06      	cmp	r3, #6
 800741a:	dc01      	bgt.n	8007420 <takeWifiPass+0x2b4>
            		writeLoc = 7;
 800741c:	2307      	movs	r3, #7
 800741e:	607b      	str	r3, [r7, #4]
            	}

            	if(wifiPassLoc > 0) {
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	2b00      	cmp	r3, #0
 8007424:	dd16      	ble.n	8007454 <takeWifiPass+0x2e8>
            		wifiPassLoc--;
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	3b01      	subs	r3, #1
 800742a:	60bb      	str	r3, [r7, #8]
 800742c:	e017      	b.n	800745e <takeWifiPass+0x2f2>
 800742e:	bf00      	nop
 8007430:	200001b8 	.word	0x200001b8
 8007434:	40010800 	.word	0x40010800
 8007438:	0800dae8 	.word	0x0800dae8
 800743c:	0800db10 	.word	0x0800db10
 8007440:	2000000c 	.word	0x2000000c
 8007444:	20000120 	.word	0x20000120
 8007448:	200001e0 	.word	0x200001e0
 800744c:	200002ac 	.word	0x200002ac
 8007450:	40011000 	.word	0x40011000
            	} else if(wifiPassLoc < 0) {
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	da01      	bge.n	800745e <takeWifiPass+0x2f2>
            		wifiPassLoc = 0;
 800745a:	2300      	movs	r3, #0
 800745c:	60bb      	str	r3, [r7, #8]
            	}
            }

            HAL_Delay(150);
 800745e:	2096      	movs	r0, #150	; 0x96
 8007460:	f001 f8a0 	bl	80085a4 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	b2db      	uxtb	r3, r3
 8007468:	4619      	mov	r1, r3
 800746a:	2002      	movs	r0, #2
 800746c:	f000 fb25 	bl	8007aba <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007470:	e698      	b.n	80071a4 <takeWifiPass+0x38>
    }
}
 8007472:	bf00      	nop
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bdb0      	pop	{r4, r5, r7, pc}
 800747a:	bf00      	nop

0800747c <mergeData>:

char* mergeData() {
 800747c:	b580      	push	{r7, lr}
 800747e:	b09c      	sub	sp, #112	; 0x70
 8007480:	af00      	add	r7, sp, #0
	char combinedString[44] = "";
 8007482:	2300      	movs	r3, #0
 8007484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007486:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800748a:	2228      	movs	r2, #40	; 0x28
 800748c:	2100      	movs	r1, #0
 800748e:	4618      	mov	r0, r3
 8007490:	f004 ffdf 	bl	800c452 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007494:	4b67      	ldr	r3, [pc, #412]	; (8007634 <mergeData+0x1b8>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	713b      	strb	r3, [r7, #4]
 800749a:	4b67      	ldr	r3, [pc, #412]	; (8007638 <mergeData+0x1bc>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	717b      	strb	r3, [r7, #5]
 80074a0:	4b66      	ldr	r3, [pc, #408]	; (800763c <mergeData+0x1c0>)
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	71bb      	strb	r3, [r7, #6]
 80074a6:	4b66      	ldr	r3, [pc, #408]	; (8007640 <mergeData+0x1c4>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	71fb      	strb	r3, [r7, #7]
 80074ac:	4b65      	ldr	r3, [pc, #404]	; (8007644 <mergeData+0x1c8>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	723b      	strb	r3, [r7, #8]
 80074b2:	4b65      	ldr	r3, [pc, #404]	; (8007648 <mergeData+0x1cc>)
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	727b      	strb	r3, [r7, #9]
 80074b8:	4b64      	ldr	r3, [pc, #400]	; (800764c <mergeData+0x1d0>)
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	72bb      	strb	r3, [r7, #10]
 80074be:	4b64      	ldr	r3, [pc, #400]	; (8007650 <mergeData+0x1d4>)
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	72fb      	strb	r3, [r7, #11]
 80074c4:	4b63      	ldr	r3, [pc, #396]	; (8007654 <mergeData+0x1d8>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	733b      	strb	r3, [r7, #12]
 80074ca:	4b63      	ldr	r3, [pc, #396]	; (8007658 <mergeData+0x1dc>)
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	737b      	strb	r3, [r7, #13]
 80074d0:	4b62      	ldr	r3, [pc, #392]	; (800765c <mergeData+0x1e0>)
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	73bb      	strb	r3, [r7, #14]
 80074d6:	4b62      	ldr	r3, [pc, #392]	; (8007660 <mergeData+0x1e4>)
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	73fb      	strb	r3, [r7, #15]
 80074dc:	4b61      	ldr	r3, [pc, #388]	; (8007664 <mergeData+0x1e8>)
 80074de:	781b      	ldrb	r3, [r3, #0]
 80074e0:	743b      	strb	r3, [r7, #16]
 80074e2:	4b61      	ldr	r3, [pc, #388]	; (8007668 <mergeData+0x1ec>)
 80074e4:	781b      	ldrb	r3, [r3, #0]
 80074e6:	747b      	strb	r3, [r7, #17]
 80074e8:	4b60      	ldr	r3, [pc, #384]	; (800766c <mergeData+0x1f0>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	74bb      	strb	r3, [r7, #18]
 80074ee:	4b60      	ldr	r3, [pc, #384]	; (8007670 <mergeData+0x1f4>)
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	74fb      	strb	r3, [r7, #19]
 80074f4:	4b5f      	ldr	r3, [pc, #380]	; (8007674 <mergeData+0x1f8>)
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	753b      	strb	r3, [r7, #20]
 80074fa:	4b5f      	ldr	r3, [pc, #380]	; (8007678 <mergeData+0x1fc>)
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	757b      	strb	r3, [r7, #21]
 8007500:	4b5e      	ldr	r3, [pc, #376]	; (800767c <mergeData+0x200>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	75bb      	strb	r3, [r7, #22]
 8007506:	4b5e      	ldr	r3, [pc, #376]	; (8007680 <mergeData+0x204>)
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	75fb      	strb	r3, [r7, #23]
 800750c:	4b5d      	ldr	r3, [pc, #372]	; (8007684 <mergeData+0x208>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	763b      	strb	r3, [r7, #24]
 8007512:	4b5d      	ldr	r3, [pc, #372]	; (8007688 <mergeData+0x20c>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	767b      	strb	r3, [r7, #25]
 8007518:	4b5c      	ldr	r3, [pc, #368]	; (800768c <mergeData+0x210>)
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	76bb      	strb	r3, [r7, #26]
 800751e:	4b5c      	ldr	r3, [pc, #368]	; (8007690 <mergeData+0x214>)
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	76fb      	strb	r3, [r7, #27]
 8007524:	4b5b      	ldr	r3, [pc, #364]	; (8007694 <mergeData+0x218>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	773b      	strb	r3, [r7, #28]
 800752a:	4b5b      	ldr	r3, [pc, #364]	; (8007698 <mergeData+0x21c>)
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	777b      	strb	r3, [r7, #29]
 8007530:	4b5a      	ldr	r3, [pc, #360]	; (800769c <mergeData+0x220>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	77bb      	strb	r3, [r7, #30]
 8007536:	4b5a      	ldr	r3, [pc, #360]	; (80076a0 <mergeData+0x224>)
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	77fb      	strb	r3, [r7, #31]
 800753c:	4b59      	ldr	r3, [pc, #356]	; (80076a4 <mergeData+0x228>)
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	f887 3020 	strb.w	r3, [r7, #32]
 8007544:	4b58      	ldr	r3, [pc, #352]	; (80076a8 <mergeData+0x22c>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800754c:	4b57      	ldr	r3, [pc, #348]	; (80076ac <mergeData+0x230>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007554:	4b56      	ldr	r3, [pc, #344]	; (80076b0 <mergeData+0x234>)
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800755c:	4b55      	ldr	r3, [pc, #340]	; (80076b4 <mergeData+0x238>)
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8007564:	4b54      	ldr	r3, [pc, #336]	; (80076b8 <mergeData+0x23c>)
 8007566:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 800756a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[39],
 800756e:	4b52      	ldr	r3, [pc, #328]	; (80076b8 <mergeData+0x23c>)
 8007570:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 8007574:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[40],
 8007578:	4b4f      	ldr	r3, [pc, #316]	; (80076b8 <mergeData+0x23c>)
 800757a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 800757e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[41],
 8007582:	4b4d      	ldr	r3, [pc, #308]	; (80076b8 <mergeData+0x23c>)
 8007584:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8007588:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[42],
 800758c:	4b4a      	ldr	r3, [pc, #296]	; (80076b8 <mergeData+0x23c>)
 800758e:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8007592:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[43],
 8007596:	4b48      	ldr	r3, [pc, #288]	; (80076b8 <mergeData+0x23c>)
 8007598:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 800759c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[44],
 80075a0:	4b45      	ldr	r3, [pc, #276]	; (80076b8 <mergeData+0x23c>)
 80075a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 80075a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[45],
 80075aa:	4b43      	ldr	r3, [pc, #268]	; (80076b8 <mergeData+0x23c>)
 80075ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80075b0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[46],
 80075b4:	4b40      	ldr	r3, [pc, #256]	; (80076b8 <mergeData+0x23c>)
 80075b6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80075ba:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[47],
 80075be:	4b3e      	ldr	r3, [pc, #248]	; (80076b8 <mergeData+0x23c>)
 80075c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80075c4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80075c8:	2306      	movs	r3, #6
 80075ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80075ce:	2300      	movs	r3, #0
 80075d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80075d2:	e015      	b.n	8007600 <mergeData+0x184>
	    sprintf(temp, "%u", uintVariables[i]);
 80075d4:	1d3a      	adds	r2, r7, #4
 80075d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075d8:	4413      	add	r3, r2
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	461a      	mov	r2, r3
 80075de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80075e2:	4936      	ldr	r1, [pc, #216]	; (80076bc <mergeData+0x240>)
 80075e4:	4618      	mov	r0, r3
 80075e6:	f004 fec3 	bl	800c370 <siprintf>
	    strcat(combinedString, temp);
 80075ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80075ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80075f2:	4611      	mov	r1, r2
 80075f4:	4618      	mov	r0, r3
 80075f6:	f004 ff1d 	bl	800c434 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80075fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80075fc:	3301      	adds	r3, #1
 80075fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007602:	2b2b      	cmp	r3, #43	; 0x2b
 8007604:	d9e6      	bls.n	80075d4 <mergeData+0x158>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8007606:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800760a:	4618      	mov	r0, r3
 800760c:	f7f8 fe0a 	bl	8000224 <strlen>
 8007610:	4603      	mov	r3, r0
 8007612:	3301      	adds	r3, #1
 8007614:	4618      	mov	r0, r3
 8007616:	f004 fdc3 	bl	800c1a0 <malloc>
 800761a:	4603      	mov	r3, r0
 800761c:	66bb      	str	r3, [r7, #104]	; 0x68
	strcpy(result, combinedString);
 800761e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007622:	4619      	mov	r1, r3
 8007624:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8007626:	f004 ff59 	bl	800c4dc <strcpy>
	return result;
 800762a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 800762c:	4618      	mov	r0, r3
 800762e:	3770      	adds	r7, #112	; 0x70
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}
 8007634:	2000022b 	.word	0x2000022b
 8007638:	2000021d 	.word	0x2000021d
 800763c:	20000220 	.word	0x20000220
 8007640:	20000221 	.word	0x20000221
 8007644:	20000222 	.word	0x20000222
 8007648:	20000229 	.word	0x20000229
 800764c:	20000223 	.word	0x20000223
 8007650:	20000224 	.word	0x20000224
 8007654:	20000228 	.word	0x20000228
 8007658:	20000225 	.word	0x20000225
 800765c:	20000235 	.word	0x20000235
 8007660:	20000226 	.word	0x20000226
 8007664:	20000236 	.word	0x20000236
 8007668:	20000227 	.word	0x20000227
 800766c:	20000237 	.word	0x20000237
 8007670:	2000022a 	.word	0x2000022a
 8007674:	2000022c 	.word	0x2000022c
 8007678:	2000022d 	.word	0x2000022d
 800767c:	2000022e 	.word	0x2000022e
 8007680:	2000022f 	.word	0x2000022f
 8007684:	20000230 	.word	0x20000230
 8007688:	20000231 	.word	0x20000231
 800768c:	20000232 	.word	0x20000232
 8007690:	20000233 	.word	0x20000233
 8007694:	20000234 	.word	0x20000234
 8007698:	20000238 	.word	0x20000238
 800769c:	2000023a 	.word	0x2000023a
 80076a0:	20000219 	.word	0x20000219
 80076a4:	2000021a 	.word	0x2000021a
 80076a8:	20000000 	.word	0x20000000
 80076ac:	20000001 	.word	0x20000001
 80076b0:	2000021b 	.word	0x2000021b
 80076b4:	2000023d 	.word	0x2000023d
 80076b8:	20000120 	.word	0x20000120
 80076bc:	0800db24 	.word	0x0800db24

080076c0 <convertAndSendData>:

void convertAndSendData() {
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
	if(dilSecim == 0) {
 80076c6:	4b1a      	ldr	r3, [pc, #104]	; (8007730 <convertAndSendData+0x70>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10a      	bne.n	80076e4 <convertAndSendData+0x24>
		lcd_print(1, 1, "  Veri  Esleme  ");
 80076ce:	4a19      	ldr	r2, [pc, #100]	; (8007734 <convertAndSendData+0x74>)
 80076d0:	2101      	movs	r1, #1
 80076d2:	2001      	movs	r0, #1
 80076d4:	f000 fa10 	bl	8007af8 <lcd_print>
		lcd_print(2, 1, " Baslatildi ... ");
 80076d8:	4a17      	ldr	r2, [pc, #92]	; (8007738 <convertAndSendData+0x78>)
 80076da:	2101      	movs	r1, #1
 80076dc:	2002      	movs	r0, #2
 80076de:	f000 fa0b 	bl	8007af8 <lcd_print>
 80076e2:	e009      	b.n	80076f8 <convertAndSendData+0x38>
	} else {
		lcd_print(1, 1, " Syncronization ");
 80076e4:	4a15      	ldr	r2, [pc, #84]	; (800773c <convertAndSendData+0x7c>)
 80076e6:	2101      	movs	r1, #1
 80076e8:	2001      	movs	r0, #1
 80076ea:	f000 fa05 	bl	8007af8 <lcd_print>
		lcd_print(2, 1, "   Started...   ");
 80076ee:	4a14      	ldr	r2, [pc, #80]	; (8007740 <convertAndSendData+0x80>)
 80076f0:	2101      	movs	r1, #1
 80076f2:	2002      	movs	r0, #2
 80076f4:	f000 fa00 	bl	8007af8 <lcd_print>
	}
	for(int i=0; i<2; i++) {
 80076f8:	2300      	movs	r3, #0
 80076fa:	607b      	str	r3, [r7, #4]
 80076fc:	e00a      	b.n	8007714 <convertAndSendData+0x54>
		sendMachineData(&huart1, machineID, mergeData());
 80076fe:	f7ff febd 	bl	800747c <mergeData>
 8007702:	4603      	mov	r3, r0
 8007704:	461a      	mov	r2, r3
 8007706:	490f      	ldr	r1, [pc, #60]	; (8007744 <convertAndSendData+0x84>)
 8007708:	480f      	ldr	r0, [pc, #60]	; (8007748 <convertAndSendData+0x88>)
 800770a:	f7f9 f8a1 	bl	8000850 <sendMachineData>
	for(int i=0; i<2; i++) {
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	3301      	adds	r3, #1
 8007712:	607b      	str	r3, [r7, #4]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b01      	cmp	r3, #1
 8007718:	ddf1      	ble.n	80076fe <convertAndSendData+0x3e>
	}
	HAL_Delay(500);
 800771a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800771e:	f000 ff41 	bl	80085a4 <HAL_Delay>
	lcd_clear();
 8007722:	f000 fa15 	bl	8007b50 <lcd_clear>
}
 8007726:	bf00      	nop
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	2000023d 	.word	0x2000023d
 8007734:	0800db28 	.word	0x0800db28
 8007738:	0800db3c 	.word	0x0800db3c
 800773c:	0800db50 	.word	0x0800db50
 8007740:	0800db64 	.word	0x0800db64
 8007744:	20000198 	.word	0x20000198
 8007748:	20000348 	.word	0x20000348

0800774c <iotSetup>:

void iotSetup() {
 800774c:	b580      	push	{r7, lr}
 800774e:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8007750:	4b18      	ldr	r3, [pc, #96]	; (80077b4 <iotSetup+0x68>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d01f      	beq.n	8007798 <iotSetup+0x4c>
		if(strlen(machineID) != machineIDCharacterLimit) {
 8007758:	4817      	ldr	r0, [pc, #92]	; (80077b8 <iotSetup+0x6c>)
 800775a:	f7f8 fd63 	bl	8000224 <strlen>
 800775e:	4603      	mov	r3, r0
 8007760:	2b0c      	cmp	r3, #12
 8007762:	d001      	beq.n	8007768 <iotSetup+0x1c>
			takeMachineID();
 8007764:	f7ff fa24 	bl	8006bb0 <takeMachineID>
		}
		HAL_Delay(500);
 8007768:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800776c:	f000 ff1a 	bl	80085a4 <HAL_Delay>

		if(wifiSSID[0] == '\0') {
 8007770:	4b12      	ldr	r3, [pc, #72]	; (80077bc <iotSetup+0x70>)
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d101      	bne.n	800777c <iotSetup+0x30>
			takeWifiSSID();
 8007778:	f7ff fb70 	bl	8006e5c <takeWifiSSID>
		}
		HAL_Delay(500);
 800777c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007780:	f000 ff10 	bl	80085a4 <HAL_Delay>

		if(wifiPass[0] == '\0') {
 8007784:	4b0e      	ldr	r3, [pc, #56]	; (80077c0 <iotSetup+0x74>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d101      	bne.n	8007790 <iotSetup+0x44>
			takeWifiPass();
 800778c:	f7ff fcee 	bl	800716c <takeWifiPass>
		}
		HAL_Delay(500);
 8007790:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007794:	f000 ff06 	bl	80085a4 <HAL_Delay>
	}

	ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8007798:	4a09      	ldr	r2, [pc, #36]	; (80077c0 <iotSetup+0x74>)
 800779a:	4908      	ldr	r1, [pc, #32]	; (80077bc <iotSetup+0x70>)
 800779c:	4809      	ldr	r0, [pc, #36]	; (80077c4 <iotSetup+0x78>)
 800779e:	f7f9 f819 	bl	80007d4 <ESP8266_Init>
	HAL_Delay(500);
 80077a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80077a6:	f000 fefd 	bl	80085a4 <HAL_Delay>
	convertAndSendData();
 80077aa:	f7ff ff89 	bl	80076c0 <convertAndSendData>
}
 80077ae:	bf00      	nop
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	2000023b 	.word	0x2000023b
 80077b8:	20000198 	.word	0x20000198
 80077bc:	200001a4 	.word	0x200001a4
 80077c0:	200001b8 	.word	0x200001b8
 80077c4:	20000348 	.word	0x20000348

080077c8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af02      	add	r7, sp, #8
 80077ce:	4603      	mov	r3, r0
 80077d0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80077d2:	79fb      	ldrb	r3, [r7, #7]
 80077d4:	f023 030f 	bic.w	r3, r3, #15
 80077d8:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80077da:	79fb      	ldrb	r3, [r7, #7]
 80077dc:	011b      	lsls	r3, r3, #4
 80077de:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80077e0:	7b7b      	ldrb	r3, [r7, #13]
 80077e2:	f043 030c 	orr.w	r3, r3, #12
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80077ea:	7b7b      	ldrb	r3, [r7, #13]
 80077ec:	f043 0308 	orr.w	r3, r3, #8
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80077f4:	7b3b      	ldrb	r3, [r7, #12]
 80077f6:	f043 030c 	orr.w	r3, r3, #12
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80077fe:	7b3b      	ldrb	r3, [r7, #12]
 8007800:	f043 0308 	orr.w	r3, r3, #8
 8007804:	b2db      	uxtb	r3, r3
 8007806:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007808:	bf00      	nop
 800780a:	4825      	ldr	r0, [pc, #148]	; (80078a0 <lcd_send_cmd+0xd8>)
 800780c:	f002 fac3 	bl	8009d96 <HAL_I2C_GetError>
 8007810:	4603      	mov	r3, r0
 8007812:	2b04      	cmp	r3, #4
 8007814:	d0f9      	beq.n	800780a <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007816:	bf00      	nop
 8007818:	4821      	ldr	r0, [pc, #132]	; (80078a0 <lcd_send_cmd+0xd8>)
 800781a:	f002 faaf 	bl	8009d7c <HAL_I2C_GetState>
 800781e:	4603      	mov	r3, r0
 8007820:	2b20      	cmp	r3, #32
 8007822:	d1f9      	bne.n	8007818 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007824:	4b1f      	ldr	r3, [pc, #124]	; (80078a4 <lcd_send_cmd+0xdc>)
 8007826:	781b      	ldrb	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d116      	bne.n	800785a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800782c:	2300      	movs	r3, #0
 800782e:	73fb      	strb	r3, [r7, #15]
 8007830:	e00f      	b.n	8007852 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007832:	7bfb      	ldrb	r3, [r7, #15]
 8007834:	3310      	adds	r3, #16
 8007836:	443b      	add	r3, r7
 8007838:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800783c:	7bfb      	ldrb	r3, [r7, #15]
 800783e:	f022 0208 	bic.w	r2, r2, #8
 8007842:	b2d2      	uxtb	r2, r2
 8007844:	3310      	adds	r3, #16
 8007846:	443b      	add	r3, r7
 8007848:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800784c:	7bfb      	ldrb	r3, [r7, #15]
 800784e:	3301      	adds	r3, #1
 8007850:	73fb      	strb	r3, [r7, #15]
 8007852:	7bfb      	ldrb	r3, [r7, #15]
 8007854:	2b03      	cmp	r3, #3
 8007856:	d9ec      	bls.n	8007832 <lcd_send_cmd+0x6a>
 8007858:	e015      	b.n	8007886 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800785a:	2300      	movs	r3, #0
 800785c:	73bb      	strb	r3, [r7, #14]
 800785e:	e00f      	b.n	8007880 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8007860:	7bbb      	ldrb	r3, [r7, #14]
 8007862:	3310      	adds	r3, #16
 8007864:	443b      	add	r3, r7
 8007866:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800786a:	7bbb      	ldrb	r3, [r7, #14]
 800786c:	f042 0208 	orr.w	r2, r2, #8
 8007870:	b2d2      	uxtb	r2, r2
 8007872:	3310      	adds	r3, #16
 8007874:	443b      	add	r3, r7
 8007876:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	3301      	adds	r3, #1
 800787e:	73bb      	strb	r3, [r7, #14]
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	2b03      	cmp	r3, #3
 8007884:	d9ec      	bls.n	8007860 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007886:	f107 0208 	add.w	r2, r7, #8
 800788a:	2364      	movs	r3, #100	; 0x64
 800788c:	9300      	str	r3, [sp, #0]
 800788e:	2304      	movs	r3, #4
 8007890:	214e      	movs	r1, #78	; 0x4e
 8007892:	4803      	ldr	r0, [pc, #12]	; (80078a0 <lcd_send_cmd+0xd8>)
 8007894:	f001 fe12 	bl	80094bc <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007898:	bf00      	nop
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	200002ac 	.word	0x200002ac
 80078a4:	20000280 	.word	0x20000280

080078a8 <lcd_send_data>:

void lcd_send_data (char data) {
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af02      	add	r7, sp, #8
 80078ae:	4603      	mov	r3, r0
 80078b0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80078b2:	79fb      	ldrb	r3, [r7, #7]
 80078b4:	f023 030f 	bic.w	r3, r3, #15
 80078b8:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 80078ba:	79fb      	ldrb	r3, [r7, #7]
 80078bc:	011b      	lsls	r3, r3, #4
 80078be:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80078c0:	7b7b      	ldrb	r3, [r7, #13]
 80078c2:	f043 030d 	orr.w	r3, r3, #13
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80078ca:	7b7b      	ldrb	r3, [r7, #13]
 80078cc:	f043 0309 	orr.w	r3, r3, #9
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80078d4:	7b3b      	ldrb	r3, [r7, #12]
 80078d6:	f043 030d 	orr.w	r3, r3, #13
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80078de:	7b3b      	ldrb	r3, [r7, #12]
 80078e0:	f043 0309 	orr.w	r3, r3, #9
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80078e8:	bf00      	nop
 80078ea:	4825      	ldr	r0, [pc, #148]	; (8007980 <lcd_send_data+0xd8>)
 80078ec:	f002 fa53 	bl	8009d96 <HAL_I2C_GetError>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d0f9      	beq.n	80078ea <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80078f6:	bf00      	nop
 80078f8:	4821      	ldr	r0, [pc, #132]	; (8007980 <lcd_send_data+0xd8>)
 80078fa:	f002 fa3f 	bl	8009d7c <HAL_I2C_GetState>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b20      	cmp	r3, #32
 8007902:	d1f9      	bne.n	80078f8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8007904:	4b1f      	ldr	r3, [pc, #124]	; (8007984 <lcd_send_data+0xdc>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d116      	bne.n	800793a <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800790c:	2300      	movs	r3, #0
 800790e:	73fb      	strb	r3, [r7, #15]
 8007910:	e00f      	b.n	8007932 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	3310      	adds	r3, #16
 8007916:	443b      	add	r3, r7
 8007918:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800791c:	7bfb      	ldrb	r3, [r7, #15]
 800791e:	f022 0208 	bic.w	r2, r2, #8
 8007922:	b2d2      	uxtb	r2, r2
 8007924:	3310      	adds	r3, #16
 8007926:	443b      	add	r3, r7
 8007928:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800792c:	7bfb      	ldrb	r3, [r7, #15]
 800792e:	3301      	adds	r3, #1
 8007930:	73fb      	strb	r3, [r7, #15]
 8007932:	7bfb      	ldrb	r3, [r7, #15]
 8007934:	2b03      	cmp	r3, #3
 8007936:	d9ec      	bls.n	8007912 <lcd_send_data+0x6a>
 8007938:	e015      	b.n	8007966 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800793a:	2300      	movs	r3, #0
 800793c:	73bb      	strb	r3, [r7, #14]
 800793e:	e00f      	b.n	8007960 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8007940:	7bbb      	ldrb	r3, [r7, #14]
 8007942:	3310      	adds	r3, #16
 8007944:	443b      	add	r3, r7
 8007946:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800794a:	7bbb      	ldrb	r3, [r7, #14]
 800794c:	f042 0208 	orr.w	r2, r2, #8
 8007950:	b2d2      	uxtb	r2, r2
 8007952:	3310      	adds	r3, #16
 8007954:	443b      	add	r3, r7
 8007956:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800795a:	7bbb      	ldrb	r3, [r7, #14]
 800795c:	3301      	adds	r3, #1
 800795e:	73bb      	strb	r3, [r7, #14]
 8007960:	7bbb      	ldrb	r3, [r7, #14]
 8007962:	2b03      	cmp	r3, #3
 8007964:	d9ec      	bls.n	8007940 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8007966:	f107 0208 	add.w	r2, r7, #8
 800796a:	2364      	movs	r3, #100	; 0x64
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	2304      	movs	r3, #4
 8007970:	214e      	movs	r1, #78	; 0x4e
 8007972:	4803      	ldr	r0, [pc, #12]	; (8007980 <lcd_send_data+0xd8>)
 8007974:	f001 fda2 	bl	80094bc <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8007978:	bf00      	nop
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}
 8007980:	200002ac 	.word	0x200002ac
 8007984:	20000280 	.word	0x20000280

08007988 <lcd_send_string>:

void lcd_send_string (char *str) {
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8007990:	e006      	b.n	80079a0 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	607a      	str	r2, [r7, #4]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	4618      	mov	r0, r3
 800799c:	f7ff ff84 	bl	80078a8 <lcd_send_data>
	while (*str) {
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d1f4      	bne.n	8007992 <lcd_send_string+0xa>
	}
}
 80079a8:	bf00      	nop
 80079aa:	bf00      	nop
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
	...

080079b4 <lcd_send_char>:

void lcd_send_char(char ch) {
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b086      	sub	sp, #24
 80079b8:	af02      	add	r7, sp, #8
 80079ba:	4603      	mov	r3, r0
 80079bc:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 80079be:	79fb      	ldrb	r3, [r7, #7]
 80079c0:	f023 030f 	bic.w	r3, r3, #15
 80079c4:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	011b      	lsls	r3, r3, #4
 80079ca:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80079cc:	7b7b      	ldrb	r3, [r7, #13]
 80079ce:	f043 030d 	orr.w	r3, r3, #13
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 80079d6:	7b7b      	ldrb	r3, [r7, #13]
 80079d8:	f043 0309 	orr.w	r3, r3, #9
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80079e0:	7b3b      	ldrb	r3, [r7, #12]
 80079e2:	f043 030d 	orr.w	r3, r3, #13
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80079ea:	7b3b      	ldrb	r3, [r7, #12]
 80079ec:	f043 0309 	orr.w	r3, r3, #9
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80079f4:	bf00      	nop
 80079f6:	4825      	ldr	r0, [pc, #148]	; (8007a8c <lcd_send_char+0xd8>)
 80079f8:	f002 f9cd 	bl	8009d96 <HAL_I2C_GetError>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b04      	cmp	r3, #4
 8007a00:	d0f9      	beq.n	80079f6 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007a02:	bf00      	nop
 8007a04:	4821      	ldr	r0, [pc, #132]	; (8007a8c <lcd_send_char+0xd8>)
 8007a06:	f002 f9b9 	bl	8009d7c <HAL_I2C_GetState>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d1f9      	bne.n	8007a04 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8007a10:	4b1f      	ldr	r3, [pc, #124]	; (8007a90 <lcd_send_char+0xdc>)
 8007a12:	781b      	ldrb	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d116      	bne.n	8007a46 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8007a18:	2300      	movs	r3, #0
 8007a1a:	73fb      	strb	r3, [r7, #15]
 8007a1c:	e00f      	b.n	8007a3e <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
 8007a20:	3310      	adds	r3, #16
 8007a22:	443b      	add	r3, r7
 8007a24:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a28:	7bfb      	ldrb	r3, [r7, #15]
 8007a2a:	f022 0208 	bic.w	r2, r2, #8
 8007a2e:	b2d2      	uxtb	r2, r2
 8007a30:	3310      	adds	r3, #16
 8007a32:	443b      	add	r3, r7
 8007a34:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	73fb      	strb	r3, [r7, #15]
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	d9ec      	bls.n	8007a1e <lcd_send_char+0x6a>
 8007a44:	e015      	b.n	8007a72 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8007a46:	2300      	movs	r3, #0
 8007a48:	73bb      	strb	r3, [r7, #14]
 8007a4a:	e00f      	b.n	8007a6c <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	3310      	adds	r3, #16
 8007a50:	443b      	add	r3, r7
 8007a52:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8007a56:	7bbb      	ldrb	r3, [r7, #14]
 8007a58:	f042 0208 	orr.w	r2, r2, #8
 8007a5c:	b2d2      	uxtb	r2, r2
 8007a5e:	3310      	adds	r3, #16
 8007a60:	443b      	add	r3, r7
 8007a62:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8007a66:	7bbb      	ldrb	r3, [r7, #14]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	73bb      	strb	r3, [r7, #14]
 8007a6c:	7bbb      	ldrb	r3, [r7, #14]
 8007a6e:	2b03      	cmp	r3, #3
 8007a70:	d9ec      	bls.n	8007a4c <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8007a72:	f107 0208 	add.w	r2, r7, #8
 8007a76:	2364      	movs	r3, #100	; 0x64
 8007a78:	9300      	str	r3, [sp, #0]
 8007a7a:	2304      	movs	r3, #4
 8007a7c:	214e      	movs	r1, #78	; 0x4e
 8007a7e:	4803      	ldr	r0, [pc, #12]	; (8007a8c <lcd_send_char+0xd8>)
 8007a80:	f001 fd1c 	bl	80094bc <HAL_I2C_Master_Transmit>
}
 8007a84:	bf00      	nop
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	200002ac 	.word	0x200002ac
 8007a90:	20000280 	.word	0x20000280

08007a94 <lcd_init>:

void lcd_init (void) {
 8007a94:	b580      	push	{r7, lr}
 8007a96:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8007a98:	2002      	movs	r0, #2
 8007a9a:	f7ff fe95 	bl	80077c8 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8007a9e:	2028      	movs	r0, #40	; 0x28
 8007aa0:	f7ff fe92 	bl	80077c8 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8007aa4:	200c      	movs	r0, #12
 8007aa6:	f7ff fe8f 	bl	80077c8 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8007aaa:	2080      	movs	r0, #128	; 0x80
 8007aac:	f7ff fe8c 	bl	80077c8 <lcd_send_cmd>
	lcd_backlight(1);
 8007ab0:	2001      	movs	r0, #1
 8007ab2:	f000 f86d 	bl	8007b90 <lcd_backlight>
}
 8007ab6:	bf00      	nop
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	460a      	mov	r2, r1
 8007ac4:	71fb      	strb	r3, [r7, #7]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8007aca:	79fb      	ldrb	r3, [r7, #7]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d106      	bne.n	8007ade <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8007ad0:	79bb      	ldrb	r3, [r7, #6]
 8007ad2:	337f      	adds	r3, #127	; 0x7f
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7ff fe76 	bl	80077c8 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8007adc:	e008      	b.n	8007af0 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8007ade:	79fb      	ldrb	r3, [r7, #7]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d105      	bne.n	8007af0 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8007ae4:	79bb      	ldrb	r3, [r7, #6]
 8007ae6:	3b41      	subs	r3, #65	; 0x41
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff fe6c 	bl	80077c8 <lcd_send_cmd>
}
 8007af0:	bf00      	nop
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	4603      	mov	r3, r0
 8007b00:	603a      	str	r2, [r7, #0]
 8007b02:	71fb      	strb	r3, [r7, #7]
 8007b04:	460b      	mov	r3, r1
 8007b06:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8007b08:	79ba      	ldrb	r2, [r7, #6]
 8007b0a:	79fb      	ldrb	r3, [r7, #7]
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7ff ffd3 	bl	8007aba <lcd_gotoxy>
	lcd_send_string(str);
 8007b14:	6838      	ldr	r0, [r7, #0]
 8007b16:	f7ff ff37 	bl	8007988 <lcd_send_string>
}
 8007b1a:	bf00      	nop
 8007b1c:	3708      	adds	r7, #8
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b082      	sub	sp, #8
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	4603      	mov	r3, r0
 8007b2a:	71fb      	strb	r3, [r7, #7]
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	71bb      	strb	r3, [r7, #6]
 8007b30:	4613      	mov	r3, r2
 8007b32:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8007b34:	79ba      	ldrb	r2, [r7, #6]
 8007b36:	79fb      	ldrb	r3, [r7, #7]
 8007b38:	4611      	mov	r1, r2
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7ff ffbd 	bl	8007aba <lcd_gotoxy>
    lcd_send_char(ch);
 8007b40:	797b      	ldrb	r3, [r7, #5]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7ff ff36 	bl	80079b4 <lcd_send_char>
}
 8007b48:	bf00      	nop
 8007b4a:	3708      	adds	r7, #8
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <lcd_clear>:

void lcd_clear(void) {
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8007b54:	2001      	movs	r0, #1
 8007b56:	f7ff fe37 	bl	80077c8 <lcd_send_cmd>
    HAL_Delay(2);
 8007b5a:	2002      	movs	r0, #2
 8007b5c:	f000 fd22 	bl	80085a4 <HAL_Delay>
}
 8007b60:	bf00      	nop
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	460a      	mov	r2, r1
 8007b6e:	71fb      	strb	r3, [r7, #7]
 8007b70:	4613      	mov	r3, r2
 8007b72:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8007b74:	79ba      	ldrb	r2, [r7, #6]
 8007b76:	79fb      	ldrb	r3, [r7, #7]
 8007b78:	4611      	mov	r1, r2
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7ff ff9d 	bl	8007aba <lcd_gotoxy>

    lcd_send_char(' ');
 8007b80:	2020      	movs	r0, #32
 8007b82:	f7ff ff17 	bl	80079b4 <lcd_send_char>
}
 8007b86:	bf00      	nop
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
	...

08007b90 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	4603      	mov	r3, r0
 8007b98:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8007b9a:	4a05      	ldr	r2, [pc, #20]	; (8007bb0 <lcd_backlight+0x20>)
 8007b9c:	79fb      	ldrb	r3, [r7, #7]
 8007b9e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	f7ff fe11 	bl	80077c8 <lcd_send_cmd>
}
 8007ba6:	bf00      	nop
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	20000280 	.word	0x20000280

08007bb4 <lcd_cursor>:

void lcd_cursor(int state) {
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d106      	bne.n	8007bd0 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8007bc2:	200e      	movs	r0, #14
 8007bc4:	f7ff fe00 	bl	80077c8 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8007bc8:	200f      	movs	r0, #15
 8007bca:	f7ff fdfd 	bl	80077c8 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8007bce:	e002      	b.n	8007bd6 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8007bd0:	200c      	movs	r0, #12
 8007bd2:	f7ff fdf9 	bl	80077c8 <lcd_send_cmd>
}
 8007bd6:	bf00      	nop
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
	...

08007be0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007be8:	4b04      	ldr	r3, [pc, #16]	; (8007bfc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	3301      	adds	r3, #1
 8007bee:	4a03      	ldr	r2, [pc, #12]	; (8007bfc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007bf0:	6013      	str	r3, [r2, #0]
}
 8007bf2:	bf00      	nop
 8007bf4:	370c      	adds	r7, #12
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bc80      	pop	{r7}
 8007bfa:	4770      	bx	lr
 8007bfc:	200001f8 	.word	0x200001f8

08007c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007c04:	f000 fc6c 	bl	80084e0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007c08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c0c:	f000 fcca 	bl	80085a4 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007c10:	f000 f89c 	bl	8007d4c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007c14:	f000 f9be 	bl	8007f94 <MX_GPIO_Init>
  MX_CAN_Init();
 8007c18:	f000 f8de 	bl	8007dd8 <MX_CAN_Init>
  MX_I2C1_Init();
 8007c1c:	f000 f910 	bl	8007e40 <MX_I2C1_Init>
  MX_TIM1_Init();
 8007c20:	f000 f93c 	bl	8007e9c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8007c24:	f000 f98c 	bl	8007f40 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8007c28:	2201      	movs	r2, #1
 8007c2a:	2140      	movs	r1, #64	; 0x40
 8007c2c:	483e      	ldr	r0, [pc, #248]	; (8007d28 <main+0x128>)
 8007c2e:	f001 faa0 	bl	8009172 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8007c32:	2201      	movs	r2, #1
 8007c34:	2180      	movs	r1, #128	; 0x80
 8007c36:	483c      	ldr	r0, [pc, #240]	; (8007d28 <main+0x128>)
 8007c38:	f001 fa9b 	bl	8009172 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8007c3c:	200a      	movs	r0, #10
 8007c3e:	f000 fcb1 	bl	80085a4 <HAL_Delay>
  lcd_init();
 8007c42:	f7ff ff27 	bl	8007a94 <lcd_init>
  HAL_Delay(10);
 8007c46:	200a      	movs	r0, #10
 8007c48:	f000 fcac 	bl	80085a4 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8007c4c:	4837      	ldr	r0, [pc, #220]	; (8007d2c <main+0x12c>)
 8007c4e:	f003 f943 	bl	800aed8 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8007c52:	bf00      	nop
 8007c54:	4836      	ldr	r0, [pc, #216]	; (8007d30 <main+0x130>)
 8007c56:	f002 f89e 	bl	8009d96 <HAL_I2C_GetError>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	d0f9      	beq.n	8007c54 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007c60:	bf00      	nop
 8007c62:	4833      	ldr	r0, [pc, #204]	; (8007d30 <main+0x130>)
 8007c64:	f002 f88a 	bl	8009d7c <HAL_I2C_GetState>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b20      	cmp	r3, #32
 8007c6c:	d1f9      	bne.n	8007c62 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c74:	482c      	ldr	r0, [pc, #176]	; (8007d28 <main+0x128>)
 8007c76:	f001 fa7c 	bl	8009172 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c80:	4829      	ldr	r0, [pc, #164]	; (8007d28 <main+0x128>)
 8007c82:	f001 fa76 	bl	8009172 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007c86:	2200      	movs	r2, #0
 8007c88:	2104      	movs	r1, #4
 8007c8a:	4827      	ldr	r0, [pc, #156]	; (8007d28 <main+0x128>)
 8007c8c:	f001 fa71 	bl	8009172 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007c90:	2200      	movs	r2, #0
 8007c92:	2102      	movs	r1, #2
 8007c94:	4824      	ldr	r0, [pc, #144]	; (8007d28 <main+0x128>)
 8007c96:	f001 fa6c 	bl	8009172 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2101      	movs	r1, #1
 8007c9e:	4822      	ldr	r0, [pc, #136]	; (8007d28 <main+0x128>)
 8007ca0:	f001 fa67 	bl	8009172 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	2120      	movs	r1, #32
 8007ca8:	4822      	ldr	r0, [pc, #136]	; (8007d34 <main+0x134>)
 8007caa:	f001 fa62 	bl	8009172 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007cae:	2200      	movs	r2, #0
 8007cb0:	2110      	movs	r1, #16
 8007cb2:	4820      	ldr	r0, [pc, #128]	; (8007d34 <main+0x134>)
 8007cb4:	f001 fa5d 	bl	8009172 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007cb8:	2200      	movs	r2, #0
 8007cba:	2180      	movs	r1, #128	; 0x80
 8007cbc:	481e      	ldr	r0, [pc, #120]	; (8007d38 <main+0x138>)
 8007cbe:	f001 fa58 	bl	8009172 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	2140      	movs	r1, #64	; 0x40
 8007cc6:	481c      	ldr	r0, [pc, #112]	; (8007d38 <main+0x138>)
 8007cc8:	f001 fa53 	bl	8009172 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2120      	movs	r1, #32
 8007cd0:	4819      	ldr	r0, [pc, #100]	; (8007d38 <main+0x138>)
 8007cd2:	f001 fa4e 	bl	8009172 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	2110      	movs	r1, #16
 8007cda:	4817      	ldr	r0, [pc, #92]	; (8007d38 <main+0x138>)
 8007cdc:	f001 fa49 	bl	8009172 <HAL_GPIO_WritePin>

  i2cTest();
 8007ce0:	f7f8 ff7a 	bl	8000bd8 <i2cTest>
  HAL_Delay(100);
 8007ce4:	2064      	movs	r0, #100	; 0x64
 8007ce6:	f000 fc5d 	bl	80085a4 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007cea:	4a14      	ldr	r2, [pc, #80]	; (8007d3c <main+0x13c>)
 8007cec:	2101      	movs	r1, #1
 8007cee:	2001      	movs	r0, #1
 8007cf0:	f7ff ff02 	bl	8007af8 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8007cf4:	4a12      	ldr	r2, [pc, #72]	; (8007d40 <main+0x140>)
 8007cf6:	2101      	movs	r1, #1
 8007cf8:	2002      	movs	r0, #2
 8007cfa:	f7ff fefd 	bl	8007af8 <lcd_print>
  HAL_Delay(1000);
 8007cfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d02:	f000 fc4f 	bl	80085a4 <HAL_Delay>
  lcd_clear();
 8007d06:	f7ff ff23 	bl	8007b50 <lcd_clear>

  eepromKontrol();
 8007d0a:	f7f8 fa93 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8007d0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007d12:	f000 fc47 	bl	80085a4 <HAL_Delay>

  backLightTimer = millis;
 8007d16:	4b0b      	ldr	r3, [pc, #44]	; (8007d44 <main+0x144>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a0b      	ldr	r2, [pc, #44]	; (8007d48 <main+0x148>)
 8007d1c:	6013      	str	r3, [r2, #0]

  iotSetup();
 8007d1e:	f7ff fd15 	bl	800774c <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8007d22:	f7fe fdad 	bl	8006880 <mainLoop>
 8007d26:	e7fc      	b.n	8007d22 <main+0x122>
 8007d28:	40010c00 	.word	0x40010c00
 8007d2c:	20000300 	.word	0x20000300
 8007d30:	200002ac 	.word	0x200002ac
 8007d34:	40011000 	.word	0x40011000
 8007d38:	40010800 	.word	0x40010800
 8007d3c:	0800db78 	.word	0x0800db78
 8007d40:	0800db8c 	.word	0x0800db8c
 8007d44:	200001f8 	.word	0x200001f8
 8007d48:	20000214 	.word	0x20000214

08007d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b090      	sub	sp, #64	; 0x40
 8007d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007d52:	f107 0318 	add.w	r3, r7, #24
 8007d56:	2228      	movs	r2, #40	; 0x28
 8007d58:	2100      	movs	r1, #0
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f004 fb79 	bl	800c452 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007d60:	1d3b      	adds	r3, r7, #4
 8007d62:	2200      	movs	r2, #0
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	605a      	str	r2, [r3, #4]
 8007d68:	609a      	str	r2, [r3, #8]
 8007d6a:	60da      	str	r2, [r3, #12]
 8007d6c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007d6e:	2301      	movs	r3, #1
 8007d70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007d72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007d80:	2302      	movs	r3, #2
 8007d82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007d84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007d88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007d8a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8007d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007d90:	f107 0318 	add.w	r3, r7, #24
 8007d94:	4618      	mov	r0, r3
 8007d96:	f002 fc3f 	bl	800a618 <HAL_RCC_OscConfig>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d001      	beq.n	8007da4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8007da0:	f000 f9a2 	bl	80080e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007da4:	230f      	movs	r3, #15
 8007da6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007da8:	2302      	movs	r3, #2
 8007daa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007dac:	2300      	movs	r3, #0
 8007dae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007db4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007db6:	2300      	movs	r3, #0
 8007db8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007dba:	1d3b      	adds	r3, r7, #4
 8007dbc:	2102      	movs	r1, #2
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f002 feac 	bl	800ab1c <HAL_RCC_ClockConfig>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007dca:	f000 f98d 	bl	80080e8 <Error_Handler>
  }
}
 8007dce:	bf00      	nop
 8007dd0:	3740      	adds	r7, #64	; 0x40
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007ddc:	4b16      	ldr	r3, [pc, #88]	; (8007e38 <MX_CAN_Init+0x60>)
 8007dde:	4a17      	ldr	r2, [pc, #92]	; (8007e3c <MX_CAN_Init+0x64>)
 8007de0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8007de2:	4b15      	ldr	r3, [pc, #84]	; (8007e38 <MX_CAN_Init+0x60>)
 8007de4:	2210      	movs	r2, #16
 8007de6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007de8:	4b13      	ldr	r3, [pc, #76]	; (8007e38 <MX_CAN_Init+0x60>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007dee:	4b12      	ldr	r3, [pc, #72]	; (8007e38 <MX_CAN_Init+0x60>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007df4:	4b10      	ldr	r3, [pc, #64]	; (8007e38 <MX_CAN_Init+0x60>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007dfa:	4b0f      	ldr	r3, [pc, #60]	; (8007e38 <MX_CAN_Init+0x60>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8007e00:	4b0d      	ldr	r3, [pc, #52]	; (8007e38 <MX_CAN_Init+0x60>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007e06:	4b0c      	ldr	r3, [pc, #48]	; (8007e38 <MX_CAN_Init+0x60>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007e0c:	4b0a      	ldr	r3, [pc, #40]	; (8007e38 <MX_CAN_Init+0x60>)
 8007e0e:	2200      	movs	r2, #0
 8007e10:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8007e12:	4b09      	ldr	r3, [pc, #36]	; (8007e38 <MX_CAN_Init+0x60>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8007e18:	4b07      	ldr	r3, [pc, #28]	; (8007e38 <MX_CAN_Init+0x60>)
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8007e1e:	4b06      	ldr	r3, [pc, #24]	; (8007e38 <MX_CAN_Init+0x60>)
 8007e20:	2200      	movs	r2, #0
 8007e22:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8007e24:	4804      	ldr	r0, [pc, #16]	; (8007e38 <MX_CAN_Init+0x60>)
 8007e26:	f000 fbe1 	bl	80085ec <HAL_CAN_Init>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8007e30:	f000 f95a 	bl	80080e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8007e34:	bf00      	nop
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	20000284 	.word	0x20000284
 8007e3c:	40006400 	.word	0x40006400

08007e40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007e44:	4b12      	ldr	r3, [pc, #72]	; (8007e90 <MX_I2C1_Init+0x50>)
 8007e46:	4a13      	ldr	r2, [pc, #76]	; (8007e94 <MX_I2C1_Init+0x54>)
 8007e48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8007e4a:	4b11      	ldr	r3, [pc, #68]	; (8007e90 <MX_I2C1_Init+0x50>)
 8007e4c:	4a12      	ldr	r2, [pc, #72]	; (8007e98 <MX_I2C1_Init+0x58>)
 8007e4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007e50:	4b0f      	ldr	r3, [pc, #60]	; (8007e90 <MX_I2C1_Init+0x50>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007e56:	4b0e      	ldr	r3, [pc, #56]	; (8007e90 <MX_I2C1_Init+0x50>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007e5c:	4b0c      	ldr	r3, [pc, #48]	; (8007e90 <MX_I2C1_Init+0x50>)
 8007e5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007e62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007e64:	4b0a      	ldr	r3, [pc, #40]	; (8007e90 <MX_I2C1_Init+0x50>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007e6a:	4b09      	ldr	r3, [pc, #36]	; (8007e90 <MX_I2C1_Init+0x50>)
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007e70:	4b07      	ldr	r3, [pc, #28]	; (8007e90 <MX_I2C1_Init+0x50>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007e76:	4b06      	ldr	r3, [pc, #24]	; (8007e90 <MX_I2C1_Init+0x50>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007e7c:	4804      	ldr	r0, [pc, #16]	; (8007e90 <MX_I2C1_Init+0x50>)
 8007e7e:	f001 f9a9 	bl	80091d4 <HAL_I2C_Init>
 8007e82:	4603      	mov	r3, r0
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007e88:	f000 f92e 	bl	80080e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007e8c:	bf00      	nop
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	200002ac 	.word	0x200002ac
 8007e94:	40005400 	.word	0x40005400
 8007e98:	00061a80 	.word	0x00061a80

08007e9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007ea2:	f107 0308 	add.w	r3, r7, #8
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	601a      	str	r2, [r3, #0]
 8007eaa:	605a      	str	r2, [r3, #4]
 8007eac:	609a      	str	r2, [r3, #8]
 8007eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007eb0:	463b      	mov	r3, r7
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007eb8:	4b1f      	ldr	r3, [pc, #124]	; (8007f38 <MX_TIM1_Init+0x9c>)
 8007eba:	4a20      	ldr	r2, [pc, #128]	; (8007f3c <MX_TIM1_Init+0xa0>)
 8007ebc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8007ebe:	4b1e      	ldr	r3, [pc, #120]	; (8007f38 <MX_TIM1_Init+0x9c>)
 8007ec0:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007ec4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ec6:	4b1c      	ldr	r3, [pc, #112]	; (8007f38 <MX_TIM1_Init+0x9c>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007ecc:	4b1a      	ldr	r3, [pc, #104]	; (8007f38 <MX_TIM1_Init+0x9c>)
 8007ece:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007ed2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ed4:	4b18      	ldr	r3, [pc, #96]	; (8007f38 <MX_TIM1_Init+0x9c>)
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007eda:	4b17      	ldr	r3, [pc, #92]	; (8007f38 <MX_TIM1_Init+0x9c>)
 8007edc:	2200      	movs	r2, #0
 8007ede:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ee0:	4b15      	ldr	r3, [pc, #84]	; (8007f38 <MX_TIM1_Init+0x9c>)
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007ee6:	4814      	ldr	r0, [pc, #80]	; (8007f38 <MX_TIM1_Init+0x9c>)
 8007ee8:	f002 ffa6 	bl	800ae38 <HAL_TIM_Base_Init>
 8007eec:	4603      	mov	r3, r0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d001      	beq.n	8007ef6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8007ef2:	f000 f8f9 	bl	80080e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007efa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007efc:	f107 0308 	add.w	r3, r7, #8
 8007f00:	4619      	mov	r1, r3
 8007f02:	480d      	ldr	r0, [pc, #52]	; (8007f38 <MX_TIM1_Init+0x9c>)
 8007f04:	f003 f950 	bl	800b1a8 <HAL_TIM_ConfigClockSource>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8007f0e:	f000 f8eb 	bl	80080e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007f12:	2300      	movs	r3, #0
 8007f14:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f16:	2300      	movs	r3, #0
 8007f18:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007f1a:	463b      	mov	r3, r7
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	4806      	ldr	r0, [pc, #24]	; (8007f38 <MX_TIM1_Init+0x9c>)
 8007f20:	f003 fb3e 	bl	800b5a0 <HAL_TIMEx_MasterConfigSynchronization>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007f2a:	f000 f8dd 	bl	80080e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8007f2e:	bf00      	nop
 8007f30:	3718      	adds	r7, #24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	20000300 	.word	0x20000300
 8007f3c:	40012c00 	.word	0x40012c00

08007f40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007f44:	4b11      	ldr	r3, [pc, #68]	; (8007f8c <MX_USART1_UART_Init+0x4c>)
 8007f46:	4a12      	ldr	r2, [pc, #72]	; (8007f90 <MX_USART1_UART_Init+0x50>)
 8007f48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007f4a:	4b10      	ldr	r3, [pc, #64]	; (8007f8c <MX_USART1_UART_Init+0x4c>)
 8007f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007f50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007f52:	4b0e      	ldr	r3, [pc, #56]	; (8007f8c <MX_USART1_UART_Init+0x4c>)
 8007f54:	2200      	movs	r2, #0
 8007f56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007f58:	4b0c      	ldr	r3, [pc, #48]	; (8007f8c <MX_USART1_UART_Init+0x4c>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007f5e:	4b0b      	ldr	r3, [pc, #44]	; (8007f8c <MX_USART1_UART_Init+0x4c>)
 8007f60:	2200      	movs	r2, #0
 8007f62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007f64:	4b09      	ldr	r3, [pc, #36]	; (8007f8c <MX_USART1_UART_Init+0x4c>)
 8007f66:	220c      	movs	r2, #12
 8007f68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007f6a:	4b08      	ldr	r3, [pc, #32]	; (8007f8c <MX_USART1_UART_Init+0x4c>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007f70:	4b06      	ldr	r3, [pc, #24]	; (8007f8c <MX_USART1_UART_Init+0x4c>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007f76:	4805      	ldr	r0, [pc, #20]	; (8007f8c <MX_USART1_UART_Init+0x4c>)
 8007f78:	f003 fb90 	bl	800b69c <HAL_UART_Init>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8007f82:	f000 f8b1 	bl	80080e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007f86:	bf00      	nop
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20000348 	.word	0x20000348
 8007f90:	40013800 	.word	0x40013800

08007f94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b088      	sub	sp, #32
 8007f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f9a:	f107 0310 	add.w	r3, r7, #16
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	601a      	str	r2, [r3, #0]
 8007fa2:	605a      	str	r2, [r3, #4]
 8007fa4:	609a      	str	r2, [r3, #8]
 8007fa6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007fa8:	4b4b      	ldr	r3, [pc, #300]	; (80080d8 <MX_GPIO_Init+0x144>)
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	4a4a      	ldr	r2, [pc, #296]	; (80080d8 <MX_GPIO_Init+0x144>)
 8007fae:	f043 0310 	orr.w	r3, r3, #16
 8007fb2:	6193      	str	r3, [r2, #24]
 8007fb4:	4b48      	ldr	r3, [pc, #288]	; (80080d8 <MX_GPIO_Init+0x144>)
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	f003 0310 	and.w	r3, r3, #16
 8007fbc:	60fb      	str	r3, [r7, #12]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007fc0:	4b45      	ldr	r3, [pc, #276]	; (80080d8 <MX_GPIO_Init+0x144>)
 8007fc2:	699b      	ldr	r3, [r3, #24]
 8007fc4:	4a44      	ldr	r2, [pc, #272]	; (80080d8 <MX_GPIO_Init+0x144>)
 8007fc6:	f043 0320 	orr.w	r3, r3, #32
 8007fca:	6193      	str	r3, [r2, #24]
 8007fcc:	4b42      	ldr	r3, [pc, #264]	; (80080d8 <MX_GPIO_Init+0x144>)
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	f003 0320 	and.w	r3, r3, #32
 8007fd4:	60bb      	str	r3, [r7, #8]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fd8:	4b3f      	ldr	r3, [pc, #252]	; (80080d8 <MX_GPIO_Init+0x144>)
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	4a3e      	ldr	r2, [pc, #248]	; (80080d8 <MX_GPIO_Init+0x144>)
 8007fde:	f043 0304 	orr.w	r3, r3, #4
 8007fe2:	6193      	str	r3, [r2, #24]
 8007fe4:	4b3c      	ldr	r3, [pc, #240]	; (80080d8 <MX_GPIO_Init+0x144>)
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	f003 0304 	and.w	r3, r3, #4
 8007fec:	607b      	str	r3, [r7, #4]
 8007fee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ff0:	4b39      	ldr	r3, [pc, #228]	; (80080d8 <MX_GPIO_Init+0x144>)
 8007ff2:	699b      	ldr	r3, [r3, #24]
 8007ff4:	4a38      	ldr	r2, [pc, #224]	; (80080d8 <MX_GPIO_Init+0x144>)
 8007ff6:	f043 0308 	orr.w	r3, r3, #8
 8007ffa:	6193      	str	r3, [r2, #24]
 8007ffc:	4b36      	ldr	r3, [pc, #216]	; (80080d8 <MX_GPIO_Init+0x144>)
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	f003 0308 	and.w	r3, r3, #8
 8008004:	603b      	str	r3, [r7, #0]
 8008006:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008008:	2200      	movs	r2, #0
 800800a:	21f0      	movs	r1, #240	; 0xf0
 800800c:	4833      	ldr	r0, [pc, #204]	; (80080dc <MX_GPIO_Init+0x148>)
 800800e:	f001 f8b0 	bl	8009172 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008012:	2200      	movs	r2, #0
 8008014:	f241 0130 	movw	r1, #4144	; 0x1030
 8008018:	4831      	ldr	r0, [pc, #196]	; (80080e0 <MX_GPIO_Init+0x14c>)
 800801a:	f001 f8aa 	bl	8009172 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800801e:	2200      	movs	r2, #0
 8008020:	f640 4107 	movw	r1, #3079	; 0xc07
 8008024:	482f      	ldr	r0, [pc, #188]	; (80080e4 <MX_GPIO_Init+0x150>)
 8008026:	f001 f8a4 	bl	8009172 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800802a:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 800802e:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008030:	2300      	movs	r3, #0
 8008032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008034:	2300      	movs	r3, #0
 8008036:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008038:	f107 0310 	add.w	r3, r7, #16
 800803c:	4619      	mov	r1, r3
 800803e:	4828      	ldr	r0, [pc, #160]	; (80080e0 <MX_GPIO_Init+0x14c>)
 8008040:	f000 fe20 	bl	8008c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008044:	f248 130f 	movw	r3, #33039	; 0x810f
 8008048:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800804a:	2300      	movs	r3, #0
 800804c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800804e:	2300      	movs	r3, #0
 8008050:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008052:	f107 0310 	add.w	r3, r7, #16
 8008056:	4619      	mov	r1, r3
 8008058:	4820      	ldr	r0, [pc, #128]	; (80080dc <MX_GPIO_Init+0x148>)
 800805a:	f000 fe13 	bl	8008c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800805e:	23f0      	movs	r3, #240	; 0xf0
 8008060:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008062:	2301      	movs	r3, #1
 8008064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008066:	2300      	movs	r3, #0
 8008068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800806a:	2302      	movs	r3, #2
 800806c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800806e:	f107 0310 	add.w	r3, r7, #16
 8008072:	4619      	mov	r1, r3
 8008074:	4819      	ldr	r0, [pc, #100]	; (80080dc <MX_GPIO_Init+0x148>)
 8008076:	f000 fe05 	bl	8008c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800807a:	f241 0330 	movw	r3, #4144	; 0x1030
 800807e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008080:	2301      	movs	r3, #1
 8008082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008084:	2300      	movs	r3, #0
 8008086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008088:	2302      	movs	r3, #2
 800808a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800808c:	f107 0310 	add.w	r3, r7, #16
 8008090:	4619      	mov	r1, r3
 8008092:	4813      	ldr	r0, [pc, #76]	; (80080e0 <MX_GPIO_Init+0x14c>)
 8008094:	f000 fdf6 	bl	8008c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008098:	f640 4307 	movw	r3, #3079	; 0xc07
 800809c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800809e:	2301      	movs	r3, #1
 80080a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080a2:	2300      	movs	r3, #0
 80080a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080a6:	2302      	movs	r3, #2
 80080a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080aa:	f107 0310 	add.w	r3, r7, #16
 80080ae:	4619      	mov	r1, r3
 80080b0:	480c      	ldr	r0, [pc, #48]	; (80080e4 <MX_GPIO_Init+0x150>)
 80080b2:	f000 fde7 	bl	8008c84 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80080b6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80080ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80080bc:	2300      	movs	r3, #0
 80080be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080c0:	2300      	movs	r3, #0
 80080c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080c4:	f107 0310 	add.w	r3, r7, #16
 80080c8:	4619      	mov	r1, r3
 80080ca:	4806      	ldr	r0, [pc, #24]	; (80080e4 <MX_GPIO_Init+0x150>)
 80080cc:	f000 fdda 	bl	8008c84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80080d0:	bf00      	nop
 80080d2:	3720      	adds	r7, #32
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	40021000 	.word	0x40021000
 80080dc:	40010800 	.word	0x40010800
 80080e0:	40011000 	.word	0x40011000
 80080e4:	40010c00 	.word	0x40010c00

080080e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80080e8:	b480      	push	{r7}
 80080ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80080ec:	bf00      	nop
 80080ee:	46bd      	mov	sp, r7
 80080f0:	bc80      	pop	{r7}
 80080f2:	4770      	bx	lr

080080f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80080fa:	4b15      	ldr	r3, [pc, #84]	; (8008150 <HAL_MspInit+0x5c>)
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	4a14      	ldr	r2, [pc, #80]	; (8008150 <HAL_MspInit+0x5c>)
 8008100:	f043 0301 	orr.w	r3, r3, #1
 8008104:	6193      	str	r3, [r2, #24]
 8008106:	4b12      	ldr	r3, [pc, #72]	; (8008150 <HAL_MspInit+0x5c>)
 8008108:	699b      	ldr	r3, [r3, #24]
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	60bb      	str	r3, [r7, #8]
 8008110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008112:	4b0f      	ldr	r3, [pc, #60]	; (8008150 <HAL_MspInit+0x5c>)
 8008114:	69db      	ldr	r3, [r3, #28]
 8008116:	4a0e      	ldr	r2, [pc, #56]	; (8008150 <HAL_MspInit+0x5c>)
 8008118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800811c:	61d3      	str	r3, [r2, #28]
 800811e:	4b0c      	ldr	r3, [pc, #48]	; (8008150 <HAL_MspInit+0x5c>)
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008126:	607b      	str	r3, [r7, #4]
 8008128:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800812a:	4b0a      	ldr	r3, [pc, #40]	; (8008154 <HAL_MspInit+0x60>)
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008136:	60fb      	str	r3, [r7, #12]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	4a04      	ldr	r2, [pc, #16]	; (8008154 <HAL_MspInit+0x60>)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008146:	bf00      	nop
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	bc80      	pop	{r7}
 800814e:	4770      	bx	lr
 8008150:	40021000 	.word	0x40021000
 8008154:	40010000 	.word	0x40010000

08008158 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b088      	sub	sp, #32
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008160:	f107 0310 	add.w	r3, r7, #16
 8008164:	2200      	movs	r2, #0
 8008166:	601a      	str	r2, [r3, #0]
 8008168:	605a      	str	r2, [r3, #4]
 800816a:	609a      	str	r2, [r3, #8]
 800816c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a1c      	ldr	r2, [pc, #112]	; (80081e4 <HAL_CAN_MspInit+0x8c>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d131      	bne.n	80081dc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008178:	4b1b      	ldr	r3, [pc, #108]	; (80081e8 <HAL_CAN_MspInit+0x90>)
 800817a:	69db      	ldr	r3, [r3, #28]
 800817c:	4a1a      	ldr	r2, [pc, #104]	; (80081e8 <HAL_CAN_MspInit+0x90>)
 800817e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008182:	61d3      	str	r3, [r2, #28]
 8008184:	4b18      	ldr	r3, [pc, #96]	; (80081e8 <HAL_CAN_MspInit+0x90>)
 8008186:	69db      	ldr	r3, [r3, #28]
 8008188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800818c:	60fb      	str	r3, [r7, #12]
 800818e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008190:	4b15      	ldr	r3, [pc, #84]	; (80081e8 <HAL_CAN_MspInit+0x90>)
 8008192:	699b      	ldr	r3, [r3, #24]
 8008194:	4a14      	ldr	r2, [pc, #80]	; (80081e8 <HAL_CAN_MspInit+0x90>)
 8008196:	f043 0304 	orr.w	r3, r3, #4
 800819a:	6193      	str	r3, [r2, #24]
 800819c:	4b12      	ldr	r3, [pc, #72]	; (80081e8 <HAL_CAN_MspInit+0x90>)
 800819e:	699b      	ldr	r3, [r3, #24]
 80081a0:	f003 0304 	and.w	r3, r3, #4
 80081a4:	60bb      	str	r3, [r7, #8]
 80081a6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80081a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80081ae:	2300      	movs	r3, #0
 80081b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081b2:	2300      	movs	r3, #0
 80081b4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081b6:	f107 0310 	add.w	r3, r7, #16
 80081ba:	4619      	mov	r1, r3
 80081bc:	480b      	ldr	r0, [pc, #44]	; (80081ec <HAL_CAN_MspInit+0x94>)
 80081be:	f000 fd61 	bl	8008c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80081c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081c8:	2302      	movs	r3, #2
 80081ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80081cc:	2303      	movs	r3, #3
 80081ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081d0:	f107 0310 	add.w	r3, r7, #16
 80081d4:	4619      	mov	r1, r3
 80081d6:	4805      	ldr	r0, [pc, #20]	; (80081ec <HAL_CAN_MspInit+0x94>)
 80081d8:	f000 fd54 	bl	8008c84 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80081dc:	bf00      	nop
 80081de:	3720      	adds	r7, #32
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	40006400 	.word	0x40006400
 80081e8:	40021000 	.word	0x40021000
 80081ec:	40010800 	.word	0x40010800

080081f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b088      	sub	sp, #32
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081f8:	f107 0310 	add.w	r3, r7, #16
 80081fc:	2200      	movs	r2, #0
 80081fe:	601a      	str	r2, [r3, #0]
 8008200:	605a      	str	r2, [r3, #4]
 8008202:	609a      	str	r2, [r3, #8]
 8008204:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a15      	ldr	r2, [pc, #84]	; (8008260 <HAL_I2C_MspInit+0x70>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d123      	bne.n	8008258 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008210:	4b14      	ldr	r3, [pc, #80]	; (8008264 <HAL_I2C_MspInit+0x74>)
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	4a13      	ldr	r2, [pc, #76]	; (8008264 <HAL_I2C_MspInit+0x74>)
 8008216:	f043 0308 	orr.w	r3, r3, #8
 800821a:	6193      	str	r3, [r2, #24]
 800821c:	4b11      	ldr	r3, [pc, #68]	; (8008264 <HAL_I2C_MspInit+0x74>)
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	f003 0308 	and.w	r3, r3, #8
 8008224:	60fb      	str	r3, [r7, #12]
 8008226:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008228:	23c0      	movs	r3, #192	; 0xc0
 800822a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800822c:	2312      	movs	r3, #18
 800822e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008230:	2303      	movs	r3, #3
 8008232:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008234:	f107 0310 	add.w	r3, r7, #16
 8008238:	4619      	mov	r1, r3
 800823a:	480b      	ldr	r0, [pc, #44]	; (8008268 <HAL_I2C_MspInit+0x78>)
 800823c:	f000 fd22 	bl	8008c84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008240:	4b08      	ldr	r3, [pc, #32]	; (8008264 <HAL_I2C_MspInit+0x74>)
 8008242:	69db      	ldr	r3, [r3, #28]
 8008244:	4a07      	ldr	r2, [pc, #28]	; (8008264 <HAL_I2C_MspInit+0x74>)
 8008246:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800824a:	61d3      	str	r3, [r2, #28]
 800824c:	4b05      	ldr	r3, [pc, #20]	; (8008264 <HAL_I2C_MspInit+0x74>)
 800824e:	69db      	ldr	r3, [r3, #28]
 8008250:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008254:	60bb      	str	r3, [r7, #8]
 8008256:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008258:	bf00      	nop
 800825a:	3720      	adds	r7, #32
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}
 8008260:	40005400 	.word	0x40005400
 8008264:	40021000 	.word	0x40021000
 8008268:	40010c00 	.word	0x40010c00

0800826c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a0a      	ldr	r2, [pc, #40]	; (80082a4 <HAL_I2C_MspDeInit+0x38>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d10d      	bne.n	800829a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800827e:	4b0a      	ldr	r3, [pc, #40]	; (80082a8 <HAL_I2C_MspDeInit+0x3c>)
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	4a09      	ldr	r2, [pc, #36]	; (80082a8 <HAL_I2C_MspDeInit+0x3c>)
 8008284:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008288:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800828a:	2140      	movs	r1, #64	; 0x40
 800828c:	4807      	ldr	r0, [pc, #28]	; (80082ac <HAL_I2C_MspDeInit+0x40>)
 800828e:	f000 fe8d 	bl	8008fac <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008292:	2180      	movs	r1, #128	; 0x80
 8008294:	4805      	ldr	r0, [pc, #20]	; (80082ac <HAL_I2C_MspDeInit+0x40>)
 8008296:	f000 fe89 	bl	8008fac <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800829a:	bf00      	nop
 800829c:	3708      	adds	r7, #8
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	40005400 	.word	0x40005400
 80082a8:	40021000 	.word	0x40021000
 80082ac:	40010c00 	.word	0x40010c00

080082b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a0d      	ldr	r2, [pc, #52]	; (80082f4 <HAL_TIM_Base_MspInit+0x44>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d113      	bne.n	80082ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80082c2:	4b0d      	ldr	r3, [pc, #52]	; (80082f8 <HAL_TIM_Base_MspInit+0x48>)
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	4a0c      	ldr	r2, [pc, #48]	; (80082f8 <HAL_TIM_Base_MspInit+0x48>)
 80082c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80082cc:	6193      	str	r3, [r2, #24]
 80082ce:	4b0a      	ldr	r3, [pc, #40]	; (80082f8 <HAL_TIM_Base_MspInit+0x48>)
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082d6:	60fb      	str	r3, [r7, #12]
 80082d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80082da:	2200      	movs	r2, #0
 80082dc:	2100      	movs	r1, #0
 80082de:	2019      	movs	r0, #25
 80082e0:	f000 fb57 	bl	8008992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80082e4:	2019      	movs	r0, #25
 80082e6:	f000 fb70 	bl	80089ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80082ea:	bf00      	nop
 80082ec:	3710      	adds	r7, #16
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	40012c00 	.word	0x40012c00
 80082f8:	40021000 	.word	0x40021000

080082fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b088      	sub	sp, #32
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008304:	f107 0310 	add.w	r3, r7, #16
 8008308:	2200      	movs	r2, #0
 800830a:	601a      	str	r2, [r3, #0]
 800830c:	605a      	str	r2, [r3, #4]
 800830e:	609a      	str	r2, [r3, #8]
 8008310:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a20      	ldr	r2, [pc, #128]	; (8008398 <HAL_UART_MspInit+0x9c>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d139      	bne.n	8008390 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800831c:	4b1f      	ldr	r3, [pc, #124]	; (800839c <HAL_UART_MspInit+0xa0>)
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	4a1e      	ldr	r2, [pc, #120]	; (800839c <HAL_UART_MspInit+0xa0>)
 8008322:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008326:	6193      	str	r3, [r2, #24]
 8008328:	4b1c      	ldr	r3, [pc, #112]	; (800839c <HAL_UART_MspInit+0xa0>)
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008330:	60fb      	str	r3, [r7, #12]
 8008332:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008334:	4b19      	ldr	r3, [pc, #100]	; (800839c <HAL_UART_MspInit+0xa0>)
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	4a18      	ldr	r2, [pc, #96]	; (800839c <HAL_UART_MspInit+0xa0>)
 800833a:	f043 0304 	orr.w	r3, r3, #4
 800833e:	6193      	str	r3, [r2, #24]
 8008340:	4b16      	ldr	r3, [pc, #88]	; (800839c <HAL_UART_MspInit+0xa0>)
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	f003 0304 	and.w	r3, r3, #4
 8008348:	60bb      	str	r3, [r7, #8]
 800834a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800834c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008350:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008352:	2302      	movs	r3, #2
 8008354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008356:	2303      	movs	r3, #3
 8008358:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800835a:	f107 0310 	add.w	r3, r7, #16
 800835e:	4619      	mov	r1, r3
 8008360:	480f      	ldr	r0, [pc, #60]	; (80083a0 <HAL_UART_MspInit+0xa4>)
 8008362:	f000 fc8f 	bl	8008c84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800836a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800836c:	2300      	movs	r3, #0
 800836e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008370:	2300      	movs	r3, #0
 8008372:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008374:	f107 0310 	add.w	r3, r7, #16
 8008378:	4619      	mov	r1, r3
 800837a:	4809      	ldr	r0, [pc, #36]	; (80083a0 <HAL_UART_MspInit+0xa4>)
 800837c:	f000 fc82 	bl	8008c84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008380:	2200      	movs	r2, #0
 8008382:	2100      	movs	r1, #0
 8008384:	2025      	movs	r0, #37	; 0x25
 8008386:	f000 fb04 	bl	8008992 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800838a:	2025      	movs	r0, #37	; 0x25
 800838c:	f000 fb1d 	bl	80089ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008390:	bf00      	nop
 8008392:	3720      	adds	r7, #32
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	40013800 	.word	0x40013800
 800839c:	40021000 	.word	0x40021000
 80083a0:	40010800 	.word	0x40010800

080083a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80083a4:	b480      	push	{r7}
 80083a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80083a8:	e7fe      	b.n	80083a8 <NMI_Handler+0x4>

080083aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80083aa:	b480      	push	{r7}
 80083ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80083ae:	e7fe      	b.n	80083ae <HardFault_Handler+0x4>

080083b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80083b0:	b480      	push	{r7}
 80083b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80083b4:	e7fe      	b.n	80083b4 <MemManage_Handler+0x4>

080083b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80083b6:	b480      	push	{r7}
 80083b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80083ba:	e7fe      	b.n	80083ba <BusFault_Handler+0x4>

080083bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80083bc:	b480      	push	{r7}
 80083be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80083c0:	e7fe      	b.n	80083c0 <UsageFault_Handler+0x4>

080083c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80083c2:	b480      	push	{r7}
 80083c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80083c6:	bf00      	nop
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bc80      	pop	{r7}
 80083cc:	4770      	bx	lr

080083ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80083ce:	b480      	push	{r7}
 80083d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80083d2:	bf00      	nop
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bc80      	pop	{r7}
 80083d8:	4770      	bx	lr

080083da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80083da:	b480      	push	{r7}
 80083dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80083de:	bf00      	nop
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bc80      	pop	{r7}
 80083e4:	4770      	bx	lr

080083e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80083ea:	f000 f8bf 	bl	800856c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80083ee:	bf00      	nop
 80083f0:	bd80      	pop	{r7, pc}
	...

080083f4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80083f8:	4802      	ldr	r0, [pc, #8]	; (8008404 <TIM1_UP_IRQHandler+0x10>)
 80083fa:	f002 fdcd 	bl	800af98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80083fe:	bf00      	nop
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20000300 	.word	0x20000300

08008408 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800840c:	4802      	ldr	r0, [pc, #8]	; (8008418 <USART1_IRQHandler+0x10>)
 800840e:	f003 f9cb 	bl	800b7a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008412:	bf00      	nop
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	20000348 	.word	0x20000348

0800841c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008424:	4a14      	ldr	r2, [pc, #80]	; (8008478 <_sbrk+0x5c>)
 8008426:	4b15      	ldr	r3, [pc, #84]	; (800847c <_sbrk+0x60>)
 8008428:	1ad3      	subs	r3, r2, r3
 800842a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800842c:	697b      	ldr	r3, [r7, #20]
 800842e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008430:	4b13      	ldr	r3, [pc, #76]	; (8008480 <_sbrk+0x64>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d102      	bne.n	800843e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008438:	4b11      	ldr	r3, [pc, #68]	; (8008480 <_sbrk+0x64>)
 800843a:	4a12      	ldr	r2, [pc, #72]	; (8008484 <_sbrk+0x68>)
 800843c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800843e:	4b10      	ldr	r3, [pc, #64]	; (8008480 <_sbrk+0x64>)
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4413      	add	r3, r2
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	429a      	cmp	r2, r3
 800844a:	d207      	bcs.n	800845c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800844c:	f004 f81a 	bl	800c484 <__errno>
 8008450:	4603      	mov	r3, r0
 8008452:	220c      	movs	r2, #12
 8008454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800845a:	e009      	b.n	8008470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800845c:	4b08      	ldr	r3, [pc, #32]	; (8008480 <_sbrk+0x64>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008462:	4b07      	ldr	r3, [pc, #28]	; (8008480 <_sbrk+0x64>)
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4413      	add	r3, r2
 800846a:	4a05      	ldr	r2, [pc, #20]	; (8008480 <_sbrk+0x64>)
 800846c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800846e:	68fb      	ldr	r3, [r7, #12]
}
 8008470:	4618      	mov	r0, r3
 8008472:	3718      	adds	r7, #24
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	2000c000 	.word	0x2000c000
 800847c:	00000400 	.word	0x00000400
 8008480:	20000390 	.word	0x20000390
 8008484:	200004e0 	.word	0x200004e0

08008488 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008488:	b480      	push	{r7}
 800848a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800848c:	bf00      	nop
 800848e:	46bd      	mov	sp, r7
 8008490:	bc80      	pop	{r7}
 8008492:	4770      	bx	lr

08008494 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008494:	480c      	ldr	r0, [pc, #48]	; (80084c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008496:	490d      	ldr	r1, [pc, #52]	; (80084cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008498:	4a0d      	ldr	r2, [pc, #52]	; (80084d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800849a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800849c:	e002      	b.n	80084a4 <LoopCopyDataInit>

0800849e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800849e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80084a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80084a2:	3304      	adds	r3, #4

080084a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80084a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80084a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80084a8:	d3f9      	bcc.n	800849e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80084aa:	4a0a      	ldr	r2, [pc, #40]	; (80084d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80084ac:	4c0a      	ldr	r4, [pc, #40]	; (80084d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80084ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80084b0:	e001      	b.n	80084b6 <LoopFillZerobss>

080084b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80084b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80084b4:	3204      	adds	r2, #4

080084b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80084b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80084b8:	d3fb      	bcc.n	80084b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80084ba:	f7ff ffe5 	bl	8008488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80084be:	f003 ffe7 	bl	800c490 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80084c2:	f7ff fb9d 	bl	8007c00 <main>
  bx lr
 80084c6:	4770      	bx	lr
  ldr r0, =_sdata
 80084c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80084cc:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 80084d0:	0800dc2c 	.word	0x0800dc2c
  ldr r2, =_sbss
 80084d4:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 80084d8:	200004e0 	.word	0x200004e0

080084dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80084dc:	e7fe      	b.n	80084dc <ADC1_2_IRQHandler>
	...

080084e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80084e4:	4b08      	ldr	r3, [pc, #32]	; (8008508 <HAL_Init+0x28>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a07      	ldr	r2, [pc, #28]	; (8008508 <HAL_Init+0x28>)
 80084ea:	f043 0310 	orr.w	r3, r3, #16
 80084ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80084f0:	2003      	movs	r0, #3
 80084f2:	f000 fa43 	bl	800897c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80084f6:	200f      	movs	r0, #15
 80084f8:	f000 f808 	bl	800850c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80084fc:	f7ff fdfa 	bl	80080f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	bd80      	pop	{r7, pc}
 8008506:	bf00      	nop
 8008508:	40022000 	.word	0x40022000

0800850c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008514:	4b12      	ldr	r3, [pc, #72]	; (8008560 <HAL_InitTick+0x54>)
 8008516:	681a      	ldr	r2, [r3, #0]
 8008518:	4b12      	ldr	r3, [pc, #72]	; (8008564 <HAL_InitTick+0x58>)
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	4619      	mov	r1, r3
 800851e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008522:	fbb3 f3f1 	udiv	r3, r3, r1
 8008526:	fbb2 f3f3 	udiv	r3, r2, r3
 800852a:	4618      	mov	r0, r3
 800852c:	f000 fa5b 	bl	80089e6 <HAL_SYSTICK_Config>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	d001      	beq.n	800853a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e00e      	b.n	8008558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2b0f      	cmp	r3, #15
 800853e:	d80a      	bhi.n	8008556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008540:	2200      	movs	r2, #0
 8008542:	6879      	ldr	r1, [r7, #4]
 8008544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008548:	f000 fa23 	bl	8008992 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800854c:	4a06      	ldr	r2, [pc, #24]	; (8008568 <HAL_InitTick+0x5c>)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	e000      	b.n	8008558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
}
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}
 8008560:	200000a8 	.word	0x200000a8
 8008564:	200000b0 	.word	0x200000b0
 8008568:	200000ac 	.word	0x200000ac

0800856c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800856c:	b480      	push	{r7}
 800856e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008570:	4b05      	ldr	r3, [pc, #20]	; (8008588 <HAL_IncTick+0x1c>)
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	461a      	mov	r2, r3
 8008576:	4b05      	ldr	r3, [pc, #20]	; (800858c <HAL_IncTick+0x20>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4413      	add	r3, r2
 800857c:	4a03      	ldr	r2, [pc, #12]	; (800858c <HAL_IncTick+0x20>)
 800857e:	6013      	str	r3, [r2, #0]
}
 8008580:	bf00      	nop
 8008582:	46bd      	mov	sp, r7
 8008584:	bc80      	pop	{r7}
 8008586:	4770      	bx	lr
 8008588:	200000b0 	.word	0x200000b0
 800858c:	20000394 	.word	0x20000394

08008590 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008590:	b480      	push	{r7}
 8008592:	af00      	add	r7, sp, #0
  return uwTick;
 8008594:	4b02      	ldr	r3, [pc, #8]	; (80085a0 <HAL_GetTick+0x10>)
 8008596:	681b      	ldr	r3, [r3, #0]
}
 8008598:	4618      	mov	r0, r3
 800859a:	46bd      	mov	sp, r7
 800859c:	bc80      	pop	{r7}
 800859e:	4770      	bx	lr
 80085a0:	20000394 	.word	0x20000394

080085a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80085ac:	f7ff fff0 	bl	8008590 <HAL_GetTick>
 80085b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80085bc:	d005      	beq.n	80085ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80085be:	4b0a      	ldr	r3, [pc, #40]	; (80085e8 <HAL_Delay+0x44>)
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	461a      	mov	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	4413      	add	r3, r2
 80085c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80085ca:	bf00      	nop
 80085cc:	f7ff ffe0 	bl	8008590 <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	429a      	cmp	r2, r3
 80085da:	d8f7      	bhi.n	80085cc <HAL_Delay+0x28>
  {
  }
}
 80085dc:	bf00      	nop
 80085de:	bf00      	nop
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	200000b0 	.word	0x200000b0

080085ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e0ed      	b.n	80087da <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008604:	b2db      	uxtb	r3, r3
 8008606:	2b00      	cmp	r3, #0
 8008608:	d102      	bne.n	8008610 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f7ff fda4 	bl	8008158 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f042 0201 	orr.w	r2, r2, #1
 800861e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008620:	f7ff ffb6 	bl	8008590 <HAL_GetTick>
 8008624:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008626:	e012      	b.n	800864e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008628:	f7ff ffb2 	bl	8008590 <HAL_GetTick>
 800862c:	4602      	mov	r2, r0
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	2b0a      	cmp	r3, #10
 8008634:	d90b      	bls.n	800864e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2205      	movs	r2, #5
 8008646:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e0c5      	b.n	80087da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	f003 0301 	and.w	r3, r3, #1
 8008658:	2b00      	cmp	r3, #0
 800865a:	d0e5      	beq.n	8008628 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f022 0202 	bic.w	r2, r2, #2
 800866a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800866c:	f7ff ff90 	bl	8008590 <HAL_GetTick>
 8008670:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008672:	e012      	b.n	800869a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008674:	f7ff ff8c 	bl	8008590 <HAL_GetTick>
 8008678:	4602      	mov	r2, r0
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	1ad3      	subs	r3, r2, r3
 800867e:	2b0a      	cmp	r3, #10
 8008680:	d90b      	bls.n	800869a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008686:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2205      	movs	r2, #5
 8008692:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e09f      	b.n	80087da <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	f003 0302 	and.w	r3, r3, #2
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1e5      	bne.n	8008674 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	7e1b      	ldrb	r3, [r3, #24]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d108      	bne.n	80086c2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	e007      	b.n	80086d2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	7e5b      	ldrb	r3, [r3, #25]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d108      	bne.n	80086ec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80086e8:	601a      	str	r2, [r3, #0]
 80086ea:	e007      	b.n	80086fc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	7e9b      	ldrb	r3, [r3, #26]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d108      	bne.n	8008716 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f042 0220 	orr.w	r2, r2, #32
 8008712:	601a      	str	r2, [r3, #0]
 8008714:	e007      	b.n	8008726 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f022 0220 	bic.w	r2, r2, #32
 8008724:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	7edb      	ldrb	r3, [r3, #27]
 800872a:	2b01      	cmp	r3, #1
 800872c:	d108      	bne.n	8008740 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f022 0210 	bic.w	r2, r2, #16
 800873c:	601a      	str	r2, [r3, #0]
 800873e:	e007      	b.n	8008750 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f042 0210 	orr.w	r2, r2, #16
 800874e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	7f1b      	ldrb	r3, [r3, #28]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d108      	bne.n	800876a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f042 0208 	orr.w	r2, r2, #8
 8008766:	601a      	str	r2, [r3, #0]
 8008768:	e007      	b.n	800877a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f022 0208 	bic.w	r2, r2, #8
 8008778:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	7f5b      	ldrb	r3, [r3, #29]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d108      	bne.n	8008794 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681a      	ldr	r2, [r3, #0]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f042 0204 	orr.w	r2, r2, #4
 8008790:	601a      	str	r2, [r3, #0]
 8008792:	e007      	b.n	80087a4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f022 0204 	bic.w	r2, r2, #4
 80087a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	689a      	ldr	r2, [r3, #8]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	431a      	orrs	r2, r3
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	431a      	orrs	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	ea42 0103 	orr.w	r1, r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	1e5a      	subs	r2, r3, #1
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80087d8:	2300      	movs	r3, #0
}
 80087da:	4618      	mov	r0, r3
 80087dc:	3710      	adds	r7, #16
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
	...

080087e4 <__NVIC_SetPriorityGrouping>:
{
 80087e4:	b480      	push	{r7}
 80087e6:	b085      	sub	sp, #20
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f003 0307 	and.w	r3, r3, #7
 80087f2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80087f4:	4b0c      	ldr	r3, [pc, #48]	; (8008828 <__NVIC_SetPriorityGrouping+0x44>)
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80087fa:	68ba      	ldr	r2, [r7, #8]
 80087fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008800:	4013      	ands	r3, r2
 8008802:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800880c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008816:	4a04      	ldr	r2, [pc, #16]	; (8008828 <__NVIC_SetPriorityGrouping+0x44>)
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	60d3      	str	r3, [r2, #12]
}
 800881c:	bf00      	nop
 800881e:	3714      	adds	r7, #20
 8008820:	46bd      	mov	sp, r7
 8008822:	bc80      	pop	{r7}
 8008824:	4770      	bx	lr
 8008826:	bf00      	nop
 8008828:	e000ed00 	.word	0xe000ed00

0800882c <__NVIC_GetPriorityGrouping>:
{
 800882c:	b480      	push	{r7}
 800882e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008830:	4b04      	ldr	r3, [pc, #16]	; (8008844 <__NVIC_GetPriorityGrouping+0x18>)
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	0a1b      	lsrs	r3, r3, #8
 8008836:	f003 0307 	and.w	r3, r3, #7
}
 800883a:	4618      	mov	r0, r3
 800883c:	46bd      	mov	sp, r7
 800883e:	bc80      	pop	{r7}
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	e000ed00 	.word	0xe000ed00

08008848 <__NVIC_EnableIRQ>:
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	4603      	mov	r3, r0
 8008850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008856:	2b00      	cmp	r3, #0
 8008858:	db0b      	blt.n	8008872 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800885a:	79fb      	ldrb	r3, [r7, #7]
 800885c:	f003 021f 	and.w	r2, r3, #31
 8008860:	4906      	ldr	r1, [pc, #24]	; (800887c <__NVIC_EnableIRQ+0x34>)
 8008862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008866:	095b      	lsrs	r3, r3, #5
 8008868:	2001      	movs	r0, #1
 800886a:	fa00 f202 	lsl.w	r2, r0, r2
 800886e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008872:	bf00      	nop
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	bc80      	pop	{r7}
 800887a:	4770      	bx	lr
 800887c:	e000e100 	.word	0xe000e100

08008880 <__NVIC_SetPriority>:
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	4603      	mov	r3, r0
 8008888:	6039      	str	r1, [r7, #0]
 800888a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800888c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008890:	2b00      	cmp	r3, #0
 8008892:	db0a      	blt.n	80088aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	b2da      	uxtb	r2, r3
 8008898:	490c      	ldr	r1, [pc, #48]	; (80088cc <__NVIC_SetPriority+0x4c>)
 800889a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800889e:	0112      	lsls	r2, r2, #4
 80088a0:	b2d2      	uxtb	r2, r2
 80088a2:	440b      	add	r3, r1
 80088a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80088a8:	e00a      	b.n	80088c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	b2da      	uxtb	r2, r3
 80088ae:	4908      	ldr	r1, [pc, #32]	; (80088d0 <__NVIC_SetPriority+0x50>)
 80088b0:	79fb      	ldrb	r3, [r7, #7]
 80088b2:	f003 030f 	and.w	r3, r3, #15
 80088b6:	3b04      	subs	r3, #4
 80088b8:	0112      	lsls	r2, r2, #4
 80088ba:	b2d2      	uxtb	r2, r2
 80088bc:	440b      	add	r3, r1
 80088be:	761a      	strb	r2, [r3, #24]
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bc80      	pop	{r7}
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop
 80088cc:	e000e100 	.word	0xe000e100
 80088d0:	e000ed00 	.word	0xe000ed00

080088d4 <NVIC_EncodePriority>:
{
 80088d4:	b480      	push	{r7}
 80088d6:	b089      	sub	sp, #36	; 0x24
 80088d8:	af00      	add	r7, sp, #0
 80088da:	60f8      	str	r0, [r7, #12]
 80088dc:	60b9      	str	r1, [r7, #8]
 80088de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f003 0307 	and.w	r3, r3, #7
 80088e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	f1c3 0307 	rsb	r3, r3, #7
 80088ee:	2b04      	cmp	r3, #4
 80088f0:	bf28      	it	cs
 80088f2:	2304      	movcs	r3, #4
 80088f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	3304      	adds	r3, #4
 80088fa:	2b06      	cmp	r3, #6
 80088fc:	d902      	bls.n	8008904 <NVIC_EncodePriority+0x30>
 80088fe:	69fb      	ldr	r3, [r7, #28]
 8008900:	3b03      	subs	r3, #3
 8008902:	e000      	b.n	8008906 <NVIC_EncodePriority+0x32>
 8008904:	2300      	movs	r3, #0
 8008906:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008908:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	fa02 f303 	lsl.w	r3, r2, r3
 8008912:	43da      	mvns	r2, r3
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	401a      	ands	r2, r3
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800891c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	fa01 f303 	lsl.w	r3, r1, r3
 8008926:	43d9      	mvns	r1, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800892c:	4313      	orrs	r3, r2
}
 800892e:	4618      	mov	r0, r3
 8008930:	3724      	adds	r7, #36	; 0x24
 8008932:	46bd      	mov	sp, r7
 8008934:	bc80      	pop	{r7}
 8008936:	4770      	bx	lr

08008938 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	3b01      	subs	r3, #1
 8008944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008948:	d301      	bcc.n	800894e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800894a:	2301      	movs	r3, #1
 800894c:	e00f      	b.n	800896e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800894e:	4a0a      	ldr	r2, [pc, #40]	; (8008978 <SysTick_Config+0x40>)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3b01      	subs	r3, #1
 8008954:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008956:	210f      	movs	r1, #15
 8008958:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800895c:	f7ff ff90 	bl	8008880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008960:	4b05      	ldr	r3, [pc, #20]	; (8008978 <SysTick_Config+0x40>)
 8008962:	2200      	movs	r2, #0
 8008964:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008966:	4b04      	ldr	r3, [pc, #16]	; (8008978 <SysTick_Config+0x40>)
 8008968:	2207      	movs	r2, #7
 800896a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800896c:	2300      	movs	r3, #0
}
 800896e:	4618      	mov	r0, r3
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	e000e010 	.word	0xe000e010

0800897c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f7ff ff2d 	bl	80087e4 <__NVIC_SetPriorityGrouping>
}
 800898a:	bf00      	nop
 800898c:	3708      	adds	r7, #8
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008992:	b580      	push	{r7, lr}
 8008994:	b086      	sub	sp, #24
 8008996:	af00      	add	r7, sp, #0
 8008998:	4603      	mov	r3, r0
 800899a:	60b9      	str	r1, [r7, #8]
 800899c:	607a      	str	r2, [r7, #4]
 800899e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80089a0:	2300      	movs	r3, #0
 80089a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80089a4:	f7ff ff42 	bl	800882c <__NVIC_GetPriorityGrouping>
 80089a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	68b9      	ldr	r1, [r7, #8]
 80089ae:	6978      	ldr	r0, [r7, #20]
 80089b0:	f7ff ff90 	bl	80088d4 <NVIC_EncodePriority>
 80089b4:	4602      	mov	r2, r0
 80089b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089ba:	4611      	mov	r1, r2
 80089bc:	4618      	mov	r0, r3
 80089be:	f7ff ff5f 	bl	8008880 <__NVIC_SetPriority>
}
 80089c2:	bf00      	nop
 80089c4:	3718      	adds	r7, #24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80089ca:	b580      	push	{r7, lr}
 80089cc:	b082      	sub	sp, #8
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	4603      	mov	r3, r0
 80089d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80089d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089d8:	4618      	mov	r0, r3
 80089da:	f7ff ff35 	bl	8008848 <__NVIC_EnableIRQ>
}
 80089de:	bf00      	nop
 80089e0:	3708      	adds	r7, #8
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}

080089e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80089e6:	b580      	push	{r7, lr}
 80089e8:	b082      	sub	sp, #8
 80089ea:	af00      	add	r7, sp, #0
 80089ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7ff ffa2 	bl	8008938 <SysTick_Config>
 80089f4:	4603      	mov	r3, r0
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3708      	adds	r7, #8
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b085      	sub	sp, #20
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a06:	2300      	movs	r3, #0
 8008a08:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d008      	beq.n	8008a28 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2204      	movs	r2, #4
 8008a1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8008a24:	2301      	movs	r3, #1
 8008a26:	e020      	b.n	8008a6a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681a      	ldr	r2, [r3, #0]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f022 020e 	bic.w	r2, r2, #14
 8008a36:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f022 0201 	bic.w	r2, r2, #1
 8008a46:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a50:	2101      	movs	r1, #1
 8008a52:	fa01 f202 	lsl.w	r2, r1, r2
 8008a56:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2200      	movs	r2, #0
 8008a64:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3714      	adds	r7, #20
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bc80      	pop	{r7}
 8008a72:	4770      	bx	lr

08008a74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d005      	beq.n	8008a98 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2204      	movs	r2, #4
 8008a90:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8008a92:	2301      	movs	r3, #1
 8008a94:	73fb      	strb	r3, [r7, #15]
 8008a96:	e0d6      	b.n	8008c46 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f022 020e 	bic.w	r2, r2, #14
 8008aa6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f022 0201 	bic.w	r2, r2, #1
 8008ab6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	461a      	mov	r2, r3
 8008abe:	4b64      	ldr	r3, [pc, #400]	; (8008c50 <HAL_DMA_Abort_IT+0x1dc>)
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d958      	bls.n	8008b76 <HAL_DMA_Abort_IT+0x102>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a62      	ldr	r2, [pc, #392]	; (8008c54 <HAL_DMA_Abort_IT+0x1e0>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d04f      	beq.n	8008b6e <HAL_DMA_Abort_IT+0xfa>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a61      	ldr	r2, [pc, #388]	; (8008c58 <HAL_DMA_Abort_IT+0x1e4>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d048      	beq.n	8008b6a <HAL_DMA_Abort_IT+0xf6>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a5f      	ldr	r2, [pc, #380]	; (8008c5c <HAL_DMA_Abort_IT+0x1e8>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d040      	beq.n	8008b64 <HAL_DMA_Abort_IT+0xf0>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a5e      	ldr	r2, [pc, #376]	; (8008c60 <HAL_DMA_Abort_IT+0x1ec>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d038      	beq.n	8008b5e <HAL_DMA_Abort_IT+0xea>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a5c      	ldr	r2, [pc, #368]	; (8008c64 <HAL_DMA_Abort_IT+0x1f0>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d030      	beq.n	8008b58 <HAL_DMA_Abort_IT+0xe4>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a5b      	ldr	r2, [pc, #364]	; (8008c68 <HAL_DMA_Abort_IT+0x1f4>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d028      	beq.n	8008b52 <HAL_DMA_Abort_IT+0xde>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4a52      	ldr	r2, [pc, #328]	; (8008c50 <HAL_DMA_Abort_IT+0x1dc>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d020      	beq.n	8008b4c <HAL_DMA_Abort_IT+0xd8>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	4a57      	ldr	r2, [pc, #348]	; (8008c6c <HAL_DMA_Abort_IT+0x1f8>)
 8008b10:	4293      	cmp	r3, r2
 8008b12:	d019      	beq.n	8008b48 <HAL_DMA_Abort_IT+0xd4>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a55      	ldr	r2, [pc, #340]	; (8008c70 <HAL_DMA_Abort_IT+0x1fc>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d012      	beq.n	8008b44 <HAL_DMA_Abort_IT+0xd0>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a54      	ldr	r2, [pc, #336]	; (8008c74 <HAL_DMA_Abort_IT+0x200>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d00a      	beq.n	8008b3e <HAL_DMA_Abort_IT+0xca>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a52      	ldr	r2, [pc, #328]	; (8008c78 <HAL_DMA_Abort_IT+0x204>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d102      	bne.n	8008b38 <HAL_DMA_Abort_IT+0xc4>
 8008b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b36:	e01b      	b.n	8008b70 <HAL_DMA_Abort_IT+0xfc>
 8008b38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b3c:	e018      	b.n	8008b70 <HAL_DMA_Abort_IT+0xfc>
 8008b3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b42:	e015      	b.n	8008b70 <HAL_DMA_Abort_IT+0xfc>
 8008b44:	2310      	movs	r3, #16
 8008b46:	e013      	b.n	8008b70 <HAL_DMA_Abort_IT+0xfc>
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e011      	b.n	8008b70 <HAL_DMA_Abort_IT+0xfc>
 8008b4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b50:	e00e      	b.n	8008b70 <HAL_DMA_Abort_IT+0xfc>
 8008b52:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008b56:	e00b      	b.n	8008b70 <HAL_DMA_Abort_IT+0xfc>
 8008b58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008b5c:	e008      	b.n	8008b70 <HAL_DMA_Abort_IT+0xfc>
 8008b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b62:	e005      	b.n	8008b70 <HAL_DMA_Abort_IT+0xfc>
 8008b64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b68:	e002      	b.n	8008b70 <HAL_DMA_Abort_IT+0xfc>
 8008b6a:	2310      	movs	r3, #16
 8008b6c:	e000      	b.n	8008b70 <HAL_DMA_Abort_IT+0xfc>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	4a42      	ldr	r2, [pc, #264]	; (8008c7c <HAL_DMA_Abort_IT+0x208>)
 8008b72:	6053      	str	r3, [r2, #4]
 8008b74:	e057      	b.n	8008c26 <HAL_DMA_Abort_IT+0x1b2>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a36      	ldr	r2, [pc, #216]	; (8008c54 <HAL_DMA_Abort_IT+0x1e0>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d04f      	beq.n	8008c20 <HAL_DMA_Abort_IT+0x1ac>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a34      	ldr	r2, [pc, #208]	; (8008c58 <HAL_DMA_Abort_IT+0x1e4>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d048      	beq.n	8008c1c <HAL_DMA_Abort_IT+0x1a8>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4a33      	ldr	r2, [pc, #204]	; (8008c5c <HAL_DMA_Abort_IT+0x1e8>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d040      	beq.n	8008c16 <HAL_DMA_Abort_IT+0x1a2>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a31      	ldr	r2, [pc, #196]	; (8008c60 <HAL_DMA_Abort_IT+0x1ec>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d038      	beq.n	8008c10 <HAL_DMA_Abort_IT+0x19c>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a30      	ldr	r2, [pc, #192]	; (8008c64 <HAL_DMA_Abort_IT+0x1f0>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d030      	beq.n	8008c0a <HAL_DMA_Abort_IT+0x196>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	4a2e      	ldr	r2, [pc, #184]	; (8008c68 <HAL_DMA_Abort_IT+0x1f4>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d028      	beq.n	8008c04 <HAL_DMA_Abort_IT+0x190>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a26      	ldr	r2, [pc, #152]	; (8008c50 <HAL_DMA_Abort_IT+0x1dc>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d020      	beq.n	8008bfe <HAL_DMA_Abort_IT+0x18a>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a2a      	ldr	r2, [pc, #168]	; (8008c6c <HAL_DMA_Abort_IT+0x1f8>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d019      	beq.n	8008bfa <HAL_DMA_Abort_IT+0x186>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a29      	ldr	r2, [pc, #164]	; (8008c70 <HAL_DMA_Abort_IT+0x1fc>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d012      	beq.n	8008bf6 <HAL_DMA_Abort_IT+0x182>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a27      	ldr	r2, [pc, #156]	; (8008c74 <HAL_DMA_Abort_IT+0x200>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d00a      	beq.n	8008bf0 <HAL_DMA_Abort_IT+0x17c>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a26      	ldr	r2, [pc, #152]	; (8008c78 <HAL_DMA_Abort_IT+0x204>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d102      	bne.n	8008bea <HAL_DMA_Abort_IT+0x176>
 8008be4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008be8:	e01b      	b.n	8008c22 <HAL_DMA_Abort_IT+0x1ae>
 8008bea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008bee:	e018      	b.n	8008c22 <HAL_DMA_Abort_IT+0x1ae>
 8008bf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008bf4:	e015      	b.n	8008c22 <HAL_DMA_Abort_IT+0x1ae>
 8008bf6:	2310      	movs	r3, #16
 8008bf8:	e013      	b.n	8008c22 <HAL_DMA_Abort_IT+0x1ae>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e011      	b.n	8008c22 <HAL_DMA_Abort_IT+0x1ae>
 8008bfe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c02:	e00e      	b.n	8008c22 <HAL_DMA_Abort_IT+0x1ae>
 8008c04:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008c08:	e00b      	b.n	8008c22 <HAL_DMA_Abort_IT+0x1ae>
 8008c0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c0e:	e008      	b.n	8008c22 <HAL_DMA_Abort_IT+0x1ae>
 8008c10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c14:	e005      	b.n	8008c22 <HAL_DMA_Abort_IT+0x1ae>
 8008c16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c1a:	e002      	b.n	8008c22 <HAL_DMA_Abort_IT+0x1ae>
 8008c1c:	2310      	movs	r3, #16
 8008c1e:	e000      	b.n	8008c22 <HAL_DMA_Abort_IT+0x1ae>
 8008c20:	2301      	movs	r3, #1
 8008c22:	4a17      	ldr	r2, [pc, #92]	; (8008c80 <HAL_DMA_Abort_IT+0x20c>)
 8008c24:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d003      	beq.n	8008c46 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	4798      	blx	r3
    } 
  }
  return status;
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3710      	adds	r7, #16
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	40020080 	.word	0x40020080
 8008c54:	40020008 	.word	0x40020008
 8008c58:	4002001c 	.word	0x4002001c
 8008c5c:	40020030 	.word	0x40020030
 8008c60:	40020044 	.word	0x40020044
 8008c64:	40020058 	.word	0x40020058
 8008c68:	4002006c 	.word	0x4002006c
 8008c6c:	40020408 	.word	0x40020408
 8008c70:	4002041c 	.word	0x4002041c
 8008c74:	40020430 	.word	0x40020430
 8008c78:	40020444 	.word	0x40020444
 8008c7c:	40020400 	.word	0x40020400
 8008c80:	40020000 	.word	0x40020000

08008c84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b08b      	sub	sp, #44	; 0x2c
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8008c92:	2300      	movs	r3, #0
 8008c94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008c96:	e179      	b.n	8008f8c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008c98:	2201      	movs	r2, #1
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	69fa      	ldr	r2, [r7, #28]
 8008ca8:	4013      	ands	r3, r2
 8008caa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008cac:	69ba      	ldr	r2, [r7, #24]
 8008cae:	69fb      	ldr	r3, [r7, #28]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	f040 8168 	bne.w	8008f86 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	4a96      	ldr	r2, [pc, #600]	; (8008f14 <HAL_GPIO_Init+0x290>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d05e      	beq.n	8008d7e <HAL_GPIO_Init+0xfa>
 8008cc0:	4a94      	ldr	r2, [pc, #592]	; (8008f14 <HAL_GPIO_Init+0x290>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d875      	bhi.n	8008db2 <HAL_GPIO_Init+0x12e>
 8008cc6:	4a94      	ldr	r2, [pc, #592]	; (8008f18 <HAL_GPIO_Init+0x294>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d058      	beq.n	8008d7e <HAL_GPIO_Init+0xfa>
 8008ccc:	4a92      	ldr	r2, [pc, #584]	; (8008f18 <HAL_GPIO_Init+0x294>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d86f      	bhi.n	8008db2 <HAL_GPIO_Init+0x12e>
 8008cd2:	4a92      	ldr	r2, [pc, #584]	; (8008f1c <HAL_GPIO_Init+0x298>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d052      	beq.n	8008d7e <HAL_GPIO_Init+0xfa>
 8008cd8:	4a90      	ldr	r2, [pc, #576]	; (8008f1c <HAL_GPIO_Init+0x298>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d869      	bhi.n	8008db2 <HAL_GPIO_Init+0x12e>
 8008cde:	4a90      	ldr	r2, [pc, #576]	; (8008f20 <HAL_GPIO_Init+0x29c>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d04c      	beq.n	8008d7e <HAL_GPIO_Init+0xfa>
 8008ce4:	4a8e      	ldr	r2, [pc, #568]	; (8008f20 <HAL_GPIO_Init+0x29c>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d863      	bhi.n	8008db2 <HAL_GPIO_Init+0x12e>
 8008cea:	4a8e      	ldr	r2, [pc, #568]	; (8008f24 <HAL_GPIO_Init+0x2a0>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d046      	beq.n	8008d7e <HAL_GPIO_Init+0xfa>
 8008cf0:	4a8c      	ldr	r2, [pc, #560]	; (8008f24 <HAL_GPIO_Init+0x2a0>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d85d      	bhi.n	8008db2 <HAL_GPIO_Init+0x12e>
 8008cf6:	2b12      	cmp	r3, #18
 8008cf8:	d82a      	bhi.n	8008d50 <HAL_GPIO_Init+0xcc>
 8008cfa:	2b12      	cmp	r3, #18
 8008cfc:	d859      	bhi.n	8008db2 <HAL_GPIO_Init+0x12e>
 8008cfe:	a201      	add	r2, pc, #4	; (adr r2, 8008d04 <HAL_GPIO_Init+0x80>)
 8008d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d04:	08008d7f 	.word	0x08008d7f
 8008d08:	08008d59 	.word	0x08008d59
 8008d0c:	08008d6b 	.word	0x08008d6b
 8008d10:	08008dad 	.word	0x08008dad
 8008d14:	08008db3 	.word	0x08008db3
 8008d18:	08008db3 	.word	0x08008db3
 8008d1c:	08008db3 	.word	0x08008db3
 8008d20:	08008db3 	.word	0x08008db3
 8008d24:	08008db3 	.word	0x08008db3
 8008d28:	08008db3 	.word	0x08008db3
 8008d2c:	08008db3 	.word	0x08008db3
 8008d30:	08008db3 	.word	0x08008db3
 8008d34:	08008db3 	.word	0x08008db3
 8008d38:	08008db3 	.word	0x08008db3
 8008d3c:	08008db3 	.word	0x08008db3
 8008d40:	08008db3 	.word	0x08008db3
 8008d44:	08008db3 	.word	0x08008db3
 8008d48:	08008d61 	.word	0x08008d61
 8008d4c:	08008d75 	.word	0x08008d75
 8008d50:	4a75      	ldr	r2, [pc, #468]	; (8008f28 <HAL_GPIO_Init+0x2a4>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d013      	beq.n	8008d7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8008d56:	e02c      	b.n	8008db2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	623b      	str	r3, [r7, #32]
          break;
 8008d5e:	e029      	b.n	8008db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	3304      	adds	r3, #4
 8008d66:	623b      	str	r3, [r7, #32]
          break;
 8008d68:	e024      	b.n	8008db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	3308      	adds	r3, #8
 8008d70:	623b      	str	r3, [r7, #32]
          break;
 8008d72:	e01f      	b.n	8008db4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	330c      	adds	r3, #12
 8008d7a:	623b      	str	r3, [r7, #32]
          break;
 8008d7c:	e01a      	b.n	8008db4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d102      	bne.n	8008d8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008d86:	2304      	movs	r3, #4
 8008d88:	623b      	str	r3, [r7, #32]
          break;
 8008d8a:	e013      	b.n	8008db4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d105      	bne.n	8008da0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008d94:	2308      	movs	r3, #8
 8008d96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	69fa      	ldr	r2, [r7, #28]
 8008d9c:	611a      	str	r2, [r3, #16]
          break;
 8008d9e:	e009      	b.n	8008db4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008da0:	2308      	movs	r3, #8
 8008da2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	69fa      	ldr	r2, [r7, #28]
 8008da8:	615a      	str	r2, [r3, #20]
          break;
 8008daa:	e003      	b.n	8008db4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008dac:	2300      	movs	r3, #0
 8008dae:	623b      	str	r3, [r7, #32]
          break;
 8008db0:	e000      	b.n	8008db4 <HAL_GPIO_Init+0x130>
          break;
 8008db2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	2bff      	cmp	r3, #255	; 0xff
 8008db8:	d801      	bhi.n	8008dbe <HAL_GPIO_Init+0x13a>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	e001      	b.n	8008dc2 <HAL_GPIO_Init+0x13e>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	3304      	adds	r3, #4
 8008dc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	2bff      	cmp	r3, #255	; 0xff
 8008dc8:	d802      	bhi.n	8008dd0 <HAL_GPIO_Init+0x14c>
 8008dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	e002      	b.n	8008dd6 <HAL_GPIO_Init+0x152>
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd2:	3b08      	subs	r3, #8
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	210f      	movs	r1, #15
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	fa01 f303 	lsl.w	r3, r1, r3
 8008de4:	43db      	mvns	r3, r3
 8008de6:	401a      	ands	r2, r3
 8008de8:	6a39      	ldr	r1, [r7, #32]
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	fa01 f303 	lsl.w	r3, r1, r3
 8008df0:	431a      	orrs	r2, r3
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f000 80c1 	beq.w	8008f86 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008e04:	4b49      	ldr	r3, [pc, #292]	; (8008f2c <HAL_GPIO_Init+0x2a8>)
 8008e06:	699b      	ldr	r3, [r3, #24]
 8008e08:	4a48      	ldr	r2, [pc, #288]	; (8008f2c <HAL_GPIO_Init+0x2a8>)
 8008e0a:	f043 0301 	orr.w	r3, r3, #1
 8008e0e:	6193      	str	r3, [r2, #24]
 8008e10:	4b46      	ldr	r3, [pc, #280]	; (8008f2c <HAL_GPIO_Init+0x2a8>)
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	f003 0301 	and.w	r3, r3, #1
 8008e18:	60bb      	str	r3, [r7, #8]
 8008e1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8008e1c:	4a44      	ldr	r2, [pc, #272]	; (8008f30 <HAL_GPIO_Init+0x2ac>)
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e20:	089b      	lsrs	r3, r3, #2
 8008e22:	3302      	adds	r3, #2
 8008e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	f003 0303 	and.w	r3, r3, #3
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	220f      	movs	r2, #15
 8008e34:	fa02 f303 	lsl.w	r3, r2, r3
 8008e38:	43db      	mvns	r3, r3
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	4013      	ands	r3, r2
 8008e3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4a3c      	ldr	r2, [pc, #240]	; (8008f34 <HAL_GPIO_Init+0x2b0>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d01f      	beq.n	8008e88 <HAL_GPIO_Init+0x204>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a3b      	ldr	r2, [pc, #236]	; (8008f38 <HAL_GPIO_Init+0x2b4>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d019      	beq.n	8008e84 <HAL_GPIO_Init+0x200>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a3a      	ldr	r2, [pc, #232]	; (8008f3c <HAL_GPIO_Init+0x2b8>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d013      	beq.n	8008e80 <HAL_GPIO_Init+0x1fc>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a39      	ldr	r2, [pc, #228]	; (8008f40 <HAL_GPIO_Init+0x2bc>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d00d      	beq.n	8008e7c <HAL_GPIO_Init+0x1f8>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a38      	ldr	r2, [pc, #224]	; (8008f44 <HAL_GPIO_Init+0x2c0>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d007      	beq.n	8008e78 <HAL_GPIO_Init+0x1f4>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a37      	ldr	r2, [pc, #220]	; (8008f48 <HAL_GPIO_Init+0x2c4>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d101      	bne.n	8008e74 <HAL_GPIO_Init+0x1f0>
 8008e70:	2305      	movs	r3, #5
 8008e72:	e00a      	b.n	8008e8a <HAL_GPIO_Init+0x206>
 8008e74:	2306      	movs	r3, #6
 8008e76:	e008      	b.n	8008e8a <HAL_GPIO_Init+0x206>
 8008e78:	2304      	movs	r3, #4
 8008e7a:	e006      	b.n	8008e8a <HAL_GPIO_Init+0x206>
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	e004      	b.n	8008e8a <HAL_GPIO_Init+0x206>
 8008e80:	2302      	movs	r3, #2
 8008e82:	e002      	b.n	8008e8a <HAL_GPIO_Init+0x206>
 8008e84:	2301      	movs	r3, #1
 8008e86:	e000      	b.n	8008e8a <HAL_GPIO_Init+0x206>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e8c:	f002 0203 	and.w	r2, r2, #3
 8008e90:	0092      	lsls	r2, r2, #2
 8008e92:	4093      	lsls	r3, r2
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008e9a:	4925      	ldr	r1, [pc, #148]	; (8008f30 <HAL_GPIO_Init+0x2ac>)
 8008e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9e:	089b      	lsrs	r3, r3, #2
 8008ea0:	3302      	adds	r3, #2
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d006      	beq.n	8008ec2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008eb4:	4b25      	ldr	r3, [pc, #148]	; (8008f4c <HAL_GPIO_Init+0x2c8>)
 8008eb6:	689a      	ldr	r2, [r3, #8]
 8008eb8:	4924      	ldr	r1, [pc, #144]	; (8008f4c <HAL_GPIO_Init+0x2c8>)
 8008eba:	69bb      	ldr	r3, [r7, #24]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	608b      	str	r3, [r1, #8]
 8008ec0:	e006      	b.n	8008ed0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8008ec2:	4b22      	ldr	r3, [pc, #136]	; (8008f4c <HAL_GPIO_Init+0x2c8>)
 8008ec4:	689a      	ldr	r2, [r3, #8]
 8008ec6:	69bb      	ldr	r3, [r7, #24]
 8008ec8:	43db      	mvns	r3, r3
 8008eca:	4920      	ldr	r1, [pc, #128]	; (8008f4c <HAL_GPIO_Init+0x2c8>)
 8008ecc:	4013      	ands	r3, r2
 8008ece:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d006      	beq.n	8008eea <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008edc:	4b1b      	ldr	r3, [pc, #108]	; (8008f4c <HAL_GPIO_Init+0x2c8>)
 8008ede:	68da      	ldr	r2, [r3, #12]
 8008ee0:	491a      	ldr	r1, [pc, #104]	; (8008f4c <HAL_GPIO_Init+0x2c8>)
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	60cb      	str	r3, [r1, #12]
 8008ee8:	e006      	b.n	8008ef8 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008eea:	4b18      	ldr	r3, [pc, #96]	; (8008f4c <HAL_GPIO_Init+0x2c8>)
 8008eec:	68da      	ldr	r2, [r3, #12]
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	43db      	mvns	r3, r3
 8008ef2:	4916      	ldr	r1, [pc, #88]	; (8008f4c <HAL_GPIO_Init+0x2c8>)
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d025      	beq.n	8008f50 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008f04:	4b11      	ldr	r3, [pc, #68]	; (8008f4c <HAL_GPIO_Init+0x2c8>)
 8008f06:	685a      	ldr	r2, [r3, #4]
 8008f08:	4910      	ldr	r1, [pc, #64]	; (8008f4c <HAL_GPIO_Init+0x2c8>)
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	604b      	str	r3, [r1, #4]
 8008f10:	e025      	b.n	8008f5e <HAL_GPIO_Init+0x2da>
 8008f12:	bf00      	nop
 8008f14:	10320000 	.word	0x10320000
 8008f18:	10310000 	.word	0x10310000
 8008f1c:	10220000 	.word	0x10220000
 8008f20:	10210000 	.word	0x10210000
 8008f24:	10120000 	.word	0x10120000
 8008f28:	10110000 	.word	0x10110000
 8008f2c:	40021000 	.word	0x40021000
 8008f30:	40010000 	.word	0x40010000
 8008f34:	40010800 	.word	0x40010800
 8008f38:	40010c00 	.word	0x40010c00
 8008f3c:	40011000 	.word	0x40011000
 8008f40:	40011400 	.word	0x40011400
 8008f44:	40011800 	.word	0x40011800
 8008f48:	40011c00 	.word	0x40011c00
 8008f4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8008f50:	4b15      	ldr	r3, [pc, #84]	; (8008fa8 <HAL_GPIO_Init+0x324>)
 8008f52:	685a      	ldr	r2, [r3, #4]
 8008f54:	69bb      	ldr	r3, [r7, #24]
 8008f56:	43db      	mvns	r3, r3
 8008f58:	4913      	ldr	r1, [pc, #76]	; (8008fa8 <HAL_GPIO_Init+0x324>)
 8008f5a:	4013      	ands	r3, r2
 8008f5c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d006      	beq.n	8008f78 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8008f6a:	4b0f      	ldr	r3, [pc, #60]	; (8008fa8 <HAL_GPIO_Init+0x324>)
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	490e      	ldr	r1, [pc, #56]	; (8008fa8 <HAL_GPIO_Init+0x324>)
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	600b      	str	r3, [r1, #0]
 8008f76:	e006      	b.n	8008f86 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008f78:	4b0b      	ldr	r3, [pc, #44]	; (8008fa8 <HAL_GPIO_Init+0x324>)
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	43db      	mvns	r3, r3
 8008f80:	4909      	ldr	r1, [pc, #36]	; (8008fa8 <HAL_GPIO_Init+0x324>)
 8008f82:	4013      	ands	r3, r2
 8008f84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f88:	3301      	adds	r3, #1
 8008f8a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f92:	fa22 f303 	lsr.w	r3, r2, r3
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f47f ae7e 	bne.w	8008c98 <HAL_GPIO_Init+0x14>
  }
}
 8008f9c:	bf00      	nop
 8008f9e:	bf00      	nop
 8008fa0:	372c      	adds	r7, #44	; 0x2c
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bc80      	pop	{r7}
 8008fa6:	4770      	bx	lr
 8008fa8:	40010400 	.word	0x40010400

08008fac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b089      	sub	sp, #36	; 0x24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8008fba:	e0a6      	b.n	800910a <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc4:	683a      	ldr	r2, [r7, #0]
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	f000 8099 	beq.w	8009104 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8008fd2:	4a54      	ldr	r2, [pc, #336]	; (8009124 <HAL_GPIO_DeInit+0x178>)
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	089b      	lsrs	r3, r3, #2
 8008fd8:	3302      	adds	r3, #2
 8008fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fde:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	f003 0303 	and.w	r3, r3, #3
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	220f      	movs	r2, #15
 8008fea:	fa02 f303 	lsl.w	r3, r2, r3
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a4c      	ldr	r2, [pc, #304]	; (8009128 <HAL_GPIO_DeInit+0x17c>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d01f      	beq.n	800903c <HAL_GPIO_DeInit+0x90>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a4b      	ldr	r2, [pc, #300]	; (800912c <HAL_GPIO_DeInit+0x180>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d019      	beq.n	8009038 <HAL_GPIO_DeInit+0x8c>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a4a      	ldr	r2, [pc, #296]	; (8009130 <HAL_GPIO_DeInit+0x184>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d013      	beq.n	8009034 <HAL_GPIO_DeInit+0x88>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a49      	ldr	r2, [pc, #292]	; (8009134 <HAL_GPIO_DeInit+0x188>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d00d      	beq.n	8009030 <HAL_GPIO_DeInit+0x84>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a48      	ldr	r2, [pc, #288]	; (8009138 <HAL_GPIO_DeInit+0x18c>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d007      	beq.n	800902c <HAL_GPIO_DeInit+0x80>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a47      	ldr	r2, [pc, #284]	; (800913c <HAL_GPIO_DeInit+0x190>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d101      	bne.n	8009028 <HAL_GPIO_DeInit+0x7c>
 8009024:	2305      	movs	r3, #5
 8009026:	e00a      	b.n	800903e <HAL_GPIO_DeInit+0x92>
 8009028:	2306      	movs	r3, #6
 800902a:	e008      	b.n	800903e <HAL_GPIO_DeInit+0x92>
 800902c:	2304      	movs	r3, #4
 800902e:	e006      	b.n	800903e <HAL_GPIO_DeInit+0x92>
 8009030:	2303      	movs	r3, #3
 8009032:	e004      	b.n	800903e <HAL_GPIO_DeInit+0x92>
 8009034:	2302      	movs	r3, #2
 8009036:	e002      	b.n	800903e <HAL_GPIO_DeInit+0x92>
 8009038:	2301      	movs	r3, #1
 800903a:	e000      	b.n	800903e <HAL_GPIO_DeInit+0x92>
 800903c:	2300      	movs	r3, #0
 800903e:	69fa      	ldr	r2, [r7, #28]
 8009040:	f002 0203 	and.w	r2, r2, #3
 8009044:	0092      	lsls	r2, r2, #2
 8009046:	4093      	lsls	r3, r2
 8009048:	697a      	ldr	r2, [r7, #20]
 800904a:	429a      	cmp	r2, r3
 800904c:	d132      	bne.n	80090b4 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800904e:	4b3c      	ldr	r3, [pc, #240]	; (8009140 <HAL_GPIO_DeInit+0x194>)
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	43db      	mvns	r3, r3
 8009056:	493a      	ldr	r1, [pc, #232]	; (8009140 <HAL_GPIO_DeInit+0x194>)
 8009058:	4013      	ands	r3, r2
 800905a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800905c:	4b38      	ldr	r3, [pc, #224]	; (8009140 <HAL_GPIO_DeInit+0x194>)
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	43db      	mvns	r3, r3
 8009064:	4936      	ldr	r1, [pc, #216]	; (8009140 <HAL_GPIO_DeInit+0x194>)
 8009066:	4013      	ands	r3, r2
 8009068:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800906a:	4b35      	ldr	r3, [pc, #212]	; (8009140 <HAL_GPIO_DeInit+0x194>)
 800906c:	68da      	ldr	r2, [r3, #12]
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	43db      	mvns	r3, r3
 8009072:	4933      	ldr	r1, [pc, #204]	; (8009140 <HAL_GPIO_DeInit+0x194>)
 8009074:	4013      	ands	r3, r2
 8009076:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009078:	4b31      	ldr	r3, [pc, #196]	; (8009140 <HAL_GPIO_DeInit+0x194>)
 800907a:	689a      	ldr	r2, [r3, #8]
 800907c:	69bb      	ldr	r3, [r7, #24]
 800907e:	43db      	mvns	r3, r3
 8009080:	492f      	ldr	r1, [pc, #188]	; (8009140 <HAL_GPIO_DeInit+0x194>)
 8009082:	4013      	ands	r3, r2
 8009084:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	f003 0303 	and.w	r3, r3, #3
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	220f      	movs	r2, #15
 8009090:	fa02 f303 	lsl.w	r3, r2, r3
 8009094:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009096:	4a23      	ldr	r2, [pc, #140]	; (8009124 <HAL_GPIO_DeInit+0x178>)
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	089b      	lsrs	r3, r3, #2
 800909c:	3302      	adds	r3, #2
 800909e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	43da      	mvns	r2, r3
 80090a6:	481f      	ldr	r0, [pc, #124]	; (8009124 <HAL_GPIO_DeInit+0x178>)
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	089b      	lsrs	r3, r3, #2
 80090ac:	400a      	ands	r2, r1
 80090ae:	3302      	adds	r3, #2
 80090b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80090b4:	69bb      	ldr	r3, [r7, #24]
 80090b6:	2bff      	cmp	r3, #255	; 0xff
 80090b8:	d801      	bhi.n	80090be <HAL_GPIO_DeInit+0x112>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	e001      	b.n	80090c2 <HAL_GPIO_DeInit+0x116>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	3304      	adds	r3, #4
 80090c2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80090c4:	69bb      	ldr	r3, [r7, #24]
 80090c6:	2bff      	cmp	r3, #255	; 0xff
 80090c8:	d802      	bhi.n	80090d0 <HAL_GPIO_DeInit+0x124>
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	e002      	b.n	80090d6 <HAL_GPIO_DeInit+0x12a>
 80090d0:	69fb      	ldr	r3, [r7, #28]
 80090d2:	3b08      	subs	r3, #8
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	210f      	movs	r1, #15
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	fa01 f303 	lsl.w	r3, r1, r3
 80090e4:	43db      	mvns	r3, r3
 80090e6:	401a      	ands	r2, r3
 80090e8:	2104      	movs	r1, #4
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	fa01 f303 	lsl.w	r3, r1, r3
 80090f0:	431a      	orrs	r2, r3
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	68da      	ldr	r2, [r3, #12]
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	43db      	mvns	r3, r3
 80090fe:	401a      	ands	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009104:	69fb      	ldr	r3, [r7, #28]
 8009106:	3301      	adds	r3, #1
 8009108:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	69fb      	ldr	r3, [r7, #28]
 800910e:	fa22 f303 	lsr.w	r3, r2, r3
 8009112:	2b00      	cmp	r3, #0
 8009114:	f47f af52 	bne.w	8008fbc <HAL_GPIO_DeInit+0x10>
  }
}
 8009118:	bf00      	nop
 800911a:	bf00      	nop
 800911c:	3724      	adds	r7, #36	; 0x24
 800911e:	46bd      	mov	sp, r7
 8009120:	bc80      	pop	{r7}
 8009122:	4770      	bx	lr
 8009124:	40010000 	.word	0x40010000
 8009128:	40010800 	.word	0x40010800
 800912c:	40010c00 	.word	0x40010c00
 8009130:	40011000 	.word	0x40011000
 8009134:	40011400 	.word	0x40011400
 8009138:	40011800 	.word	0x40011800
 800913c:	40011c00 	.word	0x40011c00
 8009140:	40010400 	.word	0x40010400

08009144 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
 800914c:	460b      	mov	r3, r1
 800914e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	689a      	ldr	r2, [r3, #8]
 8009154:	887b      	ldrh	r3, [r7, #2]
 8009156:	4013      	ands	r3, r2
 8009158:	2b00      	cmp	r3, #0
 800915a:	d002      	beq.n	8009162 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800915c:	2301      	movs	r3, #1
 800915e:	73fb      	strb	r3, [r7, #15]
 8009160:	e001      	b.n	8009166 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009162:	2300      	movs	r3, #0
 8009164:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009166:	7bfb      	ldrb	r3, [r7, #15]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	bc80      	pop	{r7}
 8009170:	4770      	bx	lr

08009172 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009172:	b480      	push	{r7}
 8009174:	b083      	sub	sp, #12
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	460b      	mov	r3, r1
 800917c:	807b      	strh	r3, [r7, #2]
 800917e:	4613      	mov	r3, r2
 8009180:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009182:	787b      	ldrb	r3, [r7, #1]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d003      	beq.n	8009190 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009188:	887a      	ldrh	r2, [r7, #2]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800918e:	e003      	b.n	8009198 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009190:	887b      	ldrh	r3, [r7, #2]
 8009192:	041a      	lsls	r2, r3, #16
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	611a      	str	r2, [r3, #16]
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	bc80      	pop	{r7}
 80091a0:	4770      	bx	lr

080091a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80091a2:	b480      	push	{r7}
 80091a4:	b085      	sub	sp, #20
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
 80091aa:	460b      	mov	r3, r1
 80091ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80091b4:	887a      	ldrh	r2, [r7, #2]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	4013      	ands	r3, r2
 80091ba:	041a      	lsls	r2, r3, #16
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	43d9      	mvns	r1, r3
 80091c0:	887b      	ldrh	r3, [r7, #2]
 80091c2:	400b      	ands	r3, r1
 80091c4:	431a      	orrs	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	611a      	str	r2, [r3, #16]
}
 80091ca:	bf00      	nop
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bc80      	pop	{r7}
 80091d2:	4770      	bx	lr

080091d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d101      	bne.n	80091e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e12b      	b.n	800943e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d106      	bne.n	8009200 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7fe fff8 	bl	80081f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2224      	movs	r2, #36	; 0x24
 8009204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f022 0201 	bic.w	r2, r2, #1
 8009216:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009226:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009236:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009238:	f001 fdb8 	bl	800adac <HAL_RCC_GetPCLK1Freq>
 800923c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	4a81      	ldr	r2, [pc, #516]	; (8009448 <HAL_I2C_Init+0x274>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d807      	bhi.n	8009258 <HAL_I2C_Init+0x84>
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	4a80      	ldr	r2, [pc, #512]	; (800944c <HAL_I2C_Init+0x278>)
 800924c:	4293      	cmp	r3, r2
 800924e:	bf94      	ite	ls
 8009250:	2301      	movls	r3, #1
 8009252:	2300      	movhi	r3, #0
 8009254:	b2db      	uxtb	r3, r3
 8009256:	e006      	b.n	8009266 <HAL_I2C_Init+0x92>
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	4a7d      	ldr	r2, [pc, #500]	; (8009450 <HAL_I2C_Init+0x27c>)
 800925c:	4293      	cmp	r3, r2
 800925e:	bf94      	ite	ls
 8009260:	2301      	movls	r3, #1
 8009262:	2300      	movhi	r3, #0
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b00      	cmp	r3, #0
 8009268:	d001      	beq.n	800926e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	e0e7      	b.n	800943e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	4a78      	ldr	r2, [pc, #480]	; (8009454 <HAL_I2C_Init+0x280>)
 8009272:	fba2 2303 	umull	r2, r3, r2, r3
 8009276:	0c9b      	lsrs	r3, r3, #18
 8009278:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	430a      	orrs	r2, r1
 800928c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	6a1b      	ldr	r3, [r3, #32]
 8009294:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	4a6a      	ldr	r2, [pc, #424]	; (8009448 <HAL_I2C_Init+0x274>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d802      	bhi.n	80092a8 <HAL_I2C_Init+0xd4>
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	3301      	adds	r3, #1
 80092a6:	e009      	b.n	80092bc <HAL_I2C_Init+0xe8>
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80092ae:	fb02 f303 	mul.w	r3, r2, r3
 80092b2:	4a69      	ldr	r2, [pc, #420]	; (8009458 <HAL_I2C_Init+0x284>)
 80092b4:	fba2 2303 	umull	r2, r3, r2, r3
 80092b8:	099b      	lsrs	r3, r3, #6
 80092ba:	3301      	adds	r3, #1
 80092bc:	687a      	ldr	r2, [r7, #4]
 80092be:	6812      	ldr	r2, [r2, #0]
 80092c0:	430b      	orrs	r3, r1
 80092c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80092ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	495c      	ldr	r1, [pc, #368]	; (8009448 <HAL_I2C_Init+0x274>)
 80092d8:	428b      	cmp	r3, r1
 80092da:	d819      	bhi.n	8009310 <HAL_I2C_Init+0x13c>
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	1e59      	subs	r1, r3, #1
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	005b      	lsls	r3, r3, #1
 80092e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80092ea:	1c59      	adds	r1, r3, #1
 80092ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80092f0:	400b      	ands	r3, r1
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00a      	beq.n	800930c <HAL_I2C_Init+0x138>
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	1e59      	subs	r1, r3, #1
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	005b      	lsls	r3, r3, #1
 8009300:	fbb1 f3f3 	udiv	r3, r1, r3
 8009304:	3301      	adds	r3, #1
 8009306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800930a:	e051      	b.n	80093b0 <HAL_I2C_Init+0x1dc>
 800930c:	2304      	movs	r3, #4
 800930e:	e04f      	b.n	80093b0 <HAL_I2C_Init+0x1dc>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d111      	bne.n	800933c <HAL_I2C_Init+0x168>
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	1e58      	subs	r0, r3, #1
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6859      	ldr	r1, [r3, #4]
 8009320:	460b      	mov	r3, r1
 8009322:	005b      	lsls	r3, r3, #1
 8009324:	440b      	add	r3, r1
 8009326:	fbb0 f3f3 	udiv	r3, r0, r3
 800932a:	3301      	adds	r3, #1
 800932c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009330:	2b00      	cmp	r3, #0
 8009332:	bf0c      	ite	eq
 8009334:	2301      	moveq	r3, #1
 8009336:	2300      	movne	r3, #0
 8009338:	b2db      	uxtb	r3, r3
 800933a:	e012      	b.n	8009362 <HAL_I2C_Init+0x18e>
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	1e58      	subs	r0, r3, #1
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6859      	ldr	r1, [r3, #4]
 8009344:	460b      	mov	r3, r1
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	440b      	add	r3, r1
 800934a:	0099      	lsls	r1, r3, #2
 800934c:	440b      	add	r3, r1
 800934e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009352:	3301      	adds	r3, #1
 8009354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009358:	2b00      	cmp	r3, #0
 800935a:	bf0c      	ite	eq
 800935c:	2301      	moveq	r3, #1
 800935e:	2300      	movne	r3, #0
 8009360:	b2db      	uxtb	r3, r3
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <HAL_I2C_Init+0x196>
 8009366:	2301      	movs	r3, #1
 8009368:	e022      	b.n	80093b0 <HAL_I2C_Init+0x1dc>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d10e      	bne.n	8009390 <HAL_I2C_Init+0x1bc>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	1e58      	subs	r0, r3, #1
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6859      	ldr	r1, [r3, #4]
 800937a:	460b      	mov	r3, r1
 800937c:	005b      	lsls	r3, r3, #1
 800937e:	440b      	add	r3, r1
 8009380:	fbb0 f3f3 	udiv	r3, r0, r3
 8009384:	3301      	adds	r3, #1
 8009386:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800938a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800938e:	e00f      	b.n	80093b0 <HAL_I2C_Init+0x1dc>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	1e58      	subs	r0, r3, #1
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6859      	ldr	r1, [r3, #4]
 8009398:	460b      	mov	r3, r1
 800939a:	009b      	lsls	r3, r3, #2
 800939c:	440b      	add	r3, r1
 800939e:	0099      	lsls	r1, r3, #2
 80093a0:	440b      	add	r3, r1
 80093a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80093a6:	3301      	adds	r3, #1
 80093a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80093b0:	6879      	ldr	r1, [r7, #4]
 80093b2:	6809      	ldr	r1, [r1, #0]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	69da      	ldr	r2, [r3, #28]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6a1b      	ldr	r3, [r3, #32]
 80093ca:	431a      	orrs	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	430a      	orrs	r2, r1
 80093d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80093de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	6911      	ldr	r1, [r2, #16]
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	68d2      	ldr	r2, [r2, #12]
 80093ea:	4311      	orrs	r1, r2
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	6812      	ldr	r2, [r2, #0]
 80093f0:	430b      	orrs	r3, r1
 80093f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	695a      	ldr	r2, [r3, #20]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	431a      	orrs	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	430a      	orrs	r2, r1
 800940e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f042 0201 	orr.w	r2, r2, #1
 800941e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2220      	movs	r2, #32
 800942a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2200      	movs	r2, #0
 8009432:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	000186a0 	.word	0x000186a0
 800944c:	001e847f 	.word	0x001e847f
 8009450:	003d08ff 	.word	0x003d08ff
 8009454:	431bde83 	.word	0x431bde83
 8009458:	10624dd3 	.word	0x10624dd3

0800945c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d101      	bne.n	800946e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	e021      	b.n	80094b2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2224      	movs	r2, #36	; 0x24
 8009472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f022 0201 	bic.w	r2, r2, #1
 8009484:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7fe fef0 	bl	800826c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80094b0:	2300      	movs	r3, #0
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
	...

080094bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b088      	sub	sp, #32
 80094c0:	af02      	add	r7, sp, #8
 80094c2:	60f8      	str	r0, [r7, #12]
 80094c4:	607a      	str	r2, [r7, #4]
 80094c6:	461a      	mov	r2, r3
 80094c8:	460b      	mov	r3, r1
 80094ca:	817b      	strh	r3, [r7, #10]
 80094cc:	4613      	mov	r3, r2
 80094ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80094d0:	f7ff f85e 	bl	8008590 <HAL_GetTick>
 80094d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094dc:	b2db      	uxtb	r3, r3
 80094de:	2b20      	cmp	r3, #32
 80094e0:	f040 80e0 	bne.w	80096a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	2319      	movs	r3, #25
 80094ea:	2201      	movs	r2, #1
 80094ec:	4970      	ldr	r1, [pc, #448]	; (80096b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f000 fe5c 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80094fa:	2302      	movs	r3, #2
 80094fc:	e0d3      	b.n	80096a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009504:	2b01      	cmp	r3, #1
 8009506:	d101      	bne.n	800950c <HAL_I2C_Master_Transmit+0x50>
 8009508:	2302      	movs	r3, #2
 800950a:	e0cc      	b.n	80096a6 <HAL_I2C_Master_Transmit+0x1ea>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f003 0301 	and.w	r3, r3, #1
 800951e:	2b01      	cmp	r3, #1
 8009520:	d007      	beq.n	8009532 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f042 0201 	orr.w	r2, r2, #1
 8009530:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009540:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2221      	movs	r2, #33	; 0x21
 8009546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2210      	movs	r2, #16
 800954e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	893a      	ldrh	r2, [r7, #8]
 8009562:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009568:	b29a      	uxth	r2, r3
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	4a50      	ldr	r2, [pc, #320]	; (80096b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8009572:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009574:	8979      	ldrh	r1, [r7, #10]
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	6a3a      	ldr	r2, [r7, #32]
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f000 fc16 	bl	8009dac <I2C_MasterRequestWrite>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	e08d      	b.n	80096a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800958a:	2300      	movs	r3, #0
 800958c:	613b      	str	r3, [r7, #16]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	695b      	ldr	r3, [r3, #20]
 8009594:	613b      	str	r3, [r7, #16]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	699b      	ldr	r3, [r3, #24]
 800959c:	613b      	str	r3, [r7, #16]
 800959e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80095a0:	e066      	b.n	8009670 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80095a2:	697a      	ldr	r2, [r7, #20]
 80095a4:	6a39      	ldr	r1, [r7, #32]
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f000 ff1a 	bl	800a3e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80095ac:	4603      	mov	r3, r0
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00d      	beq.n	80095ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b6:	2b04      	cmp	r3, #4
 80095b8:	d107      	bne.n	80095ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	e06b      	b.n	80096a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d2:	781a      	ldrb	r2, [r3, #0]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095de:	1c5a      	adds	r2, r3, #1
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	3b01      	subs	r3, #1
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095f6:	3b01      	subs	r3, #1
 80095f8:	b29a      	uxth	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	695b      	ldr	r3, [r3, #20]
 8009604:	f003 0304 	and.w	r3, r3, #4
 8009608:	2b04      	cmp	r3, #4
 800960a:	d11b      	bne.n	8009644 <HAL_I2C_Master_Transmit+0x188>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009610:	2b00      	cmp	r3, #0
 8009612:	d017      	beq.n	8009644 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009618:	781a      	ldrb	r2, [r3, #0]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009624:	1c5a      	adds	r2, r3, #1
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800962e:	b29b      	uxth	r3, r3
 8009630:	3b01      	subs	r3, #1
 8009632:	b29a      	uxth	r2, r3
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800963c:	3b01      	subs	r3, #1
 800963e:	b29a      	uxth	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009644:	697a      	ldr	r2, [r7, #20]
 8009646:	6a39      	ldr	r1, [r7, #32]
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f000 ff11 	bl	800a470 <I2C_WaitOnBTFFlagUntilTimeout>
 800964e:	4603      	mov	r3, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	d00d      	beq.n	8009670 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009658:	2b04      	cmp	r3, #4
 800965a:	d107      	bne.n	800966c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800966a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	e01a      	b.n	80096a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009674:	2b00      	cmp	r3, #0
 8009676:	d194      	bne.n	80095a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2220      	movs	r2, #32
 800968c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80096a0:	2300      	movs	r3, #0
 80096a2:	e000      	b.n	80096a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80096a4:	2302      	movs	r3, #2
  }
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3718      	adds	r7, #24
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	00100002 	.word	0x00100002
 80096b4:	ffff0000 	.word	0xffff0000

080096b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b088      	sub	sp, #32
 80096bc:	af02      	add	r7, sp, #8
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	4608      	mov	r0, r1
 80096c2:	4611      	mov	r1, r2
 80096c4:	461a      	mov	r2, r3
 80096c6:	4603      	mov	r3, r0
 80096c8:	817b      	strh	r3, [r7, #10]
 80096ca:	460b      	mov	r3, r1
 80096cc:	813b      	strh	r3, [r7, #8]
 80096ce:	4613      	mov	r3, r2
 80096d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80096d2:	f7fe ff5d 	bl	8008590 <HAL_GetTick>
 80096d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	2b20      	cmp	r3, #32
 80096e2:	f040 80d9 	bne.w	8009898 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	2319      	movs	r3, #25
 80096ec:	2201      	movs	r2, #1
 80096ee:	496d      	ldr	r1, [pc, #436]	; (80098a4 <HAL_I2C_Mem_Write+0x1ec>)
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f000 fd5b 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d001      	beq.n	8009700 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80096fc:	2302      	movs	r3, #2
 80096fe:	e0cc      	b.n	800989a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009706:	2b01      	cmp	r3, #1
 8009708:	d101      	bne.n	800970e <HAL_I2C_Mem_Write+0x56>
 800970a:	2302      	movs	r3, #2
 800970c:	e0c5      	b.n	800989a <HAL_I2C_Mem_Write+0x1e2>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2201      	movs	r2, #1
 8009712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 0301 	and.w	r3, r3, #1
 8009720:	2b01      	cmp	r3, #1
 8009722:	d007      	beq.n	8009734 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	681a      	ldr	r2, [r3, #0]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f042 0201 	orr.w	r2, r2, #1
 8009732:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009742:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2221      	movs	r2, #33	; 0x21
 8009748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2240      	movs	r2, #64	; 0x40
 8009750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6a3a      	ldr	r2, [r7, #32]
 800975e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009764:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800976a:	b29a      	uxth	r2, r3
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	4a4d      	ldr	r2, [pc, #308]	; (80098a8 <HAL_I2C_Mem_Write+0x1f0>)
 8009774:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009776:	88f8      	ldrh	r0, [r7, #6]
 8009778:	893a      	ldrh	r2, [r7, #8]
 800977a:	8979      	ldrh	r1, [r7, #10]
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	9301      	str	r3, [sp, #4]
 8009780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009782:	9300      	str	r3, [sp, #0]
 8009784:	4603      	mov	r3, r0
 8009786:	68f8      	ldr	r0, [r7, #12]
 8009788:	f000 fb92 	bl	8009eb0 <I2C_RequestMemoryWrite>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d052      	beq.n	8009838 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e081      	b.n	800989a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009796:	697a      	ldr	r2, [r7, #20]
 8009798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 fe20 	bl	800a3e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80097a0:	4603      	mov	r3, r0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d00d      	beq.n	80097c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097aa:	2b04      	cmp	r3, #4
 80097ac:	d107      	bne.n	80097be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	e06b      	b.n	800989a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c6:	781a      	ldrb	r2, [r3, #0]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d2:	1c5a      	adds	r2, r3, #1
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097dc:	3b01      	subs	r3, #1
 80097de:	b29a      	uxth	r2, r3
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	3b01      	subs	r3, #1
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	695b      	ldr	r3, [r3, #20]
 80097f8:	f003 0304 	and.w	r3, r3, #4
 80097fc:	2b04      	cmp	r3, #4
 80097fe:	d11b      	bne.n	8009838 <HAL_I2C_Mem_Write+0x180>
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009804:	2b00      	cmp	r3, #0
 8009806:	d017      	beq.n	8009838 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	781a      	ldrb	r2, [r3, #0]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009818:	1c5a      	adds	r2, r3, #1
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009822:	3b01      	subs	r3, #1
 8009824:	b29a      	uxth	r2, r3
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800982e:	b29b      	uxth	r3, r3
 8009830:	3b01      	subs	r3, #1
 8009832:	b29a      	uxth	r2, r3
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1aa      	bne.n	8009796 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009840:	697a      	ldr	r2, [r7, #20]
 8009842:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f000 fe13 	bl	800a470 <I2C_WaitOnBTFFlagUntilTimeout>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00d      	beq.n	800986c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009854:	2b04      	cmp	r3, #4
 8009856:	d107      	bne.n	8009868 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009866:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	e016      	b.n	800989a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	681a      	ldr	r2, [r3, #0]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800987a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	2220      	movs	r2, #32
 8009880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2200      	movs	r2, #0
 8009890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009894:	2300      	movs	r3, #0
 8009896:	e000      	b.n	800989a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009898:	2302      	movs	r3, #2
  }
}
 800989a:	4618      	mov	r0, r3
 800989c:	3718      	adds	r7, #24
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	00100002 	.word	0x00100002
 80098a8:	ffff0000 	.word	0xffff0000

080098ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b08c      	sub	sp, #48	; 0x30
 80098b0:	af02      	add	r7, sp, #8
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	4608      	mov	r0, r1
 80098b6:	4611      	mov	r1, r2
 80098b8:	461a      	mov	r2, r3
 80098ba:	4603      	mov	r3, r0
 80098bc:	817b      	strh	r3, [r7, #10]
 80098be:	460b      	mov	r3, r1
 80098c0:	813b      	strh	r3, [r7, #8]
 80098c2:	4613      	mov	r3, r2
 80098c4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80098c6:	2300      	movs	r3, #0
 80098c8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80098ca:	f7fe fe61 	bl	8008590 <HAL_GetTick>
 80098ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098d6:	b2db      	uxtb	r3, r3
 80098d8:	2b20      	cmp	r3, #32
 80098da:	f040 8244 	bne.w	8009d66 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80098de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e0:	9300      	str	r3, [sp, #0]
 80098e2:	2319      	movs	r3, #25
 80098e4:	2201      	movs	r2, #1
 80098e6:	4982      	ldr	r1, [pc, #520]	; (8009af0 <HAL_I2C_Mem_Read+0x244>)
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f000 fc5f 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80098f4:	2302      	movs	r3, #2
 80098f6:	e237      	b.n	8009d68 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d101      	bne.n	8009906 <HAL_I2C_Mem_Read+0x5a>
 8009902:	2302      	movs	r3, #2
 8009904:	e230      	b.n	8009d68 <HAL_I2C_Mem_Read+0x4bc>
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2201      	movs	r2, #1
 800990a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f003 0301 	and.w	r3, r3, #1
 8009918:	2b01      	cmp	r3, #1
 800991a:	d007      	beq.n	800992c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f042 0201 	orr.w	r2, r2, #1
 800992a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	681a      	ldr	r2, [r3, #0]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800993a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2222      	movs	r2, #34	; 0x22
 8009940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2240      	movs	r2, #64	; 0x40
 8009948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2200      	movs	r2, #0
 8009950:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009956:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800995c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009962:	b29a      	uxth	r2, r3
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	4a62      	ldr	r2, [pc, #392]	; (8009af4 <HAL_I2C_Mem_Read+0x248>)
 800996c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800996e:	88f8      	ldrh	r0, [r7, #6]
 8009970:	893a      	ldrh	r2, [r7, #8]
 8009972:	8979      	ldrh	r1, [r7, #10]
 8009974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009976:	9301      	str	r3, [sp, #4]
 8009978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	4603      	mov	r3, r0
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f000 fb2c 	bl	8009fdc <I2C_RequestMemoryRead>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d001      	beq.n	800998e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	e1ec      	b.n	8009d68 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009992:	2b00      	cmp	r3, #0
 8009994:	d113      	bne.n	80099be <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009996:	2300      	movs	r3, #0
 8009998:	61fb      	str	r3, [r7, #28]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	695b      	ldr	r3, [r3, #20]
 80099a0:	61fb      	str	r3, [r7, #28]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	699b      	ldr	r3, [r3, #24]
 80099a8:	61fb      	str	r3, [r7, #28]
 80099aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099ba:	601a      	str	r2, [r3, #0]
 80099bc:	e1c0      	b.n	8009d40 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d11e      	bne.n	8009a04 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	681a      	ldr	r2, [r3, #0]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80099d6:	b672      	cpsid	i
}
 80099d8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099da:	2300      	movs	r3, #0
 80099dc:	61bb      	str	r3, [r7, #24]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	695b      	ldr	r3, [r3, #20]
 80099e4:	61bb      	str	r3, [r7, #24]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	699b      	ldr	r3, [r3, #24]
 80099ec:	61bb      	str	r3, [r7, #24]
 80099ee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009a00:	b662      	cpsie	i
}
 8009a02:	e035      	b.n	8009a70 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a08:	2b02      	cmp	r3, #2
 8009a0a:	d11e      	bne.n	8009a4a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a1c:	b672      	cpsid	i
}
 8009a1e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a20:	2300      	movs	r3, #0
 8009a22:	617b      	str	r3, [r7, #20]
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	617b      	str	r3, [r7, #20]
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	617b      	str	r3, [r7, #20]
 8009a34:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a44:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8009a46:	b662      	cpsie	i
}
 8009a48:	e012      	b.n	8009a70 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a58:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	613b      	str	r3, [r7, #16]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	695b      	ldr	r3, [r3, #20]
 8009a64:	613b      	str	r3, [r7, #16]
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	699b      	ldr	r3, [r3, #24]
 8009a6c:	613b      	str	r3, [r7, #16]
 8009a6e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8009a70:	e166      	b.n	8009d40 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a76:	2b03      	cmp	r3, #3
 8009a78:	f200 811f 	bhi.w	8009cba <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d123      	bne.n	8009acc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009a88:	68f8      	ldr	r0, [r7, #12]
 8009a8a:	f000 fd39 	bl	800a500 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009a94:	2301      	movs	r3, #1
 8009a96:	e167      	b.n	8009d68 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	691a      	ldr	r2, [r3, #16]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa2:	b2d2      	uxtb	r2, r2
 8009aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aaa:	1c5a      	adds	r2, r3, #1
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	b29a      	uxth	r2, r3
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009aca:	e139      	b.n	8009d40 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ad0:	2b02      	cmp	r3, #2
 8009ad2:	d152      	bne.n	8009b7a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ada:	2200      	movs	r2, #0
 8009adc:	4906      	ldr	r1, [pc, #24]	; (8009af8 <HAL_I2C_Mem_Read+0x24c>)
 8009ade:	68f8      	ldr	r0, [r7, #12]
 8009ae0:	f000 fb64 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d008      	beq.n	8009afc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e13c      	b.n	8009d68 <HAL_I2C_Mem_Read+0x4bc>
 8009aee:	bf00      	nop
 8009af0:	00100002 	.word	0x00100002
 8009af4:	ffff0000 	.word	0xffff0000
 8009af8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009afc:	b672      	cpsid	i
}
 8009afe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	691a      	ldr	r2, [r3, #16]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1a:	b2d2      	uxtb	r2, r2
 8009b1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b2c:	3b01      	subs	r3, #1
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b38:	b29b      	uxth	r3, r3
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009b42:	b662      	cpsie	i
}
 8009b44:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	691a      	ldr	r2, [r3, #16]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b50:	b2d2      	uxtb	r2, r2
 8009b52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b58:	1c5a      	adds	r2, r3, #1
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b62:	3b01      	subs	r3, #1
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	3b01      	subs	r3, #1
 8009b72:	b29a      	uxth	r2, r3
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009b78:	e0e2      	b.n	8009d40 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b80:	2200      	movs	r2, #0
 8009b82:	497b      	ldr	r1, [pc, #492]	; (8009d70 <HAL_I2C_Mem_Read+0x4c4>)
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f000 fb11 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	e0e9      	b.n	8009d68 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ba2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009ba4:	b672      	cpsid	i
}
 8009ba6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	691a      	ldr	r2, [r3, #16]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bb2:	b2d2      	uxtb	r2, r2
 8009bb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bba:	1c5a      	adds	r2, r3, #1
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009bda:	4b66      	ldr	r3, [pc, #408]	; (8009d74 <HAL_I2C_Mem_Read+0x4c8>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	08db      	lsrs	r3, r3, #3
 8009be0:	4a65      	ldr	r2, [pc, #404]	; (8009d78 <HAL_I2C_Mem_Read+0x4cc>)
 8009be2:	fba2 2303 	umull	r2, r3, r2, r3
 8009be6:	0a1a      	lsrs	r2, r3, #8
 8009be8:	4613      	mov	r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	00da      	lsls	r2, r3, #3
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009bf4:	6a3b      	ldr	r3, [r7, #32]
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009bfa:	6a3b      	ldr	r3, [r7, #32]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d118      	bne.n	8009c32 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2220      	movs	r2, #32
 8009c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1a:	f043 0220 	orr.w	r2, r3, #32
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8009c22:	b662      	cpsie	i
}
 8009c24:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e09a      	b.n	8009d68 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	695b      	ldr	r3, [r3, #20]
 8009c38:	f003 0304 	and.w	r3, r3, #4
 8009c3c:	2b04      	cmp	r3, #4
 8009c3e:	d1d9      	bne.n	8009bf4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	691a      	ldr	r2, [r3, #16]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c5a:	b2d2      	uxtb	r2, r2
 8009c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c62:	1c5a      	adds	r2, r3, #1
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c6c:	3b01      	subs	r3, #1
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	b29a      	uxth	r2, r3
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8009c82:	b662      	cpsie	i
}
 8009c84:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	691a      	ldr	r2, [r3, #16]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c90:	b2d2      	uxtb	r2, r2
 8009c92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c98:	1c5a      	adds	r2, r3, #1
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ca2:	3b01      	subs	r3, #1
 8009ca4:	b29a      	uxth	r2, r3
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009cb8:	e042      	b.n	8009d40 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cbc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009cbe:	68f8      	ldr	r0, [r7, #12]
 8009cc0:	f000 fc1e 	bl	800a500 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d001      	beq.n	8009cce <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e04c      	b.n	8009d68 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	691a      	ldr	r2, [r3, #16]
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cd8:	b2d2      	uxtb	r2, r2
 8009cda:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce0:	1c5a      	adds	r2, r3, #1
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cea:	3b01      	subs	r3, #1
 8009cec:	b29a      	uxth	r2, r3
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	b29a      	uxth	r2, r3
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	f003 0304 	and.w	r3, r3, #4
 8009d0a:	2b04      	cmp	r3, #4
 8009d0c:	d118      	bne.n	8009d40 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	691a      	ldr	r2, [r3, #16]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d18:	b2d2      	uxtb	r2, r2
 8009d1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d20:	1c5a      	adds	r2, r3, #1
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	3b01      	subs	r3, #1
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f47f ae94 	bne.w	8009a72 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2220      	movs	r2, #32
 8009d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2200      	movs	r2, #0
 8009d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009d62:	2300      	movs	r3, #0
 8009d64:	e000      	b.n	8009d68 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8009d66:	2302      	movs	r3, #2
  }
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3728      	adds	r7, #40	; 0x28
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	00010004 	.word	0x00010004
 8009d74:	200000a8 	.word	0x200000a8
 8009d78:	14f8b589 	.word	0x14f8b589

08009d7c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d8a:	b2db      	uxtb	r3, r3
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bc80      	pop	{r7}
 8009d94:	4770      	bx	lr

08009d96 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009d96:	b480      	push	{r7}
 8009d98:	b083      	sub	sp, #12
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bc80      	pop	{r7}
 8009daa:	4770      	bx	lr

08009dac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b088      	sub	sp, #32
 8009db0:	af02      	add	r7, sp, #8
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	607a      	str	r2, [r7, #4]
 8009db6:	603b      	str	r3, [r7, #0]
 8009db8:	460b      	mov	r3, r1
 8009dba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2b08      	cmp	r3, #8
 8009dc6:	d006      	beq.n	8009dd6 <I2C_MasterRequestWrite+0x2a>
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d003      	beq.n	8009dd6 <I2C_MasterRequestWrite+0x2a>
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009dd4:	d108      	bne.n	8009de8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	681a      	ldr	r2, [r3, #0]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009de4:	601a      	str	r2, [r3, #0]
 8009de6:	e00b      	b.n	8009e00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dec:	2b12      	cmp	r3, #18
 8009dee:	d107      	bne.n	8009e00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dfe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f000 f9cd 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00d      	beq.n	8009e34 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e26:	d103      	bne.n	8009e30 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009e30:	2303      	movs	r3, #3
 8009e32:	e035      	b.n	8009ea0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	691b      	ldr	r3, [r3, #16]
 8009e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009e3c:	d108      	bne.n	8009e50 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009e3e:	897b      	ldrh	r3, [r7, #10]
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	461a      	mov	r2, r3
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009e4c:	611a      	str	r2, [r3, #16]
 8009e4e:	e01b      	b.n	8009e88 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009e50:	897b      	ldrh	r3, [r7, #10]
 8009e52:	11db      	asrs	r3, r3, #7
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	f003 0306 	and.w	r3, r3, #6
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	f063 030f 	orn	r3, r3, #15
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	490e      	ldr	r1, [pc, #56]	; (8009ea8 <I2C_MasterRequestWrite+0xfc>)
 8009e6e:	68f8      	ldr	r0, [r7, #12]
 8009e70:	f000 fa16 	bl	800a2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d001      	beq.n	8009e7e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e010      	b.n	8009ea0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009e7e:	897b      	ldrh	r3, [r7, #10]
 8009e80:	b2da      	uxtb	r2, r3
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	4907      	ldr	r1, [pc, #28]	; (8009eac <I2C_MasterRequestWrite+0x100>)
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f000 fa06 	bl	800a2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d001      	beq.n	8009e9e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e000      	b.n	8009ea0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	00010008 	.word	0x00010008
 8009eac:	00010002 	.word	0x00010002

08009eb0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b088      	sub	sp, #32
 8009eb4:	af02      	add	r7, sp, #8
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	4608      	mov	r0, r1
 8009eba:	4611      	mov	r1, r2
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	817b      	strh	r3, [r7, #10]
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	813b      	strh	r3, [r7, #8]
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ed8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	6a3b      	ldr	r3, [r7, #32]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f000 f960 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00d      	beq.n	8009f0e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009efc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f00:	d103      	bne.n	8009f0a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009f0a:	2303      	movs	r3, #3
 8009f0c:	e05f      	b.n	8009fce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009f0e:	897b      	ldrh	r3, [r7, #10]
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	461a      	mov	r2, r3
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009f1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f20:	6a3a      	ldr	r2, [r7, #32]
 8009f22:	492d      	ldr	r1, [pc, #180]	; (8009fd8 <I2C_RequestMemoryWrite+0x128>)
 8009f24:	68f8      	ldr	r0, [r7, #12]
 8009f26:	f000 f9bb 	bl	800a2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d001      	beq.n	8009f34 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	e04c      	b.n	8009fce <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f34:	2300      	movs	r3, #0
 8009f36:	617b      	str	r3, [r7, #20]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	617b      	str	r3, [r7, #20]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	617b      	str	r3, [r7, #20]
 8009f48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f4c:	6a39      	ldr	r1, [r7, #32]
 8009f4e:	68f8      	ldr	r0, [r7, #12]
 8009f50:	f000 fa46 	bl	800a3e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00d      	beq.n	8009f76 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5e:	2b04      	cmp	r3, #4
 8009f60:	d107      	bne.n	8009f72 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e02b      	b.n	8009fce <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009f76:	88fb      	ldrh	r3, [r7, #6]
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d105      	bne.n	8009f88 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009f7c:	893b      	ldrh	r3, [r7, #8]
 8009f7e:	b2da      	uxtb	r2, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	611a      	str	r2, [r3, #16]
 8009f86:	e021      	b.n	8009fcc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009f88:	893b      	ldrh	r3, [r7, #8]
 8009f8a:	0a1b      	lsrs	r3, r3, #8
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	b2da      	uxtb	r2, r3
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f98:	6a39      	ldr	r1, [r7, #32]
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f000 fa20 	bl	800a3e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00d      	beq.n	8009fc2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009faa:	2b04      	cmp	r3, #4
 8009fac:	d107      	bne.n	8009fbe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	e005      	b.n	8009fce <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009fc2:	893b      	ldrh	r3, [r7, #8]
 8009fc4:	b2da      	uxtb	r2, r3
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3718      	adds	r7, #24
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
 8009fd6:	bf00      	nop
 8009fd8:	00010002 	.word	0x00010002

08009fdc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b088      	sub	sp, #32
 8009fe0:	af02      	add	r7, sp, #8
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	4608      	mov	r0, r1
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	461a      	mov	r2, r3
 8009fea:	4603      	mov	r3, r0
 8009fec:	817b      	strh	r3, [r7, #10]
 8009fee:	460b      	mov	r3, r1
 8009ff0:	813b      	strh	r3, [r7, #8]
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a004:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681a      	ldr	r2, [r3, #0]
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a014:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a018:	9300      	str	r3, [sp, #0]
 800a01a:	6a3b      	ldr	r3, [r7, #32]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f000 f8c2 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00d      	beq.n	800a04a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a038:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a03c:	d103      	bne.n	800a046 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a044:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a046:	2303      	movs	r3, #3
 800a048:	e0aa      	b.n	800a1a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a04a:	897b      	ldrh	r3, [r7, #10]
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	461a      	mov	r2, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a058:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05c:	6a3a      	ldr	r2, [r7, #32]
 800a05e:	4952      	ldr	r1, [pc, #328]	; (800a1a8 <I2C_RequestMemoryRead+0x1cc>)
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f000 f91d 	bl	800a2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a066:	4603      	mov	r3, r0
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d001      	beq.n	800a070 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	e097      	b.n	800a1a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a070:	2300      	movs	r3, #0
 800a072:	617b      	str	r3, [r7, #20]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	695b      	ldr	r3, [r3, #20]
 800a07a:	617b      	str	r3, [r7, #20]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	617b      	str	r3, [r7, #20]
 800a084:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a088:	6a39      	ldr	r1, [r7, #32]
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f000 f9a8 	bl	800a3e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d00d      	beq.n	800a0b2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09a:	2b04      	cmp	r3, #4
 800a09c:	d107      	bne.n	800a0ae <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0ac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e076      	b.n	800a1a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a0b2:	88fb      	ldrh	r3, [r7, #6]
 800a0b4:	2b01      	cmp	r3, #1
 800a0b6:	d105      	bne.n	800a0c4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a0b8:	893b      	ldrh	r3, [r7, #8]
 800a0ba:	b2da      	uxtb	r2, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	611a      	str	r2, [r3, #16]
 800a0c2:	e021      	b.n	800a108 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a0c4:	893b      	ldrh	r3, [r7, #8]
 800a0c6:	0a1b      	lsrs	r3, r3, #8
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	b2da      	uxtb	r2, r3
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0d4:	6a39      	ldr	r1, [r7, #32]
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f000 f982 	bl	800a3e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00d      	beq.n	800a0fe <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e6:	2b04      	cmp	r3, #4
 800a0e8:	d107      	bne.n	800a0fa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0f8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e050      	b.n	800a1a0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a0fe:	893b      	ldrh	r3, [r7, #8]
 800a100:	b2da      	uxtb	r2, r3
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a10a:	6a39      	ldr	r1, [r7, #32]
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f000 f967 	bl	800a3e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800a112:	4603      	mov	r3, r0
 800a114:	2b00      	cmp	r3, #0
 800a116:	d00d      	beq.n	800a134 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a11c:	2b04      	cmp	r3, #4
 800a11e:	d107      	bne.n	800a130 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a12e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	e035      	b.n	800a1a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a142:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a146:	9300      	str	r3, [sp, #0]
 800a148:	6a3b      	ldr	r3, [r7, #32]
 800a14a:	2200      	movs	r2, #0
 800a14c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f000 f82b 	bl	800a1ac <I2C_WaitOnFlagUntilTimeout>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00d      	beq.n	800a178 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a16a:	d103      	bne.n	800a174 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a172:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a174:	2303      	movs	r3, #3
 800a176:	e013      	b.n	800a1a0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a178:	897b      	ldrh	r3, [r7, #10]
 800a17a:	b2db      	uxtb	r3, r3
 800a17c:	f043 0301 	orr.w	r3, r3, #1
 800a180:	b2da      	uxtb	r2, r3
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18a:	6a3a      	ldr	r2, [r7, #32]
 800a18c:	4906      	ldr	r1, [pc, #24]	; (800a1a8 <I2C_RequestMemoryRead+0x1cc>)
 800a18e:	68f8      	ldr	r0, [r7, #12]
 800a190:	f000 f886 	bl	800a2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a194:	4603      	mov	r3, r0
 800a196:	2b00      	cmp	r3, #0
 800a198:	d001      	beq.n	800a19e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800a19a:	2301      	movs	r3, #1
 800a19c:	e000      	b.n	800a1a0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3718      	adds	r7, #24
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	00010002 	.word	0x00010002

0800a1ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	603b      	str	r3, [r7, #0]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a1bc:	e048      	b.n	800a250 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1c4:	d044      	beq.n	800a250 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a1c6:	f7fe f9e3 	bl	8008590 <HAL_GetTick>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	683a      	ldr	r2, [r7, #0]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d302      	bcc.n	800a1dc <I2C_WaitOnFlagUntilTimeout+0x30>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d139      	bne.n	800a250 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	0c1b      	lsrs	r3, r3, #16
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d10d      	bne.n	800a202 <I2C_WaitOnFlagUntilTimeout+0x56>
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	695b      	ldr	r3, [r3, #20]
 800a1ec:	43da      	mvns	r2, r3
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	bf0c      	ite	eq
 800a1f8:	2301      	moveq	r3, #1
 800a1fa:	2300      	movne	r3, #0
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	461a      	mov	r2, r3
 800a200:	e00c      	b.n	800a21c <I2C_WaitOnFlagUntilTimeout+0x70>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	699b      	ldr	r3, [r3, #24]
 800a208:	43da      	mvns	r2, r3
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	4013      	ands	r3, r2
 800a20e:	b29b      	uxth	r3, r3
 800a210:	2b00      	cmp	r3, #0
 800a212:	bf0c      	ite	eq
 800a214:	2301      	moveq	r3, #1
 800a216:	2300      	movne	r3, #0
 800a218:	b2db      	uxtb	r3, r3
 800a21a:	461a      	mov	r2, r3
 800a21c:	79fb      	ldrb	r3, [r7, #7]
 800a21e:	429a      	cmp	r2, r3
 800a220:	d116      	bne.n	800a250 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2220      	movs	r2, #32
 800a22c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2200      	movs	r2, #0
 800a234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23c:	f043 0220 	orr.w	r2, r3, #32
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	e023      	b.n	800a298 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	0c1b      	lsrs	r3, r3, #16
 800a254:	b2db      	uxtb	r3, r3
 800a256:	2b01      	cmp	r3, #1
 800a258:	d10d      	bne.n	800a276 <I2C_WaitOnFlagUntilTimeout+0xca>
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	695b      	ldr	r3, [r3, #20]
 800a260:	43da      	mvns	r2, r3
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	4013      	ands	r3, r2
 800a266:	b29b      	uxth	r3, r3
 800a268:	2b00      	cmp	r3, #0
 800a26a:	bf0c      	ite	eq
 800a26c:	2301      	moveq	r3, #1
 800a26e:	2300      	movne	r3, #0
 800a270:	b2db      	uxtb	r3, r3
 800a272:	461a      	mov	r2, r3
 800a274:	e00c      	b.n	800a290 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	699b      	ldr	r3, [r3, #24]
 800a27c:	43da      	mvns	r2, r3
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	4013      	ands	r3, r2
 800a282:	b29b      	uxth	r3, r3
 800a284:	2b00      	cmp	r3, #0
 800a286:	bf0c      	ite	eq
 800a288:	2301      	moveq	r3, #1
 800a28a:	2300      	movne	r3, #0
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	461a      	mov	r2, r3
 800a290:	79fb      	ldrb	r3, [r7, #7]
 800a292:	429a      	cmp	r2, r3
 800a294:	d093      	beq.n	800a1be <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	607a      	str	r2, [r7, #4]
 800a2ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a2ae:	e071      	b.n	800a394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	695b      	ldr	r3, [r3, #20]
 800a2b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a2ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2be:	d123      	bne.n	800a308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a2d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	2220      	movs	r2, #32
 800a2e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f4:	f043 0204 	orr.w	r2, r3, #4
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	e067      	b.n	800a3d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a30e:	d041      	beq.n	800a394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a310:	f7fe f93e 	bl	8008590 <HAL_GetTick>
 800a314:	4602      	mov	r2, r0
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	1ad3      	subs	r3, r2, r3
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d302      	bcc.n	800a326 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d136      	bne.n	800a394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	0c1b      	lsrs	r3, r3, #16
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d10c      	bne.n	800a34a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	695b      	ldr	r3, [r3, #20]
 800a336:	43da      	mvns	r2, r3
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	4013      	ands	r3, r2
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	2b00      	cmp	r3, #0
 800a340:	bf14      	ite	ne
 800a342:	2301      	movne	r3, #1
 800a344:	2300      	moveq	r3, #0
 800a346:	b2db      	uxtb	r3, r3
 800a348:	e00b      	b.n	800a362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	43da      	mvns	r2, r3
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	4013      	ands	r3, r2
 800a356:	b29b      	uxth	r3, r3
 800a358:	2b00      	cmp	r3, #0
 800a35a:	bf14      	ite	ne
 800a35c:	2301      	movne	r3, #1
 800a35e:	2300      	moveq	r3, #0
 800a360:	b2db      	uxtb	r3, r3
 800a362:	2b00      	cmp	r3, #0
 800a364:	d016      	beq.n	800a394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2200      	movs	r2, #0
 800a36a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2220      	movs	r2, #32
 800a370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2200      	movs	r2, #0
 800a378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a380:	f043 0220 	orr.w	r2, r3, #32
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a390:	2301      	movs	r3, #1
 800a392:	e021      	b.n	800a3d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a394:	68bb      	ldr	r3, [r7, #8]
 800a396:	0c1b      	lsrs	r3, r3, #16
 800a398:	b2db      	uxtb	r3, r3
 800a39a:	2b01      	cmp	r3, #1
 800a39c:	d10c      	bne.n	800a3b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	695b      	ldr	r3, [r3, #20]
 800a3a4:	43da      	mvns	r2, r3
 800a3a6:	68bb      	ldr	r3, [r7, #8]
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	bf14      	ite	ne
 800a3b0:	2301      	movne	r3, #1
 800a3b2:	2300      	moveq	r3, #0
 800a3b4:	b2db      	uxtb	r3, r3
 800a3b6:	e00b      	b.n	800a3d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	699b      	ldr	r3, [r3, #24]
 800a3be:	43da      	mvns	r2, r3
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	bf14      	ite	ne
 800a3ca:	2301      	movne	r3, #1
 800a3cc:	2300      	moveq	r3, #0
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f47f af6d 	bne.w	800a2b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800a3d6:	2300      	movs	r3, #0
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a3ec:	e034      	b.n	800a458 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a3ee:	68f8      	ldr	r0, [r7, #12]
 800a3f0:	f000 f8e3 	bl	800a5ba <I2C_IsAcknowledgeFailed>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d001      	beq.n	800a3fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e034      	b.n	800a468 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a404:	d028      	beq.n	800a458 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a406:	f7fe f8c3 	bl	8008590 <HAL_GetTick>
 800a40a:	4602      	mov	r2, r0
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	1ad3      	subs	r3, r2, r3
 800a410:	68ba      	ldr	r2, [r7, #8]
 800a412:	429a      	cmp	r2, r3
 800a414:	d302      	bcc.n	800a41c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d11d      	bne.n	800a458 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	695b      	ldr	r3, [r3, #20]
 800a422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a426:	2b80      	cmp	r3, #128	; 0x80
 800a428:	d016      	beq.n	800a458 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2200      	movs	r2, #0
 800a42e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2220      	movs	r2, #32
 800a434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a444:	f043 0220 	orr.w	r2, r3, #32
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	2200      	movs	r2, #0
 800a450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	e007      	b.n	800a468 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	695b      	ldr	r3, [r3, #20]
 800a45e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a462:	2b80      	cmp	r3, #128	; 0x80
 800a464:	d1c3      	bne.n	800a3ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3710      	adds	r7, #16
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a47c:	e034      	b.n	800a4e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f000 f89b 	bl	800a5ba <I2C_IsAcknowledgeFailed>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e034      	b.n	800a4f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a494:	d028      	beq.n	800a4e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a496:	f7fe f87b 	bl	8008590 <HAL_GetTick>
 800a49a:	4602      	mov	r2, r0
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	68ba      	ldr	r2, [r7, #8]
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d302      	bcc.n	800a4ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d11d      	bne.n	800a4e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	695b      	ldr	r3, [r3, #20]
 800a4b2:	f003 0304 	and.w	r3, r3, #4
 800a4b6:	2b04      	cmp	r3, #4
 800a4b8:	d016      	beq.n	800a4e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2220      	movs	r2, #32
 800a4c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d4:	f043 0220 	orr.w	r2, r3, #32
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e007      	b.n	800a4f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	695b      	ldr	r3, [r3, #20]
 800a4ee:	f003 0304 	and.w	r3, r3, #4
 800a4f2:	2b04      	cmp	r3, #4
 800a4f4:	d1c3      	bne.n	800a47e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b084      	sub	sp, #16
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	60b9      	str	r1, [r7, #8]
 800a50a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a50c:	e049      	b.n	800a5a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	695b      	ldr	r3, [r3, #20]
 800a514:	f003 0310 	and.w	r3, r3, #16
 800a518:	2b10      	cmp	r3, #16
 800a51a:	d119      	bne.n	800a550 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f06f 0210 	mvn.w	r2, #16
 800a524:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2200      	movs	r2, #0
 800a52a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2220      	movs	r2, #32
 800a530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2200      	movs	r2, #0
 800a538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2200      	movs	r2, #0
 800a548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	e030      	b.n	800a5b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a550:	f7fe f81e 	bl	8008590 <HAL_GetTick>
 800a554:	4602      	mov	r2, r0
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	1ad3      	subs	r3, r2, r3
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d302      	bcc.n	800a566 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d11d      	bne.n	800a5a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	695b      	ldr	r3, [r3, #20]
 800a56c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a570:	2b40      	cmp	r3, #64	; 0x40
 800a572:	d016      	beq.n	800a5a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2200      	movs	r2, #0
 800a578:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2220      	movs	r2, #32
 800a57e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2200      	movs	r2, #0
 800a586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58e:	f043 0220 	orr.w	r2, r3, #32
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2200      	movs	r2, #0
 800a59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	e007      	b.n	800a5b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	695b      	ldr	r3, [r3, #20]
 800a5a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5ac:	2b40      	cmp	r3, #64	; 0x40
 800a5ae:	d1ae      	bne.n	800a50e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3710      	adds	r7, #16
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a5ba:	b480      	push	{r7}
 800a5bc:	b083      	sub	sp, #12
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	695b      	ldr	r3, [r3, #20]
 800a5c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5d0:	d11b      	bne.n	800a60a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a5da:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5f6:	f043 0204 	orr.w	r2, r3, #4
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e000      	b.n	800a60c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	370c      	adds	r7, #12
 800a610:	46bd      	mov	sp, r7
 800a612:	bc80      	pop	{r7}
 800a614:	4770      	bx	lr
	...

0800a618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d101      	bne.n	800a62a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	e272      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f003 0301 	and.w	r3, r3, #1
 800a632:	2b00      	cmp	r3, #0
 800a634:	f000 8087 	beq.w	800a746 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a638:	4b92      	ldr	r3, [pc, #584]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	f003 030c 	and.w	r3, r3, #12
 800a640:	2b04      	cmp	r3, #4
 800a642:	d00c      	beq.n	800a65e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a644:	4b8f      	ldr	r3, [pc, #572]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	f003 030c 	and.w	r3, r3, #12
 800a64c:	2b08      	cmp	r3, #8
 800a64e:	d112      	bne.n	800a676 <HAL_RCC_OscConfig+0x5e>
 800a650:	4b8c      	ldr	r3, [pc, #560]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a65c:	d10b      	bne.n	800a676 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a65e:	4b89      	ldr	r3, [pc, #548]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a666:	2b00      	cmp	r3, #0
 800a668:	d06c      	beq.n	800a744 <HAL_RCC_OscConfig+0x12c>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d168      	bne.n	800a744 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	e24c      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	685b      	ldr	r3, [r3, #4]
 800a67a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a67e:	d106      	bne.n	800a68e <HAL_RCC_OscConfig+0x76>
 800a680:	4b80      	ldr	r3, [pc, #512]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a7f      	ldr	r2, [pc, #508]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a68a:	6013      	str	r3, [r2, #0]
 800a68c:	e02e      	b.n	800a6ec <HAL_RCC_OscConfig+0xd4>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d10c      	bne.n	800a6b0 <HAL_RCC_OscConfig+0x98>
 800a696:	4b7b      	ldr	r3, [pc, #492]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4a7a      	ldr	r2, [pc, #488]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a69c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6a0:	6013      	str	r3, [r2, #0]
 800a6a2:	4b78      	ldr	r3, [pc, #480]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a77      	ldr	r2, [pc, #476]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a6a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6ac:	6013      	str	r3, [r2, #0]
 800a6ae:	e01d      	b.n	800a6ec <HAL_RCC_OscConfig+0xd4>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a6b8:	d10c      	bne.n	800a6d4 <HAL_RCC_OscConfig+0xbc>
 800a6ba:	4b72      	ldr	r3, [pc, #456]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a71      	ldr	r2, [pc, #452]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a6c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a6c4:	6013      	str	r3, [r2, #0]
 800a6c6:	4b6f      	ldr	r3, [pc, #444]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a6e      	ldr	r2, [pc, #440]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a6cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6d0:	6013      	str	r3, [r2, #0]
 800a6d2:	e00b      	b.n	800a6ec <HAL_RCC_OscConfig+0xd4>
 800a6d4:	4b6b      	ldr	r3, [pc, #428]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	4a6a      	ldr	r2, [pc, #424]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a6da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6de:	6013      	str	r3, [r2, #0]
 800a6e0:	4b68      	ldr	r3, [pc, #416]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a67      	ldr	r2, [pc, #412]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a6e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a6ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	685b      	ldr	r3, [r3, #4]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d013      	beq.n	800a71c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a6f4:	f7fd ff4c 	bl	8008590 <HAL_GetTick>
 800a6f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6fa:	e008      	b.n	800a70e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a6fc:	f7fd ff48 	bl	8008590 <HAL_GetTick>
 800a700:	4602      	mov	r2, r0
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	1ad3      	subs	r3, r2, r3
 800a706:	2b64      	cmp	r3, #100	; 0x64
 800a708:	d901      	bls.n	800a70e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a70a:	2303      	movs	r3, #3
 800a70c:	e200      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a70e:	4b5d      	ldr	r3, [pc, #372]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a716:	2b00      	cmp	r3, #0
 800a718:	d0f0      	beq.n	800a6fc <HAL_RCC_OscConfig+0xe4>
 800a71a:	e014      	b.n	800a746 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a71c:	f7fd ff38 	bl	8008590 <HAL_GetTick>
 800a720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a722:	e008      	b.n	800a736 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a724:	f7fd ff34 	bl	8008590 <HAL_GetTick>
 800a728:	4602      	mov	r2, r0
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	1ad3      	subs	r3, r2, r3
 800a72e:	2b64      	cmp	r3, #100	; 0x64
 800a730:	d901      	bls.n	800a736 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a732:	2303      	movs	r3, #3
 800a734:	e1ec      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a736:	4b53      	ldr	r3, [pc, #332]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d1f0      	bne.n	800a724 <HAL_RCC_OscConfig+0x10c>
 800a742:	e000      	b.n	800a746 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f003 0302 	and.w	r3, r3, #2
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d063      	beq.n	800a81a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a752:	4b4c      	ldr	r3, [pc, #304]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	f003 030c 	and.w	r3, r3, #12
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00b      	beq.n	800a776 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800a75e:	4b49      	ldr	r3, [pc, #292]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	f003 030c 	and.w	r3, r3, #12
 800a766:	2b08      	cmp	r3, #8
 800a768:	d11c      	bne.n	800a7a4 <HAL_RCC_OscConfig+0x18c>
 800a76a:	4b46      	ldr	r3, [pc, #280]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a772:	2b00      	cmp	r3, #0
 800a774:	d116      	bne.n	800a7a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a776:	4b43      	ldr	r3, [pc, #268]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f003 0302 	and.w	r3, r3, #2
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d005      	beq.n	800a78e <HAL_RCC_OscConfig+0x176>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	691b      	ldr	r3, [r3, #16]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d001      	beq.n	800a78e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	e1c0      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a78e:	4b3d      	ldr	r3, [pc, #244]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	695b      	ldr	r3, [r3, #20]
 800a79a:	00db      	lsls	r3, r3, #3
 800a79c:	4939      	ldr	r1, [pc, #228]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a7a2:	e03a      	b.n	800a81a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	691b      	ldr	r3, [r3, #16]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d020      	beq.n	800a7ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a7ac:	4b36      	ldr	r3, [pc, #216]	; (800a888 <HAL_RCC_OscConfig+0x270>)
 800a7ae:	2201      	movs	r2, #1
 800a7b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7b2:	f7fd feed 	bl	8008590 <HAL_GetTick>
 800a7b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7b8:	e008      	b.n	800a7cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7ba:	f7fd fee9 	bl	8008590 <HAL_GetTick>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	1ad3      	subs	r3, r2, r3
 800a7c4:	2b02      	cmp	r3, #2
 800a7c6:	d901      	bls.n	800a7cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a7c8:	2303      	movs	r3, #3
 800a7ca:	e1a1      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a7cc:	4b2d      	ldr	r3, [pc, #180]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 0302 	and.w	r3, r3, #2
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d0f0      	beq.n	800a7ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a7d8:	4b2a      	ldr	r3, [pc, #168]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	00db      	lsls	r3, r3, #3
 800a7e6:	4927      	ldr	r1, [pc, #156]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a7e8:	4313      	orrs	r3, r2
 800a7ea:	600b      	str	r3, [r1, #0]
 800a7ec:	e015      	b.n	800a81a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a7ee:	4b26      	ldr	r3, [pc, #152]	; (800a888 <HAL_RCC_OscConfig+0x270>)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7f4:	f7fd fecc 	bl	8008590 <HAL_GetTick>
 800a7f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a7fa:	e008      	b.n	800a80e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a7fc:	f7fd fec8 	bl	8008590 <HAL_GetTick>
 800a800:	4602      	mov	r2, r0
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	1ad3      	subs	r3, r2, r3
 800a806:	2b02      	cmp	r3, #2
 800a808:	d901      	bls.n	800a80e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a80a:	2303      	movs	r3, #3
 800a80c:	e180      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a80e:	4b1d      	ldr	r3, [pc, #116]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 0302 	and.w	r3, r3, #2
 800a816:	2b00      	cmp	r3, #0
 800a818:	d1f0      	bne.n	800a7fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f003 0308 	and.w	r3, r3, #8
 800a822:	2b00      	cmp	r3, #0
 800a824:	d03a      	beq.n	800a89c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	699b      	ldr	r3, [r3, #24]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d019      	beq.n	800a862 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a82e:	4b17      	ldr	r3, [pc, #92]	; (800a88c <HAL_RCC_OscConfig+0x274>)
 800a830:	2201      	movs	r2, #1
 800a832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a834:	f7fd feac 	bl	8008590 <HAL_GetTick>
 800a838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a83a:	e008      	b.n	800a84e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a83c:	f7fd fea8 	bl	8008590 <HAL_GetTick>
 800a840:	4602      	mov	r2, r0
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	2b02      	cmp	r3, #2
 800a848:	d901      	bls.n	800a84e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a84a:	2303      	movs	r3, #3
 800a84c:	e160      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a84e:	4b0d      	ldr	r3, [pc, #52]	; (800a884 <HAL_RCC_OscConfig+0x26c>)
 800a850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a852:	f003 0302 	and.w	r3, r3, #2
 800a856:	2b00      	cmp	r3, #0
 800a858:	d0f0      	beq.n	800a83c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a85a:	2001      	movs	r0, #1
 800a85c:	f000 face 	bl	800adfc <RCC_Delay>
 800a860:	e01c      	b.n	800a89c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a862:	4b0a      	ldr	r3, [pc, #40]	; (800a88c <HAL_RCC_OscConfig+0x274>)
 800a864:	2200      	movs	r2, #0
 800a866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a868:	f7fd fe92 	bl	8008590 <HAL_GetTick>
 800a86c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a86e:	e00f      	b.n	800a890 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a870:	f7fd fe8e 	bl	8008590 <HAL_GetTick>
 800a874:	4602      	mov	r2, r0
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	1ad3      	subs	r3, r2, r3
 800a87a:	2b02      	cmp	r3, #2
 800a87c:	d908      	bls.n	800a890 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a87e:	2303      	movs	r3, #3
 800a880:	e146      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
 800a882:	bf00      	nop
 800a884:	40021000 	.word	0x40021000
 800a888:	42420000 	.word	0x42420000
 800a88c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a890:	4b92      	ldr	r3, [pc, #584]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a894:	f003 0302 	and.w	r3, r3, #2
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d1e9      	bne.n	800a870 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f003 0304 	and.w	r3, r3, #4
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f000 80a6 	beq.w	800a9f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a8ae:	4b8b      	ldr	r3, [pc, #556]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a8b0:	69db      	ldr	r3, [r3, #28]
 800a8b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10d      	bne.n	800a8d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a8ba:	4b88      	ldr	r3, [pc, #544]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a8bc:	69db      	ldr	r3, [r3, #28]
 800a8be:	4a87      	ldr	r2, [pc, #540]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a8c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8c4:	61d3      	str	r3, [r2, #28]
 800a8c6:	4b85      	ldr	r3, [pc, #532]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a8c8:	69db      	ldr	r3, [r3, #28]
 800a8ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a8ce:	60bb      	str	r3, [r7, #8]
 800a8d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8d6:	4b82      	ldr	r3, [pc, #520]	; (800aae0 <HAL_RCC_OscConfig+0x4c8>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d118      	bne.n	800a914 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a8e2:	4b7f      	ldr	r3, [pc, #508]	; (800aae0 <HAL_RCC_OscConfig+0x4c8>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a7e      	ldr	r2, [pc, #504]	; (800aae0 <HAL_RCC_OscConfig+0x4c8>)
 800a8e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a8ee:	f7fd fe4f 	bl	8008590 <HAL_GetTick>
 800a8f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a8f4:	e008      	b.n	800a908 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8f6:	f7fd fe4b 	bl	8008590 <HAL_GetTick>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	1ad3      	subs	r3, r2, r3
 800a900:	2b64      	cmp	r3, #100	; 0x64
 800a902:	d901      	bls.n	800a908 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a904:	2303      	movs	r3, #3
 800a906:	e103      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a908:	4b75      	ldr	r3, [pc, #468]	; (800aae0 <HAL_RCC_OscConfig+0x4c8>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a910:	2b00      	cmp	r3, #0
 800a912:	d0f0      	beq.n	800a8f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d106      	bne.n	800a92a <HAL_RCC_OscConfig+0x312>
 800a91c:	4b6f      	ldr	r3, [pc, #444]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a91e:	6a1b      	ldr	r3, [r3, #32]
 800a920:	4a6e      	ldr	r2, [pc, #440]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a922:	f043 0301 	orr.w	r3, r3, #1
 800a926:	6213      	str	r3, [r2, #32]
 800a928:	e02d      	b.n	800a986 <HAL_RCC_OscConfig+0x36e>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	68db      	ldr	r3, [r3, #12]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10c      	bne.n	800a94c <HAL_RCC_OscConfig+0x334>
 800a932:	4b6a      	ldr	r3, [pc, #424]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a934:	6a1b      	ldr	r3, [r3, #32]
 800a936:	4a69      	ldr	r2, [pc, #420]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a938:	f023 0301 	bic.w	r3, r3, #1
 800a93c:	6213      	str	r3, [r2, #32]
 800a93e:	4b67      	ldr	r3, [pc, #412]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	4a66      	ldr	r2, [pc, #408]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a944:	f023 0304 	bic.w	r3, r3, #4
 800a948:	6213      	str	r3, [r2, #32]
 800a94a:	e01c      	b.n	800a986 <HAL_RCC_OscConfig+0x36e>
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	2b05      	cmp	r3, #5
 800a952:	d10c      	bne.n	800a96e <HAL_RCC_OscConfig+0x356>
 800a954:	4b61      	ldr	r3, [pc, #388]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a956:	6a1b      	ldr	r3, [r3, #32]
 800a958:	4a60      	ldr	r2, [pc, #384]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a95a:	f043 0304 	orr.w	r3, r3, #4
 800a95e:	6213      	str	r3, [r2, #32]
 800a960:	4b5e      	ldr	r3, [pc, #376]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a962:	6a1b      	ldr	r3, [r3, #32]
 800a964:	4a5d      	ldr	r2, [pc, #372]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a966:	f043 0301 	orr.w	r3, r3, #1
 800a96a:	6213      	str	r3, [r2, #32]
 800a96c:	e00b      	b.n	800a986 <HAL_RCC_OscConfig+0x36e>
 800a96e:	4b5b      	ldr	r3, [pc, #364]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a970:	6a1b      	ldr	r3, [r3, #32]
 800a972:	4a5a      	ldr	r2, [pc, #360]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a974:	f023 0301 	bic.w	r3, r3, #1
 800a978:	6213      	str	r3, [r2, #32]
 800a97a:	4b58      	ldr	r3, [pc, #352]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a97c:	6a1b      	ldr	r3, [r3, #32]
 800a97e:	4a57      	ldr	r2, [pc, #348]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a980:	f023 0304 	bic.w	r3, r3, #4
 800a984:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d015      	beq.n	800a9ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a98e:	f7fd fdff 	bl	8008590 <HAL_GetTick>
 800a992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a994:	e00a      	b.n	800a9ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a996:	f7fd fdfb 	bl	8008590 <HAL_GetTick>
 800a99a:	4602      	mov	r2, r0
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	1ad3      	subs	r3, r2, r3
 800a9a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d901      	bls.n	800a9ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	e0b1      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9ac:	4b4b      	ldr	r3, [pc, #300]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a9ae:	6a1b      	ldr	r3, [r3, #32]
 800a9b0:	f003 0302 	and.w	r3, r3, #2
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d0ee      	beq.n	800a996 <HAL_RCC_OscConfig+0x37e>
 800a9b8:	e014      	b.n	800a9e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a9ba:	f7fd fde9 	bl	8008590 <HAL_GetTick>
 800a9be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a9c0:	e00a      	b.n	800a9d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a9c2:	f7fd fde5 	bl	8008590 <HAL_GetTick>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	1ad3      	subs	r3, r2, r3
 800a9cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d901      	bls.n	800a9d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a9d4:	2303      	movs	r3, #3
 800a9d6:	e09b      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a9d8:	4b40      	ldr	r3, [pc, #256]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a9da:	6a1b      	ldr	r3, [r3, #32]
 800a9dc:	f003 0302 	and.w	r3, r3, #2
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1ee      	bne.n	800a9c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a9e4:	7dfb      	ldrb	r3, [r7, #23]
 800a9e6:	2b01      	cmp	r3, #1
 800a9e8:	d105      	bne.n	800a9f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a9ea:	4b3c      	ldr	r3, [pc, #240]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a9ec:	69db      	ldr	r3, [r3, #28]
 800a9ee:	4a3b      	ldr	r2, [pc, #236]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800a9f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a9f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	69db      	ldr	r3, [r3, #28]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	f000 8087 	beq.w	800ab0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800aa00:	4b36      	ldr	r3, [pc, #216]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	f003 030c 	and.w	r3, r3, #12
 800aa08:	2b08      	cmp	r3, #8
 800aa0a:	d061      	beq.n	800aad0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	69db      	ldr	r3, [r3, #28]
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d146      	bne.n	800aaa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aa14:	4b33      	ldr	r3, [pc, #204]	; (800aae4 <HAL_RCC_OscConfig+0x4cc>)
 800aa16:	2200      	movs	r2, #0
 800aa18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa1a:	f7fd fdb9 	bl	8008590 <HAL_GetTick>
 800aa1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aa20:	e008      	b.n	800aa34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa22:	f7fd fdb5 	bl	8008590 <HAL_GetTick>
 800aa26:	4602      	mov	r2, r0
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	1ad3      	subs	r3, r2, r3
 800aa2c:	2b02      	cmp	r3, #2
 800aa2e:	d901      	bls.n	800aa34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800aa30:	2303      	movs	r3, #3
 800aa32:	e06d      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aa34:	4b29      	ldr	r3, [pc, #164]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1f0      	bne.n	800aa22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6a1b      	ldr	r3, [r3, #32]
 800aa44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa48:	d108      	bne.n	800aa5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800aa4a:	4b24      	ldr	r3, [pc, #144]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	4921      	ldr	r1, [pc, #132]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800aa5c:	4b1f      	ldr	r3, [pc, #124]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6a19      	ldr	r1, [r3, #32]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa6c:	430b      	orrs	r3, r1
 800aa6e:	491b      	ldr	r1, [pc, #108]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800aa70:	4313      	orrs	r3, r2
 800aa72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aa74:	4b1b      	ldr	r3, [pc, #108]	; (800aae4 <HAL_RCC_OscConfig+0x4cc>)
 800aa76:	2201      	movs	r2, #1
 800aa78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa7a:	f7fd fd89 	bl	8008590 <HAL_GetTick>
 800aa7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800aa80:	e008      	b.n	800aa94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aa82:	f7fd fd85 	bl	8008590 <HAL_GetTick>
 800aa86:	4602      	mov	r2, r0
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	1ad3      	subs	r3, r2, r3
 800aa8c:	2b02      	cmp	r3, #2
 800aa8e:	d901      	bls.n	800aa94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800aa90:	2303      	movs	r3, #3
 800aa92:	e03d      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800aa94:	4b11      	ldr	r3, [pc, #68]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d0f0      	beq.n	800aa82 <HAL_RCC_OscConfig+0x46a>
 800aaa0:	e035      	b.n	800ab0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aaa2:	4b10      	ldr	r3, [pc, #64]	; (800aae4 <HAL_RCC_OscConfig+0x4cc>)
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aaa8:	f7fd fd72 	bl	8008590 <HAL_GetTick>
 800aaac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aaae:	e008      	b.n	800aac2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aab0:	f7fd fd6e 	bl	8008590 <HAL_GetTick>
 800aab4:	4602      	mov	r2, r0
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	1ad3      	subs	r3, r2, r3
 800aaba:	2b02      	cmp	r3, #2
 800aabc:	d901      	bls.n	800aac2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800aabe:	2303      	movs	r3, #3
 800aac0:	e026      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800aac2:	4b06      	ldr	r3, [pc, #24]	; (800aadc <HAL_RCC_OscConfig+0x4c4>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1f0      	bne.n	800aab0 <HAL_RCC_OscConfig+0x498>
 800aace:	e01e      	b.n	800ab0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	69db      	ldr	r3, [r3, #28]
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d107      	bne.n	800aae8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800aad8:	2301      	movs	r3, #1
 800aada:	e019      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
 800aadc:	40021000 	.word	0x40021000
 800aae0:	40007000 	.word	0x40007000
 800aae4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800aae8:	4b0b      	ldr	r3, [pc, #44]	; (800ab18 <HAL_RCC_OscConfig+0x500>)
 800aaea:	685b      	ldr	r3, [r3, #4]
 800aaec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a1b      	ldr	r3, [r3, #32]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d106      	bne.n	800ab0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ab06:	429a      	cmp	r2, r3
 800ab08:	d001      	beq.n	800ab0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e000      	b.n	800ab10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3718      	adds	r7, #24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	40021000 	.word	0x40021000

0800ab1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d101      	bne.n	800ab30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e0d0      	b.n	800acd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ab30:	4b6a      	ldr	r3, [pc, #424]	; (800acdc <HAL_RCC_ClockConfig+0x1c0>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 0307 	and.w	r3, r3, #7
 800ab38:	683a      	ldr	r2, [r7, #0]
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d910      	bls.n	800ab60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ab3e:	4b67      	ldr	r3, [pc, #412]	; (800acdc <HAL_RCC_ClockConfig+0x1c0>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f023 0207 	bic.w	r2, r3, #7
 800ab46:	4965      	ldr	r1, [pc, #404]	; (800acdc <HAL_RCC_ClockConfig+0x1c0>)
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ab4e:	4b63      	ldr	r3, [pc, #396]	; (800acdc <HAL_RCC_ClockConfig+0x1c0>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f003 0307 	and.w	r3, r3, #7
 800ab56:	683a      	ldr	r2, [r7, #0]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d001      	beq.n	800ab60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	e0b8      	b.n	800acd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f003 0302 	and.w	r3, r3, #2
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d020      	beq.n	800abae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f003 0304 	and.w	r3, r3, #4
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d005      	beq.n	800ab84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ab78:	4b59      	ldr	r3, [pc, #356]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	4a58      	ldr	r2, [pc, #352]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ab7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ab82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f003 0308 	and.w	r3, r3, #8
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d005      	beq.n	800ab9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ab90:	4b53      	ldr	r3, [pc, #332]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	4a52      	ldr	r2, [pc, #328]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ab96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ab9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ab9c:	4b50      	ldr	r3, [pc, #320]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	494d      	ldr	r1, [pc, #308]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800abaa:	4313      	orrs	r3, r2
 800abac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f003 0301 	and.w	r3, r3, #1
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d040      	beq.n	800ac3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d107      	bne.n	800abd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800abc2:	4b47      	ldr	r3, [pc, #284]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d115      	bne.n	800abfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	e07f      	b.n	800acd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d107      	bne.n	800abea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800abda:	4b41      	ldr	r3, [pc, #260]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d109      	bne.n	800abfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800abe6:	2301      	movs	r3, #1
 800abe8:	e073      	b.n	800acd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800abea:	4b3d      	ldr	r3, [pc, #244]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	f003 0302 	and.w	r3, r3, #2
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d101      	bne.n	800abfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800abf6:	2301      	movs	r3, #1
 800abf8:	e06b      	b.n	800acd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800abfa:	4b39      	ldr	r3, [pc, #228]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800abfc:	685b      	ldr	r3, [r3, #4]
 800abfe:	f023 0203 	bic.w	r2, r3, #3
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	4936      	ldr	r1, [pc, #216]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ac0c:	f7fd fcc0 	bl	8008590 <HAL_GetTick>
 800ac10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac12:	e00a      	b.n	800ac2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac14:	f7fd fcbc 	bl	8008590 <HAL_GetTick>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	1ad3      	subs	r3, r2, r3
 800ac1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d901      	bls.n	800ac2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ac26:	2303      	movs	r3, #3
 800ac28:	e053      	b.n	800acd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ac2a:	4b2d      	ldr	r3, [pc, #180]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	f003 020c 	and.w	r2, r3, #12
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	685b      	ldr	r3, [r3, #4]
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d1eb      	bne.n	800ac14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ac3c:	4b27      	ldr	r3, [pc, #156]	; (800acdc <HAL_RCC_ClockConfig+0x1c0>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f003 0307 	and.w	r3, r3, #7
 800ac44:	683a      	ldr	r2, [r7, #0]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d210      	bcs.n	800ac6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac4a:	4b24      	ldr	r3, [pc, #144]	; (800acdc <HAL_RCC_ClockConfig+0x1c0>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f023 0207 	bic.w	r2, r3, #7
 800ac52:	4922      	ldr	r1, [pc, #136]	; (800acdc <HAL_RCC_ClockConfig+0x1c0>)
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	4313      	orrs	r3, r2
 800ac58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac5a:	4b20      	ldr	r3, [pc, #128]	; (800acdc <HAL_RCC_ClockConfig+0x1c0>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f003 0307 	and.w	r3, r3, #7
 800ac62:	683a      	ldr	r2, [r7, #0]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d001      	beq.n	800ac6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e032      	b.n	800acd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f003 0304 	and.w	r3, r3, #4
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d008      	beq.n	800ac8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ac78:	4b19      	ldr	r3, [pc, #100]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	4916      	ldr	r1, [pc, #88]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac86:	4313      	orrs	r3, r2
 800ac88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f003 0308 	and.w	r3, r3, #8
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d009      	beq.n	800acaa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ac96:	4b12      	ldr	r3, [pc, #72]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	691b      	ldr	r3, [r3, #16]
 800aca2:	00db      	lsls	r3, r3, #3
 800aca4:	490e      	ldr	r1, [pc, #56]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800aca6:	4313      	orrs	r3, r2
 800aca8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800acaa:	f000 f821 	bl	800acf0 <HAL_RCC_GetSysClockFreq>
 800acae:	4602      	mov	r2, r0
 800acb0:	4b0b      	ldr	r3, [pc, #44]	; (800ace0 <HAL_RCC_ClockConfig+0x1c4>)
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	091b      	lsrs	r3, r3, #4
 800acb6:	f003 030f 	and.w	r3, r3, #15
 800acba:	490a      	ldr	r1, [pc, #40]	; (800ace4 <HAL_RCC_ClockConfig+0x1c8>)
 800acbc:	5ccb      	ldrb	r3, [r1, r3]
 800acbe:	fa22 f303 	lsr.w	r3, r2, r3
 800acc2:	4a09      	ldr	r2, [pc, #36]	; (800ace8 <HAL_RCC_ClockConfig+0x1cc>)
 800acc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800acc6:	4b09      	ldr	r3, [pc, #36]	; (800acec <HAL_RCC_ClockConfig+0x1d0>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4618      	mov	r0, r3
 800accc:	f7fd fc1e 	bl	800850c <HAL_InitTick>

  return HAL_OK;
 800acd0:	2300      	movs	r3, #0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3710      	adds	r7, #16
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
 800acda:	bf00      	nop
 800acdc:	40022000 	.word	0x40022000
 800ace0:	40021000 	.word	0x40021000
 800ace4:	0800dba0 	.word	0x0800dba0
 800ace8:	200000a8 	.word	0x200000a8
 800acec:	200000ac 	.word	0x200000ac

0800acf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b087      	sub	sp, #28
 800acf4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800acf6:	2300      	movs	r3, #0
 800acf8:	60fb      	str	r3, [r7, #12]
 800acfa:	2300      	movs	r3, #0
 800acfc:	60bb      	str	r3, [r7, #8]
 800acfe:	2300      	movs	r3, #0
 800ad00:	617b      	str	r3, [r7, #20]
 800ad02:	2300      	movs	r3, #0
 800ad04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ad06:	2300      	movs	r3, #0
 800ad08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ad0a:	4b1e      	ldr	r3, [pc, #120]	; (800ad84 <HAL_RCC_GetSysClockFreq+0x94>)
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f003 030c 	and.w	r3, r3, #12
 800ad16:	2b04      	cmp	r3, #4
 800ad18:	d002      	beq.n	800ad20 <HAL_RCC_GetSysClockFreq+0x30>
 800ad1a:	2b08      	cmp	r3, #8
 800ad1c:	d003      	beq.n	800ad26 <HAL_RCC_GetSysClockFreq+0x36>
 800ad1e:	e027      	b.n	800ad70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ad20:	4b19      	ldr	r3, [pc, #100]	; (800ad88 <HAL_RCC_GetSysClockFreq+0x98>)
 800ad22:	613b      	str	r3, [r7, #16]
      break;
 800ad24:	e027      	b.n	800ad76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	0c9b      	lsrs	r3, r3, #18
 800ad2a:	f003 030f 	and.w	r3, r3, #15
 800ad2e:	4a17      	ldr	r2, [pc, #92]	; (800ad8c <HAL_RCC_GetSysClockFreq+0x9c>)
 800ad30:	5cd3      	ldrb	r3, [r2, r3]
 800ad32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d010      	beq.n	800ad60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ad3e:	4b11      	ldr	r3, [pc, #68]	; (800ad84 <HAL_RCC_GetSysClockFreq+0x94>)
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	0c5b      	lsrs	r3, r3, #17
 800ad44:	f003 0301 	and.w	r3, r3, #1
 800ad48:	4a11      	ldr	r2, [pc, #68]	; (800ad90 <HAL_RCC_GetSysClockFreq+0xa0>)
 800ad4a:	5cd3      	ldrb	r3, [r2, r3]
 800ad4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a0d      	ldr	r2, [pc, #52]	; (800ad88 <HAL_RCC_GetSysClockFreq+0x98>)
 800ad52:	fb03 f202 	mul.w	r2, r3, r2
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad5c:	617b      	str	r3, [r7, #20]
 800ad5e:	e004      	b.n	800ad6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a0c      	ldr	r2, [pc, #48]	; (800ad94 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ad64:	fb02 f303 	mul.w	r3, r2, r3
 800ad68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	613b      	str	r3, [r7, #16]
      break;
 800ad6e:	e002      	b.n	800ad76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ad70:	4b05      	ldr	r3, [pc, #20]	; (800ad88 <HAL_RCC_GetSysClockFreq+0x98>)
 800ad72:	613b      	str	r3, [r7, #16]
      break;
 800ad74:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ad76:	693b      	ldr	r3, [r7, #16]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	371c      	adds	r7, #28
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bc80      	pop	{r7}
 800ad80:	4770      	bx	lr
 800ad82:	bf00      	nop
 800ad84:	40021000 	.word	0x40021000
 800ad88:	007a1200 	.word	0x007a1200
 800ad8c:	0800dbb8 	.word	0x0800dbb8
 800ad90:	0800dbc8 	.word	0x0800dbc8
 800ad94:	003d0900 	.word	0x003d0900

0800ad98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ad9c:	4b02      	ldr	r3, [pc, #8]	; (800ada8 <HAL_RCC_GetHCLKFreq+0x10>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bc80      	pop	{r7}
 800ada6:	4770      	bx	lr
 800ada8:	200000a8 	.word	0x200000a8

0800adac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800adb0:	f7ff fff2 	bl	800ad98 <HAL_RCC_GetHCLKFreq>
 800adb4:	4602      	mov	r2, r0
 800adb6:	4b05      	ldr	r3, [pc, #20]	; (800adcc <HAL_RCC_GetPCLK1Freq+0x20>)
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	0a1b      	lsrs	r3, r3, #8
 800adbc:	f003 0307 	and.w	r3, r3, #7
 800adc0:	4903      	ldr	r1, [pc, #12]	; (800add0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800adc2:	5ccb      	ldrb	r3, [r1, r3]
 800adc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800adc8:	4618      	mov	r0, r3
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	40021000 	.word	0x40021000
 800add0:	0800dbb0 	.word	0x0800dbb0

0800add4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800add8:	f7ff ffde 	bl	800ad98 <HAL_RCC_GetHCLKFreq>
 800addc:	4602      	mov	r2, r0
 800adde:	4b05      	ldr	r3, [pc, #20]	; (800adf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	0adb      	lsrs	r3, r3, #11
 800ade4:	f003 0307 	and.w	r3, r3, #7
 800ade8:	4903      	ldr	r1, [pc, #12]	; (800adf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800adea:	5ccb      	ldrb	r3, [r1, r3]
 800adec:	fa22 f303 	lsr.w	r3, r2, r3
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	bd80      	pop	{r7, pc}
 800adf4:	40021000 	.word	0x40021000
 800adf8:	0800dbb0 	.word	0x0800dbb0

0800adfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b085      	sub	sp, #20
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800ae04:	4b0a      	ldr	r3, [pc, #40]	; (800ae30 <RCC_Delay+0x34>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a0a      	ldr	r2, [pc, #40]	; (800ae34 <RCC_Delay+0x38>)
 800ae0a:	fba2 2303 	umull	r2, r3, r2, r3
 800ae0e:	0a5b      	lsrs	r3, r3, #9
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	fb02 f303 	mul.w	r3, r2, r3
 800ae16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800ae18:	bf00      	nop
  }
  while (Delay --);
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	1e5a      	subs	r2, r3, #1
 800ae1e:	60fa      	str	r2, [r7, #12]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d1f9      	bne.n	800ae18 <RCC_Delay+0x1c>
}
 800ae24:	bf00      	nop
 800ae26:	bf00      	nop
 800ae28:	3714      	adds	r7, #20
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bc80      	pop	{r7}
 800ae2e:	4770      	bx	lr
 800ae30:	200000a8 	.word	0x200000a8
 800ae34:	10624dd3 	.word	0x10624dd3

0800ae38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b082      	sub	sp, #8
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d101      	bne.n	800ae4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	e041      	b.n	800aece <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d106      	bne.n	800ae64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f7fd fa26 	bl	80082b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2202      	movs	r2, #2
 800ae68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	3304      	adds	r3, #4
 800ae74:	4619      	mov	r1, r3
 800ae76:	4610      	mov	r0, r2
 800ae78:	f000 fa82 	bl	800b380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2201      	movs	r2, #1
 800ae80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2201      	movs	r2, #1
 800aea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2201      	movs	r2, #1
 800aec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
	...

0800aed8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b085      	sub	sp, #20
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aee6:	b2db      	uxtb	r3, r3
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d001      	beq.n	800aef0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aeec:	2301      	movs	r3, #1
 800aeee:	e044      	b.n	800af7a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2202      	movs	r2, #2
 800aef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	68da      	ldr	r2, [r3, #12]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f042 0201 	orr.w	r2, r2, #1
 800af06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4a1d      	ldr	r2, [pc, #116]	; (800af84 <HAL_TIM_Base_Start_IT+0xac>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d018      	beq.n	800af44 <HAL_TIM_Base_Start_IT+0x6c>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4a1c      	ldr	r2, [pc, #112]	; (800af88 <HAL_TIM_Base_Start_IT+0xb0>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d013      	beq.n	800af44 <HAL_TIM_Base_Start_IT+0x6c>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af24:	d00e      	beq.n	800af44 <HAL_TIM_Base_Start_IT+0x6c>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a18      	ldr	r2, [pc, #96]	; (800af8c <HAL_TIM_Base_Start_IT+0xb4>)
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d009      	beq.n	800af44 <HAL_TIM_Base_Start_IT+0x6c>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a16      	ldr	r2, [pc, #88]	; (800af90 <HAL_TIM_Base_Start_IT+0xb8>)
 800af36:	4293      	cmp	r3, r2
 800af38:	d004      	beq.n	800af44 <HAL_TIM_Base_Start_IT+0x6c>
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	4a15      	ldr	r2, [pc, #84]	; (800af94 <HAL_TIM_Base_Start_IT+0xbc>)
 800af40:	4293      	cmp	r3, r2
 800af42:	d111      	bne.n	800af68 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	f003 0307 	and.w	r3, r3, #7
 800af4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2b06      	cmp	r3, #6
 800af54:	d010      	beq.n	800af78 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	681a      	ldr	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f042 0201 	orr.w	r2, r2, #1
 800af64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800af66:	e007      	b.n	800af78 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f042 0201 	orr.w	r2, r2, #1
 800af76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800af78:	2300      	movs	r3, #0
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3714      	adds	r7, #20
 800af7e:	46bd      	mov	sp, r7
 800af80:	bc80      	pop	{r7}
 800af82:	4770      	bx	lr
 800af84:	40012c00 	.word	0x40012c00
 800af88:	40013400 	.word	0x40013400
 800af8c:	40000400 	.word	0x40000400
 800af90:	40000800 	.word	0x40000800
 800af94:	40000c00 	.word	0x40000c00

0800af98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b082      	sub	sp, #8
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	691b      	ldr	r3, [r3, #16]
 800afa6:	f003 0302 	and.w	r3, r3, #2
 800afaa:	2b02      	cmp	r3, #2
 800afac:	d122      	bne.n	800aff4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	f003 0302 	and.w	r3, r3, #2
 800afb8:	2b02      	cmp	r3, #2
 800afba:	d11b      	bne.n	800aff4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f06f 0202 	mvn.w	r2, #2
 800afc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2201      	movs	r2, #1
 800afca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	699b      	ldr	r3, [r3, #24]
 800afd2:	f003 0303 	and.w	r3, r3, #3
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d003      	beq.n	800afe2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 f9b4 	bl	800b348 <HAL_TIM_IC_CaptureCallback>
 800afe0:	e005      	b.n	800afee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f000 f9a7 	bl	800b336 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f9b6 	bl	800b35a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2200      	movs	r2, #0
 800aff2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	691b      	ldr	r3, [r3, #16]
 800affa:	f003 0304 	and.w	r3, r3, #4
 800affe:	2b04      	cmp	r3, #4
 800b000:	d122      	bne.n	800b048 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	f003 0304 	and.w	r3, r3, #4
 800b00c:	2b04      	cmp	r3, #4
 800b00e:	d11b      	bne.n	800b048 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f06f 0204 	mvn.w	r2, #4
 800b018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2202      	movs	r2, #2
 800b01e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	699b      	ldr	r3, [r3, #24]
 800b026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d003      	beq.n	800b036 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 f98a 	bl	800b348 <HAL_TIM_IC_CaptureCallback>
 800b034:	e005      	b.n	800b042 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f97d 	bl	800b336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 f98c 	bl	800b35a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2200      	movs	r2, #0
 800b046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	691b      	ldr	r3, [r3, #16]
 800b04e:	f003 0308 	and.w	r3, r3, #8
 800b052:	2b08      	cmp	r3, #8
 800b054:	d122      	bne.n	800b09c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	68db      	ldr	r3, [r3, #12]
 800b05c:	f003 0308 	and.w	r3, r3, #8
 800b060:	2b08      	cmp	r3, #8
 800b062:	d11b      	bne.n	800b09c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f06f 0208 	mvn.w	r2, #8
 800b06c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	2204      	movs	r2, #4
 800b072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	69db      	ldr	r3, [r3, #28]
 800b07a:	f003 0303 	and.w	r3, r3, #3
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d003      	beq.n	800b08a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 f960 	bl	800b348 <HAL_TIM_IC_CaptureCallback>
 800b088:	e005      	b.n	800b096 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 f953 	bl	800b336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 f962 	bl	800b35a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	691b      	ldr	r3, [r3, #16]
 800b0a2:	f003 0310 	and.w	r3, r3, #16
 800b0a6:	2b10      	cmp	r3, #16
 800b0a8:	d122      	bne.n	800b0f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	68db      	ldr	r3, [r3, #12]
 800b0b0:	f003 0310 	and.w	r3, r3, #16
 800b0b4:	2b10      	cmp	r3, #16
 800b0b6:	d11b      	bne.n	800b0f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f06f 0210 	mvn.w	r2, #16
 800b0c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2208      	movs	r2, #8
 800b0c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	69db      	ldr	r3, [r3, #28]
 800b0ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d003      	beq.n	800b0de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 f936 	bl	800b348 <HAL_TIM_IC_CaptureCallback>
 800b0dc:	e005      	b.n	800b0ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 f929 	bl	800b336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 f938 	bl	800b35a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	691b      	ldr	r3, [r3, #16]
 800b0f6:	f003 0301 	and.w	r3, r3, #1
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d10e      	bne.n	800b11c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	f003 0301 	and.w	r3, r3, #1
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d107      	bne.n	800b11c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f06f 0201 	mvn.w	r2, #1
 800b114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7fc fd62 	bl	8007be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b126:	2b80      	cmp	r3, #128	; 0x80
 800b128:	d10e      	bne.n	800b148 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b134:	2b80      	cmp	r3, #128	; 0x80
 800b136:	d107      	bne.n	800b148 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 faa1 	bl	800b68a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	691b      	ldr	r3, [r3, #16]
 800b14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b152:	2b40      	cmp	r3, #64	; 0x40
 800b154:	d10e      	bne.n	800b174 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	68db      	ldr	r3, [r3, #12]
 800b15c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b160:	2b40      	cmp	r3, #64	; 0x40
 800b162:	d107      	bne.n	800b174 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b16c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f000 f8fc 	bl	800b36c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	691b      	ldr	r3, [r3, #16]
 800b17a:	f003 0320 	and.w	r3, r3, #32
 800b17e:	2b20      	cmp	r3, #32
 800b180:	d10e      	bne.n	800b1a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	f003 0320 	and.w	r3, r3, #32
 800b18c:	2b20      	cmp	r3, #32
 800b18e:	d107      	bne.n	800b1a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f06f 0220 	mvn.w	r2, #32
 800b198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 fa6c 	bl	800b678 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b1a0:	bf00      	nop
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1bc:	2b01      	cmp	r3, #1
 800b1be:	d101      	bne.n	800b1c4 <HAL_TIM_ConfigClockSource+0x1c>
 800b1c0:	2302      	movs	r3, #2
 800b1c2:	e0b4      	b.n	800b32e <HAL_TIM_ConfigClockSource+0x186>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2202      	movs	r2, #2
 800b1d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	689b      	ldr	r3, [r3, #8]
 800b1da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b1e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b1ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	68ba      	ldr	r2, [r7, #8]
 800b1f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1fc:	d03e      	beq.n	800b27c <HAL_TIM_ConfigClockSource+0xd4>
 800b1fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b202:	f200 8087 	bhi.w	800b314 <HAL_TIM_ConfigClockSource+0x16c>
 800b206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b20a:	f000 8086 	beq.w	800b31a <HAL_TIM_ConfigClockSource+0x172>
 800b20e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b212:	d87f      	bhi.n	800b314 <HAL_TIM_ConfigClockSource+0x16c>
 800b214:	2b70      	cmp	r3, #112	; 0x70
 800b216:	d01a      	beq.n	800b24e <HAL_TIM_ConfigClockSource+0xa6>
 800b218:	2b70      	cmp	r3, #112	; 0x70
 800b21a:	d87b      	bhi.n	800b314 <HAL_TIM_ConfigClockSource+0x16c>
 800b21c:	2b60      	cmp	r3, #96	; 0x60
 800b21e:	d050      	beq.n	800b2c2 <HAL_TIM_ConfigClockSource+0x11a>
 800b220:	2b60      	cmp	r3, #96	; 0x60
 800b222:	d877      	bhi.n	800b314 <HAL_TIM_ConfigClockSource+0x16c>
 800b224:	2b50      	cmp	r3, #80	; 0x50
 800b226:	d03c      	beq.n	800b2a2 <HAL_TIM_ConfigClockSource+0xfa>
 800b228:	2b50      	cmp	r3, #80	; 0x50
 800b22a:	d873      	bhi.n	800b314 <HAL_TIM_ConfigClockSource+0x16c>
 800b22c:	2b40      	cmp	r3, #64	; 0x40
 800b22e:	d058      	beq.n	800b2e2 <HAL_TIM_ConfigClockSource+0x13a>
 800b230:	2b40      	cmp	r3, #64	; 0x40
 800b232:	d86f      	bhi.n	800b314 <HAL_TIM_ConfigClockSource+0x16c>
 800b234:	2b30      	cmp	r3, #48	; 0x30
 800b236:	d064      	beq.n	800b302 <HAL_TIM_ConfigClockSource+0x15a>
 800b238:	2b30      	cmp	r3, #48	; 0x30
 800b23a:	d86b      	bhi.n	800b314 <HAL_TIM_ConfigClockSource+0x16c>
 800b23c:	2b20      	cmp	r3, #32
 800b23e:	d060      	beq.n	800b302 <HAL_TIM_ConfigClockSource+0x15a>
 800b240:	2b20      	cmp	r3, #32
 800b242:	d867      	bhi.n	800b314 <HAL_TIM_ConfigClockSource+0x16c>
 800b244:	2b00      	cmp	r3, #0
 800b246:	d05c      	beq.n	800b302 <HAL_TIM_ConfigClockSource+0x15a>
 800b248:	2b10      	cmp	r3, #16
 800b24a:	d05a      	beq.n	800b302 <HAL_TIM_ConfigClockSource+0x15a>
 800b24c:	e062      	b.n	800b314 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b25e:	f000 f980 	bl	800b562 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b270:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	609a      	str	r2, [r3, #8]
      break;
 800b27a:	e04f      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b28c:	f000 f969 	bl	800b562 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	689a      	ldr	r2, [r3, #8]
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b29e:	609a      	str	r2, [r3, #8]
      break;
 800b2a0:	e03c      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	f000 f8e0 	bl	800b474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2150      	movs	r1, #80	; 0x50
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f000 f937 	bl	800b52e <TIM_ITRx_SetConfig>
      break;
 800b2c0:	e02c      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	f000 f8fe 	bl	800b4d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2160      	movs	r1, #96	; 0x60
 800b2da:	4618      	mov	r0, r3
 800b2dc:	f000 f927 	bl	800b52e <TIM_ITRx_SetConfig>
      break;
 800b2e0:	e01c      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b2e6:	683b      	ldr	r3, [r7, #0]
 800b2e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	f000 f8c0 	bl	800b474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	2140      	movs	r1, #64	; 0x40
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f000 f917 	bl	800b52e <TIM_ITRx_SetConfig>
      break;
 800b300:	e00c      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	681a      	ldr	r2, [r3, #0]
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	4619      	mov	r1, r3
 800b30c:	4610      	mov	r0, r2
 800b30e:	f000 f90e 	bl	800b52e <TIM_ITRx_SetConfig>
      break;
 800b312:	e003      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b314:	2301      	movs	r3, #1
 800b316:	73fb      	strb	r3, [r7, #15]
      break;
 800b318:	e000      	b.n	800b31c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b31a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b336:	b480      	push	{r7}
 800b338:	b083      	sub	sp, #12
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b33e:	bf00      	nop
 800b340:	370c      	adds	r7, #12
 800b342:	46bd      	mov	sp, r7
 800b344:	bc80      	pop	{r7}
 800b346:	4770      	bx	lr

0800b348 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b350:	bf00      	nop
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	bc80      	pop	{r7}
 800b358:	4770      	bx	lr

0800b35a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b35a:	b480      	push	{r7}
 800b35c:	b083      	sub	sp, #12
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b362:	bf00      	nop
 800b364:	370c      	adds	r7, #12
 800b366:	46bd      	mov	sp, r7
 800b368:	bc80      	pop	{r7}
 800b36a:	4770      	bx	lr

0800b36c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b374:	bf00      	nop
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	bc80      	pop	{r7}
 800b37c:	4770      	bx	lr
	...

0800b380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b380:	b480      	push	{r7}
 800b382:	b085      	sub	sp, #20
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	4a33      	ldr	r2, [pc, #204]	; (800b460 <TIM_Base_SetConfig+0xe0>)
 800b394:	4293      	cmp	r3, r2
 800b396:	d013      	beq.n	800b3c0 <TIM_Base_SetConfig+0x40>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	4a32      	ldr	r2, [pc, #200]	; (800b464 <TIM_Base_SetConfig+0xe4>)
 800b39c:	4293      	cmp	r3, r2
 800b39e:	d00f      	beq.n	800b3c0 <TIM_Base_SetConfig+0x40>
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3a6:	d00b      	beq.n	800b3c0 <TIM_Base_SetConfig+0x40>
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	4a2f      	ldr	r2, [pc, #188]	; (800b468 <TIM_Base_SetConfig+0xe8>)
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d007      	beq.n	800b3c0 <TIM_Base_SetConfig+0x40>
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a2e      	ldr	r2, [pc, #184]	; (800b46c <TIM_Base_SetConfig+0xec>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d003      	beq.n	800b3c0 <TIM_Base_SetConfig+0x40>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	4a2d      	ldr	r2, [pc, #180]	; (800b470 <TIM_Base_SetConfig+0xf0>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d108      	bne.n	800b3d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	4313      	orrs	r3, r2
 800b3d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4a22      	ldr	r2, [pc, #136]	; (800b460 <TIM_Base_SetConfig+0xe0>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d013      	beq.n	800b402 <TIM_Base_SetConfig+0x82>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a21      	ldr	r2, [pc, #132]	; (800b464 <TIM_Base_SetConfig+0xe4>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d00f      	beq.n	800b402 <TIM_Base_SetConfig+0x82>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3e8:	d00b      	beq.n	800b402 <TIM_Base_SetConfig+0x82>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	4a1e      	ldr	r2, [pc, #120]	; (800b468 <TIM_Base_SetConfig+0xe8>)
 800b3ee:	4293      	cmp	r3, r2
 800b3f0:	d007      	beq.n	800b402 <TIM_Base_SetConfig+0x82>
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	4a1d      	ldr	r2, [pc, #116]	; (800b46c <TIM_Base_SetConfig+0xec>)
 800b3f6:	4293      	cmp	r3, r2
 800b3f8:	d003      	beq.n	800b402 <TIM_Base_SetConfig+0x82>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	4a1c      	ldr	r2, [pc, #112]	; (800b470 <TIM_Base_SetConfig+0xf0>)
 800b3fe:	4293      	cmp	r3, r2
 800b400:	d108      	bne.n	800b414 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	4313      	orrs	r3, r2
 800b412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	695b      	ldr	r3, [r3, #20]
 800b41e:	4313      	orrs	r3, r2
 800b420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	689a      	ldr	r2, [r3, #8]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4a09      	ldr	r2, [pc, #36]	; (800b460 <TIM_Base_SetConfig+0xe0>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d003      	beq.n	800b448 <TIM_Base_SetConfig+0xc8>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4a08      	ldr	r2, [pc, #32]	; (800b464 <TIM_Base_SetConfig+0xe4>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d103      	bne.n	800b450 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	691a      	ldr	r2, [r3, #16]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	615a      	str	r2, [r3, #20]
}
 800b456:	bf00      	nop
 800b458:	3714      	adds	r7, #20
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bc80      	pop	{r7}
 800b45e:	4770      	bx	lr
 800b460:	40012c00 	.word	0x40012c00
 800b464:	40013400 	.word	0x40013400
 800b468:	40000400 	.word	0x40000400
 800b46c:	40000800 	.word	0x40000800
 800b470:	40000c00 	.word	0x40000c00

0800b474 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b474:	b480      	push	{r7}
 800b476:	b087      	sub	sp, #28
 800b478:	af00      	add	r7, sp, #0
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	60b9      	str	r1, [r7, #8]
 800b47e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	6a1b      	ldr	r3, [r3, #32]
 800b484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6a1b      	ldr	r3, [r3, #32]
 800b48a:	f023 0201 	bic.w	r2, r3, #1
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	699b      	ldr	r3, [r3, #24]
 800b496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b49e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	011b      	lsls	r3, r3, #4
 800b4a4:	693a      	ldr	r2, [r7, #16]
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	f023 030a 	bic.w	r3, r3, #10
 800b4b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b4b2:	697a      	ldr	r2, [r7, #20]
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	697a      	ldr	r2, [r7, #20]
 800b4c4:	621a      	str	r2, [r3, #32]
}
 800b4c6:	bf00      	nop
 800b4c8:	371c      	adds	r7, #28
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bc80      	pop	{r7}
 800b4ce:	4770      	bx	lr

0800b4d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b087      	sub	sp, #28
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	60f8      	str	r0, [r7, #12]
 800b4d8:	60b9      	str	r1, [r7, #8]
 800b4da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6a1b      	ldr	r3, [r3, #32]
 800b4e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	6a1b      	ldr	r3, [r3, #32]
 800b4e6:	f023 0210 	bic.w	r2, r3, #16
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	699b      	ldr	r3, [r3, #24]
 800b4f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b4f4:	693b      	ldr	r3, [r7, #16]
 800b4f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b4fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	031b      	lsls	r3, r3, #12
 800b500:	693a      	ldr	r2, [r7, #16]
 800b502:	4313      	orrs	r3, r2
 800b504:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b50c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	011b      	lsls	r3, r3, #4
 800b512:	697a      	ldr	r2, [r7, #20]
 800b514:	4313      	orrs	r3, r2
 800b516:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	693a      	ldr	r2, [r7, #16]
 800b51c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	697a      	ldr	r2, [r7, #20]
 800b522:	621a      	str	r2, [r3, #32]
}
 800b524:	bf00      	nop
 800b526:	371c      	adds	r7, #28
 800b528:	46bd      	mov	sp, r7
 800b52a:	bc80      	pop	{r7}
 800b52c:	4770      	bx	lr

0800b52e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b52e:	b480      	push	{r7}
 800b530:	b085      	sub	sp, #20
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
 800b536:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b544:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b546:	683a      	ldr	r2, [r7, #0]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	4313      	orrs	r3, r2
 800b54c:	f043 0307 	orr.w	r3, r3, #7
 800b550:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	68fa      	ldr	r2, [r7, #12]
 800b556:	609a      	str	r2, [r3, #8]
}
 800b558:	bf00      	nop
 800b55a:	3714      	adds	r7, #20
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bc80      	pop	{r7}
 800b560:	4770      	bx	lr

0800b562 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b562:	b480      	push	{r7}
 800b564:	b087      	sub	sp, #28
 800b566:	af00      	add	r7, sp, #0
 800b568:	60f8      	str	r0, [r7, #12]
 800b56a:	60b9      	str	r1, [r7, #8]
 800b56c:	607a      	str	r2, [r7, #4]
 800b56e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	689b      	ldr	r3, [r3, #8]
 800b574:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b57c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	021a      	lsls	r2, r3, #8
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	431a      	orrs	r2, r3
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	4313      	orrs	r3, r2
 800b58a:	697a      	ldr	r2, [r7, #20]
 800b58c:	4313      	orrs	r3, r2
 800b58e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	697a      	ldr	r2, [r7, #20]
 800b594:	609a      	str	r2, [r3, #8]
}
 800b596:	bf00      	nop
 800b598:	371c      	adds	r7, #28
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bc80      	pop	{r7}
 800b59e:	4770      	bx	lr

0800b5a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b085      	sub	sp, #20
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d101      	bne.n	800b5b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b5b4:	2302      	movs	r3, #2
 800b5b6:	e050      	b.n	800b65a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	2201      	movs	r2, #1
 800b5bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2202      	movs	r2, #2
 800b5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	689b      	ldr	r3, [r3, #8]
 800b5d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	68fa      	ldr	r2, [r7, #12]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a1b      	ldr	r2, [pc, #108]	; (800b664 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d018      	beq.n	800b62e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4a19      	ldr	r2, [pc, #100]	; (800b668 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b602:	4293      	cmp	r3, r2
 800b604:	d013      	beq.n	800b62e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b60e:	d00e      	beq.n	800b62e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a15      	ldr	r2, [pc, #84]	; (800b66c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b616:	4293      	cmp	r3, r2
 800b618:	d009      	beq.n	800b62e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a14      	ldr	r2, [pc, #80]	; (800b670 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d004      	beq.n	800b62e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4a12      	ldr	r2, [pc, #72]	; (800b674 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d10c      	bne.n	800b648 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b634:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	68ba      	ldr	r2, [r7, #8]
 800b63c:	4313      	orrs	r3, r2
 800b63e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	68ba      	ldr	r2, [r7, #8]
 800b646:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2201      	movs	r2, #1
 800b64c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3714      	adds	r7, #20
 800b65e:	46bd      	mov	sp, r7
 800b660:	bc80      	pop	{r7}
 800b662:	4770      	bx	lr
 800b664:	40012c00 	.word	0x40012c00
 800b668:	40013400 	.word	0x40013400
 800b66c:	40000400 	.word	0x40000400
 800b670:	40000800 	.word	0x40000800
 800b674:	40000c00 	.word	0x40000c00

0800b678 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b680:	bf00      	nop
 800b682:	370c      	adds	r7, #12
 800b684:	46bd      	mov	sp, r7
 800b686:	bc80      	pop	{r7}
 800b688:	4770      	bx	lr

0800b68a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b68a:	b480      	push	{r7}
 800b68c:	b083      	sub	sp, #12
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b692:	bf00      	nop
 800b694:	370c      	adds	r7, #12
 800b696:	46bd      	mov	sp, r7
 800b698:	bc80      	pop	{r7}
 800b69a:	4770      	bx	lr

0800b69c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b082      	sub	sp, #8
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d101      	bne.n	800b6ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e042      	b.n	800b734 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6b4:	b2db      	uxtb	r3, r3
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d106      	bne.n	800b6c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f7fc fe1a 	bl	80082fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2224      	movs	r2, #36	; 0x24
 800b6cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	68da      	ldr	r2, [r3, #12]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b6de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f000 fcb5 	bl	800c050 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	691a      	ldr	r2, [r3, #16]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b6f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	695a      	ldr	r2, [r3, #20]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b704:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	68da      	ldr	r2, [r3, #12]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b714:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2200      	movs	r2, #0
 800b71a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2220      	movs	r2, #32
 800b720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2220      	movs	r2, #32
 800b728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b732:	2300      	movs	r3, #0
}
 800b734:	4618      	mov	r0, r3
 800b736:	3708      	adds	r7, #8
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b085      	sub	sp, #20
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	4613      	mov	r3, r2
 800b748:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b750:	b2db      	uxtb	r3, r3
 800b752:	2b20      	cmp	r3, #32
 800b754:	d121      	bne.n	800b79a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d002      	beq.n	800b762 <HAL_UART_Transmit_IT+0x26>
 800b75c:	88fb      	ldrh	r3, [r7, #6]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d101      	bne.n	800b766 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	e01a      	b.n	800b79c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	68ba      	ldr	r2, [r7, #8]
 800b76a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	88fa      	ldrh	r2, [r7, #6]
 800b770:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	88fa      	ldrh	r2, [r7, #6]
 800b776:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2200      	movs	r2, #0
 800b77c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2221      	movs	r2, #33	; 0x21
 800b782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	68da      	ldr	r2, [r3, #12]
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b794:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b796:	2300      	movs	r3, #0
 800b798:	e000      	b.n	800b79c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800b79a:	2302      	movs	r3, #2
  }
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3714      	adds	r7, #20
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bc80      	pop	{r7}
 800b7a4:	4770      	bx	lr
	...

0800b7a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b0ba      	sub	sp, #232	; 0xe8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	68db      	ldr	r3, [r3, #12]
 800b7c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	695b      	ldr	r3, [r3, #20]
 800b7ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b7da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7de:	f003 030f 	and.w	r3, r3, #15
 800b7e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b7e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d10f      	bne.n	800b80e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b7ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b7f2:	f003 0320 	and.w	r3, r3, #32
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d009      	beq.n	800b80e <HAL_UART_IRQHandler+0x66>
 800b7fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b7fe:	f003 0320 	and.w	r3, r3, #32
 800b802:	2b00      	cmp	r3, #0
 800b804:	d003      	beq.n	800b80e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 fb63 	bl	800bed2 <UART_Receive_IT>
      return;
 800b80c:	e25b      	b.n	800bcc6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b80e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b812:	2b00      	cmp	r3, #0
 800b814:	f000 80de 	beq.w	800b9d4 <HAL_UART_IRQHandler+0x22c>
 800b818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b81c:	f003 0301 	and.w	r3, r3, #1
 800b820:	2b00      	cmp	r3, #0
 800b822:	d106      	bne.n	800b832 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b828:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	f000 80d1 	beq.w	800b9d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b836:	f003 0301 	and.w	r3, r3, #1
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00b      	beq.n	800b856 <HAL_UART_IRQHandler+0xae>
 800b83e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b846:	2b00      	cmp	r3, #0
 800b848:	d005      	beq.n	800b856 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b84e:	f043 0201 	orr.w	r2, r3, #1
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b85a:	f003 0304 	and.w	r3, r3, #4
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d00b      	beq.n	800b87a <HAL_UART_IRQHandler+0xd2>
 800b862:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b866:	f003 0301 	and.w	r3, r3, #1
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d005      	beq.n	800b87a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b872:	f043 0202 	orr.w	r2, r3, #2
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b87a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b87e:	f003 0302 	and.w	r3, r3, #2
 800b882:	2b00      	cmp	r3, #0
 800b884:	d00b      	beq.n	800b89e <HAL_UART_IRQHandler+0xf6>
 800b886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b88a:	f003 0301 	and.w	r3, r3, #1
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d005      	beq.n	800b89e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b896:	f043 0204 	orr.w	r2, r3, #4
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b89e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8a2:	f003 0308 	and.w	r3, r3, #8
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d011      	beq.n	800b8ce <HAL_UART_IRQHandler+0x126>
 800b8aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8ae:	f003 0320 	and.w	r3, r3, #32
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d105      	bne.n	800b8c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b8b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8ba:	f003 0301 	and.w	r3, r3, #1
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d005      	beq.n	800b8ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8c6:	f043 0208 	orr.w	r2, r3, #8
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	f000 81f2 	beq.w	800bcbc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b8d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b8dc:	f003 0320 	and.w	r3, r3, #32
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d008      	beq.n	800b8f6 <HAL_UART_IRQHandler+0x14e>
 800b8e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b8e8:	f003 0320 	and.w	r3, r3, #32
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d002      	beq.n	800b8f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 faee 	bl	800bed2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	695b      	ldr	r3, [r3, #20]
 800b8fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b900:	2b00      	cmp	r3, #0
 800b902:	bf14      	ite	ne
 800b904:	2301      	movne	r3, #1
 800b906:	2300      	moveq	r3, #0
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b912:	f003 0308 	and.w	r3, r3, #8
 800b916:	2b00      	cmp	r3, #0
 800b918:	d103      	bne.n	800b922 <HAL_UART_IRQHandler+0x17a>
 800b91a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d04f      	beq.n	800b9c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f000 f9f8 	bl	800bd18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	695b      	ldr	r3, [r3, #20]
 800b92e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b932:	2b00      	cmp	r3, #0
 800b934:	d041      	beq.n	800b9ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	3314      	adds	r3, #20
 800b93c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b940:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b944:	e853 3f00 	ldrex	r3, [r3]
 800b948:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b94c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b954:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	3314      	adds	r3, #20
 800b95e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b962:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b966:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b96a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b96e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b972:	e841 2300 	strex	r3, r2, [r1]
 800b976:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b97a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d1d9      	bne.n	800b936 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b986:	2b00      	cmp	r3, #0
 800b988:	d013      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b98e:	4a7e      	ldr	r2, [pc, #504]	; (800bb88 <HAL_UART_IRQHandler+0x3e0>)
 800b990:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b996:	4618      	mov	r0, r3
 800b998:	f7fd f86c 	bl	8008a74 <HAL_DMA_Abort_IT>
 800b99c:	4603      	mov	r3, r0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d016      	beq.n	800b9d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b9ac:	4610      	mov	r0, r2
 800b9ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9b0:	e00e      	b.n	800b9d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 f99c 	bl	800bcf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9b8:	e00a      	b.n	800b9d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 f998 	bl	800bcf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9c0:	e006      	b.n	800b9d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f000 f994 	bl	800bcf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b9ce:	e175      	b.n	800bcbc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9d0:	bf00      	nop
    return;
 800b9d2:	e173      	b.n	800bcbc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	f040 814f 	bne.w	800bc7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b9de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9e2:	f003 0310 	and.w	r3, r3, #16
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	f000 8148 	beq.w	800bc7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b9ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9f0:	f003 0310 	and.w	r3, r3, #16
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	f000 8141 	beq.w	800bc7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	60bb      	str	r3, [r7, #8]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	60bb      	str	r3, [r7, #8]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	60bb      	str	r3, [r7, #8]
 800ba0e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	695b      	ldr	r3, [r3, #20]
 800ba16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	f000 80b6 	beq.w	800bb8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ba2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	f000 8145 	beq.w	800bcc0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ba3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	f080 813e 	bcs.w	800bcc0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ba4a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba50:	699b      	ldr	r3, [r3, #24]
 800ba52:	2b20      	cmp	r3, #32
 800ba54:	f000 8088 	beq.w	800bb68 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	330c      	adds	r3, #12
 800ba5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ba66:	e853 3f00 	ldrex	r3, [r3]
 800ba6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ba6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba72:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba76:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	330c      	adds	r3, #12
 800ba80:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ba84:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ba88:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba8c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ba90:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ba94:	e841 2300 	strex	r3, r2, [r1]
 800ba98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ba9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d1d9      	bne.n	800ba58 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	3314      	adds	r3, #20
 800baaa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800baae:	e853 3f00 	ldrex	r3, [r3]
 800bab2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bab4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bab6:	f023 0301 	bic.w	r3, r3, #1
 800baba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	3314      	adds	r3, #20
 800bac4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bac8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bacc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bace:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bad0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bad4:	e841 2300 	strex	r3, r2, [r1]
 800bad8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800badc:	2b00      	cmp	r3, #0
 800bade:	d1e1      	bne.n	800baa4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	3314      	adds	r3, #20
 800bae6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bae8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800baea:	e853 3f00 	ldrex	r3, [r3]
 800baee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800baf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800baf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800baf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	3314      	adds	r3, #20
 800bb00:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bb04:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bb06:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb08:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bb0a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bb0c:	e841 2300 	strex	r3, r2, [r1]
 800bb10:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bb12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d1e3      	bne.n	800bae0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2220      	movs	r2, #32
 800bb1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	2200      	movs	r2, #0
 800bb24:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	330c      	adds	r3, #12
 800bb2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb30:	e853 3f00 	ldrex	r3, [r3]
 800bb34:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bb36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb38:	f023 0310 	bic.w	r3, r3, #16
 800bb3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	330c      	adds	r3, #12
 800bb46:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bb4a:	65ba      	str	r2, [r7, #88]	; 0x58
 800bb4c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bb50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb52:	e841 2300 	strex	r3, r2, [r1]
 800bb56:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bb58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d1e3      	bne.n	800bb26 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb62:	4618      	mov	r0, r3
 800bb64:	f7fc ff4b 	bl	80089fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2202      	movs	r2, #2
 800bb6c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	1ad3      	subs	r3, r2, r3
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 f8bf 	bl	800bd02 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bb84:	e09c      	b.n	800bcc0 <HAL_UART_IRQHandler+0x518>
 800bb86:	bf00      	nop
 800bb88:	0800bddd 	.word	0x0800bddd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bb94:	b29b      	uxth	r3, r3
 800bb96:	1ad3      	subs	r3, r2, r3
 800bb98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	f000 808e 	beq.w	800bcc4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bba8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f000 8089 	beq.w	800bcc4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	330c      	adds	r3, #12
 800bbb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbbc:	e853 3f00 	ldrex	r3, [r3]
 800bbc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bbc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bbc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	330c      	adds	r3, #12
 800bbd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bbd6:	647a      	str	r2, [r7, #68]	; 0x44
 800bbd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bbdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbde:	e841 2300 	strex	r3, r2, [r1]
 800bbe2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bbe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1e3      	bne.n	800bbb2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	3314      	adds	r3, #20
 800bbf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf4:	e853 3f00 	ldrex	r3, [r3]
 800bbf8:	623b      	str	r3, [r7, #32]
   return(result);
 800bbfa:	6a3b      	ldr	r3, [r7, #32]
 800bbfc:	f023 0301 	bic.w	r3, r3, #1
 800bc00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	3314      	adds	r3, #20
 800bc0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bc0e:	633a      	str	r2, [r7, #48]	; 0x30
 800bc10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc16:	e841 2300 	strex	r3, r2, [r1]
 800bc1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d1e3      	bne.n	800bbea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	2220      	movs	r2, #32
 800bc26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	330c      	adds	r3, #12
 800bc36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	e853 3f00 	ldrex	r3, [r3]
 800bc3e:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f023 0310 	bic.w	r3, r3, #16
 800bc46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	330c      	adds	r3, #12
 800bc50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bc54:	61fa      	str	r2, [r7, #28]
 800bc56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc58:	69b9      	ldr	r1, [r7, #24]
 800bc5a:	69fa      	ldr	r2, [r7, #28]
 800bc5c:	e841 2300 	strex	r3, r2, [r1]
 800bc60:	617b      	str	r3, [r7, #20]
   return(result);
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d1e3      	bne.n	800bc30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2202      	movs	r2, #2
 800bc6c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bc6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bc72:	4619      	mov	r1, r3
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 f844 	bl	800bd02 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bc7a:	e023      	b.n	800bcc4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bc7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bc80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d009      	beq.n	800bc9c <HAL_UART_IRQHandler+0x4f4>
 800bc88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bc8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d003      	beq.n	800bc9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 f8b5 	bl	800be04 <UART_Transmit_IT>
    return;
 800bc9a:	e014      	b.n	800bcc6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800bc9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d00e      	beq.n	800bcc6 <HAL_UART_IRQHandler+0x51e>
 800bca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bcac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d008      	beq.n	800bcc6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 f8f4 	bl	800bea2 <UART_EndTransmit_IT>
    return;
 800bcba:	e004      	b.n	800bcc6 <HAL_UART_IRQHandler+0x51e>
    return;
 800bcbc:	bf00      	nop
 800bcbe:	e002      	b.n	800bcc6 <HAL_UART_IRQHandler+0x51e>
      return;
 800bcc0:	bf00      	nop
 800bcc2:	e000      	b.n	800bcc6 <HAL_UART_IRQHandler+0x51e>
      return;
 800bcc4:	bf00      	nop
  }
}
 800bcc6:	37e8      	adds	r7, #232	; 0xe8
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800bcd4:	bf00      	nop
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	bc80      	pop	{r7}
 800bcdc:	4770      	bx	lr

0800bcde <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bcde:	b480      	push	{r7}
 800bce0:	b083      	sub	sp, #12
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800bce6:	bf00      	nop
 800bce8:	370c      	adds	r7, #12
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bc80      	pop	{r7}
 800bcee:	4770      	bx	lr

0800bcf0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b083      	sub	sp, #12
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bcf8:	bf00      	nop
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bc80      	pop	{r7}
 800bd00:	4770      	bx	lr

0800bd02 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bd02:	b480      	push	{r7}
 800bd04:	b083      	sub	sp, #12
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bd0e:	bf00      	nop
 800bd10:	370c      	adds	r7, #12
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bc80      	pop	{r7}
 800bd16:	4770      	bx	lr

0800bd18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b095      	sub	sp, #84	; 0x54
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	330c      	adds	r3, #12
 800bd26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd2a:	e853 3f00 	ldrex	r3, [r3]
 800bd2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd36:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	330c      	adds	r3, #12
 800bd3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd40:	643a      	str	r2, [r7, #64]	; 0x40
 800bd42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd48:	e841 2300 	strex	r3, r2, [r1]
 800bd4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d1e5      	bne.n	800bd20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	3314      	adds	r3, #20
 800bd5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd5c:	6a3b      	ldr	r3, [r7, #32]
 800bd5e:	e853 3f00 	ldrex	r3, [r3]
 800bd62:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd64:	69fb      	ldr	r3, [r7, #28]
 800bd66:	f023 0301 	bic.w	r3, r3, #1
 800bd6a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	3314      	adds	r3, #20
 800bd72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd74:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd7c:	e841 2300 	strex	r3, r2, [r1]
 800bd80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d1e5      	bne.n	800bd54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d119      	bne.n	800bdc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	330c      	adds	r3, #12
 800bd96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	e853 3f00 	ldrex	r3, [r3]
 800bd9e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	f023 0310 	bic.w	r3, r3, #16
 800bda6:	647b      	str	r3, [r7, #68]	; 0x44
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	330c      	adds	r3, #12
 800bdae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdb0:	61ba      	str	r2, [r7, #24]
 800bdb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb4:	6979      	ldr	r1, [r7, #20]
 800bdb6:	69ba      	ldr	r2, [r7, #24]
 800bdb8:	e841 2300 	strex	r3, r2, [r1]
 800bdbc:	613b      	str	r3, [r7, #16]
   return(result);
 800bdbe:	693b      	ldr	r3, [r7, #16]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d1e5      	bne.n	800bd90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2220      	movs	r2, #32
 800bdc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bdd2:	bf00      	nop
 800bdd4:	3754      	adds	r7, #84	; 0x54
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bc80      	pop	{r7}
 800bdda:	4770      	bx	lr

0800bddc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2200      	movs	r2, #0
 800bdee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bdf6:	68f8      	ldr	r0, [r7, #12]
 800bdf8:	f7ff ff7a 	bl	800bcf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdfc:	bf00      	nop
 800bdfe:	3710      	adds	r7, #16
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800be04:	b480      	push	{r7}
 800be06:	b085      	sub	sp, #20
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800be12:	b2db      	uxtb	r3, r3
 800be14:	2b21      	cmp	r3, #33	; 0x21
 800be16:	d13e      	bne.n	800be96 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be20:	d114      	bne.n	800be4c <UART_Transmit_IT+0x48>
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	691b      	ldr	r3, [r3, #16]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d110      	bne.n	800be4c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a1b      	ldr	r3, [r3, #32]
 800be2e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	881b      	ldrh	r3, [r3, #0]
 800be34:	461a      	mov	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be3e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6a1b      	ldr	r3, [r3, #32]
 800be44:	1c9a      	adds	r2, r3, #2
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	621a      	str	r2, [r3, #32]
 800be4a:	e008      	b.n	800be5e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6a1b      	ldr	r3, [r3, #32]
 800be50:	1c59      	adds	r1, r3, #1
 800be52:	687a      	ldr	r2, [r7, #4]
 800be54:	6211      	str	r1, [r2, #32]
 800be56:	781a      	ldrb	r2, [r3, #0]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800be62:	b29b      	uxth	r3, r3
 800be64:	3b01      	subs	r3, #1
 800be66:	b29b      	uxth	r3, r3
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	4619      	mov	r1, r3
 800be6c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d10f      	bne.n	800be92 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	68da      	ldr	r2, [r3, #12]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be80:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	68da      	ldr	r2, [r3, #12]
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800be90:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800be92:	2300      	movs	r3, #0
 800be94:	e000      	b.n	800be98 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800be96:	2302      	movs	r3, #2
  }
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3714      	adds	r7, #20
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bc80      	pop	{r7}
 800bea0:	4770      	bx	lr

0800bea2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bea2:	b580      	push	{r7, lr}
 800bea4:	b082      	sub	sp, #8
 800bea6:	af00      	add	r7, sp, #0
 800bea8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68da      	ldr	r2, [r3, #12]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800beb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2220      	movs	r2, #32
 800bebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f7ff ff02 	bl	800bccc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bec8:	2300      	movs	r3, #0
}
 800beca:	4618      	mov	r0, r3
 800becc:	3708      	adds	r7, #8
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}

0800bed2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b08c      	sub	sp, #48	; 0x30
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bee0:	b2db      	uxtb	r3, r3
 800bee2:	2b22      	cmp	r3, #34	; 0x22
 800bee4:	f040 80ae 	bne.w	800c044 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bef0:	d117      	bne.n	800bf22 <UART_Receive_IT+0x50>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d113      	bne.n	800bf22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800befa:	2300      	movs	r3, #0
 800befc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf10:	b29a      	uxth	r2, r3
 800bf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf1a:	1c9a      	adds	r2, r3, #2
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	629a      	str	r2, [r3, #40]	; 0x28
 800bf20:	e026      	b.n	800bf70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf34:	d007      	beq.n	800bf46 <UART_Receive_IT+0x74>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	689b      	ldr	r3, [r3, #8]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d10a      	bne.n	800bf54 <UART_Receive_IT+0x82>
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	691b      	ldr	r3, [r3, #16]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d106      	bne.n	800bf54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	b2da      	uxtb	r2, r3
 800bf4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf50:	701a      	strb	r2, [r3, #0]
 800bf52:	e008      	b.n	800bf66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	b2db      	uxtb	r3, r3
 800bf5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf60:	b2da      	uxtb	r2, r3
 800bf62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf6a:	1c5a      	adds	r2, r3, #1
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	3b01      	subs	r3, #1
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d15d      	bne.n	800c040 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	68da      	ldr	r2, [r3, #12]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f022 0220 	bic.w	r2, r2, #32
 800bf92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	68da      	ldr	r2, [r3, #12]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bfa2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	695a      	ldr	r2, [r3, #20]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f022 0201 	bic.w	r2, r2, #1
 800bfb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2220      	movs	r2, #32
 800bfb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d135      	bne.n	800c036 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	330c      	adds	r3, #12
 800bfd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	e853 3f00 	ldrex	r3, [r3]
 800bfde:	613b      	str	r3, [r7, #16]
   return(result);
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	f023 0310 	bic.w	r3, r3, #16
 800bfe6:	627b      	str	r3, [r7, #36]	; 0x24
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	330c      	adds	r3, #12
 800bfee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bff0:	623a      	str	r2, [r7, #32]
 800bff2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bff4:	69f9      	ldr	r1, [r7, #28]
 800bff6:	6a3a      	ldr	r2, [r7, #32]
 800bff8:	e841 2300 	strex	r3, r2, [r1]
 800bffc:	61bb      	str	r3, [r7, #24]
   return(result);
 800bffe:	69bb      	ldr	r3, [r7, #24]
 800c000:	2b00      	cmp	r3, #0
 800c002:	d1e5      	bne.n	800bfd0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	f003 0310 	and.w	r3, r3, #16
 800c00e:	2b10      	cmp	r3, #16
 800c010:	d10a      	bne.n	800c028 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c012:	2300      	movs	r3, #0
 800c014:	60fb      	str	r3, [r7, #12]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	60fb      	str	r3, [r7, #12]
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	60fb      	str	r3, [r7, #12]
 800c026:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c02c:	4619      	mov	r1, r3
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f7ff fe67 	bl	800bd02 <HAL_UARTEx_RxEventCallback>
 800c034:	e002      	b.n	800c03c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f7ff fe51 	bl	800bcde <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c03c:	2300      	movs	r3, #0
 800c03e:	e002      	b.n	800c046 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c040:	2300      	movs	r3, #0
 800c042:	e000      	b.n	800c046 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c044:	2302      	movs	r3, #2
  }
}
 800c046:	4618      	mov	r0, r3
 800c048:	3730      	adds	r7, #48	; 0x30
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
	...

0800c050 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b084      	sub	sp, #16
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	691b      	ldr	r3, [r3, #16]
 800c05e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	68da      	ldr	r2, [r3, #12]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	430a      	orrs	r2, r1
 800c06c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	689a      	ldr	r2, [r3, #8]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	691b      	ldr	r3, [r3, #16]
 800c076:	431a      	orrs	r2, r3
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	695b      	ldr	r3, [r3, #20]
 800c07c:	4313      	orrs	r3, r2
 800c07e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	68db      	ldr	r3, [r3, #12]
 800c086:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c08a:	f023 030c 	bic.w	r3, r3, #12
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	6812      	ldr	r2, [r2, #0]
 800c092:	68b9      	ldr	r1, [r7, #8]
 800c094:	430b      	orrs	r3, r1
 800c096:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	695b      	ldr	r3, [r3, #20]
 800c09e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	699a      	ldr	r2, [r3, #24]
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	430a      	orrs	r2, r1
 800c0ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	4a2c      	ldr	r2, [pc, #176]	; (800c164 <UART_SetConfig+0x114>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d103      	bne.n	800c0c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c0b8:	f7fe fe8c 	bl	800add4 <HAL_RCC_GetPCLK2Freq>
 800c0bc:	60f8      	str	r0, [r7, #12]
 800c0be:	e002      	b.n	800c0c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c0c0:	f7fe fe74 	bl	800adac <HAL_RCC_GetPCLK1Freq>
 800c0c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c0c6:	68fa      	ldr	r2, [r7, #12]
 800c0c8:	4613      	mov	r3, r2
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	4413      	add	r3, r2
 800c0ce:	009a      	lsls	r2, r3, #2
 800c0d0:	441a      	add	r2, r3
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0dc:	4a22      	ldr	r2, [pc, #136]	; (800c168 <UART_SetConfig+0x118>)
 800c0de:	fba2 2303 	umull	r2, r3, r2, r3
 800c0e2:	095b      	lsrs	r3, r3, #5
 800c0e4:	0119      	lsls	r1, r3, #4
 800c0e6:	68fa      	ldr	r2, [r7, #12]
 800c0e8:	4613      	mov	r3, r2
 800c0ea:	009b      	lsls	r3, r3, #2
 800c0ec:	4413      	add	r3, r2
 800c0ee:	009a      	lsls	r2, r3, #2
 800c0f0:	441a      	add	r2, r3
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	685b      	ldr	r3, [r3, #4]
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	fbb2 f2f3 	udiv	r2, r2, r3
 800c0fc:	4b1a      	ldr	r3, [pc, #104]	; (800c168 <UART_SetConfig+0x118>)
 800c0fe:	fba3 0302 	umull	r0, r3, r3, r2
 800c102:	095b      	lsrs	r3, r3, #5
 800c104:	2064      	movs	r0, #100	; 0x64
 800c106:	fb00 f303 	mul.w	r3, r0, r3
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	011b      	lsls	r3, r3, #4
 800c10e:	3332      	adds	r3, #50	; 0x32
 800c110:	4a15      	ldr	r2, [pc, #84]	; (800c168 <UART_SetConfig+0x118>)
 800c112:	fba2 2303 	umull	r2, r3, r2, r3
 800c116:	095b      	lsrs	r3, r3, #5
 800c118:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c11c:	4419      	add	r1, r3
 800c11e:	68fa      	ldr	r2, [r7, #12]
 800c120:	4613      	mov	r3, r2
 800c122:	009b      	lsls	r3, r3, #2
 800c124:	4413      	add	r3, r2
 800c126:	009a      	lsls	r2, r3, #2
 800c128:	441a      	add	r2, r3
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	fbb2 f2f3 	udiv	r2, r2, r3
 800c134:	4b0c      	ldr	r3, [pc, #48]	; (800c168 <UART_SetConfig+0x118>)
 800c136:	fba3 0302 	umull	r0, r3, r3, r2
 800c13a:	095b      	lsrs	r3, r3, #5
 800c13c:	2064      	movs	r0, #100	; 0x64
 800c13e:	fb00 f303 	mul.w	r3, r0, r3
 800c142:	1ad3      	subs	r3, r2, r3
 800c144:	011b      	lsls	r3, r3, #4
 800c146:	3332      	adds	r3, #50	; 0x32
 800c148:	4a07      	ldr	r2, [pc, #28]	; (800c168 <UART_SetConfig+0x118>)
 800c14a:	fba2 2303 	umull	r2, r3, r2, r3
 800c14e:	095b      	lsrs	r3, r3, #5
 800c150:	f003 020f 	and.w	r2, r3, #15
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	440a      	add	r2, r1
 800c15a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c15c:	bf00      	nop
 800c15e:	3710      	adds	r7, #16
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}
 800c164:	40013800 	.word	0x40013800
 800c168:	51eb851f 	.word	0x51eb851f

0800c16c <__itoa>:
 800c16c:	1e93      	subs	r3, r2, #2
 800c16e:	2b22      	cmp	r3, #34	; 0x22
 800c170:	b510      	push	{r4, lr}
 800c172:	460c      	mov	r4, r1
 800c174:	d904      	bls.n	800c180 <__itoa+0x14>
 800c176:	2300      	movs	r3, #0
 800c178:	461c      	mov	r4, r3
 800c17a:	700b      	strb	r3, [r1, #0]
 800c17c:	4620      	mov	r0, r4
 800c17e:	bd10      	pop	{r4, pc}
 800c180:	2a0a      	cmp	r2, #10
 800c182:	d109      	bne.n	800c198 <__itoa+0x2c>
 800c184:	2800      	cmp	r0, #0
 800c186:	da07      	bge.n	800c198 <__itoa+0x2c>
 800c188:	232d      	movs	r3, #45	; 0x2d
 800c18a:	700b      	strb	r3, [r1, #0]
 800c18c:	2101      	movs	r1, #1
 800c18e:	4240      	negs	r0, r0
 800c190:	4421      	add	r1, r4
 800c192:	f000 f90d 	bl	800c3b0 <__utoa>
 800c196:	e7f1      	b.n	800c17c <__itoa+0x10>
 800c198:	2100      	movs	r1, #0
 800c19a:	e7f9      	b.n	800c190 <__itoa+0x24>

0800c19c <itoa>:
 800c19c:	f7ff bfe6 	b.w	800c16c <__itoa>

0800c1a0 <malloc>:
 800c1a0:	4b02      	ldr	r3, [pc, #8]	; (800c1ac <malloc+0xc>)
 800c1a2:	4601      	mov	r1, r0
 800c1a4:	6818      	ldr	r0, [r3, #0]
 800c1a6:	f000 b823 	b.w	800c1f0 <_malloc_r>
 800c1aa:	bf00      	nop
 800c1ac:	20000100 	.word	0x20000100

0800c1b0 <sbrk_aligned>:
 800c1b0:	b570      	push	{r4, r5, r6, lr}
 800c1b2:	4e0e      	ldr	r6, [pc, #56]	; (800c1ec <sbrk_aligned+0x3c>)
 800c1b4:	460c      	mov	r4, r1
 800c1b6:	6831      	ldr	r1, [r6, #0]
 800c1b8:	4605      	mov	r5, r0
 800c1ba:	b911      	cbnz	r1, 800c1c2 <sbrk_aligned+0x12>
 800c1bc:	f000 f952 	bl	800c464 <_sbrk_r>
 800c1c0:	6030      	str	r0, [r6, #0]
 800c1c2:	4621      	mov	r1, r4
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	f000 f94d 	bl	800c464 <_sbrk_r>
 800c1ca:	1c43      	adds	r3, r0, #1
 800c1cc:	d00a      	beq.n	800c1e4 <sbrk_aligned+0x34>
 800c1ce:	1cc4      	adds	r4, r0, #3
 800c1d0:	f024 0403 	bic.w	r4, r4, #3
 800c1d4:	42a0      	cmp	r0, r4
 800c1d6:	d007      	beq.n	800c1e8 <sbrk_aligned+0x38>
 800c1d8:	1a21      	subs	r1, r4, r0
 800c1da:	4628      	mov	r0, r5
 800c1dc:	f000 f942 	bl	800c464 <_sbrk_r>
 800c1e0:	3001      	adds	r0, #1
 800c1e2:	d101      	bne.n	800c1e8 <sbrk_aligned+0x38>
 800c1e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800c1e8:	4620      	mov	r0, r4
 800c1ea:	bd70      	pop	{r4, r5, r6, pc}
 800c1ec:	2000039c 	.word	0x2000039c

0800c1f0 <_malloc_r>:
 800c1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1f4:	1ccd      	adds	r5, r1, #3
 800c1f6:	f025 0503 	bic.w	r5, r5, #3
 800c1fa:	3508      	adds	r5, #8
 800c1fc:	2d0c      	cmp	r5, #12
 800c1fe:	bf38      	it	cc
 800c200:	250c      	movcc	r5, #12
 800c202:	2d00      	cmp	r5, #0
 800c204:	4607      	mov	r7, r0
 800c206:	db01      	blt.n	800c20c <_malloc_r+0x1c>
 800c208:	42a9      	cmp	r1, r5
 800c20a:	d905      	bls.n	800c218 <_malloc_r+0x28>
 800c20c:	230c      	movs	r3, #12
 800c20e:	2600      	movs	r6, #0
 800c210:	603b      	str	r3, [r7, #0]
 800c212:	4630      	mov	r0, r6
 800c214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c218:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c2ec <_malloc_r+0xfc>
 800c21c:	f000 f89c 	bl	800c358 <__malloc_lock>
 800c220:	f8d8 3000 	ldr.w	r3, [r8]
 800c224:	461c      	mov	r4, r3
 800c226:	bb5c      	cbnz	r4, 800c280 <_malloc_r+0x90>
 800c228:	4629      	mov	r1, r5
 800c22a:	4638      	mov	r0, r7
 800c22c:	f7ff ffc0 	bl	800c1b0 <sbrk_aligned>
 800c230:	1c43      	adds	r3, r0, #1
 800c232:	4604      	mov	r4, r0
 800c234:	d155      	bne.n	800c2e2 <_malloc_r+0xf2>
 800c236:	f8d8 4000 	ldr.w	r4, [r8]
 800c23a:	4626      	mov	r6, r4
 800c23c:	2e00      	cmp	r6, #0
 800c23e:	d145      	bne.n	800c2cc <_malloc_r+0xdc>
 800c240:	2c00      	cmp	r4, #0
 800c242:	d048      	beq.n	800c2d6 <_malloc_r+0xe6>
 800c244:	6823      	ldr	r3, [r4, #0]
 800c246:	4631      	mov	r1, r6
 800c248:	4638      	mov	r0, r7
 800c24a:	eb04 0903 	add.w	r9, r4, r3
 800c24e:	f000 f909 	bl	800c464 <_sbrk_r>
 800c252:	4581      	cmp	r9, r0
 800c254:	d13f      	bne.n	800c2d6 <_malloc_r+0xe6>
 800c256:	6821      	ldr	r1, [r4, #0]
 800c258:	4638      	mov	r0, r7
 800c25a:	1a6d      	subs	r5, r5, r1
 800c25c:	4629      	mov	r1, r5
 800c25e:	f7ff ffa7 	bl	800c1b0 <sbrk_aligned>
 800c262:	3001      	adds	r0, #1
 800c264:	d037      	beq.n	800c2d6 <_malloc_r+0xe6>
 800c266:	6823      	ldr	r3, [r4, #0]
 800c268:	442b      	add	r3, r5
 800c26a:	6023      	str	r3, [r4, #0]
 800c26c:	f8d8 3000 	ldr.w	r3, [r8]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d038      	beq.n	800c2e6 <_malloc_r+0xf6>
 800c274:	685a      	ldr	r2, [r3, #4]
 800c276:	42a2      	cmp	r2, r4
 800c278:	d12b      	bne.n	800c2d2 <_malloc_r+0xe2>
 800c27a:	2200      	movs	r2, #0
 800c27c:	605a      	str	r2, [r3, #4]
 800c27e:	e00f      	b.n	800c2a0 <_malloc_r+0xb0>
 800c280:	6822      	ldr	r2, [r4, #0]
 800c282:	1b52      	subs	r2, r2, r5
 800c284:	d41f      	bmi.n	800c2c6 <_malloc_r+0xd6>
 800c286:	2a0b      	cmp	r2, #11
 800c288:	d917      	bls.n	800c2ba <_malloc_r+0xca>
 800c28a:	1961      	adds	r1, r4, r5
 800c28c:	42a3      	cmp	r3, r4
 800c28e:	6025      	str	r5, [r4, #0]
 800c290:	bf18      	it	ne
 800c292:	6059      	strne	r1, [r3, #4]
 800c294:	6863      	ldr	r3, [r4, #4]
 800c296:	bf08      	it	eq
 800c298:	f8c8 1000 	streq.w	r1, [r8]
 800c29c:	5162      	str	r2, [r4, r5]
 800c29e:	604b      	str	r3, [r1, #4]
 800c2a0:	4638      	mov	r0, r7
 800c2a2:	f104 060b 	add.w	r6, r4, #11
 800c2a6:	f000 f85d 	bl	800c364 <__malloc_unlock>
 800c2aa:	f026 0607 	bic.w	r6, r6, #7
 800c2ae:	1d23      	adds	r3, r4, #4
 800c2b0:	1af2      	subs	r2, r6, r3
 800c2b2:	d0ae      	beq.n	800c212 <_malloc_r+0x22>
 800c2b4:	1b9b      	subs	r3, r3, r6
 800c2b6:	50a3      	str	r3, [r4, r2]
 800c2b8:	e7ab      	b.n	800c212 <_malloc_r+0x22>
 800c2ba:	42a3      	cmp	r3, r4
 800c2bc:	6862      	ldr	r2, [r4, #4]
 800c2be:	d1dd      	bne.n	800c27c <_malloc_r+0x8c>
 800c2c0:	f8c8 2000 	str.w	r2, [r8]
 800c2c4:	e7ec      	b.n	800c2a0 <_malloc_r+0xb0>
 800c2c6:	4623      	mov	r3, r4
 800c2c8:	6864      	ldr	r4, [r4, #4]
 800c2ca:	e7ac      	b.n	800c226 <_malloc_r+0x36>
 800c2cc:	4634      	mov	r4, r6
 800c2ce:	6876      	ldr	r6, [r6, #4]
 800c2d0:	e7b4      	b.n	800c23c <_malloc_r+0x4c>
 800c2d2:	4613      	mov	r3, r2
 800c2d4:	e7cc      	b.n	800c270 <_malloc_r+0x80>
 800c2d6:	230c      	movs	r3, #12
 800c2d8:	4638      	mov	r0, r7
 800c2da:	603b      	str	r3, [r7, #0]
 800c2dc:	f000 f842 	bl	800c364 <__malloc_unlock>
 800c2e0:	e797      	b.n	800c212 <_malloc_r+0x22>
 800c2e2:	6025      	str	r5, [r4, #0]
 800c2e4:	e7dc      	b.n	800c2a0 <_malloc_r+0xb0>
 800c2e6:	605b      	str	r3, [r3, #4]
 800c2e8:	deff      	udf	#255	; 0xff
 800c2ea:	bf00      	nop
 800c2ec:	20000398 	.word	0x20000398

0800c2f0 <sniprintf>:
 800c2f0:	b40c      	push	{r2, r3}
 800c2f2:	b530      	push	{r4, r5, lr}
 800c2f4:	4b17      	ldr	r3, [pc, #92]	; (800c354 <sniprintf+0x64>)
 800c2f6:	1e0c      	subs	r4, r1, #0
 800c2f8:	681d      	ldr	r5, [r3, #0]
 800c2fa:	b09d      	sub	sp, #116	; 0x74
 800c2fc:	da08      	bge.n	800c310 <sniprintf+0x20>
 800c2fe:	238b      	movs	r3, #139	; 0x8b
 800c300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c304:	602b      	str	r3, [r5, #0]
 800c306:	b01d      	add	sp, #116	; 0x74
 800c308:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c30c:	b002      	add	sp, #8
 800c30e:	4770      	bx	lr
 800c310:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c314:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c318:	bf0c      	ite	eq
 800c31a:	4623      	moveq	r3, r4
 800c31c:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c320:	9304      	str	r3, [sp, #16]
 800c322:	9307      	str	r3, [sp, #28]
 800c324:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c328:	9002      	str	r0, [sp, #8]
 800c32a:	9006      	str	r0, [sp, #24]
 800c32c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c330:	4628      	mov	r0, r5
 800c332:	ab21      	add	r3, sp, #132	; 0x84
 800c334:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c336:	a902      	add	r1, sp, #8
 800c338:	9301      	str	r3, [sp, #4]
 800c33a:	f000 f979 	bl	800c630 <_svfiprintf_r>
 800c33e:	1c43      	adds	r3, r0, #1
 800c340:	bfbc      	itt	lt
 800c342:	238b      	movlt	r3, #139	; 0x8b
 800c344:	602b      	strlt	r3, [r5, #0]
 800c346:	2c00      	cmp	r4, #0
 800c348:	d0dd      	beq.n	800c306 <sniprintf+0x16>
 800c34a:	2200      	movs	r2, #0
 800c34c:	9b02      	ldr	r3, [sp, #8]
 800c34e:	701a      	strb	r2, [r3, #0]
 800c350:	e7d9      	b.n	800c306 <sniprintf+0x16>
 800c352:	bf00      	nop
 800c354:	20000100 	.word	0x20000100

0800c358 <__malloc_lock>:
 800c358:	4801      	ldr	r0, [pc, #4]	; (800c360 <__malloc_lock+0x8>)
 800c35a:	f000 b8bd 	b.w	800c4d8 <__retarget_lock_acquire_recursive>
 800c35e:	bf00      	nop
 800c360:	200004d8 	.word	0x200004d8

0800c364 <__malloc_unlock>:
 800c364:	4801      	ldr	r0, [pc, #4]	; (800c36c <__malloc_unlock+0x8>)
 800c366:	f000 b8b8 	b.w	800c4da <__retarget_lock_release_recursive>
 800c36a:	bf00      	nop
 800c36c:	200004d8 	.word	0x200004d8

0800c370 <siprintf>:
 800c370:	b40e      	push	{r1, r2, r3}
 800c372:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c376:	b500      	push	{lr}
 800c378:	b09c      	sub	sp, #112	; 0x70
 800c37a:	ab1d      	add	r3, sp, #116	; 0x74
 800c37c:	9002      	str	r0, [sp, #8]
 800c37e:	9006      	str	r0, [sp, #24]
 800c380:	9107      	str	r1, [sp, #28]
 800c382:	9104      	str	r1, [sp, #16]
 800c384:	4808      	ldr	r0, [pc, #32]	; (800c3a8 <siprintf+0x38>)
 800c386:	4909      	ldr	r1, [pc, #36]	; (800c3ac <siprintf+0x3c>)
 800c388:	f853 2b04 	ldr.w	r2, [r3], #4
 800c38c:	9105      	str	r1, [sp, #20]
 800c38e:	6800      	ldr	r0, [r0, #0]
 800c390:	a902      	add	r1, sp, #8
 800c392:	9301      	str	r3, [sp, #4]
 800c394:	f000 f94c 	bl	800c630 <_svfiprintf_r>
 800c398:	2200      	movs	r2, #0
 800c39a:	9b02      	ldr	r3, [sp, #8]
 800c39c:	701a      	strb	r2, [r3, #0]
 800c39e:	b01c      	add	sp, #112	; 0x70
 800c3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c3a4:	b003      	add	sp, #12
 800c3a6:	4770      	bx	lr
 800c3a8:	20000100 	.word	0x20000100
 800c3ac:	ffff0208 	.word	0xffff0208

0800c3b0 <__utoa>:
 800c3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3b2:	b08b      	sub	sp, #44	; 0x2c
 800c3b4:	4605      	mov	r5, r0
 800c3b6:	460b      	mov	r3, r1
 800c3b8:	466e      	mov	r6, sp
 800c3ba:	4c1d      	ldr	r4, [pc, #116]	; (800c430 <__utoa+0x80>)
 800c3bc:	f104 0c20 	add.w	ip, r4, #32
 800c3c0:	4637      	mov	r7, r6
 800c3c2:	6820      	ldr	r0, [r4, #0]
 800c3c4:	6861      	ldr	r1, [r4, #4]
 800c3c6:	3408      	adds	r4, #8
 800c3c8:	c703      	stmia	r7!, {r0, r1}
 800c3ca:	4564      	cmp	r4, ip
 800c3cc:	463e      	mov	r6, r7
 800c3ce:	d1f7      	bne.n	800c3c0 <__utoa+0x10>
 800c3d0:	7921      	ldrb	r1, [r4, #4]
 800c3d2:	6820      	ldr	r0, [r4, #0]
 800c3d4:	7139      	strb	r1, [r7, #4]
 800c3d6:	1e91      	subs	r1, r2, #2
 800c3d8:	2922      	cmp	r1, #34	; 0x22
 800c3da:	6038      	str	r0, [r7, #0]
 800c3dc:	f04f 0100 	mov.w	r1, #0
 800c3e0:	d904      	bls.n	800c3ec <__utoa+0x3c>
 800c3e2:	7019      	strb	r1, [r3, #0]
 800c3e4:	460b      	mov	r3, r1
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	b00b      	add	sp, #44	; 0x2c
 800c3ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3ec:	1e58      	subs	r0, r3, #1
 800c3ee:	4684      	mov	ip, r0
 800c3f0:	fbb5 f7f2 	udiv	r7, r5, r2
 800c3f4:	fb02 5617 	mls	r6, r2, r7, r5
 800c3f8:	3628      	adds	r6, #40	; 0x28
 800c3fa:	446e      	add	r6, sp
 800c3fc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800c400:	460c      	mov	r4, r1
 800c402:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800c406:	462e      	mov	r6, r5
 800c408:	42b2      	cmp	r2, r6
 800c40a:	463d      	mov	r5, r7
 800c40c:	f101 0101 	add.w	r1, r1, #1
 800c410:	d9ee      	bls.n	800c3f0 <__utoa+0x40>
 800c412:	2200      	movs	r2, #0
 800c414:	545a      	strb	r2, [r3, r1]
 800c416:	1919      	adds	r1, r3, r4
 800c418:	1aa5      	subs	r5, r4, r2
 800c41a:	42aa      	cmp	r2, r5
 800c41c:	dae3      	bge.n	800c3e6 <__utoa+0x36>
 800c41e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800c422:	780e      	ldrb	r6, [r1, #0]
 800c424:	3201      	adds	r2, #1
 800c426:	7006      	strb	r6, [r0, #0]
 800c428:	f801 5901 	strb.w	r5, [r1], #-1
 800c42c:	e7f4      	b.n	800c418 <__utoa+0x68>
 800c42e:	bf00      	nop
 800c430:	0800dbca 	.word	0x0800dbca

0800c434 <strcat>:
 800c434:	4602      	mov	r2, r0
 800c436:	b510      	push	{r4, lr}
 800c438:	7814      	ldrb	r4, [r2, #0]
 800c43a:	4613      	mov	r3, r2
 800c43c:	3201      	adds	r2, #1
 800c43e:	2c00      	cmp	r4, #0
 800c440:	d1fa      	bne.n	800c438 <strcat+0x4>
 800c442:	3b01      	subs	r3, #1
 800c444:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c448:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c44c:	2a00      	cmp	r2, #0
 800c44e:	d1f9      	bne.n	800c444 <strcat+0x10>
 800c450:	bd10      	pop	{r4, pc}

0800c452 <memset>:
 800c452:	4603      	mov	r3, r0
 800c454:	4402      	add	r2, r0
 800c456:	4293      	cmp	r3, r2
 800c458:	d100      	bne.n	800c45c <memset+0xa>
 800c45a:	4770      	bx	lr
 800c45c:	f803 1b01 	strb.w	r1, [r3], #1
 800c460:	e7f9      	b.n	800c456 <memset+0x4>
	...

0800c464 <_sbrk_r>:
 800c464:	b538      	push	{r3, r4, r5, lr}
 800c466:	2300      	movs	r3, #0
 800c468:	4d05      	ldr	r5, [pc, #20]	; (800c480 <_sbrk_r+0x1c>)
 800c46a:	4604      	mov	r4, r0
 800c46c:	4608      	mov	r0, r1
 800c46e:	602b      	str	r3, [r5, #0]
 800c470:	f7fb ffd4 	bl	800841c <_sbrk>
 800c474:	1c43      	adds	r3, r0, #1
 800c476:	d102      	bne.n	800c47e <_sbrk_r+0x1a>
 800c478:	682b      	ldr	r3, [r5, #0]
 800c47a:	b103      	cbz	r3, 800c47e <_sbrk_r+0x1a>
 800c47c:	6023      	str	r3, [r4, #0]
 800c47e:	bd38      	pop	{r3, r4, r5, pc}
 800c480:	200004dc 	.word	0x200004dc

0800c484 <__errno>:
 800c484:	4b01      	ldr	r3, [pc, #4]	; (800c48c <__errno+0x8>)
 800c486:	6818      	ldr	r0, [r3, #0]
 800c488:	4770      	bx	lr
 800c48a:	bf00      	nop
 800c48c:	20000100 	.word	0x20000100

0800c490 <__libc_init_array>:
 800c490:	b570      	push	{r4, r5, r6, lr}
 800c492:	2600      	movs	r6, #0
 800c494:	4d0c      	ldr	r5, [pc, #48]	; (800c4c8 <__libc_init_array+0x38>)
 800c496:	4c0d      	ldr	r4, [pc, #52]	; (800c4cc <__libc_init_array+0x3c>)
 800c498:	1b64      	subs	r4, r4, r5
 800c49a:	10a4      	asrs	r4, r4, #2
 800c49c:	42a6      	cmp	r6, r4
 800c49e:	d109      	bne.n	800c4b4 <__libc_init_array+0x24>
 800c4a0:	f000 fbc6 	bl	800cc30 <_init>
 800c4a4:	2600      	movs	r6, #0
 800c4a6:	4d0a      	ldr	r5, [pc, #40]	; (800c4d0 <__libc_init_array+0x40>)
 800c4a8:	4c0a      	ldr	r4, [pc, #40]	; (800c4d4 <__libc_init_array+0x44>)
 800c4aa:	1b64      	subs	r4, r4, r5
 800c4ac:	10a4      	asrs	r4, r4, #2
 800c4ae:	42a6      	cmp	r6, r4
 800c4b0:	d105      	bne.n	800c4be <__libc_init_array+0x2e>
 800c4b2:	bd70      	pop	{r4, r5, r6, pc}
 800c4b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4b8:	4798      	blx	r3
 800c4ba:	3601      	adds	r6, #1
 800c4bc:	e7ee      	b.n	800c49c <__libc_init_array+0xc>
 800c4be:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4c2:	4798      	blx	r3
 800c4c4:	3601      	adds	r6, #1
 800c4c6:	e7f2      	b.n	800c4ae <__libc_init_array+0x1e>
 800c4c8:	0800dc24 	.word	0x0800dc24
 800c4cc:	0800dc24 	.word	0x0800dc24
 800c4d0:	0800dc24 	.word	0x0800dc24
 800c4d4:	0800dc28 	.word	0x0800dc28

0800c4d8 <__retarget_lock_acquire_recursive>:
 800c4d8:	4770      	bx	lr

0800c4da <__retarget_lock_release_recursive>:
 800c4da:	4770      	bx	lr

0800c4dc <strcpy>:
 800c4dc:	4603      	mov	r3, r0
 800c4de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4e2:	f803 2b01 	strb.w	r2, [r3], #1
 800c4e6:	2a00      	cmp	r2, #0
 800c4e8:	d1f9      	bne.n	800c4de <strcpy+0x2>
 800c4ea:	4770      	bx	lr

0800c4ec <_free_r>:
 800c4ec:	b538      	push	{r3, r4, r5, lr}
 800c4ee:	4605      	mov	r5, r0
 800c4f0:	2900      	cmp	r1, #0
 800c4f2:	d040      	beq.n	800c576 <_free_r+0x8a>
 800c4f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4f8:	1f0c      	subs	r4, r1, #4
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	bfb8      	it	lt
 800c4fe:	18e4      	addlt	r4, r4, r3
 800c500:	f7ff ff2a 	bl	800c358 <__malloc_lock>
 800c504:	4a1c      	ldr	r2, [pc, #112]	; (800c578 <_free_r+0x8c>)
 800c506:	6813      	ldr	r3, [r2, #0]
 800c508:	b933      	cbnz	r3, 800c518 <_free_r+0x2c>
 800c50a:	6063      	str	r3, [r4, #4]
 800c50c:	6014      	str	r4, [r2, #0]
 800c50e:	4628      	mov	r0, r5
 800c510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c514:	f7ff bf26 	b.w	800c364 <__malloc_unlock>
 800c518:	42a3      	cmp	r3, r4
 800c51a:	d908      	bls.n	800c52e <_free_r+0x42>
 800c51c:	6820      	ldr	r0, [r4, #0]
 800c51e:	1821      	adds	r1, r4, r0
 800c520:	428b      	cmp	r3, r1
 800c522:	bf01      	itttt	eq
 800c524:	6819      	ldreq	r1, [r3, #0]
 800c526:	685b      	ldreq	r3, [r3, #4]
 800c528:	1809      	addeq	r1, r1, r0
 800c52a:	6021      	streq	r1, [r4, #0]
 800c52c:	e7ed      	b.n	800c50a <_free_r+0x1e>
 800c52e:	461a      	mov	r2, r3
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	b10b      	cbz	r3, 800c538 <_free_r+0x4c>
 800c534:	42a3      	cmp	r3, r4
 800c536:	d9fa      	bls.n	800c52e <_free_r+0x42>
 800c538:	6811      	ldr	r1, [r2, #0]
 800c53a:	1850      	adds	r0, r2, r1
 800c53c:	42a0      	cmp	r0, r4
 800c53e:	d10b      	bne.n	800c558 <_free_r+0x6c>
 800c540:	6820      	ldr	r0, [r4, #0]
 800c542:	4401      	add	r1, r0
 800c544:	1850      	adds	r0, r2, r1
 800c546:	4283      	cmp	r3, r0
 800c548:	6011      	str	r1, [r2, #0]
 800c54a:	d1e0      	bne.n	800c50e <_free_r+0x22>
 800c54c:	6818      	ldr	r0, [r3, #0]
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	4408      	add	r0, r1
 800c552:	6010      	str	r0, [r2, #0]
 800c554:	6053      	str	r3, [r2, #4]
 800c556:	e7da      	b.n	800c50e <_free_r+0x22>
 800c558:	d902      	bls.n	800c560 <_free_r+0x74>
 800c55a:	230c      	movs	r3, #12
 800c55c:	602b      	str	r3, [r5, #0]
 800c55e:	e7d6      	b.n	800c50e <_free_r+0x22>
 800c560:	6820      	ldr	r0, [r4, #0]
 800c562:	1821      	adds	r1, r4, r0
 800c564:	428b      	cmp	r3, r1
 800c566:	bf01      	itttt	eq
 800c568:	6819      	ldreq	r1, [r3, #0]
 800c56a:	685b      	ldreq	r3, [r3, #4]
 800c56c:	1809      	addeq	r1, r1, r0
 800c56e:	6021      	streq	r1, [r4, #0]
 800c570:	6063      	str	r3, [r4, #4]
 800c572:	6054      	str	r4, [r2, #4]
 800c574:	e7cb      	b.n	800c50e <_free_r+0x22>
 800c576:	bd38      	pop	{r3, r4, r5, pc}
 800c578:	20000398 	.word	0x20000398

0800c57c <__ssputs_r>:
 800c57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c580:	461f      	mov	r7, r3
 800c582:	688e      	ldr	r6, [r1, #8]
 800c584:	4682      	mov	sl, r0
 800c586:	42be      	cmp	r6, r7
 800c588:	460c      	mov	r4, r1
 800c58a:	4690      	mov	r8, r2
 800c58c:	680b      	ldr	r3, [r1, #0]
 800c58e:	d82c      	bhi.n	800c5ea <__ssputs_r+0x6e>
 800c590:	898a      	ldrh	r2, [r1, #12]
 800c592:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c596:	d026      	beq.n	800c5e6 <__ssputs_r+0x6a>
 800c598:	6965      	ldr	r5, [r4, #20]
 800c59a:	6909      	ldr	r1, [r1, #16]
 800c59c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c5a0:	eba3 0901 	sub.w	r9, r3, r1
 800c5a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c5a8:	1c7b      	adds	r3, r7, #1
 800c5aa:	444b      	add	r3, r9
 800c5ac:	106d      	asrs	r5, r5, #1
 800c5ae:	429d      	cmp	r5, r3
 800c5b0:	bf38      	it	cc
 800c5b2:	461d      	movcc	r5, r3
 800c5b4:	0553      	lsls	r3, r2, #21
 800c5b6:	d527      	bpl.n	800c608 <__ssputs_r+0x8c>
 800c5b8:	4629      	mov	r1, r5
 800c5ba:	f7ff fe19 	bl	800c1f0 <_malloc_r>
 800c5be:	4606      	mov	r6, r0
 800c5c0:	b360      	cbz	r0, 800c61c <__ssputs_r+0xa0>
 800c5c2:	464a      	mov	r2, r9
 800c5c4:	6921      	ldr	r1, [r4, #16]
 800c5c6:	f000 fb1c 	bl	800cc02 <memcpy>
 800c5ca:	89a3      	ldrh	r3, [r4, #12]
 800c5cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5d4:	81a3      	strh	r3, [r4, #12]
 800c5d6:	6126      	str	r6, [r4, #16]
 800c5d8:	444e      	add	r6, r9
 800c5da:	6026      	str	r6, [r4, #0]
 800c5dc:	463e      	mov	r6, r7
 800c5de:	6165      	str	r5, [r4, #20]
 800c5e0:	eba5 0509 	sub.w	r5, r5, r9
 800c5e4:	60a5      	str	r5, [r4, #8]
 800c5e6:	42be      	cmp	r6, r7
 800c5e8:	d900      	bls.n	800c5ec <__ssputs_r+0x70>
 800c5ea:	463e      	mov	r6, r7
 800c5ec:	4632      	mov	r2, r6
 800c5ee:	4641      	mov	r1, r8
 800c5f0:	6820      	ldr	r0, [r4, #0]
 800c5f2:	f000 fade 	bl	800cbb2 <memmove>
 800c5f6:	2000      	movs	r0, #0
 800c5f8:	68a3      	ldr	r3, [r4, #8]
 800c5fa:	1b9b      	subs	r3, r3, r6
 800c5fc:	60a3      	str	r3, [r4, #8]
 800c5fe:	6823      	ldr	r3, [r4, #0]
 800c600:	4433      	add	r3, r6
 800c602:	6023      	str	r3, [r4, #0]
 800c604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c608:	462a      	mov	r2, r5
 800c60a:	f000 faa3 	bl	800cb54 <_realloc_r>
 800c60e:	4606      	mov	r6, r0
 800c610:	2800      	cmp	r0, #0
 800c612:	d1e0      	bne.n	800c5d6 <__ssputs_r+0x5a>
 800c614:	4650      	mov	r0, sl
 800c616:	6921      	ldr	r1, [r4, #16]
 800c618:	f7ff ff68 	bl	800c4ec <_free_r>
 800c61c:	230c      	movs	r3, #12
 800c61e:	f8ca 3000 	str.w	r3, [sl]
 800c622:	89a3      	ldrh	r3, [r4, #12]
 800c624:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c62c:	81a3      	strh	r3, [r4, #12]
 800c62e:	e7e9      	b.n	800c604 <__ssputs_r+0x88>

0800c630 <_svfiprintf_r>:
 800c630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c634:	4698      	mov	r8, r3
 800c636:	898b      	ldrh	r3, [r1, #12]
 800c638:	4607      	mov	r7, r0
 800c63a:	061b      	lsls	r3, r3, #24
 800c63c:	460d      	mov	r5, r1
 800c63e:	4614      	mov	r4, r2
 800c640:	b09d      	sub	sp, #116	; 0x74
 800c642:	d50e      	bpl.n	800c662 <_svfiprintf_r+0x32>
 800c644:	690b      	ldr	r3, [r1, #16]
 800c646:	b963      	cbnz	r3, 800c662 <_svfiprintf_r+0x32>
 800c648:	2140      	movs	r1, #64	; 0x40
 800c64a:	f7ff fdd1 	bl	800c1f0 <_malloc_r>
 800c64e:	6028      	str	r0, [r5, #0]
 800c650:	6128      	str	r0, [r5, #16]
 800c652:	b920      	cbnz	r0, 800c65e <_svfiprintf_r+0x2e>
 800c654:	230c      	movs	r3, #12
 800c656:	603b      	str	r3, [r7, #0]
 800c658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c65c:	e0d0      	b.n	800c800 <_svfiprintf_r+0x1d0>
 800c65e:	2340      	movs	r3, #64	; 0x40
 800c660:	616b      	str	r3, [r5, #20]
 800c662:	2300      	movs	r3, #0
 800c664:	9309      	str	r3, [sp, #36]	; 0x24
 800c666:	2320      	movs	r3, #32
 800c668:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c66c:	2330      	movs	r3, #48	; 0x30
 800c66e:	f04f 0901 	mov.w	r9, #1
 800c672:	f8cd 800c 	str.w	r8, [sp, #12]
 800c676:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c818 <_svfiprintf_r+0x1e8>
 800c67a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c67e:	4623      	mov	r3, r4
 800c680:	469a      	mov	sl, r3
 800c682:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c686:	b10a      	cbz	r2, 800c68c <_svfiprintf_r+0x5c>
 800c688:	2a25      	cmp	r2, #37	; 0x25
 800c68a:	d1f9      	bne.n	800c680 <_svfiprintf_r+0x50>
 800c68c:	ebba 0b04 	subs.w	fp, sl, r4
 800c690:	d00b      	beq.n	800c6aa <_svfiprintf_r+0x7a>
 800c692:	465b      	mov	r3, fp
 800c694:	4622      	mov	r2, r4
 800c696:	4629      	mov	r1, r5
 800c698:	4638      	mov	r0, r7
 800c69a:	f7ff ff6f 	bl	800c57c <__ssputs_r>
 800c69e:	3001      	adds	r0, #1
 800c6a0:	f000 80a9 	beq.w	800c7f6 <_svfiprintf_r+0x1c6>
 800c6a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c6a6:	445a      	add	r2, fp
 800c6a8:	9209      	str	r2, [sp, #36]	; 0x24
 800c6aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	f000 80a1 	beq.w	800c7f6 <_svfiprintf_r+0x1c6>
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6be:	f10a 0a01 	add.w	sl, sl, #1
 800c6c2:	9304      	str	r3, [sp, #16]
 800c6c4:	9307      	str	r3, [sp, #28]
 800c6c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6ca:	931a      	str	r3, [sp, #104]	; 0x68
 800c6cc:	4654      	mov	r4, sl
 800c6ce:	2205      	movs	r2, #5
 800c6d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6d4:	4850      	ldr	r0, [pc, #320]	; (800c818 <_svfiprintf_r+0x1e8>)
 800c6d6:	f000 fa86 	bl	800cbe6 <memchr>
 800c6da:	9a04      	ldr	r2, [sp, #16]
 800c6dc:	b9d8      	cbnz	r0, 800c716 <_svfiprintf_r+0xe6>
 800c6de:	06d0      	lsls	r0, r2, #27
 800c6e0:	bf44      	itt	mi
 800c6e2:	2320      	movmi	r3, #32
 800c6e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6e8:	0711      	lsls	r1, r2, #28
 800c6ea:	bf44      	itt	mi
 800c6ec:	232b      	movmi	r3, #43	; 0x2b
 800c6ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c6f6:	2b2a      	cmp	r3, #42	; 0x2a
 800c6f8:	d015      	beq.n	800c726 <_svfiprintf_r+0xf6>
 800c6fa:	4654      	mov	r4, sl
 800c6fc:	2000      	movs	r0, #0
 800c6fe:	f04f 0c0a 	mov.w	ip, #10
 800c702:	9a07      	ldr	r2, [sp, #28]
 800c704:	4621      	mov	r1, r4
 800c706:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c70a:	3b30      	subs	r3, #48	; 0x30
 800c70c:	2b09      	cmp	r3, #9
 800c70e:	d94d      	bls.n	800c7ac <_svfiprintf_r+0x17c>
 800c710:	b1b0      	cbz	r0, 800c740 <_svfiprintf_r+0x110>
 800c712:	9207      	str	r2, [sp, #28]
 800c714:	e014      	b.n	800c740 <_svfiprintf_r+0x110>
 800c716:	eba0 0308 	sub.w	r3, r0, r8
 800c71a:	fa09 f303 	lsl.w	r3, r9, r3
 800c71e:	4313      	orrs	r3, r2
 800c720:	46a2      	mov	sl, r4
 800c722:	9304      	str	r3, [sp, #16]
 800c724:	e7d2      	b.n	800c6cc <_svfiprintf_r+0x9c>
 800c726:	9b03      	ldr	r3, [sp, #12]
 800c728:	1d19      	adds	r1, r3, #4
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	9103      	str	r1, [sp, #12]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	bfbb      	ittet	lt
 800c732:	425b      	neglt	r3, r3
 800c734:	f042 0202 	orrlt.w	r2, r2, #2
 800c738:	9307      	strge	r3, [sp, #28]
 800c73a:	9307      	strlt	r3, [sp, #28]
 800c73c:	bfb8      	it	lt
 800c73e:	9204      	strlt	r2, [sp, #16]
 800c740:	7823      	ldrb	r3, [r4, #0]
 800c742:	2b2e      	cmp	r3, #46	; 0x2e
 800c744:	d10c      	bne.n	800c760 <_svfiprintf_r+0x130>
 800c746:	7863      	ldrb	r3, [r4, #1]
 800c748:	2b2a      	cmp	r3, #42	; 0x2a
 800c74a:	d134      	bne.n	800c7b6 <_svfiprintf_r+0x186>
 800c74c:	9b03      	ldr	r3, [sp, #12]
 800c74e:	3402      	adds	r4, #2
 800c750:	1d1a      	adds	r2, r3, #4
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	9203      	str	r2, [sp, #12]
 800c756:	2b00      	cmp	r3, #0
 800c758:	bfb8      	it	lt
 800c75a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c75e:	9305      	str	r3, [sp, #20]
 800c760:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c81c <_svfiprintf_r+0x1ec>
 800c764:	2203      	movs	r2, #3
 800c766:	4650      	mov	r0, sl
 800c768:	7821      	ldrb	r1, [r4, #0]
 800c76a:	f000 fa3c 	bl	800cbe6 <memchr>
 800c76e:	b138      	cbz	r0, 800c780 <_svfiprintf_r+0x150>
 800c770:	2240      	movs	r2, #64	; 0x40
 800c772:	9b04      	ldr	r3, [sp, #16]
 800c774:	eba0 000a 	sub.w	r0, r0, sl
 800c778:	4082      	lsls	r2, r0
 800c77a:	4313      	orrs	r3, r2
 800c77c:	3401      	adds	r4, #1
 800c77e:	9304      	str	r3, [sp, #16]
 800c780:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c784:	2206      	movs	r2, #6
 800c786:	4826      	ldr	r0, [pc, #152]	; (800c820 <_svfiprintf_r+0x1f0>)
 800c788:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c78c:	f000 fa2b 	bl	800cbe6 <memchr>
 800c790:	2800      	cmp	r0, #0
 800c792:	d038      	beq.n	800c806 <_svfiprintf_r+0x1d6>
 800c794:	4b23      	ldr	r3, [pc, #140]	; (800c824 <_svfiprintf_r+0x1f4>)
 800c796:	bb1b      	cbnz	r3, 800c7e0 <_svfiprintf_r+0x1b0>
 800c798:	9b03      	ldr	r3, [sp, #12]
 800c79a:	3307      	adds	r3, #7
 800c79c:	f023 0307 	bic.w	r3, r3, #7
 800c7a0:	3308      	adds	r3, #8
 800c7a2:	9303      	str	r3, [sp, #12]
 800c7a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7a6:	4433      	add	r3, r6
 800c7a8:	9309      	str	r3, [sp, #36]	; 0x24
 800c7aa:	e768      	b.n	800c67e <_svfiprintf_r+0x4e>
 800c7ac:	460c      	mov	r4, r1
 800c7ae:	2001      	movs	r0, #1
 800c7b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7b4:	e7a6      	b.n	800c704 <_svfiprintf_r+0xd4>
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	f04f 0c0a 	mov.w	ip, #10
 800c7bc:	4619      	mov	r1, r3
 800c7be:	3401      	adds	r4, #1
 800c7c0:	9305      	str	r3, [sp, #20]
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7c8:	3a30      	subs	r2, #48	; 0x30
 800c7ca:	2a09      	cmp	r2, #9
 800c7cc:	d903      	bls.n	800c7d6 <_svfiprintf_r+0x1a6>
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d0c6      	beq.n	800c760 <_svfiprintf_r+0x130>
 800c7d2:	9105      	str	r1, [sp, #20]
 800c7d4:	e7c4      	b.n	800c760 <_svfiprintf_r+0x130>
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	2301      	movs	r3, #1
 800c7da:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7de:	e7f0      	b.n	800c7c2 <_svfiprintf_r+0x192>
 800c7e0:	ab03      	add	r3, sp, #12
 800c7e2:	9300      	str	r3, [sp, #0]
 800c7e4:	462a      	mov	r2, r5
 800c7e6:	4638      	mov	r0, r7
 800c7e8:	4b0f      	ldr	r3, [pc, #60]	; (800c828 <_svfiprintf_r+0x1f8>)
 800c7ea:	a904      	add	r1, sp, #16
 800c7ec:	f3af 8000 	nop.w
 800c7f0:	1c42      	adds	r2, r0, #1
 800c7f2:	4606      	mov	r6, r0
 800c7f4:	d1d6      	bne.n	800c7a4 <_svfiprintf_r+0x174>
 800c7f6:	89ab      	ldrh	r3, [r5, #12]
 800c7f8:	065b      	lsls	r3, r3, #25
 800c7fa:	f53f af2d 	bmi.w	800c658 <_svfiprintf_r+0x28>
 800c7fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c800:	b01d      	add	sp, #116	; 0x74
 800c802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c806:	ab03      	add	r3, sp, #12
 800c808:	9300      	str	r3, [sp, #0]
 800c80a:	462a      	mov	r2, r5
 800c80c:	4638      	mov	r0, r7
 800c80e:	4b06      	ldr	r3, [pc, #24]	; (800c828 <_svfiprintf_r+0x1f8>)
 800c810:	a904      	add	r1, sp, #16
 800c812:	f000 f87d 	bl	800c910 <_printf_i>
 800c816:	e7eb      	b.n	800c7f0 <_svfiprintf_r+0x1c0>
 800c818:	0800dbef 	.word	0x0800dbef
 800c81c:	0800dbf5 	.word	0x0800dbf5
 800c820:	0800dbf9 	.word	0x0800dbf9
 800c824:	00000000 	.word	0x00000000
 800c828:	0800c57d 	.word	0x0800c57d

0800c82c <_printf_common>:
 800c82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c830:	4616      	mov	r6, r2
 800c832:	4699      	mov	r9, r3
 800c834:	688a      	ldr	r2, [r1, #8]
 800c836:	690b      	ldr	r3, [r1, #16]
 800c838:	4607      	mov	r7, r0
 800c83a:	4293      	cmp	r3, r2
 800c83c:	bfb8      	it	lt
 800c83e:	4613      	movlt	r3, r2
 800c840:	6033      	str	r3, [r6, #0]
 800c842:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c846:	460c      	mov	r4, r1
 800c848:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c84c:	b10a      	cbz	r2, 800c852 <_printf_common+0x26>
 800c84e:	3301      	adds	r3, #1
 800c850:	6033      	str	r3, [r6, #0]
 800c852:	6823      	ldr	r3, [r4, #0]
 800c854:	0699      	lsls	r1, r3, #26
 800c856:	bf42      	ittt	mi
 800c858:	6833      	ldrmi	r3, [r6, #0]
 800c85a:	3302      	addmi	r3, #2
 800c85c:	6033      	strmi	r3, [r6, #0]
 800c85e:	6825      	ldr	r5, [r4, #0]
 800c860:	f015 0506 	ands.w	r5, r5, #6
 800c864:	d106      	bne.n	800c874 <_printf_common+0x48>
 800c866:	f104 0a19 	add.w	sl, r4, #25
 800c86a:	68e3      	ldr	r3, [r4, #12]
 800c86c:	6832      	ldr	r2, [r6, #0]
 800c86e:	1a9b      	subs	r3, r3, r2
 800c870:	42ab      	cmp	r3, r5
 800c872:	dc2b      	bgt.n	800c8cc <_printf_common+0xa0>
 800c874:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c878:	1e13      	subs	r3, r2, #0
 800c87a:	6822      	ldr	r2, [r4, #0]
 800c87c:	bf18      	it	ne
 800c87e:	2301      	movne	r3, #1
 800c880:	0692      	lsls	r2, r2, #26
 800c882:	d430      	bmi.n	800c8e6 <_printf_common+0xba>
 800c884:	4649      	mov	r1, r9
 800c886:	4638      	mov	r0, r7
 800c888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c88c:	47c0      	blx	r8
 800c88e:	3001      	adds	r0, #1
 800c890:	d023      	beq.n	800c8da <_printf_common+0xae>
 800c892:	6823      	ldr	r3, [r4, #0]
 800c894:	6922      	ldr	r2, [r4, #16]
 800c896:	f003 0306 	and.w	r3, r3, #6
 800c89a:	2b04      	cmp	r3, #4
 800c89c:	bf14      	ite	ne
 800c89e:	2500      	movne	r5, #0
 800c8a0:	6833      	ldreq	r3, [r6, #0]
 800c8a2:	f04f 0600 	mov.w	r6, #0
 800c8a6:	bf08      	it	eq
 800c8a8:	68e5      	ldreq	r5, [r4, #12]
 800c8aa:	f104 041a 	add.w	r4, r4, #26
 800c8ae:	bf08      	it	eq
 800c8b0:	1aed      	subeq	r5, r5, r3
 800c8b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c8b6:	bf08      	it	eq
 800c8b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	bfc4      	itt	gt
 800c8c0:	1a9b      	subgt	r3, r3, r2
 800c8c2:	18ed      	addgt	r5, r5, r3
 800c8c4:	42b5      	cmp	r5, r6
 800c8c6:	d11a      	bne.n	800c8fe <_printf_common+0xd2>
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	e008      	b.n	800c8de <_printf_common+0xb2>
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	4652      	mov	r2, sl
 800c8d0:	4649      	mov	r1, r9
 800c8d2:	4638      	mov	r0, r7
 800c8d4:	47c0      	blx	r8
 800c8d6:	3001      	adds	r0, #1
 800c8d8:	d103      	bne.n	800c8e2 <_printf_common+0xb6>
 800c8da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8e2:	3501      	adds	r5, #1
 800c8e4:	e7c1      	b.n	800c86a <_printf_common+0x3e>
 800c8e6:	2030      	movs	r0, #48	; 0x30
 800c8e8:	18e1      	adds	r1, r4, r3
 800c8ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8ee:	1c5a      	adds	r2, r3, #1
 800c8f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8f4:	4422      	add	r2, r4
 800c8f6:	3302      	adds	r3, #2
 800c8f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8fc:	e7c2      	b.n	800c884 <_printf_common+0x58>
 800c8fe:	2301      	movs	r3, #1
 800c900:	4622      	mov	r2, r4
 800c902:	4649      	mov	r1, r9
 800c904:	4638      	mov	r0, r7
 800c906:	47c0      	blx	r8
 800c908:	3001      	adds	r0, #1
 800c90a:	d0e6      	beq.n	800c8da <_printf_common+0xae>
 800c90c:	3601      	adds	r6, #1
 800c90e:	e7d9      	b.n	800c8c4 <_printf_common+0x98>

0800c910 <_printf_i>:
 800c910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c914:	7e0f      	ldrb	r7, [r1, #24]
 800c916:	4691      	mov	r9, r2
 800c918:	2f78      	cmp	r7, #120	; 0x78
 800c91a:	4680      	mov	r8, r0
 800c91c:	460c      	mov	r4, r1
 800c91e:	469a      	mov	sl, r3
 800c920:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c922:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c926:	d807      	bhi.n	800c938 <_printf_i+0x28>
 800c928:	2f62      	cmp	r7, #98	; 0x62
 800c92a:	d80a      	bhi.n	800c942 <_printf_i+0x32>
 800c92c:	2f00      	cmp	r7, #0
 800c92e:	f000 80d5 	beq.w	800cadc <_printf_i+0x1cc>
 800c932:	2f58      	cmp	r7, #88	; 0x58
 800c934:	f000 80c1 	beq.w	800caba <_printf_i+0x1aa>
 800c938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c93c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c940:	e03a      	b.n	800c9b8 <_printf_i+0xa8>
 800c942:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c946:	2b15      	cmp	r3, #21
 800c948:	d8f6      	bhi.n	800c938 <_printf_i+0x28>
 800c94a:	a101      	add	r1, pc, #4	; (adr r1, 800c950 <_printf_i+0x40>)
 800c94c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c950:	0800c9a9 	.word	0x0800c9a9
 800c954:	0800c9bd 	.word	0x0800c9bd
 800c958:	0800c939 	.word	0x0800c939
 800c95c:	0800c939 	.word	0x0800c939
 800c960:	0800c939 	.word	0x0800c939
 800c964:	0800c939 	.word	0x0800c939
 800c968:	0800c9bd 	.word	0x0800c9bd
 800c96c:	0800c939 	.word	0x0800c939
 800c970:	0800c939 	.word	0x0800c939
 800c974:	0800c939 	.word	0x0800c939
 800c978:	0800c939 	.word	0x0800c939
 800c97c:	0800cac3 	.word	0x0800cac3
 800c980:	0800c9e9 	.word	0x0800c9e9
 800c984:	0800ca7d 	.word	0x0800ca7d
 800c988:	0800c939 	.word	0x0800c939
 800c98c:	0800c939 	.word	0x0800c939
 800c990:	0800cae5 	.word	0x0800cae5
 800c994:	0800c939 	.word	0x0800c939
 800c998:	0800c9e9 	.word	0x0800c9e9
 800c99c:	0800c939 	.word	0x0800c939
 800c9a0:	0800c939 	.word	0x0800c939
 800c9a4:	0800ca85 	.word	0x0800ca85
 800c9a8:	682b      	ldr	r3, [r5, #0]
 800c9aa:	1d1a      	adds	r2, r3, #4
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	602a      	str	r2, [r5, #0]
 800c9b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c9b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c9b8:	2301      	movs	r3, #1
 800c9ba:	e0a0      	b.n	800cafe <_printf_i+0x1ee>
 800c9bc:	6820      	ldr	r0, [r4, #0]
 800c9be:	682b      	ldr	r3, [r5, #0]
 800c9c0:	0607      	lsls	r7, r0, #24
 800c9c2:	f103 0104 	add.w	r1, r3, #4
 800c9c6:	6029      	str	r1, [r5, #0]
 800c9c8:	d501      	bpl.n	800c9ce <_printf_i+0xbe>
 800c9ca:	681e      	ldr	r6, [r3, #0]
 800c9cc:	e003      	b.n	800c9d6 <_printf_i+0xc6>
 800c9ce:	0646      	lsls	r6, r0, #25
 800c9d0:	d5fb      	bpl.n	800c9ca <_printf_i+0xba>
 800c9d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c9d6:	2e00      	cmp	r6, #0
 800c9d8:	da03      	bge.n	800c9e2 <_printf_i+0xd2>
 800c9da:	232d      	movs	r3, #45	; 0x2d
 800c9dc:	4276      	negs	r6, r6
 800c9de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c9e2:	230a      	movs	r3, #10
 800c9e4:	4859      	ldr	r0, [pc, #356]	; (800cb4c <_printf_i+0x23c>)
 800c9e6:	e012      	b.n	800ca0e <_printf_i+0xfe>
 800c9e8:	682b      	ldr	r3, [r5, #0]
 800c9ea:	6820      	ldr	r0, [r4, #0]
 800c9ec:	1d19      	adds	r1, r3, #4
 800c9ee:	6029      	str	r1, [r5, #0]
 800c9f0:	0605      	lsls	r5, r0, #24
 800c9f2:	d501      	bpl.n	800c9f8 <_printf_i+0xe8>
 800c9f4:	681e      	ldr	r6, [r3, #0]
 800c9f6:	e002      	b.n	800c9fe <_printf_i+0xee>
 800c9f8:	0641      	lsls	r1, r0, #25
 800c9fa:	d5fb      	bpl.n	800c9f4 <_printf_i+0xe4>
 800c9fc:	881e      	ldrh	r6, [r3, #0]
 800c9fe:	2f6f      	cmp	r7, #111	; 0x6f
 800ca00:	bf0c      	ite	eq
 800ca02:	2308      	moveq	r3, #8
 800ca04:	230a      	movne	r3, #10
 800ca06:	4851      	ldr	r0, [pc, #324]	; (800cb4c <_printf_i+0x23c>)
 800ca08:	2100      	movs	r1, #0
 800ca0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ca0e:	6865      	ldr	r5, [r4, #4]
 800ca10:	2d00      	cmp	r5, #0
 800ca12:	bfa8      	it	ge
 800ca14:	6821      	ldrge	r1, [r4, #0]
 800ca16:	60a5      	str	r5, [r4, #8]
 800ca18:	bfa4      	itt	ge
 800ca1a:	f021 0104 	bicge.w	r1, r1, #4
 800ca1e:	6021      	strge	r1, [r4, #0]
 800ca20:	b90e      	cbnz	r6, 800ca26 <_printf_i+0x116>
 800ca22:	2d00      	cmp	r5, #0
 800ca24:	d04b      	beq.n	800cabe <_printf_i+0x1ae>
 800ca26:	4615      	mov	r5, r2
 800ca28:	fbb6 f1f3 	udiv	r1, r6, r3
 800ca2c:	fb03 6711 	mls	r7, r3, r1, r6
 800ca30:	5dc7      	ldrb	r7, [r0, r7]
 800ca32:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ca36:	4637      	mov	r7, r6
 800ca38:	42bb      	cmp	r3, r7
 800ca3a:	460e      	mov	r6, r1
 800ca3c:	d9f4      	bls.n	800ca28 <_printf_i+0x118>
 800ca3e:	2b08      	cmp	r3, #8
 800ca40:	d10b      	bne.n	800ca5a <_printf_i+0x14a>
 800ca42:	6823      	ldr	r3, [r4, #0]
 800ca44:	07de      	lsls	r6, r3, #31
 800ca46:	d508      	bpl.n	800ca5a <_printf_i+0x14a>
 800ca48:	6923      	ldr	r3, [r4, #16]
 800ca4a:	6861      	ldr	r1, [r4, #4]
 800ca4c:	4299      	cmp	r1, r3
 800ca4e:	bfde      	ittt	le
 800ca50:	2330      	movle	r3, #48	; 0x30
 800ca52:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca56:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ca5a:	1b52      	subs	r2, r2, r5
 800ca5c:	6122      	str	r2, [r4, #16]
 800ca5e:	464b      	mov	r3, r9
 800ca60:	4621      	mov	r1, r4
 800ca62:	4640      	mov	r0, r8
 800ca64:	f8cd a000 	str.w	sl, [sp]
 800ca68:	aa03      	add	r2, sp, #12
 800ca6a:	f7ff fedf 	bl	800c82c <_printf_common>
 800ca6e:	3001      	adds	r0, #1
 800ca70:	d14a      	bne.n	800cb08 <_printf_i+0x1f8>
 800ca72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ca76:	b004      	add	sp, #16
 800ca78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca7c:	6823      	ldr	r3, [r4, #0]
 800ca7e:	f043 0320 	orr.w	r3, r3, #32
 800ca82:	6023      	str	r3, [r4, #0]
 800ca84:	2778      	movs	r7, #120	; 0x78
 800ca86:	4832      	ldr	r0, [pc, #200]	; (800cb50 <_printf_i+0x240>)
 800ca88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ca8c:	6823      	ldr	r3, [r4, #0]
 800ca8e:	6829      	ldr	r1, [r5, #0]
 800ca90:	061f      	lsls	r7, r3, #24
 800ca92:	f851 6b04 	ldr.w	r6, [r1], #4
 800ca96:	d402      	bmi.n	800ca9e <_printf_i+0x18e>
 800ca98:	065f      	lsls	r7, r3, #25
 800ca9a:	bf48      	it	mi
 800ca9c:	b2b6      	uxthmi	r6, r6
 800ca9e:	07df      	lsls	r7, r3, #31
 800caa0:	bf48      	it	mi
 800caa2:	f043 0320 	orrmi.w	r3, r3, #32
 800caa6:	6029      	str	r1, [r5, #0]
 800caa8:	bf48      	it	mi
 800caaa:	6023      	strmi	r3, [r4, #0]
 800caac:	b91e      	cbnz	r6, 800cab6 <_printf_i+0x1a6>
 800caae:	6823      	ldr	r3, [r4, #0]
 800cab0:	f023 0320 	bic.w	r3, r3, #32
 800cab4:	6023      	str	r3, [r4, #0]
 800cab6:	2310      	movs	r3, #16
 800cab8:	e7a6      	b.n	800ca08 <_printf_i+0xf8>
 800caba:	4824      	ldr	r0, [pc, #144]	; (800cb4c <_printf_i+0x23c>)
 800cabc:	e7e4      	b.n	800ca88 <_printf_i+0x178>
 800cabe:	4615      	mov	r5, r2
 800cac0:	e7bd      	b.n	800ca3e <_printf_i+0x12e>
 800cac2:	682b      	ldr	r3, [r5, #0]
 800cac4:	6826      	ldr	r6, [r4, #0]
 800cac6:	1d18      	adds	r0, r3, #4
 800cac8:	6961      	ldr	r1, [r4, #20]
 800caca:	6028      	str	r0, [r5, #0]
 800cacc:	0635      	lsls	r5, r6, #24
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	d501      	bpl.n	800cad6 <_printf_i+0x1c6>
 800cad2:	6019      	str	r1, [r3, #0]
 800cad4:	e002      	b.n	800cadc <_printf_i+0x1cc>
 800cad6:	0670      	lsls	r0, r6, #25
 800cad8:	d5fb      	bpl.n	800cad2 <_printf_i+0x1c2>
 800cada:	8019      	strh	r1, [r3, #0]
 800cadc:	2300      	movs	r3, #0
 800cade:	4615      	mov	r5, r2
 800cae0:	6123      	str	r3, [r4, #16]
 800cae2:	e7bc      	b.n	800ca5e <_printf_i+0x14e>
 800cae4:	682b      	ldr	r3, [r5, #0]
 800cae6:	2100      	movs	r1, #0
 800cae8:	1d1a      	adds	r2, r3, #4
 800caea:	602a      	str	r2, [r5, #0]
 800caec:	681d      	ldr	r5, [r3, #0]
 800caee:	6862      	ldr	r2, [r4, #4]
 800caf0:	4628      	mov	r0, r5
 800caf2:	f000 f878 	bl	800cbe6 <memchr>
 800caf6:	b108      	cbz	r0, 800cafc <_printf_i+0x1ec>
 800caf8:	1b40      	subs	r0, r0, r5
 800cafa:	6060      	str	r0, [r4, #4]
 800cafc:	6863      	ldr	r3, [r4, #4]
 800cafe:	6123      	str	r3, [r4, #16]
 800cb00:	2300      	movs	r3, #0
 800cb02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cb06:	e7aa      	b.n	800ca5e <_printf_i+0x14e>
 800cb08:	462a      	mov	r2, r5
 800cb0a:	4649      	mov	r1, r9
 800cb0c:	4640      	mov	r0, r8
 800cb0e:	6923      	ldr	r3, [r4, #16]
 800cb10:	47d0      	blx	sl
 800cb12:	3001      	adds	r0, #1
 800cb14:	d0ad      	beq.n	800ca72 <_printf_i+0x162>
 800cb16:	6823      	ldr	r3, [r4, #0]
 800cb18:	079b      	lsls	r3, r3, #30
 800cb1a:	d413      	bmi.n	800cb44 <_printf_i+0x234>
 800cb1c:	68e0      	ldr	r0, [r4, #12]
 800cb1e:	9b03      	ldr	r3, [sp, #12]
 800cb20:	4298      	cmp	r0, r3
 800cb22:	bfb8      	it	lt
 800cb24:	4618      	movlt	r0, r3
 800cb26:	e7a6      	b.n	800ca76 <_printf_i+0x166>
 800cb28:	2301      	movs	r3, #1
 800cb2a:	4632      	mov	r2, r6
 800cb2c:	4649      	mov	r1, r9
 800cb2e:	4640      	mov	r0, r8
 800cb30:	47d0      	blx	sl
 800cb32:	3001      	adds	r0, #1
 800cb34:	d09d      	beq.n	800ca72 <_printf_i+0x162>
 800cb36:	3501      	adds	r5, #1
 800cb38:	68e3      	ldr	r3, [r4, #12]
 800cb3a:	9903      	ldr	r1, [sp, #12]
 800cb3c:	1a5b      	subs	r3, r3, r1
 800cb3e:	42ab      	cmp	r3, r5
 800cb40:	dcf2      	bgt.n	800cb28 <_printf_i+0x218>
 800cb42:	e7eb      	b.n	800cb1c <_printf_i+0x20c>
 800cb44:	2500      	movs	r5, #0
 800cb46:	f104 0619 	add.w	r6, r4, #25
 800cb4a:	e7f5      	b.n	800cb38 <_printf_i+0x228>
 800cb4c:	0800dc00 	.word	0x0800dc00
 800cb50:	0800dc11 	.word	0x0800dc11

0800cb54 <_realloc_r>:
 800cb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb58:	4680      	mov	r8, r0
 800cb5a:	4614      	mov	r4, r2
 800cb5c:	460e      	mov	r6, r1
 800cb5e:	b921      	cbnz	r1, 800cb6a <_realloc_r+0x16>
 800cb60:	4611      	mov	r1, r2
 800cb62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb66:	f7ff bb43 	b.w	800c1f0 <_malloc_r>
 800cb6a:	b92a      	cbnz	r2, 800cb78 <_realloc_r+0x24>
 800cb6c:	f7ff fcbe 	bl	800c4ec <_free_r>
 800cb70:	4625      	mov	r5, r4
 800cb72:	4628      	mov	r0, r5
 800cb74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb78:	f000 f851 	bl	800cc1e <_malloc_usable_size_r>
 800cb7c:	4284      	cmp	r4, r0
 800cb7e:	4607      	mov	r7, r0
 800cb80:	d802      	bhi.n	800cb88 <_realloc_r+0x34>
 800cb82:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb86:	d812      	bhi.n	800cbae <_realloc_r+0x5a>
 800cb88:	4621      	mov	r1, r4
 800cb8a:	4640      	mov	r0, r8
 800cb8c:	f7ff fb30 	bl	800c1f0 <_malloc_r>
 800cb90:	4605      	mov	r5, r0
 800cb92:	2800      	cmp	r0, #0
 800cb94:	d0ed      	beq.n	800cb72 <_realloc_r+0x1e>
 800cb96:	42bc      	cmp	r4, r7
 800cb98:	4622      	mov	r2, r4
 800cb9a:	4631      	mov	r1, r6
 800cb9c:	bf28      	it	cs
 800cb9e:	463a      	movcs	r2, r7
 800cba0:	f000 f82f 	bl	800cc02 <memcpy>
 800cba4:	4631      	mov	r1, r6
 800cba6:	4640      	mov	r0, r8
 800cba8:	f7ff fca0 	bl	800c4ec <_free_r>
 800cbac:	e7e1      	b.n	800cb72 <_realloc_r+0x1e>
 800cbae:	4635      	mov	r5, r6
 800cbb0:	e7df      	b.n	800cb72 <_realloc_r+0x1e>

0800cbb2 <memmove>:
 800cbb2:	4288      	cmp	r0, r1
 800cbb4:	b510      	push	{r4, lr}
 800cbb6:	eb01 0402 	add.w	r4, r1, r2
 800cbba:	d902      	bls.n	800cbc2 <memmove+0x10>
 800cbbc:	4284      	cmp	r4, r0
 800cbbe:	4623      	mov	r3, r4
 800cbc0:	d807      	bhi.n	800cbd2 <memmove+0x20>
 800cbc2:	1e43      	subs	r3, r0, #1
 800cbc4:	42a1      	cmp	r1, r4
 800cbc6:	d008      	beq.n	800cbda <memmove+0x28>
 800cbc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbcc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cbd0:	e7f8      	b.n	800cbc4 <memmove+0x12>
 800cbd2:	4601      	mov	r1, r0
 800cbd4:	4402      	add	r2, r0
 800cbd6:	428a      	cmp	r2, r1
 800cbd8:	d100      	bne.n	800cbdc <memmove+0x2a>
 800cbda:	bd10      	pop	{r4, pc}
 800cbdc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cbe0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cbe4:	e7f7      	b.n	800cbd6 <memmove+0x24>

0800cbe6 <memchr>:
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	b510      	push	{r4, lr}
 800cbea:	b2c9      	uxtb	r1, r1
 800cbec:	4402      	add	r2, r0
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	d101      	bne.n	800cbf8 <memchr+0x12>
 800cbf4:	2000      	movs	r0, #0
 800cbf6:	e003      	b.n	800cc00 <memchr+0x1a>
 800cbf8:	7804      	ldrb	r4, [r0, #0]
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	428c      	cmp	r4, r1
 800cbfe:	d1f6      	bne.n	800cbee <memchr+0x8>
 800cc00:	bd10      	pop	{r4, pc}

0800cc02 <memcpy>:
 800cc02:	440a      	add	r2, r1
 800cc04:	4291      	cmp	r1, r2
 800cc06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cc0a:	d100      	bne.n	800cc0e <memcpy+0xc>
 800cc0c:	4770      	bx	lr
 800cc0e:	b510      	push	{r4, lr}
 800cc10:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc14:	4291      	cmp	r1, r2
 800cc16:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cc1a:	d1f9      	bne.n	800cc10 <memcpy+0xe>
 800cc1c:	bd10      	pop	{r4, pc}

0800cc1e <_malloc_usable_size_r>:
 800cc1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc22:	1f18      	subs	r0, r3, #4
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	bfbc      	itt	lt
 800cc28:	580b      	ldrlt	r3, [r1, r0]
 800cc2a:	18c0      	addlt	r0, r0, r3
 800cc2c:	4770      	bx	lr
	...

0800cc30 <_init>:
 800cc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc32:	bf00      	nop
 800cc34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc36:	bc08      	pop	{r3}
 800cc38:	469e      	mov	lr, r3
 800cc3a:	4770      	bx	lr

0800cc3c <_fini>:
 800cc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc3e:	bf00      	nop
 800cc40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc42:	bc08      	pop	{r3}
 800cc44:	469e      	mov	lr, r3
 800cc46:	4770      	bx	lr
